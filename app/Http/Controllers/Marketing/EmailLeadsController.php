<?php

namespace App\Http\Controllers\Marketing;

use App\EmailLead;
use App\Http\Controllers\Controller;
use App\Imports\EmailLeadImport;
use App\LeadList;
use App\LogRequest;
use App\Mailinglist;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\View\View;
use Symfony\Component\HttpFoundation\BinaryFileResponse;

class EmailLeadsController extends Controller
{
    /**
     * @return array|\Illuminate\Contracts\View\Factory|\Illuminate\View\View
     */
    public function index(Request $request): View
    {
        $query = EmailLead::query();

        if ($request->email) {
            $query = $query->where('email', 'LIKE', '%'.$request->email.'%');
        }
        if ($request->source) {
            $query = $query->where('source', 'LIKE', '%'.$request->source.'%');
        }

        $emailLeads = $query->orderBy('id')->paginate(25)->appends(request()->except(['page']));
        $mailingList = Mailinglist::all();

        return view('marketing.emailleads.index', compact('emailLeads', 'mailingList'));
    }

    /**
     * @return array|\Illuminate\Contracts\View\Factory|\Illuminate\View\View
     */
    public function assignList(Request $request): RedirectResponse
    {
        $leadIdArray = explode(',', $request->lead_id);  //comma separated
        $listIdArray = $request->list_id;  //in_array

        $batchArray = [];
        $i = 0;
        $startTime = date('Y-m-d H:i:s', LARAVEL_START);

        if (empty($listIdArray)) {
            return redirect()->back()->with('flash_type', 'alert-danger')->with('message', 'Mailinglist cant empty, please try again');
        }

        foreach ($listIdArray as $listId) {
            foreach ($leadIdArray as $key => $leadId) {
                $EmailLeadDetail = EmailLead::where('id', $listId)->first();
                $parameters = [
                    'email' => $EmailLeadDetail->email,
                ];
                // Generated by curl-to-PHP: https://incarnate.github.io/curl-to-php/
                $ch = curl_init();
                $url = 'https://api.sendinblue.com/v3/contacts/lists/'.$leadId.'/contacts/add';
                curl_setopt($ch, CURLOPT_URL, $url);
                curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
                curl_setopt($ch, CURLOPT_POST, 1);
                curl_setopt($ch, CURLOPT_POSTFIELDS, "\n{\n     \"emails\": [\n          \"".$parameters."\"\n     ]\n}\n");

                $headers = [];
                $headers[] = 'Accept: application/json';
                $headers[] = 'Content-Type: application/json';
                $headers[] = 'Api-Key:'.config('settings.send_in_blue_api');
                curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

                $result = curl_exec($ch);
                $httpcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
                if (curl_errno($ch)) {
                    return redirect()->back()->with('flash_type', 'alert-danger')->with('message', 'Contact already in list and/or does not exist'.curl_error($ch));
                }
                curl_close($ch);

                LogRequest::log($startTime, $url, 'GET', json_encode($parameters), json_decode($result), $httpcode, EmailLeadsController::class, 'unsubscribe');
            }
        }

        foreach ($leadIdArray as $leadId) {
            foreach ($listIdArray as $listId) {
                $batchArray[$i]['erp_lead_id'] = $leadId;
                $batchArray[$i]['list_id'] = $listId;
            }
        }

        LeadList::insert($batchArray);

        return redirect()->back()->with('flash_type', 'alert-success')->with('message', 'List updated with erp lead');
    }

    public function import(Request $request): RedirectResponse
    {
        (new EmailLeadImport)->queue($request->file('file'));

        return redirect()->to('emailleads')->with('flash_type', 'alert-info')->with('message', 'Email Leads are importing in queue, existing records will be skipped.');
    }

    public function export(): BinaryFileResponse
    {
        $filename = 'email-lead-export-sample.xlsx';
        $path = public_path('sample-email-lead/'.$filename);

        return response()->download($path, $filename, [
            'Content-Type' => 'application/vnd.ms-excel',
            'Content-Disposition' => 'inline; filename="'.$filename.'"',
        ]);
    }

    public function show($id): View
    {
        if ($id) {
            $leadData = EmailLead::join('lead_lists', 'lead_lists.erp_lead_id', '=', 'email_leads.id')
                ->join('mailinglists', 'mailinglists.id', '=', 'lead_lists.list_id')
                ->select('email_leads.*', 'lead_lists.id as lead_list_id', 'mailinglists.name', 'mailinglists.id as mailinglist_id')
                ->where('email_leads.id', $id)
                ->get();

            $emailLeadData = EmailLead::find($id);

            return view('marketing.emailleads.show', compact('leadData', 'emailLeadData'));
        }
    }

    public function unsubscribe($lead_id, $lead_list_id): RedirectResponse
    {
        $data = EmailLead::find($lead_id);
        $startTime = date('Y-m-d H:i:s', LARAVEL_START);
        $curl3 = curl_init();
        $url = "https://api.sendinblue.com/v3/contacts/' . $data->email";
        curl_setopt_array($curl3, [
            CURLOPT_URL => 'https://api.sendinblue.com/v3/contacts/'.$data->email,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => '',
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 0,
            CURLOPT_FOLLOWLOCATION => true,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => 'DELETE',
            CURLOPT_HTTPHEADER => [
                'api-key: '.config('env.SEND_IN_BLUE_API'),
                'Content-Type: application/json',
            ],
        ]);
        $respw = curl_exec($curl3);
        $httpcode = curl_getinfo($curl3, CURLINFO_HTTP_CODE);
        $parameters = [];
        curl_close($curl3);
        $respw = json_decode($respw);

        LogRequest::log($startTime, $url, 'DELETE', json_encode($parameters), $respw, $httpcode, EmailLeadsController::class, 'unsubscribe');
        $res = LeadList::destroy($lead_list_id);
        if ($res) {
            return redirect()->to('emailleads')->with('flash_type', 'alert-success')->with('message', 'List has been unsubscribed.');
        } else {
            return redirect()->to('emailleads')->with('flash_type', 'alert-danger')->with('message', 'An error occurred, please try again');
        }
    }
}
