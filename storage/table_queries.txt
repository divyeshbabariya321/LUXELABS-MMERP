File: /opt/lampp/htdocs/erp/app/Category.php 
Content: <?php

namespace App;

use Nestable\NestableTrait;
use App\Helpers\ProductHelper;
use Illuminate\Support\Facades\DB;
use Illuminate\Database\Eloquent\Model;
use seo2websites\MagentoHelper\MagentoHelper;
use Exception;

/**
 * @SWG\Definition(type="object", @SWG\Xml(name="User"))
 */
class Category extends Model
{
    const UNKNOWN_CATEGORIES = 143;

    const PUSH_TYPE = [
        '0' => 'Simple',
        '1' => 'Configurable',
    ];

    use NestableTrait;

    protected $parent = 'parent_id';

    protected static $categories_with_childs = null;

    /**
     * @var string
     *
     * @SWG\Property(property="id",type="integer")
     * @SWG\Property(property="title",type="string")
     * @SWG\Property(property="parent_id",type="integer")
     * @SWG\Property(property="status_after_autocrop",type="string")
     * @SWG\Property(property="magento_id",type="integer")
     * @SWG\Property(property="show_all_id",type="integer")
     */
    public $fillable = ['id', 'title', 'parent_id', 'status_after_autocrop', 'magento_id', 'show_all_id', 'need_to_check_measurement', 'need_to_check_size', 'ignore_category', 'push_type', 'category_segment_id', 'days_refund'];

    /**
     * Get the index name for the model.
     *
     * @return string
     */
    public function childs()
    {
        return $this->hasMany(__CLASS__, 'parent_id', 'id');
    }

    public function childsOrderByTitle()
    {
        return $this->hasMany(__CLASS__, 'parent_id', 'id')->orderBy('title');
    }

    public function childLevelSencond()
    {
        return $this->hasMany(__CLASS__, 'parent_id', 'id');
    }

    public function parent()
    {
        return $this->hasOne(\App\Category::class, 'id', 'parent_id');
    }

    public function parentC()
    {
        return $this->hasOne(\App\Category::class, 'id', 'parent_id');
    }

    public function parentM()
    {
        return $this->hasOne(\App\Category::class, 'id', 'parent_id');
    }

    public static function isParent($id)
    {
        $child_count = DB::table('categories as c')
            ->where('parent_id', $id)
            ->count();

        return $child_count ? true : false;
    }

    public static function website_name($name)
    {
        $name     = '"' . $name . '"';
        $products = \App\ScrapedProducts::where('properties', 'like', '%' . $name . '%')->select('website')->distinct()->get()->pluck('website')->toArray();
        $web_name = implode(', ', $products);

        return $web_name ? $web_name : '-';
    }

    public static function hasProducts($id)
    {
        $products_count = DB::table('products as p')
            ->where('category', $id)
            ->count();

        return $products_count ? true : false;
    }

    public function categorySegmentId()
    {
        return $this->hasOne(CategorySegment::class, 'id', 'category_segment_id');
    }

    public static function getCategoryIdByKeyword($keyword, $gender = null, $genderAlternative = null)
    {
        // Set gender
        if (empty($gender)) {
            $gender = $genderAlternative;
        }

        // Check database for result
        $dbResult = self::where('title', $keyword)->get();

        // No result? Try where like
        if ($dbResult->count() == 0) {
            $dbResult = self::where('references', 'like', '%' . $keyword . '%')->whereNotIn('id', [self::UNKNOWN_CATEGORIES, 1])->get();
            $matchIds = [];
            foreach ($dbResult as $db) {
                if ($db->references) {
                    $referenceArrays = explode(',', $db->references);
                    foreach ($referenceArrays as $referenceArray) {
                        //reference
                        $referenceArray = preg_replace('/\s+/', '', $referenceArray);
                        $referenceArray = preg_replace('/[^a-zA-Z0-9_ -]/s', '', $referenceArray);

                        //category
                        $input = $keyword;
                        $input = preg_replace('/\s+/', '', $input);
                        $input = preg_replace('/[^a-zA-Z0-9_ -]/s', '', $input);
                        similar_text(strtolower($input), strtolower($referenceArray), $percent);
                        if ($percent >= 80) {
                            $matchIds[] = $db->id;
                            break;
                        }
                    }
                }
            }
            $dbResult = self::whereIn('id', $matchIds)->get();
        }

        // Still no result
        if ($dbResult === null) {
            return 0;
        }

        // Just one result
        if ($dbResult->count() == 1) {
            // Check if the category has subcategories
            $dbSubResult = Category::where('parent_id', $dbResult->first()->id)->first();
            // No results?
            if ($dbSubResult == null) {
                // Return
                return $dbResult->first()->id;
            }
        }

        // Checking the result by gender only works if the gender is set
        if (empty($gender)) {
            return 0;
        }

        // Check results
        foreach ($dbResult as $result) {
            // Get parent Id
            $parentId = $result->parent_id;

            // Return 0 for a top category
            if ($parentId == 0) {
                return $result->id;
            }

            // Category directly under women? We don't want this - return 0
            if ($parentId == 2 && strtolower($gender) == 'women') {
                return 0;
            }

            // Category directly under men? We don't want this - return 0
            if ($parentId == 3 && strtolower($gender) == 'men') {
                return 0;
            }

            if ($parentId == 146 && strtolower($gender) == 'kids') {
                return 0;
            }

            // Other
            if ($parentId > 0) {
                // Store category ID
                $categoryId = $result->id;

                // Get parent
                $dbParentResult = Category::find($result->parent_id);

                // No result
                if ($dbParentResult->count() == 0) {
                    return 0;
                }

                // Return correct result for women
                if ($dbParentResult->parent_id == 2 && strtolower($gender) == 'women') {
                    return $categoryId;
                }

                // Return correct result for men
                if ($dbParentResult->parent_id == 3 && strtolower($gender) == 'men') {
                    return $categoryId;
                }

                // Return correct result for kids
                if ($dbParentResult->parent_id == 146 && strtolower($gender) == 'kids') {
                    return $categoryId;
                }
            }
        }
    }

    public static function getCategoryPathById($categoryId = '')
    {
        // If we don't have an ID, return an empty string
        if (empty($categoryId)) {
            return '';
        }

        // Set empty category path
        $categoryPath = '';

        // Get category from database
        $category = Category::find($categoryId);

        // Do we have data?
        if ($category !== null) {
            // Set initial title
            $categoryPath = $category->title;

            // Loop while we haven't reached the top category
            while ($category && $category->parent_id > 0) {
                // Get next category from database
                $category = Category::find($category->parent_id);

                // Update category path
                if ($category !== null) {
                    $categoryPath = $category->title . ' > ' . $categoryPath;
                }
            }
        }

        // Return category path
        return $categoryPath;
    }

    public static function getCategoryTreeMagento($id)
    {
        // Load new category model
        $category = new Category();

        // Create category instance
        $categoryInstance = $category->find($id);

        // Set empty category tree for holding categories
        $categoryTree = [];

        // Continue only if category is not null
        if ($categoryInstance !== null) {
            // Load initial category
            $categoryTree[] = $categoryInstance->magento_id;

            // Set parent ID
            $parentId = $categoryInstance->parent_id;

            // Loop until we found the top category
            while ($parentId != 0) {
                // find next category
                $categoryInstance = $category->find($parentId);

                // Add category to tree
                $categoryTree[] = $categoryInstance->magento_id;

                // Add additional category to tree
                if (! empty($categoryInstance->show_all_id)) {
                    $categoryTree[] = $categoryInstance->show_all_id;
                }

                // Set new parent ID
                $parentId = $categoryInstance->parent_id;
            }
        }

        // Return reverse array
        return array_reverse($categoryTree);
    }

    public static function getCategoryTreeMagentoWithPosition($id, $website, $needOrigin = false)
    {
        $categoryMulti = StoreWebsiteCategory::where('category_id', $id)->where('store_website_id', $website->id)->first();
        // Load new category model
        $category = new Category();

        // Create category instance
        $categoryInstance = $category->find($id);

        // Set empty category tree for holding categories
        $categoryTree = [];
        $topParent    = ProductHelper::getTopParent($id);

        // Continue only if category is not null
        if ($categoryInstance !== null && $categoryMulti) {
            // Load initial category
            if ($needOrigin) {
                $categoryTree[] = ['position' => 1, 'category_id' => $categoryMulti->remote_id, 'org_id' => $categoryMulti->category_id, 'topParent' => $topParent];
            } else {
                $categoryTree[] = ['position' => 1, 'category_id' => $categoryMulti->remote_id, 'topParent' => $topParent];
            }

            // Set parent ID
            $parentId = $categoryInstance->parent_id;

            // Loop until we found the top category
            while ($parentId != 0) {
                // find next category
                $categoryInstance = $category->find($parentId);

                $categoryMultiChild = StoreWebsiteCategory::where('category_id', $parentId)->where('store_website_id', $website->id)->first();
                if ($categoryMultiChild) {
                    if ($categoryInstance->parent_id == 0) {
                        if ($needOrigin) {
                            $categoryTree[] = ['position' => 2, 'category_id' => $categoryMultiChild->remote_id, 'org_id' => $categoryMultiChild->category_id];
                        } else {
                            $categoryTree[] = ['position' => 2, 'category_id' => $categoryMultiChild->remote_id];
                        }
                    } else {
                        if ($categoryInstance->parent_id == 0) {
                            if ($needOrigin) {
                                $categoryTree[] = ['position' => 3, 'category_id' => $categoryMultiChild->remote_id, 'org_id' => $categoryMultiChild->category_id];
                            } else {
                                $categoryTree[] = ['position' => 3, 'category_id' => $categoryMultiChild->remote_id];
                            }
                        } else {
                            if ($needOrigin) {
                                $categoryTree[] = ['position' => 4, 'category_id' => $categoryMultiChild->remote_id, 'org_id' => $categoryMultiChild->category_id];
                            } else {
                                $categoryTree[] = ['position' => 4, 'category_id' => $categoryMultiChild->remote_id];
                            }
                        }
                    }
                }

                // Set new parent ID
                $parentId = $categoryInstance->parent_id;
            }
        }

        // Return reverse array
        return array_reverse($categoryTree);
    }

    public static function getCroppingGridImageByCategoryId($categoryId)
    {
        $imagesForGrid = [
            'Shoes'                  => 'shoes_grid.png',
            'Backpacks'              => 'Backpack.png',
            'Bags'                   => 'Backpack.png',
            'Beach'                  => 'Backpack.png',
            'Travel'                 => 'Backpack.png',
            'Travel Bag'             => 'Backpack.png',
            'Travel Bags'            => 'Backpack.png',
            'Belt'                   => 'belt.png',
            'Belts'                  => 'belt.png',
            'Clothing'               => 'Clothing.png',
            'Skirts'                 => 'Clothing.png',
            'Pullovers'              => 'Clothing.png',
            'Shirt'                  => 'Clothing.png',
            'Dresses'                => 'Clothing.png',
            'Kaftan'                 => 'Clothing.png',
            'Tops'                   => 'Clothing.png',
            'Jumpers & Jump Suits'   => 'Clothing.png',
            'Pant'                   => 'Clothing.png',
            'Pants'                  => 'Clothing.png',
            'Dress'                  => 'Clothing.png',
            'Sweatshirt/s & Hoodies' => 'Clothing.png',
            'Shirts'                 => 'Clothing.png',
            'Denim'                  => 'Clothing.png',
            'Sweat Pants'            => 'Clothing.png',
            'T-Shirts'               => 'Clothing.png',
            'Sweater'                => 'Clothing.png',
            'Sweaters'               => 'Clothing.png',
            'Clothings'              => 'Clothing.png',
            'Coats & Jackets'        => 'Clothing.png',
            'Tie & Bow Ties'         => 'Bow.png',
            'Clutches'               => 'Clutch.png',
            'Clutches & Slings'      => 'Clutch.png',
            'Document Holder'        => 'Clutch.png',
            'Clutch Bags'            => 'Clutch.png',
            'Crossbody Bag'          => 'Clutch.png',
            'Wristlets'              => 'Clutch.png',
            'Crossbody Bags'         => 'Clutch.png',
            'Make-Up Bags'           => 'Clutch.png',
            'Belt Bag'               => 'Clutch.png',
            'Belt Bags'              => 'Clutch.png',
            'Hair Accessories'       => 'Hair_accessories.png',
            'Beanies & Caps'         => 'Hair_accessories.png',
            'Handbags'               => 'Handbag.png',
            'Duffle Bags'            => 'Handbag.png',
            'Laptop Bag'             => 'Handbag.png',
            'Bucket Bags'            => 'Handbag.png',
            'Laptop Bags'            => 'Handbag.png',
            'Jewelry'                => 'Jewellery.png',
            'Shoulder Bags'          => 'Shoulder_bag.png',
            'Sunglasses & Frames'    => 'Sunglasses.png',
            'Gloves'                 => 'Sunglasses.png', //need to be made for gloves
            'Tote Bags'              => 'Tote.png',
            'Wallet'                 => 'Wallet.png',
            'Wallets & Cardholder'   => 'Wallet.png',
            'Wallets & Cardholders'  => 'Wallet.png',
            'Key Pouches'            => 'Wallet.png',
            'Key Pouch'              => 'Wallet.png',
            'Coin Case / Purse'      => 'Wallet.png',
            'Shawls And Scarves'     => 'Shawl.png',
            'Shawls And Scarve'      => 'Shawl.png',
            'Scarves & Wraps'        => 'Shawl.png',
            'Key Rings & Chains'     => 'Keychains.png',
            'Key Rings & Chain'      => 'Keychains.png',
            'Watches'                => 'Keychains.png',
            'Watch'                  => 'Keychains.png',
        ];

        $category = Category::find($categoryId);
        if (isset($category->title)) {
            $catName = $category->title;

            if (array_key_exists($catName, $imagesForGrid)) {
                return $imagesForGrid[$catName];
            }

            if ($category->parent_id > 1) {
                $category = Category::find($category->parent_id);

                return $imagesForGrid[trim($category->title)] ?? '';
            }
        }

        return '';
    }

    public function suppliercategorycount()
    {
        return $this->hasOne(SupplierCategoryCount::class, 'category_id', 'id');
    }

    public static function list()
    {
        return self::pluck('title', 'id')->toArray();
    }

    public static function pushStoreWebsiteCategory($categories, $stores)
    {
        $notInclude = [1, 143, 144];

        $categories    = Category::query()->whereIn('id', $categories)->orderBy('parent_id', 'asc')->with('parent')->get();
        $storeWebsites = \App\StoreWebsite::whereIn('id', $stores)->where('api_token', '!=', '')->where('website_source', 'magento')->get();

        if (! $categories->isEmpty()) {
            foreach ($categories as $category) {
                if (! $storeWebsites->isEmpty()) {
                    foreach ($storeWebsites as $store) {
                        $swi = $store->id;
                        try {
                            if ($category->parent_id == 0) {
                                $case = 'single';
                            } elseif (! empty($category->parentM) && $category->parentM->parent_id == 0) {
                                $case = 'second';
                            } elseif (! empty($category->parentM) && ! empty($category->parentM->parentM) && $category->parentM->parentM->parent_id == 0) {
                                $case = 'third';
                            } elseif (! empty($category->parentM) && ! empty($category->parentM->parentM) && ! empty($category->parentM->parentM->parentM) && $category->parentM->parentM->parentM->parent_id == 0) {
                                $case = 'fourth';
                            }

                            if ($case == 'single') {
                                $data['id']       = $category->id;
                                $data['level']    = 1;
                                $data['name']     = ucwords($category->title);
                                $data['parentId'] = 0;
                                $parentId         = 0;

                                $categ        = MagentoHelper::createCategory($parentId, $data, $swi);
                                $checkIfExist = StoreWebsiteCategory::where('store_website_id', $swi)
                                ->where('category_id', $category->id)
                                ->where('remote_id', $categ)
                                ->first();
                                if (empty($checkIfExist)) {
                                    $storeWebsiteCategory                   = new StoreWebsiteCategory();
                                    $storeWebsiteCategory->category_id      = $category->id;
                                    $storeWebsiteCategory->store_website_id = $swi;
                                    $storeWebsiteCategory->remote_id        = $categ;
                                    $storeWebsiteCategory->save();
                                }
                            }

                            //if case second
                            if ($case == 'second') {
                                $parentCategory = StoreWebsiteCategory::where('store_website_id', $swi)
                                    ->where('category_id', $category->parentM->id)
                                    ->where('remote_id', '>', 0)
                                    ->first();
                                //if parent remote null then send to magento first
                                if (empty($parentCategory)) {
                                    $data['id']       = $category->parentM->id;
                                    $data['level']    = 1;
                                    $data['name']     = ucwords($category->parentM->title);
                                    $data['parentId'] = 0;
                                    $parentId         = 0;

                                    $parentCategoryDetails = MagentoHelper::createCategory($parentId, $data, $swi);

                                    if ($parentCategoryDetails) {
                                        $checkIfExist = StoreWebsiteCategory::where('store_website_id', $swi)
                                            ->where('category_id', $category->parentM->id)
                                            ->where('remote_id', $parentCategoryDetails)
                                            ->first();

                                        if (empty($checkIfExist)) {
                                            $storeWebsiteCategory                   = new StoreWebsiteCategory();
                                            $storeWebsiteCategory->category_id      = $category->parentM->id;
                                            $storeWebsiteCategory->store_website_id = $swi;
                                            $storeWebsiteCategory->remote_id        = $parentCategoryDetails;
                                            $storeWebsiteCategory->save();
                                        }
                                    }
                                    $parentRemoteId = $parentCategoryDetails;
                                } else {
                                    $parentRemoteId = $parentCategory->remote_id;
                                }

                                $data['id']       = $category->id;
                                $data['level']    = 2;
                                $data['name']     = ucwords($category->title);
                                $data['parentId'] = $parentRemoteId;

                                $categoryDetail = MagentoHelper::createCategory($parentRemoteId, $data, $swi);

                                if ($categoryDetail) {
                                    $checkIfExist = StoreWebsiteCategory::where('store_website_id', $swi)
                                        ->where('category_id', $category->id)
                                        ->where('remote_id', $categoryDetail)
                                        ->first();

                                    if (empty($checkIfExist)) {
                                        $storeWebsiteCategory                   = new StoreWebsiteCategory();
                                        $storeWebsiteCategory->category_id      = $category->id;
                                        $storeWebsiteCategory->store_website_id = $swi;
                                        $storeWebsiteCategory->remote_id        = $categoryDetail;
                                        $storeWebsiteCategory->save();
                                    }
                                }
                            }

                            //if case third
                            if ($case == 'third') {
                                //Find Parent
                                $parentCategory = StoreWebsiteCategory::where('store_website_id', $swi)->where('category_id', $category->id)->where('remote_id', '>', 0)->first();

                                //Check if parent had remote id
                                if (empty($parentCategory)) {
                                    //check for grandparent
                                    $grandCategory       = Category::find($category->parentM->id);
                                    $grandCategoryDetail = StoreWebsiteCategory::where('store_website_id', $swi)
                                        ->where('category_id', $grandCategory->parentM->id)
                                        ->where('remote_id', '>', 0)
                                        ->first();

                                    if (empty($grandCategoryDetail)) {
                                        $data['id']       = $grandCategory->parentM->id;
                                        $data['level']    = 1;
                                        $data['name']     = ucwords($grandCategory->parentM->title);
                                        $data['parentId'] = 0;
                                        $parentId         = 0;

                                        $grandCategoryDetails = MagentoHelper::createCategory($parentId, $data, $swi);

                                        if ($grandCategoryDetails) {
                                            $checkIfExist = StoreWebsiteCategory::where('store_website_id', $swi)
                                                ->where('category_id', $grandCategory->parentM->id)
                                                ->where('remote_id', $grandCategoryDetails)
                                                ->first();

                                            if (empty($checkIfExist)) {
                                                $storeWebsiteCategory                   = new StoreWebsiteCategory();
                                                $storeWebsiteCategory->category_id      = $grandCategory->parentM->id;
                                                $storeWebsiteCategory->store_website_id = $swi;
                                                $storeWebsiteCategory->remote_id        = $grandCategoryDetails;
                                                $storeWebsiteCategory->save();
                                            }
                                        }

                                        $grandRemoteId = $grandCategoryDetails;
                                    } else {
                                        $grandRemoteId = $grandCategoryDetail->remote_id;
                                    }
                                    //Search for child category

                                    $childCategoryE = StoreWebsiteCategory::where('store_website_id', $swi)
                                        ->where('category_id', $category->parentM->id)
                                        ->where('remote_id', '>', 0)
                                        ->first();

                                    if (! $childCategoryE) {
                                        $data['id']       = $category->parentM->id;
                                        $data['level']    = 2;
                                        $data['name']     = ucwords($category->parentM->title);
                                        $data['parentId'] = $grandRemoteId;
                                        $parentId         = $grandRemoteId;

                                        $childCategoryDetails = MagentoHelper::createCategory($parentId, $data, $swi);

                                        $checkIfExist = StoreWebsiteCategory::where('store_website_id', $swi)
                                            ->where('category_id', $category->parentM->id)
                                            ->where('remote_id', $childCategoryDetails)
                                            ->first();

                                        if (empty($checkIfExist)) {
                                            $storeWebsiteCategory                   = new StoreWebsiteCategory();
                                            $storeWebsiteCategory->category_id      = $category->parentM->id;
                                            $storeWebsiteCategory->store_website_id = $swi;
                                            $storeWebsiteCategory->remote_id        = $childCategoryDetails;
                                            $storeWebsiteCategory->save();
                                        }
                                    } else {
                                        $childCategoryDetails = $childCategoryE->remote_id;
                                    }

                                    $data['id']       = $category->id;
                                    $data['level']    = 3;
                                    $data['name']     = ucwords($category->title);
                                    $data['parentId'] = $childCategoryDetails;

                                    $categoryDetail = MagentoHelper::createCategory($childCategoryDetails, $data, $swi);
                                    if ($categoryDetail) {
                                        $checkIfExist = StoreWebsiteCategory::where('store_website_id', $swi)
                                            ->where('category_id', $category->id)
                                            ->where('remote_id', $categoryDetail)
                                            ->first();

                                        if (empty($checkIfExist)) {
                                            $storeWebsiteCategory                   = new StoreWebsiteCategory();
                                            $storeWebsiteCategory->category_id      = $category->id;
                                            $storeWebsiteCategory->store_website_id = $swi;
                                            $storeWebsiteCategory->remote_id        = $categoryDetail;
                                            $storeWebsiteCategory->save();
                                        }
                                    }
                                }
                            }

                            if ($case == 'fourth') {
                                //Find Parent
                                $main = StoreWebsiteCategory::where('store_website_id', $swi)->where('category_id', $category->id)->where('remote_id', '>', 0)->first();

                                //Check if parent had remote id
                                if (empty($main)) {
                                    //check for grandparent
                                    $first = $category->parentM->parentM->parentM->id;

                                    $storewebsiteFirst = StoreWebsiteCategory::where('store_website_id', $swi)
                                        ->where('category_id', $first)
                                        ->where('remote_id', '>', 0)
                                        ->first();

                                    if (empty($storewebsiteFirst)) {
                                        $firstModel = Category::find($first);

                                        $data['id']       = $firstModel->id;
                                        $data['level']    = 1;
                                        $data['name']     = ucwords($firstModel->title);
                                        $data['parentId'] = 0;
                                        $parentId         = 0;

                                        $grandGrandCategoryDetails = MagentoHelper::createCategory($parentId, $data, $swi);

                                        if ($grandGrandCategoryDetails) {
                                            $checkIfExist = StoreWebsiteCategory::where('store_website_id', $swi)
                                                ->where('category_id', $firstModel->id)
                                                ->where('remote_id', $grandGrandCategoryDetails)
                                                ->first();

                                            if (empty($checkIfExist)) {
                                                $storeWebsiteCategory                   = new StoreWebsiteCategory();
                                                $storeWebsiteCategory->category_id      = $firstModel->id;
                                                $storeWebsiteCategory->store_website_id = $swi;
                                                $storeWebsiteCategory->remote_id        = $grandGrandCategoryDetails;
                                                $storeWebsiteCategory->save();
                                            }
                                        }

                                        $grandGrandRemoteId = $grandGrandCategoryDetails;
                                    } else {
                                        $grandGrandRemoteId = $storewebsiteFirst->remote_id;
                                    }

                                    $grandCategory       = Category::find($category->parentM->id);
                                    $grandCategoryDetail = StoreWebsiteCategory::where('store_website_id', $swi)
                                        ->where('category_id', $grandCategory->parentM->id)
                                        ->where('remote_id', '>', 0)
                                        ->first();

                                    if (empty($grandCategoryDetail)) {
                                        $data['id']       = $grandCategory->parentM->id;
                                        $data['level']    = 2;
                                        $data['name']     = ucwords($grandCategory->parentM->title);
                                        $data['parentId'] = $grandGrandRemoteId;
                                        $parentId         = $grandGrandRemoteId;

                                        $grandCategoryDetails = MagentoHelper::createCategory($parentId, $data, $swi);

                                        if ($grandCategoryDetails) {
                                            $checkIfExist = StoreWebsiteCategory::where('store_website_id', $swi)
                                                ->where('category_id', $grandCategory->parentM->id)
                                                ->where('remote_id', $grandCategoryDetails)
                                                ->first();

                                            if (empty($checkIfExist)) {
                                                $storeWebsiteCategory                   = new StoreWebsiteCategory();
                                                $storeWebsiteCategory->category_id      = $grandCategory->parentM->id;
                                                $storeWebsiteCategory->store_website_id = $swi;
                                                $storeWebsiteCategory->remote_id        = $grandCategoryDetails;
                                                $storeWebsiteCategory->save();
                                            }
                                        }

                                        $grandRemoteId = $grandCategoryDetails;
                                    } else {
                                        $grandRemoteId = $grandCategoryDetail->remote_id;
                                    }
                                    //Search for child category

                                    $childCategoryE = StoreWebsiteCategory::where('store_website_id', $swi)
                                        ->where('category_id', $category->parentM->id)
                                        ->where('remote_id', '>', 0)
                                        ->first();

                                    if (! $childCategoryE) {
                                        $data['id']       = $category->parentM->id;
                                        $data['level']    = 3;
                                        $data['name']     = ucwords($category->parentM->title);
                                        $data['parentId'] = $grandRemoteId;
                                        $parentId         = $grandRemoteId;

                                        $childCategoryDetails = MagentoHelper::createCategory($parentId, $data, $swi);

                                        $checkIfExist = StoreWebsiteCategory::where('store_website_id', $swi)
                                            ->where('category_id', $category->parentM->id)
                                            ->where('remote_id', $childCategoryDetails)
                                            ->first();

                                        if (empty($checkIfExist)) {
                                            $storeWebsiteCategory                   = new StoreWebsiteCategory();
                                            $storeWebsiteCategory->category_id      = $category->parentM->id;
                                            $storeWebsiteCategory->store_website_id = $swi;
                                            $storeWebsiteCategory->remote_id        = $childCategoryDetails;
                                            $storeWebsiteCategory->save();
                                        }
                                    } else {
                                        $childCategoryDetails = $childCategoryE->remote_id;
                                    }

                                    $data['id']       = $category->id;
                                    $data['level']    = 4;
                                    $data['name']     = ucwords($category->title);
                                    $data['parentId'] = $childCategoryDetails;

                                    $categoryDetail = MagentoHelper::createCategory($childCategoryDetails, $data, $swi);
                                    if ($categoryDetail) {
                                        $checkIfExist = StoreWebsiteCategory::where('store_website_id', $swi)
                                            ->where('category_id', $category->id)
                                            ->where('remote_id', $categoryDetail)
                                            ->first();

                                        if (empty($checkIfExist)) {
                                            $storeWebsiteCategory                   = new StoreWebsiteCategory();
                                            $storeWebsiteCategory->category_id      = $category->id;
                                            $storeWebsiteCategory->store_website_id = $swi;
                                            $storeWebsiteCategory->remote_id        = $categoryDetail;
                                            $storeWebsiteCategory->save();
                                        }
                                    }
                                }
                            }
                        } catch (Exception $e) {
                            \Log::error($e);
                        }
                    }
                }
            }
        }
    }

    public static function ScrapedProducts($name)
    {
        $name = strtolower(str_replace('/', ',', $name));

        return \App\ScrapedProducts::where('categories', $name)->count();
    }

    public static function updateCategoryAuto($name)
    {
        $expression = explode('/', $name);
        $matched    = null;

        $liForMen   = ['MAN', 'MEN', 'UOMO', 'MALE'];
        $liForWoMen = ['WOMAN', 'WOMEN', 'DONNA', 'FEMALE'];
        $liForKids  = ['KIDS'];

        $mainCategory = false;

        if (! empty($expression)) {
            foreach ($expression as $exr) {
                foreach ($liForMen as $li) {
                    if (strtolower($li) == strtolower($exr)) {
                        $mainCategory = 3;
                    }
                }

                foreach ($liForWoMen as $li) {
                    if (strtolower($li) == strtolower($exr)) {
                        $mainCategory = 2;
                    }
                }

                foreach ($liForKids as $li) {
                    if (strtolower($li) == strtolower($exr)) {
                        $mainCategory = 146;
                    }
                }

                if (self::$categories_with_childs === null) {
                    self::$categories_with_childs = self::with('parentC.parentM')->get();
                }

                $category = [];

                foreach (self::$categories_with_childs as $index => $single_category) {
                    if (strtolower($single_category->title) == strtolower($exr)) {
                        $category[] = $single_category;
                    }
                }

                if (! empty($category)) {
                    $matched = $category;
                }
            }
        }

        // now check that last matched has more then three leavle
        if ($matched) {
            foreach ($matched as $match) {
                $levelone = $match->parentC;

                if ($levelone) {
                    $leveltwo = $levelone->parentM;
                    if ($leveltwo) {
                        if ($leveltwo->id == $mainCategory || $leveltwo->parent_id == $mainCategory) {
                            return $match;
                        }
                    // now as this is matched we can send this category to that it is matched
                    } else {
                        if ($levelone->id == $mainCategory || $levelone->parent_id == $mainCategory) {
                            return $match;
                        }
                    }
                } else {
                    if ($match->id == $mainCategory || $match->parent_id == $mainCategory) {
                        return $match;
                    }
                }
            }
        }

        return false;
    }

    public static function updateCategoryAutoSpace($name)
    {
        $categories   = \App\Category::where('id', '!=', 143)->get();
        $matchedWords = [];
        foreach ($categories as $cat) {
            if (strpos(strtolower($name), strtolower($cat->title)) !== false) {
                $matchedWords[$cat->id] = $cat->title;
            } else {
                $referencesWords = explode(',', $cat->references);
                foreach ($referencesWords as $referencesWord) {
                    if (! empty($referencesWord)) {
                        if (strpos(strtolower($name), strtolower($referencesWord)) !== false) {
                            $matchedWords[$cat->id] = $cat->title;
                        }
                    }
                }
            }
        }

        $latestMatch = $matchedWords;
        $liForMen    = ['MAN', 'MEN', 'UOMO', 'MALE'];
        $liForWoMen  = ['WOMAN', 'WOMEN', 'DONNA', 'FEMALE'];
        $liForKids   = ['KIDS'];

        $mainCategory = false;

        if (! empty($matchedWords)) {
            foreach ($matchedWords as $matchedWord) {
                foreach ($liForMen as $li) {
                    if (strtolower($li) == strtolower($matchedWord)) {
                        if (! $mainCategory) {
                            $mainCategory = 3;
                        }
                    }
                }

                foreach ($liForWoMen as $li) {
                    if (strtolower($li) == strtolower($matchedWord)) {
                        if (! $mainCategory) {
                            $mainCategory = 2;
                        }
                    }
                }

                foreach ($liForKids as $li) {
                    if (strtolower($li) == strtolower($matchedWord)) {
                        if (! $mainCategory) {
                            $mainCategory = 146;
                        }
                    }
                }
            }
        }

        $rv = array_reverse($matchedWords, true);

        if (! empty($rv)) {
            foreach ($rv as $key => $value) {
                $category = \App\Category::find($key);
                if ($category) {
                    $levelone = $category->parentM;
                    if ($levelone) {
                        $leveltwo = $levelone->parentM;
                        if ($leveltwo) {
                            if ($leveltwo->id == $mainCategory || $leveltwo->parent_id == $mainCategory) {
                                return $category;
                            }
                        // now as this is matched we can send this category to that it is matched
                        } else {
                            if ($levelone->id == $mainCategory || $levelone->parent_id == $mainCategory) {
                                return $category;
                            }
                        }
                    } else {
                        if ($category->id == $mainCategory || $category->parent_id == $mainCategory) {
                            return $category;
                        }
                    }
                }
            }
        }

        return false;
    }

    public function getSizeChart($websiteId = 0)
    {
        $sizeCharts = null;
        if ($this->id == 5) {
            if ($websiteId == 5) {
                $sizeCharts = 'https://erp.theluxuryunlimited.com/images/size-chart-images/AC/ac-men-shoes-size-chart.jpg';
            }
            if ($websiteId == 9) {
                $sizeCharts = 'https://erp.theluxuryunlimited.com/images/size-chart-images/BL/bl-men-shoes-size-chart.jpg';
            }
            if ($websiteId == 17) {
                $sizeCharts = 'https://erp.theluxuryunlimited.com/images/size-chart-images/VL/vl-men-shoes-size-chart.jpg';
            }
            if ($websiteId == 1) {
                $sizeCharts = 'https://erp.theluxuryunlimited.com/images/size-chart-images/SOLO/solo-men-shoes-size-chart.jpg';
            }
            if ($websiteId == 3) {
                $sizeCharts = 'https://erp.theluxuryunlimited.com/images/size-chart-images/SN/sn-men-shoes-size-chart.jpg';
            }
        }

        if ($this->id == 41) {
            if ($websiteId == 5) {
                $sizeCharts = 'https://erp.theluxuryunlimited.com/images/size-chart-images/AC/ac-women-shoes-size-chart.jpg';
            }
            if ($websiteId == 9) {
                $sizeCharts = 'https://erp.theluxuryunlimited.com/images/size-chart-images/BL/bl-women-shoes-size-chart.jpg';
            }
            if ($websiteId == 17) {
                $sizeCharts = 'https://erp.theluxuryunlimited.com/images/size-chart-images/VL/vl-women-shoes-size-chart.jpg';
            }
            if ($websiteId == 1) {
                $sizeCharts = 'https://erp.theluxuryunlimited.com/images/size-chart-images/SOLO/solo-women-shoes-size-chart.jpg';
            }
            if ($websiteId == 3) {
                $sizeCharts = 'https://erp.theluxuryunlimited.com/images/size-chart-images/SN/sn-women-shoes-size-chart.jpg';
            }
        }

        if ($this->id == 40) {
            if ($websiteId == 5) {
                $sizeCharts = 'https://erp.theluxuryunlimited.com/images/size-chart-images/AC/ac-womenswear-size-chart.jpg';
            }
            if ($websiteId == 9) {
                $sizeCharts = 'https://erp.theluxuryunlimited.com/images/size-chart-images/BL/bl-womenswear-size-chart.jpg';
            }
            if ($websiteId == 17) {
                $sizeCharts = 'https://erp.theluxuryunlimited.com/images/size-chart-images/VL/vl-womenswear-size-chart.jpg';
            }
            if ($websiteId == 1) {
                $sizeCharts = 'https://erp.theluxuryunlimited.com/images/size-chart-images/SOLO/solo-womenswear-size-chart.jpg';
            }
            if ($websiteId == 3) {
                $sizeCharts = 'https://erp.theluxuryunlimited.com/images/size-chart-images/SN/sn-womenswear-size-chart.jpg';
            }
        }

        if ($this->id == 12) {
            if ($websiteId == 5) {
                $sizeCharts = 'https://erp.theluxuryunlimited.com/images/size-chart-images/AC/ac-menswear-size-chart.jpg';
            }
            if ($websiteId == 9) {
                $sizeCharts = 'https://erp.theluxuryunlimited.com/images/size-chart-images/BL/bl-menswear-size-chart.jpg';
            }
            if ($websiteId == 17) {
                $sizeCharts = 'https://erp.theluxuryunlimited.com/images/size-chart-images/VL/vl-menswear-size-chart.jpg';
            }
            if ($websiteId == 1) {
                $sizeCharts = 'https://erp.theluxuryunlimited.com/images/size-chart-images/SOLO/solo-menswear-size-chart.jpg';
            }
            if ($websiteId == 3) {
                $sizeCharts = 'https://erp.theluxuryunlimited.com/images/size-chart-images/SN/sn-menswear-size-chart.jpg';
            }
        }

        if ($this->id == 180) {
            if ($websiteId == 5) {
                $sizeCharts = 'https://erp.theluxuryunlimited.com/images/size-chart-images/AC/ac-kids-size-chart.jpg';
            }
            if ($websiteId == 9) {
                $sizeCharts = 'https://erp.theluxuryunlimited.com/images/size-chart-images/BL/bl-kids-size-chart.jpg';
            }
            if ($websiteId == 17) {
                $sizeCharts = 'https://erp.theluxuryunlimited.com/images/size-chart-images/VL/vl-kids-size-chart.jpg';
            }
            if ($websiteId == 1) {
                $sizeCharts = 'https://erp.theluxuryunlimited.com/images/size-chart-images/SOLO/solo-kids-size-chart.jpg';
            }
            if ($websiteId == 3) {
                $sizeCharts = 'https://erp.theluxuryunlimited.com/images/size-chart-images/SN/sn-kids-size-chart.jpg';
            }
        }

        return $sizeCharts;
    }

    public function products()
    {
        return $this->hasMany(Product::class, 'category', 'id');
    }

    /**
     * Static Function for generate a keyword sting with category and its sub category
     * parent_id = 231 & 233 : 231 & 233 are ids of Root id called NEW and PREOWNED and we dont want t consider it in Sting
     * id = 1, 143, 144, 211, 241, 366, 372 <- these are some unwanted ids od category which we dont want to keep in generated string
     * ex: Select Category, Unknown Category, Ignore Category Reference, Ignore Category Reference,
     * Level in this query is taken for we wanted to go deep till 4 levels for category and sub category
     *
     * @param int $level
     */
    public static function getCategoryHierarchyString($level = 4): array
    {
        $query = 'WITH RECURSIVE category_path AS(
                        SELECT id, title, title AS generated_string, 1 AS level
                        FROM categories
                        WHERE parent_id IN (231, 233) AND id NOT IN (1, 143, 144, 211, 241, 366, 372)
                        UNION ALL
                    SELECT c.id, c.title, CONCAT(cp.generated_string, " ", c.title), cp.level + 1
                    FROM categories c
                    JOIN category_path cp ON  c.parent_id = cp.id
                    WHERE cp.level < ' . $level . ')
                    
                    SELECT CONCAT(cp.generated_string, " ", ksv.keyword) AS combined_string
                    FROM category_path cp
                    CROSS JOIN keyword_search_variants ksv
                    WHERE NOT EXISTS (
                          SELECT 1 FROM categories c2
                          WHERE c2.parent_id = cp.id
                        )';

        return DB::select($query);
    }

    public static function updateStatusIsHashtagsGeneratedCategories($category_id_arr)
    {
        \DB::table('categories')->whereIn('id', $category_id_arr)->where('is_hashtag_generated', 0)->update(['is_hashtag_generated' => 1]);
    }
}


File: /opt/lampp/htdocs/erp/app/ChatMessage.php 
Content: <?php

namespace App;

use Plank\Mediable\Mediable;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Http;
use Illuminate\Database\Eloquent\Model;

/**
 * @SWG\Definition(type="object", @SWG\Xml(name="User"))
 */
class ChatMessage extends Model
{
    // this is guessing status since it is not declared anywhere so
    const MESSAGE_STATUS = [
        '11' => 'Watson Reply',
        '5'  => 'Read',
        '0'  => 'Unread',
        '12' => 'Suggested Images',
    ];

    // auto reply including chatbot as well
    const AUTO_REPLY_CHAT = [
        7, 8, 9, 10, 11,
    ];

    const EXECLUDE_AUTO_CHAT = [
        7, 8, 9, 10,
    ];

    const CHAT_AUTO_BROADCAST = 8;

    const CHAT_AUTO_WATSON_REPLY = 11;

    const CHAT_SUGGESTED_IMAGES = 12;

    const CHAT_MESSAGE_APPROVED = 2;

    const ERROR_STATUS_SUCCESS = 0;

    const ERROR_STATUS_ERROR = 1;

    const ELASTIC_INDEX = 'messages';

    use Mediable;

    /**
     * @var string
     *
     * @SWG\Property(property="is_queue",type="boolean")
     * @SWG\Property(property="unique_id",type="integer")
     * @SWG\Property(property="lead_id",type="integer")
     * @SWG\Property(property="order_id",type="integer")
     * @SWG\Property(property="customer_id",type="integer")
     * @SWG\Property(property="supplier_id",type="integer")
     * @SWG\Property(property="ticket_id",type="integer")
     * @SWG\Property(property="task_id",type="integer")
     * @SWG\Property(property="erp_user",type="string")
     * @SWG\Property(property="assigned_to",type="string")
     * @SWG\Property(property="contact_id",type="integer")
     * @SWG\Property(property="dubbizle_id",type="integer")
     * @SWG\Property(property="is_reminder",type="boolean")
     * @SWG\Property(property="created_at",type="datetime")
     * @SWG\Property(property="issue_id",type="integer")
     * @SWG\Property(property="developer_task_id",type="integer")
     * @SWG\Property(property="lawyer_id",type="integer")
     * @SWG\Property(property="case_id",type="integer")
     * @SWG\Property(property="blogger_id",type="integer")
     * @SWG\Property(property="voucher_id",type="integer")
     * @SWG\Property(property="document_id",type="integer")
     * @SWG\Property(property="payment_receipt_id",type="integer")
     * @SWG\Property(property="group_id",type="integer")
     * @SWG\Property(property="old_id",type="integer")
     * @SWG\Property(property="message_application_id",type="integer")
     * @SWG\Property(property="is_chatbot",type="boolean")
     * @SWG\Property(property="sent_to_user_id",type="integer")
     * @SWG\Property(property="site_development_id",type="integer")
     * @SWG\Property(property="social_strategy_id",type="integer")
     * @SWG\Property(property="store_social_content_id",type="integer")
     * @SWG\Property(property="quoted_message_id",type="integer")
     * @SWG\Property(property="is_reviewed",type="boolean")
     * @SWG\Property(property="hubstaff_activity_summary_id",type="integer")
     * @SWG\Property(property="question_id",type="integer")
     */

    //Purpose - Add learning_id - DEVTASK-4020
    //Purpose : Add additional_data - DEVATSK-4236

    protected $fillable = ['is_queue', 'unique_id', 'bug_id', 'test_case_id', 'test_suites_id', 'lead_id', 'order_id', 'customer_id', 'supplier_id', 'vendor_id', 'charity_id', 'user_id', 'ticket_id', 'task_id', 'erp_user', 'contact_id', 'dubbizle_id', 'assigned_to', 'purchase_id', 'message', 'media_url', 'number', 'approved', 'status', 'error_status', 'resent', 'is_reminder', 'created_at', 'issue_id', 'developer_task_id', 'lawyer_id', 'case_id', 'blogger_id', 'voucher_id', 'document_id', 'group_id', 'old_id', 'message_application_id', 'is_chatbot', 'sent_to_user_id', 'site_development_id', 'social_strategy_id', 'store_social_content_id', 'quoted_message_id', 'is_reviewed', 'hubstaff_activity_summary_id', 'question_id', 'is_email', 'payment_receipt_id', 'learning_id', 'additional_data', 'hubstuff_activity_user_id', 'user_feedback_id', 'user_feedback_category_id', 'user_feedback_status', 'send_by', 'sop_user_id', 'message_en', 'from_email', 'to_email', 'email_id', 'scheduled_at', 'broadcast_numbers_id', 'flow_exit', 'task_time_reminder', 'order_status', 'ui_check_id1', 'time_doctor_activity_summary_id', 'time_doctor_activity_user_id', 'message_type', 'is_audio', 'is_auto_simulator', 'send_by_simulator'];

    protected $table = 'chat_messages';

    protected $casts = [
        'approved' => 'boolean',
    ];

    /**
     * Send WhatsApp message via Chat-Api
     *
     * @param null  $whatsAppNumber
     * @param null  $message
     * @param null  $file
     * @param mixed $number
     *
     * @return bool|mixed
     */
    public static function sendWithChatApi($number, $whatsAppNumber = null, $message = null, $file = null)
    {
        // Get configs
        $config = \Config::get('apiwha.instances');

        // Set instanceId and token
        if (isset($config[$whatsAppNumber])) {
            $instanceId = $config[$whatsAppNumber]['instance_id'];
            $token      = $config[$whatsAppNumber]['token'];
        } else {
            $instanceId = $config[0]['instance_id'];
            $token      = $config[0]['token'];
        }

        // Add plus to number and add to array
        $chatApiArray = [
            'phone' => '+' . $number,
        ];

        if ($message != null && $file == null) {
            $chatApiArray['body'] = $message;
            $link                 = 'sendMessage';
        } else {
            $exploded                 = explode('/', $file);
            $filename                 = end($exploded);
            $chatApiArray['body']     = $file;
            $chatApiArray['filename'] = $filename;
            $link                     = 'sendFile';
            $chatApiArray['caption']  = $message;
        }

        $url = "https://api.chat-api.com/instance$instanceId/$link?token=" . $token;

        $response = Http::post($url, $chatApiArray);

        if ($response->failed()) {
            $err = $response->body();
        }

        $responseData = $response->json();

        // Check for errors
        if ($response->failed()) {
            // Log error
            Log::channel('whatsapp')->debug('(file ' . __FILE__ . ' line ' . __LINE__ . ') cURL Error for number ' . $number . ':' . $err);

            return false;
        } else {
            // Log curl response
            Log::channel('chatapi')->debug('cUrl:' . $responseData . "\nMessage: " . $message . "\nFile:" . $file . "\n");

            // Check for possible incorrect response
            if (! is_array($responseData) || array_key_exists('sent', $responseData) && ! $responseData['sent']) {
                // Log error
                Log::channel('whatsapp')->debug('(file ' . __FILE__ . ' line ' . __LINE__ . ') Something was wrong with the message for number ' . $number . ': ' . $responseData);

                return false;
            } else {
                // Log successful send
                Log::channel('whatsapp')->debug('(file ' . __FILE__ . ' line ' . __LINE__ . ') Message was sent to number ' . $number . ':' . $responseData);
            }
        }

        return $responseData;
    }

    /**
     * Handle Chat-Api ACK-message
     *
     * @param mixed $json
     */
    public static function handleChatApiAck($json)
    {
        // Loop over ack
        if (isset($json['ack'])) {
            foreach ($json['ack'] as $chatApiAck) {
                // Find message
                $chatMessage = self::where('unique_id', $chatApiAck['id'])->first();

                // Chat Message found and status is set
                if ($chatMessage && isset($chatApiAck['status'])) {
                    // Set delivered
                    if ($chatApiAck['status'] == 'delivered') {
                        $chatMessage->is_delivered = 1;
                        $chatMessage->save();
                    }

                    // Set views
                    if ($chatApiAck['status'] == 'viewed') {
                        $chatMessage->is_delivered = 1;
                        $chatMessage->is_read      = 1;
                        $chatMessage->save();
                    }
                }
            }
        }
    }

    public function customer()
    {
        return $this->belongsTo(\App\Customer::class);
    }

    public function lawyer()
    {
        return $this->belongsTo(\App\Lawyer::class);
    }

    /**
     * Check if the message has received a broadcast price reply
     *
     * @return bool
     */
    public function isSentBroadcastPrice()
    {
        // Get count
        $count = $this->hasMany(\App\CommunicationHistory::class, 'model_id')->where('model_type', \App\ChatMessage::class)->where('type', 'broadcast-prices')->count();

        // Return true or false
        return $count > 0 ? true : false;
    }

    public static function updatedUnreadMessage($customerId, $status = 0)
    {
        // if reply is not auto reply or the suggested reply from chat then only update status
        if (! empty($status) && ! in_array($status, self::AUTO_REPLY_CHAT)) {
            self::where('customer_id', $customerId)->where('status', 0)->update(['status' => 5]);
        }
    }

    public function taskUser()
    {
        return $this->hasOne(User::class, 'id', 'user_id');
    }

    public function user()
    {
        return $this->belongsTo(User::class);
    }

    public function chatmsg()
    {
        return $this->hasOne(\App\ChatMessage::class, 'user_id', 'user_id')->latest();
    }

    //END - DEVTASK-4203

    public function sendTaskUsername()
    {
        $name = '';

        if ($this->erp_user > 0) {
            $taskUser = $this->taskUser;
            if ($taskUser) {
                $name = $taskUser->name;
            }
        }

        return $name;
    }

    public function sendername()
    {
        $name = '';

        if ($this->user_id > 0) {
            $taskUser = $this->user;
            if ($taskUser) {
                $name = $taskUser->name;
            }
        }

        return $name;
    }

    public static function pendingQueueGroupList($params = [])
    {
        return self::where($params)->where('group_id', '>', 0)
            ->pluck('group_id', 'group_id')
            ->toArray();
    }

    public static function pendingQueueLeadList($params = [])
    {
        return self::where($params)->where('lead_id', '>', 0)
            ->pluck('lead_id', 'lead_id')
            ->toArray();
    }

    public static function getQueueLimit()
    {
        $limit = \App\Setting::where('name', 'is_queue_sending_limit')->first();

        return ($limit) ? json_decode($limit->val, true) : [];
    }

    public static function getQueueTime()
    {
        $limit = \App\Setting::where('name', 'is_queue_sending_time')->first();

        return ($limit) ? json_decode($limit->val, true) : [];
    }

    public static function getStartTime()
    {
        $limit = \App\Setting::where('name', 'is_queue_send_start_time')->first();

        return ($limit) ? $limit->val : 0;
    }

    public static function getEndTime()
    {
        $limit = \App\Setting::where('name', 'is_queue_send_end_time')->first();

        return ($limit) ? $limit->val : 0;
    }

    public static function getSupplierForwardTo()
    {
        $no = \App\Setting::where('name', 'supplier_forward_message_no')->first();

        return ($no) ? $no->val : 0;
    }

    public function chatBotReply()
    {
        return $this->hasOne("\App\ChatBotReply", 'chat_id', 'id');
    }

    public function chatBotReplychat()
    {
        return $this->hasOne(ChatbotReply::class, 'replied_chat_id', 'id');
    }

    public function chatBotReplychatlatest()
    {
        return $this->hasMany(ChatbotReply::class, 'replied_chat_id', 'id');
    }

    public function suggestion()
    {
        return $this->hasOne(\App\SuggestedProduct::class, 'chat_message_id', 'id');
    }

    public static function getLastImgProductId($customerId)
    {
        return \App\ChatMessage::where('customer_id', $customerId)
            ->whereNull('chat_messages.number')
            ->whereNotIn('status', array_merge(self::AUTO_REPLY_CHAT, [2]))
            ->select(['chat_messages.*'])
            ->orderBy('chat_messages.created_at', 'desc')
            ->first();
    }

    /**
     *  Get information by ids
     *
     * @param []
     * @param mixed $ids
     * @param mixed $fields
     * @param mixed $toArray
     *
     * @return mixed
     */
    public static function getInfoByIds($ids, $fields = ['*'], $toArray = false)
    {
        $list = self::whereIn('id', $ids)->select($fields)->get();

        if ($toArray) {
            $list = $list->toArray();
        }

        return $list;
    }

    /**
     *  Get information by ids
     *
     * @param []
     * @param mixed $ids
     * @param mixed $toArray
     *
     * @return mixed
     */
    public static function getGroupImagesByIds($ids, $toArray = false)
    {
        $list = \DB::table('mediables')
            ->where('mediable_type', self::class)
            ->whereIn('mediable_id', $ids)
            ->groupBy('mediable_id')
            ->select(['mediable_id', \DB::raw('group_concat(media_id) as image_ids')])
            ->get();

        if ($toArray) {
            $list = $list->toArray();
        }

        return $list;
    }

    /**
     *  Get information by ids
     *
     * @param []
     * @param mixed $field
     * @param mixed $ids
     * @param mixed $fields
     * @param mixed $params
     * @param mixed $toArray
     *
     * @return mixed
     */
    public static function getInfoByObjectIds($field, $ids, $fields = ['*'], $params = [], $toArray = false)
    {
        unset($_GET['page']);
        $list = self::whereIn($field, $ids)->where(function ($q) {
            $q->whereNull('group_id')->orWhere('group_id', 0);
        })->whereNotIn('status', self::EXECLUDE_AUTO_CHAT);

        if (! empty($params['previous']) && $params['previous'] == true && ! empty($params['lastMsg']) && is_numeric($params['lastMsg'])) {
            $list = $list->where('id', '<', $params['lastMsg']);
        }

        if (! empty($params['next']) && $params['next'] == true && ! empty($params['lastMsg'])) {
            $list = $list->where('id', '>', $params['lastMsg']);
        }

        $list = $list->orderBy('created_at', 'desc')->select($fields)->paginate(10);

        if ($toArray) {
            $list = $list->items();
        }

        return $list;
    }

    public function vendor()
    {
        return $this->belongsTo(\App\Vendor::class, 'vendor_id');
    }

    /**
     * Check send lead price
     * $customer object
     * customer
     *
     * @param mixed $customer
     * @param mixed $log_comment
     **/
    public function sendLeadPrice($customer, $log_comment = '')
    {
        $media = $this->getMedia(config('constants.attach_image_tag'))->first();
        if ($media) {
            \Log::channel('customer')->info('Media image found for customer id : ' . $customer->id);
            $log_comment = $log_comment . ' Media image found for customer with ID : ' . $customer->id;
            $mediable    = \DB::table('mediables')->where('media_id', $media->id)
                ->where('mediable_type', \App\Product::class)
                ->first();
            if (! empty($mediable)) {
                $log_comment = $log_comment . ' Mediable found for customer with ID : ' . $customer->id;
                \Log::channel('customer')->info('Mediable for customer id : ' . $customer->id);
                try {
                    app(\App\Http\Controllers\CustomerController::class)->dispatchBroadSendPrice($customer, array_unique([$mediable->mediable_id]));
                    $log_comment = $log_comment . ' Mediable dispatched with ID : ' . $mediable->mediable_id;
                } catch (Exception $e) {
                    \Log::channel('customer')->info($e->getMessage());
                }
            } else {
                $log_comment = $log_comment . ' Mediable not found ';
            }
        } else {
            $log_comment = $log_comment . ' Media not found ';
        }
    }

    /**
     * Check send lead dimention
     * $customer object
     * customer
     *
     * @param mixed $customer
     **/
    public function sendLeadDimention($customer)
    {
        $media = $this->getMedia(config('constants.attach_image_tag'))->first();
        if ($media) {
            \Log::channel('customer')->info('Media image found for customer id : ' . $customer->id);
            $mediable = \DB::table('mediables')->where('media_id', $media->id)
                ->where('mediable_type', \App\Product::class)
                ->first();
            if (! empty($mediable)) {
                \Log::channel('customer')->info('Mediable for customer id : ' . $customer->id);
                try {
                    app(\App\Http\Controllers\CustomerController::class)->dispatchBroadSendPrice($customer, array_unique([$mediable->mediable_id]), true);
                } catch (Exception $e) {
                    \Log::channel('customer')->info($e->getMessage());
                }
            }
        }
    }

    public function getRecieverUsername()
    {
        return $this->hasOne(\App\InstagramUsersList::class, 'id', 'instagram_user_id');
    }

    public function getSenderUsername()
    {
        return $this->hasOne(\App\Account::class, 'id', 'account_id');
    }
}


File: /opt/lampp/htdocs/erp/app/Console/Commands/AddBitsToMediaTable.php 
Content: <?php

namespace App\Console\Commands;

use Plank\Mediable\Media;
use App\Helpers\LogHelper;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;
use App\Helpers\CompareImagesHelper;

class AddBitsToMediaTable extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'AddBitsToMediaTable';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Command description';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        LogHelper::createCustomLogForCron($this->signature, ['message' => 'cron was started.']);
        try {
            DB::table('media')->whereNull('bits')->where('directory', 'like', '%product/%')->orderBy('id')->chunk(100, function ($medias) {
                foreach ($medias as $m) {
                    if (! DB::table('mediables')->where('media_id', $m->id)->first()) {
                        dump('skip => mediable not exist' . $m->id);
                        Media::where('id', $m->id)->update([
                            'bits' => 1,
                        ]);

                        continue;
                    }
                    $a = 'https://erp.theluxuryunlimited.com/' . $m->disk . '/' . $m->directory . '/' . $m->filename . '.' . $m->extension;
                    if (! @file_get_contents($a)) {
                        dump('skip => ' . $a);
                        Media::where('id', $m->id)->update([
                            'bits' => 0,
                        ]);

                        continue;
                    }
                    $i1 = CompareImagesHelper::createImage($a);

                    $i1 = CompareImagesHelper::resizeImage($i1, $a);

                    imagefilter($i1, IMG_FILTER_GRAYSCALE);

                    $colorMean1 = CompareImagesHelper::colorMeanValue($i1);

                    $bits1 = CompareImagesHelper::bits($colorMean1);

                    Media::where('id', $m->id)->update([
                        'bits' => implode($bits1),
                    ]);
                }
            });
            LogHelper::createCustomLogForCron($this->signature, ['message' => 'media query finished.']);
            LogHelper::createCustomLogForCron($this->signature, ['message' => 'cron was ended.']);
        } catch(Exception $e) {
            LogHelper::createCustomLogForCron($this->signature, ['Exception' => $e->getTraceAsString(), 'message' => $e->getMessage()]);

            \App\CronJob::insertLastError($this->signature, $e->getMessage());
        }
    }
}


File: /opt/lampp/htdocs/erp/app/Console/Commands/AddRoutesToGroups.php 
Content: <?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;

class AddRoutesToGroups extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'AddRoutesToGroups';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Command description';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        // Part-1
        $existing_routes = DB::table('group_routes')->get();
        foreach ($existing_routes as $r) {
            dump($r->route_id);
            $postURL = 'https://api.livechatinc.com/v3.3/configuration/action/delete_auto_access';

            $postData = [
                'id' => $r->route_id,
            ];
            $postData       = json_encode($postData, true);
            $result         = app(\App\Http\Controllers\LiveChatController::class)->curlCall($postURL, $postData, 'application/json', true, 'POST');
            $existing_route = DB::table('group_routes')->where('route_id', $r->route_id)->delete();
            dump([$result, $existing_route]);
        }
        dump('routes deleted');
        // Part-2 Create routes and update langauages to group
        $existing_themes_ids = [];
        $all_themes_ids      = [];

        // Part - 1

        $postURL = 'https://api.livechatinc.com/v3.2/configuration/action/list_groups';

        $postData = [
            'fields' => ['agent_priorities', 'routing_status'],
        ];
        $postData = json_encode($postData, true);
        $result   = app(\App\Http\Controllers\LiveChatController::class)->curlCall($postURL, $postData, 'application/json', true, 'POST');

        if ($result['err']) {
            dump(['status' => 'errors', 'errorMsg' => $result['err']], 403);
        } else {
            $response        = json_decode($result['response']);
            $existing_themes = ['General', 'Lussolicious', 'o-labels.com', 'Luxury Space', 'Italybrandoutlets', 'AvoirChic', 'Brands & Labels', 'Shades Shop', 'Sololuxury', 'VeraLusso', 'Suv&Nat', 'TheFitEdit', 'Upeau'];
            $changed_themes  = [];
            foreach ($response as $g) {
                $all_themes_ids[$g->name] = $g->id;
                if (! in_array(str_replace('theme_', '', $g->name), $existing_themes)) {
                    $data = explode('_', $g->name);
                    if (count($data) != 2) {
                        dump($g->name . ' skipped');

                        continue;
                    }
                    $lang_code = $data[1];
                    if ($lang_code == 'kr') {
                        $lang_code = 'ko';
                    } elseif ($lang_code == 'jp') {
                        $lang_code = 'ja';
                    } elseif ($lang_code == 'ge') {
                        $lang_code = 'ka';
                    }
                    $web_name = $data[0];
                    if ($web_name == 'Vera Lusso') {
                        $web_name = 'veralusso';
                    } elseif ($web_name == 'Brands & Labels') {
                        $web_name = 'brands-labels';
                    } elseif ($web_name == 'AvoirChic') {
                        $web_name = 'avoir-chic';
                    } elseif ($web_name == 'SOLO LUXURY') {
                        $web_name = 'sololuxury';
                    } elseif ($web_name == 'Suv&Nat') {
                        $web_name = 'suvandnat';
                    } elseif ($web_name == 'o-labels') {
                        $web_name = 'o-labels';
                    } elseif ($web_name == 'Italy brand outlets') {
                        $web_name = 'italybrandoutlets.myshopify.com';
                    } elseif ($web_name == 'Shades Shop') {
                        $web_name = 'the-shades-shop-com.myshopify.com';
                    } elseif ($web_name == 'TheFitEdit') {
                        $web_name = 'thefitedit';
                    } elseif ($web_name == 'Upeau') {
                        $web_name = 'upeau';
                    }
                    dump($web_name);
                    // Update language to group
                    $postURL  = 'https://api.livechatinc.com/v2/properties/group/' . $g->id;
                    $postData = [
                        'language' => $lang_code,
                    ];
                    $postData = json_encode($postData, true);
                    $result   = app(\App\Http\Controllers\LiveChatController::class)->curlCall($postURL, $postData, 'application/json', true, 'PUT');
                    $response = json_decode($result['response']);
                    if (! isset($response->error)) {
                        dump($g->id . ' ' . $g->name . ' == ' . $lang_code . ' lang updated.');
                    } else {
                        dump([$g->id . ' ' . $g->name . ' == ' . $lang_code . ' lang error.', $response]);
                    }
                    //Create route fo group
                    $postURL                = 'https://api.livechatinc.com/v3.3/configuration/action/add_auto_access';
                    $domain_values['value'] = $web_name;
                    $url_values['value']    = '-' . $data[1];
                    $postData               = [
                        'description' => $g->name,
                        'access'      => [
                            'groups' => [$g->id],
                        ],
                        'conditions' => [
                            'domain' => [
                                'values' => [$domain_values],
                            ],
                            'url' => [
                                'values' => [$url_values],
                            ],
                        ],
                        'next_id' => '310b71d0e6c6dd5809f8535a6f055b17',
                    ];
                    $postData = json_encode($postData, true);
                    $result   = app(\App\Http\Controllers\LiveChatController::class)->curlCall($postURL, $postData, 'application/json', true, 'POST');
                    $response = json_decode($result['response']);
                    dump($response);
                    if (! isset($response->error)) {
                        dump($g->id . ' ' . $g->name . ' == ' . $lang_code . ' route updated.');
                        DB::table('group_routes')->updateOrInsert([
                            'group_id' => $g->id,
                        ], [
                            'group_id'   => $g->id,
                            'route_id'   => $response->id,
                            'route_name' => $g->name,
                            'domain'     => $domain_values['value'],
                            'url'        => $url_values['value'],
                        ]);
                    }
                } else {
                    dump($g->name . ' skipped');
                }
            }
            if (isset($response->error)) {
                dump(['status' => 'errors', $response], 403);
            } else {
                dump(['status' => 'success', 'responseData' => $changed_themes], 200);
            }
        }
        dump(['existing_themes_ids' => $existing_themes_ids, 'all_themes_ids' => $all_themes_ids, 'changed_themes' => $changed_themes]);
    }
}


File: /opt/lampp/htdocs/erp/app/Console/Commands/CreateMailinglistInfluencers.php 
Content: <?php

namespace App\Console\Commands;

use App\Service;
use App\Setting;
use App\Customer;
use App\LogRequest;
use App\Mailinglist;
use App\MailinglistTemplate;
use Illuminate\Console\Command;
use App\MaillistCustomerHistory;
use App\Loggers\MailinglistIinfluencersLogs;
use App\Loggers\MailinglistIinfluencersDetailLogs;

class CreateMailinglistInfluencers extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'create-mailinglist-influencers';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'This command is using for create mailing list from influencers ';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    public $mailList = [];

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        if (Setting::get('run_mailing_command') == 1) {
            $influencers = \App\ScrapInfluencer::where(function ($q) {
                $q->orWhere('read_status', '!=', 1)->orWhereNull('read_status');
            })->where('email', '!=', '')->limit(1)->get();
            MailinglistIinfluencersLogs::log(count($influencers) . ' influencers found for CreateMailinglistInfluencers on ->' . now());

            $send_in_blue_apis    = $old_names = [];
            $send_in_blue_account = [];
            $services             = Service::pluck('name', 'id');
            $websites             = \App\StoreWebsite::select('id', 'title', 'mailing_service_id', 'send_in_blue_api', 'send_in_blue_account')->where('website_source', 'magento')->whereNotNull('mailing_service_id')->where('mailing_service_id', '>', 0)->where('id', 1)->orderBy('id', 'desc')->get();
            MailinglistIinfluencersLogs::log(count($websites) . ' websites found for CreateMailinglistInfluencers on ->' . now());

            foreach ($websites as $website) {
                $send_in_blue_apis[$website->id]    = $website->send_in_blue_api;
                $send_in_blue_account[$website->id] = $website->send_in_blue_account;
                $old_names[$website->id]            = $website->title;
                $service                            = Service::find($website->mailing_service_id);

                if ($service) {
                    $name = $website->title;
                    if ($name != '') {
                        $name     = $name . '_' . date('d_m_Y');
                        $old_name = $name . '_' . 'old_list';
                    } else {
                        $name     = 'WELCOME_LIST_' . date('d_m_Y');
                        $old_name = 'WELCOME_LIST' . '_' . 'old_list';
                    }
                    MailinglistIinfluencersLogs::log(' service  for this website is  -->' . $service->name);

                    $mailingList = \App\Mailinglist::where('name', $name)->where('service_id', $website->mailing_service_id)->where('website_id', $website->id)->where('remote_id', '>', 0)->first();

                    if (! $mailingList) {
                        MailinglistIinfluencersLogs::log(' mailingList  not found for website -->' . $website->title);

                        $mailList = \App\Mailinglist::create([
                            'name'                 => $name,
                            'website_id'           => $website->id,
                            'service_id'           => $website->mailing_service_id,
                            'send_in_blue_api'     => $website->send_in_blue_api,
                            'send_in_blue_account' => $website->send_in_blue_account,
                        ]);

                        MailinglistIinfluencersLogs::log('mailingList  created with name  -->' . $name);
                        $mailListLogID = MailinglistIinfluencersLogs::log('mailingList  created with id  -->' . $mailList->id);

                        if (strpos(strtolower($service->name), strtolower('SendInBlue')) !== false) {
                            $mailListLogID = MailinglistIinfluencersLogs::log('come to SendInBlue');
                            $url           = 'https://api.sendinblue.com/v3/contacts/lists';
                            $req           = [
                                'folderId' => 1,
                                'name'     => $name,
                            ];
                            $response = $this->callApi('https://api.sendinblue.com/v3/contacts/lists', 'POST', $data = [
                                'folderId' => 1,
                                'name'     => $name,
                            ], $website->send_in_blue_api);

                            if (isset($response->id)) {
                                $mailList->remote_id = $response->id;
                                $mailList->save();
                                $this->mailList[] = $mailList;
                            }
                        } elseif (strpos($service->name, 'AcelleMail') !== false) {
                            $mailListLogID = MailinglistIinfluencersLogs::log('come to AcelleMail');
                            $startTime     = date('Y-m-d H:i:s', LARAVEL_START);
                            $url           = 'https://acelle.theluxuryunlimited.com/api/v1/lists?api_token=' . config('env.ACELLE_MAIL_API_TOKEN');
                            $req           = ['contact[company]' => '.', 'contact[state]' => 'afdf', 'name' => $name, 'default_subject' => $name, 'from_email' => 'welcome@test.com', 'from_name' => 'dsfsd', 'contact[address_1]' => 'af', 'contact[country_id]' => '219', 'contact[city]' => 'sdf', 'contact[zip]' => 'd', 'contact[phone]' => 'd', 'contact[email]' => 'welcome@test.com'];
                            $curl          = curl_init();
                            curl_setopt_array($curl, [
                                CURLOPT_URL            => $url,
                                CURLOPT_RETURNTRANSFER => true,
                                CURLOPT_ENCODING       => '',
                                CURLOPT_MAXREDIRS      => 10,
                                CURLOPT_TIMEOUT        => 0,
                                CURLOPT_FOLLOWLOCATION => true,
                                CURLOPT_HTTP_VERSION   => CURL_HTTP_VERSION_1_1,
                                CURLOPT_CUSTOMREQUEST  => 'POST',
                                CURLOPT_POSTFIELDS     => $req,
                            ]);

                            $response = curl_exec($curl);
                            $httpcode = curl_getinfo($curl, CURLINFO_HTTP_CODE);
                            LogRequest::log($startTime, $url, 'POST', json_encode($req), json_decode($response), $httpcode, \App\Console\Commands\CreateMailinglistInfluencers::class, 'handle');
                            curl_close($curl);
                            $res = json_decode($response);
                            if ($res->status == 1) {
                                //getting last id
                                $list = Mailinglist::orderBy('id', 'desc')->first();
                                if ($list) {
                                    $id = ($list->id + 1);
                                } else {
                                    $id = 1;
                                }
                                if (isset($res->list_uid)) {
                                    $mailList->remote_id = $res->list_uid;
                                    $mailList->save();
                                    $this->mailList[] = $mailList;
                                }
                            }
                        }
                        MailinglistIinfluencersDetailLogs::Create([
                            'service'       => $service->name,
                            'maillist_id'   => $mailList->id,
                            'url'           => $url,
                            'request_data'  => json_encode($req),
                            'response_data' => json_encode($response),
                            'message'       => 'Mailist created',

                        ]);
                        $this->mailList[] = $mailList;
                    } else {
                        MailinglistIinfluencersLogs::log(' mailList  for this website found  is  -->' . $mailingList->id);

                        $this->mailList[] = $mailingList;
                    }
                } else {
                    MailinglistIinfluencersLogs::log(' service  is not found for  this website');
                }
            }

            if (! empty($influencers) && ! empty($this->mailList)) {
                foreach ($influencers as $list) {
                    foreach ($this->mailList as $mllist) {
                        $serviceName = isset($services[$mllist['service_id']]) ? $services[$mllist['service_id']] : 0;
                        if (strpos(strtolower($serviceName), strtolower('SendInBlue')) !== false) {
                            $api_key = isset($send_in_blue_apis[$mllist->website_id]) ? $send_in_blue_apis[$mllist->website_id] : '';
                            $reqData = [
                                'emails'        => [$list->email],
                                'attributes'    => ['firstname' => $list->name],
                                'updateEnabled' => true,
                            ];
                            $url      = 'https://api.sendinblue.com/v3/contacts/lists/' . $mllist->remote_id . '/contacts/add';
                            $response = $this->callApi($url, 'POST', $reqData, $api_key);
                            MailinglistIinfluencersDetailLogs::Create([
                                'service'       => $service->name,
                                'maillist_id'   => $mllist->id,
                                'email'         => $list->email,
                                'name'          => $list->name,
                                'url'           => $url,
                                'request_data'  => json_encode($reqData),
                                'response_data' => json_encode($response),
                                'message'       => 'Added contact sendinblue to mailinglist',

                            ]);
                            MailinglistIinfluencersLogs::log('Added contact sendinblue to mailinglist');
                        } elseif (strpos($serviceName, 'AcelleMail') !== false) {
                            //Assign Customer to list

                            $startTime   = date('Y-m-d H:i:s', LARAVEL_START);
                            $curl        = curl_init();
                            $ch          = curl_init(); //Here Two Times curl initialization
                            $url         = 'https://acelle.theluxuryunlimited.com/api/v1/subscribers?list_uid=' . $mllist->remote_id;
                            $requestData = [
                                'api_token' => config('env.ACELLE_MAIL_API_TOKEN'),
                                'EMAIL'     => $list->email,
                            ];
                            curl_setopt($ch, CURLOPT_URL, $url);
                            curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
                            curl_setopt($ch, CURLOPT_POST, 1);
                            curl_setopt($ch, CURLOPT_POSTFIELDS, $requestData
                            );

                            $headers   = [];
                            $headers[] = 'Accept: application/json';
                            $headers[] = 'Content-Type: application/x-www-form-urlencoded';
                            curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

                            $response = curl_exec($ch);
                            $httpcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
                            MailinglistIinfluencersDetailLogs::create([
                                'service'       => $service->name,
                                'maillist_id'   => $mllist->id,
                                'email'         => $list->email,
                                'name'          => $list->name,
                                'url'           => $url,
                                'request_data'  => $requestData,
                                'response_data' => json_encode($response),

                            ]);
                            LogRequest::log($startTime, $url, 'GET', json_encode($requestData), json_decode($response), $httpcode, \App\Console\Commands\CreateMailinglistInfluencers::class, 'handle');
                            if (curl_errno($ch)) {
                                echo 'Error:' . curl_error($ch);

                                curl_close($ch);
                            }
                        }
                    }

                    $customer = Customer::where('email', $list->email)->first();
                    if (! $customer) {
                        $customer = Customer::create([
                            'name'   => $list->name,
                            'email'  => $list->email,
                            'source' => 'scrap_influencer',
                        ]);
                        MailinglistIinfluencersLogs::log($list->email . 'Customer created');
                    } else {
                        MailinglistIinfluencersLogs::log($list->email . 'Customer find');
                    }

                    $mailing_item = MailinglistTemplate::where('auto_send', 1)->where('duration', 0)->first();
                    if (! empty($this->mailList)) {
                        foreach ($this->mailList as $mllist) {
                            $mllist->listCustomers()->attach($customer->id);
                            MailinglistIinfluencersLogs::log($list->email . 'Addded to ' . $mllist->name);
                            $api_key = isset($send_in_blue_apis[$mllist->website_id]) ? $send_in_blue_apis[$mllist->website_id] : '';

                            $maillist_customer_history              = new MaillistCustomerHistory;
                            $maillist_customer_history->customer_id = $customer->id;
                            $maillist_customer_history->attribute   = 'maillist';
                            $maillist_customer_history->new_value   = $mllist->id;
                            $maillist_customer_history->save();

                            $list_contact_id = \DB::table('list_contacts')->where(['list_id' => $mllist->id, 'customer_id' => $customer->id])->pluck('id')->first();

                            /*** send welcome email to mailing list customers start**/
                            if ($mailing_item != null and ! empty($mailing_item['static_template'])) {
                                $mllist['email'] = $list->email;
                                $mllist['name']  = $list->name;
                                MailinglistIinfluencersLogs::log($list->email . ' email send  to ' . $mailing_item['static_template']->name);
                                (new Mailinglist)->sendAutoEmails($mllist, $mailing_item, $service);
                            }
                            /*** send welcome email to mailing list customers end**/
                        }

                        // Added Code for the create maillist with backup
                        if (strpos(strtolower($services[$mllist->service_id]), strtolower('SendInBlue')) !== false) {
                            $old_name    = $old_names[$mllist->website_id] . '_old_list';
                            $oldmailList = \App\Mailinglist::where('name', $old_name)->where('website_id', $mllist->website_id)->first();
                            if (! $oldmailList) {
                                \Log::info('come to create');
                                \Log::info($old_name);
                                $oldmailList = \App\Mailinglist::create([
                                    'name'                 => $old_name,
                                    'website_id'           => $mllist->website_id,
                                    'service_id'           => $mllist->service_id,
                                    'send_in_blue_api'     => $mllist->send_in_blue_api,
                                    'send_in_blue_account' => $mllist->send_in_blue_account,
                                ]);
                                \Log::info($oldmailList);

                                MailinglistIinfluencersLogs::log('create backup Mailing list created ->' . $old_name);

                                $response = $this->callApi('https://api.sendinblue.com/v3/contacts/lists', 'POST', $data = [
                                    'folderId' => 1,
                                    'name'     => $old_name,
                                ], $api_key);

                                if (isset($response->id)) {
                                    $oldmailList->remote_id = $response->id;
                                    $oldmailList->save();
                                }
                                MailinglistIinfluencersDetailLogs::create([
                                    'service'      => $service->name,
                                    'maillist_id'  => $oldmailList->id,
                                    'message'      => "Added  Mailist $old_name",
                                    'email'        => $list->email,
                                    'name'         => $list->name,
                                    'url'          => 'https://api.sendinblue.com/v3/contacts/lists',
                                    'request_data' => json_encode([
                                        'folderId' => 1,
                                        'name'     => $name,
                                    ]),
                                    'response_data' => json_encode($response),

                                ]);
                            } else {
                                MailinglistIinfluencersLogs::log('Already exist store backup mailing  list ->' . $old_name);
                            }
                            \Log::info($oldmailList);
                            $reqData = [
                                'emails' => [$list->email],
                            ];
                            $url      = 'https://api.sendinblue.com/v3/contacts/lists/' . $mllist->remote_id . '/contacts/remove';
                            $response = $this->callApi($url, 'POST', $reqData, $api_key);
                            MailinglistIinfluencersDetailLogs::create([
                                'service'       => $service->name,
                                'maillist_id'   => $mllist->id,
                                'message'       => "Removed customer   $list->email from  Mailist $mllist->name",
                                'email'         => $list->email,
                                'name'          => $list->name,
                                'url'           => $url,
                                'request_data'  => json_encode($reqData),
                                'response_data' => json_encode($response),

                            ]);

                            $reqData = [
                                'emails'        => [$list->email],
                                'attributes'    => ['firstname' => $list->name],
                                'updateEnabled' => true,
                            ];
                            $url      = 'https://api.sendinblue.com/v3/contacts/lists/' . $oldmailList->remote_id . '/contacts/add';
                            $response = $this->callApi($url, 'POST', $reqData, $api_key);
                            MailinglistIinfluencersDetailLogs::create([
                                'service'       => $service->name,
                                'maillist_id'   => $mllist->id,
                                'message'       => "added customer   $list->email to Mailist $oldmailList->name",
                                'email'         => $list->email,
                                'name'          => $list->name,
                                'url'           => $url,
                                'request_data'  => json_encode($reqData),
                                'response_data' => json_encode($response),

                            ]);
                            $oldmailList->listCustomers()->attach($customer->id);
                            $mllist->listCustomers()->detach($customer->id);
                            $maillist_customer_history              = new MaillistCustomerHistory;
                            $maillist_customer_history->customer_id = $customer->id;
                            $maillist_customer_history->attribute   = 'maillist';
                            $maillist_customer_history->old_value   = $mllist->id;
                            $maillist_customer_history->new_value   = $oldmailList->id;
                            $maillist_customer_history->save();
                        }
                    }

                    $list->read_status = 1;
                    $list->save();
                }
            }
        }
    }

    public function callApi($url, $method, $data = [], $send_in_blue_api = '')
    {
        $startTime = date('Y-m-d H:i:s', LARAVEL_START);
        $curl      = curl_init();
        $api_key   = ($send_in_blue_api == '') ? getenv('SEND_IN_BLUE_API') : $send_in_blue_api;
        curl_setopt_array($curl, [
            CURLOPT_URL            => $url,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING       => '',
            CURLOPT_MAXREDIRS      => 10,
            CURLOPT_TIMEOUT        => 0,
            CURLOPT_FOLLOWLOCATION => true,
            CURLOPT_HTTP_VERSION   => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST  => $method,
            CURLOPT_POSTFIELDS     => json_encode($data),
            CURLOPT_HTTPHEADER     => [
                'api-key: ' . $api_key,
                'Content-Type: application/json',
            ],
        ]);

        $response = curl_exec($curl);
        $httpcode = curl_getinfo($curl, CURLINFO_HTTP_CODE);
        LogRequest::log($startTime, $url, $method, json_encode($data), json_decode($response), $httpcode, \App\Console\Commands\CreateMailinglistInfluencers::class, 'callApi');
        curl_close($curl);
        \Log::info($response);

        return json_decode($response);
    }
}


File: /opt/lampp/htdocs/erp/app/Console/Commands/DeleteKidsProductsFromProducts.php 
Content: <?php

namespace App\Console\Commands;

use App\Product;
use Carbon\Carbon;
use App\CronJobReport;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;

class DeleteKidsProductsFromProducts extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'delete:kids-products';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Command description';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        try {
            $report = CronJobReport::create([
                'signature'  => $this->signature,
                'start_time' => Carbon::now(),
            ]);

            Product::where('name', 'LIKE', '%kids%')->orWhere('short_description', 'LIKE', '%kids%')->orWhere('name', 'LIKE', '%Little boy%')->orWhere('short_description', 'LIKE', '%little boy%')->orWhere('name', 'LIKE', '%Little girl%')->orWhere('short_description', 'LIKE', '%little girl%')->chunk(1000, function ($products) {
                foreach ($products as $product) {
                    DB::table('log_scraper_vs_ai')->where('product_id', $product->id)->delete();
                    DB::table('product_suppliers')->where('product_id', $product->id)->delete();
                    DB::table('scraped_products')->where('sku', $product->sku)->delete();
                    DB::table('product_references')->where('product_id', $product->id)->delete();
                    DB::table('user_products')->where('product_id', $product->id)->delete();
                    DB::table('suggestion_products')->where('product_id', $product->id)->delete();
                    $product->forceDelete();
                    dump('deleted');
                }
            });

            $report->update(['end_time' => Carbon::now()]);
        } catch (Exception $e) {
            \App\CronJob::insertLastError($this->signature, $e->getMessage());
        }
    }
}


File: /opt/lampp/htdocs/erp/app/Console/Commands/DeleteTempImages.php 
Content: <?php

namespace App\Console\Commands;

use File;
use Carbon\Carbon;
use App\CronJobReport;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;

class DeleteTempImages extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'delete-temp-images:unused-images';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Delete Temp Images ';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        try {
            $report = CronJobReport::create([
                'signature'  => $this->signature,
                'start_time' => Carbon::now(),
            ]);
            $file_types = [
                'gif',
                'jpg',
                'jpeg',
                'png',
                'pdf',
            ];

            $directory = public_path('tmp_images');
            $files     = File::allFiles($directory);

            foreach ($files as $file) {
                $ext = strtolower(pathinfo($file, PATHINFO_EXTENSION));

                if (in_array($ext, $file_types)) {
                    $filename = pathinfo($file, PATHINFO_FILENAME);
                    if (DB::table('media')->where('filename', '=', $filename)->count()) {
                        continue; // continue if the picture is in use
                    }
                    unlink($file); // delete if picture isn't in use
                }
            }
            $report->update(['end_time' => Carbon::now()]);
        } catch (Exception $e) {
            \App\CronJob::insertLastError($this->signature, $e->getMessage());
        }
    }
}


File: /opt/lampp/htdocs/erp/app/Console/Commands/DeleteUnusedImages.php 
Content: <?php

namespace App\Console\Commands;

use File;
use Carbon\Carbon;
use App\CronJobReport;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;

class DeleteUnusedImages extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'delete:unused-images';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Command description';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        try {
            $report = CronJobReport::create([
                'signature'  => $this->signature,
                'start_time' => Carbon::now(),
            ]);

            dd('stap');
            $file_types = [
                'gif',
                'jpg',
                'jpeg',
                'png',
            ];
            $directory = public_path('uploads');
            $files     = File::allFiles($directory);

            foreach ($files as $file) {
                $ext = strtolower(pathinfo($file, PATHINFO_EXTENSION));
                if (in_array($ext, $file_types)) {
                    $filename = pathinfo($file, PATHINFO_FILENAME);

                    if (DB::table('media')->where('filename', '=', $filename)->count()) {
                        dump('in-use');

                        continue; // continue if the picture is in use
                    }

                    echo 'removed' . basename($file) . '<br />';
                    unlink($file); // delete if picture isn't in use
                }
            }

            $report->update(['end_time' => Carbon::now()]);
        } catch (Exception $e) {
            \App\CronJob::insertLastError($this->signature, $e->getMessage());
        }
    }
}


File: /opt/lampp/htdocs/erp/app/Console/Commands/FetchScrapeMissing.php 
Content: <?php

namespace App\Console\Commands;

use DB;
use App\Scraper;
use App\ScrapLog;
use Illuminate\Http\Request;
use Illuminate\Console\Command;

class FetchScrapeMissing extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'command:FetchScrapeMissing';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Fetch Scrape Missing Quatity';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        $date           = date('Y-m-d');
        $scrapped_query = DB::table('scraped_products as p')
            ->selectRaw(' count(*) as total_product ,
				   sum(CASE WHEN p.category = ""
			           OR p.category IS NULL THEN 1 ELSE 0 END) AS missing_category,
			       sum(CASE WHEN p.color = ""
			           OR p.color IS NULL THEN 1 ELSE 0 END) AS missing_color,
			       sum(CASE WHEN p.composition = ""
			           OR p.composition IS NULL THEN 1 ELSE 0 END) AS missing_composition,
			       sum(CASE WHEN p.title = ""
			           OR p.title IS NULL THEN 1 ELSE 0 END) AS missing_name,
			       sum(CASE WHEN p.description = ""
			           OR p.description IS NULL THEN 1 ELSE 0 END) AS missing_short_description,
			       sum(CASE WHEN p.price = ""
			           OR p.price IS NULL THEN 1 ELSE 0 END) AS missing_price,
			       sum(CASE WHEN p.size = ""
			           OR p.size IS NULL THEN 1 ELSE 0 END) AS missing_size,
			       `p`.`supplier`,
			       `p`.`id`,
			       `p`.`website`
				')
            ->where('p.website', '<>', '')
            ->whereRaw(" date(created_at) = date('$date') ");
        $scrapped_query = $scrapped_query->groupBy('p.website')->havingRaw('missing_category > 1 or missing_color > 1 or missing_composition > 1 or missing_name > 1 or missing_short_description >1 ');

        $scrappedReportData = $scrapped_query->get();
        foreach ($scrappedReportData as $d) {
            $missingdata = '';
            $data        = [
                'website'                   => $d->website,
                'total_product'             => $d->total_product,
                'missing_category'          => $d->missing_category,
                'missing_color'             => $d->missing_color,
                'missing_composition'       => $d->missing_composition,
                'missing_name'              => $d->missing_name,
                'missing_short_description' => $d->missing_short_description,
                'missing_price'             => $d->missing_price,
                'missing_size'              => $d->missing_size,
                'created_at'                => date('Y-m-d H:m'),
            ];

            $missingdata .= 'Total Product - ' . $d->total_product . ', ';
            $missingdata .= 'Missing Category - ' . $d->missing_category . ', ';
            $missingdata .= 'Missing Color - ' . $d->missing_color . ', ';
            $missingdata .= 'Missing Composition - ' . $d->missing_composition . ', ';
            $missingdata .= 'Missing Name - ' . $d->missing_name . ', ';
            $missingdata .= 'Missing Short Description - ' . $d->missing_short_description . ', ';
            $missingdata .= 'Missing Price - ' . $d->missing_price . ', ';
            $missingdata .= 'Missing Size - ' . $d->missing_size . ', ';

            $scrapers = Scraper::where('scraper_name', $d->website)->get();
            foreach ($scrapers as $scrapperDetails) {
                $hasAssignedIssue = \App\DeveloperTask::where('scraper_id', $scrapperDetails->id)
                    ->whereNotNull('assigned_to')->where('is_resolved', 0)->first();
                if ($hasAssignedIssue != null) {
                    $userName    = \App\User::where('id', $hasAssignedIssue->assigned_to)->pluck('name')->first();
                    $requestData = new Request();
                    $requestData->setMethod('POST');
                    $requestData->request->add(['issue_id' => $hasAssignedIssue->id, 'message' => 'Missing data', 'status' => 1]);
                    ScrapLog::create(['scraper_id' => $scrapperDetails->id, 'type' => 'missing data', 'log_messages' => $missingdata]);
                    try {
                        app(\App\Http\Controllers\WhatsAppController::class)->sendMessage($requestData, 'issue');
                        ScrapLog::create(['scraper_id' => $scrapperDetails->id, 'type' => 'missing data', 'log_messages' => $missingdata . ' and message sent to ' . $userName]);
                    } catch (Exception $e) {
                        ScrapLog::create(['scraper_id' => $scrapperDetails->id, 'type' => 'missing data', 'log_messages' => "Coundn't send message to " . $userName]);
                    }
                } else {
                    ScrapLog::create(['scraper_id' => $scrapperDetails->id, 'type' => 'missing data', 'log_messages' => 'Not assigned to any user']);
                }
            }

            $s = DB::table('scraped_product_missing_log')->where('website', $d->website)
                ->whereRaw(" date(created_at) = date('$date') ")->first();
            if ($s) {
                DB::table('scraped_product_missing_log')->where('id', $s->id)->update($data);
            } else {
                DB::table('scraped_product_missing_log')->insert($data);
            }
        }
    }
}


File: /opt/lampp/htdocs/erp/app/Console/Commands/FindTableQueries.php 
Content: <?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\File;

class FindTableQueries extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'find:table-queries';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Find all database queries using DB::table in the Laravel project';

    /**
     * Execute the console command.
     *
     * @return int
     */
    public function handle()
    {
        $queries = [];

        // Directory to search
        $directory = app_path(); // You can change this to your desired directory

        $this->traverseDirectory($directory, $queries);

        // Export queries to a file
        File::put(storage_path('table_queries.txt'), implode("\n\n", $queries));

        $this->info('Queries using DB::table exported to table_queries.txt');
    }

    /**
     * Traverse the directory and search for queries using DB::table.
     *
     * @param string $directory
     * @param array $queries
     * @return void
     */
    private function traverseDirectory($directory, &$queries)
    {
        $files = File::allFiles($directory);

        foreach ($files as $file) {
            $contents = File::get($file->getPathname());

            // Search for queries using DB::table
            if (strpos($contents, 'DB::table') !== false) {
                // Log query
                $queries[] = "File: {$file->getPathname()} \nContent: {$contents}";
            }
        }
    }
}


File: /opt/lampp/htdocs/erp/app/Console/Commands/GetOrdersFromnMagento.php 
Content: <?php

namespace App\Console\Commands;

use DB;
use App\Order;
use Validator;
use App\Colors;
use App\Product;
use App\Setting;
use App\Customer;
use App\AutoReply;
use Carbon\Carbon;
use App\ChatMessage;
use App\OrderProduct;
use App\Helpers\OrderHelper;
use App\CommunicationHistory;
use Illuminate\Console\Command;

class GetOrdersFromnMagento extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'getorders:magento';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Get Orders From Magento And Store In Database Running Every Fifteen Minutes For Now';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        try {
            $report = \App\CronJobReport::create([
                'signature'  => $this->signature,
                'start_time' => Carbon::now(),
            ]);
            $options = [
                'trace'              => true,
                'connection_timeout' => 120,
                'wsdl_cache'         => WSDL_CACHE_NONE,
            ];
            $size      = '';
            $proxy     = new \SoapClient(config('magentoapi.url'), $options);
            $sessionId = $proxy->login(config('magentoapi.user'), config('magentoapi.password'));
            $lastid    = Setting::get('lastid');
            $filter    = [
                'complex_filter' => [
                    [
                        'key'   => 'order_id',
                        'value' => ['key' => 'gt', 'value' => $lastid],
                    ],
                ],
            ];
            $orderlist = $proxy->salesOrderList($sessionId, $filter);

            for ($j = 0; $j < count($orderlist); $j++) {
                $results = json_decode(json_encode($proxy->salesOrderInfo($sessionId, $orderlist[$j]->increment_id)), true);

                $atts = unserialize($results['items'][0]['product_options']);

                if (! empty($results['total_paid'])) {
                    $paid = $results['total_paid'];
                } else {
                    $paid = 0;
                }

                $balance_amount = $results['base_grand_total'] - $paid;

                $full_name = $results['billing_address']['firstname'] . ' ' . $results['billing_address']['lastname'];

                $customer_phone = (int) str_replace(' ', '', $results['billing_address']['telephone']);
                $final_phone    = null;

                if ($customer_phone != null) {
                    if ($results['billing_address']['country_id'] == 'IN') {
                        if (strlen($customer_phone) <= 10) {
                            $customer_phone = '91' . $customer_phone;
                        }
                    }

                    $customer = Customer::where('phone', $customer_phone)->first();
                } else {
                    $customer = Customer::where('name', 'LIKE', "%$full_name%")->first();
                }

                if ($customer) {
                    $customer_id = $customer->id;

                    if ($customer_phone != null) {
                        $final_phone = $customer_phone;
                    }

                    if ($customer->credit > 0) {
                        if (($balance_amount - $customer->credit) < 0) {
                            $left_credit      = ($balance_amount - $customer->credit) * -1;
                            $balance_amount   = 0;
                            $customer->credit = $left_credit;
                        } else {
                            $balance_amount -= $customer->credit;
                            $customer->credit = 0;
                        }
                    }

                    $customer->name    = $full_name;
                    $customer->email   = $results['customer_email'];
                    $customer->address = $results['billing_address']['street'];
                    $customer->city    = $results['billing_address']['city'];
                    $customer->country = $results['billing_address']['country_id'];
                    $customer->pincode = $results['billing_address']['postcode'];
                    $customer->phone   = $final_phone;

                    $customer->save();
                } else {
                    $customer          = new Customer;
                    $customer->name    = $full_name;
                    $customer->email   = $results['customer_email'];
                    $customer->address = $results['billing_address']['street'];
                    $customer->city    = $results['billing_address']['city'];
                    $customer->country = $results['billing_address']['country_id'];
                    $customer->pincode = $results['billing_address']['postcode'];
                    $temp_number       = [];

                    if ($customer_phone != null) {
                        $temp_number['phone'] = $customer_phone;
                    } else {
                        $temp_number['phone'] = self::generateRandomString();
                    }

                    $final_phone     = self::validatePhone($temp_number);
                    $customer->phone = $final_phone;

                    $customer->save();

                    $customer_id = $customer->id;
                }

                $order_status   = '';
                $payment_method = '';

                if ($results['payment']['method'] == 'paypal') {
                    if ($results['state'] == 'processing') {
                        $order_status = OrderHelper::$prepaid;
                    } else {
                        $order_status = OrderHelper::$followUpForAdvance;
                    }

                    $payment_method = 'paypal';
                } elseif ($results['payment']['method'] == 'banktransfer') {
                    if ($results['state'] == 'processing') {
                        $order_status = OrderHelper::$prepaid;
                    } else {
                        $order_status = OrderHelper::$followUpForAdvance;
                    }
                    $payment_method = 'banktransfer';
                } elseif ($results['payment']['method'] == 'cashondelivery') {
                    if ($results['state'] == 'processing') {
                        $order_status = OrderHelper::$prepaid;
                    } else {
                        $order_status = OrderHelper::$followUpForAdvance;
                    }
                    $payment_method = 'cashondelivery';
                }

                $id = DB::table('orders')->insertGetId(
                    [
                        'customer_id'     => $customer_id,
                        'order_id'        => $results['increment_id'],
                        'order_type'      => 'online',
                        'order_status'    => $order_status,
                        'order_status_id' => $order_status,
                        'payment_mode'    => $payment_method,
                        'order_date'      => $results['created_at'],
                        'client_name'     => $results['billing_address']['firstname'] . ' ' . $results['billing_address']['lastname'],
                        'city'            => $results['billing_address']['city'],
                        'advance_detail'  => $paid,
                        'contact_detail'  => $final_phone,
                        'balance_amount'  => $balance_amount,
                        'created_at'      => $results['created_at'],
                        'updated_at'      => $results['created_at'],
                    ]);

                $noproducts = count($results['items']);
                for ($i = 0; $i < $noproducts; $i++) {
                    if (round($results['items'][$i]['price']) > 0) {
                        if ($results['items'][$i]['product_type'] == 'configurable' && ! empty($atts['attributes_info'][0]['label'])) {
                            if ($atts['attributes_info'][0]['label'] == 'Sizes') {
                                $size = $atts['attributes_info'][0]['value'];
                            }
                        } else {
                            $size = '';
                        }
                        $skuAndColor = self::getSkuAndColor($results['items'][$i]['sku']);

                        DB::table('order_products')->insert(
                            [
                                'order_id'      => $id,
                                'product_id'    => ! empty($skuAndColor['product_id']) ? $skuAndColor['product_id'] : null,
                                'sku'           => $skuAndColor['sku'],
                                'product_price' => round($results['items'][$i]['price']),
                                'qty'           => round($results['items'][$i]['qty_ordered']),
                                'size'          => $size,
                                'color'         => $skuAndColor['color'],
                                'created_at'    => $results['created_at'],
                                'updated_at'    => $results['created_at'],
                            ]);
                    }
                }
                Setting::add('lastid', $orderlist[$j]->order_id, 'int');

                $order = Order::find($id);
                if ($results['payment']['method'] == 'cashondelivery') {
                    $product_names = '';
                    foreach (OrderProduct::where('order_id', $id)->get() as $order_product) {
                        $product_names .= $order_product->product ? $order_product->product->name . ', ' : '';
                    }

                    $delivery_time = $order->estimated_delivery_date ? Carbon::parse($order->estimated_delivery_date)->format('d \of\ F') : Carbon::parse($order->order_date)->addDays(15)->format('d \of\ F');

                    $auto_reply = AutoReply::where('type', 'auto-reply')->where('keyword', 'cod-online-confirmation')->first();

                    $auto_message = preg_replace('/{product_names}/i', $product_names, $auto_reply->reply);
                    $auto_message = preg_replace('/{delivery_time}/i', $delivery_time, $auto_message);

                    $params = [
                        'number'      => null,
                        'user_id'     => 6,
                        'approved'    => 1,
                        'status'      => 2,
                        'customer_id' => $order->customer->id,
                        'message'     => $auto_message,
                    ];

                    $chat_message = ChatMessage::create($params);

                    $whatsapp_number = $order->customer->whatsapp_number != '' ? $order->customer->whatsapp_number : null;

                    $params['message'] = AutoReply::where('type', 'auto-reply')->where('keyword', 'cod-online-followup')->first()->reply;

                    $chat_message = ChatMessage::create($params);

                    CommunicationHistory::create([
                        'model_id'   => $order->id,
                        'model_type' => Order::class,
                        'type'       => 'initial-advance',
                        'method'     => 'whatsapp',
                    ]);
                } elseif ($order->order_status_id == \App\Helpers\OrderHelper::$prepaid && $results['state'] == 'processing') {
                    $params = [
                        'number'      => null,
                        'user_id'     => 6,
                        'approved'    => 1,
                        'status'      => 2,
                        'customer_id' => $order->customer->id,
                        'message'     => AutoReply::where('type', 'auto-reply')->where('keyword', 'prepaid-order-confirmation')->first()->reply,
                    ];

                    $chat_message = ChatMessage::create($params);

                    $whatsapp_number = $order->customer->whatsapp_number != '' ? $order->customer->whatsapp_number : null;

                    CommunicationHistory::create([
                        'model_id'   => $order->id,
                        'model_type' => Order::class,
                        'type'       => 'online-confirmation',
                        'method'     => 'whatsapp',
                    ]);
                }

                if ($results['state'] != 'processing' && $results['payment']['method'] != 'cashondelivery') {
                    $params = [
                        'number'      => null,
                        'user_id'     => 6,
                        'approved'    => 1,
                        'status'      => 2,
                        'customer_id' => $order->customer->id,
                        'message'     => AutoReply::where('type', 'auto-reply')->where('keyword', 'order-payment-not-processed')->first()->reply,
                    ];

                    $chat_message = ChatMessage::create($params);

                    $whatsapp_number = $order->customer->whatsapp_number != '' ? $order->customer->whatsapp_number : null;
                }
            }
            $report->update(['end_time' => Carbon::now()]);
        } catch (Exception $e) {
            \App\CronJob::insertLastError($this->signature, $e->getMessage());
        }
    }

    public static function generateRandomString($length = 10)
    {
        $characters       = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
        $charactersLength = strlen($characters);
        $randomString     = '';
        for ($i = 0; $i < $length; $i++) {
            $randomString .= $characters[rand(0, $charactersLength - 1)];
        }

        return $randomString;
    }

    public static function validatePhone($phone)
    {
        $validator = Validator::make($phone, [
            'phone' => 'unique:customers,phone',
        ]);

        if ($validator->fails()) {
            $phone['phone'] = self::generateRandomString();

            self::validatePhone($phone);
        }

        return $phone['phone'];
    }

    public static function getSkuAndColor($original_sku)
    {
        $result = [];
        $colors = (new Colors())->all();

        $splitted_sku = explode('-', $original_sku);

        foreach ($colors as $color) {
            if (strpos($splitted_sku[0], $color)) {
                $result['color'] = $color;
                $sku             = str_replace($color, '', $splitted_sku[0]);

                $product = Product::where('sku', 'LIKE', "%$sku%")->first();

                if ($product) {
                    $result['product_id'] = $product->id;
                    $result['sku']        = $product->sku;
                } else {
                    $result['sku'] = $sku;
                }

                return $result;
            }
        }

        $result['color'] = null;
        $sku             = $splitted_sku[0];

        $product = Product::where('sku', 'LIKE', "%$sku%")->first();

        if ($product) {
            $result['product_id'] = $product->id;
            $result['sku']        = $product->sku;
        } else {
            $result['sku'] = $sku;
        }

        return $result;
    }
}


File: /opt/lampp/htdocs/erp/app/Console/Commands/ImportCustomerToCategoryByKeywords.php 
Content: <?php

namespace App\Console\Commands;

use App\Customer;
use Carbon\Carbon;
use App\CronJobReport;
use App\KeywordToCategory;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;

class ImportCustomerToCategoryByKeywords extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'import:customers-by-keyword-to-category';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Command description';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        try {
            $report = CronJobReport::create([
                'signature'  => $this->signature,
                'start_time' => Carbon::now(),
            ]);

            $keywordsToCategories = KeywordToCategory::all();

            Customer::where('is_categorized_for_bulk_messages', 0)->with('messageHistory')->chunk(100, function ($customers) use ($keywordsToCategories) {
                foreach ($customers as $customer) {
                    $customerLastThreeMessages = $customer->messageHistory;
                    foreach ($customerLastThreeMessages as $message) {
                        foreach ($keywordsToCategories as $keywordsToCategory) {
                            if (stripos(strtolower($message->message), strtolower($keywordsToCategory->keyword_value)) !== false) {
                                $customer->is_categorized_for_bulk_messages = 1;
                                $customer->save();
                                $this->saveCustomerWithCategory($customer, $keywordsToCategory);
                                break 2;
                            }
                        }
                    }
                }
            });

            $report->update(['end_time' => Carbon::now()]);
        } catch (Exception $e) {
            \App\CronJob::insertLastError($this->signature, $e->getMessage());
        }
    }

    private function saveCustomerWithCategory($customer, $keywordToCategory)
    {
        DB::table('customer_with_categories')->where('customer_id', $customer->id)->delete();
        DB::table('customer_with_categories')->insert([
            'customer_id'   => $customer->id,
            'category_type' => $keywordToCategory->category_type,
            'model_id'      => $keywordToCategory->model_id,
        ]);
    }
}


File: /opt/lampp/htdocs/erp/app/Console/Commands/Manual/BrandPushStoreWebsite.php 
Content: <?php

namespace App\Console\Commands\Manual;

use Illuminate\Http\Request;
use Illuminate\Console\Command;

class BrandPushStoreWebsite extends Command
{
    const VERALUSSO_STORE_ID = 4;

    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'store-website:push-brand-in-live';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Store website send push brand';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        $storeWebsite = \App\StoreWebsite::where(function ($q) {
            $q->where('api_token', '!=', '')->orWhere(function ($q) {
                $q->where('magento_url', '!=', '')->where('magento_username', '!=', '')->where('magento_password', '');
            });
        })->get();

        foreach ($storeWebsite as $sw) {
            $brands = \DB::table('brands')->leftJoin('store_website_brands as swb', function ($join) use ($sw) {
                $join->on('brands.id', '=', 'swb.brand_id');
                $join->where('swb.store_website_id', '=', $sw->id);
            })->whereNull('swb.magento_value');

            // if given site then only brand which is rigth now in solo will be pushed
            if ($sw->id == self::VERALUSSO_STORE_ID) {
                $brands = $brands->where('brands.magento_id', '>', 0);
            }

            $brands = $brands->select(['brands.*'])->limit(10)->pluck('id')->toArray();

            if (! empty($brands)) {
                foreach ($brands as $brand) {
                    $myRequest = new Request();
                    $myRequest->setMethod('POST');
                    $myRequest->request->add([
                        'brand' => $brand,
                        'store' => $sw->id,
                    ]);
                    app(\Modules\StoreWebsite\Http\Controllers\BrandController::class)->pushToStore($myRequest);
                }
            }
        }
    }
}


File: /opt/lampp/htdocs/erp/app/Console/Commands/Manual/CategoryPushStoreWebsite.php 
Content: <?php

namespace App\Console\Commands\Manual;

use Illuminate\Http\Request;
use Illuminate\Console\Command;
use Modules\StoreWebsite\Http\Controllers\CategoryController;

class CategoryPushStoreWebsite extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'store-website:push-category-in-live';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Store website send push category';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        $storeWebsite = \App\StoreWebsite::where(function ($q) {
            $q->where('api_token', '!=', '')->orWhere(function ($q) {
                $q->where('magento_url', '!=', '')->where('magento_username', '!=', '')->where('magento_password', '');
            });
        })->get();

        foreach ($storeWebsite as $sw) {
            $category = \DB::table('categories')->leftJoin('store_website_categories as swc', function ($join) use ($sw) {
                $join->on('categories.id', '=', 'swc.category_id');
                $join->where('swc.store_website_id', '=', $sw->id);
            })->whereNull('swc.remote_id')->select(['categories.*'])->pluck('id')->toArray();

            $myRequest = new Request();
            $myRequest->setMethod('POST');
            $myRequest->request->add([
                'categories' => $category,
                'website_id' => $sw->id,
            ]);

            app(CategoryController::class)->storeMultipleCategories($myRequest);
        }
    }
}


File: /opt/lampp/htdocs/erp/app/Console/Commands/Manual/CroppedImageReferenceProduct.php 
Content: <?php

namespace App\Console\Commands\Manual;

use Carbon\Carbon;
use App\CroppedImageReference;
use Illuminate\Console\Command;

class CroppedImageReferenceProduct extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'crop-reference:product';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Attach Crop Reference to Product';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        try {
            $report = \App\CronJobReport::create([
                'signature'  => $this->signature,
                'start_time' => Carbon::now(),
            ]);
            //Getting Images
            $images = CroppedImageReference::where('product_id', 0)->get();

            foreach ($images as $image) {
                //Getting Media Id
                $media = $image->original_media_id;

                //Searching From Media Table
                $mediable = \DB::table('mediables')->where('mediable_type', \App\Product::class)->where('media_id', $media)->first();

                //Media is not null
                if ($mediable != null) {
                    //Getting product
                    $product             = Product::select('id')->where('id', $mediable->mediable_id)->first();
                    $cropped             = CroppedImageReference::find($image->id);
                    $cropped->product_id = $product->id;
                    $cropped->save();
                }
            }
            $report->update(['end_time' => Carbon::now()]);
        } catch (Exception $e) {
            \App\CronJob::insertLastError($this->signature, $e->getMessage());
        }
    }
}


File: /opt/lampp/htdocs/erp/app/Console/Commands/Manual/RemoveLogScraper.php 
Content: <?php

namespace App\Console\Commands\Manual;

use Illuminate\Console\Command;

class RemoveLogScraper extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'remove-table:log-scraper';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Remove Table log scraper';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        // remove log table and store into the new
        $logs = \DB::table('log_scraper')->select('*')->get();

        if (! $logs->isEmpty()) {
            foreach ($logs as $log) {
                $scProduct = \App\ScrapedProducts::where('sku', $log->sku)->where('website', $log->website)->where('url', $log->url)->first();
                if ($scProduct) {
                    $scProduct->ip_address        = $log->ip_address;
                    $scProduct->validated         = $log->validated;
                    $scProduct->validation_result = $log->validation_result;
                    $scProduct->raw_data          = $log->raw_data;
                    $scProduct->last_inventory_at = $log->updated_at;
                    $scProduct->save();
                }
            }
        }
    }
}


File: /opt/lampp/htdocs/erp/app/Console/Commands/Manual/RemoveUnwantedImages.php 
Content: <?php

namespace App\Console\Commands\Manual;

use Plank\Mediable\Media;
use Illuminate\Console\Command;

class RemoveUnwantedImages extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'remove-unwanted:images';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Remove Unwanted Images';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        $medibles = Media::all();
        foreach ($medibles as $media) {
            // check file exist or not if not the delete it
            if (file_exists($media->getAbsolutePath())) {
                // start to found mediable usage
                $mediables = \DB::table('mediables')->where('media_id', $media->id)->get();
                if (! $mediables->isEmpty()) {
                    $recordExist = false;
                    foreach ($mediables as $aModal) {
                        $modal = (new $aModal->mediable_type)->find($aModal->mediable_id);
                        if ($modal != null) {
                            $recordExist = true;
                            break;
                        }
                    }
                    if ($recordExist == false) {
                        \Log::channel('productUpdates')->info($media->getAbsolutePath() . ' Deleted With no relation [DELETE_IMAGES]');
                        $media->delete();
                    }
                } else {
                    // check file exist or not
                    \Log::channel('productUpdates')->info($media->getAbsolutePath() . ' Deleted with no relation mediables [DELETE_IMAGES]');
                    $media->delete();
                }
            } else {
                \Log::channel('productUpdates')->info($media->getAbsolutePath() . ' Deleted not exist [DELETE_IMAGES]');
                $media->delete();
            }
        }
    }
}


File: /opt/lampp/htdocs/erp/app/Console/Commands/Manual/UploadTasksToHubstaff.php 
Content: <?php

namespace App\Console\Commands\Manual;

use DB;
use Storage;
use Exception;
use Carbon\Carbon;
use GuzzleHttp\Client;
use GuzzleHttp\RequestOptions;
use Illuminate\Console\Command;
use GuzzleHttp\Exception\ClientException;

class UploadTasksToHubstaff extends Command
{
    public $HUBSTAFF_TOKEN_FILE_NAME;

    public $SEED_REFRESH_TOKEN;

    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'hubstaff:upload_tasks';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Upload all the tasks to hubstaff';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
        $this->HUBSTAFF_TOKEN_FILE_NAME = 'hubstaff_tokens.json';
        $this->SEED_REFRESH_TOKEN       = config('env.HUBSTAFF_SEED_PERSONAL_TOKEN');
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        try {
            $report = \App\CronJobReport::create([
                'signature'  => $this->signature,
                'start_time' => Carbon::now(),
            ]);
            $this->uploadNormalTasks();
            $this->uploadDeveloperTasks();
            $report->update(['end_time' => Carbon::now()]);
        } catch (Exception $e) {
            \App\CronJob::insertLastError($this->signature, $e->getMessage());
        }
    }

    private function uploadNormalTasks()
    {
        $tasks = DB::table('tasks')
            ->whereNull('is_completed')
            ->where('hubstaff_task_id', '=', 0)
            ->leftJoin('hubstaff_members', 'hubstaff_members.user_id', '=', 'tasks.assign_to')
            ->select(['tasks.id', 'tasks.task_subject as summary', 'hubstaff_members.hubstaff_user_id as assignee_id'])
            ->get()
            ->toArray();

        $tasks = array_map(
            function ($task) {
                $task->summary = '#' . $task->id . ' => ' . $task->summary;

                return $task;
            },
            $tasks
        );

        echo 'Total tasks: ' . count($tasks) . PHP_EOL;
        $this->uploadTasks($tasks, 'tasks');
        echo 'UPLOADED TASKS' . PHP_EOL;
    }

    private function uploadDeveloperTasks()
    {
        $assignedTasks = DB::table('developer_tasks')
            ->whereIn('status', ['Discussing', 'In Progress', 'Issue', 'Planned'])
            ->where('hubstaff_task_id', '=', 0)
            ->leftJoin('hubstaff_members', 'hubstaff_members.user_id', '=', 'developer_tasks.user_id')
            ->select(['developer_tasks.id', 'developer_tasks.subject as summary', 'developer_tasks.task_type_id', 'hubstaff_members.hubstaff_user_id as assignee_id'])
            ->get()
            ->toArray();

        $assignedTasks = array_map(
            function ($task) {
                $summary = '#';
                if ($task->task_type_id == 1) {
                    $summary .= 'DEVTASK-' . $task->id . ' => ' . $task->summary;
                }
                $task->summary = $summary;

                return $task;
            },
            $assignedTasks
        );

        echo 'Total Dev tasks: ' . count($assignedTasks) . PHP_EOL;
        $this->uploadTasks($assignedTasks, 'developer_tasks');
        echo 'UPLOADED DEVELOPER TASKS';
    }

    private function uploadTasks($tasks, $tableName)
    {
        foreach ($tasks as $index => $task) {
            $taskId = $this->uploadTask($task);
            if ($taskId) {
                echo '(' . ($index + 1) . '/' . count($tasks) . ') Created Hubstaff Task: ' . $taskId . ' for task: ' . $task->id . PHP_EOL;

                DB::table($tableName)
                    ->where('id', '=', $task->id)
                    ->update(
                        [
                            'hubstaff_task_id' => $taskId,
                        ]
                    );
            } else {
                echo '(' . ($index + 1) . '/' . count($tasks) . ')Failed to create task for task ID: ' . $task->id . PHP_EOL;
            }
            sleep(5);
        }
    }

    private function uploadTask($task, $shouldRetry = true)
    {
        $tokens = $this->getTokens();

        $url        = 'https://api.hubstaff.com/v2/projects/' . config('env.HUBSTAFF_BULK_IMPORT_PROJECT_ID') . '/tasks';
        $httpClient = new Client();
        try {
            $response = $httpClient->post(
                $url,
                [
                    RequestOptions::HEADERS => [
                        'Authorization' => 'Bearer ' . $tokens->access_token,
                        'Content-Type'  => 'application/json',
                    ],

                    RequestOptions::BODY => json_encode([
                        'summary'     => substr($task->summary, 0, 200),
                        'assignee_id' => isset($task->assignee_id) ? $task->assignee_id : config('env.HUBSTAFF_DEFAULT_ASSIGNEE_ID'),
                    ]),
                ]
            );
            $parsedResponse = json_decode($response->getBody()->getContents());

            return $parsedResponse->task->id;
        } catch (Exception $e) {
            if ($e instanceof ClientException) {
                $this->refreshTokens();
                if ($shouldRetry) {
                    return $this->uploadTask(
                        $task,
                        false
                    );
                }
            }
            echo $e->getMessage() . PHP_EOL;
        }

        return false;
    }

    private function refreshTokens()
    {
        $tokens = $this->getTokens();
        $this->generateAccessToken($tokens->refresh_token);
    }

    private function getTokens()
    {
        if (! Storage::disk('local')->exists($this->HUBSTAFF_TOKEN_FILE_NAME)) {
            $this->generateAccessToken($this->SEED_REFRESH_TOKEN);
        }
        $tokens = json_decode(Storage::disk('local')->get($this->HUBSTAFF_TOKEN_FILE_NAME));

        return $tokens;
    }

    /**
     * returns boolean
     */
    private function generateAccessToken(string $refreshToken)
    {
        $httpClient = new Client();
        try {
            $response = $httpClient->post(
                'https://account.hubstaff.com/access_tokens',
                [
                    RequestOptions::FORM_PARAMS => [
                        'grant_type'    => 'refresh_token',
                        'refresh_token' => $refreshToken,
                    ],
                ]
            );

            $responseJson = json_decode($response->getBody()->getContents());

            $tokens = [
                'access_token'  => $responseJson->access_token,
                'refresh_token' => $responseJson->refresh_token,
            ];

            return Storage::disk('local')->put($this->HUBSTAFF_TOKEN_FILE_NAME, json_encode($tokens));
        } catch (Exception $e) {
            return false;
        }
    }
}


File: /opt/lampp/htdocs/erp/app/Console/Commands/MoveSizeToTable.php 
Content: <?php

namespace App\Console\Commands;

use App\Size;
use Illuminate\Console\Command;

class MoveSizeToTable extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'size:move-to-table';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Move size to table';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        $allsizes = \DB::table('products')->where('stock', '>', 0)->where('size', '!=', '')->groupBy('size')->select('size')->get();
        $sizes    = [];

        if (! empty($allsizes)) {
            foreach ($allsizes as $s) {
                $isJson = self::isJson($s->size);
                $ex     = null;

                if ($isJson) {
                    $ex = json_decode($s->size, true);
                }

                if (empty($ex) && ! is_array($ex)) {
                    $ex = explode(',', $s->size);
                }

                $ex = ! is_array($ex) ? [$ex] : $ex;

                $ex = array_filter($ex);

                if (! empty($ex)) {
                    foreach ($ex as $e) {
                        try {
                            if (strlen($e) >= 4 || $this->dontNeedThisWords($e) || strpos($e, 'cm') !== false || strpos($e, '$') !== false || strpos($e, '"') !== false) {
                                continue;
                            }

                            if (strpos($e, '½') !== false) {
                                $parts   = explode('½', $e);
                                $sizes[] = (int) trim($parts[0]) + 0.5;

                                continue;
                            }

                            if (strpos($e, '/2') !== false) {
                                $parts   = explode(' ', $e);
                                $sizes[] = (int) trim($parts[0]) + 0.5;

                                continue;
                            }

                            if (strpos($e, '1/2') !== false) {
                                $parts = explode(' ', $e);
                                if (isset($parts[0])) {
                                    $sizes[] = (int) $parts[0] + 0.5;
                                }

                                continue;
                            }

                            if (strpos($e, '+') !== false) {
                                $parts   = explode('+', $e);
                                $sizes[] = (int) trim($parts[0]) + 0.5;

                                continue;
                            }

                            if (in_array(trim($e), ['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X'])) {
                                $sizes[] = $this->romanToNumber($e);

                                continue;
                            }

                            if (strpos($e, 'IT') !== false) {
                                $parts = explode(' ', $e);
                                if (isset($parts[1])) {
                                    $parts   = explode('/', $parts[1]);
                                    $sizes[] = $parts[0] + 0.5;
                                }

                                continue;
                            }

                            if (strpos($e, 'UK INCH') !== false) {
                                $prefix = 'UK INCH ';
                                if (substr($e, 0, strlen($prefix)) == $prefix) {
                                    $sizes[] = substr($e, strlen($prefix));
                                }

                                continue;
                            }

                            if (strpos($e, 'UK-') !== false) {
                                $prefix = 'UK-';
                                if (substr($e, 0, strlen($prefix)) == $prefix) {
                                    $sizes[] = substr($e, strlen($prefix));
                                }

                                continue;
                            }

                            $e = preg_replace("/\s+/", ' ', $e);
                            if (is_string($e)) {
                                $sizes[] = trim(str_replace(['// Out of stock', "bold'>", '</span>'], '', $e));
                            }
                        } catch (Exception $e) {
                        }
                    }
                }
            }
        }
        $sizes = array_unique($sizes);

        if (! empty($sizes)) {
            foreach ($sizes as $size) {
                Size::updateOrCreate([
                    'name' => $size,
                ], [
                    'name' => $size,
                ]);
            }
        }
    }

    public static function isJson($string)
    {
        json_decode($string);

        return json_last_error() == JSON_ERROR_NONE;
    }

    private function romanToNumber($e)
    {
        $convertions = [
            'I'    => 1,
            'II'   => 2,
            'III'  => 3,
            'IV'   => 4,
            'V'    => 5,
            'VI'   => 6,
            'VII'  => 7,
            'VIII' => 8,
            'IX'   => 9,
            'X'    => 10,
        ];

        return $convertions[trim($e)];
    }

    private function dontNeedThisWords($e)
    {
        $words = [
            '++',
            'JEANDS',
            'Sold Out',
            'waist',
            'collar',
        ];

        return in_array(trim($e), $words);
    }
}


File: /opt/lampp/htdocs/erp/app/Console/Commands/ProjectFileManagerDateAndSize.php 
Content: <?php

namespace App\Console\Commands;

use DB;
use App\User;
use App\Setting;
use App\ProjectFileManager;
use Illuminate\Console\Command;
use App\ProjectFileManagerHistory;

class ProjectFileManagerDateAndSize extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'project:filemanagementdate';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Its For Local Part where we run this on local and send the data to whatsapp and server';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        $fileInformation = ProjectFileManager::all();
        $param           = [];

        foreach ($fileInformation as $key => $val) {
            $path      = base_path() . DIRECTORY_SEPARATOR . (str_replace('./', '', $val->name));
            $file_size = 0;
            if (is_dir($path)) {
                if (file_exists($path)) {
                    $old_size = $val->size;

                    $limit_data = Setting::get('project_file_managers');

                    if ($limit_data) {
                        $limit_rec = $limit_data;
                    } else {
                        $limit_rec = 10;
                    }

                    $increase_size = (($old_size * $limit_rec) / 100);

                    $id   = $val->id;
                    $name = $val->name;

                    $io       = popen('/usr/bin/du -sk ' . $path, 'r');
                    $size     = fgets($io, 4096);
                    $new_size = substr($size, 0, strpos($size, "\t"));

                    $new_size = round($new_size, 2);
                    pclose($io);
                    if ($old_size != $new_size) {
                        $updatesize = DB::table('project_file_managers')->where(['id' => $id])->update(['size' => $new_size]);

                        $param = [
                            'project_id' => $id,
                            'name'       => $name,
                            'old_size'   => $old_size . 'MB',
                            'new_size'   => $new_size . 'MB',
                        ];

                        ProjectFileManagerHistory::create($param);
                    }

                    $both_size = ($old_size + $increase_size);

                    if ($new_size >= $both_size) {
                        $message = 'Project Directory Size increase in Path = ' . $name . ',' . ' OldSize = ' . $old_size . 'MB' . ' And ' . 'NewSize = ' . $new_size . 'MB';

                        $users = User::get();
                        foreach ($users as $user) {
                            if ($user->isAdmin()) {
                                app(\App\Http\Controllers\WhatsAppController::class)->sendWithWhatsApp($user->phone, $user->whatsapp_number, $message);
                                $this->info('message successfully send');
                            }
                        }

                        $updatesize = DB::table('project_file_managers')->where(['id' => $id])->update(['display_dev_master' => 1]);
                    } else {
                        $updatesize = DB::table('project_file_managers')->where(['id' => $id])->update(['display_dev_master' => 0]);
                    }
                }
            } else {
                if (file_exists($path)) {
                    $old_size   = $val->size;
                    $limit_data = Setting::get('project_file_managers');

                    if ($limit_data) {
                        $limit_rec = $limit_data;
                    } else {
                        $limit_rec = 10;
                    }

                    $increase_size = (($old_size * $limit_rec) / 100);
                    $id            = $val->id;
                    $name          = $val->name;

                    $new_size = filesize($path) / 1024;
                    $new_size = round($new_size, 2);

                    if ($old_size != $new_size) {
                        $updatesize = DB::table('project_file_managers')->where(['id' => $id])->update(['size' => $new_size]);

                        $param = [
                            'project_id' => $id,
                            'name'       => $name,
                            'old_size'   => $old_size . 'MB',
                            'new_size'   => $new_size . 'MB',
                        ];

                        ProjectFileManagerHistory::create($param);
                    }

                    $both_size = ($old_size + $increase_size);

                    if ($new_size > $both_size) {
                        $message = 'Project Directory Size increase in Path = ' . $name . ',' . ' OldSize = ' . $old_size . 'MB' . ' And ' . 'NewSize = ' . $new_size . 'MB';

                        $users = User::get();
                        foreach ($users as $user) {
                            if ($user->isAdmin()) {
                                app(\App\Http\Controllers\WhatsAppController::class)->sendWithWhatsApp($user->phone, $user->whatsapp_number, $message);
                                $this->info('message successfully send');
                            }
                        }
                        $updatesize = DB::table('project_file_managers')->where(['id' => $id])->update(['display_dev_master' => 1]);
                    } else {
                        $updatesize = DB::table('project_file_managers')->where(['id' => $id])->update(['display_dev_master' => 0]);
                    }

                    if (is_numeric($new_size)) {
                        $size = number_format($new_size / 1024, 2, '.', '');
                    }

                    $fileInformation->size = $new_size;
                }
            }
        }
        $this->info('success');
    }
}


File: /opt/lampp/htdocs/erp/app/Console/Commands/RunMessageQueue.php 
Content: <?php

namespace App\Console\Commands;

use App\Customer;
use Carbon\Carbon;
use App\LogRequest;
use App\MessageQueue;
use App\CronJobReport;
use App\Helpers\LogHelper;
use App\Jobs\SendMessageToAll;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;
use App\Jobs\SendMessageToSelected;

class RunMessageQueue extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'run:message-queues';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Command description';

    // custom defined vars
    const WAITING_MESSAGE_LIMIT = 300;

    // waiting messages group
    public $waitingMessages = [];

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        return; // STOP ALL
        try {
            $report = CronJobReport::create([
                'signature'  => $this->signature,
                'start_time' => Carbon::now(),
            ]);

            $time    = Carbon::now();
            $morning = Carbon::create($time->year, $time->month, $time->day, 8, 0, 0);
            $evening = Carbon::create($time->year, $time->month, $time->day, 17, 00, 0);

            if ($time->between($morning, $evening, true)) {
                // Get groups
                $groups = DB::table('message_queues')->groupBy('group_id')->select('group_id')->get(['group_id']);

                $allWhatsappNo         = config('apiwha.instances');
                $this->waitingMessages = [];
                if (! empty($allWhatsappNo)) {
                    foreach ($allWhatsappNo as $no => $dataInstance) {
                        $waitingMessage             = $this->waitingLimit($no);
                        $this->waitingMessages[$no] = $waitingMessage;
                    }
                }

                foreach ($groups as $group) {
                    // Get messages
                    $message_queues = MessageQueue::where('group_id', $group->group_id)
                        ->where('sending_time', '<=', Carbon::now())
                        ->where('sent', 0)
                        ->where('status', '!=', 1)
                        ->orderBy('sending_time', 'ASC')
                        ->limit(12);

                    // Do we have results?
                    if (count($message_queues->get()) > 0) {
                        foreach ($message_queues->get() as $message) {
                            // check message can able to send
                            $number = ! empty($message->whatsapp_number) ? (string) $message->whatsapp_number : 0;

                            if ($message->type == 'message_all') {
                                $customer = Customer::find($message->customer_id);
                                $number   = ! empty($customer->whatsapp_number) ? (string) $customer->whatsapp_number : 0;

                                // No number? Set to default
                                if ($number == 0 || ! array_key_exists($number, $allWhatsappNo)) {
                                    foreach ($allWhatsappNo as $no => $dataInstance) {
                                        if ($dataInstance['customer_number'] == true) {
                                            $customer->whatsapp_number = $no;
                                            $customer->save();
                                            $number = $no;
                                            break;
                                        }
                                    }
                                }

                                if (! $this->isWaitingFull($number)) {
                                    if ($customer && $customer->do_not_disturb == 0 && substr($number, 0, 3) == '971') {
                                        SendMessageToAll::dispatchNow($message->user_id, $customer, json_decode($message->data, true), $message->id, $group->group_id);

                                        dump('sent to all');
                                    } else {
                                        $message->delete();

                                        dump('deleting queue');
                                    }
                                } else {
                                    if (substr($number, 0, 3) == '971') {
                                        dump('sorry , message is full right now for this number : ' . $number);
                                    } else {
                                        $message->delete();
                                        dump('deleting queue');
                                    }
                                }
                            } else {
                                if (! $this->isWaitingFull($number)) {
                                    if (substr($message->whatsapp_number, 0, 3) == '971') {
                                        SendMessageToSelected::dispatchNow($message->phone, json_decode($message->data, true), $message->id, $message->whatsapp_number, $message->group_id);
                                    } else {
                                        $message->delete();
                                    }

                                    dump('sent to selected');
                                } else {
                                    dump('sorry , message is full right now for this number : ' . $number);
                                }
                            }

                            // start to add more if there is existing already
                            if (isset($this->waitingMessages[$number])) {
                                $this->waitingMessages[$number] = $this->waitingMessages[$number] + 1;
                            } else {
                                $this->waitingMessages[$number] = 1;
                            }
                        }
                    }
                }
            } else {
                dump('Not the right time for sending');
            }

            $report->update(['end_time' => Carbon::now()]);
        } catch (Exception $e) {
            LogHelper::createCustomLogForCron($this->signature, ['Exception' => $e->getTraceAsString(), 'message' => $e->getMessage()]);

            \App\CronJob::insertLastError($this->signature, $e->getMessage());
        }
    }

    /**
     * Check waiting is full for given number
     *
     * @param mixed $number
     */
    private function isWaitingFull($number)
    {
        $number = ! empty($number) ? $number : 0;

        if (isset($this->waitingMessages[$number]) && $this->waitingMessages[$number] > self::WAITING_MESSAGE_LIMIT) {
            return true;
        }

        return false;
    }

    /**
     * Get instance from whatsapp number
     *
     * @param null|mixed $number
     */
    private function getInstance($number = null)
    {
        $number = ! empty($number) ? $number : 0;

        return isset(config('apiwha.instances')[$number])
            ? config('apiwha.instances')[$number]
            : config('apiwha.instances')[0];
    }

    /**
     * send request for find waiting message number
     *
     * @param null|mixed $number
     */
    private function waitingLimit($number = null)
    {
        $instance   = $this->getInstance($number);
        $instanceId = isset($instance['instance_id']) ? $instance['instance_id'] : 0;
        $token      = isset($instance['token']) ? $instance['token'] : 0;
        $startTime  = date('Y-m-d H:i:s', LARAVEL_START);

        $waiting = 0;

        if (! empty($instanceId) && ! empty($token)) {
            // executing curl
            $curl = curl_init();
            $url  = "https://api.chat-api.com/instance$instanceId/showMessagesQueue?token=$token";

            curl_setopt_array($curl, [
                CURLOPT_URL            => $url,
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_ENCODING       => '',
                CURLOPT_MAXREDIRS      => 10,
                CURLOPT_TIMEOUT        => 300,
                CURLOPT_HTTP_VERSION   => CURL_HTTP_VERSION_1_1,
                CURLOPT_HTTPHEADER     => [
                    'content-type: application/json',
                ],
            ]);

            $response = curl_exec($curl);
            $httpcode = curl_getinfo($curl, CURLINFO_HTTP_CODE);
            LogRequest::log($startTime, $url, 'GET', json_encode([]), json_decode($response), $httpcode, \App\Console\Commands\RunMessageQueue::class, 'handle');

            $err = curl_error($curl);
            curl_close($curl);

            if ($err) {
                // throw some error if you want
            } else {
                $result = json_decode($response, true);
                if (isset($result['totalMessages']) && is_numeric($result['totalMessages'])) {
                    $waiting = $result['totalMessages'];
                }
            }
        }

        return $waiting;
    }
}


File: /opt/lampp/htdocs/erp/app/Console/Commands/ScrapLogs.php 
Content: <?php

namespace App\Console\Commands;

use DB;
use Illuminate\Support\Str;
use Illuminate\Console\Command;

class ScrapLogs extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'scraplogs:activity';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'All scraplogs insert to the databases';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        $file_list     = [];
        $searchVal     = '';
        $dateVal       = '';
        $file_list     = [];
        $files         = \File::allFiles(config('env.SCRAP_LOGS_FOLDER'));
        $yesterdayDate = date('j', strtotime('-1 days'));
        foreach ($files as $key => $val) {
            $day_of_file = explode('-', $val->getFilename());
            if (Str::contains(end($day_of_file), $yesterdayDate) && (Str::contains($val->getFilename(), $searchVal) || empty($searchVal))) {
                $file_path_new = config('env.SCRAP_LOGS_FOLDER') . '/' . $val->getRelativepath() . '/' . $val->getFilename();

                $file = file($file_path_new);

                $log_msg = '';
                for ($i = max(0, count($file) - 100); $i < count($file); $i++) {
                    $log_msg .= $file[$i];
                }
                if ($log_msg == '') {
                    $log_msg = 'Log data not found.';
                }
                $file_path_info = pathinfo($val->getFilename());

                $search_scraper = substr($file_path_info['filename'], 0, -3);
                $search_scraper = str_replace('-', '_', $search_scraper);
                $scrapers_info  = DB::table('scrapers')
                    ->select('id')
                    ->where('scraper_name', 'like', $search_scraper)
                    ->get();

                if (count($scrapers_info) > 0) {
                    $scrap_logs_info = DB::table('scrap_logs')
                        ->select('id', 'scraper_id')
                        ->where('scraper_id', '=', $scrapers_info[0]->id)
                        ->get();
                    $scrapers_id = $scrapers_info[0]->id;
                } else {
                    $scrapers_id = 0;
                }

                if (isset($scrap_logs_info) && count($scrap_logs_info) == 0) {
                    $file_list_data = [
                        'scraper_id'   => $scrapers_id,
                        'folder_name'  => $val->getRelativepath(),
                        'file_name'    => $val->getFilename(),
                        'log_messages' => $log_msg,
                        'created_at'   => date('Y-m-d H:i:s'),
                        'updated_at'   => date('Y-m-d H:i:s'),
                    ];
                    DB::table('scrap_logs')->insert($file_list_data);
                }
            }
        }
    }
}


File: /opt/lampp/htdocs/erp/app/Console/Commands/SendAutoReplyToCustomers.php 
Content: <?php

namespace App\Console\Commands;

use App\Brand;
use App\Product;
use App\Category;
use App\Customer;
use Carbon\Carbon;
use App\ChatMessage;
use App\CronJobReport;
use App\Helpers\LogHelper;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;

class SendAutoReplyToCustomers extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'customers:send-auto-reply';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Command description';

    private $activeMessage = '';

    private $specificCategories = [];

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        LogHelper::createCustomLogForCron($this->signature, ['message' => 'cron was started.']);
        try {
            $report = CronJobReport::create([
                'signature'  => $this->signature,
                'start_time' => Carbon::now(),
            ]);
            LogHelper::createCustomLogForCron($this->signature, ['message' => 'report was added.']);

            $messagesIds = DB::table('chat_messages')
                ->selectRaw('MAX(id) as id, customer_id')
                ->groupBy('customer_id')
                ->whereNotNull('message')
                ->where('customer_id', '>', '0')
                ->where(function ($query) {
                    $query->whereNotIn('status', [7, 8, 9]);
                })
                ->get();

            LogHelper::createCustomLogForCron($this->signature, ['message' => 'chat message query finished.']);
            foreach ($messagesIds as $messagesId) {
                $customer = Customer::where('id', $messagesId->customer_id)->whereNotNull('gender')->first();
                LogHelper::createCustomLogForCron($this->signature, ['message' => 'Customer query finished.']);
                if (! $customer) {
                    continue;
                }

                $message = ChatMessage::where('id', $messagesId->id)
                    ->where(function ($query) {
                        $query->where('user_id', '=', '0')
                            ->orWhereNull('user_id');
                    })
                    ->first();
                LogHelper::createCustomLogForCron($this->signature, ['message' => 'Chat message query finished.']);
                if (! $message) {
                    continue;
                }

                $this->activeMessage = $message->message;

                $extractedCategory    = $this->extractCategory($customer->gender);
                $extractedBrands      = $this->extractBrands();
                $extractedComposition = $this->extractCompositions();

                if ($this->specificCategories !== []) {
                    $extractedCategory = $this->specificCategories;
                }

                if ($extractedCategory === [] && $extractedBrands === [] && $extractedComposition === []) {
                    continue;
                }

                if (! $this->isMessageAskingForProducts($message->message)) {
                    continue;
                }

                $products = new Product();

                if ($extractedBrands !== []) {
                    $products = $products->whereIn('brand', $extractedBrands);
                }

                if ($extractedCategory !== []) {
                    $products = $products->whereIn('category', $extractedCategory);
                }

                if ($extractedComposition !== []) {
                    $products->where(function ($query) use ($extractedComposition) {
                        foreach ($extractedComposition as $key => $composition) {
                            if ($key === 0) {
                                $query = $query->where('composition', 'LIKE', $composition);

                                continue;
                            }

                            $query = $query->orWhere('composition', 'LIKE', $composition);
                        }
                    });
                }

                $products = $products->where('is_without_image', 0)->take(25)->get();
                LogHelper::createCustomLogForCron($this->signature, ['message' => 'Product query finished.']);

                $messageToSend = ' ';

                $chatMessage              = new ChatMessage();
                $chatMessage->customer_id = $customer->id;
                $chatMessage->message     = $messageToSend;
                $chatMessage->user_id     = 109;
                $chatMessage->status      = 10;
                $chatMessage->approved    = 0;
                $chatMessage->save();
                LogHelper::createCustomLogForCron($this->signature, ['message' => 'Chat message added.']);

                foreach ($products as $product) {
                    $image = $product->getMedia(config('constants.media_tags'))->first();

                    if (! $image) {
                        continue;
                    }

                    $chatMessage->attachMedia($image, config('constants.media_tags'));
                    LogHelper::createCustomLogForCron($this->signature, ['message' => 'in chat message was media atteched.']);
                }
            }

            $report->update(['end_time' => Carbon::now()]);
            LogHelper::createCustomLogForCron($this->signature, ['message' => 'report endtime was updated.']);
            LogHelper::createCustomLogForCron($this->signature, ['message' => 'cron was ended.']);
        } catch (Exception $e) {
            LogHelper::createCustomLogForCron($this->signature, ['Exception' => $e->getTraceAsString(), 'message' => $e->getMessage()]);

            \App\CronJob::insertLastError($this->signature, $e->getMessage());
        }
    }

    private function extractBrands(): array
    {
        $message     = $this->activeMessage;
        $brands      = Brand::whereNull('deleted_at')->get();
        $brandsFound = [];

        foreach ($brands as $brand) {
            $brandName = $brand->name;
            if (stripos(strtoupper($message), strtoupper($brandName)) !== false) {
                $brandsFound[] = $brand->id;
            }
        }

        return $brandsFound;
    }

    private function extractCompositions(): array
    {
        $compositions = [];
        $message      = $this->activeMessage;

        $compositionsFound = [];

        foreach ($compositions as $composition) {
            $name  = $composition->name;
            $name2 = $composition->replace_with;
            if (stripos($message, $name) !== false || (stripos($message, $name2) !== false && $name2)) {
                $compositionsFound[] = $name;
                if ($name2) {
                    $compositionsFound[] = $name2;
                }
            }
        }

        return $compositionsFound;
    }

    private function extractCategory($gender)
    {
        if (strtoupper($gender) === 'MALE') {
            return $this->extractMaleCategory();
        }

        return $this->extractFemaleCategory();
    }

    private function extractFemaleCategory()
    {
        $extractedCats  = [];
        $femaleCategory = Category::find(2);
        foreach ($femaleCategory->childs as $femaleCategoryChild) {
            foreach ($femaleCategoryChild->childs as $subSubCategory) {
                if ($this->extractCategoryIdWithReferences($subSubCategory)) {
                    $extractedCats[]            = $subSubCategory->id;
                    $this->specificCategories[] = $subSubCategory->id;
                }
            }
        }

        return $extractedCats;
    }

    private function extractMaleCategory(): array
    {
        $extractedCats  = [];
        $femaleCategory = Category::find(3);
        foreach ($femaleCategory->childs as $femaleCategoryChild) {
            foreach ($femaleCategoryChild->childs as $subSubCategory) {
                if ($this->extractCategoryIdWithReferences($subSubCategory)) {
                    $extractedCats[]            = $subSubCategory->id;
                    $this->specificCategories[] = $subSubCategory->id;
                }
            }
        }

        return $extractedCats;
    }

    private function extractCategoryIdWithReferences($category): bool
    {
        $name    = strlen($category->title) > 3 ? substr($category->title, 0, -1) : $category->title;
        $message = $this->activeMessage;

        return stripos(strtoupper($message), strtoupper($name)) !== false;
    }

    private function isMessageAskingForProducts($message): bool
    {
        $possibleText = [
            'WHERE IS',
            'WHEN WILL YOU',
            'AM I GETTING',
            'WHEN ARE YOU',
            'REFUND',
            'ORDERED',
            'GONNA',
            'GOING TO',
        ];

        foreach ($possibleText as $item) {
            if (stripos($message, $item) !== false) {
                return false;
            }
        }

        return true;
    }
}


File: /opt/lampp/htdocs/erp/app/Console/Commands/SendFailedJobReports.php 
Content: <?php

namespace App\Console\Commands;

use Carbon\Carbon;
use App\Helpers\LogHelper;
use Illuminate\Console\Command;

class SendFailedJobReports extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'send-report:failed-jobs';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Send failed jobs report every one 5 min';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        LogHelper::createCustomLogForCron($this->signature, ['message' => 'cron was started.']);
        $reportSubject = $this->signature . '-' . date('Y-M-D');

        try {
            $beforeFiveMin = Carbon::now()->subMinutes(5)->toDateTimeString();
            $failedReports = \DB::table('failed_jobs')->where('failed_at', '>', $beforeFiveMin)->get();
            LogHelper::createCustomLogForCron($this->signature, ['message' => 'failed jobs query finished.']);
            if (! $failedReports->isEmpty()) {
                throw new Exception('Error Processing jobs, Total Failed Jobs in last five min : ' . $failedReports->count(), 1);
            }
            LogHelper::createCustomLogForCron($this->signature, ['message' => 'cron was ended.']);
        } catch (Exception $e) {
            LogHelper::createCustomLogForCron($this->signature, ['Exception' => $e->getTraceAsString(), 'message' => $e->getMessage()]);

            \App\CronJob::insertLastError($this->signature, $e->getMessage());
        }
    }
}


File: /opt/lampp/htdocs/erp/app/Console/Commands/SendHubstaffReport.php 
Content: <?php

namespace App\Console\Commands;

use DB;
use Carbon\Carbon;
use App\ChatMessage;
use GuzzleHttp\Client;
use App\Helpers\LogHelper;
use App\Helpers\HubstaffTrait;
use Illuminate\Console\Command;
use App\Library\Hubstaff\Src\Hubstaff;

class SendHubstaffReport extends Command
{
    use HubstaffTrait;

    private $client;

    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'hubstaff:send_report';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Sends hubstaff report to whatsapp based every hour with details of past hour and today';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
        $this->client = new Client();
        $this->init(config('env.HUBSTAFF_SEED_PERSONAL_TOKEN'));
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        return false;
        //STOPPED CERTAIN MESSAGES
        try {
            $report = \App\CronJobReport::create([
                'signature'  => $this->signature,
                'start_time' => Carbon::now(),
            ]);

            $userPastHour = $this->getActionsForPastHour();
            $userToday    = $this->getActionsForToday();
            $users        = DB::table('users')->join('hubstaff_members', 'hubstaff_members.user_id', '=', 'users.id')
                ->select(['hubstaff_user_id', 'name'])
                ->get();

            $hubstaffReport = [];
            foreach ($users as $user) {
                $pastHour = (isset($userPastHour[$user->hubstaff_user_id])
                    ? $this->formatSeconds($userPastHour[$user->hubstaff_user_id])
                    : '0');

                $today = (isset($userToday[$user->hubstaff_user_id])
                    ? $this->formatSeconds($userToday[$user->hubstaff_user_id])
                    : '0');

                if ($today != '0') {
                    $message          = $user->name . ' ' . $pastHour . ' ' . $today;
                    $hubstaffReport[] = $message;
                }
            }

            $message = implode(PHP_EOL, $hubstaffReport);

            ChatMessage::sendWithChatApi('971502609192', null, $message);
            $report->update(['end_time' => Carbon::now()]);
        } catch (Exception $e) {
            LogHelper::createCustomLogForCron($this->signature, ['Exception' => $e->getTraceAsString(), 'message' => $e->getMessage()]);

            \App\CronJob::insertLastError($this->signature, $e->getMessage());
        }
    }

    private function formatSeconds($seconds)
    {
        $t = round($seconds);

        return sprintf('%02d:%02d:%02d', ($t / 3600), ($t / 60 % 60), $t % 60);
    }

    private function getActionsForPastHour()
    {
        return self::getActivity(date('Y-m-d H:i:s', strtotime('-1 hour')), date('Y-m-d H:i:s'));
    }

    private function getActionsForToday()
    {
        return self::getActivity(date('Y-m-d 00:00:00'), date('Y-m-d H:i:s'));
    }

    private static function getActivity($startTime, $endTime)
    {
        // start hubstaff section from here
        $hubstaff        = Hubstaff::getInstance();
        $hubstaff        = $hubstaff->authenticate();
        $organizationAct = $hubstaff->getRepository('organization')->getActivity(
            // env("HUBSTAFF_ORG_ID"),
            config('env.HUBSTAFF_ORG_ID'),
            $startTime,
            $endTime
        );

        $users = [];
        // assign activity to user
        if (! empty($organizationAct->activities)) {
            foreach ($organizationAct->activities as $activity) {
                if (isset($users[$activity->user_id])) {
                    $users[$activity->user_id] += $activity->tracked;
                } else {
                    $users[$activity->user_id] = $activity->tracked;
                }
            }
        }

        return $users;
    }
}


File: /opt/lampp/htdocs/erp/app/Console/Commands/SendQueuePendingChatMessages.php 
Content: <?php

namespace App\Console\Commands;

use Schema;
use Carbon\Carbon;
use App\ChatMessage;
use App\MessageQueueHistory;
use Illuminate\Http\Request;
use Illuminate\Console\Command;
use App\Services\Whatsapp\ChatApi\ChatApi;

class SendQueuePendingChatMessages extends Command
{
    const BROADCAST_PRIORITY = 8;

    const MARKETING_MESSAGE_TYPE_ID = 3;

    public $waitingMessages;

    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'send:queue-pending-chat-messages {number}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'send queue pending chat messages, run at every 3rd minute';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    public static function getNumberList()
    {
        $q = \DB::table('whatsapp_configs')->select([
            'number', 'instance_id', 'token', 'is_customer_support', 'status', 'is_default',
        ])->where('instance_id', '!=', '')
            ->where('token', '!=', '')
            ->where('status', 1)
            ->orderBy('is_default', 'DESC')
            ->get();

        $noList = [];
        foreach ($q as $queue) {
            $noList[] = $queue->number;
        }

        return $noList;
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        if ((! env('CI')) && (Schema::hasTable('chat_messages'))) {
            $queueStartTime = \App\ChatMessage::getStartTime();
            $queueEndTime   = \App\ChatMessage::getEndTime();
            $queueTime      = \App\ChatMessage::getQueueTime();
            // check if time both is not empty then run the cron
            if (! empty($queueStartTime) && ! empty($queueEndTime)) {
                if (! empty($queueTime)) {
                    foreach ($queueTime as $no => $time) {
                        if ($time > 0) {
                            $now = Carbon::now()->format('Y-m-d H:i:s');
                            try {
                                $report = \App\CronJobReport::create([
                                    'signature'  => $this->signature,
                                    'start_time' => Carbon::now(),
                                ]);

                                $numberList = [$this->argument('number')];

                                // get the status for approval
                                $approveMessage = \App\Helpers\DevelopmentHelper::needToApproveMessage();
                                $limit          = ChatMessage::getQueueLimit();

                                // if message is approve then only need to run the queue
                                if ($approveMessage == 1) {
                                    $allWhatsappNo = config('apiwha.instances');

                                    $this->waitingMessages = [];
                                    if (! empty($numberList)) {
                                        foreach ($numberList as $no) {
                                            $chatApi                    = new ChatApi;
                                            $waitingMessage             = $chatApi->waitingLimit($no);
                                            $this->waitingMessages[$no] = $waitingMessage;
                                        }
                                    }

                                    if (! empty($numberList)) {
                                        foreach ($numberList as $number) {
                                            $sendLimit = isset($limit[$number]) ? $limit[$number] : 0;

                                            $chatMessage = ChatMessage::where('is_queue', '>', 0)
                                                ->join('customers as c', 'c.id', 'chat_messages.customer_id')
                                                ->where('c.whatsapp_number', $number)
                                                ->where(function ($q) {
                                                    $q->orWhere('chat_messages.group_id', '<=', 0)->orWhereNull('chat_messages.group_id')->orWhere('chat_messages.group_id', '');
                                                })->where(function ($q) {
                                                    $q->whereNull('chat_messages.scheduled_at')->orWhere('chat_messages.scheduled_at', '<=', $now);
                                                })
                                                ->select('chat_messages.*')
                                                ->limit($sendLimit)->get();

                                            if (! $chatMessage->isEmpty()) {
                                                foreach ($chatMessage as $value) {
                                                    // check first if message need to be send from broadcast
                                                    if ($value->is_queue > 1) {
                                                        $sendNumber = \DB::table('whatsapp_configs')->where('id', $value->is_queue)->first();
                                                        // if chat message has image then send as a multiple message
                                                        if ($images = $value->getMedia(config('constants.media_tags'))) {
                                                            foreach ($images as $k => $image) {
                                                                \App\ImQueue::create([
                                                                    'im_client'                 => 'whatsapp',
                                                                    'number_to'                 => $value->customer->phone,
                                                                    'number_from'               => ($sendNumber) ? $sendNumber->number : $value->customer->whatsapp_number,
                                                                    'text'                      => ($k == 0) ? $value->message : '',
                                                                    'image'                     => getMediaUrl($image),
                                                                    'priority'                  => self::BROADCAST_PRIORITY,
                                                                    'marketing_message_type_id' => self::MARKETING_MESSAGE_TYPE_ID,
                                                                ]);
                                                            }
                                                        } else {
                                                            \App\ImQueue::create([
                                                                'im_client'                 => 'whatsapp',
                                                                'number_to'                 => $value->customer->phone,
                                                                'number_from'               => ($sendNumber) ? $sendNumber->number : $value->customer->whatsapp_number,
                                                                'text'                      => $value->message,
                                                                'priority'                  => self::BROADCAST_PRIORITY,
                                                                'marketing_message_type_id' => self::MARKETING_MESSAGE_TYPE_ID,
                                                            ]);
                                                        }

                                                        $value->is_queue = 0;
                                                        $value->save();

                                                        $dataInsert = [
                                                            'counter' => $sendLimit,
                                                            'number'  => $number,
                                                            'type'    => 'individual',
                                                            'user_id' => $value->customer_id,
                                                            'time'    => Carbon::now()->format('Y-m-d H:i:s'),
                                                        ];
                                                        MessageQueueHistory::insert($dataInsert);
                                                    } else {
                                                        // check message is full or not
                                                        $isSendingLimitFull = isset($this->waitingMessages[$value->customer->whatsapp_number])
                                                            ? $this->waitingMessages[$value->customer->whatsapp_number] : 0;
                                                        // if message queue is full then go for the next;
                                                        if ($isSendingLimitFull >= config('apiwha.message_queue_limit', 100)) {
                                                            continue;
                                                        }

                                                        $myRequest = new Request();
                                                        $myRequest->setMethod('POST');
                                                        $myRequest->request->add(['messageId' => $value->id]);
                                                        app(\App\Http\Controllers\WhatsAppController::class)->approveMessage('customer', $myRequest);

                                                        $dataInsert = [
                                                            'counter' => $sendLimit,
                                                            'number'  => $number,
                                                            'type'    => 'individual',
                                                            'user_id' => $value->customer_id,
                                                            'time'    => Carbon::now()->format('Y-m-d H:i:s'),
                                                        ];
                                                        MessageQueueHistory::insert($dataInsert);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }

                                //  For vendor
                                $this->waitingMessages = [];

                                if (! empty($numberList)) {
                                    foreach ($numberList as $no) {
                                        $chatApi                    = new ChatApi;
                                        $waitingMessage             = $chatApi->waitingLimit($no);
                                        $this->waitingMessages[$no] = $waitingMessage;
                                    }
                                }

                                if (! empty($numberList)) {
                                    foreach ($numberList as $number) {
                                        $sendLimit = isset($limit[$number]) ? $limit[$number] : 0;

                                        $chatMessage = ChatMessage::where('is_queue', '>', 0)
                                            ->join('vendors as v', 'v.id', 'chat_messages.vendor_id')
                                            ->where('v.whatsapp_number', $number)
                                            ->select('chat_messages.*')
                                            ->limit($sendLimit)->get();

                                        if (! $chatMessage->isEmpty()) {
                                            foreach ($chatMessage as $value) {
                                                // check first if message need to be send from broadcast
                                                if ($value->is_queue > 1) {
                                                    $sendNumber = \DB::table('whatsapp_configs')->where('id', $value->is_queue)->first();
                                                    // if chat message has image then send as a multiple message
                                                    if ($images = $value->getMedia(config('constants.media_tags'))) {
                                                        foreach ($images as $k => $image) {
                                                            \App\ImQueue::create([
                                                                'im_client'                 => 'whatsapp',
                                                                'number_to'                 => $value->vendor->phone,
                                                                'number_from'               => ($sendNumber) ? $sendNumber->number : $value->vendor->whatsapp_number,
                                                                'text'                      => ($k == 0) ? $value->message : '',
                                                                'image'                     => getMediaUrl($image),
                                                                'priority'                  => self::BROADCAST_PRIORITY,
                                                                'marketing_message_type_id' => self::MARKETING_MESSAGE_TYPE_ID,
                                                            ]);
                                                        }
                                                    } else {
                                                        \App\ImQueue::create([
                                                            'im_client'                 => 'whatsapp',
                                                            'number_to'                 => $value->vendor->phone,
                                                            'number_from'               => ($sendNumber) ? $sendNumber->number : $value->vendor->whatsapp_number,
                                                            'text'                      => $value->message,
                                                            'priority'                  => self::BROADCAST_PRIORITY,
                                                            'marketing_message_type_id' => self::MARKETING_MESSAGE_TYPE_ID,
                                                        ]);
                                                    }

                                                    $value->is_queue = 0;
                                                    $value->save();
                                                } else {
                                                    // check message is full or not
                                                    $isSendingLimitFull = isset($this->waitingMessages[$value->vendor->whatsapp_number])
                                                        ? $this->waitingMessages[$value->vendor->whatsapp_number] : 0;
                                                    // if message queue is full then go for the next;
                                                    if ($isSendingLimitFull >= config('apiwha.message_queue_limit', 100)) {
                                                        continue;
                                                    }

                                                    $myRequest = new Request();
                                                    $myRequest->setMethod('POST');
                                                    $myRequest->request->add(['messageId' => $value->id]);
                                                    app(\App\Http\Controllers\WhatsAppController::class)->approveMessage('vendor', $myRequest);
                                                }
                                            }
                                        }
                                    }
                                }

                                $report->update(['end_time' => Carbon::now()]);
                            } catch (Exception $e) {
                                \App\CronJob::insertLastError($this->signature, $e->getMessage());
                            }
                        }
                    }
                }
            }
        }
    }
}


File: /opt/lampp/htdocs/erp/app/Console/Commands/SendQueuePendingChatMessagesGroup.php 
Content: <?php

namespace App\Console\Commands;

use Schema;
use Carbon\Carbon;
use App\ChatMessage;
use App\MessageQueueHistory;
use Illuminate\Http\Request;
use Illuminate\Console\Command;
use App\Services\Whatsapp\ChatApi\ChatApi;

class SendQueuePendingChatMessagesGroup extends Command
{
    const BROADCAST_PRIORITY = 8;

    const MARKETING_MESSAGE_TYPE_ID = 3;

    public $waitingMessages;

    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'send:queue-pending-chat-group-messages {number}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'send queue pending chat group messages, run at every 3rd minute';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    public static function getNumberList()
    {
        $q = \DB::table('whatsapp_configs')->select([
            'number', 'instance_id', 'token', 'is_customer_support', 'status', 'is_default',
        ])->where('instance_id', '!=', '')
            ->where('token', '!=', '')
            ->where('status', 1)
            ->orderBy('is_default', 'DESC')
            ->get();

        $noList = [];
        foreach ($q as $queue) {
            $noList[] = $queue->number;
        }

        return $noList;
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        if ((! env('CI')) && (Schema::hasTable('chat_messages'))) {
            $queueStartTime = \App\ChatMessage::getStartTime();
            $queueEndTime   = \App\ChatMessage::getEndTime();
            $queueTime      = \App\ChatMessage::getQueueTime();
            // check if time both is not empty then run the cron
            if (! empty($queueStartTime) && ! empty($queueEndTime)) {
                if (! empty($queueTime)) {
                    foreach ($queueTime as $no => $time) {
                        if ($time > 0) {
                            $tempSettingData = \DB::table('settings')->where('name', 'is_queue_sending_limit')->get();
                            try {
                                $report = \App\CronJobReport::create([
                                    'signature'  => $this->signature,
                                    'start_time' => Carbon::now(),
                                ]);

                                $numberList = [$this->argument('number')];
                                \Log::info('send:queue-pending-chat-group-messages ' . $this->argument('number') . ' : Number found while sending request from the group ' . $this->argument('number'));

                                // get the status for approval
                                $approveMessage = \App\Helpers\DevelopmentHelper::needToApproveMessage();
                                $limit          = ChatMessage::getQueueLimit();
                                \Log::info('send:queue-pending-chat-group-messages ' . $this->argument('number') . " : Message is approve {$approveMessage} and limit found as  " . json_encode($limit));

                                // if message is approve then only need to run the queue
                                if ($approveMessage == 1) {
                                    $allWhatsappNo = config('apiwha.instances');

                                    $this->waitingMessages = [];
                                    if (! empty($numberList)) {
                                        foreach ($numberList as $no) {
                                            $chatApi                    = new ChatApi;
                                            $waitingMessage             = $chatApi->waitingLimit($no);
                                            $this->waitingMessages[$no] = $waitingMessage;
                                        }
                                    }

                                    \Log::info('send:queue-pending-chat-group-messages ' . $this->argument('number') . ' : waiting limit is as below  ' . json_encode($this->waitingMessages));

                                    if (! empty($numberList)) {
                                        $groups = ChatMessage::where('is_queue', '>', 0)->where('group_id', '>', 0)->groupBy('group_id')->pluck('group_id')->toArray();
                                        foreach ($numberList as $number) {
                                            $sendLimit = isset($limit[$number]) ? $limit[$number] : 0;
                                            \Log::info('send:queue-pending-chat-group-messages ' . $this->argument('number') . ' : sending limit found ' . $sendLimit);
                                            foreach ($groups as $group) {
                                                // get the group list first
                                                $chatMessage = ChatMessage::where('is_queue', '>', 0)
                                                    ->join('customers as c', 'c.id', 'chat_messages.customer_id')
                                                    ->where('chat_messages.group_id', $group)
                                                    ->where('c.whatsapp_number', $number)
                                                    ->select('chat_messages.*')
                                                    ->limit($sendLimit)
                                                    ->get();

                                                \Log::info('send:queue-pending-chat-group-messages ' . $this->argument('number') . ' : Chat Message found  ' . $chatMessage->count());

                                                if (! $chatMessage->isEmpty()) {
                                                    foreach ($chatMessage as $value) {
                                                        // check first if message need to be send from broadcast
                                                        if ($value->is_queue > 1) {
                                                            $sendNumber = \DB::table('whatsapp_configs')->where('id', $value->is_queue)->first();
                                                            // if chat message has image then send as a multiple message
                                                            if ($images = $value->getMedia(config('constants.media_tags'))) {
                                                                foreach ($images as $k => $image) {
                                                                    \App\ImQueue::create([
                                                                        'im_client'                 => 'whatsapp',
                                                                        'number_to'                 => $value->customer->phone,
                                                                        'number_from'               => ($sendNumber) ? $sendNumber->number : $value->customer->whatsapp_number,
                                                                        'text'                      => ($k == 0) ? $value->message : '',
                                                                        'image'                     => getMediaUrl($image),
                                                                        'priority'                  => self::BROADCAST_PRIORITY,
                                                                        'marketing_message_type_id' => self::MARKETING_MESSAGE_TYPE_ID,
                                                                    ]);
                                                                }
                                                            } else {
                                                                \App\ImQueue::create([
                                                                    'im_client'                 => 'whatsapp',
                                                                    'number_to'                 => $value->customer->phone,
                                                                    'number_from'               => ($sendNumber) ? $sendNumber->number : $value->customer->whatsapp_number,
                                                                    'text'                      => $value->message,
                                                                    'priority'                  => self::BROADCAST_PRIORITY,
                                                                    'marketing_message_type_id' => self::MARKETING_MESSAGE_TYPE_ID,
                                                                ]);
                                                            }

                                                            $value->is_queue = 0;
                                                            $value->save();

                                                            $dataInsert = [
                                                                'counter' => $sendLimit,
                                                                'number'  => $number,
                                                                'type'    => 'group',
                                                                'user_id' => $value->customer_id,
                                                                'time'    => Carbon::now()->format('Y-m-d H:i:s'),
                                                            ];
                                                            MessageQueueHistory::insert($dataInsert);
                                                        } else {
                                                            // check message is full or not
                                                            $isSendingLimitFull = isset($this->waitingMessages[$value->customer->whatsapp_number])
                                                                ? $this->waitingMessages[$value->customer->whatsapp_number] : 0;

                                                            \Log::info('send:queue-pending-chat-group-messages ' . $this->argument('number') . ' : Sending limit  ' . $isSendingLimitFull . ' < ' . config('apiwha.message_queue_limit', 100));
                                                            // if message queue is full then go for the next;
                                                            if ($isSendingLimitFull >= config('apiwha.message_queue_limit', 100)) {
                                                                continue;
                                                            }

                                                            $myRequest = new Request();
                                                            $myRequest->setMethod('POST');
                                                            $myRequest->request->add(['messageId' => $value->id]);
                                                            app(\App\Http\Controllers\WhatsAppController::class)->approveMessage('customer', $myRequest);

                                                            $dataInsert = [
                                                                'counter' => $sendLimit,
                                                                'number'  => $number,
                                                                'type'    => 'group',
                                                                'user_id' => $value->customer_id,
                                                                'time'    => Carbon::now()->format('Y-m-d H:i:s'),
                                                            ];
                                                            MessageQueueHistory::insert($dataInsert);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }

                                $report->update(['end_time' => Carbon::now()]);
                            } catch (Exception $e) {
                                \App\CronJob::insertLastError($this->signature, $e->getMessage());
                            }
                        }
                    }
                }
            }
        }
    }
}


File: /opt/lampp/htdocs/erp/app/Console/Commands/SendReminderToCustomerIfTheyHaventReplied.php 
Content: <?php

namespace App\Console\Commands;

use App\Customer;
use Carbon\Carbon;
use App\ChatMessage;
use App\CronJobReport;
use App\Helpers\LogHelper;
use Illuminate\Http\Request;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;
use App\Http\Controllers\WhatsAppController;

class SendReminderToCustomerIfTheyHaventReplied extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'reminder:send-to-customer';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Command description';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        LogHelper::createCustomLogForCron($this->signature, ['message' => 'cron was started.']);
        try {
            $report = CronJobReport::create([
                'signature'  => $this->signature,
                'start_time' => Carbon::now(),
            ]);
            LogHelper::createCustomLogForCron($this->signature, ['message' => 'report was updated.']);

            $now = Carbon::now()->toDateTimeString();

            //get latest messages for each customer ignoring the auto messages
                $messagesIds = DB::table('chat_messages')
                    ->selectRaw('MAX(id) as id, customer_id')
                    ->groupBy('customer_id')
                    ->whereNotNull('message')
                    ->where('customer_id', '>', '0')
                    ->where(function ($query) {
                        $query->whereNotIn('status', [7, 8, 9, 10]);
                    })
                    ->get();
            LogHelper::createCustomLogForCron($this->signature, ['message' => 'chat message query was finished.']);

            foreach ($messagesIds as $messagesId) {
                $customer = Customer::find($messagesId->customer_id);
                LogHelper::createCustomLogForCron($this->signature, ['message' => 'customer query finished.']);
                if (! $customer) {
                    continue;
                }

                $frequency = $customer->frequency;
                if (! ($frequency >= 5)) {
                    continue;
                }

                if ($customer->reminder_from == '0000-00-00 00:00' || strtotime($customer->reminder_from) >= strtotime('now')) {
                    dump('here' . $customer->name);
                    $templateMessage = $customer->reminder_message;
                    if ($customer->reminder_last_reply == 0) {
                        //sends messahe
                        $this->sendMessage($customer->id, $templateMessage);
                        LogHelper::createCustomLogForCron($this->signature, ['message' => 'message sent.']);
                    } else {
                        // get the message if the interval is greater or equal to time which is set for this customer
                        $message = ChatMessage::whereRaw('TIMESTAMPDIFF(MINUTE, `updated_at`, "' . $now . '") >= ' . $frequency)
                            ->where('id', $messagesId->id)
                            ->where('user_id', '>', '0')
                            ->where('approved', '1')
                            ->first();
                        LogHelper::createCustomLogForCron($this->signature, ['message' => 'chat message query was finished.']);

                        if (! $message) {
                            continue;
                        }
                        $this->sendMessage($customer->id, $templateMessage);
                        LogHelper::createCustomLogForCron($this->signature, ['message' => 'report endtime was updated.']);
                    }
                    dump('saving...');
                }
            }

            $report->update(['end_time' => Carbon::now()]);
            LogHelper::createCustomLogForCron($this->signature, ['message' => 'report time was updated.']);
            LogHelper::createCustomLogForCron($this->signature, ['message' => 'cron was ended.']);
        } catch (Exception $e) {
            LogHelper::createCustomLogForCron($this->signature, ['Exception' => $e->getTraceAsString(), 'message' => $e->getMessage()]);

            \App\CronJob::insertLastError($this->signature, $e->getMessage());
        }
    }

    /**
     * @param $message
     * Send message to customer, create message and then approve message...
     * @param mixed $customer
     */
    private function sendMessage($customer, $message): void
    {
        $params = [
            'number'      => null,
            'user_id'     => 6,
            'approved'    => 1,
            'status'      => 1,
            'customer_id' => $customer,
            'message'     => $message,
        ];

        $chat_message = ChatMessage::create($params);

        $myRequest = new Request();
        $myRequest->setMethod('POST');
        $myRequest->request->add(['messageId' => $chat_message->id]);

        app(WhatsAppController::class)->approveMessage('customer', $myRequest);
    }
}


File: /opt/lampp/htdocs/erp/app/Console/Commands/SendReminderToDubbizlesIfTheyHaventReplied.php 
Content: <?php

namespace App\Console\Commands;

use App\Dubbizle;
use Carbon\Carbon;
use App\ChatMessage;
use App\CronJobReport;
use App\Helpers\LogHelper;
use Illuminate\Http\Request;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;
use App\Http\Controllers\WhatsAppController;

class SendReminderToDubbizlesIfTheyHaventReplied extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'reminder:send-to-dubbizle';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Command description';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        LogHelper::createCustomLogForCron($this->signature, ['message' => 'cron was started.']);
        try {
            $report = CronJobReport::create([
                'signature'  => $this->signature,
                'start_time' => Carbon::now(),
            ]);
            LogHelper::createCustomLogForCron($this->signature, ['message' => 'report was updated.']);

            $now = Carbon::now()->toDateTimeString();

            $messagesIds = DB::table('chat_messages')
                ->selectRaw('MAX(id) as id, dubbizle_id')
                ->groupBy('dubbizle_id')
                ->whereNotNull('message')
                ->where('dubbizle_id', '>', '0')
                ->where(function ($query) {
                    $query->whereNotIn('status', [7, 8, 9]);
                })
                ->get();
            LogHelper::createCustomLogForCron($this->signature, ['message' => 'chat message query was finished.']);

            foreach ($messagesIds as $messagesId) {
                $dubbizle = Dubbizle::find($messagesId->dubbizle_id);
                LogHelper::createCustomLogForCron($this->signature, ['message' => 'dubbizle message query was finished.']);
                if (! $dubbizle) {
                    continue;
                }

                $frequency = $dubbizle->frequency;
                if (! ($frequency >= 5)) {
                    continue;
                }

                $message = ChatMessage::whereRaw('TIMESTAMPDIFF(MINUTE, `updated_at`, "' . $now . '") >= ' . $frequency)
                    ->where('id', $messagesId->id)
                    ->where('user_id', '>', '0')
                    ->where('approved', '1')
                    ->first();
                LogHelper::createCustomLogForCron($this->signature, ['message' => 'chat message query was finished.']);

                if (! $message) {
                    continue;
                }

                dump('saving...');

                $templateMessage = $dubbizle->reminder_message;

                $this->sendMessage($dubbizle->id, $templateMessage);
                LogHelper::createCustomLogForCron($this->signature, ['message' => 'Message sent.']);
            }

            $report->update(['end_time' => Carbon::now()]);
            LogHelper::createCustomLogForCron($this->signature, ['message' => 'report endtime was updated.']);
            LogHelper::createCustomLogForCron($this->signature, ['message' => 'cron was finished.']);
        } catch (Exception $e) {
            LogHelper::createCustomLogForCron($this->signature, ['Exception' => $e->getTraceAsString(), 'message' => $e->getMessage()]);

            \App\CronJob::insertLastError($this->signature, $e->getMessage());
        }
    }

    private function sendMessage($dubbizle, $message): void
    {
        $params = [
            'number'      => null,
            'user_id'     => 6,
            'approved'    => 1,
            'status'      => 1,
            'dubbizle_id' => $dubbizle,
            'message'     => $message,
        ];

        $chat_message = ChatMessage::create($params);

        $myRequest = new Request();
        $myRequest->setMethod('POST');
        $myRequest->request->add(['messageId' => $chat_message->id]);

        app(WhatsAppController::class)->approveMessage('dubbizle', $myRequest);
    }
}


File: /opt/lampp/htdocs/erp/app/Console/Commands/SendReminderToSupplierIfTheyHaventReplied.php 
Content: <?php

namespace App\Console\Commands;

use App\Supplier;
use Carbon\Carbon;
use App\ChatMessage;
use App\CronJobReport;
use Illuminate\Http\Request;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;
use App\Http\Controllers\WhatsAppController;

class SendReminderToSupplierIfTheyHaventReplied extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'reminder:send-to-supplier';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Command description';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        try {
            $report = CronJobReport::create([
                'signature'  => $this->signature,
                'start_time' => Carbon::now(),
            ]);

            $now = Carbon::now()->toDateTimeString();

            //get latest message of the supplier exclusing the auto messages
            $messagesIds = DB::table('chat_messages')
                ->selectRaw('MAX(id) as id, supplier_id')
                ->groupBy('supplier_id')
                ->whereNotNull('message')
                ->where('supplier_id', '>', '0')
                ->where(function ($query) {
                    $query->whereNotIn('status', [7, 8, 9]);
                })
                ->get();

            foreach ($messagesIds as $messagesId) {
                $supplier = Supplier::find($messagesId->supplier_id);

                if (! $supplier) {
                    continue;
                }

                $frequency = $supplier->frequency;
                if (! ($frequency >= 5)) {
                    continue;
                }

                // get the message if the interval is >= then that we have set for this supplier
                $message = ChatMessage::whereRaw('TIMESTAMPDIFF(MINUTE, `updated_at`, "' . $now . '") >= ' . $frequency)
                    ->where('id', $messagesId->id)
                    ->where('user_id', '>', '0')
                    ->where('approved', '1')
                    ->first();

                if (! $message) {
                    continue;
                }

                dump('saving...');

                $templateMessage = $supplier->reminder_message;

                //Send message to the supplier
                $this->sendMessage($supplier->id, $templateMessage);
            }

            $report->update(['end_time' => Carbon::now()]);
        } catch (Exception $e) {
            \App\CronJob::insertLastError($this->signature, $e->getMessage());
        }
    }

    /**
     * @param $message
     * Create the chat_message record and then approve and send the message
     * @param mixed $supplier
     */
    private function sendMessage($supplier, $message): void
    {
        $params = [
            'number'      => null,
            'user_id'     => 6,
            'approved'    => 1,
            'status'      => 1,
            'supplier_id' => $supplier,
            'message'     => $message,
        ];

        $chat_message = ChatMessage::create($params);

        $myRequest = new Request();
        $myRequest->setMethod('POST');
        $myRequest->request->add(['messageId' => $chat_message->id]);

        app(WhatsAppController::class)->approveMessage('supplier', $myRequest);
    }
}


File: /opt/lampp/htdocs/erp/app/Console/Commands/SendReminderToVendorIfTheyHaventReplied.php 
Content: <?php

namespace App\Console\Commands;

use App\Vendor;
use Carbon\Carbon;
use App\ChatMessage;
use App\CronJobReport;
use App\Helpers\LogHelper;
use Illuminate\Http\Request;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;
use App\Http\Controllers\WhatsAppController;

class SendReminderToVendorIfTheyHaventReplied extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'reminder:send-to-vendor';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Command description';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        LogHelper::createCustomLogForCron($this->signature, ['message' => 'cron was started.']);
        try {
            $report = CronJobReport::create([
                'signature'  => $this->signature,
                'start_time' => Carbon::now(),
            ]);
            LogHelper::createCustomLogForCron($this->signature, ['message' => 'report was added.']);

            $now = Carbon::now()->toDateTimeString();

            // get the latest message for this vendor excluding the auto messages like supplier and customers
            $messagesIds = DB::table('chat_messages')
                ->selectRaw('MAX(id) as id, vendor_id')
                ->groupBy('vendor_id')
                ->whereNotNull('message')
                ->where('vendor_id', '>', '0')
                ->where(function ($query) {
                    $query->whereNotIn('status', [7, 8, 9]);
                })
                ->get();
            LogHelper::createCustomLogForCron($this->signature, ['message' => 'chat message query finished.']);

            foreach ($messagesIds as $messagesId) {
                $vendor = Vendor::find($messagesId->vendor_id);
                LogHelper::createCustomLogForCron($this->signature, ['message' => 'vendor query finished.']);
                if (! $vendor) {
                    continue;
                }

                $frequency = $vendor->frequency;
                if (! ($frequency >= 5)) {
                    continue;
                }

                if ($vendor->reminder_from == '0000-00-00 00:00' || strtotime($vendor->reminder_from) >= strtotime('now')) {
                    dump('here' . $vendor->name);
                    $templateMessage = $vendor->reminder_message;
                    if ($vendor->reminder_last_reply == 0) {
                        //sends messahe
                        $this->sendMessage($vendor->id, $templateMessage);
                        dump('saving...');
                    } else {
                        // get the message if the interval is greater or equal to time which is set for this customer
                        $message = ChatMessage::whereRaw('TIMESTAMPDIFF(MINUTE, `updated_at`, "' . $now . '") >= ' . $frequency)
                            ->where('id', $messagesId->id)
                            ->where('user_id', '>', '0')
                            ->where('approved', '1')
                            ->first();

                        LogHelper::createCustomLogForCron($this->signature, ['message' => 'Chat message query finished.']);
                        if (! $message) {
                            continue;
                        }
                        //send the message
                        $this->sendMessage($vendor->id, $templateMessage);
                        dump('saving...');
                    }
                }
            }

            $report->update(['end_time' => Carbon::now()]);
            LogHelper::createCustomLogForCron($this->signature, ['message' => 'report endtime was updated.']);
            LogHelper::createCustomLogForCron($this->signature, ['message' => 'cron was ended.']);
        } catch (Exception $e) {
            LogHelper::createCustomLogForCron($this->signature, ['Exception' => $e->getTraceAsString(), 'message' => $e->getMessage()]);

            \App\CronJob::insertLastError($this->signature, $e->getMessage());
        }
    }

    /**
     * @param $message
     * create chat message entry and then approve the message and send the message...
     * @param mixed $vendorId
     */
    private function sendMessage($vendorId, $message)
    {
        $params = [
            'number'    => null,
            'user_id'   => 6,
            'approved'  => 1,
            'status'    => 1,
            'vendor_id' => $vendorId,
            'message'   => $message,
        ];

        $chat_message = ChatMessage::create($params);

        $myRequest = new Request();
        $myRequest->setMethod('POST');
        $myRequest->request->add(['messageId' => $chat_message->id]);

        app(WhatsAppController::class)->approveMessage('vendor', $myRequest);
    }
}


File: /opt/lampp/htdocs/erp/app/Console/Commands/SendReportHourlyUserTask.php 
Content: <?php

namespace App\Console\Commands;

use DB;
use Carbon\Carbon;
use App\Helpers\HubstaffTrait;
use Illuminate\Console\Command;

class SendReportHourlyUserTask extends Command
{
    use HubstaffTrait;

    private $client;

    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'hubstaff:send_report_hourly_user_task';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Sends hubstaff report to whatsapp based every hour if user not select task ';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        try {
            $report = \App\CronJobReport::create([
                'signature'  => $this->signature,
                'start_time' => Carbon::now(),
            ]);

            $users = DB::table('hubstaff_activities')
                ->select('hubstaff_activities.user_id', 'hubstaff_members.hubstaff_user_id', 'users.*')
                ->leftJoin('hubstaff_members', 'hubstaff_activities.user_id', 'hubstaff_members.hubstaff_user_id')
                ->leftJoin('users', 'hubstaff_members.user_id', 'users.id')
                ->where('task_id', 0)
                ->whereDate('starts_at', date('Y-m-d'))
                ->groupBy('user_id')
                ->orderBy('id', 'desc')->get();
            \Log::info('Hubstaff task not select Total user : ' . count($users));
            foreach ($users as $key => $user) {
                if ($user->whatsapp_number) {
                    app(\App\Http\Controllers\WhatsAppController::class)->sendWithWhatsApp($user->phone, $user->whatsapp_number, 'Please select task on hubstaff', true);
                }
            }

            $report->update(['end_time' => Carbon::now()]);
        } catch (Exception $e) {
            \Log::error('Hubstaff task not select Total user : ' . $e->getMessage());
            \App\CronJob::insertLastError($this->signature, $e->getMessage());
        }
    }
}


File: /opt/lampp/htdocs/erp/app/Console/Commands/SetTemplatesForProduct.php 
Content: <?php

namespace App\Console\Commands;

use DB;
use App\Product;
use App\Template;
use App\ProductTemplate;
use Plank\Mediable\Media;
use App\Helpers\LogHelper;
use Illuminate\Console\Command;

class SetTemplatesForProduct extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'template:product';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Gets Selected Product From Template and Process Them to Template Queue';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        LogHelper::createCustomLogForCron($this->signature, ['message' => 'cron was started.']);
        try {
            $totalCount = 0;
            $templates  = Template::where('auto_generate_product', 1)->get();
            LogHelper::createCustomLogForCron($this->signature, ['message' => 'template query was finished.']);
            foreach ($templates as $template) {
                if ($totalCount > 10000) {
                    break;
                    echo 'Completed making 10000 entries';
                }
                //chunk this in 1000

                Product::chunk(1000, function ($products) use ($totalCount, $template) {
                    foreach ($products as $product) {
                        $checkTag = 'template_' . $template->id;
                        $mediable = DB::table('mediables')->where('tag', $checkTag)->where('mediable_id', $product->id)->first();

                        if ($mediable != null) {
                            break;
                        }

                        if ($product->getMedia(config('constants.media_tags'))->count() == 0) {
                            break;
                        }

                        if ($totalCount > 10000) {
                            break;
                            echo 'Completed making 10000 entries';
                        }

                        $productTemplate                = new ProductTemplate;
                        $productTemplate->template_no   = $template->id;
                        $productTemplate->product_title = $product->name;
                        $productTemplate->brand_id      = $product->brand;
                        $productTemplate->currency      = 'eur';
                        if (empty($product->price)) {
                            $product->price = 0;
                        }
                        if (empty($product->price_eur_discounted)) {
                            $product->price_eur_discounted = 0;
                        }
                        $productTemplate->price            = $product->price;
                        $productTemplate->discounted_price = $product->price_eur_discounted;
                        $productTemplate->product_id       = $product->id;
                        $productTemplate->is_processed     = 0;
                        $productTemplate->save();
                        $totalCount++;
                        foreach ($product->getMedia(config('constants.media_tags'))->all() as $media) {
                            $media = Media::find($media->id);
                            $tag   = 'template-image';
                            $productTemplate->attachMedia($media, $tag);
                        }
                    }
                });
            }
            LogHelper::createCustomLogForCron($this->signature, ['message' => 'cron was ended.']);
        } catch (Exception $e) {
            LogHelper::createCustomLogForCron($this->signature, ['Exception' => $e->getTraceAsString(), 'message' => $e->getMessage()]);

            \App\CronJob::insertLastError($this->signature, $e->getMessage());
        }
    }
}


File: /opt/lampp/htdocs/erp/app/Console/Commands/StoreImageFromScraperProduct.php 
Content: <?php

namespace App\Console\Commands;

use App\Helpers\LogHelper;
use Illuminate\Console\Command;

class StoreImageFromScraperProduct extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'store-image-from-scraped-product';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Store image from scraped products';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        LogHelper::createCustomLogForCron($this->signature, ['message' => 'cron was started.']);
        try {
            $images = \App\Product::join('mediables as med', function ($q) {
                $q->on('med.mediable_id', 'products.id');
                $q->where('med.mediable_type', \App\Product::class);
                $q->where('med.tag', 'original');
            })
                ->leftJoin('media as m', 'm.id', 'med.media_id')
                ->where('products.is_cron_check', 0)
                ->select(['products.*', 'm.id as media_id'])
                ->havingRaw('media_id is null')
                ->groupBy('products.id')
                ->get();
            LogHelper::createCustomLogForCron($this->signature, ['message' => 'Product query finished.']);
            if (! $images->isEmpty()) {
                foreach ($images as $im) {
                    \Log::info('Product started => ' . $im->id);
                    LogHelper::createCustomLogForCron($this->signature, ['message' => 'Product started => ' . $im->id]);
                    $this->info('Product started => ' . $im->id);
                    $scrapedProducts = \App\ScrapedProducts::where('sku', $im->sku)->orWhere('product_id', $im->id)->first();
                    LogHelper::createCustomLogForCron($this->signature, ['message' => 'Scraped product query finished']);
                    if ($scrapedProducts) {
                        // delete image which is original
                        \DB::table('mediables')->where('mediable_type', \App\Product::class)->where('mediable_id', $im->id)->where('tag', 'original')->delete();
                        $listOfImages = $scrapedProducts->images;
                        if (! empty($listOfImages) && is_array($listOfImages)) {
                            $this->info('Product images found => ' . count($listOfImages));
                            LogHelper::createCustomLogForCron($this->signature, ['message' => 'Product images found => ' . count($listOfImages)]);
                            $im->attachImagesToProduct($listOfImages);
                        }
                        if (in_array($im->status_id, [9, 12])) {
                            $im->status_id = 4;
                            $im->save();
                        }
                    }

                    $im->is_cron_check = 1;
                    $im->save();
                    LogHelper::createCustomLogForCron($this->signature, ['message' => 'Image saved. => ' . $im->id]);
                }
            }
            LogHelper::createCustomLogForCron($this->signature, ['message' => 'cron job ended.']);
        } catch (Exception $e) {
            LogHelper::createCustomLogForCron($this->signature, ['Exception' => $e->getTraceAsString(), 'message' => $e->getMessage()]);

            \App\CronJob::insertLastError($this->signature, $e->getMessage());
        }
    }
}


File: /opt/lampp/htdocs/erp/app/Console/Commands/UpdateCronSchedule.php 
Content: <?php

namespace App\Console\Commands;

use Cron\CronExpression;
use Illuminate\Console\Command;

class UpdateCronSchedule extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'cronschedule:update';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Update Cron Schedule';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        // disable all events which is past if still active
        try {
            $dateToday = date('Y-m-d H:i:s');
            \DB::table('erp_events')->where('end_date', '<=', $dateToday)->where('is_closed', 0)->update(['is_closed' => 1]);

            $events = \App\ErpEvents::where('is_closed', 0)->get();

            if (! $events->isEmpty()) {
                foreach ($events as $event) {
                    try {
                        $cron = CronExpression::factory("$event->minute $event->hour $event->day_of_month $event->month $event->day_of_week");
                        if ($cron->isDue()) {
                            $event->next_run_date = $cron->getNextRunDate()->format('Y-m-d H:i:s');
                        } else {
                            $event->is_closed = 1;
                        }
                    } catch (Exception $e) {
                        $event->is_closed = 1;
                    }

                    $event->save();
                }
            }
        } catch (Exception $e) {
            \App\CronJob::insertLastError($this->signature, $e->getMessage());
        }
    }
}


File: /opt/lampp/htdocs/erp/app/Console/Commands/UpdateCustomerSizeFromOrder.php 
Content: <?php

namespace App\Console\Commands;

use Carbon\Carbon;
use App\CronJobReport;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;

class UpdateCustomerSizeFromOrder extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'update-customer-size-from-order';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'update customer size from order';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        try {
            $report = CronJobReport::create([
                'signature'  => $this->signature,
                'start_time' => Carbon::now(),
            ]);

            $orders = DB::table('orders')
                ->join('order_products', function ($query) {
                    $query->on('orders.id', '=', 'order_products.order_id');
                    $query->where('order_products.size', '<>', '');
                })
                ->join('customers', function ($query) {
                    $query->on('customers.id', '=', 'orders.customer_id');
                    $query->whereNull('customers.shoe_size');
                })
                ->select(['order_products.size', 'customers.id'])
                ->groupBy('customers.id')
                ->get();
            if ($orders) {
                foreach ($orders as $order) {
                    if ($order->customer_id) {
                        \App\Customer::where('id', $order->customer_id)->update(['shoe_size' => $order->size]);
                    }
                }
            }
            echo 'Successfully update!!';

            $report->update(['end_time' => Carbon::now()]);
        } catch (Exception $e) {
            \App\CronJob::insertLastError($this->signature, $e->getMessage());
        }
    }
}


File: /opt/lampp/htdocs/erp/app/Console/Commands/UpdateInventory.php 
Content: <?php

namespace App\Console\Commands;

use Carbon\Carbon;
use App\CronJobReport;
use App\Helpers\LogHelper;
use Illuminate\Console\Command;
use App\Jobs\CallHelperForZeroStockQtyUpdate;

class UpdateInventory extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'inventory:update';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Update the inventory in the ERP';

    /**
     * Create a new command instance.
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        LogHelper::createCustomLogForCron($this->signature, ['message' => 'Cron was started to run']);

        \Log::info('Update Inventory');
        try {
            \Log::info('Update Inventory TRY');
            $report = CronJobReport::create([
                'signature'  => $this->signature,
                'start_time' => Carbon::now(),
            ]);
            \Log::info('Products Begin: ');

            // find all product first
            \Log::info('Products Query: ');
            $products = \App\Supplier::join('scrapers as sc', 'sc.supplier_id', 'suppliers.id')
                ->join('scraped_products as sp', 'sp.website', 'sc.scraper_name')
                ->where(function ($q) {
                    $q->whereDate('last_cron_check', '!=', date('Y-m-d'))->orWhereNull('last_cron_check');
                })
                ->where('suppliers.supplier_status_id', 1)
                ->select('sp.last_inventory_at', 'sp.sku', 'sc.inventory_lifetime', 'suppliers.id as supplier_id', 'sp.id as sproduct_id', 'last_cron_check')
                ->groupBy('sku')
                ->get();

            LogHelper::createCustomLogForCron($this->signature, ['message' => 'Supplier model query finished.']);

            $skuProductArr    = [];
            $skusArr          = $products->pluck('sku')->toArray();
            $selectedProducts = \App\Product::select('id', 'isUploaded', 'color', 'sku')
                ->whereIn('sku', $skusArr)
                ->get();

            LogHelper::createCustomLogForCron($this->signature, ['message' => 'Product model query finished.']);

            foreach ($selectedProducts as $selected_prod_key => $selected_prod_value) {
                $skuProductArr[$selected_prod_value->sku] = [
                    'product_id' => $selected_prod_value->id,
                    'isUploaded' => $selected_prod_value->isUploaded,
                    'color'      => $selected_prod_value->color,
                ];
            }
            if (! empty($products)) {
                LogHelper::createCustomLogForCron($this->signature, ['message' => 'Products records found']);

                \Log::info('Update Inventory Products Found');
                $sproductIdArr = [];
                $statusHistory = [];
                $needToCheck   = [];
                $productIdsArr = [];
                $hasInventory  = false;
                $productId     = null;
                $today         = date('Y-m-d');
                foreach ($products as $sku => $records) {
                    \Log::info('Checking :' . json_encode($records));
                    $sku = $records['sku'];
                    \Log::info('skuRecords :' . json_encode($records));
                    if (isset($skuProductArr[$sku]) && $skuProductArr[$sku]['isUploaded'] == 1) {
                        $records['product_id'] = $skuProductArr[$sku]['product_id'];
                        $records['isUploaded'] = $skuProductArr[$sku]['isUploaded'];
                        $records['color']      = $skuProductArr[$sku]['color'];
                        \Log::info('**Product Found**');
                        array_push($sproductIdArr, $records['sproduct_id']);
                        $inventoryLifeTime = isset($records['inventory_lifetime']) && is_numeric($records['inventory_lifetime'])
                            ? $records['inventory_lifetime']
                            : 0;
                        if (isset($records['product_id']) && isset($records['supplier_id'])) {
                            $history       = \App\InventoryStatusHistory::where('date', $today)->where('product_id', $records['product_id'])->where('supplier_id', $records['supplier_id'])->first();
                            $lasthistory   = \App\InventoryStatusHistory::where('date', '<', $today)->where('product_id', $records['product_id'])->where('supplier_id', $records['supplier_id'])->orderBy('created_at', 'desc')->first();
                            $prev_in_stock = 0;
                            $new_in_stock  = 1;
                            if ($lasthistory) {
                                $prev_in_stock = $lasthistory->in_stock;
                                $new_in_stock  = $lasthistory->in_stock + 1;
                            }
                            if ($history) {
                                $history->update(['in_stock' => $new_in_stock, 'prev_in_stock' => $prev_in_stock]);

                                LogHelper::createCustomLogForCron($this->signature, ['message' => 'Inventory status history updated']);
                                \Log::info('StatusHistory updated for product: ' . $records['product_id']);
                            } else {
                                $statusHistory[] = [
                                    'product_id'    => $records['product_id'],
                                    'supplier_id'   => $records['supplier_id'],
                                    'date'          => $today,
                                    'in_stock'      => $new_in_stock,
                                    'prev_in_stock' => $prev_in_stock,
                                    'created_at'    => date('Y-m-d H:i:s'),
                                ];
                                \Log::info('StatusHistory push data');
                            }
                            $productId = $records['product_id'];
                        } else {
                            \Log::info('product_id or supplier_id is not found');

                            LogHelper::createCustomLogForCron($this->signature, ['message' => 'product_id or supplier_id is not found']);
                        }
                        if (is_null($records['last_inventory_at']) || strtotime($records['last_inventory_at']) < strtotime('-' . $inventoryLifeTime . ' days')) {
                            $needToCheck[] = ['id' => $records['product_id'], 'sku' => $records['sku'] . '-' . $records['color']];
                            \Log::info('Last inventory condition is success');

                            LogHelper::createCustomLogForCron($this->signature, ['message' => 'Last inventory condition is success']);

                            continue;
                        } else {
                            \Log::info('Last inventory condition is failed');
                            LogHelper::createCustomLogForCron($this->signature, ['message' => 'Last inventory condition is failed']);
                        }
                        $hasInventory = true;
                        dump('Scraped Product updated : ' . $records['sproduct_id']);
                    } else {
                        \Log::info('Product not found or isUploaded value is 0');

                        continue;
                    }
                }
                if (! $hasInventory && ! empty($productId)) {
                    $productIdsArr[] = $productId;
                }
                if (! empty($sproductIdArr)) {
                    \DB::table('scraped_products')->whereIn('id', $sproductIdArr)->update(['last_cron_check' => date('Y-m-d H:i:s')]);
                    \Log::info('********scraped_products updated last_cron_check field********:' . json_encode($sproductIdArr));
                }
                if (! empty($productIdsArr)) {
                    \DB::table('products')->whereIn('id', $productIdsArr)->update(['stock' => 0, 'updated_at' => date('Y-m-d H:i:s')]);
                    \Log::info('********products updated stock to zero and updated_at field********:' . json_encode($productIdsArr));
                }
                if (! empty($statusHistory)) {
                    \App\InventoryStatusHistory::insert($statusHistory);
                    \Log::info('********InventoryStatusHistory Bulk Insert********:' . json_encode($statusHistory));

                    LogHelper::createCustomLogForCron($this->signature, ['message' => 'Saved inventory status history']);
                }
                if (! empty($needToCheck)) {
                    \Log::info('********needToCheck********:' . json_encode($needToCheck));
                    try {
                        $time_start = microtime(true);
                        CallHelperForZeroStockQtyUpdate::dispatch($needToCheck)->onQueue('MagentoHelperForZeroStockQtyUpdate');
                        $time_end = microtime(true);
                    } catch (Exception $e) {
                        \Log::error('inventory:update :: CallHelperForZeroStockQtyUpdate :: ' . $e->getMessage());
                    }
                }
            } else {
                \Log::info('Update Inventory Products Not Found');

                LogHelper::createCustomLogForCron($this->signature, ['message' => 'Update Inventory Products Not Found']);
            }
            \Log::info('TRY END**************');
            // TODO: Update stock in Magento
            $report->update(['end_time' => Carbon::now()]);
        } catch (Exception $e) {
            LogHelper::createCustomLogForCron($this->signature, ['Exception' => $e->getTraceAsString(), 'message' => $e->getMessage()]);

            \Log::info('Update Inventory CATCH');
            \Log::error($e->getMessage());
            \App\CronJob::insertLastError($this->signature, $e->getMessage());
        }
    }
}


File: /opt/lampp/htdocs/erp/app/Console/Commands/UpdateShoeAndClothingSizeFromChatMessages.php 
Content: <?php

namespace App\Console\Commands;

use Carbon\Carbon;
use App\CronJobReport;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;

class UpdateShoeAndClothingSizeFromChatMessages extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'update-shoe-and-clothing-size-from-chat-messages';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'update shoe and clothing size from chat messages';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        try {
            $report = CronJobReport::create([
                'signature'  => $this->signature,
                'start_time' => Carbon::now(),
            ]);

            $chatMessage = DB::table('chat_messages')
                ->leftJoin('customers', 'customers.id', '=', 'customer_id')
                ->select(['chat_messages.id', 'customers.id as customer_id', 'message', 'shoe_size', 'clothing_size'])
                ->where(function ($q) {
                    $q->where('shoe_size', '=', null)
                        ->orWhere('clothing_size', '=', null);
                })
                ->get();
            if ($chatMessage) {
                foreach ($chatMessage as $message) {
                    if ($message->customer_id) {
                        $customerParams = [];
                        if (empty($message->shoe_size)) {
                            $patternArr = [
                                '/size\s*\w*\s([0-9\.]+)/',
                                '/size\s*\?\s([0-9\.]+)/',
                                '/size([0-9\.]+)/',
                                '/([0-9\.]+)\s*size/',
                            ];
                            foreach ($patternArr as $pattern) {
                                $matches = [];
                                preg_match_all($pattern, strtolower($message->message), $matches);
                                if (! empty($matches[1][0])) {
                                    $customerParams['shoe_size'] = $matches[1][0];
                                    break;
                                }
                            }
                        }

                        if (! empty($customerParams)) {
                            \App\Customer::where('id', $message->customer_id)->update($customerParams);
                        }
                    }
                }
            }

            $report->update(['end_time' => Carbon::now()]);
        } catch (Exception $e) {
            \App\CronJob::insertLastError($this->signature, $e->getMessage());
        }
    }
}


    File: /opt/lampp/htdocs/erp/app/Console/Commands/WatsonBrandCategoryGenerate.php 
Content: <?php

namespace App\Console\Commands;

use App\ChatbotQuestionExample;
use Illuminate\Console\Command;

class WatsonBrandCategoryGenerate extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'WatsonBrandCategoryGenerate';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Generate the brand and category combination';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        try {
            \Log::info($this->signature . 'Starting..');

            \DB::table('products')->where('products.name', '!=', null)->join('brands', 'products.brand', 'brands.id')
                ->join('categories as cat', 'cat.id', 'products.category')
                ->leftjoin('categories as sub_cat', 'sub_cat.id', 'cat.parent_id')
                ->leftjoin('categories as main_cat', 'main_cat.id', 'sub_cat.parent_id')
                ->select('cat.title', 'products.id as id', 'brands.name as brand', 'sub_cat.title as sub_category', 'main_cat.title as main_category')
                ->groupBy(['brand', 'category'])->orderBy('products.id', 'asc')->chunk(100, function ($Query) {
                    $chatQueArr = [];

                    foreach ($Query as $key => $value) {
                        $chatQueArr[] = [
                            'question'            => ucwords($value->brand . ' ' . $value->main_category . ' ' . $value->sub_category . ' ' . $value->title),
                            'chatbot_question_id' => 117,
                        ];
                    }

                    ChatbotQuestionExample::insert($chatQueArr);
                    $chatQueArr = [];
                });

            \Log::info($this->signature . 'Run success');
        } catch (Exception $e) {
            \Log::error($this->signature . ':: ' . $e->getMessage());
        }
    }
}


File: /opt/lampp/htdocs/erp/app/Console/Commands/productActivityStore.php 
Content: <?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;

class productActivityStore extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'productActivityStore';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Add product activity data for the day.';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        $productStats = DB::table('products')
            ->select('status_id', DB::raw('COUNT(id) as total'))
            ->where('stock', '>=', 1)
            ->groupBy('status_id')
            ->pluck('total', 'status_id')->all();
        foreach ($productStats as $key => $productStat) {
            $productStats = DB::table('productactivities')->insert([
                'status_id'  => $key,
                'value'      => $productStat,
                'created_at' => DB::raw('CURRENT_TIMESTAMP'),
            ]);
        }

        $this->output->write('Cron complated', true);
    }
}


File: /opt/lampp/htdocs/erp/app/Coupon.php 
Content: <?php

namespace App;

use DB;
use Illuminate\Database\Eloquent\Model;

/**
 * @SWG\Definition(type="object", @SWG\Xml(name="User"))
 */
class Coupon extends Model
{
    /**
     * @var string
     *
     * @SWG\Property(property="magento_id",type="integer")
     * @SWG\Property(property="code",type="string")
     * @SWG\Property(property="description",type="string")
     * @SWG\Property(property="start",type="string")
     * @SWG\Property(property="expiration",type="string")
     * @SWG\Property(property="details",type="string")
     * @SWG\Property(property="currency",type="string")
     * @SWG\Property(property="discount_fixed",type="integer")
     * @SWG\Property(property="discount_percentage",type="integer")
     * @SWG\Property(property="maximum_usage",type="integer")
     * @SWG\Property(property="usage_count",type="integer")
     * @SWG\Property(property="coupon_type",type="string")
     * @SWG\Property(property="email",type="sting")
     * @SWG\Property(property="status",type="sting")
     * @SWG\Property(property="initial_amount",type="sting")
     * @SWG\Property(property="uuid",type="integer")
     * @SWG\Property(property="created_at",type="datetime")
     * @SWG\Property(property="deleted_at",type="datetime")
     */
    protected $fillable = [
        'magento_id', 'code', 'description', 'start', 'expiration', 'details', 'currency', 'discount_fixed', 'discount_percentage', 'minimum_order_amount', 'maximum_usage', 'usage_count', 'coupon_type', 'email', 'status', 'initial_amount', 'uuid',
    ];

    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
        'created_at', 'updated_at', 'deleted_at',
    ];

    protected $appends = ['discount'];

    public function getDiscountAttribute()
    {
        $discount = '';
        if ($this->currency) {
            $discount .= $this->currency . ' ';
        }
        if ($this->discount_fixed) {
            $discount .= $this->discount_fixed . ' fixed plus ';
        }
        if ($this->discount_percentage) {
            $discount .= $this->discount_percentage . '% discount';
        }

        return $discount;
    }

    public static function usageCount($couponIds)
    {
        $query = DB::table('orders')
            ->select('coupon_id', DB::raw('count(*) as count'))
            ->groupBy('coupon_id');

        foreach ($couponIds as $couponId) {
            $query->orHaving('coupon_id', '=', $couponId);
        }

        return $query->get();
    }

    public function usage()
    {
        return $this->hasMany(
            \App\Order::class,
            'coupon_id'
        );
    }
}


File: /opt/lampp/htdocs/erp/app/CroppedImageReference.php 
Content: <?php

namespace App;

/**
 * @SWG\Definition(type="object", @SWG\Xml(name="User"))
 */

use DB;
use Plank\Mediable\Media;
use Illuminate\Database\Eloquent\Model;

class CroppedImageReference extends Model
{
    public function media()
    {
        return $this->hasOne(Media::class, 'id', 'original_media_id');
    }

    public function newMedia()
    {
        return $this->hasOne(Media::class, 'id', 'new_media_id');
    }

    public function getDifferentWebsiteImage($original_media_id)
    {
        return $this->where('original_media_id', $original_media_id)->get();
    }

    public function differentWebsiteImages()
    {
        return $this->hasMany(self::class, 'original_media_id', 'original_media_id');
    }

    public function getDifferentWebsiteName($media_id)
    {
        $media = DB::table('mediables')->select('tag')->where('media_id', $media_id)->first();
        if (! $media) {
            return 'Default';
        }
        if ($media->tag == 'gallery') {
            return 'Default';
        } else {
            $colorCode = str_replace('gallery_', '', $media->tag);
            $site      = StoreWebsite::select('title')->where('cropper_color', $colorCode)->first();
            if ($site) {
                return $site->title;
            } else {
                return 'Default';
            }
        }
    }

    public function product()
    {
        return $this->hasOne(Product::class, 'id', 'product_id');
    }

    public function getProductIssueStatus($id)
    {
        $task = DeveloperTask::where('task', 'LIKE', '%' . $id . '%')->first();
        if ($task != null) {
            if ($task->status == 'done') {
                return '<p>Issue Resolved</p><button type="button" class="btn btn-xs btn-image load-communication-modal" data-object="developer_task" data-id="' . $task->id . '" title="Load messages"><img src="/images/chat.png" alt=""></button>';
            } else {
                return '<p>Issue Pending</p><button type="button" class="btn btn-xs btn-image load-communication-modal" data-object="developer_task" data-id="' . $task->id . '" title="Load messages"><img src="/images/chat.png" alt=""></button>';
            }
        } else {
            return 'No Issue Yet';
        }
    }

    public function httpRequestData()
    {
        return $this->hasOne(CropImageGetRequest::class, 'product_id', 'product_id')->latest();
    }
}


File: /opt/lampp/htdocs/erp/app/Exports/CsvTranslatorExport.php 
Content: <?php

namespace App\Exports;

use DB;
use Maatwebsite\Excel\Concerns\WithHeadings;
use Maatwebsite\Excel\Concerns\FromCollection;

class CsvTranslatorExport implements FromCollection, WithHeadings
{
    /**
     * @return \Illuminate\Support\Collection
     */
    public function collection()
    {
        return DB::table('csv_translators')->select('csv_translators.id as id', 'csv_translators.key as key', 'csv_translators.en as en', 'csv_translators.es as es',
            'csv_translators.ru as ru', 'csv_translators.ko as ko', 'csv_translators.ja  as ja', 'csv_translators.it as it',
            'csv_translators.de as de', 'csv_translators.fr as fr', 'csv_translators.nl as nl', 'csv_translators.zh as zh',
            'csv_translators.ar as ar', 'csv_translators.ur as ur', 'users.name as updator_name', 'csv_translators.status as status',
            'csv_translators.updated_at as updated_date', )->leftjoin('users', 'users.id', 'csv_translators.updated_by_user_id')->get();
    }

    public function headings(): array
    {
        return ['Id', 'Key', 'En', 'Es', 'Ru', 'Ko', 'Ja', 'It', 'De', 'Fr', 'Nl', 'Zh', 'Ar', 'Ur', 'Updated By', 'Approved By', 'Status', 'Updated At'];
    }
}


File: /opt/lampp/htdocs/erp/app/Github/GithubGroup.php 
Content: <?php

namespace App\Github;

use DB;
use Illuminate\Database\Eloquent\Model;

class GithubGroup extends Model
{
    protected $fillable = [
        'id',
        'name',
    ];

    public function users()
    {
        return $this->belongsToMany(
            \App\Github\GithubUser::class,
            'github_group_members',
            'github_groups_id',
            'github_users_id'
        );
    }

    public function repositories()
    {
        return $this->belongsToMany(
            \App\Github\GithubRepository::class,
            'github_repository_groups',
            'github_groups_id',
            'github_repositories_id'
        )->withPivot(['rights']);
    }

    public static function getGroupDetails($groupId)
    {
        $group = GithubGroup::find($groupId);

        $repositories = DB::table('github_groups')
            ->join('github_repository_groups', 'github_groups.id', '=', 'github_repository_groups.github_groups_id')
            ->join('github_repositories', 'github_repositories.id', '=' . 'github_repository_groups.github_repositories_id')
            ->where('github_groups.id', '=', $groupId)
            ->get();

        $users = $group->users;

        return [
            'group'        => $group,
            'repositories' => $repositories,
            'users'        => $users,
        ];
    }
}


File: /opt/lampp/htdocs/erp/app/Github/GithubUser.php 
Content: <?php

namespace App\Github;

use DB;
use Illuminate\Database\Eloquent\Model;

class GithubUser extends Model
{
    protected $fillable = [
        'id',
        'username',
        'user_id',
        'created_at',
        'updated_at',
    ];

    public function platformUser()
    {
        return $this->belongsTo(\App\User::class, 'user_id', 'id');
    }

    public function repositories()
    {
        return $this->hasManyThrough(
            \App\Github\GithubRepository::class,
            \App\Github\GithubRepositoryUser::class,
            'github_users_id',
            'id',
            'id',
            'github_repositories_id'
        );
    }

    public static function getUserDetails($userId)
    {
        $userDetails = DB::table('github_users')
            ->leftJoin('github_repository_users', 'github_users.id', '=', 'github_repository_users.github_users_id')
            ->leftJoin('github_repositories', 'github_repositories.id', '=', 'github_repository_users.github_repositories_id')
            ->where('github_users.id', '=', $userId)
            ->get();

        $user = [
            'id'       => $userDetails[0]->github_users_id,
            'username' => $userDetails[0]->username,
        ];

        $repositories = $userDetails->map(function ($repository) {
            return [
                'id'     => $repository->github_repositories_id,
                'name'   => $repository->name,
                'rights' => $repository->rights,
            ];
        });

        return [
            'user'         => $user,
            'repositories' => $repositories,
        ];
    }
}


File: /opt/lampp/htdocs/erp/app/Helpers.php 
Content: <?php
/**
 * Created by PhpStorm.
 * User: mustafaflexwala
 * Date: 13/10/18
 * Time: 5:52 PM
 */

namespace App;

/**
 * @SWG\Definition(type="object", @SWG\Xml(name="User"))
 */

use Illuminate\Support\Facades\DB;
use Spatie\Permission\Models\Role;
use Illuminate\Support\Facades\Auth;
use Illuminate\Pagination\LengthAwarePaginator;

class Helpers
{
    public static function getUsersByRoleName($roleName = 'Sales')
    {
        $roleID = Role::findByName($roleName);

        $users = DB::table('users AS u')
            ->select('u.id', 'u.name')
            ->where('m.role_id', '=', $roleID->id)
            ->leftJoin('model_has_roles AS m', 'm.model_id', '=', 'u.id')
            ->distinct()
            ->orderBy('u.name')
            ->get();

        return $users;
    }

    public static function getUsersRoleName($roleName = 'HOD of CRM')
    {
        $roleID = Role::findByName($roleName);

        $users = DB::table('users AS u')
            ->select('u.id', 'u.name')
            ->where('r.role_id', '=', $roleID->id)
            ->leftJoin('role_user AS r', 'r.user_id', '=', 'u.id')
            ->distinct()
            ->orderBy('u.name')
            ->get();

        return $users;
    }

    public static function getUserArray($users)
    {
        return collect($users)->pluck('name', 'id')->toArray();
    }

    public static function getUserNameById($id)
    {
        $user = User::find($id);

        if ($user) {
            return $user->name;
        } else {
            return 'Unkown';
        }
    }

    public static function getUsersArrayByRole($roleName = 'Sales')
    {
        return self::getUserArray(self::getUsersByRoleName($roleName));
    }

    public static function timeAgo($date)
    {
        $timestamp = strtotime($date);

        $strTime = ['second', 'minute', 'hour', 'day', 'month', 'year'];
        $length  = ['60', '60', '24', '30', '12', '10'];

        $currentTime = time();
        if ($currentTime >= $timestamp) {
            $diff = time() - $timestamp;
            for ($i = 0; $diff >= $length[$i] && $i < count($length) - 1; $i++) {
                $diff = $diff / $length[$i];
            }

            $diff = round($diff);

            return $diff . ' ' . $strTime[$i] . '(s) ago ';
        }
    }

    public static function explodeToArray($item)
    {
        $temp_values = explode(',', $item);

        $values = array_reduce($temp_values, function ($carry, $size) {
            $carry[$size] = $size;

            return $carry;
        }, []);

        return $values;
    }

    public static function getadminorsupervisor()
    {
        $user   = Auth::user();
        $myrole = json_decode(json_encode($user->getRoleNames()));
        if (in_array('Supervisors', $myrole) or in_array('Admin', $myrole)) {
            return true;
        } else {
            return false;
        }
    }

    public static function getmessagingrole()
    {
        $user   = Auth::user();
        $myrole = json_decode(json_encode($user->getRoleNames()));
        if (in_array('message', $myrole)) {
            return true;
        } else {
            return false;
        }
    }

    public static function getproductsfromarraysofids($productsid)
    {
        $products         = json_decode($productsid);
        $productnamearray = [];
        $product          = new Product();
        if (! empty($products)) {
            foreach ($products as $productid) {
                $product_instance   = $product->find($productid);
                $productnamearray[] = $product_instance->name;
            }
            $productsname = implode(',', $productnamearray);

            return $productsname;
        }

        return '';
    }

    public static function getleadstatus($statusid)
    {
        $status         = new status;
        $data['status'] = $status->all();
        foreach ($data['status'] as $key => $value) {
            if ($statusid == $value) {
                return $key;
            }
        }
    }

    public static function getlatestmessage($moduleid, $model_type)
    {
        $messages = DB::table('messages')->where('moduleid', '=', $moduleid)->where('moduletype', $model_type)->orderBy('created_at', 'desc')->first();
        $messages = json_decode(json_encode($messages), true);

        return $messages['body'];
    }

    public static function getAllUserIdsWithoutRole($role = 'Admin')
    {
        $users    = User::all();
        $user_ids = [];

        foreach ($users as $user) {
            $user_roles = $user->getRoleNames()->toArray();

            if (! in_array($role, $user_roles)) {
                $user_ids[] = $user->id;
            }
        }

        return $user_ids;
    }

    public static function getUserIdByName($name)
    {
        $user = DB::table('users')->where('name', $name)->first();

        if (! empty($user)) {
            return $user->id;
        }

        return '';
    }

    public static function statusClass($assign_status)
    {
        $task_status = '';

        switch ($assign_status) {
            case 1:
                $task_status = ' accepted ';
                break;

            case 2:
                $task_status = ' postponed ';
                break;

            case 3:
                $task_status = ' rejected ';
                break;
        }

        return $task_status;
    }

    public static function currencies()
    {
        return [
            1 => 'USD',
            'EUR',
            'AED',
            'INR',
        ];
    }

    /**
     * Custom paginator
     *
     * @param mixed $request        $request        attributes
     * @param array $values         $values         array values to be paginated
     * @param mixed $posts_per_page $posts_per_page posts to show per page
     *
     * @return $items
     */
    public static function customPaginator($request, $values = [], $posts_per_page = '10')
    {
        $currentPage      = LengthAwarePaginator::resolveCurrentPage();
        $itemCollection   = collect($values);
        $perPage          = intval($posts_per_page);
        $currentPageItems = $itemCollection->slice(($currentPage * $perPage) - $perPage, $perPage)->all();
        $items            = new LengthAwarePaginator($currentPageItems, count($itemCollection), $perPage);
        $items->setPath($request->url());

        return $items;
    }

    /**
     * Get the final destination of helper
     *
     * @param mixed $url
     * @param mixed $maxRequests
     */
    public static function findUltimateDestination($url, $maxRequests = 10)
    {
        $ch = curl_init();

        curl_setopt($ch, CURLOPT_HEADER, true);
        curl_setopt($ch, CURLOPT_NOBODY, true);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_TIMEOUT, 15);

        //customize user agent if you desire...
        curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Link Checker)');

        while ($maxRequests--) {
            //fetch
            curl_setopt($ch, CURLOPT_URL, $url);
            $response = curl_exec($ch);

            //try to determine redirection url
            $location = '';
            if (in_array(curl_getinfo($ch, CURLINFO_HTTP_CODE), [301, 302, 303, 307, 308])) {
                if (preg_match('/Location:(.*)/i', $response, $match)) {
                    $location = trim($match[1]);
                }
            }

            if (empty($location)) {
                //we've reached the end of the chain...
                return $url;
            }

            //build next url
            if ($location[0] == '/') {
                $u   = parse_url($url);
                $url = $u['scheme'] . '://' . $u['host'];
                if (isset($u['port'])) {
                    $url .= ':' . $u['port'];
                }
                $url .= $location;
            } else {
                $url = $location;
            }
        }

        return null;
    }

    public static function selectSupplierList($none = true)
    {
        $list = \App\Supplier::pluck('supplier', 'id')->toArray();

        if ($none) {
            return ['' => 'None'] + $list;
        }

        return $list;
    }

    public static function selectCategoryList($defaultVal = false)
    {
        return \App\Category::attr([
            'name'  => 'category',
            'class' => 'form-control-sm form-control select2',
            'style' => 'width:200px ',
        ])->selected($defaultVal)->renderAsDropdown();
    }

    public static function selectBrandList($none = true)
    {
        $list = \App\Brand::pluck('name', 'id')->toArray();

        if ($none) {
            return ['' => 'None'] + $list;
        }

        return $list;
    }

    public static function selectStatusList()
    {
        return ['' => 'None'] + \App\Helpers\StatusHelper::getStatus();
    }

    public static function quickSellGroupList($none = true)
    {
        $list = \App\QuickSellGroup::pluck('name', 'id')->toArray();

        if ($none) {
            return ['' => 'None'] + $list;
        }

        return $list;
    }

    public static function getInstagramVars($name)
    {
        $keyword   = \App\InfluencerKeyword::where('name', $name)->first();
        $extravars = '';
        if ($keyword) {
            // check keyword account
            $instagram = $keyword->instagramAccount;
            if ($instagram) {
                $extravars = "&ig_uname={$instagram->first_name}&ig_pswd={$instagram->password}";
            }
        }

        return $extravars;
    }

    public static function getFacebookVars($name)
    {
        $keyword   = \App\InfluencerKeyword::where('name', $name)->first();
        $extravars = '';
        if ($keyword) {
            // check keyword account
            $instagram = $keyword->instagramAccount;
            if ($instagram) {
                $extravars = "?fb_uname={$instagram->first_name}&fb_pswd={$instagram->password}";
            }
        }

        return $extravars;
    }

    public static function createQueueName($name)
    {
        $name = str_replace([' ', '-'], '_', $name); // Replaces all spaces with hyphens.

        return preg_replace('/[^A-Za-z0-9\-]/', '', strtolower($name)); // Removes special chars.
    }

    public static function getQueueName($flip = false)
    {
        $content = file_get_contents(public_path('queues.txt'));
        if ($content) {
            $queue = explode(',', $content);
        } else {
            $queue = [];
        }

        if ($flip) {
            $l = [];
            foreach ($queue as $p) {
                $l[$p] = $p;
            }

            return $l;
        }

        return $queue;
    }

    public static function getFromEmail($customer_id = 0)
    {
        if (! empty($customer_id)) {
            $customer = Customer::find($customer_id);
            if ($customer) {
                $emailAddressDetails = EmailAddress::select()->where(['store_website_id' => $customer->store_website_id])->first();
                if ($emailAddressDetails) {
                    return $emailAddressDetails->from_address;
                }
            }
        }

        return config('env.MAIL_FROM_ADDRESS');
    }
    //How to call \App\Helpers::getFromEmail() |  pass custome id if available

    public static function getFromEmailByOrderId($order_id)
    {
        if (! empty($order_id)) {
            $order = Order::find($order_id);
            if ($order) {
                return self::getFromEmail($order->customer->id);
            }
        }

        return config('env.MAIL_FROM_ADDRESS');
    }

    public static function getAudioUrl($messages)
    {
        $reg_exUrl = '/\b(https?|ftp|file|http):\/\/[-A-Z0-9+&@#\/%?=~_|$!:,.;]*[A-Z0-9+&@#\/%=~_|$]/i';
        // The Text you want to filter for urls
        $text = 'The text you want to filter goes here. https://example.com';

        if (preg_match($reg_exUrl, $messages, $url)) {
            return array_shift($url);
        }

        return $messages;
    }

    public static function isBase64Encoded($string)
    {
        return (bool) preg_match('/^[a-zA-Z0-9\/\r\n+]*={0,2}$/', $string);
    }

    public static function getTaskUserList($task, $users)
    {
        $users_list = '';
        foreach ($task->users as $key => $user) {
            if ($key != 0) {
                $users_list .= ', ';
            }
            if (array_key_exists($user->id, $users)) {
                $users_list .= $users[$user->id];
            } else {
                $users_list = 'User Does Not Exist';
            }
        }

        $users_list .= ' ';
        foreach ($task->contacts as $key => $contact) {
            if ($key != 0) {
                $users_list .= ', ';
            }
            $users_list .= "$contact->name - $contact->phone" . ucwords($contact->category);
        }

        return $users_list;
    }
}


File: /opt/lampp/htdocs/erp/app/Helpers/MagentoOrderHandleHelper.php 
Content: <?php

namespace App\Helpers;

use App\Order;
use App\Customer;
use App\AutoReply;
use Carbon\Carbon;
use App\ChatMessage;
use App\OrderProduct;
use App\ProductSizes;
use App\StoreWebsiteOrder;
use App\CommunicationHistory;
use App\OrderCustomerAddress;
use Illuminate\Support\Facades\DB;
use App\Mails\Manual\OrderConfirmation;
use Illuminate\Database\Eloquent\Model;
use App\Jobs\CallHelperForZeroStockQtyUpdate;
use seo2websites\MagentoHelper\MagentoHelperv2 as MagentoHelper;

class MagentoOrderHandleHelper extends Model
{
    /**
     * Create magento order
     *
     * @param Order [ object ], Website [ object ]
     * @param mixed $orders
     * @param mixed $website
     *
     * @return response
     */
    public static function createOrder($orders, $website)
    {
        try {
            if (isset($orders->items)) {
                \Log::info('Item found');

                $totalOrders = $orders->items;
                foreach ($totalOrders as $order) {
                    //Checking in order table
                    $checkIfOrderExist = StoreWebsiteOrder::where('platform_order_id', $order->increment_id)->where('website_id', $website->id)->first();
                    \Log::info($checkIfOrderExist . ' Order not exist');
                    //Checkoing in Website Order Table
                    if ($checkIfOrderExist) {
                        //continue;
                    }

                    $balance_amount = $order->base_grand_total;
                    $firstName      = isset($order->customer_firstname) ? $order->customer_firstname : 'N/A';
                    $lastName       = isset($order->customer_lastname) ? $order->customer_lastname : 'N/A';

                    $full_name      = $firstName . ' ' . $lastName;
                    $customer_phone = '';

                    $customer = Customer::where('email', $order->customer_email)->where('store_website_id', $website->id)->first();
                    if (! $customer) {
                        $customer = new Customer;
                    }

                    $customer->name             = $full_name;
                    $customer->email            = $order->customer_email;
                    $customer->address          = $order->billing_address->street[0];
                    $customer->city             = $order->billing_address->city;
                    $customer->country          = $order->billing_address->country_id;
                    $customer->pincode          = $order->billing_address->postcode;
                    $customer->pincode          = $order->billing_address->postcode;
                    $customer->store_website_id = $website->id;
                    $customer->save();

                    $customer_id    = $customer->id;
                    $order_status   = OrderHelper::$orderRecieved;
                    $payment_method = '';

                    if ($order->payment->method == 'paypal') {
                        if ($order->state == 'processing') {
                            $balance_amount = 0;
                            $order_status   = OrderHelper::$prepaid;
                        } else {
                            $order_status = OrderHelper::$followUpForAdvance;
                        }

                        $payment_method = 'paypal';
                    } elseif ($order->payment->method == 'banktransfer') {
                        if ($order->state == 'processing') {
                            $balance_amount = 0;
                            $order_status   = OrderHelper::$prepaid;
                        } else {
                            $order_status = OrderHelper::$followUpForAdvance;
                        }
                        $payment_method = 'banktransfer';
                    } elseif ($order->payment->method == 'cashondelivery') {
                        if ($order->state == 'processing') {
                            $balance_amount = 0;
                            $order_status   = OrderHelper::$prepaid;
                        } else {
                            $order_status = OrderHelper::$followUpForAdvance;
                        }
                        $payment_method = 'cashondelivery';
                    }

                    $allStatus = OrderHelper::getStatus();

                    $magentoId  = $order->increment_id;
                    $orderModel = \App\Order::create(
                        [
                            'customer_id'         => $customer_id,
                            'order_id'            => $order->increment_id,
                            'order_magento_id'    => $order->entity_id,
                            'order_type'          => 'online',
                            'order_status'        => isset($allStatus[$order_status]) ? $allStatus[$order_status] : $order_status,
                            'order_status_id'     => $order_status,
                            'payment_mode'        => $payment_method,
                            'order_date'          => $order->created_at,
                            'client_name'         => $order->billing_address->firstname . ' ' . $order->billing_address->lastname,
                            'city'                => $order->billing_address->city,
                            'advance_detail'      => $order->base_grand_total,
                            'contact_detail'      => $order->billing_address->telephone,
                            'balance_amount'      => $balance_amount,
                            'store_currency_code' => $order->order_currency_code,
                            'store_id'            => $order->store_id,
                            'store_name'          => $order->store_name,
                            'created_at'          => $order->created_at,
                            'updated_at'          => $order->created_at,
                            'payload'             => json_encode($order),
                        ]
                    );

                    $id = $orderModel->id;

                    \Log::info('Order id : ' . $id);

                    $items = $order->items;
                    foreach ($items as $item) {
                        if (round($item->price) > 0) {
                            if ($item->product_type == 'configurable') {
                                //Pending
                                $size = '';
                            } else {
                                $size = '';
                            }

                            if (! empty($item->product_size)) {
                                $size = $item->product_size;
                            }

                            $splitted_sku = explode('-', $item->sku);

                            $skuAndColor = MagentoHelper::getSkuAndColor($item->sku);
                            \Log::info('skuAndColor : ' . json_encode($skuAndColor));
                            $sku = isset($splitted_sku[0]) ? $splitted_sku[0] : $skuAndColor['sku'];

                            DB::table('order_products')->insert(
                                [
                                    'order_id'      => $id,
                                    'product_id'    => ! empty($skuAndColor['product_id']) ? $skuAndColor['product_id'] : null,
                                    'sku'           => isset($splitted_sku[0]) ? $splitted_sku[0] : $skuAndColor['sku'],
                                    'product_price' => round($item->price),
                                    'currency'      => $order->order_currency_code,
                                    'eur_price'     => \App\Currency::convert(round($item->price), 'EUR', $order->order_currency_code),
                                    'qty'           => round($item->qty_ordered),
                                    'size'          => $size,
                                    'color'         => isset($splitted_sku[1]) ? $splitted_sku[1] : $skuAndColor['sku'],
                                    'created_at'    => $order->created_at,
                                    'updated_at'    => $order->created_at,
                                    'item_id'       => $item->item_id,
                                ]
                            );

                            // check the splitted sku here to remove the stock from the products
                            $product      = \App\Product::where('sku', $sku)->first();
                            $totalOrdered = round($item->qty_ordered);
                            if ($product) {
                                $productSizesM = ProductSizes::where('product_id', $product->id);
                                if (! empty($size)) {
                                    $productSizesM = $productSizesM->where('size', $size);
                                }
                                $mqty          = 0;
                                $productSizesM = $productSizesM->get();
                                if (! $productSizesM->isEmpty()) {
                                    //check if more then one the minus else delete
                                    foreach ($productSizesM as $psm) {
                                        $mqty += $psm->quantity;
                                        if ($totalOrdered > 0) {
                                            // update qty as based on the request
                                            $psmqty = $psm->quantity;
                                            $psmqty -= $totalOrdered;
                                            if ($psmqty > 0) {
                                                $totalOrdered -= $psm->quantity;
                                                $psm->quantity = $psmqty;
                                                $psm->save();
                                            } else {
                                                $totalOrdered -= $psm->quantity;
                                                $psm->delete();
                                            }
                                        }
                                    }
                                }

                                if ($mqty <= $totalOrdered || $mqty == 0) {
                                    // start to delete from magento
                                    $needToCheck   = [];
                                    $needToCheck[] = ['id' => $product->id, 'sku' => $item->sku];
                                    CallHelperForZeroStockQtyUpdate::dispatch($needToCheck)->onQueue('MagentoHelperForZeroStockQtyUpdate');
                                }
                            }
                        }
                    }

                    if (! empty($order->billing_address)) {
                        $customerAddress = [
                            [
                                'order_id'     => $id ?? null,
                                'address_type' => $order->billing_address->address_type ?? null,
                                'city'         => $order->billing_address->city ?? null,
                                'country_id'   => $order->billing_address->country_id ?? null,
                                'customer_id'  => $order->billing_address->customer_id ?? null,
                                'email'        => $order->billing_address->email ?? null,
                                'entity_id'    => $order->billing_address->entity_id ?? null,
                                'firstname'    => $order->billing_address->firstname ?? null,
                                'lastname'     => $order->billing_address->lastname ?? null,
                                'parent_id'    => $order->billing_address->parent_id ?? null,
                                'postcode'     => $order->billing_address->postcode ?? null,
                                'street'       => $order->billing_address->street ? implode("\n", $order->billing_address->street) : null,
                                'telephone'    => $order->billing_address->telephone ?? null,
                            ],
                        ];
                        try {
                            OrderCustomerAddress::insert($customerAddress);
                            \Log::info('Order customer address added' . json_encode($customerAddress));
                        } catch (\Throwable $th) {
                            \Log::error('Order customer address ' . $th->getMessage());
                        }
                    }

                    if (! empty($order->shipping_address)) {
                        $customerAddress = [
                            [
                                'order_id'     => $id ?? null,
                                'address_type' => $order->shipping_address->address_type ?? null,
                                'city'         => $order->shipping_address->city ?? null,
                                'country_id'   => $order->shipping_address->country_id ?? null,
                                'customer_id'  => $order->shipping_address->customer_id ?? null,
                                'email'        => $order->shipping_address->email ?? null,
                                'entity_id'    => $order->shipping_address->entity_id ?? null,
                                'firstname'    => $order->shipping_address->firstname ?? null,
                                'lastname'     => $order->shipping_address->lastname ?? null,
                                'parent_id'    => $order->shipping_address->parent_id ?? null,
                                'postcode'     => $order->shipping_address->postcode ?? null,
                                'street'       => $order->shipping_address->street ? implode("\n", $order->shipping_address->street) : null,
                                'telephone'    => $order->shipping_address->telephone ?? null,
                            ],
                        ];
                        try {
                            OrderCustomerAddress::insert($customerAddress);
                            \Log::info('Order customer address added' . json_encode($customerAddress));
                        } catch (\Throwable $th) {
                            \Log::error('Order customer address ' . $th->getMessage());
                        }
                    }

                    $orderSaved = Order::find($id);
                    if ($order->payment->method == 'cashondelivery') {
                        $product_names = '';
                        foreach (OrderProduct::where('order_id', $id)->get() as $order_product) {
                            $product_names .= $order_product->product ? $order_product->product->name . ', ' : '';
                        }

                        $delivery_time = $orderSaved->estimated_delivery_date ? Carbon::parse($orderSaved->estimated_delivery_date)->format('d \of\ F') : Carbon::parse($orderSaved->order_date)->addDays(15)->format('d \of\ F');

                        $auto_reply = AutoReply::where('type', 'auto-reply')->where('keyword', 'cod-online-confirmation')->first();

                        $auto_message = preg_replace('/{product_names}/i', $product_names, $auto_reply->reply);
                        $auto_message = preg_replace('/{delivery_time}/i', $delivery_time, $auto_message);

                        $params = [
                            'number'      => null,
                            'user_id'     => 6,
                            'approved'    => 1,
                            'status'      => 2,
                            'customer_id' => $orderSaved->customer->id,
                            'message'     => $auto_message,
                        ];

                        $chat_message = ChatMessage::create($params);

                        $whatsapp_number = $orderSaved->customer->whatsapp_number != '' ? $orderSaved->customer->whatsapp_number : null;

                        $params['message'] = AutoReply::where('type', 'auto-reply')->where('keyword', 'cod-online-followup')->first()->reply;

                        $chat_message = ChatMessage::create($params);

                        CommunicationHistory::create([
                            'model_id'   => $orderSaved->id,
                            'model_type' => Order::class,
                            'type'       => 'initial-advance',
                            'method'     => 'whatsapp',
                        ]);
                    } elseif ($orderSaved->order_status_id == \App\Helpers\OrderHelper::$prepaid && $results['state'] == 'processing') {
                        $params = [
                            'number'      => null,
                            'user_id'     => 6,
                            'approved'    => 1,
                            'status'      => 2,
                            'customer_id' => $orderSaved->customer->id,
                            'message'     => AutoReply::where('type', 'auto-reply')->where('keyword', 'prepaid-order-confirmation')->first()->reply,
                        ];

                        $chat_message = ChatMessage::create($params);

                        $whatsapp_number = $orderSaved->customer->whatsapp_number != '' ? $orderSaved->customer->whatsapp_number : null;

                        CommunicationHistory::create([
                            'model_id'   => $orderSaved->id,
                            'model_type' => Order::class,
                            'type'       => 'online-confirmation',
                            'method'     => 'whatsapp',
                        ]);
                    }

                    if ($order->state != 'processing' && $order->payment->method != 'cashondelivery') {
                        $autoReplyMsg = AutoReply::where('type', 'auto-reply')->where('keyword', 'order-payment-not-processed')->first();
                        $params       = [
                            'number'      => null,
                            'user_id'     => 6,
                            'approved'    => 1,
                            'status'      => 2,
                            'customer_id' => $orderSaved->customer->id,
                            'message'     => ($autoReplyMsg) ? $autoReplyMsg->reply : '',
                        ];

                        $chat_message = ChatMessage::create($params);

                        $whatsapp_number = $orderSaved->customer->whatsapp_number != '' ? $orderSaved->customer->whatsapp_number : null;
                    }

                    //Store Order Id Website ID and Magento ID

                    $websiteOrder                    = new StoreWebsiteOrder();
                    $websiteOrder->website_id        = $website->id;
                    $websiteOrder->status_id         = $order_status;
                    $websiteOrder->order_id          = $orderSaved->id;
                    $websiteOrder->platform_order_id = $magentoId;
                    $websiteOrder->save();

                    $customer = $orderSaved->customer;

                    $emailClass = (new OrderConfirmation($orderSaved))->build();
                    try {
                        $email = \App\Email::create([
                            'model_id'        => $orderSaved->id,
                            'model_type'      => \App\Order::class,
                            'from'            => $emailClass->fromMailer,
                            'to'              => $orderSaved->customer->email,
                            'subject'         => $emailClass->subject,
                            'message'         => $emailClass->render(),
                            'template'        => 'order-confirmation',
                            'additional_data' => $orderSaved->id,
                            'status'          => 'pre-send',
                            'is_draft'        => 1,
                        ]);

                        \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');
                    } catch (Exception $e) {
                        \Log::info('Order email was not send due to template not setup' . $orderSaved->id);
                    }

                    \Log::info('Order is finished' . json_encode($websiteOrder));
                }

                return true;
            }
        } catch (\Throwable $th) {
            \Log::error($th);
            \Log::error('Magento order failed : reason => ' . $th->getMessage());

            return false;
        }

        return false;
    }
}


File: /opt/lampp/htdocs/erp/app/Helpers/MessageHelper.php 
Content: <?php

namespace App\Helpers;

use App\User;
use App\Product;
use Carbon\Carbon;
use App\ChatMessage;
use App\WatsonChatJourney;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use App\KeywordAutoGenratedMessageLog;
use GuzzleHttp\Client as GuzzleClient;
use App\Library\Watson\Model as WatsonManager;

class MessageHelper
{
    const TXT_ARTICLES = [
        'a',
        'an',
        'the',
    ];

    const AUTO_LEAD_SEND_PRICE = 281;

    const AUTO_DIMENSION_SEND = 7;

    const TXT_PREPOSITIONS = [
        'aboard',
        'about',
        'above',
        'across',
        'after',
        'against',
        'along',
        'amid',
        'among',
        'anti',
        'around',
        'as',
        'at',
        'before',
        'behind',
        'below',
        'beneath',
        'beside',
        'besides',
        'between',
        'beyond',
        'but',
        'by',
        'concerning',
        'considering',
        'despite',
        'down',
        'during',
        'except',
        'excepting',
        'excluding',
        'following',
        'for',
        'from',
        'in',
        'inside',
        'into',
        'like',
        'minus',
        'near',
        'of',
        'off',
        'on',
        'onto',
        'opposite',
        'outside',
        'over',
        'past',
        'per',
        'plus',
        'regarding',
        'round',
        'save',
        'since',
        'than',
        'through',
        'to',
        'toward',
        'towards',
        'under',
        'underneath',
        'unlike',
        'until',
        'up',
        'upon',
        'versus',
        'via',
        'with',
        'within',
        'without',
    ];

    public static function getMostUsedWords()
    {
        $chatMessages = ChatMessage::where('customer_id', '>', 0)
            ->where('message', '!=', '')
            ->whereNotNull('number')
            ->select('message', 'id')->groupBy('message')->get()->pluck('message', 'id');

        //rows here should be replaced by the SQL result
        $wordTotals = [];
        $phrases    = [];
        foreach ($chatMessages as $id => $row) {
            $words = explode(' ', $row);
            foreach ($words as $word) {
                if (! in_array($word, self::TXT_ARTICLES + self::TXT_PREPOSITIONS) && $word != '') {
                    $phrases[$word][] = ['txt' => $row, 'id' => $id];
                    if (isset($wordTotals[$word])) {
                        $wordTotals[$word]++;

                        continue;
                    }

                    $wordTotals[$word] = 1;
                }
            }
        }

        arsort($wordTotals);

        $records = [];
        foreach ($wordTotals as $word => $count) {
            $records['words'][$word] = [
                'word'  => $word,
                'total' => $count,
            ];

            $records['phrases'][$word] = [
                'phrases' => isset($phrases[$word]) ? $phrases[$word] : [],
            ];
        }

        return $records;
    }

    /**
     * Send whatsApp Message
     *
     * @param $customer [ object ]
     * @param $message [ string ]
     * @param null|mixed $sendMsg
     * @param null|mixed $messageModel
     * @param null|mixed $isEmail
     * @param null|mixed $parentMessage
     *
     * @return mixed
     */
    public static function whatsAppSend($customer = null, $message = null, $sendMsg = null, $messageModel = null, $isEmail = null, $parentMessage = null)
    {
        $j = 0;
        if ($customer) {
            $temp_log_params = ['keyword' => '', 'keyword_match' => ''];
            //START - Purpose : Add Data in array - DEVTASK-4233
            $log_comment = 'whatsAppSend : ';
            if (! empty($messageModel)) {
                $temp_log_params['model']    = $messageModel->getTable();
                $temp_log_params['model_id'] = $messageModel->id;
            }
            //END - DEVTASK-4233

            $exp_mesaages = explode(' ', $message);

            $temp_log_params['keyword'] = implode(', ', $exp_mesaages); //Purpose : Add keyword in array - DEVTASK-4233

            for ($i = 0; $i < count($exp_mesaages); $i++) {
                $keywordassign = DB::table('keywordassigns')->select('*')
                    ->whereRaw('FIND_IN_SET(?,keyword)', [strtolower($exp_mesaages[$i])])
                    ->get();

                if (count($keywordassign) > 0) {
                    $log_comment                      = $log_comment . ' Keyword is ' . $exp_mesaages[$i];
                    $temp_log_params['keyword_match'] = $keywordassign[0]->task_description;
                    $j++;
                    break;
                }
            }
            if ($j == 0) {
                $log_comment = $log_comment . ' Not any keyword found';
            }

            \Log::info('Keyword assign found' . count($keywordassign));

            if (count($keywordassign) > 0) {
                //START - Purpose : Log Comment - DEVTASK-4233
                $log_comment = $log_comment . ' and Keyword match Description is ' . $keywordassign[0]->task_description . ', ';

                $temp_log_params['keyword_match'] = $keywordassign[0]->task_description;
                //END - DEVTASK-4233

                $task_array = [
                    'category'     => 42,
                    'is_statutory' => 0,
                    'task_subject' => '#' . $customer->id . '-' . $keywordassign[0]->task_description,
                    'task_details' => $keywordassign[0]->task_description,
                    'assign_from'  => \App\User::USER_ADMIN_ID,
                    'assign_to'    => $keywordassign[0]->assign_to,
                    'customer_id'  => $customer->id,
                    'created_at'   => date('Y-m-d H:i:s'),
                    'updated_at'   => date('Y-m-d H:i:s'),
                ];
                DB::table('tasks')->insert($task_array);
                $taskid           = DB::getPdo()->lastInsertId();
                $task_users_array = [
                    'task_id' => $taskid,
                    'user_id' => $keywordassign[0]->assign_to,
                    'type'    => \App\User::class,
                ];
                DB::table('task_users')->insert($task_users_array);

                $log_comment = $log_comment . ' Keyword is found and task has been created with ID : ' . $taskid;

                // check that match if this the assign to is auto user
                // then send price and deal
                \Log::channel('whatsapp')->info('Price lead section has been started for customer with ID : ' . $customer->id);

                if ($keywordassign[0]->assign_to == self::AUTO_LEAD_SEND_PRICE) {
                    \Log::channel('whatsapp')->info('Auto Lend Send Price has been started for the customer with ID : ' . $customer->id);
                    $log_comment = $log_comment . 'Auto Lend Send Price has been started for the customer with ID : ' . $customer->id; //Purpose : Log Comment - DEVTASK-4233

                    if (! empty($parentMessage)) {
                        \Log::channel('whatsapp')->info('Auto Lend Send Price parent message with lead price has been found for customer with ID : ' . $customer->id);

                        $log_comment = $log_comment . ' Auto Lend Send Price parent message with lead price has been found for customer with ID : ' . $customer->id; //Purpose : Log Comment - DEVTASK-4233

                        $parentMessage->sendLeadPrice($customer, $log_comment);
                    } else {
                        $log_comment = $log_comment . 'Auto Lend Send Price parent message with lead price has not been found for customer with ID : ' . $customer->id; //Purpose : Log Comment - DEVTASK-4233
                    }
                } elseif ($keywordassign[0]->assign_to == self::AUTO_DIMENSION_SEND) {
                    \Log::channel('whatsapp')->info('Auto Dimension Send has been started for the customer with ID : ' . $customer->id);
                    if (! empty($parentMessage)) {
                        \Log::channel('whatsapp')->info('Auto Dimension Send parent message with lead price has been found for customer with ID : ' . $customer->id);

                        $log_comment = $log_comment . ' Auto Dimension Send parent message with lead price has been found for customer with ID : ' . $customer->id . ' >> '; //Purpose : Log Comment - DEVTASK-4233

                        $products = DB::table('leads')
                            ->select('*')
                            ->where('id', '=', $parentMessage->lead_id)
                            ->get();
                        if (! empty($products[0]->selected_product)) {
                            $requestData = new Request();
                            $requestData->setMethod('POST');
                            $requestData->request->add(['customer_id' => $customer->id, 'dimension' => true, 'selected_product' => $products[0]->selected_product]);

                            app(\App\Http\Controllers\LeadsController::class)->sendPrices($requestData, new GuzzleClient);
                        }
                    } else {
                        $log_comment = $log_comment . ' Auto Dimension Send parent message with lead price has not been found for customer with ID : ' . $customer->id . ' >> '; //Purpose : Log Comment - DEVTASK-4233
                    }
                } else {
                    $log_comment = $log_comment . ' Keyword assign is not matching with Auto Lend Send Price or Auto Dimension Send ';
                }

                //START CODE Task message to send message in whatsapp

                $task_info = DB::table('tasks')
                    ->select('*')
                    ->where('id', '=', $taskid)
                    ->get();

                $users_info = DB::table('users')
                    ->select('*')
                    ->where('id', '=', $task_info[0]->assign_to)
                    ->get();

                if (count($users_info) > 0) {
                    if ($users_info[0]->phone != '') {
                        //START - Purpose : Log Comment - DEVTASK-4233
                        $log_comment = $log_comment . ' User Info id : ' . $users_info[0]->id . ' and ';
                        $log_comment = $log_comment . ' User Info phone : ' . $users_info[0]->phone . ' Send Whatsapp Message ';
                        //END - DEVTASK-4233

                        $params_task = [
                            'number'            => null,
                            'user_id'           => $users_info[0]->id,
                            'approved'          => 1,
                            'status'            => 2,
                            'task_id'           => $taskid,
                            'message'           => $task_info[0]->task_details,
                            'quoted_message_id' => ($messageModel) ? $messageModel->quoted_message_id : null,
                        ];

                        if ($sendMsg === true) {
                            app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($users_info[0]->phone, $users_info[0]->whatsapp_number, $task_info[0]->task_details);
                        }

                        $chat_message = \App\ChatMessage::create($params_task);
                        \App\ChatMessagesQuickData::updateOrCreate([
                            'model'    => \App\Task::class,
                            'model_id' => $taskid,
                        ], [
                            'last_communicated_message'    => $task_info[0]->task_details,
                            'last_communicated_message_at' => $chat_message->created_at,
                            'last_communicated_message_id' => ($chat_message) ? $chat_message->id : null,
                        ]);

                        $myRequest = new Request();
                        $myRequest->setMethod('POST');
                        $myRequest->request->add(['messageId' => $chat_message->id]); //Purpose : add messageid in array - DEVTASK-4233

                        $log_comment = $log_comment . ' and task has been created with ID : ' . $taskid;

                        $temp_log_params['message_sent_id'] = $chat_message->id;

                        if ($sendMsg === true) {
                            app(\App\Http\Controllers\WhatsAppController::class)->approveMessage('task', $myRequest);
                        }
                    }
                } else {
                    $log_comment = $log_comment . ' User not found ';
                }
            //END CODE Task message to send message in whatsapp
            } else {
                $log_comment = $log_comment . ' Keyword not found ';
            }

            //START - Purpose : Log Comment , add data - DEVTASK-4233
            $log_comment                = $log_comment . ' . ';
            $temp_log_params['comment'] = $log_comment;

            if (! empty($temp_log_params['keyword_match']) && $temp_log_params['keyword_match'] != '') {
                $add_keyword = KeywordAutoGenratedMessageLog::create($temp_log_params);
            }
            //END - DEVTASK-4233
        }
    }

    /**
     * Send watson reply
     *
     * @param $Custmoer [ Object ]
     * @param $message [ string ]
     * @param null|mixed $customer
     * @param null|mixed $sendMsg
     * @param null|mixed $messageModel
     * @param mixed      $params
     * @param null|mixed $isEmail
     * @param null|mixed $userType
     *
     * @return mixed
     */
    public static function sendwatson($customer = null, $message = null, $sendMsg = null, $messageModel = null, $params = [], $isEmail = null, $userType = null)
    {
        //START - Purpose : add data in array - DEVTASK-4233
        $log_comment = 'sendwatson : ';
        if (! empty($messageModel)) {
            $temp_log_params['model']    = $messageModel->getTable();
            $temp_log_params['model_id'] = $messageModel->id;
        }
        //END - DEVTASK-4233

        if (isset($params['chat_message_log_id'])) {
            \App\ChatbotMessageLogResponse::StoreLogResponse([
                'chatbot_message_log_id' => $params['chat_message_log_id'],
                'request'                => '',
                'response'               => 'Send watson message function started',
                'status'                 => 'success',
            ]);
        } else {
            $log_comment = $log_comment . ' Chat message log ID not found and no entry has been created for chat message ';
        }

        $isReplied = 0;
        if ($userType !== 'vendor') {
            $log_comment = $log_comment . ' User Type is not Vendor '; //Purpose : Log Comment - DEVTASK-4233
            \Log::info('#2 Price for customer vendor condition passed');
            if ((preg_match('/price/i', $message) || preg_match('/you photo/i', $message) || preg_match('/pp/i', $message) || preg_match('/how much/i', $message) || preg_match('/cost/i', $message) || preg_match('/rate/i', $message))) {
                //START - Purpose : Log Comment , get task discription - DEVTASK-4233
                // $log_comment = $log_comment.' Keyword Match >> ';

                $exp_mesaages               = explode(' ', $message);
                $temp_log_params['keyword'] = implode(', ', $exp_mesaages);

                for ($i = 0; $i < count($exp_mesaages); $i++) {
                    $keywordassign = DB::table('keywordassigns')->select('*')
                        ->whereRaw('FIND_IN_SET(?,keyword)', [strtolower($exp_mesaages[$i])])
                        ->get();
                    if (count($keywordassign) > 0) {
                        $log_comment = $log_comment . ' Keyword is ' . $exp_mesaages[$i];
                        break;
                    }
                }

                if (isset($params['chat_message_log_id'])) {
                    \App\ChatbotMessageLogResponse::StoreLogResponse([
                        'chatbot_message_log_id' => $params['chat_message_log_id'],
                        'request'                => '',
                        'response'               => 'Keyword assign match section started',
                        'status'                 => 'success',
                    ]);
                }

                if (count($keywordassign) > 0) {
                    // $log_comment = $log_comment.' Keyword assign found >> ';
                    $log_comment = $log_comment . ' and Keyword match Description is ' . $keywordassign[0]->task_description . ', ';

                    $temp_log_params['keyword_match'] = $keywordassign[0]->task_description;

                    if (isset($params['chat_message_log_id'])) {
                        \App\ChatbotMessageLogResponse::StoreLogResponse([
                            'chatbot_message_log_id' => $params['chat_message_log_id'],
                            'request'                => '',
                            'response'               => 'Keyword assign match found : ' . $keywordassign[0]->task_description,
                            'status'                 => 'success',
                        ]);
                    }
                }
                //END - DEVTASK-4233

                \Log::info('#3 Price for customer message condition passed');
                if ($customer) {
                    \Log::info('#4 Price for customer model passed');

                    $log_comment = $log_comment . ' Customerid is ' . $customer->id; //Purpose : Log Comment - DEVTASK-4233
                    // send price from meessage queue
                    $messageSentLast = \App\MessageQueue::where('customer_id', $customer->id)->where('sent', 1)->orderBy('sending_time', 'desc')->first();
                    // if message found then start
                    $selected_products = [];
                    if ($messageSentLast) {
                        $mqProducts = $messageSentLast->getImagesWithProducts();
                        if (! empty($mqProducts)) {
                            foreach ($mqProducts as $mq) {
                                if (! empty($mq['products'])) {
                                    foreach ($mq['products'] as $productId) {
                                        $selected_products[] = $productId;
                                    }
                                }
                            }
                        }
                    }

                    // check the last message send for price
                    $lastChatMessage = \App\ChatMessage::getLastImgProductId($customer->id);
                    if ($lastChatMessage) {
                        \Log::info('#5 last message condition found' . $lastChatMessage->id);

                        $log_comment = $log_comment . ' and get Last message id from ChatMessage id is ' . $lastChatMessage->id . ' '; //Purpose : Log Comment - DEVTASK-4233

                        if ($lastChatMessage->hasMedia(config('constants.attach_image_tag'))) {
                            \Log::info('#6 last message has media found');
                            $lastImg = $lastChatMessage->getMedia(config('constants.attach_image_tag'))->sortByDesc('id')->first();
                            \Log::info('#7 last message get media found');
                            if ($lastImg) {
                                \Log::info('#8 last message media found ' . $lastImg->id);

                                $log_comment = $log_comment . ' Last Message Media Found : ' . $lastImg->id . ' ,'; //Purpose : Log Comment - DEVTASK-4233

                                $mediable = \DB::table('mediables')->where('media_id', $lastImg->id)->where('mediable_type', Product::class)->first();
                                if (! empty($mediable)) {
                                    \Log::info('#9 last message mediable found');

                                    $product = \App\Product::find($mediable->mediable_id);
                                    if (! empty($product)) {
                                        \Log::info('#9 last message product found');
                                        $priceO                       = ($product->price_inr_special > 0) ? $product->price_inr_special : $product->price_inr;
                                        $selected_products[]          = $product->id;
                                        $temp_img_params              = $params;
                                        $temp_img_params['message']   = 'Price : ' . $priceO;
                                        $temp_img_params['media_url'] = null;
                                        $temp_img_params['status']    = 2;
                                        $temp_img_params['is_email']  = ($isEmail == 1) ? 1 : 0;
                                        $temp_img_params['is_draft']  = ($isEmail == 1) ? 1 : 0;
                                        // Create new message
                                        \App\ChatMessage::create($temp_img_params);

                                        if (isset($params['chat_message_log_id'])) {
                                            $data = [
                                                'chatbot_message_log_id' => $params['chat_message_log_id'],
                                                'request'                => '',
                                                'response'               => 'Chat Message is created.',
                                                'status'                 => 'success',
                                            ];
                                            $chat_message_log = \App\ChatbotMessageLogResponse::StoreLogResponse($data);
                                        }
                                    }
                                }
                            }
                        }
                    }

                    if (! empty($selected_products) && $messageSentLast) {
                        foreach ($selected_products as $pid) {
                            $product    = \App\Product::where('id', $pid)->first();
                            $quick_lead = \App\ErpLeads::create([
                                'customer_id'    => $customer->id,
                                'lead_status_id' => 3,
                                'product_id'     => $pid,
                                'brand_id'       => $product ? $product->brand : null,
                                'category_id'    => $product ? $product->category : null,
                                'brand_segment'  => $product && $product->brands ? $product->brands->brand_segment : null,
                                'color'          => $customer->color,
                                'size'           => $customer->size,
                                'type'           => 'send-watson-reply',
                                'created_at'     => Carbon::now(),
                            ]);

                            $log_comment = $log_comment . ' Create ERP lead lead id is ' . $quick_lead->id; //Purpose : Log Comment - DEVTASK-4233
                            if (isset($params['chat_message_log_id'])) {
                                $data = [
                                    'chatbot_message_log_id' => $params['chat_message_log_id'],
                                    'request'                => '',
                                    'response'               => 'Erp Lead is generated.',
                                    'status'                 => 'success',
                                ];
                                $chat_message_log = \App\ChatbotMessageLogResponse::StoreLogResponse($data);
                            }
                        }

                        if (isset($params['chat_message_log_id'])) {
                            $data = [
                                'chatbot_message_log_id' => $params['chat_message_log_id'],
                                'request'                => '',
                                'response'               => 'Lead price send to customer.',
                                'status'                 => 'success',
                            ];
                            $chat_message_log = \App\ChatbotMessageLogResponse::StoreLogResponse($data);
                        }

                        $requestData = new Request();
                        $requestData->setMethod('POST');
                        $requestData->request->add(['customer_id' => $customer->id, 'lead_id' => $quick_lead->id, 'selected_product' => $selected_products]);

                        $response = app(\App\Http\Controllers\LeadsController::class)->sendPrices($requestData, new GuzzleClient);

                        if (isset($params['chat_message_log_id'])) {
                            $data = [
                                'chatbot_message_log_id' => $params['chat_message_log_id'],
                                'request'                => $requestData,
                                'response'               => $response,
                                'status'                 => 'success',
                            ];
                            $chat_message_log = \App\ChatbotMessageLogResponse::StoreLogResponse($data);
                        }

                        \App\CommunicationHistory::create([
                            'model_id'   => $messageSentLast->id,
                            'model_type' => \App\MessageQueue::class,
                            'type'       => 'broadcast-prices',
                            'method'     => 'email',
                        ]);
                    }

                    \App\Instruction::create([
                        'customer_id'   => $customer->id,
                        'instruction'   => 'Please send the prices',
                        'category_id'   => 1,
                        'assigned_to'   => 7,
                        'assigned_from' => 6,
                    ]);
                }
            } else {
                $log_comment = $log_comment . ' Price and auto keyword not matched ';
            }
        }

        if (! empty($message)) {
            WatsonChatJourney::updateOrCreate(['chat_message_id' => $messageModel->id], ['chat_entered' => 1]);
            WatsonChatJourney::updateOrCreate(['chat_message_id' => $messageModel->id], ['message_received' => $message]);

            // auto mated reply here
            $auto_replies = \App\AutoReply::where('is_active', 1)->get();
            if (! $auto_replies->isEmpty()) {
                foreach ($auto_replies as $auto_reply) {
                    if (preg_match("/{$auto_reply->keyword}/i", strtolower(trim($message))) && $auto_reply->reply) {
                        $temp_params              = $params;
                        $temp_params['message']   = $auto_reply->reply;
                        $temp_params['media_url'] = null;
                        $temp_params['status']    = 2;
                        $temp_params['approved']  = 1;
                        // Create new message
                        $messageModel = ChatMessage::create($temp_params);

                        $log_comment = $log_comment . ' , If Empty message found then Create Auto Mated reply in ChatMessage Table with ID : ' . $messageModel->id; //Purpose : Log Comment - DEVTASK-4233
                        if (isset($params['chat_message_log_id'])) {
                            $data = [
                                'chatbot_message_log_id' => $params['chat_message_log_id'],
                                'request'                => '',
                                'response'               => 'Empty message received then automated reply from ChatMessage table',
                                'status'                 => 'success',
                            ];
                            $chat_message_log = \App\ChatbotMessageLogResponse::StoreLogResponse($data);
                        } else {
                            $log_comment = $log_comment . ' Chat message log ID not found ';
                        }
                    }
                }
            } else {
                $log_comment = $log_comment . ' Auto replies are not found ';
            }

            $replies = \App\ChatbotQuestion::join('chatbot_question_examples', 'chatbot_questions.id', 'chatbot_question_examples.chatbot_question_id')
                ->join('chatbot_questions_reply', 'chatbot_questions.id', 'chatbot_questions_reply.chatbot_question_id')
                ->where('chatbot_questions_reply.store_website_id', ($customer->store_website_id) ? $customer->store_website_id : 1)
                ->select('chatbot_questions.value', 'chatbot_questions.keyword_or_question', 'chatbot_questions.erp_or_watson', 'chatbot_questions.auto_approve', 'chatbot_question_examples.question', 'chatbot_questions_reply.suggested_reply')
                ->where('chatbot_questions.erp_or_watson', 'erp')
                ->get();

            if ($messageModel) {
                $chatbotReply = \App\ChatbotReply::create([
                    'question'        => $message,
                    'replied_chat_id' => $messageModel->id,
                ]);

                //START - Purpose : Log Comment , Add message sent id in array - DEVTASK-4233
                $temp_log_params['message_sent_id'] = $messageModel->id;

                // $log_comment = $log_comment.' Chat Message Create : '.$messageModel->id.'  >> ';
                //END - DEVTASK-4233

                foreach ($replies as $reply) {
                    if ($message != '' && $customer) {
                        $keyword = $reply->question;
                        if (($keyword == $message || strpos(strtolower(trim($message)), strtolower(trim($keyword))) !== false) && $reply->suggested_reply) {
                            $status                     = ChatMessage::CHAT_AUTO_WATSON_REPLY;
                            $temp_params                = $params;
                            $temp_params['message']     = $reply->suggested_reply;
                            $temp_params['media_url']   = null;
                            $temp_params['status']      = $status;
                            $temp_params['question_id'] = $reply->id;

                            // Create new message
                            $message = ChatMessage::create($temp_params);

                            if ($message->status == ChatMessage::CHAT_AUTO_WATSON_REPLY) {
                                $chatbotReply->chat_id    = $message->id;
                                $chatbotReply->answer     = $reply->suggested_reply;
                                $chatbotReply->reply      = '{"output":{"database":[{"response_type":"text","text":"' . $reply->suggested_reply . '"}]}}';
                                $chatbotReply->reply_from = 'erp';
                                $chatbotReply->save();
                                if (isset($params['chat_message_log_id'])) {
                                    $data = [
                                        'chatbot_message_log_id' => $params['chat_message_log_id'],
                                        'request'                => '',
                                        'response'               => 'CHAT_AUTO_WATSON_REPLY: ' . $chatbotReply->reply,
                                        'status'                 => 'success',
                                    ];
                                    $chat_message_log = \App\ChatbotMessageLogResponse::StoreLogResponse($data);
                                }

                                WatsonChatJourney::updateOrCreate(['chat_message_id' => $messageModel->id], ['reply_searched_in_watson' => 1]);
                                WatsonChatJourney::updateOrCreate(['chat_message_id' => $messageModel->id], ['reply' => $chatbotReply->reply]);
                            } else {
                                WatsonChatJourney::updateOrCreate(['chat_message_id' => $messageModel->id], ['reply_found_in_database' => 1]);

                                $log_comment = $log_comment . ' Message status is not equal to chat auto watson reply ';
                            }

                            // Send message if all required data is set
                            if ($temp_params['message'] || $temp_params['media_url']) {
                                if ($status == 2) {
                                    $sendResult = app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($customer->phone, isset($instanceNumber) ? $instanceNumber : null, $temp_params['message'], $temp_params['media_url']);

                                    WatsonChatJourney::updateOrCreate(['chat_message_id' => $messageModel->id], ['response_sent_to_cusomer' => 1]);

                                    if ($sendResult) {
                                        $message->unique_id = $sendResult['id'] ?? '';
                                        $message->save();
                                    }
                                    if (isset($params['chat_message_log_id'])) {
                                        $data = [
                                            'chatbot_message_log_id' => $params['chat_message_log_id'],
                                            'request'                => '',
                                            'response'               => $sendResult,
                                            'status'                 => 'success',
                                        ];
                                        $chat_message_log = \App\ChatbotMessageLogResponse::StoreLogResponse($data);
                                    } else {
                                        $log_comment = $log_comment . ' Chat message log ID not found ';
                                    }
                                }
                                $isReplied = 1;
                                break;
                            } else {
                                $log_comment = $log_comment . 'Message and media URL not found ';
                            }
                        } else {
                            $log_comment = $log_comment . ' Keyword is not equal to message ';
                        }
                    } else {
                        $log_comment = $log_comment . ' Message is empty or customer not found ';
                    }
                }
            } else {
                $log_comment = $log_comment . ' Chat message not created ';
            }

            // assigned the first storewebsite to default erp customer
            $customer->store_website_id = ($customer->store_website_id > 0) ? $customer->store_website_id : 1;

            if (isset($params['chat_message_log_id'])) {
                \App\ChatbotMessageLogResponse::StoreLogResponse([
                    'chatbot_message_log_id' => $params['chat_message_log_id'],
                    'request'                => '',
                    'response'               => 'Auto replied match found : ' . $isReplied . ' and  customer store website id ' . $customer->store_website_id,
                    'status'                 => 'success',
                ]);
            } else {
                $log_comment = $log_comment . ' Chat message log ID not found ';
            }

            if (! $isReplied && $customer->store_website_id) {
                if (isset($params['chat_message_log_id'])) {
                    \App\ChatbotMessageLogResponse::StoreLogResponse([
                        'chatbot_message_log_id' => $params['chat_message_log_id'],
                        'request'                => '',
                        'response'               => 'Watson manager send function started',
                        'status'                 => 'success',
                    ]);
                } else {
                    $log_comment = $log_comment . ' Chat message log ID not found ';
                }

                $watsonmanager_response = WatsonManager::sendMessage($customer, $message, false, null, $messageModel, $userType, isset($params['chat_message_log_id']) ? $params['chat_message_log_id'] : null);

                if (isset($params['chat_message_log_id'])) {
                    \App\ChatbotMessageLogResponse::StoreLogResponse([
                        'chatbot_message_log_id' => $params['chat_message_log_id'],
                        'request'                => '',
                        'response'               => 'Watson manager send function finished',
                        'status'                 => 'success',
                    ]);
                } else {
                    $log_comment = $log_comment . ' Chat message log ID not found ';
                }
            } else {
                $log_comment = $log_comment . ' Store website not found ';

                if (isset($params['chat_message_log_id'])) {
                    \App\ChatbotMessageLogResponse::StoreLogResponse([
                        'chatbot_message_log_id' => $params['chat_message_log_id'],
                        'request'                => '',
                        'response'               => 'Watson manager send function end replied found',
                        'status'                 => 'success',
                    ]);
                } else {
                    $log_comment = $log_comment . ' Chat message log ID not found ';
                }
            }
        }

        //START - Purpose : Log Comment ,Add Data - DEVTASK-4233
        $log_comment                = $log_comment . ' . ';
        $temp_log_params['comment'] = $log_comment;

        if (! empty($temp_log_params['keyword_match']) && $temp_log_params['keyword_match'] != '') {
            $add_keyword = KeywordAutoGenratedMessageLog::create($temp_log_params);
        }
        //END - DEVTASK-4233
    }

    public static function sendEmailOrWebhookNotification($toUsers, $message)
    {
        try {
            $toUsers = array_unique($toUsers);

            foreach ($toUsers as $user_id) {
                $user = User::with('webhookNotification')->find($user_id);

                if (! $user) {
                    continue;
                }

                $webhookNotification = $user->webhookNotification;

                $webhookClient = new GuzzleClient();

                $webhookClient->{$webhookNotification->method}($webhookNotification->url, [
                    'body'            => str_replace('[MESSAGE]', $message, $webhookNotification->payload),
                    'connect_timeout' => 3,
                    'headers'         => ['Content-Type' => $webhookNotification->content_type],
                ]);
            }
        } catch (Exception $e) {
            \Log::channel('errorlog')->debug($e->getMessage() . ' | Line no: ' . $e->getLine() . ' | ' . $e->getFile());
        }
    }
}


File: /opt/lampp/htdocs/erp/app/Helpers/StatusHelper.php 
Content: <?php

namespace App\Helpers;

use App\Jobs\ProductAi;
use Illuminate\Support\Facades\DB;
use Illuminate\Database\Eloquent\Model;

class StatusHelper extends Model
{
    public static $import = 1;

    public static $scrape = 2;

    public static $AI = 3;

    public static $autoCrop = 4;

    public static $cropApproval = 5;

    public static $cropSequencing = 6;

    public static $imageEnhancement = 7;

    public static $cropApprovalConfirmation = 8;

    public static $finalApproval = 9;

    public static $manualAttribute = 10;

    public static $pushToMagento = 11;

    public static $inMagento = 12;

    public static $unableToScrape = 13;

    public static $unableToScrapeImages = 14;

    public static $isBeingCropped = 15;

    public static $cropSkipped = 16;

    public static $isBeingEnhanced = 17;

    public static $cropRejected = 18;

    public static $isBeingSequenced = 19;

    public static $isBeingScraped = 20;

    public static $manualCropping = 21;

    public static $manualImageUpload = 22;

    public static $queuedForGoogleImageSearch = 23;

    public static $googleImageSearchFailed = 24;

    public static $isBeingScrapedWithGoogleImageSearch = 25;

    public static $pendingVerificationGoogleImageSearch = 26;

    public static $googleImageSearchManuallyRejected = 27;

    public static $queuedForGoogleTextSearch = 28;

    public static $googleTextSearchFailed = 29;

    public static $isBeingScrapedWithGoogleTextSearch = 30;

    public static $pendingVerificationGoogleTextSearch = 31;

    public static $googleTextSearchManuallyRejected = 32;

    public static $attributeRejectCategory = 33;

    public static $submitForApproval = 34;

    public static $requestForExternalScraper = 35;

    public static $unknownCategory = 36;

    public static $unknownColor = 37;

    public static $unknownSize = 38;

    public static $unknownComposition = 39;

    public static $unknownMeasurement = 40;

    public static $priceCheck = 41;

    public static $autoReject = 42;

    public static $unknownTitle = 43;

    public static $unknownDescription = 44;

    public static $unknownPrice = 45;

    public static $sendtoExternalScraper = 46;

    public static $externalScraperFinished = 47;

    public static $sizeVerifyCron = 48;

    public static $productConditionsChecked = 153;

    public static function getStatus()
    {
        return [
            1   => 'import',
            2   => 'scrape',
            3   => 'ai',
            4   => 'auto crop',
            5   => 'crop approval',
            6   => 'crop sequencing',
            7   => 'image enhancement',
            8   => 'crop approval confirmation',
            9   => 'final approval',
            10  => 'manual attribute',
            11  => 'push to magento',
            12  => 'in magento',
            13  => 'unable to scrape',
            14  => 'unable to scrape images',
            15  => 'is being cropped',
            16  => 'crop skipped',
            17  => 'is being enhanced',
            18  => 'crop rejected',
            19  => 'is being sequenced',
            20  => 'is being scraped',
            21  => 'manual cropping',
            22  => 'manual image upload',
            23  => 'queued for google image search',
            24  => 'google image search failed',
            25  => 'is being scraped with google image search',
            26  => 'pending verification google image search',
            27  => 'manually rejected google image search',
            28  => 'queued for google text search',
            29  => 'google text search failed',
            30  => 'is being scraped with google text search',
            31  => 'pending verification google text search',
            32  => 'manually rejected google text search',
            33  => 'pending products without category',
            34  => 'Submit For approval',
            35  => 'Request For external Scraper',
            36  => 'Unknown Category',
            37  => 'Unknown Color',
            38  => 'Unknown Size',
            39  => 'Unknown Composition',
            40  => 'Unknown Measurement',
            41  => 'Price Check',
            42  => 'Auto rejected',
            43  => 'Unknown Title',
            44  => 'Unknown Description',
            45  => 'Unknown Price',
            46  => 'Send to External Scraper',
            47  => 'External Scraper Finished',
            48  => 'Size Verify Cron',
            153 => 'Product conditions checked',
        ];
    }

    public static function subStatus()
    {
        $status = self::getStatus();
        $r      = [];
        foreach ($status as $k => $s) {
            if (in_array($k, [36, 37, 38, 39, 40, 43, 44, 45])) {
                $r[$k] = $s;
            }
        }

        return $r;
    }

    public static function updateStatus(\App\Product $product, $newStatus = 0)
    {
        // Update status to AI
        if ($newStatus == self::$AI) {
            // Queue for AI
            ProductAi::dispatch($product)->onQueue('product');
        }

        // Set status and save product
        $product->status_id = $newStatus;
        $product->save();

        // Return
    }

    public static function getStatusCount($inStockOnly = 1)
    {
        // Get summary
        $productStats = DB::table('products')
            ->select('status_id', DB::raw('COUNT(id) as total'))
            ->where('stock', '>=', $inStockOnly)
            ->groupBy('status_id')
            ->pluck('total', 'status_id')->all();

        // Return array with stats
        return $productStats;
    }

    public static function getStatusCountByDateRange($startDate = '1900-01-01', $endDate = '2100-01-01', $inStockOnly = 1)
    {
        // Get summary
        $productStats = DB::table('products')
            ->select('status_id', DB::raw('COUNT(id) as total'))
            ->where('stock', '>=', $inStockOnly)
            ->whereBetween('created_at', [$startDate . ' 00:00', $endDate . ' 23:59'])
            ->groupBy('status_id')
            ->pluck('total', 'status_id')->all();

        // Return array with stats
        return $productStats;
    }

    public static function getCroppedCount($inStockOnly = 1)
    {
        // Get status
        $status = self::getStatusCount($inStockOnly);

        // Return count for all statused beyond crop
        return array_sum($status) -
            (isset($status[self::$import]) ? $status[self::$import] : 0) -
            (isset($status[self::$scrape]) ? $status[self::$scrape] : 0) -
            (isset($status[self::$AI]) ? $status[self::$AI] : 0) -
            (isset($status[self::$autoCrop]) ? $status[self::$autoCrop] : 0) -
            (isset($status[self::$cropRejected]) ? $status[self::$cropRejected] : 0) -
            (isset($status[self::$cropSkipped]) ? $status[self::$cropSkipped] : 0) -
            (isset($status[self::$unableToScrape]) ? $status[self::$unableToScrape] : 0) -
            (isset($status[self::$unableToScrapeImages]) ? $status[self::$unableToScrapeImages] : 0);
    }

    public static function getCropApprovedCount($inStockOnly = 1)
    {
        // Get status
        $status = self::getStatusCount($inStockOnly);

        // Return count
        return (isset($status[self::$cropSequencing]) ? $status[self::$cropSequencing] : 0) +
            (isset($status[self::$cropApprovalConfirmation]) ? $status[self::$cropApprovalConfirmation] : 0) +
            (isset($status[self::$isBeingSequenced]) ? $status[self::$isBeingSequenced] : 0) +
            (isset($status[self::$imageEnhancement]) ? $status[self::$imageEnhancement] : 0) +
            (isset($status[self::$isBeingEnhanced]) ? $status[self::$isBeingEnhanced] : 0) +
            (isset($status[self::$cropApprovalConfirmation]) ? $status[self::$cropApprovalConfirmation] : 0) +
            (isset($status[self::$finalApproval]) ? $status[self::$finalApproval] : 0) +
            (isset($status[self::$pushToMagento]) ? $status[self::$pushToMagento] : 0) +
            (isset($status[self::$inMagento]) ? $status[self::$inMagento] : 0);
    }

    public static function getCropRejectedCount($inStockOnly = 1)
    {
        // Get status
        $status = self::getStatusCount($inStockOnly);

        // Return count
        return isset($status[self::$cropRejected]) ? $status[self::$cropRejected] : 0;
    }

    public static function getTotalProductsScraped($inStockOnly = 1)
    {
        // Get status
        $status = self::getStatusCount($inStockOnly);

        // Return count
        return array_sum($status) -
            (isset($status[self::$import]) ? $status[self::$import] : 0) -
            (isset($status[self::$scrape]) ? $status[self::$scrape] : 0) -
            (isset($status[self::$unableToScrape]) ? $status[self::$unableToScrape] : 0) -
            (isset($status[self::$unableToScrapeImages]) ? $status[self::$unableToScrapeImages] : 0);
    }

    public static function isApproved($statusId)
    {
        // Check if status ID is matching approved product statuses

        switch ($statusId) {
            case self::$pushToMagento:
            case self::$inMagento:
                return true;
                break; // just to be sure
            default:
                return false;
        }

        // Return false by default
        return false;
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/ActivityConroller.php 
Content: <?php

namespace App\Http\Controllers;

use App\User;
use App\Product;
use App\Activity;
use App\Benchmark;
use Carbon\Carbon;
use App\LogScraperVsAi;
use App\ScrapedProducts;
use Illuminate\Http\Request;
use App\Helpers\StatusHelper;
use Illuminate\Support\Facades\DB;

class ActivityConroller extends Controller
{
    private $dataLabelDay = [
        '12:00 am',
        '1:00 am',
        '2:00 am',
        '3:00 am',
        '4:00 am',
        '5:00 am',
        '6:00 am',
        '7:00 am',
        '8:00 am',
        '9:00 am',
        '10:00 am',
        '11:00 am',
        '12:00 pm',
        '1:00 pm',
        '2:00 pm',
        '3:00 pm',
        '4:00 pm',
        '5:00 pm',
        '6:00 pm',
        '7:00 pm',
        '8:00 pm',
        '9:00 pm',
        '10:00 pm',
        '11:00 pm',
    ];

    private $dataLabelMonth = [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
    ];

    public function __construct()
    {
        $this->middleware('permission:view-activity', ['only' => ['index', 'store']]);
    }

    public function showActivity(Request $request)
    {
        // Set range start and range end
        $range_start = $request->input('range_start');
        $range_end   = $request->input('range_end');

        // Set empty AI activity
        $aiActivity = [];

        // Get total row count for products
        $aiActivity['total']       = 0;
        $aiActivity['total_range'] = 0;

        // Get ai activity
        $logScraperVsAi         = LogScraperVsAi::selectRaw('DISTINCT(product_id) AS product_id')->get();
        $aiActivity['ai']       = $logScraperVsAi->count();
        $logScraperVsAi         = LogScraperVsAi::selectRaw('DISTINCT(product_id) AS product_id')->whereBetween('created_at', [$range_start . ' 00:00', $range_end . ' 23:59'])->get();
        $aiActivity['ai_range'] = $logScraperVsAi->count();

        // Free up memory by unsetting unused variables
        unset($products);
        unset($logScraperVsAi);

        $allActivity = DB::table('listing_histories')->selectRaw('
	        SUM(case when action = "CROP_APPROVAL" then 1 Else 0 End) as crop_approved,
	        SUM(case when action = "CROP_APPROVAL_DENIED" then 1 Else 0 End) as crop_approval_denied,
	        SUM(case when action = "CROP_APPROVAL_CONFIRMATION" then 1 Else 0 End) as crop_approval_confirmation,
            SUM(case when action = "CROP_REJECTED"  then 1 Else 0 End) as crop_rejected,
            SUM(case when action = "CROP_SEQUENCED" then 1 Else 0 End) as crop_ordered,
            SUM(case when action = "LISTING_APPROVAL" then 1 Else 0 End) as attribute_approved,
            SUM(case when action = "LISTING_REJECTED" then 1 Else 0 End) as attribute_rejected,
            SUM(case when action = "MAGENTO_LISTED" then 1 Else 0 End) as magento_listed
	    ');

        $activity = DB::table('listing_histories')->selectRaw('
            user_id,
            SUM(case when action = "CROP_APPROVAL" then 1 Else 0 End) as crop_approved,
            SUM(case when action = "CROP_APPROVAL_DENIED" then 1 Else 0 End) as crop_approval_denied,
            SUM(case when action = "CROP_APPROVAL_CONFIRMATION" then 1 Else 0 End) as crop_approval_confirmation,
            SUM(case when action = "CROP_REJECTED"  then 1 Else 0 End) as crop_rejected,
            SUM(case when action = "CROP_SEQUENCED" then 1 Else 0 End) as crop_ordered,
            SUM(case when action = "LISTING_APPROVAL" then 1 Else 0 End) as attribute_approved,
            SUM(case when action = "LISTING_REJECTED" then 1 Else 0 End) as attribute_rejected,
            SUM(case when action = "MAGENTO_LISTED" then 1 Else 0 End) as magento_listed
        ')->whereNotNull('user_id');

        $ca = Product::where('is_image_processed', 1)
            ->where('is_crop_rejected', 0)
            ->where('is_crop_approved', 0)
            ->where('is_crop_being_verified', 0)
            ->whereDoesntHave('amends')->count();

        $productStats          = StatusHelper::getStatusCount();
        $productStatsDateRange = StatusHelper::getStatusCountByDateRange($range_start, $range_end);

        if (is_array($request->get('selected_user'))) {
            $activity = $activity->whereIn('user_id', $request->get('selected_user'));
        }

        $users         = $this->getUserArray();
        $selected_user = $request->input('selected_user');

        $scrapCount            = new ScrapedProducts();
        $inventoryCount        = new ScrapedProducts();
        $rejectedListingsCount = Product::where('is_listing_rejected', 1);

        // Get total number of scraped products
        $sqlScrapedProductsInStock = "
                SELECT
                    COUNT(DISTINCT(ls.sku)) as ttl
                FROM
                    suppliers s
                JOIN 
                    scrapers sc 
                ON 
                    s.id=sc.supplier_id    
                JOIN 
                    scraped_products ls 
                ON 
                    ls.website=sc.scraper_name
                WHERE
                    s.supplier_status_id=1 AND 
                    ls.validated=1 AND
                    ls.website!='internal_scraper' AND
                    ls.last_inventory_at > DATE_SUB(NOW(), INTERVAL sc.inventory_lifetime DAY) 
            ";
        $resultScrapedProductsInStock = DB::select($sqlScrapedProductsInStock);

        if ($range_start != '' && $range_end != '') {
            $activity = $activity->where(function ($query) use ($range_end, $range_start) {
                $query->whereBetween('created_at', [$range_start . ' 00:00', $range_end . ' 23:59']);
            });

            $allActivity           = $allActivity->whereBetween('created_at', [$range_start . ' 00:00', $range_end . ' 23:59']);
            $scrapCount            = $scrapCount->whereBetween('created_at', [$range_start . ' 00:00', $range_end . ' 23:59']);
            $inventoryCount        = $inventoryCount->whereBetween('last_inventory_at', [$range_start . ' 00:00', $range_end . ' 23:59']);
            $rejectedListingsCount = $rejectedListingsCount->whereBetween('listing_rejected_on', [$range_start . ' 00:00', $range_end . ' 23:59']);
        }

        if (! $range_start || ! $range_end) {
            $inventoryCount = $inventoryCount->whereRaw('TIMESTAMPDIFF(HOUR, last_inventory_at, NOW())<= 48');
            $scrapCount     = $scrapCount->where('created_at', 'LIKE', '%' . date('Y-m-d') . '%');
        }

        $scrapCount            = $scrapCount->count();
        $inventoryCount        = $inventoryCount->count();
        $rejectedListingsCount = $rejectedListingsCount->count();

        $allActivity = $allActivity->first();
        $userActions = $activity->groupBy('user_id')->get();

        $cropCountPerMinute = Product::whereRaw('TIMESTAMPDIFF(DAY, cropped_at, NOW()) IN (0,1)')->count();
        $cropCountPerMinute = round($cropCountPerMinute / 1440, 4);

        return view('activity.index', compact('resultScrapedProductsInStock', 'aiActivity', 'userActions', 'users', 'selected_user', 'range_end', 'range_start', 'allActivity', 'scrapCount', 'inventoryCount', 'rejectedListingsCount', 'productStats', 'productStatsDateRange', 'cropCountPerMinute'));
    }

    public function showGraph(Request $request)
    {
        $data['date_type'] = $request->input('date_type') ?? 'week';

        $data['week_range']  = $request->input('week_range') ?? date('Y-\WW');
        $data['month_range'] = $request->input('month_range') ?? date('Y-m');

        if ($data['date_type'] == 'week') {
            $weekRange = $this->getStartAndEndDateByWeek($data['week_range']);
            $start     = $weekRange['start_date'];
            $end       = $weekRange['end_date'];

            $workDoneResult = Activity::where('description', 'create')
                ->whereBetween('created_at', [$start, $end])
                ->select('activities.subject_id', 'activities.subject_type', 'activities.created_at', \DB::raw('WEEKDAY(created_at) as xaxis, count(*) as total'))
                ->groupByRaw('WEEKDAY(created_at)')
                ->get();

            $benchmarkResult = Benchmark::selectRaw('WEEKDAY(for_date) as day,
								sum(selections + searches + attributes + supervisor + imagecropper + lister + approver + inventory) as total')
                ->whereBetween('created_at', [$start, $end])
                ->groupByRaw('WEEKDAY(for_date)')
                ->get();

            $workDone = [];
            $dowMap   = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];

            foreach ($workDoneResult as $item) {
                $workDone[$dowMap[$item->xaxis]] = $item->total;
            }

            $benchmark = [];

            foreach ($benchmarkResult as $item) {
                $benchmark[$dowMap[$item->day]] = $item->total;
            }
        } else {
            $monthRange = $this->getStartAndEndDateByMonth($data['month_range']);
            $start      = $monthRange['start_date'];
            $end        = $monthRange['end_date'];

            $workDoneResult = Activity::where('description', 'create')
                ->whereBetween('created_at', [$start, $end])
                ->select('activities.subject_id', 'activities.subject_type', 'activities.created_at', \DB::raw('DAYOFMONTH(created_at) as xaxis ,COUNT(*) AS total'))
                ->groupByRaw('DAYOFMONTH(created_at)')
                ->get();

            $benchmarkResult = Benchmark::selectRaw('DAYOFMONTH(for_date) as day,
								sum(selections + searches + attributes + supervisor + imagecropper + lister + approver + inventory) as total')
                ->whereBetween('created_at', [$start, $end])
                ->groupByRaw('DAYOFMONTH(for_date)')
                ->get();

            foreach ($workDoneResult as $item) {
                $workDone[$item->xaxis] = $item->total;
            }

            foreach ($benchmarkResult as $item) {
                $benchmark[$item->day] = $item->total;
            }
        }

        $data['benchmark'] = $benchmark ?? [];
        $data['workDone']  = $workDone ?? [];

        return view('activity.graph', $data);
    }

    public function showUserGraph(Request $request)
    {
        $data['users']         = $this->getUserArray();
        $data['selected_user'] = $request->input('selected_user') ?? 3;

        $data['date_type'] = $request->input('date_type') ?? 'day';

        $data['day_range']   = $request->input('day_range') ?? date('Y-m-d');
        $data['month_range'] = $request->input('month_range') ?? date('Y-m');

        if ($data['date_type'] == 'day') {
            $start = $data['day_range'] . ' 00:00:00.000000';
            $end   = $data['day_range'] . ' 23:59:59.000000';

                $workDoneResult = DB::select('
                                        SELECT HOUR(created_at) as xaxis,subject_type ,COUNT(*) AS total FROM
                                            (SELECT DISTINCT activities.subject_id,activities.subject_type,activities.created_at
                                            FROM activities
                                            WHERE activities.description = "create"
                                            AND activities.causer_id = ?
                                            AND activities.created_at BETWEEN ? AND ?)
                                        AS SUBQUERY
                                        GROUP BY HOUR(created_at),subject_type ORDER By xaxis;
                                ', [$data['selected_user'], $start, $end]);

            $workDone = [];

            foreach ($workDoneResult as $item) {
                $workDone[$item->subject_type][$item->xaxis] = $item->total;
            }

            foreach ($workDone as $subject_type => $subject_type_array) {
                for ($i = 0; $i <= 23; $i++) {
                    $workDone[$subject_type][$i] = $subject_type_array[$i] ?? 0;
                }
            }
        } else {
            $monthRange = $this->getStartAndEndDateByMonth($data['month_range']);
            $start      = $monthRange['start_date'];
            $end        = $monthRange['end_date'];

            $workDoneResult = DB::select('
									SELECT DAYOFMONTH(created_at) as xaxis,subject_type ,COUNT(*) AS total FROM
								 		(SELECT DISTINCT activities.subject_id,activities.subject_type,activities.created_at
								  		 FROM activities
								  		 WHERE activities.description = "create"
								  		 AND activities.causer_id = ?
								  		 AND activities.created_at BETWEEN ? AND ?)
								    AS SUBQUERY
								   	GROUP BY DAYOFMONTH(created_at),subject_type ORDER By xaxis;
							', [$data['selected_user'], $start, $end]);

            $workDone = [];

            foreach ($workDoneResult as $item) {
                $workDone[$item->subject_type][$item->xaxis] = $item->total;
            }

            foreach ($workDone as $subject_type => $subject_type_array) {
                for ($i = 1; $i <= 31; $i++) {
                    $workDone[$subject_type][$i] = $subject_type_array[$i] ?? 0;
                }
            }
        }

        $data['workDone']  = $workDone ?? [];
        $data['dataLabel'] = $data['date_type'] == 'day' ? $this->dataLabelDay : $this->dataLabelMonth;

        return view('activity.graph-user', $data);
    }

    public function getUserArray()
    {
        $users = User::all();

        $userArray = [];

        foreach ($users as $user) {
            $userArray[((string) $user->id)] = $user->name;
        }

        return $userArray;
    }

    public static function create($subject_id, $subject_type, $description)
    {
    }

    public function getStartAndEndDateByWeek($week_range)
    {
        $arr = explode('-', $week_range);

        $week = str_replace('W', '', $arr[1]);
        $year = $arr[0];

        $dateTime = new \DateTime();
        $dateTime->setISODate($year, $week);
        $result['start_date'] = $dateTime->format('Y-m-d') . ' 00:00:00.000000';
        $dateTime->modify('+6 days');
        $result['end_date'] = $dateTime->format('Y-m-d') . ' 23:59:59.000000';

        return $result;
    }

    public function getStartAndEndDateByMonth($month_range)
    {
        $arr = explode('-', $month_range);

        $year  = $arr[0];
        $month = $arr[1];

        $dateTime = new \DateTime();
        $dateTime->setDate($year, $month, 1);
        $result['start_date'] = $dateTime->format('Y-m-d') . ' 00:00:00.000000';
        $dateTime->modify('+1 month');
        $dateTime->modify('-1 days');
        $result['end_date'] = $dateTime->format('Y-m-d') . ' 23:59:59.000000';

        return $result;
    }

    public function recentActivities(Request $request)
    {
        $productStats = DB::table('productactivities')
            ->where('status_id', $request->type)
            ->whereDate('created_at', '>', Carbon::now()->subDays(10))
            ->orderBy('created_at', 'DESC')
            ->get();

        return $productStats;
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/Api/v1/BrandReviewController.php 
Content: <?php

namespace App\Http\Controllers\Api\v1;

use App\ReviewBrandList;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Input;

class BrandReviewController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request)
    {
        return view('brand-review.index');
    }

    public function store(Request $request)
    {
        if ($request->name) {
            ReviewBrandList::insert([
                'name' => $request->name,
                'url'  => $request->url,
            ]);

            return response()->json(['status' => '200']);
        }

        return response()->json(['status' => '500']);
    }

    public function getAllBrandReview()
    {
        $data = ReviewBrandList::select('name', 'url')->get();

        return $data;
    }

    public function storeReview(Request $request)
    {
        $data = Input::all();
        if ($data) {
            foreach ($data as $key => $value) {
                $exists = DB::table('brand_reviews')
                    ->where('brand', $value['brand'])
                    ->where('review_url', $value['review_url'])
                    ->first();

                if (! $exists) {
                    DB::table('brand_reviews')->insert([
                        'website'    => $value['website'],
                        'brand'      => $value['brand'],
                        'review_url' => $value['review_url'],
                        'username'   => $value['username'],
                        'title'      => $value['title'],
                        'body'       => $value['body'],
                        'stars'      => $value['stars'],
                    ]);
                }
            }

            return response()->json([
                'code'    => 200,
                'message' => 'Data have been updated successfully',
            ]);
        }

        return response()->json([
            'code'    => 500,
            'message' => 'Error Occured, please try again later.',
        ]);
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/Api/v1/MailinglistController.php 
Content: <?php

namespace App\Http\Controllers\Api\v1;

use App\Customer;
use App\Language;
use App\LogRequest;
use App\Mailinglist;
use App\StoreWebsite;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;

class MailinglistController extends Controller
{
    /**
     * @create_customer
     *
     * @author Hitesh
     *
     * @param mixed      $email
     * @param mixed      $store_website_id
     * @param null|mixed $storeName
     * @param null|mixed $language
     */
    public function create_customer($email, $store_website_id, $storeName = null, $language = null)
    {
        $customer = new Customer;

        if (! empty($language)) {
            $language = explode('_', $language);
            $language = end($language);
            if (! empty($language)) {
                $customer->language = $language;
            }
        }

        $customer->email            = $email;
        $customer->store_website_id = $store_website_id;
        $customer->store_name       = $storeName;
        $customer->save();

        return $customer;
    }

    public function get_customer($email, $store_website_id)
    {
        $customer = Customer::where('email', $email)->where('store_website_id', $store_website_id)->first();

        return $customer;
    }

    /**
     * @SWG\Post(
     *   path="/mailinglist/add",
     *   tags={"Mailing List"} ,
     *   summary="Add customer to mailing list",
     *   operationId="mail-list",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *   @SWG\Response(response=406, description="not acceptable"),
     *   @SWG\Response(response=500, description="internal server error"),
     *
     *      @SWG\Parameter(
     *          name="email",
     *          in="path",
     *          required=true,
     *          type="string"
     *      ),
    @SWG\Parameter(
     *          name="website",
     *          in="path",
     *          required=true,
     *          type="string"
     *      ),
     * )
     */
    /**
     * @function add
     *Step1) get store website from request
     *Step2) if store website not present send return message
     *Step3) if it's present get cutomer using store_website_Id and email id
     *        if customer is not present create new customer
     *Step4) Now using store_website_id get mailing list
     *Step5) loop on all mailing list and call to addToList method
     **/
    public function add(Request $request)
    {
        // Step1
        $store_website = StoreWebsite::Where('website', $request->website)->first();
        // Step 2
        if (! $store_website) {
            $message = $this->generate_erp_response('newsletter.failed', 0, $default = 'Store website not found', request('lang_code'));

            return response()->json(['code' => 200, 'message' => $message]);
        }
        // Step 3
        $customer = $this->get_customer($request->get('email'), $store_website->id);

        if ($customer && $customer->newsletter == 1 && $customer->store_website_id == $store_website->id) {
            $message = $this->generate_erp_response('newsletter.failed.already_subscribed', $store_website->id, $default = 'You have already subscibed newsletter', request('lang_code'));

            return response()->json(['code' => 500, 'message' => $message]);
        }

        if (! $customer) {
            $customer = $this->create_customer($request->get('email'), $store_website->id, $request->get('store_name', null), $request->lang_code);
        }

        // Step4
        $language = explode('_', $request->lang_code);
        $language = end($language);

        $languageId  = Language::where('locale', $language)->pluck('id')->first();
        $mailinglist = Mailinglist::where('website_id', $store_website->id)
            ->where('language', $languageId)->get();

        // Step5
        foreach ($mailinglist as $key => $m) {
            $this->addToList($m->remote_id, $request->get('email'), $store_website->send_in_blue_api);
        }

        $customer->newsletter = 1;
        $customer->save();

        $message = $this->generate_erp_response('newsletter.success', $store_website->id, $default = 'Successfully added', request('lang_code'));

        return response()->json(['code' => 200, 'message' => $message]);
    }

    /**
     * @param mixed $id
     * @param mixed $email
     * @param mixed $send_in_blue_api
     *
     * @return \Illuminate\Http\RedirectResponse
     */
    public function addToList($id, $email, $send_in_blue_api)
    {
        $api_key   = ($send_in_blue_api != '') ? $send_in_blue_api : config('env.SEND_IN_BLUE_API');
        $startTime = date('Y-m-d H:i:s', LARAVEL_START);
        $curl      = curl_init();
        $url       = 'https://api.sendinblue.com/v3/contacts/';
        $data      = [
            'email'   => $email,
            'listIds' => [intval($id)],
        ];

        curl_setopt_array($curl, [
            CURLOPT_URL            => $url,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING       => '',
            CURLOPT_MAXREDIRS      => 10,
            CURLOPT_TIMEOUT        => 0,
            CURLOPT_FOLLOWLOCATION => true,
            CURLOPT_HTTP_VERSION   => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST  => 'POST',
            CURLOPT_POSTFIELDS     => json_encode($data),
            CURLOPT_HTTPHEADER     => [
                'api-key: ' . $api_key,
                'Content-Type: application/json',
            ],
        ]);
        $response   = curl_exec($curl);
        $res        = json_decode($response);
        $httpcode   = curl_getinfo($curl, CURLINFO_HTTP_CODE);
        $parameters = [];
        curl_close($curl);

        LogRequest::log($startTime, $url, 'GET', json_encode($parameters), $res, $httpcode, \App\Http\Controllers\MailinglistController::class, 'addToList');

        if (isset($res->message)) {
            if ($res->message == 'Contact already exist') {
                $curl3 = curl_init();
                $url   = "https://api.sendinblue.com/v3/contacts/' . $email";
                curl_setopt_array($curl3, [
                    CURLOPT_URL            => $url,
                    CURLOPT_RETURNTRANSFER => true,
                    CURLOPT_ENCODING       => '',
                    CURLOPT_MAXREDIRS      => 10,
                    CURLOPT_TIMEOUT        => 0,
                    CURLOPT_FOLLOWLOCATION => true,
                    CURLOPT_HTTP_VERSION   => CURL_HTTP_VERSION_1_1,
                    CURLOPT_CUSTOMREQUEST  => 'DELETE',
                    CURLOPT_HTTPHEADER     => [
                        'api-key: ' . $api_key,
                        'Content-Type: application/json',
                    ],
                ]);
                $respw      = curl_exec($curl3);
                $respw      = json_decode($respw);
                $httpcode   = curl_getinfo($curl3, CURLINFO_HTTP_CODE);
                $parameters = [];
                LogRequest::log($startTime, $url, 'DELETE', json_encode($parameters), $respw, $httpcode, \App\Http\Controllers\MailinglistController::class, 'addToList');
                curl_close($curl3);

                $curl2 = curl_init();
                $url   = 'https://api.sendinblue.com/v3/contacts';
                curl_setopt_array($curl2, [
                    CURLOPT_URL            => $url,
                    CURLOPT_RETURNTRANSFER => true,
                    CURLOPT_ENCODING       => '',
                    CURLOPT_MAXREDIRS      => 10,
                    CURLOPT_TIMEOUT        => 0,
                    CURLOPT_FOLLOWLOCATION => true,
                    CURLOPT_HTTP_VERSION   => CURL_HTTP_VERSION_1_1,
                    CURLOPT_CUSTOMREQUEST  => 'POST',
                    CURLOPT_POSTFIELDS     => json_encode($data),
                    CURLOPT_HTTPHEADER     => [
                        'api-key: ' . $api_key,
                        'Content-Type: application/json',
                    ],
                ]);
                $resp       = curl_exec($curl2);
                $ress       = json_decode($resp);
                $parameters = [];
                $httpcode   = curl_getinfo($curl, CURLINFO_HTTP_CODE);
                LogRequest::log($startTime, $url, 'POST', json_encode($parameters), $ress, $httpcode, \App\Http\Controllers\MailinglistController::class, 'addToList');
                curl_close($curl2);

                if (isset($ress->message)) {
                    return response()->json(['status' => 'error']);
                }
                $customer    = Customer::where('email', $email)->first();
                $mailinglist = Mailinglist::find($id);
                \DB::table('list_contacts')->where('customer_id', $customer->id)->delete();
                if (! empty($mailinglist)) {
                    $mailinglist->listCustomers()->attach($customer->id);
                }

                return response()->json(['status' => 'success']);
            }
        } else {
            $customer    = Customer::where('email', $email)->first();
            $mailinglist = Mailinglist::find($id);
            $mailinglist->listCustomers()->attach($customer->id);

            return response()->json(['status' => 'success']);
        }
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/AssetsManagerController.php 
Content: <?php

namespace App\Http\Controllers;

use DB;
use Auth;
use App\User;
use App\Email;
use Exception;
use App\CashFlow;
use App\ChatMessage;
use App\EmailAddress;
use App\StoreWebsite;
use App\AssetsManager;
use App\AssetPlateForm;
use App\AssetsCategory;
use Illuminate\Support\Str;
use App\UserEvent\UserEvent;
use Illuminate\Http\Request;
use App\AssetManagerLinkUser;
use App\AssetManamentUpdateLog;
use App\assetUserChangeHistory;
use App\Models\DataTableColumn;
use App\Marketing\WhatsappConfig;
use App\AssetMagentoDevScripUpdateLog;
use App\Models\AssetManagerUserAccess;
use App\Models\AssetManagerTerminalUserAccess;
use App\Models\AssetManagerTerminalUserAccessRemakrs;

class AssetsManagerController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request)
    {
        $archived = 0;
        if ($request->archived == 1) {
            $archived = 1;
        }

        $assets_category = AssetsCategory::all();

        $search              = request('search', '');
        $paymentCycle        = request('payment_cycle', '');
        $assetType           = request('asset_type', '');
        $purchaseType        = request('purchase_type', '');
        $website_id          = request('website_id');
        $asset_plate_form_id = request('asset_plate_form_id');
        $email_address_id    = request('email_address_id');
        $whatsapp_config_id  = request('whatsapp_config_id');
        $ip_ids              = request('ip_ids');
        $user_ids            = request('user_ids');
        $date                = request('date');

        $assets = new AssetsManager;
        $assets = $assets->leftJoin('store_websites', 'store_websites.id', 'assets_manager.website_id')
            ->leftJoin('asset_plate_forms AS apf', 'apf.id', 'assets_manager.asset_plate_form_id')
            ->leftJoin('email_addresses As ea', 'ea.id', 'assets_manager.email_address_id')
            ->leftJoin('whatsapp_configs AS wc', 'wc.id', 'assets_manager.whatsapp_config_id')
            ->leftJoin('assets_manager_link_user as linkuser', 'linkuser.asset_manager_id', 'assets_manager.id');

        if (! Auth::user()->hasRole('Admin')) {
            $assets->where('assets_manager.created_by', Auth::user()->id)->orWhere('linkuser.user_id', Auth::user()->id);
        }

        if (! empty($search)) {
            $assets = $assets->where(function ($q) use ($search) {
                $q->where('assets_manager.name', 'LIKE', '%' . $search . '%')->orWhere('provider_name', 'LIKE', '%' . $search . '%');
            });
        }

        if (! empty($paymentCycle)) {
            $assets = $assets->where('assets_manager.payment_cycle', $paymentCycle);
        }

        if (! empty($assetType)) {
            $assets = $assets->where('assets_manager.asset_type', $assetType);
        }

        if (! empty($purchaseType)) {
            $assets = $assets->where('assets_manager.purchase_type', $purchaseType);
        }

        if (! empty($website_id)) {
            $assets = $assets->where('assets_manager.website_id', $website_id);
        }

        if (! empty($asset_plate_form_id)) {
            $assets = $assets->where('assets_manager.asset_plate_form_id', $asset_plate_form_id);
        }

        if (! empty($email_address_id)) {
            $assets = $assets->where('assets_manager.purchase_type', $email_address_id);
        }

        if (! empty($whatsapp_config_id)) {
            $assets = $assets->where('assets_manager.purchase_type', $whatsapp_config_id);
        }
        if (! empty($user_ids)) {
            $assets = $assets->whereIn('assets_manager.created_by', $user_ids);
        }

        if (! empty($ip_ids) && (count($ip_ids) > 0)) {
            $ip_idss = array_filter($ip_ids, fn ($ip_ids) => ! is_null($ip_ids));
            if (! in_array(null, $ip_idss)) {
                $assets = $assets->whereIn('assets_manager.ip', $ip_idss);
            }
        }

        $assets = $assets->orderBy('id', 'ASC');

        $assetsIds    = $assets->select('assets_manager.id')->get()->toArray();
        $assets       = $assets->select(\DB::raw('DISTINCT assets_manager.*, linkuser.asset_manager_id'), 'store_websites.website AS website_name', 'apf.name AS plateform_name', 'ea.from_address', 'wc.number');
        $assets       = $assets->orderBy('assets_manager.id', 'asc')->paginate(25);
        $websites     = StoreWebsite::all();
        $plateforms   = AssetPlateForm::all();
        $emailAddress = EmailAddress::all();
        $whatsappCon  = WhatsappConfig::all();

        //Cash Flows
        $cashflows = \App\CashFlow::whereIn('cash_flow_able_id', $assetsIds)->where(['cash_flow_able_type' => \App\AssetsManager::class])->get();
        $users     = User::get()->toArray();

        $datatableModel = DataTableColumn::select('column_name')->where('user_id', auth()->user()->id)->where('section_name', 'asset-manager')->first();

        $dynamicColumnsToShowAM = [];
        if (! empty($datatableModel->column_name)) {
            $hideColumns            = $datatableModel->column_name ?? '';
            $dynamicColumnsToShowAM = json_decode($hideColumns, true);
        }

        return view('assets-manager.index', compact('assets', 'assets_category', 'cashflows', 'users', 'websites', 'plateforms', 'whatsappCon', 'emailAddress', 'dynamicColumnsToShowAM'))
            ->with('i', ($request->input('page', 1) - 1) * 10);
    }

    public function asColumnVisbilityUpdate(Request $request)
    {
        $userCheck = DataTableColumn::where('user_id', auth()->user()->id)->where('section_name', 'asset-manager')->first();

        if ($userCheck) {
            $column               = DataTableColumn::find($userCheck->id);
            $column->section_name = 'asset-manager';
            $column->column_name  = json_encode($request->column_assetsmanager);
            $column->save();
        } else {
            $column               = new DataTableColumn();
            $column->section_name = 'asset-manager';
            $column->column_name  = json_encode($request->column_assetsmanager);
            $column->user_id      = auth()->user()->id;
            $column->save();
        }

        return redirect()->back()->with('success', 'column visiblity Added Successfully!');
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
    }

    /**
     * Store a newly created resource in storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $this->validate($request, [
            'name'          => 'required',
            'link'          => 'required',
            'asset_type'    => 'required',
            'start_date'    => 'required',
            'category_id'   => 'required',
            'purchase_type' => 'required',
            'payment_cycle' => 'required',
            'amount'        => 'required',
        ]);

        $othercat    = $request->input('other');
        $category_id = $request->input('category_id');
        $catid       = '';
        if ($othercat != '' && $category_id != '') {
            $dataCat = AssetsCategory::where('cat_name', $othercat)->first();

            if (! empty($dataCat) && $dataCat->id != '') {
                $catid = $dataCat->id;
            } else {
                $catid = DB::table('assets_category')->insertGetId(
                    ['cat_name' => $othercat]
                );
            }
        }

        $data = $request->except('_token');
        if ($catid != '') {
            $data['category_id'] = $catid;
        }
        $data['start_date']          = ($request->input('start_date') == '') ? $request->input('old_start_date') : $request->input('start_date');
        $data['ip_name']             = $request->ip_name;
        $data['server_password']     = $request->server_password;
        $data['folder_name']         = json_encode($request->folder_name);
        $data['website_id']          = $request->website_id;
        $data['asset_plate_form_id'] = $request->asset_plate_form_id;
        $data['email_address_id']    = $request->email_address_id;
        $data['whatsapp_config_id']  = $request->whatsapp_config_id;
        $data['created_by']          = Auth::user()->id;
        $data['link']                = $request->get('link');
        $data['ip']                  = $request->get('ip');
        $insertData                  = AssetsManager::create($data);
        if ($request->input('payment_cycle') == 'One time') {
            //create entry in table cash_flows
            \App\CashFlow::create(
                [
                    'description'         => 'Asset Manager Payment for ' . $insertData->name,
                    'date'                => date('Y-m-d'),
                    'amount'              => $request->input('amount'),
                    'type'                => 'pending',
                    'currency'            => $insertData->currency,
                    'cash_flow_able_type' => \App\AssetsManager::class,
                    'cash_flow_able_id'   => $insertData->id,

                ]
            );
        }

        return redirect()->route('assets-manager.index')
            ->with('success', 'Assets created successfully');
    }

    /**
     * Display the specified resource.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
    }

    /**
     * Update the specified resource in storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        $this->validate($request, [
            'name'          => 'required',
            'link'          => 'required',
            'asset_type'    => 'required',
            'start_date'    => 'required',
            'category_id'   => 'required',
            'purchase_type' => 'required',
            'payment_cycle' => 'required',
            'amount'        => 'required',
        ]);

        $othercat    = $request->input('other');
        $category_id = $request->input('category_id');
        $catid       = '';
        if ($othercat != '' && $category_id != '') {
            $dataCat = DB::table('assets_category')
                ->Where('cat_name', $othercat)
                ->first();

            if (! empty($dataCat) && $dataCat->id != '') {
                $catid = $dataCat->id;
            } else {
                $catid = DB::table('assets_category')->insertGetId(
                    ['cat_name' => $othercat]
                );
            }
        }

        $data = $request->except('_token');

        if ($catid != '') {
            $data['category_id'] = $catid;
        }
        if ($request->input('old_user_name') != $request->input('user_name') || $request->input('old_password') != $request->input('password')) {
            $assetLog                   = new AssetManamentUpdateLog();
            $assetLog->assetmenament_id = $id;
            $assetLog->user_id          = \Auth::user()->id;
            $assetLog->user_name        = $request->input('old_user_name');
            $assetLog->password         = $request->input('old_password');
            $assetLog->ip               = $request->input('old_ip');
            $assetLog->save();
        }
        if ($request->input('old_user_name') != $request->input('user_name')) {
            $this->createUserHistory($request, $id);
        }
        $data['ip_name']             = $request->ip_name;
        $data['server_password']     = $request->server_password;
        $data['folder_name']         = json_encode($request->folder_name);
        $data['website_id']          = $request->website_id;
        $data['asset_plate_form_id'] = $request->asset_plate_form_id;
        $data['email_address_id']    = $request->email_address_id;
        $data['whatsapp_config_id']  = $request->whatsapp_config_id;
        $data['link']                = $request->get('link');
        AssetsManager::find($id)->update($data);

        return redirect()->route('assets-manager.index')
            ->with('success', 'Assets updated successfully');
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        $data['archived'] = 1;
        AssetsManager::destroy($id);

        return redirect()->route('assets-manager.index')
            ->with('success', 'Assets deleted successfully');
    }

    public function addNote($id, Request $request)
    {
        $assetmanager = AssetsManager::findOrFail($id);
        $notes        = $assetmanager->notes;
        if (! is_array($notes)) {
            $notes = [];
        }

        $notes[]             = $request->get('note');
        $assetmanager->notes = $notes;
        $assetmanager->save();

        return response()->json([
            'status' => 'success',
        ]);
    }

    public function paymentHistory(request $request)
    {
        $asset_id    = $request->input('asset_id');
        $html        = '';
        $paymentData = CashFlow::where('cash_flow_able_id', $asset_id)
            ->where('cash_flow_able_type', \App\AssetsManager::class)
            ->where('type', 'paid')
            ->orderBy('date', 'DESC')
            ->get();
        $i = 1;
        if (count($paymentData) > 0) {
            foreach ($paymentData as $history) {
                $html .= '<tr>';
                $html .= '<td>' . $i . '</td>';
                $html .= '<td>' . $history->amount . '</td>';
                $html .= '<td>' . $history->date . '</td>';
                $html .= '<td>' . $history->description . '</td>';
                $html .= '</tr>';

                $i++;
            }

            return response()->json(['html' => $html, 'success' => true], 200);
        } else {
            $html .= '<tr>';
            $html .= '<td></td>';
            $html .= '<td></td>';
            $html .= '<td></td>';
            $html .= '<td></td>';
            $html .= '</tr>';
        }

        return response()->json(['html' => $html, 'success' => true], 200);
    }

    public function assetManamentLog(request $request)
    {
        $asset_id  = $request->input('asset_id');
        $html      = '';
        $assetLogs = AssetManamentUpdateLog::select('asset_manamentupdate_logs.*', 'users.name AS userName')
            ->leftJoin('users', 'users.id', '=', 'asset_manamentupdate_logs.user_id')
            ->where('asset_manamentupdate_logs.assetmenament_id', $asset_id)
            ->orderBy('asset_manamentupdate_logs.id', 'DESC')
            ->get();
        $i = 1;
        if (count($assetLogs) > 0) {
            foreach ($assetLogs as $assetLog) {
                $html .= '<tr>';
                $html .= '<td>' . $assetLog->id . '</td>';
                $html .= '<td>' . $assetLog->userName . '</td>';
                $html .= '<td>' . $assetLog->user_name . '</td>';
                $html .= '<td>' . $assetLog->password . '</td>';
                $html .= '<td>' . $assetLog->created_at . '</td>';
                $html .= '</tr>';
                $i++;
            }

            return response()->json(['html' => $html, 'success' => true], 200);
        } else {
            $html .= '<tr>';
            $html .= '<td colspan="4">Record not found</td>';
            $html .= '</tr>';
        }

        return response()->json(['html' => $html, 'success' => true], 200);
    }

    public function getMagentoDevScriptUpdatesLogs(Request $request, $asset_manager_id)
    {
        try {
            $responseLog = AssetMagentoDevScripUpdateLog::where('asset_manager_id', '=', $asset_manager_id)->orderBy('id', 'desc')->get();
            if ($responseLog != null) {
                $html = '';
                foreach ($responseLog as $res) {
                    $html .= '<tr>';
                    $html .= '<td>' . $res->created_at . '</td>';
                    $html .= '<td class="expand-row-msg" data-name="ip" data-id="' . $res->id . '" style="cursor: grabbing;">
                    <span class="show-short-ip-' . $res->id . '">' . Str::limit($res->ip, 15, '...') . '</span>
                    <span style="word-break:break-all;" class="show-full-ip-' . $res->id . ' hidden">' . $res->website . '</span>
                    </td>';
                    $html .= '<td class="expand-row-msg" data-name="response" data-id="' . $res->id . '" style="cursor: grabbing;">
                    <span class="show-short-response-' . $res->id . '">' . Str::limit($res->response, 25, '...') . '</span>
                    <span style="word-break:break-all;" class="show-full-response-' . $res->id . ' hidden">' . $res->response . '</span>
                    </td>';
                    $html .= '<td class="expand-row-msg" data-name="command" data-id="' . $res->id . '" style="cursor: grabbing;">
                    <span class="show-short-command-' . $res->id . '">' . Str::limit($res->command_name, 25, '...') . '</span>
                    <span style="word-break:break-all;" class="show-full-command-' . $res->id . ' hidden">' . $res->command_name . '</span>
                    </td>';

                    $html .= '</tr>';
                }

                return response()->json([
                    'code'    => 200,
                    'data'    => $html,
                    'message' => 'Magento bash Log Listed successfully!!!',
                ]);
            }

            return response()->json(['code' => 500, 'error' => 'Wrong site id!']);
        } catch (Exception $e) {
            $msg = $e->getMessage();

            return response()->json(['code' => 500, 'data' => [], 'message' => $msg]);
        }
    }

    public function magentoDevScriptUpdate(Request $request)
    {
        try {
            $run = \Artisan::call('command:MagentoDevUpdateScriptAsset', ['id' => $request->id, 'folder_name' => $request->folder_name]);

            return response()->json(['code' => 200, 'message' => 'Magento Setting Updated successfully']);
        } catch (Exception $e) {
            $msg = $e->getMessage();

            return response()->json(['code' => 500, 'message' => $msg]);
        }
    }

    public function userChangesHistoryLog(request $request)
    {
        $asset_id  = $request->input('asset_id');
        $html      = '';
        $assetLogs = assetUserChangeHistory::select('asset_user_change_histories.*', 'users.name AS userNameChangeBy', 'u.name AS userName')
            ->leftJoin('users', 'users.id', '=', 'asset_user_change_histories.user_id')
            ->leftJoin('users AS u', 'u.id', '=', 'asset_user_change_histories.new_user_id')
            ->where('asset_user_change_histories.asset_id', $asset_id)
            ->orderBy('asset_user_change_histories.id', 'DESC')
            ->get();
        $i = 1;
        if (count($assetLogs) > 0) {
            foreach ($assetLogs as $assetLog) {
                $html .= '<tr>';
                $html .= '<td>' . $assetLog->id . '</td>';
                $html .= '<td>' . $assetLog->userNameChangeBy . '</td>';
                $html .= '<td>' . $assetLog->userName . '</td>';
                $html .= '<td>' . $assetLog->created_at . '</td>';
                $html .= '</tr>';
                $i++;
            }

            return response()->json(['html' => $html, 'success' => true], 200);
        } else {
            $html .= '<tr>';
            $html .= '<td colspan="4">Record not found</td>';
            $html .= '</tr>';
        }

        return response()->json(['html' => $html, 'success' => true], 200);
    }

    public function createUserHistory(Request $request, $id)
    {
        try {
            $userHistory = assetUserChangeHistory::create([
                'asset_id'    => $id,
                'user_id'     => \Auth::user()->id,
                'new_user_id' => $request->user_name,
                'old_user_id' => $request->old_user_name,
            ]);
        } catch (Exception $e) {
            $msg = $e->getMessage();

            return response()->json(['code' => 500, 'message' => $msg]);
        }
    }

    public function plateFormStore(Request $request)
    {
        try {
            $plateform = AssetPlateForm::create([
                'name' => $request->name,
            ]);

            return response()->json(['code' => 500, 'data' => $plateform, 'message' => 'Plateform Data has been saved successfully']);
        } catch (Exception $e) {
            $msg = $e->getMessage();

            return response()->json(['code' => 500, 'message' => $msg]);
        }
    }

    /**
     * Send email to given emailId
     *
     * @return \Illuminate\Http\Response
     */
    public function assetsManagerSendEmail(Request $request)
    {
        try {
            $this->validate($request, [
                'user_name'  => 'required',
                'from_email' => 'required',
            ]);
            $assetsmanager = AssetsManager::where('id', $request->assets_manager_id)->first();
            $usersdetails  = User::where('id', $request->user_name)->first();
            $newPassword   = Str::random(12);
            $message       = '';
            $message .= '<center><h4>Assets Manager Details <h4></center>' . '<br>';
            $message .= 'Name = ' . $assetsmanager->name . '<br>';
            $message .= 'Capacity = ' . $assetsmanager->capacity . '<br>';
            $message .= 'Password = ' . $assetsmanager->password . '<br>';
            $message .= 'Provider Name = ' . $assetsmanager->provider_name . '<br>';
            $message .= 'Asset Type = ' . $assetsmanager->asset_type . '<br>';
            $message .= 'Category = ' . $assetsmanager->category->cat_name . '<br>';
            $message .= 'Purchase Type = ' . $assetsmanager->purchase_type . '<br>';
            $message .= 'Payment Cycle = ' . $assetsmanager->payment_cycle . '<br>';
            $message .= 'Amount = ' . $assetsmanager->amount . '<br>';
            $message .= 'Currency = ' . $assetsmanager->currency . '<br>';
            $message .= 'Ip = ' . $assetsmanager->ip . '<br>';
            $message .= 'Ip Name = ' . $assetsmanager->ip_name . '<br>';

            //Store data in chat_message table.
            $params = [
                'number'  => $usersdetails->phone,
                'user_id' => Auth::user()->id,
                'message' => $message,
            ];

            ChatMessage::create($params);

            // Store data in email table
            $from_address = isset($request->from_email) && $request->from_email != '' ? $request->from_email : config('env.MAIL_FROM_ADDRESS');

            $email = Email::create([
                'model_id'         => '',
                'model_type'       => \App\AssetsManager::class,
                'from'             => $from_address,
                'to'               => $usersdetails->email,
                'subject'          => 'Assets Manager',
                'message'          => $message,
                'template'         => 'reset-password',
                'status'           => 'pre-send',
                'store_website_id' => null,
            ]);

            // Send email
            \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');
            \Session::flash('success', 'Assets manager email send successfully');
        } catch (\Throwable $th) {
            $emails                = Email::latest('created_at')->first();
            $emails->error_message = $th->getMessage();
            $emails->save();
            \Session::flash('error', $th->getMessage());
        }

        return redirect()->back();
    }

    /**
     * Assets manager record permission
     *
     * @return \Illuminate\Http\Response
     */
    public function assetsManagerRecordPermission(Request $request)
    {
        //Delete existing records
        $existsRec = AssetManagerLinkUser::select(\DB::raw('group_concat( id) as linkId'))->where('asset_manager_id', $request->assets_manager_id)->first();
        if (! empty($existsRec->linkId)) {
            AssetManagerLinkUser::whereIn('id', explode(',', $existsRec->linkId))->delete();
        }

        //Insert new records
        $assetManagerLinkArr = [];
        if (isset($request->user_name)) {
            foreach ($request->user_name as $key => $value) {
                $assetManagerLinkArr[] = ['user_id' => $value, 'asset_manager_id' => $request->assets_manager_id];
            }
            AssetManagerLinkUser::insert($assetManagerLinkArr);
            if (! empty($existsRec->linkId)) {
                \Session::flash('success', 'Permission updated successfully');
            } else {
                \Session::flash('success', 'Permission added successfully');
            }
        } else {
            \Session::flash('success', 'Permission removed successfully');
        }

        return redirect()->back();
    }

    /**
     * Assets manager link users Ids
     *
     * @return \Illuminate\Http\Response
     */
    public function linkUserList(Request $request)
    {
        $linkuser = AssetManagerLinkUser::select(\DB::raw('group_concat(DISTINCT user_id) as userids'))->distinct()->where('asset_manager_id', $request->asset_id)->first();

        return response()->json(['code' => 200, 'data' => $linkuser, 'message' => 'Assets manager data link user data fetch successfully']);
    }

    public function updateStatus(Request $request)
    {
        try {
            $asset_manager = AssetsManager::find($request->asset_id);
            if ($asset_manager) {
                if ($asset_manager->active == 1) {
                    $asset_manager->active = 0;
                    $asset_manager->save();
                    UserEvent::where('asset_manager_id', $asset_manager->id)->forceDelete();
                } else {
                    $asset_manager->active = 1;
                    $asset_manager->save();
                }

                return response()->json(['status' => true, 'message' => 'Status updated']);
            } else {
                throw new Exception('Asset not found');
            }
        } catch (Exception $e) {
            return response()->json(['status' => false, 'message' => 'Error while updating status']);
        }
    }

    public function assetManamentUsers(request $request)
    {
        $html = '';

        $users = User::get();

        $i = 1;
        if (count($users) > 0) {
            foreach ($users as $user) {
                $html .= '<tr>';
                $html .= '<td>' . $user->id . '</td>';
                $html .= '<td>' . $user->name . '</td>';
                $html .= '<td>' . $user->email . '</td>';
                $html .= '</tr>';
                $i++;
            }

            return response()->json(['html' => $html, 'success' => true], 200);
        } else {
            $html .= '<tr>';
            $html .= '<td colspan="3">Record not found</td>';
            $html .= '</tr>';
        }

        return response()->json(['html' => $html, 'success' => true], 200);
    }

    public function assetManamentUsersAccess(request $request)
    {
        $html = '';

        if (! empty($request->assets_management_id)) {
            $user_accesses = new AssetManagerUserAccess;
            $user_accesses = $user_accesses->leftJoin('users', 'users.id', 'asset_manager_user_accesses.user_id')->where('assets_management_id', $request->assets_management_id)->select('asset_manager_user_accesses.*', 'users.name AS selectedUser')->get();

            $i = 1;
            if (count($user_accesses) > 0) {
                foreach ($user_accesses as $user_access) {
                    $html .= '<tr>';
                    $html .= '<td>' . $i . '</td>';
                    $html .= '<td>' . $user_access->selectedUser . '</td>';
                    $html .= '<td>' . $user_access->username . '</td>';
                    $html .= '<td>' . $user_access->password . '</td>';
                    $html .= '<td>' . $user_access->created_at . '</td>';
                    $html .= '<td><button type="button" data-id="' . $user_access->id . '" class="btn user-access-request-view" style="padding:1px 0px;"><i class="fa fa-eye" aria-hidden="true"></i></button></td>';
                    $html .= '<td><button type="button" data-id="' . $user_access->id . '" class="btn user-access-response-view" style="padding:1px 0px;"><i class="fa fa-eye" aria-hidden="true"></i></button></td>';
                    $html .= '<td> <button type="button" class="btn btn-secondary btn-sm mt-2" onclick="deleteUserAccess(' . $user_access->id . ')"><i class="fa fa-trash"></i></button></td>';
                    $html .= '</tr>';
                    $i++;
                }

                return response()->json(['html' => $html, 'success' => true], 200);
            } else {
                $html .= '<tr>';
                $html .= '<td colspan="8">Record not found</td>';
                $html .= '</tr>';
            }
        } else {
            $html .= '<tr>';
            $html .= '<td colspan="8">Record not found</td>';
            $html .= '</tr>';
        }

        return response()->json(['html' => $html, 'success' => true], 200);
    }

    public function createUserAccess(Request $request)
    {
        try {
            // New Script
            $action = 'add';
            $SFTP   = true;
            $ssh    = true;
            $server = strval($request->server_var);

            $scriptsPath = getenv('DEPLOYMENT_SCRIPTS_PATH');

            if ($request->login_type == 'key') {
                $cmd = "bash $scriptsPath" . "manageusers.sh -f \"$action\" -s \"$server\" -u \"$request->username\" -p \"$request->password\" -l \"$request->login_type\" -t \"$SFTP\" -b \"$ssh\" -r \"$request->key_type\" -R \"$request->user_role\" 2>&1";
            } else {
                $cmd = "bash $scriptsPath" . "manageusers.sh -f \"$action\" -s \"$server\" -u \"$request->username\" -p \"$request->password\" -l \"$request->login_type\" -t \"$SFTP\" -b \"$ssh\" -R \"$request->user_role\" 2>&1";
            }
            // NEW Script
            $result = exec($cmd, $output, $return_var);

            $useraccess = AssetManagerUserAccess::create([
                'assets_management_id' => $request->assets_management_id,
                'user_id'              => $request->user_id,
                'created_by'           => Auth::user()->id,
                'username'             => $request->username,
                'password'             => $request->password,
                'request_data'         => $cmd,
                'response_data'        => json_encode($result),
                'usernamehost'         => $request->usernamehost,
                'login_type'           => $request->login_type,
                'key_type'             => $request->key_type,
                'user_role'            => $request->user_role,
            ]);

            return response()->json(['code' => 200, 'data' => $useraccess, 'message' => 'User Access has been created successfully']);
        } catch (Exception $e) {
            $msg = $e->getMessage();

            return response()->json(['code' => 500, 'message' => $msg]);
        }
    }

    public function deleteUserAccess(Request $request)
    {
        try {
            $user_access = AssetManagerUserAccess::where('id', $request->id)->first();

            if (! empty($user_access)) {
                // New Script
                $action = 'delete';
                $SFTP   = true;
                $ssh    = true;
                $server = 'demo.mio-moda.com';

                $scriptsPath = getenv('DEPLOYMENT_SCRIPTS_PATH');

                if ($user_access->login_type == 'key') {
                    $cmd = "bash $scriptsPath" . "manageusers.sh -f \"$action\" -s \"$server\" -u \"$user_access->username\" -p \"$user_access->password\" -l \"$user_access->login_type\" -t \"$SFTP\" -b \"$ssh\" -r \"$user_access->key_type\" -R \"$user_access->user_role\" 2>&1";
                } else {
                    $cmd = "bash $scriptsPath" . "manageusers.sh -f \"$action\" -s \"$server\" -u \"$user_access->username\" -p \"$user_access->password\" -l \"$user_access->login_type\" -t \"$SFTP\" -b \"$ssh\" -R \"$user_access->user_role\" 2>&1";
                }

                // NEW Script
                $result = exec($cmd, $output, $return_var);

                $access = AssetManagerUserAccess::find($request->id);
                $access->delete();

                return response()->json(['code' => 200, 'message' => 'User Access has been deleted successfully']);
            } else {
                return response()->json(['code' => 500, 'message' => 'Something went wrong. Please try again.']);
            }
        } catch (Exception $e) {
            $msg = $e->getMessage();

            return response()->json(['code' => 500, 'message' => $msg]);
        }
    }

    public function assetsUserList(Request $request)
    {
        $dataDropdown = User::pluck('name', 'id')->toArray();

        // Get the user input
        $input = $_GET['term'];

        // Filter tags based on user input
        $filteredTags = array_filter($dataDropdown, function ($tag) use ($input) {
            return stripos($tag, $input) !== false;
        });

        // Return the filtered tags as JSON
        echo json_encode($filteredTags);
    }

    public function userAccessRequest($id)
    {
        $userAccessRequest = AssetManagerUserAccess::findorFail($id);

        return response()->json([
            'status'        => true,
            'data'          => $userAccessRequest,
            'request_data'  => $userAccessRequest['request_data'],
            'response_data' => $userAccessRequest['response_data'],
            'message'       => 'Data get successfully',
            'status_name'   => 'success',
        ], 200);
    }

    public function createTerminalUserAccess(Request $request)
    {
        try {
            $this->validate($request, [
                'username' => 'required|unique:asset_manager_terminal_user_accesses,username',
            ]);

            $useraccess = AssetManagerTerminalUserAccess::create([
                'assets_management_id' => $request->assets_management_id,
                'created_by'           => Auth::user()->id,
                'username'             => $request->username,
                'password'             => $request->password,
            ]);

            return response()->json(['code' => 200, 'data' => $useraccess, 'message' => 'Terminal User Access has been created successfully']);
        } catch (Exception $e) {
            $msg = $e->getMessage();

            return response()->json(['code' => 500, 'message' => $msg]);
        }
    }

    public function assetManamentTerminalUsersAccess(request $request)
    {
        $html = '';

        if (! empty($request->assets_management_id)) {
            $user_accesses = new AssetManagerTerminalUserAccess;
            $user_accesses = $user_accesses->where('assets_management_id', $request->assets_management_id)->select('asset_manager_terminal_user_accesses.*')->orderBy('id', 'DESC')->get();

            $i = 1;
            if (count($user_accesses) > 0) {
                foreach ($user_accesses as $user_access) {
                    $html .= '<tr>';
                    $html .= '<td>' . $i . '</td>';
                    $html .= '<td>';
                    $html .= '<div class=" mb-1 p-0 d-flex pt-2 mt-1">
                                <input style="margin-top: 0px;width:80% !important;" type="text" class="form-control " name="user_access_username" placeholder="Username" value="' . $user_access->username . '" id="user_access_username_' . $user_access->id . '">
                                <div style="margin-top: 0px;" class="d-flex p-0">
                                    <button class="btn pr-0 btn-xs btn-image " onclick="updateUsernamePassword(' . $user_access->id . ', 1)"><i class="fa fa-pencil-square-o" aria-hidden="true"></i></button>
                                </div>
                            </div>';
                    $html .= '</td>';
                    $html .= '<td>';
                    $html .= '<div class=" mb-1 p-0 d-flex pt-2 mt-1">
                                <input style="margin-top: 0px;width:80% !important;" type="text" class="form-control " name="user_access_password" placeholder="Password" value="' . $user_access->password . '" id="user_access_password_' . $user_access->id . '">
                                <div style="margin-top: 0px;" class="d-flex p-0">
                                    <button class="btn pr-0 btn-xs btn-image " onclick="updateUsernamePassword(' . $user_access->id . ',2)"><i class="fa fa-pencil-square-o" aria-hidden="true"></i></button>
                                </div>
                            </div>';
                    $html .= '</td>';
                    $html .= '<td>';
                    $html .= '<div class=" mb-1 p-0 d-flex pt-2 mt-1">
                                <input style="margin-top: 0px;width:80% !important;" type="text" class="form-control " name="message" placeholder="Remarks" value="" id="remark_' . $user_access->id . '">
                                <div style="margin-top: 0px;" class="d-flex p-0">
                                    <button class="btn pr-0 btn-xs btn-image " onclick="saveRemarks(' . $user_access->id . ')"><img src="/images/filled-sent.png"></button>
                                    <button type="button" data-id="' . $user_access->id . '" class="btn btn-image remarks-history-show p-0 ml-2" title="Status Histories"><i class="fa fa-info-circle"></i></button>
                                </div>
                            </div>';
                    $html .= '</td>';
                    $html .= '<td>' . $user_access->created_at . '</td>';
                    $html .= '<td> <button type="button" class="btn btn-secondary btn-sm mt-2" onclick="deleteTerminalUserAccess(' . $user_access->id . ')"><i class="fa fa-trash"></i></button></td>';
                    $html .= '</tr>';
                    $i++;
                }

                return response()->json(['html' => $html, 'success' => true], 200);
            } else {
                $html .= '<tr>';
                $html .= '<td colspan="8">Record not found</td>';
                $html .= '</tr>';
            }
        } else {
            $html .= '<tr>';
            $html .= '<td colspan="8">Record not found</td>';
            $html .= '</tr>';
        }

        return response()->json(['html' => $html, 'success' => true], 200);
    }

    public function deleteTerminalUserAccess(Request $request)
    {
        try {
            $user_access = AssetManagerTerminalUserAccess::where('id', $request->id)->first();

            if (! empty($user_access)) {
                $access = AssetManagerTerminalUserAccess::find($request->id);
                $access->delete();

                return response()->json(['code' => 200, 'message' => 'Terminal User Access has been deleted successfully']);
            } else {
                return response()->json(['code' => 500, 'message' => 'Something went wrong. Please try again.']);
            }
        } catch (Exception $e) {
            $msg = $e->getMessage();

            return response()->json(['code' => 500, 'message' => $msg]);
        }
    }

    public function saveRemarks(Request $request)
    {
        $post = $request->all();

        $this->validate($request, [
            'amtua_id' => 'required',
            'remarks'  => 'required',
        ]);

        $input             = $request->except(['_token']);
        $input['added_by'] = Auth::user()->id;
        AssetManagerTerminalUserAccessRemakrs::create($input);

        return response()->json(['code' => 200, 'data' => $input, 'message' => 'Remarks added successfully']);
    }

    public function getRemarksHistories(Request $request)
    {
        $datas = AssetManagerTerminalUserAccessRemakrs::with(['user'])
            ->where('amtua_id', $request->amtua_id)
            ->latest()
            ->get();

        return response()->json([
            'status'      => true,
            'data'        => $datas,
            'message'     => 'History get successfully',
            'status_name' => 'success',
        ], 200);
    }

    public function updateUsernamePassword(Request $request)
    {
        try {
            $post = $request->all();

            $this->validate($request, [
                'amtua_id' => 'required',
                'type'     => 'required',
                'username' => 'required|unique:asset_manager_terminal_user_accesses,username,' . $request->amtua_id . ',id',
                'password' => 'required',
            ]);

            $amtua = AssetManagerTerminalUserAccess::find($request->amtua_id);

            if ($request->type == 1) {
                $amtua->username = $request->username;
            } else {
                $amtua->password = $request->password;
            }
            $amtua->save();

            return response()->json(['code' => 200, 'data' => $post, 'message' => 'User access has been updated successfully']);
        } catch (Exception $e) {
            $msg = $e->getMessage();

            return response()->json(['code' => 500, 'message' => $msg]);
        }
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/AutoCommentHistoryController.php 
Content: <?php

namespace App\Http\Controllers;

use App\User;
use App\TargetLocation;
use App\AutoReplyHashtags;
use App\AutoCommentHistory;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;

class AutoCommentHistoryController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     *                                   get comments, hashtags and country list for commenting in bulk
     */
    public function index(Request $request)
    {
        $comments  = AutoCommentHistory::orderBy('created_at', 'DESC');
        $hashtags  = AutoReplyHashtags::all();
        $countries = TargetLocation::all();

        if ($request->get('verified')) {
            $comments = $comments->where('is_verified', $request->get('verified') == 1 ? 1 : 0);
        }

        if ($request->get('posted')) {
            $comments = $comments->where('status', $request->get('posted') == 1 ? 1 : 0);
        }
        if ($request->get('assigned') == 1) {
            $comments = $comments->whereHas('user');
        }
        if ($request->get('assigned') == 2) {
            $comments = $comments->whereDoesntHave('user');
        }

        if ($request->get('user_id') > 0) {
            $comments = $comments->whereIn('id', DB::table('users_auto_comment_histories')->where('user_id', $request->get(user_id))->pluck('auto_comment_history_id')->toArray());
        }

        $comments = $comments->paginate(50);

        //verified, posted, assigned
        $statsByCountry = DB::table('auto_comment_histories')->selectRaw('country, COUNT("*") AS total')->groupBy(['country'])->get();
        $statsByHashtag = DB::table('auto_comment_histories')->selectRaw('target, COUNT("*") AS total')->groupBy(['target'])->get();

        $users = User::all();

        return view('instagram.auto_comments.report', compact('comments', 'hashtags', 'countries', 'statsByCountry', 'statsByHashtag', 'request', 'users'));
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        //
    }

    /**
     * Display the specified resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function show(AutoCommentHistory $autoCommentHistory)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param \App\AutoCommentHistory $autoCommentHistory
     * @param mixed                   $id
     *
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        $comment              = AutoCommentHistory::find($id);
        $comment->is_verified = 1;
        $comment->save();

        return response()->json([
            'status' => 'success',
        ]);
    }

    /**
     * Update the specified resource in storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, AutoCommentHistory $autoCommentHistory)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function destroy(AutoCommentHistory $autoCommentHistory)
    {
        //
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/BrandController.php 
Content: <?php

namespace App\Http\Controllers;

use Auth;
use App\Brand;
use App\Setting;
use App\Activity;
use App\Category;
use App\BrandLogo;
use App\BrandWithLogo;
use App\CategorySegment;
use App\ScrapedProducts;
use App\StoreWebsiteBrand;
use App\Jobs\CreateHashTags;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\File;
use Plank\Mediable\Facades\MediaUploader as MediaUploader;

class BrandController extends Controller
{
    public function index()
    {
        $brands = Brand::leftJoin('store_website_brands as swb', 'swb.brand_id', 'brands.id')
            ->leftJoin('store_websites as sw', 'sw.id', 'swb.store_website_id')
            ->select(['brands.*', \DB::raw('group_concat(sw.id) as selling_on'), \DB::raw('LOWER(trim(brands.name)) as lower_brand')])
            ->groupBy('brands.id')
            ->orderBy('lower_brand', 'asc')->whereNull('brands.deleted_at');

        $keyword = request('keyword');
        if (! empty($keyword)) {
            $brands = $brands->where('name', 'like', '%' . $keyword . '%');
        }

        $brands = $brands->paginate(Setting::get('pagination'));

        $category_segments = CategorySegment::where('status', 1)->get();

        $storeWebsite   = \App\StoreWebsite::all()->pluck('website', 'id')->toArray();
        $attachedBrands = \App\StoreWebsiteBrand::groupBy('store_website_id')->select(
            [\DB::raw('count(brand_id) as total_brand'), 'store_website_id']
        )->get()->toArray();

        return view('brand.index', compact('brands', 'storeWebsite', 'attachedBrands', 'category_segments'))
            ->with('i', (request()->input('page', 1) - 1) * 10);
    }

    public function scrap_brand(Request $request)
    {
        // Set dates
        $keyWord      = $request->get('term', '');
        $dev          = $request->get('dev', '');
        $devCheckboxs = $request->get('devCheckboxs');

        $brands = Brand::leftJoin('products as p', 'p.brand', 'brands.id')
            ->select(['brands.*', \DB::raw('LOWER(trim(brands.name)) as lower_brand'), \DB::raw('COUNT(p.id) as total_products')])
            ->groupBy('brands.id')
            ->orderBy('total_products', 'desc')->with('singleBrandTask')->whereNull('brands.deleted_at');

        if ($devCheckboxs) {
            $brands->whereHas('brandTask', function ($q) use ($devCheckboxs) {
                $q->whereIn('assigned_to', $devCheckboxs);
            });
        }
        $keyword = request('keyword');
        if (! empty($keyWord)) {
            $brands->where(function ($q) use ($keyWord) {
                $q->where('brands.name', 'like', "%{$keyWord}%");
            });
        }

        $brands = $brands->paginate(Setting::get('pagination'));

        //Developers

        $allbrands = Brand::leftJoin('products as p', 'p.brand', 'brands.id')
            ->select(['brands.*', \DB::raw('LOWER(trim(brands.name)) as lower_brand'), \DB::raw('COUNT(p.id) as total_products')])
            ->groupBy('brands.id')
            ->orderBy('total_products', 'desc')->with('singleBrandTask')->whereNull('brands.deleted_at');

        $alldevs    = [];
        $developers = $allbrands->get();
        if ($developers) {
            foreach ($developers as $_developer) {
                if ($_developer->singleBrandTask) {
                    $alldevs[! empty($_developer->singleBrandTask->assignedUser) ? $_developer->singleBrandTask->assignedUser->id : ''] = ! empty($_developer->singleBrandTask->assignedUser) ? $_developer->singleBrandTask->assignedUser->name : '';
                }
            }
        }

        $filters = $request->all();

        return view('brand.scrap_brand', compact('brands', 'filters', 'alldevs', 'dev'));
    }

    public function create()
    {
        $data['name']                 = '';
        $data['euro_to_inr']          = '';
        $data['deduction_percentage'] = '';
        $data['magento_id']           = '';
        $data['brand_segment']        = '';
        $data['category_segments']    = CategorySegment::where('status', 1)->get();
        $data['amount']               = '';
        $data['modify']               = 0;

        return view('brand.form', $data);
    }

    public function edit(Brand $brand)
    {
        $data                      = $brand->toArray();
        $data['category_segments'] = CategorySegment::where('status', 1)->get();
        $category_segment_discount = DB::table('category_segment_discounts')->where('brand_id', $brand->id)->first();
        if ($category_segment_discount) {
            $data['category_segment_id'] = $category_segment_discount->id;
            $data['amount']              = $category_segment_discount->amount;
        } else {
            $data['category_segment_id'] = '';
            $data['amount']              = '';
        }
        $data['modify'] = 1;

        return view('brand.form', $data);
    }

    public function store(Request $request, Brand $brand)
    {
        $this->validate($request, [
            'name' => 'required',
        ]);
        $euro_to_inr          = $request->euro_to_inr;
        $deduction_percentage = $request->deduction_percentage;
        $brand_segment        = $request->brand_segment;
        $magento_id           = $request->magento_id;
        $amount               = $request->amount;
        $category_segment_id  = $request->category_segment_id;
        if ($euro_to_inr === null) {
            $euro_to_inr = 0.0;
        }
        if ($deduction_percentage === null) {
            $deduction_percentage = 0;
        }
        if ($brand_segment === null) {
            $brand_segment = '';
        }
        if ($magento_id === null) {
            $magento_id = 0;
        }
        if ($amount === null) {
            $amount = 0;
        }
        if ($category_segment_id === null) {
            $category_segment_id = 0;
        }

        $data = [
            'name'                     => $request->name,
            'euro_to_inr'              => $euro_to_inr,
            'deduction_percentage'     => $deduction_percentage,
            'sales_discount'           => $request->sales_discount,
            'apply_b2b_discount_above' => $request->apply_b2b_discount_above,
            'b2b_sales_discount'       => $request->b2b_sales_discount,
            'magento_id'               => $magento_id,
            'brand_segment'            => $brand_segment,
            'sku_strip_last'           => $request->sku_strip_last,
            'sku_add'                  => $request->sku_add,
            'references'               => $request->references,
        ];

        $brand = $brand->create($data);

        DB::table('category_segment_discounts')->insert([
            ['brand_id' => $brand->id, 'category_segment_id' => $category_segment_id, 'amount' => $amount, 'amount_type' => 'percentage', 'created_at' => now(), 'updated_at' => now()],
        ]);

        /*Generate keyword for Current Brand Only*/
        $this->generateHashTagKeywords([]);

        return redirect()->route('brand.index')->with('success', 'Brand added successfully');
    }

    public function generateHashTagKeywords($brand_id_array)
    {
        $category_postfix_string_list = Category::getCategoryHierarchyString(4);
        /* Initialize queue for add hashtags */
        if (count($brand_id_array) > 0) {
            $brandList = Brand::where('is_hashtag_generated', 0)->whereIn('id', $brand_id_array)->pluck('name', 'id')->chunk(1000)->toArray();
        } else {
            $brandList = Brand::where('is_hashtag_generated', 0)->pluck('name', 'id')->chunk(100)->toArray();
        }

        foreach ($brandList as $chunk) {
            CreateHashTags::dispatch(['data' => $chunk, 'user_id' => Auth::user()->id, 'category_postfix_string_list' => $category_postfix_string_list, 'type' => 'brand'])->onQueue('generategooglescraperkeywords');
        }
    }

    /**
     * @return \Illuminate\Http\JsonResponse
     *                                       Function for fetch brand list using AJAX request
     */
    public function show(Request $request)
    {
        if ($request->ajax()) {
            $search_key = $request->get('search', '');
            $brand_list = Brand::where('name', 'LIKE', '%' . $search_key . '%')->take(20)->get();

            return response()->json(['success' => true, 'data' => $brand_list]);
        }

        return redirect()->route('brand.index');
    }

    public function destroy(Brand $brand)
    {
        $brand->scrapedProducts()->delete();
        $brand->products()->delete();
        $brand->delete();

        return redirect()->route('brand.index')->with('success', 'Brand Deleted successfully');
    }

    public static function getBrandName($id)
    {
        $brand          = new Brand();
        $brand_instance = $brand->find($id);

        return $brand_instance ? $brand_instance->name : '';
    }

    public static function getBrandIds($term)
    {
        $brand = Brand::where('name', '=', $term)->first();

        return $brand ? $brand->id : 0;
    }

    public static function getEuroToInr($id)
    {
        $brand          = new Brand();
        $brand_instance = $brand->find($id);

        return $brand_instance ? $brand_instance->euro_to_inr : 0;
    }

    public static function getDeductionPercentage($id)
    {
        $brand          = new Brand();
        $brand_instance = $brand->find($id);

        return $brand_instance ? $brand_instance->deduction_percentage : 0;
    }

    /**
     * @SWG\Get(
     *   path="/brands",
     *   tags={"Scraper"},
     *   summary="List all brands and reference for scraper",
     *   operationId="scraper-get-brands-reference",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *   @SWG\Response(response=406, description="not acceptable"),
     *   @SWG\Response(response=500, description="internal server error"),
     *
     *      @SWG\Parameter(
     *          name="mytest",
     *          in="path",
     *          required=true,
     *          type="string"
     *      ),
     * )
     */
    public function brandReference()
    {
        $brands         = Brand::select('name', 'references')->get();
        $referenceArray = []; // Got undifined referenceArray error so assigne array here
        foreach ($brands as $brand) {
            $referenceArray[] = $brand->name;
            if (! empty($brand->references)) {
                $references = explode(';', $brand->references);
                if (is_array($references)) {
                    foreach ($references as $reference) {
                        if ($reference != null && $reference != '') {
                            $referenceArray[] = $reference;
                        }
                    }
                }
            }
        }

        return json_encode($referenceArray);
    }

    public function attachWebsite(Request $request)
    {
        $website = $request->get('website');
        $brandId = $request->get('brand_id');

        if (! empty($website) && ! empty($brandId)) {
            if (is_array($website)) {
                StoreWebsiteBrand::where('brand_id', $brandId)->whereNotIn('store_website_id', $website)->delete();
                foreach ($website as $key => $web) {
                    $sbrands = StoreWebsiteBrand::where('brand_id', $brandId)
                        ->where('store_website_id', $web)
                        ->first();

                    if (! $sbrands) {
                        $sbrands                   = new StoreWebsiteBrand;
                        $sbrands->brand_id         = $brandId;
                        $sbrands->store_website_id = $web;
                        $sbrands->save();
                    }
                }

                return response()->json(['code' => 200, 'data' => [], 'message' => 'Website attached successfully']);
            } else {
                return response()->json(['code' => 500, 'data' => [], 'message' => 'There is no website selected']);
            }
        }

        return response()->json(['code' => 500, 'data' => [], 'message' => 'Oops, something went wrong']);
    }

    public function createRemoteId(Request $request, $id)
    {
        $brand = \App\Brand::where('id', $id)->first();

        if (! empty($brand)) {
            if ($brand->magento_id == '' || $brand->magento_id <= 0) {
                $brand->magento_id = 10000 + $brand->id;
                $brand->save();

                return response()->json(['code' => 200, 'data' => $brand, 'message' => 'Remote id created successfully']);
            } else {
                return response()->json(['code' => 500, 'data' => $brand, 'message' => 'Remote id already exist']);
            }
        }

        return response()->json(['code' => 500, 'data' => $brand, 'message' => 'Brand not found']);
    }

    public function changeSegment(Request $request)
    {
        $id      = $request->get('brand_id', 0);
        $brand   = \App\Brand::where('id', $id)->first();
        $segment = $request->get('segment');

        if ($brand) {
            $brand->brand_segment = $segment;
            $brand->status        = 0;
            $brand->save();

            return response()->json(['code' => 200, 'data' => []]);
        }

        return response()->json(['code' => 500, 'data' => []]);
    }

    public function changeNextStep(Request $request)
    {
        $id        = $request->get('brand_id', 0);
        $brand     = \App\Brand::where('id', $id)->first();
        $next_step = $request->get('next_step');

        if ($brand) {
            $brand->next_step = $next_step;
            $brand->status    = 0;
            $brand->save();

            return response()->json(['code' => 200, 'data' => []]);
        }

        return response()->json(['code' => 500, 'data' => []]);
    }

    public function mergeBrand(Request $request)
    {
        if ($request->from_brand && $request->to_brand) {
            $fromBrand = \App\Brand::find($request->from_brand);
            $toBrand   = \App\Brand::find($request->to_brand);

            if ($fromBrand && $toBrand) {
                $product = \App\Product::where('brand', $fromBrand->id)->get();
                if (! $product->isEmpty()) {
                    foreach ($product as $p) {
                        $p->brand = $toBrand->id;
                        $p->save();
                    }
                }

                // now store the all brands
                $freferenceBrand = explode(',', $fromBrand->references);
                $treferenceBrand = explode(',', $toBrand->references);

                $mReference          = array_merge($freferenceBrand, $treferenceBrand);
                $toBrand->references = implode(',', array_unique($mReference));
                $toBrand->save();
                $fromBrand->delete();

                return response()->json(['code' => 200, 'data' => []]);
            }
        }

        return response()->json(['code' => 500, 'data' => [], 'message' => 'Please check valid brand exist']);
    }

    public function unMergeBrand(Request $request)
    {
        $this->validate($request, [
            'brand_name'    => 'required',
            'from_brand_id' => 'required',
        ]);

        $fromBrand = \App\Brand::find($request->from_brand_id);

        if ($fromBrand) {
            // now store the all brands
            $freferenceBrand = explode(',', $fromBrand->references);

            if (($key = array_search($request->brand_name, $freferenceBrand)) !== false) {
                unset($freferenceBrand[$key]);
            }

            $fromBrand->references = implode(',', $freferenceBrand);
            $fromBrand->save();

            $brand_count = Brand::where('name', '=', $request->brand_name)->count();
            if ($brand_count == 0) {
                $oldBrand = Brand::where('name', '=', $request->brand_name)->onlyTrashed()->latest()->first();
                if ($oldBrand) {
                    $oldBrand->references = null;
                    $oldBrand->deleted_at = null;
                    $oldBrand->save();
                    $scrapedProducts = ScrapedProducts::where('brand_id', $oldBrand->id)->get();
                    foreach ($scrapedProducts as $scrapedProduct) {
                        $product = \App\Product::where('id', $scrapedProduct->product_id)->first();
                        if ($product) {
                            $product->brand = $oldBrand->id;
                            $product->save();
                        }
                    }
                } else {
                    $newBrand                       = new Brand();
                    $newBrand->name                 = $request->brand_name;
                    $newBrand->euro_to_inr          = 0;
                    $newBrand->deduction_percentage = 0;
                    $newBrand->magento_id           = 0;
                    $newBrand->save();
                }
            } else {
                return response()->json(['message' => 'Brand unmerged successfully'], 200);
            }

            return response()->json(['message' => 'Brand unmerged successfully', 'data' => []], 200);
        }

        return response()->json(['code' => 500, 'data' => [], 'message' => 'Please check valid brand exist']);
    }

    public function storeCategorySegmentDiscount(Request $request)
    {
        $ps = \App\StoreWebsiteProductPrice::join('products', 'store_website_product_prices.product_id', 'products.id')
            ->select(
                'store_website_product_prices.id',
                'store_website_product_prices.duty_price',
                'store_website_product_prices.product_id',
                'store_website_product_prices.store_website_id',
                'websites.code'
            )
            ->leftJoin('websites', 'store_website_product_prices.web_store_id', 'websites.id')
            ->leftJoin('category_segment_discounts', 'store_website_product_prices.web_store_id', 'websites.id')
            ->where('category_segment_discounts.brand_id', $request->brand_id)->where('category_segment_discounts.category_segment_id', $request->category_segment_id)
            ->get();
        if ($ps) {
            foreach ($ps as $p) {
                \App\StoreWebsiteProductPrice::where('id', $p->id)->update(['status' => 0]);
            }
        }
        $category_segment = DB::table('category_segment_discounts')->where('brand_id', $request->brand_id)->where('category_segment_id', $request->category_segment_id)->first();
        if ($category_segment) {
            return $catSegment = DB::table('category_segment_discounts')->where('brand_id', $request->brand_id)->where('category_segment_id', $request->category_segment_id)->update([
                'amount'      => $request->amount,
                'amount_type' => 'percentage',
                'updated_at'  => now(),
            ]);
        } else {
            return $catSegment = DB::table('category_segment_discounts')->insert([
                ['brand_id' => $request->brand_id, 'category_segment_id' => $request->category_segment_id, 'amount' => $request->amount, 'amount_type' => 'percentage', 'created_at' => now(), 'updated_at' => now()],
            ]);
        }
    }

    public function activites(Request $request, $id)
    {
        $activites = Activity::where('subject_id', $id)->where('subject_type', 'Brand')->get();

        return view()->make('brand.activities', compact('activites'));
    }

    public function priority(Request $request)
    {
        $brand           = Brand::find($request->id);
        $brand->priority = $request->priority;
        if ($brand->save()) {
            return response()->json(['message' => 'Brand priority updated'], 200);
        }
    }

    public function fetchNewBrands(Request $request)
    {
        $path  = public_path('brands');
        $files = File::allFiles($path);
        if ($request->hasfile('files')) {
            foreach ($request->file('files') as $files) {
                $image_name  = $files->getClientOriginalName();
                $brand_name  = strtoupper(pathinfo($image_name, PATHINFO_FILENAME));
                $brand_found = Brand::where('name', $brand_name)->get();
                if (! $brand_found->isEmpty()) {
                    $media = MediaUploader::fromSource($files)
                        ->toDirectory('brands')
                        ->upload();
                    Brand::where('id', $brand_found[0]->id)->update(['brand_image' => config('env.APP_URL') . '/brands/' . $image_name]);
                }
            }

            return response()->json(['code' => 200, 'success' => 'Brand images updated']);
        } else {
            return response()->json(['code' => 500, 'error' => 'Oops, Please fillup required fields']);
        }
    }

    //START - Purpose : Fetch data - DEVTASK-4278
    public function fetchlogos(Request $request)
    {
        try {
            $brand_data = Brand::leftjoin('brand_with_logos', 'brands.id', 'brand_with_logos.brand_id')
                ->leftjoin('brand_logos', 'brand_with_logos.brand_logo_image_id', 'brand_logos.id')
                ->select('brands.id as brands_id', 'brands.name as brands_name', 'brand_logos.logo_image_name as brand_logos_image')
                ->orderBy('brands.name', 'asc');

            if ($request->brand_name) {
                $search     = '%' . $request->brand_name . '%';
                $brand_data = $brand_data->where('brands.name', 'like', $search);
            }
            $brand_data = $brand_data->paginate(Setting::get('pagination'));
            $data       = Brand::all();

            return view('brand.brand_logo', compact('brand_data', 'data'))->with('i', (request()->input('page', 1) - 1) * 10);
        } catch (Exception $e) {
        }
    }

    public function uploadlogo(Request $request)
    {
        try {
            $files         = $request->file('file');
            $fileNameArray = [];
            foreach ($files as $key => $file) {
                $fileName        = $file->hashName();
                $fileNameArray[] = $fileName;

                $params['logo_image_name'] = $fileName;
                $params['user_id']         = Auth::id();

                BrandLogo::create($params);

                $file->storeAs('brand_logo', $fileName, 's3');
            }

            return response()->json(['code' => 200, 'msg' => 'files uploaded successfully', 'data' => $fileNameArray]);
        } catch (Exception $e) {
        }
    }

    public function get_all_images(Request $request)
    {
        try {
            $brand_data = BrandLogo::leftjoin('brand_with_logos', 'brand_logos.id', 'brand_with_logos.brand_logo_image_id')
                ->select('brand_logos.id as brand_logos_id', 'brand_logos.logo_image_name as brand_logo_image_name', 'brand_with_logos.id as brand_with_logos_id', 'brand_with_logos.brand_logo_image_id as brand_with_logos_brand_logo_image_id', 'brand_with_logos.brand_id as brand_with_logos_brand_id')
                ->where('brand_logos.logo_image_name', 'like', '%' . $request->brand_name . '%')
                ->get();

            return response()->json(['code' => 200, 'brand_logo_image' => $brand_data]);
        } catch (Exception $e) {
        }
    }

    public function set_logo_with_brand(Request $request)
    {
        try {
            $brand_id      = $request->logo_id;
            $logo_image_id = $request->logo_image_id;

            $brand_logo_data = BrandWithLogo::updateOrCreate(
                [
                    'brand_id' => $brand_id,
                ],
                [
                    'brand_id'            => $brand_id,
                    'brand_logo_image_id' => $logo_image_id,
                    'user_id'             => Auth::id(),
                ]
            );

            $brand_logo_image = BrandLogo::where('id', $brand_logo_data->brand_logo_image_id)->select('logo_image_name')->first();

            return response()->json(['code' => 200, 'message' => 'Logo Set Sucessfully for this Brand.', 'brand_logo_image' => $brand_logo_image->logo_image_name]);
        } catch (Exception $e) {
        }
    }

    public function remove_logo(Request $request)
    {
        try {
            $brand_id = $request->brand_id;

            $record = BrandWithLogo::where('brand_id', $brand_id);
            $record->delete();

            return response()->json(['code' => 200, 'message' => 'Logo has been Removed Sucessfully.']);
        } catch (Exception $e) {
        }
    }

    public function assignDefaultValue(Request $request)
    {
        $category_segments = $request->category_segments;
        $brand_segment     = $request->brand_segment;
        $segments          = CategorySegment::where('id', $category_segments)->get();
        $brands            = \App\Brand::where('brand_segment', $brand_segment)->get();
        if (! $brands->isEmpty()) {
            foreach ($brands as $b) {
                if (! $segments->isEmpty()) {
                    foreach ($segments as $segment) {
                        $catDiscount = \App\CategorySegmentDiscount::where('brand_id', $b->id)->where('category_segment_id', $segment->id)->first();
                        if ($catDiscount) {
                            $catDiscount->amount = $request->value;
                            $catDiscount->save();
                        } else {
                            \App\CategorySegmentDiscount::create([
                                'brand_id'            => $b->id,
                                'category_segment_id' => $segment->id,
                                'amount'              => $request->value,
                                'amount_type'         => 'percentage',
                            ]);
                        }

                        $this->update_store_website_product_prices($b->id, $segment->id, $request->value);
                    }
                }
            }
        }

        return response()->json(['code' => 200, 'message' => 'Default segment discount assigned']);
    }

    public function approve(Request $request)
    {
        $ids = $request->ids;
        $ids = explode(',', $ids);
        for ($i = 0; $i < count($ids); $i++) {
            if ($ids[$i] > 0) {
                \App\Brand::where('id', $ids[$i])->update(['status' => 1]);
            }
        }

        return response()->json(['code' => 200, 'message' => 'Approved Successfully']);
    }

    public function update_store_website_product_prices($brand, $segment, $amount)
    {
        $ps = \App\StoreWebsiteProductPrice::select('store_website_product_prices.id', 'store_website_product_prices.segment_discount')
            ->join('products', 'store_website_product_prices.product_id', 'products.id')
            ->join('categories', 'products.category', 'categories.id')
            ->join('category_segments', 'categories.category_segment_id', 'category_segments.id')
            ->where('products.brand', $brand)
            ->where('categories.category_segment_id', $segment)
            ->get();

        if ($ps) {
            foreach ($ps as $p) {
                \App\StoreWebsiteProductPrice::where('id', $p->id)->update(['segment_discount' => $amount, 'status' => 0]);
                $note = 'Segment Discount Changed from ' . $p->segment_discount . ' To ' . $amount;
                \App\StoreWebsiteProductPriceHistory::insert(['sw_product_prices_id' => $p->id, 'updated_by' => Auth::id(), 'notes' => $note, 'created_at' => date('Y-m-d H:i:s')]);
            }
        }
    }

    //END - DEVTASK-4278
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/BugTrackingController.php 
Content: <?php

namespace App\Http\Controllers;

use App\Task;
use App\User;
use Exception;
use App\BugType;
use App\TestCase;
use App\BugStatus;
use App\BugTracker;
use App\BugSeverity;
use App\ChatMessage;
use App\StoreWebsite;
use App\DeveloperTask;
use App\BugEnvironment;
use App\BugUserHistory;
use App\SiteDevelopment;
use App\BugStatusHistory;
use App\GoogleScreencast;
use App\BugTrackerHistory;
use Illuminate\Support\Str;
use Illuminate\Http\Request;
use App\BugSeveritiesHistory;
use App\Models\DataTableColumn;
use App\Github\GithubRepository;
use App\SiteDevelopmentCategory;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Auth;
use App\Jobs\UploadGoogleDriveScreencast;
use Illuminate\Support\Facades\Validator;

class BugTrackingController extends Controller
{
    public function index(Request $request)
    {
        $title = 'Bug Tracking';

        $bugStatuses      = BugStatus::get();
        $bugEnvironments  = BugEnvironment::get();
        $bugSeveritys     = BugSeverity::get();
        $bugTypes         = BugType::get();
        $users            = User::get();
        $filterCategories = SiteDevelopmentCategory::orderBy('title')->pluck('title')->toArray();
        $filterWebsites   = StoreWebsite::orderBy('website')->get();
        $permission_users = User::select('id', 'name', 'email', 'gmail')->whereNotNull('gmail')->get();

        $datatableModel = DataTableColumn::select('column_name')->where('user_id', auth()->user()->id)->where('section_name', 'bug-tracking')->first();

        $dynamicColumnsToShowbt = [];
        if (! empty($datatableModel->column_name)) {
            $hideColumns            = $datatableModel->column_name ?? '';
            $dynamicColumnsToShowbt = json_decode($hideColumns, true);
        }

        $githubRepositories = GithubRepository::all();

        return view(
            'bug-tracking.index', [
                'title'                  => $title,
                'bugTypes'               => $bugTypes,
                'bugEnvironments'        => $bugEnvironments,
                'bugSeveritys'           => $bugSeveritys,
                'bugStatuses'            => $bugStatuses,
                'filterCategories'       => $filterCategories,
                'users'                  => $users,
                'allUsers'               => $users,
                'filterWebsites'         => $filterWebsites,
                'permission_users'       => $permission_users,
                'dynamicColumnsToShowbt' => $dynamicColumnsToShowbt,
                'githubRepositories'     => $githubRepositories,
            ]
        );
    }

    public function records(Request $request)
    {
        if (Auth::user()->hasRole('Admin') || Auth::user()->hasRole('Lead Tester')) {
            if (request('sort') == '1') {
                $records = BugTracker::with(['chatlatest'])->Select('bug_trackers.*')->leftJoin('chat_messages', 'chat_messages.bug_id', '=', 'bug_trackers.id')->where('bug_id', '!=', '')->orderBy('chat_messages.created_at', 'desc');
            } else {
                $records = BugTracker::orderBy('id', 'desc');
            }
        } else {
            if (request('sort') == '1') {
                $records = BugTracker::with(['chatlatest'])->Select('bug_trackers.*')->leftJoin('chat_messages', 'chat_messages.bug_id', '=', 'bug_trackers.id')->where('bug_id', '!=', '')->where(
                    function ($query) {
                        $query->where('assign_to', Auth::user()->id);
                        $query->orWhere('created_by', Auth::user()->id);
                    }
                )->orderBy('chat_messages.created_at', 'desc');
            } else {
                $records = BugTracker::where(
                    function ($query) {
                        $query->where('assign_to', Auth::user()->id);
                        $query->orWhere('created_by', Auth::user()->id);
                    }
                )->orderBy('id', 'desc');
            }
        }

        if ($keyword = request('bug_id')) {
            $multiple_keyword = explode(',', $keyword);

            $records = $records->whereIn('id', $multiple_keyword);
        }

        if ($keyword = request('summary')) {
            $records = $records->where(
                function ($q) use ($keyword) {
                    $q->where('summary', 'LIKE', "%$keyword%");
                }
            );
        }
        if ($keyword = request('bug_type')) {
            $records = $records->WhereIn('bug_type_id', $keyword);
        }
        if ($keyword = request('bug_enviornment')) {
            $records = $records->WhereIn('bug_environment_id', $keyword);
        }
        if ($keyword = request('bug_severity')) {
            $records = $records->WhereIn('bug_severity_id', $keyword);
        }
        if ($keyword = request('created_by')) {
            $records = $records->WhereIn('created_by', $keyword);
        }
        if ($keyword = request('assign_to_user')) {
            $records = $records->WhereIn('assign_to', $keyword);
        }
        if ($keyword = request('bug_status')) {
            $records = $records->WhereIn('bug_status_id', $keyword);
        }
        if ($keyword = request('module_id')) {
            //$records = $records->WhereIn('module_id', 'LIKE', "%$keyword%");
            $records = $records->WhereIn('module_id', $keyword);
        }
        if ($keyword = request('step_to_reproduce')) {
            $records = $records->where(
                function ($q) use ($keyword) {
                    $q->where('step_to_reproduce', 'LIKE', "%$keyword%");
                }
            );
        }
        if ($keyword = request('website')) {
            $records = $records->where(
                function ($q) use ($keyword) {
                    foreach ($keyword as $search_val_web) {
                        $q->orWhereRaw("FIND_IN_SET({$search_val_web}, website)");
                    }
                }
            );
        }
        if ($keyword = request('date')) {
            $records = $records->where(
                function ($q) use ($keyword) {
                    $q->whereDate('created_at', $keyword);
                }
            );
        }

        $records_count = $records->count();
        $records       = $records->take(10)->get();

        $records = $records->map(
            function ($bug) {
                $bug->bug_type_id_val         = $bug->bug_type_id;
                $bug->website_id_val          = $bug->website;
                $bug->bug_type_id             = BugType::where('id', $bug->bug_type_id)->value('name');
                $bug->bug_environment_id      = BugEnvironment::where('id', $bug->bug_environment_id)->value('name');
                $bug->created_by              = User::where('id', $bug->created_by)->value('name');
                $bug->created_at_date         = \Carbon\Carbon::parse($bug->created_at)->format('d-m-Y');
                $bug->bug_color               = BugStatus::where('id', $bug->bug_status_id)->value('bug_color');
                $bug->bug_history             = BugTrackerHistory::where('bug_id', $bug->id)->get();
                $store_websites               = StoreWebsite::whereIn('id', explode(',', $bug->website))->pluck('title')->toArray();
                $bug->website                 = implode(' ,', $store_websites);
                $bug->summary_short           = Str::limit($bug->summary, 10, '..');
                $bug->step_to_reproduce_short = Str::limit($bug->step_to_reproduce, 60, '..');
                $bug->url_short               = Str::limit($bug->url, 5, '..');
                $last_chat_res                = ChatMessage::select('message')->where('bug_id', $bug->id)->orderBy('id', 'desc')->limit(1)->get()->toArray();
                $last_chat_message            = '';
                if (isset($last_chat_res[0]['message']) && $last_chat_res[0]['message'] != '') {
                    $last_chat_message = $last_chat_res[0]['message'];
                }
                $bug->last_chat_message_short = substr($last_chat_message, 0, 28);
                $bug->last_chat_message_long  = $last_chat_message;
                $bug->module_id               = str_replace("'", '', $bug->module_id);
                $bug->module_id               = str_replace('&nbsp;', ' ', $bug->module_id);

                return $bug;
            }
        );

        $datatableModel = DataTableColumn::select('column_name')->where('user_id', auth()->user()->id)->where('section_name', 'bug-tracking')->first();

        $dynamicColumnsToShowbt = [];
        if (! empty($datatableModel->column_name)) {
            $hideColumns            = $datatableModel->column_name ?? '';
            $dynamicColumnsToShowbt = json_decode($hideColumns, true);
        }

        return response()->json(
            [
                'code'                   => 200,
                'data'                   => $records,
                'dynamicColumnsToShowbt' => $dynamicColumnsToShowbt,
                'total'                  => $records_count,
            ]
        );
    }

    public function recordTrackingAjax(Request $request)
    {
        $title = 'Bug Tracking';

        $page = $_REQUEST['page'];

        $page = $page * 10;

        $bugStatuses      = BugStatus::get();
        $bugEnvironments  = BugEnvironment::get();
        $bugSeveritys     = BugSeverity::get();
        $bugTypes         = BugType::get();
        $users            = User::get();
        $filterCategories = SiteDevelopmentCategory::orderBy('title')->pluck('title')->toArray();
        $filterWebsites   = StoreWebsite::orderBy('website')->get();

        if (Auth::user()->hasRole('Admin') || Auth::user()->hasRole('Lead Tester')) {
            if (request('sort') == '1') {
                $records = BugTracker::with(['chatlatest'])->Select('bug_trackers.*')->leftJoin('chat_messages', 'chat_messages.bug_id', '=', 'bug_trackers.id')->where('bug_id', '!=', '')->orderBy('chat_messages.created_at', 'desc')->offset($page)->limit(10);
            } else {
                $records = BugTracker::orderBy('id', 'desc')->offset($page)->limit(10);
            }
        } else {
            if (request('sort') == '1') {
                $records = BugTracker::with(['chatlatest'])->Select('bug_trackers.*')->leftJoin('chat_messages', 'chat_messages.bug_id', '=', 'bug_trackers.id')->where('bug_id', '!=', '')->where(
                    function ($query) {
                        $query->where('assign_to', Auth::user()->id);
                        $query->orWhere('created_by', Auth::user()->id);
                    }
                )->orderBy('chat_messages.created_at', 'desc')->offset($page)->limit(10);
            } else {
                $records = BugTracker::where(
                    function ($query) {
                        $query->where('assign_to', Auth::user()->id);
                        $query->orWhere('created_by', Auth::user()->id);
                    }
                )->orderBy('id', 'desc')->offset($page)->limit(10);
            }
        }

        if ($keyword = request('bug_id')) {
            $records = $records->where('id', $keyword);
        }

        if ($keyword = request('summary')) {
            $records = $records->where(
                function ($q) use ($keyword) {
                    $q->where('summary', 'LIKE', "%$keyword%");
                }
            );
        }
        if ($keyword = request('bug_type')) {
            $records = $records->WhereIn('bug_type_id', $keyword);
        }
        if ($keyword = request('bug_enviornment')) {
            $records = $records->WhereIn('bug_environment_id', $keyword);
        }
        if ($keyword = request('bug_severity')) {
            $records = $records->WhereIn('bug_severity_id', $keyword);
        }
        if ($keyword = request('created_by')) {
            $records = $records->WhereIn('created_by', $keyword);
        }
        if ($keyword = request('assign_to_user')) {
            $records = $records->WhereIn('assign_to', $keyword);
        }
        if ($keyword = request('bug_status')) {
            $records = $records->WhereIn('bug_status_id', $keyword);
        }
        if ($keyword = request('module_id')) {
            // $records = $records->WhereIn('module_id', 'LIKE', "%$keyword%");
            $records = $records->WhereIn('module_id', $keyword);
        }
        if ($keyword = request('step_to_reproduce')) {
            $records = $records->where(
                function ($q) use ($keyword) {
                    $q->where('step_to_reproduce', 'LIKE', "%$keyword%");
                }
            );
        }
        if ($keyword = request('website')) {
            $records = $records->WhereIn('website', $keyword);
        }
        if ($keyword = request('date')) {
            $records = $records->where(
                function ($q) use ($keyword) {
                    $q->whereDate('created_at', $keyword);
                }
            );
        }
        $records = $records->get();

        $records = $records->map(
            function ($bug) {
                $bug->bug_type_id_val         = $bug->bug_type_id;
                $bug->website_id_val          = $bug->website;
                $bug->bug_type_id             = BugType::where('id', $bug->bug_type_id)->value('name');
                $bug->bug_environment_id      = BugEnvironment::where('id', $bug->bug_environment_id)->value('name');
                $bug->created_by              = User::where('id', $bug->created_by)->value('name');
                $bug->created_at_date         = \Carbon\Carbon::parse($bug->created_at)->format('d-m-Y');
                $bug->bug_color               = BugStatus::where('id', $bug->bug_status_id)->value('bug_color');
                $bug->bug_history             = BugTrackerHistory::where('bug_id', $bug->id)->get();
                $bug->website                 = StoreWebsite::where('id', $bug->website)->value('title');
                $bug->summary_short           = Str::limit($bug->summary, 10, '..');
                $bug->step_to_reproduce_short = Str::limit($bug->step_to_reproduce, 60, '..');
                $bug->url_short               = Str::limit($bug->url, 5, '..');
                $last_chat_res                = ChatMessage::select('message')->where('bug_id', $bug->id)->orderBy('id', 'desc')->limit(1)->get()->toArray();
                $last_chat_message            = '';
                if (isset($last_chat_res[0]['message']) && $last_chat_res[0]['message'] != '') {
                    $last_chat_message = $last_chat_res[0]['message'];
                }
                $bug->last_chat_message_short = substr($last_chat_message, 0, 28);
                $bug->last_chat_message_long  = $last_chat_message;
                $bug->module_id               = str_replace("'", '', $bug->module_id);
                $bug->module_id               = str_replace('&nbsp;', ' ', $bug->module_id);

                return $bug;
            }
        );

        $datatableModel = DataTableColumn::select('column_name')->where('user_id', auth()->user()->id)->where('section_name', 'bug-tracking')->first();

        $dynamicColumnsToShowbt = [];
        if (! empty($datatableModel->column_name)) {
            $hideColumns            = $datatableModel->column_name ?? '';
            $dynamicColumnsToShowbt = json_decode($hideColumns, true);
        }

        return view(
            'bug-tracking.index-ajax', [
                'title'                  => $title,
                'bugTypes'               => $bugTypes,
                'bugEnvironments'        => $bugEnvironments,
                'bugSeveritys'           => $bugSeveritys,
                'bugStatuses'            => $bugStatuses,
                'filterCategories'       => $filterCategories,
                'users'                  => $users,
                'allUsers'               => $users,
                'filterWebsites'         => $filterWebsites,
                'data'                   => $records,
                'dynamicColumnsToShowbt' => $dynamicColumnsToShowbt,
                'total'                  => count($records),
            ]
        );
    }

    public function columnVisbilityUpdate(Request $request)
    {
        $userCheck = DataTableColumn::where('user_id', auth()->user()->id)->where('section_name', 'bug-tracking')->first();

        if ($userCheck) {
            $column               = DataTableColumn::find($userCheck->id);
            $column->section_name = 'bug-tracking';
            $column->column_name  = json_encode($request->column_bt);
            $column->save();
        } else {
            $column               = new DataTableColumn();
            $column->section_name = 'bug-tracking';
            $column->column_name  = json_encode($request->column_bt);
            $column->user_id      = auth()->user()->id;
            $column->save();
        }

        return redirect()->back()->with('success', 'column visiblity Added Successfully!');
    }

    public function create()
    {
        $bugStatuses      = BugStatus::get();
        $bugEnvironments  = BugEnvironment::get();
        $bugSeveritys     = BugSeverity::get();
        $bugTypes         = BugType::get();
        $users            = User::get();
        $filterCategories = SiteDevelopmentCategory::orderBy('title')->pluck('title')->toArray();
        $filterWebsites   = StoreWebsite::orderBy('website')->pluck('website')->toArray();

        return view('bug-tracking.create', compact('bugStatuses', 'bugTypes', 'bugEnvironments', 'bugSeveritys', 'users', 'filterCategories', 'filterWebsites'));
    }

    public function edit($id)
    {
        $bugTracker       = BugTracker::findorFail($id);
        $bugStatuses      = BugStatus::get();
        $bugEnvironments  = BugEnvironment::get();
        $bugSeveritys     = BugSeverity::get();
        $bugTypes         = BugType::get();
        $users            = User::get();
        $filterCategories = SiteDevelopmentCategory::orderBy('title')->pluck('title')->toArray();
        $filterWebsites   = StoreWebsite::orderBy('website')->pluck('website')->toArray();
        $testCases        = [];
        if ($bugTracker->module_id) {
            $testCases = TestCase::where('module_id', $bugTracker->module_id)->select('id', 'name')->get();
        }
        if ($bugTracker) {
            return response()->json(
                [
                    'code'             => 200,
                    'data'             => $bugTracker,
                    'bugTypes'         => $bugTypes,
                    'bugEnvironments'  => $bugEnvironments,
                    'bugSeveritys'     => $bugSeveritys,
                    'bugStatuses'      => $bugStatuses,
                    'filterCategories' => $filterCategories,
                    'users'            => $users,
                    'filterWebsites'   => $filterWebsites,
                    'testCases'        => $testCases,
                ]
            );
        }

        return response()->json(
            [
                'code'  => 500,
                'error' => 'Wrong bug tracking id!',
            ]
        );
    }

    public function status(Request $request)
    {
        $status    = $request->all();
        $validator = Validator::make(
            $status, [
                'name' => 'required|string',
            ]
        );
        if ($validator->fails()) {
            return response()->json(
                [
                    'code'  => 500,
                    'error' => 'Name is required',
                ]
            );
        }
        $data    = $request->except('_token');
        $records = BugStatus::create($data);

        return response()->json(
            [
                'code' => 200,
                'data' => $records,
            ]
        );
    }

    public function statuscolor(Request $request)
    {
        $status_color = $request->all();
        $data         = $request->except('_token');
        foreach ($status_color['color_name'] as $key => $value) {
            $bugstatus            = BugStatus::find($key);
            $bugstatus->bug_color = $value;
            $bugstatus->save();
        }

        $records = $bugstatus;

        return response()->json(
            [
                'code' => 200,
                'data' => $records,
            ]
        );
    }

    public function environment(Request $request)
    {
        $environment = $request->all();
        $validator   = Validator::make(
            $environment, [
                'name' => 'required|string',
            ]
        );
        if ($validator->fails()) {
            return response()->json(
                [
                    'code'  => 500,
                    'error' => 'Name is required',
                ]
            );
        }
        $data    = $request->except('_token');
        $records = BugEnvironment::create($data);

        return response()->json(
            [
                'code' => 200,
                'data' => $records,
            ]
        );
    }

    public function type(Request $request)
    {
        $type      = $request->all();
        $validator = Validator::make(
            $type, [
                'name' => 'required|string',
            ]
        );
        if ($validator->fails()) {
            return response()->json(
                [
                    'code'  => 500,
                    'error' => 'Name is required',
                ]
            );
        }
        $data    = $request->except('_token');
        $records = BugType::create($data);

        return response()->json(
            [
                'code' => 200,
                'data' => $records,
            ]
        );
    }

    public function severity(Request $request)
    {
        $severity  = $request->all();
        $validator = Validator::make(
            $severity, [
                'name' => 'required|string',
            ]
        );
        if ($validator->fails()) {
            return response()->json(
                [
                    'code'  => 500,
                    'error' => 'Name is required',
                ]
            );
        }
        $data    = $request->except('_token');
        $records = BugSeverity::create($data);

        return response()->json(
            [
                'code' => 200,
                'data' => $records,
            ]
        );
    }

    public function store(Request $request)
    {
        $bug       = $request->all();
        $validator = Validator::make(
            $bug, [
                'summary'            => 'required|string',
                'step_to_reproduce'  => 'required|string',
                'bug_type_id'        => 'required|string',
                'bug_environment_id' => 'required|string',
                'assign_to'          => 'required|string',
                'bug_severity_id'    => 'required|string',
                'bug_status_id'      => 'required|string',
                'module_id'          => 'required|string',
                'remark'             => 'required|string',
                'website'            => 'required|array',

            ]
        );

        if ($validator->fails()) {
            $outputString = '';
            $messages     = $validator->errors()->getMessages();
            foreach ($messages as $k => $errr) {
                foreach ($errr as $er) {
                    $outputString .= "$k : " . $er . '<br>';
                }
            }

            return redirect()->back()->with('error', $outputString);
        }

        $id = $request->get('id', 0);

        $records = BugTracker::find($id);

        if (! $records) {
            $records = new BugTracker();
        }
        $bug['created_by']        = \Auth::user()->id;
        $bug['summary']           = str_replace("\n", '<br/>', $bug['summary']);
        $bug['step_to_reproduce'] = str_replace("\n", '<br/>', $bug['step_to_reproduce']);
        $bug['expected_result']   = str_replace("\n", '<br/>', $bug['expected_result']);
        $bug['website']           = implode(',', $request->website);
        $records->fill($bug);

        $records->save();
        $params = ChatMessage::create(
            [
                'user_id'         => \Auth::user()->id,
                'bug_id'          => $records->id,
                'sent_to_user_id' => ($records->assign_to != \Auth::user()->id) ? $records->assign_to : \Auth::user()->id,
                'approved'        => '1',
                'status'          => '2',
                'message'         => $records->remark,
            ]
        );
        $bug['bug_id']     = $records->id;
        $bug['updated_by'] = \Auth::user()->id;
        $userHistory       = [
            'bug_id'     => $records->id,
            'new_user'   => $request->assign_to,
            'updated_by' => \Auth::user()->id,
        ];
        $statusHistory = [
            'bug_id'     => $records->id,
            'new_status' => $request->assign_to,
            'updated_by' => \Auth::user()->id,
        ];

        BugUserHistory::create($userHistory);
        BugStatusHistory::create($statusHistory);

        $severity_his = [
            'assign_to'   => $request->assign_to,
            'severity_id' => $request->bug_severity_id,
            'bug_id'      => $records->id,
            'updated_by'  => \Auth::user()->id,
        ];
        BugSeveritiesHistory::create($severity_his);

        $bugTrackerHistory = BugTrackerHistory::create($bug);

        return redirect()->back();
    }

    public function destroy(BugTracker $bugTracker, Request $request)
    {
        try {
            $bug               = BugTracker::where('id', '=', $request->id)->delete();
            $bugTrackerHistory = BugTrackerHistory::where('bug_id', '=', $request->id)->delete();

            return response()->json(
                [
                    'code'    => 200,
                    'data'    => $bug,
                    'message' => 'Deleted successfully!!!',
                ]
            );
        } catch (Exception $e) {
            $msg = $e->getMessage();
            \Log::error('Bug Tracker Request Delete Error => ' . json_decode($e) . ' #id #' . $request->id ?? '');
            $this->BugErrorLog($request->id ?? '', 'Bug Tracker Request Delete Error', $msg, 'bug_tracker');

            return response()->json(
                [
                    'code'    => 500,
                    'message' => $msg,
                ]
            );
        }
    }

    public function update(Request $request)
    {
        $this->validate(
            $request, [
                'summary'            => 'required|string',
                'step_to_reproduce'  => 'required|string',
                'bug_type_id'        => 'required|string',
                'bug_environment_id' => 'required|string',
                'assign_to'          => 'required|string',
                'bug_severity_id'    => 'required|string',
                'bug_status_id'      => 'required|string',
                'module_id'          => 'required|string',
                'remark'             => 'required|string',
                'website'            => 'required|array',

            ]
        );

        $data = $request->except('_token', 'id');
        $bug  = BugTracker::where('id', $request->id)->first();

        $old_severity_id = $bug->bug_severity_id;

        $data['created_by']          = \Auth::user()->id;
        $bug['updated_by']           = \Auth::user()->id;
        $userHistory['old_user']     = $bug->assign_to;
        $statusHistory['old_status'] = $bug->bug_status_id;

        $params = ChatMessage::create(
            [
                'user_id'         => \Auth::user()->id,
                'bug_id'          => $bug->id,
                'sent_to_user_id' => ($request->assign_to != \Auth::user()->id) ? $request->assign_to : \Auth::user()->id,
                'approved'        => '1',
                'status'          => '2',
                'message'         => $request->remark,
            ]
        );
        $data['summary']           = str_replace("\n", '<br/>', $request->summary);
        $data['step_to_reproduce'] = str_replace("\n", '<br/>', $request->step_to_reproduce);

        $data['expected_result'] = str_replace("\n", '<br/>', $data['expected_result']);
        $data['website']         = implode(',', $request->website);

        if ($bug->test_case_id) {
            //
        }

        if ($bug->bug_status_id == '7') {
            $data['assign_to'] = $bug->created_by;
        }

        $bug->update($data);
        $data['bug_id'] = $request->id;
        BugTrackerHistory::create($data);
        $userHistory = [
            'bug_id'     => $request->id,
            'new_user'   => $request->assign_to,
            'updated_by' => \Auth::user()->id,
        ];
        $statusHistory = [
            'bug_id'     => $request->id,
            'new_status' => $request->bug_status_id,
            'updated_by' => \Auth::user()->id,
        ];
        BugUserHistory::create($userHistory);
        BugStatusHistory::create($statusHistory);

        $severity_his = [
            'assign_to'       => $request->assign_to,
            'old_severity_id' => $old_severity_id,
            'severity_id'     => $request->bug_severity_id,
            'bug_id'          => $request->id,
            'updated_by'      => \Auth::user()->id,
        ];
        BugSeveritiesHistory::create($severity_his);

        if ($request->bug_status_id == 3 || $request->bug_status_id == 7) {
            $Task = Task::where('task_bug_ids', $request->id)->first();
            if (count((array) $Task) > 0) {
                if ($request->bug_status_id == 3) {
                    $Task->status = 22;
                } elseif ($request->bug_status_id == 7) {
                    $Task->status = 15;
                }
                $Task->save();
            }
        }

        return redirect()->route('bug-tracking.index')->with('success', 'You have successfully updated a Bug Tracker!');
    }

    public function bugHistory($id)
    {
        $bugHistory = BugTrackerHistory::where('bug_id', $id)->get();
        $bugHistory = $bugHistory->map(
            function ($bug) {
                $bug_type_id = BugType::where('id', $bug->bug_type_id)->value('name');
                if (isset($bug_type_id) && $bug_type_id == 'null') {
                    $bug_type_id = '-';
                }
                $bug_environment_id = BugEnvironment::where('id', $bug->bug_environment_id)->value('name') . ' ' . $bug->bug_environment_ver;
                if (! isset($bug_environment_id)) {
                    $bug_environment_id = '-';
                }
                $assign_to = User::where('id', $bug->assign_to)->value('name');
                if (! isset($assign_to)) {
                    $assign_to = '-';
                }
                $updated_by = User::where('id', $bug->updated_by)->value('name');
                if (! isset($updated_by)) {
                    $updated_by = '-';
                }
                $bug_severity_id = BugSeverity::where('id', $bug->bug_severity_id)->value('name');
                if (! isset($bug_severity_id)) {
                    $bug_severity_id = '-';
                }
                $bug_status_id = BugStatus::where('id', $bug->bug_status_id)->value('name');
                if (! isset($bug_status_id)) {
                    $bug_status_id = '-';
                }
                $bug_history = BugTrackerHistory::where('bug_id', $bug->id)->get();
                if (! isset($bug_history)) {
                    $bug_history = '-';
                }

                $bug->bug_type_id        = $bug_type_id;
                $bug->bug_environment_id = $bug_environment_id;
                $bug->assign_to          = $assign_to;
                $bug->updated_by         = $updated_by;
                $bug->bug_severity_id    = $bug_severity_id;
                $bug->bug_status_id      = $bug_status_id;
                $bug->bug_history        = $bug_history;

                return $bug;
            }
        );

        return response()->json(
            [
                'code' => 200,
                'data' => $bugHistory,
            ]
        );
    }

    public function userHistory($id)
    {
        $bugUsers = BugUserHistory::where('bug_id', $id)->orderBy('id', 'desc')->get();
        $bugUsers = $bugUsers->map(
            function ($bug) {
                $bug->new_user        = User::where('id', $bug->new_user)->value('name');
                $bug->old_user        = User::where('id', $bug->old_user)->value('name');
                $bug->updated_by      = User::where('id', $bug->updated_by)->value('name');
                $bug->created_at_date = $bug->created_at;

                return $bug;
            }
        );

        return response()->json(
            [
                'code' => 200,
                'data' => $bugUsers,
            ]
        );
    }

    public function statusHistory($id)
    {
        $bugStatuses = BugStatusHistory::where('bug_id', $id)->orderBy('id', 'desc')->get();

        $bugStatuses = $bugStatuses->map(
            function ($bug) {
                $bug->new_status = BugStatus::where('id', $bug->new_status)->value('name');
                $bug->old_status = BugStatus::where('id', $bug->old_status)->value('name');
                $bug->updated_by = User::where('id', $bug->updated_by)->value('name');

                return $bug;
            }
        );

        return response()->json(
            [
                'code' => 200,
                'data' => $bugStatuses,
            ]
        );
    }

    public function severityHistory($id)
    {
        $bugStatuses = BugSeveritiesHistory::where('bug_id', $id)->orderBy('id', 'desc')->get();

        $bugStatuses = $bugStatuses->map(
            function ($bug) {
                $bug->old_severity_id = BugSeverity::where('id', $bug->old_severity_id)->value('name');
                $bug->assign_to       = User::where('id', $bug->assign_to)->value('name');
                $bug->severity_id     = BugSeverity::where('id', $bug->severity_id)->value('name');
                $bug->updated_by      = User::where('id', $bug->updated_by)->value('name');

                return $bug;
            }
        );

        return response()->json(
            [
                'code' => 200,
                'data' => $bugStatuses,
            ]
        );
    }

    public function changeBugType(Request $request)
    {
        $bugTracker = BugTracker::where('id', $request->id)->first();

        $bugTracker->bug_type_id = $request->bug_type;
        $bugTracker->save();

        $data = [
            'bug_type_id' => $bugTracker->bug_type_id,
            'bug_id'      => $bugTracker->id,
            'updated_by'  => \Auth::user()->id,
        ];

        BugTrackerHistory::create($data);

        return response()->json(
            [
                'code' => 200,
                'data' => $data,
            ]
        );
    }

    public function assignUser(Request $request)
    {
        $bugTracker = BugTracker::where('id', $request->id)->first();
        $record     = [
            'old_user'   => $bugTracker->assign_to,
            'new_user'   => $request->user_id,
            'bug_id'     => $bugTracker->id,
            'updated_by' => \Auth::user()->id,
        ];
        $bugTracker->assign_to = $request->user_id;
        $bugTracker->save();
        $data = [
            'assign_to'  => $bugTracker->assign_to,
            'bug_id'     => $bugTracker->id,
            'updated_by' => \Auth::user()->id,
        ];

        DB::table('tasks')->where('task_bug_ids', $request->id)->update(['assign_to' => $request->user_id]);

        BugTrackerHistory::create($data);
        BugUserHistory::create($record);

        return response()->json(
            [
                'code' => 200,
                'data' => $data,
            ]
        );
    }

    public function assignUserBulk(Request $request)
    {
        $data = [];
        if (count($request->id) > 0) {
            for ($i = 0; $i < count($request->id); $i++) {
                $chosen_bug_id = $request->id[$i];
                $bugTracker    = BugTracker::where('id', $chosen_bug_id)->first();
                $record        = [
                    'old_user'   => $bugTracker->assign_to,
                    'new_user'   => $request->user_id,
                    'bug_id'     => $bugTracker->id,
                    'updated_by' => \Auth::user()->id,
                ];
                $bugTracker->assign_to = $request->user_id;
                $bugTracker->save();

                Task::where('task_bug_ids', $chosen_bug_id)
                    ->update(['assign_to' => $request->user_id]);

                $data = [
                    'assign_to'  => $bugTracker->assign_to,
                    'bug_id'     => $bugTracker->id,
                    'updated_by' => \Auth::user()->id,
                ];
                BugTrackerHistory::create($data);
                BugUserHistory::create($record);
            }
        }

        return response()->json(
            [
                'code' => 200,
                'data' => $data,
            ]
        );
    }

    public function severityUser(Request $request)
    {
        $bugTracker                  = BugTracker::where('id', $request->id)->first();
        $old_severity_id             = $bugTracker->bug_severity_id;
        $bugTracker->bug_severity_id = $request->severity_id;
        if ($request->status_id == 8) {
            $created_by            = $bugTracker->created_by;
            $bugTracker->assign_to = $created_by;
        }

        $bugTracker->save();
        $data = [
            'bug_severity_id' => $bugTracker->bug_severity_id,
            'bug_id'          => $bugTracker->id,
            'updated_by'      => \Auth::user()->id,
        ];
        BugTrackerHistory::create($data);

        $record = [
            'assign_to'       => $bugTracker->assign_to,
            'old_severity_id' => $old_severity_id,
            'severity_id'     => $request->severity_id,
            'bug_id'          => $bugTracker->id,
            'updated_by'      => \Auth::user()->id,
        ];
        BugSeveritiesHistory::create($record);

        return response()->json(
            [
                'code' => 200,
                'data' => $data,
            ]
        );
    }

    public function severityUserBulk(Request $request)
    {
        if (count($request->id) > 0) {
            for ($i = 0; $i < count($request->id); $i++) {
                $chosen_bug_id               = $request->id[$i];
                $bugTracker                  = BugTracker::where('id', $chosen_bug_id)->first();
                $old_severity_id             = $bugTracker->bug_severity_id;
                $bugTracker->bug_severity_id = $request->severity_id;
                if ($request->status_id == 8) {
                    $created_by            = $bugTracker->created_by;
                    $bugTracker->assign_to = $created_by;
                }

                $bugTracker->save();
                $data = [
                    'bug_severity_id' => $bugTracker->bug_severity_id,
                    'bug_id'          => $bugTracker->id,
                    'updated_by'      => \Auth::user()->id,
                ];
                BugTrackerHistory::create($data);

                $record = [
                    'assign_to'       => $bugTracker->assign_to,
                    'old_severity_id' => $old_severity_id,
                    'severity_id'     => $request->severity_id,
                    'bug_id'          => $bugTracker->id,
                    'updated_by'      => \Auth::user()->id,
                ];
                BugSeveritiesHistory::create($record);
            }
        }

        return response()->json(
            [
                'code' => 200,
                'data' => $data,
            ]
        );
    }

    public function statusUser(Request $request)
    {
        $bugTracker = BugTracker::where('id', $request->id)->first();
        $record     = [
            'old_status' => $bugTracker->bug_status_id,
            'new_status' => $request->status_id,
            'bug_id'     => $bugTracker->id,
            'updated_by' => \Auth::user()->id,
        ];
        if ($request->status_id == 7) {
            $prev_created_by       = $bugTracker->created_by;
            $bugTracker->assign_to = $prev_created_by;
        }

        $bugTracker->bug_status_id = $request->status_id;
        $bugTracker->save();

        if ($request->status_id == 3 || $request->status_id == 7) {
            $Task = Task::where('task_bug_ids', $request->id)->first();
            if (count((array) $Task) > 0) {
                if ($request->status_id == 3) {
                    $Task->status = 22;
                } elseif ($request->status_id == 7) {
                    $Task->status = 15;
                }
                $Task->save();
            }
        }

        $data = [
            'bug_status_id' => $bugTracker->bug_status_id,
            'bug_id'        => $bugTracker->id,
            'updated_by'    => \Auth::user()->id,
        ];
        BugTrackerHistory::create($data);
        BugStatusHistory::create($record);

        return response()->json(
            [
                'code' => 200,
                'data' => $data,
            ]
        );
    }

    public function statusUserBulk(Request $request)
    {
        if (count($request->id) > 0) {
            for ($i = 0; $i < count($request->id); $i++) {
                $chosen_bug_id = $request->id[$i];
                $bugTracker    = BugTracker::where('id', $chosen_bug_id)->first();
                $record        = [
                    'old_status' => $bugTracker->bug_status_id,
                    'new_status' => $request->status_id,
                    'bug_id'     => $bugTracker->id,
                    'updated_by' => \Auth::user()->id,
                ];
                if ($request->status_id == 7) {
                    $prev_created_by       = $bugTracker->created_by;
                    $bugTracker->assign_to = $prev_created_by;
                }

                $bugTracker->bug_status_id = $request->status_id;
                $bugTracker->save();

                if ($request->status_id == 3 || $request->status_id == 7) {
                    $Task = Task::where('task_bug_ids', $chosen_bug_id)->first();
                    if (count((array) $Task) > 0) {
                        if ($request->status_id == 3) {
                            $Task->status = 22;
                        } elseif ($request->status_id == 7) {
                            $Task->status = 15;
                        }
                        $Task->save();
                    }
                }

                $data = [
                    'bug_status_id' => $bugTracker->bug_status_id,
                    'bug_id'        => $bugTracker->id,
                    'updated_by'    => \Auth::user()->id,
                ];
                BugTrackerHistory::create($data);
                BugStatusHistory::create($record);
            }
        }

        return response()->json(
            [
                'code' => 200,
                'data' => $data,
            ]
        );
    }

    public function sendMessage(Request $request)
    {
        $id   = $request->id;
        $user = Auth::user();
        $task = BugTracker::find($request->id);

        $taskdata = $request->message;

        $userid = Auth::id();

        if ($user) {
            $params = ChatMessage::create(
                [
                    'user_id'         => $userid,
                    'erp_user'        => $userid,
                    'bug_id'          => $task->id,
                    'sent_to_user_id' => ($task->assign_to != $user->id) ? $task->assign_to : $task->created_by,
                    'sent_to_user_id' => ($task->assign_to != $user->id) ? $task->assign_to : $task->created_by,
                    'approved'        => '1',
                    'status'          => '2',
                    'message'         => $taskdata,
                ]
            );

            if ($params) {
                return response()->json(
                    [
                        'code'    => 200,
                        'message' => 'Successfully Send File',
                    ]
                );
            }

            return response()->json(
                [
                    'message' => 'Something Was Wrong',
                ], 500
            );

            return response()->json(['message' => 'Sorry required fields is missing like id , userid'], 500);
        }
    }

    public function communicationData($id)
    {
        $messages = ChatMessage::where('bug_id', $id)->orderBy('id', 'desc')->get();
        $messages = $messages->map(
            function ($message) {
                $message->user_name = 'From ' . User::where('id', $message->user_id)->value('name') . ' to ' . User::where('id', $message->send_to_user_id)->value('name') . ' ' . \Carbon\Carbon::parse($message->created_at)->format('Y-m-d H:i A');

                return $message;
            }
        );

        return response()->json(
            [
                'code' => 200,
                'data' => $messages,
            ]
        );
    }

    public function checkbug(Request $request)
    {
        $bug_type_id = $request->bug_type_id;
        $bug_id      = $request->bug_id;
        $module_id   = $request->module_id;
        $website_id  = $request->website_id;
        $bug_tracker = \DB::table('tasks')->select('*')->whereRaw("find_in_set($bug_id,task_bug_ids)")->get();

        return response()->json(
            [
                'code' => 200,
                'data' => count($bug_tracker),
            ]
        );
    }

    public function getWebsiteList(Request $request)
    {
        $bug_type_id = $request->bug_type_id;
        $module_id   = $request->module_id;
        $website_id  = $request->website_id;
        $bug_tracker = BugTracker::where('bug_type_id', $bug_type_id)->where('module_id', $module_id)->whereIn(
            'bug_status_id', [
                '1',
                '2',
            ]
        )->get();
        $bug_list          = $bug_tracker->toArray();
        $bug_tracker_users = BugTracker::select('assign_to')->where('bug_type_id', $bug_type_id)->where('module_id', $module_id)->where('website', $website_id)->whereIn(
            'bug_status_id', [
                '3',
                '4',
                '5',
                '7',
                '8',
                '9',
                '10',
            ]
        )->groupBy('assign_to')->orderBy('id', 'desc')->limit(3)->get();

        $users_worked_array = [];
        if (count($bug_tracker_users) > 0) {
            for ($k = 0; $k < count($bug_tracker_users); $k++) {
                $users_worked_array[] = $bug_tracker_users[$k]->userassign->name;
            }
        }

        $bug_ids     = [];
        $website_ids = [];

        $bugs_html = '<table cellpadding="2" cellspacing="2" border="1" style="width:100%;font-size: 12px;"><tr><td style="text-align:center"><b>Action</b></td><td  style="text-align:center"><b>Bug Id</b></td  style="text-align:center"><td  style="text-align:center;"><b>Summary</b></td><td  style="text-align:center;"><b>Steps to Rep.</b></td><td  style="text-align:center;"><b>Screen / Video</b></td><td  style="text-align:center;"><b>Assign To</b></td><td  style="text-align:center;"><b>Module</b></td><td  style="text-align:center;"><b>Website</b></td></tr>';

        if (count($bug_list) > 0) {
            for ($i = 0; $i < count($bug_list); $i++) {
                $bug_ids[]     = $bug_list[$i]['id'];
                $website_ids[] = $bug_list[$i]['website'];
                $bug_id        = $bug_list[$i]['id'];
                $assign_to     = $bug_list[$i]['assign_to'];

                $summary     = Str::limit($bug_list[$i]['summary'], 20, '..');
                $summary_txt = str_replace("'", '', $bug_list[$i]['summary']);

                $module_id     = Str::limit($bug_list[$i]['module_id'], 20, '..');
                $module_id_txt = str_replace("'", '', $bug_list[$i]['module_id']);
                $module_id_txt = htmlentities($module_id_txt);

                $step_to_reproduce     = Str::limit($bug_list[$i]['step_to_reproduce'], 20, '..');
                $step_to_reproduce_txt = htmlentities($bug_list[$i]['step_to_reproduce']);
                $url                   = Str::limit($bug_list[$i]['url'], 15, '..');
                $userData              = User::where('id', $assign_to)->get()->toArray();
                $website               = StoreWebsite::where('id', $bug_list[$i]['website'])->value('title');

                $name = '-';
                if (count($userData) > 0 && isset($userData[0]['name'])) {
                    $name = $userData[0]['name'];
                }

                $bugs_html .= '<tr><td  style="text-align:center"><input style="height:13px;" type="checkbox" class="cls-checkbox-bugsids" name="chkBugId[]" value="' . $bug_id . '" id="name="chkBugId' . $bug_id . '" data-summary="' . htmlentities($summary_txt) . '"  /></td><td  style="text-align:center">' . $bug_id . '</td><td title="' . $summary_txt . '" data-toggle="tooltip">&nbsp;' . $summary . '</td><td title="' . $step_to_reproduce_txt . '" data-toggle="tooltip">&nbsp;' . $step_to_reproduce . '</td><td>&nbsp;' . $url . ' <button type="button" class="btn btn-copy-url btn-sm" data-id="' . $bug_list[$i]['url'] . '">
                <i class="fa fa-clone" aria-hidden="true"></i></button></td><td>&nbsp;' . $name . '</td><td  title="' . $module_id_txt . '" data-toggle="tooltip">&nbsp;' . $module_id . '</td><td  title="' . $website . '" data-toggle="tooltip">&nbsp;' . $website . '</td></tr>';
            }
        }

        $bugs_html .= '</table>';

        $website_ids_val = implode(',', $website_ids);

        $websiteData = StoreWebsite::whereIn('id', $website_ids)->get();

        $websiteCheckbox = '';
        foreach ($websiteData as $website) {
            $websiteCheckbox .= '<div class="col-4 py-1"><div style="float: left;height: auto;margin-right: 6px;"><input style="height:13px;" type="checkbox" name="website_name[' . $website->id . ']" value="' . $website->title . ' - ' . $request->cat_title . '"/></div> <div class=""  style="float: left;height: auto;margin-right: 6px;overflow-wrap: anywhere;width: 80%;">' . $website->website . '</div></div>';
        }

        $data['websiteCheckbox'] = $websiteCheckbox;
        $data['bug_ids']         = implode(',', $bug_ids);
        $data['bug_html']        = $bugs_html;

        $bugs_users_last = '-';
        if (count($users_worked_array) > 0) {
            $bugs_users_last = implode(', ', $users_worked_array);
        }
        $data['bug_users_worked'] = $bugs_users_last;

        return response()->json(
            [
                'code'    => 200,
                'data'    => $data,
                'message' => 'List of website!',
            ]
        );
    }

    public function taskCount($bug_id)
    {
        $model_site_development = SiteDevelopment::where('bug_id', $bug_id)->get()->toArray();

        $site_developement_id = 0;
        if (count($model_site_development) > 0) {
            $site_developement_id = $model_site_development[0]['id'];
        }

        $taskStatistics['Devtask'] = DeveloperTask::where('site_developement_id', $site_developement_id)->where('status', '!=', 'Done')->select();

        $query          = DeveloperTask::join('users', 'users.id', 'developer_tasks.assigned_to')->where('site_developement_id', $site_developement_id)->where('status', '!=', 'Done')->select('developer_tasks.id', 'developer_tasks.task as subject', 'developer_tasks.status', 'users.name as assigned_to_name');
        $query          = $query->addSelect(DB::raw("'Devtask' as task_type,'developer_task' as message_type"));
        $taskStatistics = $query->get();
        $othertask      = Task::where('site_developement_id', $site_developement_id)->whereNull('is_completed')->select();
        $query1         = Task::join('users', 'users.id', 'tasks.assign_to')->where(function ($qry) use ($site_developement_id, $bug_id) {
            if ($site_developement_id != null && $site_developement_id != '' && $site_developement_id != 0) {
                if ($bug_id != null && $bug_id != '') {
                    $qry->whereRaw('FIND_IN_SET(?,task_bug_ids)', $bug_id)->orwhere('site_developement_id', $site_developement_id);
                } else {
                    $qry->where('site_developement_id', $site_developement_id);
                }
            } elseif ($bug_id != null && $bug_id != '') {
                $qry->whereRaw('FIND_IN_SET(?,task_bug_ids)', $bug_id);
            } else {
                $qry->where('site_developement_id', $site_developement_id);
            }
        })->whereNull('is_completed')->select('tasks.id', 'tasks.task_subject as subject', 'tasks.assign_status', 'users.name as assigned_to_name');
        $query1              = $query1->addSelect(DB::raw("'Othertask' as task_type,'task' as message_type"));
        $othertaskStatistics = $query1->get();
        $merged              = $othertaskStatistics->merge($taskStatistics);

        return response()->json(
            [
                'code'           => 200,
                'taskStatistics' => $merged,
            ]
        );
    }

    public function website(Request $request)
    {
        $title = 'Bug Tracking Summary';

        $bug_tracker = DB::select(DB::raw("SELECT bug_trackers.website as website_id, store_websites.website as website, store_websites.title as title, count(bug_trackers.id) as bug_count, GROUP_CONCAT(concat(bug_trackers.id,'-',bug_trackers.bug_severity_id)) as bug_ids, GROUP_CONCAT(concat(bug_trackers.id,'-',bug_trackers.bug_status_id)) as bug_status_ids  FROM bug_trackers left join store_websites on bug_trackers.website = store_websites.id where bug_trackers.website>0  group by bug_trackers.website"));

        $arr = json_decode(json_encode($bug_tracker), true);

        if (count($arr) > 0) {
            for ($i = 0; $i < count($arr); $i++) {
                $bug_ids        = $arr[$i]['bug_ids'];
                $bug_ids_arrays = explode(',', $bug_ids);

                $bug_check_status_ids    = $arr[$i]['bug_status_ids'];
                $bug_check_status_arrays = explode(',', $bug_check_status_ids);

                $critical_array = [];
                $high_array     = [];
                $medium_array   = [];
                $low_array      = [];

                if (count($bug_ids_arrays) > 0) {
                    for ($j = 0; $j < count($bug_ids_arrays); $j++) {
                        $single_bug_array = explode('-', $bug_ids_arrays[$j]);

                        $single_bug_status_array = explode('-', $bug_check_status_arrays[$j]);

                        if (count($single_bug_array) == 2 && $single_bug_status_array[1] != '3') {
                            if ($single_bug_array[1] == '1') {
                                $critical_array[] = $single_bug_array[0];
                            } elseif ($single_bug_array[1] == '2') {
                                $high_array[] = $single_bug_array[0];
                            } elseif ($single_bug_array[1] == '3') {
                                $medium_array[] = $single_bug_array[0];
                            } elseif ($single_bug_array[1] == '4') {
                                $low_array[] = $single_bug_array[0];
                            }
                        }
                    }
                }

                $arr[$i]['critical'] = count($critical_array);
                $arr[$i]['high']     = count($high_array);
                $arr[$i]['medium']   = count($medium_array);
                $arr[$i]['low']      = count($low_array);

                // Status of bug ids starts

                $bug_status_ids        = $arr[$i]['bug_status_ids'];
                $bug_status_ids_arrays = explode(',', $bug_status_ids);

                $new_status_array             = [];
                $open_status_array            = [];
                $close_status_array           = [];
                $intest_status_array          = [];
                $bug_status_array             = [];
                $inprogress_status_array      = [];
                $completed_status_array       = [];
                $discussing_status_array      = [];
                $deployed_status_array        = [];
                $discusswithlead_status_array = [];
                $unresolved_status_array      = [];

                $arr[$i]['bug_ids'];

                if (count($bug_status_ids_arrays) > 0) {
                    for ($j = 0; $j < count($bug_status_ids_arrays); $j++) {
                        $single_bug_array = explode('-', $bug_status_ids_arrays[$j]);

                        if (count($single_bug_array) == 2) {
                            if ($single_bug_array[1] == '1') {
                                $new_status_array[] = $single_bug_array[0];
                            } elseif ($single_bug_array[1] == '2') {
                                $open_status_array[] = $single_bug_array[0];
                            } elseif ($single_bug_array[1] == '3') {
                                $close_status_array[] = $single_bug_array[0];
                            } elseif ($single_bug_array[1] == '4') {
                                $intest_status_array[] = $single_bug_array[0];
                            } elseif ($single_bug_array[1] == '5') {
                                $bug_status_array[] = $single_bug_array[0];
                            } elseif ($single_bug_array[1] == '6' || $single_bug_array[1] == '11') {
                                $inprogress_status_array[] = $single_bug_array[0];
                            } elseif ($single_bug_array[1] == '7') {
                                $completed_status_array[] = $single_bug_array[0];
                            } elseif ($single_bug_array[1] == '8') {
                                $discussing_status_array[] = $single_bug_array[0];
                            } elseif ($single_bug_array[1] == '9') {
                                $deployed_status_array[] = $single_bug_array[0];
                            } elseif ($single_bug_array[1] == '10') {
                                $discusswithlead_status_array[] = $single_bug_array[0];
                            } elseif ($single_bug_array[1] == '12') {
                                $unresolved_status_array[] = $single_bug_array[0];
                            }
                        }
                    }
                }

                $arr_status[$i]['new']             = count($new_status_array);
                $arr_status[$i]['open']            = count($open_status_array);
                $arr_status[$i]['close']           = count($close_status_array);
                $arr_status[$i]['intest']          = count($intest_status_array);
                $arr_status[$i]['bug']             = count($bug_status_array);
                $arr_status[$i]['inprogress']      = count($inprogress_status_array);
                $arr_status[$i]['completed']       = count($completed_status_array);
                $arr_status[$i]['discussing']      = count($discussing_status_array);
                $arr_status[$i]['deployed']        = count($deployed_status_array);
                $arr_status[$i]['discusswithlead'] = count($discusswithlead_status_array);
                $arr_status[$i]['unresolved']      = count($unresolved_status_array);

                // Status of bug ids ends
            }
        }

        return view(
            'bug-tracking.website', [
                'title'              => $title,
                'bug_tracker'        => $arr,
                'bug_status_tracker' => $arr_status,

            ]
        );
    }

    public function websiteHistory(Request $request)
    {
        $serverity_id = 0;
        $bug_id       = 0;
        $statusid     = 0;
        if ($request->servid) {
            $serverity_id = $request->servid;
        }
        if ($request->statusid) {
            $statusid = $request->statusid;
        }
        if ($request->type == 'severity') {
            $type = 'severity';
        } else {
            $type = 'status';
        }
        if ($request->id) {
            $bug_id = $request->id;
        }

        if ($type == 'severity') {
            $bugTracker = BugTracker::where('website', $bug_id)->where('bug_severity_id', $serverity_id)->where('bug_status_id', '!=', 3)->orderBy('id', 'desc')->get();
        } else {
            $bugTracker = BugTracker::where('website', $bug_id)->where('bug_status_id', $statusid)->orderBy('id', 'desc')->get();
        }

        $bugTracker = $bugTracker->map(
            function ($bug) {
                $bug->bug_type_id     = BugType::where('id', $bug->bug_type_id)->value('name');
                $bug->created_at_date = \Carbon\Carbon::parse($bug->created_at)->format('d-m-Y');
                $bug->summary_short   = Str::limit($bug->summary, 40, '..');
                $bug->bug_status_id   = BugStatus::where('id', $bug->bug_status_id)->value('name');
                $bug->assign_to       = User::where('id', $bug->assign_to)->value('name');
                $bug->bug_severity_id = BugSeverity::where('id', $bug->bug_severity_id)->value('name');

                return $bug;
            }
        );

        return response()->json(
            [
                'code' => 200,
                'data' => $bugTracker,
            ]
        );
    }

    public function changeModuleType(Request $request)
    {
        $bugTracker = BugTracker::where('id', $request->id)->first();

        $bugTracker->module_id = $request->module_id;
        $bugTracker->save();

        $data = [
            'module_id'  => $bugTracker->module_id,
            'bug_id'     => $bugTracker->id,
            'updated_by' => \Auth::user()->id,
        ];

        BugTrackerHistory::create($data);

        return response()->json(
            [
                'code' => 200,
                'data' => $data,
            ]
        );
    }

    /**
     * Upload a bug file to google drive
     */
    public function uploadFile(Request $request)
    {
        $request->validate([
            'file'               => 'required',
            'file_creation_date' => 'required',
            'remarks'            => 'sometimes',
            'bug_id'             => 'required',
            'file_read'          => 'sometimes',
            'file_write'         => 'sometimes',
        ]);

        $data = $request->all();
        try {
            foreach ($data['file'] as $file) {
                DB::transaction(function () use ($file, $data) {
                    $googleScreencast            = new GoogleScreencast();
                    $googleScreencast->file_name = $file->getClientOriginalName();
                    $googleScreencast->extension = $file->extension();
                    $googleScreencast->user_id   = Auth::id();

                    $googleScreencast->read               = '';
                    $googleScreencast->write              = '';
                    $googleScreencast->bug_id             = $data['bug_id'];
                    $googleScreencast->remarks            = $data['remarks'];
                    $googleScreencast->file_creation_date = $data['file_creation_date'];
                    $googleScreencast->save();
                    UploadGoogleDriveScreencast::dispatchNow($googleScreencast, $file, 'anyone');
                });
            }

            return back()->with('success', 'File is Uploaded to Google Drive.');
        } catch (Exception $e) {
            return back()->with('error', 'Something went wrong. Please try again');
        }
    }

    /**
     * get the list of bugs file
     */
    public function getBugFilesList(Request $request)
    {
        try {
            $result = [];
            if (isset($request->bug_id)) {
                $result = GoogleScreencast::where('bug_id', $request->bug_id)->orderBy('id', 'desc')->get();
                if (isset($result) && count($result) > 0) {
                    $result = $result->toArray();
                }

                return response()->json([
                    'data' => view('bug-tracking.google-drive-list', compact('result'))->render(),
                ]);
            }
        } catch (Exception $e) {
            return response()->json([
                'data' => view('bug-tracking.google-drive-list', ['result' => null])->render(),
            ]);
        }
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/BulkCustomerRepliesController.php 
Content: <?php

namespace App\Http\Controllers;

use App\Helpers;
use App\Customer;
use Illuminate\Support\Str;
use Illuminate\Http\Request;
use App\CustomerBulkMessageDND;
use Illuminate\Support\Facades\DB;
use App\BulkCustomerRepliesKeyword;

class BulkCustomerRepliesController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request)
    {
        set_time_limit(0);
        $keywords     = BulkCustomerRepliesKeyword::where('is_manual', 1)->get();
        $autoKeywords = BulkCustomerRepliesKeyword::where('count', '>', 10)
            ->whereNotIn('value', [
                'test', 'have', 'sent', 'the', 'please', 'pls', 'through', 'using', 'solo', 'that',
                'comes', 'message', 'sending', 'Yogesh', 'Greetings', 'this', 'numbers', 'maam', 'from',
                'changed', 'them', 'with', '0008000401700', 'WhatsApp', 'send', 'Auto', 'based', 'suggestion',
                'Will', 'your', 'number', 'number,', 'messages', 'also', 'meanwhile',
            ])
            ->take(50)
            ->orderBy('count', 'DESC')
            ->get();
        $searchedKeyword = null;

        if ($request->get('keyword_filter')) {
            $keyword = $request->get('keyword_filter');

            $searchedKeyword = BulkCustomerRepliesKeyword::where('value', $keyword)->first();

            $customerids = Customer::whereHas('bulkMessagesKeywords', function ($q) use ($keyword) {
                $q->where('value', $keyword);
            });

            if ($request->dnd_enabled === '0') {
                $customerids = $customerids->whereHas('dnd');
            } elseif ($request->dnd_enabled === '1') {
                $customerids = $customerids->whereDoesntHave('dnd');
            } else {
            }
            $customerids = $customerids->pluck('id')->toArray();

            $customers = Customer::leftJoin(\DB::raw('(SELECT MAX(chat_messages.id) as  max_id,whatsapp_number, customer_id ,message as matched_message  FROM `chat_messages` join customers as c on c.id = chat_messages.customer_id  GROUP BY customer_id ) m_max'), 'm_max.customer_id', '=', 'customers.id')
                ->groupBy('customers.id')
                ->whereIn('id', $customerids);

            $customers = $customers->orderBy('max_id', 'desc')->paginate(20);
        }

        $groups           = \App\QuickSellGroup::select('id', 'name', 'group')->orderby('id', 'DESC')->get();
        $pdfList          = [];
        $nextActionArr    = DB::table('customer_next_actions')->pluck('name', 'id');
        $reply_categories = \App\ReplyCategory::with('approval_leads')->orderby('name')->get();
        $settingShortCuts = [
            'image_shortcut'      => \App\Setting::get('image_shortcut'),
            'price_shortcut'      => \App\Setting::get('price_shortcut'),
            'call_shortcut'       => \App\Setting::get('call_shortcut'),
            'screenshot_shortcut' => \App\Setting::get('screenshot_shortcut'),
            'details_shortcut'    => \App\Setting::get('details_shortcut'),
            'purchase_shortcut'   => \App\Setting::get('purchase_shortcut'),
        ];
        $users_array = Helpers::getUserArray(\App\User::all());

        $whatsappNos     = getInstanceNo();
        $chatbotKeywords = \App\ChatbotKeyword::all();

        return view('bulk-customer-replies.index', compact('customers', 'keywords', 'autoKeywords', 'searchedKeyword', 'nextActionArr', 'groups', 'pdfList', 'reply_categories', 'settingShortCuts', 'users_array', 'whatsappNos', 'chatbotKeywords'));
    }

    public function updateWhatsappNo(Request $request)
    {
        $no        = $request->get('whatsapp_no');
        $customers = explode(',', $request->get('customers', ''));
        $total     = 0;
        if (! empty($no) && is_array(array_filter($customers))) {
            $lCustomer = array_filter($customers);
            $total     = count($lCustomer);
            $customers = \App\Customer::whereIn('id', $lCustomer)->update(['whatsapp_number' => $no]);
        }

        return response()->json(['code' => 200, 'total' => $total]);
    }

    public function storeKeyword(Request $request)
    {
        $this->validate($request, [
            'keyword' => 'required',
        ]);

        $type        = 'keyword';
        $numOfSpaces = count(explode(' ', $request->get('keyword')));
        if ($numOfSpaces > 1 && $numOfSpaces < 4) {
            $type = 'phrase';
        } elseif ($numOfSpaces >= 4) {
            $type = 'sentence';
        }

        $keyword            = new BulkCustomerRepliesKeyword();
        $keyword->value     = $request->get('keyword');
        $keyword->text_type = $type;
        $keyword->is_manual = 1;
        $keyword->count     = 0;
        $keyword->save();

        return redirect()->back()->with('message', Str::title($type) . ' added successfully!');
    }

    public function sendMessagesByKeyword(Request $request)
    {
        $customer_id_array = $request->get('customers');

        foreach ($request->get('customers') as $customer) {
            $myRequest = new Request();
            $myRequest->setMethod('POST');
            $myRequest->request->add([
                'message'     => $request->get('message_bulk'),
                'customer_id' => $customer,
                'status'      => 1,
            ]);

            app(\App\Http\Controllers\WhatsAppController::class)->sendMessage($myRequest, 'customer');
        }

        return response()->json(['message' => 'Messages sent successfully!', 'c_id' => $customer_id_array]);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        //
    }

    /**
     * Display the specified resource.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        //
    }

    public function addToDND(Request $request)
    {
        $exist = CustomerBulkMessageDND::where('customer_id', $request->customer_id)->where('filter', $request->filter['keyword_filter'])->first();

        if ($exist == null) {
            CustomerBulkMessageDND::create([
                'customer_id' => $request->customer_id,
                'filter'      => $request->filter ? $request->filter['keyword_filter'] : null,
            ]);
        }

        return response()->json(true);
    }

    public function removeFromDND(Request $request)
    {
        $dnd = CustomerBulkMessageDND::where('customer_id', $request->customer_id)->where('filter', $request->filter['keyword_filter'])->delete();

        return response()->json(true);
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/CategoryController.php 
Content: <?php

namespace App\Http\Controllers;

use App\Brand;
use App\Setting;
use App\Category;
use App\CategorySegment;
use App\Jobs\CreateHashTags;
use Illuminate\Http\Request;
use App\KeywordSearchVariants;
use App\BrandCategoryPriceRange;
use App\ScrappedCategoryMapping;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\DB;
use Illuminate\Pagination\Paginator;
use App\CategoryCancellationPolicyLog;
use Illuminate\Support\Facades\Artisan;
use Illuminate\Pagination\LengthAwarePaginator;

class CategoryController extends Controller
{
    /**
     * Show the application dashboard.
     *
     * @return \Illuminate\Http\Response
     */
    public function manageCategory(Request $request)
    {
        $category_segments = CategorySegment::where('status', 1)->get()->pluck('name', 'id');

        $allCategories = Category::all();

        $selected_value = $request->filter;

        if (isset($request->filter)) {
            $categories = Category::with([
                'childsOrderByTitle' => function ($query) {
                    $query->with([
                        'childsOrderByTitle' => function ($query) {
                            $query->with([
                                'childsOrderByTitle' => function ($query) {
                                    $query->with('childsOrderByTitle'); // Add more levels as needed
                                },
                            ]);
                        },
                    ]);
                },
            ])->where('title', 'like', '%' . $request->filter . '%')->paginate(1);
            $final_cat = [];

            foreach ($categories as $key => $cat) {
                if ($cat->parentM) {
                    if ($cat->parentM->parentM) {
                        if ($cat->parentM->parentM->parentM) {
                            $final_cat[$cat->parentM->parentM->parentM->id] = $cat->parentM->parentM->parentM;
                        } else {
                            $final_cat[$cat->parentM->parentM->id] = $cat->parentM->parentM;
                        }
                    } else {
                        $final_cat[$cat->parentM->id] = $cat->parentM;
                    }
                } else {
                    $final_cat[$cat->id] = $cat;
                }
            }
            $categories = $final_cat;
        } else {
            $categories = Category::with([
                'childsOrderByTitle' => function ($query) {
                    $query->with([
                        'childsOrderByTitle' => function ($query) {
                            $query->with([
                                'childsOrderByTitle' => function ($query) {
                                    $query->with('childsOrderByTitle'); // Add more levels as needed
                                },
                            ]);
                        },
                    ]);
                },
            ])
                ->where('parent_id', 0)
                ->orderBy('title')
                ->paginate(1);
        }

        $old = $request->old('parent_id');

        $allCategoriesDropdown = Category::attr(['name' => 'parent_id', 'class' => 'form-control'])
            ->selected()
            ->renderAsDropdown();

        $allCategoriesDropdownEdit = Category::attr(['name' => 'edit_cat', 'class' => 'form-control'])
            ->selected($old ? $old : 1)
            ->renderAsDropdown();

        return view('category.treeview', compact('category_segments', 'categories', 'allCategories', 'allCategoriesDropdown', 'allCategoriesDropdownEdit', 'selected_value'))->with('i', (request()->input('page', 1) - 1) * 20);
    }

    public function logCategory(Request $request)
    {
        $result          = \App\LogRequest::where('api_name', 'catalogCategoryCreate');
        $logRequest      = $result->orderBy('created_at', 'DESC')->paginate(Setting::get('pagination'));
        $logRequestCount = \App\LogRequest::where('api_name', 'catalogCategoryCreate')->count();

        return view('category.log', compact('logRequest', 'logRequestCount'));
    }

    public function pushCategoryInLive()
    {
        // Run the Artisan command
        Artisan::call('store-website:push-category-in-live');

        // You can return a response if needed
        return response()->json(['message' => 'Command executed successfully']);
    }

    public function manageCategory11(Request $request)
    {
        $category_segments = CategorySegment::where('status', 1)->get()->pluck('name', 'id');
        $categories        = Category::where('parent_id', '=', 0)->withCount('childs')->get();
        $allCategories     = Category::pluck('title', 'id')->all();

        $old = $request->old('parent_id');

        $allCategoriesDropdown = Category::attr(['name' => 'parent_id', 'class' => 'form-control'])
            ->selected($old ? $old : 1)
            ->renderAsDropdown();

        $allCategoriesDropdownEdit = Category::attr(['name' => 'edit_cat', 'class' => 'form-control'])
            ->selected($old ? $old : 1)
            ->renderAsDropdown();

        return view('category.treeview-11', compact('category_segments', 'categories', 'allCategories', 'allCategoriesDropdown', 'allCategoriesDropdownEdit'));
    }

    /**
     * Show the application dashboard.
     *
     * @return \Illuminate\Http\Response
     */
    public function addCategory(Request $request)
    {
        $this->validate($request, [
            'title'       => 'required',
            'magento_id'  => 'required|numeric',
            'show_all_id' => 'numeric|nullable',
        ]);
        $input              = $request->all();
        $input['parent_id'] = empty($input['parent_id']) ? 0 : $input['parent_id'];

        Category::create($input);

        $this->generateHashTagKeywords();

        return back()->with('success', 'New Category added successfully.');
    }

    public function generateHashTagKeywords()
    {
        $brandList       = Brand::getAll();
        $keywordVariants = KeywordSearchVariants::list();

        /* Initialize queue for add hashtags */
        $categoryList = Category::where('is_hashtag_generated', 0)->pluck('title', 'id')->chunk(1000)->toArray();

        foreach ($categoryList as $chunk) {
            CreateHashTags::dispatch(['data' => $chunk, 'user_id' => \Auth::user()->id, 'brand_list' => $brandList, 'keyword_variants' => $keywordVariants, 'type' => 'category'])->onQueue('generategooglescraperkeywords');
        }
    }

    public function edit(Category $category, Request $request)
    {
        $data                        = [];
        $data['id']                  = $category->id;
        $data['title']               = $category->title;
        $data['magento_id']          = $category->magento_id;
        $data['show_all_id']         = $category->show_all_id;
        $data['category_segment_id'] = $category->category_segment_id;
        $data['category_segments']   = CategorySegment::where('status', 1)->get()->pluck('name', 'id');

        if ($request->method() === 'POST') {
            $this->validate($request, [
                'title'       => 'required',
                'magento_id'  => 'required|numeric',
                'show_all_id' => 'numeric|nullable',
            ]);

            $category->title       = $request->input('title');
            $category->magento_id  = $request->input('magento_id');
            $category->show_all_id = $request->input('show_all_id');
            if ($request->has('category_segment_id')) {
                $category->category_segment_id = $request->category_segment_id;
            }
            $category->save();

            return redirect()->route('category')
                ->with('success-remove', 'Category updated successfully');
        }

        return view('category.edit', $data);
    }

    public function remove(Request $request)
    {
        $category_instance = new Category();
        $category          = $category_instance->find($request->input('edit_cat'));

        if ($request->ajax()) {
            if (Category::isParent($category->id)) {
                return response()->json(['error-remove' => 'Can\'t delete Parent category. Please delete all the childs first']);
            }

            if (Category::hasProducts($category->id)) {
                return response()->json(['error-remove' => 'Can\'t delete category is associated with products. Please remove all the association first']);
            }

            if ($category->id == 1) {
                return response()->json(['error-remove' => 'Can\'t be delete']);
            }

            $title = $category->title;
            $category->delete();

            return response()->json(['success-remove' => $title . 'category Deleted']);
        }

        if (Category::isParent($category->id)) {
            return back()->with('error-remove', 'Can\'t delete Parent category. Please delete all the childs first');
        }

        if (Category::hasProducts($category->id)) {
            return back()->with('error-remove', 'Can\'t delete category is associated with products. Please remove all the association first');
        }

        if ($category->id == 1) {
            return back()->with('error-remove', 'Can\'t be delete');
        }

        $title = $category->title;
        $category->delete();

        return back()->with('success-remove', $title . 'Category Deleted');
    }

    public static function getCategoryTree($id)
    {
        $category          = new Category();
        $category_instance = $category->find($id);
        $categoryTree      = [];

        if ($category_instance == null) {
            return false;
        }

        $parent_id = $category_instance->parent_id;

        $categoryTree[] = $category_instance->title;

        while ($parent_id != 0) {
            $category_instance = $category->find($parent_id);
            $categoryTree[]    = $category_instance->title;
            $parent_id         = $category_instance->parent_id;
        }

        return array_reverse($categoryTree);
    }

    public static function brandMinMaxPricing()
    {
        // Get all data
        $results = \Illuminate\Support\Facades\DB::select('
            SELECT
                categories.title,
                categories.id as cat_id,
                ct.title as parent_name,
                ct.id as parent_id,
                MIN(price*1) AS minimumPrice,
                MAX(price*1) AS maximumPrice
            FROM
                products
            JOIN
                categories
            ON
                products.category=categories.id
            LEFT JOIN
                categories as ct
            ON
                categories.parent_id=ct.id    
            GROUP BY
                products.category
            ORDER BY
                categories.title
        ');

        // Get all form data
        $resultsBrandCategoryPriceRange = BrandCategoryPriceRange::all();

        // Create array with brand segments
        $brandSegments = ['A', 'B', 'C'];

        // Create empty array
        $formResults = [];

        // Loop over results
        foreach ($resultsBrandCategoryPriceRange as $result) {
            $formResults[$result->brand_segment][$result->category_id]['min'] = $result->min_price;
            $formResults[$result->brand_segment][$result->category_id]['max'] = $result->max_price;
        }

        return view('category.minmaxpricing', compact('results', 'brandSegments', 'formResults'));
    }

    public static function updateBrandMinMaxPricing(Request $request)
    {
        // Check minimum price first
        if ($request->ajax() && $request->type == 'min' && (int) $request->price > 0) {
            return BrandCategoryPriceRange::updateOrCreate(
                ['brand_segment' => $request->brand_segment, 'category_id' => $request->category_id],
                ['min_price' => $request->price]
            );
        }

        // Check minimum price first
        if ($request->ajax() && $request->type == 'max' && (int) $request->price > 0) {
            return BrandCategoryPriceRange::updateOrCreate(
                ['brand_segment' => $request->brand_segment, 'category_id' => $request->category_id],
                ['max_price' => $request->price]
            );
        }
    }

    public static function getCategoryTreeMagentoIds($id)
    {
        $category          = new Category();
        $category_instance = $category->find($id);
        $categoryTree      = [];

        $categoryTree[] = $category_instance->magento_id;
        $parent_id      = $category_instance->parent_id;

        while ($parent_id != 0) {
            $category_instance = $category->find($parent_id);
            $categoryTree[]    = $category_instance->magento_id;

            if (! empty($category_instance->show_all_id)) {
                $categoryTree[] = $category_instance->show_all_id;
            }

            $parent_id = $category_instance->parent_id;
        }

        return array_reverse($categoryTree);
    }

    public static function getCategoryIdByName($term)
    {
        $category = Category::where('title', '=', $term)->first();

        return $category ? $category->id : 0;
    }

    public function mapCategory()
    {
        $fillerCategories = Category::where('id', '>', 1)->where('parent_id', 0)->whereIn('id', [143, 144])->get();

        $categories = Category::where('id', '>', 1)->where('parent_id', 0)->whereNotIn('id', [143, 144])->get();

        $allStatus = ['' => 'N/A'] + \App\Helpers\StatusHelper::getStatus();

        $allCategoriesDropdown = Category::attr(['name' => 'new_cat_id', 'class' => 'form-control new-category-update', 'style' => 'width:100%'])->renderAsDropdown();

        return view('category.references', compact('fillerCategories', 'categories', 'allStatus', 'allCategoriesDropdown'));
    }

    public function saveReferences(Request $request)
    {
        $categories = $request->get('category');
        $info       = $request->get('info');

        if (! empty($info)) {
            foreach ($info as $catId => $reference) {
                [$catId, $reference]  = explode('#', $reference);
                $catId                = str_replace('cat_', '', $catId);
                $category             = Category::find($catId);
                $category->references = $reference;
                $category->save();
            }
        } else {
            foreach ($categories as $catId => $reference) {
                $catId                = str_replace('cat_', '', $catId);
                $category             = Category::find($catId);
                $category->references = implode(',', $reference);
                $category->save();
            }
        }

        return response()->json(['code' => 200]);

        return redirect()->back()->with('message', 'Category updated successfully!');
    }

    public function saveReference(Request $request)
    {
        $oldCatId = $request->get('old_cat_id');
        $newcatId = $request->get('new_cat_id');
        $catName  = strtolower($request->get('cat_name'));

        // assigned new category
        $newCategory = null;
        $oldCategory = null;

        // checking category id
        if (! empty($oldCatId) && ! empty($newcatId)) {
            $oldCategory = Category::find($oldCatId);
            if (! empty($oldCategory)) {
                $catArray = explode(',', $oldCategory->references);
                $catArray = array_map('strtolower', $catArray);

                // check matched array we got
                $findMe = array_search($catName, $catArray);
                if ($findMe !== false) {
                    unset($catArray[$findMe]);
                }

                // update new category
                $oldCategory->references = implode(',', array_unique(array_filter($catArray)));
                $oldCategory->save();
            }
            // update with new category id
            $newCategory = Category::find($newcatId);

            if ($newCategory) {
                $newCatArr               = explode(',', $newCategory->references);
                $newCatArr               = array_map('strtolower', $newCatArr);
                $newCatArr[]             = strtolower($catName);
                $newCategory->references = implode(',', array_unique(array_filter($newCatArr)));
                $newCategory->save();

                // once we have new category id then we need to update all product from that old category
                $products = \App\Product::where('category', $oldCatId)->select(['products.id', 'products.sku'])->get();
                if (! $products->isEmpty()) {
                    foreach ($products as $product) {
                        $scraped_products = $product->many_scraped_products;
                        if (! $scraped_products->isEmpty()) {
                            foreach ($scraped_products as $scraped_product) {
                                if (isset($scraped_product->properties['category'])) {
                                    if (is_array($scraped_product->properties['category'])) {
                                        $namesList = array_map('strtolower', $scraped_product->properties['category']);
                                        if (in_array(strtolower($catName), $namesList)) {
                                            $product->category = $newcatId;
                                            $product->save();
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        return response()->json(['code' => 200, 'data' => $newCategory]);
    }

    public function updateField(Request $request)
    {
        $id    = $request->get('id');
        $field = $request->get('_f');
        $value = $request->get('_v');

        $category = Category::where('id', $id)->first();
        if ($category) {
            $category->{$field} = $value;
            $category->save();

            return response()->json(['code' => 200]);
        }

        return response()->json(['code' => 500]);
    }

    public function saveForm(Request $request)
    {
        $id = $request->id;
        if ($id != null) {
            $category = \App\Category::find($id);
            if (! empty($category)) {
                $findChild = \App\Category::whereNull('simplyduty_code')->where('parent_id', $category->id)->get();
                if (! empty($findChild) && ! $findChild->isEmpty()) {
                    foreach ($findChild as $child) {
                        $child->simplyduty_code = $request->simplyduty_code;
                        $child->save();
                    }
                }
                $category->simplyduty_code = $request->simplyduty_code;
                $category->save();
            }
        }

        return response()->json(['code' => 200, 'message' => 'Success']);
    }

    public function usedProducts(Request $request)
    {
        $q = $request->q;

        if ($q) {
            // check the type and then
            $q        = str_replace('/', ',', $q);
            $products = \App\ScrapedProducts::where('categories', $q)->join('products as p', 'p.id', 'scraped_products.product_id')
                ->where('p.stock', '>', 0)->groupBy('website')
                ->select('scraped_products.*')
                ->orderBy('scraped_products.created_at', 'desc')
                ->get();

            $view = (string) view('compositions.preview-products', compact('products'));

            return response()->json(['code' => 200, 'html' => $view]);
        }

        return response()->json(['code' => 200, 'html' => '']);
    }

    public function affectedProduct(Request $request)
    {
        $old  = $request->old_cat_id;
        $from = $request->cat_name;
        $to   = $request->new_cat_id;

        if (! empty($from)) {
            // check the type and then
            $total = \App\ScrapedProducts::matchedCategory($from)->count();

            return response()->json(['code' => 200, 'total' => $total]);
        }
    }

    public function affectedProductNew(Request $request)
    {
        $old         = $request->old_cat_id;
        $from        = $request->cat_name;
        $to          = $request->new_cat_id;
        $wholeString = $request->wholeString;

        if (! empty($from)) {
            // check the type and then
            $total = \App\ScrapedProducts::matchedCategory($from)->count();

            $view = (string) view('category.partials.affected-products', compact('total', 'old', 'from', 'to', 'wholeString'));

            return response()->json(['code' => 200, 'html' => $view]);
        }
    }

    public function categoryCancellationPolicyLog($categoryId = '', $changeParentId = '', $dayType = '', $dayChange = '', $dayOld = '')
    {
        return CategoryCancellationPolicyLog::create(
            [
                'category_id'      => $categoryId,
                'change_parent_id' => $changeParentId,
                'day_type'         => $dayType,
                'day_change'       => $dayChange,
                'day_old'          => $dayOld,
                'status'           => '1',
            ]
        );
    }

    public function updateCancelationPolicy(Request $request, $id)
    {
        if ($request->days_cancelation) {
            \App\Category::where('id', $id)->update(['days_cancelation' => $request->days_cancelation]);
            $this->categoryCancellationPolicyLog($id, $id, 'days_cancelation', $request->days_cancelation, $request->day_old);
        }

        if ($request->days_refund) {
            $request->input('days_refund');
            \App\Category::where('id', $id)->update(['days_refund' => $request->days_refund]);
            $this->categoryCancellationPolicyLog($id, $id, 'days_refund', $request->days_refund, $request->day_old);
        }

        $sql = "select  id,
                    title,
                    parent_id
            from    (select * from categories
                    order by parent_id, id) categories,
                    (select @pv := '" . $id . "') initialisation
            where   find_in_set(parent_id, @pv) > 0
            and     length(@pv := concat(@pv, ',', id))";
        $results = \DB::select($sql);

        foreach ($results as $result) {
            if ($request->days_cancelation) {
                \App\Category::where('id', $result->id)->update(['days_cancelation' => $request->days_cancelation]);
                $this->categoryCancellationPolicyLog($result->id, $id, 'days_cancelation', $request->days_cancelation, $request->day_old);
            }

            if ($request->days_refund) {
                $request->input('days_refund');
                \App\Category::where('id', $result->id)->update(['days_refund' => $request->days_refund]);
                $this->categoryCancellationPolicyLog($result->id, $id, 'days_refund', $request->days_refund, $request->day_old);
            }
        }

        return response()->json(['success-remove' => 'Days Cancelation ' . $request->days_cancelation . ' updated successfully']);
    }

    public function getCategoryCancellationPolicyLog(Request $request)
    {
        $getCanPol = CategoryCancellationPolicyLog::where(
            [
                ['change_parent_id', '=', $request->category_id],
                ['day_type', '=', $request->day_type],

            ]
        )->get();
        if (! empty($getCanPol)) {
            return response()->json(['code' => 200, 'data' => $getCanPol]);
        } else {
            return response()->json(['code' => 500, 'message' => 'Can not found Log']);
        }
    }

    public function updateCategoryReference(Request $request)
    {
        $loggedUser = $request->user();

        if (! isset($request->wholeString)) {
            $request->merge(['wholeString' => $request->cat_name]);
        }

        $scrappedCategory = ScrappedCategoryMapping::find($request->old_cat_id);
        $selectedCategory = Category::find($request->new_cat_id);

        if ($request->with_product == 'yes') {
            \App\Jobs\UpdateProductCategoryFromErp::dispatch([
                'from'    => $scrappedCategory->cat_name,
                'to'      => $selectedCategory->id,
                'user_id' => $loggedUser->id,
            ])->onQueue('supplier_products');
        }

        \App\UserUpdatedAttributeHistory::create([
            'old_value'      => $scrappedCategory->id,
            'new_value'      => $selectedCategory->id,
            'attribute_name' => 'category',
            'attribute_id'   => $selectedCategory->id,
            'user_id'        => \Auth::user()->id,
        ]);

        \App\UserUpdatedAttributeHistory::create([
            'old_value'      => $scrappedCategory->id,
            'new_value'      => $selectedCategory->id,
            'attribute_name' => 'scraped-category',
            'attribute_id'   => $scrappedCategory->id,
            'user_id'        => \Auth::user()->id,
        ]);

        $scrappedCategory->update([
            'category_id' => $selectedCategory->id,
            'is_skip'     => 1,
        ]);

        return response()->json(['code' => 200, 'message' => 'Your request has been pushed successfully']);
    }

    public function updateMultipleCategoryReference(Request $request)
    {
        $loggedUser = $request->user();

        $selectedCategory = Category::find($request->to);

        foreach ($request->from as $f) {
            $scrappedCategory = json_decode($f);

            \App\Jobs\UpdateProductCategoryFromErp::dispatch([
                'from'    => $scrappedCategory->name,
                'to'      => $selectedCategory->id,
                'user_id' => $loggedUser->id,
            ])->onQueue('supplier_products');

            \App\UserUpdatedAttributeHistory::create([
                'old_value'      => $scrappedCategory->id,
                'new_value'      => $selectedCategory->id,
                'attribute_name' => 'category',
                'attribute_id'   => $selectedCategory->id,
                'user_id'        => $loggedUser->id,
            ]);

            \App\UserUpdatedAttributeHistory::create([
                'old_value'      => $scrappedCategory->id,
                'new_value'      => $selectedCategory->id,
                'attribute_name' => 'scraped-category',
                'attribute_id'   => $scrappedCategory->id,
                'user_id'        => $loggedUser->id,
            ]);

            ScrappedCategoryMapping::where('id', $scrappedCategory->id)->update([
                'category_id' => $selectedCategory->id,
                'is_skip'     => 1,
            ]);
        }

        return response()->json([
            'code'    => 200,
            'message' => 'Your request has been pushed successfully',
        ]);
    }

    public function newCategoryReferenceGroup(Request $request)
    {
        $categoryAll = Category::with('childs.childLevelSencond')
            ->where('title', 'NOT LIKE', '%Unknown Category%')
            ->where('magento_id', '!=', '0')
            ->get();

        $categoryArray = [];
        foreach ($categoryAll as $category) {
            $categoryArray[] = [$category->title];
            $childs          = $category->childs;
            foreach ($childs as $child) {
                $categoryArray[] = [$child->title];
                $grandChilds     = $child->childLevelSencond;
                if ($grandChilds != null) {
                    foreach ($grandChilds as $grandChild) {
                        $categoryArray[] = [$grandChild->title];
                    }
                }
            }
        }

        // Use array_map to extract the first element of each sub-array and convert to lowercase
        $categories = array_map(function ($subArray) {
            return strtolower($subArray[0]);
        }, $categoryArray);

        // Use array_unique to get unique values
        $uniqueCategories = array_unique($categories);

        // Convert unique values back to an array of arrays
        $categoryAll = array_map(function ($category) {
            return [ucwords($category)]; // Convert first letter to uppercase if needed
        }, $uniqueCategories);

        return view('category.new-reference-group', ['categoryAll' => $categoryAll]);
    }

    public function newCategoryReferenceGroupBy(Request $request, $name, $threshold)
    {
        $scrapped_category_mapping = ScrappedCategoryMapping::selectRaw('scrapped_category_mappings.*')
            ->leftJoin('scrapped_product_category_mappings', 'scrapped_category_mappings.id', '=', 'scrapped_product_category_mappings.category_mapping_id')
            ->groupBy('scrapped_category_mappings.id')
            ->groupBy('scrapped_category_mappings.name')
            ->get()->filter(function ($scrapped_category_mapping) use ($name, $threshold) {
                similar_text(strtolower($scrapped_category_mapping->name), strtolower($name), $percentage);

                return $percentage >= $threshold * 100;
            });

        $categoryAll = Category::with('childs.childLevelSencond')
            ->where('title', 'NOT LIKE', '%Unknown Category%')
            ->where('magento_id', '!=', '0')
            ->get();

        $categoryArray = [];
        foreach ($categoryAll as $category) {
            $categoryArray[] = ['id' => $category->id, 'value' => $category->title];
            $childs          = $category->childs;
            foreach ($childs as $child) {
                $categoryArray[] = ['id' => $child->id, 'value' => $category->title . ' > ' . $child->title];
                $grandChilds     = $child->childLevelSencond;
                if ($grandChilds != null) {
                    foreach ($grandChilds as $grandChild) {
                        $categoryArray[] = ['id' => $grandChild->id, 'value' => $category->title . ' > ' . $child->title . ' > ' . $grandChild->title];
                    }
                }
            }
        }

        $unKnownCategory = Category::where('title', 'LIKE', '%Unknown Category%')->first();

        return view('category.new-reference-group-listing', ['categories' => $scrapped_category_mapping, 'categoryAll' => $categoryArray, 'unKnownCategoryId' => $unKnownCategory->id]);
    }

    public function newCategoryReferenceIndex(Request $request)
    {
        $users           = [];
        $unKnownCategory = Category::where('title', 'LIKE', '%Unknown Category%')->first();

        $scrapped_category_mapping = ScrappedCategoryMapping::selectRaw('scrapped_category_mappings.*, COUNT(scrapped_product_category_mappings.category_mapping_id) as total_products')
            ->leftJoin('scrapped_product_category_mappings', 'scrapped_category_mappings.id', '=', 'scrapped_product_category_mappings.category_mapping_id')
            ->groupBy('scrapped_category_mappings.id')
            ->groupBy('scrapped_category_mappings.name')
            ->orderBy('total_products', 'DESC')
            ->orderBy('is_skip', 'ASC');

        if ($request->search) {
            $scrapped_category_mapping->where('name', 'LIKE', '%' . $request->search . '%');
        }

        if (isset($request->is_skipped)) {
            $scrapped_category_mapping->where('is_skip', $request->is_skipped);
        }
        if ($request->user_id != null) {
            $matchedArray = \App\UserUpdatedAttributeHistory::where([
                'attribute_name' => 'scraped-category',
                'user_id'        => $request->user_id,
            ])->pluck('attribute_id');
            $scrapped_category_mapping = $scrapped_category_mapping->whereIn('scrapped_category_mappings.id', $matchedArray);
            $users                     = \App\User::where('id', $request->user_id)->select(['id', 'name'])->first();
        }
        $scrapped_category_mapping = $scrapped_category_mapping->paginate(Setting::get('pagination'));

        $mappingCategory = $scrapped_category_mapping->toArray();

        $mappedProduct = DB::table('scrapped_product_category_mappings')
            ->select('category_mapping_id', 'scrapped_product_category_mappings.product_id', 'scraped_products.website')
            ->leftJoin('scraped_products', 'scraped_products.id', '=', 'scrapped_product_category_mappings.product_id')
            ->whereIn('category_mapping_id', array_column($mappingCategory['data'], 'id'))
            ->get()
            ->toArray();

        $mappedData = [];

        foreach ($mappedProduct as $productM) {
            $mappedData[$productM->category_mapping_id][] = $productM->website;
        }

        foreach ($scrapped_category_mapping as $index => $category) {
            $scrapped_category_mapping[$index]->total_products = isset($mappedData[$category->id]) ? count($mappedData[$category->id]) : 0;
            $scrapped_category_mapping[$index]->all_websites   = isset($mappedData[$category->id]) ? implode('<br>', array_unique($mappedData[$category->id])) : '-';
        }

        $categoryAll = Category::with('childs.childLevelSencond')
            ->where('title', 'NOT LIKE', '%Unknown Category%')
            ->where('magento_id', '!=', '0')
            ->get();

        $categoryArray = [];
        foreach ($categoryAll as $category) {
            $categoryArray[] = ['id' => $category->id, 'value' => $category->title];
            $childs          = $category->childs;
            foreach ($childs as $child) {
                $categoryArray[] = ['id' => $child->id, 'value' => $category->title . ' > ' . $child->title];
                $grandChilds     = $child->childLevelSencond;
                if ($grandChilds != null) {
                    foreach ($grandChilds as $grandChild) {
                        $categoryArray[] = ['id' => $grandChild->id, 'value' => $category->title . ' > ' . $child->title . ' > ' . $grandChild->title];
                    }
                }
            }
        }

        return view('category.new-reference', ['categoryAll' => $categoryArray, 'need_to_skip_status' => true, 'unKnownCategoryId' => $unKnownCategory->id, 'scrapped_category_mapping' => $scrapped_category_mapping, 'users' => $users]);
    }

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     *
     * @param mixed      $items
     * @param mixed      $perPage
     * @param null|mixed $page
     * @param mixed      $options
     */
    public function paginate($items, $perPage = 20, $page = null, $options = [])
    {
        $page = $page ?: (Paginator::resolveCurrentPage() ?: 1);

        $items = $items instanceof Collection ? $items : Collection::make($items);

        $items = $items->sortByDesc('cat_product_count');

        return new LengthAwarePaginator($items->forPage($page, $perPage), $items->count(), $perPage, $page, $options);
    }

    public function history(Request $request, $id)
    {
        $type    = $request->get('type', 'category');
        $records = \App\UserUpdatedAttributeHistory::where('attribute_id', $id)->where('attribute_name', $type)->latest()->get();

        return view('compositions.partials.show-update-history', compact('records'));
    }

    public function historyForScraper(Request $request, $id)
    {
        $type    = $request->get('type', 'category');
        $records = \App\UserUpdatedAttributeHistory::where('attribute_id', $id)->where('attribute_name', $type)->latest()->get();
        dd($records);

        return view('compositions.partials.show-update-history-scrapeed', compact('records'));
    }

    public function ScraperUserHistory(Request $request)
    {
        $type    = 'scraped-category';
        $records = \App\UserUpdatedAttributeHistory::where('attribute_id', $request->id)->where('attribute_name', $request->type)->latest()->get();

        return view('compositions.partials.show-update-history-scrapeed', compact('records'));
    }

    public function deleteUnused()
    {
        \Artisan::call('delete-categories:with-no-products');

        return redirect()->back()->with('success', 'Your request has been finished successfully!');
    }

    public function fixAutoSuggested(Request $request)
    {
        $scrapped_category_mapping = ScrappedCategoryMapping::select('id', 'name', 'category_id');

        if (! empty($request->show_auto_fix)) {
            $scrapped_category_mapping->whereNotNull('category_id')->where('is_auto_skip', 0);
        } else {
            $scrapped_category_mapping->whereNull('category_id');
        }
        $scrapped_category_mapping = $scrapped_category_mapping->paginate(Setting::get('pagination'));

        $links = [];

        if (! $scrapped_category_mapping->isEmpty()) {
            foreach ($scrapped_category_mapping as $k => $category) {
                $filter = \App\Category::updateCategoryAuto($category->name);

                if (isset($request->show_auto_fix) && $request->show_auto_fix) {
                    $links[] = [
                        'from_id' => $category->id,
                        'from'    => $category->name,
                        'to'      => $category->category_id,
                    ];
                } else {
                    $links[] = [
                        'from_id' => $category->id,
                        'from'    => $category->name,
                        'to'      => ($filter) ? $filter->id : null,
                    ];
                }
            }
        }
        $is_auto_fix = ! empty($request->show_auto_fix) ? true : false;
        $view        = (string) view('category.partials.preview-categories', compact('links', 'is_auto_fix'));

        return response()->json(['code' => 200, 'html' => $view]);
    }

    public function fixAutoSuggestedString(Request $request)
    {
        $loeggedUser = $request->user();

        $scrapped_category_mapping = ScrappedCategoryMapping::select('id', 'name')
            ->whereNull('category_id');

        if ($request->show_skipeed_btn_value == 'false') {
            $scrapped_category_mapping->whereNull('category_id');
        }

        $scrapped_category_mapping = $scrapped_category_mapping->get();
        $links                     = [];

        if (! $scrapped_category_mapping->isEmpty()) {
            foreach ($scrapped_category_mapping as $k => $category) {
                $filter = \App\Category::updateCategoryAuto($category->name);
                if ($filter) {
                    $links[$category->id] = ($filter) ? $filter->id : null;
                }
            }
        }

        $count = 0;
        if (! empty($links)) {
            foreach ($links as $scrappedCategoryId => $selectedCategoryId) {
                if ($selectedCategoryId != 1) {
                    $scrappedCategory = ScrappedCategoryMapping::find($scrappedCategoryId);
                    $selectedCategory = Category::find($selectedCategoryId);

                    \App\Jobs\UpdateProductCategoryFromErp::dispatch([
                        'from'    => $scrappedCategory->name,
                        'to'      => $selectedCategory->id,
                        'user_id' => $loeggedUser->id,
                    ])->onQueue('supplier_products');

                    \App\UserUpdatedAttributeHistory::create([
                        'old_value'      => $scrappedCategory->id,
                        'new_value'      => $selectedCategory->id,
                        'attribute_name' => 'category',
                        'attribute_id'   => $selectedCategory->id,
                        'user_id'        => $loeggedUser->id,
                    ]);

                    \App\UserUpdatedAttributeHistory::create([
                        'old_value'      => $scrappedCategory->id,
                        'new_value'      => $selectedCategory->id,
                        'attribute_name' => 'scraped-category',
                        'attribute_id'   => $scrappedCategory->id,
                        'user_id'        => $loeggedUser->id,
                    ]);

                    $isUpdtaed = $scrappedCategory->update([
                        'category_id' => $selectedCategory->id,
                        'is_skip'     => 1,
                        'is_auto_fix' => 1,
                    ]);
                    if ($isUpdtaed) {
                        $count++;
                    }
                } else {
                    ScrappedCategoryMapping::where('id', $scrappedCategoryId)->update(['is_skip' => 1]);
                }
            }
        }

        return response()->json(['code' => 200, 'count' => $count]);
    }

    public function saveCategoryReference(Request $request)
    {
        $loeggedUser = $request->user();

        $unKnownCategory = Category::where('title', 'LIKE', '%Unknown Category%')->first();

        $items = $request->updated_category;
        if (! empty($items)) {
            foreach ($items as $scrappedCategoryId => $selectedCategoryId) {
                if ($selectedCategoryId != 1) {
                    $scrappedCategory = ScrappedCategoryMapping::find($scrappedCategoryId);
                    $selectedCategory = Category::find($selectedCategoryId);

                    \App\Jobs\UpdateProductCategoryFromErp::dispatch([
                        'from'    => $scrappedCategory->name,
                        'to'      => $selectedCategory->id,
                        'user_id' => $loeggedUser->id,
                    ])->onQueue('supplier_products');

                    \App\UserUpdatedAttributeHistory::create([
                        'old_value'      => $scrappedCategory->id,
                        'new_value'      => $selectedCategory->id,
                        'attribute_name' => 'category',
                        'attribute_id'   => $selectedCategory->id,
                        'user_id'        => $loeggedUser->id,
                    ]);

                    \App\UserUpdatedAttributeHistory::create([
                        'old_value'      => $scrappedCategory->id,
                        'new_value'      => $selectedCategory->id,
                        'attribute_name' => 'scraped-category',
                        'attribute_id'   => $scrappedCategory->id,
                        'user_id'        => $loeggedUser->id,
                    ]);

                    $scrappedCategory->update([
                        'category_id'  => $selectedCategory->id,
                        'is_skip'      => 0,
                        'is_auto_skip' => ! empty($request->is_auto_fix) ? 1 : 0,
                    ]);
                } else {
                    ScrappedCategoryMapping::where('id', $scrappedCategoryId)->update(['is_skip' => 1]);
                }
            }
        }

        return response()->json(['code' => 200, 'message' => 'Category updated successfully']);
    }

    public function childCategory(Request $request)
    {
        $cat    = Category::with('childs')->find($request->subCat);
        $childs = $cat->childs;

        if ($childs) {
            return response()->json($childs);
        } else {
            return false;
        }
    }

    public function childEditCategory(Request $request)
    {
        $cat = Category::with(['childs.childLevelSencond', 'categorySegmentId'])->find($request->dataId);

        if ($cat) {
            return response()->json($cat);
        } else {
            return false;
        }
    }

    public function updateCategory(Request $request, $id)
    {
        $category = Category::findOrFail($id);

        if ($request->has('title')) {
            $category->title = $request->input('title');
            $category->save();

            return response()->json(['success-remove' => $category->title . ' updated successfully']);
        }

        if ($request->has('magento_id')) {
            $category->magento_id = $request->input('magento_id');
            $category->save();

            return response()->json(['success-remove' => 'Magneto id of ' . $category->title . ' updated successfully']);
        }

        if ($request->has('show_all_id')) {
            $category->show_all_id = $request->input('show_all_id');
            $category->save();

            return response()->json(['success-remove' => 'Show all id of ' . $category->title . ' updated successfully']);
        }
        if ($request->has('parent_id')) {
            $category->parent_id = $request->parent_id;
            $category->save();

            return response()->json(['success-remove' => 'Parent category ' . $category->title . ' updated successfully.Please refresh page']);
        }

        if ($request->has('category_segment_id')) {
            $category->category_segment_id = $request->category_segment_id;
            $category->save();

            return response()->json(['success-remove' => 'Category segment id of ' . $category->title . ' updated successfully']);
        }

        if ($request->has('simplyduty_code')) {
            $findChild = \App\Category::whereNull('simplyduty_code')->where('parent_id', $category->id)->get();
            if (! empty($findChild) && ! $findChild->isEmpty()) {
                foreach ($findChild as $child) {
                    $child->simplyduty_code = $request->simplyduty_code;
                    $child->save();
                }
            }
            $category->simplyduty_code = $request->simplyduty_code;
            $category->save();

            return response()->json(['success-remove' => 'SH code of ' . $category->title . ' updated successfully']);
        }

        if (isset($request->measurment)) {
            if ($request->has('need_to_check_measurement')) {
                $category->need_to_check_measurement = 1;
            } else {
                $category->need_to_check_measurement = 0;
            }
            $category->save();

            return response()->json(['success-remove' => 'Check measurement of ' . $category->title . ' updated successfully']);
        }

        if (isset($request->checkSize)) {
            if ($request->has('need_to_check_size')) {
                $category->need_to_check_size = 1;
            } else {
                $category->need_to_check_size = 0;
            }
            $category->save();

            return response()->json(['success-remove' => 'Check size of ' . $category->title . ' updated successfully']);
        }

        if (isset($request->checkSizeChart)) {
            if ($request->has('size_chart_needed')) {
                $category->size_chart_needed = 1;
            } else {
                $category->size_chart_needed = 0;
            }
            $category->save();

            return response()->json(['success-remove' => 'Check size chart of ' . $category->title . ' updated successfully']);
        }
    }

    public function updateMinMaxPriceDefault()
    {
        return abort(404);
        if (! auth()->user()->isAdmin()) {
        }

        $results = \Illuminate\Support\Facades\DB::select('
            SELECT
                categories.title,
                categories.id as cat_id,
                ct.title as parent_name,
                ct.id as parent_id,
                MIN(price*1) AS minimumPrice,
                MAX(price*1) AS maximumPrice
            FROM
                products
            JOIN
                categories
            ON
                products.category=categories.id
            LEFT JOIN
                categories as ct
            ON
                categories.parent_id=ct.id    
            GROUP BY
                products.category
            ORDER BY
                categories.title
        ');

        $brandSegments = ['A', 'B', 'C'];

        foreach ($brandSegments as $bs) {
            foreach ($results as $r) {
                $bsRange = BrandCategoryPriceRange::where('brand_segment', $bs)->where('category_id', $r->cat_id)->first();
                if (! $bsRange) {
                    BrandCategoryPriceRange::updateOrCreate(
                        ['brand_segment' => $bs, 'category_id' => $r->cat_id],
                        ['min_price' => 50, 'max_price' => 10000]
                    );
                } else {
                    $bsRange->min_price = 50;
                    $bsRange->max_price = 10000;
                    $bsRange->save();
                }
            }
        }

        echo 'script done';
    }

    public function changePushType(Request $request)
    {
        $category = \App\Category::find($request->category_id);
        if ($category) {
            $category->push_type = $request->value;
            $category->save();

            return response()->json(['code' => 200, 'message' => 'Updated successfully']);
        } else {
            return response()->json(['code' => 500, 'message' => 'Category not found']);
        }
    }

    /**
     * copy data from One category To Another.
     *
     * @return \Illuminate\Http\Response
     */
    public function storeCopyCategory(Request $request)
    {
        $sourceCategoryId = $request->sourceCategoryId;
        $targetCategoryId = $request->targetCategoryId;

        $categories = Category::where('parent_id', $sourceCategoryId)->orderBy('title')->get();

        $data = [];

        if ($categories) {
            foreach ($categories as $category) {
                $data['child'][$category->id] = $category->toArray();
                $insert_array                 = $category->toArray();
                $insert_array['parent_id']    = $targetCategoryId;
                $insert_array['magento_id']   = 0;
                unset($insert_array['id']);
                $pid                                   = Category::insertGetId($insert_array);
                $data['child'][$category->id]['child'] = $this->getChildData($category->id, $pid);
            }
        }

        return redirect()->route('category')
            ->with('success-remove', 'Data Copyied Successfully');
    }

    /**
     * find child data from parent.
     *
     * @param mixed $parentId
     * @param mixed $pid
     *
     * @return \Illuminate\Http\Response
     */
    public function getChildData($parentId, $pid)
    {
        $categories = Category::where('parent_id', $parentId)->orderBy('title')->get();
        $data       = [];
        if ($categories) {
            foreach ($categories as $category) {
                $data[$category->id]        = $category->toArray();
                $insert_array               = $category->toArray();
                $insert_array['parent_id']  = $pid;
                $insert_array['magento_id'] = 0;
                unset($insert_array['id']);
                $newpid                       = Category::insertGetId($insert_array);
                $data[$category->id]['child'] = $this->getChildData($category->id, $newpid);
            }
        }

        return $data;
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/ChatMessagesController.php 
Content: <?php

namespace App\Http\Controllers;

use App\Old;
use App\Task;
use App\User;
use App\Email;
use App\Order;
use App\Vendor;
use App\Tickets;
use App\Uicheck;
use App\Customer;
use App\Document;
use App\Learning;
use App\Supplier;
use App\TestCase;
use App\PublicKey;
use Carbon\Carbon;
use App\BugTracker;
use App\TestSuites;
use App\ChatMessage;
use App\DeveloperTask;
use App\PaymentReceipt;
use App\SocialStrategy;
use App\CustomerCharity;
use App\SiteDevelopment;
use App\StoreSocialContent;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Storage;

class ChatMessagesController extends Controller
{
    /**
     * Load more messages from chat_messages
     *
     * @return \Illuminate\Http\JsonResponse|array
     */
    public function loadMoreMessages(Request $request)
    {
        // Set variables
        $limit           = $request->get('limit', 3);
        $loadAttached    = $request->get('load_attached', 0);
        $loadAllMessages = $request->get('load_all', 0);
        // Get object (customer, vendor, etc.)
        $object = match ($request->object) {
            'customer'               => Customer::find($request->object_id),
            'user-feedback'          => User::find($request->object_id),
            'user-feedback-hrTicket' => User::find($request->object_id),
            'hubstuff'               => User::find($request->object_id),
            'user'                   => User::find($request->object_id),
            'vendor'                 => Vendor::find($request->object_id),
            'charity'                => CustomerCharity::find($request->object_id),
            'task'                   => Task::find($request->object_id),
            'ticket'                 => Tickets::find($request->object_id),
            'developer_task'         => DeveloperTask::find($request->object_id),
            'supplier'               => Supplier::find($request->object_id),
            'old'                    => Old::find($request->object_id),
            'site_development'       => SiteDevelopment::find($request->object_id),
            'social_strategy'        => SocialStrategy::find($request->object_id),
            'content_management'     => StoreSocialContent::find($request->object_id),
            'order'                  => Order::find($request->object_id),
            'payment-receipts'       => PaymentReceipt::find($request->object_id),
            'learning'               => Learning::find($request->object_id),
            'SOP'                    => User::find($request->object_id),
            'document'               => Document::find($request->object_id),
            'uicheck'                => Uicheck::find($request->object_id),
            'bug'                    => BugTracker::find($request->object_id),
            'testcase'               => TestCase::find($request->object_id),
            'testsuites'             => TestSuites::find($request->object_id),
            'timedoctor'             => User::find($request->object_id),
            'email'                  => Email::find($request->object_id),
            default                  => Customer::find($request->object),
        };
        // Set raw where query
        $rawWhere = "(message!='' or media_url!='')";

        // Do we want all?
        if ($loadAllMessages == 1) {
            $loadAttached = 1;
            $rawWhere     = '1=1';
        }

        $currentPage = $request->get('page', 1);
        $skip        = ($currentPage - 1) * $limit;

        $loadType      = $request->get('load_type');
        $onlyBroadcast = false;

        //  if loadtype is brodcast then get the images only
        if ($loadType == 'broadcast') {
            $onlyBroadcast = true;
            $loadType      = 'images';
        }

        $chatMessages = $object->whatsappAll($onlyBroadcast)->whereRaw($rawWhere);
        if ($request->for_simulator) {
            $chatMessages = $chatMessages->reorder('created_at', 'asc');
        }
        if ($request->has('order')) {
            $chatMessages = $chatMessages->reorder('created_at', $request->get('order'));
        }
        if ($request->object == 'SOP') {
            $chatMessages = ChatMessage::where('sop_user_id', $object->id);
        }

        if ($request->object == 'user-feedback') {
            $chatMessages = ChatMessage::where('user_feedback_id', $object->id)->where('user_feedback_category_id', $request->feedback_category_id);
        }
        if ($request->object == 'user-feedback-hrTicket') {
            $chatMessages = ChatMessage::where('user_feedback_id', $object->id)->where('user_feedback_category_id', $request->feedback_category_id);
        }
        if ($request->object == 'uicheck') {
            $chatMessages = ChatMessage::where('ui_check_id', $request->object_id);
        }
        if ($request->object == 'hubstuff') {
            $chatMessages = ChatMessage::where('hubstuff_activity_user_id', $object->id);
        }
        if (! $onlyBroadcast) {
            $chatMessages = $chatMessages->where('status', '!=', 10);
        }

        if ($request->date != null) {
            $chatMessages = $chatMessages->whereDate('created_at', $request->date);
        }

        if ($request->keyword != null) {
            $chatMessages = $chatMessages->where('message', 'like', '%' . $request->keyword . '%'); //Purpose - solve issue for search message , Replace form whereDate to where - DEVTASK-4020
        }

        if ($request->object == 'timedoctor') {
            $chatMessages = ChatMessage::where('time_doctor_activity_user_id', $object->id);
        }

        $chatMessages = $chatMessages->skip($skip)->take($limit);

        switch ($loadType) {
            case 'text':
                $chatMessages = $chatMessages->whereNotNull('message')
                    ->whereNull('media_url')
                    ->whereRaw('id not in (select mediable_id from mediables WHERE mediable_type LIKE "App%ChatMessage")');
                break;
            case 'images':
                $chatMessages = $chatMessages->whereRaw("(media_url is not null or id in (
                    select
                        mediable_id
                    from
                        mediables
                        join media on id = media_id and extension != 'pdf'
                    WHERE
                        mediable_type LIKE 'App%ChatMessage'
                ) )");
                break;
            case 'pdf':
                $chatMessages = $chatMessages->whereRaw("(id in (
                    select
                        mediable_id
                    from
                        mediables
                        join media on id = media_id and extension = 'pdf'
                    WHERE
                        mediable_type LIKE 'App%ChatMessage'
                ) )");
                break;
            case 'text_with_incoming_img':
                $chatMessages = $chatMessages->where(function ($query) use ($object) {
                    $query->whereRaw('(chat_messages.number = ' . $object->phone . " and ( media_url is not null
                                                or id in (
                                                select
                                                    mediable_id
                                                from
                                                    mediables
                                                    join media on id = media_id and extension != 'pdf'
                                                WHERE
                                                    mediable_type LIKE 'App%ChatMessage'
                                            )) )")->orWhere(function ($query) {
                        $query->whereNotNull('message')
                            ->whereNull('media_url')
                            ->whereRaw('id not in (select mediable_id from mediables WHERE mediable_type LIKE "App%ChatMessage")');
                    });
                });
                break;
            case 'incoming_img':
                $chatMessages = $chatMessages->where(function ($query) use ($object) {
                    $query->whereRaw('(chat_messages.number = ' . $object->phone . " and ( media_url is not null
                                                or id in (
                                                select
                                                    mediable_id
                                                from
                                                    mediables
                                                    join media on id = media_id and extension != 'pdf'
                                                WHERE
                                                    mediable_type LIKE 'App%ChatMessage'
                                            )) )");
                });
                break;
            case 'outgoing_img':
                $chatMessages = $chatMessages->where(function ($query) use ($object) {
                    $query->whereRaw('((chat_messages.number != ' . $object->phone . "  or chat_messages.number is null) and ( media_url is not null
                                            or id in (
                                            select
                                                mediable_id
                                            from
                                                mediables
                                                join media on id = media_id and extension != 'pdf'
                                            WHERE
                                                mediable_type LIKE 'App%ChatMessage'
                                        )) )");
                });
                break;
        }

        $chatMessages = $chatMessages->get();

        // Set empty array with messages
        $messages     = [];
        $chatFileData = '';
        // Loop over ChatMessages
        foreach ($chatMessages as $chatMessage) {
            $objectname = null;
            if ($request->object == 'customer' || $request->object == 'charity' || $request->object == 'user' || $request->object == 'vendor' || $request->object == 'supplier' || $request->object == 'site_development' || $request->object == 'social_strategy' || $request->object == 'content_management' || $request->object == 'uicheck') {
                $objectname = $object->name;
            }
            if ($request->object == 'task' || $request->object == 'developer_task') {
                $u = User::find($chatMessage->user_id);
                if ($u) {
                    $objectname = $u->name;
                }
            }
            // Create empty media array
            $media                  = [];
            $mediaWithDetails       = [];
            $productId              = null;
            $parentMedia            = [];
            $parentMediaWithDetails = [];
            $parentProductId        = null;

            // Check for media
            if ($loadAttached == 1 && $chatMessage->hasMedia(config('constants.media_tags'))) {
                foreach ($chatMessage->getMedia(config('constants.media_tags')) as $key => $image) {
                    // Supplier checkbox
                    if (in_array($request->object, ['supplier'])) {
                        $tempImage = [
                            'key'           => $image->getKey(),
                            'image'         => getMediaUrl($image),
                            'product_id'    => '',
                            'special_price' => '',
                            'size'          => '',
                        ];

                        $imageKey     = $image->getKey();
                        $mediableType = 'Product';

                        $productImage = \App\Product::with('Media')
                            ->whereRaw("products.id IN (SELECT mediables.mediable_id FROM mediables WHERE mediables.media_id = $imageKey AND mediables.mediable_type LIKE '%$mediableType%')")
                            ->select(['id', 'price_inr_special', 'supplier', 'size', 'lmeasurement', 'hmeasurement', 'dmeasurement'])->first();

                        if ($productImage) {
                            $tempImage['product_id']        = $productImage->id;
                            $tempImage['special_price']     = $productImage->price_inr_special;
                            $tempImage['supplier_initials'] = $this->getSupplierIntials($productImage->supplier);
                            $tempImage['size']              = $this->getSize($productImage);
                        }

                        $mediaWithDetails[] = $tempImage;
                    } else {
                        // Check for product
                        if (isset($image->id)) {
                            $product = DB::table('mediables')->where('mediable_type', \App\Product::class)->where('media_id', $image->id)->get(['mediable_id'])->first();

                            if ($product != null) {
                                $productId = $product->mediable_id;
                            } else {
                                $productId = null;
                            }
                        }

                        // Get media URL
                        $media[] = [
                            'key'        => $image->getKey(),
                            'image'      => getMediaUrl($image),
                            'product_id' => $productId,
                        ];
                    }
                }
            }
            if ($request->object == 'customer') {
                if (session()->has('encrpyt')) {
                    $public = PublicKey::first();
                    if ($public != null) {
                        $privateKey  = hex2bin(session()->get('encrpyt.private'));
                        $publicKey   = hex2bin($public->key);
                        $keypair     = sodium_crypto_box_keypair_from_secretkey_and_publickey($privateKey, $publicKey);
                        $message     = hex2bin($chatMessage->message);
                        $textMessage = sodium_crypto_box_seal_open($message, $keypair);
                    }
                } else {
                    $textMessage = htmlentities($chatMessage->message);
                }
            } else {
                $textMessage = htmlentities($chatMessage->message);
            }
            $isOut = ($chatMessage->number != $object->phone) ? true : false;
            //check for parent message
            $textParent = null;
            if ($chatMessage->quoted_message_id) {
                $parentMessage = ChatMessage::find($chatMessage->quoted_message_id);
                if ($parentMessage) {
                    if ($request->object == 'customer') {
                        if (session()->has('encrpyt')) {
                            $public = PublicKey::first();
                            if ($public != null) {
                                $privateKey = hex2bin(session()->get('encrpyt.private'));
                                $publicKey  = hex2bin($public->key);
                                $keypair    = sodium_crypto_box_keypair_from_secretkey_and_publickey($privateKey, $publicKey);
                                $message    = hex2bin($parentMessage->message);
                                $textParent = sodium_crypto_box_seal_open($message, $keypair);
                            }
                        } else {
                            $textParent = htmlentities($parentMessage->message);
                        }
                    } else {
                        $textParent = htmlentities($parentMessage->message);
                    }

                    //parent image start here
                    if ($parentMessage->hasMedia(config('constants.media_tags'))) {
                        $images = $parentMessage->getMedia(config('constants.media_tags'));
                        $image  = $images->first();
                        // Supplier checkbox
                        if ($image) {
                            if (in_array($request->object, ['supplier'])) {
                                $tempImage = [
                                    'key'           => $image->getKey(),
                                    'image'         => getMediaUrl($image),
                                    'product_id'    => '',
                                    'special_price' => '',
                                    'size'          => '',
                                ];
                                $imageKey     = $image->getKey();
                                $mediableType = 'Product';

                                $productImage = \App\Product::with('Media')
                                    ->whereRaw("products.id IN (SELECT mediables.mediable_id FROM mediables WHERE mediables.media_id = $imageKey AND mediables.mediable_type LIKE '%$mediableType%')")
                                    ->select(['id', 'price_inr_special', 'supplier', 'size', 'lmeasurement', 'hmeasurement', 'dmeasurement'])->first();

                                if ($productImage) {
                                    $tempImage['product_id']        = $productImage->id;
                                    $tempImage['special_price']     = $productImage->price_inr_special;
                                    $tempImage['supplier_initials'] = $this->getSupplierIntials($productImage->supplier);
                                    $tempImage['size']              = $this->getSize($productImage);
                                }

                                $parentMediaWithDetails[] = $tempImage;
                            } else {
                                // Check for product
                                if (isset($image->id)) {
                                    $product = DB::table('mediables')->where('mediable_type', \App\Product::class)->where('media_id', $image->id)->get(['mediable_id'])->first();

                                    if ($product != null) {
                                        $parentProductId = $product->mediable_id;
                                    } else {
                                        $parentProductId = null;
                                    }
                                }

                                // Get media URL
                                $parentMedia[] = [
                                    'key'        => $image->getKey(),
                                    'image'      => getMediaUrl($image),
                                    'product_id' => $parentProductId,
                                ];
                            }
                        }
                    }
                    //parent image ends
                }
            }

            //START - Purpose : Get Excel sheet - DEVTASK-4236
            $excel_attach = json_decode($chatMessage->additional_data);
            if (! empty($excel_attach)) {
                $path            = $excel_attach->attachment[0];
                $additional_data = $path;
            } else {
                $additional_data = '';
            }
            $sopdata = \App\Sop::where(['chat_message_id' => $chatMessage->id])->first();
            //END - DEVTASK-4236

            if (isset($request->downloadMessages) && $request->downloadMessages == 1) {
                if ($textMessage != '') {
                    $chatFileData .= html_entity_decode($textMessage, ENT_QUOTES, 'UTF-8');
                    $chatFileData .= "\n From " . (($isOut) ? 'ERP' : $objectname) . ' To ' . (($isOut) ? $object->name : 'ERP');
                    $chatFileData .= "\n On " . Carbon::parse($chatMessage->created_at)->format('Y-m-d H:i A');
                    $chatFileData .= "\n" . "\n" . "\n";
                }
            } else {
                $arr = [
                    'id'                     => $chatMessage->id,
                    'type'                   => $request->object,
                    'object_type_id'         => $request->object_id,
                    'sop_name'               => @$sopdata->name,
                    'sop_category'           => @$sopdata->category,
                    'sop_content'            => @$sopdata->content,
                    'inout'                  => ($isOut) ? 'out' : 'in',
                    'sendBy'                 => ($request->object == 'bug' || $request->object == 'testcase' || $request->object == 'testsuites' || $request->object == 'developer_task') ? User::where('id', $chatMessage->sent_to_user_id)->value('name') : (($isOut) ? 'ERP' : $objectname),
                    'sendTo'                 => ($request->object == 'bug' || $request->object == 'testcase' || $request->object == 'testsuites' || $request->object == 'developer_task') ? User::where('id', $chatMessage->user_id)->value('name') : (($isOut) ? $object->name : 'ERP'),
                    'message'                => $textMessage,
                    'parentMessage'          => $textParent,
                    'media_url'              => $chatMessage->media_url,
                    'datetime'               => Carbon::parse($chatMessage->created_at)->format('Y-m-d H:i A'),
                    'media'                  => is_array($media) ? $media : null,
                    'mediaWithDetails'       => is_array($mediaWithDetails) ? $mediaWithDetails : null,
                    'product_id'             => ! empty($productId) ? $productId : null,
                    'parentMedia'            => is_array($parentMedia) ? $parentMedia : null,
                    'parentMediaWithDetails' => is_array($parentMediaWithDetails) ? $parentMediaWithDetails : null,
                    'parentProductId'        => ! empty($parentProductId) ? $parentProductId : null,
                    'status'                 => $chatMessage->status,
                    'resent'                 => $chatMessage->resent,
                    'customer_id'            => $chatMessage->customer_id,
                    'approved'               => $chatMessage->approved,
                    'error_status'           => $chatMessage->error_status,
                    'error_info'             => $chatMessage->error_info,
                    'is_queue'               => $chatMessage->is_queue,
                    'is_reviewed'            => $chatMessage->is_reviewed,
                    'quoted_message_id'      => $chatMessage->quoted_message_id,
                    'additional_data'        => $additional_data, //Purpose : Add additional data - DEVTASK-4236
                    'is_auto_simulator'      => $chatMessage->is_auto_simulator,
                    'send_by_simulator'      => $chatMessage->send_by_simulator,
                ];

                if ($chatMessage->message_type == 'email') {
                    $arr['sendTo'] = $chatMessage->from_email;
                    $arr['sendBy'] = $chatMessage->to_email;
                }
                $arr['is_audio'] = $chatMessage->is_audio;
                if ($chatMessage->is_audio) {
                    $arr['message'] = \App\Helpers::getAudioUrl($chatMessage->message);
                }
                $messages[] = $arr;
            }
        }
        if ($request->for_simulator || $request->plan_response) {
            return $messages;
        }

        // Return JSON
        if (isset($request->downloadMessages) && $request->downloadMessages == 1) {
            $storagelocation = 'chatMessageFiles';
            $filename        = $request->object . $request->object_id . '_chat.txt';
            $file            = $storagelocation . '/' . $filename;

            Storage::put($file, $chatFileData);

            if ($chatFileData == '') {
                return response()->json([
                    'downloadUrl' => '',
                ]);
            }

            return response()->json([
                'downloadUrl' => $file,
            ]);
        } else {
            return response()->json([
                'messages' => $messages,
            ]);
        }
    }

    public function getSupplierIntials($string)
    {
        $expr = '/(?<=\s|^)[a-z]/i';
        preg_match_all($expr, $string, $matches);

        return strtoupper(implode('', $matches[0]));
    }

    public function getSize($productImage)
    {
        $size = null;

        if ($productImage->size != null) {
            $size = $productImage->size;
        } else {
            $size = (string) $productImage->lmeasurement . ', ' . (string) $productImage->hmeasurement . ', ' . (string) $productImage->dmeasurement;
        }

        return $size;
    }

    public function setReviewed($id)
    {
        $message = ChatMessage::find($id);
        if ($message) {
            $message->update(['is_reviewed' => 1]);

            return response()->json([
                'message' => 'Review Successful',
            ], 200);
        }

        return response()->json([
            'message' => 'Error',
        ], 500);
    }

    public function downloadChatMessages(request $request)
    {
        $file = $request->filename;
        header('Content-Description: File Transfer');
        header('Content-Disposition: attachment; filename=' . basename($file));
        header('Expires: 0');
        header('Cache-Control: must-revalidate');
        header('Pragma: public');
        header('Content-Length: ' . filesize($file));
        header('Content-Type: text/plain');
        readfile($file);
        unlink($file);
    }

    public function dndList(Request $request)
    {
        $title = 'DND List';

        return view('dnd-list.index', compact('title'));
    }

    public function dndListRecords(Request $request)
    {
        $messages = ChatMessage::join('customers as c', 'c.id', 'chat_messages.customer_id')->whereNull('chat_messages.number');

        $startTime = null;
        $endTime   = null;
        if ($request->time_range != null) {
            $time = explode(' - ', $request->time_range);
            if (! empty($time[0])) {
                $startTime = $time[0];
            }
            if (! empty($time[1])) {
                $endTime = $time[1];
            }
        }

        if ($startTime != null) {
            $messages = $messages->where('chat_messages.created_at', '>=', date('Y-m-d H:i:s', strtotime($startTime)));
        }

        if ($endTime != null) {
            $messages = $messages->where('chat_messages.created_at', '<=', date('Y-m-d H:i:s', strtotime($endTime)));
        }

        if ($request->whatsapp_number != null) {
            $messages = $messages->where('c.whatsapp_number', $request->whatsapp_number);
        }

        if ($request->keyword != null) {
            $messages = $messages->where(function ($q) use ($request) {
                $q->where('c.name', 'like', $request->keyword)->orWhere('c.phone', 'like', $request->keyword);
            });
        }

        $messages = $messages->where('c.do_not_disturb', 0);

        $messages = $messages->groupBy('c.id')
            ->orderBy('chat_messages.id', 'desc')
            ->select(['c.*'])
            ->paginate(24);

        return response()->json(['code' => 200, 'total' => $messages->total(), 'data' => $messages->items(), 'pagination' => (string) $messages->links()]);
    }

    public function moveDnd(Request $request)
    {
        $ids = $request->customer_id;

        if (! empty($ids)) {
            $customer = \App\Customer::whereIn('id', $ids)->get();
            if (! $customer->isEmpty()) {
                foreach ($customer as $c) {
                    $c->do_not_disturb = 1;
                    $c->save();
                }
            }
        }

        return response()->json(['code' => 200, 'data' => [], 'messages' => 'Customer updated Successfully']);
    }

    public function customChatListing()
    {
        $title = 'List | Custom Chat Message';

        $users = User::orderBy('name')->get();

        $vendors = Vendor::orderBy('name')->get();

        $customers = Customer::orderBy('name')->get();

        return view('custom-chat-message.index', compact('title', 'users', 'vendors', 'customers'));
    }

    public function customChatRecords(Request $request)
    {
        if ($request->get('keyword') != null) {
            $delimiters = ['/', ','];
            $str        = $request->get('keyword');
            $newStr     = str_replace($delimiters, $delimiters[0], $str);
            $arr        = explode($delimiters[0], $newStr);
            $keywords   = array_filter($arr);
            if ($request->search == 'yes') {
                $keywords = $keywords;
            } else {
                $value    = $keywords[0];
                $keywords = [];
                $keywords = [$value];
            }
        } else {
            $keywords = [];
        }

        $startTime = null;
        $endTime   = null;

        if ($request->time_range != null) {
            $time = explode(' - ', $request->time_range);
            if (! empty($time[0])) {
                $startTime = $time[0];
            }
            if (! empty($time[1])) {
                $endTime = $time[1];
            }
        }

        $records = ChatMessage::with('user', 'vendor', 'customer')->where(function ($query) {
            $query->whereNotNull('vendor_id');
            $query->orWhereNotNull('user_id');
            $query->orWhereNotNull('customer_id');
        });

        if ($request->get('keyword') != null) {
            $records->where('message', 'like', '%' . $request->keyword . '%');
        }

        if (! empty($request->user_id)) {
            $records->where('user_id', $request->user_id);
        }

        if (! empty($request->vendor_id)) {
            $records->where('vendor_id', $request->vendor_id);
        }

        if (! empty($request->customer_id)) {
            $records->where('customer_id', $request->customer_id);
        }

        if ($startTime != null) {
            $records->where('created_at', '>=', date('Y-m-d H:i:s', strtotime($startTime)));
        }

        if ($endTime != null) {
            $records->where('created_at', '<=', date('Y-m-d H:i:s', strtotime($endTime)));
        }

        $records     = $records->latest()->paginate(20);
        $recorsArray = [];

        foreach ($records as $row) {
            $type = $sender = '';
            if ($row->user_id) {
                $type   = 'user';
                $sender = optional($row->user)->name;
            } elseif ($row->vendor_id) {
                $type   = 'vendor';
                $sender = optional($row->vendor)->name;
            } elseif ($row->customer_id) {
                $type   = 'customer';
                $sender = optional($row->customer)->name;
            }
            $message = $row->message;
            if ($row->is_audio) {
                $message = \App\Helpers::getAudioUrl($row->message);
            }
            $recorsArray[] = [
                'id'          => $row->id,
                'created_at'  => $row->created_at->format('d-m-y H:i:s'),
                'type'        => $type,
                'message'     => replaceLinksWithAncherTags($message, '#db8610'),
                'is_audio'    => $row->is_audio,
                'sender'      => $type,
                'sender_name' => $sender,
                'resent'      => $row->resent,
            ];
        }

        return response()->json([
            'code'       => 200,
            'data'       => $recorsArray,
            'pagination' => (string) $records->links(),
            'total'      => $records->total(),
            'page'       => $records->currentPage(),
        ]);
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/CustomerCharityController.php 
Content: <?php

namespace App\Http\Controllers;

use DB;
use Auth;
use App\User;
use App\Brand;
use App\Product;
use App\Setting;
use App\Website;
use App\Category;
use App\StoreWebsite;
use App\WebsiteStore;
use App\CharityCountry;
use App\VendorCategory;
use App\CustomerCharity;
use Illuminate\Http\Request;
use App\Helpers\ProductHelper;
use App\CharityProductStoreWebsite;
use App\CustomerCharityWebsiteStore;
use Illuminate\Pagination\LengthAwarePaginator;

class CustomerCharityController extends Controller
{
    const DEFAULT_FOR = 2; //For Vendor

    public function index(Request $request)
    {
        $term         = $request->term ?? '';
        $sortByClause = '';
        $orderby      = 'DESC';

        if ($request->orderby == '') {
            $orderby = 'ASC';
        }
        if ($request->sortby == 'id') {
            $sortByClause = "id $orderby,";
        }
        $whereArchived = ' `deleted_at` IS NULL ';

        if ($request->get('with_archived') == 'on') {
            $whereArchived = '  `deleted_at` IS NOT NULL  ';
        }

        $isAdmin = Auth::user()->isAdmin();

        if ($isAdmin) {
            $permittedCategories = [];
        } else {
            $permittedCategories = Auth::user()->vendorCategoryPermission->pluck('id')->all() + [0];
        }
        //getting request
        if ($request->term || $request->name || $request->id || $request->category || $request->email || $request->phone ||
            $request->address || $request->email || $request->communication_history || $request->status != null || $request->updated_by != null
        ) {
            //Query Initiate
            if ($isAdmin) {
                $query = CustomerCharity::query();
            } else {
                $imp_permi = implode(',', $permittedCategories);
                if ($imp_permi != 0) {
                    $query = CustomerCharity::whereIn('category_id', $permittedCategories);
                } else {
                    $query = CustomerCharity::query();
                }
            }

            if (request('term') != null) {
                $query->where('name', 'LIKE', "%{$request->term}%");
            }

            //if Id is not null
            if (request('id') != null) {
                $query->where('id', request('id', 0));
            }

            //If name is not null
            if (request('name') != null) {
                $query->where('name', 'LIKE', '%' . request('name') . '%');
            }

            //if addess is not null
            if (request('address') != null) {
                $query->where('address', 'LIKE', '%' . request('address') . '%');
            }

            //if email is not null
            if (request('email') != null) {
                $query->where('email', 'LIKE', '%' . request('email') . '%');
            }

            //if phone is not null
            if (request('phone') != null) {
                $query->where('phone', 'LIKE', '%' . request('phone') . '%');
            }
            $status = request('status');
            if ($status != null && ! request('with_archived')) {
                $query = $query->where(function ($q) use ($status) {
                    $q->orWhere('status', $status);
                });
            }

            if (request('updated_by') != null && ! request('with_archived')) {
                $query = $query->where(function ($q) {
                    $q->orWhere('updated_by', request('updated_by'));
                });
            }

            //if category is not nyll
            if (request('category') != null) {
                $query->whereHas('category', function ($qu) {
                    $qu->where('category_id', '=', request('category'));
                });
            }
            //if email is not nyll
            if (request('email') != null) {
                $query->where('email', 'like', '%' . request('email') . '%');
            }
            if (request('communication_history') != null && ! request('with_archived')) {
                $communication_history = request('communication_history');
                $query->orWhereRaw("customer_charities.id in (select charity_id from chat_messages where charity_id is not null and message like '%" . $communication_history . "%')");
            }

            if ($request->with_archived != null && $request->with_archived != '') {
                $pagination = Setting::get('pagination');
                if (request()->get('select_all') == 'true') {
                    $pagination = $customer_charities->count();
                }

                $totalVendor        = $query->orderby('name', 'asc')->whereNotNull('deleted_at')->count();
                $customer_charities = $query->orderby('name', 'asc')->whereNotNull('deleted_at')->paginate($pagination);
            } else {
                $pagination = Setting::get('pagination');
                if (request()->get('select_all') == 'true') {
                    $pagination = $customer_charities->count();
                }
                $totalVendor        = $query->orderby('name', 'asc')->count();
                $customer_charities = $query->orderby('name', 'asc')->paginate($pagination);
            }
        } else {
            if ($isAdmin) {
                $permittedCategories = '';
            } else {
                if (empty($permittedCategories)) {
                    $permittedCategories = [0];
                }
                $permittedCategories_all = implode(',', $permittedCategories);
                if ($permittedCategories_all == 0) {
                    $permittedCategories = '';
                } else {
                    $permittedCategories = 'and customer_charities.category_id in (' . implode(',', $permittedCategories) . ')';
                }
            }

            $customer_charities = DB::select('
                SELECT customer_charities.id,customer_charities.product_id, customer_charities.frequency, customer_charities.is_blocked ,customer_charities.reminder_message, customer_charities.category_id, customer_charities.name, customer_charities.phone, customer_charities.email, customer_charities.address, customer_charities.social_handle, customer_charities.website, customer_charities.login, customer_charities.password, customer_charities.gst, customer_charities.account_name, customer_charities.account_iban, customer_charities.account_swift,
                customer_charities.frequency_of_payment,
                customer_charities.bank_name,
                customer_charities.bank_address,
                customer_charities.city,
                customer_charities.country,
                customer_charities.ifsc_code,
                customer_charities.remark,
                    customer_charities.created_at,customer_charities.updated_at,
                    customer_charities.updated_by,
                    customer_charities.reminder_from,
                    customer_charities.reminder_last_reply,
                    customer_charities.status,
                    customer_charities.store_website_id,
                    store_websites.title as store_websites_name,
                    0 as message_status
                    FROM customer_charities
                    LEFT JOIN store_websites on store_websites.id=customer_charities.store_website_id
                    WHERE (name LIKE "%' . $term . '%" OR
                    phone LIKE "%' . $term . '%" OR
                    email LIKE "%' . $term . '%" OR
                    address LIKE "%' . $term . '%" OR
                    social_handle LIKE "%' . $term . '%" OR
                    customer_charities.id IN (SELECT model_id FROM agents WHERE model_type LIKE "%Vendor%" AND (name LIKE "%' . $term . '%" OR phone LIKE "%' . $term . '%" OR email LIKE "%' . $term . '%"))) ' . $permittedCategories . '
                    ORDER BY ' . $sortByClause . ' created_at DESC;

            ');

            $totalVendor = count($customer_charities);

            $currentPage = LengthAwarePaginator::resolveCurrentPage();
            $perPage     = Setting::get('pagination');
            if (request()->get('select_all') == 'true') {
                $perPage     = count($customer_charities);
                $currentPage = 1;
            }

            if (! is_numeric($perPage)) {
                $perPage = 2;
            }
            $currentItems = array_slice($customer_charities, $perPage * ($currentPage - 1), $perPage);

            $customer_charities = new LengthAwarePaginator($currentItems, count($customer_charities), $perPage, $currentPage, [
                'path' => LengthAwarePaginator::resolveCurrentPath(),
            ]);
        }

        $vendor_categories = VendorCategory::all();

        $users = User::all();

        $replies = \App\Reply::where('model', 'Vendor')->whereNull('deleted_at')->pluck('reply', 'id')->toArray();

        $updatedProducts = CustomerCharity::join('users as u', 'u.id', 'customer_charities.updated_by')
            ->groupBy('customer_charities.updated_by')
            ->select([\DB::raw('count(u.id) as total_records'), 'u.name'])
            ->get();

        $storewebsite = StoreWebsite::all();

        $website1 = Website::all();

        return view('vendors.charity', [
            'vendors'           => $customer_charities,
            'vendor_categories' => $vendor_categories,
            'term'              => $term,
            'orderby'           => $orderby,
            'users'             => $users,
            'replies'           => $replies,
            'updatedProducts'   => $updatedProducts,
            'totalVendor'       => $totalVendor,
            'storewebsite'      => $storewebsite,
            'website1'          => $website1,

        ]);
    }

    public function store(Request $request, $id = null)
    {
        $this->validate($request, [
            'category_id'          => 'sometimes|nullable|numeric',
            'name'                 => 'required|string|max:255',
            'address'              => 'sometimes|nullable|string',
            'phone'                => 'required|nullable|numeric',
            'email'                => 'sometimes|nullable|email',
            'social_handle'        => 'sometimes|nullable',
            'website'              => 'sometimes|nullable',
            'login'                => 'sometimes|nullable',
            'password'             => 'sometimes|nullable',
            'gst'                  => 'sometimes|nullable|max:255',
            'account_name'         => 'sometimes|nullable|max:255',
            'account_iban'         => 'sometimes|nullable|max:255',
            'account_swift'        => 'sometimes|nullable|max:255',
            'frequency_of_payment' => 'sometimes|nullable|max:255',
            'bank_name'            => 'sometimes|nullable|max:255',
            'bank_address'         => 'sometimes|nullable|max:255',
            'city'                 => 'sometimes|nullable|max:255',
            'country'              => 'sometimes|nullable|max:255',
            'ifsc_code'            => 'sometimes|nullable|max:255',
            'remark'               => 'sometimes|nullable|max:255',
        ]);

        $data = $request->except(['_token', 'create_user']);
        if (empty($data['whatsapp_number'])) {
            //get default whatsapp number for vendor from whatsapp config
            $task_info = DB::table('whatsapp_configs')
                ->select('*')
                ->whereRaw('find_in_set(' . self::DEFAULT_FOR . ',default_for)')
                ->first();
            if (isset($task_info->number) && $task_info->number != null) {
                $data['whatsapp_number'] = $task_info->number;
            }
        }

        if (empty($data['default_phone'])) {
            $data['default_phone'] = $data['phone'];
        }

        if (! empty($source)) {
            $data['status'] = 0;
        }

        unset($data['websites']);
        unset($data['website_stores']);
        if ($id == null) {
            $charity                    = CustomerCharity::create($data);
            $charity_category           = Category::where('title', 'charity')->first();
            $charity_brand              = Brand::where('name', 'charity')->first();
            $product                    = new Product();
            $product->sku               = '';
            $product->status_id         = '115';
            $product->name              = $charity->name;
            $product->short_description = $charity->name;
            $product->brand             = $charity_brand->id;
            $product->category          = $charity_category->id;
            $product->price             = 1;
            $product->save();
            CustomerCharity::where('id', $charity->id)->update([
                'product_id' => $product->id,
            ]);
            Product::where('id', $product->id)->update(['sku' => 'charity_' . $product->id]);
        } else {
            CustomerCharity::where('id', $id)->update($data);
        }

        return redirect()->route('customer.charity')->withSuccess('You have successfully saved a charity!');
    }

    public function delete($id)
    {
        $customer_charity = CustomerCharity::find($id);
        $customer_charity->delete();

        return redirect()->route('customer.charity')->withSuccess('You have successfully deleted a charity');
    }

    public function charitySearch()
    {
        $term   = request()->get('q', null);
        $search = CustomerCharity::where('name', 'LIKE', '%' . $term . '%')
            ->get();

        return response()->json($search);
    }

    public function charityEmail()
    {
        $term   = request()->get('q', null);
        $search = CustomerCharity::where('email', 'LIKE', '%' . $term . '%')
            ->get();

        return response()->json($search);
    }

    public function charityPhoneNumber()
    {
        $term   = request()->get('q', null);
        $search = CustomerCharity::where('phone', 'LIKE', '%' . $term . '%')
            ->get();

        return response()->json($search);
    }

    public function charityWebsites($id)
    {
        $cc            = CustomerCharity::find($id);
        $websiteArrays = ProductHelper::getStoreWebsiteName($cc->product_id);
        if (count($websiteArrays)) {
            foreach ($websiteArrays as $websiteArray) {
                $website   = StoreWebsite::find($websiteArray);
                $webStores = Website::select('code', 'name')->where('store_website_id', $website->id)->get();
            }
        }
        foreach ($webStores as $w) {
            $c_raw    = CharityCountry::where('charity_id', $id)->where('country_code', $w->code)->first();
            $w->price = 1;
            if ($c_raw) {
                $w->price = $c_raw->price;
            }
        }

        return response()->json($webStores);
    }

    public function addCharityWebsites(Request $request, $id)
    {
        $countries = explode('&', $request->data);
        foreach ($countries as $c) {
            $cc  = explode('=', $c)[0];
            $val = explode('=', $c)[1];
            if ($val) {
                $c_raw = CharityCountry::where('charity_id', $id)->where('country_code', $cc)->first();
                if (! $c_raw) {
                    $c_raw               = new CharityCountry();
                    $c_raw->charity_id   = $id;
                    $c_raw->country_code = $cc;
                }
                $c_raw->price = $val;
                $c_raw->save();
            }
        }

        return response()->json('Charity Updated Successfully!');
    }

    public function savewebsite(Request $request)
    {
        $c    = CharityProductStoreWebsite::where('charity_id', $request->charity_id)->where('website_id', $request->website_id)->first();
        $data = [
            'charity_id' => $request->charity_id,
            'website_id' => $request->website_id,
            'price'      => $request->price,
        ];
        if ($c) {
            CharityProductStoreWebsite::where('charity_id', $request->charity_id)->where('website_id', $request->website_id)->update($data);
        } else {
            CharityProductStoreWebsite::insert($data);
        }

        return response()->json('Charity Website Updated Successfully!');
    }

    public function deletewebsite(Request $request)
    {
        CharityProductStoreWebsite::where('id', $request->id)->delete();

        return response()->json('Charity Website deleted Successfully!');
    }

    public function getwebsite(Request $request)
    {
        $charity_id = $request->charity_id;
        $charity    = CustomerCharity::where('id', $charity_id)->first();
        $website    = Website::where('store_website_id', $charity->store_website_id)->get();
        $Website    = CharityProductStoreWebsite::select('charity_product_store_websites.id', 'charity_product_store_websites.price', 'websites.name')->join('websites', 'charity_product_store_websites.website_id', 'websites.id')->where('charity_id', $charity_id)->get();
        $html       = '';
        foreach ($Website as $w) {
            $html .= '<tr><td>' . $w->name . '</td>';
            $html .= '<td>' . $w->price . '</td>';
            $html .= '<td><button onclick="delwebsite(' . $w->id . ')" type="button" class="btn btn-default">Delete</button></td></tr>';
        }

        echo $html = " <table class='table table-bordered' >
      <thead><tr><th>Website</th><th>Price</th></tr> </thead>
      <tbody>" . $html . '</tbody></table';
    }

    public function getCharityWebsiteStores($id)
    {
        $website_stores    = CustomerCharityWebsiteStore::with('websiteStore.website.storeWebsite')->where('customer_charity_id', $id)->get();
        $website_store_ids = $website_stores->pluck('website_store_id')->toArray();
        $website_ids       = WebsiteStore::whereIn('id', $website_store_ids)->pluck('website_id')->toArray();
        $store_website_ids = Website::whereIn('id', $website_ids)->pluck('store_website_id')->toArray();
        $website_ids       = Website::whereIn('store_website_id', $store_website_ids)->pluck('id')->toArray();
        $all_stores        = WebsiteStore::whereIn('website_id', $website_ids)->get();
        $all_websites      = StoreWebsite::get();

        return response()->json([
            'website_stores' => $website_stores,
            'all_stores'     => $all_stores,
            'all_websites'   => $all_websites,
        ]);
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/CustomerController.php 
Content: <?php

namespace App\Http\Controllers;

use Auth;
use App\User;
use App\Brand;
use App\Email;
use App\Order;
use App\Reply;
use App\ApiKey;
use App\Status;
use App\Helpers;
use App\Message;
use App\Product;
use App\Setting;
use App\Category;
use App\Customer;
use App\ErpLeads;
use App\Supplier;
use App\Complaint;
use App\CreditLog;
use Carbon\Carbon;
use Dompdf\Dompdf;
use App\ChatMessage;
use App\Instruction;
use App\EmailAddress;
use App\MessageQueue;
use App\StoreWebsite;
use App\CreditHistory;
use App\ReplyCategory;
use App\QuickSellGroup;
use App\TwilioPriority;
use App\SuggestedProduct;
use Illuminate\Support\Arr;
use App\CustomerAddressData;
use App\InstructionCategory;
use Illuminate\Http\Request;
use App\CommunicationHistory;
use App\ReadOnly\SoloNumbers;
use App\CustomerPriorityPoint;
use App\Imports\CustomerImport;
use App\Exports\CustomersExport;
use App\ReadOnly\PurchaseStatus;
use App\Mails\Manual\IssueCredit;
use App\StoreWebsiteTwilioNumber;
use Illuminate\Support\Facades\DB;
use App\CustomerPriorityRangePoint;
use App\Mails\Manual\CustomerEmail;
use App\Mails\Manual\AdvanceReceipt;
use Maatwebsite\Excel\Facades\Excel;
use App\Mails\Manual\RefundProcessed;
use App\OrderStatus as OrderStatuses;
use GuzzleHttp\Client as GuzzleClient;
use App\Mails\Manual\OrderConfirmation;
use Plank\Mediable\Media as PlunkMediable;
use Illuminate\Pagination\LengthAwarePaginator;

class CustomerController extends Controller
{
    const DEFAULT_FOR = 1; //For Customer

    /**
     * This function is use for getting data from the credit history data
     *
     * @param $id int
     *
     * @return $htlm
     */
    public function creditHistory($id)
    {
        $custHosData = CreditHistory::where('customer_id', $id)->get();
        $html        = '';
        foreach ($custHosData as $key => $val) {
            $html .= '<tr>';
            $html .= '<td>' . $val->id . '</td>';
            $html .= '<td>' . $val->used_credit . '</td>';
            $html .= '<td>' . $val->used_in . '</td>';
            $html .= '<td>' . $val->type . '</td>';
            $html .= '<td>' . date('d-m-Y', strtotime($val->created_at)) . '</td>';
            $html .= '</tr>';
        }
        if ($html) {
            return $html;
        } else {
            return 'No record found';
        }
    }

    /**
     * This function is use for getting data from the credit log data
     *
     * @param $id int
     *
     * @return $htlm
     */
    public function creditLog($id)
    {
        $custHosData = CreditLog::where('customer_id', $id)->get();
        $html        = '';
        foreach ($custHosData as $key => $val) {
            $html .= '<tr>';
            $html .= '<td>' . date('d-m-Y', strtotime($val->created_at)) . '</td>';
            $html .= '<td>' . $val->request . '</td>';
            $html .= '<td>' . $val->response . '</td>';
            $html .= '<td>' . $val->status . '</td>';
            $html .= '<td>' . $val->id . '</td>';
            $html .= '</tr>';
        }
        if ($html) {
            return $html;
        } else {
            return 'No record found';
        }
    }

    public function add_customer_address(Request $request)
    {
        $apply_job = CustomerAddressData::create([
            'customer_id'  => $request->customer_id,
            'entity_id'    => $request->entity_id,
            'parent_id'    => $request->parent_id,
            'address_type' => $request->address_type,
            'region'       => $request->region,
            'region_id'    => $request->region_id,
            'postcode'     => $request->postcode,
            'firstname'    => $request->firstname,
            'middlename'   => $request->middlename,
            'company'      => $request->company,
            'country_id'   => $request->country_id,
            'telephone'    => $request->telephone,
            'prefix'       => $request->prefix,
            'street'       => $request->street,
        ]);
        $apply_job->save();

        return $apply_job;
    }

    public function index(Request $request)
    {
        $complaints   = Complaint::whereNotNull('customer_id')->pluck('complaint', 'customer_id')->toArray();
        $instructions = Instruction::with('remarks')->orderBy('is_priority', 'DESC')->orderBy('created_at', 'DESC')->select(['id', 'instruction', 'customer_id', 'assigned_to', 'pending', 'completed_at', 'verified', 'is_priority', 'created_at'])->get()->groupBy('customer_id')->toArray();
        $orders       = Order::latest()->select(['id', 'customer_id', 'order_status', 'order_status_id', 'created_at'])->get()->groupBy('customer_id')->toArray();
        $order_stats  = DB::table('orders')->selectRaw('order_status, COUNT(*) as total')->whereNotNull('order_status')->groupBy('order_status')->get();

        $totalCount = 0;
        foreach ($order_stats as $order_stat) {
            $totalCount += $order_stat->total;
        }

        $orderStatus = [
            'order received',
            'follow up for advance',
            'prepaid',
            'proceed without advance',
            'pending purchase (advance received)',
            'purchase complete',
            'product shipped from italy',
            'product in stock',
            'product shipped to client',
            'delivered',
            'cancel',
            'refund to be processed',
            'refund credited',
        ];

        $finalOrderStats = [];
        foreach ($orderStatus as $status) {
            foreach ($order_stats as $order_stat) {
                if ($status == strtolower($order_stat->order_status)) {
                    $finalOrderStats[] = $order_stat;
                }
            }
        }

        foreach ($order_stats as $order_stat) {
            if (! in_array(strtolower($order_stat->order_status), $orderStatus)) {
                $finalOrderStats[] = $order_stat;
            }
        }

        $order_stats = $finalOrderStats;

        $finalOrderStats = [];
        foreach ($order_stats as $key => $order_stat) {
            $finalOrderStats[] = [$order_stat->order_status,
                $order_stat->total,
                ($order_stat->total / $totalCount) * 100,
                [
                    '#CCCCCC',
                    '#95a5a6',
                    '#b2b2b2',
                    '#999999',
                    '#2c3e50',
                    '#7f7f7f',
                    '#666666',
                    '#4c4c4c',
                    '#323232',
                    '#191919',
                    '#000000',
                    '#414a4c',
                    '#353839',
                    '#232b2b',
                    '#34495e',
                    '#7f8c8d',
                ][$key],

            ];
        }

        $order_stats = $finalOrderStats;

        $results          = $this->getCustomersIndex($request);
        $term             = $request->input('term');
        $reply_categories = ReplyCategory::all();
        $api_keys         = ApiKey::select('number')->get();

        $type = $request->type ?? '';

        $orderby = 'desc';
        if ($request->orderby == '') {
            $orderby = 'asc';
        }

        $customers_all  = Customer::all();
        $customer_names = Customer::select(['name'])->get()->toArray();

        $category_suggestion = Category::attr(['name' => 'category[]', 'class' => 'form-control select-multiple', 'multiple' => 'multiple'])
            ->renderAsDropdown();

        $brands = Brand::all()->toArray();

        foreach ($customer_names as $name) {
            $search_suggestions[] = $name['name'];
        }

        $users_array = Helpers::getUserArray(User::all());

        $last_set_id = MessageQueue::max('group_id');

        $queues_total_count = MessageQueue::where('status', '!=', 1)->where('group_id', $last_set_id)->count();
        $queues_sent_count  = MessageQueue::where('sent', 1)->where('status', '!=', 1)->where('group_id', $last_set_id)->count();

        $start_time = $request->range_start ? "$request->range_start 00:00" : Carbon::now()->subDay();
        $end_time   = $request->range_end ? "$request->range_end 23:59" : Carbon::now()->subDay();

        $allCustomers = $results[0]->pluck('id')->toArray();

        // Get all sent broadcasts from the past month
        $sbQuery = DB::select("select MIN(group_id) AS minGroup, MAX(group_id) AS maxGroup from message_queues where sent = 1 and created_at>'" . date('Y-m-d H:i:s', strtotime('1 month ago')) . "'");

        // Add broadcasts to array
        $broadcasts = [];
        if ($sbQuery !== null) {
            // Get min and max
            $minBroadcast = $sbQuery[0]->minGroup;
            $maxBroadcast = $sbQuery[0]->maxGroup;

            // Deduct 2 from min
            $minBroadcast = $minBroadcast - 2;

            for ($i = $minBroadcast; $i <= $maxBroadcast; $i++) {
                $broadcasts[] = $i;
            }
        }

        $shoe_size_group = Customer::selectRaw('shoe_size, count(id) as counts')
            ->whereNotNull('shoe_size')
            ->groupBy('shoe_size')
            ->pluck('counts', 'shoe_size');

        $clothing_size_group = Customer::selectRaw('clothing_size, count(id) as counts')
            ->whereNotNull('clothing_size')
            ->groupBy('clothing_size')
            ->pluck('counts', 'clothing_size');

        $groups        = QuickSellGroup::select('id', 'name', 'group')->orderby('name', 'asc')->get();
        $storeWebsites = \App\StoreWebsite::all()->pluck('website', 'id')->toArray();
        $solo_numbers  = (new SoloNumbers)->all();

        return view('customers.index', [
            'storeWebsites'       => $storeWebsites,
            'solo_numbers'        => $solo_numbers,
            'customers'           => $results[0],
            'customers_all'       => $customers_all,
            'customer_ids_list'   => json_encode($results[1]),
            'users_array'         => $users_array,
            'instructions'        => $instructions,
            'term'                => $term,
            'orderby'             => $orderby,
            'type'                => $type,
            'queues_total_count'  => $queues_total_count,
            'queues_sent_count'   => $queues_sent_count,
            'search_suggestions'  => $search_suggestions,
            'reply_categories'    => $reply_categories,
            'orders'              => $orders,
            'api_keys'            => $api_keys,
            'category_suggestion' => $category_suggestion,
            'brands'              => $brands,
            'start_time'          => $start_time,
            'end_time'            => $end_time,
            'leads_data'          => $results[2],
            'order_stats'         => $order_stats,
            'complaints'          => $complaints,
            'shoe_size_group'     => $shoe_size_group,
            'clothing_size_group' => $clothing_size_group,
            'broadcasts'          => $broadcasts,
            'groups'              => $groups,
        ]);
    }

    public function getCustomersIndex(Request $request)
    {
        // Set search term
        $term = $request->term;
        // Set delivery status
        $delivery_status = [
            'Follow up for advance',
            'Proceed without Advance',
            'Advance received',
            'Cancel',
            'Prepaid',
            'Product Shiped form Italy',
            'In Transist from Italy',
            'Product shiped to Client',
            'Delivered',
        ];

        // Set empty clauses for later usage
        $orderWhereClause  = '';
        $searchWhereClause = '';
        $filterWhereClause = '';
        $leadsWhereClause  = '';

        if (! empty($term)) {
            $searchWhereClause = " AND (customers.name LIKE '%$term%' OR customers.phone LIKE '%$term%' OR customers.instahandler LIKE '%$term%')";
            $orderWhereClause  = "WHERE orders.order_id LIKE '%$term%'";
        }

        if ($request->get('shoe_size')) {
            $searchWhereClause .= " AND customers.shoe_size = '" . $request->get('shoe_size') . "'";
        }

        if ($request->get('clothing_size')) {
            $searchWhereClause .= " AND customers.clothing_size = '" . $request->get('clothing_size') . "'";
        }

        if ($request->get('shoe_size_group')) {
            $searchWhereClause .= " AND customers.shoe_size = '" . $request->get('shoe_size_group') . "'";
        }

        if ($request->get('clothing_size_group')) {
            $searchWhereClause .= " AND customers.clothing_size = '" . $request->get('clothing_size_group') . "'";
        }

        if ($request->get('customer_id')) {
            $searchWhereClause .= " AND customers.id LIKE '%" . $request->get('customer_id') . "%'";
        }

        if ($request->get('customer_name')) {
            $searchWhereClause .= " AND customers.name LIKE '%" . $request->get('customer_name') . "%'";
        }

        $orderby = 'DESC';

        if ($request->input('orderby')) {
            $orderby = 'ASC';
        }
        $sortby = 'communication';

        $sortBys = [
            'name'          => 'name',
            'email'         => 'email',
            'phone'         => 'phone',
            'instagram'     => 'instahandler',
            'lead_created'  => 'lead_created',
            'order_created' => 'order_created',
            'rating'        => 'rating',
            'communication' => 'communication',
        ];

        if (isset($sortBys[$request->input('sortby')])) {
            $sortby = $sortBys[$request->input('sortby')];
        }

        $start_time = $request->range_start ? "$request->range_start 00:00" : '';
        $end_time   = $request->range_end ? "$request->range_end 23:59" : '';

        if ($start_time != '' && $end_time != '') {
            $filterWhereClause = " AND last_communicated_at BETWEEN '" . $start_time . "' AND '" . $end_time . "'";
        }

        if ($request->type == 'unread' || $request->type == 'unapproved') {
            $join               = 'RIGHT';
            $type               = $request->type == 'unread' ? 0 : ($request->type == 'unapproved' ? 1 : 0);
            $orderByClause      = " ORDER BY is_flagged DESC, message_status ASC, last_communicated_at $orderby";
            $filterWhereClause  = " AND chat_messages.status = $type";
            $messageWhereClause = ' WHERE chat_messages.status != 7 AND chat_messages.status != 8 AND chat_messages.status != 9 AND chat_messages.status != 10';

            if ($start_time != '' && $end_time != '') {
                $filterWhereClause = " AND (last_communicated_at BETWEEN '" . $start_time . "' AND '" . $end_time . "') AND message_status = $type";
            }
        } else {
            if (
                strtolower($request->get('type')) === 'advance received' ||
                strtolower($request->get('type')) === 'cancel' ||
                strtolower($request->get('type')) === 'delivered' ||
                strtolower($request->get('type')) === 'follow up for advance' ||
                strtolower($request->get('type')) === 'high priority' ||
                strtolower($request->get('type')) === 'in transist from italy' ||
                strtolower($request->get('type')) === 'prepaid' ||
                strtolower($request->get('type')) === 'proceed without advance' ||
                strtolower($request->get('type')) === 'product shiped form italy' ||
                strtolower($request->get('type')) === 'product shiped to client' ||
                strtolower($request->get('type')) === 'refund credited' ||
                strtolower($request->get('type')) === 'refund dispatched' ||
                strtolower($request->get('type')) === 'refund to be processed'
            ) {
                $join               = 'LEFT';
                $orderByClause      = " ORDER BY is_flagged DESC, last_communicated_at $orderby";
                $messageWhereClause = ' WHERE chat_messages.status != 7 AND chat_messages.status != 8 AND chat_messages.status != 9';
                if ($orderWhereClause) {
                    $orderWhereClause .= ' AND ';
                } else {
                    $orderWhereClause = ' WHERE ';
                }
                $orderWhereClause .= 'orders.order_status = "' . $request->get('type') . '"';
                $filterWhereClause = ' AND order_status = "' . $request->get('type') . '"';
            } else {
                if (strtolower($request->type) != 'new' && strtolower($request->type) != 'delivery' && strtolower($request->type) != 'refund to be processed' && strtolower($request->type) != '') {
                    $join               = 'LEFT';
                    $orderByClause      = " ORDER BY is_flagged DESC, last_communicated_at $orderby";
                    $messageWhereClause = ' WHERE chat_messages.status != 7 AND chat_messages.status != 8 AND chat_messages.status != 9';

                    if ($request->type == '0') {
                        $leadsWhereClause = ' AND lead_status IS NULL';
                    } else {
                        $leadsWhereClause = " AND lead_status = $request->type";
                    }
                } else {
                    if ($sortby === 'communication') {
                        $join               = 'LEFT';
                        $orderByClause      = " ORDER BY is_flagged DESC, last_communicated_at $orderby";
                        $messageWhereClause = ' WHERE chat_messages.status != 7 AND chat_messages.status != 8 AND chat_messages.status != 9';
                    }
                }
            }
        }

        $assignedWhereClause = '';
        if (Auth::user()->hasRole('Customer Care')) {
            $user_id             = Auth::id();
            $assignedWhereClause = " AND id IN (SELECT customer_id FROM user_customers WHERE user_id = $user_id)";
        }

        if (! $orderByClause) {
            $orderByClause = ' ORDER BY instruction_completed_at DESC';
        } else {
            $orderByClause .= ', instruction_completed_at DESC';
        }

        $sql = '
            SELECT
                customers.id,
                customers.email,
                customers.frequency,
                customers.reminder_message,
                customers.name,
                customers.phone,
                customers.is_blocked,
                customers.is_flagged,
                customers.is_error_flagged,
                customers.is_priority,
                customers.instruction_completed_at,
                customers.whatsapp_number,
                customers.do_not_disturb,
                chat_messages.*,
                chat_messages.status AS message_status,
                chat_messages.number,
                twilio_active_numbers.phone_number as phone_number,
                orders.*,
                order_products.*,
                leads.*
            FROM
                customers
            LEFT JOIN
                (
                    SELECT
                        chat_messages.id AS message_id,
                        chat_messages.customer_id,
                        chat_messages.number,
                        chat_messages.message,
                        chat_messages.sent AS message_type,
                        chat_messages.status,
                        chat_messages.created_at,
                        chat_messages.created_at AS last_communicated_at
                    FROM
                        chat_messages
                    ' . $messageWhereClause . '
                ) AS chat_messages
            ON
                customers.id=chat_messages.customer_id AND
                chat_messages.message_id=(
                    SELECT
                        MAX(id)
                    FROM
                        chat_messages
                    ' . $messageWhereClause . (! empty($messageWhereClause) ? ' AND ' : '') . '
                        chat_messages.customer_id=customers.id
                    GROUP BY
                        chat_messages.customer_id
                )
            LEFT JOIN
                (
                    SELECT
                        MAX(orders.id) as order_id,
                        orders.customer_id,
                        MAX(orders.created_at) as order_created,
                        orders.order_status as order_status
                    FROM
                        orders
                    ' . $orderWhereClause . '
                    GROUP BY
                        customer_id
                ) as orders
            ON
                customers.id=orders.customer_id
            LEFT JOIN
                (
                    SELECT
                        order_products.order_id as purchase_order_id,
                        order_products.purchase_status
                    FROM
                        order_products
                    GROUP BY
                        purchase_order_id
                ) as order_products
            ON
                orders.order_id=order_products.purchase_order_id
            LEFT JOIN
                (
                    SELECT
                        MAX(id) as lead_id,
                        leads.customer_id,
                        leads.rating as lead_rating,
                        MAX(leads.created_at) as lead_created,
                        leads.status as lead_status
                    FROM
                        leads
                    GROUP BY
                        customer_id
                ) AS leads
            ON
                customers.id = leads.customer_id
            LEFT JOIN store_website_twilio_numbers
            ON
                store_website_twilio_numbers.store_website_id = customers.store_website_id
            LEFT JOIN twilio_active_numbers
            On
                twilio_active_numbers.id = store_website_twilio_numbers.twilio_active_number_id
            WHERE
                customers.deleted_at IS NULL AND
                customers.id IS NOT NULL
            ' . $searchWhereClause . '
            ' . $filterWhereClause . '
            ' . $leadsWhereClause . '
            ' . $assignedWhereClause . '
            ' . $orderByClause . '
        ';
        $customers = DB::select($sql);

        echo '<!-- ';
        echo $sql;
        echo '-->';

        $oldSql = '
            SELECT
              *
            FROM
            (
                SELECT
                    customers.id,
                    customers.frequency,
                    customers.reminder_message,
                    customers.name,
                    customers.phone,
                    customers.is_blocked,
                    customers.is_flagged,
                    customers.is_error_flagged,
                    customers.is_priority,
                    customers.deleted_at,
                    customers.instruction_completed_at,
                    order_status,
                    purchase_status,
                    (
                    SELECT
                            mm5.status
                        FROM
                            leads mm5
                        WHERE
                            mm5.id=lead_id
                    ) AS lead_status,
                    lead_id,
                    (
                    SELECT
                            mm3.id
                        FROM
                            chat_messages mm3
                        WHERE
                            mm3.id=message_id
                    ) AS message_id,
                    (
                    SELECT
                            mm1.message
                        FROM
                            chat_messages mm1
                        WHERE mm1.id=message_id
                    ) as message,
                    (
                    SELECT
                            mm2.status
                        FROM
                            chat_messages mm2
                        WHERE
                            mm2.id = message_id
                    ) AS message_status,
                    (
                    SELECT
                            mm4.sent
                        FROM
                            chat_messages mm4
                        WHERE
                            mm4.id = message_id
                    ) AS message_type,
                    (
                    SELECT
                            mm2.created_at
                        FROM
                            chat_messages mm2
                        WHERE
                            mm2.id = message_id
                    ) as last_communicated_at
                FROM
                    (
                        SELECT
                            *
                        FROM
                            customers
                        LEFT JOIN
                            (
                                SELECT
                                    MAX(id) as lead_id,
                                    leads.customer_id as lcid,
                                    leads.rating as lead_rating,
                                    MAX(leads.created_at) as lead_created,
                                    leads.status as lead_status
                                FROM
                                    leads
                                GROUP BY
                                    customer_id
                            ) AS leads
                        ON
                            customers.id = leads.lcid
                        LEFT JOIN
                            (
                                SELECT
                                    MAX(id) as order_id,
                                    orders.customer_id as ocid,
                                    MAX(orders.created_at) as order_created,
                                    orders.order_status as order_status
                                FROM
                                    orders ' . $orderWhereClause . '
                                GROUP BY
                                    customer_id
                            ) as orders
                        ON
                            customers.id = orders.ocid
                        LEFT JOIN
                            (
                                SELECT
                                    order_products.order_id as purchase_order_id,
                                    order_products.purchase_status
                                FROM
                                    order_products
                                GROUP BY
                                    purchase_order_id
                            ) as order_products
                        ON
                            orders.order_id = order_products.purchase_order_id
                        ' . $join . ' JOIN
                            (
                                SELECT
                                    MAX(id) as message_id,
                                    customer_id,
                                    message,
                                    MAX(created_at) as message_created_At
                                FROM
                                    chat_messages ' . $messageWhereClause . '
                                GROUP BY
                                    customer_id
                                ORDER BY
                                    chat_messages.created_at ' . $orderby . '
                            ) AS chat_messages
                        ON
                            customers.id = chat_messages.customer_id
                    ) AS customers
                WHERE
                    deleted_at IS NULL
                ) AND (
                    id IS NOT NULL
                )
                ' . $searchWhereClause . '
          ) AS customers
          ' . $filterWhereClause . $leadsWhereClause .
            $assignedWhereClause .
            $orderByClause;

        $leads_data = DB::select('
                      SELECT COUNT(*) AS total,
                      (SELECT mm1.status FROM leads mm1 WHERE mm1.id = lead_id) as lead_final_status
                       FROM customers

                      LEFT JOIN (
                        SELECT MAX(id) as lead_id, leads.customer_id as lcid, leads.rating as lead_rating, MAX(leads.created_at) as lead_created, leads.status as lead_status
                        FROM leads
                        GROUP BY customer_id
                      ) AS leads
                      ON customers.id = leads.lcid

                      WHERE (deleted_at IS NULL) AND (id IS NOT NULL)
                      GROUP BY lead_final_status;
  							');

        $ids_list = [];

        foreach ($customers as $customer) {
            if ($customer->id != null) {
                $ids_list[] = $customer->id;
            }
        }

        $currentPage  = LengthAwarePaginator::resolveCurrentPage();
        $perPage      = empty(Setting::get('pagination')) ? 25 : Setting::get('pagination');
        $currentItems = array_slice($customers, $perPage * ($currentPage - 1), $perPage);
        $customers    = new LengthAwarePaginator($currentItems, count($customers), $perPage, $currentPage, [
            'path' => LengthAwarePaginator::resolveCurrentPath(),
        ]);

        return [$customers, $ids_list, $leads_data];
    }

    public function customerstest(Request $request)
    {
        $instructions = Instruction::with('remarks')->orderBy('is_priority', 'DESC')->orderBy('created_at', 'DESC')->select(['id', 'instruction', 'customer_id', 'assigned_to', 'pending', 'completed_at', 'verified', 'is_priority', 'created_at'])->get()->groupBy('customer_id')->toArray();
        $orders       = Order::latest()->select(['id', 'customer_id', 'order_status', 'created_at'])->get()->groupBy('customer_id')->toArray();

        $term             = $request->input('term');
        $reply_categories = ReplyCategory::all();
        $api_keys         = ApiKey::select('number')->get();

        $orderby = 'desc';
        if ($request->orderby == '') {
            $orderby = 'asc';
        }

        $customers_all  = Customer::all();
        $customer_names = Customer::select(['name'])->get()->toArray();

        $category_suggestion = Category::attr(['name' => 'category[]', 'class' => 'form-control select-multiple', 'multiple' => 'multiple'])
            ->renderAsDropdown();

        $brands = Brand::all()->toArray();

        foreach ($customer_names as $name) {
            $search_suggestions[] = $name['name'];
        }

        $users_array = Helpers::getUserArray(User::all());

        $last_set_id = MessageQueue::max('group_id');

        $queues_total_count = MessageQueue::where('status', '!=', 1)->where('group_id', $last_set_id)->count();
        $queues_sent_count  = MessageQueue::where('sent', 1)->where('status', '!=', 1)->where('group_id', $last_set_id)->count();

        $term            = $request->input('term');
        $delivery_status = [
            'Follow up for advance',
            'Proceed without Advance',
            'Advance received',
            'Cancel',
            'Prepaid',
            'Product Shiped form Italy',
            'In Transist from Italy',
            'Product shiped to Client',
            'Delivered',
        ];

        $orderWhereClause  = '';
        $searchWhereClause = '';
        $filterWhereClause = '';

        if (! empty($term)) {
            $searchWhereClause = " AND (customers.name LIKE '%$term%' OR customers.phone LIKE '%$term%' OR customers.instahandler LIKE '%$term%')";
            $orderWhereClause  = "WHERE orders.order_id LIKE '%$term%'";
        }

        $orderby = 'DESC';

        if ($request->input('orderby')) {
            $orderby = 'ASC';
        }

        $sortby = 'communication';

        $sortBys = [
            'name'          => 'name',
            'email'         => 'email',
            'phone'         => 'phone',
            'instagram'     => 'instahandler',
            'lead_created'  => 'lead_created',
            'order_created' => 'order_created',
            'rating'        => 'rating',
            'communication' => 'communication',
        ];

        if (isset($sortBys[$request->input('sortby')])) {
            $sortby = $sortBys[$request->input('sortby')];
        }

        $start_time = $request->input('range_start') ?? '';
        $end_time   = $request->input('range_end') ?? '';

        if ($start_time != '' && $end_time != '') {
            $filterWhereClause = " WHERE last_communicated_at BETWEEN '" . $start_time . "' AND '" . $end_time . "'";
        }

        if ($request->type == 'unread' || $request->type == 'unapproved') {
            $join              = 'RIGHT';
            $type              = $request->type == 'unread' ? 0 : ($request->type == 'unapproved' ? 1 : 0);
            $orderByClause     = " ORDER BY is_flagged DESC, message_status ASC, `last_communicated_at` $orderby";
            $filterWhereClause = " WHERE message_status = $type";

            if ($start_time != '' && $end_time != '') {
                $filterWhereClause = " WHERE (last_communicated_at BETWEEN '" . $start_time . "' AND '" . $end_time . "') AND message_status = $type";
            }
        } else {
            if ($sortby === 'communication') {
                $join          = 'LEFT';
                $orderByClause = " ORDER BY is_flagged DESC, last_communicated_at $orderby";
            }
        }

        $new_customers = DB::select('
  									SELECT * FROM
                    (SELECT customers.id, customers.name, customers.phone, customers.is_blocked, customers.is_flagged, customers.is_error_flagged, customers.is_priority, customers.deleted_at,
                    lead_id, lead_status, lead_created, lead_rating,
                    order_id, order_status, order_created, purchase_status,
                    (SELECT mm3.id FROM chat_messages mm3 WHERE mm3.id = message_id) AS message_id,
                    (SELECT mm1.message FROM chat_messages mm1 WHERE mm1.id = message_id) as message,
                    (SELECT mm2.status FROM chat_messages mm2 WHERE mm2.id = message_id) AS message_status,
                    (SELECT mm4.sent FROM chat_messages mm4 WHERE mm4.id = message_id) AS message_type,
                    (SELECT mm2.created_at FROM chat_messages mm2 WHERE mm2.id = message_id) as last_communicated_at

                    FROM (
                      SELECT * FROM customers

                      LEFT JOIN (
                        SELECT MAX(id) as lead_id, leads.customer_id as lcid, leads.rating as lead_rating, MAX(leads.created_at) as lead_created, leads.status as lead_status
                        FROM leads
                        GROUP BY customer_id
                      ) AS leads
                      ON customers.id = leads.lcid

                      LEFT JOIN
                        (SELECT MAX(id) as order_id, orders.customer_id as ocid, MAX(orders.created_at) as order_created, orders.order_status as order_status FROM orders ' . $orderWhereClause . ' GROUP BY customer_id) as orders
                          LEFT JOIN (SELECT order_products.order_id as purchase_order_id, order_products.purchase_status FROM order_products) as order_products
                          ON orders.order_id = order_products.purchase_order_id

                      ' . $join . ' JOIN (SELECT MAX(id) as message_id, customer_id, message, MAX(created_at) as message_created_At FROM chat_messages GROUP BY customer_id ORDER BY created_at DESC) AS chat_messages
                      ON customers.id = chat_messages.customer_id


                    ) AS customers
                    WHERE (deleted_at IS NULL)
                    ' . $searchWhereClause . '
                    ' . $orderByClause . '
                  ) AS customers
                  ' . $filterWhereClause . ';
  							');

        $ids_list = [];
        foreach ($new_customers as $customer) {
            $ids_list[] = $customer->id;
        }

        $currentPage  = LengthAwarePaginator::resolveCurrentPage();
        $perPage      = Setting::get('pagination');
        $currentItems = array_slice($new_customers, $perPage * ($currentPage - 1), $perPage);

        $new_customers = new LengthAwarePaginator($currentItems, count($new_customers), $perPage, $currentPage, [
            'path' => LengthAwarePaginator::resolveCurrentPath(),
        ]);

        dd([
            'customers'           => $new_customers,
            'customers_all'       => $customers_all,
            'customer_ids_list'   => json_encode($ids_list),
            'users_array'         => $users_array,
            'instructions'        => $instructions,
            'term'                => $term,
            'orderby'             => $orderby,
            'type'                => $type,
            'queues_total_count'  => $queues_total_count,
            'queues_sent_count'   => $queues_sent_count,
            'search_suggestions'  => $search_suggestions,
            'reply_categories'    => $reply_categories,
            'orders'              => $orders,
            'api_keys'            => $api_keys,
            'category_suggestion' => $category_suggestion,
            'brands'              => $brands,
        ]);

        return view('customers.index', [
            'customers'           => $new_customers,
            'customers_all'       => $customers_all,
            'customer_ids_list'   => json_encode($ids_list),
            'users_array'         => $users_array,
            'instructions'        => $instructions,
            'term'                => $term,
            'orderby'             => $orderby,
            'type'                => $type,
            'queues_total_count'  => $queues_total_count,
            'queues_sent_count'   => $queues_sent_count,
            'search_suggestions'  => $search_suggestions,
            'reply_categories'    => $reply_categories,
            'orders'              => $orders,
            'api_keys'            => $api_keys,
            'category_suggestion' => $category_suggestion,
            'brands'              => $brands,
        ]);
    }

    public function search(Request $request)
    {
        $keyword  = $request->get('keyword');
        $messages = ChatMessage::where('message', 'LIKE', "%$keyword%")->where('customer_id', '>', 0)->groupBy('customer_id')->with('customer')->select(DB::raw('MAX(id) as message_id, customer_id, message'))->get()->map(function ($item) {
            return [
                'customer_id'   => $item->customer_id,
                'customer_name' => $item->customer->name,
                'message_id'    => $item->message_id,
                'message'       => $item->message,
            ];
        });

        return response()->json($messages);
    }

    public function loadMoreMessages(Request $request)
    {
        $limit = request()->get('limit', 3);

        $customer = Customer::find($request->customer_id);

        $chat_messages = $customer->whatsapps_all()->where('message', '!=', '')->skip(1)->take($limit)->get();

        $messages = [];

        foreach ($chat_messages as $chat_message) {
            $messages[] = $chat_message->message;
        }

        return response()->json([
            'messages' => $messages,
        ]);
    }

    public function sendAdvanceLink(Request $request, $id)
    {
        $customer = Customer::find($id);

        $options = [
            'trace'              => true,
            'connection_timeout' => 120,
            'wsdl_cache'         => WSDL_CACHE_NONE,
        ];

        $proxy     = new \SoapClient(config('magentoapi.url'), $options);
        $sessionId = $proxy->login(config('magentoapi.user'), config('magentoapi.password'));

        $errors = 0;

        $productData = [
            'price'         => $request->price_inr,
            'special_price' => $request->price_special,
        ];

        try {
            $result = $proxy->catalogProductUpdate($sessionId, 'QUICKADVANCEPAYMENT', $productData);

            $params = [
                'customer_id' => $customer->id,
                'number'      => null,
                'message'     => 'https://www.sololuxury.co.in/advance-payment-product.html',
                'user_id'     => Auth::id(),
                'approve'     => 0,
                'status'      => 1,
            ];

            ChatMessage::create($params);

            return response('success');
        } catch (Exception $e) {
            $errors++;

            return response($e->getMessage());
        }
    }

    public function initiateFollowup(Request $request, $id)
    {
        CommunicationHistory::create([
            'model_id'   => $id,
            'model_type' => Customer::class,
            'type'       => 'initiate-followup',
            'method'     => 'whatsapp',
        ]);

        return redirect()->route('customer.show', $id)->with('success', 'You have successfully initiated follow up sequence!');
    }

    public function stopFollowup(Request $request, $id)
    {
        $histories = CommunicationHistory::where('model_id', $id)->where('model_type', Customer::class)->where('type', 'initiate-followup')->where('is_stopped', 0)->get();

        foreach ($histories as $history) {
            $history->is_stopped = 1;
            $history->save();
        }

        return redirect()->route('customer.show', $id)->with('success', 'You have successfully stopped follow up sequence!');
    }

    public function export()
    {
        $customers = Customer::select(['name', 'phone'])->get()->toArray();

        return Excel::download(new CustomersExport($customers), 'customers.xlsx');
    }

    public function block(Request $request)
    {
        $customer = Customer::find($request->customer_id);

        if ($customer->is_blocked == 0) {
            $customer->is_blocked = 1;
        } else {
            $customer->is_blocked = 0;
        }

        $customer->save();

        return response()->json(['is_blocked' => $customer->is_blocked]);
    }

    public function flag(Request $request)
    {
        $customer = Customer::find($request->customer_id);

        if ($customer->is_flagged == 0) {
            $customer->is_flagged = 1;
        } else {
            $customer->is_flagged = 0;
        }

        $customer->save();

        return response()->json(['is_flagged' => $customer->is_flagged]);
    }

    public function addInWhatsappList(Request $request)
    {
        $customer = Customer::find($request->customer_id);

        if ($customer->in_w_list == 0) {
            $customer->in_w_list = 1;
        } else {
            $customer->in_w_list = 0;
        }

        $customer->save();

        return response()->json(['in_w_list' => $customer->in_w_list]);
    }

    public function prioritize(Request $request)
    {
        $customer = Customer::find($request->customer_id);

        if ($customer->is_priority == 0) {
            $customer->is_priority = 1;
        } else {
            $customer->is_priority = 0;
        }

        $customer->save();

        return response()->json(['is_priority' => $customer->is_priority]);
    }

    public function sendInstock(Request $request)
    {
        $customer = Customer::find($request->customer_id);

        $products = Product::where('supplier', 'In-stock')->latest()->get();

        $params = [
            'customer_id' => $customer->id,
            'number'      => null,
            'user_id'     => Auth::id(),
            'message'     => 'In Stock Products',
            'status'      => 1,
        ];

        $chat_message = ChatMessage::create($params);

        foreach ($products as $product) {
            $chat_message->attachMedia($product->getMedia(config('constants.media_tags'))->first(), config('constants.media_tags'));
        }

        return response('success');
    }

    public function load(Request $request)
    {
        $first_customer  = Customer::find($request->first_customer);
        $second_customer = Customer::find($request->second_customer);

        return response()->json([
            'first_customer'  => $first_customer,
            'second_customer' => $second_customer,
        ]);
    }

    public function merge(Request $request)
    {
        $this->validate($request, [
            'name'         => 'required|min:3|max:255',
            'email'        => 'required_without_all:phone,instahandler|nullable|email',
            'phone'        => 'required_without_all:email,instahandler|nullable|numeric|regex:/^[91]{2}/|digits:12|unique:customers,phone,' . $request->first_customer_id,
            'instahandler' => 'required_without_all:email,phone|nullable|min:3|max:255',
            'rating'       => 'required|numeric',
            'address'      => 'sometimes|nullable|min:3|max:255',
            'city'         => 'sometimes|nullable|min:3|max:255',
            'country'      => 'sometimes|nullable|min:3|max:255',
            'pincode'      => 'sometimes|nullable|max:6',
        ]);

        $first_customer = Customer::find($request->first_customer_id);

        $first_customer->name            = $request->name;
        $first_customer->email           = $request->email;
        $first_customer->phone           = $request->phone;
        $first_customer->whatsapp_number = $request->whatsapp_number;
        $first_customer->instahandler    = $request->instahandler;
        $first_customer->rating          = $request->rating;
        $first_customer->address         = $request->address;
        $first_customer->city            = $request->city;
        $first_customer->country         = $request->country;
        $first_customer->pincode         = $request->pincode;

        $first_customer->save();

        $chat_messages = ChatMessage::where('customer_id', $request->second_customer_id)->get();

        foreach ($chat_messages as $chat) {
            $chat->customer_id = $first_customer->id;
            $chat->save();
        }

        $messages = Message::where('customer_id', $request->second_customer_id)->get();

        foreach ($messages as $message) {
            $message->customer_id = $first_customer->id;
            $message->save();
        }

        $leads = ErpLeads::where('customer_id', $request->second_customer_id)->get();

        foreach ($leads as $lead) {
            $lead->customer_id = $first_customer->id;
            $lead->save();
        }

        $orders = Order::where('customer_id', $request->second_customer_id)->get();

        foreach ($orders as $order) {
            $order->customer_id = $first_customer->id;
            $order->save();
        }

        $instructions = Instruction::where('customer_id', $request->second_customer_id)->get();

        foreach ($instructions as $instruction) {
            $instruction->customer_id = $first_customer->id;
            $instruction->save();
        }

        $second_customer = Customer::find($request->second_customer_id);
        $second_customer->delete();

        return redirect()->route('customer.index');
    }

    public function import(Request $request)
    {
        $this->validate($request, [
            'file' => 'required|mimes:xls,xlsx',
        ]);

        (new CustomerImport)->queue($request->file('file'));

        return redirect()->back()->with('success', 'Customers are being imported in the background');
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        $solo_numbers = (new SoloNumbers)->all();

        return view('customers.create', [
            'solo_numbers' => $solo_numbers,
        ]);
    }

    /**
     * Store a newly created resource in storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $this->validate($request, [
            'name'         => 'required|min:3|max:255',
            'email'        => 'required_without_all:phone,instahandler|nullable|email',
            'phone'        => 'required_without_all:email,instahandler|nullable|numeric|digits:12|unique:customers',
            'instahandler' => 'required_without_all:email,phone|nullable|min:3|max:255',
            'rating'       => 'required|numeric',
            'address'      => 'sometimes|nullable|min:3|max:255',
            'city'         => 'sometimes|nullable|min:3|max:255',
            'country'      => 'sometimes|nullable|min:2|max:255',
            'pincode'      => 'sometimes|nullable|max:6',
        ]);

        $customer                   = new Customer;
        $customer->store_website_id = ! empty($request->store_website_id) ? $request->store_website_id : '';
        $customer->name             = $request->name;
        $customer->email            = $request->email;
        $customer->phone            = $request->phone;
        if (empty($request->whatsapp_number)) {
            //get default whatsapp number for vendor from whatsapp config
            $task_info = DB::table('whatsapp_configs')
                ->select('*')
                ->whereRaw('find_in_set(' . self::DEFAULT_FOR . ',default_for)')
                ->first();

            $data['whatsapp_number'] = $task_info->number;
        }

        $customer->whatsapp_number = $request->whatsapp_number;
        $customer->instahandler    = $request->instahandler;
        $customer->rating          = $request->rating;
        $customer->address         = $request->address;
        $customer->city            = $request->city;
        $customer->country         = $request->country;
        $customer->pincode         = $request->pincode;

        $customer->save();

        return redirect()->back()->with('success', 'You have successfully added new customer!');
    }

    public function addNote($id, Request $request)
    {
        $customer = Customer::findOrFail($id);
        $notes    = $customer->notes;
        if (! is_array($notes)) {
            $notes = [];
        }

        $notes[]         = $request->get('note');
        $customer->notes = $notes;
        $customer->save();

        return response()->json([
            'status' => 'success',
        ]);
    }

    /**
     * Display the specified resource.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        $customer               = Customer::with(['call_recordings', 'orders', 'leads', 'facebookMessages'])->where('id', $id)->first();
        $customers              = Customer::select(['id', 'name', 'email', 'phone', 'instahandler'])->get();
        $emails                 = [];
        $lead_status            = (new status)->all();
        $users_array            = Helpers::getUserArray(User::all());
        $brands                 = Brand::all()->toArray();
        $reply_categories       = ReplyCategory::all();
        $instruction_categories = InstructionCategory::all();
        $instruction_replies    = Reply::where('model', 'Instruction')->get();
        $order_status_report    = OrderStatuses::all();
        $purchase_status        = (new PurchaseStatus)->all();
        $solo_numbers           = (new SoloNumbers)->all();
        $api_keys               = ApiKey::select(['number'])->get();
        $broadcastsNumbers      = collect(\DB::select('select number from whatsapp_configs where is_customer_support = 0'))->pluck('number', 'number')->toArray();
        $suppliers              = Supplier::select(['id', 'supplier'])
            ->whereRaw('suppliers.id IN (SELECT product_suppliers.supplier_id FROM product_suppliers)')->get();
        $category_suggestion = Category::attr(['name' => 'category[]', 'class' => 'form-control select-multiple', 'multiple' => 'multiple'])
            ->renderAsDropdown();

        $facebookMessages = null;
        if (@$customer->facebook_id) {
            $facebookMessages = $customer->facebookMessages()->get();
        }

        return view('customers.show', [
            'customer'               => $customer,
            'customers'              => $customers,
            'lead_status'            => $lead_status,
            'brands'                 => $brands,
            'users_array'            => $users_array,
            'reply_categories'       => $reply_categories,
            'instruction_categories' => $instruction_categories,
            'instruction_replies'    => $instruction_replies,
            'order_status_report'    => $order_status_report,
            'purchase_status'        => $purchase_status,
            'solo_numbers'           => $solo_numbers,
            'api_keys'               => $api_keys,
            'emails'                 => $emails,
            'category_suggestion'    => $category_suggestion,
            'suppliers'              => $suppliers,
            'facebookMessages'       => $facebookMessages,
            'broadcastsNumbers'      => $broadcastsNumbers,
        ]);
    }

    public function exportCommunication($id)
    {
        $messages = ChatMessage::where('customer_id', $id)->orderBy('created_at', 'DESC')->get();

        $html = view('customers.chat_export', compact('messages'));

        $pdf = new Dompdf();
        $pdf->loadHtml($html);
        $pdf->render();
        $pdf->stream('orders.pdf');
    }

    public function postShow(Request $request, $id)
    {
        $customer          = Customer::with(['call_recordings', 'orders', 'leads', 'facebookMessages'])->where('id', $id)->first();
        $storeActiveNumber = StoreWebsiteTwilioNumber::select('twilio_active_numbers.account_sid as a_sid', 'twilio_active_numbers.phone_number as phone_number')
            ->join('twilio_active_numbers', 'twilio_active_numbers.id', '=', 'store_website_twilio_numbers.twilio_active_number_id')
            ->where('store_website_twilio_numbers.store_website_id', $customer->store_website_id)
            ->first(); // Get store website active number assigned with customer
        $customers = Customer::select(['id', 'name', 'email', 'phone', 'instahandler'])->get();

        $searchedMessages = null;
        if ($request->get('sm')) {
            $searchedMessages = ChatMessage::where('customer_id', $id)->where('message', 'LIKE', '%' . $request->get('sm') . '%')->get();
        }

        $customer_ids = json_decode($request->customer_ids ?? '[0]');
        $key          = array_search($id, $customer_ids);

        if ($key != 0) {
            $previous_customer_id = $customer_ids[$key - 1];
        } else {
            $previous_customer_id = 0;
        }

        if ($key == (count($customer_ids) - 1)) {
            $next_customer_id = 0;
        } else {
            $next_customer_id = $customer_ids[$key + 1];
        }

        $emails                 = [];
        $lead_status            = (new status)->all();
        $users_array            = Helpers::getUserArray(User::all());
        $brands                 = Brand::all()->toArray();
        $reply_categories       = ReplyCategory::orderby('id', 'DESC')->get();
        $instruction_categories = InstructionCategory::all();
        $instruction_replies    = Reply::where('model', 'Instruction')->get();
        $order_status_report    = OrderStatuses::all();
        $purchase_status        = (new PurchaseStatus)->all();
        $solo_numbers           = (new SoloNumbers)->all();
        $api_keys               = ApiKey::select(['number'])->get();
        $suppliers              = Supplier::select(['id', 'supplier'])->get();
        $broadcastsNumbers      = collect(\DB::select('select number from whatsapp_configs where is_customer_support = 0'))->pluck('number', 'number')->toArray();
        $category_suggestion    = Category::attr(['name' => 'category[]', 'class' => 'form-control select-multiple', 'multiple' => 'multiple'])
            ->renderAsDropdown();

        $facebookMessages = null;
        if ($customer->facebook_id) {
            $facebookMessages = $customer->facebookMessages()->get();
        }

        return view('customers.show', [
            'customer_ids'           => json_encode($customer_ids),
            'previous_customer_id'   => $previous_customer_id,
            'next_customer_id'       => $next_customer_id,
            'customer'               => $customer,
            'customers'              => $customers,
            'lead_status'            => $lead_status,
            'brands'                 => $brands,
            'users_array'            => $users_array,
            'reply_categories'       => $reply_categories,
            'instruction_categories' => $instruction_categories,
            'instruction_replies'    => $instruction_replies,
            'order_status_report'    => $order_status_report,
            'purchase_status'        => $purchase_status,
            'solo_numbers'           => $solo_numbers,
            'api_keys'               => $api_keys,
            'emails'                 => $emails,
            'category_suggestion'    => $category_suggestion,
            'suppliers'              => $suppliers,
            'facebookMessages'       => $facebookMessages,
            'searchedMessages'       => $searchedMessages,
            'broadcastsNumbers'      => $broadcastsNumbers,
            'storeActiveNumber'      => $storeActiveNumber,
        ]);
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function emailInbox(Request $request)
    {
        $inbox = 'to';
        if ($request->type != 'inbox') {
            $inbox = 'from';
        }

        $customer = Customer::find($request->customer_id);

        $emails = Email::select()->where($inbox, $customer->email)->get();

        $count = count($emails);
        foreach ($emails as $key => $email) {
            $emails_array[$count + $key]['id']      = $email->id;
            $emails_array[$count + $key]['subject'] = $email->subject;
            $emails_array[$count + $key]['type']    = $email->type;
            $emails_array[$count + $key]['message'] = $email->message;
            $emails_array[$count + $key]['date']    = $email->created_at;
        }
        $emails_array = array_values(Arr::sort($emails_array, function ($value) {
            return $value['date'];
        }));
        $emails_array = array_reverse($emails_array);

        $currentPage  = LengthAwarePaginator::resolveCurrentPage();
        $perPage      = 5;
        $currentItems = array_slice($emails_array, $perPage * ($currentPage - 1), $perPage);
        $emails       = new LengthAwarePaginator($currentItems, count($emails_array), $perPage, $currentPage, ['path' => LengthAwarePaginator::resolveCurrentPath()]);
        $view         = view('customers.email', [
            'emails' => $emails,
            'type'   => $request->type,
        ])->render();

        return response()->json(['emails' => $view]);
    }

    public function emailFetch(Request $request)
    {
        $email   = Email::find($request->id);
        $content = $email->message;

        if ($email->template == 'customer-simple') {
            $content = (new CustomerEmail($email->subject, $email->message, $email->from))->render();
        } else {
            if ($email->template == 'refund-processed') {
                $details = json_decode($email->additional_data, true);

                $content = (new RefundProcessed($details['order_id'], $details['product_names']))->render();
            } else {
                if ($email->template == 'order-confirmation') {
                    $order = Order::find($email->additional_data);

                    $content = (new OrderConfirmation($order))->render();
                } else {
                    if ($email->template == 'advance-receipt') {
                        $order = Order::find($email->additional_data);

                        $content = (new AdvanceReceipt($order))->render();
                    } else {
                        if ($email->template == 'issue-credit') {
                            $customer = Customer::find($email->model_id);

                            $content = (new IssueCredit($customer))->render();
                        } else {
                            $content = 'No Template';
                        }
                    }
                }
            }
        }

        return response()->json(['email' => $content]);
    }

    public function emailSend(Request $request)
    {
        $this->validate($request, [
            'subject' => 'required|min:3|max:255',
            'message' => 'required',
        ]);

        $customer = Customer::find($request->customer_id);

        //Store ID Email
        $emailAddressDetails = EmailAddress::select()->where(['store_website_id' => $customer->store_website_id])->first();

        if ($request->order_id != '') {
            $order_data = json_encode(['order_id' => $request->order_id]);
        }

        $emailClass = (new CustomerEmail($request->subject, $request->message, $emailAddressDetails->from_address))->build();

        $email = Email::create([
            'model_id'         => $customer->id,
            'model_type'       => Customer::class,
            'from'             => $emailAddressDetails->from_address,
            'to'               => $customer->email,
            'subject'          => $request->subject,
            'message'          => $emailClass->render(),
            'template'         => 'customer-simple',
            'additional_data'  => isset($order_data) ? $order_data : '',
            'status'           => 'pre-send',
            'store_website_id' => null,
        ]);
       
        \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');

        return redirect()->route('customer.show', $customer->id)->withSuccess('You have successfully sent an email!');
    }

    public function edit($id)
    {
        $customer     = Customer::find($id);
        $solo_numbers = (new SoloNumbers)->all();

        return view('customers.edit', [
            'customer'     => $customer,
            'solo_numbers' => $solo_numbers,
        ]);
    }

    public function updateReminder(Request $request)
    {
        $customer                      = Customer::find($request->get('customer_id'));
        $customer->frequency           = $request->get('frequency');
        $customer->reminder_message    = $request->get('message');
        $customer->reminder_from       = $request->get('reminder_from', '0000-00-00 00:00');
        $customer->reminder_last_reply = $request->get('reminder_last_reply', 0);
        $customer->save();

        return response()->json([
            'success',
        ]);
    }

    /**
     * Update the specified resource in storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        $customer = Customer::find($id);

        $this->validate($request, [
            'name'          => 'required|min:3|max:255',
            'email'         => 'required_without_all:phone,instahandler|nullable|email',
            'phone'         => 'required_without_all:email,instahandler|nullable|unique:customers,phone,' . $id,
            'instahandler'  => 'required_without_all:email,phone|nullable|min:3|max:255',
            'rating'        => 'required|numeric',
            'address'       => 'sometimes|nullable|min:3|max:255',
            'city'          => 'sometimes|nullable|min:3|max:255',
            'country'       => 'sometimes|nullable|min:2|max:255',
            'pincode'       => 'sometimes|nullable|max:6',
            'shoe_size'     => 'sometimes|nullable',
            'clothing_size' => 'sometimes|nullable',
            'gender'        => 'sometimes|nullable|string',
            'credit'        => 'sometimes|nullable|numeric',
        ]);

        $customer->name  = $request->name;
        $customer->email = $request->email;
        $customer->phone = $request->phone;
        if ($request->get('whatsapp_number', false)) {
            $customer->whatsapp_number = $request->whatsapp_number;
        }
        $customer->instahandler   = $request->instahandler;
        $customer->rating         = $request->rating;
        $customer->do_not_disturb = $request->do_not_disturb == 'on' ? 1 : 0;
        $customer->is_blocked     = $request->is_blocked == 'on' ? 1 : 0;
        $customer->address        = $request->address;
        $customer->city           = $request->city;
        $customer->country        = $request->country;
        $customer->pincode        = $request->pincode;
        $customer->credit         = $request->credit;
        $customer->shoe_size      = $request->shoe_size;
        $customer->clothing_size  = $request->clothing_size;
        $customer->gender         = $request->gender;

        $customer->save();

        if ($request->do_not_disturb == 'on') {
            \Log::channel('customerDnd')->debug('(Customer ID ' . $customer->id . ' line ' . $customer->name . ' ' . $customer->number . ': Added To DND');
            MessageQueue::where('customer_id', $customer->id)->delete();
        }

        return redirect()->route('customer.show', $id)->with('success', 'You have successfully updated the customer!');
    }

    public function updateNumber(Request $request, $id)
    {
        $customer = Customer::find($id);

        $customer->whatsapp_number = $request->whatsapp_number;
        $customer->save();

        return response('success');
    }

    public function updateDnd(Request $request, $id)
    {
        $customer = Customer::find($id);

        if ($customer->do_not_disturb == 1) {
            $customer->do_not_disturb = 0;
        } else {
            $customer->do_not_disturb = 1;
        }

        $customer->save();

        if ($request->do_not_disturb == 1) {
            \Log::channel('customerDnd')->debug('(Customer ID ' . $customer->id . ' line ' . $customer->name . ' ' . $customer->number . ': Added To DND');
            MessageQueue::where('customer_id', $customer->id)->delete();
        }

        return response()->json([
            'do_not_disturb' => $customer->do_not_disturb,
        ]);
    }

    public function updatePhone(Request $request, $id)
    {
        $this->validate($request, [
            'phone' => 'required|numeric|unique:customers,phone',
        ]);

        $customer = Customer::find($id);

        $customer->phone = $request->phone;
        $customer->save();

        return response('success');
    }

    public function issueCredit(Request $request)
    {
        $customer = Customer::find($request->customer_id);

        $emailClass = (new \App\Mails\Manual\SendIssueCredit($customer))->build();

        $email = Email::create([
            'model_id'        => $customer->id,
            'model_type'      => Customer::class,
            'from'            => $emailClass->fromMailer,
            'to'              => $customer->email,
            'subject'         => $emailClass->subject,
            'message'         => $emailClass->render(),
            'template'        => 'issue-credit',
            'additional_data' => '',
            'status'          => 'pre-send',
        ]);
       
        \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');

        $message     = "Dear $customer->name, this is to confirm that an amount of Rs. $customer->credit - is credited with us against your previous order. You can use this credit note for reference on your next purchase. Thanks & Regards, Solo Luxury Team";
        $requestData = new Request();
        $requestData->setMethod('POST');
        $requestData->request->add(['customer_id' => $customer->id, 'message' => $message]);

        app(\App\Http\Controllers\WhatsAppController::class)->sendMessage($requestData, 'customer');

        CommunicationHistory::create([
            'model_id'   => $customer->id,
            'model_type' => Customer::class,
            'type'       => 'issue-credit',
            'method'     => 'whatsapp',
        ]);
    }

    public function sendSuggestion(Request $request)
    {
        $customer = Customer::find($request->customer_id);
        $params   = [
            'customer_id' => $customer->id,
            'number'      => $request->number,
            'brands'      => '',
            'categories'  => '',
            'size'        => '',
            'supplier'    => '',
        ];

        if ($request->brand[0] != null) {
            $products = Product::whereIn('brand', $request->brand);

            $params['brands'] = json_encode($request->brand);
        }

        if ($request->category[0] != null && $request->category[0] != 1) {
            $categorySel      = $request->category;
            $category         = \App\Category::whereIn('parent_id', $categorySel)->get()->pluck('id')->toArray();
            $categorySelected = array_merge($categorySel, $category);
            if ($request->brand[0] != null) {
                $products = $products->whereIn('category', $categorySelected);
            } else {
                $products = Product::whereIn('category', $categorySelected);
            }

            $params['categories'] = json_encode($request->category);
        }

        if ($request->size[0] != null) {
            if ($request->brand[0] != null || ($request->category[0] != 1 && $request->category[0] != null)) {
                $products = $products->where(function ($query) use ($request) {
                    foreach ($request->size as $size) {
                        $query->orWhere('size', 'LIKE', "%$size%");
                    }

                    return $query;
                });
            } else {
                $products = Product::where(function ($query) use ($request) {
                    foreach ($request->size as $size) {
                        $query->orWhere('size', 'LIKE', "%$size%");
                    }

                    return $query;
                });
            }

            $params['size'] = json_encode($request->size);
        }

        if ($request->supplier[0] != null) {
            if ($request->brand[0] != null || ($request->category[0] != 1 && $request->category[0] != null) || $request->size[0] != null) {
                $products = $products->join('product_suppliers as ps', 'ps.sku', 'products.sku');
                $products = $products->whereIn('ps.supplier_id', $request->supplier);
                $products = $products->groupBy('products.id');
            } else {
                $products = $products->join('product_suppliers as ps', 'ps.sku', 'products.sku');
                $products = $products->whereIn('ps.supplier_id', $request->supplier);
                $products = $products->groupBy('products.id');
            }

            $params['supplier'] = json_encode($request->supplier);
        }

        if ($request->brand[0] == null && ($request->category[0] == 1 || $request->category[0] == null) && $request->size[0] == null && $request->supplier[0] == null) {
            $products = (new Product)->newQuery();
        }

        $price = explode(',', $request->get('price'));

        $products = $products->whereBetween('price_inr_special', [$price[0], $price[1]]);

        $products = $products->where('category', '!=', 1)->select(['products.*'])->latest()->take($request->number)->get();

        if ($customer->suggestion) {
            $suggestion = SuggestedProduct::find($customer->suggestion->id);
            $suggestion->update($params);
        } else {
            $suggestion = SuggestedProduct::create($params);
        }

        if (count($products) > 0) {
            $params = [
                'number'      => null,
                'user_id'     => Auth::id(),
                'approved'    => 0,
                'status'      => 1,
                'message'     => 'Suggested images',
                'customer_id' => $customer->id,
            ];

            $count = 0;

            foreach ($products as $product) {
                if (! $product->suggestions->contains($suggestion->id)) {
                    if ($image = $product->getMedia(config('constants.attach_image_tag'))->first()) {
                        if ($count == 0) {
                            $params['status']            = ChatMessage::CHAT_SUGGESTED_IMAGES;
                            $chat_message                = ChatMessage::create($params);
                            $suggestion->chat_message_id = $chat_message->id;
                            $suggestion->save();
                        }

                        $chat_message->attachMedia($image->getKey(), config('constants.media_tags'));
                        $count++;
                    }

                    $product->suggestions()->attach($suggestion->id);
                }
            }
        }

        if ($request->ajax()) {
            return response()->json(['code' => 200, 'data' => [], 'message' => 'Your records has been update successfully']);
        }

        return redirect()->route('customer.show', $customer->id)->withSuccess('You have successfully created suggested message');
    }

    public function sendScraped(Request $request)
    {
        $customer = Customer::find($request->customer_id);
        $products = new Product;
        if ($request->brand[0] != null) {
            $products = $products->whereIn('brand', $request->brand);
        }

        if ($request->category[0] != null && $request->category[0] != 1) {
            $products = $products->whereIn('category', $request->category);
        }
        $total_images = $request->total_images;
        if (! $total_images) {
            $total_images = 20;
        }
        $products = $products->where('is_scraped', 1)->where('is_without_image', 0)->where('category', '!=', 1)->orderBy(DB::raw('products.created_at'), 'DESC')->take($total_images)->get();
        if (count($products) > 0) {
            $params = [
                'number'      => null,
                'user_id'     => Auth::id(),
                'approved'    => 0,
                'status'      => 1,
                'message'     => 'Suggested images',
                'customer_id' => $customer->id,
            ];

            $count = 0;

            foreach ($products as $product) {
                if ($image = $product->getMedia(config('constants.media_tags'))->first()) {
                    if ($count == 0) {
                        $chat_message = ChatMessage::create($params);
                    }

                    $chat_message->attachMedia($image->getKey(), config('constants.media_tags'));
                    $count++;
                }
            }
        }

        if ($request->ajax()) {
            return response('success');
        }

        return redirect()->route('customer.show', $customer->id)->withSuccess('You have successfully created suggested message');
    }

    public function attachAll(Request $request)
    {
        $data       = [];
        $term       = $request->input('term');
        $roletype   = $request->input('roletype');
        $model_type = $request->input('model_type');

        $data['term']     = $term;
        $data['roletype'] = $roletype;

        $doSelection = $request->input('doSelection');

        if (! empty($doSelection)) {
            $data['doSelection'] = true;
            $data['model_id']    = $request->input('model_id');
            $data['model_type']  = $request->input('model_type');

            $data['selected_products'] = ProductController::getSelectedProducts($data['model_type'], $data['model_id']);
        }

        if ($request->brand[0] != null) {
            $productQuery = (new Product())->newQuery()
                ->latest()->whereIn('brand', $request->brand);
        }

        if ($request->color[0] != null) {
            if ($request->brand[0] != null) {
                $productQuery = $productQuery->whereIn('color', $request->color);
            } else {
                $productQuery = (new Product())->newQuery()
                    ->latest()->whereIn('color', $request->color);
            }
        }

        if ($request->category[0] != null && $request->category[0] != 1) {
            $category_children = [];

            foreach ($request->category as $category) {
                $is_parent = Category::isParent($category);

                if ($is_parent) {
                    $childs = Category::find($category)->childs()->get();

                    foreach ($childs as $child) {
                        $is_parent = Category::isParent($child->id);

                        if ($is_parent) {
                            $children = Category::find($child->id)->childs()->get();

                            foreach ($children as $chili) {
                                array_push($category_children, $chili->id);
                            }
                        } else {
                            array_push($category_children, $child->id);
                        }
                    }
                } else {
                    array_push($category_children, $category);
                }
            }

            if ($request->brand[0] != null || $request->color[0] != null) {
                $productQuery = $productQuery->whereIn('category', $category_children);
            } else {
                $productQuery = (new Product())->newQuery()
                    ->latest()->whereIn('category', $category_children);
            }
        }

        if ($request->price != null) {
            $exploded = explode(',', $request->price);
            $min      = $exploded[0];
            $max      = $exploded[1];

            if ($min != '0' || $max != '400000') {
                if ($request->brand[0] != null || $request->color[0] != null || ($request->category[0] != null && $request->category[0] != 1)) {
                    $productQuery = $productQuery->whereBetween('price_inr_special', [$min, $max]);
                } else {
                    $productQuery = (new Product())->newQuery()
                        ->latest()->whereBetween('price_inr_special', [$min, $max]);
                }
            }
        }

        if ($request->supplier[0] != null) {
            $suppliers_list = implode(',', $request->supplier);

            if ($request->brand[0] != null || $request->color[0] != null || ($request->category[0] != null && $request->category[0] != 1) || $request->price != '0,400000') {
                $productQuery = $productQuery->with('Suppliers')->whereRaw("products.id in (SELECT product_id FROM product_suppliers WHERE supplier_id IN ($suppliers_list))");
            } else {
                $productQuery = (new Product())->newQuery()->with('Suppliers')
                    ->latest()->whereRaw("products.id IN (SELECT product_id FROM product_suppliers WHERE supplier_id IN ($suppliers_list))");
            }
        }

        if (trim($request->size) != '') {
            if ($request->brand[0] != null || $request->color[0] != null || ($request->category[0] != null && $request->category[0] != 1) || $request->price != '0,400000' || $request->supplier[0] != null) {
                $productQuery = $productQuery->whereNotNull('size')->where('size', 'LIKE', "%$request->size%");
            } else {
                $productQuery = (new Product())->newQuery()
                    ->latest()->whereNotNull('size')->where('size', 'LIKE', "%$request->size%");
            }
        }

        if ($request->location[0] != null) {
            if ($request->brand[0] != null || $request->color[0] != null || ($request->category[0] != null && $request->category[0] != 1) || $request->price != '0,400000' || $request->supplier[0] != null || trim($request->size) != '') {
                $productQuery = $productQuery->whereIn('location', $request->location);
            } else {
                $productQuery = (new Product())->newQuery()
                    ->latest()->whereIn('location', $request->location);
            }

            $data['location'] = $request->location[0];
        }

        if ($request->type[0] != null) {
            if ($request->brand[0] != null || $request->color[0] != null || ($request->category[0] != null && $request->category[0] != 1) || $request->price != '0,400000' || $request->supplier[0] != null || trim($request->size) != '' || $request->location[0] != null) {
                if (count($request->type) > 1) {
                    $productQuery = $productQuery->where('is_scraped', 1)->orWhere('status', 2);
                } else {
                    if ($request->type[0] == 'scraped') {
                        $productQuery = $productQuery->where('is_scraped', 1);
                    } elseif ($request->type[0] == 'imported') {
                        $productQuery = $productQuery->where('status', 2);
                    } else {
                        $productQuery = $productQuery->where('isUploaded', 1);
                    }
                }
            } else {
                if (count($request->type) > 1) {
                    $productQuery = (new Product())->newQuery()
                        ->latest()->where('is_scraped', 1)->orWhere('status', 2);
                } else {
                    if ($request->type[0] == 'scraped') {
                        $productQuery = (new Product())->newQuery()
                            ->latest()->where('is_scraped', 1);
                    } elseif ($request->type[0] == 'imported') {
                        $productQuery = (new Product())->newQuery()
                            ->latest()->where('status', 2);
                    } else {
                        $productQuery = (new Product())->newQuery()
                            ->latest()->where('isUploaded', 1);
                    }
                }
            }

            $data['type'] = $request->type[0];
        }

        if ($request->date != '') {
            if ($request->brand[0] != null || $request->color[0] != null || ($request->category[0] != null && $request->category[0] != 1) || $request->price != '0,400000' || $request->supplier[0] != null || trim($request->size) != '' || $request->location[0] != null || $request->type[0] != null) {
                if ($request->type[0] != null && $request->type[0] == 'uploaded') {
                    $productQuery = $productQuery->where('is_uploaded_date', 'LIKE', "%$request->date%");
                } else {
                    $productQuery = $productQuery->where('created_at', 'LIKE', "%$request->date%");
                }
            } else {
                $productQuery = (new Product())->newQuery()
                    ->latest()->where('created_at', 'LIKE', "%$request->date%");
            }
        }

        if ($request->quick_product === 'true') {
            $productQuery = (new Product())->newQuery()
                ->latest()->where('quick_product', 1);
        }

        if (trim($term) != '') {
            $productQuery = (new Product())->newQuery()
                ->latest()
                ->orWhere('sku', 'LIKE', "%$term%")
                ->orWhere('id', 'LIKE', "%$term%");

            if ($term == -1) {
                $productQuery = $productQuery->orWhere('isApproved', -1);
            }

            if (Brand::where('name', 'LIKE', "%$term%")->first()) {
                $brand_id     = Brand::where('name', 'LIKE', "%$term%")->first()->id;
                $productQuery = $productQuery->orWhere('brand', 'LIKE', "%$brand_id%");
            }

            if ($category = Category::where('title', 'LIKE', "%$term%")->first()) {
                $category_id  = $category = Category::where('title', 'LIKE', "%$term%")->first()->id;
                $productQuery = $productQuery->orWhere('category', CategoryController::getCategoryIdByName($term));
            }

            if (! empty($stage->getIDCaseInsensitive($term))) {
                $productQuery = $productQuery->orWhere('stage', $stage->getIDCaseInsensitive($term));
            }

            if (! (\Auth::user()->hasRole(['Admin', 'Supervisors']))) {
                $productQuery = $productQuery->where('stage', '>=', $stage->get($roletype));
            }

            if ($roletype != 'Selection' && $roletype != 'Searcher') {
                $productQuery = $productQuery->whereNull('dnf');
            }
        } else {
            if ($request->brand[0] == null && $request->color[0] == null && ($request->category[0] == null || $request->category[0] == 1) && $request->price == '0,400000' && $request->supplier[0] == null && trim($request->size) == '' && $request->date == '' && $request->type == null && $request->location[0] == null) {
                $productQuery = (new Product())->newQuery()->latest();
            }
        }

        if ($request->ids[0] != null) {
            $productQuery = (new Product())->newQuery()
                ->latest()->whereIn('id', $request->ids);
        }

        $data['products'] = $productQuery->select(['id', 'sku', 'size', 'price_inr_special', 'brand', 'supplier', 'isApproved', 'stage', 'status', 'is_scraped', 'created_at'])->get();

        $params = [
            'user_id'     => Auth::id(),
            'number'      => null,
            'status'      => 1,
            'customer_id' => $request->customer_id,
        ];

        $chat_message = ChatMessage::create($params);

        $mediaList = [];

        foreach ($data['products'] as $product) {
            if ($product->hasMedia(config('constants.media_tags'))) {
                $mediaList[] = $product->getMedia(config('constants.media_tags'));
            }
        }

        foreach (array_unique($mediaList) as $list) {
            try {
                $chat_message->attachMedia($list, config('constants.media_tags'));
            } catch (Exception $e) {
            }
        }

        return redirect()->route('customer.show', $request->customer_id);
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        $customer = Customer::find($id);

        if (count($customer->leads) > 0 || count($customer->orders) > 0) {
            return redirect()->route('customer.index')->with('warning', 'You have related leads or orders to this customer');
        }

        $customer->delete();

        return redirect()->route('customer.index')->with('success', 'You have successfully deleted a customer');
    }

    /**
     * using for creating file and save into the on given folder path
     */
    public function testImage()
    {
        $path     = request()->get('path');
        $text     = request()->get('text');
        $color    = request()->get('color', 'FFF');
        $fontSize = request()->get('size', 42);

        $img = \IImage::make(public_path($path));
        // use callback to define details
        $img->text($text, 5, 50, function ($font) use ($fontSize, $color) {
            $font->file(public_path('fonts/Arial.ttf'));
            $font->size($fontSize);
            $font->color('#' . $color);
            $font->align('top');
        });

        return $img->response();
    }

    public function broadcast()
    {
        $customerId = request()->get('customer_id', 0);

        $pendingBroadcast = \App\MessageQueue::where('customer_id', $customerId)
            ->where('sent', 0)->orderBy('group_id', 'asc')->groupBy('group_id')->select('group_id as id')->get()->toArray();
        // last two
        $lastBroadcast = \App\MessageQueue::where('customer_id', $customerId)
            ->where('sent', 1)->orderBy('group_id', 'desc')->groupBy('group_id')->limit(2)->select('group_id as id')->get()->toArray();

        $allRequest = array_merge($pendingBroadcast, $lastBroadcast);

        if (! empty($allRequest)) {
            usort($allRequest, function ($a, $b) {
                $a = $a['id'];
                $b = $b['id'];

                if ($a == $b) {
                    return 0;
                }

                return ($a < $b) ? -1 : 1;
            });
        }

        return response()->json(['code' => 1, 'data' => $allRequest]);
    }

    public function broadcastSendPrice()
    {
        $broadcastId     = request()->get('broadcast_id', 0);
        $customerId      = request()->get('customer_id', 0);
        $productsToBeRun = explode(',', request()->get('product_to_be_run', ''));

        $products = [];
        if (! empty(array_filter($productsToBeRun))) {
            foreach ($productsToBeRun as $prd) {
                if (is_numeric($prd)) {
                    $products[] = $prd;
                }
            }
        }

        $customer = Customer::where('id', $customerId)->first();

        if ($customer && $customer->do_not_disturb == 0) {
            $this->dispatchBroadSendPrice($customer, array_unique($products));
        }

        return response()->json(['code' => 1, 'message' => 'Broadcast run successfully']);
    }

    public function dispatchBroadSendPrice($customer, $product_ids, $dimention = false)
    {
        if (! empty($customer) && is_numeric($customer->phone)) {
            \Log::info('Customer with phone found for customer id : ' . $customer->id . ' and product ids ' . json_encode($product_ids));
            if (! empty(array_filter($product_ids))) {
                foreach ($product_ids as $pid) {
                    $product = \App\Product::where('id', $pid)->first();

                    $quick_lead = ErpLeads::create([
                        'customer_id'      => $customer->id,
                        'lead_status_id'   => 3,
                        'store_website_id' => 15,
                        'product_id'       => $pid,
                        'brand_id'         => $product ? $product->brand : null,
                        'category_id'      => $product ? $product->category : null,
                        'brand_segment'    => $product && $product->brands ? $product->brands->brand_segment : null,
                        'color'            => $customer->color,
                        'size'             => $customer->size,
                        'type'             => 'dispatch-send-price',
                        'created_at'       => Carbon::now(),
                    ]);
                }

                $requestData = new Request();
                $requestData->setMethod('POST');
                if ($dimention) {
                    $requestData->request->add(['customer_id' => $customer->id, 'dimension' => true, 'lead_id' => $quick_lead->id, 'selected_product' => $product_ids]);
                } else {
                    $requestData->request->add(['customer_id' => $customer->id, 'lead_id' => $quick_lead->id, 'selected_product' => $product_ids]);
                }

                $res = app(\App\Http\Controllers\LeadsController::class)->sendPrices($requestData, new GuzzleClient);

                return true;
            }

            return false;
        }
    }

    public function broadcastDetails()
    {
        $broadcastId = request()->get('broadcast_id', 0);
        $customerId  = request()->get('customer_id', 0);

        $messages = \App\MessageQueue::where('group_id', $broadcastId)->where('customer_id', $customerId)->get();

        $response = [];

        if (! $messages->isEmpty()) {
            foreach ($messages as $message) {
                $response[] = $message->getImagesWithProducts();
            }
        }

        return response()->json(['code' => 1, 'data' => $response]);
    }

    /**
     * Change in whatsapp no
     */
    public function changeWhatsappNo()
    {
        $customerId = request()->get('customer_id', 0);
        $whatsappNo = request()->get('number', null);
        $type       = request()->get('type', 'whatsapp_number');

        if ($customerId > 0) {
            // find the record from customer table
            $customer = \App\Customer::where('id', $customerId)->first();

            if ($customer) {
                // assing nummbers
                $oldNumber = $customer->whatsapp_number;
                if ($type == 'broadcast_number') {
                    $customer->broadcast_number = $whatsappNo;
                } else {
                    $customer->whatsapp_number = $whatsappNo;
                }

                if ($customer->save()) {
                    if ($type == 'whatsapp_number') {
                        // update into whatsapp history table
                        $wHistory             = new \App\HistoryWhatsappNumber;
                        $wHistory->date_time  = date('Y-m-d H:i:s');
                        $wHistory->object     = \App\Customer::class;
                        $wHistory->object_id  = $customerId;
                        $wHistory->old_number = $oldNumber;
                        $wHistory->new_number = $whatsappNo;
                        $wHistory->save();
                    }
                }
            }
        }

        return response()->json(['code' => 1, 'message' => 'Number updated successfully']);
    }

    public function sendContactDetails()
    {
        $userID     = request()->get('user_id', 0);
        $customerID = request()->get('customer_id', 0);

        $user     = \App\User::where('id', $userID)->first();
        $customer = \App\Customer::where('id', $customerID)->first();

        // if found customer and  user
        if ($user && $customer) {
            $data = [
                'Customer details:',
                "$customer->name",
                "$customer->phone",
                "$customer->email",
                "$customer->address",
                "$customer->city",
                "$customer->country",
                "$customer->pincode",
            ];

            $messageData = implode("\n", $data);

            $params['erp_user'] = $user->id;
            $params['approved'] = 1;
            $params['message']  = $messageData;
            $params['status']   = 2;

            app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($user->phone, $user->whatsapp_number, $messageData);

            $chat_message = \App\ChatMessage::create($params);
        }

        return response()->json(['code' => 1, 'message' => 'done']);
    }

    public function addReplyCategory(Request $request)
    {
        $this->validate($request, [
            'name' => 'required|string',
        ]);

        $category       = new ReplyCategory;
        $category->name = $request->name;
        if (! empty($request->quickCategoryId)) {
            $category->parent_id = $request->quickCategoryId;
        }
        $category->save();

        return response()->json(['code' => 1, 'data' => $category]);
    }

    public function destroyReplyCategory(Request $request)
    {
        $this->validate($request, [
            'id' => 'required',
        ]);

        Reply::where('category_id', $request->get('id'))->delete();
        ReplyCategory::where('id', $request->get('id'))->delete();

        return response()->json(['code' => 1, 'message' => 'Deleted successfully']);
    }

    public function downloadContactDetails()
    {
        $userID     = request()->get('user_id', 0);
        $customerID = request()->get('customer_id', 0);

        $user     = \App\User::where('id', $userID)->first();
        $customer = \App\Customer::where('id', $customerID)->first();

        // if found customer and  user
        if ($user && $customer) {
            // load the view for pdf and after that load that into dompdf instance, and then stream (download) the pdf
            $html = view('customers.customer_pdf', compact('customer'));

            $pdf = new Dompdf();
            $pdf->loadHtml($html);
            $pdf->render();
            $pdf->stream('orders.pdf');
        }
    }

    public function downloadContactDetailsPdf($id)
    {
        $customerID = request()->get('id', 0);

        $customer = \App\Customer::where('id', $id)->first();

        // if found customer and  user
        if ($customer) {
            // load the view for pdf and after that load that into dompdf instance, and then stream (download) the pdf
            $html = view('customers.customer_pdf', compact('customer'));

            $pdf = new Dompdf();
            $pdf->loadHtml($html);
            $pdf->render();
            $pdf->stream($id . '-label.pdf');
        }
    }

    public function languageTranslate(Request $request)
    {
        if ($request->language == '') {
            $language = 'en';
        } else {
            $language = $request->language;
        }

        $customer           = Customer::find($request->id);
        $customer->language = $language;
        $customer->save();

        return response()->json(['success' => 'Customer language updated'], 200);
    }

    public function getLanguage(Request $request)
    {
        $customerDetails = Customer::find($request->id);

        return response()->json(['data' => $customerDetails]);
    }

    public function updateField(Request $request)
    {
        $field = $request->get('field');
        $value = $request->get('value');

        $customerId = $request->get('customer_id');

        if (! empty($customerId)) {
            $customer = \App\Customer::find($customerId);
            if (! empty($customer)) {
                $customer->{$field} = $value;
                $customer->save();
            }

            return response()->json(['code' => 200, 'data' => [], 'message' => $field . ' updated successfully']);
        }

        return response()->json(['code' => 200, 'data' => [], 'message' => 'Sorry , no customer found']);
    }

    public function createKyc(Request $request)
    {
        $customer_id = $request->get('customer_id');
        $media_id    = $request->get('media_id');

        if (empty($customer_id)) {
            return response()->json(['code' => 500, 'message' => 'Customer id is required']);
        }

        if (empty($media_id)) {
            return response()->json(['code' => 500, 'message' => 'Media id is required']);
        }

        $media = PlunkMediable::find($media_id);
        if (! empty($media)) {
            $kycDoc              = new \App\CustomerKycDocument;
            $kycDoc->customer_id = $customer_id;
            $kycDoc->url         = getMediaUrl($media);
            $kycDoc->path        = $media->getAbsolutePath();
            $kycDoc->type        = 1;
            $kycDoc->save();

            return response()->json(['code' => 200, 'data' => [], 'message' => 'Kyc document added successfully']);
        }

        return response()->json(['code' => 500, 'message' => 'Ooops, something went wrong']);
    }

    public function quickcustomer(Request $request)
    {
        $results       = $this->getCustomersIndex($request);
        $nextActionArr = DB::table('customer_next_actions')->get();
        $type          = @$request->type;

        return view('customers.quickcustomer', ['customers' => $results[0], 'nextActionArr' => $nextActionArr, 'type' => $type]);
    }

    //START - Purpose : Add Customer Data - DEVTASK-19932
    public function add_customer_data(Request $request)
    {
        if ($request->email) {
            $email   = $request->email;
            $website = $request->website;

            $website_data = StoreWebsite::where('website', $website)->first();

            if ($website_data) {
                $website_id = $website_data->id;
            } else {
                $website_id = '';
            }

            if ($email != '' && $website_id != '') {
                $find_customer = Customer::where('email', $email)->where('store_website_id', $website_id)->first();

                if ($find_customer) {
                    foreach ($request->post() as $key => $value) {
                        if ($value['entity_id'] != '') {
                            $check_record = CustomerAddressData::where('customer_id', $find_customer->id)->where('entity_id', $value['entity_id'])->first();
                        }

                        if ($check_record) {
                            if (isset($value['is_deleted']) && $value['is_deleted'] == 1) {
                                CustomerAddressData::where('customer_id', $find_customer->id)
                                    ->where('entity_id', $value['entity_id'])
                                    ->delete();
                            } else {
                                CustomerAddressData::where('customer_id', $find_customer->id)
                                    ->where('entity_id', $value['entity_id'])
                                    ->update(
                                        [
                                            'parent_id'    => ($value['parent_id'] ?? ''),
                                            'address_type' => ($value['address_type'] ?? ''),
                                            'region'       => ($value['region'] ?? ''),
                                            'region_id'    => ($value['region_id'] ?? ''),
                                            'postcode'     => ($value['postcode'] ?? ''),
                                            'firstname'    => ($value['firstname'] ?? ''),
                                            'middlename'   => ($value['middlename'] ?? ''),
                                            'company'      => ($value['company'] ?? ''),
                                            'country_id'   => ($value['country_id'] ?? ''),
                                            'telephone'    => ($value['telephone'] ?? ''),
                                            'prefix'       => ($value['prefix'] ?? ''),
                                            'street'       => ($value['street'] ?? ''),
                                            'updated_at'   => \Carbon\Carbon::now(),
                                        ]
                                    );
                            }
                        } else {
                            $params[] = [
                                'customer_id'  => $find_customer->id,
                                'entity_id'    => ($value['entity_id'] ?? ''),
                                'parent_id'    => ($value['parent_id'] ?? ''),
                                'address_type' => ($value['address_type'] ?? ''),
                                'region'       => ($value['region'] ?? ''),
                                'region_id'    => ($value['region_id'] ?? ''),
                                'postcode'     => ($value['postcode'] ?? ''),
                                'firstname'    => ($value['firstname'] ?? ''),
                                'middlename'   => ($value['middlename'] ?? ''),
                                'company'      => ($value['company'] ?? ''),
                                'country_id'   => ($value['country_id'] ?? ''),
                                'telephone'    => ($value['telephone'] ?? ''),
                                'prefix'       => ($value['prefix'] ?? ''),
                                'street'       => ($value['street'] ?? ''),
                                'created_at'   => \Carbon\Carbon::now(),
                                'updated_at'   => \Carbon\Carbon::now(),

                            ];
                        }
                    }

                    if (! empty($params)) {
                        CustomerAddressData::insert($params);
                    }

                    return response()->json(['code' => 200]);
                } else {
                    return response()->json(['code' => 404, 'message' => 'Not Exist!']);
                }
            } else {
                return response()->json(['code' => 404, 'message' => 'Website Not Found!']);
            }
        }
    }

    //END - DEVTASK-19932

    public function customerinfo(Request $request)
    {
        $customer = Customer::leftjoin('store_websites as sw', 'sw.id', 'customers.store_website_id')->where('customers.id', $request->customer_id)->select('customers.*', 'sw.website')->first();

        return response()->json(['status' => 200, 'data' => $customer]);
    }

    public function fetchCreditBalance(Request $request)
    {
        $platform_id   = $request->platform_id;
        $website       = $request->website;
        $store_website = StoreWebsite::where('website', 'like', $website)->first();
        if ($store_website) {
            $store_website_id = $store_website->id;
            $customer         = Customer::where('store_website_id', $store_website_id)->where('platform_id', $platform_id)->first();
            if ($customer) {
                $message = $this->generate_erp_response('credit_fetch.success', $store_website_id, $default = 'Credit Fetched Successfully', request('lang_code'));

                return response()->json(['message' => $message, 'code' => 200, 'status' => 'success', 'data' => ['credit_balance' => $customer->credit, 'currency' => $customer->currency]]);
            } else {
                $message = $this->generate_erp_response('credit_fetch.customer.failed', $store_website_id, $default = 'Customer not found', request('lang_code'));

                return response()->json(['message' => $message, 'code' => 500, 'status' => 'failed']);
            }
        } else {
            $message = $this->generate_erp_response('credit_fetch.website.failed', $store_website_id, $default = 'Website not found', request('lang_code'));

            return response()->json(['message' => $message, 'code' => 500, 'status' => 'failed']);
        }
    }

    public function deductCredit(Request $request)
    {
        $platform_id = $request->platform_id;
        $website     = $request->website;
        $balance     = $request->amount;

        $store_website = StoreWebsite::where('website', 'like', $website)->first();
        if ($store_website) {
            $store_website_id = $store_website->id;
        } else {
            $message = $this->generate_erp_response('credit_deduct.website.failed', $store_website_id, $default = 'Website Not found', request('lang_code'));

            return response()->json(['message' => $message, 'code' => 500, 'status' => 'failure']);
        }
        $customer = Customer::where('store_website_id', $store_website->id)->where('platform_id', $platform_id)->first();
        if ($customer) {
            $customer_id = $customer->id;
            $totalCredit = $customer->credit;
            if ($customer->credit > $balance) {
                $calc_credit      = $customer->credit - $balance;
                $customer->credit = $calc_credit;

                \App\CreditHistory::create(
                    [
                        'customer_id' => $customer_id,
                        'model_id'    => $customer_id,
                        'model_type'  => Customer::class,
                        'used_credit' => (float) $totalCredit - $calc_credit,
                        'used_in'     => 'MANUAL',
                        'type'        => 'MINUS',
                    ]
                );
                $customer->save();
                $message = $this->generate_erp_response('credit_deduct.success', $store_website_id, $default = 'Credit deducted successfully', request('lang_code'));

                return response()->json(['message' => $message, 'code' => 200, 'status' => 'success']);
            } else {
                $toAdd   = $balance - $customer->credit;
                $message = $this->generate_erp_response('credit_deduct.insufficient_balance', $store_website_id, $default = 'You do not have sufficient credits, Please add ' . $toAdd . ' to proceed.', request('lang_code'));

                return response()->json(['message' => $message, 'code' => 500, 'status' => 'failure']);
            }
        } else {
            $message = $this->generate_erp_response('credit_deduct.customer.failed', $store_website_id, $default = 'Customer not found.', request('lang_code'));

            return response()->json(['message' => $message, 'code' => 500, 'status' => 'failure']);
        }
    }

    public function storeCredit(Request $request)
    {
        $customers_all = Customer::leftjoin('store_websites', 'customers.store_website_id', 'store_websites.id')
            ->leftjoin('credit_history', 'customers.id', 'credit_history.customer_id');
        $customers_all->select('customers.*', 'store_websites.title', \DB::raw('( select created_at from credit_history where credit_history.customer_id = customers.id ORDER BY id DESC LIMIT 0,1) as date'));
        $customers_all->latest('date')->groupBy('customers.id')->orderBy('date', 'desc');

        if ($request->name != '') {
            $customers_all->where('name', 'Like', '%' . $request->name . '%');
        }

        if ($request->email != '') {
            $customers_all->where('email', 'Like', '%' . $request->email . '%');
        }

        if ($request->phone != '') {
            $customers_all->where('phone', 'Like', '%' . $request->phone . '%');
        }

        if ($request->store_website != '') {
            $customers_all->where('store_website_id', $request->store_website);
        }
        $customers     = $customers_all->get();
        $customers_all = $customers_all->paginate(Setting::get('pagination'));
        $store_website = StoreWebsite::all();
        $users         = Customer::get();
        if ($request->ajax()) {
            return view('livechat.store_credit_ajax', [
                'customers_all' => $customers_all,
                'store_website' => $store_website,
                'customers'     => $customers,
                'users'         => $users,
            ]);
        } else {
            return view('livechat.store_credit', [
                'customers_all' => $customers_all,
                'store_website' => $store_website,
                'customers'     => $customers,
                'users'         => $users,
            ]);
        }
    }

    public function getWebsiteCustomers(Request $request)
    {
        $storeWebsiteId = $request->store_website_id;

        $customerQuery = Customer::query();

        if ($storeWebsiteId == 'Others') {
            $customerQuery = $customerQuery->whereNull('store_website_id')->orWhere('store_website_id', '');
        } else {
            $customerQuery = $customerQuery->where('store_website_id', $storeWebsiteId);
        }

        $customers = $customerQuery->get();

        return $customers;
    }

    public function creditEmailLog(Request $request)
    {
        $creditEmailLog = \App\CreditEmailLog::where('customer_id', $request->cust_id)->get();

        if (count($creditEmailLog) > 0) {
            $html = '';
            foreach ($creditEmailLog as $log) {
                $html .= '<tr>';
                $html .= '<td>' . $log->id . '</td>';
                $html .= '<td>' . $log->from_email . '</td>';
                $html .= '<td>' . $log->to_email . '</td>';
                $html .= '<td>' . $log->created_at . '</td>';
                $html .= '</tr>';
            }

            return response()->json(['msg' => 'Listed successfully', 'code' => 200, 'data' => $html]);
        } else {
            return response()->json(['msg' => 'Record not found', 'code' => 500, 'data' => '']);
        }
    }

    public function accounts(Request $request)
    {
        $customers_all = Customer::where('store_website_id', '>', 0);
        $customers_all->select('customers.*', 'store_websites.title');
        $customers_all->join('store_websites', 'store_websites.id', 'customers.store_website_id');

        if ($request->from_date != '' && $request->from_date != '') {
            $customers_all->whereBetween('customers.created_at', [$request->from_date, $request->to_date]);
        }

        if ($request->name != '') {
            $customers_all->whereIn('name', $request->name);
        }

        if ($request->email != '') {
            $customers_all->whereIn('email', $request->email);
        }

        if ($request->phone != '') {
            $customers_all->whereIn('phone', $request->phone);
        }

        if ($request->store_website != '') {
            $customers_all->whereIn('store_website_id', $request->store_website);
        }

        $customers_all->orderBy('created_at', 'desc');
        $total           = $customers_all->count();
        $customers_all   = $customers_all->paginate(Setting::get('pagination'));
        $store_website   = StoreWebsite::all();
        $customers_name  = Customer::select('name')->distinct()->where('store_website_id', '>', 0)->get();
        $customers_phone = Customer::select('phone')->distinct()->where('store_website_id', '>', 0)->get();
        $customers_email = Customer::select('email')->distinct()->where('store_website_id', '>', 0)->get();

        if ($request->ajax()) {
            return view('customers.account_ajax', [
                'customers_all' => $customers_all,

            ]);
        } else {
            return view('customers.account', [
                'customers_all'   => $customers_all,
                'total'           => $total,
                'store_website'   => $store_website,
                'customers_name'  => $customers_name,
                'customers_phone' => $customers_phone,
                'customers_email' => $customers_email,

            ]);
        }
    }

    public function customerUpdate(Request $request)
    {
        $input = $request->input();
        unset($input['_token']);
        $details = Customer::where('id', $input['customer_id'])->select('id as customer_id', 'name', 'email', 'phone', 'address', 'city', 'country', 'pincode')->first()->toArray();
        \App\CustomerDetailHistory::create($details);
        $customerId = $input['customer_id'];
        unset($input['customer_id']);
        Customer::where('id', $customerId)->update($input);

        return response()->json(['message' => 'Details updated', 'code' => 200, 'status' => 'success']);
    }

    public function customerUpdateHistory($customerId)
    {
        $history = \App\CustomerDetailHistory::where('customer_id', $customerId)->get();
        $records = '';
        foreach ($history as $c) {
            $records .= '<tr>
              <td>' . $c->id . '</td>
              <td>' . $c->name . '</td>
              <td>' . $c->email . '</td>
              <td>' . $c->phone . '</td>
              <td>' . $c->address . '</td>
              <td>' . $c->city . '</td>
              <td>' . $c->pincode . '</td>
              <td>' . $c->country . '</td> </tr>';
        }

        return response()->json(['records' => $records, 'code' => 200, 'status' => 'success']);
    }

    public function addCredit(Request $request)
    {
        $platform_id   = $request->platform_id;
        $website       = $request->website;
        $credit        = $request->amount;
        $store_website = StoreWebsite::where('website', 'like', $website)->first();
        if ($store_website) {
            $store_website_id = $store_website->id;
        } else {
            $message = $this->generate_erp_response('credit_add.website.failed', $store_website_id, $default = 'Website Not found', request('lang_code'));

            return response()->json(['message' => $message, 'code' => 500, 'status' => 'failure']);
        }
        $customer = Customer::where('store_website_id', $store_website->id)->where('platform_id', $platform_id)->first();
        if ($customer) {
            $customer_id = $customer->id;
            $totalCredit = $customer->credit;
            if ($credit > 0) {
                $calc_credit      = $customer->credit + $credit;
                $customer->credit = $calc_credit;

                \App\CreditHistory::create(
                    [
                        'customer_id' => $customer_id,
                        'model_id'    => $customer_id,
                        'model_type'  => Customer::class,
                        'used_credit' => (float) $credit,
                        'used_in'     => 'MANUAL',
                        'type'        => 'PLUS',
                    ]
                );
                $customer->save();
            }
            $message = $this->generate_erp_response('credit_add.success', $store_website_id, $default = 'Credit added successfully', request('lang_code'));

            return response()->json(['message' => $message, 'code' => 200, 'status' => 'success']);
        } else {
            $message = $this->generate_erp_response('credit_add.customer.failed', $store_website_id, $default = 'Customer not found.', request('lang_code'));

            return response()->json(['message' => $message, 'code' => 500, 'status' => 'failure']);
        }
    }

    /**
     * This function is use for get all proirity data
     *
     * @param [int] $id
     *
     * @return Jsonresponse
     */
    public function customerPriorityPoints(Request $request)
    {
        $custPriority = CustomerPriorityPoint::leftjoin('store_websites', 'store_websites.id', 'customer_priority_points.store_website_id')->get(
            ['customer_priority_points.store_website_id',
                'customer_priority_points.website_base_priority',
                'customer_priority_points.lead_points',
                'customer_priority_points.order_points',
                'customer_priority_points.refund_points',
                'customer_priority_points.ticket_points',
                'customer_priority_points.return_points',
                'store_websites.website', ]);

        $storeWebsite = StoreWebsite::all();

        return view('customers.customer_priority_point', compact('storeWebsite', 'custPriority'));
    }

    /**
     * This function is use for get proirity data
     *
     * @param [int] $id
     * @param mixed $webSiteId
     *
     * @return Jsonresponse
     */
    public function getCustomerPriorityPoints($webSiteId)
    {
        try {
            $custPriority = CustomerPriorityPoint::where('store_website_id', $webSiteId)->get();
            if ($custPriority) {
                return response()->json(['code' => 200, 'data' => compact('custPriority'), 'message' => 'Priority listed successfully']);
            }

            return response()->json(['code' => 500, 'data' => [], 'message' => 'Sorry there is no Website exist']);
        } catch (Exception $exception) {
            return response()->json(['code' => 500, 'data' => [], 'message' => $exception->getMessage()]);
        }
    }

    /**
     * This function is use for save proirity data
     *
     * @return Jsonresponse
     */
    public function addCustomerPriorityPoints(Request $request)
    {
        $custPri = CustomerPriorityPoint::updateOrCreate([
            'store_website_id' => $request->get('store_website_id'),
        ],
            [
                'website_base_priority' => $request->get('website_base_priority'),
                'store_website_id'      => $request->get('store_website_id'),
                'lead_points'           => $request->get('lead_points'),
                'refund_points'         => $request->get('refund_points'),
                'order_points'          => $request->get('order_points'),
                'ticket_points'         => $request->get('ticket_points'),
                'return_points'         => $request->get('return_points'),
            ]);

        return response()->json(['message' => 'Record added successfully', 'code' => 200, 'data' => $custPri, 'status' => 'success']);
    }

    /**
     * This function is use for get all proirity Range data
     *
     * @param [int] $id
     *
     * @return Jsonresponse
     */
    public function getCustomerPriorityRangePoints(Request $request)
    {
        $custRangePoint = CustomerPriorityRangePoint::leftjoin('store_websites', 'store_websites.id', 'customer_priority_range_points.store_website_id')
            ->leftjoin('twilio_priorities', 'twilio_priorities.id', 'customer_priority_range_points.twilio_priority_id')
            ->where('customer_priority_range_points.deleted_at', '=', null)
            ->get(
                ['customer_priority_range_points.id',
                    'customer_priority_range_points.store_website_id',
                    'customer_priority_range_points.twilio_priority_id',
                    'customer_priority_range_points.min_point',
                    'customer_priority_range_points.max_point',
                    'customer_priority_range_points.range_name',
                    'customer_priority_range_points.created_at',
                    'store_websites.website',
                    'twilio_priorities.priority_name', ]);

        $storeWebsite = StoreWebsite::all();

        return view('customers.customer_priority_range_point', compact('storeWebsite', 'custRangePoint'));
    }

    /**
     * This function is use for get all proirity Range data
     *
     * @param [int] $id
     *
     * @return Jsonresponse
     */
    public function getSelectCustomerPriorityRangePoints(Request $request, $id)
    {
        $custRangePoint = CustomerPriorityRangePoint::select(['customer_priority_range_points.id',
            'customer_priority_range_points.store_website_id',
            'customer_priority_range_points.twilio_priority_id',
            'customer_priority_range_points.min_point',
            'customer_priority_range_points.max_point',
            'customer_priority_range_points.created_at',
            'store_websites.website',
            'twilio_priorities.priority_name', ])->
        leftjoin('store_websites', 'store_websites.id', 'customer_priority_range_points.store_website_id')
            ->leftjoin('twilio_priorities', 'twilio_priorities.id', 'customer_priority_range_points.twilio_priority_id')
            ->where('customer_priority_range_points.deleted_at', '=', null)
            ->where('customer_priority_range_points.id', $id)
            ->first();

        $storeWebsite   = StoreWebsite::all();
        $twilioPriority = TwilioPriority::where('account_id', function ($query) use ($custRangePoint) {
            $query->select('twilio_credentials_id')
                ->from('store_website_twilio_numbers')
                ->where('store_website_twilio_numbers.store_website_id', $custRangePoint->store_website_id);
        })->get();
        $twilioPriority = $twilioPriority->toArray();

        return response()->json(['message' => 'Record Listed successfully', 'code' => 200, 'data' => compact('custRangePoint', 'storeWebsite', 'twilioPriority'), 'status' => 'success']);
    }

    /**
     * This function is use for get all proirity Range data
     *
     * @param [int] $id
     *
     * @return Jsonresponse
     */
    public function selectCustomerPriorityRangePoints(Request $request, $id)
    {
        $twilioPriority = TwilioPriority::where('account_id', function ($query) use ($id) {
            $query->select('twilio_credentials_id')
                ->from('store_website_twilio_numbers')
                ->where('store_website_id', $id);
        })->get();

        return response()->json(['message' => 'Record Listed successfully', 'code' => 200, 'data' => $twilioPriority->toArray(), 'status' => 'success']);
    }

    /**
     * This function is use for save proirity range data
     *
     * @return Jsonresponse
     */
    public function addCustomerPriorityRangePoints(Request $request)
    {
        $custPri = CustomerPriorityRangePoint::updateOrCreate([
            'twilio_priority_id' => $request->get('twilio_priority_id'),
            'store_website_id'   => $request->get('store_website_id'),
        ],
            [
                'twilio_priority_id' => $request->get('twilio_priority_id'),
                'store_website_id'   => $request->get('store_website_id'),
                'min_point'          => $request->get('min_point'),
                'max_point'          => $request->get('max_point'),
                'deleted_at'         => null,
            ]);

        return response()->json(['message' => 'Record added successfully', 'code' => 200, 'data' => $custPri, 'status' => 'success']);
    }

    /**
     * This function is use for save proirity range delete data
     *
     * @return Jsonresponse
     */
    public function deleteCustomerPriorityRangePoints(Request $request)
    {
        $custPri = CustomerPriorityRangePoint::where('id', '=', $request->id)->update([
            'deleted_at' => date('Y-m-d H:i:s'),
        ]);

        return redirect()->back()->withSuccess('You have successfully Deleted');
    }

    public function customerName(request $request)
    {
        $id          = $request->input('id');
        $name        = Customer::where('id', $id)->value('name');
        $htmlContent = '<tr><td>' . $name . '</td></tr>';

        return $htmlContent;
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/DatabaseTableController.php 
Content: <?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use App\Models\TruncateTableHistory;
use App\DatabaseTableHistoricalRecord;
use Illuminate\Support\Facades\Schema;

class DatabaseTableController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @param mixed $id
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request, $id)
    {
        if ($id) {
            $databaseHis = DatabaseTableHistoricalRecord::where('database_id', $id)
                ->crossJoin('database_historical_records', 'database_table_historical_records.database_id', '=', 'database_historical_records.id')
                ->select('database_table_historical_records.*', 'database_historical_records.database_name as database');
        } else {
            $databaseHis = DatabaseTableHistoricalRecord::latest()
                ->crossJoin('database_historical_records', 'database_table_historical_records.database_id', '=', 'database_historical_records.id')
                ->select('database_table_historical_records.*', 'database_historical_records.database_name as database');
        }

        if ($request->table_name) {
            $databaseHis = $databaseHis->where('database_table_historical_records.database_name', 'like', '%' . $request->table_name . '%');
        }
        $databaseHis = $databaseHis->orderBy('database_table_historical_records.size', 'desc');
        $databaseHis = $databaseHis->paginate(20);

        $page = $databaseHis->currentPage();

        if ($request->ajax()) {
            $tml = (string) view('database.partial.list-table', compact('databaseHis', 'page'));

            return response()->json(['code' => 200, 'tpl' => $tml, 'page' => $page]);
        }

        return view('database.tables', compact('databaseHis', 'page'));
    }

    public function viewList(Request $request)
    {
        if ($request->table_name) {
            //table_name
            $date    = \Carbon\Carbon::today()->subDays(7);
            $history = DB::table('database_table_historical_records')->where('database_name', $request->table_name)->where('created_at', '>=', $date)->get();

            return response()->json(['code' => 200, 'data' => $history]);
        }

        return response()->json(['code' => 500, 'message' => 'No records found!']);
    }

    public function tableList(Request $request)
    {
        $tables = Schema::getConnection()->getDoctrineSchemaManager()->listTableNames();

        return view('database.tables-list', compact('tables'));
    }

    public function truncateTables(Request $request)
    {
        if (! empty($request->ids)) {
            foreach ($request->ids as $key => $value) {
                DB::statement('TRUNCATE TABLE ' . $value);

                $tth             = new TruncateTableHistory();
                $tth->user_id    = \Auth::user()->id;
                $tth->table_name = $value;
                $tth->save();
            }
        }

        return response()->json([
            'status'      => true,
            'message'     => ' column visiblity Added Successfully',
            'status_name' => 'success',
        ], 200);
    }

    public function getTruncateTableHistories(Request $request)
    {
        $datas = TruncateTableHistory::with(['user'])
            ->where('table_name', $request->table_name)
            ->latest()
            ->get();

        return response()->json([
            'status'      => true,
            'data'        => $datas,
            'message'     => 'History get successfully',
            'status_name' => 'success',
        ], 200);
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/DevelopmentController.php 
Content: <?php

namespace App\Http\Controllers;

use Auth;
use View;
use App\Task;
use App\Team;
use App\User;
use Response;
use App\Issue;
use Exception;
use App\Helpers;
use App\Setting;
use App\UserRate;
use App\TaskTypes;
use Carbon\Carbon;
use App\TaskStatus;
use App\ChatMessage;
use App\ErpPriority;
use App\TaskMessage;
use App\TasksHistory;
use App\DeveloperCost;
use App\DeveloperTask;
use App\ReplyCategory;
use GuzzleHttp\Client;
use App\LogChatMessage;
use App\PaymentReceipt;
use App\TaskAttachment;
use App\UserAvaibility;
use App\DeveloperModule;
use App\HubstaffHistory;
use App\TaskUserHistory;
use App\DeveloperComment;
use App\GoogleScreencast;
use App\PushNotification;
use App\MeetingAndOtherTime;
use Illuminate\Http\Request;
use App\DeveloperTaskComment;
use App\DeveloperTaskHistory;
use App\Helpers\HubstaffTrait;
use App\Helpers\MessageHelper;
use App\Hubstaff\HubstaffTask;
use App\Models\ScrapperValues;
use GuzzleHttp\RequestOptions;
use App\Models\DataTableColumn;
use App\Github\GithubRepository;
use App\Hubstaff\HubstaffMember;
use App\Hubstaff\HubstaffProject;
use Illuminate\Http\JsonResponse;
use App\Github\GithubOrganization;
use Illuminate\Support\Facades\DB;
use Maatwebsite\Excel\Facades\Excel;
use App\DeveoperTaskPullRequestMerge;
use App\Models\ScrapperValuesHistory;
use App\TimeDoctor\TimeDoctorAccount;
use Illuminate\Support\Facades\Cache;
use App\Exports\DeveloperTaskExcelExport;
use App\Jobs\UploadGoogleDriveScreencast;
use GuzzleHttp\Exception\ClientException;
use Illuminate\Database\Eloquent\Builder;
use App\Library\TimeDoctor\Src\Timedoctor;
use App\Models\DeveloperTaskStartEndHistory;
use App\Models\DeveloperTaskStatusChecklist;
use App\Models\ScrapperValuesRemarksHistory;
use App\Models\DeveloperTaskStatusChecklistRemarks;
use Plank\Mediable\Facades\MediaUploader as MediaUploader;
use App\Models\DeveloperTasks\DeveloperTasksHistoryApprovals;
use Exception;

class DevelopmentController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    use HubstaffTrait;

    private $githubClient;

    public function __construct()
    {
        $this->githubClient = new Client([
            'auth' => [config('env.GITHUB_USERNAME'), config('env.GITHUB_TOKEN')],
        ]);
        $this->init(config('env.HUBSTAFF_SEED_PERSONAL_TOKEN'));
    }

    private function connectGithubClient($userName, $token)
    {
        $githubClientObj = new Client([
            'auth' => [$userName, $token],
        ]);

        return $githubClientObj;
    }

    public function taskListByUserId(Request $request)
    {
        $user_id = $request->get('user_id', 0);
        $issues  = DeveloperTask::select('developer_tasks.id', 'developer_tasks.module_id', 'developer_tasks.subject', 'developer_tasks.task', 'developer_tasks.created_by')
            ->leftJoin('erp_priorities', function ($query) use ($user_id) {
                $query->on('erp_priorities.model_id', '=', 'developer_tasks.id');
                $query->where('erp_priorities.model_type', '=', DeveloperTask::class);
                $query->where('erp_priorities.user_id', $user_id);
            })
            ->where('status', '!=', 'Done');
        // if admin the can assign new task
        if (auth()->user()->isAdmin()) {
            $issues = $issues->whereIn('developer_tasks.id', $request->get('selected_issue', []));
        } else {
            $issues = $issues->whereNotNull('erp_priorities.id');
        }
        $issues = $issues->orderBy('erp_priorities.id')->get();
        foreach ($issues as &$value) {
            $value->module     = $value->developerModule->name;
            $value->created_by = User::where('id', $value->created_by)->value('name');
        }
        unset($value);

        return response()->json($issues);
    }

    public function setTaskPriority(Request $request)
    {
        $priority = $request->get('priority', null);
        $user_id  = $request->get('user_id', 0);
        //delete old priority
        ErpPriority::where('user_id', $user_id)->where('model_type', '=', DeveloperTask::class)->delete();

        if (! empty($priority)) {
            foreach ((array) $priority as $model_id) {
                ErpPriority::create([
                    'model_id'   => $model_id,
                    'model_type' => DeveloperTask::class,
                    'user_id'    => $user_id,
                ]);
            }
            $developerTask = DeveloperTask::select('developer_tasks.id', 'developer_tasks.module_id', 'developer_tasks.subject', 'developer_tasks.task', 'developer_tasks.created_by')
                ->join('erp_priorities', function ($query) use ($user_id) {
                    $query->on('erp_priorities.model_id', '=', 'developer_tasks.id');
                    $query->where('erp_priorities.model_type', '=', DeveloperTask::class);
                    $query->where('erp_priorities.user_id', '=', $user_id);
                })
                ->where('is_resolved', '0')
                ->orderBy('erp_priorities.id')
                ->get();
            $message = '';
            $i       = 1;
            foreach ($developerTask as $value) {
                $message .= $i . ' : #Task-' . $value->id . '-' . $value->subject . "\n";
                $i++;
            }
            if (! empty($message)) {
                $requestData = new Request();
                $requestData->setMethod('POST');
                $params            = [];
                $params['user_id'] = $request->get('user_id', 0);

                $string = '';
                if (! empty($request->get('global_remarkes', null))) {
                    $string .= $request->get('global_remarkes') . "\n";
                }
                $string .= "Task Priority is : \n" . $message;

                $params['message'] = $string;
                $params['status']  = 2;
                $requestData->request->add($params);
                app(\App\Http\Controllers\WhatsAppController::class)->sendMessage($requestData, 'priority');
            }
        }

        return response()->json([
            'status' => 'success',
        ]);
    }

    public function index(Request $request)
    {
        // Set required data
        $user  = $request->user ?? Auth::id();
        $start = $request->range_start ? "$request->range_start 00:00" : '2018-01-01 00:00';
        $end   = $request->range_end ? "$request->range_end 23:59" : Carbon::now()->endOfWeek();
        $id    = null;
        // Set initial variables
        $progressTasks  = new DeveloperTask();
        $plannedTasks   = new DeveloperTask();
        $completedTasks = new DeveloperTask();
        // For non-admins get tasks assigned to the user
        if (! Auth::user()->hasRole('Admin')) {
            $progressTasks  = DeveloperTask::where('user_id', Auth::id());
            $plannedTasks   = DeveloperTask::where('user_id', Auth::id());
            $completedTasks = DeveloperTask::where('user_id', Auth::id());
        }
        // Get tasks for specific user if you are admin
        if (Auth::user()->hasRole('Admin') && (int) $request->user > 0) {
            $progressTasks  = DeveloperTask::where('user_id', $user);
            $plannedTasks   = DeveloperTask::where('user_id', $user);
            $completedTasks = DeveloperTask::where('user_id', $user);
        }
        // Filter by date/
        if ($request->get('range_start') != '') {
            $progressTasks  = $progressTasks->whereBetween('created_at', [$start, $end]);
            $plannedTasks   = $plannedTasks->whereBetween('created_at', [$start, $end]);
            $completedTasks = $completedTasks->whereBetween('created_at', [$start, $end]);
        }
        // Filter by ID
        if ($request->get('id')) {
            $progressTasks = $progressTasks->where(function ($query) use ($request) {
                $id = $request->get('id');
                $query->where('id', $id)->orWhere('subject', 'LIKE', "%$id%");
            });
            $plannedTasks = $plannedTasks->where(function ($query) use ($request) {
                $id = $request->get('id');
                $query->where('id', $id)->orWhere('subject', 'LIKE', "%$id%");
            });
            $completedTasks = $completedTasks->where(function ($query) use ($request) {
                $id = $request->get('id');
                $query->where('id', $id)->orWhere('subject', 'LIKE', "%$id%");
            });
        }
        // Get all data with user and messages
        $plannedTasks   = $plannedTasks->where('status', 'Planned')->orderBy('created_at')->with(['user', 'messages', 'timeSpent'])->get();
        $completedTasks = $completedTasks->where('status', 'Done')->orderBy('created_at')->with(['user', 'messages', 'timeSpent'])->get();
        $progressTasks  = $progressTasks->where('status', 'In Progress')->orderBy('created_at')->with(['user', 'messages', 'timeSpent'])->get();

        // Get all modules
        $modules = DeveloperModule::all();
        // Get all developers
        $users = Helpers::getUserArray(User::role('Developer')->get());
        // Get all task types
        $tasksTypes = TaskTypes::all();
        // Create empty array for module names
        $moduleNames = [];
        // Loop over all modules and store them
        foreach ($modules as $module) {
            $moduleNames[$module->id] = $module->name;
        }
        $times = [];

        return view('development.index', [
            'times'          => $times,
            'users'          => $users,
            'modules'        => $modules,
            'user'           => $user,
            'start'          => $start,
            'end'            => $end,
            'moduleNames'    => $moduleNames,
            'completedTasks' => $completedTasks,
            'plannedTasks'   => $plannedTasks,
            'progressTasks'  => $progressTasks,
            'tasksTypes'     => $tasksTypes,
            'title'          => 'Dev',
        ]);
    }

    public function moveTaskToProgress(Request $request)
    {
        $task                = DeveloperTask::find($request->get('task_id'));
        $date                = $request->get('date');
        $task->status        = 'In Progress';
        $hour                = $request->get('hour') ?? '00';
        $minutes             = $request->get('mimutes') ?? '00';
        $task->estimate_time = $date . ' ' . "$hour:$minutes:00 ";
        $task->start_time    = Carbon::now()->toDateTimeString();
        $task->save();

        return response()->json([
            'status' => 'success',
        ]);
    }

    public function completeTask(Request $request)
    {
        $task           = DeveloperTask::find($request->get('task_id'));
        $task->status   = 'Done';
        $task->end_time = Carbon::now()->toDateTimeString();
        $task->save();

        return response()->json([
            'status' => 'success',
        ]);
    }

    public function relistTask(Request $request)
    {
        $task                = DeveloperTask::find($request->get('task_id'));
        $task->status        = 'Planned';
        $task->end_time      = null;
        $task->start_time    = null;
        $task->estimate_time = null;
        $task->save();

        return response()->json([
            'status' => 'success',
        ]);
    }

    public function updateAssignee(Request $request)
    {
        $task = DeveloperTask::find($request->get('task_id'));

        $old_assignee  = $task->user_id;
        $task->user_id = $request->get('user_id');
        $task->save();
        $task_history               = new TasksHistory;
        $task_history->date_time    = date('Y-m-d H:i:s');
        $task_history->task_id      = $request->get('task_id');
        $task_history->user_id      = Auth::id();
        $task_history->old_assignee = $old_assignee;
        $task_history->new_assignee = $request->get('user_id');
        $task_history->save();

        return response()->json([
            'success',
        ]);
    }

    public function issueTaskIndex(Request $request)
    {
        $type           = $request->tasktype ? $request->tasktype : 'all';
        $users          = User::orderBy('name')->pluck('name', 'id');
        $usersForExport = [];

        if (Auth::user()->hasRole('Admin')) {
            $usersForExport = User::select('name', 'id')->get();
        } else {
            $usersForExport = User::select('name', 'id')->where('id', '=', Auth::user()->id)->get();
        }
        $auth_user = auth()->user();
        $title     = 'Task List';

        $issues = DeveloperTask::with([
            'timeSpent',
            'developerTaskHistory',
            'assignedUser',
            'masterUser',
            'timeSpent',
            'leadtimeSpent',
            'testertimeSpent',
            'messages.taskUser',
            'messages.user',
            'dthWithMinuteEstimate',
            'tester',
        ]);

        $issues->when($type == 'issue', fn ($q) => $q->where('task_type_id', '3'));
        $issues->when(! empty($request->estimate_date), function (Builder $query) use ($request) {
            $estimate_date = date('Y-m-d', strtotime($request->estimate_date));

            return $query->where('estimate_date', $estimate_date);
        });

        $issues->when($type == 'devtask', fn ($q) => $q->where('task_type_id', '1'));
        $issues->when((int) $request->get('submitted_by') > 0, fn (Builder $query) => $query->where('developer_tasks.created_by', $request->get('submitted_by')));
        $issues->when((int) $request->get('responsible_user') > 0, fn (Builder $query) => $query->where('developer_tasks.responsible_user_id', $request->get('responsible_user')));
        $issues->when((int) $request->get('corrected_by') > 0, fn (Builder $query) => $query->where('developer_tasks.user_id', $request->get('corrected_by')));
        $issues->when((int) $request->get('assigned_to') > 0, fn (Builder $query) => $query->where('developer_tasks.assigned_to', $request->get('assigned_to')));
        $issues->when((int) $request->get('master_user_id') > 0, fn (Builder $query) => $query->where('developer_tasks.master_user_id', $request->get('master_user_id')));
        $issues->when((int) $request->get('team_lead_id') > 0, fn (Builder $query) => $query->where('developer_tasks.team_lead_id', $request->get('team_lead_id')));
        $issues->when((int) $request->get('tester_id') > 0, fn ($q) => $q->where('developer_tasks.tester_id', $request->get('tester_id')));
        $issues->when($request->get('module'), fn ($q) => $q->where('module_id', $request->get('module')));
        $issues->when(! empty($request->get('task_status', [])), fn ($q) => $q->whereIn('developer_tasks.status', $request->get('task_status')));
        $issues->when(! empty($request->get('repo_id')), fn ($q) => $q->where('developer_tasks.repository_id', $request->get('repo_id')));

        if (isset($request->is_estimated)) {
            if ($request->get('is_estimated') == 'null') {
                $issues = $issues->notEstimated();
            }
            if ($request->get('is_estimated') == 'not_approved') {
                $issues = $issues->adminNotApproved();
            }
        }

        $whereCondition = '';
        if ($request->get('subject') != '') {
            $whereCondition = ' and message like  "%' . $request->get('subject') . '%"';
            $issues         = $issues->where(function (Builder $query) use ($request) {
                $query->whereLike(['developer_tasks.id', 'developer_tasks.subject', 'developer_tasks.task', 'chat_messages.message'], $request->get('subject'));
            });
        }
        $issues = $issues->leftJoin(
            DB::raw('(SELECT MAX(id) as  max_id, issue_id, message
            FROM `chat_messages` where issue_id > 0
             ' . $whereCondition . ' GROUP BY issue_id )
             m_max'), 'm_max.issue_id', '=', 'developer_tasks.id');

        $issues = $issues->leftJoin('chat_messages', 'chat_messages.id', '=', 'm_max.max_id');

        $issues->when($request->get('last_communicated', 'off') == 'on', fn ($q) => $q->orderBy('chat_messages.id', 'desc'));

        $issues = $issues->select('developer_tasks.*',
            'chat_messages.message',
            'chat_messages.is_audio',
            'chat_messages.user_id AS message_user_id',
            'chat_messages.is_reminder AS message_is_reminder',
            'chat_messages.status as message_status',
            'chat_messages.sent_to_user_id'
        );

        // Set variables with modules and users
        $modules = Cache::remember('DeveloperModule::orderBy::name', 60 * 60 * 24 * 1, function () {
            return DeveloperModule::orderBy('name')->get();
        });

        $statusList = Cache::remember('task_status_select_name', 60 * 60 * 24 * 7, function () {
            return TaskStatus::select('name')->pluck('name', 'name')->toArray();
        });

        if (! auth()->user()->isReviwerLikeAdmin()) {
            $issues = $issues->where(function ($query) use ($auth_user) {
                $query->where('developer_tasks.assigned_to', $auth_user->id)
                    ->orWhere('developer_tasks.master_user_id', $auth_user->id)
                    ->orWhere('developer_tasks.tester_id', $auth_user->id)
                    ->orWhere('developer_tasks.team_lead_id', $auth_user->id);
            });
        }

        $plannedTasks = DeveloperTask::where('developer_tasks.status', 'Planned')
            ->groupBy('developer_tasks.assigned_to')
            ->select([\DB::raw('count(developer_tasks.id) as total_product'), 'developer_tasks.assigned_to'])
            ->pluck('total_product', 'assigned_to')->toArray();

        $inProgressTasks = DeveloperTask::where('developer_tasks.status', 'In Progress')
            ->groupBy('developer_tasks.assigned_to')
            ->select([\DB::raw('count(developer_tasks.id) as total_product'), 'developer_tasks.assigned_to'])
            ->pluck('total_product', 'assigned_to')->toArray();

        $usersCount   = array_values(array_filter(array_keys($plannedTasks)));
        $userModel    = empty($usersCount) ? [] : $users->whereIn('id', $usersCount)->pluck('name', 'id')->toArray();
        $countPlanned = [];
        if (! empty($issuesGroups) && ! empty($userModel)) {
            foreach ($issuesGroups as $key => $count) {
                $countPlanned[] = [
                    'id'    => $key,
                    'name'  => ! empty($userModel[$key]) ? $userModel[$key] : 'N/A',
                    'count' => $count,
                ];
            }
        }

        // category filter start count
        $countInProgress = [];
        $usersCount      = array_values(array_filter(array_keys($inProgressTasks)));
        $userModel       = empty($usersCount) ? [] : $users->whereIn('id', $usersCount)->pluck('name', 'id')->toArray();
        if (! empty($issuesGroups) && ! empty($userModel)) {
            foreach ($issuesGroups as $key => $count) {
                $countInProgress[] = [
                    'id'    => $key,
                    'name'  => ! empty($userModel[$key]) ? $userModel[$key] : 'N/A',
                    'count' => $count,
                ];
            }
        }

        // Sort
        if ($request->order == 'priority') {
            $issues = $issues->orderBy('developer_tasks.created_at', 'DESC');
        } elseif ($request->order == 'latest_task_first') {
            $issues = $issues->orderBy('developer_tasks.id', 'DESC');
        } else {
            $issues = $issues->orderBy('chat_messages.id', 'desc');
        }

        if ($request->download == 2) {
            $issues    = $issues->get();
            $tasks_csv = [];
            foreach ($issues as $value) {
                $task_csv                  = [];
                $task_csv['ID']            = $value->id;
                $task_csv['Subject']       = $value->subject;
                $task_csv['Communication'] = $value->message;
                $task_csv['Developer']     = ($value->assignedUser) ? $value->assignedUser->name : 'Unassigned';
                $tasks_csv[]               = $task_csv;
            }
            $this->outputCsv('downaload-task-summaries.csv', $tasks_csv);
        } else {
            $issues = $issues->paginate(50);
        }

        $priority = ErpPriority::where('model_type', '=', DeveloperTask::class)->pluck('model_id')->toArray();

        $respositories = Cache::remember('GithubRepository::all()', 60 * 60 * 24 * 7, function () {
            return GithubRepository::all();
        });

        $checkList      = [];
        $checkListArray = DeveloperTaskStatusChecklist::select('id', 'name', 'task_status')->get()->toArray();
        foreach ($checkListArray as $list) {
            $checkList[$list['task_status']][] = $list;
        }

        $datatableModel = DataTableColumn::select('column_name', 'user_id', 'section_name')->where('user_id', auth()->user()->id)->where('section_name', 'development-list')->first();

        $dynamicColumnsToShowDl = [];
        if (! empty($datatableModel->column_name)) {
            $hideColumns            = $datatableModel->column_name ?? '';
            $dynamicColumnsToShowDl = json_decode($hideColumns, true);
        }

        if (request()->ajax()) {
            return view('development.partials.load-more', compact('issues', 'users', 'modules', 'request', 'title', 'type', 'countPlanned', 'countInProgress', 'statusList', 'priority', 'dynamicColumnsToShowDl'));
        }

        $reply_categories = ReplyCategory::select('id', 'name')
            ->with('approval_leads', 'sub_categories')
            ->where('parent_id', 0)
            ->where('id', 44)
            ->orderby('name', 'ASC')->get();

        return view('development.issue', [
            'issues'                 => $issues,
            'users'                  => $users,
            'checkList'              => $checkList,
            'modules'                => $modules,
            'request'                => $request,
            'title'                  => $title,
            'type'                   => $type,
            'priority'               => $priority,
            'countPlanned'           => $countPlanned,
            'countInProgress'        => $countInProgress,
            'statusList'             => $statusList,
            'respositories'          => $respositories,
            'dynamicColumnsToShowDl' => $dynamicColumnsToShowDl,
            'reply_categories'       => $reply_categories,
            'usersForExport'         => $usersForExport,
        ]);
    }

    public function dlColumnVisbilityUpdate(Request $request)
    {
        $userCheck = DataTableColumn::where('user_id', auth()->user()->id)->where('section_name', 'development-list')->first();

        if ($userCheck) {
            $column               = DataTableColumn::find($userCheck->id);
            $column->section_name = 'development-list';
            $column->column_name  = json_encode($request->column_dl);
            $column->save();
        } else {
            $column               = new DataTableColumn();
            $column->section_name = 'development-list';
            $column->column_name  = json_encode($request->column_dl);
            $column->user_id      = auth()->user()->id;
            $column->save();
        }

        return redirect()->back()->with('success', 'column visiblity Added Successfully!');
    }

    public function dsColumnVisbilityUpdate(Request $request)
    {
        $userCheck = DataTableColumn::where('user_id', auth()->user()->id)->where('section_name', 'development-summarylist')->first();

        if ($userCheck) {
            $column               = DataTableColumn::find($userCheck->id);
            $column->section_name = 'development-summarylist';
            $column->column_name  = json_encode($request->column_ds);
            $column->save();
        } else {
            $column               = new DataTableColumn();
            $column->section_name = 'development-summarylist';
            $column->column_name  = json_encode($request->column_ds);
            $column->user_id      = auth()->user()->id;
            $column->save();
        }

        return redirect()->back()->with('success', 'column visiblity Added Successfully!');
    }

    public function scrappingTaskIndex(Request $request)
    {
        $inputs = $request->input();
        $users  = User::query();

        $issues = DeveloperTask::with('assignedUser');
        $issues = $issues->where('developer_tasks.task_type_id', '1')->whereNotNull('scraper_id')->where('scraper_id', '<>', 0);

        $issues = $issues->select('developer_tasks.*');

        if (! auth()->user()->isReviwerLikeAdmin()) {
            $issues = $issues->where(function ($query) {
                $query->where('developer_tasks.assigned_to', auth()->user()->id)
                    ->orWhere('developer_tasks.master_user_id', auth()->user()->id)
                    ->orWhere('developer_tasks.tester_id', auth()->user()->id)
                    ->orWhere('developer_tasks.team_lead_id', auth()->user()->id);
            });
        }

        if (@$inputs['module']) {
            $issues->where('module_id', $inputs['module']);
        }

        if (@$inputs['subject']) {
            $issues->where('subject', 'like', '%' . $inputs['subject'] . '%');
        }

        if (@$inputs['task']) {
            $issues->where('task', 'like', '%' . $inputs['task'] . '%');
        }

        if (@$inputs['user_id']) {
            $issues->where('assigned_to', $inputs['user_id']);
            $users = User::where('id', $request->user_id)->select(['id', 'name'])->first();
        }

        if (@$inputs['status']) {
            $issues->where('status', $inputs['status']);
        }

        $issues = $issues->orderBy('id', 'desc')->groupBy('developer_tasks.id');
        $issues = $issues->paginate(50);

        $modules = DeveloperModule::all()->pluck('name', 'id');

        return view('development.scrapper', [
            'issues'  => $issues,
            'modules' => $modules,
            'inputs'  => $inputs,
            'title'   => 'Scrapping Issues List',
            'users'   => $users,

        ]);
    }

    public function loadAllTasks(Request $request)
    {
        $dataTaskType = $request->dataTaskType;
        switch ($dataTaskType) {
            case 'devtask':
                return $this->loadAllDevTasks($request);
                break;
            case 'task':
                return $this->loadAllNormalTasks($request);
                break;
        }
    }

    private function loadAllDevTasks($request)
    {
        $issuesQuery = DeveloperTask::with(['assignedUser'])
            ->with(['taskStartEndHistories' => function ($query) {
                $query->select('task_id',
                    \DB::raw('SUM(TIMESTAMPDIFF(MINUTE, start_date, end_date)) as tracked_time'),
                    \DB::raw('MIN(start_date) as first_start_date'),
                    \DB::raw('MAX(end_date) as last_end_date'),
                )
                ->orderBy('created_at', 'DESC')
                ->groupBy('task_id');
            }])
            ->with(['developerTaskHistories' => function ($query) {
                $query->select('developer_task_id', \DB::raw('SUM(new_value) as approved_time'))
                ->where('is_approved', 1)
                ->orderBy('created_at', 'DESC')
                ->groupBy('developer_task_id');
            }])
            ->orderBy('id', 'DESC');

        if ($request->startDate && $request->endDate) {
            $issuesQuery = $issuesQuery->whereBetween('developer_tasks.created_at', [$request->startDate, $request->endDate]);
        }

        if ($request->startDateTracked && $request->endDateTracked) {
            $issuesQuery = $issuesQuery->whereBetween('developer_tasks.m_start_date', [$request->startDateTracked, $request->endDateTracked]);
        }

        if ($request->assigned_to) {
            $issuesQuery = $issuesQuery->where('developer_tasks.assigned_to', $request->assigned_to);
        }

        return $issuesQuery;
    }

    private function loadAllNormalTasks($request)
    {
        $issuesQuery = Task::with(['assignedTo', 'taskStatusAlter'])
            ->with(['taskStartEndHistories' => function ($query) {
                $query->select('task_id',
                    \DB::raw('SUM(TIMESTAMPDIFF(MINUTE, start_date, end_date)) as tracked_time'),
                    \DB::raw('MIN(start_date) as first_start_date'),
                    \DB::raw('MAX(end_date) as last_end_date'),
                )
                    ->orderBy('created_at', 'DESC')
                    ->groupBy('task_id');
            }])
            ->with(['developerTaskHistories' => function ($query) {
                $query->select('developer_task_id', \DB::raw('SUM(new_value) as approved_time'))
                    ->where('is_approved', 1)
                    ->orderBy('created_at', 'DESC')
                    ->groupBy('developer_task_id');
            }])
            ->orderBy('id', 'DESC');

        if ($request->startDate && $request->endDate) {
            $issuesQuery = $issuesQuery->whereBetween('tasks.created_at', [$request->startDate, $request->endDate]);
        }

        if ($request->startDateTracked && $request->endDateTracked) {
            $issuesQuery = $issuesQuery->whereBetween('tasks.m_start_date', [$request->startDateTracked, $request->endDateTracked]);
        }

        if ($request->assigned_to) {
            $issuesQuery = $issuesQuery->where('tasks.assign_to', $request->assigned_to);
        }

        return $issuesQuery;
    }

    public function getTasksCsvNeededFormat($issues)
    {
        $tasks_csv = [];

        $users  = User::query()->pluck('name', 'id');
        foreach ($issues as $value) {
            // dd($value);
            $task_csv                  = [];
            $task_csv['id']            = $value->id;
            $task_csv['Subject']       = $value->subject ?? $value->task_subject;
            $task_csv['Assigned To']   = ((! empty($users[$value->assigned_to]) || ! empty($users[$value->assign_to])) ?
                                            ($users[$value->assigned_to] ?? $users[$value->assign_to]) :
                                            'Unassigned');
            $task_csv['Approved Time'] = (isset($value->developerTaskHistories->first()->approved_time) && ! empty($value->developerTaskHistories->first()->approved_time)) ?
                                            $value->developerTaskHistories->first()->approved_time : 0;
            $task_csv['Status']        = ((isset($value->taskStatusAlter) && ! empty($value->taskStatusAlter)) ? $value->taskStatusAlter->name : ((is_string($value->status)) ? $value->status : '-'));

            $startTime                 = Carbon::parse($value->start_time);
            $endTime                   = Carbon::parse($value->end_time);
            $task_csv['Tracked Time']  = ((isset($value->taskStartEndHistories->first()->tracked_time) && ! empty($value->taskStartEndHistories->first()->tracked_time)) ?
                                            $value->taskStartEndHistories->first()->tracked_time : 0);
            $task_csv['Tracking Start'] = ((isset($value->taskStartEndHistories->first()->first_start_date) && ! empty($value->taskStartEndHistories->first()->first_start_date)) ?
                                            $value->taskStartEndHistories->first()->first_start_date : '-');
            $task_csv['Tracking End'] = ((isset($value->taskStartEndHistories->first()->last_end_date) && ! empty($value->taskStartEndHistories->first()->last_end_date)) ?
                                            $value->taskStartEndHistories->first()->last_end_date : '-');
            $task_csv['Difference']    = ($task_csv['Tracked Time'] - $task_csv['Approved Time'] > 0 ? $task_csv['Tracked Time'] - $task_csv['Approved Time'] : '+' . abs($task_csv['Tracked Time'] - $task_csv['Approved Time'])) ?? 0;
            array_push($tasks_csv, $task_csv);
        }

        return $tasks_csv;
    }

    public function viewAllTasks(Request $request)
    {
        $issues    = $this->loadAllTasks($request)->paginate(10);
        $tasks_csv = $this->getTasksCsvNeededFormat($issues);

        if ($request->ajax()) {
            return view('development.ajax.all-tasks-ajax', [
                'issues'    => $issues,
                'tasks_csv' => $tasks_csv,
                'startDate' => $request->get('startDate', null),
                'endDate'   => $request->get('endDate', null),
            ]);
        }

        return view('development.all-tasks', [
            'issues'    => $issues,
            'tasks_csv' => $tasks_csv,
            'startDate' => $request->get('startDate', null),
            'endDate'   => $request->get('endDate', null),
        ]);
    }

    public function exportTask(Request $request)
    {
        $issues    = $this->loadAllTasks($request)->get();
        $tasks_csv = $this->getTasksCsvNeededFormat($issues);

        return $this->outputCsv('download-task-summaries.csv', $tasks_csv);
    }

    public function exportExcel(Request $request)
    {
        return Excel::download(new DeveloperTaskExcelExport($request), 'tasks.xlsx');
    }

    private function outputCsv($fileName, $assocDataArray)
    {
        header('Pragma: public');
        header('Expires: 0');
        header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
        header('Cache-Control: private', false);
        header('Content-Type: text/csv; charset=utf-8');
        header('Content-Disposition: attachment;filename=' . $fileName);
        $fp = fopen('php://output', 'w');
        if (isset($assocDataArray['0'])) {
            fputcsv($fp, array_keys($assocDataArray['0']));
            foreach ($assocDataArray as $values) {
                fputcsv($fp, $values);
            }
        }
        fclose($fp);
        exit();
    }

    public function summaryList(Request $request)
    {
        // Load issues
        $type = $request->tasktype ? $request->tasktype : 'all';

        $title = 'Task List';

        $issues = DeveloperTask::with('timeSpent');
        if ($type == 'issue') {
            $issues = $issues->where('developer_tasks.task_type_id', '3');
        }
        if ($type == 'devtask') {
            $issues = $issues->where('developer_tasks.task_type_id', '1');
        }
        if ((int) $request->get('submitted_by') > 0) {
            $issues = $issues->where('developer_tasks.created_by', $request->get('submitted_by'));
        }
        if ((int) $request->get('responsible_user') > 0) {
            $issues = $issues->where('developer_tasks.responsible_user_id', $request->get('responsible_user'));
        }

        if ((int) $request->get('corrected_by') > 0) {
            $issues = $issues->where('developer_tasks.user_id', $request->get('corrected_by'));
        }

        if ((int) $request->get('assigned_to') > 0) {
            $issues = $issues->whereIn('developer_tasks.assigned_to', $request->get('assigned_to'));
        }
        if ((int) $request->get('lead') > 0) {
            $issues = $issues->whereIn('developer_tasks.master_user_id', $request->get('lead'));
        }
        if ($request->get('module')) {
            $issues = $issues->where('developer_tasks.module_id', $request->get('module'));
        }
        if (! empty($request->get('task_status', []))) {
            $issues = $issues->whereIn('developer_tasks.status', $request->get('task_status'));
        } else {
            $issues = $issues->where('developer_tasks.status', 'In Progress');
        }

        if (! empty($request->get('module_id', []))) {
            $issues = $issues->whereIn('developer_tasks.module_id', $request->get('module_id'));
        }

        $whereCondition = '';
        if ($request->get('subject') != '') {
            $subject = explode(',', $request->get('subject'));
            foreach ($subject as $termSubject) {
                $whereCondition .= ' and message like  "%' . $request->get('subject') . '%"';
            }
            $issues = $issues->where(function ($query) use ($subject) {
                $query->whereIn('developer_tasks.id', $subject)
                    ->orWhere(function ($query) use ($subject) {
                        foreach ($subject as $termSubject) {
                            $query->orWhere('subject', 'like', "%$termSubject%")->orWhere('task', 'like', "%$termSubject%")->orWhere('chat_messages.message', 'LIKE', "%$termSubject%");
                        }
                    });
            });
        }

        $issues = $issues->leftJoin(DB::raw('(SELECT MAX(id) as  max_id, issue_id, message   FROM `chat_messages` where issue_id > 0 ' . $whereCondition . ' GROUP BY issue_id ) m_max'), 'm_max.issue_id', '=', 'developer_tasks.id');
        $issues = $issues->leftJoin('chat_messages', 'chat_messages.id', '=', 'm_max.max_id');

        if ($request->get('last_communicated', 'off') == 'on') {
            $issues = $issues->orderBy('chat_messages.id', 'desc');
        }
        if ($request->get('unread_messages', 'off') == 'unread') {
            $issues = $issues->where('chat_messages.sent_to_user_id', Auth::user()->id);
        }

        $issues = $issues->select('developer_tasks.*', 'chat_messages.message', 'chat_messages.sent_to_user_id');

        // Set variables with modules and users
        $modules = DeveloperModule::orderBy('name')->get();

        $users = Helpers::getUserArray(User::orderBy('name')->get());

        $statusList = \DB::table('task_statuses')->select('name')->orderBy('name')->pluck('name', 'name')->toArray();

        $statusList = array_merge([
            '' => 'Select Status',
        ], $statusList);

        if (! auth()->user()->isReviwerLikeAdmin()) {
            $issues = $issues->where(function ($query) {
                $query->where('developer_tasks.assigned_to', auth()->user()->id)
                    ->orWhere('developer_tasks.master_user_id', auth()->user()->id);
            });
        }

        // category filter start count
        $issuesGroups = clone $issues;
        $issuesGroups = $issuesGroups->where('developer_tasks.status', 'Planned')->groupBy('developer_tasks.assigned_to')->select([\DB::raw('count(developer_tasks.id) as total_product'), 'developer_tasks.assigned_to'])->pluck('total_product', 'assigned_to')->toArray();
        $userIds      = array_values(array_filter(array_keys($issuesGroups)));
        $userModel    = User::whereIn('id', $userIds)->pluck('name', 'id')->toArray();

        $countPlanned = [];
        if (! empty($issuesGroups) && ! empty($userModel)) {
            foreach ($issuesGroups as $key => $count) {
                $countPlanned[] = [
                    'id'    => $key,
                    'name'  => ! empty($userModel[$key]) ? $userModel[$key] : 'N/A',
                    'count' => $count,
                ];
            }
        }
        // category filter start count
        $issuesGroups = clone $issues;
        $issuesGroups = $issuesGroups->where('developer_tasks.status', 'In Progress')->groupBy('developer_tasks.assigned_to')->select([\DB::raw('count(developer_tasks.id) as total_product'), 'developer_tasks.assigned_to'])->pluck('total_product', 'assigned_to')->toArray();
        $userIds      = array_values(array_filter(array_keys($issuesGroups)));

        $userModel       = User::whereIn('id', $userIds)->pluck('name', 'id')->toArray();
        $countInProgress = [];
        if (! empty($issuesGroups) && ! empty($userModel)) {
            foreach ($issuesGroups as $key => $count) {
                $countInProgress[] = [
                    'id'    => $key,
                    'name'  => ! empty($userModel[$key]) ? $userModel[$key] : 'N/A',
                    'count' => $count,
                ];
            }
        }

        // Sort
        if ($request->order == 'priority') {
            $issues = $issues->orderBy('priority', 'ASC')->orderBy('created_at', 'DESC')->with('communications');
        } elseif ($request->order == 'latest_task_first') {
            $issues = $issues->orderBy('developer_tasks.id', 'DESC');
        } else {
            $issues = $issues->orderBy('chat_messages.id', 'desc');
        }

        $issues = $issues->with('communications');

        $issues   = $issues->paginate(Setting::get('pagination'));
        $priority = ErpPriority::where('model_type', '=', DeveloperTask::class)->pluck('model_id')->toArray();

        //Get all searchable user list
        $userslist = null;
        if ((int) $request->get('assigned_to') > 0) {
            $userslist = User::whereIn('id', $request->get('assigned_to'))->get();
        }

        $time_doctor_projects = \App\TimeDoctor\TimeDoctorProject::select('time_doctor_project_id', 'time_doctor_project_name')->get()->toArray();

        $datatableModel = DataTableColumn::select('column_name')->where('user_id', auth()->user()->id)->where('section_name', 'development-summarylist')->first();

        $dynamicColumnsToShowDs = [];
        if (! empty($datatableModel->column_name)) {
            $hideColumns            = $datatableModel->column_name ?? '';
            $dynamicColumnsToShowDs = json_decode($hideColumns, true);
        }

        $reply_categories = ReplyCategory::select('id', 'name')
            ->with('approval_leads', 'sub_categories')
            ->where('parent_id', 0)
            ->where('id', 44)
            ->orderby('name', 'ASC')->get();

        if (request()->ajax()) {
            return view('development.partials.summarydatas', [
                'issues'                 => $issues,
                'users'                  => $users,
                'modules'                => $modules,
                'request'                => $request,
                'title'                  => $title,
                'type'                   => $type,
                'priority'               => $priority,
                'countPlanned'           => $countPlanned,
                'countInProgress'        => $countInProgress,
                'statusList'             => $statusList,
                'userslist'              => $userslist,
                'dynamicColumnsToShowDs' => $dynamicColumnsToShowDs,
                'reply_categories'       => $reply_categories,
            ]);
        }

        return view('development.summarylist', [
            'issues'                 => $issues,
            'users'                  => $users,
            'modules'                => $modules,
            'request'                => $request,
            'title'                  => $title,
            'type'                   => $type,
            'priority'               => $priority,
            'countPlanned'           => $countPlanned,
            'countInProgress'        => $countInProgress,
            'statusList'             => $statusList,
            'userslist'              => $userslist,
            'time_doctor_projects'   => $time_doctor_projects,
            'dynamicColumnsToShowDs' => $dynamicColumnsToShowDs,
            'reply_categories'       => $reply_categories,
        ]);
    }

    public function summaryListDev(Request $request)
    {
        // Load issues
        $type = $request->tasktype ? $request->tasktype : 'all';

        $title = 'Task List';

        $issues = DeveloperTask::with('timeSpent');
        if ($type == 'issue') {
            $issues = $issues->where('developer_tasks.task_type_id', '3');
        }
        if ($type == 'devtask') {
            $issues = $issues->where('developer_tasks.task_type_id', '1');
        }
        if ((int) $request->get('submitted_by') > 0) {
            $issues = $issues->where('developer_tasks.created_by', $request->get('submitted_by'));
        }
        if ((int) $request->get('responsible_user') > 0) {
            $issues = $issues->where('developer_tasks.responsible_user_id', $request->get('responsible_user'));
        }

        if ((int) $request->get('corrected_by') > 0) {
            $issues = $issues->where('developer_tasks.user_id', $request->get('corrected_by'));
        }

        if ((int) $request->get('assigned_to') > 0) {
            $issues = $issues->whereIn('developer_tasks.assigned_to', $request->get('assigned_to'));
        }
        if ((int) $request->get('lead') > 0) {
            $issues = $issues->whereIn('developer_tasks.master_user_id', $request->get('lead'));
        }
        if ($request->get('module')) {
            $issues = $issues->where('developer_tasks.module_id', $request->get('module'));
        }
        if (! empty($request->get('task_status', []))) {
            $issues = $issues->whereIn('developer_tasks.status', $request->get('task_status'));
        } else {
            $issues = $issues->where('developer_tasks.status', 'In Progress');
        }

        $whereCondition = '';
        if ($request->get('subject') != '') {
            $subject = explode(',', $request->get('subject'));
            foreach ($subject as $termSubject) {
                $whereCondition .= ' and message like  "%' . $request->get('subject') . '%"';
            }
            $issues = $issues->where(function ($query) use ($subject) {
                $query->whereIn('developer_tasks.id', $subject)
                    ->orWhere(function ($query) use ($subject) {
                        foreach ($subject as $termSubject) {
                            $query->orWhere('subject', 'like', "%$termSubject%")->orWhere('task', 'like', "%$termSubject%")->orWhere('chat_messages.message', 'LIKE', "%$termSubject%");
                        }
                    });
            });
        }

        $issues = $issues->leftJoin(DB::raw('(SELECT MAX(id) as  max_id, issue_id, message   FROM `chat_messages` where issue_id > 0 ' . $whereCondition . ' GROUP BY issue_id ) m_max'), 'm_max.issue_id', '=', 'developer_tasks.id');
        $issues = $issues->leftJoin('chat_messages', 'chat_messages.id', '=', 'm_max.max_id');

        if ($request->get('last_communicated', 'off') == 'on') {
            $issues = $issues->orderBy('chat_messages.id', 'desc');
        }
        if ($request->get('unread_messages', 'off') == 'unread') {
            $issues = $issues->where('chat_messages.sent_to_user_id', Auth::user()->id);
        }

        $issues = $issues->select('developer_tasks.*', 'chat_messages.message', 'chat_messages.sent_to_user_id');

        // Set variables with modules and users
        $modules = DeveloperModule::orderBy('name')->get();

        $users = Helpers::getUserArray(User::orderBy('name')->get());

        $statusList = \DB::table('task_statuses')->select('name')->orderBy('name')->pluck('name', 'name')->toArray();

        $statusList = array_merge([
            '' => 'Select Status',
        ], $statusList);

        if (! auth()->user()->isReviwerLikeAdmin()) {
            $issues = $issues->where(function ($query) {
                $query->where('developer_tasks.assigned_to', auth()->user()->id)
                    ->orWhere('developer_tasks.master_user_id', auth()->user()->id);
            });
        }

        // category filter start count
        $issuesGroups = clone $issues;
        $issuesGroups = $issuesGroups->where('developer_tasks.status', 'Planned')->groupBy('developer_tasks.assigned_to')->select([\DB::raw('count(developer_tasks.id) as total_product'), 'developer_tasks.assigned_to'])->pluck('total_product', 'assigned_to')->toArray();
        $userIds      = array_values(array_filter(array_keys($issuesGroups)));
        $userModel    = User::whereIn('id', $userIds)->pluck('name', 'id')->toArray();

        $countPlanned = [];
        if (! empty($issuesGroups) && ! empty($userModel)) {
            foreach ($issuesGroups as $key => $count) {
                $countPlanned[] = [
                    'id'    => $key,
                    'name'  => ! empty($userModel[$key]) ? $userModel[$key] : 'N/A',
                    'count' => $count,
                ];
            }
        }
        // category filter start count
        $issuesGroups = clone $issues;
        $issuesGroups = $issuesGroups->where('developer_tasks.status', 'In Progress')->groupBy('developer_tasks.assigned_to')->select([\DB::raw('count(developer_tasks.id) as total_product'), 'developer_tasks.assigned_to'])->pluck('total_product', 'assigned_to')->toArray();
        $userIds      = array_values(array_filter(array_keys($issuesGroups)));

        $userModel       = User::whereIn('id', $userIds)->pluck('name', 'id')->toArray();
        $countInProgress = [];
        if (! empty($issuesGroups) && ! empty($userModel)) {
            foreach ($issuesGroups as $key => $count) {
                $countInProgress[] = [
                    'id'    => $key,
                    'name'  => ! empty($userModel[$key]) ? $userModel[$key] : 'N/A',
                    'count' => $count,
                ];
            }
        }

        // Sort
        if ($request->order == 'priority') {
            $issues = $issues->orderBy('priority', 'ASC')->orderBy('created_at', 'DESC')->with('communications');
        } elseif ($request->order == 'latest_task_first') {
            $issues = $issues->orderBy('developer_tasks.id', 'DESC');
        } else {
            $issues = $issues->orderBy('chat_messages.id', 'desc');
        }

        $issues = $issues->with('communications');

        $issues   = $issues->paginate(Setting::get('pagination'));
        $priority = ErpPriority::where('model_type', '=', DeveloperTask::class)->pluck('model_id')->toArray();

        //Get all searchable user list
        $userslist = null;
        if ((int) $request->get('assigned_to') > 0) {
            $userslist = User::whereIn('id', $request->get('assigned_to'))->get();
        }

        $time_doctor_projects = \App\TimeDoctor\TimeDoctorProject::select('time_doctor_project_id', 'time_doctor_project_name')->get()->toArray();

        $reply_categories = ReplyCategory::select('id', 'name')
            ->with('approval_leads', 'sub_categories')
            ->where('parent_id', 0)
            ->where('id', 44)
            ->orderby('name', 'ASC')->get();
        if (request()->ajax()) {
            return view('development.partials.summarydatas', [
                'issues'           => $issues,
                'users'            => $users,
                'modules'          => $modules,
                'request'          => $request,
                'title'            => $title,
                'type'             => $type,
                'priority'         => $priority,
                'countPlanned'     => $countPlanned,
                'countInProgress'  => $countInProgress,
                'statusList'       => $statusList,
                'userslist'        => $userslist,
                'reply_categories' => $reply_categories,
            ]);
        }

        return view('development.summarylistdev', [
            'issues'               => $issues,
            'users'                => $users,
            'modules'              => $modules,
            'request'              => $request,
            'title'                => $title,
            'type'                 => $type,
            'priority'             => $priority,
            'countPlanned'         => $countPlanned,
            'countInProgress'      => $countInProgress,
            'statusList'           => $statusList,
            'userslist'            => $userslist,
            'time_doctor_projects' => $time_doctor_projects,
            'reply_categories'     => $reply_categories,
        ]);
    }

    public function searchDevTask(Request $request)
    {
        $id = $request->id;

        $type = $request->tasktype ? $request->tasktype : 'all';

        $title = 'Task List';

        $issues = DeveloperTask::with('timeSpent');

        $whereCondition = '';
        if ($request->get('subject') != '') {
            $whereCondition = ' and message like  "%' . $request->get('subject') . '%"';
            $issues         = $issues->where(function ($query) use ($request) {
                $subject = $request->get('subject');
                $task_id = explode(',', $subject);
                if (count($task_id) == 1) {
                    $query->where('developer_tasks.id', 'LIKE', "%$subject%")->orWhere('subject', 'LIKE', "%$subject%")->orWhere('task', 'LIKE', "%$subject%")
                        ->orwhere('chat_messages.message', 'LIKE', "%$subject%");
                } else {
                    $query->whereIn('developer_tasks.id', $task_id)->orWhere('subject', 'LIKE', "%$subject%")->orWhere('task', 'LIKE', "%$subject%")
                        ->orwhere('chat_messages.message', 'LIKE', "%$subject%");
                }
            });
        }

        if ($request->input('selected_user') != '') {
            $userid = $request->input('selected_user');
            $issues = $issues->where('developer_tasks.assigned_to', $userid);
        }

        $issues = $issues->leftJoin(DB::raw('(SELECT MAX(id) as  max_id, issue_id, message   FROM `chat_messages` where issue_id > 0 ' . $whereCondition . ' GROUP BY issue_id ) m_max'), 'm_max.issue_id', '=', 'developer_tasks.id');
        $issues = $issues->leftJoin('chat_messages', 'chat_messages.id', '=', 'm_max.max_id');
        if ($request->get('last_communicated', 'off') == 'on') {
            $issues = $issues->orderBy('chat_messages.id', 'desc');
        }
        if ($request->get('unread_messages', 'off') == 'unread') {
            $issues = $issues->where('chat_messages.sent_to_user_id', Auth::user()->id);
        }
        $issues = $issues->select('developer_tasks.*', 'chat_messages.message', 'chat_messages.sent_to_user_id');
        // Set variables with modules and users
        $modules    = DeveloperModule::orderBy('name')->get();
        $users      = Helpers::getUserArray(User::orderBy('name')->get());
        $statusList = \DB::table('task_statuses')->select('name')->orderBy('name')->pluck('name', 'name')->toArray();
        $statusList = array_merge([
            '' => 'Select Status',
        ], $statusList);

        // Hide resolved
        if (! auth()->user()->isReviwerLikeAdmin()) {
            $issues = $issues->where(function ($query) {
                $query->where('developer_tasks.assigned_to', auth()->user()->id)
                    ->orWhere('developer_tasks.master_user_id', auth()->user()->id);
            });
        }

        // category filter start count
        $issuesGroups = clone $issues;
        $issuesGroups = $issuesGroups->where('developer_tasks.status', 'Planned')->groupBy('developer_tasks.assigned_to')->select([\DB::raw('count(developer_tasks.id) as total_product'), 'developer_tasks.assigned_to'])->pluck('total_product', 'assigned_to')->toArray();
        $userIds      = array_values(array_filter(array_keys($issuesGroups)));
        $userModel    = User::whereIn('id', $userIds)->pluck('name', 'id')->toArray();

        $countPlanned = [];
        if (! empty($issuesGroups) && ! empty($userModel)) {
            foreach ($issuesGroups as $key => $count) {
                $countPlanned[] = [
                    'id'    => $key,
                    'name'  => ! empty($userModel[$key]) ? $userModel[$key] : 'N/A',
                    'count' => $count,
                ];
            }
        }
        // category filter start count
        $issuesGroups = clone $issues;
        $issuesGroups = $issuesGroups->where('developer_tasks.status', 'In Progress')->groupBy('developer_tasks.assigned_to')->select([\DB::raw('count(developer_tasks.id) as total_product'), 'developer_tasks.assigned_to'])->pluck('total_product', 'assigned_to')->toArray();
        $userIds      = array_values(array_filter(array_keys($issuesGroups)));

        $userModel       = User::whereIn('id', $userIds)->pluck('name', 'id')->toArray();
        $countInProgress = [];
        if (! empty($issuesGroups) && ! empty($userModel)) {
            foreach ($issuesGroups as $key => $count) {
                $countInProgress[] = [
                    'id'    => $key,
                    'name'  => ! empty($userModel[$key]) ? $userModel[$key] : 'N/A',
                    'count' => $count,
                ];
            }
        }

        // Sort
        if ($request->order == 'priority') {
            $issues = $issues->orderBy('priority', 'ASC')->orderBy('created_at', 'DESC')->with('communications');
        } elseif ($request->order == 'latest_task_first') {
            $issues = $issues->orderBy('developer_tasks.id', 'DESC');
        } else {
            $issues = $issues->orderBy('chat_messages.id', 'desc');
        }

        $issues = $issues->with('communications');

        $issues   = $issues->paginate(Setting::get('pagination'));
        $priority = ErpPriority::where('model_type', '=', DeveloperTask::class)->pluck('model_id')->toArray();

        return view('development.partials.menu-summarydata', [
            'issues'          => $issues,
            'users'           => $users,
            'modules'         => $modules,
            'request'         => $request,
            'title'           => $title,
            'type'            => $type,
            'priority'        => $priority,
            'countPlanned'    => $countPlanned,
            'countInProgress' => $countInProgress,
            'statusList'      => $statusList,
            // 'languages' => $languages
        ]);
    }

    public function statuscolor(Request $request)
    {
        $status_color = $request->all();
        $data         = $request->except('_token');
        foreach ($status_color['color_name'] as $key => $value) {
            $bugstatus             = TaskStatus::find($key);
            $bugstatus->task_color = $value;
            $bugstatus->save();
        }

        return redirect()->back()->with('success', 'The status color updated successfully.');
    }

    public function automaticTasks(Request $request)
    {
        $users = Helpers::getUserArray(User::orderBy('name')->get());
        $title = 'Automatic Task List';

        $task = Task::leftJoin('site_developments', 'site_developments.id', 'tasks.site_developement_id')
            ->leftJoin('store_websites', 'store_websites.id', 'site_developments.website_id')
            ->with('timeSpent')->where('is_flow_task', '1');

        $devCheckboxs = $request->get('devCheckboxs');
        $dev          = [];

        if (isset($request->term) && ! empty($request->term)) {
            $task = $task->where(function ($query) use ($request) {
                $term = $request->get('term');
                $query->where('tasks.id', 'LIKE', "%$term%")
                    ->orWhere('store_websites.website', 'LIKE', "%$term%")
                    ->orWhere('tasks.parent_task_id', 'LIKE', "%$term%")
                    ->orWhere('tasks.task_subject', 'LIKE', "%$term%")
                    ->orWhere('tasks.task_details', 'LIKE', "%$term%")
                    ->orwhere('chat_messages.message', 'LIKE', "%$term%");
            });
        }

        if (isset($request->assigned_to) && ! empty($request->assigned_to)) {
            $task = $task->where('tasks.assign_to', $request->assigned_to);
        }

        if (isset($request->task_status) && ! empty($request->task_status)) {
            $task = $task->where('tasks.status', $request->task_status);
        }

        $task = $task->leftJoin(DB::raw('(SELECT MAX(id) as  max_id, task_id, message  FROM `chat_messages` where task_id > 0 GROUP BY task_id ) m_max'), 'm_max.task_id', '=', 'tasks.id');
        $task = $task->leftJoin('chat_messages', 'chat_messages.id', '=', 'm_max.max_id');
        $task = $task->select('tasks.*', 'chat_messages.message', 'store_websites.website', 'store_websites.title as website_title');

        if ($devCheckboxs) {
            $count = 1;
            foreach ($request->get('devCheckboxs') as $devCheckbox) {
                if ($count == 1) {
                    $task = $task->where('tasks.assign_to', $devCheckbox);
                } else {
                    $task = $task->orWhere('tasks.assign_to', $devCheckbox);
                }
                $count++;
                $dev[$devCheckbox] = 1;
            }
        }

        if (! auth()->user()->isReviwerLikeAdmin()) {
            if (count($dev) == 0) {
                $task = $task->where(function ($query) {
                    $query->where('tasks.assign_to', auth()->user()->id)
                        ->orWhere('tasks.master_user_id', auth()->user()->id);
                });
            }
        }

        $tasks = $task->paginate(50);

        $task_statuses = TaskStatus::all();

        if ($request->ajax()) {
            return response()->json([
                'tbody' => view('task-module.partials.flagsummarydata', compact('users', 'request', 'title', 'task_statuses', 'tasks', 'dev'))->with('i', ($request->input('page', 1) - 1) * 5)->render(),
                'links' => (string) $tasks->render(),
                'count' => $tasks->total(),
            ], 200);
        }

        return view('task-module.automatictask', [
            'users'         => $users,
            'request'       => $request,
            'title'         => $title,
            'task_statuses' => $task_statuses,
            'tasks'         => $tasks,
            'dev'           => $dev,
            'count'         => $tasks->total(),
        ]);
    }

    public function flagtask(Request $request)
    {
        $users      = Helpers::getUserArray(User::orderBy('name')->get());
        $statusList = \DB::table('task_statuses')->select('name')->orderBy('name')->pluck('name', 'name')->toArray();

        $isTeamLeader                  = \App\Team::where('user_id', auth()->user()->id)->first();
        $model_team                    = \DB::table('teams')->where('user_id', auth()->user()->id)->get()->toArray();
        $team_members_array[]          = auth()->user()->id;
        $team_id_array                 = [];
        $team_members_array_unique_ids = '';
        if (count($model_team) > 0) {
            for ($k = 0; $k < count($model_team); $k++) {
                $team_id_array[] = $model_team[$k]->id;
            }
            $team_ids         = implode(',', $team_id_array);
            $model_user_model = \DB::table('team_user')->whereIn('team_id', $team_id_array)->get()->toArray();
            for ($m = 0; $m < count($model_user_model); $m++) {
                $team_members_array[] = $model_user_model[$m]->user_id;
            }
        }

        $team_members_array_unique     = array_unique($team_members_array);
        $team_members_array_unique_ids = implode(',', $team_members_array_unique);

        $task_statuses   = TaskStatus::all();
        $taskStatusArray = $task_statuses->pluck('id', 'name')->toArray();
        $modules         = DeveloperModule::orderBy('name')->get();

        $type = $request->tasktype ? $request->tasktype : 'all';

        $title = 'Flag Task List';

        $issues = DeveloperTask::with(['timeSpent', 'leadtimeSpent', 'testertimeSpent', 'assignedUser', 'taskStatus']); // ->where('is_flagged', '1')
        $issues->whereNotIn('developer_tasks.status', [DeveloperTask::DEV_TASK_STATUS_DONE, DeveloperTask::DEV_TASK_STATUS_IN_REVIEW]);
        $issues->whereRaw('developer_tasks.assigned_to IN (SELECT id FROM users WHERE is_task_planned = 1)');

        $task = Task::with(['timeSpent', 'taskStatus']); // ->where('is_flagged', '1')
        $task->whereNotIn('tasks.status', [
            Task::TASK_STATUS_DONE,
            Task::TASK_STATUS_USER_COMPLETE,
            Task::TASK_STATUS_USER_COMPLETE_2,
        ]);
        $task->whereRaw('tasks.assign_to IN (SELECT id FROM users WHERE is_task_planned = 1)');

        if (Auth::user()->hasRole('Admin')) {
            $task->whereRaw('tasks.assign_to IN (SELECT id FROM users WHERE is_task_planned = 1)');
        } elseif ($isTeamLeader) {
            $task->whereRaw('tasks.assign_to IN (SELECT id FROM users WHERE is_task_planned = 1 AND id IN (' . $team_members_array_unique_ids . '))');
        } else {
            $login_user_id = auth()->user()->id;
            $task->whereRaw('tasks.assign_to IN (SELECT id FROM users WHERE is_task_planned = 1 AND id IN (' . $login_user_id . '))');
        }

        if ($type == 'issue') {
            $issues = $issues->where('developer_tasks.task_type_id', '3');
        }

        if ($type == 'devtask') {
            $issues = $issues->where('developer_tasks.task_type_id', '1');
        }
        if ((int) $request->get('submitted_by') > 0) {
            $issues = $issues->where('developer_tasks.created_by', $request->get('submitted_by'));
        }
        if ((int) $request->get('responsible_user') > 0) {
            $issues = $issues->where('developer_tasks.responsible_user_id', $request->get('responsible_user'));
        }

        if ((int) $request->get('corrected_by') > 0) {
            $issues = $issues->where('developer_tasks.user_id', $request->get('corrected_by'));
            $task   = $task->where('tasks.assign_from', $request->get('corrected_by'));
        }

        if ($s = request('assigned_to')) {
            if ($s[0] != '') {
                $issues = $issues->whereIn('developer_tasks.assigned_to', $s);
                $task   = $task->whereIn('tasks.assign_to', $s);
            }
        }
        if ((int) $request->get('empty_estimated_time') > 0) {
            $issues = $issues->where('developer_tasks.estimate_time', null);
            $issues = $issues->where('developer_tasks.estimate_date', null);
            $task   = $task->where('tasks.approximate', 0);
            $task   = $task->where('tasks.due_date', null);
        }
        if ((int) $request->get('time_is_overdue') > 0) {
            $issues = $issues->where('developer_tasks.estimate_date', '>', date('Y-m-d'))->where('developer_tasks.status', '!=', 'Done');

            $task = $task->where('tasks.due_date', '>', date('Y-m-d'))->where('tasks.status', '!=', 3);
        }
        if ($s = request('module_id', [])) {
            if ($s[0] != '') {
                $issues = $issues->whereIn('developer_tasks.module_id', $s);
            }
        }
        if (! empty($request->get('task_status', []))) {
            $issues = $issues->whereIn('developer_tasks.status', $request->get('task_status'));

            $requestStatusArray = [];
            foreach ($request->get('task_status') as $key => $status) {
                $requestStatusArray[] = $taskStatusArray[$status];
            }

            $task = $task->whereIn('tasks.status', $requestStatusArray);
        }
        $whereCondition = $whereTaskCondition = '';
        if ($request->get('subject') != '') {
            $whereCondition = ' and message like  "%' . $request->get('subject') . '%"';
            $issues         = $issues->where(function ($query) use ($request) {
                $subject = $request->get('subject');
                $query->where('developer_tasks.id', 'LIKE', "%$subject%")->orWhere('subject', 'LIKE', "%$subject%")->orWhere('task', 'LIKE', "%$subject%")
                    ->orwhere('chat_messages.message', 'LIKE', "%$subject%");
            });

            $whereTaskCondition = ' and message like  "%' . $request->get('subject') . '%"';
            $task               = $task->where(function ($query) use ($request) {
                $subject = $request->get('subject');
                $query->where('tasks.id', 'LIKE', "%$subject%")->orWhere('task_subject', 'LIKE', "%$subject%")->orWhere('task_details', 'LIKE', "%$subject%")
                    ->orwhere('chat_messages.message', 'LIKE', "%$subject%");
            });
        }

        $issues = $issues->leftJoin(DB::raw('(SELECT MAX(id) as  max_id, issue_id, message  FROM `chat_messages` where issue_id > 0 ' . $whereCondition . ' GROUP BY issue_id ) m_max'), 'm_max.issue_id', '=', 'developer_tasks.id');
        $issues = $issues->leftJoin('chat_messages', 'chat_messages.id', '=', 'm_max.max_id');

        if ($request->get('last_communicated', 'off') == 'on') {
            $issues = $issues->orderBy('chat_messages.id', 'desc');
        }

        $issues = $issues->select('developer_tasks.*', 'chat_messages.message');

        $task = $task->leftJoin(DB::raw('(SELECT MAX(id) as  max_id, task_id, message  FROM `chat_messages` where task_id > 0 ' . $whereTaskCondition . ' GROUP BY task_id ) m_max'), 'm_max.task_id', '=', 'tasks.id');
        $task = $task->leftJoin('chat_messages', 'chat_messages.id', '=', 'm_max.max_id');
        $task = $task->select('tasks.*', 'chat_messages.message');

        if ($isTeamLeader && ! Auth::user()->hasRole('Admin')) {
            $issues = $issues->where(function ($query) {
                $query->where('developer_tasks.assigned_to', auth()->user()->id)
                    ->orWhere('developer_tasks.master_user_id', auth()->user()->id);
            });
            $task = $task->where(function ($query) use ($team_members_array_unique) {
                $query->whereIn('tasks.assign_to', $team_members_array_unique)
                    ->orWhere('tasks.master_user_id', auth()->user()->id);
            });
        } elseif (! auth()->user()->isReviwerLikeAdmin()) {
            $issues = $issues->where(function ($query) {
                $query->where('developer_tasks.assigned_to', auth()->user()->id)
                    ->orWhere('developer_tasks.master_user_id', auth()->user()->id);
            });
            $task = $task->where(function ($query) {
                $query->where('tasks.assign_to', auth()->user()->id)
                    ->orWhere('tasks.master_user_id', auth()->user()->id);
            });
        }

        if ($request->delivery_date && $request->delivery_date != '') {
            $delivery_date = Carbon::parse($request->delivery_date)->toDateString();
            $issues->whereDate('due_date', $delivery_date);
            $task->whereDate('due_date', $delivery_date);
        }

        // Sort
        if ($request->order == 'priority') {
            $issues = $issues->orderBy('priority', 'ASC')->orderBy('created_at', 'DESC');
            $task   = $task->orderBy('priority_no', 'ASC')->orderBy('created_at', 'DESC');
        } elseif ($request->order == 'latest_task_first') {
            $issues = $issues->orderBy('developer_tasks.id', 'DESC');
            $task   = $task->orderBy('tasks.id', 'DESC');
        } elseif ($request->order == 'oldest_first') {
            $issues = $issues->orderBy('developer_tasks.id', 'ASC');
            $task   = $task->orderBy('tasks.id', 'ASC');
        } else {
            $issues = $issues->orderBy('chat_messages.id', 'desc');
            $task   = $task->orderBy('chat_messages.id', 'desc');
        }

        $paginateLimit = Setting::get('pagination') ?: 15;

        $issues = $issues->paginate($paginateLimit);

        $tasks = $task->paginate($paginateLimit);

        $priority = ErpPriority::where('model_type', '=', DeveloperTask::class)->pluck('model_id')->toArray();
        if ($request->ajax()) {
            $data               = '';
            $isReviwerLikeAdmin = auth()->user()->isReviwerLikeAdmin();
            $userID             = Auth::user()->id;
            foreach ($issues as $key => $issue) {
                if ($isReviwerLikeAdmin) {
                    $data .= view('development.partials.flagsummarydata', compact('issue', 'users', 'statusList', 'task_statuses'));
                } elseif ($issue->created_by == $userID || $issue->master_user_id == $userID || $issue->assigned_to == $userID) {
                    $data .= view('development.partials.flagdeveloper-row-view', compact('issue', 'users', 'statusList', 'task_statuses'));
                }
            }
            foreach ($tasks as $key => $issue) {
                if ($isReviwerLikeAdmin) {
                    $data .= view('task-module.partials.flagsummarydata2', compact('issue', 'users', 'statusList', 'task_statuses'));
                } elseif ($issue->created_by == $userID || $issue->master_user_id == $userID || $issue->assigned_to == $userID) {
                    $data .= view('task-module.partials.flagdeveloper-row-view', compact('issue', 'users', 'statusList', 'task_statuses'));
                }
            }

            return $data;
        }

        $taskMessage = TaskMessage::where('message_type', 'date_time_reminder_message')->first();

        return view('development.flagtask', [
            'issues'      => $issues,
            'users'       => $users,
            'modules'     => $modules,
            'request'     => $request,
            'title'       => $title,
            'type'        => $type,
            'priority'    => $priority,
            'tasks'       => $tasks,
            'taskMessage' => $taskMessage,
            // 'countPlanned' => $countPlanned,
            //'countInProgress' => $countInProgress,
            'statusList' => $statusList,
            // 'languages' => $languages,
            'task_statuses' => $task_statuses,
            'isTeamLeader'  => $isTeamLeader,
        ]);
    }

    public function gettasktimemessage(request $request)
    {
        $id           = $request->input('id');
        $html         = '';
        $chatmessages = ChatMessage::where('task_id', $id)->where('task_time_reminder', 1)->orwhere('developer_task_id', $id)->get();
        $i            = 1;
        if (count($chatmessages) > 0) {
            foreach ($chatmessages as $history) {
                $html .= '<tr>';
                $html .= '<td>' . $i . '</td>';
                $html .= '<td>' . $history->message . '</td>';
                $html .= '<td>' . $history->created_at . '</td>';
                $html .= '</tr>';

                $i++;
            }

            return response()->json(['html' => $html, 'success' => true], 200);
        } else {
            $html .= '<tr>';
            $html .= '<td></td>';
            $html .= '<td></td>';
            $html .= '<td></td>';
            $html .= '</tr>';
        }

        return response()->json(['html' => $html, 'success' => true], 200);
    }

    public function getlogtasktimemessage(request $request)
    {
        $id           = $request->input('id');
        $html         = '';
        $chatmessages = LogChatMessage::where('task_id', $id)->where('task_time_reminder', 1)->get();
        $i            = 1;
        if (count($chatmessages) > 0) {
            foreach ($chatmessages as $history) {
                $html .= '<tr>';
                $html .= '<td>' . $i . '</td>';
                $html .= '<td>' . $history->log_case_id . '</td>';
                $html .= '<td>' . $history->message . '</td>';
                $html .= '<td>' . $history->log_msg . '</td>';
                $html .= '<td>' . $history->created_at . '</td>';
                $html .= '</tr>';

                $i++;
            }

            return response()->json(['html' => $html, 'success' => true], 200);
        } else {
            $html .= '<tr>';
            $html .= '<td></td>';
            $html .= '<td></td>';
            $html .= '<td></td>';
            $html .= '<td></td>';
            $html .= '<td></td>';
            $html .= '</tr>';
        }

        return response()->json(['html' => $html, 'success' => true], 200);
    }

    public function saveTaskMessage(Request $request)
    {
        $input = $request->input();
        TaskMessage::updateOrCreate(['id' => $input['id']], $input);

        return response()->json([
            'success',
        ]);
    }

    public function saveTaskTimeMessage(Request $request)
    {
        $est_time_message['message']          = $request->est_time_message;
        $est_date_message['message']          = $request->est_date_message;
        $overdue_time_date_message['message'] = $request->overdue_time_date_message;

        TaskMessage::updateOrCreate(['message_type' => 'est_time_message', 'frequency' => $request->frequency], $est_time_message);
        TaskMessage::updateOrCreate(['message_type' => 'est_date_message', 'frequency' => $request->frequency], $est_date_message);
        TaskMessage::updateOrCreate(['message_type' => 'overdue_time_date_message', 'frequency' => $request->frequency], $overdue_time_date_message);

        return response()->json(['success']);
    }

    public function summaryList1(Request $request)
    {
        $modules = DeveloperModule::all();
        print_r($modules);

        $statusList = \DB::table('task_statuses')->select('name')->pluck('name', 'name')->toArray();

        $statusList = array_merge([
            '' => 'Select Status',
        ], $statusList);

        return view('development.summarylist', compact('modules', 'statusList'));
    }

    public function issueIndex(Request $request)
    {
        $issues = new Issue;

        if ((int) $request->get('submitted_by') > 0) {
            $issues = $issues->where('submitted_by', $request->get('submitted_by'));
        }
        if ((int) $request->get('responsible_user') > 0) {
            $issues = $issues->where('responsible_user_id', $request->get('responsible_user'));
        }
        if ((int) $request->get('assigned_to') > 0) {
            $issues = $issues->where('assigned_to', $request->get('assigned_to'));
        }
        if ((int) $request->get('corrected_by') > 0) {
            $issues = $issues->where('user_id', $request->get('corrected_by'));
        }
        if ($request->get('module')) {
            $issues = $issues->where('module', $request->get('module'));
        }
        if ($request->get('subject') != '') {
            $issues = $issues->where(function ($query) use ($request) {
                $subject = $request->get('subject');
                $query->where('id', 'LIKE', "%$subject%")->orWhere('subject', 'LIKE', "%$subject%");
            });
        }
        $modules = DeveloperModule::all();
        $users   = Helpers::getUserArray(User::all());
        // Hide resolved
        if ((int) $request->show_resolved !== 1) {
            $issues = $issues->where('is_resolved', 0);
        }
        // Sort
        if ($request->order == 'create') {
            $issues = $issues->orderBy('created_at', 'DESC')->with('communications')->get();
        } else {
            $issues = $issues->orderBy('priority', 'ASC')->orderBy('created_at', 'DESC')->with('communications')->get();
        }
        $priority = ErpPriority::where('model_type', '=', Issue::class)->pluck('model_id')->toArray();

        return view('development.issue', [
            'issues'   => $issues,
            'users'    => $users,
            'modules'  => $modules,
            'request'  => $request,
            'title'    => 'Issue',
            'priority' => $priority,
        ]);
    }

    public function listByUserId(Request $request)
    {
        $user_id        = $request->get('user_id', 0);
        $selected_issue = $request->get('selected_issue', []);
        $issues         = DeveloperTask::select('developer_tasks.*')
            ->leftJoin('erp_priorities', function ($query) use ($user_id) {
                $query->on('erp_priorities.model_id', '=', 'developer_tasks.id');
                $query->where('erp_priorities.model_type', '=', DeveloperTask::class);
                $query->where('erp_priorities.user_id', $user_id);
            })
            ->where('status', '!=', 'Done');
        if (auth()->user()->isAdmin()) {
            $issues = $issues->where(function ($q) use ($selected_issue, $user_id) {
                $user_id = is_null($user_id) ? 0 : $user_id;
                if ($user_id != 0) {
                    $q->where('developer_tasks.assigned_to', $user_id)
                        ->orWhere('developer_tasks.master_user_id', $user_id)
                        ->orWhere('developer_tasks.team_lead_id', $user_id)
                        ->orWhere('developer_tasks.tester_id', $user_id);
                }
                $q->whereIn('developer_tasks.id', $selected_issue)->orWhere('erp_priorities.user_id', $user_id);
            });
        } else {
            $issues = $issues->whereNotNull('erp_priorities.id');
        }

        $issues = $issues->orderBy('erp_priorities.id')->get();
        foreach ($issues as &$value) {
            $value->module     = $value->developerModule->name;
            $value->created_by = User::where('id', $value->created_by)->value('name');
        }
        unset($value);
        $viewData = view('development.partials.taskpriority', compact('issues'))->render();

        return response()->json([
            'html' => $viewData,

        ], 200);
    }

    public function setPriority(Request $request)
    {
        $priority = $request->get('priority', null);
        $user_id  = $request->get('user_id', 0);
        //delete old priority
        ErpPriority::where('user_id', $user_id)->where('model_type', '=', DeveloperTask::class)->delete();

        if (! empty($priority)) {
            foreach ((array) $priority as $model_id) {
                ErpPriority::create([
                    'model_id'   => $model_id,
                    'model_type' => DeveloperTask::class,
                    'user_id'    => $user_id,
                ]);
            }

            $issues = DeveloperTask::select('developer_tasks.id', 'developer_tasks.module_id', 'developer_tasks.subject', 'developer_tasks.task', 'developer_tasks.created_by', 'developer_tasks.task_type_id')
                ->join('erp_priorities', function ($query) use ($user_id) {
                    $query->on('erp_priorities.model_id', '=', 'developer_tasks.id');
                    $query->where('erp_priorities.model_type', '=', DeveloperTask::class);
                    $query->where('erp_priorities.user_id', '=', $user_id);
                })
                ->where('is_resolved', '0')
                ->orderBy('erp_priorities.id')
                ->get();
            $message = '';
            $i       = 1;
            foreach ($issues as $value) {
                $mode = ($value->task_type_id == 3) ? '#ISSUE-' : '#TASK-';
                $message .= $i . ' : ' . $mode . $value->id . '-' . $value->subject . "\n";
                $i++;
            }
            if (! empty($message)) {
                $requestData = new Request();
                $requestData->setMethod('POST');
                $params            = [];
                $params['user_id'] = $request->get('user_id', 0);

                $string = '';
                if (! empty($request->get('global_remarkes', null))) {
                    $string .= $request->get('global_remarkes') . "\n";
                }
                $string .= "Issue Priority is : \n" . $message;

                $params['message'] = $string;
                $params['status']  = 2;
                $requestData->request->add($params);
                app(\App\Http\Controllers\WhatsAppController::class)->sendMessage($requestData, 'priority');
            }
        }

        return response()->json([
            'status' => 'success',
        ]);
    }

    public function issueCreate()
    {
        return view('development.issue-create');
    }

    private function createHubstaffTask(string $taskSummary, ?int $hubstaffUserId, int $projectId, bool $shouldRetry = true)
    {
        $tokens     = $this->getTokens();
        $url        = 'https://api.hubstaff.com/v2/projects/' . $projectId . '/tasks';
        $httpClient = new Client();
        try {
            $body = [
                'summary' => $taskSummary,
            ];

            if ($hubstaffUserId) {
                $body['assignee_id'] = $hubstaffUserId;
            } else {
                $body['assignee_id'] = config('env.HUBSTAFF_DEFAULT_ASSIGNEE_ID');
            }

            $response = $httpClient->post(
                $url,
                [
                    RequestOptions::HEADERS => [
                        'Authorization' => 'Bearer ' . $tokens->access_token,
                        'Content-Type'  => 'application/json',
                    ],

                    RequestOptions::BODY => json_encode($body),
                ]
            );
            $parsedResponse = json_decode($response->getBody()->getContents());

            return $parsedResponse->task->id;
        } catch (ClientException $e) {
            if ($e->getCode() == 401) {
                $this->refreshTokens();
                if ($shouldRetry) {
                    return $this->createHubstaffTask(
                        $taskSummary,
                        $hubstaffUserId,
                        $projectId,
                        false
                    );
                }
            }
        }

        return false;
    }

    public function timeDoctorActions($type, $task, $projectId, $accountId, $assignTo)
    {
        $project_data                                 = [];
        $project_data['time_doctor_project']          = $projectId;
        $project_data['time_doctor_task_name']        = $task['subject'] ?? '';
        $project_data['time_doctor_task_description'] = $task['task'] ?? '';

        if ($type == 'DEVTASK') {
            $message   = '#DEVTASK-' . $task->id . ' => ' . $task->subject;
            $projectId = '#DEVTASK-' . $task->id;
        } elseif ($type == 'TASK') {
            $message   = '#TASK-' . $task->id . ' => ' . $task->task_subject . '. ' . $task->task_details;
            $projectId = '#TASK-' . $task->id;
        } else {
            return false;
        }

        $assignUsersData = TimeDoctorAccount::find($accountId);
        $timedoctor      = Timedoctor::getInstance();
        $companyId       = $assignUsersData->company_id;
        $accessToken     = $assignUsersData->auth_token;

        if (config('app.env') === 'production') {
            $timeDoctorTaskId       = '';
            $timeDoctorTaskResponse = $timedoctor->createGeneralTask($companyId, $accessToken, $project_data, $task->id, $type);
            if (! empty($timeDoctorTaskResponse['data'])) {
                $timeDoctorTaskId = $timeDoctorTaskResponse['data']['id'];
            }

            if ($timeDoctorTaskId && $timeDoctorTaskId != '') {
                $task->time_doctor_task_id = $timeDoctorTaskId;
                $task->save();
                $time_doctor_task                         = new \App\TimeDoctor\TimeDoctorTask();
                $time_doctor_task->time_doctor_task_id    = $timeDoctorTaskId;
                $time_doctor_task->project_id             = $projectId;
                $time_doctor_task->time_doctor_project_id = $projectId;
                $time_doctor_task->summery                = $message;
                $time_doctor_task->save();
            }

            return $timeDoctorTaskResponse;
        } else {
            return false;
        }
    }

    /**
     * return branch name or false
     *
     * @param mixed $repositoryId
     * @param mixed $taskId
     * @param mixed $taskTitle
     * @param mixed $branchName
     */
    private function createBranchOnGithub($repositoryId, $taskId, $taskTitle, $branchName = 'master')
    {
        $newBranchName = 'DEVTASK-' . $taskId;

        $githubRepository = GithubRepository::find($repositoryId);
        $organization     = $githubRepository->organization;

        if (empty($organization)) {
            return false;
        }

        $githubClientObj = $this->connectGithubClient($organization->username, $organization->token);

        // get the master branch SHA
        $url = 'https://api.github.com/repositories/' . $repositoryId . '/branches/' . $branchName;
        try {
            $response  = $githubClientObj->get($url);
            $masterSha = json_decode($response->getBody()->getContents())->commit->sha;
        } catch (Exception $e) {
            return false;
        }

        // create a branch
        $url = 'https://api.github.com/repositories/' . $repositoryId . '/git/refs';
        try {
            $this->githubClient->post(
                $url,
                [
                    RequestOptions::BODY => json_encode([
                        'ref' => 'refs/heads/' . $newBranchName,
                        'sha' => $masterSha,
                    ]),
                ]
            );

            return $newBranchName;
        } catch (Exception $e) {
            if ($e instanceof ClientException && $e->getResponse()->getStatusCode() == 422) {
                // branch already exists
                return $newBranchName;
            }

            return false;
        }
    }

    /**
     * Store a newly created resource in storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $this->validate($request, [
            'subject'       => 'sometimes|nullable|string',
            'task'          => 'required|string|min:3',
            'status'        => 'required',
            'repository_id' => 'required',
            'module_id'     => 'required',
        ]);

        $data                     = $request->except('_token');
        $data['hubstaff_project'] = config('env.HUBSTAFF_BULK_IMPORT_PROJECT_ID');
        $data['user_id']          = request('user_id', loginId());
        $data['created_by']       = Auth::id();
        $data['priority']         = 0;
        $data['hubstaff_task_id'] = 0;
        $data['repository_id']    = request('repository_id');

        $slotAvailable = $this->userSchedulesLoadData($request->get('assigned_to'));

        if (! empty($slotAvailable)) {
            $data['status']        = 'Planned';
            $data['start_date']    = $slotAvailable['st'];
            $data['estimate_date'] = $slotAvailable['en'];
        }

        $task = $this->developerTaskCreate($data);

        if (request('need_review_task')) {
            $data['parent_review_task_id'] = $task->id;
            $reviewTask                    = $this->developerTaskCreate($data);
        }
        if ($request->ajax()) {
            return response()->json(['task' => $task]);
        }

        return redirect(url('development/summarylist'))->with('success', 'You have successfully added task!');
    }

    public function developerTaskCreate($data)
    {
        $loggedUser = request()->user();

        $data['created_by'] = loginId();

        if ($data['parent_review_task_id'] ?? 0) {
            $data['subject'] = $data['subject'] . ' - #REVIEW_TASK';
            $data['task']    = $data['task'] . ' - #REVIEW_TASK';
        }
        $task = DeveloperTask::create($data);

        // Check the assinged user in any team ?
        if ($task->assigned_to > 0 && empty($task->team_lead_id)) {
            $teamUser = \App\TeamUser::where('user_id', $task->assigned_to)->first();
            if ($teamUser) {
                $team = $teamUser->team;
                if ($team) {
                    if (strlen($team->user_id) > 0 && $team->user_id > 0) {
                        $task->team_lead_id = $team->user_id;
                        $task->save();
                    } elseif (strlen($team->second_lead_id) > 0 && $team->second_lead_id > 0) {
                        $task->team_lead_id = $team->second_lead_id;
                        $task->save();
                    }
                }
            } else {
                $isTeamLeader = \App\Team::where('user_id', $task->assigned_to)
                    ->orWhere('second_lead_id', $task->assigned_to)->first();

                if ($isTeamLeader) {
                    $task->team_lead_id = $task->assigned_to;
                    $task->save();
                }
            }
        }

        // CREATE GITHUB REPOSITORY BRANCH
        $newBranchName = $this->createBranchOnGithub(
            $task->repository_id,
            $task->id,
            $task->subject
        );

        // UPDATE TASK WITH BRANCH NAME
        if ($newBranchName) {
            $task->github_branch_name = $newBranchName;
            $task->save();
        }

        // SEND MESSAGE
        if (is_string($newBranchName)) {
            $message = $task->task . PHP_EOL . 'A new branch ' . $newBranchName . " has been created. Please pull the current code and run 'git checkout " . $newBranchName . "' to work in that branch.";
        } else {
            $message = $task->task;
        }
        $requestData = new Request();
        $requestData->setMethod('POST');
        $requestData->request->add(['issue_id' => $task->id, 'message' => $message, 'status' => 1]);
        app(\App\Http\Controllers\WhatsAppController::class)->sendMessage($requestData, 'issue');

        MessageHelper::sendEmailOrWebhookNotification([
            $task->user_id,
            $task->assigned_to,
            $task->master_user_id,
            $task->responsible_user_id,
            $task->team_lead_id,
            $task->tester_id,
        ], ' [ ' . $loggedUser->name . ' ] - ' . $message);

        $hubstaff_project_id = config('env.HUBSTAFF_BULK_IMPORT_PROJECT_ID') ?: 0;

        $hubstaffUserId = null;
        if ($assignedUser = HubstaffMember::where('user_id', $task->assigned_to)->first()) {
            $hubstaffUserId = $assignedUser->hubstaff_user_id;
        }

        $summary = substr($task->task, 0, 200);
        if ($data['task_type_id'] == 1) {
            $taskSummery = '#DEVTASK-' . $task->id . ' => ' . $summary;
        } else {
            $taskSummery = '#TASK-' . $task->id . ' => ' . $summary;
        }

        if (isset($data['task_for']) && $data['task_for'] == 'time_doctor') {
            $this->timeDoctorActions('DEVTASK', $task, $data['time_doctor_project'], $data['time_doctor_account'], $data['assigned_to']);
        } else {
            $hubstaffTaskId = '';
            if (env('PRODUCTION', true)) {
                $hubstaffTaskId = $this->createHubstaffTask(
                    $taskSummery,
                    $hubstaffUserId,
                    $hubstaff_project_id
                );
            } else {
                $hubstaff_project_id = '#TASK-3';
                $hubstaffUserId      = 406; //for local system
                $hubstaffTaskId      = 34543; //for local system
            }

            if ($hubstaffTaskId) {
                $task->hubstaff_task_id = $hubstaffTaskId;
                $task->save();

                $task                      = new HubstaffTask();
                $task->hubstaff_task_id    = $hubstaffTaskId;
                $task->project_id          = $hubstaff_project_id;
                $task->hubstaff_project_id = $hubstaff_project_id;
                $task->summary             = $task->task;
                $task->save();
            }
        }

        return $task;
    }

    public function issueStore(Request $request)
    {
        $this->validate($request, [
            'priority' => 'required|integer',
            'issue'    => 'required|min:3',
        ]);
        $data   = $request->except('_token');
        $module = $request->get('module');

        if ($request->response == 1) {
            $reference = md5(strtolower($request->reference));
            //Check if reference exist
            $existReference = DeveloperTask::where('reference', $reference)->first();
            if ($existReference != null || $existReference != '') {
                return redirect()->back()->withErrors(['Issue Already Created!']);
            }
        }

        if (! isset($reference)) {
            $reference = null;
        }

        if (is_string($module)) {
            $module = DeveloperModule::where('name', 'like', $module)->first();
        } else {
            $module = DeveloperModule::find($module);
        }

        if (! $module) {
            $module       = new DeveloperModule();
            $module->name = $request->get('module');
            $module->save();
            $data['module'] = $module->id;
        }
        $userId                    = Auth::id();
        $userId                    = ! empty($userId) ? $userId : $request->get('assigned_to', 0);
        $task                      = new DeveloperTask;
        $task->priority            = $request->input('priority');
        $task->subject             = $request->input('subject');
        $task->task                = $request->input('issue');
        $task->responsible_user_id = 0;
        $task->assigned_to         = $request->get('assigned_to', 0);
        $task->module_id           = $module->id;
        $task->user_id             = 0;
        $task->assigned_by         = $userId;
        $task->created_by          = $userId;
        $task->reference           = $reference;
        $task->status              = $request->get('status', 'Issue');
        $task->task_type_id        = $request->get('task_type_id', 3);
        $task->scraper_id          = $request->input('scraper_id', null);
        $task->brand_id            = $request->input('brand_id', null);
        $task->save();

        $repo = GithubRepository::where('name', 'erp')->first();

        if ($repo) {
            $this->createBranchOnGithub($repo->id, $task->id, $task->subject);
        }

        if ($request->hasfile('images')) {
            foreach ($request->file('images') as $image) {
                $media = MediaUploader::fromSource($image)
                    ->toDirectory('issue/' . floor($task->id / config('constants.image_per_folder')))
                    ->upload();
                $task->attachMedia($media, config('constants.media_tags'));
            }
        }
        $requestData = new Request();
        $requestData->setMethod('POST');
        $requestData->request->add(['issue_id' => $task->id, 'message' => $request->input('issue'), 'status' => 1]);
        app(\App\Http\Controllers\WhatsAppController::class)->sendMessage($requestData, 'issue');

        return redirect()->back()->with('success', 'You have successfully submitted an issue!');
    }

    public function moduleStore(Request $request)
    {
        $this->validate($request, [
            'name' => 'required|min:1|unique:developer_modules,name,NULL,id,deleted_at,NULL',
        ]);
        $data = $request->except('_token');
        DeveloperModule::create($data);

        return redirect()->back()->with('success', 'You have successfully submitted an issue!');
    }

    public function statusStore(Request $request)
    {
        $this->validate($request, [
            'name' => 'required|string',
        ]);
        $data = $request->except('_token');
        TaskStatus::create($data);

        return redirect()->back()->with('success', 'You have successfully created a status!');
    }

    public function commentStore(Request $request)
    {
        $this->validate($request, [
            'message' => 'required|string|min:3',
        ]);
        $data            = $request->except('_token');
        $data['user_id'] = Auth::id();

        DeveloperComment::create($data);

        return redirect()->back()->with('success', 'You have successfully wrote a comment!');
    }

    public function costStore(Request $request)
    {
        $this->validate($request, [
            'amount'    => 'required|numeric',
            'paid_date' => 'required',
        ]);
        $data = $request->except('_token');
        DeveloperCost::create($data);

        return redirect()->back()->with('success', 'You have successfully added payment!');
    }

    public function awaitingResponse(Request $request, $id)
    {
        $comment         = DeveloperComment::find($id);
        $comment->status = 1;
        $comment->save();

        return response('success');
    }

    public function issueAssign(Request $request, $id)
    {
        $this->validate($request, [
            'user_id' => 'required|integer',
        ]);
        $issue          = Issue::find($id);
        $task           = new DeveloperTask;
        $task->priority = $issue->priority;
        $task->task     = $issue->issue;
        $task->user_id  = $request->user_id;
        $task->status   = 'Planned';
        $task->save();
        foreach ($issue->getMedia(config('constants.media_tags')) as $image) {
            $task->attachMedia($image, config('constants.media_tags'));
        }
        $issue->user_id = $request->user_id;
        $issue->save();
        $issue->delete();

        return redirect()->back()->with('success', 'You have successfully assigned the issue!');
    }

    public function moduleAssign(Request $request, $id)
    {
        $this->validate($request, [
            'user_id' => 'required|integer',
        ]);
        $module          = DeveloperTask::find($id);
        $module->user_id = $request->user_id;
        $module->module  = 0;
        $module->save();

        return redirect()->route('development.index')->with('success', 'You have successfully assigned the module!');
    }

    /**
     * Update the specified resource in storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        $this->validate($request, [
            'priority' => 'required|integer',
            'task'     => 'required|string|min:3',
            'cost'     => 'sometimes||nullable|integer',
            'status'   => 'required',
        ]);
        $data            = $request->except('_token');
        $data['user_id'] = $request->user_id ? $request->user_id : Auth::id();

        $task = DeveloperTask::find($id);
        $task->update($data);
        if ($request->hasfile('images')) {
            foreach ($request->file('images') as $image) {
                $media = MediaUploader::fromSource($image)
                    ->toDirectory('developertask/' . floor($task->id / config('constants.image_per_folder')))
                    ->upload();
                $task->attachMedia($media, config('constants.media_tags'));
            }
        }

        return redirect()->route('development.index')->with('success', 'You have successfully updated task!');
    }

    public function updateCost(Request $request, $id)
    {
        $task = DeveloperTask::find($id);
        if ($task->user_id == Auth::id()) {
            $task->cost = $request->cost;
            $task->save();
        }

        return response('success');
    }

    public function updateStatus(Request $request, $id)
    {
        $task         = DeveloperTask::find($id);
        $task->status = $request->status;
        if ($request->status == 'In Progress') {
            $task->start_time = Carbon::now();
        }
        if ($request->status == 'Done') {
            $task->end_time = Carbon::now();
        }
        $task->save();

        return response('success');
    }

    public function updateTask(Request $request, $id)
    {
        $task       = DeveloperTask::find($id);
        $task->task = $request->task;
        $task->save();

        return response('success');
    }

    public function updatePriority(Request $request, $id)
    {
        $task           = DeveloperTask::find($id);
        $task->priority = $request->priority;
        $task->save();

        return response()->json([
            'priority' => $task->priority,
        ]);
    }

    public function verify(Request $request, $id)
    {
        $task            = DeveloperTask::find($id);
        $task->completed = 1;
        $task->save();
        $notifications = PushNotification::where('model_type', \App\DeveloperTask::class)->where('model_id', $task->id)->where('isread', 0)->get();
        foreach ($notifications as $notification) {
            $notification->isread = 1;
            $notification->save();
        }
        if ($request->ajax()) {
            return response('success');
        }

        return redirect()->route('development.index')->with('success', 'You have successfully verified the task!');
    }

    public function verifyView(Request $request)
    {
        $task = DeveloperTask::find($request->id);
        PushNotification::where('model_type', \App\DeveloperTask::class)->where('model_id', $request->id)->delete();
        if ($request->tab) {
            return redirect(url("/development#task_$request->id"));
        } else {
            return redirect(url("/development?user=$request->user#task_$task->id"));
        }
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function destroy(Request $request, $id)
    {
        $task = DeveloperTask::find($id);
        $task->development_details()->delete();
        $task->delete();
        if ($request->ajax()) {
            return response('success');
        }

        return redirect()->route('development.index')->with('success', 'You have successfully archived the task!');
    }

    public function issueDestroy($id)
    {
        DeveloperTask::find($id)->delete();

        return redirect()->route('development.issue.index')->with('success', 'You have successfully archived the issue!');
    }

    public function moduleDestroy($id)
    {
        $module = DeveloperModule::find($id);
        foreach ($module->tasks as $task) {
            $task->module_id = '';
            $task->save();
        }
        $module->delete();

        return redirect()->route('development.index')->with('success', 'You have successfully archived the module!');
    }

    public function assignUser(Request $request)
    {
        $issue = DeveloperTask::find($request->get('issue_id'));

        $slotAvailable = $this->userSchedulesLoadData($request->get('assigned_to'));

        if (! empty($slotAvailable)) {
            $issue->status        = 'Planned';
            $issue->start_date    = $slotAvailable['st'];
            $issue->estimate_date = $slotAvailable['en'];
        }

        $user = User::find($request->get('assigned_to'));

        if (! $user) {
            return response()->json([
                'status' => 'success', 'message' => 'user not found',
            ], 500);
        }

        $hubstaff_project_id = config('env.HUBSTAFF_BULK_IMPORT_PROJECT_ID');

        $assignedUser = HubstaffMember::where('user_id', $request->get('assigned_to'))->first();

        $hubstaffUserId = null;
        if ($assignedUser) {
            $hubstaffUserId = $assignedUser->hubstaff_user_id;
        }

        $summary = substr($issue->task, 0, 200);
        if ($issue->task_type_id == 1) {
            $taskSummery = '#DEVTASK-' . $issue->id . ' => ' . $summary;
        } else {
            $taskSummery = '#TASK-' . $issue->id . ' => ' . $summary;
        }
        if ($hubstaffUserId) {
            $hubstaffTaskId = $this->createHubstaffTask(
                $taskSummery,
                $hubstaffUserId,
                $hubstaff_project_id
            );
            if ($hubstaffTaskId) {
                $issue->hubstaff_task_id = $hubstaffTaskId;
                $issue->save();

                $task                      = new HubstaffTask();
                $task->hubstaff_task_id    = $hubstaffTaskId;
                $task->project_id          = $hubstaff_project_id;
                $task->hubstaff_project_id = $hubstaff_project_id;
                $task->summary             = $taskSummery;
                $task->save();
            }
        }

        $old_id = $issue->assigned_to;
        if (! $old_id) {
            $old_id = 0;
        }
        $issue->assigned_to = $request->get('assigned_to');
        $issue->save();

        $taskUser             = new TaskUserHistory;
        $taskUser->model      = \App\DeveloperTask::class;
        $taskUser->model_id   = $issue->id;
        $taskUser->old_id     = $old_id;
        $taskUser->new_id     = $request->get('assigned_to');
        $taskUser->user_type  = 'developer';
        $taskUser->updated_by = Auth::user()->name;
        $taskUser->save();

        return response()->json([
            'status' => 'success',
        ]);
    }

    public function userSchedulesLoadData($user_id)
    {
        $isPrint = ! request()->ajax();

        $stDate = $start_date = date('Y-m-d');
        $enDate = $start_date = date('Y-m-d', strtotime(' + 30 days'));
        if ($stDate && $enDate) {
            $filterDates    = dateRangeArr($stDate, $enDate);
            $filterDatesNew = [];
            foreach ($filterDates as $row) {
                $filterDatesNew[$row['date']] = $row;
            }

            $q = User::query();
            $q->leftJoin('user_avaibilities as ua', 'ua.user_id', '=', 'users.id');
            $q->where('users.is_task_planned', 1);
            $q->where('ua.is_latest', 1);
            if (! isAdmin()) {
                $q->where('users.id', loginId());
            }

            $q->where('users.id', $user_id);

            if (request('is_active')) {
                $q->where('users.is_active', request('is_active') == 1 ? 1 : 0);
            }
            $q->select([
                'users.id',
                'users.name',
                \DB::raw('ua.id AS uaId'),
                \DB::raw('ua.date AS uaDays'),
                \DB::raw('ua.from AS uaFrom'),
                \DB::raw('ua.to AS uaTo'),
                \DB::raw('ua.start_time AS uaStTime'),
                \DB::raw('ua.end_time AS uaEnTime'),
                \DB::raw('ua.lunch_time AS uaLunchTime'),
                \DB::raw('ua.lunch_time_from AS lunch_time_from'),
                \DB::raw('ua.lunch_time_to AS lunch_time_to'),
            ]);
            $users = $q->get();
            $count = $users->count();

            if ($count) {
                $filterDatesOnly = array_column($filterDates, 'date');

                $userIds = [];

                // Prepare user's data
                $userArr = [];
                foreach ($users as $single) {
                    $userIds[] = $single->id;
                    if ($single->uaId) {
                        $single->uaStTime    = date('H:i:00', strtotime($single->uaStTime));
                        $single->uaEnTime    = date('H:i:00', strtotime($single->uaEnTime));
                        $single->uaLunchTime = $single->uaLunchTime ? date('H:i:00', strtotime($single->uaLunchTime)) : '';

                        $single->uaDays = $single->uaDays ? explode(',', str_replace(' ', '', $single->uaDays)) : [];
                        $availableDates = UserAvaibility::getAvailableDates($single->uaFrom, $single->uaTo, $single->uaDays, $filterDatesOnly);
                        $availableSlots = UserAvaibility::dateWiseHourlySlotsV2($availableDates, $single->uaStTime, $single->uaEnTime, $single->uaLunchTime, $single);

                        $userArr[] = [
                            'id'             => $single->id,
                            'name'           => $single->name,
                            'uaLunchTime'    => $single->uaLunchTime ? substr($single->uaLunchTime, 0, 5) : '',
                            'uaId'           => $single->uaId,
                            'uaDays'         => $single->uaDays,
                            'availableDays'  => $single->uaDays,
                            'availableDates' => $availableDates,
                            'availableSlots' => $availableSlots,
                        ];
                    } else {
                        $userArr[] = [
                            'id'             => $single->id,
                            'name'           => $single->name,
                            'uaLunchTime'    => null,
                            'uaId'           => null,
                            'uaDays'         => [],
                            'availableDays'  => [],
                            'availableDates' => [],
                            'availableSlots' => [],
                        ];
                    }
                }

                // Get Tasks & Developer Tasks -- Arrange with End time & Mins
                $tasksArr = [];
                if ($userIds) {
                    $tasksInProgress = $this->typeWiseTasks('IN_PROGRESS', [
                        'userIds' => $userIds,
                    ]);
                    $tasksPlanned = $this->typeWiseTasks('PLANNED', [
                        'userIds' => $userIds,
                    ]);

                    if ($tasksInProgress) {
                        foreach ($tasksInProgress as $task) {
                            $task->st_date = date('Y-m-d H:i:00', strtotime($task->st_date));

                            if (! isset($task->en_date)) {
                                $task->en_date = date('Y-m-d H:i:00', strtotime($task->st_date . ' + ' . $task->est_minutes . 'minutes'));
                            }

                            $tasksArr[$task->assigned_to][$task->status2][] = [
                                'id'              => $task->id,
                                'typeId'          => $task->type . '-' . $task->id,
                                'stDate'          => $task->st_date,
                                'enDate'          => $task->en_date,
                                'status'          => $task->status,
                                'status2'         => $task->status2,
                                'mins'            => $task->est_minutes,
                                'manually_assign' => $task->manually_assign,
                            ];
                        }
                    }
                    if ($tasksPlanned) {
                        foreach ($tasksPlanned as $task) {
                            $task->est_minutes                              = 20;
                            $task->st_date                                  = $task->st_date ?: date('Y-m-d H:i:00');
                            $task->en_date                                  = date('Y-m-d H:i:00', strtotime($task->st_date . ' + ' . $task->est_minutes . 'minutes'));
                            $tasksArr[$task->assigned_to][$task->status2][] = [
                                'id'              => $task->id,
                                'typeId'          => $task->type . '-' . $task->id,
                                'stDate'          => $task->st_date,
                                'enDate'          => $task->en_date,
                                'status'          => $task->status,
                                'status2'         => $task->status2,
                                'mins'            => $task->est_minutes,
                                'manually_assign' => $task->manually_assign,
                            ];
                        }
                    }
                }
                if ($isPrint) {
                    _p($tasksArr);
                }

                // Arrange tasks on users slots
                foreach ($userArr as $k1 => $user) {
                    $userTasksArr = isset($tasksArr[$user['id']]) && count($tasksArr[$user['id']]) ? $tasksArr[$user['id']] : [];
                    if ($user['uaId'] && isset($user['availableSlots']) && count($user['availableSlots'])) {
                        foreach ($user['availableSlots'] as $date => $slots) {
                            foreach ($slots as $k2 => $slot) {
                                if ($slot['type'] == 'AVL' || $slot['slot_type'] == 'AVL') {
                                    $res = $this->slotIncreaseAndShift($slot, $userTasksArr);

                                    $slot['taskIds']   = $res['taskIds'] ?? [];
                                    $slot['userTasks'] = $res['userTasks'] ?? [];
                                }
                                $slots[$k2] = $slot;
                            }

                            $user['availableSlots'][$date] = $slots;
                        }
                    }
                    $userArr[$k1] = $user;
                }

                if ($isPrint) {
                    _p($userArr);
                }

                // Arange for datatable
                foreach ($userArr as $user) {
                    if ($user['uaId'] && isset($user['availableSlots']) && count($user['availableSlots'])) {
                        foreach ($user['availableSlots'] as $date => $slots) {
                            foreach ($slots as $slot) {
                                if (in_array($slot['type'], ['AVL', 'SMALL-LUNCH', 'LUNCH-START', 'LUNCH-END']) && $slot['slot_type'] != 'PAST') {
                                    $ut_array         = [];
                                    $ut_arrayManually = [];

                                    if (! empty($slot['userTasks'])) {
                                        foreach ($slot['userTasks'] as $ut) {
                                            if ($ut['manually_assign'] == 1) {
                                                $ut_arrayManually[] = $ut['typeId'];
                                            } else {
                                                $ut_array[] = $ut['typeId'];
                                            }
                                        }
                                    } else {
                                        if ($slot['type'] == 'AVL') {
                                            return $slot;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    public function typeWiseTasks($type, $wh = [])
    {
        $userIds         = $wh['userIds'] ?? [0];
        $taskStatuses    = [0];
        $devTaskStatuses = ['none'];

        if ($type == 'IN_PROGRESS') {
            $taskStatuses = [
                Task::TASK_STATUS_IN_PROGRESS,
            ];
            $devTaskStatuses = [
                DeveloperTask::DEV_TASK_STATUS_IN_PROGRESS,
            ];
        } elseif ($type == 'PLANNED') {
            $taskStatuses = [
                Task::TASK_STATUS_PLANNED,
            ];
            $devTaskStatuses = [
                DeveloperTask::DEV_TASK_STATUS_PLANNED,
            ];
        }

        // start_date IS NOT NULL AND approximate > 0
        // start_date IS NOT NULL AND estimate_minutes > 0

        $sql = "SELECT
            listdata.*
            FROM (
            (
                SELECT 
                    id, 
                    'T' AS type, 
                    assign_to AS assigned_to, 
                    manually_assign, 
                    task_subject AS title, 
                    start_date AS st_date, 
                    due_date AS en_date, 
                    COALESCE(approximate, 0) AS est_minutes, 
                    status,
                    (
                        CASE
                            WHEN status = '" . Task::TASK_STATUS_IN_PROGRESS . "' THEN 'IN_PROGRESS'
                            WHEN status = '" . Task::TASK_STATUS_PLANNED . "' THEN 'PLANNED'
                        END
                    ) AS status2
                FROM 
                    tasks 
                WHERE 
                1
                AND (
                    ( status = '" . Task::TASK_STATUS_IN_PROGRESS . "' AND start_date IS NOT NULL )
                    OR 
                    ( status != '" . Task::TASK_STATUS_IN_PROGRESS . "' )
                )
                AND deleted_at IS NULL
                AND assign_to IN (" . implode(',', $userIds) . ") 
                AND status IN ('" . implode("','", $taskStatuses) . "') 
            )
            UNION
            (
                SELECT 
                    id, 
                    'DT' AS type, 
                    assigned_to AS assigned_to, 
                    manually_assign, 
                    subject AS title, 
                    start_date AS st_date, 
                    estimate_date AS en_date, 
                    COALESCE(estimate_minutes, 0) AS est_minutes, 
                    status,
                    (
                        CASE
                            WHEN status = '" . DeveloperTask::DEV_TASK_STATUS_IN_PROGRESS . "' THEN 'IN_PROGRESS'
                            WHEN status = '" . DeveloperTask::DEV_TASK_STATUS_PLANNED . "' THEN 'PLANNED'
                        END
                    ) AS status2
                FROM developer_tasks
                WHERE 1
                AND (
                    ( status = '" . DeveloperTask::DEV_TASK_STATUS_IN_PROGRESS . "' AND start_date IS NOT NULL )
                    OR 
                    ( status != '" . DeveloperTask::DEV_TASK_STATUS_IN_PROGRESS . "' )
                )
                AND deleted_at IS NULL
                AND assigned_to IN (" . implode(',', $userIds) . ")
                AND status IN ('" . implode("','", $devTaskStatuses) . "')
            )
        ) AS listdata
        ORDER BY listdata.st_date ASC";

        $tasks = \DB::select($sql, []);

        return $tasks;
    }

    public function slotIncreaseAndShift($slot, $tasks)
    {
        // IN_PROGRESS, PLANNED

        $taskIds   = [];
        $userTasks = [];

        if ($tasks) {
            if ($list = ($tasks['IN_PROGRESS'] ?? [])) {
                foreach ($list as $k => $task) {
                    $SlotStart = Carbon::parse($slot['st']);
                    $SlotEnd   = Carbon::parse($slot['en']);
                    $TaskStart = Carbon::parse($task['stDate']);
                    $TaskEnd   = Carbon::parse($task['enDate']);

                    if (
                        ($TaskStart->gte($SlotStart) && $TaskStart->lte($SlotEnd)) ||
                        ($TaskEnd->gte($SlotStart) && $TaskEnd->lte($SlotEnd))
                    ) {
                        $userTasks[] = $task;
                    } elseif ($TaskStart->lte($SlotStart) && $TaskEnd->gte($SlotEnd)) {
                        $userTasks[] = $task;
                    }
                }
                $list                 = array_values($list);
                $tasks['IN_PROGRESS'] = $list;
            }

            if ($list = ($tasks['PLANNED'] ?? [])) {
                foreach ($list as $k => $task) {
                    $SlotStart = Carbon::parse($slot['st']);
                    $SlotEnd   = Carbon::parse($slot['en']);
                    $TaskStart = Carbon::parse($task['stDate']);
                    $TaskEnd   = Carbon::parse($task['enDate']);

                    if (
                        ($TaskStart->gte($SlotStart) && $TaskStart->lte($SlotEnd)) ||
                        ($TaskEnd->gte($SlotStart) && $TaskEnd->lte($SlotEnd))
                    ) {
                        $userTasks[] = $task;
                    } elseif ($TaskStart->lte($SlotStart) && $TaskEnd->gte($SlotEnd)) {
                        $userTasks[] = $task;
                    }
                }
                $list             = array_values($list);
                $tasks['PLANNED'] = $list;
            }
        }

        return [
            'taskIds'   => $taskIds ?? [],
            'userTasks' => $userTasks ?? [],
        ];
    }

    public function assignMasterUser(Request $request)
    {
        $masterUserId = $request->get('master_user_id');
        $issue        = DeveloperTask::find($request->get('issue_id'));

        $old_hubstaff_id = $issue->lead_hubstaff_task_id;

        $user = User::find($masterUserId);

        if (! $user) {
            return response()->json([
                'status' => 'success', 'message' => 'user not found',
            ], 500);
        }
        $old_id = $issue->master_user_id;
        if (! $old_id) {
            $old_id = 0;
        }
        $issue->master_user_id = $masterUserId;

        $issue->save();

        $hubstaff_project_id = config('env.HUBSTAFF_BULK_IMPORT_PROJECT_ID');

        $assignedUser   = HubstaffMember::where('user_id', $masterUserId)->first();
        $hubstaffUserId = null;

        if ($assignedUser) {
            $hubstaffUserId = $assignedUser->hubstaff_user_id;
        }

        $summary = substr($issue->task, 0, 200);
        if ($issue->task_type_id == 1) {
            $taskSummery = '#DEVTASK-' . $issue->id . ' => ' . $summary;
        } else {
            $taskSummery = '#TASK-' . $issue->id . ' => ' . $summary;
        }
        if ($hubstaffUserId) {
            $hubstaffTaskId = $this->createHubstaffTask(
                $taskSummery,
                $hubstaffUserId,
                $hubstaff_project_id
            );

            if ($hubstaffTaskId) {
                $issue->lead_hubstaff_task_id = $hubstaffTaskId;
                $issue->save();

                $task                      = new HubstaffTask();
                $task->hubstaff_task_id    = $hubstaffTaskId;
                $task->project_id          = $hubstaff_project_id;
                $task->hubstaff_project_id = $hubstaff_project_id;
                $task->summary             = $taskSummery;
                $task->save();
            }
        }

        $taskUser                               = new TaskUserHistory;
        $taskUser->model                        = \App\DeveloperTask::class;
        $taskUser->model_id                     = $issue->id;
        $taskUser->old_id                       = $old_id;
        $taskUser->new_id                       = $masterUserId;
        $taskUser->user_type                    = 'leaddeveloper';
        $taskUser->master_user_hubstaff_task_id = $old_hubstaff_id;
        $taskUser->updated_by                   = Auth::user()->name;
        $taskUser->save();

        return response()->json([
            'status' => 'success',
        ]);
    }

    public function assignTeamlead(Request $request)
    {
        $team_lead_id = $request->get('team_lead_id');
        $issue        = DeveloperTask::find($request->get('issue_id'));

        $user = User::find($team_lead_id);

        if (! $user) {
            return response()->json([
                'status' => 'success', 'message' => 'user not found',
            ], 500);
        }

        $isMember = $user->teams()->first();
        if ($isMember) {
            return response()->json([
                'message' => 'This user is already a team member',
            ], 500);
        } else {
            $isLeader = Team::where('user_id', $team_lead_id)->first();
            if (! $isLeader) {
                $team          = new Team;
                $team->name    = $request->name;
                $team->user_id = $team_lead_id;
                $team->save();
            }
            $issue->team_lead_id = $team_lead_id;
            $issue->save();
        }

        return response()->json([
            'status' => 'success',
        ], 200);
    }

    public function assignTester(Request $request)
    {
        $tester_id = $request->get('tester_id');
        $issue     = DeveloperTask::find($request->get('issue_id'));

        $user = User::find($tester_id);

        if (! $user) {
            return response()->json([
                'status' => 'success', 'message' => 'user not found',
            ], 500);
        }
        $old_id = $issue->tester_id;
        if (! $old_id) {
            $old_id = 0;
        }
        $issue->tester_id = $tester_id;
        $issue->save();

        $hubstaff_project_id = config('env.HUBSTAFF_BULK_IMPORT_PROJECT_ID');

        $assignedUser = HubstaffMember::where('user_id', $tester_id)->first();

        $hubstaffUserId = null;
        if ($assignedUser) {
            $hubstaffUserId = $assignedUser->hubstaff_user_id;
        }

        $summary = substr($issue->task, 0, 200);
        if ($issue->task_type_id == 1) {
            $taskSummery = '#DEVTASK-' . $issue->id . ' => ' . $summary;
        } else {
            $taskSummery = '#TASK-' . $issue->id . ' => ' . $summary;
        }
        if ($hubstaffUserId) {
            $hubstaffTaskId = $this->createHubstaffTask(
                $taskSummery,
                $hubstaffUserId,
                $hubstaff_project_id
            );
            if ($hubstaffTaskId) {
                $issue->tester_hubstaff_task_id = $hubstaffTaskId;
                $issue->save();

                $task                      = new HubstaffTask();
                $task->hubstaff_task_id    = $hubstaffTaskId;
                $task->project_id          = $hubstaff_project_id;
                $task->hubstaff_project_id = $hubstaff_project_id;
                $task->summary             = $taskSummery;
                $task->save();
            }
        }

        $taskUser             = new TaskUserHistory;
        $taskUser->model      = \App\DeveloperTask::class;
        $taskUser->model_id   = $issue->id;
        $taskUser->old_id     = $old_id;
        $taskUser->new_id     = $tester_id;
        $taskUser->user_type  = 'tester';
        $taskUser->updated_by = Auth::user()->name;
        $taskUser->save();

        return response()->json([
            'status' => 'success',
        ]);
    }

    public function assignResponsibleUser(Request $request)
    {
        $issue                      = DeveloperTask::find($request->get('issue_id'));
        $issue->assigned_by         = \Auth::id();
        $issue->responsible_user_id = $request->get('responsible_user_id');
        $issue->save();

        return response()->json([
            'status' => 'success',
        ]);
    }

    public function saveMilestone(Request $request)
    {
        $issue = DeveloperTask::find($request->get('issue_id'));
        if (! $issue->is_milestone) {
            return;
        }
        $total = $request->total;
        if ($issue->milestone_completed) {
            if ($total <= $issue->milestone_completed) {
                return response()->json([
                    'message' => 'Milestone no can\'t be reduced',
                ], 500);
            }
        }

        if ($total > $issue->no_of_milestone) {
            return response()->json([
                'message' => 'Estimated milestone exceeded',
            ], 500);
        }
        if (! $issue->cost || $issue->cost == '') {
            return response()->json([
                'message' => 'Please provide cost first',
            ], 500);
        }

        $newCompleted    = $total - $issue->milestone_completed;
        $individualPrice = $issue->cost / $issue->no_of_milestone;
        $totalCost       = $individualPrice * $newCompleted;

        $issue->milestone_completed = $total;
        $issue->save();
        $payment_receipt                    = new PaymentReceipt;
        $payment_receipt->date              = date('Y-m-d');
        $payment_receipt->worked_minutes    = $issue->estimate_minutes;
        $payment_receipt->rate_estimated    = $totalCost;
        $payment_receipt->status            = 'Pending';
        $payment_receipt->developer_task_id = $issue->id;
        $payment_receipt->user_id           = $issue->assigned_to;
        $payment_receipt->save();

        return response()->json([
            'status' => 'success',
        ]);
    }

    public function resolveIssue(Request $request)
    {
        $issue = DeveloperTask::find($request->get('issue_id'));
        if ($issue->is_resolved == 1) {
            return response()->json([
                'message' => 'DONE Status can not change further.',
            ], 500);
        }
        if (strtolower($request->get('is_resolved')) == 'done') {
            if (Auth::user()->isAdmin()) {
                $is_team       = 0;
                $old_status    = $issue->status;
                $issue->status = $request->get('is_resolved');
                $assigned_to   = User::find($issue->assigned_to);
                if (! $assigned_to) {
                    return response()->json([
                        'message' => 'Please assign the task.',
                    ], 500);
                }
                $team_user = \DB::table('team_user')->where('user_id', $issue->assigned_to)->first();
                if ($team_user) {
                    $team_lead = \DB::table('teams')->where('id', $team_user->team_id)->first();
                    if ($team_lead) {
                        $dev_task_user = User::find($team_lead->user_id);
                        $is_team       = 1;
                    }
                }
                if (empty($dev_task_user)) {
                    $dev_task_user = $assigned_to;
                }
                if ($dev_task_user && $dev_task_user->fixed_price_user_or_job == 0) {
                    return response()->json([
                        'message' => 'Please provide salary payment method for ' . $dev_task_user->name . ' .',
                    ], 500);
                }
                if ($dev_task_user && $dev_task_user->fixed_price_user_or_job == 1) {
                    $userRate = UserRate::getRateForUser($dev_task_user->id);
                    // Fixed price task.
                    if ($issue->cost == null) {
                        return response()->json([
                            'message' => 'Please provide cost for fixed price task.',
                        ], 500);
                    }

                    if (! $issue->is_milestone) {
                        $payment_receipt                    = new PaymentReceipt;
                        $payment_receipt->date              = date('Y-m-d');
                        $payment_receipt->worked_minutes    = $issue->estimate_minutes;
                        $payment_receipt->rate_estimated    = $issue->cost;
                        $payment_receipt->status            = 'Pending';
                        $payment_receipt->currency          = ($userRate->currency ?? 'USD');
                        $payment_receipt->developer_task_id = $issue->id;
                        $payment_receipt->user_id           = $dev_task_user->id;
                        $payment_receipt->by_command        = 3;
                        $payment_receipt->save();
                    }
                } elseif ($dev_task_user && $dev_task_user->fixed_price_user_or_job == 2) {
                    $userRate = UserRate::getRateForUser($dev_task_user->id);

                    if ($userRate && $userRate->hourly_rate !== null) {
                        if ($issue->estimate_minutes) {
                            if ($issue->ApprovedDeveloperTaskHistory) {
                                $rate_estimated = ($issue->estimate_minutes) * ($userRate->hourly_rate) / 60;
                            } else {
                                return response()->json([
                                    'message' => 'Estimated time is not approved.',
                                ], 500);
                            }
                        } else {
                            return response()->json([
                                'message' => 'Estimated time is not exist.',
                            ], 500);
                        }
                    } else {
                        return response()->json([
                            'message' => 'Please provide hourly rate for ' . $dev_task_user->name . ' .',
                        ], 500);
                    }
                    $payment_receipt                    = new PaymentReceipt;
                    $payment_receipt->date              = date('Y-m-d');
                    $payment_receipt->worked_minutes    = $issue->estimate_minutes;
                    $payment_receipt->rate_estimated    = $rate_estimated;
                    $payment_receipt->status            = 'Pending';
                    $payment_receipt->currency          = ($userRate->currency ?? 'USD');
                    $payment_receipt->developer_task_id = $issue->id;
                    $payment_receipt->user_id           = $dev_task_user->id;
                    $payment_receipt->by_command        = 2;
                    $payment_receipt->save();
                }
                $issue->responsible_user_id = $issue->assigned_to;
                $issue->is_resolved         = 1;
                $issue->save();

                DeveloperTaskHistory::create([
                    'developer_task_id' => $issue->id,
                    'model'             => \App\DeveloperTask::class,
                    'attribute'         => 'task_status',
                    'old_value'         => $old_status,
                    'new_value'         => $request->is_resolved,
                    'user_id'           => Auth::id(),
                ]);
            } else {
                return response()->json([
                    'message' => 'Only admin can change status to DONE.',
                ], 500);
            }
        } else {
            $old_status = $issue->status;

            DeveloperTaskHistory::create([
                'developer_task_id' => $issue->id,
                'model'             => \App\DeveloperTask::class,
                'attribute'         => 'task_status',
                'old_value'         => $old_status,
                'new_value'         => $request->is_resolved,
                'user_id'           => Auth::id(),
            ]);

            $issue->status = $request->get('is_resolved');

            if ($issue->status == DeveloperTask::DEV_TASK_STATUS_IN_PROGRESS) {
                if ($issue->actual_start_date == null || $issue->actual_start_date == '0000-00-00 00:00:00') {
                    $issue->actual_start_date = date('Y-m-d H:i:s');
                }
            }
            if ($issue->status == DeveloperTask::DEV_TASK_STATUS_DONE) {
                $issue->actual_end_date = date('Y-m-d H:i:s');
            }
            if ($issue->status == DeveloperTask::DEV_TASK_STATUS_USER_COMPLETE) {
                if (isset($request->checklist)) {
                    $statusMsg = 'Status has been updated : From ' . $old_status . ' To ' . DeveloperTask::DEV_TASK_STATUS_USER_COMPLETE . "\n";
                    $msg       = '';
                    foreach ($request->checklist as $key => $list) {
                        $checkList = DeveloperTaskStatusChecklist::find($key);
                        if (! empty($checkList)) {
                            DeveloperTaskStatusChecklistRemarks::create([
                                'user_id'                            => Auth::id(),
                                'task_id'                            => $issue->id,
                                'developer_task_status_checklist_id' => $key,
                                'remark'                             => $list,
                            ]);
                            $msg .= $checkList['name'] . ' => ' . $list . "\n";
                        }
                    }

                    $message = ! empty($msg) ? $statusMsg . $msg : '';

                    if (! empty($message)) {
                        ChatMessage::create([
                            'user_id'           => Auth::user()->id,
                            'developer_task_id' => $issue->id,
                            'sent_to_user_id'   => $issue->user_id,
                            'message'           => $message,
                            'status'            => 2,
                            'approved'          => 1,
                        ]);
                    }
                }
            }

            $issue->save();
        }

        return response()->json([
            'status' => 'success',
        ]);
    }

    public function saveEstimateTime(Request $request)
    {
        $issue = DeveloperTaskHistory::where(['developer_task_id' => $request->get('issue_id'), 'attribute' => 'estimation_minute', 'user_id' => Auth::user()->id])->orderBy('id', 'DESC')->first();
        if ($issue->count() > 0) {
            $task_history                    = new DeveloperTaskHistory;
            $task_history->developer_task_id = $request->get('issue_id');
            $task_history->attribute         = 'estimation_minute';
            $task_history->old_value         = $issue->new_value;
            $task_history->new_value         = $request->get('estimate_time');
            $task_history->user_id           = Auth::user()->id();
            $task_history->developer_task_id = $request->name;
            $task_history->model             = \App\DeveloperTask::class;
            $result                          = $task_history->save();
        } else {
            $task_history                    = new DeveloperTaskHistory;
            $task_history->developer_task_id = $request->get('issue_id');
            $task_history->attribute         = 'estimation_minute';
            $task_history->old_value         = 0;
            $task_history->new_value         = $request->get('estimate_time');
            $task_history->user_id           = Auth::user()->id();
            $task_history->developer_task_id = $request->name;
            $task_history->model             = \App\DeveloperTask::class;
            $result                          = $task_history->save();
        }

        return response()->json([
            'status' => 'success', 'result' => $result,
        ]);
    }

    public function approveTimeHistory(Request $request)
    {
        if (Auth::user()->isAdmin) {
            if (! $request->approve_time || $request->approve_time == '' || ! $request->developer_task_id || $request->developer_task_id == '') {
                return response()->json([
                    'message' => 'Select one time first',
                ], 500);
            }
            DeveloperTaskHistory::where('developer_task_id', $request->developer_task_id)->where('attribute', 'estimation_minute')->where('model', \App\DeveloperTask::class)->update(['is_approved' => 0]);
            $history              = DeveloperTaskHistory::find($request->approve_time);
            $history->is_approved = 1;
            $history->save();

            if ($history) {
                if ($history->old_value == null) {
                    $old_val = '';
                } else {
                    $old_val = $history->old_value;
                }

                $param = [
                    'developer_task_id' => $history->developer_task_id,
                    'old_value'         => $old_val,
                    'new_value'         => $history->new_value,
                    'user_id'           => \Auth::id(),
                ];
                $add_history = HubstaffHistory::create($param);
            }

            $task         = DeveloperTask::find($request->developer_task_id);
            $task->status = DeveloperTask::DEV_TASK_STATUS_APPROVED;
            $task->save();

            $time = $history->new_value !== null ? $history->new_value : $history->old_value;
            $msg  = 'TIME APPROVED FOR TASK ' . '#DEVTASK-' . $task->id . '-' . $task->subject . ' - ' . $time . ' MINS';

            $user        = User::find($request->user_id);
            $admin       = Auth::user();
            $master_user = User::find($task->master_user_id);
            $team_lead   = User::find($task->team_lead_id);
            $tester      = User::find($task->tester_id);

            if ($user) {
                if ($admin->phone) {
                    $chat = ChatMessage::create([
                        'number'            => $admin->phone,
                        'user_id'           => $user->id,
                        'customer_id'       => $user->id,
                        'message'           => $msg,
                        'status'            => 0,
                        'developer_task_id' => $request->developer_task_id,
                    ]);
                } elseif ($user->phone) {
                    $chat = ChatMessage::create([
                        'number'            => $user->phone,
                        'user_id'           => $user->id,
                        'customer_id'       => $user->id,
                        'message'           => $msg,
                        'status'            => 0,
                        'developer_task_id' => $request->developer_task_id,
                    ]);
                } elseif ($master_user && $master_user->phone) {
                    $chat = ChatMessage::create([
                        'number'            => $master_user->phone,
                        'user_id'           => $user->id,
                        'customer_id'       => $user->id,
                        'message'           => $msg,
                        'status'            => 0,
                        'developer_task_id' => $request->developer_task_id,
                    ]);
                } elseif ($team_lead && $team_lead->phone) {
                    $chat = ChatMessage::create([
                        'number'            => $team_lead->phone,
                        'user_id'           => $user->id,
                        'customer_id'       => $user->id,
                        'message'           => $msg,
                        'status'            => 0,
                        'developer_task_id' => $request->developer_task_id,
                    ]);
                } elseif ($tester && $tester->phone) {
                    $chat = ChatMessage::create([
                        'number'            => $tester->phone,
                        'user_id'           => $user->id,
                        'customer_id'       => $user->id,
                        'message'           => $msg,
                        'status'            => 0,
                        'developer_task_id' => $request->developer_task_id,
                    ]);
                }
                if (isset($chat)) {
                    if ($admin->phone) {
                        app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($admin->phone, $admin->whatsapp_number, $msg, false, $chat->id);
                    }
                    if ($user->phone) {
                        app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($user->phone, $user->whatsapp_number, $msg, false, $chat->id);
                    }
                    if ($master_user && $master_user->phone) {
                        app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($master_user->phone, $master_user->whatsapp_number, $msg, false, $chat->id);
                    }
                    if ($team_lead && $team_lead->phone) {
                        app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($team_lead->phone, $team_lead->whatsapp_number, $msg, false, $chat->id);
                    }
                    if ($tester && $tester->phone) {
                        app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($tester->phone, $tester->whatsapp_number, $msg, false, $chat->id);
                    }
                }
            }
        } else {
            return response()->json([
                'message' => 'Only admin can approve',
            ], 500);
        }
    }

    public function sendRemindMessage(Request $request)
    {
        $user = User::find($request->user_id);
        if ($user) {
            $receiver_user_phone = $user->phone;
            if ($receiver_user_phone) {
                $task = DeveloperTask::find($request->id);
                $msg  = 'PLS ADD ESTIMATED TIME FOR TASK  ' . '#DEVTASK-' . $task->id . '-' . $task->subject;
                $chat = ChatMessage::create([
                    'number'            => $receiver_user_phone,
                    'user_id'           => $user->id,
                    'customer_id'       => $user->id,
                    'message'           => $msg,
                    'status'            => 0,
                    'developer_task_id' => $request->id,
                ]);

                app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($receiver_user_phone, $user->whatsapp_number, $msg, false, $chat->id);

                MessageHelper::sendEmailOrWebhookNotification([$task->assigned_to, $task->team_lead_id, $task->tester_id], $msg);
            }
        }

        return response()->json([
            'message' => 'Remind message sent successfully',
        ]);
    }

    public function sendReviseMessage(Request $request)
    {
        $user = User::find($request->user_id);
        if ($user) {
            $receiver_user_phone = $user->phone;
            if ($receiver_user_phone) {
                $task = DeveloperTask::find($request->id);
                $msg  = 'TIME NOT APPROVED REVISE THE ESTIMATED TIME FOR TASK ' . '#DEVTASK-' . $task->id . '-' . $task->subject;
                $chat = ChatMessage::create([
                    'number'            => $receiver_user_phone,
                    'user_id'           => $user->id,
                    'customer_id'       => $user->id,
                    'message'           => $msg,
                    'status'            => 0,
                    'developer_task_id' => $request->id,
                ]);
                app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($receiver_user_phone, $user->whatsapp_number, $msg, false, $chat->id);

                MessageHelper::sendEmailOrWebhookNotification([$task->assigned_to, $task->team_lead_id, $task->tester_id], $msg);
            }
        }

        return response()->json([
            'message' => 'Revise message sent successfully',
        ]);
    }

    public function savePriorityNo(Request $request)
    {
        $issue = DeveloperTask::find($request->get('issue_id'));

        if ($issue) {
            $issue->priority_no = $request->get('priority');
            $issue->save();
        }

        return response()->json(['status' => 'success']);
    }

    public function updateValues(Request $request)
    {
        $task  = DeveloperTask::find($request->get('id'));
        $type  = $request->get('type');
        $value = $request->get('value');
        if ($type == 'start_date') {
            $task->start_date = $request->get('value');
        } else {
            if ($type == 'end_date') {
                $task->end_date = $request->get('value');
            } else {
                if ($type == 'estimate_date') {
                    $task->estimate_date = $request->get('value');
                } else {
                    if ($type == 'cost') {
                        $task->cost = $request->get('value');
                    } else {
                        if ($type == 'module') {
                            $task->module_id = $request->get('value');
                        }
                    }
                }
            }
        }
        $task->save();

        return response()->json([
            'status' => 'success',
        ]);
    }

    public function overview(Request $request)
    {
        // Get status
        $status = $request->get('status');
        if (empty($status)) {
            $status = 'In Progress';
        }
        $task_type = 1;
        $taskTypes = TaskTypes::all();
        $users     = Helpers::getUsersByRoleName('Developer');
        if (! empty($request->get('task_type'))) {
            $task_type = $request->get('task_type');
        }
        if (! empty($request->get('task_status'))) {
            $status = $request->get('task_status');
        }
        if (! empty($request->get('task_type')) && ! empty($request->get('task_status'))) {
            $status    = $request->get('task_status');
            $task_type = $request->get('task_type');
        }

        return view('development.overview', [
            'taskTypes' => $taskTypes,
            'users'     => $users,
            'status'    => $status,
            'task_type' => $task_type,
        ]);
    }

    public function taskDetail($taskId)
    {
        // Get tasks
        $task = DeveloperTask::where('developer_tasks.id', $taskId)
            ->select('developer_tasks.*', 'task_types.name as task_type', 'users.name as username', 'u.name as reporter')
            ->leftjoin('task_types', 'task_types.id', '=', 'developer_tasks.task_type_id')
            ->leftjoin('users', 'users.id', '=', 'developer_tasks.user_id')
            ->leftjoin('users AS u', 'u.id', '=', 'developer_tasks.created_by')
            ->first();
        // Get subtasks
        $subtasks = DeveloperTask::where('developer_tasks.parent_id', $taskId)->get();
        // Get comments
        $comments = DeveloperTaskComment::where('task_id', $taskId)
            ->join('users', 'users.id', '=', 'developer_task_comments.user_id')
            ->get();
        //Get Attachments
        $attachments = TaskAttachment::where('task_id', $taskId)->get();
        $developers  = Helpers::getUserArray(User::role('Developer')->get());
        // Return view
        return view('development.task_detail', [
            'task'        => $task,
            'subtasks'    => $subtasks,
            'comments'    => $comments,
            'developers'  => $developers,
            'attachments' => $attachments,
        ]);
    }

    public function taskComment(Request $request)
    {
        $response = [];
        $this->validate($request, [
            'comment' => 'required|string|min:1',
        ]);
        $data            = $request->except('_token');
        $data['user_id'] = Auth::id();

        $created = DeveloperTaskComment::create($data);
        if ($created) {
            $response['status'] = 'ok';
            $response['msg']    = 'Comment stored successfully';
            echo json_encode($response);
        } else {
            $response['status'] = 'error';
            $response['msg']    = 'Error';
        }
    }

    public function changeTaskStatus(Request $request)
    {
        if (! empty($request->input('task_id'))) {
            $task         = DeveloperTask::find($request->input('task_id'));
            $task->status = $request->input('status');
            $task->save();

            return response()->json(['success']);
        }
    }

    public function makeDirectory($path, $mode = 0777, $recursive = false, $force = false)
    {
        if ($force) {
            return @mkdir($path, $mode, $recursive);
        } else {
            return mkdir($path, $mode, $recursive);
        }
    }

    public function uploadAttachDocuments(Request $request)
    {
        $task_id = $request->input('task_id');
        $task    = DeveloperTask::find($task_id);
        if ($request->hasfile('attached_document')) {
            foreach ($request->file('attached_document') as $image) {
                $name   = time() . '_' . $image->getClientOriginalName();
                $new_id = floor($task_id / 1000);

                $dirname = public_path() . '/uploads/developer-task/' . $new_id;
                if (file_exists($dirname)) {
                    $dirname2 = public_path() . '/uploads/developer-task/' . $new_id . '/' . $task_id;
                    if (file_exists($dirname2) == false) {
                        mkdir($dirname2, 0777);
                    }
                } else {
                    mkdir($dirname, 0777);
                }
                $media = MediaUploader::fromSource($image)->toDirectory("developer-task/$new_id/$task_id")->upload();
                $task->attachMedia($media, config('constants.media_tags'));
            }
        }
        if (! empty($request->file('attached_document'))) {
            foreach ($request->file('attached_document') as $file) {
                $name = time() . '_' . $file->getClientOriginalName();
                $file->move(public_path('images/task_files/'), $name);
                $task_attachment          = new TaskAttachment;
                $task_attachment->task_id = $task_id;
                $task_attachment->name    = $name;
                $task_attachment->save();
            }

            return redirect(url("/development/task-detail/$task_id"));
        } else {
            return redirect(url("/development/task-detail/$task_id"));
        }
    }

    public function downloadFile(Request $request)
    {
        $file_name = $request->input('file_name');
        $file      = public_path() . '/images/task_files/' . $file_name;
        $ext       = substr($file_name, strrpos($file_name, '.') + 1);
        $headers   = [];
        if ($ext == 'pdf') {
            $headers = [
                'Content-Type: application/pdf',
            ];
        }

        return Response::download($file, $file_name, $headers);
    }

    public function openNewTaskPopup(Request $request)
    {
        $status = 'ok';
        // Get all developers
        if (config('app.env')) {
            $userlst = User::role('Developer')->orderby('name', 'asc')->get(); // Production
        } else {
            $userlst = User::orderby('name', 'asc')->get(); // Local system
        }
        $users = Helpers::getUserArray($userlst);
        // Get all task types
        $tasksTypes  = TaskTypes::all();
        $moduleNames = [];

        // Get all modules
        $modules = DeveloperModule::orderBy('name')->get();

        // Loop over all modules and store them
        foreach ($modules as $module) {
            $moduleNames[$module->id] = $module->name;
        }

        // this is the ID for erp
        $defaultRepositoryId = 231925646;

        $githubOrganizations = GithubOrganization::get();

        $statusList = \DB::table('task_statuses')
            ->orderBy('name')
            ->select('name')
            ->pluck('name', 'name')
            ->toArray();

        $statusList = array_merge([
            '' => 'Select Status',
        ], $statusList);

        //Get hubstaff projects
        $projects = HubstaffProject::all();

        $html = View::make('development.ajax.add_new_task', compact('users', 'tasksTypes', 'modules', 'moduleNames', 'githubOrganizations', 'defaultRepositoryId', 'projects', 'statusList'))->render();

        return json_encode(compact('html', 'status'));
    }

    public function saveLanguage(Request $request)
    {
        $language = $request->get('language');

        if (! empty(trim($language))) {
            if (! is_numeric($language)) {
                $languageModal = \App\DeveloperLanguage::updateOrCreate(
                    ['name' => $language],
                    ['name' => $language]
                );
            }

            $issue           = DeveloperTask::find($request->get('issue_id'));
            $issue->language = isset($languageModal->id) ? $languageModal->id : $language;
            $issue->save();
        }

        return response()->json([
            'status' => 'success',
        ]);
    }

    public function uploadDocument(Request $request)
    {
        $id      = $request->get('developer_task_id', 0);
        $subject = $request->get('subject', null);

        $loggedUser = $request->user();

        if ($id > 0 && ! empty($subject)) {
            $devTask = DeveloperTask::find($id);

            if (! empty($devTask)) {
                $devDocuments = new \App\DeveloperTaskDocument;
                $devDocuments->fill(request()->all());
                $devDocuments->created_by = \Auth::id();
                $devDocuments->save();

                if ($request->hasfile('files')) {
                    foreach ($request->file('files') as $files) {
                        $media = MediaUploader::fromSource($files)
                            ->toDirectory('developertask/' . floor($devTask->id / config('constants.image_per_folder')))
                            ->upload();
                        $devDocuments->attachMedia($media, config('constants.media_tags'));
                    }

                    $message = '[ ' . $loggedUser->name . ' ] - #DEVTASK-' . $devTask->id . ' - ' . $devTask->subject . " \n\n" . 'New attchment(s) called ' . $subject . ' has been added. Please check and give your comment or fix it if any issue.';

                    MessageHelper::sendEmailOrWebhookNotification([$devTask->assigned_to, $devTask->team_lead_id, $devTask->tester_id], $message);
                }

                return response()->json(['code' => 200, 'success' => 'Done!']);
            }

            return response()->json(['code' => 500, 'error' => 'Oops, There is no record in database']);
        } else {
            return response()->json(['code' => 500, 'error' => 'Oops, Please fillup required fields']);
        }
    }

    public function getDocument(Request $request)
    {
        $id = $request->get('id', 0);

        if ($id > 0) {
            $devDocuments = \App\DeveloperTaskDocument::where('developer_task_id', $id)->latest()->get();

            $html = view('development.ajax.document-list', compact('devDocuments'))->render();

            return response()->json(['code' => 200, 'data' => $html]);
        } else {
            return response()->json(['code' => 500, 'error' => 'Oops, id is required field']);
        }
    }

    /**
     * changeModule on  development/list/devtask
     *
     * @ajax Request
     *
     * @return \Illuminate\Http\Response
     */
    public function changeModule(Request $request)
    {
        if ($request->ajax()) {
            $task_module = DeveloperTask::find($request->get('issue_id'));
            if ($task_module) {
                $task_module->module_id = $request->get('module_id');
                if ($task_module->save()) {
                    $message = ['message' => 'success', 'status' => '200'];
                } else {
                    $message = ['message' => 'Error', 'status' => '400'];
                }
            } else {
                $message = ['message' => 'Error', 'status' => '400'];
            }
        } else {
            $message = ['message' => 'Error', 'status' => '400'];
        }

        return response()->json($message);
    }

    public function getTimeHistory(Request $request)
    {
        $users = User::get();

        $id          = $request->id;
        $task_module = DeveloperTaskHistory::join('users', 'users.id', 'developer_tasks_history.user_id')
            ->where('developer_task_id', $id)
            ->where('model', \App\DeveloperTask::class)
            ->where('attribute', 'estimation_minute')
            ->select('developer_tasks_history.*', 'users.name')
            ->orderBy('id', 'DESC')
            ->get();

        if ($task_module) {
            return $task_module;
        }

        return 'error';
    }

    public function getTimeHistoryApproved(Request $request)
    {
        $users = User::get();

        $id = $request->id;

        $task_module = HubstaffHistory::join('users', 'users.id', 'hubstaff_historys.user_id')->where('developer_task_id', $id)->select('hubstaff_historys.*', 'users.name')->get();

        if ($task_module) {
            return $task_module;
        }

        return 'error';
    }

    public function getStatusHistory(Request $request)
    {
        $id   = $request->id;
        $type = \App\DeveloperTask::class;
        if (isset($request->type) && $request->type == 'task') {
            $type = \App\Task::class;
        }
        $task_module = DeveloperTaskHistory::join('users', 'users.id', 'developer_tasks_history.user_id')->where('developer_task_id', $id)->where('model', $type)->where('attribute', 'task_status')->select('developer_tasks_history.*', 'users.name')->get();
        if ($task_module) {
            return $task_module;
        }

        return 'error';
    }

    public function getTrackedHistory(Request $request)
    {
        $id   = $request->id;
        $type = $request->type;
        if ($type == 'lead') {
            $task_histories = DB::select(DB::raw('SELECT hubstaff_activities.task_id,cast(hubstaff_activities.starts_at as date) as starts_at,sum(hubstaff_activities.tracked) as total_tracked,developer_tasks.master_user_id,users.name FROM `hubstaff_activities`  join developer_tasks on developer_tasks.lead_hubstaff_task_id = hubstaff_activities.task_id join users on users.id = developer_tasks.master_user_id where developer_tasks.id = ' . $id . ' group by task_id,starts_at'));
        } elseif ($type == 'tester') {
            $task_histories = DB::select(DB::raw('SELECT hubstaff_activities.task_id,cast(hubstaff_activities.starts_at as date) as starts_at,sum(hubstaff_activities.tracked) as total_tracked,developer_tasks.tester_id,users.name FROM `hubstaff_activities`  join developer_tasks on developer_tasks.tester_hubstaff_task_id = hubstaff_activities.task_id join users on users.id = developer_tasks.tester_id where developer_tasks.id = ' . $id . ' group by task_id,starts_at'));
        } else {
            $task_histories = DB::select(DB::raw('SELECT hubstaff_activities.task_id,cast(hubstaff_activities.starts_at as date) as starts_at,sum(hubstaff_activities.tracked) as total_tracked,developer_tasks.assigned_to,users.name FROM `hubstaff_activities`  join developer_tasks on developer_tasks.hubstaff_task_id = hubstaff_activities.task_id join users on users.id = developer_tasks.assigned_to where developer_tasks.id = ' . $id . ' group by task_id,starts_at'));
        }

        return response()->json(['histories' => $task_histories]);
    }

    public function createHubstaffManualTask(Request $request)
    {
        $task = DeveloperTask::find($request->id);
        if ($task) {
            if ($request->task_for == 'hubstaff') {
                if ($request->type == 'developer') {
                    $user_id = $task->assigned_to;
                } elseif ($request->type == 'tester') {
                    $user_id = $task->tester_id;
                } else {
                    $user_id = $task->master_user_id;
                }
                $hubstaff_project_id = config('env.HUBSTAFF_BULK_IMPORT_PROJECT_ID');

                $assignedUser = HubstaffMember::where('user_id', $user_id)->first();

                $hubstaffUserId = null;
                if ($assignedUser) {
                    $hubstaffUserId = $assignedUser->hubstaff_user_id;
                }
                $taskSummery = '#DEVTASK-' . $task->id . ' => ' . $task->subject;
                if ($hubstaffUserId) {
                    $hubstaffTaskId = $this->createHubstaffTask(
                        $taskSummery,
                        $hubstaffUserId,
                        $hubstaff_project_id
                    );
                } else {
                    return response()->json([
                        'message' => 'Hubstaff member not found',
                    ], 500);
                }
                if ($hubstaffTaskId) {
                    if ($request->type == 'developer') {
                        $task->hubstaff_task_id = $hubstaffTaskId;
                    } elseif ($request->type == 'tester') {
                        $task->tester_hubstaff_task_id = $hubstaffTaskId;
                    } else {
                        $task->lead_hubstaff_task_id = $hubstaffTaskId;
                    }
                    $task->save();
                } else {
                    return response()->json([
                        'message' => 'Hubstaff task not created',
                    ], 500);
                }
                if ($hubstaffTaskId) {
                    $task                      = new HubstaffTask();
                    $task->hubstaff_task_id    = $hubstaffTaskId;
                    $task->project_id          = $hubstaff_project_id;
                    $task->hubstaff_project_id = $hubstaff_project_id;
                    $task->summary             = $taskSummery;
                    $task->save();
                }
            } else {
                $timeDoctorTaskResponse = $this->timeDoctorActions('DEVTASK', $task, $request->time_doctor_project, $request->time_doctor_account, $request->assigned_to);
                $errorMessages          = config('constants.TIME_DOCTOR_API_RESPONSE_MESSAGE');
                if (! $timeDoctorTaskResponse) {
                    return response()->json(['message' => 'Unable to create task'], 500);
                }
                if ($timeDoctorTaskResponse['code'] != '200') {
                    $message = match ($timeDoctorTaskResponse['code']) {
                        '401' => $errorMessages['401'],
                        '403' => $errorMessages['403'],
                        '409' => $errorMessages['409'],
                        '422' => $errorMessages['422'],
                        '500', '404' => $errorMessages['404'],
                        default => 'Time doctor task created successfully',
                    };

                    return response()->json([
                        'message' => $message,
                    ], $timeDoctorTaskResponse['code']);
                } else {
                    return response()->json([
                        'message' => 'Successful',
                    ]);
                }
            }

            return response()->json([
                'message' => 'Successful',
            ]);
        } else {
            return response()->json([
                'message' => 'Task not found',
            ], 500);
        }
    }

    public function deleteBulkTasks(Request $request)
    {
        if (count($request->selected_tasks) > 0) {
            foreach ($request->selected_tasks as $t) {
                DeveloperTask::where('id', $t)->delete();
            }
        }

        return response()->json(['message' => 'Successful']);
    }

    public function getMeetingTimings(Request $request)
    {
        $query = MeetingAndOtherTime::join('users', 'users.id', 'meeting_and_other_times.user_id')->where('model', \App\DeveloperTask::class)->where('model_id', $request->issue_id);
        $issue = DeveloperTask::find($request->issue_id);
        if ($request->type == 'admin') {
            $query = $query;
        } elseif ($request->type == 'developer') {
            $query = $query->where('user_id', $issue->assigned_to);
        } elseif ($request->type == 'lead') {
            $query = $query->where('user_id', $issue->master_user_id);
        } elseif ($request->type == 'tester') {
            $query = $query->where('user_id', $issue->tester_id);
        } else {
            return response()->json(['message' => 'Unauthorized access'], 500);
        }
        if ($request->timing_type && $request->timing_type != '') {
            $query = $query->where('type', $request->timing_type);
        }

        $timings = $query->select('meeting_and_other_times.*', 'users.name')->get();

        $developerTime = MeetingAndOtherTime::where('model', \App\DeveloperTask::class)->where('model_id', $request->issue_id)->where('user_id', $issue->assigned_to)->where('approve', 1)->sum('time');

        $master_devTime = MeetingAndOtherTime::where('model', \App\DeveloperTask::class)->where('model_id', $request->issue_id)->where('user_id', $issue->master_user_id)->where('approve', 1)->sum('time');

        $testerTime = MeetingAndOtherTime::where('model', \App\DeveloperTask::class)->where('model_id', $request->issue_id)->where('user_id', $issue->tester_id)->where('approve', 1)->sum('time');

        return response()->json(['timings' => $timings, 'issue_id' => $request->issue_id, 'developerTime' => $developerTime, 'master_devTime' => $master_devTime, 'testerTime' => $testerTime], 200);
    }

    public function storeMeetingTime(Request $request)
    {
        if (! $request->task_id || $request->task_id == '' || ! $request->time || $request->time == '' || ! $request->user_type || $request->user_type == '' || ! $request->timing_type || $request->timing_type == '') {
            return response()->json(['message' => 'Incomplete data'], 500);
        }
        $query = MeetingAndOtherTime::where('model', \App\DeveloperTask::class)->where('model_id', $request->task_id)->where('type', $request->timing_type);
        $issue = DeveloperTask::find($request->task_id);
        if ($request->user_type == 'developer') {
            $query   = $query->where('user_id', $issue->assigned_to);
            $user_id = $issue->assigned_to;
        } elseif ($request->user_type == 'lead') {
            $query   = $query->where('user_id', $issue->master_user_id);
            $user_id = $issue->master_user_id;
        } elseif ($request->user_type == 'tester') {
            $query   = $query->where('user_id', $issue->tester_id);
            $user_id = $issue->tester_id;
        } else {
            return response()->json(['message' => 'Unauthorized access'], 500);
        }
        $time     = $query->orderBy('id', 'desc')->first();
        $oldValue = 0;
        if ($time) {
            $oldValue = $time->time;
        }
        $time             = new MeetingAndOtherTime;
        $time->model      = \App\DeveloperTask::class;
        $time->model_id   = $request->task_id;
        $time->user_id    = $user_id;
        $time->time       = $request->time;
        $time->old_time   = $oldValue;
        $time->type       = $request->timing_type;
        $time->note       = $request->note;
        $time->updated_by = Auth::user()->name;
        $time->save();

        return response()->json(['message' => 'Successful'], 200);
    }

    public function approveMeetingHistory($task_id, Request $request)
    {
        if (Auth::user()->isAdmin) {
            if (! $request->approve_time || $request->approve_time == '') {
                return response()->json([
                    'message' => 'Select one time first',
                ], 500);
            }
            $time = MeetingAndOtherTime::find($request->approve_time);

            MeetingAndOtherTime::where('model', \App\DeveloperTask::class)->where('model_id', $time->model_id)->where('type', $time->type)->where('user_id', $time->user_id)->update(['approve' => 0]);
            $time->approve = 1;
            $time->save();

            return response()->json([
                'message' => 'Success',
            ], 200);
        }
    }

    public function getUserHistory(Request $request)
    {
        $users = TaskUserHistory::where('model', \App\DeveloperTask::class)->where('model_id', $request->id)->get();
        foreach ($users as $u) {
            $old_name = null;
            $new_name = null;
            if ($u->old_id) {
                $old_name = User::find($u->old_id)->name;
            }
            if ($u->new_id) {
                $new_name = User::find($u->new_id)->name;
            }
            $u->new_name = $new_name;
            $u->old_name = $old_name;
        }

        return response()->json([
            'users' => $users,
        ], 200);
    }

    public function getPullHistory(Request $request)
    {
        $pullrequests = DeveoperTaskPullRequestMerge::where('task_id', $request->id)->get();
        foreach ($pullrequests as $u) {
            $u->user_id = User::find($u->user_id)->name;
        }

        return response()->json([
            'pullrequests' => $pullrequests,
        ], 200);
    }

    public function getLeadTimeHistory(Request $request)
    {
        $id          = $request->id;
        $task_module = DeveloperTaskHistory::join('users', 'users.id', 'developer_tasks_history.user_id')->where('developer_task_id', $id)->where('attribute', 'lead_estimation_minute')->select('developer_tasks_history.*', 'users.name')->get();
        if ($task_module) {
            return $task_module;
        }

        return 'error';
    }

    public function updateDevelopmentReminder(Request $request)
    {
        // this is the changes related to developer task
        $task                      = DeveloperTask::find($request->get('development_id'));
        $task->frequency           = $request->get('frequency');
        $task->reminder_message    = $request->get('message');
        $task->reminder_from       = $request->get('reminder_from', '0000-00-00 00:00');
        $task->reminder_last_reply = $request->get('reminder_last_reply', 0);
        $task->last_send_reminder  = date('Y-m-d H:i:s');
        $task->save();

        $message = $request->get('message');
        if (optional($task->assignedUser)->phone) {
            $requestData = new Request();
            $requestData->setMethod('POST');
            $requestData->request->add(['issue_id' => $task->id, 'message' => $message, 'status' => 1]);
            app(\App\Http\Controllers\WhatsAppController::class)->sendMessage($requestData, 'issue');
        }

        return response()->json([
            'success',
        ]);
    }

    public function changeUser(Request $request)
    {
        $title  = 'Change User';
        $user   = $request->user;
        $issues = DeveloperTask::with('timeSpent', 'developerTaskHistory', 'assignedUser', 'masterUser', 'timeSpent', 'leadtimeSpent', 'testertimeSpent', 'messages.taskUser', 'messages.user', 'tester');

        if (Auth::user()->hasRole('Admin') && isset($user) && (int) count($request->user) > 0) {
            $issues = $issues->whereIn('assigned_to', $user);
        }

        $issues = $issues->where('developer_tasks.task_type_id', '1')->whereNotNull('scraper_id');
        $usrlst = User::orderBy('name')->get();
        $users  = Helpers::getUserArray($usrlst);
        $issues = $issues->select('developer_tasks.*');
        $issues = $issues->paginate(20);

        return view('development.change_user', [
            'users'   => $users,
            'user'    => (@$user) ? implode(',', $user) : '',
            'userIds' => (@$user) ? @$user : [],
            'title'   => $title,
            'issues'  => $issues,
        ]);
    }

    public function changeUserStore(Request $request)
    {
        if ($request->assign_user_id) {
            $final = [];
            $tasks = \App\DeveloperTask::select()->whereIn('id', explode(',', $request->task_ids))->whereIn('assigned_to', explode(',', $request->assign_user_id))->where('status', 'In Progress')->where('task_type_id', '1')->where('scraper_id', '>', 0)->get();
            if ($tasks) {
                foreach ($tasks as $_task) {
                    $data['priority']            = $_task->priority;
                    $data['subject']             = $_task->subject;
                    $data['task']                = $_task->task;
                    $data['responsible_user_id'] = $_task->responsible_user_id;
                    $data['assigned_to']         = $request->change_user_id;
                    $data['module_id']           = $_task->module_id;
                    $data['user_id']             = $_task->user_id;
                    $data['assigned_by']         = $_task->assigned_by;
                    $data['created_by']          = $_task->created_by;
                    $data['reference']           = $_task->reference;
                    $data['status']              = $_task->status;
                    $data['task_type_id']        = $_task->task_type_id;
                    $data['scraper_id']          = $_task->scraper_id;
                    $data['brand_id']            = $_task->brand_id;
                    $data['parent_id']           = $_task->parent_id;
                    $data['hubstaff_task_id']    = $_task->hubstaff_task_id;
                    $data['estimate_date']       = $_task->estimate_date;
                    $final[]                     = $data;
                }
            }

            $insert = \App\DeveloperTask::insert($final);

            return redirect()->back()->with('success', 'You have successfully change user for the task!');
        }

        return redirect()->back();
    }

    public function getDateHistory(Request $request)
    {
        $id   = $request->id;
        $type = \App\DeveloperTask::class;
        if (isset($request->type) && $request->type == 'task') {
            $type = \App\Task::class;
        }
        $task_module = DeveloperTaskHistory::query()
            ->join('users', 'users.id', 'developer_tasks_history.user_id')
            ->where('developer_task_id', $id)
            ->where('model', $type)
            ->where('attribute', 'estimate_date')
            ->select('developer_tasks_history.*', 'users.name')
            ->orderBy('developer_tasks_history.id', 'DESC')
            ->get();
        if ($task_module) {
            return $task_module;
        }

        return 'error';
    }

    public function taskGet()
    {
        try {
            $errors = reqValidate(request()->all(), [
                'id' => 'required',
            ], []);
            if ($errors) {
                return respJson(400, $errors[0]);
            }

            $single = DeveloperTask::find(request('id'));
            if (! $single) {
                return respJson(404, 'No task found.');
            }

            return respJson(200, '', [
                'data' => $single,
                'user' => $single->assignedUser ?? null,
            ]);
        } catch (\Throwable $th) {
            return respException($th);
        }
    }

    public function actionStartDateUpdate()
    {
        if ($new = request('value')) {
            try {
                if ($single = DeveloperTask::find(request('id'))) {
                    $params['message']           = 'Estimated Start Datetime: ' . $new;
                    $params['user_id']           = Auth::user()->id;
                    $params['developer_task_id'] = $single->id;
                    $params['approved']          = 1;
                    $params['status']            = 2;
                    $params['sent_to_user_id']   = $single->user_id;
                    ChatMessage::create($params);
                    $single->estimate_date = request('estimatedEndDateTime'); // Assign for validation purpose in below function.
                    $single->updateStartDate($new);

                    return respJson(200, 'Successfully updated.');
                }
            } catch (Exception $e) {
                return respJson(404, $e->getMessage());
            }

            return respJson(404, 'No task found.');
        }

        return respJson(400, 'Start date is required.');
    }

    public function saveEstimateDate(Request $request)
    {
        if ($new = request('value')) {
            try {
                if ($single = DeveloperTask::find(request('id'))) {
                    $params['message']           = 'Estimated Start Datetime: ' . $new;
                    $params['user_id']           = Auth::user()->id;
                    $params['developer_task_id'] = $single->id;
                    $params['approved']          = 1;
                    $params['status']            = 2;
                    $params['sent_to_user_id']   = $single->user_id;
                    ChatMessage::create($params);
                    $single->updateEstimateDate($new);

                    return respJson(200, 'Successfully updated.');
                }
            } catch (Exception $e) {
                return respJson(404, $e->getMessage());
            }

            return respJson(404, 'No task found.');
        }

        return respJson(400, 'Estimate date is required.');
    }

    public function saveEstimateDueDate(Request $request)
    {
        if ($new = request('value')) {
            if ($single = DeveloperTask::find(request('id'))) {
                $params['message']           = 'Estimated End Datetime: ' . $new;
                $params['user_id']           = Auth::user()->id;
                $params['developer_task_id'] = $single->id;
                $params['approved']          = 1;
                $params['status']            = 2;
                $params['sent_to_user_id']   = $single->user_id;
                ChatMessage::create($params);
                $single->updateEstimateDueDate($new);

                return respJson(200, 'Successfully updated.');
            }

            return respJson(404, 'No task found.');
        }

        return respJson(400, 'Due date is required.');
    }

    public function saveAmount(Request $request)
    {
        if ($new = request('value')) {
            if ($single = DeveloperTask::find(request('id'))) {
                $old = $single->cost;

                $single->cost = $new;
                $single->save();
                $params['message']           = 'New Cost: ' . $new;
                $params['user_id']           = Auth::user()->id;
                $params['developer_task_id'] = $single->id;
                $params['approved']          = 1;
                $params['status']            = 2;
                $params['sent_to_user_id']   = $single->user_id;
                ChatMessage::create($params);
                DeveloperTaskHistory::create([
                    'developer_task_id' => $single->id,
                    'model'             => \App\DeveloperTask::class,
                    'attribute'         => 'cost',
                    'old_value'         => $old,
                    'new_value'         => $new,
                    'user_id'           => loginId(),
                ]);

                return respJson(200, 'Successfully updated.');
            }

            return respJson(404, 'No task found.');
        }

        return respJson(400, 'Cost is required.');
    }

    public function saveEstimateMinutes(Request $request)
    {
        $new    = request('estimate_minutes');
        $remark = request('remark');

        if ($issue = DeveloperTask::find(request('issue_id'))) {
            $old           = $issue->estimate_minutes;
            $start_date    = $issue->start_date;
            $estimate_date = $issue->estimate_date;

            $issue->estimate_minutes = $new;
            $issue->start_date       = $start_date;
            $issue->estimate_date    = $estimate_date;

            $issue->status = DeveloperTask::DEV_TASK_STATUS_USER_ESTIMATED;
            $issue->save();
            $params['message']           = 'Estimated Time: ' . $new . ' Mins, Remark:' . $remark;
            $params['user_id']           = Auth::user()->id;
            $params['developer_task_id'] = $issue->id;
            $params['approved']          = 1;
            $params['status']            = 2;
            $params['sent_to_user_id']   = $issue->user_id;
            ChatMessage::create($params);

            DeveloperTaskHistory::create([
                'developer_task_id' => $issue->id,
                'model'             => \App\DeveloperTask::class,
                'attribute'         => 'estimation_minute',
                'old_value'         => $old,
                'new_value'         => $new,
                'remark'            => $remark ?: null,
                'user_id'           => loginId(),
            ]);

            if (Auth::user()->isAdmin()) {
                $user = User::find($issue->user_id);
                $msg  = 'TIME ESTIMATED BY ADMIN FOR TASK ' . '#DEVTASK-' . $issue->id . '-' . $issue->subject . ' ' . $new . ' MINS';
            } else {
                $user = User::find($issue->master_user_id);
                $msg  = 'TIME ESTIMATED BY USER FOR TASK ' . '#DEVTASK-' . $issue->id . '-' . $issue->subject . ' ' . $new . ' MINS';
            }

            if ($user) {
                $receiver_user_phone = $user->phone;
                if ($receiver_user_phone) {
                    $chat = ChatMessage::create([
                        'number'            => $receiver_user_phone,
                        'user_id'           => $user->id,
                        'customer_id'       => $user->id,
                        'message'           => $msg,
                        'status'            => 0,
                        'developer_task_id' => $issue->id,
                    ]);
                    app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($receiver_user_phone, $user->whatsapp_number, $msg, false, $chat->id);
                    MessageHelper::sendEmailOrWebhookNotification([$issue->assigned_to, $issue->team_lead_id, $issue->tester_id], $msg);
                }
            }

            return respJson(200, 'Successfully updated.');
        }

        return respJson(404, 'Record not found.');
    }

    public function saveLeadEstimateTime(Request $request)
    {
        $issue = DeveloperTask::find(request('issue_id'));

        DeveloperTaskHistory::create([
            'developer_task_id' => $issue->id,
            'model'             => \App\DeveloperTask::class,
            'attribute'         => 'lead_estimation_minute',
            'old_value'         => $issue->lead_estimate_time,
            'new_value'         => request('lead_estimate_time'),
            'remark'            => request('remark') ?: null,
            'user_id'           => loginId(),
        ]);
        $issue->lead_estimate_time = request('lead_estimate_time');
        $issue->save();

        return respJson(200, 'Successfully updated.');
    }

    public function approveLeadTimeHistory(Request $request)
    {
        if (isAdmin()) {
            if (
                ! $request->approve_time
                || $request->approve_time == ''
                || ! $request->lead_developer_task_id
                || $request->lead_developer_task_id == ''
            ) {
                return respJson(400, 'Select one time first.');
            }

            DeveloperTaskHistory::where('developer_task_id', $request->lead_developer_task_id)
                ->where('attribute', 'estimation_minute')
                ->update(['is_approved' => 0]);

            $history              = DeveloperTaskHistory::find($request->approve_time);
            $history->is_approved = 1;
            $history->save();

            return respJson(200, 'Successfully updated.');
        }

        return respJson(403, 'Only admin can approve.');
    }

    public function historySimpleData($key, $id)
    {
        $list = DeveloperTaskHistory::with('user')
            ->where('model', \App\DeveloperTask::class)
            ->where('attribute', $key)
            ->where('developer_task_id', $id)->orderBy('id', 'DESC')->get();

        $html   = [];
        $html[] = '<table class="table table-bordered">';

        $needApprovals = ['start_date', 'estimate_date'];

        if (in_array($key, $needApprovals)) {
            $html[] = '<thead>
            <tr>
                <th width="5%">#</th>
                <th width="5%">ID</th>
                <th width="30%">Update By</th>
                <th width="20%" style="word-break: break-all;">Old Value</th>
                <th width="20%" style="word-break: break-all;">New Value</th>
                <th width="20%">Created at</th>
            </tr>
        </thead>';
        } else {
            $html[] = '<thead>
            <tr>
                <th width="10%">ID</th>
                <th width="30%">Update By</th>
                <th width="20%" style="word-break: break-all;">Old Value</th>
                <th width="20%" style="word-break: break-all;">New Value</th>
                <th width="20%">Created at</th>
            </tr>
        </thead>';
        }

        if ($list->count()) {
            foreach ($list as $single) {
                if (in_array($key, $needApprovals)) {
                    $html[] = '<tr>
                        <td><input type="radio" name="radio_for_approve" value="' . $single->id . '" ' . ($single->is_approved ? 'checked' : '') . ' style="height:auto;" /></td>
                        <td>' . $single->id . '</td>
                        <td>' . ($single->user ? $single->user->name : '-') . '</td>
                        <td>' . $single->old_value . '</td>
                        <td>' . $single->new_value . '</td>
                        <td>' . $single->created_at . '</td>
                    </tr>';
                } else {
                    $html[] = '<tr>
                        <td>' . $single->id . '</td>
                        <td>' . ($single->user ? $single->user->name : '-') . '</td>
                        <td>' . $single->old_value . '</td>
                        <td>' . $single->new_value . '</td>
                        <td>' . $single->created_at . '</td>
                    </tr>';
                }
            }
        } else {
            if (in_array($key, $needApprovals)) {
                $html[] = '<tr>
                    <td colspan="6">No records found.</td>
                </tr>';
            } else {
                $html[] = '<tr>
                    <td colspan="5">No records found.</td>
                </tr>';
            }
        }
        $html[] = '</table>';

        return respJson(200, '', ['data' => implode('', $html)]);
    }

    public function historyStartDate()
    {
        return $this->historySimpleData('start_date', request('id'));
    }

    public function historyEstimateDate()
    {
        return $this->historySimpleData('estimate_date', request('id'));
    }

    public function historyCost()
    {
        return $this->historySimpleData('cost', request('id'));
    }

    public function historyApproveSubmit()
    {
        $id   = request('radio_for_approve');
        $type = request('type');
        if ($type == 'start_date' || $type == 'estimate_date') {
            DeveloperTaskHistory::approved($id, $type);
        }

        return respJson(200, 'Approved successfully.');
    }

    public function historyApproveList()
    {
        $type   = request('type');
        $taskId = request('id');
        if ($type == 'start_date' || $type == 'estimate_date') {
            $q = DeveloperTasksHistoryApprovals::from('developer_tasks_history_approvals as t1');
            $q->with(['approvedBy']);
            $q->leftJoin('developer_tasks_history as t2', function ($join) {
                $join->on('t1.parent_id', '=', 't2.id');
            });
            $q->where('t2.model', \App\DeveloperTask::class);
            $q->where('t2.attribute', $type);
            $q->where('t2.developer_task_id', $taskId);
            $q->select([
                't1.*',
                't2.new_value AS value',
            ]);
            $q->orderBy('id', 'DESC');
            $list = $q->get();
        }

        $html   = [];
        $html[] = '<table class="table table-bordered">';
        $html[] = '<thead>
            <tr>
                <th width="15%">Parent ID</th>
                <th width="30%">Update By</th>
                <th width="30%" style="word-break: break-all;">Approved Value</th>
                <th width="25%">Created at</th>
            </tr>
        </thead>';
        if (isset($list) && $list->count()) {
            foreach ($list as $single) {
                $html[] = '<tr>
                    <td>' . $single->parent_id . '</td>
                    <td>' . ($single->approvedByName() ?: '-') . '</td>
                    <td>' . $single->value . '</td>
                    <td>' . $single->created_at . '</td>
                </tr>';
            }
        } else {
            $html[] = '<tr>
                <td colspan="4">No records found.</td>
            </tr>';
        }
        $html[] = '</table>';

        return respJson(200, '', ['data' => implode('', $html)]);
    }

    /**
     * function to show the user wise development task's statuses counts.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function developmentTaskSummary(Request $request)
    {
        $getTaskStatus      = TaskStatus::orderBy('name', 'asc')->groupBy('name')->get();
        $getTaskStatusIds   = TaskStatus::select(DB::raw('group_concat(name) as name'))->first();
        $arrTaskStatusNames = explode(',', $getTaskStatusIds['name']);

        $userListWithStatuesCnt = User::select('developer_tasks.id', 'developer_tasks.user_id', 'users.id as userid', 'users.name', 'developer_tasks.status', DB::raw('(SELECT developer_tasks.created_at from developer_tasks where developer_tasks.user_id = users.id order by developer_tasks.created_at DESC limit 1) AS created_date'), 'users.name', DB::raw('count(developer_tasks.id) statusCnt'));
        $userListWithStatuesCnt = $userListWithStatuesCnt->join('developer_tasks', 'developer_tasks.user_id', 'users.id')->where('users.is_task_planned', 1);

        // Code for filter
        //Get all searchable user list
        $userslist       = $statuslist = null;
        $filterUserIds   = $request->get('users_filter');
        $filterStatusIds = $request->get('status_filter');

        //Get all searchable status list
        if ((int) $filterUserIds > 0 && (int) $filterStatusIds > 0) {
            $searchableStatus       = TaskStatus::WhereIn('id', $filterStatusIds)->get();
            $userListWithStatuesCnt = $userListWithStatuesCnt->WhereIn('developer_tasks.user_id', $filterUserIds)->where(function ($query) use ($searchableStatus) {
                foreach ($searchableStatus as $searchTerm) {
                    $query->orWhere('developer_tasks.status', 'like', "%$searchTerm->name%");
                }
            });
            $statuslist = TaskStatus::WhereIn('id', $filterStatusIds)->get();
            $userslist  = User::whereIn('id', $filterUserIds)->get();
        } elseif ((int) $filterUserIds > 0) {
            $userListWithStatuesCnt = $userListWithStatuesCnt->WhereIn('users.id', $filterUserIds);
            $userslist              = User::whereIn('id', $request->get('users_filter'))->get();
        } elseif ((int) $filterStatusIds > 0) {
            $searchableStatus       = TaskStatus::WhereIn('id', $filterStatusIds)->get();
            $userListWithStatuesCnt = $userListWithStatuesCnt->where(function ($query) use ($searchableStatus) {
                foreach ($searchableStatus as $searchTerm) {
                    $query->orWhere('developer_tasks.status', 'like', "%$searchTerm->name%");
                }
            });
            $statuslist = TaskStatus::WhereIn('id', $filterStatusIds)->get();
        }

        $userListWithStatuesCnt = $userListWithStatuesCnt->groupBy('users.id', 'developer_tasks.user_id', 'developer_tasks.status')
            ->orderBy('created_date', 'desc')->orderBy('developer_tasks.status', 'asc')
            ->get();

        $arrStatusCount = [];
        $arrUserNameId  = [];
        foreach ($userListWithStatuesCnt as $key => $value) {
            $status                                    = $value['status'];
            $arrStatusCount[$value['userid']][$status] = $value['statusCnt'];
            $arrUserNameId[$value['userid']]['name']   = $value['name'];
            $arrUserNameId[$value['userid']]['userid'] = $value['userid'];
            foreach ($arrTaskStatusNames as $key => $arrTaskStatusNamevalue) {
                if (! array_key_exists($arrTaskStatusNamevalue, $arrStatusCount[$value['userid']])) {
                    $arrStatusCount[$value['userid']][$arrTaskStatusNamevalue] = 0;
                }
            }
            isset($arrStatusCount[$value['userid']]) ? ksort($arrStatusCount[$value['userid']]) : '';
        }

        return view('development.devtasksummary', compact('userListWithStatuesCnt', 'getTaskStatus', 'arrUserNameId', 'arrStatusCount', 'userslist', 'statuslist'));
    }

    /**
     * function to show all the task list based on specific status and user
     *
     * @return JsonResponse
     */
    public function developmentTaskList(Request $request)
    {
        $taskDetails = DeveloperTask::where('status', $request->taskStatusId)->where('user_id', $request->userId)->get();

        return response()->json(['data' => $taskDetails]);
    }

    /**
     * Function to get user's name - it's use for lazy loading of users data
     *
     * @return JsonResponse
     */
    public function usersList(Request $request)
    {
        $users = User::orderBy('name');
        if (! empty($request->q)) {
            $users->where(function ($q) use ($request) {
                $q->where('name', 'LIKE', '%' . $request->q . '%');
            });
        }
        $users                        = $users->paginate(30);
        $result['total_count']        = $users->total();
        $result['incomplete_results'] = $users->nextPageUrl() !== null;

        foreach ($users as $user) {
            $result['items'][] = [
                'id'   => $user->id,
                'text' => $user->name,
            ];
        }

        return response()->json($result);
    }

    /**
     * Upload a task file to google drive
     */
    public function uploadFile(Request $request)
    {
        $request->validate([
            'file'               => 'required',
            'file_creation_date' => 'required',
            'remarks'            => 'sometimes',
            'task_id'            => 'required',
            'file_read'          => 'sometimes',
            'file_write'         => 'sometimes',
        ]);

        $data = $request->all();

        try {
            foreach ($data['file'] as $file) {
                DB::transaction(function () use ($file, $data) {
                    $googleScreencast            = new GoogleScreencast();
                    $googleScreencast->file_name = $file->getClientOriginalName();
                    $googleScreencast->extension = $file->extension();
                    $googleScreencast->user_id   = Auth::id();

                    $googleScreencast->read  = '';
                    $googleScreencast->write = '';

                    if ($data['task_type'] == 'DEVTASK') {
                        $googleScreencast->developer_task_id = $data['task_id'];
                    } elseif ($data['task_type'] == 'TASK') {
                        $googleScreencast->belongable_id   = $data['task_id'];
                        $googleScreencast->belongable_type = Task::class;
                    }

                    $googleScreencast->remarks            = $data['remarks'];
                    $googleScreencast->file_creation_date = $data['file_creation_date'];

                    $googleScreencast->save();
                    UploadGoogleDriveScreencast::dispatchNow($googleScreencast, $file);
                });
            }

            return back()->with('success', 'File is Uploaded to Google Drive.');
        } catch (Exception $e) {
            return back()->with('error', 'Something went wrong. Please try again');
        }
    }

    /**
     * This function will return a list of files which are uploaded under uicheck class
     */
    public function getUploadedFilesList(Request $request)
    {
        try {
            $result = [];
            if (isset($request->task_id) && isset($request->task_type)) {
                if ($request->task_type == 'DEVTASK') {
                    $result = GoogleScreencast::where('developer_task_id', $request->task_id)->orderBy('id', 'desc')->get();
                } elseif ($request->task_type == 'TASK') {
                    $result = GoogleScreencast::where('belongable_type', Task::class)->where('belongable_id', $request->task_id)->orderBy('id', 'desc')->get();
                } else {
                    throw new Exception('Something went wrong.');
                }

                if (isset($result) && count($result) > 0) {
                    $result = $result->toArray();
                }

                return response()->json([
                    'data' => view('development.partials.google-drive-list', compact('result'))->render(),
                ]);
            } else {
                throw new Exception('Task not found');
            }
        } catch (Exception $e) {
            return response()->json([
                'data' => view('development.partials.google-drive-list', ['result' => null])->render(),
            ]);
        }
    }

    /**
     * Show the hostory for task an dev task
     */
    public function showTaskEstimateTime(Request $request)
    {
        try {
            $developerTaskID = DeveloperTaskHistory::where([
                'model'     => DeveloperTask::class,
                'attribute' => 'estimation_minute',
            ])->orderBy('id', 'desc')->limit(10)->groupBy('developer_task_id')->select('developer_task_id', DB::raw('max(id) as id'))->get()->pluck('id')->toArray();

            $developerTaskHistory = DeveloperTaskHistory::join('developer_tasks', 'developer_tasks.id', 'developer_tasks_history.developer_task_id')
                ->whereIn('developer_tasks_history.id', $developerTaskID)
                ->where(function ($query) use ($request) {
                    if (isset($request->task_id)) {
                        if (str_contains($request->task_id, 'DEVTASK')) {
                            $query = $query->where('developer_tasks.id', trim($request->task_id, 'DEVTASK-'));
                        }
                    }

                    return $query;
                })
                ->select('developer_tasks.*', 'developer_tasks_history.*', 'developer_tasks.id as task_id')->get();

            $t_developerTaskID = DeveloperTaskHistory::where([
                'model'     => Task::class,
                'attribute' => 'estimation_minute',
            ])->orderBy('id', 'desc')->limit(10)->groupBy('developer_task_id')->select('developer_task_id', DB::raw('max(id) as id'))->get()->pluck('id')->toArray();

            $t_developerTaskHistory = DeveloperTaskHistory::join('tasks', 'tasks.id', 'developer_tasks_history.developer_task_id')
                ->whereIn('developer_tasks_history.id', $t_developerTaskID)
                ->where(function ($query) use ($request) {
                    if (isset($request->task_id)) {
                        if (! str_contains($request->task_id, 'DEVTASK')) {
                            $query = $query->where('tasks.id', trim($request->task_id, 'TASK-'));
                        }
                    }

                    return $query;
                })
                ->select('tasks.*', 'developer_tasks_history.*', 'tasks.id as task_id')->get();

            if (isset($request->task_id)) {
                if (str_contains($request->task_id, 'DEVTASK')) {
                    $t_developerTaskHistory = [];
                }
                if (! str_contains($request->task_id, 'DEVTASK')) {
                    $developerTaskHistory = [];
                }
            }

            return view('development.partials.estimate-list', compact('developerTaskHistory', 't_developerTaskHistory'));
        } catch (Exception $e) {
            dd($e);

            return '';
        }
    }

    public function showTaskEstimateTimeAlert(Request $request)
    {
        try {
            $developerTaskID = DeveloperTaskHistory::where([
                'model'     => DeveloperTask::class,
                'attribute' => 'estimation_minute',
            ])->orderBy('id', 'desc')->limit(10)->groupBy('developer_task_id')->select('developer_task_id', DB::raw('max(id) as id'))->get()->pluck('id')->toArray();

            $developerTaskHistory = DeveloperTaskHistory::join('developer_tasks', 'developer_tasks.id', 'developer_tasks_history.developer_task_id')
                ->whereIn('developer_tasks_history.id', $developerTaskID)
                ->where(function ($query) use ($request) {
                    if (isset($request->task_id)) {
                        if (str_contains($request->task_id, 'DEVTASK')) {
                            $query = $query->where('developer_tasks.id', trim($request->task_id, 'DEVTASK-'));
                        }
                    }

                    return $query;
                })
                ->where('developer_tasks_history.is_approved', 0)
                ->select('developer_tasks.*', 'developer_tasks_history.*', 'developer_tasks.id as task_id')->count();

            $t_developerTaskID = DeveloperTaskHistory::where([
                'model'     => Task::class,
                'attribute' => 'estimation_minute',
            ])->orderBy('id', 'desc')->limit(10)->groupBy('developer_task_id')->select('developer_task_id', DB::raw('max(id) as id'))->get()->pluck('id')->toArray();

            $t_developerTaskHistory = DeveloperTaskHistory::join('tasks', 'tasks.id', 'developer_tasks_history.developer_task_id')
                ->whereIn('developer_tasks_history.id', $t_developerTaskID)
                ->where(function ($query) use ($request) {
                    if (isset($request->task_id)) {
                        if (! str_contains($request->task_id, 'DEVTASK')) {
                            $query = $query->where('tasks.id', trim($request->task_id, 'TASK-'));
                        }
                    }

                    return $query;
                })
                ->where('developer_tasks_history.is_approved', 0)
                ->select('tasks.*', 'developer_tasks_history.*', 'tasks.id as task_id')->count();

            $totalUnApproved = $developerTaskHistory + $t_developerTaskHistory;

            return response()->json([
                'code'  => 200,
                'count' => $totalUnApproved,
            ]);
        } catch (Exception $e) {
            dd($e);

            return '';
        }
    }

    public function addScrapper(Request $request)
    {
        try {
            $this->validate(
                $request, [
                    'task_id'         => 'required',
                    'task_type'       => 'required',
                    'scrapper_values' => 'required',
                ]
            );

            $returnData = [];
            if (! empty($returnData)) {
                return response()->json(
                    [
                        'code'    => 500,
                        'data'    => [],
                        'message' => implode('</br> ', $returnData) . "</br> above key's value is missing on your json data!",
                    ]
                );
            }

            $column                  = new ScrapperValues();
            $column->task_id         = $request->task_id;
            $column->task_type       = $request->task_type;
            $column->scrapper_values = $request->scrapper_values;
            $column->added_by        = auth()->user()->id;
            $column->save();

            \App\Models\ScrapperLogs::create([
                'scrapper_id' => $column->id,
                'task_id'     => $request->task_id,
                'task_type'   => $request->task_type,
                'log'         => 'Scrapper Added',
                'created_by'  => auth()->user()->id,
            ]);

            return response()->json(
                [
                    'code'    => 200,
                    'data'    => [],
                    'message' => 'Your scrapper value has been added!',
                ]
            );
        } catch (Exception $e) {
            return response()->json(
                [
                    'code'    => 500,
                    'message' => $e->getMessage(),
                ]
            );
        }
    }

    public function getScrapperLogsByTaskId($id)
    {
        $data = \App\Models\ScrapperLogs::with('user')->where('task_id', $id)->get();

        return response()->json(['code' => 200, 'data' => $data]);
    }

    public function taskScrapper($task_id)
    {
        $ScrapperValues = ScrapperValues::where('task_id', $task_id)->orderBy('id', 'DESC')->first();

        $ScrapperValuesHistory        = [];
        $ScrapperValuesRemarksHistory = [];
        $returnData                   = [];
        $id                           = 0;
        if (! empty($ScrapperValues)) {
            $jsonString = $ScrapperValues['scrapper_values'];
            $phpArray   = json_decode($jsonString, true);
            if (! empty($phpArray)) {
                if (! empty($phpArray)) {
                    $ScrapperValuesHistory        = ScrapperValuesHistory::where('task_id', $task_id)->get();
                    $ScrapperValuesRemarksHistory = ScrapperValuesRemarksHistory::where('task_id', $task_id)->get();

                    foreach ($phpArray as $key_json => $value_json) {
                        $returnData[$key_json] = $value_json;
                    }
                }
            }

            $id = $ScrapperValues->id;
        }

        return response()->json(['code' => 200, 'values' => $returnData, 'task_id' => $task_id, 'ScrapperValuesHistory' => $ScrapperValuesHistory, 'ScrapperValuesRemarksHistory' => $ScrapperValuesRemarksHistory, 'id' => $id]);
    }

    // Added function to get scrapper by scrapper id on listing page DEVTASK-24690
    public function viewScrapper($id)
    {
        $ScrapperValues = ScrapperValues::where('id', $id)->first();

        $task_id                      = $ScrapperValues->task_id;
        $ScrapperValuesHistory        = [];
        $ScrapperValuesRemarksHistory = [];
        $returnData                   = [];
        $id                           = 0;
        if (! empty($ScrapperValues)) {
            $jsonString = $ScrapperValues['scrapper_values'];
            $phpArray   = json_decode($jsonString, true);
            if (! empty($phpArray)) {
                if (! empty($phpArray)) {
                    $ScrapperValuesHistory        = ScrapperValuesHistory::where('task_id', $task_id)->get();
                    $ScrapperValuesRemarksHistory = ScrapperValuesRemarksHistory::where('task_id', $task_id)->get();

                    foreach ($phpArray as $key_json => $value_json) {
                        $returnData[$key_json] = $value_json;
                    }
                }
            }

            $id = $ScrapperValues->id;
        }

        return response()->json(['code' => 200, 'values' => $returnData, 'task_id' => $task_id, 'ScrapperValuesHistory' => $ScrapperValuesHistory, 'ScrapperValuesRemarksHistory' => $ScrapperValuesRemarksHistory, 'id' => $id]);
    }

    public function UpdateScrapper(Request $request)
    {
        $this->validate($request, [
            'task_id'     => 'required',
            'column_name' => 'required',
            'status'      => 'required',
        ]);

        $input               = $request->all();
        $input['updated_by'] = auth()->user()->id;

        ScrapperValuesHistory::updateOrCreate(
            ['task_id' => $request->task_id, 'column_name' => $request->column_name], $input
        );

        if ($request->status == 'Unapprove') {
            if (! empty($request->remarks)) {
                ScrapperValuesRemarksHistory::updateOrCreate(
                    ['task_id' => $request->task_id, 'column_name' => $request->column_name], $input
                );
            }

            $task         = DeveloperTask::find($request->task_id);
            $task->status = 'Scrapper Data Unapproved';
            $task->save();
        } else {
            $task         = DeveloperTask::find($request->task_id);
            $task->status = 'Scrapper Data Approved';
            $task->save();
        }

        return response()->json(
            [
                'code'    => 200,
                'data'    => [],
                'message' => 'Your scrapper status has been updated!',
            ]
        );
    }

    public function UpdateScrapperRemarks(Request $request)
    {
        $this->validate($request, [
            'task_id'     => 'required',
            'column_name' => 'required',
            'remarks'     => 'required',
        ]);

        $input               = $request->all();
        $input['updated_by'] = auth()->user()->id;

        ScrapperValuesRemarksHistory::updateOrCreate(
            ['task_id' => $request->task_id, 'column_name' => $request->column_name], $input
        );

        return response()->json(
            [
                'code'    => 200,
                'data'    => [],
                'message' => 'Your scrapper status has been updated!',
            ]
        );
    }

    public function devScrappingTaskIndex(Request $request)
    {
        $title = 'Scrapper Verification Data';

        $inputs = $request->input();

        $records = ScrapperValues::with('tasks');

        $keywords = request('keywords');
        if (! empty($keywords)) {
            $records = $records->where(function ($q) use ($keywords) {
                $q->where('scrapper_values', 'LIKE', "%$keywords%")
                    ->orWhere('task_id', 'LIKE', "%$keywords%");
            });
        }

        $records = $records->select('task_id', 'scrapper_values.scrapper_values', 'scrapper_values.created_at', DB::raw('MAX(id) AS max_id')) // Select only necessary columns and use an alias for MAX(id)
        ->groupBy('task_id')
            ->orderBy('max_id', 'DESC') // Order by the alias of MAX(id)
            ->paginate(50);

        $datatableModel = DataTableColumn::select('column_name')->where('user_id', auth()->user()->id)->where('section_name', 'development-scrapper-listing')->first();

        $dynamicColumnsToShowscrapper = [];
        if (! empty($datatableModel->column_name)) {
            $hideColumns                  = $datatableModel->column_name ?? '';
            $dynamicColumnsToShowscrapper = json_decode($hideColumns, true);
        }

        return view('development.scrapperlist', [
            'records'                      => $records,
            'inputs'                       => $inputs,
            'dynamicColumnsToShowscrapper' => $dynamicColumnsToShowscrapper,
        ]);
    }

    public function scrapperColumnVisbilityUpdate(Request $request)
    {
        $userCheck = DataTableColumn::where('user_id', auth()->user()->id)->where('section_name', 'development-scrapper-listing')->first();

        if ($userCheck) {
            $column               = DataTableColumn::find($userCheck->id);
            $column->section_name = 'development-scrapper-listing';
            $column->column_name  = json_encode($request->column_scrapper);
            $column->save();
        } else {
            $column               = new DataTableColumn();
            $column->section_name = 'development-scrapper-listing';
            $column->column_name  = json_encode($request->column_scrapper);
            $column->user_id      = auth()->user()->id;
            $column->save();
        }

        return redirect()->back()->with('success', 'column visiblity Added Successfully!');
    }

    public function developmentScrapperData($id)
    {
        $ScrapperValues = ScrapperValues::findorFail($id);

        $properties = [];
        $jsonString = $ScrapperValues['scrapper_values'];
        $phpArray   = json_decode($jsonString, true);
        if (! empty($phpArray)) {
            foreach ($phpArray as $key_json => $value_json) {
                if ($key_json == 'properties') {
                    $properties[] = $value_json;
                }
            }
        }

        $html = '';
        if (! empty($properties)) {
            $html = '<table class="table table-bordered table-striped">
                    <tbody class="text-center task_queue_list">';
            foreach ($properties as $key => $value) {
                $keys = array_keys($value);

                if (! empty($keys)) {
                    foreach ($keys as $key_k => $value_k) {
                        $html .= '<tr>';
                        $html .= '<th>' . ucwords(str_replace('_', ' ', $value_k)) . '</th>';

                        if (gettype($value[$value_k]) == 'array') {
                            $html .= '<td>' . implode(', ', $value[$value_k]) . '</td>';
                        } else {
                            $html .= '<td>' . $value[$value_k] . '</td>';
                        }
                        $html .= '</tr>';
                    }
                }
            }

            $html .= '</tbody>';
            $html .= '</table>';
        }

        return response()->json([
            'status'  => true,
            'html'    => $html,
            'message' => 'Data get successfully',
        ], 200);
    }

    public function developmentScrapperImagesData($id)
    {
        $ScrapperValues = ScrapperValues::findorFail($id);

        $images     = [];
        $jsonString = $ScrapperValues['scrapper_values'];
        $phpArray   = json_decode($jsonString, true);
        if (! empty($phpArray)) {
            foreach ($phpArray as $key_json => $value_json) {
                if ($key_json == 'images') {
                    $images[] = $value_json;
                }
            }
        }

        $html = '';
        if (! empty($images)) {
            $html = '<div class="row">
                    <div class="col-lg-12">';
            foreach ($images as $key => $value) {
                if (! empty($value)) {
                    foreach ($value as $key_k => $value_k) {
                        $html .= '<div class="col-lg-1">';
                        $html .= '<img src="' . $value_k . '">';
                        $html .= '</div>';
                    }
                }
            }

            $html .= '</div>';
            $html .= '</div>';
        }

        return response()->json([
            'status'  => true,
            'html'    => $html,
            'message' => 'Data get successfully',
        ], 200);
    }

    public function developmentGetScrapperData(Request $request)
    {
        $ScrapperValuesHistory = ScrapperValuesHistory::where('task_id', $request->task_id)->where('column_name', $request->column_name)->first();

        $ScrapperValuesRemarksHistory = [];
        if (! empty($ScrapperValuesHistory)) {
            if ($ScrapperValuesHistory['status'] == 'Unapprove') {
                $ScrapperValuesRemarksHistory = ScrapperValuesRemarksHistory::where('task_id', $request->task_id)->where('column_name', $request->column_name)->first();
            }
        }

        return response()->json([
            'status'                       => true,
            'ScrapperValuesHistory'        => $ScrapperValuesHistory,
            'ScrapperValuesRemarksHistory' => $ScrapperValuesRemarksHistory,
            'message'                      => 'Data get successfully',
        ], 200);
    }

    public function devScrappingTaskHistoryIndex(Request $request)
    {
        $ScrapperValues = ScrapperValues::where('task_id', $request->task_id)->where('id', '!=', $request->id)->orderBy('id', 'DESC')->get();
        $returnData     = [];
        if (! empty($ScrapperValues)) {
            foreach ($ScrapperValues as $key => $value) {
                $jsonString = $value['scrapper_values'];
                $phpArray   = json_decode($jsonString, true);
                if (! empty($phpArray)) {
                    foreach ($phpArray as $key_json => $value_json) {
                        $returnData[$key][$key_json] = $value_json;
                    }
                }
            }
        }

        return response()->json(['code' => 200, 'values' => $returnData, 'task_id' => $request->task_id]);
    }

    public function devScrappingTaskHistory($id)
    {
        $title = 'Scrapper Verification Data';

        $recordsSingle = ScrapperValues::where('id', $id)->first();

        $records = ScrapperValues::with('tasks')->where('task_id', $recordsSingle['task_id'])->orderBy('id', 'DESC');

        $keywords = request('keywords');
        if (! empty($keywords)) {
            $records = $records->where(function ($q) use ($keywords) {
                $q->where('scrapper_values', 'LIKE', "%$keywords%")
                    ->orWhere('task_id', 'LIKE', "%$keywords%");
            });
        }
        $records = $records->paginate(50);

        $datatableModel = DataTableColumn::select('column_name')->where('user_id', auth()->user()->id)->where('section_name', 'development-scrapper-listing')->first();

        $dynamicColumnsToShowscrapper = [];
        if (! empty($datatableModel->column_name)) {
            $hideColumns                  = $datatableModel->column_name ?? '';
            $dynamicColumnsToShowscrapper = json_decode($hideColumns, true);
        }

        return view('development.scrapperlisthistroy', [
            'records'                      => $records,
            'dynamicColumnsToShowscrapper' => $dynamicColumnsToShowscrapper,
        ]);
    }

    public function developmentUpdateAllScrapperStatusData(Request $request)
    {
        $recordsScrapper = ScrapperValues::where('id', $request->scrapper_id)->first();

        if (! empty($recordsScrapper)) {
            if ($request->type == 1) {
                $jsonString = $recordsScrapper['scrapper_values'];
                $phpArray   = json_decode($jsonString, true);
                if (! empty($phpArray)) {
                    foreach ($phpArray as $key_json => $value_json) {
                        if ($key_json == 'properties') {
                            if (! empty($value_json)) {
                                foreach ($value_json as $key => $value) {
                                    $ScrapperValuesHistory = ScrapperValuesHistory::where('column_name', $key)->where('task_id', $recordsScrapper['task_id'])->first();

                                    if (empty($ScrapperValuesHistory)) {
                                        $ScrapperValuesHistoryNew              = new ScrapperValuesHistory;
                                        $ScrapperValuesHistoryNew->status      = 'Approve';
                                        $ScrapperValuesHistoryNew->column_name = $key;
                                        $ScrapperValuesHistoryNew->updated_by  = auth()->user()->id;
                                        $ScrapperValuesHistoryNew->task_id     = $recordsScrapper['task_id'];
                                        $ScrapperValuesHistoryNew->save();
                                    } else {
                                        $ScrapperValuesHistory->status     = 'Approve';
                                        $ScrapperValuesHistory->updated_by = auth()->user()->id;
                                        $ScrapperValuesHistory->save();
                                    }

                                    ScrapperValuesRemarksHistory::where('column_name', $key)->where('task_id', $recordsScrapper['task_id'])->delete();
                                }
                            }
                        } else {
                            $ScrapperValuesHistory = ScrapperValuesHistory::where('column_name', $key_json)->where('task_id', $recordsScrapper['task_id'])->first();

                            if (empty($ScrapperValuesHistory)) {
                                $ScrapperValuesHistoryNew              = new ScrapperValuesHistory;
                                $ScrapperValuesHistoryNew->status      = 'Approve';
                                $ScrapperValuesHistoryNew->column_name = $key_json;
                                $ScrapperValuesHistoryNew->updated_by  = auth()->user()->id;
                                $ScrapperValuesHistoryNew->task_id     = $recordsScrapper['task_id'];
                                $ScrapperValuesHistoryNew->save();
                            } else {
                                $ScrapperValuesHistory->status     = 'Approve';
                                $ScrapperValuesHistory->updated_by = auth()->user()->id;
                                $ScrapperValuesHistory->save();
                            }

                            ScrapperValuesRemarksHistory::where('column_name', $key_json)->where('task_id', $recordsScrapper['task_id'])->delete();
                        }
                    }

                    $task         = DeveloperTask::find($recordsScrapper['task_id']);
                    $task->status = 'Scrapper Data Approved';
                    $task->save();
                }

                return response()->json([
                    'status'  => true,
                    'message' => 'Scrapper values status updated.',
                ], 200);
            } else {
                ScrapperValuesHistory::where('task_id', $recordsScrapper['task_id'])->delete();
                ScrapperValuesRemarksHistory::where('task_id', $recordsScrapper['task_id'])->delete();

                return response()->json([
                    'status'  => true,
                    'message' => 'Scrapper values status updated.',
                ], 200);
            }
        }

        return response()->json([
            'status'  => true,
            'message' => 'Scrapper values status updated.',
        ], 200);
    }

    public function startTimeHistory(Request $request)
    {
        $task = DeveloperTask::find($request->developer_task_id);

        if ($request->task_type == 1) {
            $input['m_start_date'] = Carbon::now();
            $input['task_start']   = 1;
            $input['status']       = 'In Progress';

            $history             = new DeveloperTaskStartEndHistory();
            $history->user_id    = auth()->user()->id;
            $history->task_id    = $request->developer_task_id;
            $history->start_date = Carbon::now();
            $history->save();
        } elseif ($request->task_type == 2) {
            $input['m_end_date'] = Carbon::now();
            $input['task_start'] = 2;

            $history = DeveloperTaskStartEndHistory::where('task_id', $request->developer_task_id)->orderBy('id', 'DESC')->first();

            if (! empty($history)) {
                $history->end_date = Carbon::now();
                $history->save();
            }
        }

        $task->update($input);

        return response()->json(['msg' => 'success']);
    }

    public function getTimeHistoryStartEnd(Request $request)
    {
        $id = $request->id;

        $task_histories = DeveloperTaskStartEndHistory::where('task_id', $id)->orderBy('id', 'DESC')->get();

        return response()->json(['histories' => $task_histories]);
    }

    public function scrapperMonitoring(Request $request)
    {
        $tasks = DeveloperTask::select('id')->orderBy('id', 'desc')->get();
        $users = \App\User::role('Developer')->select('id', 'name')->get();

        $data = \App\Models\ScrapperMonitoring::with([
            'user',
            'task' => function ($query) {
                $query->with(['developerTaskHistories' => function ($innerQuery) {
                    $innerQuery->orderByDesc('created_at');
                }]);
            },
        ])
        ->when(($request->has('scrapper_name') && $request->scrapper_name != ''), function ($query) use ($request) {
            $query->where('scrapper_name', 'LIKE', '%' . $request->scrapper_name . '%');
        })
        ->when(($request->has('task_id') && $request->task_id != ''), function ($query) use ($request) {
            $query->where('task_id', $request->task_id);
        })
        ->when(($request->has('user_id') && $request->user_id != ''), function ($query) use ($request) {
            $query->where('user_id', $request->user_id);
        })
        ->when(($request->has('need_proxy') && $request->need_proxy != ''), function ($query) use ($request) {
            $query->where('need_proxy', $request->need_proxy);
        })
        ->when(($request->has('aws_moved') && $request->aws_moved != ''), function ($query) use ($request) {
            $query->where('move_to_aws', $request->aws_moved);
        })
        ->orderByDesc('created_at')
        ->paginate(10);
        if (request()->ajax()) {
            return view('development.scrapper.partials.table-data', compact('data'));
        }

        $inputsData = $request->all();

        return view('development.scrapper.monitoring', compact('tasks', 'users', 'data', 'inputsData'));
    }

    public function storeScrapperMonitoring(\App\Http\Requests\ScrapperMonitoringCreateRequest $request)
    {
        try {
            $validatedData = $request->validated();
            if (! auth()->user()->isAdmin()) {
                $validatedData['user_id'] = auth()->user()->id;
            }

            \App\Models\ScrapperMonitoring::create($validatedData);

            return response()->json([
                'code'     => 200,
                'status'   => 'success',
                'message'  => 'Record created successfully',
            ]);
        } catch (\Throwable $th) {
            return response()->json([
                'code'     => 400,
                'status'   => 'error',
                'message'  => $th->getMessage(),
            ]);
        }
    }

    // Add this function to handle common column visibilty feature. DEVTASK-24789
    public function globalColumnVisbilityUpdate(Request $request)
    {
        $userCheck = DataTableColumn::where('user_id', auth()->user()->id)->where('section_name', $request->section_name)->first();

        if ($userCheck) {
            $column               = DataTableColumn::find($userCheck->id);
            $column->section_name = $request->section_name;
            $column->column_name  = json_encode($request->column_scrapper);
            $column->save();
        } else {
            $column               = new DataTableColumn();
            $column->section_name = $request->section_name;
            $column->column_name  = json_encode($request->column_scrapper);
            $column->user_id      = auth()->user()->id;
            $column->save();
        }

        return redirect()->back()->with('success', 'column visiblity Added Successfully!');
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/DocumentController.php 
Content: <?php

namespace App\Http\Controllers;

use Auth;
use Mail;
use finfo;
use Storage;
use App\User;
use App\Email;
use App\ApiKey;
use App\Vendor;
use App\Contact;
use App\Setting;
use App\Document;
use App\EmailAddress;
use App\DocumentRemark;
use App\DocumentHistory;
use App\DocumentCategory;
use App\DocumentSendHistory;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use App\Mails\Manual\DocumentEmail;

class DocumentController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request)
    {
        if ($request->term || $request->date || $request->document_type || $request->category || $request->filename || $request->user) {
            $query = Document::query();

            if (request('term') != null) {
                $query->where('name', 'LIKE', "%{$request->term}%")
                    ->orWhere('filename', 'LIKE', "%{$request->term}%")
                    ->orWhereHas('documentCategory', function ($qu) use ($request) {
                        $qu->where('name', 'LIKE', "%{$request->term}%");
                    });
            }

            if (request('date') != null) {
                $query->whereDate('created_at', request('website'));
            }

            //if name is not null
            if (request('document_type') != null) {
                $query->where('name', 'LIKE', '%' . request('document_type') . '%');
            }

            //If username is not null
            if (request('filename') != null) {
                $query->where('filename', 'LIKE', '%' . request('filename') . '%');
            }

            if (request('category') != null) {
                $query->whereHas('documentCategory', function ($qu) {
                    $qu->where('name', 'LIKE', '%' . request('category') . '%');
                });
            }

            if (request('user') != null) {
                $query->whereHas('user', function ($qu) {
                    $qu->where('name', 'LIKE', '%' . request('user') . '%');
                });
            }

            $documents = $query->where('status', 1)->orderby('name', 'asc')->paginate(Setting::get('pagination'));
        } else {
            $documents = Document::where('status', 1)->latest()->paginate(Setting::get('pagination'));
        }

        if ($request->ajax()) {
            return response()->json([
                'tbody' => view('documents.data', compact('documents'))->render(),
                'links' => (string) $documents->render(),
            ], 200);
        }

        $users          = User::select(['id', 'name', 'email', 'agent_role'])->get();
        $emailAddresses = EmailAddress::orderBy('id', 'asc')->pluck('from_address', 'id');
        $category       = DocumentCategory::select('id', 'name')->get();
        $api_keys       = ApiKey::select('number')->get();

        return view('documents.index', [
            'documents'      => $documents,
            'users'          => $users,
            'category'       => $category,
            'api_keys'       => $api_keys,
            'emailAddresses' => $emailAddresses,
        ]);
    }

    public function documentList(Request $request)
    {
        $developertask = DB::table('developer_task_documents')
            ->select('subject', 'description', 'developer_task_id', 'developer_task_documents.created_at',
                'mediables.tag as tag', 'media.disk as disk', 'media.directory as directory', 'media.filename as filename',
                'media.extension as extension', 'users.name as username', DB::raw("'Devtask' as type"), 'media.id as media_id')
            ->join('mediables', 'mediables.mediable_id', '=', 'developer_task_documents.id')
            ->join('users', 'users.id', '=', 'developer_task_documents.created_by')
            ->join('media', 'media.id', '=', 'mediables.media_id')
            ->where('mediables.mediable_type', 'App\DeveloperTaskDocument')
            ->where('mediables.tag', config('constants.media_tags'));

        if ($request->task_subject && $request->task_subject != null) {
            $developertask = $developertask->where('subject', 'LIKE', "%$request->task_subject%");
        }
        if (! empty($request->user_id)) {
            $developertask = $developertask->where('developer_task_documents.created_by', $request->user_id);
        }
        if (! empty($request->term_id)) {
            $developertask = $developertask->where('developer_task_documents.developer_task_id', $request->term_id);
        }
        if (! empty($request->date)) {
            $developertask = $developertask->whereDate('developer_task_documents.created_at', $request->date);
        }

        $uploadDocData = DB::table('tasks')
            ->select('task_subject as subject', 'task_details as description',
                'tasks.id as developer_task_id', 'tasks.created_at', 'mediables.tag as tag',
                'media.disk as disk', 'media.directory as directory', 'media.filename as filename',
                'media.extension as extension', 'users.name as username', DB::raw("'Task' as type"), 'media.id as media_id')
            ->join('mediables', 'mediables.mediable_id', '=', 'tasks.id')
            ->join('users', 'users.id', '=', 'tasks.assign_from')
            ->join('media', 'media.id', '=', 'mediables.media_id')
            ->where('mediables.mediable_type', 'App\Task')
            ->where('mediables.tag', config('constants.media_tags'));

        if ($request->task_subject && $request->task_subject != null) {
            $uplodDocData = $uploadDocData->where('tasks.task_subject', 'LIKE', "%$request->task_subject%");
        }
        if (! empty($request->user_id)) {
            $uploadDocData = $uploadDocData->where('tasks.assign_from', $request->user_id);
        }
        if (! empty($request->term_id)) {
            $uploadDocData = $uploadDocData->where('tasks.id', $request->term_id);
        }
        if (! empty($request->date)) {
            $uploadDocData = $uploadDocData->whereDate('tasks.created_at', $request->date);
        }
        $uploadDocData = $uploadDocData->union($developertask);
        $uploadDocData = $uploadDocData->orderBy('media_id', 'desc');
        $DataCount     = $uploadDocData->count();
        $uploadDocData = $uploadDocData->paginate(50);

        $users = User::get();

        $totalCount = $DataCount;

        return view('development.documentList', compact('uploadDocData', 'users', 'totalCount'));
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $this->validate($request, [
            'user_id'     => 'required|numeric',
            'name'        => 'required|string|max:255',
            'file'        => 'required',
            'category_id' => 'required',
            'version'     => 'required',
        ]);

        $data = $request->except(['_token', 'file']);
        foreach ($request->file('file') as $file) {
            $data['filename']      = $file->hashName();
            $data['file_contents'] = $file->openFile()->fread($file->getSize());

            $file->storeAs('files/documents', $data['filename']);

            Document::create($data);
        }

        return response()->json([
            'status' => 'success',
            'data'   => ['redirectLink' => route('document.index')],
            'msg'    => 'You have successfully uploaded document(s)!',
        ]);
    }

    public function download($id)
    {
        $document = Document::find($id);

        if (! empty($document->file_contents)) {
            $finfo = new finfo(FILEINFO_MIME_TYPE);

            $mime = $finfo->buffer($document->file_contents);

            return response($document->file_contents)
                ->header('Cache-Control', 'no-cache private')
                ->header('Content-Description', 'File Transfer')
                ->header('Content-Type', $mime)
                ->header('Content-length', strlen($document->file_contents))
                ->header('Content-Disposition', 'attachment; filename=' . $document->filename)
                ->header('Content-Transfer-Encoding', 'binary');
        }

        return Storage::download('files/documents/' . $document->filename);
    }

    /**
     * Display the specified resource.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        $document              = Document::findorfail($id);
        $document->user_id     = $request->user_id;
        $document->name        = $request->name;
        $document->category_id = $request->category_id;
        $document->status      = 1;
        $document->update();

        return redirect()->route('document.index')->withSuccess('You have successfully updated document!');
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        $document = Document::find($id);

        Storage::delete("files/documents/$document->filename");

        $document->delete();

        return redirect()->route('document.index')->withSuccess('You have successfully deleted document');
    }

    public function sendEmailBulk(Request $request)
    {
        $this->validate($request, [
            'subject' => 'required|min:3|max:255',
            'message' => 'required',
            'cc.*'    => 'nullable|email',
            'bcc.*'   => 'nullable|email',
        ]);

        $file_paths = [];

        if ($request->hasFile('file')) {
            foreach ($request->file('file') as $file) {
                $path         = $file->store('files/documents');
                $file_paths[] = $path;
            }
        }

        $document = Document::findOrFail($request->document_id);

        if ($document) {
            $file_paths[] = "files/documents/$document->filename";
        }

        $cc = $bcc = [];
        if ($request->has('cc')) {
            $cc = array_values(array_filter($request->cc));
        }
        if ($request->has('bcc')) {
            $bcc = array_values(array_filter($request->bcc));
        }
        $fromEmail = '';
        if (isset($request->from_select_id)) {
            $fromEmailArray = EmailAddress::where('id', $request->from_select_id)->first();
            if ($fromEmailArray) {
                $fromEmail = $fromEmailArray->from_address;
            }
        }

        if ($request->user_type == 1) {
            foreach ($request->users as $key) {
                $user       = User::findOrFail($key);
                $user_email = $user->email;
                $reqKey     = 'selected_email_' . $key;
                $email      = (isset($request[$reqKey])) ? $request[$reqKey] : $user->email;

                //History
                $history['send_by']     = Auth::id();
                $history['send_to']     = $user->id;
                $history['type']        = 'User';
                $history['via']         = 'Email';
                $history['document_id'] = $document->id;
                DocumentSendHistory::create($history);

                $emailClass = (new DocumentEmail($request->subject, $request->message, $file_paths))->build();

                $email = \App\Email::create([
                    'model_id'        => $user->id,
                    'model_type'      => \App\User::class,
                    'from'            => ($fromEmail != '') ? $fromEmail : $emailClass->fromMailer,
                    'to'              => $email,
                    'subject'         => $emailClass->subject,
                    'message'         => $emailClass->render(),
                    'template'        => 'customer-simple',
                    'additional_data' => json_encode(['attachment' => $file_paths]),
                    'status'          => 'pre-send',
                    'is_draft'        => 1,
                    'cc'              => $cc ?: null,
                    'bcc'             => $bcc ?: null,
                ]);

                \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');
            }
        } elseif ($request->user_type == 2) {
            foreach ($request->users as $key) {
                $vendor = Vendor::findOrFail($key);

                //History
                $history['send_by']     = Auth::id();
                $history['send_to']     = $vendor->id;
                $history['type']        = 'Vendor';
                $history['via']         = 'Email';
                $history['document_id'] = $document->id;
                DocumentSendHistory::create($history);

                $emailClass = (new DocumentEmail($request->subject, $request->message, $file_paths))->build();

                $reqKey = 'selected_email_' . $key;
                $email  = (isset($request[$reqKey])) ? $request[$reqKey] : $vendor->email;

                $email = \App\Email::create([
                    'model_id'        => $vendor->id,
                    'model_type'      => \App\Vendor::class,
                    'from'            => ($fromEmail != '') ? $fromEmail : $emailClass->fromMailer,
                    'to'              => $email,
                    'subject'         => $emailClass->subject,
                    'message'         => $emailClass->render(),
                    'template'        => 'customer-simple',
                    'additional_data' => json_encode(['attachment' => $file_paths]),
                    'status'          => 'pre-send',
                    'is_draft'        => 1,
                    'cc'              => $cc ?: null,
                    'bcc'             => $bcc ?: null,
                ]);

                \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');
            }
        } elseif ($request->user_type == 3) {
            foreach ($request->users as $key) {
                $contact = Contact::findOrFail($key);

                //History
                $history['send_by']     = Auth::id();
                $history['send_to']     = $contact->id;
                $history['type']        = 'Contact';
                $history['via']         = 'Email';
                $history['document_id'] = $document->id;
                DocumentSendHistory::create($history);

                $emailClass = (new DocumentEmail($request->subject, $request->message, $file_paths))->build();

                $email = \App\Email::create([
                    'model_id'        => $contact->id,
                    'model_type'      => \App\Contact::class,
                    'from'            => ($fromEmail != '') ? $fromEmail : $emailClass->fromMailer,
                    'to'              => $contact->email,
                    'subject'         => $emailClass->subject,
                    'message'         => $emailClass->render(),
                    'template'        => 'customer-simple',
                    'additional_data' => json_encode(['attachment' => $file_paths]),
                    'status'          => 'pre-send',
                    'is_draft'        => 1,
                    'cc'              => $cc ?: null,
                    'bcc'             => $bcc ?: null,
                ]);

                \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');
            }
        } elseif (isset($request->emailcontact) && $request->emailcontact != null) {
            foreach ($request->emailcontact as $contacts) {
                $mail = Mail::to($contacts);

                if ($cc) {
                    $mail->cc($cc);
                }
                if ($bcc) {
                    $mail->bcc($bcc);
                }

                //History
                $history['send_by']     = Auth::id();
                $history['send_to']     = $contacts;
                $history['type']        = 'Manual Email';
                $history['via']         = 'Email';
                $history['document_id'] = $document->id;
                DocumentSendHistory::create($history);

                $mail->send(new DocumentEmail($request->subject, $request->message, $file_paths));

                $params = [
                    'model_id'        => $contacts,
                    'model_type'      => User::class,
                    'from'            => ($fromEmail != '') ? $fromEmail : 'documents@amourint.com',
                    'seen'            => 1,
                    'to'              => $contacts,
                    'subject'         => $request->subject,
                    'message'         => $request->message,
                    'template'        => 'customer-simple',
                    'additional_data' => json_encode(['attachment' => $file_paths]),
                    'cc'              => $cc ?: null,
                    'bcc'             => $bcc ?: null,
                ];

                Email::create($params);
            }
        }

        return redirect()->route('document.index')->withSuccess('You have successfully sent emails in bulk!');
    }

    public function getTaskRemark(Request $request)
    {
        $id = $request->input('id');

        $remark = DocumentRemark::where('document_id', $id)->get();

        return response()->json($remark, 200);
    }

    public function addRemark(Request $request)
    {
        $remark     = $request->input('remark');
        $id         = $request->input('id');
        $created_at = date('Y-m-d H:i:s');
        $update_at  = date('Y-m-d H:i:s');
        if ($request->module_type == 'document') {
            $remark_entry = DocumentRemark::create([
                'document_id' => $id,
                'remark'      => $remark,
                'module_type' => $request->module_type,
                'user_name'   => $request->user_name ? $request->user_name : Auth::user()->name,
            ]);
        }

        return response()->json(['remark' => $remark], 200);
    }

    public function uploadDocument(Request $request)
    {
        $document = Document::findOrFail($request->document_id);

        //Create Document History
        $document_history              = new DocumentHistory();
        $document_history->document_id = $document->id;
        $document_history->category_id = $document->category_id;
        $document_history->user_id     = $document->user_id;
        $document_history->name        = $document->name;
        $document_history->filename    = $document->filename;
        $document_history->version     = $document->version;
        $document_history->save();

        //Update the version and files name
        $document->version       = ($document->version + 1);
        $file                    = $request->file('files');
        $document->filename      = $file->hashName();
        $document->file_contents = $file->openFile()->fread($file->getSize());
        $file->storeAs('files/documents', $document->filename);
        $document->save();

        return redirect()->route('document.index')->withSuccess('You have successfully uploaded document(s)!');
    }

    /**
     * @SWG\Post(
     *   path="/values-as-per-user",
     *   tags={"Documents"},
     *   summary="post Documents values as per user",
     *   operationId="get-document-per-user",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *   @SWG\Response(response=406, description="not acceptable"),
     *   @SWG\Response(response=500, description="internal server error"),
     *
     *      @SWG\Parameter(
     *          name="mytest",
     *          in="path",
     *          required=true,
     *          type="string"
     *      ),
     * )
     */
    public function getDataByUserType(Request $request)
    {
        if ($request->selected == 1) {
            $user = User::select('id', 'name', 'email')->get();

            $output = '';

            foreach ($user as $users) {
                $output .= '<option  rel="' . $users['email'] . '" value="' . $users['id'] . '" >' . $users['name'] . '</option>';
            }
            echo $output;
        } elseif ($request->selected == 2) {
            $vendors = Vendor::select('id', 'name', 'email')->get();

            $output = '';

            foreach ($vendors as $vendor) {
                $output .= '<option rel="' . $vendor['email'] . '"  value="' . $vendor['id'] . '">' . $vendor['name'] . '</option>';
            }
            echo $output;
        } elseif ($request->selected == 3) {
            $contact = Contact::select('id', 'name')->get();

            $output = '';

            foreach ($contact as $contacts) {
                $output .= '<option   rel= "" value="' . $contacts['id'] . '">' . $contacts['name'] . '</option>';
            }
            echo $output;
        } else {
            $output .= '<option value="0">Not Founf</option>';

            echo $output;
        }
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function email()
    {
        $documents      = Document::where('status', 0)->latest()->paginate(Setting::get('pagination'));
        $users          = User::select(['id', 'name', 'email', 'agent_role'])->get();
        $category       = DocumentCategory::select('id', 'name')->get();
        $api_keys       = ApiKey::select('number')->get();
        $emailAddresses = EmailAddress::orderBy('id', 'asc')->pluck('from_address', 'id');

        return view('documents.email', [
            'documents'      => $documents,
            'users'          => $users,
            'category'       => $category,
            'api_keys'       => $api_keys,
            'emailAddresses' => $emailAddresses,
        ]);
    }

    public function listShorcut(Request $request)
    {
        $datas = Document::latest()->get();

        return response()->json([
            'tbody' => view('partials.modals.list-documentation-shortcut-modal-html', compact('datas'))->render(),
            'count' => $datas->count(),
        ]);
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/EmailAddressesController.php 
Content: <?php

namespace App\Http\Controllers;

use Auth;
use App\User;
use App\Email;
use Carbon\Carbon;
use App\EmailAddress;
use App\StoreWebsite;
use App\VirtualminHelper;
use App\EmailRunHistories;
use Illuminate\Support\Str;
use Illuminate\Http\Request;
use App\Exports\EmailFailedReport;
use Illuminate\Support\Facades\DB;
use Webklex\PHPIMAP\ClientManager;
use App\Models\EMailAcknowledgement;
use Maatwebsite\Excel\Facades\Excel;
use function Sentry\captureException;

use EmailReplyParser\Parser\EmailParser;

class EmailAddressesController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request)
    {
        $query = EmailAddress::query();
        $query->select('email_addresses.*');
        if ($request->status != '') {
            $query->whereHas('history_last_message', function ($q) use ($request) {
                $q->where('is_success', $request->status);
            });
        }

        if ($request->keyword) {
            $query->orWhere('driver', 'LIKE', '%' . $request->keyword . '%')
                ->orWhere('port', 'LIKE', '%' . $request->keyword . '%')
                ->orWhere('encryption', 'LIKE', '%' . $request->keyword . '%')
                ->orWhere('send_grid_token', 'LIKE', '%' . $request->keyword . '%')
                ->orWhere('host', 'LIKE', '%' . $request->keyword . '%');
        }

        if ($request->username != '') {
            $query->where('username', 'LIKE', '%' . $request->username . '%');
        }

        if ($request->website_id != '') {
            $query->where('store_website_id', $request->website_id);
        }

        $emailAddress = $query->paginate(\App\Setting::get('pagination', 10))->appends(request()->query());
        $allStores    = StoreWebsite::all();
        // Retrieve all email addresses
        $emailAddresses    = EmailAddress::all();
        $runHistoriesCount = EmailRunHistories::count();

        $allDriver         = $emailAddresses->pluck('driver')->unique();
        $allIncomingDriver = $emailAddresses->pluck('incoming_driver')->unique();
        $allPort           = $emailAddresses->pluck('port')->unique();
        $allEncryption     = $emailAddresses->pluck('encryption')->unique();

        // default values for add form
        $defaultDriver     = 'smtp';
        $defaultPort       = '587';
        $defaultEncryption = 'tls';
        $defaultHost       = 'mail.mio-moda.com';

        $users         = User::orderBy('name', 'asc')->get();
        $userEmails    = $emailAddresses->pluck('username')->unique();
        $fromAddresses = $emailAddresses->pluck('from_address')->unique();

        $ops = '';
        foreach ($users as $key => $user) {
            $ops .= '<option class="form-control" value="' . $user['id'] . '">' . $user['name'] . '</option>';
        }
        if ($request->ajax()) {
            return view('email-addresses.index_ajax', [
                'emailAddress' => $emailAddress,
                'uops'         => $ops,
            ]);
        } else {
            return view('email-addresses.index', [
                'emailAddress'      => $emailAddress,
                'allStores'         => $allStores,
                'allDriver'         => $allDriver,
                'allIncomingDriver' => $allIncomingDriver,
                'allPort'           => $allPort,
                'allEncryption'     => $allEncryption,
                'users'             => $users,
                'uops'              => $ops,
                'userEmails'        => $userEmails,
                'defaultDriver'     => $defaultDriver,
                'defaultPort'       => $defaultPort,
                'defaultEncryption' => $defaultEncryption,
                'defaultHost'       => $defaultHost,
                'fromAddresses'     => $fromAddresses,
                'runHistoriesCount' => $runHistoriesCount,
            ]);
        }
    }

    public function createAcknowledgement(Request $request)
    {
        $this->validate($request, [
            'start_date'  => 'required',
            'end_date'    => 'required',
            'ack_status'  => 'required',
            'ack_message' => 'required',
        ]);

        $input             = $request->all();
        $input['added_by'] = Auth::user()->id;

        $messageModel = EMailAcknowledgement::create($input);

        return response()->json(
            [
                'code'    => 200,
                'data'    => [],
                'message' => 'Your email acknowledgement has been created!',
            ]
        );
    }

    public function acknowledgementCount($email_addresses_id)
    {
        $EMailAcknowledgement = EMailAcknowledgement::where('email_addresses_id', $email_addresses_id)->orderBy('id', 'DESC')->take(5)->get();

        return response()->json(['code' => 200, 'EMailAcknowledgement' => $EMailAcknowledgement]);
    }

    public function runHistoriesTruncate()
    {
        EmailRunHistories::truncate();

        return redirect()->back()->withSuccess('Data Removed Successfully!');
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $this->validate($request, [
            'from_name'       => 'required|string|max:255',
            'from_address'    => 'required|string|max:255',
            'incoming_driver' => 'required|string|max:255',
            'driver'          => 'required|string|max:255',
            'host'            => 'required|string|max:255',
            'port'            => 'required|string|max:255',
            'encryption'      => 'required|string|max:255',
            'username'        => 'required|string|max:255',
            'password'        => 'required|string|max:255',

        ]);

        $data = $request->except('_token', 'signature_logo', 'signature_image');

        $id = EmailAddress::insertGetId($data);

        $signature_logo  = $request->file('signature_logo');
        $signature_image = $request->file('signature_image');

        if ($signature_logo != '') {
            $signature_logo->storeAs(config('constants.default_uploads_dir'), $signature_logo->getClientOriginalName(), 's3');
            EmailAddress::find($id)->update(['signature_logo' => $signature_logo->getClientOriginalName()]);
        }
        if ($signature_image != '') {
            $signature_image->storeAs(config('constants.default_uploads_dir'), $signature_image->getClientOriginalName(), 's3');
            EmailAddress::find($id)->update(['signature_image' => $signature_image->getClientOriginalName()]);
        }

        $this->createEmail($id, $data['host'], $data['username'], $data['password']);

        return redirect()->route('email-addresses.index')->withSuccess('You have successfully saved a Email Address!');
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        $this->validate($request, [
            'from_name'       => 'required|string|max:255',
            'from_address'    => 'required|string|max:255',
            'incoming_driver' => 'required|string|max:255',
            'driver'          => 'required|string|max:255',
            'host'            => 'required|string|max:255',
            'port'            => 'required|string|max:255',
            'encryption'      => 'required|string|max:255',
            'username'        => 'required|string|max:255',
            'password'        => 'required|string|max:255',

        ]);

        $data = $request->except('_token', 'signature_logo', 'signature_image');

        EmailAddress::find($id)->update($data);

        $signature_logo  = $request->file('signature_logo');
        $signature_image = $request->file('signature_image');

        if ($signature_logo != '') {
            $signature_logo->storeAs(config('constants.default_uploads_dir'), $signature_logo->getClientOriginalName(), 's3');
            EmailAddress::find($id)->update(['signature_logo' => $signature_logo->getClientOriginalName()]);
        }
        if ($signature_image != '') {
            $signature_image->storeAs(config('constants.default_uploads_dir'), $signature_image->getClientOriginalName(), 's3');
            EmailAddress::find($id)->update(['signature_image' => $signature_image->getClientOriginalName()]);
        }

        $this->updateEmailPassword($id, $data['host'], $data['username'], $data['password']);

        return redirect()->back()->withSuccess('You have successfully updated a Email Address!');
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        $emailAddress = EmailAddress::find($id);

        $emailAddress->delete();

        return redirect()->route('email-addresses.index')->withSuccess('You have successfully deleted a Email Address');
    }

    public function getEmailAddressHistory(Request $request)
    {
        $EmailHistory = EmailRunHistories::where('email_run_histories.email_address_id', $request->id)
            ->whereDate('email_run_histories.created_at', Carbon::today())
            ->join('email_addresses', 'email_addresses.id', 'email_run_histories.email_address_id')
            ->select(['email_run_histories.*', 'email_addresses.from_name'])
            ->latest()
            ->get();

        $history = '';
        if (count($EmailHistory) > 0) {
            foreach ($EmailHistory as $runHistory) {
                $status  = ($runHistory->is_success == 0) ? 'Failed' : 'Success';
                $message = empty($runHistory->message) ? '-' : $runHistory->message;
                $history .= '<tr>
                <td>' . $runHistory->id . '</td>
                <td>' . $runHistory->from_name . '</td>
                <td>' . $status . '</td>
                <td>' . $message . '</td>
                <td>' . $runHistory->created_at->format('Y-m-d H:i:s') . '</td>
                </tr>';
            }
        } else {
            $history .= '<tr>
                    <td colspan="5">
                        No Result Found
                    </td>
                </tr>';
        }

        return response()->json(['data' => $history]);
    }

    public function getRelatedAccount(Request $request)
    {
        $adsAccounts  = \App\GoogleAdsAccount::where('account_name', $request->id)->get();
        $translations = \App\googleTraslationSettings::where('email', $request->id)->get();
        $analytics    = \App\StoreWebsiteAnalytic::where('email', $request->id)->get();

        $accounts = [];

        if (! $adsAccounts->isEmpty()) {
            foreach ($adsAccounts as $adsAccount) {
                $accounts[] = [
                    'name'          => $adsAccount->account_name,
                    'email'         => $adsAccount->account_name,
                    'last_error'    => $adsAccount->last_error,
                    'last_error_at' => $adsAccount->last_error_at,
                    'credential'    => $adsAccount->config_file_path,
                    'store_website' => $adsAccount->store_websites,
                    'status'        => $adsAccount->status,
                    'type'          => 'Google Ads Account',
                ];
            }
        }

        if (! $translations->isEmpty()) {
            foreach ($translations as $translation) {
                $accounts[] = [
                    'name'          => $translation->email,
                    'email'         => $translation->email,
                    'last_error'    => $translation->last_note,
                    'last_error_at' => $translation->last_error_at,
                    'credential'    => $translation->account_json,
                    'store_website' => 'N/A',
                    'status'        => $translation->status,
                    'type'          => 'Google Translation',
                ];
            }
        }

        if (! $analytics->isEmpty()) {
            foreach ($analytics as $analytic) {
                $accounts[] = [
                    'name'          => $analytic->email,
                    'email'         => $analytic->email,
                    'last_error'    => $analytic->last_error,
                    'last_error_at' => $analytic->last_error_at,
                    'credential'    => $analytic->account_id . ' - ' . $analytic->view_id,
                    'store_website' => $analytic->website,
                    'status'        => 'N/A',
                    'type'          => 'Google Analytics',
                ];
            }
        }

        return view('email-addresses.partials.task', compact('accounts'));
    }

    public function getErrorEmailHistory(Request $request)
    {
        ini_set('memory_limit', -1);

        $histories = EmailAddress::whereHas('history_last_message', function ($query) {
            $query->where('is_success', 0);
        })
            ->with(['history_last_message' => function ($q) {
                $q->where('created_at', '>', date('Y-m-d H:i:s', strtotime('-10 day')));
            }])
            ->get();

        $history = '';

        if ($histories) {
            foreach ($histories as $row) {
                if ($row->history_last_message) {
                    $status  = ($row->history_last_message->is_success == 0) ? 'Failed' : 'Success';
                    $message = $row->history_last_message->message ?? '-';
                    $history .= '<tr>
                    <td>' . $row->history_last_message->id . '</td>
                    <td>' . $row->from_name . '</td>
                    <td>' . $status . '</td>
                    <td>' . $message . '</td>
                    <td>' . $row->history_last_message->created_at->format('Y-m-d H:i:s') . '</td>
                    </tr>';
                }
            }
        } else {
            $history .= '<tr>
                    <td colspan="5">
                        No Result Found
                    </td>
                </tr>';
        }

        return response()->json(['data' => $history]);
    }

    public function downloadFailedHistory(Request $request)
    {
        $histories = EmailAddress::whereHas('history_last_message', function ($query) {
            $query->where('is_success', 0);
        })
            ->with(['history_last_message' => function ($q) {
                $q->where('created_at', '>', date('Y-m-d H:i:s', strtotime('-1 day')));
            }])
            ->get();

        $recordsArr = [];
        foreach ($histories as $row) {
            if ($row->history_last_message) {
                $recordsArr[] = [
                    'id'         => $row->history_last_message->id,
                    'from_name'  => $row->from_name,
                    'status'     => ($row->history_last_message->is_success == 0) ? 'Failed' : 'Success',
                    'message'    => $row->history_last_message->message ?? '-',
                    'created_at' => $row->history_last_message->created_at->format('Y-m-d H:i:s'),
                ];
            }
        }
        $filename = 'Report-Email-failed' . '.csv';

        return Excel::download(new EmailFailedReport($recordsArr), $filename);
    }

    public function passwordChange(Request $request)
    {
        if (empty($request->users)) {
            return response()->json([
                'status' => 'error',
                'msg'    => 'Please select user',
            ]);
        }

        $users = explode(',', $request->users);
        $data  = [];
        foreach ($users as $key) {
            // Generate new password
            $newPassword = Str::random(12);

            $user           = EmailAddress::findorfail($key);
            $user->password = $newPassword;
            $user->save();
            $data[$key] = $newPassword;

            //update password in virtualmin
            $this->updateEmailPassword($user->id, $user->host, $user->username, $newPassword);
        }

        return response()->json([
            'status' => 'success',
            'msg'    => 'Password Updated',
        ]);
    }

    public function sendToWhatsApp(Request $request)
    {
        $emailDetail    = EmailAddress::find($request->id);
        $user_id        = $request->user_id;
        $user           = User::findorfail($user_id);
        $number         = $user->phone;
        $whatsappnumber = '971502609192';

        $message = 'Password For ' . $emailDetail->username . 'is: ' . $emailDetail->password;

        $whatsappmessage = new WhatsAppController();
        $whatsappmessage->sendWithThirdApi($number, $user->whatsapp_number, $message);
        \Session::flash('success', 'Password sent');

        return redirect()->back();
    }

    public function assignUsers(Request $request)
    {
        $emailDetail         = EmailAddress::find($request->email_id);
        $data                = [];
        $clear_existing_data = \App\EmailAssign::where(['email_address_id' => $request->email_id])->delete();
        if (isset($request->users)) {
            foreach ($request->users as $_user) {
                $data[] = ['user_id' => $_user, 'email_address_id' => $request->email_id, 'created_at' => Carbon::today(), 'updated_at' => Carbon::today()];
            }
        }

        if (count($data) > 0) {
            $data_added = \App\EmailAssign::insert($data);

            return redirect()->back()->withSuccess('You have successfully assigned users to email address!');
        }

        return redirect()->back();
    }

    public function searchEmailAddress(Request $request)
    {
        $search = $request->search;

        if ($search != null) {
            $emailAddress = EmailAddress::where('username', 'Like', '%' . $search . '%')->orWhere('password', 'Like', '%' . $search . '%')->get();
        } else {
            $emailAddress = EmailAddress::get();
        }

        return response()->json(['tbody' => view('email-addresses.partials.email-address', compact('emailAddress'))->render()], 200);
    }

    public function updateEmailAddress(Request $request)
    {
        $usernames = $request->username;

        if ($request->username && $request->password) {
            foreach ($usernames as $key => $username) {
                EmailAddress::where('id', $key)->update(['username' => $username, 'password' => $request->password[$key]]);
            }

            return response()->json([
                'status' => 'success',
                'msg'    => 'Email And Password Updated Successfully.',
            ]);
        } else {
            return response()->json([
                'status' => 'error',
                'msg'    => 'Email And Password Updated Successfully.',
            ]);
        }
    }

    //create email in virtualmin
    public function createEmail($id, $smtpHost, $user, $password): string
    {
        $mailHelper = new VirtualminHelper();
        $result     = parse_url(getenv('VIRTUALMIN_ENDPOINT'));
        $vmHost     = isset($result['host']) ? $result['host'] : '';
        $status     = 'failure';
        if ($smtpHost == $vmHost) {
            $response = $mailHelper->createMail($smtpHost, $user, $password);
            $status   = 'failure';
            if ($response['code'] == 200) {
                $status = $response['data']['status'];
                EmailAddress::find($id)->update(['username' => $user . '@' . $smtpHost]);
            }
        }

        return $status;
    }

    //update password in virtualmin
    public function updateEmailPassword($id, $smtpHost, $user, $password): string
    {
        $mailHelper = new VirtualminHelper();
        $result     = parse_url(getenv('VIRTUALMIN_ENDPOINT'));
        $vmHost     = isset($result['host']) ? $result['host'] : '';
        $status     = 'failure';
        if ($smtpHost == $vmHost) {
            $response = $mailHelper->changeMailPassword($smtpHost, $user, $password);
            $status   = 'failure';
            if ($response['code'] == 200) {
                $status = $response['data']['status'];
                $parts  = explode('@', $user);
                EmailAddress::find($id)->update(['username' => $parts[0] . '@' . $smtpHost]);
            }
        }

        return $status;
    }

    public function singleEmailRunCron(Request $request)
    {
        $emailAddresses = EmailAddress::where('id', $request->get('id'))->first();

        $emailAddress = $emailAddresses;
        try {
            $cm   = new ClientManager();
            $imap = $cm->make([
                'host'          => $emailAddress->host,
                'port'          => 993,
                'encryption'    => 'ssl',
                'validate_cert' => false,
                'username'      => $emailAddress->username,
                'password'      => $emailAddress->password,
                'protocol'      => 'imap',
            ]);

            $imap->connect();

            $types = [
                'inbox' => [
                    'inbox_name' => 'INBOX',
                    'direction'  => 'from',
                    'type'       => 'incoming',
                ],
                'sent' => [
                    'inbox_name' => 'INBOX.Sent',
                    'direction'  => 'to',
                    'type'       => 'outgoing',
                ],
            ];

            $available_models = [
                'supplier' => \App\Supplier::class, 'vendor' => \App\Vendor::class,
                'customer' => \App\Customer::class, 'users' => \App\User::class,
            ];
            $email_list = [];
            foreach ($available_models as $key => $value) {
                $email_list[$value] = $value::whereNotNull('email')->pluck('id', 'email')->unique();
            }

            foreach ($types as $type) {
                $inbox = $imap->getFolder($type['inbox_name']);
                if ($type['type'] == 'incoming') {
                    $latest_email = Email::select('created_at')->where('to', $emailAddress->from_address)->where('type', $type['type'])->latest()->first();
                } else {
                    $latest_email = Email::select('created_at')->where('from', $emailAddress->from_address)->where('type', $type['type'])->latest()->first();
                }

                $latest_email_date = $latest_email ? Carbon::parse($latest_email->created_at) : false;
                if ($latest_email_date) {
                    $emails = ($inbox) ? $inbox->messages()->where('SINCE', $latest_email_date->subDays(1)->format('d-M-Y')) : '';
                } else {
                    $emails = ($inbox) ? $inbox->messages() : '';
                }
                if ($emails) {
                    $emails = $emails->all()->get();
                    foreach ($emails as $email) {
                        try {
                            $reference_id = $email->references;
                            $origin_id    = $email->message_id;

                            // Skip if message is already stored
                            if (Email::where('origin_id', $origin_id)->count() > 0) {
                                continue;
                            }

                            // check if email has already been received

                            $textContent = $email->getTextBody();
                            if ($email->hasHTMLBody()) {
                                $content = $email->getHTMLBody();
                            } else {
                                $content = $email->getTextBody();
                            }

                            $email_subject = $email->getSubject();
                            \Log::channel('customer')->info('Subject  => ' . $email_subject);

                            $attachments_array = [];
                            $attachments       = $email->getAttachments();
                            $fromThis          = $email->getFrom()[0]->mail;
                            $attachments->each(function ($attachment) use (&$attachments_array, $fromThis, $email_subject) {
                                $attachment->name = preg_replace("/[^a-z0-9\_\-\.]/i", '', $attachment->name);
                                file_put_contents(storage_path('app/files/email-attachments/' . $attachment->name), $attachment->content);
                                $path = 'email-attachments/' . $attachment->name;

                                $attachments_array[] = $path;

                                /*start 3215 attachment fetch from DHL mail */
                                \Log::channel('customer')->info('Match Start  => ' . $email_subject);

                                $findFromEmail = explode('@', $fromThis);
                                if (strpos(strtolower($email_subject), 'your copy invoice') !== false && isset($findFromEmail[1]) && (strtolower($findFromEmail[1]) == 'dhl.com')) {
                                    \Log::channel('customer')->info('Match Found  => ' . $email_subject);
                                    $this->getEmailAttachedFileData($attachment->name);
                                }
                                /*end 3215 attachment fetch from DHL mail */
                            });

                            $from = $email->getFrom()[0]->mail;
                            $to   = array_key_exists(0, $email->getTo()->get()) ? $email->getTo()[0]->mail : $email->getReplyTo()[0]->mail;

                            // Model is sender if its incoming else its receiver if outgoing
                            if ($type['type'] == 'incoming') {
                                $model_email = $from;
                            } else {
                                $model_email = $to;
                            }

                            // Get model id and model type

                            extract($this->getModel($model_email, $email_list));

                            $subject = explode('#', $email_subject);
                            if (isset($subject[1]) && ! empty($subject[1])) {
                                $findTicket = \App\Tickets::where('ticket_id', $subject[1])->first();
                                if ($findTicket) {
                                    $model_id   = $findTicket->id;
                                    $model_type = \App\Tickets::class;
                                }
                            }

                            $params = [
                                'model_id'        => $model_id,
                                'model_type'      => $model_type,
                                'origin_id'       => $origin_id,
                                'reference_id'    => $reference_id,
                                'type'            => $type['type'],
                                'seen'            => isset($email->getFlags()['seen']) ? $email->getFlags()['seen'] : 0,
                                'from'            => $email->getFrom()[0]->mail,
                                'to'              => array_key_exists(0, $email->getTo()->get()) ? $email->getTo()[0]->mail : $email->getReplyTo()[0]->mail,
                                'subject'         => $email->getSubject(),
                                'message'         => $content,
                                'template'        => 'customer-simple',
                                'additional_data' => json_encode(['attachment' => $attachments_array]),
                                'created_at'      => $email->getDate(),
                            ];

                            $email_id = Email::insertGetId($params);

                            if ($type['type'] == 'incoming') {
                                $message = trim($textContent);

                                $reply = (new EmailParser())->parse($message);

                                $fragment = current($reply->getFragments());

                                $pattern = '(On[^abc,]*, (Jan(uary)?|Feb(ruary)?|Mar(ch)?|Apr(il)?|May|Jun(e)?|Jul(y)?|Aug(ust)?|Sep(tember)?|Oct(ober)?|Nov(ember)?|Dec(ember)?)\s+\d{1,2},\s+\d{4}, (1[0-2]|0?[1-9]):([0-5][0-9]) ([AaPp][Mm]))';

                                $reply = strip_tags($fragment);

                                $reply = preg_replace($pattern, ' ', $reply);

                                $mailFound = false;
                                if ($reply) {
                                    $customer = \App\Customer::where('email', $from)->first();
                                    if (! empty($customer)) {
                                        // store the main message
                                        $params = [
                                            'number'      => $customer->phone,
                                            'message'     => $reply,
                                            'media_url'   => null,
                                            'approved'    => 0,
                                            'status'      => 0,
                                            'contact_id'  => null,
                                            'erp_user'    => null,
                                            'supplier_id' => null,
                                            'task_id'     => null,
                                            'dubizzle_id' => null,
                                            'vendor_id'   => null,
                                            'customer_id' => $customer->id,
                                            'is_email'    => 1,
                                            'from_email'  => $from,
                                            'to_email'    => $to,
                                            'email_id'    => $email_id,
                                        ];
                                        $messageModel = \App\ChatMessage::create($params);
                                        \App\Helpers\MessageHelper::whatsAppSend($customer, $reply, null, null, $isEmail = true);
                                        \App\Helpers\MessageHelper::sendwatson($customer, $reply, null, $messageModel, $params, $isEmail = true);
                                        $mailFound = true;
                                    }

                                    if (! $mailFound) {
                                        $vandor = \App\Vendor::where('email', $from)->first();
                                        if ($vandor) {
                                            $params = [
                                                'number'      => $vandor->phone,
                                                'message'     => $reply,
                                                'media_url'   => null,
                                                'approved'    => 0,
                                                'status'      => 0,
                                                'contact_id'  => null,
                                                'erp_user'    => null,
                                                'supplier_id' => null,
                                                'task_id'     => null,
                                                'dubizzle_id' => null,
                                                'vendor_id'   => $vandor->id,
                                                'is_email'    => 1,
                                                'from_email'  => $from,
                                                'to_email'    => $to,
                                                'email_id'    => $email_id,
                                            ];
                                            $messageModel = \App\ChatMessage::create($params);
                                            $mailFound    = true;
                                        }
                                    }

                                    if (! $mailFound) {
                                        $supplier = \App\Supplier::where('email', $from)->first();
                                        if ($supplier) {
                                            $params = [
                                                'number'      => $supplier->phone,
                                                'message'     => $reply,
                                                'media_url'   => null,
                                                'approved'    => 0,
                                                'status'      => 0,
                                                'contact_id'  => null,
                                                'erp_user'    => null,
                                                'supplier_id' => $supplier->id,
                                                'task_id'     => null,
                                                'dubizzle_id' => null,
                                                'is_email'    => 1,
                                                'from_email'  => $from,
                                                'to_email'    => $to,
                                                'email_id'    => $email_id,
                                            ];
                                            $messageModel = \App\ChatMessage::create($params);
                                            $mailFound    = true;
                                        }
                                    }
                                }
                            }
                        } catch (Exception $e) {
                            captureException($e);
                            \Log::error('error while fetching some emails for ' . $emailAddress->username . ' Error Message: ' . $e->getMessage());
                            $historyParam = [
                                'email_address_id' => $emailAddress->id,
                                'is_success'       => 0,
                                'message'          => 'error while fetching some emails for ' . $emailAddress->username . ' Error Message: ' . $e->getMessage(),
                            ];
                            EmailRunHistories::create($historyParam);
                        }
                    }
                }
            }

            $historyParam = [
                'email_address_id' => $emailAddress->id,
                'is_success'       => 1,
            ];

            EmailRunHistories::create($historyParam);

            return response()->json(['status' => 'success', 'message' => 'Successfully'], 200);
        } catch (Exception $e) {
            captureException($e);
            $exceptionMessage = $e->getMessage();

            if ($e->getPrevious() !== null) {
                $previousMessage  = $e->getPrevious()->getMessage();
                $exceptionMessage = $previousMessage . ' | ' . $exceptionMessage;
            }

            \Log::channel('customer')->info($exceptionMessage);
            $historyParam = [
                'email_address_id' => $emailAddress->id,
                'is_success'       => 0,
                'message'          => $exceptionMessage,
            ];
            EmailRunHistories::create($historyParam);
            \App\CronJob::insertLastError('fetch:all_emails', $exceptionMessage);
            throw new Exception($exceptionMessage);
        }
    }

    public function listEmailRunLogs(Request $request)
    {
        $searchMessage = $request->search_message;
        $searchDate    = $request->date;
        $searchName    = $request->search_name;
        $searchStatus  = $request->status ?? '';

        $emailRunHistoryQuery = DB::table('email_run_histories')
            ->join('email_addresses', 'email_run_histories.email_address_id', '=', 'email_addresses.id')
            ->select(
                'email_run_histories.*',
                'email_addresses.from_name as email_from_name'
            )
            ->when($searchMessage, function ($query, $searchMessage) {
                return $query->where('email_run_histories.message', 'LIKE', '%' . $searchMessage . '%');
            })
            ->when($searchDate, function ($query, $searchDate) {
                return $query->where('email_run_histories.created_at', 'LIKE', '%' . $searchDate . '%');
            })
            ->when($searchName, function ($query, $searchName) {
                return $query->where('email_addresses.from_name', 'LIKE', '%' . $searchName . '%');
            })
            ->latest();

        if ($searchStatus != '') {
            if ($searchStatus === 'success') {
                $emailRunHistoryQuery->where('email_run_histories.is_success', 1);
            }

            if ($searchStatus === 'failed') {
                $emailRunHistoryQuery->where('email_run_histories.is_success', 0);
            }
        }

        $emailJobs = $emailRunHistoryQuery->paginate(\App\Setting::get('pagination', 25));

        return view('email-addresses.email-run-log-listing', compact('emailJobs'));
    }

    public function setEmailAlert(Request $request)
    {
        $emailAddressId           = $request->id;
        $emaiAddress              = EmailAddress::findorfail($emailAddressId);
        $emaiAddress->email_alert = $request->email_alert == 'true' ? 1 : 0;
        $emaiAddress->save();

        return ['status' => true, 'message' => 'Email alert Updated'];
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/EmailController.php 
Content: <?php

namespace App\Http\Controllers;

use DB;
use Auth;
use Mail;
use App\Email;
use App\Reply;
use DataTables;
use App\EmailLog;
use Carbon\Carbon;
use App\LogRequest;
use App\ModelColor;
use App\Wetransfer;
use App\EmailRemark;
use App\EmailAddress;
use App\CronJobReport;
use App\EmailCategory;
use App\ReplyCategory;
use App\Models\EmailBox;
use App\EmailRunHistories;
use App\Models\EmailStatus;
use App\SendgridEventColor;
use Illuminate\Http\Request;
use App\Models\DataTableColumn;
use App\DigitalMarketingPlatform;
use App\Mails\Manual\ForwardEmail;
use Webklex\PHPIMAP\ClientManager;
use App\Mails\Manual\PurchaseEmail;
use App\Models\EmailCategoryHistory;
use App\Models\EmailStatusChangeHistory;
use EmailReplyParser\Parser\EmailParser;
use Illuminate\Support\Facades\Validator;
use seo2websites\ErpExcelImporter\ErpExcelImporter;

class EmailController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @param null|mixed $email
     *
     * @return \Illuminate\Http\Response
     */
    //Purpose : Add Email Parameter - DEVTASK-18283
    public function index(Request $request, $email = null)
    {
        // Set default type as incoming
        $type = 'incoming';
        $seen = '0';
        $from = ''; //Purpose : Add var -  DEVTASK-18283

        $term             = $request->term ?? '';
        $sender           = $request->sender ?? '';
        $receiver         = $request->receiver ?? '';
        $status           = $request->status ?? '';
        $category         = $request->category ?? '';
        $mailbox          = $request->mail_box ?? '';
        $email_model_type = $request->email_model_type ?? '';

        $date        = $request->date ?? '';
        $type        = $request->type ?? $type;
        $seen        = $request->seen ?? $seen;

        $emailModelTypes  = Email::emailModelTypeList();
        $email_status     = EmailStatus::select('id', 'email_status')->get();
        $email_categories = EmailCategory::select('id', 'category_name')->get();

        if ($request->ajax()) {
            $user      = Auth::user();
            $admin     = $user->isAdmin();
            $usernames = [];
            if (! $admin) {
                $emaildetails = \App\EmailAssign::select('id', 'email_address_id')
                    ->with('emailAddress:username')
                    ->where(['user_id' => $user->id])
                    ->getModels();
                if ($emaildetails) {
                    $usernames = array_map(fn ($item) => $item->emailAddress->username, $emaildetails);
                }
            }

            $query       = (new Email())->newQuery();
            $trash_query = false;
            $query       = $query->leftJoin('chat_messages', 'chat_messages.email_id', 'emails.id')
                ->leftjoin('customers as c', 'c.id', 'chat_messages.customer_id')
                ->leftJoin('vendors as v', 'v.id', 'chat_messages.vendor_id')
                ->leftJoin('suppliers as s', 's.id', 'chat_messages.supplier_id');
            if (count($usernames) > 0) {
                $query = $query->where(function ($query) use ($usernames) {
                    foreach ($usernames as $_uname) {
                        $query->orWhere('from', 'like', '%' . $_uname . '%');
                    }
                });

                $query = $query->orWhere(function ($query) use ($usernames) {
                    foreach ($usernames as $_uname) {
                        $query->orWhere('to', 'like', '%' . $_uname . '%');
                    }
                });
            }

            //START - Purpose : Add Email - DEVTASK-18283
            if ($email != '' && $receiver == '') {
                $receiver = $email;
                $from     = 'order_data';
                $seen     = 'both';
                $type     = 'outgoing';
            }
            //END - DEVTASK-18283

            // If type is bin, check for status only
            if ($type == 'bin') {
                $trash_query = true;
                $query       = $query->where('emails.status', 'bin');
            } elseif ($type == 'draft') {
                $query = $query->where('is_draft', 1)->where('emails.status', '<>', 'pre-send');
            } elseif ($type == 'pre-send') {
                $query = $query->where('emails.status', 'pre-send');
            } else {
                $query = $query->where(function ($query) use ($type) {
                    $query->where('emails.type', $type)->orWhere('emails.type', 'open')->orWhere('emails.type', 'delivered')->orWhere('emails.type', 'processed');
                });
            }
            if ($email_model_type) {
                $model_type = explode(',', $email_model_type);
                $query      = $query->where(function ($query) use ($model_type) {
                    $query->whereIn('model_type', $model_type);
                });
            }
            if ($date) {
                $query = $query->whereDate('created_at', $date);
            }
            if ($term) {
                $query = $query->where(function ($query) use ($term) {
                    $query->orWhere('from', 'like', '%' . $term . '%')
                        ->orWhere('to', 'like', '%' . $term . '%')
                        ->orWhere('emails.subject', 'like', '%' . $term . '%')
                        ->orWhere(DB::raw('FROM_BASE64(emails.message)'), 'like', '%' . $term . '%')
                        ->orWhere('chat_messages.message', 'like', '%' . $term . '%');
                });
            }

            if (! $term) {
                if ($sender) {
                    $sender = explode(',', $request->sender);
                    $query  = $query->where(function ($query) use ($sender) {
                        $query->whereIn('emails.from', $sender);
                    });
                }
                if ($receiver) {
                    $receiver = explode(',', $request->receiver);
                    $query    = $query->where(function ($query) use ($receiver) {
                        $query->whereIn('emails.to', $receiver);
                    });
                }
                if ($status) {
                    $status = explode(',', $request->status);
                    $query  = $query->where(function ($query) use ($status) {
                        $query->whereIn('emails.status', $status);
                    });
                }
                if ($category) {
                    $category = explode(',', $request->category);
                    $query    = $query->where(function ($query) use ($category) {
                        $query->whereIn('email_category_id', $category);
                    });
                }
            }

            if (! empty($mailbox)) {
                $mailbox = explode(',', $request->mail_box);
                $query   = $query->where(function ($query) use ($mailbox) {
                    $query->whereIn('email_box_id', $mailbox);
                });
            }

            if (isset($seen) && $seen != '0') {
                if ($seen != 'both') {
                    $query = $query->where('seen', $seen);
                } elseif ($seen == 'both' && $type == 'outgoing') {
                    $query = $query->where('emails.status', 'outgoing');
                }
            }

            // If it isn't trash query remove email with status trashed
            if (! $trash_query) {
                $query = $query->where(function ($query) use ($type) {
                    $isDraft = ($type == 'draft') ? 1 : 0;

                    return $query->where('emails.status', '<>', 'bin')->orWhereNull('emails.status')->where('is_draft', $isDraft);
                });
            }
            $emails = $query->select('emails.*', 'chat_messages.customer_id', 'chat_messages.supplier_id', 'chat_messages.vendor_id', 'c.is_auto_simulator as customer_auto_simulator',
                'v.is_auto_simulator as vendor_auto_simulator', 's.is_auto_simulator as supplier_auto_simulator');

            if ($admin == 1) {
                // $emails = $query->orderByDesc('emails.id');

                // $emails = $query->paginate(30)->appends(request()->except(['page']));
            } else {
                if (count($usernames) > 0) {
                    $query = $query->where(function ($query) use ($usernames) {
                        foreach ($usernames as $_uname) {
                            $query->orWhere('from', 'like', '%' . $_uname . '%');
                        }
                    });

                    $emails = $query->where(function ($query) use ($usernames) {
                        foreach ($usernames as $_uname) {
                            $query->orWhere('to', 'like', '%' . $_uname . '%');
                        }
                    });

                // $query  = $query->orderByDesc('emails.id');
                // $emails = $query->paginate(30)->appends(request()->except(['page']));
                } else {
                    $emails = (new Email())->newQuery();
                    $emails = $emails->whereNull('id');
                    // $emails = $emails->orderByDesc('emails.id');
                    // $emails = $emails->paginate(30)->appends(request()->except(['page']));
                }
            }

            //Get Cron Email Histroy

            //Get List of model types

            return Datatables::of($emails)
                    ->addColumn('checkbox', function ($email) {
                        $btn = '';
                        if ($email->status != 'bin') {
                            $btn .= '<input name="selector[]" id="ad_Checkbox_' . $email->id . '" class="ads_Checkbox" type="checkbox" value="' . $email->id . '" style="margin: 0px; height: auto;" />';
                        }

                        return $btn;
                    })
                    ->addColumn('created_at_format', function ($email) {
                        return Carbon::parse($email->created_at)->format('d-m-Y H:i:s');
                    })
                    ->editColumn('created_at', function ($email) {
                        return $email->created_at;
                    })
                    // ->orderColumn('created_at', function ($query, $order) {
                    //     $query->orderBy('created_at1', $order);
                    // })
                    ->editColumn('from', function ($email) {
                        return substr($email->from, 0, 20) . (strlen($email->from) > 20 ? '...' : '');
                    })
                    ->editColumn('from_full', function ($email) {
                        return $email->from;
                    })
                    ->editColumn('to', function ($email) {
                        return substr($email->to, 0, 15) . (strlen($email->to) > 10 ? '...' : '');
                    })
                    ->addColumn('to_full', function ($email) {
                        return $email->to;
                    })
                    ->editColumn('model_type', function ($email) use ($emailModelTypes) {
                        if (array_key_exists($email->model_type, $emailModelTypes)) {
                            return $email->model_type ? $emailModelTypes[$email->model_type] : 'N/A';
                        } else {
                            return $email->model_type;
                        }
                    })
                    ->editColumn('subject', function ($email) {
                        return $email->subject;
                    })
                    ->addColumn('message_short', function ($email) {
                        return substr(strip_tags($email->message), 0, 120) . (strlen(strip_tags($email->message)) > 110 ? '...' : '');
                    })
                    ->editColumn('message', function ($email) {
                        return $email->message;
                    })
                    ->editColumn('status', function ($email) use ($email_status) {
                        if ($email->status == 'bin') {
                            return 'Deleted';
                        } else {
                            $status = '';
                            $status .= '<select class="form-control selecte2 status">';
                            $status .= '<option  value="" >Please select</option>';
                            foreach ($email_status as $s) {
                                if (strtolower($s->email_status) == strtolower($email->status)) {
                                    $status .= '<option data-id="' . $email->id . '" selected>' . $s->email_status . '</option>';
                                } else {
                                    $status .= '<option data-id="' . $email->id . '">' . $s->email_status . '</option>';
                                }
                            }
                            $status .= '</select>';

                            return $status;
                        }
                    })
                    ->editColumn('is_draft', function ($email) {
                        return $email->is_draft == 1 ? 'Yes' : 'No';
                    })
                    ->addColumn('error_message', function ($email) {
                        return strlen($email->error_message) > 20 ? substr($email->error_message, 0, 20) . '...' : $email->error_message;
                    })
                    ->addColumn('error_message_full', function ($email) {
                        return $email->error_message;
                    })
                    ->addColumn('email_category_id', function ($email) use ($email_categories) {
                        $category = '<select class="form-control selecte2 email-category">';
                        $category .= '<option  value="" >Please select</option>';
                        foreach ($email_categories as $email_category) {
                            $category .= '<option  value="' . $email_category->id . '" data-id="' . $email->id . '" ' . ($email_category->id == $email->email_category_id ? 'selected' : '') . '>' . $email_category->category_name . '</option>';
                        }
                        $category .= '</select>';

                        return $category;
                    })
                    ->addColumn('action', function ($email) {
                        $btn = '';
                        $btn .= '<button type="button" class="btn btn-secondary btn-sm mt-2 toggle-action" data-id="' . $email->id . '"><i class="fa fa-arrow-down"></i></button>';
                        $btn .= '<div id="action-' . $email->id . '" class="d-none">';
                        if ($email->type != 'incoming') {
                            $btn .= '<a title="Resend"  class="btn-image resend-email-btn" data-type="resend" data-id="' . $email->id . '" >
                            <i class="fa fa-repeat"></i>
                            </a>';
                        }

                        $btn .= '<a title="Reply" class="btn-image reply-email-btn" data-toggle="modal" data-target="#replyMail" data-id="' . $email->id . '" >
                        <i class="fa fa-reply"></i>
                        </a>

                        <a title="Reply All" class="btn-image reply-all-email-btn" data-toggle="modal" data-target="#replyAllMail" data-id="' . $email->id . '" >
                        <i class="fa fa-reply-all"></i>
                        </a>

                        <a title="Forward" class="btn-image forward-email-btn" data-toggle="modal" data-target="#forwardMail" data-id="' . $email->id . '" >
                        <i class="fa fa-share"></i>
                        </a>

                        <a title="Bin" class="btn-image bin-email-btn" data-id="' . $email->id . '" >
                        <i class="fa fa-trash"></i>
                        </a>

                        <button title="Remarks" style="padding:3px;" type="button" class="btn btn-image make-remark d-inline" data-toggle="modal" data-target="#makeRemarkModal" data-id="' . $email->id . '"><img width="2px;" src="/images/remark.png"/></button>

                        <button title="Update Status & Category" style="padding:3px;" type="button" class="btn btn-image d-inline mailupdate border-0" data-toggle="modal" data-status="' . $email->status . '" data-category="' . $email->email_category_id . '" data-target="#UpdateMail" data-id="' . $email->id . '"><img width="2px;" src="images/edit.png"/></button>

                        <a title="Import Excel Imported" href="javascript:void(0);">  <i class="fa fa-cloud-download" aria-hidden="true" onclick="excelImporter(' . $email->id . ')"></i></a>

                        <button title="Files Status" style="padding:3px;" type="button" class="btn btn-image d-inline" onclick="showFilesStatus(' . $email->id . ')">  <i class="fa fa-history" aria-hidden="true" ></i></button>';

                        if ($email->email_excel_importer == 1) {
                            $btn .= '<a href="javascript:void(0);">  <i class="fa fa-check"></i></a>';
                        }

                        if ($email->approve_mail == 1) {
                            $btn .= '<a title="Approve and send watson reply" class="btn-image resend-email-btn" data-id="' . $email->id . '" data-type="approve" href="javascript:void(0);">  <i class="fa fa-check-circle"></i></a>';
                        }

                        $btn .= '<a class="btn btn-image btn-ht" href="' . route('order.generate.order-mail.pdf', ['order_id' => 'empty', 'email_id' => $email->id]) . '">
                            <i class="fa fa-file-pdf-o" aria-hidden="true"></i>
                        </a>

                        <button title="Assign Platform" style="padding:3px;" type="button" class="btn btn-image make-label d-inline" data-toggle="modal" data-target="#labelingModal" data-id="' . $email->id . '"><i class="fa fa-tags" aria-hidden="true"></i></button>

                        <a title="Email reply" class="btn btn-image btn-ht" onclick="fetchEvents(' . $email['id'] . ')">
                            <i class="fa fa-eye" aria-hidden="true"></i>
                        </a>

                        <a title="Email Logs" class="btn btn-image btn-ht" title="View Email Log" onclick="fetchEmailLog(' . $email['id'] . ')">
                            <i class="fa fa-history" aria-hidden="true"></i>
                        </a>';

                        if (empty($email->module_type) && $email->is_unknow_module == 1) {
                            $btn .= '<a style="padding:3px;" type="button" title="Assign Model" class="btn btn-image make-label d-inline" data-id="' . $email->id . '" onclick="openAssignModelPopup(this);"> <i class="fa fa-envelope" aria-hidden="true"></i> </a>';
                        }

                        $btn .= '<a itle="Email Category Change Logs" style="padding:3px;" type="button" title="Email Category Change Logs" class="btn btn-image make-label d-inline" data-id="' . $email->id . '" onclick="openEmailCategoryChangeLogModelPopup(this);"> <i class="fa fa-calendar" aria-hidden="true"></i> </a>
                        <a title="Shortcut" href="javascript:;" data-toggle="modal" data-target="#create-sop-shortcut" class="btn btn-image ml-1 create_short_cut" data-msg="' . $email->subject . '" data-id="' . $email->id . '"><i class="fa fa-asterisk" data-message="' . $email->subject . '" aria-hidden="true"></i></a>
                        <a itle="Email Status Change Logs" style="padding:3px;" type="button" title="Email Status Change Logs" class="btn btn-image make-label d-inline" data-id="' . $email->id . '" onclick="openEmailStatusChangeLogModelPopup(this);"> <i class="fa fa-calendar" aria-hidden="true"></i> </a>';

                        if ($email->customer_id > 0) {
                            $btn .= '<button type="button" class="btn btn-sm m-0 p-0 mr-1 btn-image" onclick="changeSimulatorSetting(`customer`, ' . $email->customer_id . ', ' . ($email->customer_auto_simulator == 0) . ')"><i style="color: #757575c7;" class="fa fa-' . $email->customer_auto_simulator == 0 ? 'play' : 'pause' . '"
                            aria-hidden="true"></i>
                            </button>
                            <a href="' . route('simulator.message.list', ['object' => 'customer', 'object_id' =>  $email->customer_id]) . '"
                            title="Load messages"><i style="color: #757575c7;" class="fa fa-file-text-o" aria-hidden="true"></i></a>';
                        } elseif ($email->vendor_id > 0) {
                            $btn .= '<button type="button" class="btn btn-sm m-0 p-0 mr-1 btn-image"
                            onclick="changeSimulatorSetting(`vendor`, ' . $email->vendor_id . ', ' . ($email->vendor_auto_simulator == 0) . ')">
                            <i style="color: #757575c7;" class="fa fa-' . ($email->vendor_auto_simulator == 0 ? 'play' : 'pause') . '"
                            aria-hidden="true"></i>
                            </button>
                            <a href="' . route('simulator.message.list', ['object' => 'customer', 'object_id' =>  $email->vendor_id]) . '"
                            title="Load messages"><i style="color: #757575c7;" class="fa fa-file-text-o" aria-hidden="true"></i></a>';
                        } elseif ($email->supplier_id > 0) {
                            $btn .= '<button type="button" class="btn btn-sm m-0 p-0 mr-1 btn-image"
                            onclick="changeSimulatorSetting(`vendor`, ' . $email->supplier_id . ', ' . ($email->supplier_auto_simulator == 0) . ')">
                            <i style="color: #757575c7;" class="fa fa-' . ($email->supplier_auto_simulator == 0 ? 'play' : 'pause') . '"
                            aria-hidden="true"></i>
                            </button>
                            <a href="' . route('simulator.message.list', ['object' => 'customer', 'object_id' =>  $email->supplier_id]) . '"
                            title="Load messages"><i style="color: #757575c7;" class="fa fa-file-text-o" aria-hidden="true"></i></a>';
                        }
                        // return $btn;
                        $btn .= '<button type="button" class="btn btn-sm m-0 p-0 mr-1 btn-image" onclick="createVendorPopup(`' . $email->from . '`)"><i style="color: #757575c7;" class="fa fa-user-plus" aria-hidden="true"></i></button>';
                        $btn .= '</div>';

                        return $btn;
                    })
                    ->addColumn('action_all', function ($email) {
                        $btn = '<tr class="action-btn-tr-' . $email->id . ' d-none"><th>Action</th><td colspan="11">---</td></tr>';

                        return $btn;
                    })
                    ->rawColumns(['checkbox', 'message', 'status', 'email_category_id', 'action', 'action_all'])
                    ->make(true);

            return $emails;
        }
        $reports = CronJobReport::where('cron_job_reports.signature', 'fetch:all_emails')
                ->join('cron_jobs', 'cron_job_reports.signature', 'cron_jobs.signature')
                ->whereDate('cron_job_reports.created_at', '>=', Carbon::now()->subDays(10))
                ->select(['cron_job_reports.*', 'cron_jobs.last_error'])->paginate(15);

        if ($request->ajax()) {
            return response()->json([
                'tbody'  => view('emails.search', compact('emails', 'date', 'term', 'type', 'email_categories', 'email_status', 'emailModelTypes'))->with('i', ($request->input('page', 1) - 1) * 5)->render(),
                'links'  => (string) $emails->links(),
                'count'  => $emails->total(),
                'emails' => $emails,
            ], 200);
        }

        // suggested search for email forwarding
        $search_suggestions = $this->getAllEmails();

        // dont load any data, data will be loaded by tabs based on ajax
        // return view('emails.index',compact('emails','date','term','type'))->with('i', ($request->input('page', 1) - 1) * 5);
        $digita_platfirms = DigitalMarketingPlatform::all();

        $totalEmail  = Email::count();
        $modelColors = ModelColor::whereIn('model_name', ['customer', 'vendor', 'supplier', 'user'])->limit(10)->get();

        $datatableModel = DataTableColumn::select('column_name')
            ->where('user_id', auth()->user()->id)
            ->where('section_name', 'emails')->first();
        $dynamicColumnsToShowb = [];
        if (! empty($datatableModel->column_name)) {
            $hideColumns           = $datatableModel->column_name ?? '';
            if (json_decode($hideColumns, true)) {
                $dynamicColumnsToShowb = json_decode($hideColumns, true);
            }
        }

        $columns[] = ['data'=>'checkbox', 'name'=>'checkbox'];
        $columns[] = ['data'=> 'created_at_format', 'name'=>'created_at'];
        $columns[] = ['data'=> 'from', 'name'=>'from'];
        $columns[] = ['data'=> 'to', 'name'=>'to'];
        $columns[] = ['data'=> 'model_type', 'name'=>'model_type'];
        $columns[] = ['data'=> 'type', 'name'=>'type'];
        $columns[] = ['data'=> 'subject', 'name'=>'subject'];
        $columns[] = ['data'=> 'message_short', 'name'=>'message'];
        $columns[] = ['data'=> 'status', 'name'=>'status'];
        $columns[] = ['data'=> 'is_draft', 'name'=>'is_draft'];
        $columns[] = ['data'=> 'error_message', 'name'=>'error_message'];
        $columns[] = ['data'=> 'email_category_id', 'name'=>'email_category_id'];
        $columns[] = ['data'=> 'action', 'name'=>'action'];

        return view('emails.index',
            [
                'columns'               => $columns,
                'type'                  => 'email',
                'search_suggestions'    => $search_suggestions,
                'email_status'          => $email_status,
                'email_categories'      => $email_categories,
                'emailModelTypes'       => $emailModelTypes,
                'reports'               => $reports,
                'digita_platfirms'      => $digita_platfirms,
                'receiver'              => $receiver,
                'from'                  => $from,
                'totalEmail'            => $totalEmail,
                'modelColors'           => $modelColors,
                'dynamicColumnsToShowb' => $dynamicColumnsToShowb,
            ]);
    }

    public function emailsColumnVisbilityUpdate(Request $request)
    {
        $userCheck = DataTableColumn::where('user_id', auth()->user()->id)->where('section_name', 'emails')->first();

        if ($userCheck) {
            $column               = DataTableColumn::find($userCheck->id);
            $column->section_name = 'emails';
            $column->column_name  = json_encode($request->column_data);
            $column->save();
        } else {
            $column               = new DataTableColumn();
            $column->section_name = 'emails';
            $column->column_name  = json_encode($request->column_data);
            $column->user_id      = auth()->user()->id;
            $column->save();
        }

        return redirect()->back()->with('success', 'column visiblity saved successfully!');
    }

    public function platformUpdate(Request $request)
    {
        if ($request->id) {
            if (Email::where('id', $request->id)->update(['digital_platfirm' => $request->platform])) {
                return redirect()->back()->with('success', 'Updated successfully.');
            }

            return redirect()->back()->with('error', 'Records not found!');
        }

        return redirect()->back()->with('error', 'Error Occured! Please try again later.');
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        //
    }

    /**
     * Display the specified resource.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        $email   = Email::find($id);
        $status  = 'bin';
        $message = 'Email has been trashed';

        // If status is already trashed, move to inbox
        if ($email->status == 'bin') {
            $status  = '';
            $message = 'Email has been sent to inbox';
        }

        $email->status = $status;
        $email->update();

        return response()->json(['message' => $message]);
    }

    public function resendMail($id, Request $request)
    {
        $email      = Email::find($id);
        $attachment = [];
        $cm         = new ClientManager();
        $imap       = $cm->make([
            'host'          => env('IMAP_HOST_PURCHASE'),
            'port'          => env('IMAP_PORT_PURCHASE'),
            'encryption'    => env('IMAP_ENCRYPTION_PURCHASE'),
            'validate_cert' => env('IMAP_VALIDATE_CERT_PURCHASE'),
            'username'      => env('IMAP_USERNAME_PURCHASE'),
            'password'      => env('IMAP_PASSWORD_PURCHASE'),
            'protocol'      => env('IMAP_PROTOCOL_PURCHASE'),
        ]);

        $imap->connect();

        $array = is_array(json_decode($email->additional_data, true)) ? json_decode($email->additional_data, true) : [];

        if (array_key_exists('attachment', $array)) {
            $temp = json_decode($email->additional_data, true)['attachment'];
        }
        if (isset($temp)) {
            if (! is_array($temp)) {
                $attachment[] = $temp;
            } else {
                $attachment = $temp;
            }
        }
        $customConfig = [
            'from' => $email->from,
        ];

        $emailsLog = \App\Email::create([
            'model_id'         => $email->id,
            'model_type'       => \App\Email::class,
            'type'             => $email->type,
            'from'             => $email->from,
            'to'               => $email->to,
            'subject'          => $email->subject,
            'message'          => $email->message,
            'template'         => 'resend-email',
            'additional_data'  => '',
            'status'           => 'pre-send',
            'store_website_id' => null,
            'is_draft'         => 1,
        ]);
        \App\EmailLog::create([
            'email_id'  => $email->id,
            'email_log' => 'Email resend initiated',
            'message'   => $email->to,
        ]);
        Mail::to($email->to)->send(new PurchaseEmail($email->subject, $email->message, $attachment));
        if ($type == 'approve') {
            $email->update(['approve_mail' => 0]);
        }

        return response()->json(['message' => 'Mail resent successfully']);
    }

    /**
     * Provide view for email reply modal
     *
     * @param [type] $id
     *
     * @return view
     */
    public function replyMail($id)
    {
        $email           = Email::find($id);
        $replyCategories = DB::table('reply_categories')->orderBy('name', 'asc')->get();
        $storeWebsites   = \App\StoreWebsite::get();

        $parentCategory = ReplyCategory::where('parent_id', 0)->get();
        $allSubCategory = ReplyCategory::where('parent_id', '!=', 0)->get();
        $category       = $subCategory = [];
        foreach ($allSubCategory as $key => $value) {
            $categoryList = ReplyCategory::where('id', $value->parent_id)->first();
            if ($categoryList->parent_id == 0) {
                $category[$value->id] = $value->name;
            } else {
                $subCategory[$value->id] = $value->name;
            }
        }

        $categories = $category;

        return view('emails.reply-modal', compact('email', 'replyCategories', 'storeWebsites', 'parentCategory', 'subCategory', 'categories'));
    }

    /**
     * Provide view for email reply all modal
     *
     * @param [type] $id
     *
     * @return view
     */
    public function replyAllMail($id)
    {
        $email = Email::find($id);

        return view('emails.reply-all-modal', compact('email'));
    }

    /**
     * Provide view for email forward modal
     *
     * @param [type] $id
     *
     * @return void
     */
    public function forwardMail($id)
    {
        $email = Email::find($id);

        return view('emails.forward-modal', compact('email'));
    }

    /**
     * Handle the email reply
     *
     * @return json
     */
    public function submitReply(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'receiver_email' => 'required',
            'subject'        => 'required',
            'message'        => 'required',
        ]);

        if ($validator->fails()) {
            return response()->json(['success' => false, 'errors' => $validator->errors()->all()]);
        }

        $email       = Email::find($request->reply_email_id);
        $replyPrefix = 'Re: ';
        $subject     = substr($request->subject, 0, 4) === $replyPrefix
            ? $request->subject
            : $replyPrefix . $request->subject;
        $dateCreated       = $email->created_at->format('D, d M Y');
        $timeCreated       = $email->created_at->format('H:i');
        $originalEmailInfo = "On {$dateCreated} at {$timeCreated}, <{$email->from}> wrote:";

        $message_to_store = $originalEmailInfo . '<br/>' . $request->message;
        if ($request->pass_history == 1) {
            $message_to_store = $originalEmailInfo . '<br/>' . $request->message . '<br/>' . $email->message;
        }

        $emailsLog = \App\Email::create([
            'model_id'         => $email->id,
            'model_type'       => \App\Email::class,
            'from'             => $email->from,
            'to'               => $request->receiver_email,
            'subject'          => $subject,
            'message'          => $message_to_store,
            'template'         => 'reply-email',
            'additional_data'  => '',
            'status'           => 'pre-send',
            'store_website_id' => null,
            'is_draft'         => 1,
        ]);

        \App\Jobs\SendEmail::dispatch($emailsLog)->onQueue('send_email');

        return response()->json(['success' => true, 'message' => 'Email has been successfully sent.']);
    }

    /**
     * Handle the email reply
     *
     * @return json
     */
    public function submitReplyAll(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'receiver_email' => 'required',
            'subject'        => 'required',
            'message'        => 'required',
        ]);

        if ($validator->fails()) {
            return response()->json(['success' => false, 'errors' => $validator->errors()->all()]);
        }

        $email       = Email::find($request->reply_email_id);
        $replyPrefix = 'Re: ';
        $subject     = substr($request->subject, 0, 4) === $replyPrefix
            ? $request->subject
            : $replyPrefix . $request->subject;
        $dateCreated       = $email->created_at->format('D, d M Y');
        $timeCreated       = $email->created_at->format('H:i');
        $originalEmailInfo = "On {$dateCreated} at {$timeCreated}, <{$email->to}> wrote:";
        $message_to_store  = $originalEmailInfo . '<br/>' . $request->message . '<br/>' . $email->message;

        $emailAddress = $email->to;
        $emailPattern = '/<([^>]+)>/';
        $matches      = [];
        if (preg_match($emailPattern, $emailAddress, $matches)) {
            $extractedEmail = $matches[1];
            $emailFrom      = $extractedEmail;
        } else {
            $emailFrom = $email->from;
        }

        $emailsLog = \App\Email::create([
            'model_id'         => $email->id,
            'model_type'       => \App\Email::class,
            'from'             => $email->to,
            'to'               => $email->from,
            'subject'          => $subject,
            'message'          => $message_to_store,
            'template'         => 'reply-email',
            'additional_data'  => '',
            'status'           => 'pre-send',
            'store_website_id' => null,
            'is_draft'         => 1,
        ]);

        \App\Jobs\SendEmail::dispatch($emailsLog)->onQueue('send_email');

        return response()->json(['success' => true, 'message' => 'Email has been successfully sent.']);
    }

    /**
     * Handle the email forward
     *
     * @return json
     */
    public function submitForward(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'email' => 'required',
        ]);

        if ($validator->fails()) {
            return response()->json(['success' => false, 'errors' => $validator->errors()->all()]);
        }

        $email = Email::find($request->forward_email_id);

        $emailClass = (new ForwardEmail($email, $email->message))->build();

        $email = \App\Email::create([
            'model_id'         => $email->id,
            'model_type'       => \App\Email::class,
            'from'             => @$emailClass->from[0]['address'],
            'to'               => $request->email,
            'subject'          => $emailClass->subject,
            'message'          => $emailClass->render(),
            'template'         => 'forward-email',
            'additional_data'  => '',
            'status'           => 'pre-send',
            'store_website_id' => null,
            'is_draft'         => 1,
        ]);

        \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');

        return response()->json(['success' => true, 'message' => 'Email has been successfully sent.']);
    }

    public function getRemark(Request $request)
    {
        $email_id = $request->input('email_id');

        $remark = EmailRemark::where('email_id', $email_id)->get();

        return response()->json($remark, 200);
    }

    public function addRemark(Request $request)
    {
        $remark     = $request->input('remark');
        $email_id   = $request->input('id');
        $created_at = date('Y-m-d H:i:s');
        $update_at  = date('Y-m-d H:i:s');

        if (! empty($remark)) {
            $remark_entry = EmailRemark::create([
                'email_id'  => $email_id,
                'remarks'   => $remark,
                'user_name' => Auth::user()->name,
            ]);
        }

        return response()->json(['remark' => $remark], 200);
    }

    public function markAsRead($id)
    {
        $email       = Email::find($id);
        $email->seen = 1;
        $email->update();

        return response()->json(['success' => true, 'message' => 'Email has been read.']);
    }

    public function getAllEmails()
    {
        $available_models = ['supplier' => \App\Supplier::class, 'vendor' => \App\Vendor::class,
            'customer'                  => \App\Customer::class, 'users' => \App\User::class, ];
        $email_list = [];
        foreach ($available_models as $key => $value) {
            $email_list = array_merge($email_list, $value::whereNotNull('email')->pluck('email')->unique()->all());
        }

        return array_values(array_unique($email_list));
    }

    public function category(Request $request)
    {
        $values = ['category_name' => $request->input('category_name'), 'priority' => $request->input('priority'), 'type' => $request->type];
        DB::table('email_category')->insert($values);

        session()->flash('success', 'Category added successfully');

        return redirect('email');
    }

    public function status(Request $request)
    {
        $email_id = $request->input('status');
        $values   = ['email_status' => $request->input('email_status'), 'type' => $request->type];
        DB::table('email_status')->insert($values);

        session()->flash('success', 'Status added successfully');

        return redirect('email');
    }

    public function updateEmail(Request $request)
    {
        $email_id = $request->input('email_id');
        $category = $request->input('category');
        $status   = $request->input('status');

        $email                    = Email::find($email_id);
        $email->status            = $status;
        $email->email_category_id = $category;

        $email->update();

        session()->flash('success', 'Data updated successfully');

        return redirect('email');
    }

    public function getFileStatus(Request $request)
    {
        $id    = $request->id;
        $email = Email::find($id);

        if (isset($email->email_excel_importer)) {
            $status = 'No any update';

            if ($email->email_excel_importer === 3) {
                $status = 'File move on wetransfer';
            } elseif ($email->email_excel_importer === 2) {
                $status = 'Executed but we transfer file not exist';
            } elseif ($email->email_excel_importer === 1) {
                $status = 'Transfer exist';
            }

            return response()->json([
                'status'      => true,
                'mail_status' => $status,
                'message'     => 'Data found',
            ], 200);
        }

        return response()->json([
            'status'  => false,
            'message' => 'Data not found',
        ], 200);
    }

    public function excelImporter(Request $request)
    {
        $id = $request->id;

        $email = Email::find($id);

        $body = $email->message;

        //check for wetransfer link

        preg_match_all('#\bhttps?://[^,\s()<>]+(?:\([\w\d]+\)|([^,[:punct:]\s]|/))#', $body, $match);

        if (isset($match[0])) {
            $matches = $match[0];
            foreach ($matches as $matchLink) {
                if (strpos($matchLink, 'wetransfer.com') !== false || strpos($matchLink, 'we.tl') !== false) {
                    if (strpos($matchLink, 'google.com') === false) {
                        //check if wetransfer already exist
                        $checkIfExist = Wetransfer::where('url', $matchLink)->where('supplier', $request->supplier)->first();
                        if (! $checkIfExist) {
                            $wetransfer               = new Wetransfer();
                            $wetransfer->type         = 'excel';
                            $wetransfer->url          = $matchLink;
                            $wetransfer->is_processed = 1;
                            $wetransfer->supplier     = $request->supplier;
                            $wetransfer->save();

                            Email::where('id', $id)->update(['email_excel_importer' => 3]);

                            try {
                                self::downloadFromURL($matchLink, $request->supplier);
                            } catch (Exception $e) {
                                return response()->json(['message' => 'Something went wrong!'], 422);
                            }
                            //downloading wetransfer and generating data
                        }
                    }
                }
            }
        }

        //getting from attachments

        $attachments = $email->additional_data;
        if ($attachments) {
            $attachJson = json_decode($attachments);
            $attachs    = $attachJson->attachment;

            //getting all attachments
            //check if extension is .xls or xlsx
            foreach ($attachs as $attach) {
                $attach    = str_replace('email-attachments/', '', $attach);
                $extension = last(explode('.', $attach));
                if ($extension == 'xlsx' || $extension == 'xls') {
                    if (class_exists('\\seo2websites\\ErpExcelImporter\\ErpExcelImporter')) {
                        $excel = $request->supplier;
                        ErpExcelImporter::excelFileProcess($attach, $excel, '');
                    }
                } elseif ($extension == 'zip') {
                    if (class_exists('\\seo2websites\\ErpExcelImporter\\ErpExcelImporter')) {
                        $excel             = $request->supplier;
                        $attachments_array = [];
                        $attachments       = ErpExcelImporter::excelZipProcess('', $attach, $excel, '', $attachments_array);
                    }
                }
            }
        }

        return response()->json(['message' => 'Successfully Imported'], 200);
    }

    public static function downloadFromURL($url, $supplier)
    {
        $WETRANSFER_API_URL = 'https://wetransfer.com/api/v4/transfers/';
        $startTime          = date('Y-m-d H:i:s', LARAVEL_START);

        if (strpos($url, 'https://we.tl/') !== false) {
            $ch = curl_init($url);
            curl_setopt($ch, CURLOPT_FOLLOWLOCATION, false);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($ch, CURLOPT_HEADER, true);
            curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (X11; Linux x86_64; rv:21.0) Gecko/20100101 Feirefox/21.0'); // Necessary. The server checks for a valid User-Agent.
            curl_exec($ch);

            $response = curl_exec($ch);
            preg_match_all('/^Location:(.*)$/mi', $response, $matches);
            $httpcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
            LogRequest::log($startTime, $url, 'GET', json_encode([]), json_decode($response), $httpcode, \App\Console\Commands\EmailController::class, 'downloadFromURL');
            curl_close($ch);

            if (isset($matches[1])) {
                if (isset($matches[1][0])) {
                    $url = trim($matches[1][0]);
                }
            }
        }

        //replace https://wetransfer.com/downloads/ from url

        $url = str_replace('https://wetransfer.com/downloads/', '', $url);

        //making array from url

        $dataArray = explode('/', $url);

        if (count($dataArray) == 2) {
            $securityhash = $dataArray[1];
            $transferId   = $dataArray[0];
        } elseif (count($dataArray) == 3) {
            $securityhash = $dataArray[2];
            $recieptId    = $dataArray[1];
            $transferId   = $dataArray[0];
        } else {
            exit('Something is wrong with url');
        }

        //making post request to get the url
        $data                  = [];
        $data['intent']        = 'entire_transfer';
        $data['security_hash'] = $securityhash;

        $curlURL = $WETRANSFER_API_URL . $transferId . '/download';

        $cookie    = 'cookie.txt';
        $url       = 'https://wetransfer.com/';
        $startTime = date('Y-m-d H:i:s', LARAVEL_START);
        $ch        = curl_init();
        curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/32.0.1700.107 Chrome/32.0.1700.107 Safari/537.36');
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_COOKIESESSION, true);
        curl_setopt($ch, CURLOPT_COOKIEJAR, '/tmp/' . $cookie);
        curl_setopt($ch, CURLOPT_COOKIEFILE, '/tmp/' . $cookie);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        $response = curl_exec($ch);
        if (curl_errno($ch)) {
            exit(curl_error($ch));
        }

        $re = '/name="csrf-token" content="([^"]+)"/m';

        preg_match_all($re, $response, $matches, PREG_SET_ORDER, 0);

        if (count($matches) != 0) {
            if (isset($matches[0])) {
                if (isset($matches[0][1])) {
                    $token = $matches[0][1];
                }
            }
        }

        $headers[] = 'Content-Type: application/json';
        $headers[] = 'X-CSRF-Token:' . $token;

        curl_setopt($ch, CURLOPT_URL, $curlURL);
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));

        $real = curl_exec($ch);

        $urlResponse = json_decode($real); //response decode
        $httpcode    = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        $parameters  = [];
        LogRequest::log($startTime, $url, 'GET', json_encode($parameters), $urlResponse, $httpcode, \App\Http\Controllers\EmailController::class, 'downloadFromURL');

        if (isset($urlResponse->direct_link)) {
            $downloadURL = $urlResponse->direct_link;

            $d = explode('?', $downloadURL);

            $fileArray = explode('/', $d[0]);

            $filename = end($fileArray);

            $file = file_get_contents($downloadURL);

            file_put_contents(storage_path('app/files/email-attachments/' . $filename), $file);
            $path = 'email-attachments/' . $filename;

            if (class_exists('\\seo2websites\\ErpExcelImporter\\ErpExcelImporter')) {
                if (strpos($filename, '.zip') !== false) {
                    $attachments = ErpExcelImporter::excelZipProcess($path, $filename, $supplier, '', '');
                }

                if (strpos($filename, '.xls') !== false || strpos($filename, '.xlsx') !== false) {
                    if (class_exists('\\seo2websites\\ErpExcelImporter\\ErpExcelImporter')) {
                        $excel = $supplier;
                        ErpExcelImporter::excelFileProcess($filename, $excel, '');
                    }
                }
            }
        }
    }

    public function bluckAction(Request $request)
    {
        $ids         = $request->ids;
        $status      = $request->status;
        $action_type = $request->action_type;

        if ($action_type == 'delete') {
            session()->flash('success', 'Email has been moved to trash successfully');
            Email::whereIn('id', $ids)->update(['status' => 'bin']);
        } else {
            session()->flash('success', 'Status has been updated successfully');
            Email::whereIn('id', $ids)->update(['status' => $status]);
        }

        return response()->json(['type' => 'success'], 200);
    }

    public function changeStatus(Request $request)
    {
        Email::where('id', $request->email_id)->update(['status' => $request->status_id]);

        $emailStatusHistory = EmailStatusChangeHistory::where('email_id', $request->email_id)->orderBy('id', 'desc')->first();

        $old_status_id = '';
        $old_user_id   = '';

        if (! empty($emailStatusHistory)) {
            $old_status_id = $emailStatusHistory->status_id;
            $old_user_id   = $emailStatusHistory->user_id;
        }

        EmailStatusChangeHistory::create([
            'status_id'     => $request->status_id,
            'user_id'       => \Auth::id(),
            'old_status_id' => $old_status_id,
            'old_user_id'   => $old_user_id,
            'email_id'      => $request->email_id,
        ]);

        session()->flash('success', 'Status has been updated successfully');

        return response()->json(['type' => 'success'], 200);
    }

    public function syncroniseEmail()
    {
        $report = CronJobReport::create([
            'signature'  => 'fetch:all_emails',
            'start_time' => \Carbon\Carbon::now(),
        ]);
        $failedEmailAddresses = [];
        $emailAddresses       = EmailAddress::orderBy('id', 'asc')->get();

        foreach ($emailAddresses as $emailAddress) {
            try {
                $cm   = new ClientManager();
                $imap = $cm->make([
                    'host'          => $emailAddress->host,
                    'port'          => 993,
                    'encryption'    => 'ssl',
                    'validate_cert' => false,
                    'username'      => $emailAddress->username,
                    'password'      => $emailAddress->password,
                    'protocol'      => 'imap',
                ]);

                $imap->connect();

                $types = [
                    'inbox' => [
                        'inbox_name' => 'INBOX',
                        'direction'  => 'from',
                        'type'       => 'incoming',
                    ],
                    'sent' => [
                        'inbox_name' => 'INBOX.Sent',
                        'direction'  => 'to',
                        'type'       => 'outgoing',
                    ],
                ];

                $available_models = [
                    'supplier' => \App\Supplier::class, 'vendor' => \App\Vendor::class,
                    'customer' => \App\Customer::class, 'users' => \App\User::class,
                ];
                $email_list = [];
                foreach ($available_models as $key => $value) {
                    $email_list[$value] = $value::whereNotNull('email')->pluck('id', 'email')->unique()->all();
                }

                foreach ($types as $type) {
                    $inbox = $imap->getFolder($type['inbox_name']);
                    if ($type['type'] == 'incoming') {
                        $latest_email = Email::select('created_at')->where('to', $emailAddress->from_address)->where('type', $type['type'])->latest()->first();
                    } else {
                        $latest_email = Email::select('created_at')->where('from', $emailAddress->from_address)->where('type', $type['type'])->latest()->first();
                    }

                    $latest_email_date = $latest_email ? Carbon::parse($latest_email->created_at) : false;
                    if ($latest_email_date) {
                        $emails = ($inbox) ? $inbox->messages()->where('SINCE', $latest_email_date->subDays(1)->format('d-M-Y')) : '';
                    } else {
                        $emails = ($inbox) ? $inbox->messages() : '';
                    }
                    if ($emails) {
                        $emails = $emails->all()->get();
                        foreach ($emails as $email) {
                            $reference_id = $email->references;
                            //                        dump($reference_id);
                            $origin_id = $email->message_id;

                            // Skip if message is already stored
                            if (Email::where('origin_id', $origin_id)->count() > 0) {
                                continue;
                            }

                            // check if email has already been received

                            if ($email->hasHTMLBody()) {
                                $content = $email->getHTMLBody();
                            } else {
                                $content = $email->getTextBody();
                            }

                            $email_subject = $email->getSubject();
                            \Log::channel('customer')->info('Subject  => ' . $email_subject);

                            $attachments_array = [];
                            $attachments       = $email->getAttachments();
                            $fromThis          = $email->getFrom()[0]->mail;
                            $attachments->each(function ($attachment) use (&$attachments_array, $fromThis, $email_subject) {
                                $attachment->name = preg_replace("/[^a-z0-9\_\-\.]/i", '', $attachment->name);
                                file_put_contents(storage_path('app/files/email-attachments/' . $attachment->name), $attachment->content);
                                $path = 'email-attachments/' . $attachment->name;

                                $attachments_array[] = $path;

                                /*start 3215 attachment fetch from DHL mail */
                                \Log::channel('customer')->info('Match Start  => ' . $email_subject);

                                $findFromEmail = explode('@', $fromThis);
                                if (strpos(strtolower($email_subject), 'your copy invoice') !== false && isset($findFromEmail[1]) && (strtolower($findFromEmail[1]) == 'dhl.com')) {
                                    \Log::channel('customer')->info('Match Found  => ' . $email_subject);
                                    $this->getEmailAttachedFileData($attachment->name);
                                }
                                /*end 3215 attachment fetch from DHL mail */
                            });

                            $from = $email->getFrom()[0]->mail;
                            $to   = array_key_exists(0, $email->getTo()->toArray()) ? $email->getTo()[0]->mail : $email->getReplyTo()[0]->mail;

                            // Model is sender if its incoming else its receiver if outgoing
                            if ($type['type'] == 'incoming') {
                                $model_email = $from;
                            } else {
                                $model_email = $to;
                            }

                            // Get model id and model type

                            extract($this->getModel($model_email, $email_list));

                            $subject = explode('#', $email_subject);
                            if (isset($subject[1]) && ! empty($subject[1])) {
                                $findTicket = \App\Tickets::where('ticket_id', $subject[1])->first();
                                if ($findTicket) {
                                    $model_id   = $findTicket->id;
                                    $model_type = \App\Tickets::class;
                                }
                            }

                            $params = [
                                'model_id'        => $model_id,
                                'model_type'      => $model_type,
                                'origin_id'       => $origin_id,
                                'reference_id'    => $reference_id,
                                'type'            => $type['type'],
                                'seen'            => count($email->getFlags()) > 0 ? $email->getFlags()['seen'] : 0,
                                'from'            => $email->getFrom()[0]->mail,
                                'to'              => array_key_exists(0, $email->getTo()->toArray()) ? $email->getTo()[0]->mail : $email->getReplyTo()[0]->mail,
                                'subject'         => $email->getSubject(),
                                'message'         => $content,
                                'template'        => 'customer-simple',
                                'additional_data' => json_encode(['attachment' => $attachments_array]),
                                'created_at'      => $email->getDate(),
                            ];

                            $emailData = Email::create($params);

                            if ($type['type'] == 'incoming') {
                                $message  = trim($content);
                                $reply    = (new EmailParser())->parse($message);
                                $fragment = current($reply->getFragments());
                                if ($reply) {
                                    $customer = \App\Customer::where('email', $from)->first();
                                    if (! empty($customer)) {
                                        // store the main message
                                        $params = [
                                            'number'      => $customer->phone,
                                            'message'     => $fragment->getContent(),
                                            'media_url'   => null,
                                            'approved'    => 0,
                                            'status'      => 0,
                                            'contact_id'  => null,
                                            'erp_user'    => null,
                                            'supplier_id' => null,
                                            'task_id'     => null,
                                            'dubizzle_id' => null,
                                            'vendor_id'   => null,
                                            'customer_id' => $customer->id,
                                            'is_email'    => 1,
                                            'from_email'  => $email->getFrom()[0]->mail,
                                            'to_email'    => array_key_exists(0, $email->getTo()->toArray()) ? $email->getTo()[0]->mail : $email->getReplyTo()[0]->mail,
                                            'email_id'    => $emailData->id,
                                        ];
                                        $messageModel = \App\ChatMessage::create($params);
                                        \App\Helpers\MessageHelper::whatsAppSend($customer, $fragment->getContent(), null, null, $isEmail = true);
                                        \App\Helpers\MessageHelper::sendwatson($customer, $fragment->getContent(), null, $messageModel, $params, $isEmail = true);

                                        // Code for if auto approve flag is YES then send Bot replay to customer email address account, If No then save email in draft tab.
                                        $replies = \App\ChatbotQuestion::join('chatbot_question_examples', 'chatbot_questions.id', 'chatbot_question_examples.chatbot_question_id')
                                            ->join('chatbot_questions_reply', 'chatbot_questions.id', 'chatbot_questions_reply.chatbot_question_id')
                                            ->where('chatbot_questions_reply.store_website_id', ($customer->store_website_id) ? $customer->store_website_id : 1)
                                            ->select('chatbot_questions.value', 'chatbot_questions.keyword_or_question', 'chatbot_questions.erp_or_watson', 'chatbot_questions.auto_approve', 'chatbot_question_examples.question', 'chatbot_questions_reply.suggested_reply')
                                            ->where('chatbot_questions.erp_or_watson', 'erp')
                                            ->get();

                                        $messages = $fragment->getContent();

                                        foreach ($replies as $reply) {
                                            if ($messages != '' && $customer) {
                                                $keyword = $reply->question;
                                                if (($keyword == $messages || strpos(strtolower(trim($messages)), strtolower(trim($keyword))) !== false) && $reply->suggested_reply) {
                                                    $lastInsertedEmail = Email::where('id', $emailData->id)->first();
                                                    if ($reply->auto_approve == 0) {
                                                        $lastInsertedEmail->is_draft = 1;
                                                        $lastInsertedEmail->save();
                                                    } else {
                                                        $emaildetails = [];

                                                        $emaildetails['id']      = $lastInsertedEmail->id;
                                                        $emaildetails['to']      = $customer->email;
                                                        $emaildetails['subject'] = $lastInsertedEmail->subject;
                                                        $emaildetails['message'] = $reply->suggested_reply;
                                                        $from_address            = '';
                                                        $from_address            = array_key_exists(0, $email->getTo()->toArray()) ? $email->getTo()[0]->mail : $email->getReplyTo()[0]->mail;
                                                        if (empty($from_address)) {
                                                            $from_address = config('env.MAIL_FROM_ADDRESS');
                                                        }
                                                        $emaildetails['from'] = $from_address;

                                                        \App\Jobs\SendEmail::dispatch($lastInsertedEmail, $emaildetails)->onQueue('send_email');

                                                        $createEmail = \App\Email::create([
                                                            'model_id'         => $model_id,
                                                            'model_type'       => $model_type,
                                                            'from'             => $emaildetails['from'],
                                                            'to'               => $emaildetails['to'],
                                                            'subject'          => $emaildetails['subject'],
                                                            'message'          => $reply->suggested_reply,
                                                            'template'         => 'customer-simple',
                                                            'additional_data'  => $model_id,
                                                            'status'           => 'send',
                                                            'store_website_id' => null,
                                                            'is_draft'         => 0,
                                                            'type'             => 'outgoing',
                                                        ]);

                                                        $chatMessage = [
                                                            'number'      => $customer->phone,
                                                            'message'     => $reply->suggested_reply,
                                                            'media_url'   => null,
                                                            'approved'    => 0,
                                                            'status'      => 0,
                                                            'contact_id'  => null,
                                                            'erp_user'    => null,
                                                            'supplier_id' => null,
                                                            'task_id'     => null,
                                                            'dubizzle_id' => null,
                                                            'vendor_id'   => null,
                                                            'customer_id' => $customer->id,
                                                            'is_email'    => 1,
                                                            'from_email'  => $emaildetails['from'],
                                                            'to_email'    => $emaildetails['to'],
                                                            'email_id'    => $createEmail->id,
                                                        ];
                                                        \App\ChatMessage::create($chatMessage);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                $historyParam = [
                    'email_address_id' => $emailAddress->id,
                    'is_success'       => 1,
                ];

                EmailRunHistories::create($historyParam);
                $report->update(['end_time' => Carbon::now()]);
            } catch (Exception $e) {
                $exceptionMessage = $e->getMessage();

                if ($e->getPrevious() !== null) {
                    $previousMessage  = $e->getPrevious()->getMessage();
                    $exceptionMessage = $previousMessage . ' | ' . $exceptionMessage;
                }

                \Log::channel('customer')->info($exceptionMessage);
                $historyParam = [
                    'email_address_id' => $emailAddress->id,
                    'is_success'       => 0,
                    'message'          => $exceptionMessage,
                ];
                EmailRunHistories::create($historyParam);
                \App\CronJob::insertLastError('fetch:all_emails', $exceptionMessage);
                $failedEmailAddresses[] = $emailAddress->username;
            }
        }
        if (! empty($failedEmailAddresses)) {
            session()->flash('danger', 'Some address failed to synchronize.For more details: please check Email Run History for following Email Addresses: ' . implode(', ', $failedEmailAddresses));

            return redirect('/email');
        } else {
            session()->flash('success', 'Emails added successfully');

            return redirect('/email');
        }
    }

    public function getModel($email, $email_list)
    {
        $model_id   = null;
        $model_type = null;

        // Traverse all models
        foreach ($email_list as $key => $value) {
            // If email exists in the DB
            if (isset($value[$email])) {
                $model_id   = $value[$email];
                $model_type = $key;
                break;
            }
        }

        return compact('model_id', 'model_type');
    }

    public function getEmailAttachedFileData($fileName = '')
    {
        $file = fopen(storage_path('app/files/email-attachments/' . $fileName), 'r');

        $skiprowupto           = 1; //skip first line
        $rowincrement          = 1;
        $attachedFileDataArray = [];
        while (($data = fgetcsv($file, 4000, ',')) !== false) {
            if ($rowincrement > $skiprowupto) {
                if (isset($data[0]) && ! empty($data[0])) {
                    try {
                        $due_date              = date('Y-m-d', strtotime($data[9]));
                        $attachedFileDataArray = [
                            'line_type'                       => $data[0],
                            'billing_source'                  => $data[1],
                            'original_invoice_number'         => $data[2],
                            'invoice_number'                  => $data[3],
                            'invoice_identifier'              => $data[5],
                            'invoice_currency'                => $data[69],
                            'invoice_amount'                  => $data[70],
                            'invoice_type'                    => $data[6],
                            'invoice_date'                    => $data[7],
                            'payment_terms'                   => $data[8],
                            'due_date'                        => $due_date,
                            'billing_account'                 => $data[11],
                            'billing_account_name'            => $data[12],
                            'billing_account_name_additional' => $data[13],
                            'billing_address_1'               => $data[14],
                            'billing_postcode'                => $data[17],
                            'billing_city'                    => $data[18],
                            'billing_state_province'          => $data[19],
                            'billing_country_code'            => $data[20],
                            'billing_contact'                 => $data[21],
                            'shipment_number'                 => $data[23],
                            'shipment_date'                   => $data[24],
                            'product'                         => $data[30],
                            'product_name'                    => $data[31],
                            'pieces'                          => $data[32],
                            'origin'                          => $data[33],
                            'orig_name'                       => $data[34],
                            'orig_country_code'               => $data[35],
                            'orig_country_name'               => $data[36],
                            'senders_name'                    => $data[37],
                            'senders_city'                    => $data[42],
                            'created_at'                      => \Carbon\Carbon::now(),
                            'updated_at'                      => \Carbon\Carbon::now(),
                        ];
                        if (! empty($attachedFileDataArray)) {
                            $attachresponse = \App\Waybillinvoice::create($attachedFileDataArray);

                            // check that way bill exist not then create
                            $wayBill = \App\Waybill::where('awb', $attachresponse->shipment_number)->first();
                            if (! $wayBill) {
                                $wayBill      = new \App\Waybill;
                                $wayBill->awb = $attachresponse->shipment_number;

                                $wayBill->from_customer_name      = $data[45];
                                $wayBill->from_city               = $data[42];
                                $wayBill->from_country_code       = $data[44];
                                $wayBill->from_customer_address_1 = $data[38];
                                $wayBill->from_customer_address_2 = $data[39];
                                $wayBill->from_customer_pincode   = $data[41];
                                $wayBill->from_company_name       = $data[39];

                                $wayBill->to_customer_name      = $data[50];
                                $wayBill->to_city               = $data[55];
                                $wayBill->to_country_code       = $data[57];
                                $wayBill->to_customer_phone     = '';
                                $wayBill->to_customer_address_1 = $data[51];
                                $wayBill->to_customer_address_2 = $data[52];
                                $wayBill->to_customer_pincode   = $data[54];
                                $wayBill->to_company_name       = '';

                                $wayBill->actual_weight = $data[68];
                                $wayBill->volume_weight = $data[66];

                                $wayBill->cost_of_shipment = $data[70];
                                $wayBill->package_slip     = $attachresponse->shipment_number;
                                $wayBill->pickup_date      = date('Y-m-d', strtotime($data[24]));
                                $wayBill->save();
                            }

                            $cash_flow = new CashFlow();
                            $cash_flow->fill([
                                'date'                => $attachresponse->due_date ? $attachresponse->due_date : null,
                                'type'                => 'pending',
                                'description'         => 'Waybill invoice details',
                                'cash_flow_able_id'   => $attachresponse->id,
                                'cash_flow_able_type' => \App\Waybillinvoice::class,
                            ])->save();
                        }
                    } catch (Exception $e) {
                        \Log::error('Error from the dhl invoice : ' . $e->getMessage());
                    }
                }
            }
            $rowincrement++;
        }
        fclose($file);
    }

    public function getEmailEvents($emailId)
    {
        $exist     = Email::where('id', $emailId)->first(); //$originId = "9e238becd3bc31addeff3942fc54e340@swift.generated";
        $events    = [];
        $eventData = '';
        if ($exist != null) {
            $events = \App\SendgridEvent::where('email_id', $emailId)->select('timestamp', 'event')->orderBy('id', 'desc')->get();
        }
        foreach ($events as $event) {
            $eventData .= '<tr><td>' . $event['timestamp'] . '</td><td>' . $event['event'] . '</td></tr>';
        }
        if ($eventData == '') {
            $eventData = '<tr><td>No data found.</td></tr>';
        }

        return $eventData;
    }

    public function getAllEmailEvents(Request $request)
    {
        $events = \App\SendgridEvent::select('*');

        if (! empty($request->email)) {
            $events = $events->where('email', 'like', '%' . $request->email . '%');
        }

        if (! empty($request->event)) {
            $events = $events->where('event', 'like', '%' . $request->event . '%');
        }

        $events = $events->orderBy('id', 'desc')->groupBy('sg_message_id')->paginate(30)->appends(request()->except(['page']));

        $event = $request->event ?? '';

        return view('emails.events', compact('events', 'event'));
    }

    public function getAllEmailEventsJourney(Request $request)
    {
        $events = \App\SendgridEvent::select('*');

        if (! empty($request->email)) {
            $events = $events->where('email', 'like', '%' . $request->email . '%');
        }

        if (! empty($sender_email = $request->sender_email)) {
            $events = $events->whereHas('sender', function ($query) use ($sender_email) {
                // Define the condition for filtering the related emails
                $query->where('from', $sender_email);
            });
        }

        if (! empty($request->event)) {
            $events = $events->where('event', 'like', '%' . $request->event . '%');
        }
        $events = $events->orderBy('id', 'desc')->paginate(30)->appends(request()->except(['page']));

        $eventColors = SendgridEventColor::all();

        return view('emails.event_journey', compact('events', 'eventColors'));
    }

    /**
     * Get Email Logs
     *
     * @param mixed $emailid
     */
    public function getEmailLogs($emailid)
    {
        $emailLogs = EmailLog::where('email_id', $emailid)->orderBy('id', 'desc')->get();

        $emailLogData = '';

        foreach ($emailLogs as $emailLog) {
            $colorCode = '';

            if ($emailLog['is_error'] == 1 && $emailLog['service_type'] === 'SMTP') {
                $colorCode = env('EMAIL_LOG_SMTP_ERROR_COLOR_CODE', '#f8eddd');
            }

            if ($emailLog['is_error'] == 1 && $emailLog['service_type'] === 'IMAP') {
                $colorCode = env('EMAIL_LOG_IMAP_ERROR_COLOR_CODE', '#eddddd');
            }

            $emailLogData .= '<tr style="background:' . $colorCode . '"><td>' . $emailLog['created_at'] . '</td><td>' . $emailLog['email_log'] . '</td><td>' . $emailLog['message'] . '</td></tr>';
        }
        if ($emailLogData == '') {
            $emailLogData = '<tr><td>No data found.</td></tr>';
        }

        return $emailLogData;
    }

    /**
     * Update Email Category using Ajax
     */
    public function changeEmailCategory(Request $request)
    {
        Email::where('id', $request->email_id)->update(['email_category_id' => $request->category_id]);

        $emailCategoryHistory = EmailCategoryHistory::where('email_id', $request->email_id)->orderBy('id', 'desc')->first();

        $old_category_id = '';
        $old_user_id     = '';

        if (! empty($emailCategoryHistory)) {
            $old_category_id = $emailCategoryHistory->category_id;
            $old_user_id     = $emailCategoryHistory->user_id;
        }

        EmailCategoryHistory::create([
            'category_id'     => $request->category_id,
            'user_id'         => \Auth::id(),
            'old_category_id' => $old_category_id,
            'old_user_id'     => $old_user_id,
            'email_id'        => $request->email_id,
        ]);

        session()->flash('success', 'Status has been updated successfully');

        return response()->json(['type' => 'success'], 200);
    }

    public function changeEmailStatus(Request $request)
    {
        Email::where('id', $request->status)->update(['status' => $request->status_id]);

        session()->flash('success', 'Status has been updated successfully');

        return response()->json(['type' => 'success'], 200);
    }

    /**
     * To view email in iframe
     */
    public function viewEmailFrame(Request $request)
    {
        $id        = $request->id;
        $emailData = Email::find($id);
        if ($emailData->seen == 1) {
            $emailData->seen = 0;
        } else {
            $emailData->seen = 1;
        }
        $emailData->save();

        return view('emails.frame-view', compact('emailData'));
    }

    public function getEmailFilterOptions(Request $request)
    {
        $user      = Auth::user();
        $admin     = $user->isAdmin();
        $usernames = [];
        if (! $admin) {
            $emaildetails = \App\EmailAssign::select('id', 'email_address_id')->with('emailAddress')->where(['user_id' => $user->id])->get();
            if ($emaildetails) {
                foreach ($emaildetails as $_email) {
                    $usernames[] = $_email->emailAddress->username;
                }
            }
        }

        $senderDropdown = Email::select('from');

        if (count($usernames) > 0) {
            $senderDropdown = $senderDropdown->where(function ($senderDropdown) use ($usernames) {
                foreach ($usernames as $_uname) {
                    $senderDropdown->orWhere('from', 'like', '%' . $_uname . '%');
                }
            });

            $senderDropdown = $senderDropdown->orWhere(function ($senderDropdown) use ($usernames) {
                foreach ($usernames as $_uname) {
                    $senderDropdown->orWhere('to', 'like', '%' . $_uname . '%');
                }
            });
        }
        $senderDropdown = $senderDropdown->distinct()->get()->toArray();

        $receiverDropdown = Email::select('to');

        if (count($usernames) > 0) {
            $receiverDropdown = $receiverDropdown->where(function ($receiverDropdown) use ($usernames) {
                foreach ($usernames as $_uname) {
                    $receiverDropdown->orWhere('from', 'like', '%' . $_uname . '%');
                }
            });

            $receiverDropdown = $receiverDropdown->orWhere(function ($receiverDropdown) use ($usernames) {
                foreach ($usernames as $_uname) {
                    $receiverDropdown->orWhere('to', 'like', '%' . $_uname . '%');
                }
            });
        }

        $receiverDropdown = $receiverDropdown->distinct()->get()->toArray();

        $mailboxDropdown = \App\EmailAddress::pluck('from_address', 'id', 'username');

        $mailboxDropdown = $mailboxDropdown->toArray();

        $response = [
            'senderDropdown'   => $senderDropdown,
            'receiverDropdown' => $receiverDropdown,
            'mailboxDropdown'  => $mailboxDropdown,
        ];

        return $response;
    }

    public function ajaxsearch(Request $request)
    {
        $searchEmail = $request->get('search');
        if (! empty($searchEmail)) {
            $userEmails = Email::where('type', 'incoming')->where('from', 'like', '%' . $searchEmail . '%')->orderBy('created_at', 'desc')->get();
        } else {
            $userEmails = Email::where('type', 'incoming')->orderBy('created_at', 'desc')->limit(5)->get();
        }

        $html = '';
        foreach ($userEmails as $key => $userEmail) {
            $html .= '<tr>
                <td>' . Carbon::parse($userEmail->created_at)->format('d-m-Y H:i:s') . '</td>
                <td>' . substr($userEmail->from, 0, 20) . ' ' . (strlen($userEmail->from) > 20 ? '...' : '') . '</td>
                <td>' . substr($userEmail->to, 0, 15) . ' ' . (strlen($userEmail->to) > 10 ? '...' : '') . '</td>
                <td>' . substr($userEmail->subject, 0, 15) . ' ' . (strlen($userEmail->subject) > 10 ? '...' : '') . '</td>
                <td>' . substr($userEmail->message, 0, 25) . ' ' . (strlen($userEmail->message) > 20 ? '...' : '') . '</td>
                <td> <a href="javascript:;" data-id="' . $userEmail->id . '" data-content="' . $userEmail->message . '" class="menu_editor_copy btn btn-xs p-2" >
                                    <i class="fa fa-copy"></i>
                    </a></td>
            </tr>';
        }

        return $html;
    }

    public function getCategoryMappings(Request $request)
    {
        $term             = $request->term ?? '';
        $sender           = $request->sender ?? '';
        $receiver         = $request->receiver ?? '';
        $status           = $request->status ?? '';
        $category         = $request->category ?? '';
        $mailbox          = $request->mail_box ?? '';
        $email_model_type = $request->email_model_type ?? '';
        $email_box_id     = $request->email_box_id ?? '';

        //where('type', 'incoming')
        $userEmails = Email::where('email_category_id', '>', 0)
            ->orderBy('created_at', 'desc')
            ->groupBy('from');

        if ($term) {
            $userEmails = $userEmails->where(function ($userEmails) use ($term) {
                $userEmails->where('from', 'like', '%' . $term . '%')
                    ->orWhere('to', 'like', '%' . $term . '%')
                    ->orWhere('subject', 'like', '%' . $term . '%')
                    ->orWhere('message', 'like', '%' . $term . '%');
            });
        }

        if ($sender) {
            $sender     = explode(',', $request->sender);
            $userEmails = $userEmails->where(function ($userEmails) use ($sender) {
                $userEmails->whereIn('from', $sender);
            });
        }

        if ($receiver) {
            $receiver   = explode(',', $request->receiver);
            $userEmails = $userEmails->where(function ($userEmails) use ($receiver) {
                $userEmails->whereIn('to', $receiver);
            });
        }

        if ($category) {
            $category   = explode(',', $request->category);
            $userEmails = $userEmails->where(function ($userEmails) use ($category) {
                $userEmails->whereIn('email_category_id', $category);
            });
        }

        if ($email_box_id) {
            $emailBoxIds = explode(',', $email_box_id);

            $userEmails = $userEmails->where(function ($userEmails) use ($emailBoxIds) {
                $userEmails->whereIn('email_box_id', $emailBoxIds);
            });
        }

        $userEmails = $userEmails->paginate(10)->appends(request()->except(['page']));

        //Get All Category
        $email_categories = EmailCategory::all();

        $emailModelTypes = Email::emailModelTypeList();

        $emailBoxes = EmailBox::select('id', 'box_name')->get();

        return view('emails.category.mappings', compact('userEmails', 'email_categories', 'emailModelTypes', 'emailBoxes'))->with('i', ($request->input('page', 1) - 1) * 10);
    }

    // DEVTASK - 23369
    public function assignModel(Request $request)
    {
        $model_type = '';
        $model      = '';
        if ($request->model_name == 'customer') {
            $model_type = "\App\Customer";
            $model      = new \App\Customer;
            $model_name = 'Customer';
        } elseif ($request->model_name == 'vendor') {
            $model_type = "\App\Vendor";
            $model      = new \App\Vendor;
            $model_name = 'Vendor';
        } elseif ($request->model_name == 'supplier') {
            $model_type = "\App\Supplier";
            $model      = new \App\Supplier;
            $model_name = 'Supplier';
        } else {
            $model_type = "\App\User";
            $model      = new \App\User;
            $model_name = 'User';
        }

        $email                   = Email::where('id', $request->email_id)->first();
        $email->is_unknow_module = 0;
        $email->model_type       = $model_name;
        $email->save();

        \Log::info('Assign Model to email : ' . $model_name);

        $userExist = $model::where('email', $email->from)->first();

        if (empty($userExist)) {
            if ($request->model_name == 'supplier') {
                $model::create([
                    'email' => $email->from,
                ]);
            } else {
                $model::create([
                    'name'  => explode('@', $email->from)[0],
                    'email' => $email->from,
                ]);
            }

            return response()->json(['type' => 'success'], 200);
        }
    }

    public function updateModelColor(Request $request)
    {
        foreach ($request->color_name as $key => $value) {
            $model             = ModelColor::where('id', $key)->first();
            $model->color_code = $value;
            $model->save();
        }

        return redirect('/email');
    }

    public function getModelNames(Request $request)
    {
        $modelColors = ModelColor::where('model_name', 'like', '%' . $request->model_name . '%')->get();
        $returnHTML  = view('emails.modelTable')->with('modelColors', $modelColors)->render();

        return response()->json(['html' => $returnHTML, 'type' => 'success'], 200);
    }

    public function getEmailCategoryChangeLogs(Request $request)
    {
        $emailId         = $request->email_id;
        $emailCagoryLogs = EmailCategoryHistory::with(['category', 'oldCategory', 'updatedByUser', 'user'])->where('email_id', $emailId)->get();

        $returnHTML = view('emails.categoryChangeLogs')->with('data', $emailCagoryLogs)->render();

        return response()->json(['html' => $returnHTML, 'type' => 'success'], 200);
    }

    public function getEmailStatusChangeLogs(Request $request)
    {
        $emailId         = $request->email_id;
        $emailCagoryLogs = EmailStatusChangeHistory::with(['status', 'oldstatus', 'updatedByUser', 'user'])->where('email_id', $emailId)->get();

        $returnHTML = view('emails.statusChangeLogs')->with('data', $emailCagoryLogs)->render();

        return response()->json(['html' => $returnHTML, 'type' => 'success'], 200);
    }

    public function getReplyListByCategory(Request $request)
    {
        $replies    = Reply::where('category_id', $request->category_id)->get();
        $returnHTML = view('emails.replyList')->with('data', $replies)->render();

        return response()->json(['html' => $returnHTML, 'type' => 'success'], 200);
    }

    public function getReplyListFromQuickReply(Request $request)
    {
        $storeWebsite     = $request->get('storeWebsiteId');
        $parent_category  = $request->get('parentCategoryId');
        $category_ids     = $request->get('categoryId');
        $sub_category_ids = $request->get('subCategoryId');

        $categoryChildNode = [];

        if ($parent_category) {
            $parentNode = ReplyCategory::select(\DB::raw('group_concat(id) as ids'))->where('id', $parent_category)->where('parent_id', '=', 0)->first();
            if ($parentNode) {
                $subCatChild       = ReplyCategory::whereIn('parent_id', explode(',', $parentNode->ids))->get()->pluck('id')->toArray();
                $categoryChildNode = ReplyCategory::whereIn('parent_id', $subCatChild)->get()->pluck('id')->toArray();
            }
        }

        $replies = \App\ReplyCategory::join('replies', 'reply_categories.id', 'replies.category_id')
            ->leftJoin('store_websites as sw', 'sw.id', 'replies.store_website_id')
            ->where('model', 'Store Website')
            ->select(['replies.*', 'sw.website', 'reply_categories.intent_id', 'reply_categories.name as category_name', 'reply_categories.parent_id', 'reply_categories.id as reply_cat_id']);

        if ($storeWebsite > 0) {
            $replies = $replies->where('replies.store_website_id', $storeWebsite);
        }

        if (! empty($parent_category)) {
            if ($categoryChildNode) {
                $replies = $replies->where(function ($q) use ($categoryChildNode) {
                    $q->orWhereIn('reply_categories.id', $categoryChildNode);
                });
            } else {
                $replies = $replies->where(function ($q) use ($parent_category) {
                    $q->orWhere('reply_categories.id', $parent_category)->where('reply_categories.parent_id', '=', 0);
                });
            }
        }

        if (! empty($category_ids)) {
            $replies = $replies->where(function ($q) use ($category_ids) {
                $q->orWhere('reply_categories.parent_id', $category_ids)->where('reply_categories.parent_id', '!=', 0);
            });
        }

        if (! empty($sub_category_ids)) {
            $replies = $replies->where(function ($q) use ($sub_category_ids) {
                $q->orWhere('reply_categories.id', $sub_category_ids)->where('reply_categories.parent_id', '!=', 0);
            });
        }

        $replies = $replies->get();

        $returnHTML = view('emails.replyList')->with('data', $replies)->render();

        return response()->json(['html' => $returnHTML, 'type' => 'success'], 200);
    }

    public function eventColor(Request $request)
    {
        $eventColors = $request->all();
        $data        = $request->except('_token');
        foreach ($eventColors['color_name'] as $key => $value) {
            $sendgridEventColor        = SendgridEventColor::find($key);
            $sendgridEventColor->color = $value;
            $sendgridEventColor->save();
        }

        return redirect()->back()->with('success', 'The event color updated successfully.');
    }

    public function updateEmailRead(Request $request)
    {
        $email       = Email::findOrFail($request->get('id'));
        $email->seen = 1;
        $email->update();

        return response()->json(['code' => 200, 'data' => $email, 'message' => 'Email Update successfully!!!']);
    }

    public function quickEmailList(Request $request)
    {
        $emails           = new Email();
        $email_categories = EmailCategory::get();

        $senderEmailIds   = Email::select('from')->groupBy('from')->get();
        $receiverEmailIds = Email::select('to')->groupBy('to')->get();
        $modelsTypes      = Email::select('model_type')->groupBy('model_type')->get();
        $mailTypes        = Email::select('type')->groupBy('type')->get();
        $emailStatuses    = Email::select('status')->groupBy('status')->get();

        //Get All Status
        $email_status = EmailStatus::all();

        if (! empty($request->type) && $request->type == 'outgoing') {
            $email_status = $email_status->where('type', 'sent');
        } else {
            $email_status = $email_status->where('type', '!=', 'sent');
        }

        $email_status = $email_status->get();

        if ($request->sender_ids) {
            $emails = $emails->WhereIn('from', $request->sender_ids);
        }
        if ($request->receiver_ids) {
            $emails = $emails->WhereIn('website_id', $request->receiver_ids);
        }
        if ($request->model_types) {
            $emails = $emails->WhereIn('to', $request->model_types);
        }
        if ($request->mail_types) {
            $emails = $emails->WhereIn('type', $request->mail_types);
        }
        if ($request->cat_ids) {
            $emails = $emails->WhereIn('email_category_id', $request->cat_ids);
        }
        if ($request->status) {
            $emails = $emails->WhereIn('status', $request->status);
        }
        if ($request->date) {
            $emails = $emails->where('created_at', 'LIKE', '%' . $request->date . '%');
        }

        $emails = $emails->latest()->paginate(\App\Setting::get('pagination', 25));

        return view('emails.quick-email-list', compact('emails', 'email_categories', 'senderEmailIds', 'receiverEmailIds', 'modelsTypes', 'mailTypes', 'emailStatuses', 'email_status'));
    }

    public function getEmailreplies(Request $request)
    {
        $id           = $request->id;
        $emailReplies = Reply::where('category_id', $id)->orderBy('id', 'ASC')->get();

        return json_encode($emailReplies);
    }

    public function viewEmailFrameInfo(Request $request)
    {
        $id        = $request->id;
        $emailData = Email::find($id);

        $sender_email   = $emailData->to;
        $emailAddresses = EmailAddress::where('from_address', $sender_email)->orderBy('id', 'ASC')->first();

        $emailContent = '';
        if (! empty($emailAddresses)) {
            return view('emails.content-view', compact('emailAddresses'));
        }
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/EmailDataExtractionController.php 
Content: <?php

namespace App\Http\Controllers;

use DB;
use Auth;
use Mail;
use App\Email;
use App\EmailLog;
use App\LogRequest;
use App\Wetransfer;
use App\EmailRemark;
use Illuminate\Http\Request;
use App\DigitalMarketingPlatform;
use App\Mails\Manual\ForwardEmail;
use Webklex\PHPIMAP\ClientManager;
use App\Mails\Manual\PurchaseEmail;
use Illuminate\Support\Facades\Validator;
use seo2websites\ErpExcelImporter\ErpExcelImporter;

class EmailDataExtractionController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @param null|mixed $email
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request, $email = null)
    {
        $user      = Auth::user();
        $admin     = $user->isAdmin();
        $usernames = [];
        if (! $admin) {
            $emaildetails = \App\EmailAssign::select('id', 'email_address_id')->with('emailAddress')->where(['user_id' => $user->id])->get();
            if ($emaildetails) {
                foreach ($emaildetails as $_email) {
                    $usernames[] = $_email->emailAddress->username;
                }
            }
        }

        $type = 'incoming';
        $seen = '0';
        $from = '';

        $term     = $request->term ?? '';
        $sender   = $request->sender ?? '';
        $receiver = $request->receiver ?? '';
        $status   = $request->status ?? '';
        $category = $request->category ?? '';
        $mailbox  = $request->mail_box ?? '';

        $date       = $request->date ?? '';
        $type       = $request->type ?? $type;
        $seen       = $request->seen ?? $seen;
        $email_type = $request->email_type ?? '';
        $query      = (new Email())->newQuery();
        if ($email_type) {
            $query = $query->where('template', $email_type);
        } else {
            $query = $query->whereIn('template', ['coupons', 'referr-coupon']);
        }
        $trash_query = false;

        if (count($usernames) > 0) {
            $query = $query->where(function ($query) use ($usernames) {
                foreach ($usernames as $_uname) {
                    $query->orWhere('from', 'like', '%' . $_uname . '%');
                }
            });

            $query = $query->orWhere(function ($query) use ($usernames) {
                foreach ($usernames as $_uname) {
                    $query->orWhere('to', 'like', '%' . $_uname . '%');
                }
            });
        }

        if ($email != '' && $receiver == '') {
            $receiver = $email;
            $from     = 'order_data';
            $seen     = 'both';
            $type     = 'outgoing';
        }

        if ($type == 'bin') {
            $trash_query = true;
            $query       = $query->where('status', 'bin');
        } elseif ($type == 'draft') {
            $query = $query->where('is_draft', 1);
        } elseif ($type == 'pre-send') {
            $query = $query->where('status', 'pre-send');
        } else {
            $query = $query->where(function ($query) use ($type) {
                $query->where('type', $type)->orWhere('type', 'outgoing')->orWhere('type', 'open')->orWhere('type', 'delivered')->orWhere('type', 'processed');
            });
        }

        if ($date) {
            $query = $query->whereDate('created_at', $date);
        }
        if ($term) {
            $query = $query->where(function ($query) use ($term) {
                $query->where('from', 'like', '%' . $term . '%')
                    ->orWhere('to', 'like', '%' . $term . '%')
                    ->orWhere('subject', 'like', '%' . $term . '%')
                    ->orWhere('message', 'like', '%' . $term . '%');
            });
        }

        if (! $term) {
            if ($sender) {
                $query = $query->where(function ($query) use ($sender) {
                    $query->orWhere('from', 'like', '%' . $sender . '%');
                });
            }
            if ($receiver) {
                $query = $query->where(function ($query) use ($receiver) {
                    $query->orWhere('to', 'like', '%' . $receiver . '%');
                });
            }
            if ($status) {
                $query = $query->where(function ($query) use ($status) {
                    $query->orWhere('status', $status);
                });
            }
            if ($category) {
                $query = $query->where(function ($query) use ($category) {
                    $query->orWhere('email_category_id', $category);
                });
            }
        }

        if (! empty($mailbox)) {
            $query = $query->where(function ($query) use ($mailbox) {
                $query->orWhere('to', 'like', '%' . $mailbox . '%');
            });
        }

        if (isset($seen)) {
            if ($seen != 'both') {
                $query = $query->where('seen', $seen);
            }
        }

        // If it isn't trash query remove email with status trashed
        if (! $trash_query) {
            $query = $query->where(function ($query) {
                return $query->where('status', '<>', 'bin')->orWhereNull('status');
            });
        }

        if ($admin == 1) {
            $query  = $query->orderByDesc('created_at');
            $emails = $query->paginate(30)->appends(request()->except(['page']));
        } else {
            if (count($usernames) > 0) {
                $query = $query->where(function ($query) use ($usernames) {
                    foreach ($usernames as $_uname) {
                        $query->orWhere('from', 'like', '%' . $_uname . '%');
                    }
                });

                $query = $query->orWhere(function ($query) use ($usernames) {
                    foreach ($usernames as $_uname) {
                        $query->orWhere('to', 'like', '%' . $_uname . '%');
                    }
                });

                $query  = $query->orderByDesc('created_at');
                $emails = $query->paginate(30)->appends(request()->except(['page']));
            } else {
                $emails = (new Email())->newQuery();
                if ($email_type) {
                    $emails = $emails->where('template', $email_type);
                } else {
                    $emails = $emails->whereIn('template', ['coupons', 'referr-coupon']);
                }
                $emails = $emails->whereNull('id');
                $emails = $emails->paginate(30)->appends(request()->except(['page']));
            }
        }

        //Get All Category
        $email_status = DB::table('email_status')->get();

        //Get All Status
        $email_categories = DB::table('email_category')->get();

        if ($request->ajax()) {
            return response()->json([
                'tbody'  => view('emails.search', compact('emails', 'date', 'term', 'type', 'email_categories', 'email_status'))->with('i', ($request->input('page', 1) - 1) * 5)->render(),
                'links'  => (string) $emails->links(),
                'count'  => $emails->total(),
                'emails' => $emails,
            ], 200);
        }

        // suggested search for email forwarding
        $search_suggestions = $this->getAllEmails();

        $digita_platfirms = DigitalMarketingPlatform::all();
        $sender_drpdwn    = Email::select('from');

        if (count($usernames) > 0) {
            $sender_drpdwn = $sender_drpdwn->where(function ($sender_drpdwn) use ($usernames) {
                foreach ($usernames as $_uname) {
                    $sender_drpdwn->orWhere('from', 'like', '%' . $_uname . '%');
                }
            });

            $sender_drpdwn = $sender_drpdwn->orWhere(function ($sender_drpdwn) use ($usernames) {
                foreach ($usernames as $_uname) {
                    $sender_drpdwn->orWhere('to', 'like', '%' . $_uname . '%');
                }
            });
        }

        $sender_drpdwn = $sender_drpdwn->distinct()->get()->toArray();

        $receiver_drpdwn = Email::select('to');

        if (count($usernames) > 0) {
            $receiver_drpdwn = $receiver_drpdwn->where(function ($receiver_drpdwn) use ($usernames) {
                foreach ($usernames as $_uname) {
                    $receiver_drpdwn->orWhere('from', 'like', '%' . $_uname . '%');
                }
            });

            $receiver_drpdwn = $receiver_drpdwn->orWhere(function ($receiver_drpdwn) use ($usernames) {
                foreach ($usernames as $_uname) {
                    $receiver_drpdwn->orWhere('to', 'like', '%' . $_uname . '%');
                }
            });
        }

        $receiver_drpdwn = $receiver_drpdwn->distinct()->get()->toArray();

        $mailboxdropdown = \App\EmailAddress::pluck('from_address', 'from_name', 'username');

        $mailboxdropdown = $mailboxdropdown->toArray();

        return view('email-data-extraction.index', ['emails' => $emails, 'type' => 'email', 'search_suggestions' => $search_suggestions, 'email_categories' => $email_categories, 'email_status' => $email_status, 'sender_drpdwn' => $sender_drpdwn, 'digita_platfirms' => $digita_platfirms, 'receiver_drpdwn' => $receiver_drpdwn, 'receiver' => $receiver, 'from' => $from, 'mailboxdropdown' => $mailboxdropdown])->with('i', ($request->input('page', 1) - 1) * 5);
    }

    public function platformUpdate(Request $request)
    {
        if ($request->id) {
            if (Email::where('id', $request->id)->update(['digital_platfirm' => $request->platform])) {
                return redirect()->back()->with('success', 'Updated successfully.');
            }

            return redirect()->back()->with('error', 'Records not found!');
        }

        return redirect()->back()->with('error', 'Error Occured! Please try again later.');
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        //
    }

    /**
     * Display the specified resource.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        $email   = Email::find($id);
        $status  = 'bin';
        $message = 'Email has been trashed';

        // If status is already trashed, move to inbox
        if ($email->status == 'bin') {
            $status  = '';
            $message = 'Email has been sent to inbox';
        }

        $email->status = $status;
        $email->update();

        return response()->json(['message' => $message]);
    }

    public function resendMail($id, Request $request)
    {
        $email      = Email::find($id);
        $attachment = [];
        $cm         = new ClientManager();
        $imap       = $cm->make([
            'host'          => env('IMAP_HOST_PURCHASE'),
            'port'          => env('IMAP_PORT_PURCHASE'),
            'encryption'    => env('IMAP_ENCRYPTION_PURCHASE'),
            'validate_cert' => env('IMAP_VALIDATE_CERT_PURCHASE'),
            'username'      => env('IMAP_USERNAME_PURCHASE'),
            'password'      => env('IMAP_PASSWORD_PURCHASE'),
            'protocol'      => env('IMAP_PROTOCOL_PURCHASE'),
        ]);

        $imap->connect();

        $array = is_array(json_decode($email->additional_data, true)) ? json_decode($email->additional_data, true) : [];

        if (array_key_exists('attachment', $array)) {
            $temp = json_decode($email->additional_data, true)['attachment'];
        }
        if (isset($temp)) {
            if (! is_array($temp)) {
                $attachment[] = $temp;
            } else {
                $attachment = $temp;
            }
        }
        $customConfig = [
            'from' => $email->from,
        ];

        $emailsLog = \App\Email::create([
            'model_id'         => $email->id,
            'model_type'       => \App\Email::class,
            'type'             => $email->type,
            'from'             => $email->from,
            'to'               => $email->to,
            'subject'          => $email->subject,
            'message'          => $email->message,
            'template'         => 'resend-email',
            'additional_data'  => '',
            'status'           => 'pre-send',
            'store_website_id' => null,
            'is_draft'         => 1,
        ]);

        Mail::to($email->to)->send(new PurchaseEmail($email->subject, $email->message, $attachment));
        if ($type == 'approve') {
            $email->update(['approve_mail' => 0]);
        }

        return response()->json(['message' => 'Mail resent successfully']);
    }

    /**
     * Provide view for email reply modal
     *
     * @param [type] $id
     *
     * @return view
     */
    public function replyMail($id)
    {
        $email = Email::find($id);

        return view('emails.reply-modal', compact('email'));
    }

    /**
     * Provide view for email forward modal
     *
     * @param [type] $id
     *
     * @return void
     */
    public function forwardMail($id)
    {
        $email = Email::find($id);

        return view('emails.forward-modal', compact('email'));
    }

    /**
     * Handle the email reply
     *
     * @return json
     */
    public function submitReply(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'message' => 'required',
        ]);

        if ($validator->fails()) {
            return response()->json(['success' => false, 'errors' => $validator->errors()->all()]);
        }

        $email       = Email::find($request->reply_email_id);
        $replyPrefix = 'Re: ';
        $subject     = substr($email->subject, 0, 4) === $replyPrefix
            ? $email->subject
            : $replyPrefix . $email->subject;
        $dateCreated       = $email->created_at->format('D, d M Y');
        $timeCreated       = $email->created_at->format('H:i');
        $originalEmailInfo = "On {$dateCreated} at {$timeCreated}, <{$email->from}> wrote:";
        $message_to_store  = $originalEmailInfo . '<br/>' . $request->message . '<br/>' . $email->message;
        $emailsLog         = \App\Email::create([
            'model_id'         => $email->id,
            'model_type'       => \App\Email::class,
            'from'             => $email->from,
            'to'               => $email->to,
            'subject'          => $subject,
            'message'          => $message_to_store,
            'template'         => 'reply-email',
            'additional_data'  => '',
            'status'           => 'pre-send',
            'store_website_id' => null,
            'is_draft'         => 1,
        ]);
        \App\Jobs\SendEmail::dispatch($emailsLog)->onQueue('send_email');

        return response()->json(['success' => true, 'message' => 'Email has been successfully sent.']);
    }

    /**
     * Handle the email forward
     *
     * @return json
     */
    public function submitForward(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'email' => 'required',
        ]);

        if ($validator->fails()) {
            return response()->json(['success' => false, 'errors' => $validator->errors()->all()]);
        }

        $email = Email::find($request->forward_email_id);

        $emailClass = (new ForwardEmail($email, $email->message))->build();

        $email = \App\Email::create([
            'model_id'         => $email->id,
            'model_type'       => \App\Email::class,
            'from'             => @$emailClass->from[0]['address'],
            'to'               => $request->email,
            'subject'          => $emailClass->subject,
            'message'          => $emailClass->render(),
            'template'         => 'forward-email',
            'additional_data'  => '',
            'status'           => 'pre-send',
            'store_website_id' => null,
            'is_draft'         => 1,
        ]);

        \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');

        return response()->json(['success' => true, 'message' => 'Email has been successfully sent.']);
    }

    public function getRemark(Request $request)
    {
        $email_id = $request->input('email_id');

        $remark = EmailRemark::where('email_id', $email_id)->get();

        return response()->json($remark, 200);
    }

    public function addRemark(Request $request)
    {
        $remark     = $request->input('remark');
        $email_id   = $request->input('id');
        $created_at = date('Y-m-d H:i:s');
        $update_at  = date('Y-m-d H:i:s');

        if (! empty($remark)) {
            $remark_entry = EmailRemark::create([
                'email_id'  => $email_id,
                'remarks'   => $remark,
                'user_name' => Auth::user()->name,
            ]);
        }

        return response()->json(['remark' => $remark], 200);
    }

    public function markAsRead($id)
    {
        $email       = Email::find($id);
        $email->seen = 1;
        $email->update();

        return response()->json(['success' => true, 'message' => 'Email has been read.']);
    }

    public function getAllEmails()
    {
        $email_list = [];

        return array_values(array_unique($email_list));
    }

    public function updateEmail(Request $request)
    {
        $email_id = $request->input('email_id');
        $category = $request->input('category');
        $status   = $request->input('status');

        $email                    = Email::find($email_id);
        $email->status            = $status;
        $email->email_category_id = $category;

        $email->update();

        session()->flash('success', 'Data updated successfully');

        return redirect('email');
    }

    public function getFileStatus(Request $request)
    {
        $id    = $request->id;
        $email = Email::find($id);

        if (isset($email->email_excel_importer)) {
            $status = 'No any update';

            if ($email->email_excel_importer === 3) {
                $status = 'File move on wetransfer';
            } elseif ($email->email_excel_importer === 2) {
                $status = 'Executed but we transfer file not exist';
            } elseif ($email->email_excel_importer === 1) {
                $status = 'Transfer exist';
            }

            return response()->json([
                'status'      => true,
                'mail_status' => $status,
                'message'     => 'Data found',
            ], 200);
        }

        return response()->json([
            'status'  => false,
            'message' => 'Data not found',
        ], 200);
    }

    public function excelImporter(Request $request)
    {
        $id = $request->id;

        $email = Email::find($id);

        $body = $email->message;

        //check for wetransfer link

        preg_match_all('#\bhttps?://[^,\s()<>]+(?:\([\w\d]+\)|([^,[:punct:]\s]|/))#', $body, $match);

        if (isset($match[0])) {
            $matches = $match[0];
            foreach ($matches as $matchLink) {
                if (strpos($matchLink, 'wetransfer.com') !== false || strpos($matchLink, 'we.tl') !== false) {
                    if (strpos($matchLink, 'google.com') === false) {
                        //check if wetransfer already exist
                        $checkIfExist = Wetransfer::where('url', $matchLink)->where('supplier', $request->supplier)->first();
                        if (! $checkIfExist) {
                            $wetransfer               = new Wetransfer();
                            $wetransfer->type         = 'excel';
                            $wetransfer->url          = $matchLink;
                            $wetransfer->is_processed = 1;
                            $wetransfer->supplier     = $request->supplier;
                            $wetransfer->save();

                            Email::where('id', $id)->update(['email_excel_importer' => 3]);

                            try {
                                self::downloadFromURL($matchLink, $request->supplier);
                            } catch (Exception $e) {
                                return response()->json(['message' => 'Something went wrong!'], 422);
                            }
                            //downloading wetransfer and generating data
                        }
                    }
                }
            }
        }

        //getting from attachments

        $attachments = $email->additional_data;
        if ($attachments) {
            $attachJson = json_decode($attachments);
            $attachs    = $attachJson->attachment;

            //getting all attachments
            //check if extension is .xls or xlsx
            foreach ($attachs as $attach) {
                $attach    = str_replace('email-attachments/', '', $attach);
                $extension = last(explode('.', $attach));
                if ($extension == 'xlsx' || $extension == 'xls') {
                    if (class_exists('\\seo2websites\\ErpExcelImporter\\ErpExcelImporter')) {
                        $excel = $request->supplier;
                        ErpExcelImporter::excelFileProcess($attach, $excel, '');
                    }
                } elseif ($extension == 'zip') {
                    if (class_exists('\\seo2websites\\ErpExcelImporter\\ErpExcelImporter')) {
                        $excel             = $request->supplier;
                        $attachments_array = [];
                        $attachments       = ErpExcelImporter::excelZipProcess('', $attach, $excel, '', $attachments_array);
                    }
                }
            }
        }

        return response()->json(['message' => 'Successfully Imported'], 200);
    }

    public static function downloadFromURL($url, $supplier)
    {
        $WETRANSFER_API_URL = 'https://wetransfer.com/api/v4/transfers/';
        $startTime          = date('Y-m-d H:i:s', LARAVEL_START);

        if (strpos($url, 'https://we.tl/') !== false) {
            $ch = curl_init($url);
            curl_setopt($ch, CURLOPT_FOLLOWLOCATION, false);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($ch, CURLOPT_HEADER, true);
            curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (X11; Linux x86_64; rv:21.0) Gecko/20100101 Feirefox/21.0'); // Necessary. The server checks for a valid User-Agent.
            curl_exec($ch);

            $response = curl_exec($ch);
            preg_match_all('/^Location:(.*)$/mi', $response, $matches);
            $httpcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
            LogRequest::log($startTime, $url, 'GET', json_encode([]), json_decode($response), $httpcode, \App\Console\Commands\EmailDataExtractionController::class, 'downloadFromURL');
            curl_close($ch);

            if (isset($matches[1])) {
                if (isset($matches[1][0])) {
                    $url = trim($matches[1][0]);
                }
            }
        }

        //replace https://wetransfer.com/downloads/ from url

        $url = str_replace('https://wetransfer.com/downloads/', '', $url);

        //making array from url

        $dataArray = explode('/', $url);

        if (count($dataArray) == 2) {
            $securityhash = $dataArray[1];
            $transferId   = $dataArray[0];
        } elseif (count($dataArray) == 3) {
            $securityhash = $dataArray[2];
            $recieptId    = $dataArray[1];
            $transferId   = $dataArray[0];
        } else {
            exit('Something is wrong with url');
        }

        //making post request to get the url
        $data                  = [];
        $data['intent']        = 'entire_transfer';
        $data['security_hash'] = $securityhash;

        $curlURL = $WETRANSFER_API_URL . $transferId . '/download';

        $cookie = 'cookie.txt';
        $url    = 'https://wetransfer.com/';
        $ch     = curl_init();
        curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/32.0.1700.107 Chrome/32.0.1700.107 Safari/537.36');
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_COOKIESESSION, true);
        curl_setopt($ch, CURLOPT_COOKIEJAR, '/tmp/' . $cookie);
        curl_setopt($ch, CURLOPT_COOKIEFILE, '/tmp/' . $cookie);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        $response = curl_exec($ch);
        if (curl_errno($ch)) {
            exit(curl_error($ch));
        }

        $re = '/name="csrf-token" content="([^"]+)"/m';

        preg_match_all($re, $response, $matches, PREG_SET_ORDER, 0);

        if (count($matches) != 0) {
            if (isset($matches[0])) {
                if (isset($matches[0][1])) {
                    $token = $matches[0][1];
                }
            }
        }

        $headers[] = 'Content-Type: application/json';
        $headers[] = 'X-CSRF-Token:' . $token;

        curl_setopt($ch, CURLOPT_URL, $curlURL);
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));

        $real = curl_exec($ch);

        $urlResponse = json_decode($real); // respons decode
        $httpcode    = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        LogRequest::log($startTime, $curlURL, 'POST', json_encode([]), $urlResponse, $httpcode, \App\Http\Controllers\EmailDataExtractionController::class, 'downloadFromURL');

        if (isset($urlResponse->direct_link)) {
            $downloadURL = $urlResponse->direct_link;

            $d = explode('?', $downloadURL);

            $fileArray = explode('/', $d[0]);

            $filename = end($fileArray);

            $file = file_get_contents($downloadURL);

            \Storage::put($filename, $file);

            $storagePath = \Storage::disk('local')->getDriver()->getAdapter()->getPathPrefix();

            $path = $storagePath . '/' . $filename;

            $get = \Storage::get($filename);

            if (class_exists('\\seo2websites\\ErpExcelImporter\\ErpExcelImporter')) {
                if (strpos($filename, '.zip') !== false) {
                    $attachments = ErpExcelImporter::excelZipProcess($path, $filename, $supplier, '', '');
                }

                if (strpos($filename, '.xls') !== false || strpos($filename, '.xlsx') !== false) {
                    if (class_exists('\\seo2websites\\ErpExcelImporter\\ErpExcelImporter')) {
                        $excel = $supplier;
                        ErpExcelImporter::excelFileProcess($path, $filename, '');
                    }
                }
            }
        }
    }

    public function bluckAction(Request $request)
    {
        $ids         = $request->ids;
        $status      = $request->status;
        $action_type = $request->action_type;

        if ($action_type == 'delete') {
            session()->flash('success', 'Email has been moved to trash successfully');
            Email::whereIn('id', $ids)->update(['status' => 'bin']);
        } else {
            session()->flash('success', 'Status has been updated successfully');
            Email::whereIn('id', $ids)->update(['status' => $status]);
        }

        return response()->json(['type' => 'success'], 200);
    }

    public function changeStatus(Request $request)
    {
        Email::where('id', $request->email_id)->update(['status' => $request->status_id]);
        session()->flash('success', 'Status has been updated successfully');

        return response()->json(['type' => 'success'], 200);
    }

    public function getModel($email, $email_list)
    {
        $model_id   = null;
        $model_type = null;

        // Traverse all models
        foreach ($email_list as $key => $value) {
            // If email exists in the DB
            if (isset($value[$email])) {
                $model_id   = $value[$email];
                $model_type = $key;
                break;
            }
        }

        return compact('model_id', 'model_type');
    }

    public function getEmailAttachedFileData($fileName = '')
    {
        $file = fopen(storage_path('app/files/email-attachments/' . $fileName), 'r');

        $skiprowupto           = 1; //skip first line
        $rowincrement          = 1;
        $attachedFileDataArray = [];
        while (($data = fgetcsv($file, 4000, ',')) !== false) {
            if ($rowincrement > $skiprowupto) {
                if (isset($data[0]) && ! empty($data[0])) {
                    try {
                        $due_date              = date('Y-m-d', strtotime($data[9]));
                        $attachedFileDataArray = [
                            'line_type'                       => $data[0],
                            'billing_source'                  => $data[1],
                            'original_invoice_number'         => $data[2],
                            'invoice_number'                  => $data[3],
                            'invoice_identifier'              => $data[5],
                            'invoice_currency'                => $data[69],
                            'invoice_amount'                  => $data[70],
                            'invoice_type'                    => $data[6],
                            'invoice_date'                    => $data[7],
                            'payment_terms'                   => $data[8],
                            'due_date'                        => $due_date,
                            'billing_account'                 => $data[11],
                            'billing_account_name'            => $data[12],
                            'billing_account_name_additional' => $data[13],
                            'billing_address_1'               => $data[14],
                            'billing_postcode'                => $data[17],
                            'billing_city'                    => $data[18],
                            'billing_state_province'          => $data[19],
                            'billing_country_code'            => $data[20],
                            'billing_contact'                 => $data[21],
                            'shipment_number'                 => $data[23],
                            'shipment_date'                   => $data[24],
                            'product'                         => $data[30],
                            'product_name'                    => $data[31],
                            'pieces'                          => $data[32],
                            'origin'                          => $data[33],
                            'orig_name'                       => $data[34],
                            'orig_country_code'               => $data[35],
                            'orig_country_name'               => $data[36],
                            'senders_name'                    => $data[37],
                            'senders_city'                    => $data[42],
                            'created_at'                      => \Carbon\Carbon::now(),
                            'updated_at'                      => \Carbon\Carbon::now(),
                        ];
                        if (! empty($attachedFileDataArray)) {
                            $attachresponse = \App\Waybillinvoice::create($attachedFileDataArray);

                            // check that way bill exist not then create
                            $wayBill = \App\Waybill::where('awb', $attachresponse->shipment_number)->first();
                            if (! $wayBill) {
                                $wayBill      = new \App\Waybill;
                                $wayBill->awb = $attachresponse->shipment_number;

                                $wayBill->from_customer_name      = $data[45];
                                $wayBill->from_city               = $data[42];
                                $wayBill->from_country_code       = $data[44];
                                $wayBill->from_customer_address_1 = $data[38];
                                $wayBill->from_customer_address_2 = $data[39];
                                $wayBill->from_customer_pincode   = $data[41];
                                $wayBill->from_company_name       = $data[39];

                                $wayBill->to_customer_name      = $data[50];
                                $wayBill->to_city               = $data[55];
                                $wayBill->to_country_code       = $data[57];
                                $wayBill->to_customer_phone     = '';
                                $wayBill->to_customer_address_1 = $data[51];
                                $wayBill->to_customer_address_2 = $data[52];
                                $wayBill->to_customer_pincode   = $data[54];
                                $wayBill->to_company_name       = '';

                                $wayBill->actual_weight = $data[68];
                                $wayBill->volume_weight = $data[66];

                                $wayBill->cost_of_shipment = $data[70];
                                $wayBill->package_slip     = $attachresponse->shipment_number;
                                $wayBill->pickup_date      = date('Y-m-d', strtotime($data[24]));
                                $wayBill->save();
                            }

                            $cash_flow = new CashFlow();
                            $cash_flow->fill([
                                'date'                => $attachresponse->due_date ? $attachresponse->due_date : null,
                                'type'                => 'pending',
                                'description'         => 'Waybill invoice details',
                                'cash_flow_able_id'   => $attachresponse->id,
                                'cash_flow_able_type' => \App\Waybillinvoice::class,
                            ])->save();
                        }
                    } catch (Exception $e) {
                        \Log::error('Error from the dhl invoice : ' . $e->getMessage());
                    }
                }
            }
            $rowincrement++;
        }
        fclose($file);
    }

    public function getEmailEvents($originId)
    {
        $exist     = Email::where('origin_id', $originId)->first(); //$originId = "9e238becd3bc31addeff3942fc54e340@swift.generated";
        $events    = [];
        $eventData = '';
        if ($exist != null) {
            $events = \App\SendgridEvent::where('payload', 'like', '%"smtp-id":"<' . $originId . '>"%')->select('timestamp', 'event')->orderBy('id', 'desc')->get();
        }
        foreach ($events as $event) {
            $eventData .= '<tr><td>' . $event['timestamp'] . '</td><td>' . $event['event'] . '</td></tr>';
        }
        if ($eventData == '') {
            $eventData = '<tr><td>No data found.</td></tr>';
        }

        return $eventData;
    }

    /**
     * Get Email Logs
     *
     * @param mixed $emailid
     */
    public function getEmailLogs($emailid)
    {
        $emailLogs = EmailLog::where('email_id', $emailid)->orderBy('id', 'desc')->get();

        $emailLogData = '';

        foreach ($emailLogs as $emailLog) {
            $emailLogData .= '<tr><td>' . $emailLog['created_at'] . '</td><td>' . $emailLog['email_log'] . '</td><td>' . $emailLog['message'] . '</td></tr>';
        }
        if ($emailLogData == '') {
            $emailLogData = '<tr><td>No data found.</td></tr>';
        }

        return $emailLogData;
    }

    /**
     * Update Email Category using Ajax
     */
    public function changeEmailCategory(Request $request)
    {
        Email::where('id', $request->email_id)->update(['email_category_id' => $request->category_id]);
        session()->flash('success', 'Status has been updated successfully');

        return response()->json(['type' => 'success'], 200);
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/GoogleSearchImageController.php 
Content: <?php

namespace App\Http\Controllers;

use DB;
use App\Brand;
use App\Product;
use App\Setting;
use App\Category;
use App\LogRequest;
use App\LogGoogleCse;
use App\ScrapeQueues;
use App\GoogleSearchImage;
use Illuminate\Support\Str;
use Illuminate\Http\Request;
use App\Helpers\StatusHelper;
use App\Services\Search\TinEye;
use App\GoogleSearchRelatedImage;
use Illuminate\Support\Facades\Storage;
use seo2websites\GoogleVision\GoogleVisionHelper;
use Plank\Mediable\Facades\MediaUploader as MediaUploader;

class GoogleSearchImageController extends Controller
{
    /**
     * Display a Google Search Image
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request)
    {
        $data         = [];
        $term         = $request->input('term');
        $quickProduct = request('quick_product', ! empty($request->all()) ? false : 'true');
        $request->request->add(['quick_product' => $quickProduct]);
        $data['term'] = $term;

        $productQuery = (new Product())->newQuery()->latest();
        if (isset($request->status_id) && is_array($request->status_id) && count($request->status_id) > 0) {
            $productQuery      = $productQuery->whereIn('status_id', $request->status_id);
            $data['status_id'] = $request->status_id;
        }

        if ($request->brand) {
            if ($request->brand[0] != null) {
                $productQuery  = $productQuery->whereIn('brand', $request->brand);
                $data['brand'] = $request->brand[0];
            }
        }

        if ($request->color) {
            if ($request->color[0] != null) {
                $productQuery  = $productQuery->whereIn('color', $request->color);
                $data['color'] = $request->color[0];
            }
        }

        if (isset($request->category) && $request->category[0] != 1) {
            $is_parent         = Category::isParent($request->category[0]);
            $category_children = [];

            if ($is_parent) {
                $childs = Category::find($request->category[0])->childs()->get();

                foreach ($childs as $child) {
                    $is_parent = Category::isParent($child->id);

                    if ($is_parent) {
                        $children = Category::find($child->id)->childs()->get();

                        foreach ($children as $chili) {
                            array_push($category_children, $chili->id);
                        }
                    } else {
                        array_push($category_children, $child->id);
                    }
                }
            } else {
                array_push($category_children, $request->category[0]);
            }

            $productQuery = $productQuery->whereIn('category', $category_children);

            $data['category'] = $request->category[0];
        }

        if (isset($request->price) && $request->price != null) {
            $exploded = explode(',', $request->price);
            $min      = $exploded[0];
            $max      = $exploded[1];

            if ($min != '0' || $max != '10000000') {
                $productQuery = $productQuery->whereBetween('price_inr_special', [$min, $max]);
            }

            $data['price'][0] = $min;
            $data['price'][1] = $max;
        }

        if ($request->location) {
            if ($request->location[0] != null) {
                $productQuery     = $productQuery->whereIn('location', $request->location);
                $data['location'] = $request->location[0];
            }
        }

        if ($request->no_locations) {
            $productQuery = $productQuery->whereNull('location');
        }

        if (trim($term) != '') {
            $productQuery = $productQuery->where(function ($query) use ($term) {
                $query->orWhere('sku', 'LIKE', "%$term%")
                    ->orWhere('id', 'LIKE', "%$term%");

                if ($term == -1) {
                    $query->orWhere('isApproved', -1);
                }

                if (Brand::where('name', 'LIKE', "%$term%")->first()) {
                    $brand_id = Brand::where('name', 'LIKE', "%$term%")->first()->id;
                    $query->orWhere('brand', 'LIKE', "%$brand_id%");
                }

                if ($category = Category::where('title', 'LIKE', "%$term%")->first()) {
                    $category_id = $category = Category::where('title', 'LIKE', "%$term%")->first()->id;
                    $query->orWhere('category', $category_id);
                }
            });
        }

        $data['quick_product'] = false;
        if ($quickProduct === 'true') {
            $data['quick_product'] = true;
            $productQuery          = $productQuery->where('quick_product', 1);
        }

        $selected_categories = $request->category ? $request->category : 1;

        $data['category_selection'] = Category::attr(['name' => 'category[]', 'class' => 'form-control select-multiple2'])
            ->selected($selected_categories)
            ->renderAsDropdown();

        if ($request->get('shoe_size', false)) {
            $productQuery = $productQuery->where('products.size', 'like', '%' . $request->get('shoe_size') . '%');
        }

        if (! empty($request->quick_sell_groups) && is_array($request->quick_sell_groups)) {
            $productQuery = $productQuery->whereRaw('(id in (select product_id from product_quicksell_groups where quicksell_group_id in (' . implode(',', $request->quick_sell_groups) . ') ))');
        }

        // Get all product IDs
        $productIdsSystem = $productQuery->pluck('id')->toArray();
        $countSystem      = $productQuery->count();

        $data['products'] = $productQuery->join('mediables', function ($query) {
            $query->on('mediables.mediable_id', 'products.id')->where('mediable_type', \App\Product::class);
        })
            ->groupBy('products.id')
            ->paginate(Setting::get('pagination'));

        $data['locations']           = (new \App\ProductLocation())->pluck('name');
        $data['quick_sell_groups']   = \App\QuickSellGroup::select('id', 'name')->orderBy('id', 'desc')->get();
        $data['all_products_system'] = $productIdsSystem;
        $data['count_system']        = $countSystem;

        return view('google_search_image.index', $data);
    }

    public function crop(Request $request)
    {
        $this->validate($request, [
            'product_id' => 'required',
        ]);

        $product_id = $request->get('product_id');
        $product    = Product::where('id', $product_id)->first();
        if ($product) {
            $media = $product->media()->first();

            $data['image'] = '';

            if ($media) {
                $data['image']      = getMediaUrl($media);
                $data['media_id']   = $media->id;
                $data['product_id'] = $product_id;
            }
            if (! empty($data['image'])) {
                return view('google_search_image.crop', $data);
            }
        }

        return redirect()->back()->with('message', 'Image Not found!!');
    }

    public function searchImageOnGoogle(Request $request)
    {
        $this->validate($request, [
            'media_id'   => 'required',
            'product_id' => 'required',
        ]);

        $product_id = $request->get('product_id');
        $product    = Product::where('id', $product_id)->first();
        if ($product) {
            $media = $product->media()->first();

            if ($media) {
                $path = $media->getAbsolutePath();
                $url  = getMediaUrl($media);

                $img         = \Image::make($media->getAbsolutePath());
                $imageWidth  = $img->width();
                $imageHeight = $img->height();
                $width       = $request->get('width', null);
                $height      = $request->get('height', null);
                $x           = $request->get('x', null);
                $y           = $request->get('y', null);
                if ($height != null && $width != null && $x != null && $y != null) {
                    //Checking if width and height are same
                    if ($imageWidth != $width[0] || $imageHeight != $height[0]) {
                        $img->crop($width[0], $height[0], $x[0], $y[0]);

                        if (! is_dir(public_path() . '/tmp_images')) {
                            mkdir(public_path() . '/tmp_images', 0777, true);
                        }
                        $path = public_path() . '/tmp_images/crop_' . $media->getBasenameAttribute();
                        $url  = '/tmp_images/crop_' . $media->getBasenameAttribute();
                        $img->save($path);
                    }
                }
            }
        }

        if ($path) {
            // Set empty array for product image
            $productImage = [];

            // Try TinEye
            $tinEye  = new TinEye();
            $results = $tinEye->searchByImage($path, true);

            // Does TinEye have results? Otherwise try Google Vision
            if (isset($results['pages']) && count($results['pages']) > 0) {
                $productImage[$url] = $results;

                // Get SKU from brands
                if (isset($productImage[$url]['pages_media']) && count($productImage[$url]['pages_media']) > 0) {
                }
            } else {
                $productImage[$url] = GoogleVisionHelper::getImageDetails($path);
            }

            // Get product
            $product       = Product::where('id', $product_id)->first();
            $img_url_array = [];

            foreach ($productImage as $key => $z) {
                if ($z) {
                    $file      = asset($key);
                    $file_name = Str::random(10) . rand(1000, 9999) . Str::random(4) . '.jpg';
                    $status    = Storage::disk('s3')->put('search_crop_images/' . $file_name, file_get_contents($file));

                    $search_img             = new GoogleSearchImage;
                    $search_img->user_id    = \Auth::id();
                    $search_img->product_id = $product_id;
                    $search_img->crop_image = 'search_crop_images/' . $file_name;
                    $search_img->save();

                    for ($i = 0; $i < count($z['pages']); $i++) {
                        $google_img                         = new GoogleSearchRelatedImage;
                        $google_img->google_search_image_id = $search_img->id;
                        $google_img->google_image           = $z['pages_media'][$i];
                        $google_img->image_url              = $z['pages'][$i];
                        $google_img->save();
                    }
                } else {
                    return response()->json(['status' => false, 'message' => 'Image Not Found']);
                }
            }

            return response()->json(['status' => true, 'message' => 'Search Successfully']);

        // Return view
        } else {
            return response()->json(['status' => false, 'message' => 'Please Select Products']);
        }

        abort(403, 'Sorry , it looks like there is no result from the request.');
    }

    public function details(Request $request)
    {
        $url          = $request->get('url');
        $product_id   = $request->get('product_id');
        $productImage = [];
        if (! empty($url)) {
            $productImage[$url] = GoogleVisionHelper::getImageDetails($url);
            if (! empty($productImage)) {
                $product = Product::where('id', $product_id)->first();

                return view('google_search_image.details', compact(['productImage', 'product_id', 'product']));
            }
        }

        abort(403, 'Sorry , it looks like there is no result from the request.');
    }

    public function product(Request $request)
    {
        if ($request->isMethod('post')) {
            $images    = $request->post('images', []);
            $productId = $request->post('product_id', 0);

            $product = \App\Product::where('id', $productId)->first();

            if ($product) {
                $imagesSave = false;
                if (! empty($images)) {
                    foreach ($images as $image) {
                        $file = @file_get_contents($image);
                        if (! empty($file)) {
                            $media = MediaUploader::fromString($file)
                                ->toDirectory('product' . DIRECTORY_SEPARATOR . floor($product->id / config('constants.image_per_folder')))
                                ->useFilename(md5(date('Y-m-d H:i:s')))
                                ->upload();
                            $product->attachMedia($media, config('constants.media_tags'));
                            $imagesSave = true;
                        }
                    }
                }

                $product->status_id = 22;
                if ($imagesSave) {
                    StatusHelper::updateStatus($product, StatusHelper::$pendingVerificationGoogleTextSearch);
                    $product->status_id = StatusHelper::$pendingVerificationGoogleTextSearch;
                }

                $product->save();
            }
        }

        $revise = $request->get('revise', 0);

        $products = \App\Product::where('products.stock', '>', 0);

        if ($revise == 1) {
            $products->where('status_id', StatusHelper::$manualImageUpload);
        } else {
            $products->where('status_id', StatusHelper::$unableToScrapeImages);
        }

        if ($request->has('supplier')) {
            $products = $products->join('product_suppliers as ps', 'ps.product_id', 'products.id');
            $products = $products->where('ps.supplier_id', $request->get('supplier'));
        }

        $productCount = $products->count();

        $product = $products->select(['products.*'])->orderBy('products.id', 'desc')->first();

        $supplierList = \App\Product::where('status_id', '14')
            ->where('products.stock', '>', 0)
            ->join('product_suppliers as ps', 'ps.product_id', 'products.id')
            ->join('suppliers as s', 's.id', 'ps.supplier_id')
            ->groupBy('s.id')
            ->select([\DB::raw('count(*) as supplier_count'), 's.supplier', 's.id'])
            ->get()->toArray();

        $skippedSuppliers = \App\Product::where('status_id', '22')
            ->where('products.stock', '>', 0)
            ->join('product_suppliers as ps', 'ps.product_id', 'products.id')
            ->join('suppliers as s', 's.id', 'ps.supplier_id')
            ->groupBy('s.id')
            ->select([\DB::raw('count(*) as supplier_count'), 's.supplier', 's.id'])
            ->get()->toArray();

        return view('google_search_image.product', compact(['product', 'productCount', 'supplierList', 'skippedSuppliers']));
    }

    public function queue(Request $request)
    {
        // Update product status
        $product = Product::findOrFail($request->product_id);

        // Update product
        $product->status_id = StatusHelper::$queuedForGoogleImageSearch;
        $product->save();

        // Create queue item
        $scrapeQueue             = new ScrapeQueues();
        $scrapeQueue->product_id = (int) $request->product_id;
        $scrapeQueue->url        = $request->url;
        $scrapeQueue->save();

        return redirect('/google-search-image')->with('message', 'Product is queued');
    }

    public function getImageForMultipleProduct(Request $request)
    {
        $product            = Product::findOrFail($request->id);
        $product->status_id = StatusHelper::$isBeingScrapedWithGoogleImageSearch;
        $product->save();

        $media = $product->media()->first();

        if ($media) {
            $count = 0;
            $urls  = GoogleVisionHelper::getImageDetails(getMediaUrl($media));

            if (isset($urls['pages'])) {
                foreach ($urls['pages'] as $url) {
                    if (stristr($url, '.gucci.') || stristr($url, '.farfetch.')) {
                        // Create queue item
                        $scrapeQueue             = new ScrapeQueues();
                        $scrapeQueue->product_id = (int) $product->id;
                        $scrapeQueue->url        = $url;
                        $scrapeQueue->save();
                        $count++;
                        break;
                    }
                }
            }
            if ($count == 0) {
                $product->status_id = StatusHelper::$googleImageSearchFailed;
                $product->save();
            } else {
                StatusHelper::updateStatus($product, StatusHelper::$queuedForGoogleImageSearch);
            }
        }

        return response()->json(['success' => 'true'], 200);
    }

    public function cropImageSequence(Request $request)
    {
        $id       = $request->id;
        $sequence = $request->sequence;

        //Updating Product Sequence
        $product = Product::findOrFail($id);

        //Getting Product Media
        $media = $product->media()->first();

        if ($media) {
            $url = getMediaUrl($media);

            $img         = \Image::make($media->getAbsolutePath());
            $imageWidth  = $img->width();
            $imageHeight = $img->height();
            if ($sequence == 8) {
                $newWidth  = (int) ($imageWidth / 4);
                $newHeight = (int) ($imageHeight / 2);

                $count     = 0;
                $axisCount = 0;
                for ($i = 0; $i < $sequence; $i++) {
                    $img = \Image::make($media->getAbsolutePath());
                    if ($count < 4) {
                        $x = $newWidth * $i;
                        $y = 0;
                        $img->crop($newWidth, $newHeight, $x, $y);

                        if (! is_dir(public_path() . '/tmp_images')) {
                            mkdir(public_path() . '/tmp_images', 0777, true);
                        }
                        $path = public_path() . '/tmp_images/crop_' . $i . $media->getBasenameAttribute();
                        $url  = '/tmp_images/crop_' . $i . $media->getBasenameAttribute();
                        $img->save($path);

                        //Product save
                        $newProduct                    = new Product;
                        $newProduct->name              = $product->name;
                        $newProduct->sku               = '-' . $product->sku;
                        $newProduct->size              = $product->size;
                        $newProduct->brand             = $product->brand;
                        $newProduct->color             = $product->color;
                        $newProduct->supplier          = $product->supplier;
                        $newProduct->price             = $product->price;
                        $newProduct->quick_product     = 1;
                        $newProduct->price_inr         = $product->price_inr;
                        $newProduct->price_inr_special = $product->price_inr_special;
                        $newProduct->save();
                        //Attach Media To Post
                        $newMedia = MediaUploader::fromSource($path)
                            ->toDirectory('product/' . floor($newProduct->id / config('constants.image_per_folder')))
                            ->upload();
                        $newProduct->attachMedia($newMedia, config('constants.media_tags'));

                        //Updating New Product Status
                        $newProduct->status_id = StatusHelper::$isBeingScrapedWithGoogleImageSearch;
                        $newProduct->save();

                        //Process Image For Google Search
                        $newUrls = GoogleVisionHelper::getImageDetails(getMediaUrl($newMedia));

                        $mediaUrlCount = 0;
                        if (isset($urls['pages'])) {
                            foreach ($urls['pages'] as $url) {
                                if (stristr($url, '.gucci.') || stristr($url, '.farfetch.')) {
                                    // Create queue item
                                    $scrapeQueue             = new ScrapeQueues();
                                    $scrapeQueue->product_id = (int) $newProduct->id;
                                    $scrapeQueue->url        = $url;
                                    $scrapeQueue->save();
                                    $mediaUrlCount++;
                                    break;
                                }
                            }
                        }
                        //If Page Is Not Found
                        if ($mediaUrlCount == 0) {
                            $newProduct->status_id = StatusHelper::$googleImageSearchFailed;
                            $newProduct->save();
                        } else {
                            StatusHelper::updateStatus($newProduct, StatusHelper::$queuedForGoogleImageSearch);
                        }
                        $count++;
                    } else {
                        $x = $newWidth * $axisCount;
                        $y = $newHeight;
                        $img->crop($newWidth, $newHeight, $x, $y);

                        if (! is_dir(public_path() . '/tmp_images')) {
                            mkdir(public_path() . '/tmp_images', 0777, true);
                        }
                        $path = public_path() . '/tmp_images/crop_' . $i . $media->getBasenameAttribute();
                        $url  = '/tmp_images/crop_' . $i . $media->getBasenameAttribute();
                        $img->save($path);

                        //Product save
                        $newProduct                    = new Product;
                        $newProduct->name              = $product->name;
                        $newProduct->sku               = '-' . $product->sku;
                        $newProduct->size              = $product->size;
                        $newProduct->brand             = $product->brand;
                        $newProduct->color             = $product->color;
                        $newProduct->supplier          = $product->supplier;
                        $newProduct->price             = $product->price;
                        $newProduct->quick_product     = 1;
                        $newProduct->price_inr         = $product->price_inr;
                        $newProduct->price_inr_special = $product->price_inr_special;
                        $newProduct->save();

                        //Attach Media To Post
                        $newMedia = MediaUploader::fromSource($path)
                            ->toDirectory('product/' . floor($newProduct->id / config('constants.image_per_folder')))
                            ->upload();
                        $newProduct->attachMedia($newMedia, config('constants.media_tags'));

                        //Updating New Product Status
                        $newProduct->status_id = StatusHelper::$isBeingScrapedWithGoogleImageSearch;
                        $newProduct->save();

                        //Process Image For Google Search
                        $newUrls = GoogleVisionHelper::getImageDetails(getMediaUrl($newMedia));

                        $mediaUrlCount = 0;
                        if (isset($urls['pages'])) {
                            foreach ($urls['pages'] as $url) {
                                if (stristr($url, '.gucci.') || stristr($url, '.farfetch.')) {
                                    // Create queue item
                                    $scrapeQueue             = new ScrapeQueues();
                                    $scrapeQueue->product_id = (int) $newProduct->id;
                                    $scrapeQueue->url        = $url;
                                    $scrapeQueue->save();
                                    $mediaUrlCount++;
                                    break;
                                }
                            }
                        }
                        //If Page Is Not Found
                        if ($mediaUrlCount == 0) {
                            $newProduct->status_id = StatusHelper::$googleImageSearchFailed;
                            $newProduct->save();
                        } else {
                            StatusHelper::updateStatus($newProduct, StatusHelper::$queuedForGoogleImageSearch);
                        }

                        $axisCount++;
                    }
                }
                //Delete Old Product
                $product->deleted_at = now();
                $product->save();
            }
        }

        return response()->json(['success' => 'true'], 200);
    }

    public function updateProductStatus(Request $request)
    {
        $id   = $request->id;
        $type = $request->type;

        $product = Product::find($id);

        if ($type == 'approve') {
            $product->status_id = StatusHelper::$AI;
            $product->save();
        } elseif ($type == 'reject') {
            $product->status_id = StatusHelper::$googleImageSearchManuallyRejected;
            $product->save();
        } elseif ($type == 'textapprove') {
            $product->status_id = StatusHelper::$AI;
            $product->save();
        } else {
            $product->status_id = StatusHelper::$googleTextSearchManuallyRejected;
            $product->save();
        }

        return response()->json(['success' => 'true'], 200);
    }

    public function nultipeImageProduct(Request $request)
    {
        $data = [];
        $term = $request->input('term');

        if (request('status_id') != null) {
            $statusId = $request->status_id;
        } else {
            if (empty($request->all()) || isset($request->page)) {
                $statusId = [StatusHelper::$unableToScrapeImages];
            }
        }

        $data['term'] = $term;

        $productQuery = (new Product())->newQuery()->latest();

        if (! isset($statusId)) {
            $statusId = null;
        }

        if ($statusId != null) {
            $productQuery      = $productQuery->whereIn('status_id', $statusId);
            $data['status_id'] = $statusId;
        }

        if ($request->brand[0] != null) {
            $productQuery  = $productQuery->whereIn('brand', $request->brand);
            $data['brand'] = $request->brand[0];
        }

        if ($request->supplier[0] != null) {
            $productQuery     = $productQuery->whereIn('supplier', $request->supplier);
            $data['supplier'] = $request->supplier[0];
        }

        if ($request->color[0] != null) {
            $productQuery  = $productQuery->whereIn('color', $request->color);
            $data['color'] = $request->color[0];
        }

        if (isset($request->category) && $request->category[0] != 1) {
            $is_parent         = Category::isParent($request->category[0]);
            $category_children = [];

            if ($is_parent) {
                $childs = Category::find($request->category[0])->childs()->get();

                foreach ($childs as $child) {
                    $is_parent = Category::isParent($child->id);

                    if ($is_parent) {
                        $children = Category::find($child->id)->childs()->get();

                        foreach ($children as $chili) {
                            array_push($category_children, $chili->id);
                        }
                    } else {
                        array_push($category_children, $child->id);
                    }
                }
            } else {
                array_push($category_children, $request->category[0]);
            }

            $productQuery = $productQuery->whereIn('category', $category_children);

            $data['category'] = $request->category[0];
        }

        if (isset($request->price) && $request->price != null) {
            $exploded = explode(',', $request->price);
            $min      = $exploded[0];
            $max      = $exploded[1];

            if ($min != '0' || $max != '10000000') {
                $productQuery = $productQuery->whereBetween('price_inr_special', [$min, $max]);
            }

            $data['price'][0] = $min;
            $data['price'][1] = $max;
        }

        if ($request->location[0] != null) {
            $productQuery     = $productQuery->whereIn('location', $request->location);
            $data['location'] = $request->location[0];
        }

        if ($request->no_locations) {
            $productQuery = $productQuery->whereNull('location');
        }

        if (trim($term) != '') {
            $productQuery = $productQuery->where(function ($query) use ($term) {
                $query->orWhere('sku', 'LIKE', "%$term%")
                    ->orWhere('id', 'LIKE', "%$term%");

                if ($term == -1) {
                    $query->orWhere('isApproved', -1);
                }

                if (Brand::where('name', 'LIKE', "%$term%")->first()) {
                    $brand_id = Brand::where('name', 'LIKE', "%$term%")->first()->id;
                    $query->orWhere('brand', 'LIKE', "%$brand_id%");
                }

                if ($category = Category::where('title', 'LIKE', "%$term%")->first()) {
                    $category_id = $category = Category::where('title', 'LIKE', "%$term%")->first()->id;
                    $query->orWhere('category', $category_id);
                }
            });
        }

        if ($request->no_locations === 'true') {
            $productQuery = $productQuery->where('quick_product', 1);
        }

        $selected_categories = $request->category ? $request->category : 1;

        $data['category_selection'] = Category::attr(['name' => 'category[]', 'class' => 'form-control select-multiple2'])
            ->selected($selected_categories)
            ->renderAsDropdown();

        if ($request->get('shoe_size', false)) {
            $productQuery = $productQuery->where('products.size', 'like', '%' . $request->get('shoe_size') . '%');
        }

        if (! empty($request->quick_sell_groups) && is_array($request->quick_sell_groups)) {
            $productQuery = $productQuery->whereRaw('(id in (select product_id from product_quicksell_groups where quicksell_group_id in (' . implode(',', $request->quick_sell_groups) . ') ))');
        }

        // Get all product IDs
        $productIdsSystem = $productQuery->pluck('id')->toArray();
        $countSystem      = $productQuery->count();

        if (isset($statusId)) {
            $data['products'] = $productQuery
                ->groupBy('products.id')
                ->paginate(Setting::get('pagination'));
        } else {
            $data['products'] = $productQuery->join('mediables', function ($query) {
                $query->on('mediables.mediable_id', 'products.id')->where('mediable_type', \App\Product::class);
            })
                ->groupBy('products.id')
                ->paginate(Setting::get('pagination'));
        }

        $data['locations']           = (new \App\ProductLocation())->pluck('name');
        $data['quick_sell_groups']   = \App\QuickSellGroup::select('id', 'name')->orderBy('id', 'desc')->get();
        $data['all_products_system'] = $productIdsSystem;
        $data['count_system']        = $countSystem;

        //getting top url
        $logs     = \App\LogGoogleCse::groupBy('image_url')->get();
        $logArray = [];
        foreach ($logs as $log) {
            $url     = $log->image_url;
            $website = explode('/', $url);
            $website = $website[2]; //assuming that the url starts with https:// or https://
            if (! in_array($website, $logArray)) {
                array_push($logArray, $website);
            }
        }
        $counter = 0;
        foreach ($logArray as $log) {
            $count        = \App\LogGoogleCse::where('image_url', 'like', '%' . $log . '%')->count();
            $finalArray[] = [$log => $count];
            if ($counter == 20) {
                break;
            }
            $counter++;
        }
        if (isset($finalArray)) {
            $data['top_url'] = $finalArray;
        } else {
            $data['top_url'] = [];
        }

        return view('google_search_image.multiple-image-text', $data);
    }

    public function multipleImageStore(Request $request)
    {
        $id      = $request->id;
        $product = Product::find($id);

        if ($product->brands != null) {
            $brand = $product->brands->name;
            if ($product->brands->googleServer != null) {
                $key = $product->brands->googleServer->key;
            } else {
                $key = null;
            }
        } else {
            $key   = null;
            $brand = '';
        }

        $googleServer = config('env.GOOGLE_CUSTOM_SEARCH');

        //Replace Google Server Key
        if ($key != null) {
            $re = '/([?&]cx)=([^#&]*)/';
            preg_match($re, $googleServer, $match);
            $googleServer = str_replace($match[2], $key, $googleServer);
        }

        //Array Of Multiple Product Detail Search
        $keywords = [
            implode(',', array_filter([$brand, $product->name, $product->color, $product->sku])),
            implode(',', array_filter([$product->name, $product->color, $product->sku])),
            implode(',', array_filter([$product->name, $product->sku])),
            $product->name,
            $product->sku,
        ];
        $startTime = date('Y-m-d H:i:s', LARAVEL_START);

        //Looping Through Keywords
        foreach ($keywords as $keyword) {
            $link = $googleServer . '&q=' . urlencode($keyword) . '&searchType=image&imgSize=large';

            $handle = curl_init();

            // Set the url
            curl_setopt($handle, CURLOPT_URL, $link);
            // Set the result output to be a string.
            curl_setopt($handle, CURLOPT_RETURNTRANSFER, true);

            $output   = curl_exec($handle);
            $httpcode = curl_getinfo($handle, CURLINFO_HTTP_CODE);
            LogRequest::log($startTime, $link, 'POST', json_encode([]), json_decode($output), $httpcode, \App\Http\Controllers\GoogleSearchImageController::class, 'multipleImageStore');

            curl_close($handle);

            $list = json_decode($output);

            if ($list == null) {
                continue;
            }

            if (isset($list->searchInformation)) {
                if ($list->searchInformation->totalResults == 0) {
                    continue;
                }
            }

            if (! isset($list->items)) {
                continue;
            }
            $links = $list->items;

            //here save log

            $count = 0;
            foreach ($links as $link) {
                $image = $link->link;

                $jpg      = \Image::make($image)->encode('jpg');
                $filename = substr($image, strrpos($image, '/'));
                $filename = str_replace(['/', '.JPEG', '.JPG', '.jpeg', '.jpg', '.PNG', '.png'], '', $filename);
                $media    = MediaUploader::fromString($jpg)->toDirectory('/product/' . floor($product->id / 10000) . '/' . $product->id)->useFilename($filename)->upload();
                $product->attachMedia($media, config('constants.google_text_search'));

                $responseString = 'Link: ' . $link->link . '\n Display Link: ' . $link->displayLink . '\n Title : ' . $link->title . '\n Image Details: ' . $link->image->contextLink . ' Height:' . $link->image->height . ' Width : ' . $link->image->width . '\n ThumbnailLink ' . $link->image->thumbnailLink;

                $log            = new LogGoogleCse();
                $log->image_url = $image;
                $log->keyword   = $keyword;
                $log->response  = $responseString;
                $log->save();

                $count++;
            }
            $parameter['searchImage'] = [
                'product_id' => $product->id,
                'image_url'  => $product->crop_image,

            ];

            //If Page Is Not Found
            if ($count == 0) {
                $product->status_id = StatusHelper::$googleTextSearchFailed;
                $product->save();
            } else {
                StatusHelper::updateStatus($product, StatusHelper::$pendingVerificationGoogleTextSearch);
                break;
            }
        }

        return response()->json(['success' => 'true'], 200);
    }

    public function approveProduct(Request $request)
    {
        $data = [];
        $term = $request->input('term');

        if (request('status_id') != null) {
            $statusId = $request->status_id;
        } else {
            if (empty($request->all()) || isset($request->page)) {
                $statusId = [StatusHelper::$pendingVerificationGoogleTextSearch];
            }
        }

        $data['term'] = $term;

        $productQuery = (new Product())->newQuery()->latest();

        if (! isset($statusId)) {
            $statusId = null;
        }

        if ($statusId != null) {
            $productQuery      = $productQuery->whereIn('status_id', $statusId);
            $data['status_id'] = $statusId;
        }

        if ($request->brand[0] != null) {
            $productQuery  = $productQuery->whereIn('brand', $request->brand);
            $data['brand'] = $request->brand[0];
        }

        if ($request->supplier[0] != null) {
            $productQuery     = $productQuery->whereIn('supplier', $request->supplier);
            $data['supplier'] = $request->supplier[0];
        }

        if ($request->color[0] != null) {
            $productQuery  = $productQuery->whereIn('color', $request->color);
            $data['color'] = $request->color[0];
        }

        if (isset($request->category) && $request->category[0] != 1) {
            $is_parent         = Category::isParent($request->category[0]);
            $category_children = [];

            if ($is_parent) {
                $childs = Category::find($request->category[0])->childs()->get();

                foreach ($childs as $child) {
                    $is_parent = Category::isParent($child->id);

                    if ($is_parent) {
                        $children = Category::find($child->id)->childs()->get();

                        foreach ($children as $chili) {
                            array_push($category_children, $chili->id);
                        }
                    } else {
                        array_push($category_children, $child->id);
                    }
                }
            } else {
                array_push($category_children, $request->category[0]);
            }

            $productQuery = $productQuery->whereIn('category', $category_children);

            $data['category'] = $request->category[0];
        }

        if (isset($request->price) && $request->price != null) {
            $exploded = explode(',', $request->price);
            $min      = $exploded[0];
            $max      = $exploded[1];

            if ($min != '0' || $max != '10000000') {
                $productQuery = $productQuery->whereBetween('price_inr_special', [$min, $max]);
            }

            $data['price'][0] = $min;
            $data['price'][1] = $max;
        }

        if ($request->location[0] != null) {
            $productQuery     = $productQuery->whereIn('location', $request->location);
            $data['location'] = $request->location[0];
        }

        if ($request->no_locations) {
            $productQuery = $productQuery->whereNull('location');
        }

        if (trim($term) != '') {
            $productQuery = $productQuery->where(function ($query) use ($term) {
                $query->orWhere('sku', 'LIKE', "%$term%")
                    ->orWhere('id', 'LIKE', "%$term%");

                if ($term == -1) {
                    $query->orWhere('isApproved', -1);
                }

                if (Brand::where('name', 'LIKE', "%$term%")->first()) {
                    $brand_id = Brand::where('name', 'LIKE', "%$term%")->first()->id;
                    $query->orWhere('brand', 'LIKE', "%$brand_id%");
                }

                if ($category = Category::where('title', 'LIKE', "%$term%")->first()) {
                    $category_id = $category = Category::where('title', 'LIKE', "%$term%")->first()->id;
                    $query->orWhere('category', $category_id);
                }
            });
        }

        if ($request->no_locations === 'true') {
            $productQuery = $productQuery->where('quick_product', 1);
        }

        $selected_categories = $request->category ? $request->category : 1;

        $data['category_selection'] = Category::attr(['name' => 'category[]', 'class' => 'form-control select-multiple2'])
            ->selected($selected_categories)
            ->renderAsDropdown();

        if ($request->get('shoe_size', false)) {
            $productQuery = $productQuery->where('products.size', 'like', '%' . $request->get('shoe_size') . '%');
        }

        if (! empty($request->quick_sell_groups) && is_array($request->quick_sell_groups)) {
            $productQuery = $productQuery->whereRaw('(id in (select product_id from product_quicksell_groups where quicksell_group_id in (' . implode(',', $request->quick_sell_groups) . ') ))');
        }

        // Get all product IDs
        $productIdsSystem = $productQuery->pluck('id')->toArray();
        $countSystem      = $productQuery->count();

        if (isset($statusId)) {
            $data['products'] = $productQuery
                ->groupBy('products.id')
                ->paginate(Setting::get('pagination'));
        } else {
            $data['products'] = $productQuery->join('mediables', function ($query) {
                $query->on('mediables.mediable_id', 'products.id')->where('mediable_type', \App\Product::class);
            })
                ->groupBy('products.id')
                ->paginate(Setting::get('pagination'));
        }

        $data['locations']           = (new \App\ProductLocation())->pluck('name');
        $data['quick_sell_groups']   = \App\QuickSellGroup::select('id', 'name')->orderBy('id', 'desc')->get();
        $data['all_products_system'] = $productIdsSystem;
        $data['count_system']        = $countSystem;

        return view('google_search_image.approve', $data);
    }

    public function approveTextGoogleImagesToProduct(Request $request)
    {
        $product_id = $request->id;
        $images     = $request->selected;

        //Changed Selected Images For Product
        foreach ($images as $image) {
            $media = DB::table('mediables')->where('tag', config('constants.google_text_search'))->where('mediable_type', \App\Product::class)->where('media_id', $image)
                ->limit(1)
                ->update(['tag' => config('constants.media_tags')[0]]);
        }

        //Change Product Status
        $product            = Product::find($product_id);
        $product->status_id = StatusHelper::$AI;
        $product->save();

        return response()->json(['success' => 'true'], 200);
    }

    public function rejectProducts(Request $request)
    {
        $product            = Product::find($request->id);
        $product->status_id = StatusHelper::$googleTextSearchManuallyRejected;
        $product->update();

        $results = $product->media()->get();
        $results->each(function ($media) {
            $media->delete();
        });

        return response()->json(['success' => 'true'], 200);
    }

    public function getProductFromImage(Request $request)
    {
        if (! is_dir(public_path() . '/tmp_images')) {
            mkdir(public_path() . '/tmp_images', 0777, true);
        }
        $path = public_path() . '/tmp_images/crop_' . $request->file->getClientOriginalName();
        $url  = '/tmp_images/crop_' . $request->file->getClientOriginalName();

        request()->file->move($path, $request->file->getClientOriginalName());

        //Product save
        $product                    = new Product;
        $product->sku               = '';
        $product->price             = 0;
        $product->quick_product     = 1;
        $product->price_inr         = 0;
        $product->price_inr_special = 0;
        $product->save();

        //Attach Media To Post
        $media = MediaUploader::fromSource($path)
            ->toDirectory('product/' . floor($product->id / config('constants.image_per_folder')))
            ->upload();
        $product->attachMedia($media, config('constants.media_tags'));

        if ($path) {
            $urls  = GoogleVisionHelper::getImageDetails($path);
            $count = 0;
            if (isset($urls['pages'])) {
                foreach ($urls['pages'] as $url) {
                    if (stristr($url, '.gucci.') || stristr($url, '.farfetch.')) {
                        //Create New Product

                        // Create queue item
                        $scrapeQueue             = new ScrapeQueues();
                        $scrapeQueue->product_id = $product->id;
                        $scrapeQueue->url        = $url;
                        $scrapeQueue->save();
                        $count++;
                        break;
                    }
                }
                if ($count == 0) {
                    $product->status_id = StatusHelper::$googleImageSearchFailed;
                    $product->save();

                    return response('failed', 200);
                } else {
                    StatusHelper::updateStatus($product, StatusHelper::$queuedForGoogleImageSearch);

                    return response('success', 200);
                }
            } else {
                $product->status_id = StatusHelper::$googleImageSearchFailed;
                $product->save();

                return response('failed', 200);
            }
        }
    }

    public function getProductFromText(Request $request)
    {
        $keyword = $request->keyword;
        $braand  = $request->brand;
        $brand   = \App\Brand::where('name', $braand)->first();
        if ($brand == null && $brand == '') {
            $brandId = '';
        } else {
            $brandId = $brand->id;
        }
        $sku = $request->sku;
        if ($sku == null && $sku == '') {
            $sku = '';
        }
        $title = $request->title;
        if ($title == null && $title == '') {
            $title = '';
        }

        //Product save
        $product                    = new Product;
        $product->name              = $title;
        $product->sku               = $sku;
        $product->brand             = $brandId;
        $product->price             = 0;
        $product->quick_product     = 1;
        $product->price_inr         = 0;
        $product->price_inr_special = 0;
        $product->save();

        if ($product->brands != null) {
            $brand = $product->brands->name;
            if ($product->brands->googleServer != null) {
                $key = $product->brands->googleServer->key;
            } else {
                $key = null;
            }
        } else {
            $key   = null;
            $brand = '';
        }

        $googleServer             = config('env.GOOGLE_CUSTOM_SEARCH');
        $startTime                = date('Y-m-d H:i:s', LARAVEL_START);
        $parameter['searchImage'] = [
            'product_id' => $product->id,
            'image_url'  => $product->crop_image,

        ];

        //Replace Google Server Key
        if ($key != null) {
            $re = '/([?&]cx)=([^#&]*)/';
            preg_match($re, $googleServer, $match);
            $googleServer = str_replace($match[2], $key, $googleServer);
        }

        $link = $googleServer . '&q=' . urlencode($keyword) . '&searchType=image&imgSize=large';

        $handle = curl_init();

        // Set the url
        curl_setopt($handle, CURLOPT_URL, $link);
        // Set the result output to be a string.
        curl_setopt($handle, CURLOPT_RETURNTRANSFER, true);

        $output   = curl_exec($handle);
        $httpcode = curl_getinfo($handle, CURLINFO_HTTP_CODE);
        LogRequest::log($startTime, $link, 'POST', json_encode($parameter), json_decode($output), $httpcode, \App\Http\Controllers\GoogleSearchImageController::class, 'multipleImageStore');
        curl_close($handle);

        $list = json_decode($output);

        if ($list == null) {
            return false;
        }

        if (isset($list->searchInformation)) {
            if ($list->searchInformation->totalResults == 0) {
                return false;
            }
        }

        if (! isset($list->items)) {
            return false;
        }
        $links = $list->items;

        //here save log
        $count = 0;
        foreach ($links as $link) {
            $image = $link->link;

            $jpg      = \Image::make($image)->encode('jpg');
            $filename = substr($image, strrpos($image, '/'));
            $filename = str_replace(['/', '.JPEG', '.JPG', '.jpeg', '.jpg', '.PNG', '.png'], '', $filename);
            $media    = MediaUploader::fromString($jpg)->toDirectory('/product/' . floor($product->id / 10000) . '/' . $product->id)->useFilename($filename)->upload();
            $product->attachMedia($media, config('constants.google_text_search'));

            $responseString = 'Link: ' . $link->link . '\n Display Link: ' . $link->displayLink . '\n Title : ' . $link->title . '\n Image Details: ' . $link->image->contextLink . ' Height:' . $link->image->height . ' Width : ' . $link->image->width . '\n ThumbnailLink ' . $link->image->thumbnailLink;

            $log            = new LogGoogleCse();
            $log->image_url = $image;
            $log->keyword   = $keyword;
            $log->response  = $responseString;
            $log->save();
            $count++;
        }

        //If Page Is Not Found
        if ($count == 0) {
            $product->status_id = StatusHelper::$googleTextSearchFailed;
            $product->save();

            return response('error', 200);
        } else {
            StatusHelper::updateStatus($product, StatusHelper::$pendingVerificationGoogleTextSearch);

            return response('success', 200);
        }
    }

    public function searchImageList()
    {
        $data['title'] = 'Google Search Images';
        $image_search  = GoogleSearchImage::where('user_id', \Auth::id())
            ->leftjoin('products as p', 'p.id', '=', 'google_search_images.product_id')
            ->select('google_search_images.*', 'p.name as product_name')
            ->paginate(30);
        $data['image_search'] = $image_search;

        return view('google_search_image.search_image_list', $data);
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/HsCodeController.php 
Content: <?php

namespace App\Http\Controllers;

use DB;
use Redirect;
use App\HsCode;
use App\Product;
use App\Setting;
use App\Category;
use App\HsCodeGroup;
use App\HsCodeSetting;
use App\SimplyDutyCategory;
use Illuminate\Http\Request;
use App\HsCodeGroupsCategoriesComposition;
use Illuminate\Pagination\LengthAwarePaginator;

class HsCodeController extends Controller
{
    public function index(Request $request)
    {
        if ($request->code || $request->description) {
            $query = HsCode::query();

            if (request('code') != null) {
                $query->where('code', request('code'));
            }
            if (request('description') != null) {
                $query->where('description', 'LIKE', "%{$request->description}%");
            }
            $categories = $query->paginate(Setting::get('pagination'));
        } else {
            $categories = HsCode::paginate(Setting::get('pagination'));
        }

        if ($request->ajax()) {
            return response()->json([
                'tbody' => view('simplyduty.hscode.partials.data', compact('categories'))->render(),
                'links' => (string) $categories->render(),
            ], 200);
        }

        return view('simplyduty.hscode.index', compact('categories'));
    }

    public function saveKey(Request $request)
    {
        $setting = HsCodeSetting::all();
        if (count($setting) == 0) {
            $set                      = new HsCodeSetting();
            $set->from_country        = $request->from;
            $set->destination_country = $request->destination;
            $set->key                 = $request->key;
            $set->save();
        } else {
            $set                      = HsCodeSetting::first();
            $set->from_country        = $request->from;
            $set->destination_country = $request->destination;
            $set->key                 = $request->key;
            $set->save();
        }

        return Redirect::to('/product/hscode');
    }

    public function mostCommon(Request $request)
    {
        $query = Product::query();

        if ($request->category || $request->combination) {
            $query->select('*', DB::raw('count(*) as total'))
                ->where('category', '>', 3)->where('stock', 1)->groupBy('category')->groupBy('composition');

            if ($request->category != null) {
                $query->where('category', $request->category);
            }

            if ($request->combination != null) {
                $query->where('composition', 'LIKE', '%' . $request->combination . '%');
            }

            $productss = $query->orderBy('total', 'desc')->take(100)->get();
        } else {
            $productss = $query->select('*', DB::raw('count(*) as total'))
                ->where('category', '>', 3)->where('stock', 1)->groupBy('category')->groupBy('composition')->whereNotNull('composition')->where('composition', '!=', '')->orderBy('total', 'desc')->get();
        }

        if ($productss->count() != 0) {
            $count = 0;
            foreach ($productss as $product) {
                if ($count == 100) {
                    break;
                }

                $categoryTree = CategoryController::getCategoryTree($product->category);
                if (is_array($categoryTree)) {
                    $childCategory = implode(' > ', $categoryTree);
                }

                $parentCategory = $product->product_category->title;
                $name           = $childCategory . ' > ' . $parentCategory;

                $hscodeSearchString = str_replace(['&gt;', '>'], '', $product->composition . ' ' . $name);

                $hscode = HsCode::where('description', $hscodeSearchString)->first();

                if ($hscode == null) {
                    $productArray[] = $product->setAttribute('category_name', $name);
                    $count++;
                }
            }
        }

        if (! isset($productArray)) {
            $productArray = [];
        }

        $selected_categories = $request->category ? $request->category : 1;

        $category_selection = Category::attr(['name' => 'category[]', 'class' => 'form-control category_class select-multiple2', 'id' => 'category_value'])
            ->selected($selected_categories)
            ->renderAsDropdown();

        $p           = $productArray;
        $currentPage = LengthAwarePaginator::resolveCurrentPage();
        $perPage     = Setting::get('pagination');

        $currentItems = array_slice($p, $perPage * ($currentPage - 1), $perPage);

        $products = new LengthAwarePaginator($currentItems, count($p), $perPage, $currentPage, [
            'path' => LengthAwarePaginator::resolveCurrentPath(),
        ]);
        $groups  = HsCodeGroup::all();
        $cate    = HsCodeGroupsCategoriesComposition::groupBy('category_id')->pluck('category_id')->toArray();
        $hscodes = SimplyDutyCategory::all();

        if ($request->ajax()) {
            return response()->json([
                'tbody' => view('simplyduty.most-common.partials.data', compact('products', 'category_selection', 'groups', 'cate', 'hscodes'))->render(),
                'links' => (string) $products->appends($request->all())->render(),
                'total' => $products->total(),
            ], 200);
        }

        return view('simplyduty.most-common.index', compact('products', 'category_selection', 'groups', 'cate', 'hscodes'));
    }

    public function mostCommonByCategory(Request $request)
    {
        if ($request->category != null) {
            $categories = DB::table('categories')->select('id', 'title')->where('id', $request->category)->orderBy('title', 'asc')->get()->toArray();
        } else {
            $categories = DB::table('categories')->orderBy('title', 'asc')->whereNotIn('id', [1, 2, 3])->get();
        }

        foreach ($categories as $category) {
            $categoryTree = CategoryController::getCategoryTree($category->id);
            if (is_array($categoryTree)) {
                $childCategory = implode(' > ', $categoryTree);
            }

            $parentCategory = $category->title;
            $name           = $childCategory . ' > ' . $parentCategory;
            if ($request->combination != null) {
                $products = Product::select('composition')->where('category', $category->id)->where('category', '>', 3)->where('stock', 1)->where('composition', 'LIKE', '%' . $request->combination . '%')->whereNotNull('composition')->groupBy('composition')->limit(3)->get();
            } else {
                $products = Product::select('composition')->where('category', $category->id)->where('stock', 1)->groupBy('composition')->whereNotNull('composition')->where('composition', '!=', '')->limit(3)->get();
            }

            foreach ($products as $product) {
                //Check if product hscode exist

                $hscodeSearchString = str_replace(['&gt;', '>'], '', $product->composition . ' ' . $name);

                $hscode = HsCode::where('description', $hscodeSearchString)->first();

                if ($hscode == null) {
                    $data[] = ['name' => $name, 'id' => $category->id, 'composition' => $product->composition];
                }
            }
        }

        if (! isset($data)) {
            $data = [];
        }
        $categories = $data;

        $hscodes = SimplyDutyCategory::all();
        $groups  = HsCodeGroup::all();
        $cate    = HsCodeGroupsCategoriesComposition::groupBy('category_id')->pluck('category_id')->toArray();

        $selected_categories = $request->category ? $request->category : 1;

        $category_selection = Category::attr(['name' => 'category[]', 'class' => 'form-control category_class select-multiple2', 'id' => 'category_value'])
            ->selected($selected_categories)
            ->renderAsDropdown();

        if ($request->ajax()) {
            return response()->json([
                'tbody' => view('simplyduty.most-common-category.partials.data', compact('categories', 'hscodes', 'groups', 'cate'))->render(),
                'links' => (string) $categories->render(),
                'total' => count($categories),
            ], 200);
        }

        return view('simplyduty.most-common-category.index', compact('categories', 'hscodes', 'groups', 'cate', 'category_selection'));
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/InfluencersController.php 
Content: <?php

namespace App\Http\Controllers;

use DB;
use App\LogRequest;
use App\Influencers;
use App\InfluencersDM;
use App\InfluencerKeyword;
use App\InfluencersHistory;
use Illuminate\Http\Request;
use Plank\Mediable\Facades\MediaUploader as MediaUploader;

class InfluencersController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illum
     *                inate\Http\Response
     *
     * List all influencers
     */
    public function index()
    {
        $hashtags = Influencers::all();
        $keywords = InfluencerKeyword::all();
        dd($hastags);

        return view('instagram.influencers.index', compact('hashtags'));
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     *
     * @return \Illuminate\Http\Response
     *                                   CReate a new influencer record..
     */
    public function store(Request $request)
    {
        $this->validate($request, [
            'name' => 'required',
        ]);

        $i             = new Influencers();
        $i->username   = $request->get('name');
        $i->brand_name = $request->get('brand_name');
        $i->blogger    = $request->get('blogger');
        $i->city       = $request->get('city');
        $i->save();

        return redirect()->back()->with('message', 'Added instagram influencer.');
    }

    /**
     * Display the specified resource.
     *
     * @param \App\Influencers $influencers
     * @param mixed            $id
     *
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        $comments = InfluencersDM::all();

        return view('instagram.influencers.comments', compact('comments'));
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function edit(Influencers $influencers)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, Influencers $influencers)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function destroy(Influencers $influencers)
    {
        //
    }

    public function saveKeyword(Request $request)
    {
        $name = $request->name;

        $keywordCheck = InfluencerKeyword::where('name', $name)->first();

        if (! $keywordCheck) {
            $keyword                       = new InfluencerKeyword();
            $keyword->name                 = $name;
            $keyword->instagram_account_id = $request->get('instagram_account_id', null);
            $keyword->save();

            return response()->json(['message' => 'Influencer Keyword Saved']);
        } else {
            $keywordCheck->name                 = $name;
            $keywordCheck->instagram_account_id = $request->get('instagram_account_id', null);
            $keywordCheck->save();

            return response()->json(['message' => 'Influencer Keyword Saved']);
        }

        return response()->json(['message' => 'Influencer Keyword Exist']);
    }

    public function getScraperImage(Request $request)
    {
        $startTime = date('Y-m-d H:i:s', LARAVEL_START);
        $name      = $request->name;
        $extraVars = \App\Helpers::getInstagramVars($name);
        $name      = str_replace(' ', '', $name) . $extraVars;

        $cURLConnection = curl_init();

        $url = env('INFLUENCER_SCRIPT_URL') . ':' . env('INFLUENCER_SCRIPT_PORT') . '/get-image?' . $name;

        curl_setopt($cURLConnection, CURLOPT_URL, $url);

        curl_setopt($cURLConnection, CURLOPT_RETURNTRANSFER, true);

        $phoneList = curl_exec($cURLConnection);
        $httpcode  = curl_getinfo($cURLConnection, CURLINFO_HTTP_CODE);
        LogRequest::log($startTime, $url, 'POST', json_encode([]), json_decode($phoneList), $httpcode, \App\Http\Controllers\InfluencersController::class, 'getScraperImage');
        curl_close($cURLConnection);

        $jsonArrayResponse = json_decode($phoneList);

        $b64 = $jsonArrayResponse->status;

        $history = [
            'influencers_name' => $name,
            'title'            => 'Getting image',
            'description'      => $b64,
        ];
        InfluencersHistory::insert($history);

        if ($jsonArrayResponse->status == 'Something Went Wrong') {
            return \Response::json(['success' => false, 'message' => 'No Image Available']);
        }
        $content = base64_decode($b64);

        $media = MediaUploader::fromString($content)->toDirectory('/influencer')->useFilename($name)->upload();

        return \Response::json(['success' => true, 'message' => getMediaUrl($media)]);
    }

    public function checkScraper(Request $request)
    {
        try {
            $name = $request->name;

            // get keyword name
            $extraVars      = \App\Helpers::getInstagramVars($name);
            $name           = str_replace(' ', '', $name) . $extraVars;
            $startTime      = date('Y-m-d H:i:s', LARAVEL_START);
            $cURLConnection = curl_init();
            $url            = env('INFLUENCER_SCRIPT_URL') . ':' . env('INFLUENCER_SCRIPT_PORT') . '/get-status';
            $data           = json_encode(['name' => $name]);
            curl_setopt($cURLConnection, CURLOPT_URL, $url);
            curl_setopt($cURLConnection, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($cURLConnection, CURLOPT_CUSTOMREQUEST, 'POST');
            curl_setopt($cURLConnection, CURLOPT_POSTFIELDS, $data);
            curl_setopt($cURLConnection, CURLOPT_HTTPHEADER, ['Content-Type: application/json', 'accept: application/json']);
            $phoneList = curl_exec($cURLConnection);
            $httpcode  = curl_getinfo($cURLConnection, CURLINFO_HTTP_CODE);
            LogRequest::log($startTime, $url, 'POST', json_encode($data), json_decode($phoneList), $httpcode, \App\Http\Controllers\InfluencersController::class, 'checkScraper');
            curl_close($cURLConnection);
            $jsonArrayResponse = json_decode($phoneList);
            if (isset($jsonArrayResponse->status)) {
                $b64 = $jsonArrayResponse->status;
            } else {
                $b64 = $phoneList;
            }

            $history = [
                'influencers_name' => $name,
                'title'            => 'Check status',
                'description'      => $b64,
            ];
            InfluencersHistory::insert($history);

            return \Response::json(['success' => true, 'message' => $b64]);
        } catch (\Throwable $th) {
            $history = [
                'influencers_name' => $request->name,
                'title'            => 'Check status',
                'description'      => $th->getMessage() . env('INFLUENCER_SCRIPT_URL') . ':' . env('INFLUENCER_SCRIPT_PORT'),
            ];
            InfluencersHistory::insert($history);
        }
    }

    public function startScraper(Request $request)
    {
        try {
            $startTime      = date('Y-m-d H:i:s', LARAVEL_START);
            $cURLConnection = curl_init();

            $infKeyword = \App\InfluencerKeyword::where('name', $request->name)->first();
            if ($infKeyword) {
                $infKeyword->wait_time     = $request->get('wait_time', 0);
                $infKeyword->no_of_requets = $request->get('no_of_request', 0);
                $infKeyword->save();
            }

            if ($request->platform == 'py_facebook') {
                $extraVars = \App\Helpers::getFacebookVars($request->name);
                $url       = config('constants.py_facebook_script') . '/fb-keyword-start' . $extraVars;
                $params    = [
                    'brand'        => str_replace(' ', '', $request->name),
                    'wait_time'    => $request->get('wait_time', 0),
                    'num_requests' => $request->get('no_of_request', 0),
                ];
            } else {
                $url    = env('INFLUENCER_PY_SCRIPT_URL') . ':' . env('INFLUENCER_PY_SCRIPT_PORT') . '/influencer-keyword-start';
                $params = [
                    'name'         => str_replace(' ', '', $request->name),
                    'wait_time'    => $request->get('wait_time', 0),
                    'num_requests' => $request->get('no_of_request', 0),
                ];
            }

            curl_setopt_array($cURLConnection, [
                CURLOPT_URL            => $url,
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_ENCODING       => '',
                CURLOPT_MAXREDIRS      => 10,
                CURLOPT_TIMEOUT        => 300,
                CURLOPT_HTTP_VERSION   => CURL_HTTP_VERSION_1_1,
                CURLOPT_CUSTOMREQUEST  => 'POST',
                CURLOPT_POSTFIELDS     => json_encode($params),
                CURLOPT_HTTPHEADER     => [
                    'content-type: application/json',
                ],
            ]);

            $phoneList = curl_exec($cURLConnection);

            \Log::info('Influencers start scraper : ' . $url . ' with params : ' . json_encode($params) . ' and response return ' . (string) $phoneList);
            $httpcode = curl_getinfo($cURLConnection, CURLINFO_HTTP_CODE);
            LogRequest::log($startTime, $url, 'POST', json_encode($params), json_decode($phoneList), $httpcode, \App\Http\Controllers\InfluencersController::class, 'startScraper');
            curl_close($cURLConnection);

            $b64 = (string) $phoneList;

            $history = [
                'influencers_name' => $request->name,
                'title'            => 'starting script',
                'description'      => $b64,
            ];
            InfluencersHistory::insert($history);

            return \Response::json(['success' => true, 'message' => $b64]);
        } catch (\Throwable $th) {
            $history = [
                'influencers_name' => $request->name,
                'title'            => 'starting script',
                'description'      => $th->getMessage() . env('INFLUENCER_PY_SCRIPT_URL') . ':' . env('INFLUENCER_PY_SCRIPT_PORT'),
            ];
            InfluencersHistory::insert($history);
        }
    }

    public function getLogFile(Request $request)
    {
        try {
            $name           = $request->name;
            $extraVars      = \App\Helpers::getInstagramVars($name);
            $name           = str_replace(' ', '', $name) . $extraVars;
            $startTime      = date('Y-m-d H:i:s', LARAVEL_START);
            $cURLConnection = curl_init();

            $url = env('INFLUENCER_SCRIPT_URL') . ':' . env('INFLUENCER_SCRIPT_PORT') . '/send-log?' . $name;
            curl_setopt($cURLConnection, CURLOPT_URL, $url);
            curl_setopt($cURLConnection, CURLOPT_RETURNTRANSFER, true);

            $phoneList  = curl_exec($cURLConnection);
            $httpcode   = curl_getinfo($cURLConnection, CURLINFO_HTTP_CODE);
            $parameters = [
                'name' => $name,
            ];
            LogRequest::log($startTime, $url, 'POST', json_encode($parameters), json_decode($phoneList), $httpcode, \App\Http\Controllers\InfluencersController::class, 'getLogFile');

            curl_close($cURLConnection);

            $jsonArrayResponse = json_decode($phoneList);

            $b64 = $jsonArrayResponse->status;

            if ($jsonArrayResponse->status == 'Something Went Wrong') {
                return \Response::json(['success' => false, 'message' => 'No Logs Available']);
            }
            $content = base64_decode($b64);

            $history = [
                'influencers_name' => $name,
                'title'            => 'Getting log file',
                'description'      => $b64,
            ];
            InfluencersHistory::insert($history);

            $media = MediaUploader::fromString($content)->toDirectory('/influencer')->useFilename($name)->upload();

            return \Response::json(['success' => true, 'message' => getMediaUrl($media)]);
        } catch (\Throwable $th) {
            $history = [
                'influencers_name' => $request->name,
                'title'            => 'Getting log file',
                'description'      => $th->getMessage() . env('INFLUENCER_SCRIPT_URL') . ':' . env('INFLUENCER_SCRIPT_PORT'),
            ];
            InfluencersHistory::insert($history);
        }
    }

    public function restartScript(Request $request)
    {
        try {
            $name           = $request->name;
            $startTime      = date('Y-m-d H:i:s', LARAVEL_START);
            $cURLConnection = curl_init();

            $url  = env('INFLUENCER_SCRIPT_URL') . ':' . env('INFLUENCER_SCRIPT_PORT') . '/restart';
            $data = json_encode(['name' => $name]);
            \Log::info('INFLUENCER_loginstance -->' . $data);
            curl_setopt($cURLConnection, CURLOPT_URL, $url);
            curl_setopt($cURLConnection, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($cURLConnection, CURLOPT_CUSTOMREQUEST, 'POST');
            curl_setopt($cURLConnection, CURLOPT_HTTPHEADER, ['Content-Type: application/json', 'accept: application/json']);
            curl_setopt($cURLConnection, CURLOPT_POSTFIELDS, $data);
            $phoneList         = curl_exec($cURLConnection);
            $jsonArrayResponse = json_decode($phoneList);
            if (isset($jsonArrayResponse->status)) {
                $b64 = $jsonArrayResponse->status;
            } else {
                $b64 = $phoneList;
            }

            $httpcode = curl_getinfo($cURLConnection, CURLINFO_HTTP_CODE);
            LogRequest::log($startTime, $url, 'POST', json_encode($data), json_decode($phoneList), $httpcode, \App\Http\Controllers\InfluencersController::class, 'restartScript');
            curl_close($cURLConnection);

            $history = [
                'influencers_name' => $name,
                'title'            => 'Restart script',
                'description'      => $b64,
            ];
            InfluencersHistory::insert($history);

            return \Response::json(['success' => true, 'message' => $b64]);
        } catch (\Throwable $th) {
            dd('Sssss');
            $history = [
                'influencers_name' => $request->name,
                'title'            => 'Restart script',
                'description'      => $th->getMessage() . env('INFLUENCER_SCRIPT_URL') . ':' . env('INFLUENCER_SCRIPT_PORT'),
            ];
            InfluencersHistory::insert($history);
        }
    }

    public function stopScript(Request $request)
    {
        try {
            $name           = $request->name;
            $extraVars      = \App\Helpers::getInstagramVars($name);
            $name           = str_replace(' ', '', $name) . $extraVars;
            $startTime      = date('Y-m-d H:i:s', LARAVEL_START);
            $cURLConnection = curl_init();
            if ($request->platform == 'py_facebook') {
                $extraVars = \App\Helpers::getInstagramVars($name);
                $url       = config('constants.py_facebook_script') . '/fb-keyword-stop' . $extraVars;
                $params    = [
                    'brand' => str_replace(' ', '', $request->name),
                ];
            } else {
                $url    = env('INFLUENCER_PY_SCRIPT_URL') . ':' . env('INFLUENCER_PY_SCRIPT_PORT') . '/influencer-keyword-stop';
                $params = [
                    'name' => str_replace(' ', '', $request->name),
                ];
            }
            curl_setopt_array($cURLConnection, [
                CURLOPT_URL            => $url,
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_ENCODING       => '',
                CURLOPT_MAXREDIRS      => 10,
                CURLOPT_TIMEOUT        => 300,
                CURLOPT_HTTP_VERSION   => CURL_HTTP_VERSION_1_1,
                CURLOPT_CUSTOMREQUEST  => 'POST',
                CURLOPT_POSTFIELDS     => json_encode($params),
                CURLOPT_HTTPHEADER     => [
                    'content-type: application/json',
                ],
            ]);

            $phoneList = curl_exec($cURLConnection);
            $httpcode  = curl_getinfo($cURLConnection, CURLINFO_HTTP_CODE);
            LogRequest::log($startTime, $url, 'POST', json_encode($params), json_decode($phoneList), $httpcode, \App\Http\Controllers\InfluencersController::class, 'addmailinglist');

            \Log::info('Influencers stop scraper : ' . $url . ' with params : ' . json_encode($params) . ' and response return ' . (string) $phoneList);

            curl_close($cURLConnection);

            $b64 = (string) $phoneList;

            $history = [
                'influencers_name' => $name,
                'title'            => 'Stop script',
                'description'      => $b64,
            ];
            InfluencersHistory::insert($history);

            return \Response::json(['success' => true, 'message' => $b64]);
        } catch (\Throwable $th) {
            $history = [
                'influencers_name' => $request->name,
                'title'            => 'Stop script',
                'description'      => $th->getMessage() . env('INFLUENCER_PY_SCRIPT_URL') . ':' . env('INFLUENCER_PY_SCRIPT_PORT'),
            ];
            InfluencersHistory::insert($history);
        }
    }

    public function sortData()
    {
        try {
            \Artisan::call('influencer:description');

            return response()->json('Console Commnad Ran', 200);
        } catch (Exception $e) {
            return response()->json('Cannot call artisan command', 200);
        }
    }

    public function getKeywordsWithAccount()
    {
        $getKeywords = InfluencerKeyword::all();
        $data        = [];
        foreach ($getKeywords as $key => $value) {
            $account          = DB::table('accounts')->where('id', $value->instagram_account_id)->get();
            $datas['keyword'] = $value->name;
            $datas['account'] = $account;
            array_push($data, $datas);
        }

        return $data;
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/InstagramPostsController.php 
Content: <?php

namespace App\Http\Controllers;

use App\Post;
use App\Account;
use App\LogRequest;
use UnsplashSearch;
use App\ChatMessage;
use App\InstagramPosts;
use Plank\Mediable\Media;
use App\StoreSocialContent;
use Illuminate\Http\Request;
use App\Helpers\SocialHelper;
use App\Jobs\InstaSchedulePost;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Http;

class InstagramPostsController extends Controller
{
    public function index(Request $request)
    {
    }

    public function post(Request $request)
    {
        $images   = $request->get('images', false);
        $mediaIds = $request->get('media_ids', false);

        $productArr = null;
        if ($images) {
            $productIdsArr = \DB::table('mediables')
                ->whereIn('media_id', json_decode($images))
                ->where('mediable_type', 'App\Product')
                ->pluck('mediable_id')
                ->toArray();

            if (! empty($productIdsArr)) {
                $productArr = \App\Product::select('id', 'name', 'sku', 'brand')->whereIn('id', $productIdsArr)->get();
            }
        }

        $mediaIdsArr = null;
        if ($mediaIds) {
            $mediaIdsArr = \DB::table('mediables')
                ->whereIn('media_id', explode(',', $mediaIds))
                ->where('mediable_type', 'App\StoreWebsite')
                ->get();
        }
        $accounts = \App\Account::where('platform', 'instagram')->where('status', 1)->get();

        $query = Post::query();

        if ($request->acc) {
            $query = $query->where('id', $request->acc);
        }
        if ($request->comm) {
            $query = $query->where('comment', 'LIKE', '%' . $request->comm . '%');
        }
        if ($request->tags) {
            $query = $query->where('hashtags', 'LIKE', '%' . $request->tags . '%');
        }
        if ($request->loc) {
            $query = $query->where('location', 'LIKE', '%' . $request->loc . '%');
        }
        if ($request->select_date) {
            $query = $query->whereDate('created_at', $request->select_date);
        }
        $posts = $query->orderBy('id', 'asc')->paginate(25)->appends(request()->except(['page']));

        $used_space    = 0;
        $storage_limit = 0;
        $contents      = StoreSocialContent::query();
        $contents      = $contents->get();
        $records       = [];
        foreach ($contents as $site) {
            if ($site) {
                if ($site->hasMedia(config('constants.media_tags'))) {
                    foreach ($site->getMedia(config('constants.media_tags')) as $media) {
                        $records[] = [
                            'id'        => $media->id,
                            'extension' => strtolower($media->extension),
                            'file_name' => $media->filename,
                            'mime_type' => $media->mime_type,
                            'size'      => $media->size,
                            'thumb'     => getMediaUrl($media),
                            'original'  => getMediaUrl($media),
                        ];
                    }
                }
            }
        }

        $imagesHtml = '';
        if (isset($productArr) && count($productArr)) {
            foreach ($productArr as $product) {
                foreach ($product->media as $media) {
                    $imagesHtml .= '<div class="media-file">    <label class="imagecheck m-1">        <input name="media[]" type="checkbox" value="' . $media->id . '" data-original="' . getMediaUrl($media) . '" class="imagecheck-input">        <figure class="imagecheck-figure">            <img src="' . getMediaUrl($media) . '" alt="' . $product->name . '" class="imagecheck-image" style="cursor: default;">        </figure>    </label><p style="font-size: 11px;"></p></div>';
                }
            }
        }

        if (isset($mediaIdsArr) && ! empty($mediaIdsArr)) {
            foreach ($mediaIdsArr as $image) {
                $media = Media::where('id', $image->media_id)->get();
                if (! empty($media)) {
                    $imagesHtml .= '<div class="media-file">    <label class="imagecheck m-1">        <input name="media[]" type="checkbox" value="' . $media[0]->getkey() . '" data-original="' . getMediaUrl($media[0]) . '" class="imagecheck-input">        <figure class="imagecheck-figure">            <img src="' . getMediaUrl($media[0]) . '" alt="Images" class="imagecheck-image" style="cursor: default;">        </figure>    </label><p style="font-size: 11px;"></p></div>';
                }
            }
        }

        return view('instagram.post.create', compact('accounts', 'records', 'used_space', 'storage_limit', 'posts', 'imagesHtml'))->with('i', ($request->input('page', 1) - 1) * 5);
    }

    public function createPost(Request $request)
    {
        //resizing media
        $all = $request->all();

        if ($request->media) {
            foreach ($request->media as $media) {
                $mediaFile = Media::where('id', $media)->first();
                $image     = self::resize_image_crop($mediaFile, 640, 640);
            }
        }

        if ($request->postId) {
            $userPost = InstagramPosts::find($request->postId);
            foreach ($userPost->getMedia('instagram') as $media) {
                $image     = self::resize_image_crop($media, 640, 640);
                $mediaPost = $media->id;
                break;
            }
        }

        if (! isset($mediaPost)) {
            $mediaPost = $request->media;
        }

        if (empty($request->location)) {
            $location = '';
        } else {
            $location = $request->location;
        }

        if (empty($request->hashtags)) {
            $hashtag = '';
        } else {
            $hashtag = $request->hashtags;
        }

        $post             = new Post();
        $post->account_id = $request->account;
        $post->type       = $request->type;
        $post->caption    = $request->caption . ' ' . $hashtag;
        $ig               = [
            'media'    => $mediaPost,
            'location' => $location,
        ];
        $post->ig           = json_encode($ig);
        $post->location     = $location;
        $post->hashtags     = $hashtag;
        $post->scheduled_at = $request->scheduled_at;
        $post->save();
        $newPost = Post::find($post->id);

        $media = json_decode($newPost->ig, true);

        $ig = [
            'media'    => $media['media'],
            'location' => $location,
            'hashtag'  => $hashtag,
        ];
        $newPost->ig = $ig;

        if ($request->scheduled === '1') {
            $diff = strtotime($request->scheduled_at) - strtotime(now());
            InstaSchedulePost::dispatch($newPost)->onQueue('InstaSchedulePost')->delay($diff);

            return redirect()->back()->with('message', __('Your post schedule has been saved'));
        }

        // Publish Post on instagram
        if (new PublishPost($newPost)) {
            $this->createPostLog($newPost->id, 'success', 'Your post has been published');

            if ($request->ajax()) {
                return response()->json('Your post has been published', 200);
            } else {
                return redirect()->route('post.index')
                    ->with('success', __('Your post has been published'));
            }
        } else {
            $this->createPostLog($newPost->id, 'error', 'Post failed to published');
            if ($request->ajax()) {
                return response()->json('Post failed to published', 200);
            } else {
                return redirect()->route('post.index')
                    ->with('error', __('Post failed to published'));
            }
        }
    }

    public function publishPost(Request $request, $id)
    {
    }

    public function grid(Request $request)
    {
    }

    /**
     * @SWG\Post(
     *   path="/instagram/post",
     *   tags={"Instagram"},
     *   summary="post instagram",
     *   operationId="post-instagram",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *   @SWG\Response(response=406, description="not acceptable"),
     *   @SWG\Response(response=500, description="internal server error"),
     *
     *      @SWG\Parameter(
     *          name="mytest",
     *          in="path",
     *          required=true,
     *          type="string"
     *      ),
     * )
     */
    public function apiPost(Request $request)
    {
    }

    /**
     * @SWG\Get(
     *   path="/instagram/send-account/{token}",
     *   tags={"Instagram"},
     *   summary="get instagram account details",
     *   operationId="get-instagram-account-details",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *   @SWG\Response(response=406, description="not acceptable"),
     *   @SWG\Response(response=500, description="internal server error"),
     *
     *      @SWG\Parameter(
     *          name="mytest",
     *          in="path",
     *          required=true,
     *          type="string"
     *      ),
     * )
     *
     * @param mixed $token
     */
    public function sendAccount($token)
    {
    }

    /**
     * @SWG\Get(
     *   path="/instagram/get-comments-list/{username}",
     *   tags={"Instagram"},
     *   summary="get instagram comments list",
     *   operationId="get-instagram-comment-list",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *   @SWG\Response(response=406, description="not acceptable"),
     *   @SWG\Response(response=500, description="internal server error"),
     *
     *      @SWG\Parameter(
     *          name="mytest",
     *          in="path",
     *          required=true,
     *          type="string"
     *      ),
     * )
     *
     * @param mixed $username
     */
    public function getComments($username)
    {
    }

    /**
     * @SWG\Post(
     *   path="/instagram/comment-sent",
     *   tags={"Instagram"},
     *   summary="send instagram comments",
     *   operationId="send-instagram-comment",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *   @SWG\Response(response=406, description="not acceptable"),
     *   @SWG\Response(response=500, description="internal server error"),
     *
     *      @SWG\Parameter(
     *          name="mytest",
     *          in="path",
     *          required=true,
     *          type="string"
     *      ),
     * )
     */
    public function commentSent(Request $request)
    {
    }

    /**
     * @SWG\Get(
     *   path="/instagram/get-hashtag-list",
     *   tags={"Instagram"},
     *   summary="Get instagram hashtag list",
     *   operationId="get-instagram-hashtag-list",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *   @SWG\Response(response=406, description="not acceptable"),
     *   @SWG\Response(response=500, description="internal server error"),
     *
     *      @SWG\Parameter(
     *          name="mytest",
     *          in="path",
     *          required=true,
     *          type="string"
     *      ),
     * )
     */
    public function getHashtagList()
    {
    }

    /**
     * @SWG\Post(
     *   path="/local/instagram-post",
     *   tags={"Local"},
     *   summary="Save Local instagram post",
     *   operationId="save-local-instagram-post",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *   @SWG\Response(response=406, description="not acceptable"),
     *   @SWG\Response(response=500, description="internal server error"),
     *
     *      @SWG\Parameter(
     *          name="mytest",
     *          in="path",
     *          required=true,
     *          type="string"
     *      ),
     * )
     */
    public function saveFromLocal(Request $request)
    {
    }

    public function viewPost(Request $request)
    {
        $accounts = Account::where('platform', 'instagram')->whereNotNull('proxy')->get();

        $data = Post::whereNotNull('id')->paginate(10);

        return view('instagram.post.index', compact(
            'accounts',
            'data'
        ));
    }

    public function users(Request $request)
    {
    }

    /**
     * @SWG\Get(
     *   path="/local/instagram-user-post",
     *   tags={"Local"},
     *   summary="Get Local instagram user post",
     *   operationId="get-local-instagram-user-post",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *   @SWG\Response(response=406, description="not acceptable"),
     *   @SWG\Response(response=500, description="internal server error"),
     *
     *      @SWG\Parameter(
     *          name="mytest",
     *          in="path",
     *          required=true,
     *          type="string"
     *      ),
     * )
     */
    public function getUserForLocal()
    {
    }

    public function instagramUserLogs()
    {
    }

    public function userPost($id)
    {
    }

    public function resizeToRatio()
    {
    }

    public function resize_image_crop($image, $width, $height)
    {
    }

    public function hashtag(Request $request, $word)
    {
        if (strlen($word) >= 3) {
            $url      = sprintf('https://api.ritekit.com/v1/stats/auto-hashtag?post=' . $word . '&maxHashtags=50&hashtagPosition=auto?&client_id=7b3d825c32da1a4eb611bf1eba9706165cfe61a098ae');
            $response = SocialHelper::curlGetRequest($url);

            return $response;
            if ($response->post) {
                return $response->post;
            } else {
                return false;
            }
        }
    }

    public function getHastagifyApiToken()
    {
        $token = \Session()->get('hastagify');
        if ($token) {
            return $token;
        } else {
            $consumerKey    = env('HASTAGIFY_CONSUMER_KEY');
            $consumerSecret = env('HASTAGIFY_CONSUMER_SECRET');

            \Log::error(' hashtagify credentials: ' . $consumerKey . ', ' . $consumerSecret);
            $startTime = date('Y-m-d H:i:s', LARAVEL_START);

            $data = [
                'grant_type'    => 'client_credentials',
                'client_id'     => $consumerKey,
                'client_secret' => $consumerSecret,
            ];
            $url = 'https://api.hashtagify.me/oauth/token';

            $response = Http::post($url, $data)->withHeaders([
                'cache-control' => 'no-cache',
            ]);

            $responseData = $response->json();

            LogRequest::log($startTime, $url, 'POST', json_encode('grant_type=client_credentials&client_id=' . $consumerKey . '&client_secret=' . $consumerSecret),
                $responseData,
                $response->status(),
                InstagramPostsController::class, 'getHastagifyApiToken');

            if ($response->failed) {
                Log::error(' hashtagify response ' . $response);
                Log::error(' hashtagify error' . $response->body);
            } else {
                \Session()->put('hastagify', $responseData['access_token']);

                return $responseData['access_token'];
            }
        }
    }

    public function updateHashtagPost(Request $request)
    {
    }

    public function getImages(Request $request)
    {
        if ($request->type == 'user') {
            $number   = rand(1, 500);
            $response = UnsplashSearch::users($request->keyword, ['page' => $number]);
            $content  = $response->getContents();
            $lists    = json_decode($content);
            $images   = [];
            foreach ($lists->results as $list) {
                $images[] = $list->urls->full;
            }

            return $images ? $images : null;
        } elseif ($request->type == 'collection') {
            $number   = rand(1, 500);
            $response = UnsplashSearch::collections($request->keyword, ['page' => $number]);
            $content  = $response->getContents();
            $lists    = json_decode($content);

            $images = [];
            foreach ($lists->results as $list) {
                $images[] = $list->cover_photo->urls->full;
            }

            return $images ? $images : null;
        } else {
            $number   = rand(1, 500);
            $response = UnsplashSearch::photos($request->keyword, ['page' => $number, 'order_by' => 'latest']);
            $content  = $response->getContents();
            $lists    = json_decode($content);

            $images = [];
            foreach ($lists->results as $list) {
                $images[] = $list->urls->full;
            }

            return $images ? $images : null;
        }
    }

    public function getCaptions()
    {
        $captionArray = [];

        $captions = \App\Caption::all();

        foreach ($captions as $caption) {
            $captionArray[] = ['id' => $caption->id, 'caption' => $caption->caption];
        }

        return $captionArray;
    }

    public function postMultiple(Request $request)
    {
    }

    public function acceptRequest(Request $request)
    {
    }

    public function sendRequest(Request $request)
    {
    }

    public function history(Request $request)
    {
    }

    public function messageQueue(Request $request)
    {
    }

    public function messageQueueSetting(Request $request)
    {
    }

    public function messageQueueApprove(Request $request)
    {
    }

    public function messageQueueApproved(Request $request)
    {
        $chatMessage           = ChatMessage::find($request->chat_id);
        $chatMessage->is_queue = 1;
        $result                = $chatMessage->save();

        if ($result) {
            return response()->json(['message' => 'Approved Successfully']);
        }

        return response()->json(['error' => 'Failed to change status']);
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/InstructionController.php 
Content: <?php

namespace App\Http\Controllers;

use Auth;
use App\User;
use App\Helpers;
use App\Setting;
use App\Customer;
use Carbon\Carbon;
use App\Instruction;
use App\UserActions;
use App\PushNotification;
use App\NotificationQueue;
use App\InstructionCategory;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Pagination\LengthAwarePaginator;

class InstructionController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request)
    {
        $a          = new UserActions();
        $a->action  = 'List';
        $a->page    = 'Instructions';
        $a->details = 'Opened Instruction Page!';
        $a->save();

        $selected_category = $request->category ?? '';
        $orderby           = 'DESC';

        if ($request->orderby != '') {
            $orderby = 'ASC';
        }

        if (Auth::user()->hasRole('Admin')) {
            if ($request->user[0] != null) {
                $instructions           = Instruction::with(['Remarks', 'Customer', 'Category'])->where('verified', 0)->where('pending', 0)->whereNull('completed_at')->whereIn('assigned_to', $request->user);
                $pending_instructions   = Instruction::where('verified', 0)->where('pending', 1)->whereNull('completed_at')->whereIn('assigned_to', $request->user);
                $verify_instructions    = Instruction::where('verified', 0)->whereNotNull('completed_at')->whereIn('assigned_to', $request->user);
                $completed_instructions = Instruction::where('verified', 1)->whereIn('assigned_to', $request->user);

                if ($selected_category != '') {
                    $instructions           = $instructions->where('category_id', $selected_category);
                    $pending_instructions   = $pending_instructions->where('category_id', $selected_category);
                    $verify_instructions    = $verify_instructions->where('category_id', $selected_category);
                    $completed_instructions = $completed_instructions->where('category_id', $selected_category);
                }
            } else {
                $instructions           = Instruction::with(['Remarks', 'Customer', 'Category'])->where('verified', 0)->where('pending', 0)->whereNull('completed_at');
                $pending_instructions   = Instruction::where('verified', 0)->where('pending', 1)->whereNull('completed_at');
                $verify_instructions    = Instruction::where('verified', 0)->whereNotNull('completed_at');
                $completed_instructions = Instruction::where('verified', 1);

                if ($selected_category != '') {
                    $instructions           = $instructions->where('category_id', $selected_category);
                    $pending_instructions   = $pending_instructions->where('category_id', $selected_category);
                    $verify_instructions    = $verify_instructions->where('category_id', $selected_category);
                    $completed_instructions = $completed_instructions->where('category_id', $selected_category);
                }
            }
        } else {
            $instructions           = Instruction::with(['Remarks', 'Customer', 'Category'])->where('verified', 0)->where('pending', 0)->whereNull('completed_at')->where('assigned_to', Auth::id());
            $pending_instructions   = Instruction::where('verified', 0)->where('pending', 1)->whereNull('completed_at')->where('assigned_to', Auth::id());
            $verify_instructions    = Instruction::where('verified', 0)->whereNotNull('completed_at')->where('assigned_to', Auth::id());
            $completed_instructions = Instruction::where('verified', 1)->where('assigned_to', Auth::id());

            if ($selected_category != '') {
                $instructions           = $instructions->where('category_id', $selected_category);
                $pending_instructions   = $pending_instructions->where('category_id', $selected_category);
                $verify_instructions    = $verify_instructions->where('category_id', $selected_category);
                $completed_instructions = $completed_instructions->where('category_id', $selected_category);
            }
        }

        $users_array = Helpers::getUserArray(User::all());
        $user        = $request->user ? $request->user : [];

        $instructions           = $instructions->orderBy('is_priority', 'DESC')->orderBy('created_at', $orderby)->paginate(Setting::get('pagination'));
        $pending_instructions   = $pending_instructions->orderBy('created_at', $orderby)->paginate(Setting::get('pagination'), ['*'], 'pending-page');
        $verify_instructions    = $verify_instructions->orderBy('completed_at', 'DESC')->paginate(Setting::get('pagination'), ['*'], 'verify-page');
        $completed_instructions = $completed_instructions->orderBy('completed_at', 'DESC')->paginate(Setting::get('pagination'), ['*'], 'completed-page');
        $ids_list               = [];
        foreach ($instructions as $data) {
            foreach ($data as $instruction) {
                $ids_list[] = $instruction['customer'] ? $instruction['customer']['id'] : '';
            }
        }

        $categories_array       = [];
        $instruction_categories = InstructionCategory::all();

        foreach ($instruction_categories as $category) {
            $categories_array[$category->id]['name'] = $category->name;
            $categories_array[$category->id]['icon'] = $category->icon;
        }

        return view('instructions.index')->with([
            'instructions'           => $instructions,
            'pending_instructions'   => $pending_instructions,
            'verify_instructions'    => $verify_instructions,
            'completed_instructions' => $completed_instructions,
            'users_array'            => $users_array,
            'user'                   => $user,
            'orderby'                => $orderby,
            'categories_array'       => $categories_array,
            'customer_ids_list'      => json_encode($ids_list),
            'selected_category'      => $selected_category,
        ]);
    }

    public function list(Request $request)
    {
        $a          = new UserActions();
        $a->action  = 'List';
        $a->page    = 'Instructions';
        $a->details = 'Oened Instructions List Page';
        $a->save();

        $orderby = 'desc';

        if ($request->orderby) {
            $orderby = 'asc';
        }

        $instructions           = Instruction::with(['Remarks', 'Customer', 'Category'])->where('verified', 0)->where('pending', 0)->whereNull('completed_at')->where('assigned_from', Auth::id())->orderBy('id', $orderby);
        $pending_instructions   = Instruction::where('verified', 0)->where('pending', 1)->whereNull('completed_at')->where('assigned_from', Auth::id())->orderBy('id', $orderby);
        $verify_instructions    = Instruction::where('verified', 0)->whereNotNull('completed_at')->where('assigned_from', Auth::id())->orderBy('id', $orderby);
        $completed_instructions = Instruction::where('verified', 1)->where('assigned_from', Auth::id())->orderBy('id', $orderby);

        if ($request->category_id) {
            $instructions           = $instructions->where('category_id', $request->category_id);
            $pending_instructions   = $pending_instructions->where('category_id', $request->category_id);
            $verify_instructions    = $verify_instructions->where('category_id', $request->category_id);
            $completed_instructions = $completed_instructions->where('category_id', $request->category_id);
        }

        if (! empty($request->user) && is_array($request->user)) {
            $instructions           = $instructions->whereIn('assigned_to', $request->user);
            $pending_instructions   = $pending_instructions->whereIn('assigned_to', $request->user);
            $verify_instructions    = $verify_instructions->whereIn('assigned_to', $request->user);
            $completed_instructions = $completed_instructions->whereIn('assigned_to', $request->user);
        }

        if ($request->term) {
            $term = $request->term;
            $sql  = "(customer_id in (select id from customers where name like '%" . $term . "%') or instruction like '%" . $term . "%')";

            $instructions           = $instructions->whereRaw($sql);
            $pending_instructions   = $pending_instructions->whereRaw($sql);
            $verify_instructions    = $verify_instructions->whereRaw($sql);
            $completed_instructions = $completed_instructions->whereRaw($sql);
        }

        if ($request->start_date) {
            $instructions           = $instructions->where('start_time', '>=', $request->start_date);
            $pending_instructions   = $pending_instructions->where('start_time', '>=', $request->start_date);
            $verify_instructions    = $verify_instructions->where('start_time', '>=', $request->start_date);
            $completed_instructions = $completed_instructions->where('start_time', '>=', $request->start_date);
        }

        if ($request->end_date) {
            $instructions           = $instructions->where('end_time', '<=', $request->end_date);
            $pending_instructions   = $pending_instructions->where('end_time', '<=', $request->end_date);
            $verify_instructions    = $verify_instructions->where('end_time', '<=', $request->end_date);
            $completed_instructions = $completed_instructions->where('end_time', '<=', $request->end_date);
        }

        $instructions           = $instructions->get()->toArray();
        $pending_instructions   = $pending_instructions->paginate(Setting::get('pagination'), ['*'], 'pending-page');
        $verify_instructions    = $verify_instructions->paginate(Setting::get('pagination'), ['*'], 'verify-page');
        $completed_instructions = $completed_instructions->paginate(Setting::get('pagination'), ['*'], 'completed-page');

        $users_array = Helpers::getUserArray(User::all());
        $user        = $request->user ? $request->user : [];

        $currentPage  = LengthAwarePaginator::resolveCurrentPage();
        $perPage      = Setting::get('pagination');
        $currentItems = array_slice($instructions, $perPage * ($currentPage - 1), $perPage);

        $instructions = new LengthAwarePaginator($currentItems, count($instructions), $perPage, $currentPage, [
            'path' => LengthAwarePaginator::resolveCurrentPath(),
        ]);

        $categories_array       = [];
        $instruction_categories = InstructionCategory::all();

        foreach ($instruction_categories as $category) {
            $categories_array[$category->id]['name'] = $category->name;
            $categories_array[$category->id]['icon'] = $category->icon;
        }

        return view('instructions.list')->with([
            'instructions'           => $instructions,
            'pending_instructions'   => $pending_instructions,
            'verify_instructions'    => $verify_instructions,
            'completed_instructions' => $completed_instructions,
            'users_array'            => $users_array,
            'user'                   => $user,
            'orderby'                => $orderby,
            'categories_array'       => $categories_array,
        ]);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $this->validate($request, [
            'instruction' => 'required|min:3',
            'customer_id' => 'required|numeric',
            'assigned_to' => 'required|numeric',
        ]);

        $instruction                = new Instruction;
        $instruction->category_id   = $request->category_id;
        $instruction->instruction   = $request->instruction;
        $instruction->customer_id   = $request->customer_id;
        $instruction->assigned_from = Auth::id();
        $instruction->assigned_to   = $request->assigned_to;
        $instruction->is_priority   = $request->is_priority == 'on' ? 1 : 0;

        $instruction->save();

        if ($request->send_whatsapp === 'send') {
            $user      = User::find($instruction->assigned_to);
            $myRequest = new Request();
            $myRequest->setMethod('POST');
            $myRequest->request->add(['remark' => 'Auto message was sent.', 'id' => $instruction->id, 'module_type' => 'instruction']);

            app(\App\Http\Controllers\TaskModuleController::class)->addRemark($myRequest);
            app(\App\Http\Controllers\WhatsAppController::class)->sendWithWhatsApp($user->phone, $user->whatsapp_number, $instruction->instruction);
        }

        $a          = new UserActions();
        $a->action  = 'List';
        $a->page    = 'Instructions';
        $a->details = 'Oened Instructions List Page';
        $a->save();

        if ($request->ajax()) {
            return response('success');
        }

        return back()->with('success', 'You have successfully created instruction!');
    }

    public function categoryStore(Request $request)
    {
        $this->validate($request, [
            'name' => 'required|min:3|max:255',
        ]);

        $data = $request->except('_token');

        InstructionCategory::create($data);

        return redirect()->back()->with('success', 'You have successfully created instruction category!');
    }

    /**
     * Display the specified resource.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        $data = $request->except(['_token', '_method']);

        Instruction::find($id)->update($data);

        return redirect()->route('instruction.index')->withSuccess('You have successfully updated instruction!');
    }

    public function complete(Request $request)
    {
        $instruction               = Instruction::find($request->id);
        $instruction->completed_at = Carbon::now();

        $instructionTime = \App\InstructionTime::where('instructions_id', $request->id)->where('end', '0000-00-00 00:00:00')->orderBy('id', 'desc')->first();
        if ($instructionTime) {
            $instruction->end_time = Carbon::now();
            $instructionTime->end  = date('Y-m-d H:i:s');

            $diff                           = date_diff(date_create($instructionTime->start), date_create(date('Y-m-d H:i:s')));
            $instructionTime->total_minutes = $diff->format('%i');
            $instructionTime->save();
        }

        $instruction->save();

        NotificationQueue::where('model_type', \App\Instruction::class)->where('model_id', $instruction->id)->delete();
        PushNotification::where('model_type', \App\Instruction::class)->where('model_id', $instruction->id)->delete();

        $url = route('customer.show', $instruction->customer->id) . '#internal-message-body';

        Customer::where('id', $instruction->customer->id)->update([
            'instruction_completed_at' => Carbon::now()->toDateTimeString(),
        ]);

        return response()->json(['instruction' => $instruction->instruction, 'time' => "$instruction->completed_at", 'url' => "$url"]);
    }

    public function pending(Request $request)
    {
        $instruction          = Instruction::find($request->id);
        $instruction->pending = 1;
        $instruction->save();

        return response('success');
    }

    public function verify(Request $request)
    {
        $instruction           = Instruction::find($request->id);
        $instruction->verified = 1;
        $instruction->save();

        return response('success');
    }

    public function skippedCount(Request $request)
    {
        $instruction = Instruction::find($request->id)->increment('skipped_count', 1);

        return response('success');
    }

    public function verifySelected(Request $request)
    {
        $selected_instructions = json_decode($request->selected_instructions);

        foreach ($selected_instructions as $selection) {
            $instruction = Instruction::find($selection);

            if ($instruction['assigned_from'] == Auth::id() || Auth::user()->hasRole('Admin')) {
                $instruction->verified = 1;
                $instruction->save();
            }
        }

        return redirect()->route('instruction.index')->withSuccess('You have successfully verified instructions');
    }

    public function completeAlert(Request $request)
    {
        $instruction = Instruction::find($request->id);

        PushNotification::where('model_type', \App\Instruction::class)->where('model_id', $request->id)->delete();

        return redirect()->route('instruction.index');
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        //
    }

    public function quickInstruction(Request $request)
    {
        // Load first open instruction
        $instructions = Instruction::where('verified', 0)->whereNull('completed_at')->whereNotNull('customer_id');

        // Set type
        if ($request->type != null) {
            $instructions = $instructions->where('instruction', 'like', '%' . $request->type . '%');
        }

        // For non-admins
        if (! Auth::user()->hasRole('Admin')) {
            $instructions = $instructions->where('assigned_to', Auth::id());
        }

        if ($request->skippedCount != null) {
            $instructions = $instructions->where('skipped_count', '!=', '0');
        } else {
            $instructions = $instructions->where('skipped_count', '0');
        }

        // Get the first instruction
        $instruction     = $instructions->orderBy('id', 'desc')->first();
        $instructionTime = null;
        if ($instruction) {
            $instructionTime = \App\InstructionTime::create([
                'start'           => date('Y-m-d H:i:s'),
                'instructions_id' => $instruction->id,
            ]);

            if (empty($instruction->start_time)) {
                $instruction->start_time = date('Y-m-d H:i:s');
                $instruction->save();
            }
        }

        $nextActionArr    = DB::table('customer_next_actions')->pluck('name', 'id');
        $groups           = \App\QuickSellGroup::select('id', 'name', 'group')->orderby('id', 'DESC')->get();
        $reply_categories = \App\ReplyCategory::all();
        $users_array      = Helpers::getUserArray(\App\User::all());
        $settingShortCuts = [
            'image_shortcut'      => \App\Setting::get('image_shortcut'),
            'price_shortcut'      => \App\Setting::get('price_shortcut'),
            'call_shortcut'       => \App\Setting::get('call_shortcut'),
            'screenshot_shortcut' => \App\Setting::get('screenshot_shortcut'),
            'details_shortcut'    => \App\Setting::get('details_shortcut'),
            'purchase_shortcut'   => \App\Setting::get('purchase_shortcut'),
        ];

        $category_suggestion = \App\Category::attr(['name' => 'category[]', 'class' => 'form-control select-multiple', 'multiple' => 'multiple'])->renderAsDropdown();
        $brands              = \App\Brand::all();
        $category_array      = \App\Category::renderAsArray();

        $skippedCount = Instruction::where('verified', 0)->whereNull('completed_at')->whereNotNull('customer_id')->where('skipped_count', '!=', '0')->count();

        // Return the view with the first instruction
        return view('instructions.quick-instruction')->with([
            'instruction'         => $instruction,
            'type'                => $request->type ?? '',
            'customer'            => $instruction ? $instruction->customer : '',
            'nextActionArr'       => $nextActionArr,
            'groups'              => $groups,
            'reply_categories'    => $reply_categories,
            'settingShortCuts'    => $settingShortCuts,
            'users_array'         => $users_array,
            'category_suggestion' => $category_suggestion,
            'brands'              => $brands,
            'category_array'      => $category_array,
            'skippedCount'        => $skippedCount,
            'instructionTime'     => $instructionTime,
        ]);
    }

    public function storeInstructionEndTime(Request $request)
    {
        $instructionTime = \App\InstructionTime::where('id', $request->get('id'))->first();
        $instruction     = \App\Instruction::where('id', $request->get('instructions_id'))->first();
        if ($instructionTime) {
            $instructionTime->end = date('Y-m-d H:i:s');

            $diff                           = date_diff(date_create($instructionTime->start), date_create(date('Y-m-d H:i:s')));
            $instructionTime->total_minutes = $diff->format('%i');
            $instructionTime->save();
        }

        if ($instruction) {
            $instruction->end_time = date('Y-m-d H:i:s');
            $instruction->save();
        }

        return response()->json(['msg' => 'success']);
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/KeywordassignController.php 
Content: <?php

namespace App\Http\Controllers;

use DB;
use Illuminate\Http\Request;
use App\KeywordAutoGenratedMessageLog;

class KeywordassignController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request)
    {
        $keywordassign = DB::table('keywordassigns')
            ->select('keywordassigns.id', 'keywordassigns.keyword', 'task_categories.title', 'keywordassigns.task_description', 'users.name')
            ->leftJoin('users', 'keywordassigns.assign_to', '=', 'users.id')
            ->leftJoin('task_categories', 'keywordassigns.task_category', '=', 'task_categories.id')
            ->orderBy('id')
            ->get();

        return view('keywordassign.index', compact('keywordassign'));
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        $task_category = DB::table('task_categories')->select('*')->get();
        $userslist     = DB::table('users')->select('*')->get();

        return view('keywordassign.create', compact('task_category', 'userslist'));
    }

    /**
     * Store a newly created resource in storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $task = $this->validate(request(), [
            'keyword'          => 'required',
            'task_category'    => 'required',
            'task_description' => 'required',
            'assign_to'        => 'required',
        ]);
        // Create the task
        $exp_keyword    = explode(',', $request->keyword);
        $new_keywordstr = '';
        for ($i = 0; $i < count($exp_keyword); $i++) {
            $new_keywordstr .= trim($exp_keyword[$i]) . ',';
        }
        $keyword          = trim($new_keywordstr, ',');
        $task_category    = $request->task_category;
        $task_description = $request->task_description;
        $assign_to        = $request->assign_to;
        $created_at       = date('Y-m-d H:i:s');
        $updated_at       = date('Y-m-d H:i:s');
        $insert_data      = [
            'keyword'          => $keyword,
            'task_category'    => $task_category,
            'task_description' => $task_description,
            'assign_to'        => $assign_to,
            'created_at'       => $created_at,
            'updated_at'       => $updated_at,
        ];
        DB::table('keywordassigns')->insert($insert_data);

        return redirect()->route('keywordassign.index')
            ->with('success', 'Keyword assign created successfully.');
    }

    /**
     * Display the specified resource.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        //
        $keywordassign = DB::table('keywordassigns')->select('*')->where('id', $id)->get();
        $task_category = DB::table('task_categories')->select('*')->get();
        $userslist     = DB::table('users')->select('*')->get();

        return view('keywordassign.edit', compact('keywordassign', 'task_category', 'userslist'));
    }

    /**
     * Update the specified resource in storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        $task = $this->validate(request(), [
            'keyword'          => 'required',
            'task_category'    => 'required',
            'task_description' => 'required',
            'assign_to'        => 'required',
        ]);
        // Create the task
        $keyword          = $request->keyword;
        $task_category    = $request->task_category;
        $task_description = $request->task_description;
        $assign_to        = $request->assign_to;
        $updated_at       = date('Y-m-d H:i:s');
        $insert_data      = [
            'keyword'          => $keyword,
            'task_category'    => $task_category,
            'task_description' => $task_description,
            'assign_to'        => $assign_to,
            'updated_at'       => $updated_at,
        ];
        $affected = DB::table('keywordassigns')
            ->where('id', $id)
            ->update($insert_data);

        return redirect()->route('keywordassign.index')
            ->with('success', 'Keyword assign updated successfully.');
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        DB::table('keywordassigns')->where('id', '=', $id)->delete();

        return redirect()->route('keywordassign.index')
            ->with('success', 'Keyword assign deleted successfully.');
    }

    public function taskcategory(Request $request)
    {
        $task_category_name = $request->task_category_name;
        $insert_data        = [
            'parent_id' => 0,
            'title'     => $task_category_name,
        ];
        DB::table('task_categories')->insert($insert_data);
        $id = DB::getPdo()->lastInsertId();

        return response()->json(['code' => 200, 'data' => ['id' => $id, 'Category' => $task_category_name], 'message' => 'Task Category Inserted']);
    }

    //START - Purpose : create function for get data - DEVTASK-4233
    public function keywordreponse_logs(Request $request)
    {
        try {
            $query = KeywordAutoGenratedMessageLog::orderBy('id', 'DESC');

            if ($request->get('keyword') != '') {
                $keywordlogs = $query->where('keyword', 'like', '%' . $request->get('keyword') . '%');
            }

            if ($request->get('keyword_duedate') != '') {
                $keywordlogs = $query->whereDate('created_at', '=', $request->get('keyword_duedate'));
            }

            $keywordlogs = $query->paginate(30);

            return view('keywordassign.logs', compact('keywordlogs', 'request'));
        } catch (Exception $e) {
        }
    }
    //END - DEVTASK-4233
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/LandingPageController.php 
Content: <?php

namespace App\Http\Controllers;

use App\Brand;
use App\Product;
use App\Category;
use App\StoreWebsite;
use App\LandingPageStatus;
use App\Jobs\PushToMagento;
use App\LandingPageProduct;
use Illuminate\Http\Request;
use App\Helpers\StatusHelper;
use Illuminate\Support\Carbon;
use App\Loggers\LogListMagento;
use Illuminate\Support\Facades\Auth;
use App\Services\Products\GraphqlService;
use Illuminate\Support\Facades\Validator;
use App\Library\Shopify\Client as ShopifyClient;

class LandingPageController extends Controller
{
    const GALLERY_TAG_NAME = 'gallery';

    public function __construct()
    {
    }

    public function index(Request $request)
    {
        $title          = 'Landing Page';
        $status         = \App\LandingPageProduct::STATUS;
        $store_websites = null;
        $statuses       = \App\LandingPageStatus::all()->pluck('name')->toArray();

        return view('landing-page.index', compact(['title', 'status', 'store_websites', 'statuses']));
    }

    public function records(Request $request)
    {
        $brandName = request('brand');
        if ($brandName != null) {
            $brand   = Brand::where('name', 'like', "%$brandName%")->first();
            $brandId = isset($brand) ? $brand->id : null;

            $records = \App\LandingPageProduct::with(['landing_page_status'])->join('products as p', function ($query) use ($brandId) {
                $query->on('p.id', '=', 'landing_page_products.product_id');
                $query->where('p.brand', $brandId);
            });
        } else {
            $records = \App\LandingPageProduct::with(['landing_page_status'])->join('products as p', 'p.id', 'landing_page_products.product_id');
        }

        $keyword = request('keyword');
        if (! empty($keyword)) {
            $records = $records->where(function ($q) use ($keyword) {
                $q->where('product_id', 'LIKE', "%$keyword%");
            });
        }

        $stockStatus = request('stock_status');
        if ($stockStatus != null) {
            $records = $records->where('landing_page_products.stock_status', $stockStatus);
        }

        $productStatus = request('product_status');

        if ($productStatus != null) {
            $records = $records->where('p.status_id', $productStatus);
        }

        $status = request('status');
        if ($status != null) {
            $records = $records->where('landing_page_products.status', $status);
        }

        $dateFrom = request('date_from');
        if ($dateFrom != null) {
            $records = $records->where('landing_page_products.created_at', '>=', $dateFrom);
        }

        $dateTo = request('date_to');
        if ($dateTo != null) {
            $records = $records->where('landing_page_products.created_at', '<=', $dateTo);
        }

        $records        = $records->select(['landing_page_products.*', 'p.status_id', 'p.stock'])->latest()->paginate();
        $store_websites = StoreWebsite::where('website_source', '=', 'shopify')->get();

        $items     = [];
        $allStatus = StatusHelper::getStatus();
        foreach ($records->items() as &$rec) {
            $landingPageProduct = $rec->product;
            if (! $landingPageProduct) {
                continue;
            }
            if ($landingPageProduct) {
                if (array_key_exists($landingPageProduct->status_id, $allStatus)) {
                    $rec->productStatus = $allStatus[$landingPageProduct->status_id];
                } else {
                    $rec->productStatus = '';
                }
            } else {
                $rec->productStatus = '';
            }

            $productData['images'] = [];
            if ($landingPageProduct->hasMedia(config('constants.attach_image_tag'))) {
                $c = 0;
                foreach ($landingPageProduct->getAllMediaByTag() as $medias) {
                    foreach ($medias as $image) {
                        $temp = false;
                        if ($c == 0) {
                            $temp = true;
                        }
                        array_push($productData['images'], ['url' => getMediaUrl($image), 'id' => $image->id, 'product_id' => $landingPageProduct->id, 'show' => $temp]);
                        $c++;
                    }
                }
            }
            $rec->images      = $productData['images'];
            $previousVal      = isset(\App\LandingPageProduct::STATUS[$rec->status]) ? \App\LandingPageProduct::STATUS[$rec->status] : $rec->status;
            $rec->status_name = isset($rec->landing_page_status) ? $rec->landing_page_status->name : $previousVal;
            $rec->brand_name  = isset($rec->product->brands->name) ? $rec->product->brands->name : null;
            $rec['stores']    = $store_websites;
            $rec->short_dec   = (strlen($rec->description) > 15) ? substr($rec->description, 0, 15) . '..' : $rec->description;
            $rec->short_dec   = utf8_encode($rec->short_dec);
            $rec->created     = explode(' ', $rec->created_at)[0];
            $rec->start_date  = Carbon::parse($rec->start_date)->format('Y-m-d');
            $rec->end_date    = Carbon::parse($rec->end_date)->format('Y-m-d');
            $items[]          = $rec;
        }

        return response()->json(['code' => 200, 'data' => $items, 'total' => $records->total(), 'pagination' => (string) $records->render()]);
    }

    public function save(Request $request)
    {
        $params     = $request->all();
        $productIds = json_decode($request->get('images'), true);

        $errorMessage = [];

        if (! empty($productIds)) {
            foreach ($productIds as $productId) {
                $product = \App\Product::find($productId);
                if ($product) {
                    if ($product->category > 3 && $product->hasMedia(config('constants.media_original_tag'))) {
                        // check status if not cropped then send to the cropper first
                        foreach ($product->getAllMediaByTag() as $tag => $medias) {
                            // if there is specific color then only send the images
                            if (strpos($tag, self::GALLERY_TAG_NAME) !== false) {
                                foreach ($medias as $image) {
                                    $image->delete();
                                }
                            }
                        }
                        $product->status_id      = StatusHelper::$autoCrop;
                        $product->scrap_priority = 1;
                        // save product
                        $product->save();
                        \App\LandingPageProduct::updateOrCreate(
                            ['product_id' => $productId],
                            ['product_id' => $productId, 'name' => $product->name, 'description' => $product->short_description, 'price' => $product->price]
                        );
                    } else {
                        $errorMessage[] = 'Product has no category or images : ' . $productId;
                    }
                } else {
                    $errorMessage[] = "Product not found : {$productId}";
                }
            }
        }

        if (count($errorMessage) > 0) {
            return redirect()->route('landing-page.index')->withError('There was some issue for given products : ' . implode('<br>', $errorMessage));
        }

        return redirect()->route('landing-page.index')->withSuccess('You have successfully added landing page!');
    }

    public function store(Request $request)
    {
        $post = $request->all();

        $validator = Validator::make($post, [
            'product_id' => 'required',
            'start_date' => 'required',
            'end_date'   => 'required',
        ]);

        if ($validator->fails()) {
            $outputString = '';
            $messages     = $validator->errors()->getMessages();
            foreach ($messages as $k => $errr) {
                foreach ($errr as $er) {
                    $outputString .= "$k : " . $er . '<br>';
                }
            }

            return response()->json(['code' => 500, 'error' => $outputString]);
        }

        $id = $request->get('id', 0);

        $records = LandingPageProduct::find($id);

        if (! $records) {
            $records = new LandingPageProduct;
        }

        if (! Auth::user()->isAdmin) {
            $userUploadedStatus             = LandingPageStatus::where('name', LandingPageProduct::STATUS['USER_UPLOADED'])->first();
            $post['landing_page_status_id'] = isset($userUploadedStatus) ? $userUploadedStatus->id : null;
        } else {
            $post['landing_page_status_id'] = $post['status'] + 1; //plus 1 because of comes with array keys, which equal key + 1
        }

        unset($post['status']);

        $records->fill($post);
        $records->save();

        return response()->json(['code' => 200, 'data' => $records]);
    }

    /**
     * Edit Page
     *
     * @param Request $request [description]
     * @param mixed   $id
     */
    public function edit(Request $request, $id)
    {
        $landingPage = LandingPageProduct::where('id', $id)->first();

        if ($landingPage) {
            return response()->json(['code' => 200, 'data' => $landingPage]);
        }

        return response()->json(['code' => 500, 'error' => 'Wrong row id!']);
    }

    /**
     * delete Page
     *
     * @param Request $request [description]
     * @param mixed   $id
     */
    public function delete(Request $request, $id)
    {
        $landingPage = LandingPageProduct::where('id', $id)->first();

        if ($landingPage) {
            $landingPage->delete();

            return response()->json(['code' => 200]);
        }

        return response()->json(['code' => 500, 'error' => 'Wrong row id!']);
    }

    public function pushToShopify(Request $request, $id)
    {
        $landingPage = LandingPageProduct::where('id', $id)->first();
        if (! empty($landingPage) && $landingPage->store_website_id > 0) {
            // if stock status exist then store it
            if ($request->stock_status != null) {
                $landingPage->stock_status = $request->stock_status;
                if ($landingPage->stock_status == 1) {
                    $landingPage->start_date = date('Y-m-d H:i:s');
                    $landingPage->end_date   = date('Y-m-d H:i:s', strtotime($landingPage->start_date . ' + 1 days'));
                }
                $landingPage->save();
            }

            // Set data for Shopify
            $landingPageProduct = $landingPage->product;
            $productData        = $landingPage->getShopifyPushData();
            LogListMagento::log($landingPageProduct->id, 'Product started to push' . $landingPageProduct->id, 'info', $landingPage->store_website_id, 'started');

            if ($productData == false) {
                return response()->json(['code' => 500, 'data' => '', 'message' => 'Pushing Failed: product is not approved']);
            }

            $client = new ShopifyClient();
            if ($landingPage->shopify_id) {
                $response = $client->updateProduct($landingPage->shopify_id, $productData, null, $landingPage->store_website_id);
            } else {
                $response = $client->addProduct($productData, $landingPage->store_website_id);
            }

            $errors = [];
            if (! empty($response->errors)) {
                foreach ((array) $response->errors as $key => $message) {
                    if (is_array($message)) {
                        foreach ($message as $msg) {
                            $errors[] = ucwords($key) . ' ' . $msg;
                        }
                    } else {
                        $errors[] = ucwords($key) . ' ' . $message;
                    }
                }
            }

            if (! empty($errors)) {
                LogListMagento::log($landingPageProduct->id, 'error ' . $landingPageProduct->id, 'info', $landingPage->store_website_id, 'error');

                return response()->json(['code' => 500, 'data' => $response, 'message' => implode('<br>', $errors)]);
            }

            if (! empty($response->product)) {
                LogListMagento::log($landingPageProduct->id, 'success ' . $landingPageProduct->id, 'info', $landingPage->store_website_id, 'success');
                $landingPage->shopify_id = $response->product->id;
                $landingPage->save();

                $selfProduct  = Product::find($landingPage->product_id);
                $selfCategory = Category::find($selfProduct->category);

                if ($selfProduct) {
                    $storeWebsiteUrl = StoreWebsite::find($landingPage->store_website_id);

                    if ($storeWebsiteUrl) {
                        GoogleTranslateController::translateProductDetails($selfProduct);
                        if (! empty($selfCategory->title)) {
                            GoogleTranslateController::translateGeneralDetails(['text' => $selfCategory->title]); //DEVTASK-3272
                        }
                        GraphqlService::sendTranslationByGrapql($landingPage->shopify_id, $landingPage->product_id, $storeWebsiteUrl->magento_url, $storeWebsiteUrl->magento_password, $storeWebsiteUrl);
                    }

                    return response()->json(['code' => 200, 'data' => $response->product, 'message' => 'Success!']);
                } else {
                    return response()->json(['code' => 500, 'data' => [], 'message' => 'Product not found.']);
                }
            }
        }

        return response()->json(['code' => 500, 'data' => [], 'message' => 'Records not found or not store website assigned']);
    }

    public function pushToMagentoPro(Request $request, $id)
    {
        $landingPage = LandingPageProduct::where('id', $id)->first();
        $queueName   = [
            '1' => 'mageone',
            '2' => 'magetwo',
            '3' => 'magethree',
        ];
        $i = 1;
        if (! empty($landingPage) && $landingPage->store_website_id > 0) {
            // Get product by ID
            $product       = Product::find($landingPage->product_id);
            $websiteArrays = StoreWebsite::where('id', $landingPage->store_website_id)->first();
            if ($websiteArrays) {
                \Log::info('Product started website found For website' . $websiteArrays->website);
                LogListMagento::log($product->id, 'Start push to magento for product id ' . $product->id, 'info', $websiteArrays->id);
                PushToMagento::dispatch($product, $websiteArrays)->onQueue($queueName[$i]);

                return response()->json(['code' => 200, 'data' => '', 'message' => 'Success!']);
            } else {
                return response()->json(['code' => 500, 'data' => '', 'message' => 'Please select the store website!']);
            }
        }
    }

    public function updateMagentoStock(Request $request, $id)
    {
        $landingPage = LandingPageProduct::where('id', $id)->first();
        // if stock status exist then store it
        if ($request->stock_status != null) {
            $landingPage->stock_status = $request->stock_status;
            if ($landingPage->stock_status == 1) {
                $landingPage->start_date = date('Y-m-d H:i:s');
                $landingPage->end_date   = date('Y-m-d H:i:s', strtotime($landingPage->start_date . ' + 1 days'));
            }
            $landingPage->save();

            return response()->json(['code' => 200, 'data' => '', 'message' => 'Success!']);
        } else {
            return response()->json(['code' => 500, 'data' => '', 'message' => 'Please select the store website!']);
        }
    }

    public function updateTime(Request $request)
    {
        $productIds = explode(',', $request->product_id);
        foreach ($productIds as $productId) {
            LandingPageProduct::where('product_id', '=', $productId)->update(['start_date' => $request->start_date, 'end_date' => $request->end_date]);
        }

        return redirect()->back();
    }

    public function deleteImage($id, $productId)
    {
        \DB::table('mediables')->where('mediable_type', \App\Product::class)
            ->where('media_id', $id)
            ->where('mediable_id', $productId)
            ->delete();

        return response()->json(['code' => 200, 'data' => '', 'message' => 'Success!']);
    }

    public function changeStore(Request $request, $id)
    {
        $landing = \App\LandingPageProduct::find($id);

        if ($landing && $request->get('store_website_id') != null) {
            $landing->store_website_id = $request->get('store_website_id');
            $landing->shopify_id       = null;
            $landing->save();

            return response()->json(['code' => 200, 'data' => '', 'message' => 'Success!']);
        } else {
            return response()->json(['code' => 500, 'data' => '', 'message' => 'Please select the store website!']);
        }
    }

    public function createStatus(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'status' => 'required|string',
        ]);

        if ($validator->fails()) {
            return response()->json(['code' => 422, 'message' => 'Incorrect input!']);
        } else {
            $status       = new LandingPageStatus();
            $status->name = $request->status;
            $status->save();

            return response()->json(['code' => 200, 'data' => '', 'message' => 'Success!']);
        }
    }

    public function approveStatus(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'id' => 'required|integer',
        ]);

        if ($validator->fails()) {
            return response()->json(['code' => 422, 'message' => 'Incorrect input!']);
        } else {
            if ($request->approve) {
                $lpProduct = LandingPageProduct::find($request->id);
                if ($lpProduct) {
                    $lpProduct->landing_page_status_id = LandingPageProduct::STATUS['APPROVED'];
                    $lpProduct->save();

                    return response()->json(['code' => 200, 'data' => '', 'message' => 'Success!']);
                }
            }

            return response()->json(['code' => 500, 'data' => '', 'message' => 'Not Approved!']);
        }
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/LaravelLogController.php 
Content: <?php

namespace App\Http\Controllers;

use File;
use App\User;
use App\Setting;
use App\LaravelLog;
use App\LogKeyword;
use App\ChatMessage;
use Illuminate\Http\Request;
use Illuminate\Pagination\LengthAwarePaginator;

class LaravelLogController extends Controller
{
    public $channel_filter = [];

    public function index(Request $request)
    {
        if ($request->filename || $request->log || $request->log_created || $request->created || $request->updated || $request->orderCreated || $request->orderUpdated || $request->modulename || $request->controllername || $request->action) {
            $query = LaravelLog::query();

            if (request('filename') != null) {
                $query->where('filename', 'LIKE', "%{$request->filename}%");
            }

            if (request('log') != null) {
                $query->where('log', 'LIKE', "%{$request->log}%");
            }

            if (request('modulename') != null) {
                $query->where('module_name', request('modulename'));
            }

            if (request('controllername') != null) {
                $query->where('controller_name', request('controllername'));
            }

            if (request('action') != null) {
                $query->where('action', request('action'));
            }

            if (request('log_created') != null) {
                $query->whereDate('log_created', request('log_created'));
            }

            if (request('created') != null) {
                $query->whereDate('created_at', request('created'));
            }

            if (request('updated') != null) {
                $query->whereDate('updated_at', request('updated'));
            }

            if (request('orderCreated') != null) {
                if (request('orderCreated') == 0) {
                    $query->orderby('created_at', 'asc');
                } else {
                    $query->orderby('created_at', 'desc');
                }
            }

            if (request('orderUpdated') != null) {
                if (request('orderUpdated') == 0) {
                    $query->orderby('updated_at', 'asc');
                } else {
                    $query->orderby('updated_at', 'desc');
                }
            }

            if (request('orderCreated') == null && request('orderUpdated') == null) {
                $query->orderby('log_created', 'desc');
            }

            $paginate = (Setting::get('pagination') * 10);
            $logs     = $query->paginate($paginate)->appends(request()->except(['page']));
        } else {
            $paginate = (Setting::get('pagination') * 10);
            $logs     = LaravelLog::orderby('updated_at', 'desc')->paginate($paginate);
        }

        if ($request->ajax()) {
            return response()->json([
                'tbody' => view('logging.partials.laraveldata', compact('logs'))->render(),
                'links' => (string) $logs->render(),
                'count' => $logs->total(),
            ], 200);
        }

        return view('logging.laravellog', compact('logs'));
    }

    public function liveLogsSingle(Request $request)
    {
        $filename     = '/laravel-' . now()->format('Y-m-d') . '.log';
        $path         = storage_path('logs');
        $fullPath     = $path . $filename;
        $errSelection = [];
        try {
            $content = File::get($fullPath);
            preg_match_all("/\[(\d{4})-(\d{2})-(\d{2}) (\d{2}):(\d{2}):(\d{2})\](.*)/", $content, $match);
            $errorTypeArr       = ['ERROR', 'INFO', 'WARNING'];
            $errorTypeSeparated = implode('|', $errorTypeArr);

            $defaultSearchTerm = 'ERROR';
            if ($request->get('type')) {
                $defaultSearchTerm = $request->get('type');
            }

            foreach ($match[0] as $value) {
                foreach ($errorTypeArr as $errType) {
                    if (preg_match('/' . $errType . '/', $value)) {
                        $errSelection[] = $errType;

                        break;
                    }
                }
                if ($request->get('search') && $request->get('search') != '') {
                    if (strpos(strtolower($value), strtolower($request->get('search'))) !== false && preg_match('/' . $defaultSearchTerm . '/', $value)) {
                        $str   = $value;
                        $temp1 = explode('.', $str);
                        $temp2 = explode(' ', $temp1[0]);
                        $type  = $temp2[2];
                        array_push($this->channel_filter, $type);

                        $errors[] = $value . '===' . str_replace('/', '', $filename);
                    }
                } else {
                    if (preg_match('/' . $defaultSearchTerm . '/', $value)) {
                        $str   = $value;
                        $temp1 = explode('.', $str);
                        $temp2 = explode(' ', $temp1[0]);
                        $type  = $temp2[2];
                        array_push($this->channel_filter, $type);

                        $errors[] = $value . '===' . str_replace('/', '', $filename);
                    }
                }
            }
            $errors = array_reverse($errors);
        } catch (Exception $e) {
            $errors = [];
        }

        $other_channel_data = $this->getDirContents($path);
        foreach ($other_channel_data as $other) {
            array_push($errors, $other);
        }
        $allErrorTypes = array_values(array_unique($errSelection));

        $users       = User::all();
        $currentPage = LengthAwarePaginator::resolveCurrentPage();

        $perPage = Setting::get('pagination');

        $final = $key = [];
        if (isset($request->channel)) {
            session(['channel' => $request->channel]);
        }
        foreach ($errors as $key => $error) {
            $str          = $error;
            $temp1        = explode('.', $str);
            $temp2        = explode(' ', $temp1[0]);
            $type         = $temp2[2];
            $if_available = false;
            if (stripos(strtolower($request->msg), $temp1[1]) !== false) {
                array_push($final, $temp2[0] . $temp2[1]);
            }
        }

        return $final;
    }

    public function liveLogs(Request $request)
    {
        $filename     = '/laravel-' . now()->format('Y-m-d') . '.log';
        $path         = storage_path('logs');
        $fullPath     = $path . $filename;
        $errSelection = [];
        try {
            $content = File::get($fullPath);
            preg_match_all("/\[(\d{4})-(\d{2})-(\d{2}) (\d{2}):(\d{2}):(\d{2})\](.*)/", $content, $match);
            $errorTypeArr       = ['ERROR', 'INFO', 'WARNING'];
            $errorTypeSeparated = implode('|', $errorTypeArr);

            $defaultSearchTerm = 'ERROR';
            if ($request->get('type')) {
                $defaultSearchTerm = $request->get('type');
            }

            foreach ($match[0] as $value) {
                foreach ($errorTypeArr as $errType) {
                    if (preg_match('/' . $errType . '/', $value)) {
                        $errSelection[] = $errType;

                        break;
                    }
                }
                if ($request->get('search') && $request->get('search') != '') {
                    if (strpos(strtolower($value), strtolower($request->get('search'))) !== false && preg_match('/' . $defaultSearchTerm . '/', $value)) {
                        $str   = $value;
                        $temp1 = explode('.', $str);
                        $temp2 = explode(' ', $temp1[0]);
                        $type  = $temp2[2];
                        array_push($this->channel_filter, $type);

                        $errors[] = $value . '===' . str_replace('/', '', $filename);
                    }
                } else {
                    if (preg_match('/' . $defaultSearchTerm . '/', $value)) {
                        $str   = $value;
                        $temp1 = explode('.', $str);
                        $temp2 = explode(' ', $temp1[0]);
                        $type  = $temp2[2];
                        array_push($this->channel_filter, $type);

                        $errors[] = $value . '===' . str_replace('/', '', $filename);
                    }
                }
            }
            $errors = array_reverse($errors);
        } catch (Exception $e) {
            $errors = [];
        }
        $allErrorTypes = array_values(array_unique($errSelection));

        $users       = User::all();
        $currentPage = LengthAwarePaginator::resolveCurrentPage();

        $perPage = Setting::get('pagination');

        $final = $key = [];
        if (isset($request->channel)) {
            session(['channel' => $request->channel]);
        }
        foreach ($errors as $key => $error) {
            $str   = $error;
            $temp1 = explode('.', $str);
            $temp2 = explode(' ', $temp1[0]);
            $type  = $temp2[2];

            $if_available = false;
            if (isset($request->channel) && $request->channel == $type) {
                foreach ($final as $value) {
                    if (stripos(strtolower($value), $temp1[1]) !== false) {
                        $if_available = true;
                    }
                }
                if ($if_available) {
                    continue;
                } else {
                    array_push($final, $error);
                }
            }

            if (! isset($request->channel)) {
                foreach ($final as $value) {
                    if (stripos(strtolower($value), $temp1[1]) !== false) {
                        $if_available = true;
                    }
                }
                if ($if_available) {
                    continue;
                } else {
                    array_push($final, $error);
                }
            }
        }

        $errors       = [];
        $errors       = array_unique($final);
        $currentItems = array_slice($errors, $perPage * ($currentPage - 1), $perPage);

        $logs = new LengthAwarePaginator($currentItems, count($errors), $perPage, $currentPage, [
            'path'  => LengthAwarePaginator::resolveCurrentPath(),
            'query' => $request->query(),
        ]);
        $filter_channel = [];
        foreach ($this->channel_filter as $ch) {
            if (! in_array($ch, $filter_channel)) {
                array_push($filter_channel, $ch);
            }
        }
        $logKeywords  = LogKeyword::all();
        $ChatMessages = ChatMessage::join('developer_tasks', 'developer_tasks.id', 'chat_messages.developer_task_id')
            ->leftJoin('users', 'users.id', 'developer_tasks.assigned_to')
            ->where('developer_tasks.log_keyword_id', '>', 0)
            ->groupBy('developer_tasks.id')
            ->select(\DB::raw('chat_messages.message, chat_messages.created_at , developer_tasks.id as dev_task_id, users.name'))
            ->orderBy('chat_messages.created_at', 'DESC')->get();

        return view('logging.livelaravellog', ['logs' => $logs, 'filename' => str_replace('/', '', $filename), 'errSelection' => $allErrorTypes, 'users' => $users, 'filter_channel' => $filter_channel, 'logKeywords' => $logKeywords, 'ChatMessages' => $ChatMessages]);
    }

    public function liveLogsSummary()
    {
        $filename     = '/laravel-' . now()->format('Y-m-d') . '.log';
        $path         = storage_path('logs');
        $fullPath     = $path . $filename;
        $errSelection = [];
        try {
            $content = File::get($fullPath);
            preg_match_all("/\[(\d{4})-(\d{2})-(\d{2}) (\d{2}):(\d{2}):(\d{2})\](.*)/", $content, $match);
            $errorTypeArr       = ['ERROR', 'INFO', 'WARNING'];
            $errorTypeSeparated = implode('|', $errorTypeArr);

            $defaultSearchTerm = 'ERROR';

            foreach ($match[0] as $value) {
                foreach ($errorTypeArr as $errType) {
                    if (preg_match('/' . $errType . '/', $value)) {
                        $errSelection[] = $errType;
                        break;
                    }
                }

                if (preg_match('/' . $defaultSearchTerm . '/', $value)) {
                    $str   = $value;
                    $temp1 = explode('.', $str);
                    $temp2 = explode(' ', $temp1[0]);
                    $type  = $temp2[2];
                    array_push($this->channel_filter, $type);

                    $errors[] = $value . '===' . str_replace('/', '', $filename);
                }
            }
            $errors = array_reverse($errors);
        } catch (Exception $e) {
            $errors = [];
        }

        $allErrorTypes = array_values(array_unique($errSelection));
        $currentPage   = LengthAwarePaginator::resolveCurrentPage();
        $perPage       = Setting::get('pagination');
        $final         = $key = [];
        foreach ($errors as $key => $error) {
            $str   = $error;
            $temp1 = explode('.', $str);
            $temp2 = explode(' ', $temp1[0]);
            $type  = $temp2[2];

            $if_available = false;

            foreach ($final as $value) {
                if (stripos(strtolower($value), $temp1[1]) !== false) {
                    $if_available = true;
                }
            }
            if ($if_available) {
                continue;
            } else {
                array_push($final, $error);
            }
        }

        $errors = [];
        $errors = array_unique($final);
        $logs   = array_slice($errors, $perPage * ($currentPage - 1), $perPage);

        $html = view('partials.modals.live-laravel-logs-summary-ajax')
            ->with('logs', $logs)
            ->with('filename', str_replace('/', '', $filename))
            ->with('errSelection', $allErrorTypes)
            ->render();

        return response()->json(['code' => 200, 'html' => $html, 'message' => 'Content render']);
    }

    public function LogKeyword(Request $request)
    {
        if ($request->title) {
            //creating message
            $params = [
                'text' => $request->title,
            ];
            $logKeyword = LogKeyword::create($params);

            return response()->json([
                'status' => 'success',
            ]);
        }

        return response()->json([
            'status' => 'errors',
        ]);
    }

    public function LogKeywordDelete(Request $request)
    {
        if ($request->id) {
            $keyword = LogKeyword::find($request->id);
            $keyword->delete();

            return response()->json([
                'status' => 'success',
            ]);
        }

        return response()->json([
            'status' => 'errors',
        ]);
    }

    /**
     * to get relelated records for scraper
     */
    public function scraperLiveLogs()
    {
        $filename = '/scraper-' . now()->format('Y-m-d') . '.log';
        $path     = storage_path('logs') . DIRECTORY_SEPARATOR . 'scraper';
        $fullPath = $path . $filename;
        $errors   = self::getErrors($fullPath);

        $currentPage  = LengthAwarePaginator::resolveCurrentPage();
        $perPage      = Setting::get('pagination');
        $currentItems = array_slice($errors, $perPage * ($currentPage - 1), $perPage);

        $logs = new LengthAwarePaginator($currentItems, count($errors), $perPage, $currentPage, [
            'path' => LengthAwarePaginator::resolveCurrentPath(),
        ]);

        return view('logging.scraperlog', ['logs' => $logs, 'filename' => str_replace('/', '', $filename)]);
    }

    public function assign(Request $request)
    {
        if ($request->get('issue') && $request->get('assign_to')) {
            $error       = html_entity_decode($request->get('issue'), ENT_QUOTES, 'UTF-8');
            $issueName   = substr($error, 0, 150);
            $requestData = new Request();
            $requestData->setMethod('POST');
            $requestData->request->add([
                'priority'    => 1,
                'issue'       => $error,
                'status'      => 'Planned',
                'module'      => 'Cron',
                'subject'     => $issueName . '...',
                'assigned_to' => $request->get('assign_to'),
            ]);

            app(\App\Http\Controllers\DevelopmentController::class)->issueStore($requestData, 'issue');

            return redirect()->route('logging.live.logs');
        }

        return back()->with('error', '"issue" or "assign_to" not found in request.');
    }

    public static function getErrors($fullPath)
    {
        $errors = [];

        try {
            $content = File::get($fullPath);
            preg_match_all("/\[(\d{4})-(\d{2})-(\d{2}) (\d{2}):(\d{2}):(\d{2})\](.*)/", $content, $match);
            foreach ($match[0] as $value) {
                $errors[] = str_replace('##!!##', '', $value);
            }
            $errors = array_reverse($errors);
        } catch (Exception $e) {
            $errors = [];
        }

        return $errors;
    }

    public function liveLogDownloads()
    {
        $filename = '/laravel-' . now()->format('Y-m-d') . '.log';

        $path     = storage_path('logs');
        $fullPath = $path . $filename;

        return response()->download($fullPath, str_replace('/', '', $filename));
    }

    public function liveMagentoDownloads()
    {
        $filename = '/list-magento-' . now()->format('Y-m-d') . '.log';

        $path     = storage_path('logs');
        $fullPath = $path . $filename;

        return response()->download($fullPath, str_replace('/', '', $filename));
    }

    public function saveNewLogData(Request $request)
    {
        $url         = $request->url;
        $message     = $request->message;
        $website     = $request->website;
        $module_name = $request->module_name;
        if (! empty($request->modulename)) {
            $module_name = $request->modulename;
        }

        $controller_name = $request->controller_name;
        if (! empty($request->controller)) {
            $controller_name = $request->controller;
        }

        $action = $request->action;

        if ($url == '') {
            $message = $this->generate_erp_response('laravel.log.failed', 0, $default = 'URL is required', request('lang_code'));

            return response()->json(['status' => 'failed', 'message' => $message], 400);
        }
        if ($message == '') {
            $message = $this->generate_erp_response('laravel.log.failed', 0, $default = 'Message is required', request('lang_code'));

            return response()->json(['status' => 'failed', 'message' => $message], 400);
        }
        if ($module_name == '') {
            $message = $this->generate_erp_response('laravel.log.failed', 0, $default = 'Module name is required', request('lang_code'));

            return response()->json(['status' => 'failed', 'message' => $message], 400);
        }
        if ($controller_name == '') {
            $message = $this->generate_erp_response('laravel.log.failed', 0, $default = 'Controller name is required', request('lang_code'));

            return response()->json(['status' => 'failed', 'message' => $message], 400);
        }
        if ($action == '') {
            $message = $this->generate_erp_response('laravel.log.failed', 0, $default = 'action is required', request('lang_code'));

            return response()->json(['status' => 'failed', 'message' => $message], 400);
        }
        $laravelLog                  = new LaravelLog();
        $laravelLog->filename        = $url;
        $laravelLog->log             = $message;
        $laravelLog->website         = $website;
        $laravelLog->module_name     = $module_name;
        $laravelLog->controller_name = $controller_name;
        $laravelLog->action          = $action;
        $laravelLog->save();
        $message = $this->generate_erp_response('laravel.log.success', 0, $default = 'Log data Saved', request('lang_code'));

        return response()->json(['status' => 'success', 'message' => $message], 200);
    }

    public function getDirContents($dir, $results = [])
    {
        $directories   = glob($dir . '/*', GLOB_ONLYDIR);
        $allErrorTypes = [];
        $final_result  = [];
        foreach ($directories as $dir) {
            if ($handle = opendir($dir)) {
                while (false !== ($entry = readdir($handle))) {
                    if ($entry != '.' && $entry != '..') {
                        $current_date = explode('-', date('Y-m-d'));
                        $temp         = explode('-', $entry);
                        $errors       = [];
                        $errSelection = [];
                        if (! isset($temp[1]) || ! isset($temp[2])) {
                            continue;
                        }
                        if ($current_date[0] == $temp[1] && $current_date[1] == $temp[2] && $current_date[2] == str_replace('.log', '', $temp[3])) {
                            $fullPath = $dir . '/' . $entry;
                            $content  = File::get($fullPath);
                            preg_match_all("/\[(\d{4})-(\d{2})-(\d{2}) (\d{2}):(\d{2}):(\d{2})\](.*)/", $content, $match);
                            $errorTypeArr       = ['ERROR', 'INFO', 'WARNING'];
                            $errorTypeSeparated = implode('|', $errorTypeArr);

                            $defaultSearchTerm = 'ERROR';
                            if (isset($_GET['type'])) {
                                $defaultSearchTerm = $_GET['type'];
                            }

                            foreach ($match[0] as $value) {
                                foreach ($errorTypeArr as $errType) {
                                    if (preg_match('/' . $errType . '/', $value)) {
                                        $errSelection[] = $errType;
                                        break;
                                    }
                                }
                                if (preg_match('/' . $defaultSearchTerm . '/', $value)) {
                                    $str   = $value;
                                    $temp1 = explode('.', $str);
                                    $temp2 = explode(' ', $temp1[0]);
                                    $type  = $temp2[2];
                                    array_push($this->channel_filter, $type);
                                    $errors[] = $value . '===' . str_replace('/', '', $entry);
                                }
                            }
                            $errors          = array_reverse($errors);
                            $allErrorTypes[] = array_values(array_unique($errSelection));
                            foreach ($errors as $er) {
                                array_push($final_result, $er);
                            }
                        }
                    }
                }
                closedir($handle);
            }
        }

        return $final_result;
    }

    public function apiLogs()
    {
        $logs = new \App\LogRequest;

        if ($s = request('id')) {
            $logs = $logs->where('id', $s);
        }
        if ($s = request('ip')) {
            $logs = $logs->where('ip', 'like', $s . '%');
        }
        if ($s = request('api_name')) {
            if ($s != 'all') {
                $logs = $logs->where('api_name', $s);
            }
        }
        if ($s = request('method_name')) {
            if ($s != 'all') {
                $logs = $logs->where('method_name', $s);
            }
        }
        if ($s = request('method')) {
            if ($s != 'all') {
                $logs = $logs->where('method', $s);
            }
        }
        if ($s = request('url')) {
            if ($s != 'all') {
                $logs = $logs->where('url', $s);
            }
        }
        if ($s = request('message')) {
            $logs = $logs->where('message', 'like', '%' . $s . '%');
        }
        if ($s = request('status')) {
            if ($s != 'all') {
                $logs = $logs->where('status_code', $s);
            }
        }

        if ($s = request('created_at')) {
            $logs = $logs->whereDate('created_at', \Carbon\Carbon::createFromFormat('Y/m/d', $s)->format('Y-m-d'));
        }
        if ($s = request('is_send')) {
            $logs = $logs->where('is_send', $s);
        } else {
            $logs = $logs->where('is_send', '0');
        }

        $count = $logs->count();
        $logs  = $logs->orderBy('id', 'desc')->paginate(Setting::get('pagination') ?: 50);

        if (request()->ajax()) {
            $html = view('logging.partials.apilogdata', compact('logs'))->render();

            if (count($logs)) {
                return ['status' => 1, 'html' => $html, 'count' => $count, 'logs' => $logs];
            } else {
                return ['status' => 0, 'html' => '<tr id="noresult_tr"><td colspan="11" class="text-center">No More Records</td></tr>'];
            }
        }

        $filterApiNames    = \App\LogRequest::distinct()->orderBy('api_name')->pluck('api_name')->toArray();
        $filterMethodNames = \App\LogRequest::distinct()->whereNotNull('method_name')->orderBy('method_name')->pluck('method_name')->toArray();
        $filterMethods     = \App\LogRequest::distinct()->orderBy('method')->pluck('method')->toArray();
        $filterUrls        = \App\LogRequest::distinct()->orderBy('url')->pluck('url')->toArray();
        $filterStatusCodes = \App\LogRequest::distinct()->orderBy('status_code')->pluck('status_code')->toArray();

        return view('logging.apilog', compact(
            'logs',
            'count',
            'filterApiNames',
            'filterMethodNames',
            'filterMethods',
            'filterUrls',
            'filterStatusCodes'
        ));
    }

    public function generateReport(Request $request)
    {
        $logsGroupWise = \App\LogRequest::query();

        if ($request->keyword != '') {
            $keyword       = $request->keyword;
            $logsGroupWise = $logsGroupWise->where(function ($q) use ($keyword) {
                $q->orWhere('request', 'like', '%' . $keyword . '%')->orWhere('response', 'like', '%' . $keyword . '%');
            });
        }

        if ($request->for_date != '') {
            $forDate       = $request->for_date;
            $logsGroupWise = $logsGroupWise->whereDate('created_at', '>=', $forDate);
        }

        if ($request->is_send != '') {
            $logsGroupWise = $logsGroupWise->where('is_send', '=', $request->is_send);
        }

        if ($request->report_type == 'time_wise') {
            $logsGroupWise = $logsGroupWise->where('time_taken', '>', 5);
            $logsGroupWise = $logsGroupWise->whereNotNull('time_taken');
            $logsGroupWise = $logsGroupWise->orderByRaw('CONVERT(time_taken, SIGNED) desc');
            $logsGroupWise = $logsGroupWise->select(['*', \DB::raw('1 as total_request')])->get();
        } else {
            $logsGroupWise = $logsGroupWise->where('status_code', '!=', 200);
            $logsGroupWise = $logsGroupWise->groupBy('url');
            $logsGroupWise = $logsGroupWise->orderBy('total_request', 'desc');
            $logsGroupWise = $logsGroupWise->select(['*', \DB::raw('count(*) as total_request')])->get();
        }

        return view('logging.partials.generate-report', compact('logsGroupWise'));
    }

    public function listApiLogsDelete(Request $request)
    {
        \DB::table('log_requests')->truncate();

        return redirect()->back()->with('success', 'Laravel API Logs successfully deleted');
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/LearningModuleController.php 
Content: <?php

namespace App\Http\Controllers;

use App\Task;
use App\User;
use App\Remark;
use App\Contact;
use App\Helpers;
use App\Setting;
use App\Learning;
use App\TaskStatus;
use App\ChatMessage;
use App\SatutoryTask;
use App\DeveloperTask;
use App\WhatsAppGroup;
use GuzzleHttp\Client;
use App\DocumentRemark;
use App\LearningModule;
use App\PaymentReceipt;
use App\ScheduledMessage;
use App\WhatsAppGroupNumber;
use Illuminate\Http\Request;
use App\DeveloperTaskHistory;
use App\ChatMessagesQuickData;
use App\Helpers\HubstaffTrait;
use App\Hubstaff\HubstaffTask;
use App\LearningStatusHistory;
use GuzzleHttp\RequestOptions;
use App\LearningDueDateHistory;
use App\Hubstaff\HubstaffMember;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Auth;
use GuzzleHttp\Exception\ClientException;
use Plank\Mediable\Facades\MediaUploader as MediaUploader;

class LearningModuleController extends Controller
{
    use HubstaffTrait;

    public function __construct()
    {
        $this->init(config('env.HUBSTAFF_SEED_PERSONAL_TOKEN'));
    }

    public function index(Request $request)
    {
        if ($request->input('selected_user') == '') {
            $userid    = Auth::id();
            $userquery = ' AND (assign_from = ' . $userid . ' OR  master_user_id = ' . $userid . ' OR  id IN (SELECT task_id FROM task_users WHERE user_id = ' . $userid . ' AND type LIKE "%User%")) ';
        } else {
            $userid    = $request->input('selected_user');
            $userquery = ' AND (master_user_id = ' . $userid . ' OR  id IN (SELECT task_id FROM task_users WHERE user_id = ' . $userid . ' AND type LIKE "%User%")) ';
        }

        if (! $request->input('type') || $request->input('type') == '') {
            $type = 'pending';
        } else {
            $type = $request->input('type');
        }
        $activeCategories = LearningModule::where('is_active', 1)->pluck('id')->all();

        $categoryWhereClause = '';
        $category            = '';
        $request->category   = $request->category ? $request->category : 1;
        if ($request->category != '') {
            if ($request->category != 1) {
                $categoryWhereClause = "AND category = $request->category";
                $category            = $request->category;
            } else {
                $category_condition = implode(',', $activeCategories);
                if ($category_condition != '' || $category_condition != null) {
                    $category_condition  = '( ' . $category_condition . ' )';
                    $categoryWhereClause = 'AND category in ' . $category_condition;
                } else {
                    $categoryWhereClause = '';
                }
            }
        }

        $term              = $request->term ?? '';
        $searchWhereClause = '';

        if ($request->term != '') {
            $searchWhereClause = ' AND (id LIKE "%' . $term . '%" OR category IN (SELECT id FROM task_categories WHERE title LIKE "%' . $term . '%") OR task_subject LIKE "%' . $term . '%" OR task_details LIKE "%' . $term . '%" OR assign_from IN (SELECT id FROM users WHERE name LIKE "%' . $term . '%") OR id IN (SELECT task_id FROM task_users WHERE user_id IN (SELECT id FROM users WHERE name LIKE "%' . $term . '%")))';
        }
        $orderByClause = ' ORDER BY';
        if ($request->sort_by == 1) {
            $orderByClause .= ' learnings.created_at desc,';
        } elseif ($request->sort_by == 2) {
            $orderByClause .= ' learnings.created_at asc,';
        }
        $data['task'] = [];

        $search_term_suggestions                 = [];
        $search_suggestions                      = [];
        $assign_from_arr                         = [0];
        $special_task_arr                        = [0];
        $assign_to_arr                           = [0];
        $data['task']['pending']                 = [];
        $data['task']['statutory_not_completed'] = [];
        $data['task']['completed']               = [];
        if ($type == 'pending') {
            $paginate = 50;
            $page     = $request->get('page', 1);
            $offSet   = ($page * $paginate) - $paginate;

            $orderByClause .= ' is_flagged DESC, message_created_at DESC';
            $isCompleteWhereClose = ' AND is_verified IS NULL ';

            if (! Auth::user()->isAdmin()) {
                $isCompleteWhereClose = ' AND is_verified IS NULL ';
            }
            if ($request->filter_by == 1) {
                $isCompleteWhereClose = ' AND is_completed IS NULL ';
            }
            if ($request->filter_by == 2) {
                $isCompleteWhereClose = ' AND is_completed IS NOT NULL AND is_verified IS NULL ';
            }

            $data['task']['pending'] = DB::select('
			SELECT learnings.*

			FROM (
			  SELECT * FROM learnings
			  LEFT JOIN (
				  SELECT 
				  chat_messages.id as message_id, 
				  chat_messages.task_id, 
				  chat_messages.message, 
				  chat_messages.status as message_status, 
				  chat_messages.sent as message_type, 
				  chat_messages.created_at as message_created_at, 
				  chat_messages.is_reminder AS message_is_reminder,
				  chat_messages.user_id AS message_user_id
				  FROM chat_messages join chat_messages_quick_datas on chat_messages_quick_datas.last_communicated_message_id = chat_messages.id WHERE chat_messages.status not in(7,8,9) and chat_messages_quick_datas.model="App\\Task"
			  ) as chat_messages  ON chat_messages.task_id = learnings.id
			) AS learnings
			WHERE (id IS NOT NULL) AND is_statutory != 1 ' . $isCompleteWhereClose . $userquery . $categoryWhereClause . $searchWhereClause . $orderByClause . ' limit ' . $paginate . ' offset ' . $offSet . '; ');

            foreach ($data['task']['pending'] as $task) {
                array_push($assign_to_arr, $task->assign_to);
                array_push($assign_from_arr, $task->assign_from);
                array_push($special_task_arr, $task->id);
            }

            $user_ids_from = array_unique($assign_from_arr);
            $user_ids_to   = array_unique($assign_to_arr);

            foreach ($data['task']['pending'] as $task) {
                $search_suggestions[] = '#' . $task->id . ' ' . $task->task_subject . ' ' . $task->task_details;
                $from_exist           = in_array($task->assign_from, $user_ids_from);
                if ($from_exist) {
                    $from_user = User::find($task->assign_from);
                    if ($from_user) {
                        $search_term_suggestions[] = $from_user->name;
                    }
                }

                $to_exist = in_array($task->assign_to, $user_ids_to);
                if ($to_exist) {
                    $to_user = User::find($task->assign_to);
                    if ($to_user) {
                        $search_term_suggestions[] = $to_user->name;
                    }
                }
                $search_term_suggestions[] = "$task->id";
                $search_term_suggestions[] = $task->task_subject;
                $search_term_suggestions[] = $task->task_details;
            }
        } elseif ($type == 'completed') {
            $paginate = 50;
            $page     = $request->get('page', 1);
            $offSet   = ($page * $paginate) - $paginate;
            $orderByClause .= ' last_communicated_at DESC';
            $data['task']['completed'] = DB::select('
                SELECT *,
 				message_id,
                message,
                message_status,
                message_type,
                message_created_At as last_communicated_at
                FROM (
                  SELECT * FROM learnings
                 LEFT JOIN (
					SELECT 
					chat_messages.id as message_id, 
					chat_messages.task_id, 
					chat_messages.message, 
					chat_messages.status as message_status, 
					chat_messages.sent as message_type, 
					chat_messages.created_at as message_created_at, 
					chat_messages.is_reminder AS message_is_reminder,
					chat_messages.user_id AS message_user_id
					FROM chat_messages join chat_messages_quick_datas on chat_messages_quick_datas.last_communicated_message_id = chat_messages.id WHERE chat_messages.status not in(7,8,9) and chat_messages_quick_datas.model="App\\\\Task"
                 ) AS chat_messages ON chat_messages.task_id = learnings.id
                ) AS learnings
                WHERE (id IS NOT NULL) AND is_statutory != 1 AND is_verified IS NOT NULL ' . $userquery . $categoryWhereClause . $searchWhereClause . $orderByClause . ' limit ' . $paginate . ' offset ' . $offSet . ';');

            foreach ($data['task']['completed'] as $task) {
                array_push($assign_to_arr, $task->assign_to);
                array_push($assign_from_arr, $task->assign_from);
                array_push($special_task_arr, $task->id);
            }

            $user_ids_from = array_unique($assign_from_arr);
            $user_ids_to   = array_unique($assign_to_arr);

            foreach ($data['task']['completed'] as $task) {
                $search_suggestions[] = '#' . $task->id . ' ' . $task->task_subject . ' ' . $task->task_details;
                $from_exist           = in_array($task->assign_from, $user_ids_from);
                if ($from_exist) {
                    $from_user = User::find($task->assign_from);
                    if ($from_user) {
                        $search_term_suggestions[] = $from_user->name;
                    }
                }

                $to_exist = in_array($task->assign_to, $user_ids_to);
                if ($to_exist) {
                    $to_user = User::find($task->assign_to);
                    if ($to_user) {
                        $search_term_suggestions[] = $to_user->name;
                    }
                }
                $search_term_suggestions[] = "$task->id";
                $search_term_suggestions[] = $task->task_subject;
                $search_term_suggestions[] = $task->task_details;
            }
        } elseif ($type == 'statutory_not_completed') {
            $paginate = 50;
            $page     = $request->get('page', 1);
            $offSet   = ($page * $paginate) - $paginate;
            $orderByClause .= ' last_communicated_at DESC';
            $data['task']['statutory_not_completed'] = DB::select('
	               SELECT *,
				   message_id,
	               message,
	               message_status,
	               message_type,
	               message_created_At as last_communicated_at

	               FROM (
	                 SELECT * FROM learnings
	                 LEFT JOIN (
							SELECT 
							chat_messages.id as message_id, 
							chat_messages.task_id, 
							chat_messages.message, 
							chat_messages.status as message_status, 
							chat_messages.sent as message_type, 
							chat_messages.created_at as message_created_at, 
							chat_messages.is_reminder AS message_is_reminder,
							chat_messages.user_id AS message_user_id
							FROM chat_messages join chat_messages_quick_datas on chat_messages_quick_datas.last_communicated_message_id = chat_messages.id WHERE chat_messages.status not in(7,8,9) and chat_messages_quick_datas.model="App\\\\Task"
	                 ) AS chat_messages ON chat_messages.task_id = learnings.id

	               ) AS learnings
				   WHERE (id IS NOT NULL) AND is_statutory = 1 AND is_verified IS NULL ' . $userquery . $categoryWhereClause . $orderByClause . ' limit ' . $paginate . ' offset ' . $offSet . ';');

            foreach ($data['task']['statutory_not_completed'] as $task) {
                array_push($assign_to_arr, $task->assign_to);
                array_push($assign_from_arr, $task->assign_from);
                array_push($special_task_arr, $task->id);
            }

            $user_ids_from = array_unique($assign_from_arr);
            $user_ids_to   = array_unique($assign_to_arr);

            foreach ($data['task']['statutory_not_completed'] as $task) {
                $search_suggestions[] = '#' . $task->id . ' ' . $task->task_subject . ' ' . $task->task_details;
                $from_exist           = in_array($task->assign_from, $user_ids_from);
                if ($from_exist) {
                    $from_user = User::find($task->assign_from);
                    if ($from_user) {
                        $search_term_suggestions[] = $from_user->name;
                    }
                }

                $to_exist = in_array($task->assign_to, $user_ids_to);
                if ($to_exist) {
                    $to_user = User::find($task->assign_to);
                    if ($to_user) {
                        $search_term_suggestions[] = $to_user->name;
                    }
                }
                $search_term_suggestions[] = "$task->id";
                $search_term_suggestions[] = $task->task_subject;
                $search_term_suggestions[] = $task->task_details;
            }
        } else {
            //
        }

        $subjectList = Learning::select('learning_subject')->distinct()->pluck('learning_subject');

        $users                       = User::oldest()->get()->toArray();
        $data['users']               = $users;
        $data['daily_activity_date'] = $request->daily_activity_date ? $request->daily_activity_date : date('Y-m-d');

        //My code start
        $selected_user            = $request->input('selected_user');
        $users                    = Helpers::getUserArray(User::orderby('name')->get());
        $task_categories          = LearningModule::where('parent_id', 0)->get();
        $learning_module_dropdown = nestable(LearningModule::where('is_approved', 1)->where('parent_id', 0)->get()->toArray())->attr(['name' => 'learning_module', 'class' => 'form-control input-sm parent-module'])
            ->selected($request->category)
            ->renderAsDropdown();

        $learning_submodule_dropdown = LearningModule::where('is_approved', 1)->where('parent_id', '1')->get();

        $categories = [];
        foreach (LearningModule::all() as $category) {
            $categories[$category->id] = $category->title;
        }
        if (! empty($selected_user) && ! Helpers::getadminorsupervisor()) {
            return response()->json(['user not allowed'], 405);
        }
        //My code end
        $tasks_view = [];
        $priority   = \App\ErpPriority::where('model_type', '=', Learning::class)->pluck('model_id')->toArray();

        $openTask = \App\Learning::join('users as u', 'u.id', 'learnings.assign_to')
            ->whereNull('learnings.is_completed')
            ->groupBy('learnings.assign_to')
            ->select(\DB::raw('count(u.id) as total'), 'u.name as person')
            ->pluck('total', 'person');

        if ($request->is_statutory_query == 3) {
            $title = 'Discussion learnings';
        } else {
            $title = 'Learning & Activity';
        }

        $task_statuses = TaskStatus::all();

        if ($request->ajax()) {
            if ($type == 'pending') {
                return view('learning-module.partials.pending-row-ajax', compact('data', 'users', 'selected_user', 'category', 'term', 'search_suggestions', 'search_term_suggestions', 'tasks_view', 'categories', 'task_categories', 'task_categories_dropdown', 'priority', 'openTask', 'type', 'title', 'task_statuses'));
            } elseif ($type == 'statutory_not_completed') {
                return view('learning-module.partials.statutory-row-ajax', compact('data', 'users', 'selected_user', 'category', 'term', 'search_suggestions', 'search_term_suggestions', 'tasks_view', 'categories', 'task_categories', 'task_categories_dropdown', 'priority', 'openTask', 'type', 'title', 'task_statuses'));
            } elseif ($type == 'completed') {
                return view('learning-module.partials.completed-row-ajax', compact('data', 'users', 'selected_user', 'category', 'term', 'search_suggestions', 'search_term_suggestions', 'tasks_view', 'categories', 'task_categories', 'task_categories_dropdown', 'priority', 'openTask', 'type', 'title', 'task_statuses'));
            } else {
                return view('learning-module.partials.pending-row-ajax', compact('data', 'users', 'selected_user', 'category', 'term', 'search_suggestions', 'search_term_suggestions', 'tasks_view', 'categories', 'task_categories', 'task_categories_dropdown', 'priority', 'openTask', 'type', 'title', 'task_statuses'));
            }
        }

        if ($request->is_statutory_query == 3) {
            return view('learning-module.discussion-tasks', compact('data', 'users', 'selected_user', 'category', 'term', 'search_suggestions', 'search_term_suggestions', 'tasks_view', 'categories', 'task_categories', 'learning_module_dropdown', 'learning_submodule_dropdown', 'priority', 'openTask', 'type', 'title', 'task_statuses'));
        } else {
            $statusList = \DB::table('task_statuses')->orderBy('name', 'asc')->pluck('name', 'id')->toArray();

            $learningsListing = Learning::query();

            if (! empty($request->get('user_id'))) {
                $learningsListing->where('learning_user', $request->get('user_id'));
            }

            if (! empty($request->get('subject'))) {
                $subject = $request->get('subject');
                $learningsListing->where('learning_subject', 'LIKE', "%$subject%");
            }

            if (! empty($request->get('task_status'))) {
                $learningsListing->whereIn('learning_status', $request->get('task_status'));
            }

            if (! empty($request->get('overduedate'))) {
                $learningsListing->whereDate('learning_duedate', '<', $request->get('overduedate'));
            }

            if (! empty($request->get('module'))) {
                $learningsListing->where('learning_module', $request->get('module'));
            }

            if (! empty($request->get('submodule'))) {
                $learningsListing->where('learning_submodule', $request->get('submodule'));
            }

            $learningsListing = $learningsListing->latest()->get();

            $last_record_learning = Learning::with('learningUser')->latest()->first();

            return view('learning-module.show', compact('data', 'users', 'selected_user', 'category', 'term', 'search_suggestions', 'search_term_suggestions', 'tasks_view', 'categories', 'task_categories', 'learning_module_dropdown', 'learning_submodule_dropdown', 'priority', 'openTask', 'type', 'title', 'task_statuses', 'learningsListing', 'statusList', 'subjectList', 'last_record_learning'));
        }
    }

    public function updateCost(Request $request)
    {
        $task = Learning::find($request->task_id);

        if (Auth::user()->isAdmin()) {
            $task->cost = $request->cost;
            $task->save();

            return response()->json(['msg' => 'success']);
        } else {
            return response()->json(['msg' => 'Not authorized user to update'], 500);
        }
    }

    public function saveMilestone(Request $request)
    {
        $task = Learning::find($request->task_id);
        if (! $task->is_milestone) {
            return;
        }
        $total = $request->total;
        if ($task->milestone_completed) {
            if ($total <= $task->milestone_completed) {
                return response()->json([
                    'message' => 'Milestone no can\'t be reduced',
                ], 500);
            }
        }

        if ($total > $task->no_of_milestone) {
            return response()->json([
                'message' => 'Estimated milestone exceeded',
            ], 500);
        }
        if (! $task->cost || $task->cost == '') {
            return response()->json([
                'message' => 'Please provide cost first',
            ], 500);
        }

        $newCompleted    = $total - $task->milestone_completed;
        $individualPrice = $task->cost / $task->no_of_milestone;
        $totalCost       = $individualPrice * $newCompleted;

        $task->milestone_completed = $total;
        $task->save();
        $payment_receipt                 = new PaymentReceipt;
        $payment_receipt->date           = date('Y-m-d');
        $payment_receipt->worked_minutes = $task->approximate;
        $payment_receipt->rate_estimated = $totalCost;
        $payment_receipt->status         = 'Pending';
        $payment_receipt->task_id        = $task->id;
        $payment_receipt->user_id        = $task->assign_to;
        $payment_receipt->save();

        return response()->json([
            'status' => 'success',
        ]);
    }

    public function updateApproximate(Request $request)
    {
        $task = Learning::find($request->task_id);

        if (Auth::user()->id == $task->assign_to || Auth::user()->isAdmin()) {
            if ($task && $request->approximate) {
                DeveloperTaskHistory::create([
                    'developer_task_id' => $task->id,
                    'model'             => \App\Task::class,
                    'attribute'         => 'estimation_minute',
                    'old_value'         => $task->approximate,
                    'new_value'         => $request->approximate,
                    'user_id'           => auth()->id(),
                ]);
            }

            $task->approximate = $request->approximate;
            $task->save();

            return response()->json(['msg' => 'success']);
        } else {
            return response()->json(['msg' => 'Unauthorized access'], 500);
        }
    }

    public function updatePriorityNo(Request $request)
    {
        $task = Learning::find($request->task_id);

        if (Auth::user()->id == $task->assign_to || Auth::user()->isAdmin()) {
            $task->priority_no = $request->priority;
            $task->save();

            return response()->json(['msg' => 'success']);
        } else {
            return response()->json(['msg' => 'Unauthorized access'], 500);
        }
    }

    public function learningListByUserId(Request $request)
    {
        $user_id        = $request->get('user_id', 0);
        $selected_issue = $request->get('selected_issue', []);

        $issues = Learning::select('learnings.id', 'learnings.task_subject', 'learnings.task_details', 'learnings.assign_from')
            ->leftJoin('erp_priorities', function ($query) {
                $query->on('erp_priorities.model_id', '=', 'learnings.id');
                $query->where('erp_priorities.model_type', '=', Learning::class);
            })->whereNull('is_verified');

        if (auth()->user()->isAdmin()) {
            $issues = $issues->where(function ($q) use ($selected_issue, $user_id) {
                $user_id = is_null($user_id) ? 0 : $user_id;
                $q->whereIn('learnings.id', $selected_issue)->orWhere('erp_priorities.user_id', $user_id);
            });
        } else {
            $issues = $issues->whereNotNull('erp_priorities.id');
        }

        $issues = $issues->groupBy('learnings.id')->orderBy('erp_priorities.id')->get();

        foreach ($issues as &$value) {
            $value->created_by = User::where('id', $value->assign_from)->value('name');
        }
        unset($value);

        return response()->json($issues);
    }

    public function setTaskPriority(Request $request)
    {
        $priority = $request->get('priority', null);
        $user_id  = $request->get('user_id', 0);

        //delete old priority
        \App\ErpPriority::where('user_id', $user_id)->where('model_type', '=', Learning::class)->delete();

        if (! empty($priority)) {
            foreach ((array) $priority as $model_id) {
                \App\ErpPriority::create([
                    'model_id'   => $model_id,
                    'model_type' => Learning::class,
                    'user_id'    => $user_id,
                ]);
            }

            $developerTask = Learning::select('learnings.id', 'learnings.task_subject', 'learnings.task_details', 'learnings.assign_from')
                ->join('erp_priorities', function ($query) use ($user_id) {
                    $user_id = is_null($user_id) ? 0 : $user_id;
                    $query->on('erp_priorities.model_id', '=', 'learnings.id');
                    $query->where('erp_priorities.model_type', '=', Learning::class);
                    $query->where('user_id', $user_id);
                })
                ->whereNull('is_verified')
                ->orderBy('erp_priorities.id')
                ->get();

            $message = '';
            $i       = 1;

            foreach ($developerTask as $value) {
                $message .= $i . ' : #Task-' . $value->id . '-' . $value->task_subject . "\n";
                $i++;
            }

            if (! empty($message)) {
                $requestData = new Request();
                $requestData->setMethod('POST');
                $params            = [];
                $params['user_id'] = $user_id;

                $string = '';

                if (! empty($request->get('global_remarkes', null))) {
                    $string .= $request->get('global_remarkes') . "\n";
                }

                $string .= "Task Priority is : \n" . $message;

                $params['message'] = $string;
                $params['status']  = 2;
                $requestData->request->add($params);
                app(\App\Http\Controllers\WhatsAppController::class)->sendMessage($requestData, 'priority');
            }
        }

        return response()->json([
            'status' => 'success',
        ]);
    }

    public function store(Request $request)
    {
        dd('We are not using this function anymore, If you reach here, that means that we have to change this.');
        $this->validate($request, [
            'task_subject' => 'required',
            'task_details' => 'required',
            'assign_to'    => 'required_without:assign_to_contacts',
        ]);
        $data                = $request->except('_token');
        $data['assign_from'] = Auth::id();

        if ($request->task_type == 'quick_task') {
            $data['is_statutory'] = 0;
            $data['category']     = 6;
            $data['model_type']   = $request->model_type;
            $data['model_id']     = $request->model_id;
        }

        if ($request->task_type == 'note-task') {
            $main_task = Learning::find($request->task_id);
        } else {
            if ($request->assign_to) {
                $data['assign_to'] = $request->assign_to[0];
            } else {
                $data['assign_to'] = $request->assign_to_contacts[0];
            }
        }

        $task = Learning::create($data);

        if ($request->is_statutory == 3) {
            foreach ($request->note as $note) {
                if ($note != null) {
                    Remark::create([
                        'taskid'      => $task->id,
                        'remark'      => $note,
                        'module_type' => 'task-note',
                    ]);
                }
            }
        }

        if ($request->task_type != 'note-task') {
            if ($request->assign_to) {
                foreach ($request->assign_to as $user_id) {
                    $task->users()->attach([$user_id => ['type' => User::class]]);
                }
            }

            if ($request->assign_to_contacts) {
                foreach ($request->assign_to_contacts as $contact_id) {
                    $task->users()->attach([$contact_id => ['type' => Contact::class]]);
                }
            }
        }

        if ($task->is_statutory != 1) {
            $message = '#' . $task->id . '. ' . $task->task_subject . '. ' . $task->task_details;
        } else {
            $message = $task->task_subject . '. ' . $task->task_details;
        }

        $params = [
            'number'   => null,
            'user_id'  => Auth::id(),
            'approved' => 1,
            'status'   => 2,
            'task_id'  => $task->id,
            'message'  => $message,
        ];
        if (count($task->users) > 0) {
            if ($task->assign_from == Auth::id()) {
                foreach ($task->users as $key => $user) {
                    if ($key == 0) {
                        $params['erp_user'] = $user->id;
                    } else {
                        app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($user->phone, $user->whatsapp_number, $params['message']);
                    }
                }
            } else {
                foreach ($task->users as $key => $user) {
                    if ($key == 0) {
                        $params['erp_user'] = $task->assign_from;
                    } else {
                        if ($user->id != Auth::id()) {
                            app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($user->phone, $user->whatsapp_number, $params['message']);
                        }
                    }
                }
            }
        }

        if (count($task->contacts) > 0) {
            foreach ($task->contacts as $key => $contact) {
                if ($key == 0) {
                    $params['contact_id'] = $task->assign_to;
                } else {
                    app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($contact->phone, null, $params['message']);
                }
            }
        }

        $chat_message = ChatMessage::create($params);
        ChatMessagesQuickData::updateOrCreate([
            'model'    => \App\Learning::class,
            'model_id' => $params['task_id'],
        ], [
            'last_communicated_message'    => @$params['message'],
            'last_communicated_message_at' => $chat_message->created_at,
            'last_communicated_message_id' => ($chat_message) ? $chat_message->id : null,
        ]);

        $myRequest = new Request();
        $myRequest->setMethod('POST');
        $myRequest->request->add(['messageId' => $chat_message->id]);

        app(\App\Http\Controllers\WhatsAppController::class)->approveMessage('task', $myRequest);

        $hubstaff_project_id = config('env.HUBSTAFF_BULK_IMPORT_PROJECT_ID');

        $assignedUser = HubstaffMember::where('user_id', $request->input('assign_to'))->first();

        $hubstaffUserId = null;
        if ($assignedUser) {
            $hubstaffUserId = $assignedUser->hubstaff_user_id;
        }
        $taskSummery = substr($message, 0, 200);

        $hubstaffTaskId = $this->createHubstaffTask(
            $taskSummery,
            $hubstaffUserId,
            $hubstaff_project_id
        );

        if ($hubstaffTaskId) {
            $task->hubstaff_task_id = $hubstaffTaskId;
            $task->save();
        }
        if ($hubstaffUserId) {
            $task                      = new HubstaffTask();
            $task->hubstaff_task_id    = $hubstaffTaskId;
            $task->project_id          = $hubstaff_project_id;
            $task->hubstaff_project_id = $hubstaff_project_id;
            $task->summary             = $message;
            $task->save();
        }

        $task_statuses = TaskStatus::all();

        if ($request->ajax()) {
            $hasRender = request('has_render', false);

            if (! empty($hasRender)) {
                $users    = Helpers::getUserArray(User::all());
                $priority = \App\ErpPriority::where('model_type', '=', Learning::class)->pluck('model_id')->toArray();

                if ($task->is_statutory == 1) {
                    $mode = 'learning-module.partials.statutory-row';
                } elseif ($task->is_statutory == 3) {
                    $mode = 'learning-module.partials.discussion-pending-raw';
                } else {
                    $mode = 'learning-module.partials.pending-row';
                }

                $view = (string) view($mode, compact('task', 'priority', 'users', 'task_statuses'));

                return response()->json(['code' => 200, 'statutory' => $task->is_statutory, 'raw' => $view]);
            }

            return response('success');
        }

        return redirect()->back()->with('success', 'Task created successfully.');
    }

    private function createHubstaffTask(string $taskSummary, ?int $hubstaffUserId, int $projectId, bool $shouldRetry = true)
    {
        $tokens = $this->getTokens();

        $url = 'https://api.hubstaff.com/v2/projects/' . $projectId . '/learnings';

        $httpClient = new Client();
        try {
            $body = [
                'summary' => $taskSummary,
            ];

            if ($hubstaffUserId) {
                $body['assignee_id'] = $hubstaffUserId;
            } else {
                $body['assignee_id'] = config('env.HUBSTAFF_DEFAULT_ASSIGNEE_ID');
            }

            $response = $httpClient->post(
                $url,
                [
                    RequestOptions::HEADERS => [
                        'Authorization' => 'Bearer ' . $tokens->access_token,
                        'Content-Type'  => 'application/json',
                    ],

                    RequestOptions::BODY => json_encode($body),
                ]
            );
            $parsedResponse = json_decode($response->getBody()->getContents());

            return $parsedResponse->task->id;
        } catch (ClientException $e) {
            if ($e->getCode() == 401) {
                $this->refreshTokens();
                if ($shouldRetry) {
                    return $this->createHubstaffTask(
                        $taskSummary,
                        $hubstaffUserId,
                        $projectId,
                        false
                    );
                } else {
                }
            }
        }

        return false;
    }

    public function flag(Request $request)
    {
        $task = Learning::find($request->task_id);

        if ($task->is_flagged == 0) {
            $task->is_flagged = 1;
        } else {
            $task->is_flagged = 0;
        }

        $task->save();

        return response()->json(['is_flagged' => $task->is_flagged]);
    }

    public function remarkFlag(Request $request)
    {
        $remark = Remark::find($request->remark_id);

        if ($remark->is_flagged == 0) {
            $remark->is_flagged = 1;
        } else {
            $remark->is_flagged = 0;
        }

        $remark->save();

        return response()->json(['is_flagged' => $remark->is_flagged]);
    }

    public function plan(Request $request, $id)
    {
        $task                      = Learning::find($id);
        $task->time_slot           = $request->time_slot;
        $task->planned_at          = $request->planned_at;
        $task->general_category_id = $request->get('general_category_id', null);
        $task->save();

        return response()->json([
            'task' => $task,
        ]);
    }

    public function loadView(Request $request)
    {
        $tasks = Learning::whereIn('id', $request->selected_tasks)->get();
        $users = Helpers::getUserArray(User::all());
        $view  = view('learning-module.partials.learning-view', [
            'tasks_view' => $tasks,
            'users'      => $users,
        ])->render();

        return response()->json([
            'view' => $view,
        ]);
    }

    public function assignMessages(Request $request)
    {
        $messages_ids = json_decode($request->selected_messages, true);

        foreach ($messages_ids as $message_id) {
            $message          = ChatMessage::find($message_id);
            $message->task_id = $request->task_id;
            $message->save();
        }

        return redirect()->back()->withSuccess('You have successfully assign messages');
    }

    public function messageReminder(Request $request)
    {
        $this->validate($request, [
            'message_id'    => 'required|numeric',
            'reminder_date' => 'required',
        ]);

        $message = ChatMessage::find($request->message_id);

        $additional_params = [
            'user_id'    => $message->user_id,
            'task_id'    => $message->task_id,
            'erp_user'   => $message->erp_user,
            'contact_id' => $message->contact_id,
        ];

        $params = [
            'user_id'      => Auth::id(),
            'message'      => 'Reminder - ' . $message->message,
            'type'         => 'task',
            'data'         => json_encode($additional_params),
            'sending_time' => $request->reminder_date,
        ];

        ScheduledMessage::create($params);

        return redirect()->back()->withSuccess('You have successfully set a reminder!');
    }

    public function convertTask(Request $request, $id)
    {
        $task = Learning::find($id);

        $task->is_statutory = 3;
        $task->save();

        return response('success', 200);
    }

    public function updateSubject(Request $request, $id)
    {
        $task               = Learning::find($id);
        $task->task_subject = $request->subject;
        $task->save();

        return response('success', 200);
    }

    public function addNote(Request $request, $id)
    {
        Remark::create([
            'taskid'      => $id,
            'remark'      => $request->note,
            'module_type' => 'task-note',
        ]);

        return response('success', 200);
    }

    public function addSubnote(Request $request, $id)
    {
        $remark = Remark::create([
            'taskid'      => $id,
            'remark'      => $request->note,
            'module_type' => 'task-note-subnote',
        ]);

        $id = $remark->id;

        return response(['success' => $id], 200);
    }

    public function updateCategory(Request $request, $id)
    {
        $task           = Learning::find($id);
        $task->category = $request->category;
        $task->save();

        return response('success', 200);
    }

    public function show($id)
    {
        $task         = Learning::find($id);
        $chatMessages = ChatMessage::where('task_id', $id)->get();
        if ((! $task->users->contains(Auth::id()) && $task->is_private == 1) || ($task->assign_from != Auth::id() && $task->contacts()->count() > 0) || (! $task->users->contains(Auth::id()) && $task->assign_from != Auth::id() && Auth::id() != 6)) {
            return redirect()->back()->withErrors('This Learning is private!');
        }

        $users       = User::all();
        $users_array = Helpers::getUserArray(User::all());
        $categories  = LearningModule::attr(['title' => 'category', 'class' => 'form-control input-sm', 'placeholder' => 'Select a Category', 'id' => 'task_category'])
            ->selected($task->category)
            ->renderAsDropdown();

        if (request()->has('keyword')) {
            $taskNotes = $task->notes()->orderBy('is_flagged')->where('is_hide', 0)->where('remark', 'like', '%' . request()->keyword . '%')->paginate(20);
        } else {
            $taskNotes = $task->notes()->orderBy('is_flagged')->where('is_hide', 0)->paginate(20);
        }

        $hiddenRemarks = $task->notes()->where('is_hide', 1)->get();

        return view('learning-module.learning-show', [
            'task'          => $task,
            'users'         => $users,
            'users_array'   => $users_array,
            'categories'    => $categories,
            'taskNotes'     => $taskNotes,
            'hiddenRemarks' => $hiddenRemarks,
            'chatMessages'  => $chatMessages,
        ]);
    }

    public function update(Request $request, $id)
    {
        $this->validate($request, [
            'assign_to.*'  => 'required_without:assign_to_contacts',
            'sending_time' => 'sometimes|nullable|date',
        ]);

        $task = Learning::find($id);
        $task->users()->detach();
        $task->contacts()->detach();

        if ($request->assign_to) {
            foreach ($request->assign_to as $user_id) {
                $task->users()->attach([$user_id => ['type' => User::class]]);
            }

            $task->assign_to = $request->assign_to[0];
        }

        if ($request->assign_to_contacts) {
            foreach ($request->assign_to_contacts as $contact_id) {
                $task->users()->attach([$contact_id => ['type' => Contact::class]]);
            }

            $task->assign_to = $request->assign_to_contacts[0];
        }

        if ($request->sending_time) {
            $task->sending_time = $request->sending_time;
        }

        $task->save();

        return redirect()->route('task.show', $id)->withSuccess('You have successfully reassigned users!');
    }

    public function makePrivate(Request $request, $id)
    {
        $task = Learning::find($id);

        if ($task->is_private == 1) {
            $task->is_private = 0;
        } else {
            $task->is_private = 1;
        }

        $task->save();

        return response()->json([
            'task' => $task,
        ]);
    }

    public function isWatched(Request $request, $id)
    {
        $task = Learning::find($id);

        if ($task->is_watched == 1) {
            $task->is_watched = 0;
        } else {
            $task->is_watched = 1;
        }

        $task->save();

        return response()->json([
            'task' => $task,
        ]);
    }

    public function complete(Request $request, $taskid)
    {
        $task = Learning::find($taskid);
        if ($request->type == 'complete') {
            if (is_null($task->is_completed)) {
                $task->is_completed = date('Y-m-d H:i:s');
            } elseif (is_null($task->is_verified)) {
                if ($task->assignedTo) {
                    if ($task->assignedTo->fixed_price_user_or_job == 1) {
                        // Fixed price task.
                        if ($task->cost == null) {
                            if ($request->ajax()) {
                                return response()->json([
                                    'message' => 'Please provide cost for fixed price task.',
                                ], 500);
                            }

                            return redirect()->back()
                                ->with('error', 'Please provide cost for fixed price task.');
                        }
                        if (! $task->is_milestone) {
                            $payment_receipt                 = new PaymentReceipt;
                            $payment_receipt->date           = date('Y-m-d');
                            $payment_receipt->worked_minutes = $task->approximate;
                            $payment_receipt->rate_estimated = $task->cost;
                            $payment_receipt->status         = 'Pending';
                            $payment_receipt->task_id        = $task->id;
                            $payment_receipt->user_id        = $task->assign_to;
                            $payment_receipt->save();
                        }
                    }
                }
                $task->is_verified = date('Y-m-d H:i:s');
            }
        } elseif ($request->type == 'clear') {
            $task->is_completed = null;
            $task->is_verified  = null;
        }
        $task->save();

        if ($request->ajax()) {
            return response()->json([
                'task' => $task,
            ]);
        }

        return redirect()->back()
            ->with('success', 'Task marked as completed.');
    }

    public function start(Request $request, $taskid)
    {
        $task = Learning::find($taskid);

        $task->actual_start_date = date('Y-m-d H:i:s');
        $task->save();

        if ($request->ajax()) {
            return response()->json([
                'task' => $task,
            ]);
        }

        return redirect()->back()->with('success', 'Task started.');
    }

    public function statutoryComplete($taskid)
    {
        $task                  = SatutoryTask::find($taskid);
        $task->completion_date = date('Y-m-d H:i:s');

        if ($task->assign_to == Auth::id()) {
            $task->save();
        }

        $message = 'Statutory Task Completed: ' . $task->task_details;

        return redirect()->back()
            ->with('success', 'Statutory Task marked as completed.');
    }

    public function addRemark(Request $request)
    {
        $remark     = $request->input('remark');
        $id         = $request->input('id');
        $created_at = date('Y-m-d H:i:s');
        $update_at  = date('Y-m-d H:i:s');
        if ($request->module_type == 'document') {
            $remark_entry = DocumentRemark::create([
                'document_id' => $id,
                'remark'      => $remark,
                'module_type' => $request->module_type,
                'user_name'   => $request->user_name ? $request->user_name : Auth::user()->name,
            ]);
        } else {
            $remark_entry = Remark::create([
                'taskid'      => $id,
                'remark'      => $remark,
                'module_type' => $request->module_type,
                'user_name'   => $request->user_name ? $request->user_name : Auth::user()->name,
            ]);
        }

        if ($request->module_type == 'task-discussion') {
            //
        }

        return response()->json(['remark' => $remark], 200);
    }

    public function list(Request $request)
    {
        $pending_tasks   = Learning::where('is_statutory', 0)->whereNull('is_completed')->where('assign_from', Auth::id());
        $completed_tasks = Learning::where('is_statutory', 0)->whereNotNull('is_completed')->where('assign_from', Auth::id());

        if (is_array($request->user) && $request->user[0] != null) {
            $pending_tasks   = $pending_tasks->whereIn('assign_to', $request->user);
            $completed_tasks = $completed_tasks->whereIn('assign_to', $request->user);
        }

        if ($request->date != null) {
            $pending_tasks   = $pending_tasks->where('created_at', 'LIKE', "%$request->date%");
            $completed_tasks = $completed_tasks->where('created_at', 'LIKE', "%$request->date%");
        }

        $pending_tasks   = $pending_tasks->oldest()->paginate(Setting::get('pagination'));
        $completed_tasks = $completed_tasks->orderBy('is_completed', 'DESC')->paginate(Setting::get('pagination'), ['*'], 'completed-page');

        $users = Helpers::getUserArray(User::all());
        $user  = $request->user ?? [];
        $date  = $request->date ?? '';

        return view('learning-module.list', [
            'pending_tasks'   => $pending_tasks,
            'completed_tasks' => $completed_tasks,
            'users'           => $users,
            'user'            => $user,
            'date'            => $date,
        ]);
    }

    public function getremark(Request $request)
    {
        $id = $request->input('id');

        $task = Learning::find($id);

        echo $task->remark;
    }

    public function deleteTask(Request $request)
    {
        $id   = $request->input('id');
        $task = Learning::find($id);

        if ($task) {
            $task->remark = $request->input('comment');
            $task->save();

            $task->delete();
        }

        if ($request->ajax()) {
            return response()->json(['code' => 200]);
        }
    }

    public function archiveTask($id)
    {
        $task = Learning::find($id);

        $task->delete();

        if ($request->ajax()) {
            return response('success');
        }

        return redirect('/');
    }

    public function archiveTaskRemark($id)
    {
        $task            = Remark::find($id);
        $remark          = $task->remark;
        $task->delete_at = now();
        $task->update();

        return response(['success' => $remark], 200);
    }

    public function deleteStatutoryTask(Request $request)
    {
        $id   = $request->input('id');
        $task = SatutoryTask::find($id);
        $task->delete();

        return redirect()->back();
    }

    public function exportTask(Request $request)
    {
        $users = $request->input('selected_user');
        $from  = $request->input('range_start') . ' 00:00:00.000000';
        $to    = $request->input('range_end') . ' 23:59:59.000000';

        $tasks = (new Task())->newQuery()->withTrashed()->whereBetween('created_at', [$from, $to])->where('assign_from', '!=', 0)->where('assign_to', '!=', 0);

        if (! empty($users)) {
            $tasks = $tasks->whereIn('assign_to', $users);
        }

        $tasks_list = $tasks->get()->toArray();
        $tasks_csv  = [];
        $userList   = Helpers::getUserArray(User::all());

        for ($i = 0; $i < count($tasks_list); $i++) {
            $task_csv                    = [];
            $task_csv['id']              = $tasks_list[$i]['id'];
            $task_csv['SrNo']            = $i + 1;
            $task_csv['assign_from']     = $userList[$tasks_list[$i]['assign_from']];
            $task_csv['assign_to']       = $userList[$tasks_list[$i]['assign_to']];
            $task_csv['type']            = $tasks_list[$i]['is_statutory'] == 1 ? 'Statutory' : 'Other';
            $task_csv['task_subject']    = $tasks_list[$i]['task_subject'];
            $task_csv['task_details']    = $tasks_list[$i]['task_details'];
            $task_csv['completion_date'] = $tasks_list[$i]['completion_date'];
            $task_csv['remark']          = $tasks_list[$i]['remark'];
            $task_csv['completed_on']    = $tasks_list[$i]['is_completed'];
            $task_csv['created_on']      = $tasks_list[$i]['created_at'];

            array_push($tasks_csv, $task_csv);
        }

        return view('learning-module.export')->withTasks($tasks_csv);
    }

    public function outputCsv($fileName, $assocDataArray)
    {
        header('Pragma: public');
        header('Expires: 0');
        header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
        header('Cache-Control: private', false);
        header('Content-Type: text/csv');
        header('Content-Disposition: attachment;filename=' . $fileName);
        if (isset($assocDataArray['0'])) {
            $fp = fopen('php://output', 'w');
            fputcsv($fp, array_keys($assocDataArray['0']));
            foreach ($assocDataArray as $values) {
                fputcsv($fp, $values);
            }
            fclose($fp);
        }
    }

    public static function getClasses($task)
    {
        $classes = ' ';
        $classes .= ' ' . ((empty($task) && $task->assign_from == Auth::user()->id) ? 'mytask' : '') . ' ';
        $classes .= ' ' . ((empty($task) && time() > strtotime($task->completion_date . ' 23:59:59')) ? 'isOverdue' : '') . ' ';

        $task_status = empty($task) ? Helpers::statusClass($task->assign_status) : '';

        $classes .= $task_status;

        return $classes;
    }

    public function recurringTask()
    {
        $statutory_tasks = SatutoryTask::all()->toArray();

        foreach ($statutory_tasks as $statutory_task) {
            switch ($statutory_task['recurring_type']) {
                case 'EveryDay':
                    self::createTasksFromSatutary($statutory_task);
                    break;

                case 'EveryWeek':
                    if ($statutory_task['recurring_day'] == date('D')) {
                        self::createTasksFromSatutary($statutory_task);
                    }
                    break;

                case 'EveryMonth':
                    if ($statutory_task['recurring_day'] == date('d')) {
                        self::createTasksFromSatutary($statutory_task);
                    }
                    break;

                case 'EveryYear':
                    $dayNdate = date('d-n', strtotime($statutory_task['recurring_day']));
                    if ($dayNdate == date('d-n')) {
                        self::createTasksFromSatutary($statutory_task);
                    }
                    break;
            }
        }
    }

    public static function createTasksFromSatutary($statutory_task)
    {
        $statutory_task['is_statutory'] = 1;
        $statutory_task['statutory_id'] = $statutory_task['id'];
        $task                           = Learning::create($statutory_task);
    }

    public function getTaskRemark(Request $request)
    {
        $id = $request->input('id');

        if (is_null($request->module_type)) {
            $remark = \App\Learning::getremarks($id);
        } else {
            $remark = Remark::where('module_type', $request->module_type)->where('taskid', $id)->get();
        }

        return response()->json($remark, 200);
    }

    public function addWhatsAppGroup(Request $request)
    {
        $whatsapp_number = '971562744570';
        $task            = Learning::findorfail($request->id);

        // Yogesh Sir Number
        $admin_number  = User::findorfail(6);
        $assigned_from = Helpers::getUserArray(User::where('id', $task->assign_from)->get());
        $assigned_to   = Helpers::getUserArray(User::where('id', $task->assign_to)->get());
        $task_id       = $task->id;

        //Check if task id is present in Whats App Group
        $group = WhatsAppGroup::where('task_id', $task_id)->first();

        if ($group == null) {
            //First Create Group Using Admin id
            $phone  = $admin_number->phone;
            $result = app(\App\Http\Controllers\WhatsAppController::class)->createGroup($task_id, '', $phone, '', $whatsapp_number);
            if (isset($result['chatId']) && $result['chatId'] != null) {
                $task_id = $task_id;
                $chatId  = $result['chatId'];
                //Create Group
                $group           = new WhatsAppGroup;
                $group->task_id  = $task_id;
                $group->group_id = $chatId;
                $group->save();
                //Save Whats App Group With Reference To Group ID
                $group_number           = new WhatsAppGroupNumber;
                $group_number->group_id = $group->id;
                $group_number->user_id  = $admin_number->id;
                $group_number->save();
                //Chat Message
                $params['task_id']  = $task_id;
                $params['group_id'] = $group->id;
                ChatMessage::create($params);
            } else {
                $group           = new WhatsAppGroup;
                $group->task_id  = $task_id;
                $group->group_id = null;
                $group->save();

                $group_number           = new WhatsAppGroupNumber;
                $group_number->group_id = $group->id;
                $group_number->user_id  = $admin_number->id;
                $group_number->save();

                $params['task_id']      = $task_id;
                $params['group_id']     = $group->id;
                $params['error_status'] = 1;
                ChatMessage::create($params);
            }
        }

        //iF assigned from is different from Yogesh Sir
        if ($admin_number->id != array_keys($assigned_from)[0]) {
            $request->request->add(['group_id' => $group->id, 'user_id' => array_keys($assigned_from), 'task_id' => $task->id, 'whatsapp_number' => $whatsapp_number]);

            $this->addGroupParticipant(request());
        }

        //Add Assigned To Into Whats App Group
        if (array_keys($assigned_to)[0] != null) {
            $request->request->add(['group_id' => $group->id, 'user_id' => array_keys($assigned_to), 'task_id' => $task->id, 'whatsapp_number' => $whatsapp_number]);

            $this->addGroupParticipant(request());
        }

        return response()->json(['group_id' => $group->id]);
    }

    public function addGroupParticipant(Request $request)
    {
        $whatsapp_number = '971562744570';
        //Now Add Participant In the Group

        foreach ($request->user_id as $key => $value) {
            $check = WhatsAppGroupNumber::where('group_id', $request->group_id)->where('user_id', $value)->first();
            if ($check == null) {
                $user   = User::findorfail($value);
                $group  = WhatsAppGroup::where('task_id', $request->task_id)->first();
                $phone  = $user->phone;
                $result = app(\App\Http\Controllers\WhatsAppController::class)->createGroup('', $group->group_id, $phone, '', $whatsapp_number);
                if (isset($result['add']) && $result['add'] != null) {
                    $task_id = $request->task_id;

                    $group_number           = new WhatsAppGroupNumber;
                    $group_number->group_id = $request->group_id;
                    $group_number->user_id  = $user->id;
                    $group_number->save();
                    $params['user_id']  = $user->id;
                    $params['task_id']  = $task_id;
                    $params['group_id'] = $request->group_id;
                    ChatMessage::create($params);
                } else {
                    $task_id = $request->task_id;

                    $group_number           = new WhatsAppGroupNumber;
                    $group_number->group_id = $request->group_id;
                    $group_number->user_id  = $user->id;
                    $group_number->save();
                    $params['user_id']      = $user->id;
                    $params['task_id']      = $task_id;
                    $params['group_id']     = $request->group_id;
                    $params['error_status'] = 1;
                    ChatMessage::create($params);
                }
            }
        }

        return redirect()->back()->with('message', 'Participants Added To Group');
    }

    public function getDetails(Request $request)
    {
        $task = \App\Learning::where('id', $request->get('task_id', 0))->first();

        if ($task) {
            return response()->json(['code' => 200, 'data' => $task]);
        }

        return response()->json(['code' => 500, 'message' => 'Sorry, no task found']);
    }

    public function saveNotes(Request $request)
    {
        $task = \App\Learning::where('id', $request->get('task_id', 0))->first();

        if ($task) {
            if ($task->is_statutory == 3) {
                foreach ($request->note as $note) {
                    if ($note != null) {
                        Remark::create([
                            'taskid'      => $task->id,
                            'remark'      => $note,
                            'module_type' => 'task-note',
                        ]);
                    }
                }
            }

            return response()->json(['code' => 200, 'data' => $task, 'message' => 'Note added!']);
        }

        return response()->json(['code' => 500, 'message' => 'Sorry, no task found']);
    }

    public function createLearningFromSortcut(Request $request)
    {
        $created        = 0;
        $message        = '';
        $assignedUserId = 0;
        $data           = $request->except('_token');

        Learning::create([
            'learning_user'       => $request->learning_user,
            'learning_vendor'     => $request->learning_vendor,
            'learning_subject'    => $request->learning_subject,
            'learning_module'     => $request->learning_module,
            'learning_submodule'  => $request->learning_submodule,
            'learning_assignment' => $request->learning_assignment,
            'learning_duedate'    => $request->learning_duedate,
            'learning_status'     => $request->learning_status,
        ]);

        $created = 1;

        return redirect()->route('learning.index');
    }

    public function getDiscussionSubjects()
    {
        $discussion_subjects = Learning::where('is_statutory', 3)->where('is_verified', null)->pluck('task_subject', 'id')->toArray();

        return response()->json(['code' => 200, 'discussion_subjects' => $discussion_subjects]);
    }

    /***
     * Delete task note
     */
    public function deleteTaskNote(Request $request)
    {
        $task = Remark::whereId($request->note_id)->delete();
        session()->flash('success', 'Deleted successfully.');

        return response(['success' => 'Deleted'], 200);
    }

    /**
     * Hide task note from list
     */
    public function hideTaskRemark(Request $request)
    {
        $task = Remark::whereId($request->note_id)->update(['is_hide' => 1]);
        session()->flash('success', 'Hide successfully.');

        return response(['success' => 'Hidden'], 200);
    }

    public function assignMasterUser(Request $request)
    {
        $masterUserId = $request->get('master_user_id');
        $issue        = Learning::find($request->get('issue_id'));

        $user = User::find($masterUserId);

        if (! $user) {
            return response()->json([
                'status' => 'success', 'message' => 'user not found',
            ], 500);
        }

        $issue->master_user_id = $masterUserId;

        $issue->save();

        $hubstaff_project_id = config('env.HUBSTAFF_BULK_IMPORT_PROJECT_ID');

        $assignedUser = HubstaffMember::where('user_id', $masterUserId)->first();

        $hubstaffUserId = null;
        if ($assignedUser) {
            $hubstaffUserId = $assignedUser->hubstaff_user_id;
        }
        $message = '#' . $issue->id . '. ' . $issue->task_subject . '. ' . $issue->task_details;
        $summary = substr($message, 0, 200);

        $hubstaffTaskId = $this->createHubstaffTask(
            $summary,
            $hubstaffUserId,
            $hubstaff_project_id
        );
        if ($hubstaffTaskId) {
            $issue->lead_hubstaff_task_id = $hubstaffTaskId;
            $issue->save();
        }
        if ($hubstaffTaskId) {
            $task                      = new HubstaffTask();
            $task->hubstaff_task_id    = $hubstaffTaskId;
            $task->project_id          = $hubstaff_project_id;
            $task->hubstaff_project_id = $hubstaff_project_id;
            $task->summary             = $message;
            $task->save();
        }

        return response()->json([
            'status' => 'success',
        ]);
    }

    public function uploadDocuments(Request $request)
    {
        $path = storage_path('tmp/uploads');

        if (! file_exists($path)) {
            mkdir($path, 0777, true);
        }

        $file = $request->file('file');

        $name = uniqid() . '_' . trim($file->getClientOriginalName());

        $file->move($path, $name);

        return response()->json([
            'name'          => $name,
            'original_name' => $file->getClientOriginalName(),
        ]);
    }

    public function saveDocuments(Request $request)
    {
        if (! $request->learning_id || $request->learning_id == '') {
            return response()->json(['code' => 500, 'data' => [], 'message' => 'Select one learning']);
        }
        $documents = $request->input('document', []);
        $learning  = Learning::find($request->learning_id);
        if (! empty($documents)) {
            $count = 0;
            foreach ($request->input('document', []) as $file) {
                $path  = storage_path('tmp/uploads/' . $file);
                $media = MediaUploader::fromSource($path)
                    ->toDirectory('learning-files/' . floor($learning->id / config('constants.image_per_folder')))
                    ->upload();
                $learning->attachMedia($media, config('constants.media_tags'));
                $count++;
            }

            return response()->json(['code' => 200, 'data' => [], 'message' => 'Done!']);
        } else {
            return response()->json(['code' => 500, 'data' => [], 'message' => 'No documents for upload']);
        }
    }

    public function previewTaskImage($id)
    {
        $task    = Learning::find($id);
        $records = [];
        if ($task) {
            $userList = User::pluck('name', 'id')->all();
            if ($task->hasMedia(config('constants.attach_image_tag'))) {
                foreach ($task->getMedia(config('constants.attach_image_tag')) as $media) {
                    $imageExtensions = ['jpg', 'jpeg', 'gif', 'png', 'bmp', 'svg', 'svgz', 'cgm', 'djv', 'djvu', 'ico', 'ief', 'jpe', 'pbm', 'pgm', 'pnm', 'ppm', 'ras', 'rgb', 'tif', 'tiff', 'wbmp', 'xbm', 'xpm', 'xwd'];
                    $explodeImage    = explode('.', getMediaUrl($media));
                    $extension       = end($explodeImage);

                    if (in_array($extension, $imageExtensions)) {
                        $isImage = true;
                    } else {
                        $isImage = false;
                    }
                    $records[] = [
                        'id'         => $media->id,
                        'url'        => getMediaUrl($media),
                        'task_id'    => $task->id,
                        'isImage'    => $isImage,
                        'userList'   => $userList,
                        'created_at' => $media->created_at,
                    ];
                }
            }
        }

        $records = array_reverse($records);
        $title   = 'Preview images';

        return view('learning-module.partials.preview-task-images', compact('title', 'records'));
    }

    public function approveTimeHistory(Request $request)
    {
        if (Auth::user()->isAdmin) {
            if (! $request->approve_time || $request->approve_time == '' || ! $request->developer_task_id || $request->developer_task_id == '') {
                return response()->json([
                    'message' => 'Select one time first',
                ], 500);
            }
            DeveloperTaskHistory::where('developer_task_id', $request->developer_task_id)->where('attribute', 'estimation_minute')->where('model', \App\Task::class)->update(['is_approved' => 0]);
            $history              = DeveloperTaskHistory::find($request->approve_time);
            $history->is_approved = 1;
            $history->save();

            return response()->json([
                'message' => 'Success',
            ], 200);
        }

        return response()->json([
            'message' => 'Only admin can approve',
        ], 500);
    }

    public function getTrackedHistory(Request $request)
    {
        $id   = $request->id;
        $type = $request->type;
        if ($type == 'lead') {
            $task_histories = DB::select(DB::raw('SELECT hubstaff_activities.task_id,cast(hubstaff_activities.starts_at as date) as starts_at_date,sum(hubstaff_activities.tracked) as total_tracked,learnings.master_user_id,users.name FROM `hubstaff_activities`  join learnings on learnings.lead_hubstaff_task_id = hubstaff_activities.task_id join users on users.id = learnings.master_user_id where learnings.id = ' . $id . ' group by starts_at_date'));
        } else {
            $task_histories = DB::select(DB::raw('SELECT hubstaff_activities.task_id,cast(hubstaff_activities.starts_at as date) as starts_at_date,sum(hubstaff_activities.tracked) as total_tracked,learnings.assign_to,users.name FROM `hubstaff_activities`  join learnings on learnings.hubstaff_task_id = hubstaff_activities.task_id join users on users.id = learnings.assign_to where learnings.id = ' . $id . ' group by starts_at_date'));
        }

        return response()->json(['histories' => $task_histories]);
    }

    public function updateTaskDueDate(Request $request)
    {
        if ($request->type == 'TASK') {
            $task = Learning::find($request->task_id);
            if ($request->date) {
                $task->update(['due_date' => $request->date]);
            }
        } else {
            if ($request->date) {
                DeveloperTask::where('id', $request->task_id)
                    ->update(['due_date' => $request->date]);
            }
        }

        return response()->json([
            'message' => 'Successfully updated',
        ], 200);
    }

    public function createHubstaffManualTask(Request $request)
    {
        $task = Learning::find($request->id);
        if ($task) {
            if ($request->type == 'developer') {
                $user_id = $task->assign_to;
            } else {
                $user_id = $task->master_user_id;
            }
            $hubstaff_project_id = config('env.HUBSTAFF_BULK_IMPORT_PROJECT_ID');

            $assignedUser = HubstaffMember::where('user_id', $user_id)->first();

            $hubstaffUserId = null;
            if ($assignedUser) {
                $hubstaffUserId = $assignedUser->hubstaff_user_id;
            }
            $taskSummery = '#' . $task->id . '. ' . $task->task_subject;
            if ($hubstaffUserId) {
                $hubstaffTaskId = $this->createHubstaffTask(
                    $taskSummery,
                    $hubstaffUserId,
                    $hubstaff_project_id
                );
            } else {
                return response()->json([
                    'message' => 'Hubstaff member not found',
                ], 500);
            }
            if ($hubstaffTaskId) {
                if ($request->type == 'developer') {
                    $task->hubstaff_task_id = $hubstaffTaskId;
                } else {
                    $task->lead_hubstaff_task_id = $hubstaffTaskId;
                }
                $task->save();
            } else {
                return response()->json([
                    'message' => 'Hubstaff task not created',
                ], 500);
            }
            if ($hubstaffTaskId) {
                $task                      = new HubstaffTask();
                $task->hubstaff_task_id    = $hubstaffTaskId;
                $task->project_id          = $hubstaff_project_id;
                $task->hubstaff_project_id = $hubstaff_project_id;
                $task->summary             = $taskSummery;
                $task->save();
            }

            return response()->json([
                'message' => 'Successful',
            ], 200);
        } else {
            return response()->json([
                'message' => 'Task not found',
            ], 500);
        }
    }

    public function getTaskCategories()
    {
        $categories = LearningModule::where('is_approved', 1)->get();

        return view('learning-module.partials.all-task-category', compact('categories'));
    }

    public function completeBulkTasks(Request $request)
    {
        if (count($request->selected_tasks) > 0) {
            foreach ($request->selected_tasks as $t) {
                $task               = Learning::find($t);
                $task->is_completed = date('Y-m-d H:i:s');
                $task->is_verified  = date('Y-m-d H:i:s');
                if ($task->assignedTo) {
                    if ($task->assignedTo->fixed_price_user_or_job == 1) {
                        // Fixed price task.
                        continue;
                    }
                }
                $task->save();
            }
        }

        return response()->json(['message' => 'Successful']);
    }

    public function deleteBulkTasks(Request $request)
    {
        if (count($request->selected_tasks) > 0) {
            foreach ($request->selected_tasks as $t) {
                $task = Learning::where('id', $t)->delete();
            }
        }

        return response()->json(['message' => 'Successful']);
    }

    public function getTimeHistory(Request $request)
    {
        $id          = $request->id;
        $task_module = DeveloperTaskHistory::join('users', 'users.id', 'developer_tasks_history.user_id')->where('developer_task_id', $id)->where('model', \App\Task::class)->where('attribute', 'estimation_minute')->select('developer_tasks_history.*', 'users.name')->get();
        if ($task_module) {
            return $task_module;
        }

        return 'error';
    }

    public function sendDocument(Request $request)
    {
        if ($request->id != null && $request->user_id != null) {
            $media = \Plank\Mediable\Media::find($request->id);
            $user  = \App\User::find($request->user_id);
            if ($user) {
                if ($media) {
                    \App\ChatMessage::sendWithChatApi(
                        $user->phone,
                        null,
                        'Please find attached file',
                        getMediaUrl($media)
                    );

                    return response()->json(['message' => 'Document send succesfully'], 200);
                }
            } else {
                return response()->json(['message' => 'User  not available'], 500);
            }
        }

        return response()->json(['message' => 'Sorry required fields is missing like id , userid'], 500);
    }

    /* update task status
     */

    public function updateStatus(Request $request)
    {
        try {
            $task = Learning::find($request->task_id);

            $task->status = $request->status;

            $task->save();

            return response()->json([
                'status' => 'success', 'message' => 'The task status updated.',
            ], 200);
        } catch (Exception $e) {
            return response()->json([
                'status' => 'error', 'message' => 'The task status not updated.',
            ], 500);
        }
    }

    /* create new task status */

    public function createStatus(Request $request)
    {
        $this->validate($request, ['task_status' => 'required']);

        try {
            TaskStatus::create(['name' => $request->task_status]);

            return redirect()->back()->with('success', 'The task status created successfully.');
        } catch (Exception $e) {
            return redirect()->back()->with('error', $e->getMessage());
        }
    }

    public function learningModuleUpdate(Request $request)
    {
        $id       = $request->id;
        $learning = Learning::find($id);
        if ($request->user_id) {
            $learning->learning_user = $request->user_id;
            $learning->save();

            return response()->json(['message' => 'User Updated Successfully']);
        }

        if ($request->provider_id) {
            $learning->learning_vendor = $request->provider_id;
            $learning->save();

            return response()->json(['message' => 'provider Updated Successfully']);
        }

        if ($request->subject) {
            $learning->learning_subject = $request->subject;
            $learning->save();

            return response()->json(['message' => 'Subject Updated Successfully']);
        }

        if ($request->module_id) {
            $learning->learning_module    = $request->module_id;
            $learning->learning_submodule = null;
            $learning->save();
            $submodule = LearningModule::where('parent_id', $learning->learning_module)->get();

            return response()->json(['message' => 'Module Updated Successfully', 'learning_id' => $learning->id, 'submodule' => $submodule]);
        }

        if ($request->submodule_id) {
            $learning->learning_submodule = $request->submodule_id;
            $learning->save();

            return response()->json(['message' => 'Submodule Updated Successfully']);
        }

        if ($request->assignment) {
            $learning->learning_assignment = $request->assignment;
            $learning->save();

            return response()->json(['message' => 'Assignment Updated Successfully']);
        }

        if ($request->status_id) {
            LearningStatusHistory::create([
                'learning_id' => $learning->id,
                'old_status'  => $learning->learning_status ?? 0,
                'new_status'  => $request->status_id,
                'update_by'   => $request->user()->id,
            ]);

            $learning->learning_status = $request->status_id;
            $learning->save();
            $s = TaskStatus::where('name', 'completed')->first();
            if ($s) {
                if ($s->id == $request->status_id) {
                    $payment_receipt                 = new PaymentReceipt;
                    $payment_receipt->date           = date('Y-m-d');
                    $payment_receipt->worked_minutes = 0;
                    $payment_receipt->rate_estimated = $learning->cost;
                    $payment_receipt->status         = 'Pending';
                    $payment_receipt->task_id        = $learning->id;
                    $payment_receipt->user_id        = $learning->assign_to;
                    $payment_receipt->save();
                }
            }

            return response()->json(['message' => 'Status Updated Successfully']);
        }
    }

    public function getStatusHistory(Request $request)
    {
        $learningid = $request->learningid;

        $records = LearningStatusHistory::with('oldstatus', 'newstatus', 'user')
            ->where('learning_id', $learningid)
            ->latest()
            ->get();

        if ($records) {
            $response = [];
            foreach ($records as $row) {
                $response[] = [
                    'created_date' => $row->created_at->format('Y-m-d'),
                    'old_status'   => optional($row->oldstatus)->name ?? '-',
                    'new_status'   => optional($row->newstatus)->name ?? '-',
                    'update_by'    => $row->user->name,
                ];
            }

            return $response;
        }

        return 'error';
    }

    public function saveDueDateUpdate(Request $request)
    {
        $learning = Learning::find($request->get('learningid'));
        $due_date = date('Y-m-d', strtotime($request->due_date));
        if ($learning && $request->due_date) {
            LearningDueDateHistory::create([
                'learning_id' => $learning->id,
                'old_duedate' => $learning->learning_duedate ?? 0,
                'new_duedate' => $due_date,
                'update_by'   => $request->user()->id,
            ]);
        }

        $learning->learning_duedate = $due_date;
        $learning->save();

        return response()->json([
            'status' => 'success',
        ]);
    }

    public function getDueDateHistory(Request $request)
    {
        $learningid = $request->learningid;

        $records = LearningDueDateHistory::with('user')
            ->where('learning_id', $learningid)
            ->latest()
            ->get();

        if ($records) {
            $response = [];
            foreach ($records as $row) {
                $response[] = [
                    'created_date' => $row->created_at->format('Y-m-d'),
                    'old_duedate'  => $row->old_duedate ?? '-',
                    'new_duedate'  => $row->new_duedate ?? '-',
                    'update_by'    => $row->user->name,
                ];
            }

            return $response;
        }

        return 'error';
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/ListingPaymentsController.php 
Content: <?php

namespace App\Http\Controllers;

use App\User;
use App\ListingPayments;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;

class ListingPaymentsController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     *                                   Get the listing history
     */
    public function index(Request $request)
    {
        // simply get stats for listing rejected or approved by user
        $histories = DB::table('listing_histories')
            ->selectRaw('
                  user_id,
                  DATE(`created_at`) as date,
                  SUM(case when action = "LISTING_APPROVAL" then 1 Else 0 End) as attribute_approved,
                  SUM(case when action = "LISTING_REJECTED" then 1 Else 0 End) as attribute_rejected
            ')
            ->whereIn('action', ['LISTING_APPROVAL', 'LISTING_REJECTED'])
            ->groupBy(DB::raw('`user_id`, DATE(`created_at`)'));

        if ($request->get('user_id') > 0) {
            $histories = $histories->where('user_id', $request->get('user_id'));
        }

        $histories = $histories->get();

        $users = User::pluck('name', 'id')->toArray();

        return view('products.listing_payment', compact('histories', 'users', 'request'));
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     *
     * @return \Illuminate\Http\Response
     *                                   Create the entry for the paid amount
     */
    public function store(Request $request)
    {
        $this->validate($request, [
            'date'    => 'required',
            'amount'  => 'required',
            'user_id' => 'required',
        ]);

        $amt              = new ListingPayments();
        $amt->paid_at     = $request->get('date');
        $amt->amount      = $request->get('amount');
        $amt->user_id     = $request->get('user_id');
        $amt->product_ids = [];
        $amt->remarks     = 'Paid till ' . $request->get('date');
        $amt->save();

        return redirect()->back()->with('success', 'Amount paid successfully!');
    }

    /**
     * Display the specified resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function show(ListingPayments $listingPayments)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function edit(ListingPayments $listingPayments)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, ListingPayments $listingPayments)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function destroy(ListingPayments $listingPayments)
    {
        //
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/LiveChatController.php 
Content: <?php

namespace App\Http\Controllers;

use DB;
use Mail;
use App\User;
use App\Email;
use App\Reply;
use App\Setting;
use App\Tickets;
use App\Customer;
use App\CreditLog;
use Carbon\Carbon;
use App\LogRequest;
use App\ChatMessage;
use App\LiveChatLog;
use App\ChatbotReply;
use App\LiveChatUser;
use App\StoreWebsite;
use App\WebsiteStore;
use App\CreditHistory;
use App\CreditEmailLog;
use App\TicketStatuses;
use App\GoogleTranslate;
use App\CustomerLiveChat;
use App\LiveChatEventLog;
use Plank\Mediable\Media;
use App\WatsonChatJourney;
use App\LivechatincSetting;
use Illuminate\Support\Str;
use Illuminate\Http\Request;
use App\Models\DataTableColumn;
use App\Helpers\TranslationHelper;
use App\Mails\Manual\PurchaseEmail;
use App\Library\Watson\Model as WatsonManager;
use Plank\Mediable\Facades\MediaUploader as MediaUploader;

class LiveChatController extends Controller
{
    //Webhook
    public function incoming(Request $request)
    {
        \Log::channel('chatapi')->debug(': ChatApi' . "\nMessage :" . '-- incoming >>');

        \Log::channel('chatapi')->info($request->getContent());

        $receivedJson = json_decode($request->getContent());

        $eventType  = '';
        $threadId   = '';
        $customerId = 0;
        $websiteId  = 0;
        if (isset($receivedJson->payload->chat)) {
            $chat     = $receivedJson->payload->chat;
            $threadId = $chat->id;
        } elseif (isset($receivedJson->payload->chat_id)) {
            $threadId = $receivedJson->payload->chat_id;
        }
        WatsonChatJourney::updateOrCreate(['chat_id' => $threadId], ['chat_entered' => 1]);
        if (isset($receivedJson->payload->chat->thread->properties->routing->start_url)) {
            $websiteURL = self::getDomain($receivedJson->payload->chat->thread->properties->routing->start_url);
            $website    = \App\StoreWebsite::where('website', 'like', '%' . $websiteURL . '%')->first();
            if ($website) {
                $websiteId = $website->id;
            }
        } else {
            $websiteId = LiveChatEventLog::where('thread', $threadId)->whereNotNull('store_website_id')->where('store_website_id', '<>', 0)->pluck('store_website_id')->first();
        }
        LiveChatEventLog::create(['customer_id' => 0, 'thread' => $threadId, 'event_type' => '', 'store_website_id' => $websiteId, 'log' => json_encode($receivedJson)]);

        if (isset($receivedJson->event_type)) {
            $eventType = $receivedJson->event_type;

            \Log::channel('chatapi')->debug(': ChatApi' . "\nMessage :" . '--event_type >>');
            //When customer Starts chat
            if ($receivedJson->event_type == 'chat_started') {
                \Log::channel('chatapi')->debug(': ChatApi' . "\nMessage :" . '--chat_started >>');
                ///Getting the chat
                $chat = $receivedJson->chat;

                //Getting Agent
                $agent = $chat->agents;
                // name": "SoloLuxury"
                // +"login": "yogeshmordani@icloud.com"
                $chat_survey = $receivedJson->pre_chat_survey;
                $detials     = [];
                foreach ($chat_survey as $survey) {
                    $label = strtolower($survey->label);

                    if (strpos($label, 'name') !== false) {
                        array_push($detials, $survey->answer);
                    }
                    if (strpos($label, 'e-mail') !== false) {
                        array_push($detials, $survey->answer);
                    }
                    if (strpos($label, 'phone') !== false) {
                        array_push($detials, $survey->answer);
                    }
                }

                $name  = $detials[0];
                $email = $detials[1];
                $phone = $detials[2];
                //Check if customer exist

                $customer = Customer::where('email', $email)->first();

                //Save Customer
                if ($customer == null && $customer == '') {
                    \Log::channel('chatapi')->debug(': ChatApi' . "\nMessage :" . '-- save customer >>' . $name);

                    $customer           = new Customer;
                    $customer->name     = $name;
                    $customer->email    = $email;
                    $customer->phone    = null;
                    $customer->language = 'en';
                    $customer->save();
                }
                $customerId = $customer->id;
                LiveChatEventLog::create(['customer_id' => $customerId, 'thread' => $threadId, 'store_website_id' => $websiteId, 'event_type' => $eventType, 'log' => 'entered in chat started condition']);
                LiveChatEventLog::create(['customer_id' => $customerId, 'thread' => $threadId, 'store_website_id' => $websiteId, 'event_type' => $eventType, 'log' => 'customer details fetched']);
            }
        }

        if (isset($receivedJson->action)) {
            \Log::channel('chatapi')->debug(': ChatApi' . "\nMessage :" . '-- action >>');
            //Incomg Event
            if ($receivedJson->action == 'incoming_event') {
                \Log::channel('chatapi')->debug(': ChatApi' . "\nMessage :" . '-- incoming_event >>');

                //Chat Details
                $chatDetails = $receivedJson->payload;
                //Chat Details
                $chatId = $chatDetails->chat_id;

                //Check if customer which has this id
                $customerLiveChat = CustomerLiveChat::where('thread', $chatId)->first();

                //update to not seen
                if ($customerLiveChat != null) {
                    $customerLiveChat->seen   = 0;
                    $customerLiveChat->status = 1;
                    $customerLiveChat->update();
                }
                if ($chatDetails->event->type == 'message') {
                    \Log::channel('chatapi')->debug(': ChatApi' . "\nMessage :" . '-- message >>');

                    $message   = $chatDetails->event->text;
                    $author_id = $chatDetails->event->author_id;

                    // Finding Agent
                    $agent = User::where('email', $author_id)->first();

                    if ($agent != '' && $agent != null) {
                        $userID = $agent->id;
                    } else {
                        $userID = null;
                    }

                    $customerDetails = Customer::find($customerLiveChat->customer_id);
                    $language        = $customerDetails->language;
                    LiveChatEventLog::create(['customer_id' => $customerLiveChat->customer_id, 'thread' => $threadId, 'event_type' => '', 'store_website_id' => $websiteId, 'log' => 'customer language  ' . $language]);

                    LiveChatEventLog::create(['customer_id' => $customerLiveChat->customer_id, 'thread' => $threadId, 'event_type' => 'incoming_chat', 'store_website_id' => $websiteId, 'log' => 'google key used  ' . config('env.GOOGLE_TRANSLATE_API_KEY')]);
                    $result = (new GoogleTranslate)->detectLanguage($message);
                    if (isset($result['languageCode'])) {
                        $customerDetails->language = $result['languageCode'];

                        $language = $result['languageCode'];
                        LiveChatEventLog::create(['customer_id' => $customerLiveChat->customer_id, 'thread' => $threadId, 'event_type' => 'incoming_chat', 'store_website_id' => $websiteId, 'log' => ' language detected ' . $language]);
                    } elseif (isset($result->message)) {
                        LiveChatEventLog::create(['customer_id' => $customerLiveChat->customer_id, 'thread' => $threadId, 'event_type' => 'incoming_chat', 'store_website_id' => $websiteId, 'log' => 'Googlr translation' . $result->message]);
                    }

                    $result = (new GoogleTranslate)->translate($language, $message);
                    if ($result != null) {
                        $message = $result;
                    } else {
                        $result = 'Could not convert Message';
                    }
                    LiveChatEventLog::create(['customer_id' => $customerLiveChat->customer_id, 'thread' => $threadId, 'event_type' => '', 'store_website_id' => $websiteId, 'log' => ' translated message ' . $result]);

                    if ($author_id == 'buying@amourint.com') {
                        $messageStatus = 2;
                    } else {
                        $messageStatus = 9;
                    }

                    $message_application_id = 2;

                    $params = [
                        'unique_id'              => $chatDetails->chat_id,
                        'message'                => $message,
                        'customer_id'            => $customerLiveChat->customer_id,
                        'approved'               => 1,
                        'status'                 => $messageStatus,
                        'is_delivered'           => 1,
                        'user_id'                => $userID,
                        'message_application_id' => $message_application_id,
                    ];
                    LiveChatEventLog::create(['customer_id' => $customerLiveChat->customer_id, 'store_website_id' => $websiteId, 'thread' => $chatId, 'event_type' => 'incoming_event', 'log' => 'Customer details fetched']);
                    LiveChatEventLog::create(['customer_id' => $customerLiveChat->customer_id, 'store_website_id' => $websiteId, 'thread' => $chatId, 'event_type' => 'incoming_event', 'log' => 'Entered in incoming_event message condition']);

                    // Create chat message
                    $chatMessage = ChatMessage::create($params);
                    LiveChatEventLog::create(['customer_id' => $customerLiveChat->customer_id, 'store_website_id' => $websiteId, 'thread' => $chatId, 'event_type' => 'incoming_event', 'log' => 'Message saved in chat messages.']);

                    //STRAT - Purpose : Add record in chatbotreplay - DEVTASK-18280
                    if ($messageStatus != 2) {
                        \App\ChatbotReply::create([
                            'question' => $message,
                            'reply'    => json_encode([
                                'context'  => 'chatbot',
                                'issue_id' => $chatDetails->chat_id,
                                'from'     => 'chatbot',
                            ]),
                            'replied_chat_id' => $chatMessage->id,
                            'reply_from'      => 'chatbot',
                        ]);
                        WatsonChatJourney::updateOrCreate(['chat_id' => $threadId], ['message_received' => $message]);
                        LiveChatEventLog::create(['customer_id' => $customerLiveChat->customer_id, 'store_website_id' => $websiteId, 'thread' => $chatId, 'event_type' => 'incoming_event', 'log' => $message . ' saved in chatbot reply .']);
                    }
                    //END - DEVTASK-18280

                    // if customer found then send reply for it
                    if (! empty($customerDetails) && $message != '') {
                        LiveChatEventLog::create(['customer_id' => $customerLiveChat->customer_id, 'store_website_id' => $websiteId, 'thread' => $chatId, 'event_type' => 'incoming_event', 'log' => 'Message sent to watson ' . $message]);
                        WatsonManager::sendMessage($customerDetails, $message, '', $message_application_id);
                    }
                }

                if ($chatDetails->event->type == 'file') {
                    \Log::channel('chatapi')->debug(': ChatApi' . "\nMessage :" . '-- file >>');

                    $author_id = $chatDetails->event->author_id;

                    // Finding Agent
                    $agent = User::where('email', $author_id)->first();

                    if ($agent != null) {
                        $userID = $agent->id;
                    } else {
                        $userID = null;
                    }

                    if ($author_id == 'buying@amourint.com') {
                        $messageStatus = 2;
                    } else {
                        $messageStatus = 9;
                    }

                    //creating message
                    $params = [
                        'unique_id'              => $chatDetails->chat_id,
                        'customer_id'            => $customerLiveChat->customer_id,
                        'approved'               => 1,
                        'status'                 => $messageStatus,
                        'is_delivered'           => 1,
                        'user_id'                => $userID,
                        'message_application_id' => 2,
                    ];

                    $from = 'livechat';
                    // Create chat message
                    $chatMessage = ChatMessage::create($params);

                    $numberPath = date('d');
                    $url        = $chatDetails->event->url;
                    try {
                        $jpg      = \Image::make($url)->encode('jpg');
                        $filename = $chatDetails->event->name;
                        $media    = MediaUploader::fromString($jpg)->toDirectory('/chat-messages/' . $numberPath)->useFilename($filename)->upload();
                        $chatMessage->attachMedia($media, config('constants.media_tags'));
                    } catch (Exception $e) {
                        $file = @file_get_contents($url);
                        if (! empty($file)) {
                            $filename = $chatDetails->event->name;
                            $media    = MediaUploader::fromString($file)->toDirectory('/chat-messages/' . $numberPath)->useFilename($filename)->upload();
                            $chatMessage->attachMedia($media, config('constants.media_tags'));
                        }
                    }
                }

                if ($chatDetails->event->type == 'system_message') {
                    $customerLiveChat = CustomerLiveChat::where('thread', $chatId)->first();
                    if ($customerLiveChat != null) {
                        $customerLiveChat->status = 0;
                        $customerLiveChat->seen   = 1;
                        $customerLiveChat->update();
                    }
                }

                // Add to chat_messages if we have a customer
            }

            if ($receivedJson->action == 'incoming_chat') {
                \Log::channel('chatapi')->debug(': ChatApi' . "\nMessage :" . '-- incoming_chat >>');

                $chat   = $receivedJson->payload->chat;
                $chatId = $chat->id;

                if (isset($chat->thread->events[0]->fields[1]->value)) {
                    $userEmail = $chat->thread->events[0]->fields[1]->value;
                } elseif (isset($chat->thread->events[2]->fields[1]->value)) {
                    $userEmail = $chat->thread->events[2]->fields[1]->value;
                } else {
                    $userEmail = null;
                }
                $userName = $chat->users[0]->name;

                $customer_language = 'en';
                $websiteId         = null;
                try {
                    $websiteURL = self::getDomain($chat->thread->properties->routing->start_url);
                    $website    = \App\StoreWebsite::where('website', 'like', '%' . $websiteURL . '%')->first();
                    if ($website) {
                        $websiteId = $website->id;
                    }
                } catch (Exception $e) {
                    $websiteURL = '';
                }
                $customer = Customer::where('email', $userEmail);
                if ($websiteId > 0) {
                    $customer = $customer->where('store_website_id', $websiteId);
                }
                $customer = $customer->first();

                if ($customer != null) {
                    \Log::channel('chatapi')->debug(': ChatApi' . "\nMessage :" . '-- Customer Null');

                    //Find if its has ID
                    $chatID = CustomerLiveChat::where('customer_id', $customer->id)->where('thread', $chatId)->first();
                    if ($chatID == null) {
                        \Log::channel('chatapi')->debug(': ChatApi' . "\nMessage :" . '-- chatID Null');

                        //check if only thread exist and make it null
                        $onlyThreadCheck = CustomerLiveChat::where('thread', $chatId)->first();
                        if ($onlyThreadCheck) {
                            $onlyThreadCheck->thread = null;
                            $onlyThreadCheck->seen   = 1;
                            $onlyThreadCheck->save();
                        }

                        \Log::channel('chatapi')->debug(': ChatApi' . "\nMessage :" . '-- Add CustomerLiveChat  111 ::::' . $chatId);
                        $customerChatId              = new CustomerLiveChat;
                        $customerChatId->customer_id = $customer->id;
                        $customerChatId->thread      = $chatId;
                        $customerChatId->status      = 1;
                        $customerChatId->seen        = 0;
                        $customerChatId->website     = $websiteURL;
                        $customerChatId->save();
                    } else {
                        \Log::channel('chatapi')->debug(': ChatApi' . "\nMessage :" . '-- chatID Not Null');
                        \Log::channel('chatapi')->debug(': ChatApi' . "\nMessage :" . '-- Add CustomerLiveChat 222 ::::' . $chatId);
                        $chatID->customer_id = $customer->id;
                        $chatID->thread      = $chatId;
                        $chatID->status      = 1;
                        $chatID->website     = $websiteURL;
                        $chatID->seen        = 0;
                        $chatID->update();
                    }
                } else {
                    \Log::channel('chatapi')->debug(': ChatApi' . "\nMessage :" . '-- Customer Not Null');

                    //check if only thread exist and make it null
                    $onlyThreadCheck = CustomerLiveChat::where('thread', $chatId)->first();
                    if ($onlyThreadCheck) {
                        $onlyThreadCheck->thread = null;
                        $onlyThreadCheck->seen   = 1;
                        $onlyThreadCheck->save();
                    }

                    \Log::channel('chatapi')->debug(': ChatApi' . "\nMessage :" . '-- Add Customer ::::' . $userName);
                    $customer                   = new Customer;
                    $customer->name             = $userName;
                    $customer->email            = $userEmail;
                    $customer->language         = $customer_language;
                    $customer->phone            = null;
                    $customer->store_website_id = $websiteId;
                    $customer->language         = 'en';
                    $customer->save();

                    //Save Customer with Chat ID
                    \Log::channel('chatapi')->debug(': ChatApi' . "\nMessage :" . '-- Add CustomerLiveChat 3333::::' . $chatId);
                    $customerChatId              = new CustomerLiveChat;
                    $customerChatId->customer_id = $customer->id;
                    $customerChatId->thread      = $chatId;
                    $customerChatId->status      = 1;
                    $customerChatId->seen        = 0;
                    $customerChatId->website     = $websiteURL;
                    $customerChatId->save();
                }
                try {
                    $text = $chat->thread->events[1]->text;
                    LiveChatEventLog::create(['customer_id' => $customer->id, 'store_website_id' => $websiteId, 'thread' => $chatId, 'event_type' => 'incoming_chat', 'log' => 'text found ' . $text]);
                    $replyFound = ChatbotReply::where('answer', $text)->first();
                    if ($replyFound == null) {
                        WatsonChatJourney::updateOrCreate(['chat_id' => $threadId], ['reply_searched_in_watson' => 1]);
                    } else {
                        WatsonChatJourney::updateOrCreate(['chat_id' => $threadId], ['reply_found_in_database' => 1]);
                    }

                    WatsonChatJourney::updateOrCreate(['chat_id' => $threadId], ['reply' => $text]);
                    WatsonChatJourney::updateOrCreate(['chat_id' => $threadId], ['response_sent_to_cusomer' => 1]);
                } catch (Exception $e) {
                    LiveChatEventLog::create(['customer_id' => $customer->id, 'store_website_id' => $websiteId, 'thread' => $chatId, 'event_type' => 'incoming_chat', 'log' => 'incoming chat error ' . $e . ' <br>data ' . json_encode($chat->thread->events[1])]);
                    $text = 'Error';
                }
            }

            if ($receivedJson->action == 'thread_closed') {
                $chatId = $receivedJson->payload->chat_id;

                $customerLiveChat = CustomerLiveChat::where('thread', $chatId)->first();

                if ($customerLiveChat != null) {
                    $customerLiveChat->thread = null;
                    $customerLiveChat->status = 0;
                    $customerLiveChat->seen   = 1;
                    $customerLiveChat->update();
                }
                LiveChatEventLog::create(['customer_id' => $customerLiveChat->customer_id, 'store_website_id' => $websiteId, 'thread' => $chatId, 'event_type' => 'thread_closed', 'log' => 'Chat thread closed ']);
            }
        }
    }

    public function sendMessage(Request $request)
    {
        $chatId          = $request->id;
        $message         = $request->message;
        $eventType       = 'send_message';
        $customerDetails = Customer::find($chatId);
        $startTime       = date('Y-m-d H:i:s', LARAVEL_START);

        $language = $customerDetails->language;
        if ($language != null) {
            $message = (new GoogleTranslate)->translate($language, $message);
        }
        if (isset($request->messageId)) {
            $chatMessages = ChatMessage::where('id', $request->messageId)->first();
            if ($chatMessages != null) {
                $chatMessages->approved = 1;
                $chatMessages->save();
            }
        }

        //Get Thread ID From Customer Live Chat
        $customer = CustomerLiveChat::where('customer_id', $chatId)->where('thread', '!=', '')->latest()->first();

        if ($customer != null) {
            $thread    = $customer->thread;
            $websiteId = LiveChatEventLog::where('thread', $thread)->whereNotNull('store_website_id')->pluck('store_website_id')->first();
            LiveChatEventLog::create(['customer_id' => $customer->id, 'thread' => $thread, 'store_website_id' => $websiteId, 'event_type' => $eventType, 'log' => 'Customer live chat found']);
            if ($language != null) {
                LiveChatEventLog::create(['customer_id' => $customer->id, 'thread' => $thread, 'store_website_id' => $websiteId, 'event_type' => $eventType, 'log' => 'Customer language ' . $language]);
                LiveChatEventLog::create(['customer_id' => $customer->id, 'thread' => $thread, 'store_website_id' => $websiteId, 'event_type' => $eventType, 'log' => 'message converted from ' . $request->message . ' to ' . $message]);
            }
        } else {
            return response()->json([
                'status' => 'errors',
            ]);
        }

        $post = ['chat_id' => $thread, 'event' => ['type' => 'message', 'text' => $message, 'recipients' => 'all']];
        $post = json_encode($post);
        $url  = 'https://api.livechatinc.com/v3.1/agent/action/send_event';

        $curl = curl_init();

        curl_setopt_array($curl, [
            CURLOPT_URL            => $url,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING       => '',
            CURLOPT_MAXREDIRS      => 10,
            CURLOPT_TIMEOUT        => 30,
            CURLOPT_HTTP_VERSION   => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST  => 'POST',
            CURLOPT_POSTFIELDS     => "$post",
            CURLOPT_HTTPHEADER     => [
                'Authorization: Bearer ' . \Cache::get('key') . '',
                'Content-Type: application/json',
            ],
        ]);

        $response = curl_exec($curl);
        $err      = curl_error($curl);
        $httpcode = curl_getinfo($curl, CURLINFO_HTTP_CODE);

        curl_close($curl);
        LogRequest::log($startTime, $url, 'GET', json_encode($post), json_decode($response), $httpcode, \App\Http\Controllers\WhatsAppController::class, 'downloadFromURL');

        LiveChatEventLog::create(['customer_id' => $customer->id, 'thread' => $thread, 'store_website_id' => $websiteId, 'event_type' => $eventType, 'log' => 'Token used ' . \Cache::get('key')]);
        LiveChatEventLog::create(['customer_id' => $customer->id, 'thread' => $thread, 'store_website_id' => $websiteId, 'event_type' => $eventType, 'log' => $response]);

        if ($err) {
            LiveChatEventLog::create(['customer_id' => $customer->id, 'thread' => $thread, 'store_website_id' => $websiteId, 'event_type' => $eventType, 'log' => $err]);

            return response()->json([
                'status' => 'errors',
            ]);
        } else {
            $response = json_decode($response);

            if (isset($response->error)) {
                LiveChatEventLog::create(['customer_id' => $customer->id, 'store_website_id' => $websiteId, 'event_type' => $eventType, 'thread' => $thread, 'log' => $response->error->message]);

                return response()->json([
                    'status' => 'errors ' . @$response->error->message,
                ]);
            } else {
                return response()->json([
                    'status' => 'success',
                ]);
            }
        }
    }

    public function setting()
    {
        $liveChatUsers = LiveChatUser::all();
        $setting       = LivechatincSetting::first();
        $users         = User::where('is_active', 1)->get();

        return view('livechat.setting', compact('users', 'liveChatUsers', 'setting'));
    }

    public function remove(Request $request)
    {
        $users = LiveChatUser::findorfail($request->id);
        $users->delete();

        return response()->json(['success' => 'success'], 200);
    }

    public function save(Request $request)
    {
        if ($request->username != '' || $request->key != '') {
            $checkIfExist = LivechatincSetting::all();
            if (count($checkIfExist) == 0) {
                $setting           = new LivechatincSetting;
                $setting->username = $request->username;
                $setting->key      = $request->key;
                $setting->save();
            } else {
                $setting           = LivechatincSetting::first();
                $setting->username = $request->username;
                $setting->key      = $request->key;
                $setting->update();
            }
        }

        if ($request->users != null && $request->users != '') {
            $users = $request->users;
            foreach ($users as $user) {
                $userCheck = LiveChatUser::where('user_id', $user)->first();
                if ($userCheck != '' && $userCheck != null) {
                    continue;
                }
                $userss          = new LiveChatUser();
                $userss->user_id = $user;
                $userss->save();
            }
        }

        return redirect()->back()->withSuccess(['msg', 'Saved']);
    }

    public function uploadFileToLiveChat($image)
    {
        //Save file to path
        //send path to Live chat
        $curl = curl_init();
        $url  = 'https://api.livechatinc.com/v3.2/agent/action/upload_file';
        curl_setopt_array($curl, [
            CURLOPT_URL            => $url,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING       => '',
            CURLOPT_MAXREDIRS      => 10,
            CURLOPT_TIMEOUT        => 0,
            CURLOPT_FOLLOWLOCATION => true,
            CURLOPT_HTTP_VERSION   => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST  => 'POST',
            CURLOPT_POSTFIELDS     => ['file' => new CURLFILE('/Users/satyamtripathi/PhpstormProjects/untitled/images/1592232591.png')],
            CURLOPT_HTTPHEADER     => [
                'Authorization: Bearer ' . \Cache::get('key') . '',
                'Content-Type: application/json',
            ],
        ]);

        $response   = curl_exec($curl);
        $httpcode   = curl_getinfo($curl, CURLINFO_HTTP_CODE);
        $parameters = [];
        $startTime  = date('Y-m-d H:i:s', LARAVEL_START);
        curl_close($curl);
        LogRequest::log($startTime, $url, 'POST', json_encode(['file' => new CURLFILE('/Users/satyamtripathi/PhpstormProjects/untitled/images/1592232591.png')]),
            json_decode($response),
            $httpcode, \App\Http\Controllers\LiveChatController::class, 'curlCall');
        echo $response;
    }

    public function getorderdetails(Request $request)
    {
        $customer_id = $request->customer_id;

        $customer = $this->findCustomerById($customer_id);

        if ($customer) {
            $orders = (new \App\Order())->newQuery()->with('customer')->leftJoin('store_website_orders as swo', 'swo.order_id', 'orders.id')
                ->leftJoin('order_products as op', 'op.order_id', 'orders.id')
                ->leftJoin('products as p', 'p.id', 'op.product_id')
                ->leftJoin('brands as b', 'b.id', 'p.brand')->groupBy('orders.id')
                ->where('customer_id', $customer->id)
                ->select(['orders.*', \DB::raw('group_concat(b.name) as brand_name_list'), 'swo.website_id'])->orderBy('created_at', 'desc')->get();
            [$leads_total, $leads] = $this->getLeadsInformation($customer->id);
            $exchanges_return      = $customer->return_exchanges;
            if ($orders->count()) {
                foreach ($orders as &$value) {
                    $value->storeWebsite    = $value->storeWebsiteOrder ? ($value->storeWebsiteOrder->storeWebsite ?? 'N/A') : 'N/A';
                    $value->order_date      = \Carbon\Carbon::parse($value->order_date)->format('d-m-y');
                    $totalBrands            = explode(',', $value->brand_name_list);
                    $value->brand_name_list = (count($totalBrands) > 1) ? 'Multi' : $value->brand_name_list;
                    $value->status          = \App\Helpers\OrderHelper::getStatusNameById($value->order_status_id);
                }
            }

            return [
                true,
                [
                    'orders_total'           => $orders->count(),
                    'leads_total'            => $leads_total,
                    'exchanges_return_total' => $exchanges_return->count(),
                    'exchanges_return'       => $exchanges_return,
                    'leads'                  => $leads,
                    'orders'                 => $orders,
                    'customer'               => $customer,
                ],
            ];
        }

        return [false, false];
    }

    protected function findCustomerById($customer_id)
    {
        return Customer::where('id', '=', $customer_id)->first();
    }

    private function getLeadsInformation($id)
    {
        $source = \App\ErpLeads::leftJoin('products', 'products.id', '=', 'erp_leads.product_id')
            ->leftJoin('customers as c', 'c.id', 'erp_leads.customer_id')
            ->leftJoin('erp_lead_status as els', 'els.id', 'erp_leads.lead_status_id')
            ->leftJoin('categories as cat', 'cat.id', 'erp_leads.category_id')
            ->leftJoin('brands as br', 'br.id', 'erp_leads.brand_id')
            ->where('erp_leads.customer_id', $id)
            ->orderBy('erp_leads.id', 'desc')
            ->select(['erp_leads.*', 'products.name as product_name', 'cat.title as cat_title', 'br.name as brand_name', 'els.name as status_name', 'c.name as customer_name', 'c.id as customer_id']);

        $total  = $source->count();
        $source = $source->get();

        foreach ($source as $key => $value) {
            $source[$key]->media_url = null;
            $media                   = $value->getMedia(config('constants.media_tags'))->first();
            if ($media) {
                $source[$key]->media_url = getMediaUrl($media);
            }

            if (empty($source[$key]->media_url) && $value->product_id) {
                $product = \App\Product::find($value->product_id);
                if ($product) {
                    $media = $product->getMedia(config('constants.media_tags'))->first();
                    if ($media) {
                        $source[$key]->media_url = getMediaUrl($media);
                    }
                }
            }
        }

        return [$total, $source];
    }

    public function getChats(Request $request)
    {
        $chatId    = $request->id;
        $messagess = [];

        //put session
        session()->put('chat_customer_id', $chatId);

        //update chat has been seen
        $customer = CustomerLiveChat::where('customer_id', $chatId)->where('thread', '!=', '')->latest()->first();

        if ($customer != null) {
            $customer->seen = 1;
            $customer->update();
        }

        $threadId = $customer->thread;

        $messages = ChatMessage::where('customer_id', $chatId)->where('message_application_id', 2)->get();

        //getting customer name from chat
        $customer         = Customer::findorfail($chatId);
        $name             = $customer->name;
        $store_website_id = $customer->store_website_id;
        $customerInfo     = $this->getLiveChatIncCustomer($customer->email, 'raw');
        if (! $customerInfo) {
            $customerInfo = '';
        }

        $customerInital = substr($name, 0, 1);
        if (count($messages) != 0) {
            foreach ($messages as $message) {
                $agent       = Customer::where('id', $message->customer_id)->first();
                $agentInital = substr($agent->name, 0, 1);

                if ($message->status == 2) {
                    $type = 'end';
                } else {
                    $type = 'start';
                }

                if ($message->hasMedia(config('constants.media_tags'))) {
                    foreach ($message->getMedia(config('constants.media_tags')) as $image) {
                        if (! $message->approved) {
                            $vals = '<div data-chat-id="' . $message->id . '" class="d-flex justify-content-' . $type . ' mb-4"><div class="rounded-circle user_inital">' . $agentInital . '</div><div class="msg_cotainer"><span class="msg_time">' . \Carbon\Carbon::createFromTimeStamp(strtotime($message->created_at))->diffForHumans() . '</span><div class="d-flex mb-4"><div class="d-flex  mb-4"><input type="hidden" id="message-id" name="message-id" value="' . $chatId . '"><input type="hidden" id="message-value" name="message-value" value="' . $message->message . '"><button id="' . $message->id . '" class="btn btn-secondary quick_approve_add_live">Approve Message</button></div><div class="msg_cotainer_send"><img src="' . getMediaUrl($image) . '" class="rounded-circle-livechat user_img_msg"></div></div>';
                        } else {
                            $vals = '<div data-chat-id="' . $message->id . '" class="d-flex justify-content-' . $type . ' mb-4"><div class="rounded-circle user_inital">' . $agentInital . '</div><div class="msg_cotainer"><span class="msg_time">' . \Carbon\Carbon::createFromTimeStamp(strtotime($message->created_at))->diffForHumans() . '</span></div><div class="msg_cotainer_send"><img src="' . getMediaUrl($image) . '" class="rounded-circle-livechat user_img_msg"></div></div>';
                        }
                        $messagess[] = $vals;
                    }
                } else {
                    if ($message->user_id != 0) {
                        // Finding Agent
                        $agent       = User::where('id', $message->user_id)->first();
                        $agentInital = substr($agent->name, 0, 1);
                        if (! $message->approved) {
                            $vals = '<div data-chat-id="' . $message->id . '" class="d-flex justify-content-' . $type . ' mb-4"><div class="rounded-circle user_inital">' . $agentInital . '</div><div class="msg_cotainer"> ' . $message->message . '<br><span class="msg_time"> ' . \Carbon\Carbon::createFromTimeStamp(strtotime($message->created_at))->diffForHumans() . ' </span><div class="d-flex  mb-4"><input type="hidden" id="message-id" name="message-id" value="' . $chatId . '"><input type="hidden" id="message-value" name="message-value" value="' . $message->message . '"><button id="' . $message->id . '" class="btn btn-secondary quick_approve_add_live">Approve Message</button></div></div></div>';
                        } else {
                            $vals = '<div data-chat-id="' . $message->id . '" class="d-flex justify-content-' . $type . ' mb-4"><div class="rounded-circle user_inital">' . $agentInital . '</div><div class="msg_cotainer"> ' . $message->message . '<br><span class="msg_time"> ' . \Carbon\Carbon::createFromTimeStamp(strtotime($message->created_at))->diffForHumans() . ' </span> </div></div>';
                        }
                        $messagess[] = $vals;
                    } else {
                        if (! $message->approved) {
                            $vals = '<div data-chat-id="' . $message->id . '" class="d-flex justify-content-' . $type . ' mb-4"><div class="rounded-circle user_inital">' . $customerInital . '</div><div class="msg_cotainer">' . $message->message . '<br><span class="msg_time"> ' . \Carbon\Carbon::createFromTimeStamp(strtotime($message->created_at))->diffForHumans() . ' </span><div class="d-flex  mb-4"><input type="hidden" id="message-id" name="message-id" value="' . $chatId . '"><input type="hidden" id="message-value" name="message-value" value="' . $message->message . '"><button id="' . $message->id . '" class="btn btn-secondary quick_approve_add_live">Approve Message</button></div></div></div>';
                        } else {
                            $vals = '<div  data-chat-id="' . $message->id . '" class="d-flex justify-content-' . $type . ' sss mb-4"><div class="rounded-circle user_inital">' . $customerInital . '</div><div class="msg_cotainer">' . $message->message . '<br><span class="msg_time"> ' . \Carbon\Carbon::createFromTimeStamp(strtotime($message->created_at))->diffForHumans() . ' </span></div></div>';
                        }
                        $messagess[] = $vals;
                    }
                }
            }
        }

        if (! isset($messagess)) {
            //
        }

        $count = CustomerLiveChat::where('seen', 0)->count();

        return response()->json([
            'status' => 'success',
            'data'   => ['id' => $chatId, 'count' => $count, 'message' => $messagess, 'name' => $name, 'customerInfo' => $customerInfo, 'threadId' => $threadId, 'customerInital' => $customerInital, 'store_website_id' => $store_website_id],
        ]);
    }

    public function getLastChats(Request $request)
    {
        $chatId   = $request->id;
        $messages = ChatMessage::where('customer_id', $chatId)->where('message_application_id', 2)->orderBy('id', 'desc')->first();

        return response()->json([
            'status' => 'success',
            'data'   => $messages,
        ]);
    }

    public function getChatMessagesWithoutRefresh()
    {
        $messagess = [];
        if (session()->has('chat_customer_id')) {
            $lastMessageId = request('last_msg_id');
            $chatId        = session()->get('chat_customer_id');
            $messages      = ChatMessage::where('customer_id', $chatId)->where('message_application_id', 2);
            if ($lastMessageId != null) {
                $messages = $messages->where('id', '>', $lastMessageId);
            }
            $messages = $messages->get();

            //getting customer name from chat
            $customer       = Customer::findorfail($chatId);
            $name           = $customer->name;
            $customerInital = substr($name, 0, 1);
            if (count($messages) == 0) {
                if ($lastMessageId == null) {
                    //
                }
            } else {
                foreach ($messages as $message) {
                    if ($message->user_id != 0) {
                        // Finding Agent
                        $agent       = Customer::where('id', $message->customer_id)->first();
                        $agentInital = substr($agent->name, 0, 1);

                        if ($message->hasMedia(config('constants.media_tags'))) {
                            foreach ($message->getMedia(config('constants.media_tags')) as $image) {
                                if ($message->status == 2) {
                                    $type = 'end';
                                } else {
                                    $type = 'start';
                                }

                                if (! $message->approved) {
                                    $vals = '<div data-chat-id="' . $message->id . '" class="d-flex justify-content-' . $type . ' mb-4"><div class="rounded-circle user_inital">' . $agentInital . '</div><div class="msg_cotainer"><span class="msg_time">' . \Carbon\Carbon::createFromTimeStamp(strtotime($message->created_at))->diffForHumans() . '</span><div class="d-flex mb-4"><div class="d-flex  mb-4"><input type="hidden" id="message-id" name="message-id" value="' . $chatId . '"><input type="hidden" id="message-value" name="message-value" value="' . $message->message . '"><button id="' . $message->id . '" class="btn btn-secondary quick_approve_add_live">Approve Message</button></div><div class="msg_cotainer_send"><img src="' . getMediaUrl($image) . '" class="rounded-circle-livechat user_img_msg"></div></div>';
                                } else {
                                    $vals = '<div data-chat-id="' . $message->id . '" class="d-flex justify-content-' . $type . ' mb-4"><div class="rounded-circle user_inital">' . $agentInital . '</div><div class="msg_cotainer"><span class="msg_time">' . \Carbon\Carbon::createFromTimeStamp(strtotime($message->created_at))->diffForHumans() . '</span></div><div class="msg_cotainer_send"><img src="' . getMediaUrl($image) . '" class="rounded-circle-livechat user_img_msg"></div></div>';
                                }
                                $messagess[] = $vals;
                            }
                        } else {
                            if ($message->status == 2) {
                                $type = 'end';
                            } else {
                                $type = 'start';
                            }
                            if (! $message->approved) {
                                $vals = '<div data-chat-id="' . $message->id . '" class="d-flex justify-content-' . $type . ' mb-4"><div class="rounded-circle user_inital">' . $agentInital . '</div><div class="msg_cotainer">' . $message->message . '<span class="msg_time">' . \Carbon\Carbon::createFromTimeStamp(strtotime($message->created_at))->diffForHumans() . '</span><div class="d-flex  mb-4"><input type="hidden" id="message-id" name="message-id" value="' . $chatId . '"><input type="hidden" id="message-value" name="message-value" value="' . $message->message . '"><button id="' . $message->id . '" class="btn btn-secondary quick_approve_add_live">Approve Message</button></div></div></div>';
                            } else {
                                $vals = '<div data-chat-id="' . $message->id . '" class="d-flex justify-content-' . $type . ' mb-4"><div class="rounded-circle user_inital">' . $agentInital . '</div><div class="msg_cotainer">' . $message->message . '<span class="msg_time">' . \Carbon\Carbon::createFromTimeStamp(strtotime($message->created_at))->diffForHumans() . '</span></div></div>';
                            }
                            $messagess[] = $vals;
                        }
                    } else {
                        if ($message->hasMedia(config('constants.media_tags'))) {
                            foreach ($message->getMedia(config('constants.media_tags')) as $image) {
                                if (strpos(getMediaUrl($image), 'jpeg') !== false) {
                                    $attachment = '<a href="" download><img src="' . getMediaUrl($image) . '" class="rounded-circle-livechat user_img_msg"></a>';
                                } else {
                                    $attachment = '<a href="" download>' . $image->filename . '</a>';
                                }
                                if ($message->status == 2) {
                                    $type = 'end';
                                } else {
                                    $type = 'start';
                                }
                                if (! $message->approved) {
                                    $messagess[] = '<div data-chat-id="' . $message->id . '" class="d-flex justify-content-' . $type . ' mb-4"><div class="msg_cotainer"><span class="msg_time">' . \Carbon\Carbon::createFromTimeStamp(strtotime($message->created_at))->diffForHumans() . '</span><div class="d-flex  mb-4"><input type="hidden" id="message-id" name="message-id" value="' . $chatId . '"><input type="hidden" id="message-value" name="message-value" value="' . $message->message . '"><button id="' . $message->id . '" class="btn btn-secondary quick_approve_add_live">Approve Message</button></div></div><div class="msg_cotainer_send">' . $attachment . '</div></div>';
                                } else {
                                    '<div data-chat-id="' . $message->id . '" class="d-flex justify-content-' . $type . ' mb-4"><div class="msg_cotainer"><span class="msg_time">' . \Carbon\Carbon::createFromTimeStamp(strtotime($message->created_at))->diffForHumans() . '</span></div><div class="msg_cotainer_send">' . $attachment . '</div></div>';
                                }
                            }
                        } else {
                            if ($message->status == 2) {
                                $type = 'end';
                            } else {
                                $type = 'start';
                            }
                            if (! $message->approved) {
                                $messagess[] = '<div data-chat-id="' . $message->id . '" class="d-flex justify-content-' . $type . ' mb-4"><div class="rounded-circle-livechat user_inital">' . $customerInital . '</div><div class="msg_cotainer">' . $message->message . '<span class="msg_time">' . \Carbon\Carbon::createFromTimeStamp(strtotime($message->created_at))->diffForHumans() . '</span><input type="hidden" id="message-id" name="message-id" value="' . $chatId . '"><div class="d-flex  mb-4"><input type="hidden" id="message-value" name="message-value" value="' . $message->message . '"><button id="' . $message->id . '" class="btn btn-secondary quick_approve_add_live">Approve Message</button></div></div></div>';
                            } else {
                                $messagess[] = '<div data-chat-id="' . $message->id . '" class="d-flex justify-content-' . $type . ' mb-4"><div class="rounded-circle-livechat user_inital">' . $customerInital . '</div><div class="msg_cotainer">' . $message->message . '<span class="msg_time">' . \Carbon\Carbon::createFromTimeStamp(strtotime($message->created_at))->diffForHumans() . '</span></div></div>';
                            }
                        }
                    }
                }
            }

            $count = CustomerLiveChat::where('seen', 0)->count();

            return response()->json([
                'status' => 'success',
                'data'   => ['id' => $chatId, 'count' => $count, 'message' => $messagess, 'name' => $name, 'customerInital' => $customerInital],
            ]);
        } else {
            return response()->json([
                'data' => ['id' => '', 'count' => 0, 'message' => '', 'name' => '', 'customerInital' => ''],
            ]);
        }
    }

    public function getChatLogs($customerId)
    {
        return LiveChatLog::where('customer_id', $customerId)->orderBy('id', 'desc')->get();
    }

    public function getAllChatEventLogs()
    {
        $logs = LiveChatEventLog::leftJoin('customers', 'customers.id', 'live_chat_event_logs.customer_id')
            ->leftJoin('store_websites', 'store_websites.id', 'live_chat_event_logs.store_website_id')
            ->orderBy('live_chat_event_logs.id', 'desc')->select('live_chat_event_logs.*', 'customers.name as customer_name', 'store_websites.title as website')->paginate(30);

        return view('livechat.eventLogs', compact('logs'));
    }

    public function getChatEventLogs($customerId)
    {
        return LiveChatEventLog::where('thread', $customerId)->orderBy('id', 'desc')->get();
    }

    public function getLiveChats(Request $request)
    {
        $store_websites = StoreWebsite::all();
        $website_stores = WebsiteStore::with('storeView')->get();
        $chatIds        = CustomerLiveChat::query();

        if ($request->term != '') {
            $q = ! empty($request->term) ? $request->term : '';
            $chatIds->whereHas('customer', function ($query) use ($q) {
                $query->whereIn('name', $q);
            });
        }
        if ($request->website_name != '') {
            $q = ! empty($request->website_name) ? $request->website_name : '';
            $chatIds->whereIn('website', $q);
        }
        if ($request->date != '') {
            $q = $request->date;
            $chatIds->whereDate('created_at', Carbon::parse($q)->format('Y-m-d'));
        }
        if ($request->search_email != '') {
            $q = $request->search_email;
            $chatIds->whereHas('customer', function ($query) use ($q) {
                $query->where('email', 'LIKE', '%' . $q . '%');
            });
        }
        if ($request->phone_no != '') {
            $q = $request->phone_no;
            $chatIds->whereHas('customer', function ($query) use ($q) {
                $query->where('phone', 'LIKE', '%' . $q . '%');
            });
        }
        if ($request->search_keyword != '') {
            $q = $request->search_keyword;
            $chatIds->whereHas('customer', function ($query) use ($q) {
                $query->where('name', 'LIKE', '%' . $q . '%');
            })
                ->orWhere('website', 'LIKE', '%' . $q . '%')
                ->orWhereHas('customer', function ($query) use ($q) {
                    $query->where('phone', 'LIKE', '%' . $q . '%');
                })->orWhereHas('customer', function ($query) use ($q) {
                    $query->where('email', 'LIKE', '%' . $q . '%');
                });
        }

        $chatIds = $chatIds->latest()->orderBy('seen', 'asc')->orderBy('status', 'desc')->get();

        if ($request->ajax()) {
            return response()->json([
                'tbody' => view('livechat.partials.chat-list', compact('chatIds', 'store_websites'))->with('i', ($request->input('page', 1) - 1) * 1)->render(),
            ], 200);
        }

        if (session()->has('chat_customer_id')) {
            $chatId       = session()->get('chat_customer_id');
            $chat_message = ChatMessage::where('customer_id', $chatId)->where('message_application_id', 2)->orderBy('id', 'desc')->get();
            //getting customer name from chat
            $customer       = Customer::findorfail($chatId);
            $name           = $customer->name;
            $customerInital = substr($name, 0, 1);
            if (count($chat_message) == 0) {
                //
            } else {
                foreach ($chat_message as $chat) {
                    if ($chat->user_id != 0) {
                        // Finding Agent
                        $agent       = User::where('id', $chat->user_id)->first();
                        $agentInital = substr($agent->name, 0, 1);

                        if (! $chat->approved) {
                            $message[] = '<div data-chat-id="' . $chat->id . '" class="d-flex justify-content-end mb-4"><div class="rounded-circle user_inital">' . $agentInital . '</div><div class="msg_cotainer">' . $chat->message . '<span class="msg_time">' . \Carbon\Carbon::createFromTimeStamp(strtotime($chat->created_at))->diffForHumans() . '</span><input type="hidden" id="message-id" name="message-id" value="' . $chatId . '"><input type="hidden" id="message-value" name="message-value" value="' . $message->message . '"><div class="d-flex  mb-4"><button id="' . $message->id . '" class="btn btn-secondary quick_approve_add_live">Approve Message</button></div></div></div>';
                        } else {
                            $message[] = '<div data-chat-id="' . $chat->id . '" class="d-flex justify-content-end mb-4"><div class="rounded-circle user_inital">' . $agentInital . '</div><div class="msg_cotainer">' . $chat->message . '<span class="msg_time">' . \Carbon\Carbon::createFromTimeStamp(strtotime($chat->created_at))->diffForHumans() . '</span></div></div>';
                        }
                    } else {
                        $message[] = '<div data-chat-id="' . $chat->id . '" class="d-flex justify-content-start mb-4"><div class="rounded-circle user_inital">' . $customerInital . '</div><div class="msg_cotainer">' . $chat->message . '<span class="msg_time">' . \Carbon\Carbon::createFromTimeStamp(strtotime($chat->created_at))->diffForHumans() . '</span></div></div>'; //<div class="img_cont_msg"><img src="https://static.turbosquid.com/Preview/001292/481/WV/_D.jpg" class="rounded-circle user_img_msg"></div>
                    }
                }
            }
            $count = CustomerLiveChat::where('seen', 0)->count();

            return view('livechat.chatMessages', compact('chatIds', 'message', 'name', 'customerInital', 'store_websites', 'website_stores'));
        } else {
            $count          = 0;
            $message        = '';
            $customerInital = '';
            $name           = '';

            return view('livechat.chatMessages', compact('chatIds', 'message', 'name', 'customerInital', 'store_websites', 'website_stores'));
        }
    }

    public function getUserList()
    {
        $liveChatCustomers = CustomerLiveChat::orderBy('seen', 'asc')->where('thread', '!=', '')->where('status', 1)->orderBy('status', 'desc')->get();

        foreach ($liveChatCustomers as $liveChatCustomer) {
            $customer       = Customer::where('id', $liveChatCustomer->customer_id)->first();
            $customerInital = substr($customer->name, 0, 1);
            if ($liveChatCustomer->status == 0) {
                $customers[] = '<li onclick="getChats(' . $customer->id . ')" id="user' . $customer->id . '" style="cursor: pointer;">
                                <input type="hidden" id="live_selected_customer_store" value="' . $customer->store_website_id . '" />
                                <div class="d-flex bd-highlight"><div class="img_cont"><span class="rounded-circle user_inital">' . $customerInital . '</span><span class="online_icon offline"></span>
                                </div><div class="user_info"><span>' . $customer->name . '</span><p style="margin-bottom: 0px;">' . $customer->name . ' is offline</p><p style="margin-bottom: 0px;">' . $liveChatCustomer->website . '</p></div></div></li><li>'; //<img src="https://static.turbosquid.com/Preview/001292/481/WV/_D.jpg" class="rounded-circle user_img">
            } elseif ($liveChatCustomer->status == 1 && $liveChatCustomer->seen == 0) {
                $customers[] = '<li onclick="getChats(' . $customer->id . ')" id="user' . $customer->id . '" style="cursor: pointer;">
                                <input type="hidden" id="live_selected_customer_store" value="' . $customer->store_website_id . '" />
                                <div class="d-flex bd-highlight"><div class="img_cont"><span class="rounded-circle user_inital">' . $customerInital . '</span><span class="online_icon"></span>
                                </div><div class="user_info"><span>' . $customer->name . '</span><p style="margin-bottom: 0px;">' . $customer->name . ' is online</p><p style="margin-bottom: 0px;">' . $liveChatCustomer->website . '</p></div><span class="new_message_icon"></span></div></li>'; //<img src="https://static.turbosquid.com/Preview/001292/481/WV/_D.jpg" class="rounded-circle user_img">
            } else {
                $customers[] = '<li onclick="getChats(' . $customer->id . ')" id="user' . $customer->id . '" style="cursor: pointer;">
                                <input type="hidden" id="live_selected_customer_store" value="' . $customer->store_website_id . '" />
                                <div class="d-flex bd-highlight"><div class="img_cont"><span class="rounded-circle user_inital">' . $customerInital . '</span><span class="online_icon"></span>
                                </div><div class="user_info"><span>' . $customer->name . '</span><p style="margin-bottom: 0px;">' . $customer->name . ' is online</p><p style="margin-bottom: 0px;">' . $liveChatCustomer->website . '</p></div></div></li>'; //<img src="https://static.turbosquid.com/Preview/001292/481/WV/_D.jpg" class="rounded-circle user_img">
            }
        }
        if (empty($customers)) {
            $customers[] = '<li><div class="d-flex bd-highlight"><div class="img_cont">
                                </div><div class="user_info"><span>No User Found</span><p></p></div></div></li>';
        }
        //Getting chat counts
        $count = CustomerLiveChat::where('seen', 0)->count();

        return response()->json([
            'status' => 'success',
            'data'   => ['count' => $count, 'message' => $customers],
        ]);
    }

    public function checkNewChat()
    {
        $count = CustomerLiveChat::where('seen', 0)->count();

        return response()->json([
            'status' => 'success',
            'data'   => ['count' => $count],
        ]);
    }

    /**
     * function to get customer details from livechatinc
     * https://api.livechatinc.com/v3.1/agent/action/get_customers
     *
     * @param customer's email address
     * @param mixed $email
     * @param mixed $out
     *
     * @return - response livechatinc object of customer information. If error return false
     */
    public function getLiveChatIncCustomer($email = '', $out = 'JSON')
    {
        $threadId = '';
        if ($email == '' && session()->has('chat_customer_id')) {
            $chatId   = session()->get('chat_customer_id');
            $messages = ChatMessage::where('customer_id', $chatId)->where('message_application_id', 2)->get();
            //getting customer name from chat
            $customer = Customer::findorfail($chatId);
            $email    = $customer->email;

            $liveChatCustomer = CustomerLiveChat::where('customer_id', $chatId)->first();
            $threadId         = $liveChatCustomer->thread;
        }

        $returnVal = '';
        if ($email != '') {
            $postURL = 'https://api.livechatinc.com/v3.1/agent/action/get_customers';

            $postData = ['filters' => ['email' => ['values' => [$email]]]];
            $postData = json_encode($postData);

            $returnVal = '';
            $result    = self::curlCall($postURL, $postData, 'application/json');
            if ($result['err']) {
                $returnVal = false;
            } else {
                $response = json_decode($result['response']);
                if (isset($response->error)) {
                    $returnVal = false;
                } else {
                    if (isset($response->customers[0])) {
                        $returnVal = $response->customers[0];
                    } else {
                        $returnVal = false;
                    }
                }
            }
        }

        if ($out == 'JSON') {
            return response()->json(['status' => 'success', 'threadId' => $threadId, 'customerInfo' => $returnVal], 200);
        } else {
            return $returnVal;
        }
    }

    /**
     * function to upload file/image to liveshatinc
     * upload file to livechatinc using their agent /action/upload_file api which will respond with livechatinc CDN url for file uploaded
     * https://api.livechatinc.com/v3.1/agent/action/upload_file
     *
     * @param request
     *
     * @return - response livechatinc CDN url for the file. If error return false
     */
    public function uploadFileToLiveChatInc(Request $request)
    {
        //To try with static file from local file, uncomment below
        $uploadedFile = $request->file('file');
        $mimeType     = $uploadedFile->getMimeType();
        $filename     = $uploadedFile->getClientOriginalName();

        $postURL = 'https://api.livechatinc.com/v3.1/agent/action/upload_file';

        $postData = ['file' => curl_file_create($uploadedFile, $mimeType, $filename)];

        $result = self::curlCall($postURL, $postData, 'multipart/form-data');
        if ($result['err']) {
            return false;
        } else {
            $response = json_decode($result['response']);
            if (isset($response->error)) {
                return false;
            } else {
                return ['CDNPath' => $response->url, 'filename' => $filename];
            }
        }
    }

    public static function useAbsPathUpload($fileURL)
    {
        $filename = basename($fileURL);
        $postData = ['file' => curl_file_create($fileURL, mime_content_type($fileURL), basename($fileURL))];
        $postURL  = 'https://api.livechatinc.com/v3.1/agent/action/upload_file';
        $result   = self::curlCall($postURL, $postData, 'multipart/form-data');
        if ($result['err']) {
            return false;
        } else {
            $response = json_decode($result['response']);
            if (isset($response->error)) {
                return false;
            } else {
                return ['CDNPath' => $response->url, 'filename' => $filename];
            }
        }
    }

    /**
     * curlCall function to make a curl call
     *
     * @param
     *   URL - url that we need to access and make curl call,
     *   method - curl call method - GET, POST etc
     *   contentType - Content-Type value to set in headers
     *   data - data that has to be sent in curl call. This can be optional if GET
     * @param mixed $URL
     * @param mixed $data
     * @param mixed $contentType
     * @param mixed $defaultAuthorization
     * @param mixed $method
     *
     * @return - response from curl call, array(response, err)
     */
    public static function curlCall($URL, $data = false, $contentType = false, $defaultAuthorization = true, $method = 'POST')
    {
        $startTime = date('Y-m-d H:i:s', LARAVEL_START);
        $curl      = curl_init();

        $curlData = [
            CURLOPT_URL            => $URL,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING       => '',
            CURLOPT_MAXREDIRS      => 10,
            CURLOPT_TIMEOUT        => 30,
            CURLOPT_FOLLOWLOCATION => true,
            CURLOPT_HTTP_VERSION   => CURL_HTTP_VERSION_1_1,
        ];
        $curlData[CURLOPT_CUSTOMREQUEST] = $method;
        if ($contentType) {
            $curlData[CURLOPT_HTTPHEADER] = [];
            if ($defaultAuthorization) {
                array_push($curlData[CURLOPT_HTTPHEADER], 'Authorization: Bearer ' . \Cache::get('key') . '');
            }
            array_push($curlData[CURLOPT_HTTPHEADER], 'Content-Type: ' . $contentType);
        }

        if ($data) {
            $curlData[CURLOPT_POSTFIELDS] = $data;
        } else {
            $curlData[CURLOPT_POSTFIELDS] = '{}';
        }
        curl_setopt($curl, CURLOPT_HTTPHEADER, [
            'Content-Type: application/json',
        ]);
        curl_setopt_array($curl, $curlData);
        $response = curl_exec($curl);
        $httpcode = curl_getinfo($curl, CURLINFO_HTTP_CODE);
        $err      = curl_error($curl);
        curl_close($curl);
        LogRequest::log($startTime, $URL, 'POST', json_encode($curlData[CURLOPT_POSTFIELDS]), json_decode($response), $httpcode, \App\Http\Controllers\LiveChatController::class, 'curlCall');

        return ['response' => $response, 'err' => $err];
    }

    /**
     * CDN URL got after uploading file to livechatinc will expire in 24hrs unless its used in sent_event api
     * send the CDN URL to livechatinc using sent_event api to keep the CDN URL alive
     * https://developers.livechatinc.com/docs/messaging/agent-chat-api/#file
     * https://developers.livechatinc.com/docs/messaging/agent-chat-api/#send-event
     */
    public function sendFileToLiveChatInc(Request $request)
    {
        $chatId = $request->id;
        //Get Thread ID From Customer Live Chat
        $customer = CustomerLiveChat::where('customer_id', $chatId)->first();
        if ($customer != '' && $customer != null) {
            $thread = $customer->thread;
        } else {
            return response()->json(['status' => 'errors', 'errorMsg' => 'Thread not found'], 200);
        }

        $fileUploadResult = self::uploadFileToLiveChatInc($request);

        if (! $fileUploadResult) {
            //There is some error, we didn't get the CDN file path
            return response()->json(['status' => 'errors', 'errorMsg' => 'Error uploading file'], 200);
        } else {
            $fileCDNPath = $fileUploadResult['CDNPath'];
            $filename    = $fileUploadResult['filename'];
        }

        $postData = ['chat_id' => $thread, 'event' => ['type' => 'file', 'url' => $fileCDNPath, 'recipients' => 'all']];
        $postData = json_encode($postData);

        $postURL = 'https://api.livechatinc.com/v3.1/agent/action/send_event';

        $result = self::curlCall($postURL, $postData, 'application/json');
        if ($result['err']) {
            return response()->json(['status' => 'errors', 'errorMsg' => $result['err']], 403);
        } else {
            $response = json_decode($result['response']);
            if (isset($response->error)) {
                return response()->json(['status' => 'errors', $response], 403);
            } else {
                return response()->json(['status' => 'success', 'filename' => $filename, 'fileCDNPath' => $fileCDNPath, 'responseData' => $response], 200);
            }
        }
    }

    public static function sendFileMessageEvent($postData)
    {
        $cdnPath  = $postData['event']['url'];
        $postData = json_encode($postData, true);
        $postURL  = 'https://api.livechatinc.com/v3.1/agent/action/send_event';
        $result   = self::curlCall($postURL, $postData, 'application/json');
        if ($result['err']) {
            return response()->json(['status' => 'errors', 'errorMsg' => $result['err']], 403);
        } else {
            $response = json_decode($result['response']);
            if (isset($response->error)) {
                return response()->json(['status' => 'errors', $response], 403);
            } else {
                return response()->json(['status' => 'success', 'filename' => $cdnPath, 'fileCDNPath' => $cdnPath, 'responseData' => $response], 200);
            }
        }
    }

    public static function getDomain($url)
    {
        $pieces = parse_url($url);
        $domain = isset($pieces['host']) ? $pieces['host'] : $pieces['path'];
        if (preg_match('/(?P<domain>[a-z0-9][a-z0-9\-]{1,63}\.[a-z\.]{2,6})$/i', $domain, $regs)) {
            return $regs['domain'];
        }

        return false;
    }

    public function saveToken(Request $request)
    {
        if ($request->accessToken) {
            $storedCache = \Cache::get('key');
            if ($storedCache) {
                if ($storedCache != $request->accessToken) {
                    try {
                        \Cache::put('key', $request->accessToken, $request->seconds);
                    } catch (Exception $e) {
                        \Cache::add('key', $request->accessToken, $request->seconds);
                    }
                }
            } else {
                try {
                    \Cache::put('key', $request->accessToken, $request->seconds);
                } catch (Exception $e) {
                    \Cache::add('key', $request->accessToken, $request->seconds);
                }
            }

            return response()->json(['status' => 'success', 'message' => 'AccessToken saved'], 200);
        }

        return response()->json(['status' => 'error', 'message' => 'AccessToken cannot be saved'], 500);
    }

    public function attachImage(Request $request)
    {
        $customerid = $request->get('customer_id', 0);
        $livechat   = CustomerLiveChat::where('customer_id', $customerid)->where('thread', '!=', '')->first();

        if ($livechat) {
            if ($request->images != null) {
                $images = json_decode($request->images, true);
                $images = array_filter($images);
                if (! empty($images)) {
                    $medias = Media::whereIn('id', array_unique($images))->get();
                    if (! $medias->isEmpty()) {
                        foreach ($medias as $iimg => $media) {
                            $cdn = self::useAbsPathUpload($media->getAbsolutePath());
                            if (! $cdn == false) {
                                $postData = [
                                    'chat_id' => $livechat->thread,
                                    'event'   => [
                                        'type'       => 'file',
                                        'url'        => $cdn['CDNPath'],
                                        'recipients' => 'all',
                                    ],
                                ];
                                $result = self::sendFileMessageEvent($postData);
                            }
                        }
                    }
                }
            }
        }

        return redirect(route('livechat.get.chats') . '?open_chat=true');
    }

    /**
     * Get tickets from livechat inc and put them as unread messages
     *
     * https://developers.livechatinc.com/docs/management/configuration-api/v2.0/#tickets
     * https://api.livechatinc.com/tickets?assigned=0
     * dal:ZP6x3Uc3QMa9W-Ve4sp86A
     */
    public function getLiveChatIncTickets()
    {
        $startTime = date('Y-m-d H:i:s', LARAVEL_START);
        $curl      = curl_init();
        $url       = 'https://api.livechatinc.com/v2/tickets';

        curl_setopt_array($curl, [
            CURLOPT_URL            => $url,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING       => '',
            CURLOPT_MAXREDIRS      => 10,
            CURLOPT_TIMEOUT        => 0,
            CURLOPT_FOLLOWLOCATION => true,
            CURLOPT_HTTP_VERSION   => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST  => 'GET',
            CURLOPT_HTTPHEADER     => [
                'Authorization: Basic NmY0M2ZkZDUtOTkwMC00OWY4LWI4M2ItZThkYzg2ZmU3ODcyOmRhbDp0UkFQdWZUclFlLVRkQUI4Y2pFajNn',
            ],
        ]);

        $response = curl_exec($curl);

        $httpcode = curl_getinfo($curl, CURLINFO_HTTP_CODE);
        LogRequest::log($startTime, $url, 'GET', json_encode([]), json_decode($response), $httpcode, \App\Http\Controllers\LiveChatController::class, 'getLiveChatIncTickets');
        $result = json_decode($response, true);
        if (! empty($result['tickets'])) {
            return $result['tickets'];
        } else {
            return false;
        }
    }

    /**  Created By Maulik Jadvani
     * function to Get tickets list.
     *
     * @param request
     *
     * @return -all tickets list
     */
    public function tickets(Request $request)
    {
        $title = 'tickets';

        $selectArray[] = 'tickets.*';
        $selectArray[] = 'users.name AS assigned_to_name';
        $selectArray[] = 'customers.is_auto_simulator AS customer_auto_simulator';
        $query         = Tickets::query();
        $query         = $query->leftjoin('users', 'users.id', '=', 'tickets.assigned_to');
        $query         = $query->leftjoin('customers', 'customers.id', '=', 'tickets.customer_id');

        $query = $query->select($selectArray);

        if ($request->ticket_id != '') {
            $query = $query->whereIn('ticket_id', $request->ticket_id);
        }

        if ($request->users_id != '') {
            $query = $query->whereIn('assigned_to', $request->users_id);
        }

        if ($request->term != '') {
            $query = $query->whereIn('tickets.name', $request->term);
        }

        if ($request->user_email != '') {
            $query = $query->whereIn('tickets.email', $request->user_email);
        }

        if ($request->user_message != '') {
            $query = $query->where('tickets.message', 'LIKE', '%' . $request->user_message . '%');
        }

        if ($request->search_country != '') {
            $query = $query->where('tickets.country', 'LIKE', '%' . $request->search_country . '%');
        }

        if ($request->search_order_no != '') {
            $query = $query->where('tickets.order_no', 'LIKE', '%' . $request->search_order_no . '%');
        }

        if ($request->search_phone_no != '') {
            $query = $query->where('tickets.phone_no', 'LIKE', '%' . $request->search_phone_no . '%');
        }

        if ($request->serach_inquiry_type != '') {
            $query = $query->where('tickets.type_of_inquiry', 'LIKE', '%' . $request->serach_inquiry_type . '%');
        }

        // Use for search by source tof ticket
        if ($request->search_source != '') {
            $query = $query->where('tickets.source_of_ticket', 'LIKE', '%' . $request->search_source . '%');
        }

        if ($request->status_id != '') {
            $query = $query->whereIn('status_id', $request->status_id);
        }

        if ($request->date != '') {
            $query = $query->whereDate('tickets.created_at', $request->date);
        }

        $pageSize = Setting::get('pagination', 25);
        if ($pageSize == '') {
            $pageSize = 1;
        }

        $query = $query->groupBy('tickets.ticket_id');
        $data  = $query->orderBy('created_at', 'DESC')->paginate($pageSize)->appends(request()->except(['page']));

        $datatableModel = DataTableColumn::select('column_name')->where('user_id', auth()->user()->id)->where('section_name', 'livechat-tickets')->first();

        $dynamicColumnsToShowLt = [];
        if (! empty($datatableModel->column_name)) {
            $hideColumns            = $datatableModel->column_name ?? '';
            $dynamicColumnsToShowLt = json_decode($hideColumns, true);
        }

        if ($request->ajax()) {
            return response()->json([
                'tbody' => view('livechat.partials.ticket-list', compact('data', 'dynamicColumnsToShowLt'))->with('i', ($request->input('page', 1) - 1) * $pageSize)->render(),
                'links' => (string) $data->links(),
                'count' => $data->total(),
            ], 200);
        }
        $taskstatus = TicketStatuses::get();

        return view('livechat.tickets', compact('data', 'taskstatus', 'dynamicColumnsToShowLt'))->with('i', ($request->input('page', 1) - 1) * $pageSize);
    }

    public function getEmailreplies(Request $request)
    {
        $id           = $request->id;
        $emailReplies = Reply::where('category_id', $id)->orderBy('id', 'ASC')->get();

        return json_encode($emailReplies);
    }

    public function columnVisbilityUpdate(Request $request)
    {
        $userCheck = DataTableColumn::where('user_id', auth()->user()->id)->where('section_name', 'livechat-tickets')->first();

        if ($userCheck) {
            $column               = DataTableColumn::find($userCheck->id);
            $column->section_name = 'livechat-tickets';
            $column->column_name  = json_encode($request->column_lt);
            $column->save();
        } else {
            $column               = new DataTableColumn();
            $column->section_name = 'livechat-tickets';
            $column->column_name  = json_encode($request->column_lt);
            $column->user_id      = auth()->user()->id;
            $column->save();
        }

        return redirect()->back()->with('success', 'column visiblity Added Successfully!');
    }

    public function statuscolor(Request $request)
    {
        $status_color = $request->all();
        $data         = $request->except('_token');
        foreach ($status_color['color_name'] as $key => $value) {
            $bugstatus               = TicketStatuses::find($key);
            $bugstatus->ticket_color = $value;
            $bugstatus->save();
        }

        return redirect()->back()->with('success', 'The status color updated successfully.');
    }

    public function createTickets(Request $request)
    {
        $data              = [];
        $data['ticket_id'] = 'T' . date('YmdHis');
        $customer          = Customer::find($request->ticket_customer_id);
        $email             = null;
        $name              = null;
        if ($customer) {
            $name  = $customer->name;
            $email = $customer->email;
        }
        $data['date']             = date('Y-m-d H:i:s');
        $data['name']             = $name;
        $data['email']            = $email;
        $data['customer_id']      = $request->ticket_customer_id;
        $data['source_of_ticket'] = $request->source_of_ticket;
        $data['subject']          = $request->ticket_subject;
        $data['message']          = $request->ticket_message;
        $data['assigned_to']      = $request->ticket_assigned_to;
        $data['status_id']        = $request->ticket_status_id;
        $success                  = Tickets::create($data);

        return response()->json(['ticket created successfully', 'code' => 200, 'status' => 'success']);
    }

    public function createCredits(Request $request)
    {
        $data             = [];
        $customer_id      = $request->credit_customer_id;
        $credit           = $request->credit;
        $type             = $request->credit_type;
        $customer         = Customer::find($customer_id);
        $currency         = $request->get('currency', 'EUR');
        $customercurrency = ! empty($customer->currency) ? $customer->currency : 'EUR';

        if (! isset($customer->credit) || $customer->credit == null || $customer->credit == '') {
            $customer->credit = 0;
        }

        $calc_credit = 0;

        $currentcredit = \App\Currency::convert($customer->credit, $currency, $customercurrency);

        if ($credit < 0) {
            if ($currentcredit == 0) {
                $calc_credit = $currentcredit + ($credit);
            } else {
                $credit      = str_replace('-', '', $credit);
                $calc_credit = $currentcredit - $credit;
            }
        } else {
            $calc_credit = $currentcredit + $credit;
        }

        if ($customer) {
            if ($customer->store_website_id != null and $customer->platform_id != null) {
                $websiteDetails = StoreWebsite::where('id', $customer->store_website_id)->select('magento_url', 'api_token')->first();
                if ($websiteDetails != null and $websiteDetails['magento_url'] != null and $websiteDetails['api_token'] != null and $request->credit > 0) {
                    $websiteUrl = $websiteDetails['magento_url'];
                    $api_token  = $websiteDetails['api_token'];
                    $bits       = parse_url($websiteUrl);
                    if (isset($bits['host'])) {
                        $web = $bits['host'];
                        if (! Str::contains($websiteUrl, 'www')) {
                            $web = 'www.' . $bits['host'];
                        }
                        $websiteUrl = 'https://' . $web;
                        $post       = [
                            'transaction[amount]'                => $request->credit,
                            'transaction[type]'                  => 'add',
                            'transaction[summary]'               => 'test',
                            'transaction[suppress_notification]' => '1',
                        ];
                        $startTime = date('Y-m-d H:i:s', LARAVEL_START);
                        $ch        = curl_init();
                        $url       = $websiteUrl . '/rest/V1/swarming/credits/add-store-credit/' . $customer->platform_id;
                        curl_setopt($ch, CURLOPT_URL, $url);
                        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
                        curl_setopt($ch, CURLOPT_POST, 1);

                        curl_setopt($ch, CURLOPT_POSTFIELDS, $post);

                        $headers   = [];
                        $headers[] = 'Authorization: Bearer ' . $api_token;
                        $headers[] = 'Cookie: PHPSESSID=m261vs1h58pprpilkr720tqtog; country_code=IN; private_content_version=6f2c1b0f27956af2f0669199874878ed';
                        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

                        $result   = curl_exec($ch);
                        $httpcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
                        LogRequest::log($startTime, $url, 'POST', json_encode($post), json_decode($result), $httpcode, \App\Http\Controllers\LiveChatController::class, 'createCredits');
                        curl_close($ch);
                        $status = 'failure';
                        if ($result == '[]') {
                            $customer->credit   = $calc_credit;
                            $customer->currency = $currency;
                            $customer->save();

                            //Add history and Send mail
                            \App\CreditHistory::create(
                                [
                                    'customer_id' => $customer_id,
                                    'model_id'    => $customer_id,
                                    'model_type'  => Customer::class,
                                    'used_credit' => $credit,
                                    'used_in'     => 'Added with ' . $currency,
                                    'type'        => $type,
                                ]
                            );
                            try {
                                $emailClass = (new \App\Mails\Manual\SendIssueCredit($customer))->build();
                            } catch (Exception $e) {
                                $post = [
                                    'customer-id' => $customer->id,
                                ];
                                CreditLog::create(['customer_id' => $customer->id, 'request' => json_encode($post), 'response' => $e->getMessage(), 'status' => 'failure']);

                                return response()->json(['msg' => 'issue with mailing template', 'code' => 400, 'status' => 'error']);
                            }

                            if ($emailClass) {
                                $email = Email::create([
                                    'model_id'         => $customer->id,
                                    'model_type'       => \App\Customer::class,
                                    'from'             => $emailClass->fromMailer,
                                    'to'               => $customer->email,
                                    'subject'          => $emailClass->subject,
                                    'message'          => $emailClass->render(),
                                    'template'         => 'issue-credit',
                                    'additional_data'  => '',
                                    'status'           => 'pre-send',
                                    'store_website_id' => null,
                                ]);

                                CreditEmailLog::create([
                                    'customer_id' => $customer_id,
                                    'subject'     => $emailClass->subject,
                                    'from'        => $emailClass->fromMailer,
                                    'to'          => $customer->email,
                                    'message'     => $emailClass->render(),
                                ]);
                                try {
                                    \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');
                                } catch (Exception $e) {
                                    $post = [
                                        'email-id'    => $email->id,
                                        'customer-id' => $customer->id,
                                    ];
                                    CreditLog::create(['customer_id' => $customer->id, 'request' => json_encode($post), 'response' => $e->getMessage(), 'status' => 'failure']);

                                    return response()->json(['msg' => 'mail not sent', 'code' => 400, 'status' => 'error']);
                                }
                            } else {
                                $post = [
                                    'customer-id' => $customer->id,
                                ];
                                CreditLog::create(['customer_id' => $customer->id, 'request' => json_encode($post), 'response' => 'email template not found', 'status' => 'failure']);

                                return response()->json(['msg' => 'email template not found', 'code' => 400, 'status' => 'error']);
                            }

                            $status = 'success';
                            CreditLog::create(['customer_id' => $customer->id, 'request' => json_encode($post), 'response' => json_encode($result), 'status' => $status]);

                            return response()->json(['msg' => 'credit updated successfully', 'code' => 200, 'status' => 'success']);
                        } else {
                            CreditLog::create(['customer_id' => $customer->id, 'request' => json_encode($post), 'response' => json_encode($result), 'status' => $status]);

                            return response()->json(['msg' => json_encode($result), 'code' => 400, 'status' => 'error']);
                        }
                    } else {
                        $post = [
                            'customer-id' => $customer->id,
                        ];
                        CreditLog::create(['customer_id' => $customer->id, 'request' => json_encode($post), 'response' => 'store website and platform not found', 'status' => 'failure']);

                        return response()->json(['msg' => 'store website and platform not found', 'code' => 400, 'status' => 'error']);
                    }
                }
            } else {
                $post = [
                    'customer-id' => $customer->id,
                ];
                CreditLog::create(['customer_id' => $customer->id, 'request' => json_encode($post), 'response' => 'allocate store website id and platform id not found', 'status' => 'failure']);

                return response()->json(['msg' => 'Allocate store website id and platform id before proceeding', 'code' => 400, 'status' => 'error']);
            }
        } else {
            return response()->json(['msg' => 'customer not found', 'code' => 400, 'status' => 'error']);
        }
    }

    public function customerCreditLogs($customerId)
    {
        $logs       = CreditLog::where('customer_id', $customerId)->orderBy('id', 'desc')->get();
        $creditLogs = '';
        foreach ($logs as $log) {
            $creditLogs .= "<tr>
            <td width='25%'>" . $log['created_at'] . "</td>
            <td width='25%'>" . $log['request'] . "</td>
            <td width='25%'>" . $log['response'] . "</td>
            <td width='25%'>" . $log['status'] . "</td>
            <td width='25%'><a class='repush-credit-balance' href='/customer/credit-repush/" . $log['id'] . "'>Repush</td>
            </tr>";
        }

        return response()->json(['data' => $creditLogs, 'code' => 200, 'status' => 'success']);
    }

    public function customerCreditHistories($customerId)
    {
        $histories       = CreditHistory::where('customer_id', $customerId)->orderBy('id', 'desc')->get();
        $creditHistories = '';
        foreach ($histories as $history) {
            $creditHistories .= "<tr>
            <td width='25%'>" . $history['id'] . "</td>
            <td width='25%'>" . $history['used_credit'] . "</td>
            <td width='25%'>" . $history['used_in'] . "</td>
            <td width='25%'>" . $history['type'] . "</td>
            <td width='25%'>" . $history['created_at'] . '</td>
            </tr>';
        }

        return response()->json(['data' => $creditHistories, 'code' => 200, 'status' => 'success']);
    }

    public function getCreditsData(Request $request)
    {
        $customer = Customer::find($request->customer_id);
        if ($customer->credit == null || $customer->credit == '') {
            $currentcredit = 0;
        } else {
            $currentcredit = $customer->credit;
        }
        $credits = \App\CreditHistory::where('customer_id', $request->customer_id)->orderBy('id', 'desc')->get();

        return response()->json(['data' => $credits, 'currentcredit' => $currentcredit, 'status' => 'success']);
    }

    public function getTicketsData(Request $request)
    {
        $tickets = Tickets::where('customer_id', $request->customer_id)->with('ticketStatus')->get();

        return response()->json(['data' => $tickets, 'status' => 'success']);
    }

    public function sendEmail(Request $request)
    {
        $this->validate($request, [
            'subject' => 'required|min:3|max:255',
            'message' => 'required',

            'cc.*'  => 'nullable|email',
            'bcc.*' => 'nullable|email',
        ]);

        $tickets = Tickets::find($request->ticket_id);
        if (! isset($tickets->id)) {
            //
        }
        $ticketIdString = '#' . $tickets->ticket_id;
        $fromEmail      = 'buying@amourint.com';
        $fromName       = 'buying';

        if ($request->from_mail) {
            $mail = \App\EmailAddress::where('id', $request->from_mail)->first();
            if ($mail) {
                $fromEmail = $mail->from_address;
                $fromName  = $mail->from_name;
                $config    = config('mail');
                unset($config['sendmail']);
                $configExtra = [
                    'driver' => $mail->driver,
                    'host'   => $mail->host,
                    'port'   => $mail->port,
                    'from'   => [
                        'address' => $mail->from_address,
                        'name'    => $mail->from_name,
                    ],
                    'encryption' => $mail->encryption,
                    'username'   => $mail->username,
                    'password'   => $mail->password,
                ];
                \Config::set('mail', array_merge($config, $configExtra));
                (new \Illuminate\Mail\MailServiceProvider(app()))->register();
            }
        }
        $message = $request->message;
        if ($tickets->email != '') {
            $file_paths = [];

            if ($tickets->lang_code != '' && $tickets->lang_code != 'en') {
                $message = TranslationHelper::translate('en', $tickets->lang_code, $request->message);
            }

            if ($request->hasFile('file')) {
                foreach ($request->file('file') as $file) {
                    $filename = $file->getClientOriginalName();

                    $file->storeAs('documents', $filename, 'files');

                    $file_paths[] = "documents/$filename";
                }
            }

            $cc       = $bcc = [];
            $emails[] = $tickets->email;

            if ($request->has('cc')) {
                $cc = array_values(array_filter($request->cc));
            }
            if ($request->has('bcc')) {
                $bcc = array_values(array_filter($request->bcc));
            }

            if (is_array($emails) && ! empty($emails)) {
                $to = array_shift($emails);
                $cc = array_merge($emails, $cc);

                $mail = Mail::to($to);

                if ($cc) {
                    $mail->cc($cc);
                }
                if ($bcc) {
                    $mail->bcc($bcc);
                }

                $mail->send(new PurchaseEmail($request->subject . $ticketIdString, $request->message, $file_paths, ['from' => $fromEmail]));
            } else {
                return redirect()->back()->withErrors('Please select an email');
            }

            $params = [
                'model_id'        => $tickets->id,
                'model_type'      => Tickets::class,
                'from'            => $fromEmail,
                'to'              => $tickets->email,
                'seen'            => 1,
                'subject'         => $request->subject . $ticketIdString,
                'message'         => $message,
                'message_en'      => $request->message,
                'template'        => 'customer-simple',
                'additional_data' => json_encode(['attachment' => $file_paths]),
                'cc'              => $cc ?: null,
                'bcc'             => $bcc ?: null,
            ];

            Email::create($params);

            return redirect()->back()->withSuccess('You have successfully sent an email!');
        }
    }

    public function fetchEmailsOnTicket($ticketId)
    {
        $emails       = Email::where('model_id', $ticketId)->where('model_type', \App\Tickets::class)->get();
        $email_status = DB::table('email_status')->get();

        return view('livechat.partials.ticket-email', compact('emails', 'email_status'));
    }

    public function AssignTicket(Request $request)
    {
        $this->validate($request, [
            'id'       => 'required|numeric',
            'users_id' => 'required|numeric',

        ]);

        $id       = $request->id;
        $users_id = $request->users_id;

        $tickets = Tickets::find($request->id);
        if (isset($tickets->id) && $tickets->id > 0) {
            $tickets->assigned_to = $users_id;
            $tickets->save();

            return redirect()->back()->withSuccess('Tickets has been successfully Assigned.');
        } else {
            return redirect()->back()->withErrors('something wrong please try to again Assigned Tickets.');
        }
    }

    public function TicketStatus(Request $request)
    {
        $this->validate($request, [
            'name' => 'required',
        ]);

        $name            = $request->name;
        $TicketStatusObj = TicketStatuses::where(['name' => $name])->first();
        if (isset($TicketStatusObj->id) && $TicketStatusObj->id > 0) {
        } else {
            TicketStatuses::create(['name' => $name]);
        }

        return redirect()->back()->withSuccess('Ticket Status has been successfully Added.');
    }

    public function ChangeStatus(Request $request)
    {
        if ($request->status != '' && $request->id != '') {
            $tickets = Tickets::find($request->id);
            if (isset($tickets->id) && $tickets->id > 0) {
                $tickets->status_id = $request->status;
                $tickets->save();
            }
        } else {
        }

        return response()->json([
            'status' => 'success',
        ]);
    }

    public function ChangeDate(Request $request)
    {
        if ($request->date != '' && $request->id != '') {
            $tickets = Tickets::find($request->id);
            if (isset($tickets->id) && $tickets->id > 0) {
                $tickets->resolution_date = $request->date;
                $tickets->save();
            }
        } else {
        }

        return response()->json([
            'status' => 'success',
        ]);
    }

    public function sendBrodcast(Request $request)
    {
        $ids = $request->selected_tasks;
        if (! empty($ids)) {
            foreach ($ids as $id) {
                // started to send message
                $requestData = new Request();
                $requestData->setMethod('POST');
                $requestData->request->add(['ticket_id' => $id, 'message' => $request->message, 'status' => 1]);
                app(\App\Http\Controllers\WhatsAppController::class)->sendMessage($requestData, 'ticket');
            }

            return response()->json(['code' => 200, 'message' => 'Message has been sent to all selected ticket']);
        }

        return response()->json(['code' => 500, 'message' => 'Please select atleast one ticket']);
    }

    public function delete_tickets(Request $request)
    {
        $softdelete = Tickets::find($request->id)->delete();

        return response()->json(['code' => 200, 'message' => 'Record Delete ticket']);
    }

    public function creditRepush(Request $request, $id)
    {
        $creditLog = CreditLog::find($id);
        if ($creditLog) {
            $customer = \App\Customer::find($creditLog->customer_id);
            if ($customer->store_website_id != null and $customer->platform_id != null) {
                $websiteDetails = StoreWebsite::where('id', $customer->store_website_id)->select('magento_url', 'api_token')->first();
                if ($websiteDetails != null and $websiteDetails['magento_url'] != null and $websiteDetails['api_token'] != null) {
                    $websiteUrl = $websiteDetails['magento_url'];
                    $api_token  = $websiteDetails['api_token'];
                    $bits       = parse_url($websiteUrl);
                    if (isset($bits['host'])) {
                        $web = $bits['host'];
                        if (! Str::contains($websiteUrl, 'www')) {
                            $web = 'www.' . $bits['host'];
                        }
                        $websiteUrl = 'https://' . $web;
                        $post       = json_decode($creditLog->request, true);
                        $startTime  = date('Y-m-d H:i:s', LARAVEL_START);
                        $ch         = curl_init();
                        $url        = $websiteUrl . '/rest/V1/swarming/credits/add-store-credit/' . $customer->platform_id;
                        curl_setopt($ch, CURLOPT_URL, $url);
                        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
                        curl_setopt($ch, CURLOPT_POST, 1);
                        curl_setopt($ch, CURLOPT_POSTFIELDS, $post);

                        $headers   = [];
                        $headers[] = 'Authorization: Bearer ' . $api_token;
                        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
                        $result     = curl_exec($ch);
                        $jsonResult = json_decode($result); //response decode
                        $httpcode   = curl_getinfo($ch, CURLINFO_HTTP_CODE);
                        LogRequest::log($startTime, $url, 'GET', json_encode($post), $jsonResult, $httpcode, \App\Http\Controllers\LiveChatController::class, 'creditRepush');
                        curl_close($ch);
                        $status = 'failure';
                        $code   = 500;
                        if ($result == '[]') {
                            $code   = 200;
                            $status = 'success';
                        }

                        if (isset($jsonResult->message)) {
                            $code   = 500;
                            $status = 'failure';
                        }

                        CreditLog::create(['customer_id' => $customer->id, 'request' => json_encode($post), 'response' => json_encode($result), 'status' => $status]);
                    }

                    return response()->json(['message' => (isset($jsonResult->message)) ? $jsonResult->message : 'Credit updated successfully', 'code' => $code, 'status' => $status]);
                }

                return response()->json(['message' => 'Store website not found', 'code' => 500, 'status' => 'failed']);
            } else {
                return response()->json(['message' => 'Customer store website not found', 'code' => 500, 'status' => 'failed']);
            }
        } else {
            return response()->json(['message' => 'Credit log not found', 'code' => 500, 'status' => 'failed']);
        }
    }

    /*
    * getLiveChatCouponCode : Get coupon code according to store website
    */
    public function getLiveChatCouponCode(Request $request)
    {
        if ($request->ajax()) {
            $customer    = Customer::find($request->get('customer_id'));
            $couponsData = \App\CouponCodeRules::where('store_website_id', $customer->store_website_id)->where('coupon_code', '!=', '')->where('is_active', 1)->get()->toArray();
            if ($couponsData) {
                return response()->json([
                    'data' => $couponsData,
                ], 200);
            }

            return response()->json([
                'data' => [],
            ], 200);
        }
    }

    /*
   * Send mail method
   */
    public function sendLiveChatCouponCode(Request $request)
    {
        $ruleId         = $request->rule_id;
        $couponCodeRule = \App\CouponCodeRules::find($ruleId);
        $customerId     = $request->customer_id;
        $customerData   = Customer::find($customerId);
        \App\CouponCodeRuleLog::create([
            'rule_id'     => $ruleId,
            'coupon_code' => $couponCodeRule->coupon_code,
            'log_type'    => 'send_to_user_intiate',
            'message'     => 'Sending coupon mail to ' . $customerData->email,
        ]);
        $emailAddress                 = \App\EmailAddress::where('store_website_id', $couponCodeRule->store_website_id)->first();
        $mailData['receiver_email']   = $customerData->email;
        $mailData['sender_email']     = $emailAddress->from_address;
        $mailData['coupon']           = $couponCodeRule->coupon_code;
        $mailData['model_id']         = $ruleId;
        $mailData['model_class']      = CouponCodeRules::class;
        $mailData['store_website_id'] = $couponCodeRule->store_website_id;
        $emailClass                   = (new \App\Mail\AddCoupon($mailData))->build();
        $email                        = \App\Email::create([
            'model_id'         => $ruleId,
            'model_type'       => CouponCodeRules::class,
            'from'             => $emailAddress->from_address,
            'to'               => $customerData->email,
            'subject'          => $emailClass->subject,
            'message'          => $emailClass->render(),
            'template'         => 'coupons',
            'additional_data'  => '',
            'status'           => 'pre-send',
            'store_website_id' => $couponCodeRule->store_website_id,
            'is_draft'         => 0,
        ]);
       
        \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');
        \App\CouponCodeRuleLog::create([
            'rule_id'     => $ruleId,
            'coupon_code' => $couponCodeRule->coupon_code,
            'log_type'    => 'send_mail',
            'message'     => 'Mail was sent to ' . $customerData->email,
        ]);

        return response()->json([
            'message' => 'coupon send successully',
        ], 200);
    }

    public function customerInfo(Request $request)
    {
        $liveChatData = CustomerLiveChat::find($request->id);
        $threadId     = '';
        $returnVal    = '';
        if ($liveChatData->customer_id) {
            $chatId = $liveChatData->customer_id;

            //getting customer name from chat
            $customer = Customer::findorfail($chatId);
            $email    = $customer->email;

            $threadId = $liveChatData->thread;

            if ($threadId) {
                $postURL = 'https://api.livechatinc.com/v3.1/agent/action/get_customers';

                $postData = ['filters' => ['email' => ['values' => [$email]]]];
                $postData = json_encode($postData);

                $returnVal = '';
                $result    = self::curlCall($postURL, $postData, 'application/json');

                if ($result['err']) {
                    $returnVal = false;
                } else {
                    $response = json_decode($result['response']);
                    if (isset($response->error)) {
                        $returnVal = false;
                    } else {
                        $returnVal = $response->customers[0];
                    }
                }
            }
        }

        return response()->json(['status' => 'success', 'threadId' => $threadId, 'customerInfo' => $returnVal], 200);
    }

    public function watsonJourney(request $request)
    {
        $watsonJourney = WatsonChatJourney::orderBy('id', 'desc')->paginate(10)->appends(request()->except(['page']));
        if (count($watsonJourney) != 0) {
            foreach ($watsonJourney as $value) {
                $id = null;
                if (! empty($value->chat_id)) {
                    $id = $value->chat_id;
                } else {
                    $id = $value->chat_message_id;
                }
                $senderDeatilsId = \DB::table('chat_messages')->where('id', $id)->first();
                if (! empty($senderDeatilsId)) {
                    $sender_id = $senderDeatil = null;
                    if (! empty($senderDeatilsId->vendor_id)) {
                        $sender_id    = $senderDeatilsId->vendor_id;
                        $senderDeatil = \DB::table('vendors')->select('name', 'phone', 'id')->where('id', $sender_id)->first();
                    } elseif (! empty($senderDeatilsId->supplier_id)) {
                        $sender_id    = $senderDeatilsId->supplier_id;
                        $senderDeatil = \DB::table('suppliers')->select('supplier as name', 'phone', 'id')->where('id', $sender_id)->first();
                    } elseif (! empty($senderDeatilsId->user_id)) {
                        $sender_id    = $senderDeatilsId->user_id;
                        $senderDeatil = \DB::table('users')->select('name', 'phone', 'id')->where('id', $sender_id)->first();
                    } elseif (! empty($senderDeatilsId->customer_id)) {
                        $sender_id    = $senderDeatilsId->customer_id;
                        $senderDeatil = \DB::table('customers')->select('name', 'phone', 'id')->where('id', $sender_id)->first();
                    }
                }
                if (! empty($senderDeatil)) {
                    $value->sender_name  = $senderDeatil->name;
                    $value->sender_phone = $senderDeatil->phone;
                } else {
                    $value->sender_name  = '';
                    $value->sender_phone = '';
                }
            }
        }

        return view('livechat.journey', compact('watsonJourney'))
            ->with('i', ($request->input('page', 1) - 1) * 5);
    }

    public function ajax(request $request)
    {
        $unsetvalue    = null;
        $watsonJourney = WatsonChatJourney::where(function ($query) use ($request) {
            if (isset($request->apply_id) && isset($request->term) && $request->term != '' && $request->apply_id != '') {
                if ($request->apply_id == 1) {
                    $query = $query->where('reply', 'LIKE', '%' . $request->term . '%');
                } elseif ($request->apply_id == 4) {
                    $query = $query->where('message_received', 'LIKE', '%' . $request->term . '%');
                } elseif ($request->apply_id == 5) {
                    $query = $query->where('chat_entered', 'LIKE', '%' . $request->term . '%');
                } elseif ($request->apply_id == 6) {
                    $query = $query->where('reply_found_in_database', 'LIKE', '%' . $request->term . '%');
                } elseif ($request->apply_id == 7) {
                    $query = $query->where('reply_searched_in_watson', 'LIKE', '%' . $request->term . '%');
                } elseif ($request->apply_id == 8) {
                    $query = $query->where('response_sent_to_cusomer', 'LIKE', '%' . $request->term . '%');
                }
            }
        })->orderBy('id', 'desc')->paginate(10);
        if (count($watsonJourney) != 0) {
            foreach ($watsonJourney as $key => $value) {
                $id = null;
                if (! empty($value->chat_id)) {
                    $id = $value->chat_id;
                } else {
                    $id = $value->chat_message_id;
                }
                $senderDeatilsId = \DB::table('chat_messages')->select('id', 'vendor_id', 'supplier_id', 'user_id', 'customer_id')->where('id', $id)->first();
                if (! empty($senderDeatilsId)) {
                    $sender_id = $senderDeatil = null;
                    if (! empty($senderDeatilsId->vendor_id)) {
                        $sender_id = $senderDeatilsId->vendor_id;
                        if ($request->apply_id == 2) {
                            $senderDeatil = \DB::table('vendors')->select('name', 'phone', 'id')->where('id', $sender_id)->where('name', 'LIKE', '%' . $request->term . '%')->first();
                        } elseif ($request->apply_id == 3) {
                            $senderDeatil = \DB::table('vendors')->select('name', 'phone', 'id')->where('id', $sender_id)->where('phone', 'LIKE', '%' . $request->term . '%')->first();
                        } else {
                            $senderDeatil = \DB::table('vendors')->select('name', 'phone', 'id')->where('id', $sender_id)->first();
                        }
                    } elseif (! empty($senderDeatilsId->supplier_id)) {
                        $sender_id = $senderDeatilsId->supplier_id;
                        if ($request->apply_id == 2) {
                            $senderDeatil = \DB::table('suppliers')->select('supplier as name', 'phone', 'id')->where('id', $sender_id)->where('supplier', 'LIKE', '%' . $request->term . '%')->first();
                        } elseif ($request->apply_id == 3) {
                            $senderDeatil = \DB::table('suppliers')->select('supplier as name', 'phone', 'id')->where('id', $sender_id)->where('phone', 'LIKE', '%' . $request->term . '%')->first();
                        } else {
                            $senderDeatil = \DB::table('suppliers')->select('supplier as name', 'phone', 'id')->where('id', $sender_id)->first();
                        }
                    } elseif (! empty($senderDeatilsId->user_id)) {
                        $sender_id = $senderDeatilsId->user_id;
                        if ($request->apply_id == 2) {
                            $senderDeatil = \DB::table('users')->select('name', 'phone', 'id')->where('id', $sender_id)->where('name', 'LIKE', '%' . $request->term . '%')->first();
                        } elseif ($request->apply_id == 3) {
                            $senderDeatil = \DB::table('users')->select('name', 'phone', 'id')->where('id', $sender_id)->where('phone', 'LIKE', '%' . $request->term . '%')->first();
                        } else {
                            $senderDeatil = \DB::table('users')->select('name', 'phone', 'id')->where('id', $sender_id)->first();
                        }
                    } elseif (! empty($senderDeatilsId->customer_id)) {
                        $sender_id = $senderDeatilsId->customer_id;
                        if ($request->apply_id == 2) {
                            $senderDeatil = \DB::table('customers')->select('name', 'phone', 'id')->where('id', $sender_id)->where('name', 'LIKE', '%' . $request->term . '%')->first();
                        } elseif ($request->apply_id == 3) {
                            $senderDeatil = \DB::table('customers')->select('name', 'phone', 'id')->where('id', $sender_id)->where('phone', 'LIKE', '%' . $request->term . '%')->first();
                        } else {
                            $senderDeatil = \DB::table('customers')->select('name', 'phone', 'id')->where('id', $sender_id)->first();
                        }
                    }
                }
                if (! empty($senderDeatil)) {
                    $value->sender_name  = $senderDeatil->name;
                    $value->sender_phone = $senderDeatil->phone;
                } else {
                    $value->sender_name  = '';
                    $value->sender_phone = '';
                    if ($request->apply_id == 2 || $request->apply_id == 3) {
                        $unsetvalue[] = $key;
                    }
                }
            }
            unset($watsonJourney[$unsetvalue]);
        }

        return response()->json([
            'livechat' => view('livechat.partials.list-journey', compact('watsonJourney'))->with('i', ($request->input('page', 1) - 1) * 5)->render(),
            'links'    => (string) $watsonJourney->render(),
            'count'    => $watsonJourney->total(),
        ], 200);
    }

    //DEVTASK-22731 - START
    public function updateTicket(Request $request)
    {
        \App\ChatMessage::where(['id' => $request->id])->update(['message' => $request->message, 'message_en' => $request->message]);

        return response()->json(['status' => true, 'message' => 'Data updated successfully']);
    }

    public function approveTicket(Request $request)
    {
        \App\ChatMessage::where(['id' => $request->id])->update(['send_to_tickets' => 1]);

        return response()->json(['status' => true, 'message' => 'Data updated successfully']);
    }

    public function ticketData(Request $request)
    {
        $replies = [];
        $result  = \App\ChatMessage::where('ticket_id', $request->ticket_id)->orderBy('id', 'desc')->get();
        if (count($result) > 0) {
            foreach ($result as $key => $value) {
                $sendTo   = '-';
                $customer = \App\Customer::where('id', $value->customer_id)->first();
                if (! empty($customer)) {
                    $sendTo = $customer->name;
                }
                $sopdata = \App\Sop::where(['chat_message_id' => $value->id])->first();
                if (! empty($sopdata)) {
                    $result[$key]['sop_name']     = $sopdata->name;
                    $result[$key]['sop_category'] = $sopdata->category;
                    $result[$key]['sop_content']  = $sopdata->content;
                } else {
                    $result[$key]['sop_name']     = null;
                    $result[$key]['sop_category'] = null;
                    $result[$key]['sop_content']  = null;
                }

                $check_replies = \App\ChatbotReply::where(['chat_id' => $value->id])->first();
                if (! empty($check_replies)) {
                    $result[$key]['out']      = true;
                    $result[$key]['datetime'] = 'From ' . $check_replies->reply_from . ' To ' . $sendTo . ' On ' . Carbon::parse($value->created_at)->format('Y-m-d H:i A');
                } else {
                    $result[$key]['out']      = false;
                    $result[$key]['datetime'] = 'From ERP' . ' To ' . $sendTo . ' On ' . Carbon::parse($value->created_at)->format('Y-m-d H:i A');
                }
            }
        }

        return response()->json(['data' => $result, 'count' => $result->count()]);
    }
    //DEVTASK-22731 - END
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/Logging/LogScraperController.php 
Content: <?php

namespace App\Http\Controllers\Logging;

use App\Setting;
use App\DeveloperTask;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use App\Http\Controllers\Controller;
use Illuminate\Pagination\LengthAwarePaginator;

class LogScraperController extends Controller
{
    public function index(Request $request)
    {
        $customrange = $request->get('customrange', null);
        $from        = null;
        $to          = null;

        if (! empty($customrange)) {
            [$from, $to] = explode(' - ', $customrange);
        }

        $scraperLogs = DB::table('scraped_products');

        if (! empty($request->id)) {
            $scraperLogs = $scraperLogs->where('id', '=', $request->id);
        }

        if (! empty($request->ip_address)) {
            $scraperLogs = $scraperLogs->where('ip_address', 'LIKE', '%' . $request->ip_address . '%');
        }

        if (! empty($request->website)) {
            $scraperLogs = $scraperLogs->where('website', 'LIKE', '%' . $request->website . '%');
        }

        if (! empty($request->url)) {
            $scraperLogs = $scraperLogs->where('url', 'LIKE', '%' . $request->url . '%');
        }

        if (! empty($request->sku)) {
            $scraperLogs = $scraperLogs->where('sku', 'LIKE', '%' . $request->sku . '%');
        }

        if (! empty($request->original_sku)) {
            $scraperLogs = $scraperLogs->where('original_sku', 'LIKE', '%' . $request->original_sku . '%');
        }

        if (! empty($request->title)) {
            $scraperLogs = $scraperLogs->where('title', 'LIKE', '%' . $request->title . '%');
        }

        if (! empty($request->validation_result)) {
            $scraperLogs = $scraperLogs->where('validation_result', 'LIKE', '%' . $request->validation_result . '%');
        }

        if (! empty($from) && ! empty($to)) {
            $scraperLogs = $scraperLogs->where('created_at', '>=', $from)->where('created_at', '<=', $to);
        }

        if (! empty($request->is_external_scraper)) {
            $scraperLogs = $scraperLogs->where('is_external_scraper', $request->is_external_scraper);
        }

        $logsByGroup = clone $scraperLogs;
        $logsByGroup = $logsByGroup->where('validation_result', '!=', '');
        $logsByGroup = $logsByGroup->select(['website', \DB::raw('count(*) as total_error')]);
        $logsByGroup = $logsByGroup->groupBy('website');
        $logsByGroup = $logsByGroup->having('total_error', '>', 0)->get();

        $scraperLogs      = $scraperLogs->orderBy('created_at', 'DESC')->paginate(25);
        $requestParamData = request()->except(['page']);

        // For ajax
        if ($request->ajax()) {
            return response()->json([
                'tbody' => view('logging.partials.scraper-logs', compact('scraperLogs'))->render(),
                'links' => (string) $scraperLogs->appends(request()->except('page'))->links(),
            ], 200);
        }

        return view('logging.scraper', compact('scraperLogs', 'customrange', 'logsByGroup', 'requestParamData'));
    }

    public function logSKU(Request $request)
    {
        $logScrapper = \App\ScrapedProducts::select('scraped_products.*', 'scrapers.inventory_lifetime')->leftJoin('scrapers', function ($join) {
            $join->on('scraped_products.website', '=', 'scrapers.scraper_name');
        });

        // Filters
        if (! empty($request->product_id)) {
            $logScrapper->where('id', $request->product_id);
        }

        if (! empty($request->sku)) {
            $logScrapper->where('sku', 'LIKE', '%' . $request->sku . '%');
        }

        if (! empty($request->brand)) {
            $logScrapper->whereIn('brand', $request->brand);
        }

        if (! empty($request->category)) {
            $cats = explode(',', $request->category);
            foreach ($cats as $cat) {
                $cat = preg_replace('/\s+/', '', $cat);
                $logScrapper->where('category', 'LIKE', '%' . $cat . '%');
            }
        }

        if (! empty($request->supplier)) {
            $logScrapper->whereHas('scraper', function ($qu) {
                $qu->whereIn('scraper_name', request('supplier'));
            });
        }

        if (! empty($request->validate)) {
            if ($request->validate == 2) {
                $logScrapper->where('validated', 0);
            } else {
                $logScrapper->where('validated', $request->validate);
            }
        }

        $failed = $logScrapper->where('validation_result', 'LIKE', '%SKU failed regex test%')->count();

        // Get paginated result
        $logScrapper->whereRaw('scraped_products.last_inventory_at > DATE_SUB(NOW(), INTERVAL scrapers.inventory_lifetime DAY)');

        $logScrappers = $logScrapper->paginate(25)->appends(request()->except(['page']));

        $existingIssues = DeveloperTask::whereNotNull('reference')->get();

        $pendingIssues = DeveloperTask::whereNotNull('reference')->where('status', 'Issue')->count();

        $lastCreatedIssue = DeveloperTask::whereNotNull('reference')->orderBy('created_at', 'desc')->first();

        $logs = \App\ScrapedProducts::select('id', 'category', 'properties')->whereNotNull('category')->groupBy('category')->get();
        foreach ($logs as $log) {
            $category_selection[] = str_replace(',', '>', $log->dataUnserialize($log->category));
        }

        $requestParam = request()->except(['page']);
        // For ajax
        if ($request->ajax()) {
            return response()->json([
                'tbody'       => view('logging.partials.listsku_data', compact('logScrappers', 'category_selection', 'failed', 'existingIssues', 'pendingIssues', 'lastCreatedIssue', 'requestParam'))->render(),
                'links'       => (string) $logScrappers->render(),
                'totalFailed' => $failed,
            ], 200);
        }

        // Show results
        return view('logging.product-sku', compact('logScrappers', 'category_selection', 'failed', 'existingIssues', 'lastCreatedIssue', 'pendingIssues', 'requestParam'));
    }

    public function logSKUErrors(Request $request)
    {
        $logScrapper = \App\ScrapedProducts::select('scraped_products.*', 'brands.sku_search_url', 'sku_formats.sku_examples', 'sku_formats.sku_format', 'scrapers.inventory_lifetime')
            ->leftJoin('scrapers', function ($join) {
                $join->on('scraped_products.website', '=', 'scrapers.scraper_name');
            })->leftJoin('brands', function ($join) {
                $join->on('scraped_products.brand', '=', 'brands.name');
            })->leftJoin('sku_formats', function ($join) {
                $join->on('brands.id', 'sku_formats.brand_id');
            });

        // Filters
        if (! empty($request->product_id)) {
            $logScrapper->where('id', $request->product_id);
        }

        if (! empty($request->sku)) {
            $logScrapper->where('sku', 'LIKE', '%' . $request->sku . '%');
        }

        if (! empty($request->brand)) {
            $logScrapper->whereIn('brand', $request->brand);
        }

        if (! empty($request->category)) {
            $cats = explode(',', $request->category);
            foreach ($cats as $cat) {
                $cat = preg_replace('/\s+/', '', $cat);
                $logScrapper->where('category', 'LIKE', '%' . $cat . '%');
            }
        }

        if (! empty($request->supplier)) {
            $logScrapper->whereHas('scraper', function ($qu) {
                $qu->whereIn('scraper_name', request('supplier'));
            });
        }

        if (! empty($request->validate)) {
            if ($request->validate == 2) {
                $logScrapper->where('validated', 0);
            } else {
                $logScrapper->where('validated', $request->validate);
            }
        }

        $logScrapper->where('validation_result', 'LIKE', '%SKU failed regex test%');

        if (! empty($request->order) || $request->order == 0) {
            if ($request->order == 1) {
                $logScrapper->select('*', \DB::raw('count("scraped_products.website") as total'))->orderBy('total', 'asc');
            } else {
                $logScrapper->select('*', \DB::raw('count("scraped_products.website") as total'))->orderBy('total', 'DESC');
            }
        }

        $logScrapper->groupBy('website')->groupBy('brand');

        if ($request->custom != null && $request->custom != 0) {
            $scraps = $logScrapper->get();
            foreach ($scraps as $scrap) {
                $example = $scrap->sku_examples;
                if ($example == null) {
                    continue;
                }
                $sample = explode(',', $example);
                $string = str_replace(' ', '-', $sample[0]); // Replaces all spaces with hyphens.
                $string = preg_replace('/[^A-Za-z0-9\-]/', '', $string);

                if (strlen($string) < strlen($scrap->sku)) {
                    $scrapArray[] = $scrap;
                }
            }

            $currentPage  = LengthAwarePaginator::resolveCurrentPage();
            $perPage      = Setting::get('pagination');
            $currentItems = array_slice($scrapArray, $perPage * ($currentPage - 1), $perPage);

            $log = new LengthAwarePaginator($currentItems, count($scrapArray), $perPage, $currentPage, [
                'path' => LengthAwarePaginator::resolveCurrentPath(),
            ]);

            $logScrappers = $log->appends(request()->except(['page']));
        } else {
            $logScrappers = $logScrapper->paginate(25)->appends(request()->except(['page']));
        }

        $failed = $logScrappers->total();

        $existingIssues = DeveloperTask::whereNotNull('reference')->get();

        $pendingIssues = DeveloperTask::whereNotNull('reference')->where('status', 'Issue')->groupBy('responsible_user_id')->groupBy('status')->get();

        $pendingIssuesCount = DeveloperTask::whereNotNull('reference')->where('status', 'Issue')->count();

        $lastCreatedIssue = DeveloperTask::whereNotNull('reference')->orderBy('created_at', 'desc')->first();

        $logs = \App\ScrapedProducts::select('id', 'category', 'properties')->whereNotNull('category')->groupBy('category')->get();
        foreach ($logs as $log) {
            $category_selection[] = str_replace(',', '>', $log->dataUnserialize($log->category));
        }

        $requestParam = request()->except(['page']);
        // For ajax
        if ($request->ajax()) {
            return response()->json([
                'tbody'       => view('logging.partials.listsku_errors_data', compact('logScrappers', 'category_selection', 'failed', 'existingIssues', 'pendingIssues', 'lastCreatedIssue', 'requestParam', 'pendingIssuesCount'))->render(),
                'links'       => (string) $logScrappers->render(),
                'totalFailed' => $failed,
            ], 200);
        }

        // Show results
        return view('logging.product-sku-errors', compact('logScrappers', 'category_selection', 'failed', 'existingIssues', 'lastCreatedIssue', 'pendingIssues', 'requestParam', 'pendingIssuesCount'));
    }

    public function scraperApiLog(Request $request)
    {
        $apilogs = \App\ScrapApiLog::select('scrap_api_logs.*', 'scrap_api_logs.scraper_id')
            ->leftJoin('scrapers', 'scrap_api_logs.scraper_id', '=', 'scrapers.id')
            ->select('scrap_api_logs.*', 'scrapers.scraper_name');
        if ($request->scraper_name) {
            $apilogs = $apilogs->where('scrapers.scraper_name', 'LIKE', "%$request->scraper_name%");
        }
        if ($request->start_date && $request->end_date) {
            if ($request->start_date != $request->end_date) {
                $startDate = \Carbon\Carbon::createFromFormat('d-m-Y', $request->start_date);
                $endDate   = \Carbon\Carbon::createFromFormat('d-m-Y', $request->end_date);
                $apilogs   = $apilogs->whereBetween('scrap_api_logs.created_at', [$startDate, $endDate]);
            }

            if ($request->start_date == $request->end_date) {
                $startDate = \Carbon\Carbon::createFromFormat('d-m-Y', $request->start_date);
                $date      = $startDate->format('Y-m-d');
                $apilogs   = $apilogs->where('scrap_api_logs.created_at', 'LIKE', "%$date%");
            }
        }
        $data['api_logs'] = $apilogs->latest()->paginate(30);

        return view('scrap.scrap_api_log', $data);
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/MagentoController.php 
Content: <?php

namespace App\Http\Controllers;

use App\Order;
use Validator;
use App\Colors;
use App\Product;
use App\Setting;
use App\Customer;
use App\AutoReply;
use Carbon\Carbon;
use App\ChatMessage;
use App\OrderStatus;
use App\OrderProduct;
use Illuminate\Http\Request;
use App\CommunicationHistory;
use Illuminate\Support\Facades\DB;

class MagentoController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        //
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        //
    }

    /**
     * Display the specified resource.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        //
    }

    public function magentoSettingUpdate()
    {
        try {
            \Artisan::call('command:MagentoSettingUpdates');

            return response()->json(['code' => 200, 'message' => 'Magento Setting Updated successfully']);
        } catch (Exception $e) {
            $msg = $e->getMessage();

            return response()->json(['code' => 500, 'message' => $msg]);
        }
    }

    public static function get_magento_orders()
    {
        $options = [
            'trace'              => true,
            'connection_timeout' => 120,
            'wsdl_cache'         => WSDL_CACHE_NONE,
        ];
        $size      = '';
        $proxy     = new \SoapClient(config('magentoapi.url'), $options);
        $sessionId = $proxy->login(config('magentoapi.user'), config('magentoapi.password'));
        $lastid    = Setting::get('lastid');
        $filter    = [
            'complex_filter' => [
                [
                    'key'   => 'order_id',
                    'value' => ['key' => 'gt', 'value' => $lastid],
                ],
            ],
        ];
        $orderlist = $proxy->salesOrderList($sessionId, $filter);

        for ($j = 0; $j < count($orderlist); $j++) {
            $results = json_decode(json_encode($proxy->salesOrderInfo($sessionId, $orderlist[$j]->increment_id)), true);
            $atts    = unserialize($results['items'][0]['product_options']);

            if (! empty($results['total_paid'])) {
                $paid = $results['total_paid'];
            } else {
                $paid = 0;
            }

            $balance_amount = $results['base_grand_total'] - $paid;

            $full_name = $results['billing_address']['firstname'] . ' ' . $results['billing_address']['lastname'];

            $customer_phone = (int) str_replace(' ', '', $results['billing_address']['telephone']);
            $final_phone    = '';

            if ($customer_phone != null) {
                if ($results['billing_address']['country_id'] == 'IN') {
                    if (strlen($customer_phone) <= 10) {
                        $customer_phone = '91' . $customer_phone;
                    }
                }

                $customer = Customer::where('phone', $customer_phone)->first();
            } else {
                $customer = Customer::where('name', 'LIKE', "%$full_name%")->first();
            }

            if ($customer) {
                $customer_id = $customer->id;

                if ($customer_phone != null) {
                    $final_phone = $customer_phone;
                }

                if ($customer->credit > 0) {
                    if (($balance_amount - $customer->credit) < 0) {
                        $left_credit      = ($balance_amount - $customer->credit) * -1;
                        $balance_amount   = 0;
                        $customer->credit = $left_credit;
                    } else {
                        $balance_amount -= $customer->credit;
                        $customer->credit = 0;
                    }
                }

                $customer->name    = $full_name;
                $customer->email   = $results['customer_email'];
                $customer->address = $results['billing_address']['street'];
                $customer->city    = $results['billing_address']['city'];
                $customer->country = $results['billing_address']['country_id'];
                $customer->pincode = $results['billing_address']['postcode'];
                $customer->phone   = $final_phone;

                $customer->save();
            } else {
                $customer          = new Customer;
                $customer->name    = $full_name;
                $customer->email   = $results['customer_email'];
                $customer->address = $results['billing_address']['street'];
                $customer->city    = $results['billing_address']['city'];
                $customer->country = $results['billing_address']['country_id'];
                $customer->pincode = $results['billing_address']['postcode'];
                $temp_number       = [];

                if ($customer_phone != null) {
                    $temp_number['phone'] = $customer_phone;
                } else {
                    $temp_number['phone'] = self::generateRandomString();
                }

                $final_phone     = self::validatePhone($temp_number);
                $customer->phone = $final_phone;

                $customer->save();

                $customer_id = $customer->id;
            }

            $order_status    = '';
            $order_status_id = null;
            $payment_method  = '';
            if ($results['payment']['method'] == 'paytm_cc') {
                if ($results['state'] == 'processing') {
                    $order_status    = 'Prepaid';
                    $order_status_id = \App\Helpers\OrderHelper::$prepaid;
                } else {
                    $order_status    = 'Follow up for advance';
                    $order_status_id = \App\Helpers\OrderHelper::$followUpForAdvance;
                }

                $payment_method = 'paytm';
            } elseif ($results['payment']['method'] == 'zestmoney_zestpay') {
                if ($results['state'] == 'processing') {
                    $order_status    = 'Prepaid';
                    $order_status_id = \App\Helpers\OrderHelper::$prepaid;
                } else {
                    $order_status    = 'Follow up for advance';
                    $order_status_id = \App\Helpers\OrderHelper::$followUpForAdvance;
                }

                $payment_method = 'zestpay';
            } elseif ($results['payment']['method'] == 'cashondelivery') {
                $order_status    = 'Follow up for advance';
                $payment_method  = 'cash on delivery';
                $order_status_id = \App\Helpers\OrderHelper::$followUpForAdvance;
            }

            $id = DB::table('orders')->insertGetId(
                [
                    'customer_id'     => $customer_id,
                    'order_id'        => $results['increment_id'],
                    'order_type'      => 'online',
                    'order_status'    => $order_status,
                    'order_status_id' => $order_status_id,
                    'payment_mode'    => $payment_method,
                    'order_date'      => $results['created_at'],
                    'client_name'     => $results['billing_address']['firstname'] . ' ' . $results['billing_address']['lastname'],
                    'city'            => $results['billing_address']['city'],
                    'advance_detail'  => $paid,
                    'contact_detail'  => $final_phone,
                    'balance_amount'  => $balance_amount,
                    'created_at'      => $results['created_at'],
                    'updated_at'      => $results['created_at'],
                ]);

            $noproducts = count($results['items']);
            for ($i = 0; $i < $noproducts; $i++) {
                if (round($results['items'][$i]['price']) > 0) {
                    if ($results['items'][$i]['product_type'] == 'configurable' && ! empty($atts['attributes_info'][0]['label'])) {
                        if ($atts['attributes_info'][0]['label'] == 'Sizes') {
                            $size = $atts['attributes_info'][0]['value'];
                        }
                    } else {
                        $size = '';
                    }
                    $skuAndColor = self::getSkuAndColor($results['items'][$i]['sku']);

                    DB::table('order_products')->insert(
                        [
                            'order_id'      => $id,
                            'sku'           => $skuAndColor['sku'],
                            'product_price' => round($results['items'][$i]['price']),
                            'qty'           => round($results['items'][$i]['qty_ordered']),
                            'size'          => $size,
                            'color'         => $skuAndColor['color'],
                            'created_at'    => $results['created_at'],
                            'updated_at'    => $results['created_at'],
                        ]);
                }
            }
            Setting::add('lastid', $orderlist[$j]->order_id, 'int');

            $order = Order::find($id);
            if ($results['payment']['method'] == 'cashondelivery') {
                $product_names = '';
                foreach (OrderProduct::where('order_id', $id)->get() as $order_product) {
                    $product_names .= $order_product->product ? $order_product->product->name . ', ' : '';
                }

                $delivery_time = $order->estimated_delivery_date ? Carbon::parse($order->estimated_delivery_date)->format('d \of\ F') : Carbon::parse($order->order_date)->addDays(15)->format('d \of\ F');

                $auto_reply = AutoReply::where('type', 'auto-reply')->where('keyword', 'cod-online-confirmation')->first();

                $auto_message = preg_replace('/{product_names}/i', $product_names, $auto_reply->reply);
                $auto_message = preg_replace('/{delivery_time}/i', $delivery_time, $auto_message);

                $params = [
                    'number'      => null,
                    'user_id'     => 6,
                    'approved'    => 1,
                    'status'      => 2,
                    'customer_id' => $order->customer->id,
                    'message'     => $auto_message,
                ];

                $chat_message = ChatMessage::create($params);

                $whatsapp_number = $order->customer->whatsapp_number != '' ? $order->customer->whatsapp_number : null;

                app(\App\Http\Controllers\WhatsAppController::class)->sendWithWhatsApp($order->customer->phone, $whatsapp_number, $params['message'], false, $chat_message->id);

                $params['message'] = AutoReply::where('type', 'auto-reply')->where('keyword', 'cod-online-followup')->first()->reply;

                $chat_message = ChatMessage::create($params);

                app(\App\Http\Controllers\WhatsAppController::class)->sendWithWhatsApp($order->customer->phone, $whatsapp_number, $params['message'], false, $chat_message->id);

                CommunicationHistory::create([
                    'model_id'   => $order->id,
                    'model_type' => Order::class,
                    'type'       => 'initial-advance',
                    'method'     => 'whatsapp',
                ]);
            } elseif ($order->order_status == \App\Helpers\OrderHelper::$prepaid && $results['state'] == 'processing') {
                $params = [
                    'number'      => null,
                    'user_id'     => 6,
                    'approved'    => 1,
                    'status'      => 2,
                    'customer_id' => $order->customer->id,
                    'message'     => AutoReply::where('type', 'auto-reply')->where('keyword', 'prepaid-order-confirmation')->first()->reply,
                ];

                $chat_message = ChatMessage::create($params);

                $whatsapp_number = $order->customer->whatsapp_number != '' ? $order->customer->whatsapp_number : null;

                app(\App\Http\Controllers\WhatsAppController::class)->sendWithWhatsApp($order->customer->phone, $whatsapp_number, $params['message'], false, $chat_message->id);

                CommunicationHistory::create([
                    'model_id'   => $order->id,
                    'model_type' => Order::class,
                    'type'       => 'online-confirmation',
                    'method'     => 'whatsapp',
                ]);
            }

            if ($results['state'] != 'processing' && $results['payment']['method'] != 'cashondelivery') {
                $params = [
                    'number'      => null,
                    'user_id'     => 6,
                    'approved'    => 1,
                    'status'      => 2,
                    'customer_id' => $order->customer->id,
                    'message'     => AutoReply::where('type', 'auto-reply')->where('keyword', 'order-payment-not-processed')->first()->reply,
                ];

                $chat_message = ChatMessage::create($params);

                $whatsapp_number = $order->customer->whatsapp_number != '' ? $order->customer->whatsapp_number : null;

                app(\App\Http\Controllers\WhatsAppController::class)->sendWithWhatsApp($order->customer->phone, $whatsapp_number, $params['message'], false, $chat_message->id);
            }
        }
    }

    public static function generateRandomString($length = 10)
    {
        $characters       = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
        $charactersLength = strlen($characters);
        $randomString     = '';
        for ($i = 0; $i < $length; $i++) {
            $randomString .= $characters[rand(0, $charactersLength - 1)];
        }

        return $randomString;
    }

    public static function validatePhone($phone)
    {
        $validator = Validator::make($phone, [
            'phone' => 'unique:customers,phone',
        ]);

        if ($validator->fails()) {
            $phone['phone'] = self::generateRandomString();

            self::validatePhone($phone);
        }

        return $phone['phone'];
    }

    public static function getSkuAndColor($original_sku)
    {
        $result = [];
        $colors = (new Colors())->all();

        $splitted_sku = explode('-', $original_sku);

        foreach ($colors as $color) {
            if (strpos($splitted_sku[0], $color)) {
                $result['color'] = $color;
                $sku             = str_replace($color, '', $splitted_sku[0]);

                $product = Product::where('sku', 'LIKE', "%$sku%")->first();

                if ($product) {
                    $result['sku'] = $product->sku;
                } else {
                    $result['sku'] = $sku;
                }

                return $result;
            }
        }

        $result['color'] = null;
        $sku             = $splitted_sku[0];

        $product = Product::where('sku', 'LIKE', "%$sku%")->first();

        if ($product) {
            $result['sku'] = $product->sku;
        } else {
            $result['sku'] = $sku;
        }

        return $result;
    }

    public function addStatus()
    {
        $orderStatusList = OrderStatus::all();

        return view('magento.status', compact('orderStatusList'));
    }

    public function saveStatus(Request $request)
    {
        $status                   = OrderStatus::find($request->id);
        $status->magento_status   = $request->status;
        $status->message_text_tpl = $request->message_text_tpl;
        $status->save();

        return response()->json(['success'], 200);
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/MailBoxController.php 
Content: <?php

namespace App\Http\Controllers;

use DB;
use Auth;
use App\Email;
use Carbon\Carbon;
use App\CronJobReport;
use App\Models\EmailBox;
use Illuminate\Http\Request;
use App\DigitalMarketingPlatform;

class MailBoxController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @param null|mixed $email
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request, $email = null)
    {
        $user      = Auth::user();
        $admin     = $user->isAdmin();
        $usernames = [];
        if (! $admin) {
            $emaildetails = \App\EmailAssign::select('id', 'email_address_id')->with('emailAddress')->where(['user_id' => $user->id])->get();
            if ($emaildetails) {
                foreach ($emaildetails as $_email) {
                    $usernames[] = $_email->emailAddress->username;
                }
            }
        }

        // Set default type as incoming
        $type = 'incoming';
        $seen = '0';
        $from = ''; //Purpose : Add var -  DEVTASK-18283

        $term             = $request->term ?? '';
        $sender           = $request->sender ?? '';
        $receiver         = $request->receiver ?? '';
        $status           = $request->status ?? '';
        $category         = $request->category ?? '';
        $mailbox          = $request->mail_box ?? '';
        $email_model_type = $request->email_model_type ?? '';
        $email_box_id     = $request->email_box_id ?? '';
        $email_type       = $request->email_type ?? '';

        $date        = $request->date ?? '';
        $type        = $request->type ?? $type;
        $seen        = $request->seen ?? $seen;
        $query       = (new Email())->newQuery();
        $trash_query = false;

        if (count($usernames) > 0) {
            $query = $query->where(function ($query) use ($usernames) {
                foreach ($usernames as $_uname) {
                    $query->orWhere('from', 'like', '%' . $_uname . '%');
                }
            });

            $query = $query->orWhere(function ($query) use ($usernames) {
                foreach ($usernames as $_uname) {
                    $query->orWhere('to', 'like', '%' . $_uname . '%');
                }
            });
        }

        //START - Purpose : Add Email - DEVTASK-18283
        if ($email != '' && $receiver == '') {
            $receiver = $email;
        }
        //END - DEVTASK-18283

        // If type is bin, check for status only
        if ($type == 'bin') {
            $trash_query = true;
            $query       = $query->where('status', 'bin');
        } elseif ($type == 'draft') {
            $query = $query->where('is_draft', 1)->where('status', '<>', 'pre-send');
        } elseif ($type == 'pre-send') {
            $query = $query->where('status', 'pre-send');
        } elseif (! empty($request->type)) {
            $query = $query->where(function ($query) use ($type) {
                $query->where('type', $type)->where('status', '<>', 'bin')->where('is_draft', '<>', 1)->where('status', '<>', 'pre-send');
            });
        }

        if ($email_model_type) {
            $model_type = explode(',', $email_model_type);
            $query      = $query->where(function ($query) use ($model_type) {
                $query->whereIn('model_type', $model_type);
            });
        }

        if ($term) {
            $query = $query->where(function ($query) use ($term) {
                $query->where('from', 'like', '%' . $term . '%')
                    ->orWhere('to', 'like', '%' . $term . '%')
                    ->orWhere('subject', 'like', '%' . $term . '%')
                    ->orWhere('message', 'like', '%' . $term . '%');
            });
        }

        if ($sender) {
            $sender = explode(',', $request->sender);
            $query  = $query->where(function ($query) use ($sender) {
                $query->whereIn('from', $sender);
            });
        }

        if ($receiver) {
            $receiver = explode(',', $request->receiver);
            $query    = $query->where(function ($query) use ($receiver) {
                $query->whereIn('to', $receiver);
            });
        }

        if ($category) {
            $category = explode(',', $request->category);
            $query    = $query->where(function ($query) use ($category) {
                $query->whereIn('email_category_id', $category);
            });
        }

        $query->where('email_category_id', '>', 0);

        if (! empty($email_type)) {
            if ($email_type == 'Read') {
                $query = $query->where('type', 'incoming');
                $query = $query->where('seen', 1);
            } elseif ($email_type == 'Unread') {
                $query = $query->where('type', 'incoming');
                $query = $query->where('seen', 0);
            } elseif ($email_type == 'Sent') {
                $query = $query->where('type', 'outgoing');
            } elseif ($email_type == 'Trash') {
                $query = $query->where('status', 'bin');
            } elseif ($email_type == 'Draft') {
                $query = $query->where('is_draft', 1)->where('status', '<>', 'pre-send');
            } elseif ($email_type == 'Queue') {
                $query = $query->where('status', 'pre-send');
            }
        }

        if ($email_box_id) {
            $emailBoxIds = explode(',', $email_box_id);

            $query = $query->where(function ($query) use ($emailBoxIds) {
                $query->whereIn('email_box_id', $emailBoxIds);
            });
        }

        if ($admin == 1) {
            $query  = $query->orderByDesc('created_at');
            $emails = $query->paginate(30)->appends(request()->except(['page']));
        } else {
            if (count($usernames) > 0) {
                $query = $query->where(function ($query) use ($usernames) {
                    foreach ($usernames as $_uname) {
                        $query->orWhere('from', 'like', '%' . $_uname . '%');
                    }
                });

                $query = $query->orWhere(function ($query) use ($usernames) {
                    foreach ($usernames as $_uname) {
                        $query->orWhere('to', 'like', '%' . $_uname . '%');
                    }
                });

                $query  = $query->orderByDesc('created_at');
                $emails = $query->paginate(30)->appends(request()->except(['page']));
            } else {
                $emails = (new Email())->newQuery();
                $emails = $emails->whereNull('id');
                $emails = $emails->paginate(30)->appends(request()->except(['page']));
            }
        }

        //Get Cron Email Histroy
        $reports = CronJobReport::where('cron_job_reports.signature', 'fetch:all_emails')
            ->join('cron_jobs', 'cron_job_reports.signature', 'cron_jobs.signature')
            ->whereDate('cron_job_reports.created_at', '>=', Carbon::now()->subDays(10))
            ->select(['cron_job_reports.*', 'cron_jobs.last_error'])->paginate(15);

        //Get All Status
        $email_status = DB::table('email_status')->get();

        //Get List of model types
        $emailModelTypes = Email::emailModelTypeList();

        //Get All Category
        $email_categories = DB::table('email_category')->get();

        if ($request->ajax()) {
            return response()->json([
                'tbody'  => view('emails.search_email', compact('emails', 'date', 'term', 'type', 'email_categories', 'email_status', 'emailModelTypes'))->with('i', ($request->input('page', 1) - 1) * 5)->render(),
                'links'  => (string) $emails->links(),
                'count'  => $emails->total(),
                'emails' => $emails,
            ], 200);
        }

        // suggested search for email forwarding
        $search_suggestions = $this->getAllEmails();

        $digita_platfirms = DigitalMarketingPlatform::all();

        $totalEmail = Email::whereNotNull('email_box_id')->count();

        $emailBoxes = EmailBox::select('id', 'box_name')->get();

        return view('mailbox.index', ['emails' => $emails, 'type' => 'email', 'search_suggestions' => $search_suggestions, 'email_status' => $email_status, 'email_categories' => $email_categories, 'emailModelTypes' => $emailModelTypes, 'reports' => $reports, 'digita_platfirms' => $digita_platfirms, 'receiver' => $receiver, 'from' => $from, 'totalEmail' => $totalEmail, 'emailBoxes' => $emailBoxes])->with('i', ($request->input('page', 1) - 1) * 5);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        //
    }

    /**
     * Display the specified resource.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        //
    }

    public function getAllEmails()
    {
        $available_models = ['supplier' => \App\Supplier::class, 'vendor' => \App\Vendor::class,
            'customer'                  => \App\Customer::class, 'users' => \App\User::class, ];
        $email_list = [];
        foreach ($available_models as $key => $value) {
            $email_list = array_merge($email_list, $value::whereNotNull('email')->pluck('email')->unique()->all());
        }

        return array_values(array_unique($email_list));
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/Marketing/EmailLeadsController.php 
Content: <?php

namespace App\Http\Controllers\Marketing;

use DB;
use Redirect;
use App\LeadList;
use App\EmailLead;
use App\LogRequest;
use App\Mailinglist;
use Illuminate\Http\Request;
use App\Imports\EmailLeadImport;
use App\Http\Controllers\Controller;

class EmailLeadsController extends Controller
{
    /**
     * @return array|\Illuminate\Contracts\View\Factory|\Illuminate\View\View
     */
    public function index(Request $request)
    {
        $query = EmailLead::query();

        if ($request->email) {
            $query = $query->where('email', 'LIKE', '%' . $request->email . '%');
        }
        if ($request->source) {
            $query = $query->where('source', 'LIKE', '%' . $request->source . '%');
        }

        $emailLeads  = $query->orderBy('id', 'asc')->paginate(25)->appends(request()->except(['page']));
        $mailingList = Mailinglist::all();

        return view('marketing.emailleads.index', compact('emailLeads', 'mailingList'));
    }

    /**
     * @return array|\Illuminate\Contracts\View\Factory|\Illuminate\View\View
     */
    public function assignList(Request $request)
    {
        $leadIdArray = explode(',', $request->lead_id);  //comma separated
        $listIdArray = $request->list_id;  //in_array

        $batchArray = [];
        $i          = 0;
        $startTime  = date('Y-m-d H:i:s', LARAVEL_START);

        if (empty($listIdArray)) {
            return Redirect::back()->with('flash_type', 'alert-danger')->with('message', 'Mailinglist cant empty, please try again');
        }

        foreach ($listIdArray as $key => $listId) {
            foreach ($leadIdArray as $key => $leadId) {
                $EmailLeadDetail = EmailLead::where('id', $listId)->first();
                $parameters      = [
                    'email' => $EmailLeadDetail->email,
                ];
                // Generated by curl-to-PHP: https://incarnate.github.io/curl-to-php/
                $ch  = curl_init();
                $url = 'https://api.sendinblue.com/v3/contacts/lists/' . $leadId . '/contacts/add';
                curl_setopt($ch, CURLOPT_URL, $url);
                curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
                curl_setopt($ch, CURLOPT_POST, 1);
                curl_setopt($ch, CURLOPT_POSTFIELDS, "\n{\n     \"emails\": [\n          \"" . $parameters . "\"\n     ]\n}\n");

                $headers   = [];
                $headers[] = 'Accept: application/json';
                $headers[] = 'Content-Type: application/json';
                $headers[] = 'Api-Key:' . env('SEND_IN_BLUE_API');
                curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

                $result   = curl_exec($ch);
                $httpcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
                if (curl_errno($ch)) {
                    return Redirect::back()->with('flash_type', 'alert-danger')->with('message', 'Contact already in list and/or does not exist' . curl_error($ch));
                }
                curl_close($ch);

                LogRequest::log($startTime, $url, 'GET', json_encode($parameters), json_decode($result), $httpcode, \App\Http\Controllers\EmailLeadsController::class, 'unsubscribe');
            }
        }

        foreach ($leadIdArray as $leadId) {
            foreach ($listIdArray as $listId) {
                $batchArray[$i]['erp_lead_id'] = $leadId;
                $batchArray[$i]['list_id']     = $listId;
            }
        }

        LeadList::insert($batchArray);

        return Redirect::back()->with('flash_type', 'alert-success')->with('message', 'List updated with erp lead');
    }

    public function import(Request $request)
    {
        (new EmailLeadImport)->queue($request->file('file'));

        return redirect('emailleads')->with('flash_type', 'alert-info')->with('message', 'Email Leads are importing in queue, existing records will be skipped.');
    }

    public function export()
    {
        $filename = 'email-lead-export-sample.xlsx';
        $path     = public_path('sample-email-lead/' . $filename);

        return response()->download($path, $filename, [
            'Content-Type'        => 'application/vnd.ms-excel',
            'Content-Disposition' => 'inline; filename="' . $filename . '"',
        ]);
    }

    public function show($id)
    {
        if ($id) {
            $leadData = DB::table('email_leads')
                ->join('lead_lists', 'lead_lists.erp_lead_id', '=', 'email_leads.id')
                ->join('mailinglists', 'mailinglists.id', '=', 'lead_lists.list_id')
                ->select('email_leads.*', 'lead_lists.id as lead_list_id', 'mailinglists.name', 'mailinglists.id as mailinglist_id')
                ->where('email_leads.id', $id)
                ->get();

            $emailLeadData = EmailLead::find($id);

            return view('marketing.emailleads.show', compact('leadData', 'emailLeadData'));
        }
    }

    public function unsubscribe($lead_id, $lead_list_id)
    {
        $data      = EmailLead::find($lead_id);
        $startTime = date('Y-m-d H:i:s', LARAVEL_START);
        $curl3     = curl_init();
        $url       = "https://api.sendinblue.com/v3/contacts/' . $data->email";
        curl_setopt_array($curl3, [
            CURLOPT_URL            => 'https://api.sendinblue.com/v3/contacts/' . $data->email,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING       => '',
            CURLOPT_MAXREDIRS      => 10,
            CURLOPT_TIMEOUT        => 0,
            CURLOPT_FOLLOWLOCATION => true,
            CURLOPT_HTTP_VERSION   => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST  => 'DELETE',
            CURLOPT_HTTPHEADER     => [
                'api-key: ' . config('env.SEND_IN_BLUE_API'),
                'Content-Type: application/json',
            ],
        ]);
        $respw      = curl_exec($curl3);
        $httpcode   = curl_getinfo($curl3, CURLINFO_HTTP_CODE);
        $parameters = [];
        curl_close($curl3);
        $respw = json_decode($respw);

        LogRequest::log($startTime, $url, 'DELETE', json_encode($parameters), $respw, $httpcode, \App\Http\Controllers\EmailLeadsController::class, 'unsubscribe');
        $res = LeadList::destroy($lead_list_id);
        if ($res) {
            return redirect('emailleads')->with('flash_type', 'alert-success')->with('message', 'List has been unsubscribed.');
        } else {
            return redirect('emailleads')->with('flash_type', 'alert-danger')->with('message', 'An error occurred, please try again');
        }
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/Marketing/MailinglistController.php 
Content: <?php

namespace App\Http\Controllers\Marketing;

use Validator;
use App\Service;
use App\Setting;
use App\Customer;
use Carbon\Carbon;
use App\EmailEvent;
use App\LogRequest;
use App\Mailinglist;
use App\StoreWebsite;
use App\MailingRemark;
use App\MailinglistTemplate;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;

class MailinglistController extends Controller
{
    /**
     * @return array|\Illuminate\Contracts\View\Factory|\Illuminate\View\View
     */
    public function index()
    {
        $services = Service::pluck('name', 'id');
        $list     = Mailinglist::paginate(15);
        $websites = StoreWebsite::select('id', 'title')->orderBy('id', 'desc')->get();

        return view('marketing.mailinglist.index', compact('services', 'list', 'websites'));
    }

    /**
     * @param Request $request
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function textcurl()
    {
        $startTime = date('Y-m-d H:i:s', LARAVEL_START);
        $curl      = curl_init();
        $name      = 'newemail';
        $email     = 'technodeviser05@gmail.com';
        $ch        = curl_init();
        $url       = 'http://165.232.42.174/api/v1/lists';
        $req       = 'api_token=' . getenv('ACELLE_MAIL_API_TOKEN') . '&name=List+1&from_email=admin@abccorp.org&from_name=ABC+Corp.&default_subject=Welcome+to+ABC+Corp.&contact[company]=ABC+Corp.&contact[state]=Armagh&contact[address_1]=14+Tottenham+Court+Road+London+England&contact[address_2]=44-46+Morningside+Road+Edinburgh+Scotland&contact[city]=Noname&contact[zip]=80000&contact[phone]=123+456+889&contact[country_id]=1&contact[email]=info@abccorp.org&contact[url]=https://www.abccorp.org&subscribe_confirmation=1&send_welcome_email=1&unsubscribe_notification=1';
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch,
            CURLOPT_POSTFIELDS, $req);

        $headers   = [];
        $headers[] = 'Accept: application/json';
        $headers[] = 'Content-Type: application/x-www-form-urlencoded';
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

        $result = curl_exec($ch);
        dd(json_decode($result));
        if (curl_errno($ch)) {
            echo 'Error:' . curl_error($ch);
        }
        $httpcode = curl_getinfo($curl, CURLINFO_HTTP_CODE);
        curl_close($ch);
        $parameters = [];
        LogRequest::log($startTime, $url, 'POST', json_encode($req), json_decode($result), $httpcode, \App\Http\Controllers\MailinglistController::class, 'MultiRunErpEvent');
    }

    public function create(Request $request)
    {
        $rules = [
            'service_id' => 'required',
            'website_id' => 'required',
            'email'      => 'required',
            'name'       => 'required',
            'subject'    => 'required',
        ];

        $validation = Validator::make($request->all(), $rules);
        if ($validation->fails()) {
            return ['status' => false, 'messages' => $validation->getMessageBag()];
        }
        $website_id    = $request->website_id;
        $store_website = StoreWebsite::Where('id', $website_id)->first();
        //Find Service
        $service = Service::find($request->service_id);

        if ($service) {
            if (strpos(strtolower($service->name), strtolower('SendInBlue')) !== false) {
                $api_key = ($store_website->send_in_blue_api != '') ? $store_website->send_in_blue_api : config('env.SEND_IN_BLUE_API');
                $curl    = curl_init();
                $url     = 'https://api.sendinblue.com/v3/contacts/lists';
                $data    = [
                    'folderId' => 1,
                    'name'     => $request->name,
                ];
                curl_setopt_array($curl, [
                    CURLOPT_URL            => $url,
                    CURLOPT_RETURNTRANSFER => true,
                    CURLOPT_ENCODING       => '',
                    CURLOPT_MAXREDIRS      => 10,
                    CURLOPT_TIMEOUT        => 0,
                    CURLOPT_FOLLOWLOCATION => true,
                    CURLOPT_HTTP_VERSION   => CURL_HTTP_VERSION_1_1,
                    CURLOPT_CUSTOMREQUEST  => 'POST',
                    CURLOPT_POSTFIELDS     => json_encode($data),
                    CURLOPT_HTTPHEADER     => [
                        'api-key: ' . $api_key,
                        'Content-Type: application/json',
                    ],
                ]);

                $response = curl_exec($curl);
                $httpcode = curl_getinfo($curl, CURLINFO_HTTP_CODE);

                curl_close($curl);
                \Log::info($response);
                $res = json_decode($response);

                $startTime = date('Y-m-d H:i:s', LARAVEL_START);
                LogRequest::log($startTime, $url, 'POST', json_encode($data), $res, $httpcode, \App\Http\Controllers\MailinglistController::class, 'create');
                if (! isset($res->id) && isset($res->code) && isset($res->message)) {
                    $errror_message = $res->code . ':' . $res->message;

                    return response()->json(['status' => false, 'messages' => [$errror_message]]);
                }
                Mailinglist::create([
                    'id'                   => $res->id,
                    'name'                 => $request->name,
                    'website_id'           => $website_id,
                    'service_id'           => $request->service_id,
                    'remote_id'            => $res->id,
                    'send_in_blue_api'     => $store_website->send_in_blue_api,
                    'send_in_blue_account' => $store_website->send_in_blue_account,
                ]);
            }

            if (strpos($service->name, 'AcelleMail') !== false) {
                $curl = curl_init();

                curl_setopt_array($curl, [
                    CURLOPT_URL            => 'https://acelle.theluxuryunlimited.com/api/v1/lists?api_token=' . config('env.ACELLE_MAIL_API_TOKEN'),
                    CURLOPT_RETURNTRANSFER => true,
                    CURLOPT_ENCODING       => '',
                    CURLOPT_MAXREDIRS      => 10,
                    CURLOPT_TIMEOUT        => 0,
                    CURLOPT_FOLLOWLOCATION => true,
                    CURLOPT_HTTP_VERSION   => CURL_HTTP_VERSION_1_1,
                    CURLOPT_CUSTOMREQUEST  => 'POST',
                    CURLOPT_POSTFIELDS     => ['contact[company]' => '.', 'contact[state]' => 'afdf', 'name' => $request->name, 'default_subject' => $request->subject, 'from_email' => $request->email, 'from_name' => 'dsfsd', 'contact[address_1]' => 'af', 'contact[country_id]' => '219', 'contact[city]' => 'sdf', 'contact[zip]' => 'd', 'contact[phone]' => 'd', 'contact[email]' => $request->email],
                ]);

                $response = curl_exec($curl);
                $httpcode = curl_getinfo($curl, CURLINFO_HTTP_CODE);

                curl_close($curl);

                $res = json_decode($response);
                LogRequest::log($startTime, $url, 'POST', json_encode(['contact[company]' => '.', 'contact[state]' => 'afdf', 'name' => $request->name, 'default_subject' => $request->subject, 'from_email' => $request->email, 'from_name' => 'dsfsd', 'contact[address_1]' => 'af', 'contact[country_id]' => '219', 'contact[city]' => 'sdf', 'contact[zip]' => 'd', 'contact[phone]' => 'd', 'contact[email]' => $request->email]), $res, $httpcode, \App\Http\Controllers\MailinglistController::class, 'create');
                \Log::info($res);
                if (! isset($res->status) && ! isset($res->list_uid)) {
                    return response()->json(['status' => false, 'messages' => ['Not getting any response. Please check AcelleMail API']]);
                }
                if ($res->status == 1) {
                    //getting last id
                    $list = Mailinglist::orderBy('id', 'desc')->first();
                    if ($list) {
                        $id = ($list->id + 1);
                    } else {
                        $id = 1;
                    }
                    Mailinglist::create([
                        'id'         => $id,
                        'name'       => $request->name,
                        'website_id' => $website_id,
                        'email'      => $request->email,
                        'service_id' => $request->service_id,
                        'remote_id'  => $res->list_uid,
                    ]);

                    return response()->json(true);
                }
            }
        } else {
            return response()->json(false);
        }

        return response()->json(true);
    }

    /**
     * @param mixed $id
     *
     * @return array|\Illuminate\Contracts\View\Factory|\Illuminate\View\View
     */
    public function show($id, Request $request)
    {
        $customers = Customer::whereNotNull('email');
        if (! is_null($request->term)) {
            $customers = $customers->where('email', 'LIKE', "%{$request->term}%");
        }
        //Total Result
        if (request('total') != null) {
            //search with date
            if (request('total') == 1 && request('customrange') != null) {
                $range = explode(' - ', request('customrange'));
                if ($range[0] == end($range)) {
                    $customers->whereHas('customerMarketingPlatformActive', function ($qu) use ($range) {
                        $qu->whereDate('created_at', end($range))->where('active', 1);
                    })->where('do_not_disturb', 0);
                } else {
                    $customers->whereHas('customerMarketingPlatformActive', function ($qu) use ($range) {
                        $qu->whereBetween('created_at', [$range[0], end($range)])->where('active', 1);
                    })->where('do_not_disturb', 0);
                }
            } elseif (request('total') == 1) {
                $customers->whereHas('customerMarketingPlatformActive', function ($qu) {
                    $qu->where('active', 1);
                })->where('do_not_disturb', 0);
            }

            if (request('total') == 2 && request('customrange') != null) {
                $range = explode(' - ', request('customrange'));
                if ($range[0] == end($range)) {
                    $customers->doesntHave('customerMarketingPlatformActive')->whereDate('created_at', end($range))->where('do_not_disturb', 0);
                } else {
                    $customers->doesntHave('customerMarketingPlatformActive')->whereBetween('created_at', [$range[0], end($range)])->where('do_not_disturb', 0);
                }
            }

            if (request('total') == 2) {
                $customers->doesntHave('customerMarketingPlatformActive')->where('do_not_disturb', 0);
            }

            if (request('total') == 3 && request('customrange') != null) {
                $range = explode(' - ', request('customrange'));
                if ($range[0] == end($range)) {
                    $customers->where('do_not_disturb', 1)->whereDate('updated_at', end($range));
                } else {
                    $customers->where('do_not_disturb', 1)->whereBetween('updated_at', [$range[0], end($range)]);
                }
            } elseif (request('total') == 3) {
                $customers->where('do_not_disturb', 1);
            }

            if (request('total') == 4 && request('customrange') != null) {
                $range = explode(' - ', request('customrange'));
                if ($range[0] == end($range)) {
                    $customers->whereHas('leads', function ($qu) use ($range) {
                        $qu->whereDate('created_at', end($range));
                    });
                } else {
                    $customers->whereHas('leads', function ($qu) use ($range) {
                        $qu->whereBetween('created_at', [$range[0], end($range)]);
                    });
                }
            } elseif (request('total') == 4) {
                $customers->whereHas('leads');
            }

            if (request('total') == 5 && request('customrange') != null) {
                $range = explode(' - ', request('customrange'));
                if ($range[0] == end($range)) {
                    $customers->whereHas('orders', function ($qu) use ($range) {
                        $qu->whereDate('created_at', end($range));
                    });
                } else {
                    $customers->whereHas('orders', function ($qu) use ($range) {
                        $qu->whereBetween('created_at', [$range[0], end($range)]);
                    });
                }
            } elseif (request('total') == 5) {
                $customers->whereHas('orders');
            }

            if (request('total') == 6 && request('customrange') != null) {
                $range = explode(' - ', request('customrange'));
                if ($range[0] == end($range)) {
                    $customers->whereHas('customerMarketingPlatformActive', function ($qu) {
                        $qu->where('active', 1);
                    })->where('broadcast_number', null)->whereDate('created_at', end($range));
                } else {
                    $customers->whereHas('customerMarketingPlatformActive', function ($qu) {
                        $qu->where('active', 1);
                    })->where('broadcast_number', null)->whereBetween('created_at', [$range[0], end($range)]);
                }
            } elseif (request('total') == 6) {
                $customers->whereHas('customerMarketingPlatformActive', function ($qu) {
                    $qu->where('active', 1);
                })->where('broadcast_number', null)->where('do_not_disturb', 0);
            }

            if (request('total') == 7 && request('customrange') != null) {
                $range = explode(' - ', request('customrange'));
                if ($range[0] == end($range)) {
                    $customers->whereHas('notDelieveredImQueueMessage', function ($qu) use ($range) {
                        $qu->whereDate('send_after', end($range));
                    });
                } else {
                    $customers->whereHas('notDelieveredImQueueMessage', function ($qu) use ($range) {
                        $qu->whereBetween('send_after', [$range[0], end($range)]);
                    });
                }
            } elseif (request('total') == 7) {
                $customers->whereHas('notDelieveredImQueueMessage');
            }
        }

        if (! empty($request->store_id)) {
            $customers = $customers->where('store_website_id', $request->store_id);
        }

        $customers = $customers->select('email', 'id', 'name', 'do_not_disturb', 'source', 'created_at')->paginate(20);
        $list      = Mailinglist::where('remote_id', $id)->with('listCustomers')->first();

        $contacts = ($list) ? $list->listCustomers->pluck('id')->toArray() : [];

        $countDNDCustomers = Customer::where('do_not_disturb', '1')->count();

        return view('marketing.mailinglist.show', compact('customers', 'id', 'contacts', 'list', 'countDNDCustomers'));
    }

    /**
     * @param mixed $id
     *
     * @return array|\Illuminate\Contracts\View\Factory|\Illuminate\View\View
     */
    public function edit($id, Request $request)
    {
        $services = Service::all();
        $websites = StoreWebsite::select('id', 'title')->orderBy('id', 'desc')->get();
        $list     = Mailinglist::where('remote_id', $id)->first();

        return view('marketing.mailinglist.edit', compact('list', 'services', 'websites'));
    }

    /**
     * @param mixed $id
     *
     * @return array|\Illuminate\Contracts\View\Factory|\Illuminate\View\View
     */
    public function update($id, Request $request)
    {
        $mailing_list             = Mailinglist::find($id);
        $mailing_list->website_id = $request->website_id;
        $mailing_list->service_id = $request->service_id;
        $mailing_list->name       = $request->name;
        $mailing_list->email      = $request->email;
        $mailing_list->save();

        return response()->json(true);
    }

    /**
     * @param mixed $id
     * @param mixed $email
     *
     * @return \Illuminate\Http\RedirectResponse
     */
    public function addToList($id, $email)
    {
        //getting mailing list
        $list      = Mailinglist::where('remote_id', $id)->first();
        $startTime = date('Y-m-d H:i:s', LARAVEL_START);

        if ($list->service && isset($list->service->name)) {
            if ($list->service->name == 'AcelleMail') {
                $url     = "http://165.232.42.174/api/v1/subscribers/email/'.$email.'?api_token=" . config('env.ACELLE_MAIL_API_TOKEN');
                $headers = ['Content-Type: application/json'];
                $curl    = curl_init();
                curl_setopt($curl, CURLOPT_URL, $url);
                curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
                curl_setopt($curl, CURLOPT_CUSTOMREQUEST, 'GET');
                curl_setopt($curl, CURLOPT_HTTPHEADER, $headers);
                $response   = curl_exec($curl);
                $httpcode   = curl_getinfo($curl, CURLINFO_HTTP_CODE);
                $parameters = [];
                curl_close($curl);
                $res = json_decode($response);

                LogRequest::log($startTime, $url, 'GET', json_encode([]), $res, $httpcode, \App\Http\Controllers\MailinglistController::class, 'addToList');
                if (isset($res->subscribers)) {
                    foreach ($res->subscribers as $subscriber) {
                        if ($subscriber->list_uid == $id) {
                            return response()->json(['status' => 'success']);
                        }
                    }
                } else {
                    return response()->json(['status' => 'error']);
                }

                //Assign Customer to list

                $curl = curl_init();
                $url  = 'http://165.232.42.174/api/v1/lists/' . $id . '/subscribers/store?api_token=' . config('env.ACELLE_MAIL_API_TOKEN');

                curl_setopt_array($curl, [
                    CURLOPT_URL            => $url,
                    CURLOPT_RETURNTRANSFER => true,
                    CURLOPT_ENCODING       => '',
                    CURLOPT_MAXREDIRS      => 10,
                    CURLOPT_TIMEOUT        => 0,
                    CURLOPT_FOLLOWLOCATION => true,
                    CURLOPT_HTTP_VERSION   => CURL_HTTP_VERSION_1_1,
                    CURLOPT_CUSTOMREQUEST  => 'POST',
                    CURLOPT_POSTFIELDS     => ['EMAIL' => $email, 'name' => ' '],
                ]);

                $response   = curl_exec($curl);
                $httpcode   = curl_getinfo($curl, CURLINFO_HTTP_CODE); // response decode
                $response   = json_decode($response);
                $parameters = [];
                LogRequest::log($startTime, $url, 'GET', json_encode($parameters), $res, $httpcode, \App\Http\Controllers\MailinglistController::class, 'addToList');

                //subscribe to email
                $url     = 'http://165.232.42.174/api/v1/lists/' . $id . '/subscribers/' . $response->subscriber_uid . '/subscribe?api_token=' . config('env.ACELLE_MAIL_API_TOKEN');
                $headers = ['Content-Type: application/json'];
                $curl    = curl_init();
                curl_setopt($curl, CURLOPT_URL, $url);
                curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
                curl_setopt($curl, CURLOPT_CUSTOMREQUEST, 'PATCH');
                curl_setopt($curl, CURLOPT_HTTPHEADER, $headers);
                $response = curl_exec($curl);

                $httpcode   = curl_getinfo($curl, CURLINFO_HTTP_CODE);
                $parameters = [];
                LogRequest::log($startTime, $url, 'PATCH', json_encode($parameters), json_decode($response), $httpcode, \App\Http\Controllers\MailinglistController::class, 'addToList');
                $customer = Customer::where('email', $email)->first();
                \DB::table('list_contacts')->where('customer_id', $customer->id)->delete();
                $list->listCustomers()->attach($customer->id);

                return response()->json(['status' => 'success']);
            }
        }

        $website = \App\StoreWebsite::where('id', $list->website_id)->first();
        $api_key = (isset($website->send_in_blue_api) && $website->send_in_blue_api != '') ? $website->send_in_blue_api : config('env.SEND_IN_BLUE_API');

        $curl = curl_init();
        $data = [
            'email'   => $email,
            'listIds' => [intval($id)],
        ];
        $url = 'https://api.sendinblue.com/v3/contacts}';
        curl_setopt_array($curl, [
            CURLOPT_URL            => $url,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING       => '',
            CURLOPT_MAXREDIRS      => 10,
            CURLOPT_TIMEOUT        => 0,
            CURLOPT_FOLLOWLOCATION => true,
            CURLOPT_HTTP_VERSION   => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST  => 'POST',
            CURLOPT_POSTFIELDS     => json_encode($data),
            CURLOPT_HTTPHEADER     => [
                'api-key: ' . $api_key,
                'Content-Type: application/json',
            ],
        ]);
        $response = curl_exec($curl);
        $httpcode = curl_getinfo($curl, CURLINFO_HTTP_CODE);
        curl_close($curl);
        $res = json_decode($response);
        LogRequest::log($startTime, $url, 'POST', json_encode($data), $res, $httpcode, \App\Http\Controllers\MailinglistController::class, 'addToList');
        \Log::info($response);
        if (isset($res->message)) {
            if ($res->message == 'Contact already exist') {
                $curl3 = curl_init();
                $url   = 'https://api.sendinblue.com/v3/contacts/' . $email;
                curl_setopt_array($curl3, [
                    CURLOPT_URL            => $url,
                    CURLOPT_RETURNTRANSFER => true,
                    CURLOPT_ENCODING       => '',
                    CURLOPT_MAXREDIRS      => 10,
                    CURLOPT_TIMEOUT        => 0,
                    CURLOPT_FOLLOWLOCATION => true,
                    CURLOPT_HTTP_VERSION   => CURL_HTTP_VERSION_1_1,
                    CURLOPT_CUSTOMREQUEST  => 'DELETE',
                    CURLOPT_HTTPHEADER     => [
                        'api-key: ' . $api_key,
                        'Content-Type: application/json',
                    ],
                ]);
                $respw    = curl_exec($curl3);
                $httpcode = curl_getinfo($curl, CURLINFO_HTTP_CODE);
                curl_close($curl3);

                LogRequest::log($startTime, $url, 'GET', json_encode($data), json_deocde($res), $httpcode, \App\Http\Controllers\MailinglistController::class, 'addToList');

                $curl2 = curl_init();
                $url   = 'https://api.sendinblue.com/v3/contacts';
                curl_setopt_array($curl2, [
                    CURLOPT_URL            => $url,
                    CURLOPT_RETURNTRANSFER => true,
                    CURLOPT_ENCODING       => '',
                    CURLOPT_MAXREDIRS      => 10,
                    CURLOPT_TIMEOUT        => 0,
                    CURLOPT_FOLLOWLOCATION => true,
                    CURLOPT_HTTP_VERSION   => CURL_HTTP_VERSION_1_1,
                    CURLOPT_CUSTOMREQUEST  => 'POST',
                    CURLOPT_POSTFIELDS     => json_encode($data),
                    CURLOPT_HTTPHEADER     => [
                        'api-key: ' . $api_key,
                        'Content-Type: application/json',
                    ],
                ]);
                $resp     = curl_exec($curl2);
                $httpcode = curl_getinfo($curl, CURLINFO_HTTP_CODE);
                curl_close($curl2);
                $ress = json_decode($resp);
                LogRequest::log($startTime, $url, 'POST', json_encode($data), $ress, $httpcode, \App\Http\Controllers\MailinglistController::class, 'addToList');
                if (isset($ress->message)) {
                    return response()->json(['status' => 'error']);
                }
                $customer    = Customer::where('email', $email)->first();
                $mailinglist = Mailinglist::find($id);
                \DB::table('list_contacts')->where('customer_id', $customer->id)->delete();
                $mailinglist->listCustomers()->attach($customer->id);

                return response()->json(['status' => 'success']);
            }

            return response()->json(['status' => 'error']);
        } else {
            $customer    = Customer::where('email', $email)->first();
            $mailinglist = Mailinglist::find($id);
            $mailinglist->listCustomers()->attach($customer->id);

            return response()->json(['status' => 'success']);
        }
    }

    /**
     * @param mixed $id
     * @param mixed $email
     *
     * @return \Illuminate\Http\RedirectResponse
     */
    public function delete($id, $email)
    {
        $mailinglist = Mailinglist::find($id);
        $website     = \App\StoreWebsite::where('id', $mailinglist->website_id)->first();
        $api_key     = (isset($website->send_in_blue_api) && $website->send_in_blue_api != '') ? $website->send_in_blue_api : config('env.SEND_IN_BLUE_API');
        $startTime   = date('Y-m-d H:i:s', LARAVEL_START);
        $url         = "https://api.sendinblue.com/v3/contacts/' . $email";

        $curl = curl_init();
        curl_setopt_array($curl, [
            CURLOPT_URL            => $url,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING       => '',
            CURLOPT_MAXREDIRS      => 10,
            CURLOPT_TIMEOUT        => 0,
            CURLOPT_FOLLOWLOCATION => true,
            CURLOPT_HTTP_VERSION   => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST  => 'DELETE',
            CURLOPT_HTTPHEADER     => [
                'api-key: ' . $api_key,
                'Content-Type: application/json',
            ],
        ]);

        $response = curl_exec($curl);
        $httpcode = curl_getinfo($curl, CURLINFO_HTTP_CODE);

        curl_close($curl);
        $res        = json_decode($response);
        $parameters = [];

        LogRequest::log($startTime, $url, 'DELETE', json_encode($parameters), $res, $httpcode, \App\Http\Controllers\MailinglistController::class, 'delete');

        if (isset($res->message)) {
            return redirect()->back()->withErrors($res->message);
        } else {
            $customer = Customer::where('email', $email)->first();

            $mailinglist->listCustomers()->detach($customer->id);

            return response()->json(['status' => 'success']);
        }
    }

    /**
     * @param mixed $id
     *
     * @return \Illuminate\Http\RedirectResponse
     */
    public function deleteList($id)
    {
        //getting mailing list
        $list      = Mailinglist::where('remote_id', $id)->first();
        $website   = \App\StoreWebsite::where('id', $list->website_id)->first();
        $api_key   = (isset($website->send_in_blue_api) && $website->send_in_blue_api != '') ? $website->send_in_blue_api : config('env.SEND_IN_BLUE_API');
        $startTime = date('Y-m-d H:i:s', LARAVEL_START);

        if ($list->service && isset($list->service->name)) {
            if ($list->service->name == 'AcelleMail') {
                $curl = curl_init();
                $url  = "http://165.232.42.174/api/v1/lists/' . $list->remote_id . '/delete?api_token=' . config('env.ACELLE_MAIL_API_TOKEN')";

                curl_setopt_array($curl, [
                    CURLOPT_URL            => $url,
                    CURLOPT_RETURNTRANSFER => true,
                    CURLOPT_ENCODING       => '',
                    CURLOPT_MAXREDIRS      => 10,
                    CURLOPT_TIMEOUT        => 0,
                    CURLOPT_FOLLOWLOCATION => true,
                    CURLOPT_HTTP_VERSION   => CURL_HTTP_VERSION_1_1,
                    CURLOPT_CUSTOMREQUEST  => 'POST',
                    CURLOPT_POSTFIELDS     => [],
                ]);

                $response = curl_exec($curl);
                $httpcode = curl_getinfo($curl, CURLINFO_HTTP_CODE);

                curl_close($curl);
                $res = json_decode($response);

                LogRequest::log($startTime, $url, 'POST', json_encode([]), $res, $httpcode, \App\Http\Controllers\MailinglistController::class, 'deleteList');

                if (! isset($res->status)) {
                    return redirect()->back()->with('error', 'Not getting any response. Please check AcelleMail API');
                }
            } else {
                $curl = curl_init();
                $url  = "https://api.sendinblue.com/v3/contacts/lists/' . $id";
                curl_setopt_array($curl, [
                    CURLOPT_URL            => $url,
                    CURLOPT_RETURNTRANSFER => true,
                    CURLOPT_ENCODING       => '',
                    CURLOPT_MAXREDIRS      => 10,
                    CURLOPT_TIMEOUT        => 0,
                    CURLOPT_FOLLOWLOCATION => true,
                    CURLOPT_HTTP_VERSION   => CURL_HTTP_VERSION_1_1,
                    CURLOPT_CUSTOMREQUEST  => 'DELETE',
                    CURLOPT_HTTPHEADER     => [
                        'api-key: ' . $api_key,
                        'Content-Type: application/json',
                    ],
                ]);

                $response = curl_exec($curl);
                $httpcode = curl_getinfo($curl, CURLINFO_HTTP_CODE);

                curl_close($curl);
                $res = json_decode($response);

                LogRequest::log($startTime, $url, 'DELETE', json_encode([]), $res, $httpcode, \App\Http\Controllers\MailinglistController::class, 'deleteList');

                if (isset($res->message) && isset($res->code)) {
                    $errror_message = $res->code . ': ' . $res->message;

                    return redirect()->back()->with('error', $errror_message);
                }
            }

            Mailinglist::where('remote_id', $id)->delete();

            return redirect()->back()->with('success', 'Removed successfully.');
        }
    }

    public function addRemark(Request $request)
    {
        $remark = $request->input('remark');
        $id     = $request->input('id');
        MailingRemark::create([
            'customer_id' => $id,
            'text'        => $remark,
            'user_name'   => \Auth::user()->name,
            'user_id'     => \Auth::user()->id,
        ]);

        return response()->json(['remark' => $remark], 200);
    }

    public function getBroadCastRemark(Request $request)
    {
        $id = $request->input('id');

        $remark = MailingRemark::where('customer_id', $id)->whereNotNull('text')->get();

        return response()->json($remark, 200);
    }

    public function addManual(Request $request)
    {
        $email       = $request->email;
        $id          = $request->id;
        $mailinglist = Mailinglist::find($id);
        $website     = \App\StoreWebsite::where('id', $mailinglist->website_id)->first();
        $api_key     = (isset($website->send_in_blue_api) && $website->send_in_blue_api != '') ? $website->send_in_blue_api : config('env.SEND_IN_BLUE_API');
        $startTime   = date('Y-m-d H:i:s', LARAVEL_START);
        $curl        = curl_init();
        $data        = [
            'email'   => $email,
            'listIds' => [intval($id)],
        ];
        $url = 'https://api.sendinblue.com/v3/contacts';
        curl_setopt_array($curl, [
            CURLOPT_URL            => $url,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING       => '',
            CURLOPT_MAXREDIRS      => 10,
            CURLOPT_TIMEOUT        => 0,
            CURLOPT_FOLLOWLOCATION => true,
            CURLOPT_HTTP_VERSION   => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST  => 'POST',
            CURLOPT_POSTFIELDS     => json_encode($data),
            CURLOPT_HTTPHEADER     => [
                'api-key: ' . $api_key,
                'Content-Type: application/json',
            ],
        ]);
        $response = curl_exec($curl);
        $httpcode = curl_getinfo($curl, CURLINFO_HTTP_CODE);
        curl_close($curl);
        $res = json_decode($response);
        LogRequest::log($startTime, $url, 'POST', json_encode($data), $res, $httpcode, \App\Http\Controllers\MailinglistController::class, 'addManual');

        if (isset($res->message)) {
            if ($res->message == 'Contact already exist') {
                $curl3 = curl_init();
                $url   = "https://api.sendinblue.com/v3/contacts/' . $email";
                curl_setopt_array($curl3, [
                    CURLOPT_URL            => $url,
                    CURLOPT_RETURNTRANSFER => true,
                    CURLOPT_ENCODING       => '',
                    CURLOPT_MAXREDIRS      => 10,
                    CURLOPT_TIMEOUT        => 0,
                    CURLOPT_FOLLOWLOCATION => true,
                    CURLOPT_HTTP_VERSION   => CURL_HTTP_VERSION_1_1,
                    CURLOPT_CUSTOMREQUEST  => 'DELETE',
                    CURLOPT_HTTPHEADER     => [
                        'api-key: ' . $api_key,
                        'Content-Type: application/json',
                    ],
                ]);
                $respw    = curl_exec($curl3);
                $httpcode = curl_getinfo($curl, CURLINFO_HTTP_CODE);
                curl_close($curl3);
                $parameters = [];
                $respw      = json_decode($respw);

                LogRequest::log($startTime, $url, 'DELETE', json_encode($parameters), $respw, $httpcode, \App\Http\Controllers\MailinglistController::class, 'addManual');

                $curl2 = curl_init();
                $url   = 'https://api.sendinblue.com/v3/contacts';
                curl_setopt_array($curl2, [
                    CURLOPT_URL            => $url,
                    CURLOPT_RETURNTRANSFER => true,
                    CURLOPT_ENCODING       => '',
                    CURLOPT_MAXREDIRS      => 10,
                    CURLOPT_TIMEOUT        => 0,
                    CURLOPT_FOLLOWLOCATION => true,
                    CURLOPT_HTTP_VERSION   => CURL_HTTP_VERSION_1_1,
                    CURLOPT_CUSTOMREQUEST  => 'POST',
                    CURLOPT_POSTFIELDS     => json_encode($data),
                    CURLOPT_HTTPHEADER     => [
                        'api-key: ' . $api_key,
                        'Content-Type: application/json',
                    ],
                ]);
                $resp     = curl_exec($curl2);
                $httpcode = curl_getinfo($curl, CURLINFO_HTTP_CODE);
                curl_close($curl2);
                $ress = json_decode($resp); //response deocded

                LogRequest::log($startTime, $url, 'POST', json_encode($data), $ress, $httpcode, \App\Http\Controllers\MailinglistController::class, 'addManual');
                if (isset($ress->message)) {
                    return response()->json(['status' => 'error']);
                }
                $customer = Customer::where('email', $email)->first();
                \DB::table('list_contacts')->where('customer_id', $customer->id)->delete();
                $mailinglist->listCustomers()->attach($customer->id);

                return response()->json(['status' => 'success']);
            }

            return response()->json(['status' => 'error']);
        } else {
            $customer    = Customer::where('email', $email)->first();
            $mailinglist = Mailinglist::find($id);
            $mailinglist->listCustomers()->attach($customer->id);

            return response()->json(['status' => 'success']);
        }
    }

    /**
     * @param mixed $id
     *
     * @return array|\Illuminate\Contracts\View\Factory|\Illuminate\View\View
     */
    public function updateCustomerSource($id, Request $request)
    {
        $customer         = Customer::find($id);
        $customer->source = $request->source;
        $customer->save();

        return response()->json(true);
    }

    public function notifyUrl(Request $request)
    {
        $update = [];
        $id     = str_replace('["', '', $request->tag);
        $id     = str_replace('"]', '', $id);
        if ($request->event == 'sent') {
            $update = ['sent' => 1];
        } elseif ($request->event == 'delivered') {
            $update = ['delivered' => 1];
        } elseif ($request->event == 'opened') {
            $update = ['opened' => 1];
        } elseif ($request->event == 'blocked' || $request->event == 'unsubscribed' || $request->event == 'spam') {
            $update = ['spam' => 1, 'spam_date' => Carbon::now()->format('Y-m-d H:i:s')];
        }
        if (count($update) > 0) {
            EmailEvent::where(['id' => $id])->update($update);
        }
    }

    public static function sendAutoEmails()
    {
        $mailing_templates = MailinglistTemplate::where('auto_send', 1)->where('duration', '>', 0)->get();
        foreach ($mailing_templates as $mailing_item) {
            $now = Carbon::now();
            if ($mailing_item) {
                if ($mailing_item->duration_in == 'hours') {
                    $customer_created_at = $now->subHours($mailing_item['duration'])->format('Y-m-d H:i:s');
                } else {
                    $customer_created_at = $now->subDays($mailing_item['duration'])->format('Y-m-d H:i:s');
                }
                $spamedListContactIds = EmailEvent::where('spam', 1)->pluck('id')->toArray();

                $mailingLists = MailingList::leftJoin('list_contacts', 'list_contacts.list_id', '=', 'mailinglists.id')
                    ->leftJoin('customers', 'customers.id', '=', 'list_contacts.customer_id')
                    ->where('mailinglists.created_at', '<', Carbon::parse($customer_created_at)->addMinutes(60))
                    ->where('mailinglists.created_at', '>=', $customer_created_at)
                    ->whereNotIn('list_contacts.id', $spamedListContactIds)->whereNotNull('list_contacts.id')
                    ->select('mailinglists.id as mailingListId', 'customers.id as customerId', 'customers.email', 'customers.name', 'list_contacts.id as list_contact_id')->get();
                foreach ($mailingLists as $mailingList) {
                    $service = Service::find($mailingList->service_id)
                    (new Mailinglist)->sendAutoEmails($mailingList, $mailing_item, $service);
                }
            }
        }
    }

    public function getlog(Request $request)
    {
        $paginate = (Setting::get('pagination') * 10);
        $logs     = \App\Loggers\MailinglistIinfluencersDetailLogs::orderby('id', 'desc')->paginate($paginate);

        if ($request->ajax()) {
            return response()->json([
                'tbody' => view('marketing.mailinglist.partials.logdata', compact('logs'))->render(),
                'links' => (string) $logs->render(),
                'count' => $logs->total(),
            ], 200);
        }

        return view('marketing.mailinglist.log', compact('logs'));
    }

    public function flowlog(Request $request)
    {
        $paginate = (Setting::get('pagination') * 10);
        $logs     = \App\Loggers\MailinglistIinfluencersLogs::orderby('id', 'desc')->paginate($paginate);

        return view('marketing.mailinglist.flowlog', compact('logs'));
    }

    public function customerlog(Request $request)
    {
        $paginate  = (Setting::get('pagination') * 10);
        $customers = \App\Customer::pluck('email', 'id')->toArray();
        $mailists  = \App\Mailinglist::pluck('name', 'id')->toArray();
        $logs      = \App\MaillistCustomerHistory::orderby('id', 'desc')->paginate($paginate);

        return view('marketing.mailinglist.customerlog', compact('logs', 'customers', 'mailists'));
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/MasterDevTaskController.php 
Content: <?php

namespace App\Http\Controllers;

use App\Scraper;
use App\MemoryUsage;
use App\ScraperProcess;
use Illuminate\Http\Request;
use App\Library\Github\GithubClient;
use Laravel\Horizon\Contracts\JobRepository;

class MasterDevTaskController extends Controller
{
    public function index(Request $request)
    {
        $enddate   = date('Y-m-d 23:59:59');
        $startdate = date('Y-m-d 00:00:00', strtotime('-7 day', strtotime($enddate)));

        $productErrors = \App\ProductPushErrorLog::latest('count')->groupBy('message')->select(\DB::raw('*,COUNT(message) AS count'));
        $productErrors->whereDate('created_at', '>=', $startdate)->whereDate('created_at', '<=', $enddate);
        $productErrors->where('response_status', '!=', 'success');
        $productErrors = $productErrors->get();

        $memory_use = MemoryUsage::whereDate('created_at', now()->format('Y-m-d'))
            ->orderBy('used', 'desc')
            ->first();

        $currentSize = \DB::table('database_historical_records')->orderBy('created_at', 'desc')->first();
        $sizeBefore  = null;
        if (! empty($currentSize)) {
            $sizeBefore = \DB::table('database_historical_records')
                ->whereRaw(\DB::raw("DATE(created_at) = DATE('" . $currentSize->created_at . "' - INTERVAL 1 DAY)"))
                ->first();
        }

        $topFiveTables = \App\DatabaseTableHistoricalRecord::whereDate('created_at', date('Y-m-d'))->groupBy('database_name')->orderBy('size', 'desc')->limit(5)->get();
        // find the open branches
        $repoArr    = [];
        $github     = new GithubClient;
        $repository = $github->getRepository();

        if (! empty($repository)) {
            foreach ($repository as $i => $repo) {
                $repoId              = $repo->full_name;
                $pulls               = $github->getPulls($repoId, 'q=is%3Aopen+is%3Apr');
                $repoArr[$i]['name'] = $repoId;
                if (! empty($pulls)) {
                    foreach ($pulls as $pull) {
                        $repoArr[$i]['pulls'][] = [
                            'title' => $pull->title,
                            'no'    => $pull->number,
                            'url'   => $pull->html_url,
                            'user'  => $pull->user->login,
                        ];
                    }
                }
            }
        }
        $cronjobReports = null;

        $cronjobReports = \App\CronJob::join('cron_job_reports as cjr', 'cron_jobs.signature', 'cjr.signature')
            ->where('cjr.start_time', '>', \DB::raw('NOW() - INTERVAL 24 HOUR'))
            ->where('cron_jobs.last_status', 'error')
            ->groupBy('cron_jobs.signature')
            ->get();

        $scraper1hrsReports = null;
        $scraper1hrsReports = \App\CroppedImageReference::where('created_at', '>=', \DB::raw('DATE_SUB(NOW(),INTERVAL 1 HOUR)'))->select(
            [\DB::raw('count(*) as cnt')]
        )->first();
        $scraper24hrsReports = null;
        $scraper24hrsReports = \App\CroppedImageReference::where('created_at', '>=', \DB::raw('DATE_SUB(NOW(),INTERVAL 24 HOUR)'))->select(
            [\DB::raw('count(*) as cnt')]
        )->first();

        $last3HrsMsg  = null;
        $last24HrsMsg = null;

        $last3HrsMsg = \DB::table('chat_messages')->where('created_at', '>=', \DB::raw('DATE_SUB(NOW(),INTERVAL 3 HOUR)'))->select(
            [\DB::raw('count(*) as cnt')]
        )->first();

        $last24HrsMsg = \DB::table('chat_messages')->where('created_at', '>=', \DB::raw('DATE_SUB(NOW(),INTERVAL 24 HOUR)'))->select(
            [\DB::raw('count(*) as cnt')]
        )->first();

        $threehours      = strtotime(date('Y-m-d H:i:s', strtotime('-3 hours')));
        $twentyfourhours = strtotime(date('Y-m-d H:i:s', strtotime('-24 hours')));

        $last3HrsJobs = \DB::table('jobs')->where('created_at', '>=', $threehours)->select(
            [\DB::raw('count(*) as cnt')]
        )->first();

        $last24HrsJobs = \DB::table('jobs')->whereDate('created_at', '>=', $twentyfourhours)->select(
            [\DB::raw('count(*) as cnt')]
        )->first();

        // Get scrape data
        $sql = '
            SELECT
                s.id,
                s.supplier,
                COUNT(ls.id) AS total,
                SUM(IF(ls.validated=0,1,0)) AS failed,
                SUM(IF(ls.validated=1,1,0)) AS validated,
                SUM(IF(ls.validation_result LIKE "%[error]%",1,0)) AS errors
            FROM
                suppliers s
            JOIN
                scrapers sc
            ON 
                sc.supplier_id = s.id    
            JOIN
                scraped_products ls 
            ON  
                sc.scraper_name=ls.website
            WHERE
                ls.website != "internal_scraper" AND
                ls.last_inventory_at > DATE_SUB(NOW(), INTERVAL sc.inventory_lifetime DAY)
            ORDER BY
                sc.scraper_priority desc
        ';
        $scrapeData = \DB::select($sql);

        //DB Image size management#3118
        $projectDirectorySql = 'select * FROM `project_file_managers` where size > notification_at or display_dev_master = 1';

        $projectDirectoryData = \DB::select($projectDirectorySql);

        $logRequest = \App\LogRequest::where('status_code', '!=', 200)->whereDate('created_at', date('Y-m-d'))->groupBy('status_code')->select(['status_code', \DB::raw('count(*) as total_error')])->get();

        $failedJobs = app(JobRepository::class)->getFailed();

        $scraper_proc = [];

        $scraper_process = ScraperProcess::where('scraper_name', '!=', '')->orderBy('started_at', 'DESC')->get()->unique('scraper_id');
        foreach ($scraper_process as $key => $sp) {
            $to            = \Carbon\Carbon::createFromFormat('Y-m-d H:s:i', $sp->started_at);
            $from          = \Carbon\Carbon::now();
            $diff_in_hours = $to->diffInMinutes($from);
            if ($diff_in_hours > 1440) {
                array_push($scraper_proc, $sp);
            }
        }
        $scrapers = Scraper::where('scraper_name', '!=', '')->whereNotIn('id', $scraper_process->pluck('scraper_id'))->get();

        return view('master-dev-task.index', compact(
            'currentSize', 'sizeBefore', 'repoArr', 'cronjobReports', 'last3HrsMsg', 'last24HrsMsg', 'scrapeData', 'scraper1hrsReports', 'scraper24hrsReports', 'projectDirectoryData', 'last3HrsJobs', 'last24HrsJobs', 'topFiveTables', 'memory_use', 'logRequest', 'failedJobs', 'scraper_process', 'scrapers', 'productErrors'));
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/ModelNameController.php 
Content: <?php

namespace App\Http\Controllers;

use App\ModelName;
use Illuminate\Http\Request;

class ModelNameController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        $modelName = ModelName::latest('created_at')->paginate(10);

        return view('model-name.index', compact('modelName'));
    }

    /**
     * Store a newly created resource in storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        try {
            $modelName       = new ModelName();
            $modelName->name = $request->name;
            $modelName->save();

            return response()->json(['code' => 200, 'data' => $modelName, 'message' => 'You have successfully added Model!']);
        } catch (Exception $e) {
            return response()->json(['code' => 500, 'message' => $e->getMessage()]);
        }
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function edit(ModelName $modelName, Request $request)
    {
        try {
            $modelName = ModelName::where('id', $request->id)->first();

            return response()->json(['code' => 200, 'data' => $modelName, 'message' => 'Listed successfully!']);
        } catch (Exception $e) {
            return response()->json(['code' => 500, 'message' => $e->getMessage()]);
        }
    }

    /**
     * Update the specified resource in storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, ModelName $modelName)
    {
        try {
            $modelName     = ModelName::where('id', $request->model_id)->update(['name' => $request->name]);
            $modelNameData = ModelName::where('id', $request->model_id)->first();

            return response()->json(['code' => 200, 'data' => $modelNameData, 'message' => 'Updated successfully!']);
        } catch (Exception $e) {
            return response()->json(['code' => 500, 'message' => $e->getMessage()]);
        }
    }

    /**
     * Remove the specified resource from storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function destroy(ModelName $modelName, Request $request)
    {
        try {
            $deleted = ModelName::where('id', $request->id)->first();
            \DB::table('model_names')->where('id', $request->id)->delete();

            return response()->json(['code' => 200, 'data' => $deleted->name, 'message' => 'Deleted successfully!']);
        } catch (Exception $e) {
            return response()->json(['code' => 500, 'message' => $e->getMessage()]);
        }
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/NegativeCouponResponseController.php 
Content: <?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

class NegativeCouponResponseController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        $negativeCoupons = \DB::table('nagative_coupon_responses');
        $negativeCoupons->select('nagative_coupon_responses.*', 'users.name as userName');
        $negativeCoupons->leftJoin('users', function ($join) {
            $join->on('users.id', '=', 'nagative_coupon_responses.user_id');
        });

        $negativeCouponsData = $negativeCoupons->orderBy('id', 'DESC')->paginate(\App\Setting::get('pagination', 25));

        return view('negative-coupon-response.index', compact('negativeCouponsData'));
    }

    public function search(Request $request)
    {
        $negativeCoupons = \DB::table('nagative_coupon_responses');
        $negativeCoupons->select('nagative_coupon_responses.*', 'users.name as userName');
        $negativeCoupons->leftJoin('users', function ($join) {
            $join->on('users.id', '=', 'nagative_coupon_responses.user_id');
        });
        if ($request->website) {
            $negativeCoupons->where('website', $request->website);
        }
        if ($request->response_text) {
            $negativeCoupons->where('response', 'like', '%' . $request->response_text . '%');
        }
        if ($request->user) {
            $negativeCoupons->where('user_id', $request->user);
        }
        $negativeCouponsData = $negativeCoupons->orderBy('id', 'DESC')->paginate(\App\Setting::get('pagination', 25));

        return view('negative-coupon-response.index', compact('negativeCouponsData'));
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        //
    }

    /**
     * Display the specified resource.
     *
     * @param \App\NagativeCouponResponse $nagativeCouponResponse
     *
     * @return \Illuminate\Http\Response
     */
    public function show(NagativeCouponResponse $nagativeCouponResponse)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param \App\NagativeCouponResponse $nagativeCouponResponse
     *
     * @return \Illuminate\Http\Response
     */
    public function edit(NagativeCouponResponse $nagativeCouponResponse)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param \App\NagativeCouponResponse $nagativeCouponResponse
     *
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, NagativeCouponResponse $nagativeCouponResponse)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param \App\NagativeCouponResponse $nagativeCouponResponse
     *
     * @return \Illuminate\Http\Response
     */
    public function destroy(NagativeCouponResponse $nagativeCouponResponse)
    {
        //
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/NotificationQueueController.php 
Content: <?php

namespace App\Http\Controllers;

use App\Sale;
use App\Task;
use App\User;
use App\Leads;
use App\Order;
use App\Helpers;
use App\Instruction;
use App\PushNotification;
use App\NotificationQueue;
use Illuminate\Support\Facades\DB;

class NotificationQueueController extends Controller
{
    private $notificationQueueArray = [
        'type',
        'message',
        'timestamps', //Array
        'model_type',
        'model_id',
        'user_id',
        'sent_to',
        'message_id',
        'role',
    ];

    private $notificationFillable = [
        'type',
        'message',
        'role',
        'user_id',
        'sent_to',
        'model_type',
        'model_id',
        'message_id',
    ];

    public static function createNewNotification($notificationArray)
    {
        $startTime                    = date('Y-m-d H:i:s');
        $notificationArray['user_id'] = $notificationArray['user_id'] ?? \Auth::id();

        if (! empty($notificationArray['sent_to'])) {
            $user = User::find($notificationArray['sent_to']);

            if (! $user->isOnline()) {
                if (! empty($user->responsible_user)) {
                    $responsible_user = User::find($user->responsible_user);

                    if ($responsible_user->isOnline()) {
                        $notificationArray['sent_to'] = $responsible_user->id;
                    }
                }
            }
        }

        if (($notificationArray['sent_to'] == 6 && $notificationArray['model_type'] == Instruction::class) || ($notificationArray['sent_to'] == 3 && $notificationArray['model_type'] == Instruction::class) || ($notificationArray['sent_to'] == 23 && $notificationArray['model_type'] == Instruction::class)) {
            // TEMP SOLUTION TO TURN OFF NOTIFICATIONS FOR ADMINS
        } else {
            foreach ($notificationArray['timestamps'] as $time) {
                $data                = $notificationArray;
                $data['time_to_add'] = date('Y-m-d H:i:s', strtotime($time, strtotime($startTime)));

                NotificationQueue::create($data);
            }
        }
    }

    public static function deQueueNotficationNew()
    {
        $nArray = NotificationQueue::orderBy('time_to_add', 'ASC')->take(20)->get()->toArray();

        foreach ($nArray as $item) {
            if (time() >= strtotime($item['time_to_add'])) {
                switch ($item['model_type']) {
                    case Sale::class:

                        $sale_instance = Sale::find($item['model_id']);

                        if (! empty($sale_instance)) {
                            if ($sale_instance->selected_product == 'null') {
                                PushNotification::create($item);
                            }
                        }

                        break;

                    case Task::class:

                        $task_instance = Task::find($item['model_id']);

                        if (! empty($task_instance)) {
                            if ($task_instance->assign_status != '1') {
                                PushNotification::create($item);
                            }
                        }

                        break;

                    case Leads::class:
                        $lead_instance = Leads::find($item['model_id']);

                        if (! empty($lead_instance)) {
                            if ($lead_instance->status == '1' && $lead_instance->assign_status == null) {
                                PushNotification::create($item);
                            }
                        }

                        break;

                    case Order::class:

                        $order_instance = Order::find($item['model_id']);

                        if (! empty($order_instance)) {
                            if ($order_instance->assign_status == null) {
                                PushNotification::create($item);
                            }
                        }

                        break;

                    case 'leads':
                        PushNotification::create($item);
                        break;

                    case 'order':
                        PushNotification::create($item);
                        break;

                    case 'customer':
                        PushNotification::create($item);
                        break;

                    case \App\Instruction::class:
                        PushNotification::create($item);
                        break;

                    case \App\DeveloperTask::class:
                        PushNotification::create($item);
                        break;

                    case 'MasterControl':
                        PushNotification::create($item);
                        break;
                }

                NotificationQueueController::destroy($item['id']);
            }
        }
    }

    public function perHourActivityNotification()
    {
        $is_correct_hr = intval(date('H', time()));

        if ($is_correct_hr >= 10 && $is_correct_hr <= 19) {
            $user_ids = Helpers::getAllUserIdsWithoutRole();

            $hrs = date('h a', strtotime('-1 hours', time())) . ' - ' . date('h a', time());

            foreach ($user_ids as $id) {
                PushNotification::create([
                    'message'    => 'Input Activity for ' . $hrs,
                    'role'       => '',
                    'user_id'    => $id,
                    'sent_to'    => $id,
                    'model_type' => 'User',
                    'model_id'   => $id,
                ]);
            }
        }
    }

    public static function destroy($notificaiton_queue_id)
    {
        DB::table('notification_queues')->where('id', $notificaiton_queue_id)->delete();
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/OrderController.php 
Content: <?php

namespace App\Http\Controllers;

use Auth;
use Cache;
use Session;
use Storage;
use App\Task;
use App\User;
use App\Email;
use App\Order;
use App\Reply;
use App\Refund;
use SoapClient;
use App\Comment;
use App\Helpers;
use App\Invoice;
use App\Message;
use App\Product;
use App\Setting;
use App\Waybill;
use App\Category;
use App\Customer;
use App\AutoReply;
use Carbon\Carbon;
use Dompdf\Dompdf;
use App\CallHistory;
use App\ChatMessage;
use App\OrderReport;
use App\OrderStatus;
use App\TwilioAgent;
use App\EmailAddress;
use App\OrderProduct;
use App\StatusChange;
use App\StoreWebsite;
use App\CallRecording;
use App\CreditHistory;
use App\OrderErrorLog;
use App\ReplyCategory;
use App\StatusMapping;
use App\CallBusyMessage;
use App\DeliveryApproval;
use App\Mail\ViewInvoice;
use App\Mail\OrderInvoice;
use App\StoreMasterStatus;
use App\StoreWebsiteOrder;
use App\TwilioDequeueCall;
use App\OrderStatusHistory;
use App\Store_order_status;
use App\TwilioActiveNumber;
use Illuminate\Support\Arr;
use App\Events\OrderUpdated;
use App\Helpers\OrderHelper;
use App\MailinglistTemplate;
use App\Models\InvoiceLater;
use Illuminate\Http\Request;
use App\CommunicationHistory;
use App\Mail\OrderStatusMail;
use App\OrderCustomerAddress;
use App\OrderMagentoErrorLog;
use App\PurchaseProductOrder;
use App\CallBusyMessageStatus;
use App\waybillTrackHistories;
use App\Models\DataTableColumn;
use App\EmailCommonExceptionLog;
use App\OrderEmailSendJourneyLog;
use App\StoreWebsiteTwilioNumber;
use App\StoreOrderStatusesHistory;
use App\Library\DHL\GetRateRequest;
use App\MailinglistTemplateCategory;
use App\Mails\Manual\AdvanceReceipt;
use Illuminate\Support\Facades\Mail;
use App\Mails\Manual\RefundProcessed;
use App\OrderStatus as OrderStatuses;
use App\Mails\Manual\AdvanceReceiptPDF;
use App\Mails\Manual\OrderConfirmation;
use App\Jobs\UpdateOrderStatusMessageTpl;
use App\Library\DHL\TrackShipmentRequest;
use Illuminate\Database\Eloquent\Builder;
use App\Library\DHL\CreateShipmentRequest;
use Illuminate\Pagination\LengthAwarePaginator;
use seo2websites\MagentoHelper\MagentoHelperv2;
use App\Models\OrderStatusMagentoRequestResponseLog;
use Plank\Mediable\Facades\MediaUploader as MediaUploader;

class OrderController extends Controller
{
    /**
     * @param Request $request
     *                         Generate the PDf for the orders list page
     */
    public function downloadOrderInPdf(Request $request)
    {
        $term         = $request->input('term');
        $order_status = $request->status ?? [''];
        $date         = $request->date ?? '';

        if ($request->input('orderby') == '') {
            $orderby = 'DESC';
        } else {
            $orderby = 'ASC';
        }

        switch ($request->input('sortby')) {
            case 'type':
                $sortby = 'order_type';
                break;
            case 'date':
                $sortby = 'order_date';
                break;
            case 'order_handler':
                $sortby = 'sales_person';
                break;
            case 'client_name':
                $sortby = 'client_name';
                break;
            case 'status':
                $sortby = 'order_status_id';
                break;
            case 'advance':
                $sortby = 'advance_detail';
                break;
            case 'balance':
                $sortby = 'balance_amount';
                break;
            case 'action':
                $sortby = 'action';
                break;
            case 'due':
                $sortby = 'due';
                break;
            case 'communication':
                $sortby = 'communication';
                break;
            default:
                $sortby = 'order_date';
        }

        // Create query
        $orders = (new Order())->newQuery()->with('customer');

        if (empty($term)) {
            $orders = $orders;
        } else {
            // AN order should have customer, if term is filled
            $orders = $orders->whereHas('customer', function ($query) use ($term) {
                return $query->where('name', 'LIKE', "%$term%");
            })
                ->orWhere('order_id', 'like', '%' . $term . '%')
                ->orWhere('order_type', $term)
                ->orWhere('sales_person', Helpers::getUserIdByName($term))
                ->orWhere('received_by', Helpers::getUserIdByName($term))
                ->orWhere('client_name', 'like', '%' . $term . '%')
                ->orWhere('city', 'like', '%' . $term . '%')
                ->orWhere('order_status_id', (new \App\ReadOnly\OrderStatus())->getIDCaseInsensitive($term));
        }

        if ($order_status[0] != '') {
            $orders = $orders->whereIn('order_status_id', $order_status);
        }

        if ($date != '') {
            $orders = $orders->where('order_date', $date);
        }

        $users             = Helpers::getUserArray(User::all());
        $order_status_list = (new OrderStatus)->all();

        // also sort by communication action and due
        if ($sortby != 'communication' && $sortby != 'action' && $sortby != 'due') {
            $orders = $orders->orderBy('is_priority', 'DESC')->orderBy($sortby, $orderby);
        } else {
            $orders = $orders->orderBy('is_priority', 'DESC')->orderBy('created_at', 'DESC');
        }

        $orders_array = $orders->paginate(500);

        // load the view for pdf and after that load that into dompdf instance, and then stream (download) the pdf
        $html = view('orders.index_pdf', compact('orders_array', 'users', 'term', 'orderby', 'order_status_list', 'order_status', 'date'));
        $pdf  = new Dompdf();
        $pdf->loadHtml($html);
        $pdf->render();
        $pdf->stream('orders.pdf');
    }

    public function downloadOrderMailPdf(Request $request)
    {
        if (! empty($request->email_id)) {
            $email = Email::where('id', $request->email_id)->first();
        } else {
            $order = Order::where('id', $request->order_id)->first();
            $email = Email::where('model_id', $order->id)->where('model_type', \App\Order::class)->orderBy('id', 'desc')->first();
        }

        if ($email) {
            $content = $email->message;
        } else {
            $content = 'No Email found';
        }

        // load the view for pdf and after that load that into dompdf instance, and then stream (download) the pdf
        $html       = view('orders.order_mail', compact('content'));
        $pdf        = new Dompdf();
        $paper_size = [0, 0, 700, 1080];
        $pdf->set_paper($paper_size);
        $pdf->loadHtml($html->render());
        $pdf->render();
        $pdf->stream('orderMail.pdf');
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request)
    {
        $term                    = $request->input('term');
        $advance_detail          = $request->input('advance_detail');
        $balance_amount          = $request->input('balance_amount');
        $order_status            = $request->status ?? [''];
        $date                    = $request->date ?? '';
        $estimated_delivery_date = $request->estimated_delivery_date ?? '';
        $brandList               = \App\Brand::all()->pluck('name', 'id')->toArray();
        $brandIds                = array_filter($request->get('brand_id', []));
        $registerSiteList        = StoreWebsite::pluck('website', 'id')->toArray();
        $fromdatadefault         = [
            'street'       => config('dhl.shipper.street'),
            'city'         => config('dhl.shipper.city'),
            'postal_code'  => config('dhl.shipper.postal_code'),
            'country_code' => config('dhl.shipper.country_code'),
            'person_name'  => config('dhl.shipper.person_name'),
            'company_name' => config('dhl.shipper.company_name'),
            'phone'        => config('dhl.shipper.phone'),
        ];
        if ($request->input('orderby') == '') {
            $orderby = 'DESC';
        } else {
            $orderby = 'ASC';
        }

        switch ($request->input('sortby')) {
            case 'type':
                $sortby = 'order_type';
                break;
            case 'date':
                $sortby = 'order_date';
                break;
            case 'estdeldate':
                $sortby = 'estimated_delivery_date';
                break;
            case 'order_handler':
                $sortby = 'sales_person';
                break;
            case 'client_name':
                $sortby = 'client_name';
                break;
            case 'status':
                $sortby = 'order_status_id';
                break;
            case 'advance':
                $sortby = 'advance_detail';
                break;
            case 'balance':
                $sortby = 'balance_amount';
                break;
            case 'action':
                $sortby = 'action';
                break;
            case 'due':
                $sortby = 'due';
                break;
            case 'communication':
                $sortby = 'communication';
                break;
            default:
                $sortby = 'order_date';
        }

        $orders = (new Order())->newQuery()->with('customer')->leftJoin('store_website_orders as swo', 'swo.order_id', 'orders.id');

        if (empty($term)) {
            $orders = $orders;
        } else {
            $orders = $orders->whereHas('customer', function ($query) use ($term) {
                return $query->where('name', 'LIKE', '%' . $term . '%')
                    ->orWhere('id', 'LIKE', '%' . $term . '%')
                    ->orWhere('email', 'LIKE', '%' . $term . '%');
            })
                ->orWhere('orders.order_id', 'like', '%' . $term . '%')
                ->orWhere('order_type', $term)
                ->orWhere('sales_person', Helpers::getUserIdByName($term))
                ->orWhere('received_by', Helpers::getUserIdByName($term))
                ->orWhere('orders.city', 'like', '%' . $term . '%')
                ->orWhere('order_status_id', (new \App\ReadOnly\OrderStatus())->getIDCaseInsensitive($term))
                ->Where('client_name', 'like', $term);
        }

        if ($order_status[0] != '') {
            $orders = $orders->whereIn('order_status_id', $order_status);
        }

        if ($date != '') {
            $orders = $orders->where('order_date', $date);
        }

        if ($estimated_delivery_date != '') {
            $orders = $orders->where('estimated_delivery_date', $estimated_delivery_date);
        }

        if ($store_site = $request->store_website_id) {
            $orders = $orders->whereIn('swo.website_id', $store_site);
        }

        if ($advance_detail != '') {
            $orders = $orders->where('advance_detail', '<=', $advance_detail);
        }

        if ($balance_amount != '') {
            $orders = $orders->where('balance_amount', '<=', $balance_amount);
        }

        $statusFilterList = clone $orders;

        $orders = $orders->leftJoin('order_products as op', 'op.order_id', 'orders.id')
            ->leftJoin('customers as cs', 'cs.id', 'orders.customer_id')
            ->leftJoin('products as p', 'p.id', 'op.product_id')
            ->leftJoin('brands as b', 'b.id', 'p.brand');

        if (! empty($brandIds)) {
            $orders = $orders->whereIn('p.brand', $brandIds);
        }

        $orders = $orders->groupBy('orders.order_id');

        $orders = $orders->select(['orders.*', 'cs.email as cust_email', \DB::raw('group_concat(b.name) as brand_name_list'), 'swo.website_id']);

        $users             = Helpers::getUserArray(User::all());
        $order_status_list = OrderHelper::getStatus();

        if ($sortby != 'communication' && $sortby != 'action' && $sortby != 'due') {
            $orders = $orders->orderBy('is_priority', 'DESC')->orderBy($sortby, $orderby);
        } else {
            $orders = $orders->orderBy('is_priority', 'DESC')->orderBy('created_at', 'DESC');
        }

        $statusFilterList = $statusFilterList->leftJoin('order_statuses as os', 'os.id', 'orders.order_status_id')
            ->where('order_status', '!=', '')->groupBy('order_status')->select(\DB::raw('count(*) as total'), 'os.status as order_status', 'swo.website_id')->get()->toArray();

        $totalOrders  = count($orders->get());
        $orders_array = $orders->paginate(10);

        $quickreply = Reply::where('model', 'Order')->get();

        $duty_shipping = [];
        foreach ($orders_array as $key => $order) {
            $duty_shipping[$order->id]['id'] = $order->id;

            $website_code_data = $order->duty_tax;
            if ($website_code_data != null) {
                $product_qty = count($order->order_product);

                $code = $website_code_data->website_code->code;

                $duty_countries     = $website_code_data->website_code->duty_of_country;
                $shipping_countries = $website_code_data->website_code->shipping_of_country($code);

                $duty_amount     = ($duty_countries->default_duty * $product_qty);
                $shipping_amount = ($shipping_countries->price * $product_qty);

                $duty_shipping[$order->id]['shipping'] = $duty_amount;
                $duty_shipping[$order->id]['duty']     = $shipping_amount;
            } else {
                $duty_shipping[$order->id]['shipping'] = 0;
                $duty_shipping[$order->id]['duty']     = 0;
            }
        }
        $orderStatusList = OrderStatus::all();

        $store_site = $request->store_website_id;

        $datatableModel = DataTableColumn::select('column_name')->where('user_id', auth()->user()->id)->where('section_name', 'orders-listing')->first();

        $dynamicColumnsToShowPostman = [];
        if (! empty($datatableModel->column_name)) {
            $hideColumns                 = $datatableModel->column_name ?? '';
            $dynamicColumnsToShowPostman = json_decode($hideColumns, true);
        }

        return view('orders.index', compact('orders_array', 'users', 'term', 'orderby', 'order_status_list', 'order_status', 'date', 'statusFilterList', 'brandList', 'registerSiteList', 'store_site', 'totalOrders', 'quickreply', 'fromdatadefault', 'duty_shipping', 'orderStatusList', 'dynamicColumnsToShowPostman', 'estimated_delivery_date', 'advance_detail', 'balance_amount'));
    }

    public function orderPreviewSentMails(Request $request)
    {
        $id    = $request->id;
        $lists = Email::where('model_id', $id)->orderBy('id', 'DESC')->get();

        return response()->json(['code' => 200, 'data' => $lists]);
    }

    public function charity_order(Request $request)
    {
        $term             = $request->input('term');
        $order_status     = $request->status ?? [''];
        $date             = $request->date ?? '';
        $brandList        = \App\Brand::all()->pluck('name', 'id')->toArray();
        $brandIds         = array_filter($request->get('brand_id', []));
        $registerSiteList = StoreWebsite::pluck('website', 'id')->toArray();
        $fromdatadefault  = [
            'street'       => config('dhl.shipper.street'),
            'city'         => config('dhl.shipper.city'),
            'postal_code'  => config('dhl.shipper.postal_code'),
            'country_code' => config('dhl.shipper.country_code'),
            'person_name'  => config('dhl.shipper.person_name'),
            'company_name' => config('dhl.shipper.company_name'),
            'phone'        => config('dhl.shipper.phone'),
        ];
        if ($request->input('orderby') == '') {
            $orderby = 'DESC';
        } else {
            $orderby = 'ASC';
        }

        switch ($request->input('sortby')) {
            case 'type':
                $sortby = 'order_type';
                break;
            case 'date':
                $sortby = 'order_date';
                break;
            case 'estdeldate':
                $sortby = 'estimated_delivery_date';
                break;
            case 'order_handler':
                $sortby = 'sales_person';
                break;
            case 'client_name':
                $sortby = 'client_name';
                break;
            case 'status':
                $sortby = 'order_status_id';
                break;
            case 'advance':
                $sortby = 'advance_detail';
                break;
            case 'balance':
                $sortby = 'balance_amount';
                break;
            case 'action':
                $sortby = 'action';
                break;
            case 'due':
                $sortby = 'due';
                break;
            case 'communication':
                $sortby = 'communication';
                break;
            default:
                $sortby = 'order_date';
        }

        $orders = (new Order())->newQuery()->with('customer')->leftJoin('store_website_orders as swo', 'swo.order_id', 'orders.id');
        if (empty($term)) {
            $orders = $orders;
        } else {
            $orders = $orders->whereHas('customer', function ($query) use ($term) {
                return $query->where('name', 'LIKE', '%' . $term . '%')
                    ->orWhere('id', 'LIKE', '%' . $term . '%')
                    ->orWhere('email', 'LIKE', '%' . $term . '%');
            })
                ->orWhere('orders.order_id', 'like', '%' . $term . '%')
                ->orWhere('order_type', $term)
                ->orWhere('sales_person', Helpers::getUserIdByName($term))
                ->orWhere('received_by', Helpers::getUserIdByName($term))
                ->orWhere('client_name', 'like', '%' . $term . '%')
                ->orWhere('orders.city', 'like', '%' . $term . '%')
                ->orWhere('order_status_id', (new \App\ReadOnly\OrderStatus())->getIDCaseInsensitive($term));
        }
        if ($order_status[0] != '') {
            $orders = $orders->whereIn('order_status_id', $order_status);
        }

        if ($date != '') {
            $orders = $orders->where('order_date', $date);
        }

        if ($store_site = $request->store_website_id) {
            $orders = $orders->where('swo.website_id', $store_site);
        }

        $statusFilterList = clone $orders;

        $orders = $orders->leftJoin('order_products as op', 'op.order_id', 'orders.id')
            ->leftJoin('customers as cs', 'cs.id', 'orders.customer_id')
            ->leftJoin('products as p', 'p.id', 'op.product_id')
            ->join('customer_charities', 'customer_charities.product_id', 'p.id')
            ->leftJoin('brands as b', 'b.id', 'p.brand');

        if (! empty($brandIds)) {
            $orders = $orders->whereIn('p.brand', $brandIds);
        }

        $orders = $orders->groupBy('orders.id');
        $orders = $orders->select(['orders.*', 'cs.email as cust_email', \DB::raw('group_concat(b.name) as brand_name_list'), 'swo.website_id']);

        $users             = Helpers::getUserArray(User::all());
        $order_status_list = OrderHelper::getStatus();

        if ($sortby != 'communication' && $sortby != 'action' && $sortby != 'due') {
            $orders = $orders->orderBy('is_priority', 'DESC')->orderBy($sortby, $orderby);
        } else {
            $orders = $orders->orderBy('is_priority', 'DESC')->orderBy('created_at', 'DESC');
        }

        $statusFilterList = $statusFilterList->leftJoin('order_statuses as os', 'os.id', 'orders.order_status_id')
            ->where('order_status', '!=', '')->groupBy('order_status')->select(\DB::raw('count(*) as total'), 'os.status as order_status', 'swo.website_id')->get()->toArray();
        $totalOrders  = count($orders->get());
        $orders_array = $orders->paginate(10);

        $quickreply = Reply::where('model', 'Order')->get();

        $duty_shipping = [];
        foreach ($orders_array as $key => $order) {
            $duty_shipping[$order->id]['id'] = $order->id;

            $website_code_data = $order->duty_tax;
            if ($website_code_data != null) {
                $product_qty = count($order->order_product);

                $code = $website_code_data->website_code->code;

                $duty_countries     = $website_code_data->website_code->duty_of_country;
                $shipping_countries = $website_code_data->website_code->shipping_of_country($code);

                $duty_amount     = ($duty_countries->default_duty * $product_qty);
                $shipping_amount = ($shipping_countries->price * $product_qty);

                $duty_shipping[$order->id]['shipping'] = $duty_amount;
                $duty_shipping[$order->id]['duty']     = $shipping_amount;
            } else {
                $duty_shipping[$order->id]['shipping'] = 0;
                $duty_shipping[$order->id]['duty']     = 0;
            }
        }
        $orderStatusList = OrderStatus::all();

        return view('orders.charity_order', compact('orders_array', 'users', 'term', 'orderby', 'order_status_list', 'order_status', 'date', 'statusFilterList', 'brandList', 'registerSiteList', 'store_site', 'totalOrders', 'quickreply', 'fromdatadefault', 'duty_shipping', 'orderStatusList'));
    }

    public function addProduct(Request $request)
    {
        $this->createProduct($request);
        $productArr = [
            'sku'           => request('sku'),
            'product_price' => request('price'),
            'color'         => request('color'),
            'order_id'      => request('order_id'),
            'qty'           => request('qty'),
            'size'          => request('size'),
        ];
        OrderProduct::insert($productArr);

        return response()->json(['code' => 200, 'message' => 'Product added successfully']);
    }

    public function products(Request $request)
    {
        $term = $request->input('term');

        if ($request->input('orderby') == '') {
            $orderby = 'desc';
        } else {
            $orderby = 'asc';
        }

        switch ($request->input('sortby')) {
            case 'supplier':
                $sortby = 'supplier';
                break;
            case 'customer':
                $sortby = 'client_name';
                break;
            case 'customer_price':
                $sortby = 'price';
                break;
            case 'date':
                $sortby = 'created_at';
                break;
            case 'delivery_date':
                $sortby = 'date_of_delivery';
                break;
            case 'updated_date':
                $sortby = 'estimated_delivery_date';
                break;
            case 'status':
                $sortby = 'order_status_id';
                break;
            case 'communication':
                $sortby = 'communication';
                break;
            default:
                $sortby = 'id';
        }

        if (empty($term)) {
            $products = OrderProduct::with(['Product' => function ($query) {
                $query->with('Purchases');
            }, 'Order'])->get()->toArray();
        } else {
            $products = OrderProduct::whereHas('Product', function ($query) use ($term) {
                $query->where('supplier', 'like', '%' . $term . '%');
            })
                ->with(['Product', 'Order'])->orWhere('product_price', 'LIKE', "%$term%")
                ->orWhereHas('Order', function ($query) use ($term) {
                    $query->where('date_of_delivery', 'LIKE', "%$term%")
                        ->orWhere('estimated_delivery_date', 'LIKE', "%$term%")
                        ->orWhere('order_status', 'LIKE', "%$term%");
                })->get()->toArray();
        }

        $brand    = $request->input('brand');
        $supplier = $request->input('supplier');

        if ($sortby == 'supplier') {
            if ($orderby == 'asc') {
                $products = array_values(Arr::sort($products, function ($value) {
                    return $value['product']['supplier'];
                }));

                $products = array_reverse($products);
            } else {
                $products = array_values(Arr::sort($products, function ($value) {
                    return $value['product']['supplier'];
                }));
            }
        }

        if ($sortby == 'client_name') {
            if ($orderby == 'asc') {
                $products = array_values(Arr::sort($products, function ($value) {
                    if ($value['order']) {
                        return $value['order']['client_name'];
                    }

                    return '';
                }));

                $products = array_reverse($products);
            } else {
                $products = array_values(Arr::sort($products, function ($value) {
                    if ($value['order']) {
                        return $value['order']['client_name'];
                    }

                    return '';
                }));
            }
        }

        if ($sortby == 'price') {
            if ($orderby == 'asc') {
                $products = array_values(Arr::sort($products, function ($value) {
                    return $value['product_price'];
                }));

                $products = array_reverse($products);
            } else {
                $products = array_values(Arr::sort($products, function ($value) {
                    return $value['product_price'];
                }));
            }
        }

        if ($sortby == 'created_at') {
            if ($orderby == 'asc') {
                $products = array_values(Arr::sort($products, function ($value) {
                    if ($value['order']) {
                        return $value['order']['created_at'];
                    }

                    return '1999-01-01 00:00:00';
                }));

                $products = array_reverse($products);
            } else {
                $products = array_values(Arr::sort($products, function ($value) {
                    if ($value['order']) {
                        return $value['order']['created_at'];
                    }

                    return '1999-01-01 00:00:00';
                }));
            }
        }

        if ($sortby == 'date_of_delivery') {
            if ($orderby == 'asc') {
                $products = array_values(Arr::sort($products, function ($value) {
                    if ($value['order']) {
                        return $value['order']['date_of_delivery'];
                    }

                    return '1999-01-01 00:00:00';
                }));

                $products = array_reverse($products);
            } else {
                $products = array_values(Arr::sort($products, function ($value) {
                    if ($value['order']) {
                        return $value['order']['date_of_delivery'];
                    }

                    return '1999-01-01 00:00:00';
                }));
            }
        }

        if ($sortby == 'estimated_delivery_date') {
            if ($orderby == 'asc') {
                $products = array_values(Arr::sort($products, function ($value) {
                    if ($value['order']) {
                        return $value['order']['estimated_delivery_date'];
                    }

                    return '1999-01-01 00:00:00';
                }));

                $products = array_reverse($products);
            } else {
                $products = array_values(Arr::sort($products, function ($value) {
                    if ($value['order']) {
                        return $value['order']['estimated_delivery_date'];
                    }

                    return '1999-01-01 00:00:00';
                }));
            }
        }

        if ($sortby == 'order_status') {
            if ($orderby == 'asc') {
                $products = array_values(Arr::sort($products, function ($value) {
                    if ($value['order']) {
                        return $value['order']['order_status'];
                    }

                    return '';
                }));

                $products = array_reverse($products);
            } else {
                $products = array_values(Arr::sort($products, function ($value) {
                    if ($value['order']) {
                        return $value['order']['order_status'];
                    }

                    return '';
                }));
            }
        }

        if ($sortby == 'communication') {
            if ($orderby == 'asc') {
                $products = array_values(Arr::sort($products, function ($value) {
                    return $value['communication']['created_at'];
                }));

                $products = array_reverse($products);
            } else {
                $products = array_values(Arr::sort($products, function ($value) {
                    return $value['communication']['created_at'];
                }));
            }
        }

        $currentPage  = LengthAwarePaginator::resolveCurrentPage();
        $perPage      = 10;
        $currentItems = array_slice($products, $perPage * ($currentPage - 1), $perPage);

        $products = new LengthAwarePaginator($currentItems, count($products), $perPage, $currentPage, [
            'path' => LengthAwarePaginator::resolveCurrentPath(),
        ]);

        return view('orders.products', compact('products', 'term', 'orderby', 'brand', 'supplier'));
    }

    public function getCustomerAddress(Request $request)
    {
        $address = OrderCustomerAddress::where('order_id', $request->order_id)->get();

        return response()->json(['code' => 200, 'data' => $address]);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        $defaultSelected = [];
        $key             = request()->get('key', false);

        if (! empty($key)) {
            $defaultData = session($key);
            if (! empty($defaultData)) {
                $defaultSelected = $defaultData;
            }
        }

        $order = new Order();

        $data = [];
        foreach ($order->getFillable() as $item) {
            $data[$item] = '';
        }

        $expiresAt = Carbon::now()->addMinutes(10);

        $last       = Order::withTrashed()->latest()->first();
        $last_order = ($last) ? $last->id + 1 : 1;

        Cache::put('user-order-' . Auth::id(), $last_order, $expiresAt);
        Cache::put('last-order', $last_order, $expiresAt);

        if (! empty($defaultSelected['selected_product'])) {
            foreach ($defaultSelected['selected_product'] as $product) {
                self::attachProduct($last_order, $product);
            }
        }

        $data['id']             = $last_order;
        $data['sales_persons']  = Helpers::getUsersArrayByRole('Sales');
        $data['modify']         = 0;
        $data['order_products'] = $this->getOrderProductsWithProductData($data['id']);

        $customer_suggestions = [];
        $customers            = (new Customer())->newQuery()->latest()->select('name')->get()->toArray();

        foreach ($customers as $customer) {
            array_push($customer_suggestions, $customer['name']);
        }

        $data['customers'] = Customer::all();

        $data['customer_suggestions'] = $customer_suggestions;
        $data['defaultSelected']      = $defaultSelected;
        $data['key']                  = $key;

        return view('orders.form', $data);
    }

    public function searchProduct(Request $request)
    {
        $exist = Product::where('sku', request('sku'))->first();
        if (! empty($exist)) {
            return response()->json(['code' => 200, 'data' => $exist, 'message' => 'Product added successfully']);
        }

        return response()->json(['code' => 500, 'message' => 'Product not found']);
    }

    public function createProduct(Request $request)
    {
        $productArr = [
            'sku'           => request('sku'),
            'price'         => request('price'),
            'size'          => request('size'),
            'name'          => request('name'),
            'stock'         => 1,
            'quick_product' => 1,
        ];
        $exist = Product::where('sku', request('sku'))->first();
        if (empty($exist)) {
            Product::insert($productArr);

            return response()->json(['code' => 200, 'message' => 'Product added successfully']);
        }

        return response()->json(['code' => 500, 'message' => 'Product already exist']);
    }

    /**
     * Store a newly created resource in storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $this->validate($request, [
            'customer_id'    => 'required',
            'advance_detail' => 'numeric|nullable',
            'balance_amount' => 'numeric|nullable',
        ]);

        $data            = $request->all();
        $sessionKey      = $request->get('key', '');
        $data['user_id'] = Auth::id();
        $oPrefix         = ($request->input('order_type') == 'offline') ? 'OFF-' . date('Ym') : 'ONN-' . date('Ym');
        $statement       = \DB::select("SHOW TABLE STATUS LIKE 'orders'");
        $nextId          = 0;
        if (! empty($statement)) {
            $nextId = $statement[0]->Auto_increment;
        }

        $data['order_id'] = $oPrefix . '-' . $nextId;

        if (empty($request->input('order_date'))) {
            $data['order_date'] = date('Y-m-d');
        }
        if (! empty($request->website_address)) {
            $data['website_address_id'] = $request->website_address;
        }
        $customer = Customer::find($request->customer_id);

        $data['client_name']    = $customer->name;
        $data['contact_detail'] = $customer->phone;
        if ($request->hdn_order_mail_status == '1') {
            $data['auto_emailed'] = 1;
        } else {
            $data['auto_emailed'] = 0;
        }

        if (isset($data['date_of_delivery'])) {
            $data['estimated_delivery_date'] = $data['date_of_delivery'];
        }

        $currency                    = $request->get('currency', 'INR');
        $data['store_currency_code'] = $currency;

        $order = Order::create($data);

        $customerShippingAddress = [
            'address_type' => 'shipping',
            'city'         => $customer->city,
            'country_id'   => $customer->country,
            'email'        => $customer->email,
            'firstname'    => $customer->name,
            'postcode'     => $customer->pincode,
            'street'       => $customer->address,
            'order_id'     => $order->id,
        ];
        OrderCustomerAddress::insert($customerShippingAddress);

        $currency = $request->get('currency', 'INR');

        if (! empty($request->input('order_products'))) {
            foreach ($request->input('order_products') as $key => $order_product_data) {
                $order_product = OrderProduct::findOrFail($key);
                if ($order_product->order_id != $order->id) {
                    $nw_order_product = new OrderProduct;
                    foreach ($order_product->getAttributes() as $k => $attr) {
                        if (! in_array($k, ['id', 'created_at', 'updated_at'])) {
                            $nw_order_product->{$k} = $attr;
                        }
                    }

                    foreach ($order_product_data as $k => $v) {
                        $nw_order_product->{$k} = $v;
                    }

                    $nw_order_product->currency  = $currency;
                    $nw_order_product->eur_price = \App\Currency::convert($order_product->product_price, 'EUR', $currency);
                    $nw_order_product->order_id  = $order->id;
                    $nw_order_product->save();
                } else {
                    if ($order_product) {
                        $order_product->currency  = $currency;
                        $order_product->eur_price = \App\Currency::convert($order_product->product_price, 'EUR', $currency);
                        $order_product->save();
                    }
                }
            }
        }

        $totalAmount = 0;
        foreach (OrderProduct::where('order_id', $order->id)->get() as $order_product) {
            $totalAmount += $order_product->product_price;
        }

        $order->balance_amount = ($totalAmount - $order->advance_detail);
        $order->save();

        $store_order_website             = new StoreWebsiteOrder();
        $store_order_website->website_id = 15;
        $store_order_website->status_id  = $order->order_status_id;
        $store_order_website->order_id   = $order->id;
        $store_order_website->save();

        $store_website_product_price = [];

        foreach (OrderProduct::where('order_id', $order->id)->get() as $order_product) {
            $store_website_product_price['product_id'] = $order_product->product_id;

            $address = \App\OrderCustomerAddress::where('order_id', $order->id)->where('address_type', 'shipping')->first();

            $product  = \App\Product::find($order_product->product_id);
            $getPrice = $product->getPrice($customer->store_website_id, 'IN', '', '', '', '', '', '', '', '', $order->id, $order_product->product_id);
            $getDuty  = $product->getDuty($address->country_id);

            $store_website_product_price['default_price']    = $getPrice['original_price'];
            $store_website_product_price['duty_price']       = (float) $getDuty['duty'];
            $store_website_product_price['segment_discount'] = (float) $getPrice['segment_discount'];
            $store_website_product_price['override_price']   = $getPrice['total'];
            $store_website_product_price['status']           = 1;
            $store_website_product_price['store_website_id'] = 15;
        }

        \App\StoreWebsiteProductPrice::insert($store_website_product_price);

        if ($customer->credit > 0) {
            $balance_amount = $order->balance_amount;
            $totalCredit    = $customer->credit;
            if (($order->balance_amount - $customer->credit) < 0) {
                $left_credit = ($order->balance_amount - $customer->credit) * -1;
                $order->advance_detail += $order->balance_amount;
                $balance_amount   = 0;
                $customer->credit = $left_credit;
            } else {
                $balance_amount -= $customer->credit;
                $order->advance_detail += $customer->credit;
                $customer->credit = 0;
            }

            $order->balance_amount = $balance_amount;
            $order->order_id       = $oPrefix . '-' . $order->id;
            $order->save();
            $customer->save();

            if ($order->id) {
                CreditHistory::create(
                    [
                        'customer_id' => $request->customer_id,
                        'model_id'    => $order->id,
                        'model_type'  => Order::class,
                        'used_credit' => (float) $totalCredit - $customer->credit,
                        'used_in'     => 'ORDER',
                        'type'        => 'MINUS',
                    ]
                );
            }
        }

        $expiresAt  = Carbon::now()->addMinutes(10);
        $last_order = $order->id + 1;
        Cache::put('user-order-' . Auth::id(), $last_order, $expiresAt);

        if ($request->convert_order == 'convert_order') {
            if (! empty($request->selected_product)) {
                foreach ($request->selected_product as $product) {
                    self::attachProduct($order->id, $product);
                }
            }
        }

        if ($order->order_status_id == OrderHelper::$proceedWithOutAdvance && $order->order_type == 'online') {
            $product_names = '';
            foreach (OrderProduct::where('order_id', $order->id)->get() as $order_product) {
                $product_names .= $order_product->product ? $order_product->product->name . ', ' : '';
            }

            $delivery_time = $order->estimated_delivery_date ? Carbon::parse($order->estimated_delivery_date)->format('d \of\ F') : Carbon::parse($order->order_date)->addDays(15)->format('d \of\ F');

            $auto_reply = AutoReply::where('type', 'auto-reply')->where('keyword', 'cod-online-confirmation')->first();

            $auto_message = preg_replace('/{product_names}/i', $product_names, $auto_reply->reply);
            $auto_message = preg_replace('/{delivery_time}/i', $delivery_time, $auto_message);

            $followup_message = AutoReply::where('type', 'auto-reply')->where('keyword', 'cod-online-followup')->first()->reply;

            $requestData  = new Request();
            $requestData2 = new Request();
            $requestData->setMethod('POST');
            $requestData2->setMethod('POST');
            $requestData->request->add(['customer_id' => $order->customer->id, 'message' => $auto_message, 'status' => 1]);
            $requestData2->request->add(['customer_id' => $order->customer->id, 'message' => $followup_message, 'status' => 1]);

            app(\App\Http\Controllers\WhatsAppController::class)->sendMessage($requestData, 'customer');
            app(\App\Http\Controllers\WhatsAppController::class)->sendMessage($requestData2, 'customer');

            CommunicationHistory::create([
                'model_id'   => $order->id,
                'model_type' => Order::class,
                'type'       => 'initial-advance',
                'method'     => 'whatsapp',
            ]);
        } elseif ($order->order_status_id == OrderHelper::$prepaid) {
            $auto_message = AutoReply::where('type', 'auto-reply')->where('keyword', 'prepaid-order-confirmation')->first()->reply;
            $requestData  = new Request();
            $requestData->setMethod('POST');
            $requestData->request->add(['customer_id' => $order->customer->id, 'message' => $auto_message, 'status' => 1]);

            app(\App\Http\Controllers\WhatsAppController::class)->sendMessage($requestData, 'customer');

            CommunicationHistory::create([
                'model_id'   => $order->id,
                'model_type' => Order::class,
                'type'       => 'online-confirmation',
                'method'     => 'whatsapp',
            ]);
        } elseif ($order->order_status_id == OrderHelper::$refundToBeProcessed) {
            $refund = Refund::where('order_id', $order->id)->first();

            if (! $refund) {
                Refund::create([
                    'customer_id'     => $order->customer->id,
                    'order_id'        => $order->id,
                    'type'            => 'Cash',
                    'date_of_request' => Carbon::now(),
                    'date_of_issue'   => Carbon::now()->addDays(10),
                ]);
            }

            if ($order->payment_mode == 'paytm') {
                if ($order->customer) {
                    $all_amount = 0;

                    if ($order->order_product) {
                        foreach ($order->order_product as $order_product) {
                            $all_amount += $order_product->product_price;
                        }
                    }

                    $order->customer->credit += $all_amount;
                    $order->customer->save();
                }
            } elseif ($order->payment_mode != 'paytm' || $order->advance_detail > 0) {
                if ($order->customer) {
                    $order->customer->credit += $order->advance_detail;
                    $order->customer->save();
                }
            }
        }

        // if ($order->auto_emailed == 0) {
        if (! $order->is_sent_offline_confirmation()) {
            if ($order->order_type == 'offline') {
            }
        }

        if ($request->hdn_order_mail_status == '1') {
            $id_order_inc = $order->id;
            if (! $order->is_sent_offline_confirmation()) {
                if ($order->order_type == 'offline') {
                    if (! empty($order->customer) && ! empty($order->customer->email)) {
                        $emailClass = (new OrderConfirmation($order))->build();

                        $email = Email::create([
                            'model_id'        => $order->id,
                            'model_type'      => Order::class,
                            'from'            => $emailClass->fromMailer,
                            'to'              => $order->customer->email,
                            'subject'         => $emailClass->subject,
                            'message'         => $emailClass->render(),
                            'template'        => 'order-confirmation',
                            'additional_data' => $order->id,
                            'status'          => 'pre-send',
                            'is_draft'        => 1,
                        ]);

                        \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');
                    }
                }
            }
        }

        // sending order message to the customer
        UpdateOrderStatusMessageTpl::dispatch($order->id)->onQueue('customer_message');

        if ($request->ajax()) {
            return response()->json(['code' => 200, 'order' => $order]);
        }

        if ($request->get('return_url_back')) {
            return back()->with('message', 'Order created successfully');
        }

        if (! empty($sessionKey)) {
            $defaultData = session($sessionKey);
            if (! empty($defaultData) && ! empty($defaultData['redirect_back'])) {
                return redirect($defaultData['redirect_back'])->with('message', 'Order created successfully');
            }
        }

        return redirect()->route('order.index')
            ->with('message', 'Order created successfully');
    }

    /**
     * Display the specified resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function show(Order $order)
    {
        $data                   = $order->toArray();
        $data['sales_persons']  = Helpers::getUsersArrayByRole('Sales');
        $data['order_products'] = $this->getOrderProductsWithProductData($order->id);
        $data['comments']       = Comment::with('user')->where('subject_id', $order->id)
            ->where('subject_type', '=', Order::class)->get();
        $data['users']       = User::all()->toArray();
        $messages            = Message::all()->where('moduleid', '=', $data['id'])->where('moduletype', '=', 'order')->sortByDesc('created_at')->take(10)->toArray();
        $data['messages']    = $messages;
        $data['total_price'] = $this->getTotalOrderPrice($order);

        $order_statuses              = (new OrderStatus)->all();
        $data['order_statuses']      = $order_statuses;
        $data['tasks']               = Task::where('model_type', 'order')->where('model_id', $order->id)->get()->toArray();
        $data['order_recordings']    = CallRecording::where('order_id', '=', $data['order_id'])->get()->toArray();
        $data['order_status_report'] = OrderStatuses::all();
        if ($order->customer) {
            $data['order_reports'] = OrderReport::where('order_id', $order->customer->id)->get();
        }

        $data['users_array']       = Helpers::getUserArray(User::all());
        $data['has_customer']      = $order->customer ? $order->customer->id : false;
        $data['customer']          = $order->customer;
        $data['reply_categories']  = ReplyCategory::all();
        $data['delivery_approval'] = $order->delivery_approval;
        $data['waybill']           = $order->waybill;
        $data['waybills']          = $order->waybills;
        $data['customerAddress']   = $order->orderCustomerAddress;
        $data['shipping_address']  = $order->shippingAddress();
        $data['billing_address']   = $order->billingAddress();
        $data['order']             = $order;

        return view('orders.show', $data);
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function edit(Order $order)
    {
        $data                   = $order->toArray();
        $data['modify']         = 1;
        $data['sales_persons']  = Helpers::getUsersArrayByRole('Sales');
        $data['order_products'] = $this->getOrderProductsWithProductData($order->id);

        return view('orders.form', $data);
    }

    /**
     * Update the specified resource in storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, Order $order)
    {
        if ($request->type != 'customer') {
            $this->validate($request, [
                'advance_detail' => 'numeric|nullable',
                'balance_amount' => 'numeric|nullable',
                'contact_detail' => 'sometimes|nullable|numeric',
            ]);
        }

        if (! empty($request->input('order_products'))) {
            foreach ($request->input('order_products') as $key => $order_product_data) {
                $order_product = OrderProduct::findOrFail($key);

                if (isset($order_product_data['purchase_status']) && $order_product_data['purchase_status'] != $order_product->purchase_status) {
                    StatusChange::create([
                        'model_id'    => $order_product->id,
                        'model_type'  => OrderProduct::class,
                        'user_id'     => Auth::id(),
                        'from_status' => $order_product->purchase_status,
                        'to_status'   => $order_product_data['purchase_status'],
                    ]);
                }

                $order_product->update($order_product_data);
            }
        }

        if ($request->status != $order->order_status) {
            StatusChange::create([
                'model_id'    => $order->id,
                'model_type'  => Order::class,
                'user_id'     => Auth::id(),
                'from_status' => $order->order_status,
                'to_status'   => $request->status,
            ]);
        }

        $data                 = $request->except(['_token', '_method', 'status', 'purchase_status']);
        $data['order_status'] = $request->status;
        $data['is_priority']  = $request->is_priority == 'on' ? 1 : 0;
        $order->update($data);

        $this->calculateBalanceAmount($order);
        $order = Order::find($order->id);

        if ($customer = Customer::find($order->customer_id)) {
            if ($customer->credit > 0) {
                $balance_amount = $order->balance_amount;

                if (($order->balance_amount - $customer->credit) < 0) {
                    $left_credit = ($order->balance_amount - $customer->credit) * -1;
                    $order->advance_detail += $order->balance_amount;
                    $balance_amount   = 0;
                    $customer->credit = $left_credit;
                } else {
                    $balance_amount -= $customer->credit;
                    $order->advance_detail += $customer->credit;
                    $customer->credit = 0;
                }

                $order->balance_amount = $balance_amount;
                $order->save();
                $customer->save();

                if ($order->id) {
                    CreditHistory::create(
                        [
                            'customer_id' => $request->customer_id,
                            'model_id'    => $order->id,
                            'model_type'  => Order::class,
                            'used_credit' => $customer->credit,
                            'used_in'     => 'ORDER',
                            'type'        => 'MINUS',
                        ]
                    );
                }
            }
        }

        if (! $order->is_sent_initial_advance() && $order->order_status_id == OrderHelper::$proceedWithOutAdvance && $order->order_type == 'online') {
            $product_names = '';
            foreach (OrderProduct::where('order_id', $order->id)->get() as $order_product) {
                $product_names .= $order_product->product ? $order_product->product->name . ', ' : '';
            }

            $delivery_time = $order->estimated_delivery_date ? Carbon::parse($order->estimated_delivery_date)->format('d \of\ F') : Carbon::parse($order->order_date)->addDays(15)->format('d \of\ F');

            $auto_reply = AutoReply::where('type', 'auto-reply')->where('keyword', 'cod-online-confirmation')->first();

            $auto_message = preg_replace('/{product_names}/i', $product_names, $auto_reply->reply);
            $auto_message = preg_replace('/{delivery_time}/i', $delivery_time, $auto_message);

            $followup_message = AutoReply::where('type', 'auto-reply')->where('keyword', 'cod-online-followup')->first()->reply;

            $requestData  = new Request();
            $requestData2 = new Request();
            $requestData->setMethod('POST');
            $requestData2->setMethod('POST');
            $requestData->request->add(['customer_id' => $order->customer->id, 'message' => $auto_message, 'status' => 1]);
            $requestData2->request->add(['customer_id' => $order->customer->id, 'message' => $followup_message, 'status' => 1]);

            app(\App\Http\Controllers\WhatsAppController::class)->sendMessage($requestData, 'customer');
            app(\App\Http\Controllers\WhatsAppController::class)->sendMessage($requestData2, 'customer');

            CommunicationHistory::create([
                'model_id'   => $order->id,
                'model_type' => Order::class,
                'type'       => 'initial-advance',
                'method'     => 'whatsapp',
            ]);
        } elseif (! $order->is_sent_online_confirmation() && $order->order_status_id == \App\Helpers\OrderHelper::$prepaid) {
            $auto_message = AutoReply::where('type', 'auto-reply')->where('keyword', 'prepaid-order-confirmation')->first()->reply;
            $requestData  = new Request();
            $requestData->setMethod('POST');
            $requestData->request->add(['customer_id' => $order->customer->id, 'message' => $auto_message, 'status' => 2]);

            app(\App\Http\Controllers\WhatsAppController::class)->sendMessage($requestData, 'customer');

            CommunicationHistory::create([
                'model_id'   => $order->id,
                'model_type' => Order::class,
                'type'       => 'online-confirmation',
                'method'     => 'whatsapp',
            ]);
        }

        if ($request->hdn_order_mail_status == '1') {
            $id_order_inc = $order->id;
            $order_new    = Order::find($id_order_inc);
            if (! $order_new->is_sent_offline_confirmation()) {
                if ($order_new->order_type == 'offline') {
                    if (! empty($order_new->customer) && ! empty($order_new->customer->email)) {
                        //Mail::to($order_new->customer->email)->send(new OrderConfirmation($order_new));
                        $emailClass = (new OrderConfirmation($order_new))->build();

                        $emailObject = Email::create([
                            'model_id'        => $order_new->id,
                            'model_type'      => Order::class,
                            'from'            => $emailClass->fromMailer,
                            'to'              => $order_new->customer->email,
                            'subject'         => $emailClass->subject,
                            'message'         => $emailClass->render(),
                            'template'        => 'order-confirmation',
                            'additional_data' => $order_new->id,
                            'status'          => 'pre-send',
                            'is_draft'        => 1,
                        ]);

                        \App\Jobs\SendEmail::dispatch($emailObject)->onQueue('send_email');
                    }
                }
            }
        }

        if ($order->order_status_id == \App\Helpers\OrderHelper::$refundToBeProcessed) {
            if ($order->payment_mode == 'paytm') {
                if ($order->customer) {
                    $all_amount = 0;

                    if ($order->order_product) {
                        foreach ($order->order_product as $order_product) {
                            $all_amount += $order_product->product_price;
                        }
                    }

                    $order->customer->credit += $all_amount;
                    $order->customer->save();
                }
            } elseif ($order->payment_mode != 'paytm' || $order->advance_detail > 0) {
                if ($order->customer) {
                    $order->customer->credit += $order->advance_detail;
                    $order->customer->save();
                }
            }
            $refund = Refund::where('order_id', $order->id)->first();

            if (! $refund) {
                Refund::create([
                    'customer_id'     => $order->customer->id,
                    'order_id'        => $order->id,
                    'type'            => 'Cash',
                    'date_of_request' => Carbon::now(),
                    'date_of_issue'   => Carbon::now()->addDays(10),
                ]);
            }
        }

        if ($order->order_status == \App\Helpers\OrderHelper::$delivered) {
            if ($order->order_product) {
                foreach ($order->order_product as $order_product) {
                    if ($order_product->product) {
                        if ($order_product->product->supplier == 'In-stock') {
                            $order_product->product->supplier = '';
                            $order_product->product->save();
                        }
                    }
                }
            }

            if (! $order->is_sent_order_delivered()) {
                $message     = AutoReply::where('type', 'auto-reply')->where('keyword', 'order-delivery-confirmation')->first()->reply;
                $requestData = new Request();
                $requestData->setMethod('POST');
                $requestData->request->add(['customer_id' => $order->customer_id, 'message' => $message, 'status' => 2]);

                app(\App\Http\Controllers\WhatsAppController::class)->sendMessage($requestData, 'customer');

                CommunicationHistory::create([
                    'model_id'   => $order->id,
                    'model_type' => Order::class,
                    'type'       => 'order-delivered',
                    'method'     => 'whatsapp',
                ]);
            }
            event(new OrderUpdated($order));
            $order->delete();

            if ($request->type != 'customer') {
                return redirect()->route('order.index')->with('success', 'Order was updated and archived successfully!');
            } else {
                return back()->with('success', 'Order was updated and archived successfully!');
            }
        }
        event(new OrderUpdated($order));

        return back()->with('message', 'Order updated successfully');
    }

    public function printAdvanceReceipt($id)
    {
        $order = Order::find($id);

        return (new AdvanceReceiptPDF($order))->render();
        $view = (new AdvanceReceiptPDF($order))->render();

        $pdf = new Dompdf;
        $pdf->loadHtml($view);
        $pdf->render();
        $pdf->stream();
    }

    public function emailAdvanceReceipt($id)
    {
        $order = Order::find($id);

        if (true) {
            if ($order->order_status == \App\Helpers\OrderHelper::$advanceRecieved) {
                $from_email = \App\Helpers::getFromEmail($order->customer->id);
                $emailClass = (new AdvanceReceipt($order))->build();

                $storeWebsiteOrder = $order->storeWebsiteOrder;
                $email             = Email::create([
                    'model_id'         => $order->customer->id,
                    'model_type'       => Customer::class,
                    'from'             => $from_email,
                    'to'               => $order->customer->email,
                    'subject'          => $emailClass->subject,
                    'message'          => $emailClass->render(),
                    'template'         => 'advance-receipt',
                    'additional_data'  => $order->id,
                    'status'           => 'pre-send',
                    'store_website_id' => ($storeWebsiteOrder) ? $storeWebsiteOrder->store_website_id : null,
                ]);

                \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');
            }
        }

        return redirect()->back()->withSuccess('Advance Receipt was successfully emailed!');
    }

    public function sendConfirmation($id)
    {
        $order = Order::find($id);

        if (! $order->is_sent_offline_confirmation()) {
            if ($order->order_type == 'offline') {
                $emailClass = (new OrderConfirmation($order))->build();

                $storeWebsiteOrder = $order->storeWebsiteOrder;
                $email             = Email::create([
                    'model_id'         => $order->customer->id,
                    'model_type'       => Customer::class,
                    'from'             => $emailClass->fromMailer,
                    'to'               => $order->customer->email,
                    'subject'          => $emailClass->subject,
                    'message'          => $emailClass->render(),
                    'template'         => 'order-confirmation',
                    'additional_data'  => $order->id,
                    'status'           => 'pre-send',
                    'store_website_id' => ($storeWebsiteOrder) ? $storeWebsiteOrder->store_website_id : null,
                ]);

                \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');
            }
        }

        return redirect()->back()->withSuccess('You have successfully sent confirmation email!');
    }

    public function generateInvoice($id)
    {
        $order     = Order::find($id);
        $consignor = [
            'name'    => Setting::get('consignor_name'),
            'address' => Setting::get('consignor_address'),
            'city'    => Setting::get('consignor_city'),
            'country' => Setting::get('consignor_country'),
            'phone'   => Setting::get('consignor_phone'),
        ];

        $view = view('emails.orders.invoice-pdf', [
            'order'     => $order,
            'consignor' => $consignor,
        ])->render();

        $pdf = new Dompdf;
        $pdf->loadHtml($view);
        $pdf->render();
        $pdf->stream();
    }

    public function uploadForApproval(Request $request, $id)
    {
        $this->validate($request, [
            'images' => 'required',
        ]);

        $delivery_approval = Order::find($id)->delivery_approval;

        if ($request->hasfile('images')) {
            foreach ($request->file('images') as $image) {
                $media = MediaUploader::fromSource($image)
                    ->toDirectory('order/' . floor($delivery_approval->id / config('constants.image_per_folder')))
                    ->upload();
                $delivery_approval->attachMedia($media, config('constants.media_tags'));
            }
        }

        return redirect()->back()->with('success', 'You have successfully uploaded delivery images for approval!');
    }

    public function deliveryApprove(Request $request, $id)
    {
        $delivery_approval = DeliveryApproval::find($id);

        $delivery_approval->approved = 1;

        $delivery_approval->save();

        return redirect()->back()->with('success', 'You have successfully approved delivery!');
    }

    public function downloadPackageSlip($id)
    {
        $waybill = Waybill::find($id);

        return Storage::disk('files')->download('waybills/' . $waybill->package_slip);
    }

    public function refundAnswer(Request $request, $id)
    {
        $order = Order::find($id);

        $order->refund_answer      = $request->answer;
        $order->refund_answer_date = Carbon::now();

        $order->save();

        return response('success');
    }

    public function sendSuggestion(Request $request, $id)
    {
        $params = [
            'number'  => null,
            'status'  => 1, // message status for auto messaging
            'user_id' => 6,
        ];

        $order = Order::with(['Order_Product' => function ($query) {
            $query->with('Product');
        }])->where('id', $id)->first();

        if (count($order->order_product) > 0) {
            $order_products_count = count($order->order_product);
            $limit                = 20 < $order_products_count ? 1 : (int) round(20 / $order_products_count);

            foreach ($order->order_product as $order_product) {
                $brand    = (int) $order_product->product->brand;
                $category = (int) $order_product->product->category;

                if ($category != 0 && $category != 1 && $category != 2 && $category != 3) {
                    $is_parent         = Category::isParent($category);
                    $category_children = [];

                    if ($is_parent) {
                        $children = Category::find($category)->childs()->get();

                        foreach ($children as $child) {
                            array_push($category_children, $child->id);
                        }
                    } else {
                        $children = Category::find($category)->parent->childs;

                        foreach ($children as $child) {
                            array_push($category_children, $child->id);
                        }

                        if (($key = array_search($category, $category_children)) !== false) {
                            unset($category_children[$key]);
                        }
                    }
                }

                if ($brand && $category != 1) {
                    $products = Product::where('brand', $brand)->whereIn('category', $category_children)->latest()->take($limit)->get();
                } elseif ($brand) {
                    $products = Product::where('brand', $brand)->latest()->take($limit)->get();
                } elseif ($category != 1) {
                    $products = Product::where('category', $category)->latest()->take($limit)->get();
                }

                if (count($products) > 0) {
                    $params['customer_id'] = $order->customer_id;

                    $chat_message = ChatMessage::create($params);

                    foreach ($products as $product) {
                        $chat_message->attachMedia($product->getMedia(config('constants.media_tags'))->first(), config('constants.media_tags'));
                    }
                }
            }
        }

        $order->refund_answer      = 'yes';
        $order->refund_answer_date = Carbon::now();
        $order->save();

        return redirect()->back()->withSuccess('You have successfully sent suggestions!');
    }

    public function sendDelivery(Request $request)
    {
        $params = [
            'number'   => null,
            'user_id'  => Auth::id() ?? 6,
            'approved' => 0,
            'status'   => 1,
        ];

        $auto_reply = AutoReply::where('type', 'auto-reply')->where('keyword', 'product-delivery-times')->first();

        $exploded = explode('[', $auto_reply->reply);

        $customer         = Customer::find($request->customer_id);
        $message          = $exploded[0];
        $express_shipping = '';
        $normal_shipping  = '';
        $in_stock         = 0;
        $normal_products  = 0;

        foreach ($request->selected_product as $key => $product_id) {
            $product = Product::find($product_id);

            if ($product->supplier == 'In-stock') {
                $express_shipping .= $in_stock == 0 ? $product->name : ", $product->name";
                $in_stock++;
            } else {
                $normal_shipping .= $normal_products == 0 ? $product->name : ", $product->name";
                $normal_products++;
            }
        }

        $second_explode = explode(']', $exploded[1]);
        $shipping_times = explode('/', $second_explode[0]);

        if ($in_stock >= 1) {
            $express_shipping .= $shipping_times[0];
        }

        if ($normal_products >= 1) {
            $normal_shipping .= $shipping_times[1];
        }

        $message .= $express_shipping . $normal_shipping . $second_explode[1];

        $params['customer_id'] = $customer->id;
        $params['message']     = $message;

        $chat_message = ChatMessage::create($params);

        $histories = CommunicationHistory::where('model_id', $customer->id)->where('model_type', Customer::class)->where('type', 'initiate-followup')->where('is_stopped', 0)->get();

        foreach ($histories as $history) {
            $history->is_stopped = 1;
            $history->save();
        }

        CommunicationHistory::create([
            'model_id'   => $customer->id,
            'model_type' => Customer::class,
            'type'       => 'initiate-followup',
            'method'     => 'whatsapp',
        ]);

        return response('success');
    }

    public function updateStatus(Request $request, $id)
    {
        $order = Order::find($id);

        StatusChange::create([
            'model_id'    => $order->id,
            'model_type'  => Order::class,
            'user_id'     => Auth::id(),
            'from_status' => $order->order_status,
            'to_status'   => $request->status,
        ]);

        $order->order_status = $request->status;
        $order->save();

        if (! $order->is_sent_initial_advance() && $order->order_status == OrderHelper::$proceedWithOutAdvance && $order->order_type == 'online') {
            $product_names = '';
            foreach (OrderProduct::where('order_id', $order->id)->get() as $order_product) {
                $product_names .= $order_product->product ? $order_product->product->name . ', ' : '';
            }

            $delivery_time = $order->estimated_delivery_date ? Carbon::parse($order->estimated_delivery_date)->format('d \of\ F') : Carbon::parse($order->order_date)->addDays(15)->format('d \of\ F');

            $auto_reply = AutoReply::where('type', 'auto-reply')->where('keyword', 'cod-online-confirmation')->first();

            $auto_message = preg_replace('/{product_names}/i', $product_names, $auto_reply->reply);
            $auto_message = preg_replace('/{delivery_time}/i', $delivery_time, $auto_message);

            $followup_message = AutoReply::where('type', 'auto-reply')->where('keyword', 'cod-online-followup')->first()->reply;
            $requestData      = new Request();
            $requestData2     = new Request();
            $requestData->setMethod('POST');
            $requestData2->setMethod('POST');
            $requestData->request->add(['customer_id' => $order->customer->id, 'message' => $auto_message, 'status' => 2]);
            $requestData2->request->add(['customer_id' => $order->customer->id, 'message' => $followup_message, 'status' => 2]);

            app(\App\Http\Controllers\WhatsAppController::class)->sendMessage($requestData, 'customer');
            app(\App\Http\Controllers\WhatsAppController::class)->sendMessage($requestData2, 'customer');

            CommunicationHistory::create([
                'model_id'   => $order->id,
                'model_type' => Order::class,
                'type'       => 'initial-advance',
                'method'     => 'whatsapp',
            ]);
        } elseif (! $order->is_sent_online_confirmation() && $order->order_status == \App\Helpers\OrderHelper::$prepaid) {
            $auto_message = AutoReply::where('type', 'auto-reply')->where('keyword', 'prepaid-order-confirmation')->first()->reply;
            $requestData  = new Request();
            $requestData->setMethod('POST');
            $requestData->request->add(['customer_id' => $order->customer->id, 'message' => $auto_message, 'status' => 2]);

            app(\App\Http\Controllers\WhatsAppController::class)->sendMessage($requestData, 'customer');

            CommunicationHistory::create([
                'model_id'   => $order->id,
                'model_type' => Order::class,
                'type'       => 'online-confirmation',
                'method'     => 'whatsapp',
            ]);
        }

        if ($order->order_status == \App\Helpers\OrderHelper::$refundToBeProcessed) {
            $refund = Refund::where('order_id', $order->id)->first();

            if (! $refund) {
                Refund::create([
                    'customer_id'     => $order->customer->id,
                    'order_id'        => $order->id,
                    'type'            => 'Cash',
                    'date_of_request' => Carbon::now(),
                    'date_of_issue'   => Carbon::now()->addDays(10),
                ]);
            }

            if ($order->payment_mode == 'paytm') {
                if ($order->customer) {
                    $all_amount = 0;

                    if ($order->order_product) {
                        foreach ($order->order_product as $order_product) {
                            $all_amount += $order_product->product_price;
                        }
                    }

                    $order->customer->credit += $all_amount;
                    $order->customer->save();
                }
            } elseif ($order->payment_mode != 'paytm' || $order->advance_detail > 0) {
                if ($order->customer) {
                    $order->customer->credit += $order->advance_detail;
                    $order->customer->save();
                }
            }
        }

        if ($order->order_status == \App\Helpers\OrderHelper::$delivered) {
            if ($order->order_product) {
                foreach ($order->order_product as $order_product) {
                    if ($order_product->product) {
                        if ($order_product->product->supplier == 'In-stock') {
                            $order_product->product->supplier = '';
                            $order_product->product->save();
                        }
                    }
                }
            }

            if (! $order->is_sent_order_delivered()) {
                $message     = AutoReply::where('type', 'auto-reply')->where('keyword', 'order-delivery-confirmation')->first()->reply;
                $requestData = new Request();
                $requestData->setMethod('POST');
                $requestData->request->add(['customer_id' => $order->customer_id, 'message' => $message, 'status' => 2]);

                app(\App\Http\Controllers\WhatsAppController::class)->sendMessage($requestData, 'customer');

                CommunicationHistory::create([
                    'model_id'   => $order->id,
                    'model_type' => Order::class,
                    'type'       => 'order-delivered',
                    'method'     => 'whatsapp',
                ]);
            }
        }
    }

    public function sendRefund(Request $request, $id)
    {
        $order = Order::find($id);

        if (! $order->is_sent_refund_initiated()) {
            $product_names = '';
            foreach (OrderProduct::where('order_id', $order->id)->get() as $order_product) {
                $product_names .= $order_product->product ? $order_product->product->name . ', ' : '';
            }

            $auto_reply = AutoReply::where('type', 'auto-reply')->where('keyword', 'order-refund')->first();

            $auto_message = preg_replace('/{order_id}/i', $order->order_id, $auto_reply->reply);
            $auto_message = preg_replace('/{product_names}/i', $product_names, $auto_message);

            $requestData = new Request();
            $requestData->setMethod('POST');
            $requestData->request->add(['customer_id' => $order->customer->id, 'message' => $auto_message, 'status' => 2]);

            app(\App\Http\Controllers\WhatsAppController::class)->sendMessage($requestData, 'customer');

            CommunicationHistory::create([
                'model_id'   => $order->id,
                'model_type' => Order::class,
                'type'       => 'refund-initiated',
                'method'     => 'whatsapp',
            ]);

            $from_email = \App\Helpers::getFromEmail($order->customer->id);
            $emailClass = (new RefundProcessed($order->order_id, $product_names))->build();

            $storeWebsiteOrder = $order->storeWebsiteOrder;
            $email             = Email::create([
                'model_id'         => $order->id,
                'model_type'       => Order::class,
                'from'             => $from_email,
                'to'               => $order->customer->email,
                'subject'          => $emailClass->subject,
                'message'          => $emailClass->render(),
                'template'         => 'refund-initiated',
                'additional_data'  => $order->id,
                'status'           => 'pre-send',
                'store_website_id' => ($storeWebsiteOrder) ? $storeWebsiteOrder->store_website_id : null,
            ]);

            \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');
        }

        return response('success');
    }

    public function generateAWB(Request $request)
    {
        $options = [
            'trace'        => 1,
            'style'        => SOAP_DOCUMENT,
            'use'          => SOAP_LITERAL,
            'soap_version' => SOAP_1_2,
        ];

        $soap = new SoapClient('https://netconnect.bluedart.com/Ver1.8/ShippingAPI/Waybill/WayBillGeneration.svc?wsdl', $options);

        $soap->__setLocation('https://netconnect.bluedart.com/Ver1.8/ShippingAPI/Waybill/WayBillGeneration.svc');

        $soap->sendRequest  = true;
        $soap->printRequest = false;
        $soap->formatXML    = true;

        $actionHeader = new \SoapHeader('https://www.w3.org/5005/08/addressing', 'Action', 'https://tempuri.org/IWayBillGeneration/GenerateWayBill', true);

        $soap->__setSoapHeaders($actionHeader);

        $order = Order::find($request->order_id);

        $order->customer->name    = $request->customer_name;
        $order->customer->address = $request->customer_address1;
        $order->customer->city    = $request->customer_address2;
        $order->customer->pincode = $request->customer_pincode;

        $order->customer->save();

        $pickup_datetime = explode(' ', $request->pickup_time);
        $pickup_date     = $pickup_datetime[0];
        $pickup_time     = str_replace(':', '', $pickup_datetime[1]);

        $total_price = 0;

        foreach ($order->order_product as $product) {
            $total_price += $product->product_price;
        }

        $piece_count = $order->order_product()->count();

        $actual_weight = $request->box_width * $request->box_length * $request->box_height / 5000;

        $params = [
            'Request' => [
                'Consignee' => [
                    'ConsigneeAddress1' => $order->customer->address,
                    'ConsigneeAddress2' => $order->customer->city,
                    'ConsigneeMobile'   => $order->customer->phone,
                    'ConsigneeName'     => $order->customer->name,
                    'ConsigneePincode'  => $order->customer->pincode,
                ],
                'Services' => [
                    'ActualWeight'      => $actual_weight,
                    'CreditReferenceNo' => $order->id,
                    'PickupDate'        => $pickup_date,
                    'PickupTime'        => $pickup_time,
                    'PieceCount'        => $piece_count,
                    'DeclaredValue'     => 500,
                    'ProductCode'       => 'D',
                    'ProductType'       => 'Dutiables',
                    'Dimensions'        => [
                        'Dimension' => [
                            'Breadth' => $request->box_width,
                            'Count'   => $piece_count,
                            'Height'  => $request->box_height,
                            'Length'  => $request->box_length,
                        ],
                    ],
                ],
                'Shipper' => [
                    'CustomerAddress1' => '807, Hubtown Viva, Western Express Highway, Shankarwadi, Andheri East',
                    'CustomerAddress2' => 'Mumbai',
                    'CustomerCode'     => '382500',
                    'CustomerMobile'   => '022-62363488',
                    'CustomerName'     => 'Solo Luxury',
                    'CustomerPincode'  => '400060',
                    'IsToPayCustomer'  => '',
                    'OriginArea'       => 'BOM',
                ],
            ],
            'Profile' => [
                'Api_type'   => 'S',
                'LicenceKey' => env('BLUEDART_LICENSE_KEY'),
                'LoginID'    => env('BLUEDART_LOGIN_ID'),
                'Version'    => '1.3', ],
        ];

        $result = $soap->__soapCall('GenerateWayBill', [$params])->GenerateWayBillResult;

        if ($result->IsError) {
            if (is_array($result->Status->WayBillGenerationStatus)) {
                $error = '';
                foreach ($result->Status->WayBillGenerationStatus as $error_object) {
                    $error .= $error_object->StatusInformation . '. ';
                }
            } else {
                $error = $result->Status->WayBillGenerationStatus->StatusInformation;
            }

            return redirect()->back()->with('error', "$error");
        } else {
            Storage::disk('files')->put('waybills/' . $order->id . '_package_slip.pdf', $result->AWBPrintContent);

            $waybill                = new Waybill;
            $waybill->order_id      = $order->id;
            $waybill->awb           = $result->AWBNo;
            $waybill->box_width     = $request->box_width;
            $waybill->box_height    = $request->box_height;
            $waybill->box_length    = $request->box_length;
            $waybill->actual_weight = $actual_weight;
            $waybill->package_slip  = $order->id . '_package_slip.pdf';
            $waybill->pickup_date   = $request->pickup_time;
            $waybill->save();
        }

        return redirect()->back()->with('success', 'You have successfully generated AWB!');
    }

    public function calculateBalanceAmount(Order $order)
    {
        $order_instance = Order::where('id', $order->id)->with('order_product')->get()->first();

        $balance_amt = 0;

        foreach ($order_instance->order_product as $order_product) {
            $balance_amt += $order_product->product_price * $order_product->qty;
        }

        if (! empty($order_instance->advance_detail)) {
            $balance_amt -= $order_instance->advance_detail;
        }

        $order->update([
            'balance_amount' => $balance_amt,
        ]);
    }

    public function getTotalOrderPrice($order_instance)
    {
        $balance_amt = 0;

        foreach ($order_instance->order_product as $order_product) {
            $balance_amt += $order_product->product_price * $order_product->qty;
        }

        return $balance_amt;
    }

    /**
     * Remove the specified resource from storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function destroy(Order $order)
    {
        $order->delete();

        return redirect('order')->with('success', 'Order has been archived');
    }

    public function permanentDelete(Order $order)
    {
        $order_products = OrderProduct::where('order_id', '=', $order->id);

        $order_products->delete();
        $comments = Comment::where('subject_id', $order->id)->where('subject_type', Order::class);
        $comments->delete();

        $order->forceDelete();

        return redirect('order')->with('success', 'Order has been  deleted');
    }

    public function deleteOrderProduct(OrderProduct $order_product)
    {
        $key = request('key');
        if (! empty($key)) {
            $defaultData = session($key);
            if (! empty($defaultData['selected_product'])) {
                $postProducts = [];
                foreach ($defaultData['selected_product'] as $product) {
                    if ($product != $order_product->product_id) {
                        $postProducts = $product;
                    }
                }
                $defaultData['selected_product'] = $postProducts;
                session([$key => $defaultData]);
            }
        }
        $order_product->delete();

        return redirect()->back()->with('message', 'Product Detached');
    }

    public static function attachProduct($model_id, $product_id)
    {
        $product = Product::where('id', '=', $product_id)->get()->first();

        $order_product = OrderProduct::where('order_id', $model_id)->where('product_id', $product_id)->first();
        $order         = Order::find($model_id);
        $size          = '';

        if ($order && $order->customer && ($order->customer->shoe_size != '' || $order->customer->clothing_size != '')) {
            if ($product->category != 1) {
                if ($product->product_category->title != 'Clothing' || $product->product_category->title != 'Shoes') {
                    if ($product->product_category->parent && ($product->product_category->parent->title == 'Clothing' || $product->product_category->parent->title == 'Shoes')) {
                        if ($product->product_category->parent->title == 'Clothing') {
                            $size = $order->customer->clothing_size;
                        } else {
                            $size = $order->customer->shoe_size;
                        }
                    }
                } else {
                    if ($product->product_category->title == 'Clothing') {
                        $size = $order->customer->clothing_size;
                    } else {
                        $size = $order->customer->shoe_size;
                    }
                }
            }
        }

        if (empty($order_product)) {
            $product = OrderProduct::create([
                'order_id'      => $model_id,
                'product_id'    => $product->id,
                'sku'           => $product->sku,
                'product_price' => $product->price_special_offer != '' ? $product->price_special_offer : $product->price_inr_special,
                'color'         => $product->color,
                'size'          => $size,
            ]);

            $action = 'Attached';
        } else {
            $action = 'Attached';
        }

        return $action;
    }

    public function generateNextOrderId()
    {
        $previous = Order::withTrashed()->latest()->where('order_type', '=', 'Offline')->first(['order_id']);

        if (! empty($previous)) {
            $temp = explode('-', $previous);

            return 'OFF-' . (intval($temp[1]) + 1);
        }

        return 'OFF-1000001';
    }

    public function getOrderProductsWithProductData($order_id)
    {
        $orderProducts = OrderProduct::where('order_id', '=', $order_id)->get()->toArray();

        foreach ($orderProducts as $key => $value) {
            if (! empty($orderProducts[$key]['color'])) {
                $temp = Product::where('id', '=', $orderProducts[$key]['product_id'])
                    ->where('color', $orderProducts[$key]['color'])
                    ->get()->first();
            } else {
                $temp = Product::where('id', '=', $orderProducts[$key]['product_id'])
                    ->get()->first();
            }

            if (! empty($temp)) {
                $orderProducts[$key]['product']          = $temp;
                $orderProducts[$key]['product']['image'] = $temp->getMedia(config('constants.media_tags'))->first() ? getMediaUrl($temp->getMedia(config('constants.media_tags'))->first()) : '';
            }
        }

        return $orderProducts;
    }

    public function callManagement(Request $request)
    {
        $reservedCalls = \App\TwilioCallWaiting::with('storeWebsite')->leftJoin('customers as c', 'c.phone', \DB::raw('REPLACE(twilio_call_waitings.from, "+", "")'))->orderBy('twilio_call_waitings.created_at', 'desc')
            ->select(['twilio_call_waitings.*', 'c.name', 'c.email'])->get();

        return view('orders.call_management', compact('reservedCalls'));
    }

    public function getCurrentCallNumber()
    {
        $getnumber = TwilioDequeueCall::where('agent_id', Auth::id())->first();

        return response()->json([
            'number' => $getnumber->caller,
        ]);
    }

    public function getCurrentCallInformation()
    {
        try {
            $getnumber = TwilioDequeueCall::where('agent_id', Auth::id())->first();
            $agent     = TwilioAgent::where('user_id', Auth::id())->first();

            $users = \App\Customer::select('id')->where('phone', str_replace('+', '', $getnumber->caller))->get()->toArray();

            $allleads = [];
            $orders   = (new \App\Order())->newQuery()->with('customer')->leftJoin('store_website_orders as swo', 'swo.order_id', 'orders.id')
                ->leftJoin('order_products as op', 'op.order_id', 'orders.id')
                ->leftJoin('products as p', 'p.id', 'op.product_id')
                ->leftJoin('brands as b', 'b.id', 'p.brand')->groupBy('orders.id')
                ->where('orders.store_id', $agent->store_website_id)
                ->whereIn('customer_id', $users)
                ->select(['orders.*', \DB::raw('group_concat(b.name) as brand_name_list'), 'swo.website_id'])->orderBy('created_at', 'desc')->limit(5)->get();
            $allleads[] = $this->getLeadsInformation($users);
            if ($orders->count()) {
                foreach ($orders as &$value) {
                    $value->storeWebsite    = $value->storeWebsiteOrder ? ($value->storeWebsiteOrder->storeWebsite ?? 'N/A') : 'N/A';
                    $value->order_date      = Carbon::parse($value->order_date)->format('d-m-y');
                    $totalBrands            = explode(',', $value->brand_name_list);
                    $value->brand_name_list = (count($totalBrands) > 1) ? 'Multi' : $value->brand_name_list;
                    $value->status          = \App\Helpers\OrderHelper::getStatusNameById($value->order_status_id);
                }
            }

            return response()->json([
                'all_leads' => $allleads,
                'orders'    => $orders,
            ]);
        } catch (Exception $e) {
            return response()->json([
                'message' => $e->getMessage(),
            ], 500);
        }
    }

    private function getLeadsInformation($ids)
    {
        $source = \App\ErpLeads::leftJoin('products', 'products.id', '=', 'erp_leads.product_id')
            ->leftJoin('customers as c', 'c.id', 'erp_leads.customer_id')
            ->leftJoin('erp_lead_status as els', 'els.id', 'erp_leads.lead_status_id')
            ->leftJoin('categories as cat', 'cat.id', 'erp_leads.category_id')
            ->leftJoin('brands as br', 'br.id', 'erp_leads.brand_id')
            ->whereIn('erp_leads.customer_id', $ids)
            ->orderBy('erp_leads.id', 'desc')
            ->select(['erp_leads.*', 'products.name as product_name', 'cat.title as cat_title', 'br.name as brand_name', 'els.name as status_name', 'c.name as customer_name', 'c.id as customer_id']);

        $total  = $source->count();
        $source = $source->latest()->limit(5)->get();

        foreach ($source as $key => $value) {
            $source[$key]->media_url = null;
            $media                   = $value->getMedia(config('constants.media_tags'))->first();
            if ($media) {
                $source[$key]->media_url = getMediaUrl($media);
            }

            if (empty($source[$key]->media_url) && $value->product_id) {
                $product = \App\Product::find($value->product_id);
                $media   = $product->getMedia(config('constants.media_tags'))->first();
                if ($media) {
                    $source[$key]->media_url = getMediaUrl($media);
                }
            }
        }

        return $source;
    }

    public function missedCalls(Request $request)
    {
        $callBusyMessages = CallBusyMessage::with(['status' => function ($q) {
            return $q->select('id', 'name', 'label');
        }])
            ->leftjoin('call_recordings as cr', 'cr.twilio_call_sid', 'call_busy_messages.caller_sid')
            ->leftjoin('twilio_call_data as tcd', 'tcd.call_sid', 'call_busy_messages.caller_sid')
            ->select('call_busy_messages.*', 'cr.recording_url as recording_urls', 'tcd.aget_user_id', 'tcd.from', 'tcd.to', 'tcd.call_data')
            ->groupby('call_busy_messages.caller_sid')
            ->orderBy('call_busy_messages.id', 'DESC');

        if (! empty($request->filterStatus)) {
            $callBusyMessages->where('call_busy_message_statuses_id', $request->filterStatus);
        }

        if (! empty($request->filterWebsite)) {
            $callBusyMessages->whereHas('customer.storeWebsite', function (Builder $query) use ($request) {
                $query->where('id', $request->filterWebsite);
            });
        }

        $callBusyMessages_pagination = $callBusyMessages->paginate(Setting::get('pagination'));
        $callBusyMessages            = $callBusyMessages->paginate(Setting::get('pagination'))->toArray();

        foreach ($callBusyMessages['data'] as $key => $value) {
            $storeId      = null;
            $activeNumber = TwilioActiveNumber::where('phone_number', '+' . trim($value['to'], '+'))->first();
            if ($activeNumber) {
                $storeId = StoreWebsiteTwilioNumber::where('twilio_active_number_id', $activeNumber->id)->first();
            }

            if (is_numeric($value['twilio_call_sid'])) {
                $formatted_phone = str_replace('+', '', $value['twilio_call_sid']);
                if (! empty($storeId->store_website_id)) {
                    $customer_array = Customer::with('storeWebsite', 'orders')->where('phone', $formatted_phone)->where('store_website_id', $storeId->store_website_id)->get()->toArray();
                }

                if ($value['aget_user_id'] != '') {
                    $user_data  = User::where('id', $value['aget_user_id'])->first();
                    $agent_name = $user_data->name;
                } else {
                    $agent_name = '';
                }

                if (! empty($customer_array)) {
                    $callBusyMessages['data'][$key]['customerid']       = $customer_array[0]['id'];
                    $callBusyMessages['data'][$key]['customer_name']    = $customer_array[0]['name'];
                    $callBusyMessages['data'][$key]['store_website_id'] = $customer_array[0]['store_website_id'];

                    $callBusyMessages['data'][$key]['agent']     = $agent_name;
                    $callBusyMessages['data'][$key]['from']      = $value['from'];
                    $callBusyMessages['data'][$key]['to']        = $value['to'];
                    $callBusyMessages['data'][$key]['call_data'] = $value['call_data'];

                    if (isset($customer_array[0]['store_website']) && count($customer_array[0]['store_website'])) {
                        $callBusyMessages['data'][$key]['store_website_name'] = $customer_array[0]['store_website']['title'];
                    }

                    if (! empty($customer_array[0]['lead'])) {
                        $callBusyMessages['data'][$key]['lead_id'] = $customer_array[0]['lead']['id'];
                    }
                }
            }
        }

        $storeWebsite    = StoreWebsite::pluck('title', 'id');
        $selectedStatus  = $request->filterStatus;
        $selectedWebsite = $request->filterWebsite;
        $allStatuses     = CallBusyMessageStatus::get();

        $reservedCalls = \App\TwilioCallWaiting::leftJoin('customers as c', 'c.phone', \DB::raw('REPLACE(twilio_call_waitings.from, "+", "")'))->orderBy('twilio_call_waitings.created_at', 'desc')
            ->select(['twilio_call_waitings.*', 'c.name', 'c.email'])->get();

        return view('orders.missed_call', compact('callBusyMessages', 'allStatuses', 'storeWebsite', 'selectedStatus', 'selectedWebsite', 'callBusyMessages_pagination', 'reservedCalls'));
    }

    public function getOrdersFromMissedCalls(Request $request)
    {
        $callBusyMessages = CallBusyMessage::findOrFail($request->id);

        $formatted_phone = str_replace('+91', '', $callBusyMessages->twilio_call_sid);

        $customer_array = Customer::with('orders')->where('phone', 'LIKE', "%$formatted_phone%")->first();

        return response()->json($customer_array->orders);
    }

    public function callsHistory(Request $request)
    {
        $calls        = CallHistory::latest();
        $storeWebId   = $request->get('storewebsite_filter');
        $customerIds  = $request->get('customer_filter');
        $status       = $request->get('status_filter');
        $customer_num = $request->get('phone_number') ? $request->get('phone_number') : '';
        $storeWebsite = $customer = $callHistoryStatus = [];
        if ((int) $storeWebId > 0) {
            $calls        = $calls->whereIn('store_website_id', $storeWebId);
            $storeWebsite = StoreWebsite::whereIn('id', $storeWebId)->orderBy('website')->get();
        }
        if ((int) $customerIds > 0) {
            $calls    = $calls->whereIn('customer_id', $customerIds);
            $customer = Customer::orWhereIn('id', $customerIds)->orderBy('name')->get();
        }
        if ((int) $status > 0) {
            $calls = $calls->where(function ($query) use ($status) {
                foreach ($status as $term) {
                    $query->orWhere('status', 'like', "%$term%");
                }
            });
            $callHistoryStatus = CallHistory::where(function ($query) use ($status) {
                foreach ($status as $term) {
                    $query->orWhere('status', 'like', "%$term%");
                }
            })->groupBy('status')->get();
        }

        if (isset($request->phone_number)) {
            $phoneNumber   = explode(',', $request->phone_number);
            $phone         = explode(',', $request->phone_number);
            $customerPhone = Customer::select(\DB::raw('group_concat(id) as customer_ids'))->where(function ($query) use ($phone) {
                foreach ($phone as $term) {
                    $query->orWhere('phone', 'like', "%$term%");
                }
            })->first();
            if (! empty($customerPhone->customer_ids)) {
                $customer_ids = explode(',', $customerPhone->customer_ids);
                $calls        = $calls->whereIn('customer_id', $customer_ids);
            }
        }
        $calls = $calls->paginate(Setting::get('pagination'));

        return view('orders.call_history', [
            'calls'             => $calls,
            'customer'          => $customer,
            'storeWebsite'      => $storeWebsite,
            'callHistoryStatus' => $callHistoryStatus,
            'customer_num'      => $customer_num,
        ]);
    }

    public function createProductOnMagento(Request $request, $id)
    {
        $order               = Order::find($id);
        $total_special_price = 0;

        foreach ($order->order_product as $order_product) {
            $total_special_price += $order_product->product_price;

            if ($order_product->product->category != 1) {
                $category      = Category::find($order_product->product->category);
                $url_structure = [];
                $category_id   = $category->magento_id;

                if ($category->parent) {
                    $parent           = $category->parent;
                    $url_structure[0] = $parent->title;
                    $category_id      = $parent->magento_id;

                    if ($parent->parent) {
                        $second_parent    = $parent->parent;
                        $url_structure[0] = $second_parent->title;
                        $url_structure[1] = $parent->title;
                    }
                }
            }
        }

        dd($url_structure, $category_id);

        $options = [
            'trace'              => true,
            'connection_timeout' => 120,
            'wsdl_cache'         => WSDL_CACHE_NONE,
        ];

        $proxy     = new \SoapClient(config('magentoapi.url'), $options);
        $sessionId = $proxy->login(config('magentoapi.user'), config('magentoapi.password'));

        /**
         * Configurable product
         */
        $productData = [
            'categories'        => $category_id,
            'name'              => 'Test Product from ERP',
            'description'       => '<p></p>',
            'short_description' => 'Short Test Description from ERP',
            'website_ids'       => [1],
            // Id or code of website
            'status' => 1,
            // 1 = Enabled, 2 = Disabled
            'visibility' => 1,
            // 1 = Not visible, 2 = Catalog, 3 = Search, 4 = Catalog/Search
            'tax_class_id' => 2,
            // Default VAT
            'weight'     => 0,
            'stock_data' => [
                'use_config_manage_stock' => 1,
                'manage_stock'            => 1,
            ],
            'price' => $total_special_price,
            // Same price than configurable product, no price change
            'special_price'   => '',
            'associated_skus' => '',
            // Simple products to associate
            'configurable_attributes' => [155],
        ];
        // Creation of configurable product
        $result      = $proxy->catalogProductCreate($sessionId, 'configurable', 14, "CUSTOMPRO$order->id", $productData);
        $product_url = "https://www.sololuxury.co.in/$url_structure[0]/$url_structure[1]/show-all/test-product-from-erp-$result.html";
        dd($product_url, $result);

        return $result;
    }

    /**
     * This function is use for Create Order email send journey log
     *
     * @param mixed $order_id
     * @param mixed $steps
     * @param mixed $modelType
     * @param mixed $sendType
     * @param mixed $seen
     * @param mixed $from
     * @param mixed $to
     * @param mixed $subject
     * @param mixed $message
     * @param mixed $template
     * @param mixed $errorMsg
     * @param mixed $storeWebsiteId
     *
     * @return created data
     */
    public function createEmailSendJourneyLog($order_id = '', $steps = '', $modelType = '', $sendType = '', $seen = '0', $from = '', $to = '', $subject = '', $message = '', $template = '', $errorMsg = '', $storeWebsiteId = '')
    {
        return OrderEmailSendJourneyLog::create(
            [
                'order_id'         => $order_id,
                'steps'            => $steps,
                'model_type'       => $modelType,
                'send_type'        => $sendType,
                'seen'             => $seen,
                'from_email'       => $from,
                'to_email'         => $to,
                'subject'          => $subject,
                'message'          => $message,
                'template'         => $template,
                'error_msg'        => $errorMsg,
                'store_website_id' => $storeWebsiteId,
            ]
        );
    }

    public function statusChange(Request $request)
    {
        $id          = $request->get('id');
        $status      = $request->get('status');
        $message     = $request->get('message');
        $sendmessage = $request->get('sendmessage');
        $order_via   = $request->order_via ?: [];
        if (! empty($id) && ! empty($status)) {
            $order   = \App\Order::where('id', $id)->first();
            $statuss = OrderStatus::where('id', $status)->first();
            if ($order) {
                $old_status             = $order->order_status_id;
                $order->order_status    = $statuss->status;
                $order->order_status_id = $status;
                $order->save();

                $history             = new OrderStatusHistory;
                $history->order_id   = $order->id;
                $history->old_status = $old_status;
                $history->new_status = $status;
                $history->user_id    = Auth::user()->id;
                $history->save();

                if (in_array('email', $order_via)) {
                    if (isset($request->sendmessage) && $request->sendmessage == '1') {
                        //Sending Mail on changing of order status
                        try {
                            $from_mail_address = $request->from_mail;
                            $to_mail_address   = $request->to_mail;
                            // send order canellation email
                            if (strtolower($statuss->status) == 'cancel') {
                                $emailClass = (new \App\Mails\Manual\OrderCancellationMail($order))->build();

                                if ($from_mail_address != '') {
                                    $emailClass->fromMailer = $from_mail_address;
                                }
                                if ($to_mail_address != '') {
                                    $order->customer->email = $to_mail_address;
                                }

                                $storeWebsiteOrder = $order->storeWebsiteOrder;
                                $email             = Email::create([
                                    'model_id'   => $order->id,
                                    'model_type' => Order::class,
                                    'from'       => $emailClass->fromMailer,
                                    'to'         => $order->customer->email,
                                    'subject'    => $emailClass->subject,
                                    'message'    => $request->message,
                                    // 'message'          => $emailClass->render(),
                                    'template'         => 'order-cancellation-update',
                                    'additional_data'  => $order->id,
                                    'status'           => 'pre-send',
                                    'store_website_id' => (isset($storeWebsiteOrder)) ? $storeWebsiteOrder->store_website_id : null,
                                    'is_draft'         => 0,
                                ]);

                                \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');
                                $this->createEmailSendJourneyLog($id, 'Email type via Order update status with ' . $statuss->status, Order::class, 'outgoing', '0', $emailClass->fromMailer, $order->customer->email, $emailClass->subject, $request->message, '', '', $storeWebsiteOrder->website_id);
                            } else {
                                $emailClass = (new \App\Mails\Manual\OrderStatusChangeMail($order))->build();
                                if ($from_mail_address != '') {
                                    $emailClass->fromMailer = $from_mail_address;
                                }
                                if ($to_mail_address != '') {
                                    $order->customer->email = $to_mail_address;
                                }

                                $storeWebsiteOrder = $order->storeWebsiteOrder;
                                $email             = Email::create([
                                    'model_id'        => $order->id,
                                    'model_type'      => Order::class,
                                    'from'            => $emailClass->fromMailer,
                                    'to'              => $order->customer->email,
                                    'subject'         => $emailClass->subject,
                                    'message'         => $request->custom_email_content,
                                    'template'        => 'order-status-update',
                                    'additional_data' => $order->id,
                                    'status'          => 'pre-send',
                                    'is_draft'        => 0,
                                ]);

                                \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');
                                $this->createEmailSendJourneyLog($id, 'Email type via Order update status with ' . $statuss->status, Order::class, 'outgoing', '0', $emailClass->fromMailer, $order->customer->email, $emailClass->subject, $request->message, '', '', $storeWebsiteOrder->website_id);
                            }
                        } catch (Exception $e) {
                            $this->createEmailCommonExceptionLog($order->id, $e->getMessage(), 'email');
                            $this->createEmailSendJourneyLog($id, 'Email type via Error', Order::class, 'outgoing', '0', $from_mail_address, $to_mail_address, $emailClass->subject, $request->message, '', $e->getMessage(), $order->storeWebsiteOrder);
                            \Log::info('Sending mail issue at the ordercontroller #2215 ->' . $e->getMessage());
                        }
                    } else {
                        $emailClass = (new \App\Mails\Manual\OrderStatusChangeMail($order))->build();

                        $storeWebsiteOrder = $order->storeWebsiteOrder;
                        $email             = Email::create([
                            'model_id'         => $order->id,
                            'model_type'       => Order::class,
                            'from'             => $emailClass->fromMailer,
                            'to'               => $order->customer->email,
                            'subject'          => $emailClass->subject,
                            'template'         => 'order-status-update',
                            'additional_data'  => $order->id,
                            'status'           => 'pre-send',
                            'store_website_id' => ($storeWebsiteOrder) ? $storeWebsiteOrder->store_website_id : null,
                            'is_draft'         => 0,
                        ]);

                        \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');
                        $this->createEmailSendJourneyLog($id, 'Order update status with ' . $statuss->status, Order::class, 'outgoing', '0', $emailClass->fromMailer, $order->customer->email, $emailClass->subject, $request->message, '', '', $storeWebsiteOrder->website_id);
                    }
                }

                if (in_array('sms', $order_via)) {
                    if (isset($request->sendmessage) && $request->sendmessage == '1') {
                        if (isset($order->storeWebsiteOrder)) {
                            $website = \App\Website::where('id', $order->storeWebsiteOrder->website_id)->first();

                            $receiverNumber = $order->contact_detail;
                            \App\Jobs\TwilioSmsJob::dispatch($receiverNumber, $request->message, $website->store_website_id, $order->id);
                            $this->createEmailSendJourneyLog($id, 'Email type IVA SMS Order update status with ' . $statuss->status, Order::class, 'outgoing', '0', $emailClass->fromMailer, $order->customer->email, $emailClass->subject, 'Phone : ' . $receiverNumber . ' <br/> ' . $request->message, '', '', $website->website_id);
                        }
                    }
                }
            }
            //Sending Mail on changing of order status
            if (isset($request->sendmessage) && $request->sendmessage == '1') {
                //sending order message to the customer
                UpdateOrderStatusMessageTpl::dispatch($order->id, request('message', null))->onQueue('customer_message');
            }
            $storeWebsiteOrder = StoreWebsiteOrder::where('order_id', $order->id)->first();
            if ($storeWebsiteOrder) {
                $website = StoreWebsite::find($storeWebsiteOrder->website_id);
                if ($website) {
                    $store_order_status = Store_order_status::where('order_status_id', $status)->where('store_website_id', $storeWebsiteOrder->website_id)->first();
                    if ($store_order_status) {
                        $magento_status = StoreMasterStatus::find($store_order_status->store_master_status_id);
                        if ($magento_status) {
                            $magentoHelper = new MagentoHelperv2;
                            $result        = $magentoHelper->changeOrderStatus($order, $website, $magento_status->value, '', '');
                            $this->createEmailSendJourneyLog($id, 'Magento Order update status with ' . $statuss->status, Order::class, 'outgoing', '0', $request->from_mail, $request->to_mail, 'Magento replay', $request->message, '', '', $storeWebsiteOrder->website_id);
                            /**
                             *check if response has error
                             */
                            $response = $result->getData();
                            if (isset($response) && isset($response->status) && $response->status == false) {
                                $this->createOrderMagentoErrorLog($order->id, $response->error);
                                $this->createEmailSendJourneyLog($id, 'Magento Error', Order::class, 'outgoing', '0', $request->from_mail, $request->to_mail, 'Magento Error', $response->error, '', '', $storeWebsiteOrder->website_id);

                                return response()->json($response->error, 400);
                            }
                        } else {
                            $this->createOrderMagentoErrorLog($order->id, 'Store MasterStatus Not Present');
                            $this->createEmailSendJourneyLog($id, 'Magento Error', Order::class, 'outgoing', '0', $request->from_mail, $request->to_mail, 'Magento Error Store MasterStatus Not Present', '', '', '', $storeWebsiteOrder->website_id);

                            return response()->json('Store MasterStatus Not Present', 400);
                        }
                    } else {
                        $this->createOrderMagentoErrorLog($order->id, 'Store Order Status Not Present');
                        $this->createEmailSendJourneyLog($id, 'Magento Error', Order::class, 'outgoing', '0', $request->from_mail, $request->to_mail, 'Magento Error Store Order Status Not Present', '', '', '', $storeWebsiteOrder->website_id);

                        return response()->json('Store Order Status Not Present', 400);
                    }
                } else {
                    $this->createOrderMagentoErrorLog($order->id, 'Website Order Not Present');
                    $this->createEmailSendJourneyLog($id, 'Magento Error', Order::class, 'outgoing', '0', $request->from_mail, $request->to_mail, 'Magento Error Store Website Order Not Present', '', '', '', '');

                    return response()->json('Website Order Not Present', 400);
                }
                $storeWebsiteOrder->update(['order_id', $status]);
            } else {
                $this->createOrderMagentoErrorLog($order->id, 'Store Website Order Not Present');
                $this->createEmailSendJourneyLog($id, 'Magento Error', Order::class, 'outgoing', '0', $request->from_mail, $request->to_mail, 'Magento Error Store Website Order Not Present', '', '', '', '');

                return response()->json('Store Website Order Not Present', 400);
            }
        }

        return response()->json('Success', 200);
    }

    /**
     * This function is use for List Order Exception Error Log
     *
     * @param Request $request Request
     *
     * @return view;
     */
    public function getOrderEmailSendJourneyLog(Request $request)
    {
        try {
            $logs = new OrderEmailSendJourneyLog();

            $from_email = $request->get('from_email');
            $to_email   = $request->get('to_email');
            $keyword    = $request->get('keyword');

            if ($from_email) {
                $logs = $logs->where('from_email', $from_email);
            }

            if ($to_email) {
                $logs = $logs->where('to_email', $to_email);
            }

            if (! empty($keyword)) {
                $logs = $logs->where(function ($q) use ($keyword) {
                    $q->orWhere('subject', 'LIKE', '%' . $keyword . '%')
                        ->orWhere('order_id', 'LIKE', '%' . $keyword . '%')
                        ->orWhere('steps', 'LIKE', '%' . $keyword . '%');
                });
            }

            $logs = $logs->get();

            $orderJourney = $logs->groupBy('order_id')->map(function ($group) {
                return $group->last();
            });

            // Group the logs by order_id
            $groupedLogs = $logs->groupBy('order_id')->map(function ($item) {
                // Within each order_id group, further group the logs by steps starting with "<Step Names>"
                $groupedSteps = $item->groupBy(function ($log) {
                    if (strpos($log->steps, 'Status Change') === 0) {
                        return 'Status Change';
                    }
                    if (strpos($log->steps, 'Email type via Order update status') === 0) {
                        return 'Email type via Order update status';
                    }
                    if (strpos($log->steps, 'Email type via Error') === 0) {
                        return 'Email type via Error';
                    }
                    if (strpos($log->steps, 'Email type IVA SMS Order update status') === 0) {
                        return 'Email type IVA SMS Order update status';
                    }
                    if (strpos($log->steps, 'Magento Order update status') === 0) {
                        return 'Magento Order update status';
                    }
                    if (strpos($log->steps, 'Magento Error') === 0) {
                        return 'Magento Error';
                    }
                    // For items that do not start with '<Step Names>', return the original steps
                    return $log->steps;
                });

                // Sort the logs within each steps group by 'created_at' in descending order
                return $groupedSteps->map(function ($logs) {
                    return $logs->sortByDesc('created_at');
                });
            });

            $allLogs = OrderEmailSendJourneyLog::all();

            $groupByOrders = $allLogs->reject(function ($log) {
                return empty($log->order_id);
            })->groupBy('order_id')->keys()->toArray();

            $groupByFromEmail = $allLogs->reject(function ($log) {
                return empty($log->from_email);
            })->groupBy('from_email')->keys()->toArray();

            $groupByToEmail = $allLogs->reject(function ($log) {
                return empty($log->to_email);
            })->groupBy('to_email')->keys()->toArray();

            if (count($orderJourney) > 0) {
                return view('orders.email_send_journey', compact('orderJourney', 'groupedLogs', 'groupByOrders', 'groupByFromEmail', 'groupByToEmail'));
            } else {
                return redirect()->back()->with('error', 'Record not found');
            }
        } catch (Exception $e) {
            return redirect()->back()->with('error', $e->getMessage());
        }
    }

    public function getOrderEmailSendJourneyStepLog(Request $request)
    {
        $stepName = $request->input('step_name');
        $orderId  = $request->input('order_id');

        // Fetch the step history data from the database using the $stepName and $orderId
        $stepHistoryData = OrderEmailSendJourneyLog::where('steps', 'LIKE', '%' . $stepName . '%')
            ->where('order_id', $orderId)
            ->orderBy('created_at', 'desc')
            ->get();

        // Return the step history data in a Blade view (step_history_modal_content.blade.php)
        return view('orders.email_send_journey_step_history_modal_content', compact('stepHistoryData'));
    }

    /**
     * This function is used to list the Order Status Journey
     *
     * @param Request $request Request
     *
     * @return view;
     */
    public function getOrderStatusJourney(Request $request)
    {
        $orders          = Order::paginate(25);
        $orderStatusList = OrderHelper::getStatus();

        if ($request->ajax()) {
            return response()->json([
                'tbody' => view('orders.partials.order-status', compact('orders', 'orderStatusList'))->render(),
            ], 200);
        }

        return view('orders.order-status-journey', compact('orders', 'orderStatusList'));
    }

    /**
     * This function is used to list the Order Journey
     *
     * @param Request $request Request
     *
     * @return view;
     */
    public function getOrderJourney(Request $request)
    {
        $filter_order        = $request->input('filter_order');
        $filer_customer_list = $request->filer_customer_list ?? '';

        $orders = Order::with('order_product', 'order_product.order_product_details', 'customer');

        if ($filter_order != '') {
            $orders = $orders->where('order.order_id', $filter_order);
        }

        if ($filer_customer_list != '') {
            $orders = $orders->whereHas('customer', function ($query) use ($filer_customer_list) {
                $query->whereIn('customers.id', $filer_customer_list);
            });
        }
        $orders = $orders->latest('id')->paginate(25);

        $orderStatusList = OrderStatus::pluck('status', 'id')->all();

        $datatableModel = DataTableColumn::select('column_name')->where('user_id', auth()->user()->id)->where('section_name', 'get-order-journey')->first();

        $dynamicColumnsToShowoj = [];
        if (! empty($datatableModel->column_name)) {
            $hideColumns            = $datatableModel->column_name ?? '';
            $dynamicColumnsToShowoj = json_decode($hideColumns, true);
        }

        if ($request->ajax()) {
            return response()->json([
                'tbody' => view('orders.partials.order-journey', compact('orders', 'orderStatusList', 'dynamicColumnsToShowoj'))->render(),
            ], 200);
        }

        $customer_list = Customer::pluck('name', 'id');

        return view('orders.order-journey', compact('orders', 'orderStatusList', 'dynamicColumnsToShowoj', 'customer_list'));
    }

    public function columnVisbilityUpdate(Request $request)
    {
        $userCheck = DataTableColumn::where('user_id', auth()->user()->id)->where('section_name', 'get-order-journey')->first();

        if ($userCheck) {
            $column               = DataTableColumn::find($userCheck->id);
            $column->section_name = 'get-order-journey';
            $column->column_name  = json_encode($request->column_oj);
            $column->save();
        } else {
            $column               = new DataTableColumn();
            $column->section_name = 'get-order-journey';
            $column->column_name  = json_encode($request->column_oj);
            $column->user_id      = auth()->user()->id;
            $column->save();
        }

        return redirect()->back()->with('success', 'column visiblity Added Successfully!');
    }

    public function getOrderProductsList(Request $request)
    {
        $order = Order::where('id', $request->id)->first();

        $productsIds = [];
        if (! empty($order->order_product)) {
            foreach ($order->order_product as $key => $value) {
                $productsIds[] = $value->product_id;
            }
        }

        $datas = Product::select('name')->whereIn('id', $productsIds)->get();

        return response()->json([
            'status'      => true,
            'data'        => $datas,
            'message'     => 'History get successfully',
            'status_name' => 'success',
        ], 200);
    }

    /**
     * This function is use for List Order Exception Error Log
     *
     * @param Request $request Request
     *
     * @return JsonReponse;
     */
    public function getOrderExceptionErrorLog(Request $request)
    {
        try {
            $orderError = EmailCommonExceptionLog::where('order_id', $request->order_id)->get();

            if (count($orderError) > 0) {
                return response()->json(['code' => 200, 'data' => $orderError]);
            } else {
                return response()->json(['code' => 500, 'message' => 'Could not find any error Log']);
            }
        } catch (Exception $e) {
            return response()->json(['code' => 500, 'message' => $e->getMessage()]);
        }
    }

    /**
     * This function is use for List Order Exception Error Log
     *
     * @param Request $request Request
     *
     * @return JsonReponse;
     */
    public function getOrderEmailSendLog(Request $request)
    {
        try {
            $orderError = Email::where('model_id', $request->order_id)->get();

            if (count($orderError) > 0) {
                return response()->json(['code' => 200, 'data' => $orderError]);
            } else {
                return response()->json(['code' => 500, 'message' => 'Could not find any error Log']);
            }
        } catch (Exception $e) {
            return response()->json(['code' => 500, 'message' => $e->getMessage()]);
        }
    }

    /**
     * This function is use for List Order SMS send Log
     *
     * @param Request $request Request
     * @param mixed   $id
     *
     * @return JsonReponse;
     */
    public function getOrderSmsSendLog($id)
    {
        try {
            $smsSendLogs = ChatMessage::where('order_id', $id)->latest()->get();

            if (count($smsSendLogs) > 0) {
                return response()->json(['code' => 200, 'data' => $smsSendLogs]);
            } else {
                return response()->json(['code' => 500, 'message' => 'Could not find any Log']);
            }
        } catch (Exception $e) {
            return response()->json(['code' => 500, 'message' => $e->getMessage()]);
        }
    }

    /**
     * This function user for create email commaon  error list
     *
     * @param $order (INT),
     * @param $logMsg (string)
     * @param mixed $order_id
     * @param mixed $type
     *
     * @return void
     */
    public function createEmailCommonExceptionLog($order_id = '', $logMsg = '', $type = '')
    {
        try {
            EmailCommonExceptionLog::create([
                'order_id'        => $order_id,
                'exception_error' => $logMsg,
                'type'            => $type,
            ]);
        } catch (Exception $e) {
            EmailCommonExceptionLog::create([
                'order_id' => $order_id,
                'log_msg'  => $e->getMessage(),
                'type'     => $type,
            ]);
        }
    }

    /**
     * This function user for get magent to order error list
     *
     * @param $order (INT),
     * @param $logMsg (string)
     *
     * @return void
     */
    public function getOrderMagentoErrorLogList(Request $request)
    {
        try {
            $getOrderList = OrderMagentoErrorLog::where('order_id', $request->order_id)->get();
            $html         = '';
            foreach ($getOrderList as $getOrder) {
                $html .= '<tr>';
                $html .= '<td>' . $getOrder->id . '</td>';
                $html .= '<td>' . $getOrder->log_msg . '</td>';
                $html .= '<td>' . $getOrder->created_at . '</td>';
                $html .= '</tr>';
            }

            return response()->json(['code' => 200, 'data' => $html, 'message' => 'Log Listed successfully']);
        } catch (Exception $e) {
            return response()->json(['code' => 500, 'data' => [], 'message' => 'Sorry , there is no matching order log']);
        }
    }

    /**
     * This function user for get  order payuload list
     *
     * @param $order (INT),
     * @param $logMsg (string)
     *
     * @return void
     */
    public function getOrderPayloadList(Request $request)
    {
        try {
            $getOrderList = Order::where('id', $request->order_id)->get();
            $html         = '';
            foreach ($getOrderList as $getOrder) {
                $html .= '<tr>';
                $html .= '<td>' . $getOrder->id . '</td>';
                $html .= '<td>' . $getOrder->order_id . '</td>';
                $html .= '<td>' . $getOrder->payload . '</td>';
                $html .= '<td>' . $getOrder->created_at . '</td>';
                $html .= '</tr>';
            }

            return response()->json(['code' => 200, 'data' => $html, 'message' => 'Payload Listed successfully']);
        } catch (Exception $e) {
            return response()->json(['code' => 500, 'data' => [], 'message' => $e->getMessage()]);
        }
    }

    /**
     * This function user for create magent to order error list
     *
     * @param $order (INT),
     * @param $logMsg (string)
     * @param mixed $order_id
     *
     * @return void
     */
    public function createOrderMagentoErrorLog($order_id, $logMsg)
    {
        try {
            OrderMagentoErrorLog::create([
                'order_id' => $order_id,
                'log_msg'  => $logMsg,
            ]);
        } catch (Exception $e) {
            OrderMagentoErrorLog::create([
                'order_id' => $order_id,
                'log_msg'  => $e->getMessage(),
            ]);
        }
    }

    public function sendInvoice(Request $request, $id)
    {
        $order = \App\Order::where('id', $id)->first();

        if ($order) {
            $data['order']    = $order;
            $data['customer'] = $order->customer;

            if ($order->customer) {
                Mail::to($order->customer->email)->send(new OrderInvoice($data));

                return response()->json(['code' => 200, 'data' => [], 'message' => 'Email sent successfully']);
            }
        }

        return response()->json(['code' => 500, 'data' => [], 'message' => 'Sorry , there is no matching order found']);
    }

    public function sendOrderEmail(Request $request, $id)
    {
        $order = Order::find($id);
        if (! $order->is_sent_offline_confirmation()) {
            if ($order->order_type == 'offline') {
                $emailClass = (new OrderConfirmation($order))->build();

                $storeWebsiteOrder = $order->storeWebsiteOrder;
                $email             = Email::create([
                    'model_id'         => $order->id,
                    'model_type'       => Order::class,
                    'from'             => $emailClass->fromMailer,
                    'to'               => $order->customer->email,
                    'subject'          => 'New Order # ' . $order->order_id,
                    'message'          => $emailClass->render(),
                    'template'         => 'order-confirmation',
                    'additional_data'  => $order->id,
                    'status'           => 'pre-send',
                    'store_website_id' => ($storeWebsiteOrder) ? $storeWebsiteOrder->store_website_id : null,
                    'is_draft'         => 0,
                ]);

                \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');
            }
        }

        return response()->json(['code' => 200, 'data' => [], 'message' => 'You have successfully sent confirmation email!']);
    }

    public function previewInvoice(Request $request, $id)
    {
        $order = \App\Order::where('id', $id)->first();
        if ($order) {
            $data['order']    = $order;
            $data['customer'] = $order->customer;
            if ($order->customer) {
                $invoice = new OrderInvoice($data);

                return $invoice->preview();
            }
        }

        return abort('404');
    }

    public function viewInvoice($id)
    {
        $invoice = Invoice::where('id', $id)->first();
        if ($invoice) {
            $data['invoice']      = $invoice;
            $data['orders']       = $invoice->orders;
            $data['buyerDetails'] = $invoice->orders[0]->customer;
            if ($invoice->orders) {
                $viewInvoice = new ViewInvoice($data);

                return $viewInvoice->preview();
            }
        }

        return abort('404');
    }

    //TODO downloadInvoice - added by jammer
    public function downloadInvoice(Request $request, $id)
    {
        $invoice = Invoice::with('orders.duty_tax')->where('id', $id)->first();
        if ($invoice) {
            $data['invoice']      = $invoice;
            $data['orders']       = $invoice->orders;
            $data['buyerDetails'] = $invoice->orders[0]->customer;
            if ($invoice->orders) {
                $viewInvoice = new ViewInvoice($data);

                return $viewInvoice->download();
            }
        }

        return abort('404');
    }

    public function generateRateRequet(Request $request)
    {
        $params  = $request->all();
        $rateReq = new GetRateRequest('soap');
        $rateReq->setRateEstimates('Y');
        $rateReq->setDetailedBreakDown('Y');
        $rateReq->setShipper([
            'city'         => $request->get('from_customer_city'),
            'postal_code'  => $request->get('from_customer_pincode'),
            'country_code' => $request->get('from_customer_country'),
            'person_name'  => $request->get('from_customer_name'),
            'company_name' => $request->get('from_company_name'),
            'phone'        => $request->get('from_customer_phone'),
        ]);
        $rateReq->setRecipient([
            'city'         => $request->get('customer_city'),
            'postal_code'  => $request->get('customer_pincode'),
            'country_code' => $request->get('customer_country', 'IN'),
            'person_name'  => $request->get('customer_name'),
            'company_name' => $request->get('company_name', ''),
            'phone'        => $request->get('customer_phone'),
        ]);

        $rateReq->setShippingTime(gmdate("Y-m-d\TH:i:s-05:00", strtotime($request->get('pickup_time'))));
        $rateReq->setDeclaredValue($request->get('amount'));
        $rateReq->setDeclaredValueCurrencyCode($request->get('currency'));
        $rateReq->setPackages([
            [
                'weight' => $request->get('actual_weight'),
                'length' => $request->get('box_length'),
                'width'  => $request->get('box_width'),
                'height' => $request->get('box_height'),
            ],
        ]);

        $response = $rateReq->call();
        if (! $response->hasError()) {
            $charges = $response->getChargesBreakDown();

            return response()->json(['code' => 200, 'data' => $charges]);
        } else {
            return response()->json(['code' => 500, 'data' => [], 'message' => ($response->getErrorMessage()) ? implode('<br>', $response->getErrorMessage()) : 'Rate request not generated']);
        }
    }

    public function generateAWBDHL(Request $request)
    {
        $params = $request->all();
        $this->validate($request, [
            'pickup_time'                        => 'required',
            'currency'                           => 'required',
            'box_length'                         => 'required',
            'box_width'                          => 'required',
            'box_height'                         => 'required',
            'notes'                              => 'required',
            'customer_name'                      => 'required',
            'customer_city'                      => 'required',
            'customer_country'                   => 'required',
            'customer_phone'                     => 'required',
            'customer_address1'                  => 'required|max:45',
            'customer_pincode'                   => 'required',
            'items'                              => 'required',
            'items.*.name'                       => 'required',
            'items.*.qty'                        => 'required|numeric',
            'items.*.unit_price'                 => 'required',
            'items.*.net_weight'                 => 'required',
            'items.*.gross_weight'               => 'required',
            'items.*.manufacturing_country_code' => 'required',
            'items.*.hs_code'                    => 'required',
            'description'                        => 'required',
        ]);

        // find order and customer
        $order = Order::find($request->order_id);

        if (! empty($order)) {
            $order->customer->name    = $request->customer_name;
            $order->customer->address = $request->customer_address1;
            $order->customer->city    = $request->customer_address2;
            $order->customer->pincode = $request->customer_pincode;
            $order->customer->save();
        }

        $rateReq = new CreateShipmentRequest('soap');
        $rateReq->setShipper([
            'street'       => $request->get('from_customer_address1'),
            'city'         => $request->get('from_customer_city'),
            'postal_code'  => $request->get('from_customer_pincode'),
            'country_code' => $request->get('from_customer_country'),
            'person_name'  => $request->get('from_customer_name'),
            'company_name' => $request->get('from_company_name'),
            'phone'        => $request->get('from_customer_phone'),
        ]);

        $rateReq->setRecipient([
            'street'       => $request->get('customer_address1'),
            'city'         => $request->get('customer_city'),
            'postal_code'  => $request->get('customer_pincode'),
            'country_code' => $request->get('customer_country', 'IN'),
            'person_name'  => $request->get('customer_name'),
            'company_name' => $request->get('customer_name'),
            'phone'        => $request->get('customer_phone'),
            'email'        => $request->get('customer_email'),
        ]);

        $rateReq->setShippingTime(gmdate("Y-m-d\TH:i:s", strtotime($request->get('pickup_time'))) . ' GMT+04:00');

        $declaredValue = 0;
        if (! empty($request->items)) {
            foreach ($request->items as $key => $itm) {
                $qty = is_numeric($itm['qty']) ? $itm['qty'] : 1;
                $declaredValue += $itm['unit_price'] * $qty;
            }
        }

        $rateReq->setDeclaredValue($declaredValue);
        $rateReq->setDescription($request->description);
        if ($request->duty_mode != null) {
            $rateReq->setPaymentInfo($request->duty_mode);
        }
        $rateReq->setPackages([
            [
                'weight' => (float) $request->get('actual_weight'),
                'length' => $request->get('box_length'),
                'width'  => $request->get('box_width'),
                'height' => $request->get('box_height'),
                'note'   => $request->get('notes'),
            ],
        ]);

        $phone = ! empty($request->get('customer_phone')) ? $request->get('customer_phone') : $order->customer->phone;
        $rateReq->setMobile($phone);
        $invoiceNumber = ($order) ? $order->order_id . '-' . date('Y-m-d-h-i-s') : 'OFFLINE' . '-' . date('Y-m-d-h-i-s');
        $rateReq->setInvoiceNumber($invoiceNumber);
        $rateReq->setPaperLess(true);
        $rateReq->setItems($request->items);

        $response = $rateReq->call();

        if ($response->hasError()) {
            $message               = $response->getErrorMessage();
            $isPaperLessTradeIssue = false;

            if (! empty($message)) {
                foreach ($message as $m) {
                    $pos = strpos($m, "'WY' is not available between this origin and destination");
                    if ($pos !== false) {
                        $isPaperLessTradeIssue = true;
                    }
                }
            }
            // set paperless trade fix
            if ($isPaperLessTradeIssue) {
                $rateReq->setPaperLess(0);
                $response = $rateReq->call(true);
            }
        }

        if (! $response->hasError()) {
            $receipt = $response->getReceipt();
            if (! empty($receipt) && ! empty($receipt['label_format'])) {
                if (strtolower($receipt['label_format']) == 'pdf') {
                    Storage::disk('files')->put('waybills/' . $receipt['tracking_number'] . '_package_slip.pdf', $bin = base64_decode($receipt['label_image'], true));

                    $waybill                = new Waybill;
                    $waybill->order_id      = ($order) ? $order->id : null;
                    $waybill->awb           = $receipt['tracking_number'];
                    $waybill->box_width     = $request->box_width;
                    $waybill->box_height    = $request->box_height;
                    $waybill->box_length    = $request->box_length;
                    $waybill->actual_weight = (float) $request->get('actual_weight');
                    $waybill->package_slip  = $receipt['tracking_number'] . '_package_slip.pdf';
                    $waybill->pickup_date   = $request->pickup_time;
                    //newly added
                    $waybill->from_customer_id        = ($order) ? $order->customer_id : null;
                    $waybill->from_customer_name      = $request->from_customer_name;
                    $waybill->from_city               = $request->from_customer_city;
                    $waybill->from_country_code       = $request->from_customer_country;
                    $waybill->from_customer_phone     = $request->from_customer_phone;
                    $waybill->from_customer_address_1 = $request->from_customer_address1;
                    $waybill->from_customer_address_2 = $request->from_customer_address2;
                    $waybill->from_customer_pincode   = $request->from_customer_pincode;
                    $waybill->from_company_name       = $request->from_company_name;
                    $waybill->to_customer_id          = null;
                    $waybill->to_customer_name        = $request->customer_name;
                    $waybill->to_city                 = $request->customer_city;
                    $waybill->to_country_code         = $request->customer_country;
                    $waybill->to_customer_phone       = $request->customer_phone;
                    $waybill->to_customer_address_1   = $request->customer_address1;
                    $waybill->to_customer_address_2   = $request->customer_address2;
                    $waybill->to_customer_pincode     = $request->customer_pincode;
                    $waybill->to_company_name         = $request->company_name;
                    $waybill->save();
                }

                return response()->json(['code' => 200, 'data' => [], 'message' => 'Receipt Created successfully']);
            }
        } else {
            return response()->json(['code' => 500, 'data' => [], 'message' => ($response->getErrorMessage()) ? implode('<br>', $response->getErrorMessage()) : 'Receipt not created']);
        }

        return response()->json(['code' => 500, 'data' => [], 'message' => 'Something went wrong can not create receipt']);
    }

    public function trackPackageSlip(Request $request)
    {
        $awb     = $request->get('awb');
        $wayBill = Waybill::where('awb', $awb)->first();
        if (! empty($wayBill)) {
            // check from the awb
            $trackShipment = new TrackShipmentRequest;
            $trackShipment->setAwbNumbers([$awb]);
            $results  = $trackShipment->call();
            $response = $results->getResponse();
            $view     = (string) view('partials.dhl.tracking', compact('response'));

            return response()->json(['code' => 200, '_h' => $view, 'awb' => $awb]);
        }

        return response()->json(['code' => 200, '_h' => 'No records found']);
    }

    public function viewAllInvoices(Request $request)
    {
        $invoices = Invoice::with('orders.order_product', 'orders.customer')->orderBy('id', 'desc');
        if (! empty($request->invoice_date)) {
            $invoices = $invoices->whereDate('invoice_date', '>=', $request->invoice_date);
        }
        if (! empty($request->invoice_to_date)) {
            $invoices = $invoices->whereDate('invoice_date', '<=', $request->invoice_to_date);
        }

        if (! empty($request->invoice_number)) {
            $invoices = $invoices->whereIn('invoice_number', $request->invoice_number);
        }

        if (! empty($request->customer_id)) {
            $invoices = $invoices->WhereHas('orders.customer', function ($query) use ($request) {
                $query->whereIn('customer_id', $request['customer_id']);
            });
        }

        if (! empty($request->store_website_id)) {
            $invoices = $invoices->WhereHas('orders.customer', function ($query) use ($request) {
                $query->whereIn('store_website_id', $request['store_website_id']);
            });
        }
        $invoices = $invoices->paginate(30);

        $invoice_array = $invoices->toArray();
        $invoice_id    = array_column($invoice_array['data'], 'id');

        $orders_array = Order::whereIn('invoice_id', $invoice_id)->get();

        $duty_shipping = [];
        foreach ($orders_array as $key => $order) {
            $duty_shipping[$order->id]['id'] = $order->id;

            $website_code_data = $order->duty_tax;
            if ($website_code_data != null) {
                $product_qty = count($order->order_product);

                $code = $website_code_data->website_code->code;

                $duty_countries     = $website_code_data->website_code->duty_of_country;
                $shipping_countries = $website_code_data->website_code->shipping_of_country($code);

                $duty_amount     = ($duty_countries->default_duty * $product_qty);
                $shipping_amount = ($shipping_countries->price * $product_qty);

                $duty_shipping[$order->invoice_id]['shipping'] = $duty_amount;
                $duty_shipping[$order->invoice_id]['duty']     = $shipping_amount;
            } else {
                $duty_shipping[$order->invoice_id]['shipping'] = 0;
                $duty_shipping[$order->invoice_id]['duty']     = 0;
            }
        }

        $invoiceNumber = Invoice::orderBy('id', 'desc')->select('id', 'invoice_number')->get();
        $customerName  = Customer::select('id', 'name')->orderBy('id', 'desc')->groupBy('name')->get();
        $websiteName   = StoreWebsite::select('id', 'website')->orderBy('id', 'desc')->groupBy('website')->get();

        return view('orders.invoices.index', compact('invoices', 'duty_shipping', 'invoiceNumber', 'customerName', 'websiteName'));
    }

    public function saveLaterCreate(Request $request)
    {
        $invoice  = Invoice::with('orders.duty_tax')->where('id', $request->invoiceId)->first();
        $invoices = Invoice::with('orders.order_product', 'orders.customer')->where('id', $request->invoiceId)->orderBy('id', 'desc')->get();
        if ($invoice) {
            $data['invoice']      = $invoice;
            $data['orders']       = $invoice->orders;
            $data['buyerDetails'] = $invoice->orders[0]->customer;
            $data['savePDF']      = true;
            if ($invoice->orders) {
                $viewInvoice             = new ViewInvoice($data);
                $file                    = $viewInvoice->download();
                $invoice                 = new InvoiceLater();
                $invoice->invoice_id     = $request->invoiceId;
                $invoice->invoice_number = $request->invoiceNumber;
                $invoice->file_name      = $file;
                $invoice->created_at     = date('Y-m-d H:i:s');
                $invoice->updated_at     = date('Y-m-d H:i:s');
                $invoice->save();
            }
        }
    }

    public function saveLaterList(Request $request)
    {
        $autoDeleteDays = config('constants.PRINT_LATER_AUTO_DELETE_DAYS');
        InvoiceLater::where('created_at', '<', Carbon::now()->subDays($autoDeleteDays))->delete();
        $invoiceList = new InvoiceLater();
        if ($request->has('from_date') && ! empty($request->from_date)) {
            $invoiceList = $invoiceList->where('created_at', '>=', $request->from_date . ' 00:00:00');
        }
        if ($request->has('to_date') && ! empty($request->to_date)) {
            $invoiceList = $invoiceList->where('created_at', '<=', $request->to_date . ' 23:59:59');
        }
        $invoiceList = $invoiceList->paginate(20);
        $ids         = $invoiceList->pluck('invoice_id')->toArray();
        $invoices    = Invoice::with('orders.order_product', 'orders.customer')->whereIn('id', $ids)->get();

        if ($request->has('invoice_num') && ! empty($request->invoice_num)) {
            $invoices = $invoices->WhereIn('invoice_number', $request->invoice_num);
        }

        if ($request->has('customer_name') && ! empty($request->customer_name)) {
            $customerNames = $request->customer_name;
            $invoices      = $invoices->filter(function ($invoice) use ($customerNames) {
                return $invoice->orders->contains(function ($order) use ($customerNames) {
                    return $order->customer && in_array($order->customer->name, $customerNames);
                });
            });
        }

        $invoice_array = $invoices->toArray();

        $invoice_id   = array_column($invoice_array, 'id');
        $orders_array = Order::whereIn('invoice_id', $invoice_id)->get();

        $duty_shipping = [];
        foreach ($orders_array as $key => $order) {
            $website_code_data = $order->duty_tax;
            if ($website_code_data != null) {
                $product_qty        = count($order->order_product);
                $code               = $website_code_data->website_code->code;
                $duty_countries     = $website_code_data->website_code->duty_of_country;
                $shipping_countries = $website_code_data->website_code->shipping_of_country($code);
                $duty_amount        = ($duty_countries->default_duty * $product_qty);
                $shipping_amount    = ($shipping_countries->price * $product_qty);
            }
        }
        $invoiceNumber = Invoice::orderBy('id', 'desc')->select('id', 'invoice_number')->groupBy('invoice_number')->get();
        $customerName  = Customer::select('id', 'name')->orderBy('id', 'desc')->groupBy('name')->get();
        $websiteName   = StoreWebsite::select('id', 'website')->orderBy('id', 'desc')->groupBy('website')->get();

        return view('orders.invoices.saveLaterInvoice', compact('invoiceList', 'invoices', 'duty_shipping', 'invoiceNumber', 'customerName', 'websiteName'));
    }

    public function ViewsaveLaterList(Request $request, $id)
    {
        $invoice = InvoiceLater::where('invoice_id', $id)->first();
        if (! empty($invoice)) {
            return \Response::make(file_get_contents(base_path() . '/public/pdf/' . $invoice->file_name), 200, [
                'content-type' => 'application/pdf',
            ]);
        }
    }

    public function addInvoice($id)
    {
        $firstOrder = Order::find($id);
        if ($firstOrder->customer) {
            if ($firstOrder->customer->country) {
                $prefix = substr($firstOrder->customer->country, 0, 3);
            } else {
                $prefix = 'Lux';
            }
        } else {
            $prefix = 'Lux';
        }
        $lastInvoice = Invoice::where('invoice_number', 'like', $prefix . '%')->orderBy('id', 'desc')->first();
        if ($lastInvoice) {
            $inoicePieces      = explode('-', $lastInvoice->invoice_number);
            $nextInvoiceNumber = $inoicePieces[1] + 1;
        } else {
            $nextInvoiceNumber = '1001';
        }
        $invoice_number = $prefix . '-' . $nextInvoiceNumber;
        $more_orders    = Order::where('customer_id', $firstOrder->customer_id)->where('invoice_id', null)->get();

        return view('orders.invoices.add', compact('firstOrder', 'invoice_number', 'more_orders'));
    }

    public function submitInvoice(Request $request)
    {
        if (! $request->invoice_number) {
            return redirect()->back()->with('error', 'Invoice number is mandatory');
        }
        if (! $request->first_order_id) {
            return redirect()->back()->with('error', 'Invalid approach');
        }
        $firstOrder = Order::where('invoice_id', null)->where('id', $request->first_order_id)->first();
        if (! $firstOrder) {
            return redirect()->back()->with('error', 'This order is already associated with an invoice');
        }

        $customerShippingAddress = [
            'address_type' => 'shipping',
            'city'         => $firstOrder->customer->city,
            'country_id'   => $firstOrder->customer->country,
            'email'        => $firstOrder->customer->email,
            'firstname'    => $firstOrder->customer->name,
            'postcode'     => $firstOrder->customer->pincode,
            'street'       => $firstOrder->customer->address,
            'order_id'     => $request->first_order_id,
        ];
        OrderCustomerAddress::insert($customerShippingAddress);

        $invoice                 = new Invoice;
        $invoice->invoice_number = $request->invoice_number;
        $invoice->invoice_date   = $request->invoice_date;
        $invoice->save();
        $firstOrder->update(['invoice_id' => $invoice->id]);
        if ($request->order_ids && count($request->order_ids) > 0) {
            $orders = Order::whereIn('id', $request->order_ids)->get();
            foreach ($orders as $order) {
                if ($order->id != $request->first_order_id) {
                    $order->update(['invoice_id' => $invoice->id]);
                }
            }
        }

        return redirect()->action([\App\Http\Controllers\OrderController::class, 'viewAllInvoices']);
    }

    //TODO::Update Invoice Address
    public function updateCustomerInvoiceAddress(Request $request)
    {
        Customer::where('id', $request->codex)->update([
            'country' => $request->country,
            'pincode' => $request->pincode,
            'city'    => $request->city,
            'address' => $request->address,
        ]);

        Session::flash('actSuccess', 'Address updated successfully!');

        return redirect()->back();
    }

    public function editInvoice($id)
    {
        $invoice     = Invoice::where('id', $id)->first();
        $order       = Order::where('invoice_id', $invoice['id'])->first();
        $more_orders = Order::where('customer_id', $order['customer_id'])->where(function ($query) use ($id) {
            $query->where('invoice_id', $id)
                ->orWhere('invoice_id', null);
        })->get();

        return view('orders.invoices.edit', compact('invoice', 'more_orders'));
    }

    //TODO::Working Invoice without existing order
    public function createInvoiceWithoutOrderNumber()
    {
        return view('orders.invoices.invoice-without-existing-order');
    }

    public function submitEdit(Request $request)
    {
        $invoice = Invoice::find($request->id);
        if (! $request->invoice_date || $request->invoice_date == '') {
            return redirect()->back()->with('error', 'Invalid approach');
        }
        $invoice->update(['invoice_date' => $request->invoice_date]);
        Order::where('invoice_id', $request->id)->update(['invoice_id' => null]);
        if ($request->order_ids && count($request->order_ids) > 0) {
            $orders = Order::whereIn('id', $request->order_ids)->get();
            foreach ($orders as $order) {
                $order->update(['invoice_id' => $invoice->id]);
            }
        }

        return redirect()->action([\App\Http\Controllers\OrderController::class, 'viewAllInvoices']);
    }

    /**
     * This function is use to get invoice customer email address.
     *
     * @param int $id
     *
     * @return array
     */
    public function getInvoiceCustomerEmail(Request $request, $id)
    {
        $invoice = Invoice::where('id', $id)->first();

        return [
            'email' => $invoice->orders[0]->customer->email,
            'id'    => $id,
        ];
    }

    /**
     * This function is use to Email invoice to customer
     *
     * @param int $id
     *
     * @return JsonResponse
     */
    public function mailInvoice(Request $request, $id)
    {
        try {
            $invoice = Invoice::where('id', $id)->first();
            if ($invoice) {
                $data['invoice'] = $invoice;
                $data['orders']  = $invoice->orders;
                if ($invoice->orders) {
                    Mail::to($invoice->orders[0]->customer->email)->send(new ViewInvoice($data));

                    return response()->json(['code' => 200, 'data' => [], 'message' => 'Email sent successfully']);
                }
            } else {
                Invoice::where('id', $id)->update(['invoice_error_log' => 'Sorry , there is no matching order found']);

                return response()->json(['code' => 500, 'data' => [], 'message' => 'Sorry , there is no matching order found']);
            }
        } catch (Exception $e) {
            \Log::info('Sending mail issue at the ordercontroller invoice log->' . $e->getMessage());
            Invoice::where('id', $id)->update(['invoice_error_log' => $e->getMessage()]);

            return response()->json(['code' => 500, 'data' => [], 'message' => $e->getMessage()]);
        }
    }

    public function mailInvoiceMultiSelect(Request $request, $index = '')
    {
        try {
            $invoices = Invoice::whereIn('id', $request->invoice_id)->get();
            foreach ($invoices as $invoice) {
                if ($invoice) {
                    $data['invoice'] = $invoice;
                    $data['orders']  = $invoice->orders;
                    if ($invoice->orders) {
                        Mail::to($invoice->orders[0]->customer->email)->send(new ViewInvoice($data));
                    }
                } else {
                    Invoice::where('id', $invoice->id)->update(['invoice_error_log' => 'Sorry , there is no matching order found']);
                }
            }

            return response()->json(['code' => 200, 'data' => [], 'message' => 'Email sent successfully']);
        } catch (Exception $e) {
            \Log::info('Sending mail issue at the ordercontroller invoice log->' . $e->getMessage());

            return response()->json(['code' => 500, 'data' => [], 'message' => $e->getMessage()]);
        }
    }

    public function GetInvoiceOrderUsers(Request $request)
    {
        try {
            $customerName = Customer::select('id', 'name')->where('name', 'LIKE', '%' . $request->searchTerm . '%')->orderBy('id', 'desc')->groupBy('name')->get();
            $data         = [];
            foreach ($customerName as $key => $value) {
                $data[] = ['id' => $value['id'], 'text' => $value['name']];
            }
            echo json_encode($data);
        } catch (Exception $e) {
            \Log::info('Having issue at the ordercontroller invoice log->' . $e->getMessage());

            return response()->json(['code' => 500, 'data' => [], 'message' => $e->getMessage()]);
        }
    }

    public function viewAllStatuses(Request $request)
    {
        $request->order_status_id ? $erp_status = $request->order_status_id :
            $erp_status                         = null;
        $store                                  = null;
        $query                                  = Store_order_status::query();
        if ($request->order_status_id) {
            $query      = $query->where('order_status_id', $request->order_status_id);
            $erp_status = $request->order_status_id;
        }
        if ($request->store_website_id) {
            $query = $query->where('store_website_id', $request->store_website_id);
            $store = $request->store_website_id;
        }
        $store_order_statuses = $query->paginate(20);
        $order_statuses       = OrderStatus::all();
        $store_website        = StoreWebsite::all();

        return view('orders.statuses.index', compact('store_order_statuses', 'order_statuses', 'store_website', 'erp_status', 'store'));
    }

    public function viewFetchStatus()
    {
        $store_website = StoreWebsite::all();

        return view('orders.statuses.fetch-order-status', compact('store_website'));
    }

    public function fetchStatus(Request $request)
    {
        $website       = StoreWebsite::find($request->store_website_id);
        $magentoHelper = new MagentoHelperv2;
        $result        = $magentoHelper->fetchOrderStatus($website);
        if ($result) {
            if ($result->status() == 200) {
                $statuses = json_decode($result->getContent());

                foreach ($statuses as $status) {
                    StoreMasterStatus::updateOrCreate([
                        'store_website_id' => $request->store_website_id,
                        'value'            => $status->value,
                    ], [
                        'label' => $status->label,
                    ]);
                }
                $this->store_order_status_history_create($request, $result, $request->store_website_id);
            } else {
                return redirect()->back()->with('error', $result->getContent());
            }
        } else {
            return redirect()->back()->with('error', 'Could not fetch the statuses');
        }

        return redirect()->back()->with('success', 'Status successfully updated');
    }

    public function viewCreateStatus()
    {
        $order_statuses        = OrderStatus::all();
        $store_website         = StoreWebsite::all();
        $store_master_statuses = StoreMasterStatus::all();

        return view('orders.statuses.create', compact('order_statuses', 'store_website', 'store_master_statuses'));
    }

    public function createStatus(Request $request)
    {
        $this->validate($request, [
            'order_status_id'        => 'required',
            'store_website_id'       => 'required',
            'store_master_status_id' => 'required',
        ]);
        $input   = $request->except('_token');
        $isExist = Store_order_status::where('order_status_id', $request->order_status_id)->where('store_website_id', $request->store_website_id)->where('store_master_status_id', $request->store_master_status_id)->first();
        if (! $isExist) {
            Store_order_status::create($input);

            $this->store_order_status_history_create($request, '', '');

            return redirect()->back();
        } else {
            return redirect()->back()->with('warning', 'Already exists');
        }
    }

    public function viewEdit($id)
    {
        $store_order_status    = Store_order_status::find($id);
        $order_statuses        = OrderStatus::all();
        $store_website         = StoreWebsite::all();
        $store_master_statuses = StoreMasterStatus::where('store_website_id', $store_order_status->store_website_id)->get();

        return view('orders.statuses.edit', compact('store_order_status', 'order_statuses', 'store_website', 'store_master_statuses'));
    }

    public function editStatus($id, Request $request)
    {
        $this->validate($request, [
            'order_status_id'        => 'required',
            'store_website_id'       => 'required',
            'store_master_status_id' => 'required',
        ]);
        $input   = $request->except('_token');
        $isExist = Store_order_status::where('order_status_id', $request->order_status_id)->where('store_website_id', $request->store_website_id)->where('store_master_status_id', $request->store_master_status_id)->first();

        if (! $isExist) {
            $this->store_order_status_history_update($request, '', $id);
            $store_order_status = Store_order_status::find($id);
            $store_order_status->update($input);

            return redirect()->back();
        } else {
            return redirect()->back()->with('warning', 'Already exists');
        }
    }

    public function fetchMasterStatus($id)
    {
        $store_master_statuses = StoreMasterStatus::where('store_website_id', $id)->get();

        return $store_master_statuses;
    }

    public function deleteBulkOrders(Request $request)
    {
        foreach ($request->ids as $id) {
            Order::where('id', $id)->delete();
        }

        return response()->json(['message' => 'Order has been archived']);
    }

    public function updateCustomer(Request $request)
    {
        if ($request->update_type == 1) {
            $ids = explode(',', $request->selected_orders);
            foreach ($ids as $id) {
                $order = \App\Order::where('id', $id)->first();
                if ($order && $request->customer_message && $request->customer_message != '') {
                    UpdateOrderStatusMessageTpl::dispatch($order->id, $request->customer_message)->onQueue('customer_message');
                }
            }
        } else {
            $ids = explode(',', $request->selected_orders);
            foreach ($ids as $id) {
                if (! empty($id) && $request->order_status) {
                    $order   = \App\Order::where('id', $id)->first();
                    $statuss = OrderStatus::where('id', $request->order_status)->first();
                    if ($order) {
                        $order->order_status    = $statuss->status;
                        $order->order_status_id = $request->order_status;
                        $order->save();

                        // this code is duplicate we need to fix it
                        //Sending Mail on changing of order status
                        $mailingListCategory = MailinglistTemplateCategory::where('title', 'Order Status Change')->first();
                        if ($mailingListCategory) {
                            if ($order->storeWebsiteOrder) {
                                $templateData = MailinglistTemplate::where('category_id', $mailingListCategory->id)->where('store_website_id', $order->storeWebsiteOrder->website_id)->first();
                            } else {
                                $templateData = MailinglistTemplate::where('name', 'Order Status Change')->first();
                            }
                            // @todo put the function to send mail from specific store emails
                            if ($templateData) {
                                $arrToReplace = ['{FIRST_NAME}', '{ORDER_STATUS}'];
                                $valToReplace = [$order->customer->name, $statuss->status];
                                $bodyText     = str_replace($arrToReplace, $valToReplace, $templateData->static_template);

                                $storeEmailAddress = EmailAddress::where('store_website_id', $order->customer->store_website_id)->first();
                                if ($storeEmailAddress) {
                                    $emailData['subject']         = $templateData->subject;
                                    $emailData['static_template'] = $bodyText;
                                    $emailData['from']            = $storeEmailAddress->from_address;

                                    $emailClass = (new OrderStatusMail($emailData))->build();

                                    $storeWebsiteOrder = $order->storeWebsiteOrder;
                                    $email             = Email::create([
                                        'model_id'         => $order->customer->id,
                                        'model_type'       => Customer::class,
                                        'from'             => $storeEmailAddress->from_address,
                                        'to'               => $order->customer->email,
                                        'subject'          => $emailClass->subject,
                                        'message'          => $emailClass->render(),
                                        'template'         => 'order-status-update',
                                        'additional_data'  => $order->id,
                                        'status'           => 'pre-send',
                                        'store_website_id' => ($storeWebsiteOrder) ? $storeWebsiteOrder->store_website_id : null,
                                    ]);

                                    \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');
                                }
                            }
                        }
                        // this code is duplicate we need to fix it

                        UpdateOrderStatusMessageTpl::dispatch($order->id, $request->customer_message)->onQueue('customer_message');

                        $storeWebsiteOrder = StoreWebsiteOrder::where('order_id', $order->id)->first();
                        if ($storeWebsiteOrder) {
                            $website = StoreWebsite::find($storeWebsiteOrder->website_id);
                            if ($website) {
                                $store_order_status = Store_order_status::where('order_status_id', $request->order_status)->where('store_website_id', $storeWebsiteOrder->website_id)->first();
                                if ($store_order_status) {
                                    $magento_status = StoreMasterStatus::find($store_order_status->store_master_status_id);
                                    if ($magento_status) {
                                        $magentoHelper = new MagentoHelperv2;
                                        $result        = $magentoHelper->changeOrderStatus($order, $website, $magento_status->value, '', '');
                                    }
                                }
                            }
                            $storeWebsiteOrder->update(['order_id', $request->order_status]);
                        }
                    }
                }
            }
        }

        return response()->json(['message' => 'Successful'], 200);
    }

    public function searchOrderForInvoice(Request $request)
    {
        $term   = $request->q;
        $orders = Order::leftJoin('customers', 'customers.id', 'orders.customer_id')
            ->where('orders.invoice_id', null)
            ->where(function ($q) use ($term) {
                $q->where('orders.order_id', 'like', '%' . $term . '%')
                    ->orWhere('orders.order_type', $term)
                    ->orWhere('orders.sales_person', Helpers::getUserIdByName($term))
                    ->orWhere('orders.received_by', Helpers::getUserIdByName($term))
                    ->orWhere('orders.client_name', 'like', '%' . $term . '%')
                    ->orWhere('customers.city', 'like', '%' . $term . '%')
                    ->orWhere('customers.name', 'like', '%' . $term . '%')
                    ->orWhere('customers.id', 'like', '%' . $term . '%')
                    ->orWhere('customers.phone', 'like', '%' . $term . '%');
            })
            ->select('orders.*', 'customers.name', 'customers.phone')
            ->get();

        return $orders;
    }

    //TODO::Get customerList
    public function getCustomers(Request $request)
    {
        if ($request->ajax()) {
            $term = $request->q;
            try {
                $customer = Customer::where('name', 'like', '%' . $term . '%')->take(100)->get();

                return $customer;
            } catch (Exception $ex) {
                //later put exception block message here
            }
        }
    }

    //TODO::Get companyList
    public function getCompany(Request $request)
    {
        if ($request->ajax()) {
            try {
                $term          = $request->q;
                $storeWebsites = \App\StoreWebsite::where('website_address', 'like', '%' . $term . '%')->take(100)->get();

                return $storeWebsites;
            } catch (Exception $ex) {
                //later put exception block message here
            }
        }
    }

    public function getSearchedProducts(Request $request)
    {
        $term = $request->q;
        try {
            $product = Product::where('name', 'like', '%' . $term . '%')->orWhere('short_description', 'like', '%' . $term . '%')->take(100)->get();

            return $product;
        } catch (Exception $ex) {
            //later put exception block message here
        }
    }

    public function updateDelDate(request $request)
    {
        $orderid                                  = $request->input('orderid');
        $newdeldate                               = $request->input('newdeldate');
        $fieldname                                = $request->input('fieldname');
        $oldOrderDelData                          = \App\Order::where('id', $orderid);
        $oldOrderDelDate                          = $oldOrderDelData->pluck('estimated_delivery_date');
        $oldOrderDelDate                          = (isset($oldOrderDelDate[0]) && $oldOrderDelDate[0] != '') ? $oldOrderDelDate[0] : '';
        $userId                                   = Auth::id();
        $estimated_delivery_histories             = new \App\EstimatedDeliveryHistory;
        $estimated_delivery_histories->order_id   = $orderid;
        $estimated_delivery_histories->field      = $fieldname;
        $estimated_delivery_histories->updated_by = $userId;
        $estimated_delivery_histories->old_value  = $oldOrderDelDate;
        $estimated_delivery_histories->new_value  = $newdeldate;
        $order_via                                = $request->order_via;

        if ($estimated_delivery_histories->save()) {
            $oldOrderDelData->update(['estimated_delivery_date' => $newdeldate]);
            $order = \App\Order::where('id', $orderid)->first();

            if (in_array('email', $order_via)) {
                $emailClass        = (new \App\Mails\Manual\OrderDeliveryDateChangeMail($order))->build();
                $storeWebsiteOrder = $order->storeWebsiteOrder;
                $email             = Email::create([
                    'model_id'         => $order->id,
                    'model_type'       => Order::class,
                    'from'             => $emailClass->fromMailer,
                    'to'               => $order->customer->email,
                    'subject'          => $emailClass->subject,
                    'message'          => $emailClass->render(),
                    'template'         => 'order-status-update',
                    'additional_data'  => $order->id,
                    'status'           => 'pre-send',
                    'store_website_id' => ($storeWebsiteOrder) ? $storeWebsiteOrder->store_website_id : null,
                    'is_draft'         => 0,
                ]);
                \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');
            }
            $message = 'Order delivery date has been changed to ' . $newdeldate;
            if (in_array('sms', $order_via)) {
                if (isset($order->storeWebsiteOrder)) {
                    $receiverNumber = $order->contact_detail;
                    if ($storeWebsiteOrder->store_website_id) {
                        \App\Jobs\TwilioSmsJob::dispatch($receiverNumber, $message, $storeWebsiteOrder->store_website_id);
                    }
                }
            }

            UpdateOrderStatusMessageTpl::dispatch($order->id, $message)->onQueue('customer_message');

            return response()->json(['code' => 200, 'data' => [], 'message' => 'Delivery Date Updated Successfully']);
        }

        return response()->json(['code' => 500, 'data' => [], 'message' => 'Something went wrong']);
    }

    public function viewEstDelDateHistory(request $request)
    {
        $orderid                      = $request->input('order_id');
        $estimated_delivery_histories = \App\EstimatedDeliveryHistory::select('estimated_delivery_histories.*', 'users.name')
            ->where('order_id', $orderid)
            ->where('estimated_delivery_histories.field', 'estimated_delivery_date')
            ->leftJoin('users', 'users.id', 'estimated_delivery_histories.updated_by')
            ->orderByDesc('estimated_delivery_histories.created_at')
            ->get();
        $html = view('partials.modals.estimated-delivery-date-histories')->with('estimated_delivery_histories', $estimated_delivery_histories)->render();

        return response()->json(['code' => 200, 'html' => $html, 'message' => 'Something went wrong']);
    }

    /**
     * @SWG\Get(
     *   path="/customer/order-details",
     *   tags={"Customer"},
     *   summary="Get customer order details",
     *   operationId="get-customer-order-details",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *   @SWG\Response(response=406, description="not acceptable"),
     *   @SWG\Response(response=500, description="internal server error"),
     *
     *      @SWG\Parameter(
     *          name="mytest",
     *          in="path",
     *          required=true,
     *          type="string"
     *      ),
     * )
     */
    public function customerOrderDetails(Request $request)
    {
        $token     = $request->token;
        $email     = $request->email;
        $order_no  = $request->order_no;
        $store_url = $request->website;

        $token = $request->bearerToken();
        if ((! $email || trim($email) == '') && empty($order_no)) {
            $message = $this->generate_erp_response('customer.order.failed', 0, $default = 'Email is absent in your request', request('lang_code'));

            return response()->json(['message' => $message, 'status' => 400]);
        }

        if ((! $order_no || trim($order_no) == '') && empty($email)) {
            $message = $this->generate_erp_response('customer.order.failed.reference_no_absent', 0, $default = 'Order reference no is absent in your request', request('lang_code'));

            return response()->json(['message' => $message, 'status' => 400]);
        }

        if (! $store_url || trim($store_url) == '') {
            $message = $this->generate_erp_response('customer.order.failed.store_url_absent', 0, $default = 'Store Url is absent in your request', request('lang_code'));

            return response()->json(['message' => $message, 'status' => 400]);
        }
        $store_website = StoreWebsite::where('website', 'like', $store_url)->first();
        if (! $store_website) {
            $message = $this->generate_erp_response('customer.order.failed.store_not_found', 0, $default = 'Store not found with this url', request('lang_code'));

            return response()->json(['message' => $message, 'status' => 404]);
        }
        if ($store_website->api_token != $token) {
            $message = $this->generate_erp_response('customer.order.failed.token_missing', $store_website->id, $default = 'Token mismatched', request('lang_code'));

            return response()->json(['message' => $message, 'status' => 401]);
        }

        if (! empty($email)) {
            $customer = Customer::where('email', $email)->where('store_website_id', $store_website->id)->first();
            if (! $customer) {
                return response()->json(['message' => 'Customer not found in this store for the requested email', 'status' => 404]);
            }
            $orders = Order::join('store_website_orders', 'orders.id', 'store_website_orders.order_id')
                ->where('orders.customer_id', $customer->id)
                ->where('store_website_orders.website_id', $store_website->id)
                ->select('orders.*')
                ->orderBy('created_at', 'desc')
                ->get();
        } else {
            $orders = Order::join('store_website_orders', 'orders.id', 'store_website_orders.order_id')
                ->where('store_website_orders.website_id', $store_website->id)
                ->where('store_website_orders.platform_order_id', $order_no)
                ->select('orders.*')
                ->orderBy('created_at', 'desc')
                ->get();
        }

        if (count($orders) == 0) {
            $message = $this->generate_erp_response('customer.order.failed.no_order_found', $store_website->id, $default = 'No orders found against this customer', request('lang_code'));

            return response()->json(['message' => $message, 'status' => 200]);
        }
        foreach ($orders as $order) {
            $histories = OrderStatusHistory::join('order_statuses', 'order_statuses.id', 'order_status_histories.new_status')
                ->where('order_status_histories.order_id', $order->id)
                ->select(['order_statuses.*', 'order_status_histories.created_at as created_at_time'])
                ->orderBy('order_status_histories.created_at', 'asc')
                ->get();
            $return_histories = [];
            if (count($histories) > 0) {
                foreach ($histories->toArray() as $h) {
                    $return_histories[] = [
                        'status'     => $h['status'],
                        'created_at' => $h['created_at_time'],
                    ];
                }
            }
            $waybill_history = waybillTrackHistories::join('waybills', 'waybills.id', 'waybill_track_histories.waybill_id')
                ->where('waybills.order_id', $order->id)
                ->select(['waybill_track_histories.*', 'waybill_track_histories.created_at  as created_at_time'])
                ->orderBy('waybill_track_histories.created_at', 'asc')
                ->get();

            if (count($waybill_history) > 0) {
                foreach ($waybill_history->toArray() as $h) {
                    $return_histories[] = [
                        'status'     => $h['comment'],
                        'created_at' => $h['created_at_time'],
                    ];
                }
            }

            if (! empty($return_histories)) {
                usort($return_histories, function ($a, $b) {
                    return strtotime($a['created_at']) - strtotime($b['created_at']);
                });
            }

            $order->status_histories = array_reverse($return_histories);
        }
        $orders  = $orders->toArray();
        $message = $this->generate_erp_response('customer.order.success', $store_website->id, $default = 'Orders Fetched successfully', request('lang_code'));

        return response()->json(['message' => $message, 'status' => 200, 'data' => $orders]);
    }

    public function addNewReply(request $request)
    {
        if ($request->reply) {
            $replyData                = [];
            $html                     = '';
            $replyData['reply']       = $request->reply;
            $replyData['model']       = 'Order';
            $replyData['category_id'] = 1;
            $success                  = Reply::create($replyData);
            if ($success) {
                $replies = Reply::where('model', 'Order')->get();
                if ($replies) {
                    $html .= "<option value=''>Select Order Status</option>";
                    foreach ($replies as $reply) {
                        $html .= '<option value="' . $reply->id . '">' . $reply->reply . '</option>';
                    }
                }

                return response()->json(['message' => 'reply added successfully', 'html' => $html, 'status' => 200]);
            }

            return response()->json(['message' => 'unable to add reply', 'status' => 500]);
        }

        return response()->json(['message' => 'please enter a reply', 'status' => 400]);
    }

    public function testEmail(Request $request)
    {
        Mail::raw('Hi, welcome user!', function ($message) {
            $message->to('webreak.pravin@gmail.com')->subject('Welcome Message');
        });

        exit;

        $order = \App\Order::find(2032);

        $emailClass = (new OrderConfirmation($order))->build();

        $email = \App\Email::create([
            'model_id'        => $order->id,
            'model_type'      => \App\Order::class,
            'from'            => $emailClass->fromMailer,
            'to'              => $order->customer->email,
            'subject'         => $emailClass->subject,
            'message'         => $emailClass->render(),
            'template'        => 'order-confirmation',
            'additional_data' => $order->id,
            'status'          => 'pre-send',
            'is_draft'        => 1,
        ]);

        \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');

        return response()->json(['message' => 'unable to add reply', 'status' => 500]);
    }

    public function statusChangeTemplate(Request $request)
    {
        $statusModal = \App\OrderStatus::where('id', $request->order_status_id)->first();
        $order       = \App\Order::where('id', $request->order_id)->first();
        $template    = \App\Order::ORDER_STATUS_TEMPLATE;
        if ($statusModal) {
            if (! empty($statusModal->message_text_tpl)) {
                $template = $statusModal->message_text_tpl;
            }
        }

        $template = str_replace(['#{order_id}', '#{order_status}'], [$order->order_id, $statusModal->status], $template);
        $from     = '';
        $preview  = '';
        if (strtolower($statusModal->status) == 'cancel') {
            $emailClass        = (new \App\Mails\Manual\OrderCancellationMail($order))->build();
            $storeWebsiteOrder = $order->storeWebsiteOrder;
            if ($emailClass != null) {
                $preview = $emailClass->render();
            }
            if ($storeWebsiteOrder) {
                $emailAddress = \App\EmailAddress::where('store_website_id', $storeWebsiteOrder->website_id)->first();
                if ($emailAddress) {
                    $from         = $emailAddress->from_address;
                    $fromTemplate = "<input type='email' required id='email_from_mail' class='form-control' name='from_mail' value='" . $from . "' >";
                } else {
                    $emailAddresses = \App\EmailAddress::pluck('from_address', 'id')->toArray();
                    $fromTemplate   = "<select class='form-control' id='email_from_mail' name='from_mail'>";
                    foreach ($emailAddresses as $emailAddress) {
                        $fromTemplate .= '<option>' . $emailAddress . '</option>';
                    }
                    $fromTemplate .= '</select>';
                }
            }
            $preview = "<table>
                    <tr>
                       <td>To</td><td>
                       <input type='email' required id='email_to_mail' class='form-control' name='to_mail' value='" . $order->customer->email . "' >
                       </td></tr><tr>
                       <td>From </td> <td>
                       $fromTemplate
                       </td></tr><tr>
                       <td>Preview </td> <td><textarea name='editableFile' rows='10' id='customEmailContent' >" . $preview . '</textarea></td>
                    </tr>
            </table>';
            $this->createEmailSendJourneyLog($order->id, 'Status Change to ' . $statusModal->status, \App\Order::class, 'outgoing', '0', $from, '', 'Order # ' . $order->id . ' Status has been changed', $preview, $template, '', $storeWebsiteOrder->website_id);
        } else {
            $emailClass = (new \App\Mails\Manual\OrderStatusChangeMail($order))->build();
            if ($emailClass != null) {
                $preview = $emailClass->render();
            }
            $storeWebsiteOrder = $order->storeWebsiteOrder;
            if ($storeWebsiteOrder) {
                $emailAddress = \App\EmailAddress::where('store_website_id', $storeWebsiteOrder->website_id)->first();
                if ($emailAddress) {
                    $from         = $emailAddress->from_address;
                    $fromTemplate = "<input type='email' required id='email_from_mail' class='form-control' name='from_mail' value='" . $from . "' >";
                } else {
                    $emailAddresses = \App\EmailAddress::pluck('from_address', 'id')->toArray();
                    $fromTemplate   = "<select class='form-control' id='email_from_mail' name='from_mail'>";
                    foreach ($emailAddresses as $emailAddress) {
                        $fromTemplate .= '<option>' . $emailAddress . '</option>';
                    }
                    $fromTemplate .= '</select>';
                }
            }
            $preview = "<table>
                    <tr>
                       <td>To</td><td>
                       <input type='email' required id='email_to_mail' class='form-control' name='to_mail' value='" . $order->customer->email . "' >
                       </td></tr><tr>
                       <td>From </td> <td>
                       $fromTemplate
                       </td></tr><tr>
                       <td>Preview </td> <td><textarea name='editableFile' rows='10' id='customEmailContent' >" . $preview . '</textarea></td>
                    </tr>
            </table>';
            $this->createEmailSendJourneyLog($order->id, 'Status Change to ' . $statusModal->status, \App\Order::class, 'outgoing', '0', $from, '', 'Order # ' . $order->id . ' Status has been changed', $preview, $template, '', $storeWebsiteOrder);
        }

        return response()->json(['code' => 200, 'template' => $template, 'preview' => $preview]);
    }

    public function prodctStatusChangeTemplate(Request $request)
    {
        $statusModal = \App\OrderStatus::where('id', $request->order_status_id)->first();
        $order       = \App\Order::where('id', $request->order_id)->first();
        $template    = \App\Order::ORDER_STATUS_TEMPLATE;
        if ($statusModal) {
            if (! empty($statusModal->message_text_tpl)) {
                $template = $statusModal->message_text_tpl;
            }
        }

        $template = str_replace(['#{order_id}', '#{order_status}'], [$order->order_id, $statusModal->status], $template);
        $from     = config('env.MAIL_FROM_ADDRESS');
        $preview  = '';
        if (strtolower($statusModal->status) == 'cancel') {
            $emailClass        = (new \App\Mails\Manual\OrderCancellationMail($order))->build();
            $storeWebsiteOrder = $order->storeWebsiteOrder;
            if ($emailClass != null) {
                $preview = $emailClass->render();
            }
            if ($storeWebsiteOrder) {
                $emailAddress = \App\EmailAddress::where('store_website_id', $storeWebsiteOrder->website_id)->first();
                if ($emailAddress) {
                    $from = $emailAddress->from_address;
                }
            }
            $preview = "<table>
                    <tr>
                       <td>To</td><td>
                       <input type='email' required id='email_to_mail' class='form-control' name='to_mail' value='" . $order->customer->email . "' >
                       </td></tr><tr>
                       <td>From </td> <td>
                       <input type='email' required id='email_from_mail' class='form-control' name='from_mail' value='" . $from . "' >
                       </td></tr><tr>
                       <td>Preview </td> <td><textarea name='editableFileproduct' rows='10' id='editableFileproduct1' >" . $preview . '</textarea></td>
                    </tr>
            </table>';
            $this->createEmailSendJourneyLog($order->id, 'Status Change to ' . $statusModal->status, \App\Order::class, 'outgoing', '0', $from, '', 'Order # ' . $order->id . ' Status has been changed', $preview, $template, '', $storeWebsiteOrder->website_id);
        } else {
            $emailClass = (new \App\Mails\Manual\OrderStatusChangeMail($order))->build();
            if ($emailClass != null) {
                $preview = $emailClass->render();
            }
            $storeWebsiteOrder = $order->storeWebsiteOrder;
            if ($storeWebsiteOrder) {
                $emailAddress = \App\EmailAddress::where('store_website_id', $storeWebsiteOrder->website_id)->first();
                if ($emailAddress) {
                    $from = $emailAddress->from_address;
                }
            }
            $preview = "<table>
                    <tr>
                       <td>To</td><td>
                       <input type='email' required id='email_to_mail' class='form-control' name='to_mail' value='" . $order->customer->email . "' >
                       </td></tr><tr>
                       <td>From </td> <td>
                       <input type='email' required id='email_from_mail' class='form-control' name='from_mail' value='" . $from . "' >
                       </td></tr><tr>
                       <td>Preview </td> <td><textarea name='editableFileproduct' rows='10' id='editableFileproduct1' >" . $preview . '</textarea></td>
                    </tr>
            </table>';
            $this->createEmailSendJourneyLog($order->id, 'Status Change to ' . $statusModal->status, \App\Order::class, 'outgoing', '0', $from, '', 'Order # ' . $order->id . ' Status has been changed', $preview, $template, '', $storeWebsiteOrder);
        }

        return response()->json(['code' => 200, 'template' => $template, 'preview' => $preview]);
    }

    public function productItemStatusChange(Request $request)
    {
        $id                    = $request->get('id');
        $order_product_item_id = $request->order_product_item_id;
        $status                = $request->get('status');
        $order_status_id       = $request->get('order_status_id');
        $message               = $request->get('message');
        $sendmessage           = $request->get('sendmessage');
        $order_via             = $request->order_via;
        if (! empty($id) && ! empty($status)) {
            $order         = \App\Order::where('id', $id)->first();
            $order_product = \App\OrderProduct::where('id', $order_product_item_id)->first();
            $statuss       = OrderStatus::where('id', $status)->first();
            $order_statuss = OrderStatus::where('id', $order_status_id)->first();

            $order_statuss_name = 'Status not assigned';
            if (! empty($order_statuss)) {
                $order_statuss_name = $order_statuss->status;
            }
            if ($order) {
                $order_product->delivery_status = $request->status;
                if ($request->status == '10') {
                    $order_product->delivery_date = date('Y-m-d H:s:i');
                } else {
                    $order_product->delivery_date = '';
                }
                $order_product->save();
                if (in_array('email', $order_via)) {
                    if (isset($request->sendmessage) && $request->sendmessage == '1') {
                        //Sending Mail on changing of order status
                        try {
                            $from_mail_address = $request->from_mail;
                            $to_mail_address   = $request->to_mail;
                            // send order canellation email
                            if (strtolower($statuss->status) == 'cancel') {
                                $emailClass = (new \App\Mails\Manual\OrderCancellationMail($order))->build();

                                if ($from_mail_address != '') {
                                    $emailClass->fromMailer = $from_mail_address;
                                }
                                if ($to_mail_address != '') {
                                    $order->customer->email = $to_mail_address;
                                }

                                $storeWebsiteOrder = $order->storeWebsiteOrder;
                                $email             = Email::create([
                                    'model_id'   => $order->id,
                                    'model_type' => Order::class,
                                    'from'       => $emailClass->fromMailer,
                                    'to'         => $order->customer->email,
                                    'subject'    => $emailClass->subject,
                                    'message'    => $request->message,
                                    // 'message'          => $emailClass->render(),
                                    'template'         => 'order-cancellation-update',
                                    'additional_data'  => $order->id,
                                    'status'           => 'pre-send',
                                    'store_website_id' => (isset($storeWebsiteOrder)) ? $storeWebsiteOrder->store_website_id : null,
                                    'is_draft'         => 0,
                                ]);

                                \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');
                                $this->createEmailSendJourneyLog($id, 'Email type via Order update status with ' . $statuss->status, Order::class, 'outgoing', '0', $emailClass->fromMailer, $order->customer->email, $emailClass->subject, $request->message, '', '', $storeWebsiteOrder->website_id);
                            } else {
                                $emailClass = (new \App\Mails\Manual\OrderStatusChangeMail($order))->build();
                                if ($from_mail_address != '') {
                                    $emailClass->fromMailer = $from_mail_address;
                                }
                                if ($to_mail_address != '') {
                                    $order->customer->email = $to_mail_address;
                                }

                                $storeWebsiteOrder = $order->storeWebsiteOrder;
                                $email             = Email::create([
                                    'model_id'   => $order->id,
                                    'model_type' => Order::class,
                                    'from'       => $emailClass->fromMailer,
                                    'to'         => $order->customer->email,
                                    'subject'    => $emailClass->subject,
                                    'message'    => $request->custom_email_content,
                                    // 'message'          => $emailClass->render(),
                                    'template'        => 'order-status-update',
                                    'additional_data' => $order->id,
                                    'status'          => 'pre-send',
                                    'is_draft'        => 0,
                                ]);

                                \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');
                                $this->createEmailSendJourneyLog($id, 'Email type via Order update status with ' . $statuss->status, Order::class, 'outgoing', '0', $emailClass->fromMailer, $order->customer->email, $emailClass->subject, $request->message, '', '', $storeWebsiteOrder->website_id);
                            }
                        } catch (Exception $e) {
                            $this->createEmailCommonExceptionLog($order->id, $e->getMessage(), 'email');
                            $this->createEmailSendJourneyLog($id, 'Email type via Error', Order::class, 'outgoing', '0', $from_mail_address, $to_mail_address, $emailClass->subject, $request->message, '', $e->getMessage(), $order->storeWebsiteOrder);
                            \Log::info('Sending mail issue at the ordercontroller #2215 ->' . $e->getMessage());
                        }
                    } else {
                        $emailClass = (new \App\Mails\Manual\OrderStatusChangeMail($order))->build();

                        $storeWebsiteOrder = $order->storeWebsiteOrder;
                        $email             = Email::create([
                            'model_id'         => $order->id,
                            'model_type'       => Order::class,
                            'from'             => $emailClass->fromMailer,
                            'to'               => $order->customer->email,
                            'subject'          => $emailClass->subject,
                            'template'         => 'order-status-update',
                            'additional_data'  => $order->id,
                            'status'           => 'pre-send',
                            'store_website_id' => ($storeWebsiteOrder) ? $storeWebsiteOrder->store_website_id : null,
                            'is_draft'         => 0,
                        ]);

                        \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');
                        $this->createEmailSendJourneyLog($id, 'Order update status with ' . $statuss->status, Order::class, 'outgoing', '0', $emailClass->fromMailer, $order->customer->email, $emailClass->subject, $request->message, '', '', $storeWebsiteOrder->website_id);
                    }
                }

                if (in_array('sms', $order_via)) {
                    if (isset($request->sendmessage) && $request->sendmessage == '1') {
                        if (isset($order->storeWebsiteOrder)) {
                            $website = \App\Website::where('id', $order->storeWebsiteOrder->website_id)->first();

                            $receiverNumber = $order->contact_detail;
                            \App\Jobs\TwilioSmsJob::dispatch($receiverNumber, $request->message, $website->store_website_id, $order->id);
                            $this->createEmailSendJourneyLog($id, 'Email type IVA SMS Order update status with ' . $statuss->status, Order::class, 'outgoing', '0', $emailClass->fromMailer, $order->customer->email, $emailClass->subject, 'Phone : ' . $receiverNumber . ' <br/> ' . $request->message, '', '', $website->website_id);
                        }
                    }
                }
            }

            //Sending Mail on changing of order status
            if (isset($request->sendmessage) && $request->sendmessage == '1') {
                //sending order message to the customer
                UpdateOrderStatusMessageTpl::dispatch($order->id, request('message', null))->onQueue('customer_message');
            }
            $storeWebsiteOrder = StoreWebsiteOrder::where('order_id', $order->id)->first();
            if ($storeWebsiteOrder) {
                $website = StoreWebsite::find($storeWebsiteOrder->website_id);
                if ($website) {
                    $store_order_status = Store_order_status::where('order_status_id', $status)->where('store_website_id', $storeWebsiteOrder->website_id)->first();
                    if ($store_order_status) {
                        $magento_status = StoreMasterStatus::find($store_order_status->store_master_status_id);
                        if ($magento_status) {
                            $magentoHelper = new MagentoHelperv2;
                            $result        = $magentoHelper->changeOrderStatus($order, $website, $magento_status->value, $order_product, $order_statuss_name);
                            $this->createEmailSendJourneyLog($id, 'Magento Order Product Item update status with ' . $statuss->status, Order::class, 'outgoing', '0', $request->from_mail, $request->to_mail, 'Magento replay', $request->message, '', '', $storeWebsiteOrder->website_id);
                            /**
                             *check if response has error
                             */
                            $response = $result->getData();
                            if (isset($response) && isset($response->status) && $response->status == false) {
                                $this->createOrderMagentoErrorLog($order->id, $response->error);
                                $this->createEmailSendJourneyLog($id, 'Magento Error', Order::class, 'outgoing', '0', $request->from_mail, $request->to_mail, 'Magento Error', $response->error, '', '', $storeWebsiteOrder->website_id);

                                return response()->json($response->error, 400);
                            }
                        } else {
                            $this->createOrderMagentoErrorLog($order->id, 'Store MasterStatus Not Present');
                            $this->createEmailSendJourneyLog($id, 'Magento Error', Order::class, 'outgoing', '0', $request->from_mail, $request->to_mail, 'Magento Error Store MasterStatus Not Present', '', '', '', $storeWebsiteOrder->website_id);

                            return response()->json('Store MasterStatus Not Present', 400);
                        }
                    } else {
                        $this->createOrderMagentoErrorLog($order->id, 'Store Order Status Not Present');
                        $this->createEmailSendJourneyLog($id, 'Magento Error', Order::class, 'outgoing', '0', $request->from_mail, $request->to_mail, 'Magento Error Store Order Status Not Present', '', '', '', $storeWebsiteOrder->website_id);

                        return response()->json('Store Order Status Not Present', 400);
                    }
                } else {
                    $this->createOrderMagentoErrorLog($order->id, 'Website Order Not Present');
                    $this->createEmailSendJourneyLog($id, 'Magento Error', Order::class, 'outgoing', '0', $request->from_mail, $request->to_mail, 'Magento Error Store Website Order Not Present', '', '', '', '');

                    return response()->json('Website Order Not Present', 400);
                }
                $storeWebsiteOrder->update(['order_id', $status]);
            } else {
                $this->createOrderMagentoErrorLog($order->id, 'Store Website Order Not Present');
                $this->createEmailSendJourneyLog($id, 'Magento Error', Order::class, 'outgoing', '0', $request->from_mail, $request->to_mail, 'Magento Error Store Website Order Not Present', '', '', '', '');

                return response()->json('Store Website Order Not Present', 400);
            }
        }

        return response()->json('Success', 200);
    }

    public function orderProductStatusChange(Request $request)
    {
        try {
            // Get order product
            $orderProduct = OrderProduct::FindOrFail($request->orderProductId);

            if ($orderProduct) {
                // Get status from request
                $orderProductStatusId = $request->orderProductStatusId;

                // Update the order product status in order products table.
                $orderProduct->order_product_status_id = $orderProductStatusId;
                $orderProduct->save();

                // Find mapped purchase status
                $mappedStatus = StatusMapping::where('order_status_id', $orderProductStatusId)->first();
                if ($mappedStatus) {
                    $purchaseStatusId = $mappedStatus->purchase_status_id;
                    if ($purchaseStatusId) {
                        $purchaseProductOrders = PurchaseProductOrder::whereRaw('json_contains(order_products_order_id, \'["' . $request->orderProductId . '"]\')')->pluck('id')->toArray();
                        if ($purchaseProductOrders) {
                            PurchaseProductOrder::whereIn('id', $purchaseProductOrders)->update(['purchase_status_id' => $purchaseStatusId]);
                        }
                    }
                }

                return response()->json(['messages' => 'Order Product Status Updated Successfully', 'code' => 200]);
            }
        } catch (Exception $e) {
            return response()->json(['message' => 'Order product not found!'], 404);
        }
    }

    public function getInvoiceDetails(Request $request, $invoiceId)
    {
        $invoice = \App\Invoice::find($invoiceId);

        return view('orders.invoices.partials.edit-invoice-modal', compact('invoice'));
    }

    public function updateDetails(Request $request, $invoiceId)
    {
        $items = $request->order;

        if (! empty($items)) {
            foreach ($items as $k => $item) {
                $order   = \App\Order::find($k);
                $address = \App\OrderCustomerAddress::where('order_id', $k)->where('address_type', 'shipping')->first();
                if (! $address) {
                    $address               = new \App\OrderCustomerAddress;
                    $address->order_id     = $k;
                    $address->address_type = 'shipping';
                    if ($order) {
                        $customer = $order->customer;
                        if ($customer) {
                            $address->customer_id    = $customer->id;
                            $address->email          = $customer->email;
                            @[$firstname, $lastname] = explode(' ', $customer->name);
                            $address->firstname      = isset($firstname) ? $firstname : '';
                            $address->lastname       = isset($lastname) ? $lastname : '';
                            $address->telephone      = $customer->phone;
                        }
                    }
                }
                $address->city       = $item['city'];
                $address->country_id = $item['country_id'];
                $address->street     = $item['street'];
                $address->postcode   = $item['postcode'];
                $address->save();
            }
        }

        $orderproducts = $request->order_product;

        if (! empty($orderproducts)) {
            foreach ($orderproducts as $k => $op) {
                $orderP = \App\OrderProduct::find($k);
                if ($orderP) {
                    $orderP->fill($op);
                    $orderP->save();
                }
            }
        }

        return response()->json(['code' => 200, 'data' => [], 'message' => 'Invoice updated successfully']);
    }

    public function addStatus(Request $request)
    {
        $label = preg_replace('/[^A-Za-z0-9-]+/', '-', $request->name);

        $newStatus = CallBusyMessageStatus::create([
            'label' => $label,
            'name'  => $request->name,
        ]);

        return response()->json(['data' => $newStatus, 'message' => $newStatus->name . ' status added successfully.']);
    }

    public function storeStatus(Request $request, $id)
    {
        $callBusyMessage                                = CallBusyMessage::find($id);
        $callBusyMessage->call_busy_message_statuses_id = $request->select_id;
        $callBusyMessage->save();

        return response()->json(['message' => ' Status updated successfuly.']);
    }

    public function sendWhatappMessageOrEmail(Request $request)
    {
        $newValue = [];
        parse_str($request->formData, $newValue);

        $defaultWhatapp = $task_info = \DB::table('whatsapp_configs')
            ->select('*')
            ->whereRaw('find_in_set(' . CustomerController::DEFAULT_FOR . ',default_for)')
            ->first();
        $defaultNo = $defaultWhatapp->number;

        $newArr         = $request->except(['_token', 'formData']);
        $addRequestData = array_merge($newValue, $newArr);

        if (empty($addRequestData['message'])) {
            return response()->json(['error' => 'Please type message']);
        }

        if (empty($addRequestData['whatsapp']) && empty($addRequestData['email'])) {
            return response()->json(['error' => 'Please select atleast one checkbox']);
        }

        $customer                = null;
        $shouldSaveInChatMessage = false;

        if ($addRequestData['customerId'] && ! empty($addRequestData['whatsapp'])) {
            $customer = Customer::find($addRequestData['customerId']);

            if (! empty($customer) && ! empty($customer->phone) && ! empty($customer->whatsapp_number)) {
                app(\App\Http\Controllers\WhatsAppController::class)->sendWithWhatsApp($customer->phone, $customer->whatsapp_number, $addRequestData['message']);
                $shouldSaveInChatMessage = true;
            }
        } elseif (! $addRequestData['customerId'] && ! empty($addRequestData['whatsapp'])) {
            $formatted_phone = str_replace('+91', '', $addRequestData['fullNumber']);
            $sendTo          = str_replace('+', '', $addRequestData['fullNumber']);
            $sendFrom        = $defaultNo;
            if (! empty($addRequestData['whatsapp']) && ! empty($sendTo) && ! empty($sendFrom)) {
                app(\App\Http\Controllers\WhatsAppController::class)->sendWithWhatsApp($sendTo, $sendFrom, $addRequestData['message']);
                $shouldSaveInChatMessage = true;
            }
        }

        if ($addRequestData['customerId'] && ! empty($addRequestData['email'])) {
            $customer = Customer::find($addRequestData['customerId']);

            $subject = 'Ordered miss-called';

            if (! empty($customer) && ! empty($customer->email) && ! empty($addRequestData['message'])) {
                // dump('send customer email final');
                $from = config('env.MAIL_FROM_ADDRESS');
                // Check from address exist for customer's store website
                $emailAddress = EmailAddress::where('store_website_id', $customer->store_website_id)->first();
                if ($emailAddress) {
                    $from = $emailAddress->from_address;
                }

                $email = Email::create([
                    'model_id'        => $customer->id,
                    'model_type'      => Customer::class,
                    'from'            => $from,
                    'to'              => $customer->email,
                    'subject'         => $subject,
                    'message'         => $addRequestData['message'],
                    'template'        => 'customer-simple',
                    'additional_data' => '',
                    'status'          => 'pre-send',
                    'is_draft'        => 0,
                ]);

                \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');

                $shouldSaveInChatMessage = true;
            }
        }

        if ($shouldSaveInChatMessage) {
            $params = [
                'customer_id' => $customer->id,
                'number'      => $customer->phone,
                'message'     => $addRequestData['message'],
                'user_id'     => Auth::id(),
                'approved'    => 0,
                'status'      => 1,
            ];

            ChatMessage::create($params);

            return response()->json(['message' => 'Message send successfully']);
        }
    }

    /**
     * This function is use for create Order log
     *
     * @param type [array] inputArray
     * @param Request $request Request
     * @param mixed   $logType
     * @param mixed   $log
     *
     * @return void;
     */
    public function createOrderLog(Request $request, $logType = '', $log = '')
    {
        try {
            OrderErrorLog::create([
                'order_id'   => $request->order_id ?? '',
                'event_type' => $logType,
                'log'        => $log,
            ]);
        } catch (Exception $e) {
            OrderErrorLog::create(['order_id' => $request->order_id ?? '', 'log' => $e->getMessage(), 'event_type' => $logType]);
        }
    }

    /**
     * This function is use for Payment History
     *
     * @param Request $request Request
     *
     * @return JsonReponse;
     */
    public function paymentHistory(Request $request)
    {
        $order_id    = $request->input('order_id');
        $html        = '';
        $paymentData = \App\CashFlow::where('cash_flow_able_id', $order_id)
            ->where('cash_flow_able_type', \App\Order::class)
            ->where('type', 'paid')
            ->orderBy('date', 'DESC')
            ->get();
        $i = 1;
        if (count($paymentData) > 0) {
            foreach ($paymentData as $history) {
                $html .= '<tr>';
                $html .= '<td>' . $history->id . '</td>';
                $html .= '<td>' . $history->amount . '</td>';
                $html .= '<td>' . $history->date . '</td>';
                $html .= '<td>' . $history->description . '</td>';
                $html .= '</tr>';

                $i++;
            }

            return response()->json(['html' => $html, 'success' => true], 200);
        } else {
            $html .= '<tr>';
            $html .= '<td colspan="4">No Record found</td>';
            $html .= '</tr>';
            $this->createOrderLog($request, 'Payment History', 'No Record found');
        }

        return response()->json(['html' => $html, 'success' => true], 200);
    }

    /**
     * This function is use for cancel Transaction
     *
     * @param Request $request Request
     *
     * @return JsonReponse;
     */
    public function cancelTransaction(Request $request)
    {
        $order_id          = $request->get('order_id');
        $order             = \App\Order::where('id', $order_id)->first();
        $storeWebsiteOrder = StoreWebsiteOrder::where('order_id', $order_id)->first();
        if ($storeWebsiteOrder) {
            $website = StoreWebsite::find($storeWebsiteOrder->website_id);

            if ($website) {
                $magentoHelper = new MagentoHelperv2;
                $result        = $magentoHelper->cancelTransaction($order, $website);
                $this->createOrderLog($request, 'Cancel Transaction from Magento request', $result);

                return response()->json(['message' => $result, 'success' => true], 200);
            }
        } else {
            $this->createOrderLog($request, 'Cancel Transaction', 'Store Website Orders not found');

            return response()->json(['message' => 'Store Website Orders not found', 'order_id' => $order_id, 'success' => false], 500);
        }
    }

    /**
     * This function is use for List Order log
     *
     * @param Request $request Request
     *
     * @return JsonReponse;
     */
    public function getOrderErrorLog(Request $request)
    {
        try {
            $orderError = OrderErrorLog::where('order_id', $request->order_id)->get();

            if (count($orderError) > 0) {
                return response()->json(['code' => 200, 'data' => $orderError]);
            } else {
                return response()->json(['code' => 500, 'message' => 'Could not find any data']);
            }
        } catch (Exception $e) {
            $orderError = OrderErrorLog::where('order_id', $request->order_id)->get();

            return response()->json(['code' => 500, 'message' => $e->getMessage()]);
        }
    }

    public function syncTransaction(Request $request)
    {
        $order_id       = $request->get('order_id');
        $transaction_id = $request->get('transaction_id');
        $order          = Order::where('order_id', $order_id)->first();
        $message        = 'Issue in order';
        $success        = false;
        if ($order) {
            $order->transaction_id = $transaction_id;
            $order->save();
            $message = 'Transaction id updated successfully';
            $success = true;
        }
        $this->createOrderLog($request, 'Sync Transaction', $message);

        return response()->json(['message' => $message, 'success' => $success], 200);
    }

    public function returnStatus(Request $request)
    {
        try {
            $order_id      = $request->get('id');
            $return_status = $request->get('status');
            if ($return_status) {
                $return_name = 'true';
            } else {
                $return_name = 'false';
            }
            $order   = Order::where('id', $order_id)->first();
            $message = 'Return Order status updated with ' . $return_name;
            $success = false;
            if ($order) {
                $order->order_return_request = $return_status;
                $order->save();
                $message = 'Return Order updated successfully with ' . $return_name;
                $success = true;
            }

            return response()->json(['message' => $message, 'success' => $success, 'code' => 200], 200);
        } catch (Exception $e) {
            return response()->json(['code' => 500, 'message' => $e->getMessage()]);
        }
    }

    public function store_order_status_history_create($request, $response, $store_website_id)
    {
        if (isset($response) && $response != '') {
            $response = json_encode($response);
        }
        $storeHistory = [
            'request'          => json_encode($request->all()),
            'response'         => $response,
            'store_website_id' => $store_website_id,
            'updated_by'       => \Auth::user()->id,
            'action_type'      => 'Fetch Store Status',
        ];
        StoreOrderStatusesHistory::create($storeHistory);
    }

    public function store_order_status_history_update($request, $response, $id)
    {
        $store_order_status = Store_order_status::find($id);
        if (isset($response) && $response != '') {
            $response = json_encode($response);
        }
        $storeHistory = [
            'request'                    => json_encode($request->all()),
            'response'                   => $response,
            'store_order_statuses_id'    => $id,
            'old_order_status_id'        => $store_order_status->order_status_id,
            'old_store_website_id'       => $store_order_status->store_website_id,
            'old_status'                 => $store_order_status->status,
            'old_store_master_status_id' => $store_order_status->store_master_status_id,

            'new_order_status_id'        => $request->order_status_id,
            'new_store_website_id'       => $request->store_website_id,
            'new_status'                 => $request->status,
            'new_store_master_status_id' => $request->store_master_status_id,

            'updated_by'  => \Auth::user()->id,
            'action_type' => 'Edit',
        ];

        StoreOrderStatusesHistory::create($storeHistory);
    }

    public function statusHistory()
    {
        $id = $_REQUEST['id'];

        $statusHistorySite = StoreOrderStatusesHistory::where('store_order_statuses_id', $id)->get();

        $store_website_id = 0;
        if (isset($statusHistorySite[0]->new_store_website_id) && $statusHistorySite[0]->new_store_website_id > 0) {
            $store_website_id = $statusHistorySite[0]->new_store_website_id;
        }

        $statusHistory = StoreOrderStatusesHistory::where('store_order_statuses_id', $id)->orWhere('store_website_id', $store_website_id)->get();

        $statusHistory = $statusHistory->map(function ($status) {
            $status->request                    = $status->request;
            $status->response                   = $status->response;
            $status->request_detail             = $status->request;
            $status->response_detail            = $status->response;
            $status->old_order_status_id        = OrderStatus::where('id', $status->old_order_status_id)->value('status');
            $status->old_store_website_id       = StoreWebsite::where('id', $status->old_store_website_id)->value('website');
            $status->old_store_master_status_id = StoreMasterStatus::where('id', $status->old_store_master_status_id)->value('label');

            $status->new_order_status_id        = OrderStatus::where('id', $status->new_order_status_id)->value('status');
            $status->new_store_website_id       = StoreWebsite::where('id', $status->new_store_website_id)->value('website');
            $status->new_store_master_status_id = StoreMasterStatus::where('id', $status->new_store_master_status_id)->value('label');

            return $status;
        });

        return response()->json(['code' => 200, 'data' => $statusHistory]);
    }

    public function customerList(Request $request)
    {
        $customer = Customer::where('name', '!=', '')->orderBy('name');
        if (! empty($request->q)) {
            $customer->where(function ($q) use ($request) {
                $q->where('name', 'LIKE', '%' . $request->q . '%');
            });
        }
        $customer                     = $customer->paginate(30);
        $result['total_count']        = $customer->total();
        $result['incomplete_results'] = $customer->nextPageUrl() !== null;

        foreach ($customer as $customer) {
            $result['items'][] = [
                'id'   => $customer->id,
                'text' => $customer->name,
            ];
        }

        return response()->json($result);
    }

    public function callhistoryStatusList(Request $request)
    {
        $callhistory = CallHistory::groupBy('status');
        if (! empty($request->q)) {
            $callhistory->where(function ($q) use ($request) {
                $q->where('name', 'LIKE', '%' . $request->q . '%');
            });
        }
        $callhistory                  = $callhistory->paginate(30);
        $result['total_count']        = $callhistory->total();
        $result['incomplete_results'] = $callhistory->nextPageUrl() !== null;

        foreach ($callhistory as $callhistory) {
            $result['items'][] = [
                'id'   => $callhistory->status,
                'text' => $callhistory->status,
            ];
        }

        return response()->json($result);
    }

    public function storeWebsiteList(Request $request)
    {
        $storewebsite = StoreWebsite::orderBy('website');
        if (! empty($request->q)) {
            $storewebsite->where(function ($q) use ($request) {
                $q->where('name', 'LIKE', '%' . $request->q . '%');
            });
        }
        $storewebsite                 = $storewebsite->paginate(30);
        $result['total_count']        = $storewebsite->total();
        $result['incomplete_results'] = $storewebsite->nextPageUrl() !== null;

        foreach ($storewebsite as $storewebsite) {
            $result['items'][] = [
                'id'   => $storewebsite->id,
                'text' => $storewebsite->website,
            ];
        }

        return response()->json($result);
    }

    public function getInvoiceCustomerEmailSelected(Request $request)
    {
        $ids      = explode(',', $request->ids);
        $emails   = [];
        $invoices = Invoice::whereIn('id', $ids)->get();
        foreach ($invoices as $invoice) {
            $emails[] = ['email' => $invoice->orders[0]->customer->email, 'id' => $invoice->id];
        }

        return $emails;
    }

    public function orderStatusColorCode(Request $request)
    {
        $perPage = 10;

        $orderStatus = OrderStatus::latest()
            ->paginate($perPage);

        $html = view('orders.order-status-modal-html')->with('orderStatus', $orderStatus)->render();

        return response()->json(['code' => 200, 'data' => $orderStatus, 'html' => $html, 'message' => 'Content render']);
    }

    public function orderStatusColorCodeUpdate(Request $request)
    {
        $orderstatus        = OrderStatus::find($request->orderId);
        $orderstatus->color = $request->colorValue;
        $orderstatus->save();

        return response()->json(['code' => 200, 'orderstatus' => $orderstatus, 'message' => 'Color Code has been Updated Succeesfully!']);
    }

    public function ordersColumnVisbilityUpdate(Request $request)
    {
        $userCheck = DataTableColumn::where('user_id', auth()->user()->id)->where('section_name', 'orders-listing')->first();

        if ($userCheck) {
            $column               = DataTableColumn::find($userCheck->id);
            $column->section_name = 'orders-listing';
            $column->column_name  = json_encode($request->column_orders);
            $column->save();
        } else {
            $column               = new DataTableColumn();
            $column->section_name = 'orders-listing';
            $column->column_name  = json_encode($request->column_orders);
            $column->user_id      = auth()->user()->id;
            $column->save();
        }

        return redirect()->back()->with('success', 'column visiblity Added Successfully!');
    }

    public function orderChangeStatusHistory(Request $request)
    {
        $order_id         = $request->order_id;
        $order_product_id = $request->product_item_id;

        $datas = OrderStatusMagentoRequestResponseLog::with('user', 'order')
            ->where('order_id', $order_id)
            ->where('order_product_id', $order_product_id)
            ->orderBy('created_at', 'DESC')
            ->get();

        return response()->json([
            'status'      => true,
            'data'        => $datas,
            'message'     => 'History get successfully',
            'status_name' => 'success',
        ], 200);
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/OrderReportController.php 
Content: <?php

namespace App\Http\Controllers;

use Auth;
use App\Order;
use App\OrderReport;
use App\OrderStatus;
use App\Helpers\OrderHelper;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;

class OrderReportController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        //
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $this->validate($request, [
            'status_id'       => 'required',
            'completion_date' => 'required',
        ]);

        $report = new OrderReport;

        $report->status_id = $request->status_id;
        $report->user_id   = Auth::id();

        if ($request->order_id) {
            $report->order_id = $request->order_id;
        } else {
            $report->customer_id = $request->customer_id;
        }

        $report->completion_date = $request->completion_date;

        $report->save();

        return redirect()->back()->with('message', 'Order action was created successfully');
    }

    public function statusStore(Request $request)
    {
        $this->validate($request, [
            'status' => 'required',
        ]);

        $status = new OrderStatus;

        $status->status = $request->status;

        $status->save();

        return redirect()->back()->with('message', 'Order status was created successfully');
    }

    public function orderRefundStatusMessage(Request $request)
    {
        $page     = $request->page;
        $paginate = 10;
        $orders   = DB::table('orders')
            ->join('customers', 'orders.customer_id', 'customers.id')
            ->select('orders.id', 'orders.is_flag', 'customer_id', 'orders.created_at as date', DB::raw("'order' as type"), 'customers.phone', 'customers.name', 'customers.email', 'order_status_id', 'estimated_delivery_date');

        if ($request->order_id && $request->order_id != null) {
            $orders->where('orders.id', $request->order_id);
        }
        if ($request->customer_name && $request->customer_name != null) {
            $orders->where('customers.name', 'LIKE', '%' . $request->customer_name . '%');
        }

        if ($request->flt_order_status && $request->flt_order_status != null) {
            $orders->where('order_status_id', $request->flt_order_status);
        }
        if ($request->flt_estimate_date && $request->flt_estimate_date != null) {
            $orders->where('estimated_delivery_date', 'LIKE', $request->flt_estimate_date);
        }

        $order_n_refunds = DB::table('return_exchanges')
            ->join('customers', 'return_exchanges.customer_id', 'customers.id')
            ->select('return_exchanges.id', 'is_flagged as is_flag', 'customer_id', 'return_exchanges.created_at as date', DB::raw("'refund' as type"), 'customers.phone', 'customers.name', 'customers.email', DB::raw("'' as order_status_id"), DB::raw('return_exchanges.est_completion_date as estimated_delivery_date'));
        if ($request->order_id && $request->order_id != null) {
            $order_n_refunds->where('return_exchanges.id', $request->order_id);
        }
        if ($request->customer_name && $request->customer_name != null) {
            $order_n_refunds->where('customers.name', 'LIKE', '%' . $request->customer_name . '%');
        }
        $order_n_refunds   = $order_n_refunds->union($orders)->orderBy('date', 'DESC')->get();
        $orderStatusList   = OrderStatus::all();
        $order_status_list = OrderHelper::getStatus();

        return view('orders.status-history', compact('order_n_refunds', 'order_status_list', 'orderStatusList'));
    }

    public function setFlag(Request $request)
    {
        $return_exchanges = Order::find($request->id);

        if ($return_exchanges->is_flag == 0) {
            $return_exchanges->is_flag = 1;
        } else {
            $return_exchanges->is_flag = 0;
        }

        $return_exchanges->save();

        return response()->json(['is_flagged' => $return_exchanges->is_flag]);
    }

    public function lastCommunicated($type = 'any')
    {
        $q = $this->chatMessage()->whereNotIn('status', ['7', '8', '9', '10']);

        if (in_array($type, ['unread', 'unapproved', 'chatbot_unapproved'])) {
            if ($type == 'unread') {
                $type = 0;
            } elseif ($type == 'chatbot_unapproved') {
                $type = 11;
            } else {
                $type = 1;
            }
            $q = $q->where('chat_messages.status', $type);
        } elseif ($type == 'last_communicated') {
            $q = $q->where('chat_messages.message', '!=', '')->where(function ($q) {
                $q->where('group_id', '<', 0)->orWhere('group_id', '')->orWhereNull('group_id');
            });
        } elseif ($type == 'last_received') {
            $q = $q->where('chat_messages.number', '=', $this->phone)->where('chat_messages.message', '!=', '');
        }

        return $q->orderBy('created_at', 'DESC')->first();
    }

    /**
     * Display the specified resource.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        //
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/PermissionController.php 
Content: <?php

namespace App\Http\Controllers;

use App\User;
use App\Permission;
use Illuminate\Http\Request;

class PermissionController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request)
    {
        $query = Permission::query();

        if ($request->term) {
            $query = $query->where('route', 'LIKE', '%' . $request->term . '%');
        }

        $users = User::where('is_active', 1)->get();

        $permissions = $query->orderBy('id', 'DESC')->paginate(25)->appends(request()->except(['page']));

        if ($request->ajax()) {
            return response()->json([
                'tbody' => view('permissions.partials.list-permission', compact('permissions'))->with('i', ($request->input('page', 1) - 1) * 5)->render(),
                'links' => (string) $permissions->render(),
                'count' => $permissions->total(),
            ], 200);
        }

        return view('permissions.index', compact('users', 'permissions'))->with('i', ($request->input('page', 1) - 1) * 10);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        return view('permissions.create');
    }

    /**
     * Store a newly created resource in storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $this->validate($request, [
            'name'  => 'required|unique:roles,name',
            'route' => 'required|unique:roles,name',

        ]);
        $permission        = new Permission();
        $permission->name  = $request->name;
        $permission->route = $request->route;
        $permission->save();

        return redirect()->back()
            ->with('success', 'Permission created successfully');
    }

    /**
     * Display the specified resource.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        $permissions = Permission::find($id);

        return view('permissions.show', compact('permissions'));
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        $permissions = Permission::find($id);

        return view('permissions.edit', compact('permissions'));
    }

    /**
     * Update the specified resource in storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        $this->validate($request, [
            'name'  => 'required',
            'route' => 'required',

        ]);

        $permission        = Permission::find($id);
        $permission->name  = $request->input('name');
        $permission->route = $request->input('route');
        $permission->save();

        return redirect()->route('permissions.index')
            ->with('success', 'Role updated successfully');
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        $permission = Permission::find($id);
        $permission->delete();

        return redirect()->route('permissions.index')
            ->with('success', 'Role deleted successfully');
    }

    public function delete_record(Request $request)
    {
        $ids = $request->user_id;
        \DB::table('permission_user')->whereIn('user_id', explode(',', $ids))->delete();

        return response()->json(['success' => 'Deleted successfully.']);
    }

    public function users(Request $request)
    {
        $users       = User::where('users.is_active', 1)->orderBy('name', 'asc');
        $permissions = Permission::orderBy('name', 'asc');

        $permission_datas = Permission::orderBy('name', 'asc')->get();
        $user_datas       = User::where('is_active', 1)->orderBy('name', 'asc')->get();

        if (! empty($request->assign_permission) && in_array('1', $request->assign_permission) && ! in_array('0', $request->assign_permission)) {
            $users = $users->select('users.*')->join('permission_user', 'permission_user.user_id', '=', 'users.id')->join('permissions', 'permission_user.permission_id', '=', 'permissions.id')->groupBy('permission_user.user_id');

            if ($request->search_row) {
                $users = $users->whereIn('permissions.name', $request->search_row);
            }

            if ($request->search_user) {
                $permissions = \DB::table('permissions')->whereIn('permissions.id', function ($query) {
                    $query->select('permissions.id')->from('permissions')->join('permission_user', 'permissions.id', '=', 'permission_user.permission_id')->whereIn('permission_user.user_id', \Request::input('search_user'));
                })->orderBy('permissions.name');
            } else {
                $permissions = \DB::table('permissions')->whereIn('permissions.id', function ($query) {
                    $query->select('permissions.id')->from('permissions')->join('permission_user', 'permissions.id', '=', 'permission_user.permission_id');
                })->orderBy('permissions.name');
            }
        }

        if (! empty($request->assign_permission) && in_array('0', $request->assign_permission) && ! in_array('1', $request->assign_permission)) {
            if (! $request->search_user) {
                $users = $users->whereNotIn(
                    'users.id', function ($query) {
                        $query->select('permission_user.user_id')->from('permission_user');
                    });
            }
            if ($request->search_user) {
                $where       = \DB::table('permission_user')->whereIn('user_id', $request->search_user)->pluck('permission_id');
                $permissions = \DB::table('permissions')->whereIn('permissions.id', function ($query) {
                    $query->select('permissions.id')->from('permissions')->join('permission_user', 'permissions.id', '!=', 'permission_user.permission_id');
                })->whereNotIn('permissions.id', $where)->orderBy('permissions.name');
            } else {
                $permissions = \DB::table('permissions')->whereIn('permissions.id', function ($query) {
                    $query->select('permissions.id')->from('permissions')->join('permission_user', 'permissions.id', '!=', 'permission_user.permission_id');
                })->orderBy('permissions.name');
            }
        }

        if ($request->search_row) {
            if (! $request->assign_permission) {
                $users = $users->select('users.*')->join('permission_user', 'permission_user.user_id', '=', 'users.id')->join('permissions', 'permission_user.permission_id', '=', 'permissions.id')->groupBy('permission_user.user_id');
                $users = $users->whereIn('permissions.name', $request->search_row);
            }

            $permissions = $permissions->whereIn('permissions.name', $request->search_row);
        }

        if ($request->search_user) {
            $users = $users->whereIn('users.id', $request->search_user);
        }

        $users = $users->paginate(10);

        $permissions = $permissions->get();

        return view('permissions.users', compact('users', 'permissions', 'user_datas', 'permission_datas'))->with('i', ($request->input('page', 1) - 1) * 10);
    }

    /**
     * @SWG\Get(
     *   path="/users/updatePermission",
     *   tags={"Permission"},
     *   summary="update permission",
     *   operationId="update-permission",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *   @SWG\Response(response=406, description="not acceptable"),
     *   @SWG\Response(response=500, description="internal server error"),
     *
     *      @SWG\Parameter(
     *          name="mytest",
     *          in="path",
     *          required=true,
     *          type="string"
     *      ),
     * )
     */
    public function updatePermission(Request $request)
    {
        $user_id       = $request->user_id;
        $permission_id = $request->permission_id;
        $is_Active     = $request->is_active;
        $user          = User::findorfail($user_id);
        //ADD PERMISSION
        if ($is_Active == 0) {
            $user->permissions()->attach($permission_id);
            $message = 'Permission added Successfully';
        }
        //REMOVE PERMISSION
        if ($is_Active == 1) {
            $user->permissions()->detach($permission_id);
            $message = 'Permission removed Successfully';
        }

        $data = [
            'success' => true,
            'message' => $message,
        ];

        return response()->json($data);
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/PlanController.php 
Content: <?php

namespace App\Http\Controllers;

use App\Plan;
use App\PlanTypes;
use App\PlanCategories;
use App\PlanBasisStatus;
use App\Models\PlanAction;
use Illuminate\Support\Arr;
use Illuminate\Http\Request;
use App\Models\PlanRemarkHistory;
use Illuminate\Support\Facades\DB;

class PlanController extends Controller
{
    public function __construct()
    {
    }

    public function index()
    {
        $query     = Plan::whereNull('parent_id');
        $basisList = PlanBasisStatus::all();

        $typeList     = PlanTypes::all();
        $categoryList = PlanCategories::all();

        if (request('status')) {
            $query->where('status', request('status'));
        }

        if (request('priority')) {
            $query->where('priority', request('priority'));
        }
        if (request('typefilter')) {
            $query->where('type', request('typefilter'));
        }
        if (request('categoryfilter')) {
            $query->where('type', request('categoryfilter'));
        }

        if (request('date')) {
            $query->whereDate('date', request('date'));
        }

        if (request('term')) {
            $query->where('subject', 'LIKE', '%' . request('term') . '%');
            $query->orwhere('sub_subject', 'LIKE', '%' . request('term') . '%');
            $query->orwhere('basis', 'LIKE', '%' . request('term') . '%');
            $query->orwhere('implications', 'LIKE', '%' . request('term') . '%');
        }

        $planList = $query->orderBy('id', 'DESC')->paginate(10);

        return view('plan-page.index', compact('planList', 'basisList', 'typeList', 'categoryList'));
    }

    public function store(Request $request)
    {
        $rules = [
            'priority' => 'required',
            'status'   => 'required',
        ];

        $validation = validator(
            $request->all(),
            $rules
        );
        if (isset($request->parent_id)) {
            $plan     = Plan::find($request->parent_id);
            $type     = $plan->type;
            $category = $plan->category;
        } else {
            $type = PlanTypes::find($request->type);
            if (! $type) {
                $data = [
                    'type' => $request->type,
                ];

                PlanTypes::insert($data);
            }

            $category = PlanCategories::where('category', $request->category)->first();

            if (! $category) {
                $data = [
                    'category' => $request->category,
                ];

                PlanCategories::insert($data);
            }
        }

        $basis = PlanBasisStatus::find($request->basis);
        if (! $basis) {
            $data = [
                'status' => $request->basis,
            ];

            PlanBasisStatus::insert($data);
        }
        $typeList     = PlanTypes::all();
        $categoryList = PlanCategories::all();
        //If validation fail send back the Input with errors
        if ($validation->fails()) {
            //withInput keep the users info
            return redirect()->back()->withErrors($validation)->withInput();
        } else {
            $data = [
                'subject'      => $request->subject,
                'sub_subject'  => $request->sub_subject,
                'description'  => $request->description,
                'priority'     => $request->priority,
                'date'         => $request->date,
                'status'       => $request->status,
                'budget'       => $request->budget,
                'deadline'     => $request->deadline,
                'basis'        => $request->basis,
                'type'         => $request->type,
                'category'     => $request->category,
                'implications' => $request->implications,
            ];
            if ($request->parent_id) {
                $data['parent_id'] = $request->parent_id;
            }
            if ($request->remark) {
                $data['remark'] = $request->remark;
            }
            if ($request->id) {
                Plan::whereId($request->id)->update($data);

                return redirect()->back()->with('success', 'Plan updated successfully.');
            } else {
                Plan::insert($data);

                return redirect()->back()->with('success', 'Plan saved successfully.');
            }
        }
    }

    public function newBasis(Request $request)
    {
        $rules = [
            'name' => 'required',
        ];

        $validation = validator(
            $request->all(),
            $rules
        );
        if ($validation->fails()) {
            return redirect()->back()->withErrors($validation)->withInput();
        }

        $data = [
            'status' => $request->name,
        ];

        PlanBasisStatus::insert($data);

        return redirect()->back()->with('success', 'New status created successfully.');
    }

    public function newType(Request $request)
    {
        $rules = [
            'name' => 'required',
        ];

        $validation = validator(
            $request->all(),
            $rules
        );
        if ($validation->fails()) {
            return redirect()->back()->withErrors($validation)->withInput();
        }

        $data = [
            'type' => $request->name,
        ];

        PlanTypes::insert($data);

        return redirect()->back()->with('success', 'New type created successfully.');
    }

    public function newCategory(Request $request)
    {
        $rules = [
            'name' => 'required',
        ];

        $validation = validator(
            $request->all(),
            $rules
        );
        if ($validation->fails()) {
            return redirect()->back()->withErrors($validation)->withInput();
        }

        $data = [
            'category' => $request->name,
        ];

        PlanCategories::insert($data);

        return redirect()->back()->with('success', 'New category created successfully.');
    }

    public function edit(Request $request)
    {
        $data = Plan::where('id', $request->id)->first();
        if ($data) {
            return response()->json([
                'code'   => 200,
                'object' => $data,
            ]);
        }

        return response()->json([
            'code'   => 500,
            'object' => null,
        ]);
    }

    public function delete($id = null)
    {
        Plan::whereId($id)->delete();

        return redirect()->back()->with('success', 'Plan deleted successfully.');
    }

    public function report($id = null)
    {
        $reports = \App\ErpLog::where('model', \App\StoreWebsiteAnalytic::class)->orderBy('id', 'desc')->where('model_id', $id)->get();

        return view('store-website-analytics.reports', compact('reports'));
    }

    public function planAction(Request $request, $id)
    {
        $data = Plan::where('id', $id)->first();

        return $data;
    }

    public function planActionAddOn(Request $request, $id)
    {
        $data = Plan::where('id', $id)
            ->with('getPlanActionStrength', 'getPlanActionWeakness', 'getPlanActionOpportunity', 'getPlanActionThreat')->first();
        $strengths     = $data->getPlanActionStrength;
        $weaknesses    = $data->getPlanActionWeakness;
        $opportunities = $data->getPlanActionOpportunity;
        $threats       = $data->getPlanActionThreat;

        return view('modal.plan_action', compact('strengths', 'weaknesses', 'opportunities', 'threats'));
    }

    public function planActionStore(Request $request)
    {
        $data = Plan::where('id', $request->id)->first();

        //change code by new requirement
        if ($data) {
            $created_by    = \Auth::user()->id;
            $do_not_delete = [];

            //----------------- Edit Process ----------------------------
            if (isset($request->plan_action_old)) {
                $do_not_delete = $request->plan_action_old;
            }
            $plan_action_old_active = [];

            if (isset($request->plan_action_old_active_hidden)) {
                foreach ($request->plan_action_old_active_hidden as $key => $data) {
                    if (! isset($request->plan_action_old_active[$key])) {
                        $plan_action_old_active[$key] = 0;
                    } else {
                        $plan_action_old_active[$key] = $request->plan_action_old_active[$key];
                    }
                }

                $result = array_diff_assoc($plan_action_old_active, $request->plan_action_old_active_hidden);

                //get active data
                $filteredArrayByActive = Arr::where($result, function ($value, $key) {
                    return $value == 1;
                });

                //get In-active data
                $filteredArrayByInActive = Arr::where($result, function ($value, $key) {
                    return $value == 0;
                });

                //update active status
                PlanAction::whereIn('id', array_keys($filteredArrayByActive))->update(['is_active' => 1]);
                PlanAction::whereIn('id', array_keys($filteredArrayByInActive))->update(['is_active' => 0]);
            }

            //----------------- Edit Process End ----------------------------

            //----------------- Add/Edit Process ----------------------------
            if (isset($request->plan_action_strength)) {
                foreach ($request->plan_action_strength as $plan_action_strength) {
                    $plan_action_strengthData = PlanAction::firstOrCreate([
                        'plan_id'          => $request->id,
                        'plan_action'      => $plan_action_strength,
                        'plan_action_type' => 1,
                        'created_by'       => $created_by,
                    ]);
                    array_push($do_not_delete, $plan_action_strengthData->id);
                }
            }
            if (isset($request->plan_action_weakness)) {
                foreach ($request->plan_action_weakness as $plan_action_weakness) {
                    $plan_action_weaknessData = PlanAction::firstOrCreate([
                        'plan_id'          => $request->id,
                        'plan_action'      => $plan_action_weakness,
                        'plan_action_type' => 2,
                        'created_by'       => $created_by,
                    ]);
                    array_push($do_not_delete, $plan_action_weaknessData->id);
                }
            }
            if (isset($request->plan_action_opportunity)) {
                foreach ($request->plan_action_opportunity as $plan_action_opportunity) {
                    $plan_action_opportunityData = PlanAction::firstOrCreate([
                        'plan_id'          => $request->id,
                        'plan_action'      => $plan_action_opportunity,
                        'plan_action_type' => 3,
                        'created_by'       => $created_by,
                    ]);
                    array_push($do_not_delete, $plan_action_opportunityData->id);
                }
            }
            if (isset($request->plan_action_threat)) {
                foreach ($request->plan_action_threat as $plan_action_threat) {
                    $plan_action_threatData = PlanAction::firstOrCreate([
                        'plan_id'          => $request->id,
                        'plan_action'      => $plan_action_threat,
                        'plan_action_type' => 4,
                        'created_by'       => $created_by,
                    ]);
                    array_push($do_not_delete, $plan_action_threatData->id);
                }
            }
            //----------------- Add/Edit Process End ----------------------------

            //delete extra plan action
            PlanAction::whereNotIn('id', $do_not_delete)->where('plan_id', $request->id)->delete();

            return response()->json(['code' => 200, 'message' => 'Your data saved sucessfully.']);
        }

        return response()->json(['code' => 500, 'message' => 'Data not found!']);
    }

    public function planSolutionsStore(Request $request)
    {
        if ($request->solution && $request->id) {
            $data = [
                'solution' => $request->solution,
                'plan_id'  => $request->id,
            ];
            DB::table('plan_solutions')->insert($data);

            return response()->json(['code' => 200, 'message' => 'Your data saved sucessfully.']);
        }

        return response()->json(['code' => 500, 'message' => 'Data not found!']);
    }

    public function planSolutionsGet(Request $request, $id)
    {
        if ($id) {
            $data = DB::table('plan_solutions')->where('plan_id', $id)->get();

            return $data;
        }

        return response()->json(['code' => 500, 'message' => 'Data not found!']);
    }

    public function changeStatusCategory(Request $request)
    {
        $plan         = Plan::where('id', $request->plan_id)->first();
        $plan->status = $request->status;
        $plan->update();

        return response()->json(['code' => 500, 'message' => 'Status Update Successfully!']);
    }

    public function addPlanRemarks(Request $request)
    {
        $plan         = Plan::where('id', $request->plan_id)->first();
        $plan->remark = $request->remark;
        $plan->save();

        $planRemarkhistory          = new PlanRemarkHistory();
        $planRemarkhistory->plan_id = $request->plan_id;
        $planRemarkhistory->remarks = $request->remark;
        $planRemarkhistory->user_id = \Auth::id();
        $planRemarkhistory->save();

        return response()->json(['code' => 500, 'message' => 'Remark Added Successfully!']);
    }

    public function getRemarkList(Request $request)
    {
        $taskRemarkData = PlanRemarkHistory::where('plan_id', '=', $request->recordId)->get();

        $html = '';
        foreach ($taskRemarkData as $taskRemark) {
            $html .= '<tr>';
            $html .= '<td>' . $taskRemark->id . '</td>';
            $html .= '<td>' . $taskRemark->user->name . '</td>';
            $html .= '<td>' . $taskRemark->remarks . '</td>';
            $html .= '<td>' . $taskRemark->created_at . '</td>';
            $html .= "<td><i class='fa fa-copy copy_remark' data-remark_text='" . $taskRemark->remarks . "'></i></td>";
        }

        return response()->json(['code' => 200, 'data' => $html, 'message' => 'Remark listed Successfully']);
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/ProductController.php 
Content: <?php

namespace App\Http\Controllers;

use Auth;
use App\Sop;
use App\Sale;
use App\Task;
use App\User;
use App\Brand;
use App\Order;
use App\Sizes;
use App\Stage;
use App\Stock;
use App\Colors;
use App\HsCode;
use App\Product;
use App\Setting;
use App\Category;
use App\ErpLeads;
use App\Language;
use App\Supplier;
use Carbon\Carbon;
use App\LogRequest;
use App\ChatMessage;
use App\HsCodeGroup;
use App\UserProduct;
use App\OrderProduct;
use App\scraperImags;
use App\StoreWebsite;
use Dompdf\Exception;
use App\HsCodeSetting;
use App\ColorReference;
use App\ListingHistory;
use App\RejectedImages;
use App\ProductSupplier;
use App\ScrapedProducts;
use Plank\Mediable\Media;
use App\DescriptionChange;
use App\SimplyDutyCountry;
use App\SiteCroppedImages;
use App\Jobs\PushToMagento;
use App\Loggers\LogScraper;
use App\SimplyDutyCategory;
use App\CropImageGetRequest;
use App\Helpers\QueryHelper;
use App\Product_translation;
use App\ProductPushErrorLog;
use App\ProductSuggestedLog;
use App\TranslationLanguage;
use App\UserProductFeedback;
use Illuminate\Http\Request;
use App\Helpers\StatusHelper;
use App\CroppedImageReference;
use App\Helpers\ProductHelper;
use App\Loggers\LogListMagento;
use App\MessagingGroupCustomer;
use App\Models\DataTableColumn;
use App\PushToMagentoCondition;
use App\Jobs\PushProductOnlyJob;
use App\ProductTranslationHistory;
use Illuminate\Support\Facades\DB;
use App\Jobs\TestPushProductOnlyJob;
use App\CropImageHttpRequestResponse;
use App\Jobs\Flow2PushProductOnlyJob;
use Illuminate\Support\Facades\Queue;
use Qoraiche\MailEclipse\MailEclipse;
use Illuminate\Support\Facades\Redirect;
use App\Models\ProductListingFinalStatus;
use App\HsCodeGroupsCategoriesComposition;
use App\Jobs\Flow2ConditionCheckProductOnly;
use App\Jobs\ImageApprovalPushProductOnlyJob;
use seo2websites\MagentoHelper\MagentoHelper;
use Illuminate\Pagination\LengthAwarePaginator;
use App\Http\Requests\Products\ProductTranslationRequest;
use Plank\Mediable\Facades\MediaUploader as MediaUploader;

class ProductController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function __construct()
    {
        $this->middleware('permission:product-list', ['only' => ['show']]);
        $this->middleware('permission:product-lister', ['only' => ['listing']]);
        $this->middleware('permission:product-lister', ['only' => ['listing']]);
        $this->middleware('permission:product-create', ['only' => ['create', 'store']]);
        $this->middleware('permission:product-edit', ['only' => ['edit', 'update']]);

        $this->middleware('permission:product-delete', ['only' => ['destroy']]);
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request)
    {
        if ($request->archived == 'true') {
            $products = Product::onlyTrashed()->latest()->select(['id', 'sku', 'name']);
        } else {
            $products = Product::latest()->select(['id', 'sku', 'name']);
        }
        $term     = $request->term;
        $archived = $request->archived;

        if (! empty($term)) {
            $products = $products->where(function ($query) use ($term) {
                return $query
                    ->orWhere('id', 'like', '%' . $term . '%')
                    ->orWhere('name', 'like', '%' . $term . '%')
                    ->orWhere('sku', 'like', '%' . $term . '%');
            });
        }

        $products    = $products->paginate(Setting::get('pagination'));
        $websiteList = \App\Helpers\ProductHelper::storeWebsite();

        return view('products.index', compact('products', 'term', 'archived', 'websiteList'))
            ->with('i', (request()->input('page', 1) - 1) * 10);
    }

    public function customerReviews(Request $request)
    {
        $reviews = \App\CustomerReview::with('storeWebsite')->latest();
        $email   = '';
        $name    = '';
        $store   = '';
        if (! empty($request->email)) {
            $email = $request->email;
            $reviews->where('email', 'LIKE', '%' . $request->email . '%');
        }
        if (! empty($request->name)) {
            $name = $request->name;
            $reviews->where('name', 'LIKE', '%' . $request->name . '%');
        }
        if (! empty($request->store)) {
            $store = $request->store;
            $reviews->whereHas('storeWebsite', function ($q) use ($request) {
                $q->where('website', 'LIKE', '%' . $request->store . '%');
            });
        }

        $reviews = $reviews->paginate(15);

        return view('products.reviews', compact('reviews', 'email', 'name', 'store'));
    }

    public function deleteReview(Request $request)
    {
        $reviewID = $request->id;
        $delete   = \App\CustomerReview::where('id', $request->id)->delete();

        return response()->json(['code' => 200, 'message' => 'Review deleted successfully']);
    }

    public function approveReview(Request $request)
    {
        ini_set('memory_limit', '-1');

        $data  = ['platform_id' => $request->platform_id, 'status' => 1];
        $data  = json_encode($data);
        $url   = $request->base_url . '/testimonial/index/statusupdate';
        $token = $request->token;

        $ch = curl_init($url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
        curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: application/json', 'accept: application/json', 'Authorization: Bearer ' . $token]);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
        $result = curl_exec($ch);
        $err    = curl_error($ch);
        \Log::channel('approveReview')->info(json_encode([$url, $token, $data, $result, 'approveReview']));
        $response = json_decode($result);

        if ($response) {
            $update = \App\CustomerReview::where(['platform_id' => $request->platform_id])->update(['status' => 1, 'push' => 1]);
        }

        \Log::info(print_r([$url, $token, $data, $result], true));
    }

    public function approvedListing(Request $request, $pageType = '')
    {
        if (! Setting::has('auto_push_product')) {
            $auto_push_product = Setting::add('auto_push_product', 0, 'int');
        } else {
            $auto_push_product = Setting::get('auto_push_product');
        }
        $cropped                = $request->cropped;
        $colors                 = (new Colors)->all();
        $categories             = Category::with('parent')->get();
        $category_tree          = [];
        $categories_array       = [];
        $categories_paths_array = [];
        $siteCroppedImages      = [];
        $brands                 = Brand::getAll();
        $storeWebsites          = StoreWebsite::get();

        $suppliers = DB::select('
                SELECT id, supplier
                FROM suppliers

                INNER JOIN (
                    SELECT supplier_id FROM product_suppliers GROUP BY supplier_id
                    ) as product_suppliers
                ON suppliers.id = product_suppliers.supplier_id
        ');

        foreach ($categories as $category) {
            $categoryPath = $category->title;

            if ($category->parent_id != 0) {
                $parent = $category->parent;

                if ($parent !== null) {
                    $categoryPath = $parent->title . ' > ' . $categoryPath;
                }

                if ($parent->parent_id != 0) {
                    if (! isset($category_tree[$parent->parent_id])) {
                        $category_tree[$parent->parent_id] = [];
                    }
                    $category_tree[$parent->parent_id][$parent->id] = $category->id;
                } else {
                    $category_tree[$parent->id][$category->id] = $category->id;
                }
            }

            $categories_array[$category->id]       = $category->parent_id;
            $categories_paths_array[$category->id] = $categoryPath;
        }
        if (auth()->user()->isReviwerLikeAdmin('final_listing')) {
            $newProducts = Product::query()->with('categories.parent', 'cropApprover', 'cropOrderer', 'approver', 'log_scraper_vs_ai', 'croppedImages', 'brands', 'landingPageProduct');
        } else {
            $newProducts = Product::query()->with('categories.parent', 'cropApprover', 'cropOrderer', 'approver', 'log_scraper_vs_ai', 'croppedImages', 'brands', 'landingPageProduct')->where('assigned_to', auth()->user()->id);
        }

        if ($request->get('status_id') != null) {
            $statusList  = is_array($request->get('status_id')) ? $request->get('status_id') : [$request->get('status_id')];
            $newProducts = $newProducts->whereIn('status_id', $statusList); //dd($newProducts->limit(10)->get());
        } else {
            if ($request->get('submit_for_approval') == 'on') {
                $newProducts = $newProducts->where('status_id', StatusHelper::$submitForApproval);
            } else {
                $newProducts = $newProducts->where('status_id', StatusHelper::$finalApproval);
            }
        }
        // Run through query helper
        $term              = $request->input('term');
        $brand             = '';
        $category          = '';
        $color             = '';
        $supplier          = [];
        $type              = '';
        $assigned_to_users = '';

        if (is_array($request->brand) && $request->brand[0] != null) {
            $newProducts = $newProducts->whereIn('brand', $request->get('brand'));
        }

        if (is_array($request->color) && $request->color[0] != null) {
            $newProducts = $newProducts->whereIn('color', $request->get('color'));
        }
        if (is_array($request->category) && $request->category[0] != null && $request->category[0] != 1) {
            $category_children = [];

            foreach ($request->category as $category) {
                $is_parent = Category::isParent($category);

                if ($is_parent) {
                    $childs = Category::find($category)->childs()->get();

                    foreach ($childs as $child) {
                        $is_parent = Category::isParent($child->id);

                        if ($is_parent) {
                            $children = Category::find($child->id)->childs()->get();

                            foreach ($children as $chili) {
                                array_push($category_children, $chili->id);
                            }
                        } else {
                            array_push($category_children, $child->id);
                        }
                    }
                } else {
                    array_push($category_children, $category);
                }
            }

            $newProducts = $newProducts->whereIn('products.category', $category_children);
            $category    = $request->category[0];
        }
        if ($request->type != '') {
            if ($request->type == 'Not Listed') {
                $newProducts = $newProducts->where('isFinal', 0)->where('isUploaded', 0);
            } else {
                if ($request->type == 'Listed') {
                    $newProducts = $newProducts->where('isUploaded', 1);
                } else {
                    if ($request->type == 'Approved') {
                        $newProducts = $newProducts->where('is_approved', 1);
                    } else {
                        if ($request->type == 'Image Cropped') {
                            $newProducts = $newProducts->where('is_image_processed', 1);
                        }
                    }
                }
            }

            $type = $request->get('type');
        }

        if ($request->crop_status == 'Not Matched') {
            $newProducts = $newProducts->whereDoesntHave('croppedImages');
        }
        if ($request->crop_status == 'Matched') {
            $newProducts = $newProducts->whereHas('croppedImages');
        }

        if (trim($term) != '') {
            $newProducts->where(function ($query) use ($term) {
                $query->where('products.short_description', 'LIKE', '%' . $term . '%')
                    ->orWhere('products.color', 'LIKE', '%' . $term . '%')
                    ->orWhere('products.name', 'LIKE', '%' . $term . '%')
                    ->orWhere('products.sku', 'LIKE', '%' . $term . '%')
                    ->orWhere('products.id', 'LIKE', '%' . $term . '%')
                    ->orWhereHas('brands', function ($q) use ($term) {
                        $q->where('name', 'LIKE', '%' . $term . '%');
                    })
                    ->orWhereHas('product_category', function ($q) use ($term) {
                        $q->where('title', 'LIKE', '%' . $term . '%');
                    });
            });
        }

        if ($request->get('user_id') > 0 && $request->get('submit_for_image_approval') == 'on') {
            $newProducts = $newProducts->Join('log_list_magentos as llm', function ($join) {
                $join->on('llm.product_id', 'products.id');
            });
            $newProducts = $newProducts->where('llm.user_id', $request->get('user_id'));
            $newProducts = $newProducts->addSelect('llm.user_id as last_approve_user');
        }
        if ($request->get('user_id') > 0 && $request->get('rejected_image_approval') == 'on') {
            $newProducts = $newProducts->leftJoin('rejected_images as ri', function ($join) use ($request) {
                $join->on('ri.product_id', 'products.id');

                $join->where('ri.user_id', $request->get('user_id'));
            });
            $newProducts = $newProducts->addSelect('rejected_images.user_id as rejected_user_id', 'rejected_images.created_at as rejected_date');
        }
        if ($request->get('user_id') > 0 && $request->get('rejected_image_approval') != 'on' && $request->get('submit_for_image_approval') != 'on') {
            $newProducts = $newProducts->where('approved_by', $request->get('user_id'));
        }

        $selected_categories = $request->category ? $request->category : [1];
        $category_array      = Category::renderAsArray();
        $users               = User::all();
        $newProducts         = $newProducts->leftJoin('product_verifying_users as pvu', function ($join) {
            $join->on('pvu.product_id', 'products.id');
            $join->where('pvu.user_id', '!=', auth()->user()->id);
        });

        if ($request->without_title != null) {
            $newProducts = $newProducts->where('products.name', '');
        }

        if ($request->without_size != null) {
            $newProducts = $newProducts->where('products.size', '');
        }

        if ($request->without_composition != null) {
            $newProducts = $newProducts->where('products.composition', '');
        }

        if ($request->without_stock != null) {
            $newProducts = $newProducts->where('products.stock', 0);
        }

        if (! auth()->user()->isAdmin()) {
            //
        }
        $newProducts = $newProducts->where('isUploaded', 0);

        if ($request->crop_start_date != null && $request->crop_end_date != null) {
            $startDate   = $request->crop_start_date;
            $endDate     = $request->crop_end_date;
            $newProducts = $newProducts->leftJoin('cropped_image_references as cri', function ($join) use ($startDate, $endDate) {
                $join->on('cri.product_id', 'products.id');
                $join->whereDate('cri.created_at', '>=', $startDate)->whereDate('cri.created_at', '<=', $endDate);
            });

            $newProducts = $newProducts->whereNotNull('cri.product_id');
            $newProducts = $newProducts->groupBy('products.id');
        }

        if ($request->store_website_id > 0) {
            $storeWebsiteID = $request->store_website_id;
            $newProducts    = $newProducts->join('store_website_categories as swc', function ($join) use ($storeWebsiteID) {
                $join->on('swc.category_id', 'products.category');
                $join->where('swc.store_website_id', $storeWebsiteID)->where('swc.remote_id', '>', 0);
            });

            $newProducts = $newProducts->join('store_website_brands as swb', function ($join) use ($storeWebsiteID) {
                $join->on('swb.brand_id', 'products.brand');
                $join->where('swb.store_website_id', $storeWebsiteID)->where('swb.magento_value', '>', 0);
            });

            $newProducts = $newProducts->groupBy('products.id');
        }

        $newProducts = $newProducts->select(['products.*'])->paginate(10);

        if (! auth()->user()->isAdmin()) {
            if (! $newProducts->isEmpty()) {
                $i = 1;
                foreach ($newProducts as $product) {
                    $productVerify = \App\ProductVerifyingUser::firstOrNew([
                        'product_id' => $product->id,
                    ]);
                    $productVerify->product_id = $product->id;
                    $productVerify->user_id    = auth()->user()->id;
                    $productVerify->save();
                    $i++;
                    // if more then 15 records then break
                    if ($i > 25) {
                        break;
                    }
                }
            }
        }

        // checking here for the product which is cropped

        if (count($newProducts) > 0) {
            $productIds = $newProducts->pluck('id')->toArray();

            $siteCroppedImages = \App\SiteCroppedImages::select('product_id', DB::raw('group_concat(site_cropped_images.website_id) as website_ids'))->whereIn('product_id', $productIds)->groupBy('product_id')->pluck('website_ids', 'product_id')->toArray();
        }

        $datatableModel = DataTableColumn::select('column_name')->where('user_id', auth()->user()->id)->where('section_name', 'products-listing-final')->first();

        $dynamicColumnsToShowPlf = [];
        if (! empty($datatableModel->column_name)) {
            $hideColumns             = $datatableModel->column_name ?? '';
            $dynamicColumnsToShowPlf = json_decode($hideColumns, true);
        }

        $statusProductsListingFinal = ProductListingFinalStatus::all();

        if ($request->ajax()) {
            // view path for images
            $viewpath = ($pageType == 'images') ? 'products.final_listing_image_ajax' : 'products.final_listing_ajax';

            return view($viewpath, [
                'users_list'                 => $users->pluck('name', 'id'),
                'products'                   => $newProducts,
                'products_count'             => $newProducts->total(),
                'colors'                     => $colors,
                'brands'                     => $brands,
                'suppliers'                  => $suppliers,
                'categories'                 => $categories,
                'category_tree'              => $category_tree,
                'categories_array'           => $categories_array,
                'term'                       => $term,
                'brand'                      => $brand,
                'category'                   => $category,
                'color'                      => $color,
                'supplier'                   => $supplier,
                'type'                       => $type,
                'users'                      => $users,
                'assigned_to_users'          => $assigned_to_users,
                'cropped'                    => $cropped,
                'category_array'             => $category_array,
                'selected_categories'        => $selected_categories,
                'store_websites'             => $storeWebsites,
                'type'                       => $pageType,
                'auto_push_product'          => $auto_push_product,
                'user_id'                    => ($request->get('user_id') > 0) ? $request->get('user_id') : '',
                'request'                    => $request->all(),
                'categories_paths_array'     => $categories_paths_array,
                'siteCroppedImages'          => $siteCroppedImages,
                'dynamicColumnsToShowPlf'    => $dynamicColumnsToShowPlf,
                'statusProductsListingFinal' => $statusProductsListingFinal,
            ]);
        }

        $viewpath = 'products.final_listing';

        return view($viewpath, [
            'users_list'       => $users->pluck('name', 'id'),
            'products'         => $newProducts,
            'products_count'   => $newProducts->total(),
            'colors'           => $colors,
            'brands'           => $brands,
            'suppliers'        => $suppliers,
            'categories'       => $categories,
            'category_tree'    => $category_tree,
            'categories_array' => $categories_array,
            'user_id'          => ($request->get('user_id') > 0) ? $request->get('user_id') : '',
            // 'category_selection' => $category_selection,
            // 'category_search'    => $category_search,
            'term'              => $term,
            'brand'             => $brand,
            'category'          => $category,
            'color'             => $color,
            'supplier'          => $supplier,
            'type'              => $type,
            'users'             => $users,
            'assigned_to_users' => $assigned_to_users,
            'cropped'           => $cropped,
            //            'left_for_users'  => $left_for_users,
            'category_array'      => $category_array,
            'selected_categories' => $selected_categories,
            'store_websites'      => $storeWebsites,
            'pageType'            => $pageType,
            'auto_push_product'   => $auto_push_product,
            //'store_website_count' => StoreWebsite::count(),
            'categories_paths_array'     => $categories_paths_array,
            'siteCroppedImages'          => $siteCroppedImages,
            'dynamicColumnsToShowPlf'    => $dynamicColumnsToShowPlf,
            'statusProductsListingFinal' => $statusProductsListingFinal,
        ]);
    }

    public function plfColumnVisbilityUpdate(Request $request)
    {
        $userCheck = DataTableColumn::where('user_id', auth()->user()->id)->where('section_name', 'products-listing-final')->first();

        if ($userCheck) {
            $column               = DataTableColumn::find($userCheck->id);
            $column->section_name = 'products-listing-final';
            $column->column_name  = json_encode($request->column_plf);
            $column->save();
        } else {
            $column               = new DataTableColumn();
            $column->section_name = 'products-listing-final';
            $column->column_name  = json_encode($request->column_plf);
            $column->user_id      = auth()->user()->id;
            $column->save();
        }

        return redirect()->back()->with('success', 'column visiblity Added Successfully!');
    }

    public function statuscolor(Request $request)
    {
        $status_color = $request->all();
        $data         = $request->except('_token');
        foreach ($status_color['color_name'] as $key => $value) {
            $bugstatus               = ProductListingFinalStatus::find($key);
            $bugstatus->status_color = $value;
            $bugstatus->save();
        }

        return redirect()->back()->with('success', 'The status color updated successfully.');
    }

    public function getFinalApporvalImages(Request $request)
    {
        $cropped          = $request->cropped;
        $colors           = (new Colors)->all();
        $categories       = Category::all();
        $category_tree    = [];
        $categories_array = [];
        $brands           = Brand::getAll();

        $suppliers = DB::select('
                SELECT id, supplier
                FROM suppliers

                INNER JOIN (
                    SELECT supplier_id FROM product_suppliers GROUP BY supplier_id
                    ) as product_suppliers
                ON suppliers.id = product_suppliers.supplier_id
        ');

        foreach (Category::all() as $category) {
            if ($category->parent_id != 0) {
                $parent = $category->parent;
                if ($parent->parent_id != 0) {
                    if (! isset($category_tree[$parent->parent_id])) {
                        $category_tree[$parent->parent_id] = [];
                    }
                    $category_tree[$parent->parent_id][$parent->id] = $category->id;
                } else {
                    $category_tree[$parent->id][$category->id] = $category->id;
                }
            }

            $categories_array[$category->id] = $category->parent_id;
        }

        if (auth()->user()->isReviwerLikeAdmin('final_listing')) {
            $newProducts = Product::query();
        } else {
            $newProducts = Product::query()->where('assigned_to', auth()->user()->id);
        }

        if ($request->get('status_id') != null) {
            $statusList  = is_array($request->get('status_id')) ? $request->get('status_id') : [$request->get('status_id')];
            $newProducts = $newProducts->whereIn('status_id', $statusList);
        } else {
            if ($request->get('submit_for_approval') == 'on') {
                $newProducts = $newProducts->where('status_id', StatusHelper::$submitForApproval);
            } else {
                $newProducts = $newProducts->where('status_id', StatusHelper::$finalApproval);
            }
        }

        // Run through query helper
        $newProducts       = QueryHelper::approvedListingOrder($newProducts);
        $term              = $request->input('term');
        $brand             = '';
        $category          = '';
        $color             = '';
        $supplier          = [];
        $type              = '';
        $assigned_to_users = '';

        if (is_array($request->brand) && $request->brand[0] != null) {
            $newProducts = $newProducts->whereIn('brand', $request->get('brand'));
        }

        if (is_array($request->color) && $request->color[0] != null) {
            $newProducts = $newProducts->whereIn('color', $request->get('color'));
        }
        if (is_array($request->category) && $request->category[0] != null && $request->category[0] != 1) {
            $category_children = [];

            foreach ($request->category as $category) {
                $is_parent = Category::isParent($category);

                if ($is_parent) {
                    $childs = Category::find($category)->childs()->get();

                    foreach ($childs as $child) {
                        $is_parent = Category::isParent($child->id);

                        if ($is_parent) {
                            $children = Category::find($child->id)->childs()->get();

                            foreach ($children as $chili) {
                                array_push($category_children, $chili->id);
                            }
                        } else {
                            array_push($category_children, $child->id);
                        }
                    }
                } else {
                    array_push($category_children, $category);
                }
            }

            $newProducts = $newProducts->whereIn('category', $category_children);
            $category    = $request->category[0];
        }
        if ($request->type != '') {
            if ($request->type == 'Not Listed') {
                $newProducts = $newProducts->where('isFinal', 0)->where('isUploaded', 0);
            } else {
                if ($request->type == 'Listed') {
                    $newProducts = $newProducts->where('isUploaded', 1);
                } else {
                    if ($request->type == 'Approved') {
                        $newProducts = $newProducts->where('is_approved', 1);
                    } else {
                        if ($request->type == 'Image Cropped') {
                            $newProducts = $newProducts->where('is_image_processed', 1);
                        }
                    }
                }
            }

            $type = $request->get('type');
        }

        if ($request->crop_status == 'Not Matched') {
            $newProducts = $newProducts->whereDoesntHave('croppedImages');
        }
        if ($request->crop_status == 'Matched') {
            $newProducts = $newProducts->whereHas('croppedImages');
        }

        if (trim($term) != '') {
            $newProducts->where(function ($query) use ($term) {
                $query->where('short_description', 'LIKE', '%' . $term . '%')
                    ->orWhere('color', 'LIKE', '%' . $term . '%')
                    ->orWhere('name', 'LIKE', '%' . $term . '%')
                    ->orWhere('products.sku', 'LIKE', '%' . $term . '%')
                    ->orWhere('products.id', 'LIKE', '%' . $term . '%')
                    ->orWhereHas('brands', function ($q) use ($term) {
                        $q->where('name', 'LIKE', '%' . $term . '%');
                    })
                    ->orWhereHas('product_category', function ($q) use ($term) {
                        $q->where('title', 'LIKE', '%' . $term . '%');
                    });
            });
        }

        if ($request->get('user_id') > 0) {
            if ($request->get('submit_for_image_approval') == 'on') {
                $newProducts = $newProducts->leftJoin('log_list_magentos as llm', function ($join) use ($request) {
                    $join->on('llm.product_id', 'products.id')
                        ->on('llm.id', '=', DB::raw('(SELECT max(id) from log_list_magentos WHERE log_list_magentos.project_id = projects.id)'));
                    $join->where('llm.user_id', $request->get('user_id'));
                });
            } else {
                $newProducts = $newProducts->where('approved_by', $request->get('user_id'));
            }
        }

        $selected_categories = $request->category ? $request->category : [1];
        $category_array      = Category::renderAsArray();
        $users               = User::all();

        $newProducts = $newProducts->leftJoin('product_verifying_users as pvu', function ($join) {
            $join->on('pvu.product_id', 'products.id');
            $join->where('pvu.user_id', '!=', auth()->user()->id);
        });

        if ($request->without_title != null) {
            $newProducts = $newProducts->where('products.name', '');
        }

        if ($request->without_size != null) {
            $newProducts = $newProducts->where('products.size', '');
        }

        if ($request->without_composition != null) {
            $newProducts = $newProducts->where('products.composition', '');
        }

        if (! auth()->user()->isAdmin()) {
            $newProducts = $newProducts->whereNull('pvu.product_id');
        }

        $newProducts = $newProducts->select(['products.*'])->paginate(20);
        if (! auth()->user()->isAdmin()) {
            if (! $newProducts->isEmpty()) {
                $i = 1;
                foreach ($newProducts as $product) {
                    $productVerify = \App\ProductVerifyingUser::firstOrNew([
                        'product_id' => $product->id,
                    ]);
                    $productVerify->product_id = $product->id;
                    $productVerify->user_id    = auth()->user()->id;
                    $productVerify->save();
                    $i++;
                    // if more then 15 records then break
                    if ($i > 25) {
                        break;
                    }
                }
            }
        }
        if (! Setting::has('auto_push_product')) {
            $auto_push_product = Setting::add('auto_push_product', 0, 'int');
        } else {
            $auto_push_product = Setting::get('auto_push_product');
        }
        if ($request->ajax()) {
            return view('products.final_listing_ajax', [
                'products'            => $newProducts,
                'products_count'      => $newProducts->total(),
                'colors'              => $colors,
                'brands'              => $brands,
                'suppliers'           => $suppliers,
                'categories'          => $categories,
                'category_tree'       => $category_tree,
                'categories_array'    => $categories_array,
                'term'                => $term,
                'brand'               => $brand,
                'category'            => $category,
                'color'               => $color,
                'supplier'            => $supplier,
                'type'                => $type,
                'users'               => $users,
                'assigned_to_users'   => $assigned_to_users,
                'cropped'             => $cropped,
                'category_array'      => $category_array,
                'selected_categories' => $selected_categories,
                'store_websites'      => StoreWebsite::all(),
                'auto_push_product'   => $auto_push_product,
            ]);
        }

        return view('products.final_approval_images', [
            'products'         => $newProducts,
            'products_count'   => $newProducts->total(),
            'colors'           => $colors,
            'brands'           => $brands,
            'suppliers'        => $suppliers,
            'categories'       => $categories,
            'category_tree'    => $category_tree,
            'categories_array' => $categories_array,
            // 'category_selection' => $category_selection,
            // 'category_search'    => $category_search,
            'term'              => $term,
            'brand'             => $brand,
            'category'          => $category,
            'color'             => $color,
            'supplier'          => $supplier,
            'type'              => $type,
            'users'             => $users,
            'assigned_to_users' => $assigned_to_users,
            'cropped'           => $cropped,
            //            'left_for_users'  => $left_for_users,
            'category_array'      => $category_array,
            'selected_categories' => $selected_categories,
            'store_websites'      => StoreWebsite::all(),
            'auto_push_product'   => $auto_push_product,
            //'store_website_count' => StoreWebsite::count(),
        ]);
    }

    public function approvedListingCropConfirmation(Request $request)
    {
        $colors           = (new Colors)->all();
        $categories       = Category::all();
        $category_tree    = [];
        $categories_array = [];
        $brands           = Brand::getAll();

        $suppliers = DB::select('
                SELECT id, supplier
                FROM suppliers

                INNER JOIN (
                    SELECT supplier_id FROM product_suppliers GROUP BY supplier_id
                    ) as product_suppliers
                ON suppliers.id = product_suppliers.supplier_id
        ');

        foreach (Category::all() as $category) {
            if ($category->parent_id != 0) {
                $parent = $category->parent;
                if ($parent->parent_id != 0) {
                    $category_tree[$parent->parent_id][$parent->id][$category->id];
                } else {
                    $category_tree[$parent->id][$category->id] = $category->id;
                }
            }

            $categories_array[$category->id] = $category->parent_id;
        }

        // Prioritize suppliers
        $newProducts = Product::where('status_id', StatusHelper::$cropApprovalConfirmation)->where('stock', '!=', 0);

        $newProducts = QueryHelper::approvedListingOrder($newProducts);

        $term              = $request->input('term');
        $brand             = '';
        $category          = '';
        $color             = '';
        $supplier          = [];
        $type              = '';
        $assigned_to_users = '';

        if ($request->brand[0] != null) {
            $newProducts = $newProducts->whereIn('brand', $request->get('brand'));
        }

        if ($request->color[0] != null) {
            $newProducts = $newProducts->whereIn('color', $request->get('color'));
        }
        if ($request->category[0] != null && $request->category[0] != 1) {
            $category_children = [];

            foreach ($request->category as $category) {
                $is_parent = Category::isParent($category);

                if ($is_parent) {
                    $childs = Category::find($category)->childs()->get();

                    foreach ($childs as $child) {
                        $is_parent = Category::isParent($child->id);

                        if ($is_parent) {
                            $children = Category::find($child->id)->childs()->get();

                            foreach ($children as $chili) {
                                array_push($category_children, $chili->id);
                            }
                        } else {
                            array_push($category_children, $child->id);
                        }
                    }
                } else {
                    array_push($category_children, $category);
                }
            }

            $newProducts = $newProducts->whereIn('category', $category_children);
            $category    = $request->category[0];
        }
        if ($request->type != '') {
            if ($request->type == 'Not Listed') {
                $newProducts = $newProducts->where('isFinal', 0)->where('isUploaded', 0);
            } else {
                if ($request->type == 'Listed') {
                    $newProducts = $newProducts->where('isUploaded', 1);
                } else {
                    if ($request->type == 'Approved') {
                        $newProducts = $newProducts->where('is_approved', 1);
                    } else {
                        if ($request->type == 'Image Cropped') {
                            $newProducts = $newProducts->where('is_image_processed', 1);
                        }
                    }
                }
            }

            $type = $request->get('type');
        }
        //
        if (trim($term) != '') {
            $newProducts = $newProducts->where(function ($query) use ($term) {
                $query->where('id', 'LIKE', "%$term%")->orWhere('sku', 'LIKE', "%$term%");
            });
        }

        if ($request->get('user_id') > 0) {
            $newProducts = $newProducts->where('approved_by', $request->get('user_id'));
        }

        $selected_categories = $request->category ? $request->category : [1];
        $category_array      = Category::renderAsArray();
        $users               = User::all();

        $newProducts = QueryHelper::approvedListingOrder($newProducts);

        $newProducts = $newProducts->with(['media', 'brands', 'log_scraper_vs_ai'])->paginate(50);

        return view('products.final_crop_confirmation', [
            'products'         => $newProducts,
            'products_count'   => $newProducts->total(),
            'colors'           => $colors,
            'brands'           => $brands,
            'suppliers'        => $suppliers,
            'categories'       => $categories,
            'category_tree'    => $category_tree,
            'categories_array' => $categories_array,
            // 'category_selection' => $category_selection,
            // 'category_search'    => $category_search,
            'term'              => $term,
            'brand'             => $brand,
            'category'          => $category,
            'color'             => $color,
            'supplier'          => $supplier,
            'type'              => $type,
            'users'             => $users,
            'assigned_to_users' => $assigned_to_users,
            //            'cropped' => $cropped,
            //            'left_for_users'  => $left_for_users,
            'category_array'      => $category_array,
            'selected_categories' => $selected_categories,
        ]);
    }

    public function approvedMagento(Request $request)
    {
        // Get queue count
        $queueSize = Queue::size('listMagento');

        $colors           = (new Colors)->all();
        $categories       = Category::all();
        $category_tree    = [];
        $categories_array = [];
        $brands           = Brand::getAll();

        $suppliers = DB::select('
                SELECT id, supplier
                FROM suppliers

                INNER JOIN (
                    SELECT supplier_id FROM product_suppliers GROUP BY supplier_id
                    ) as product_suppliers
                ON suppliers.id = product_suppliers.supplier_id
        ');

        foreach (Category::all() as $category) {
            if ($category->parent_id != 0) {
                $parent = $category->parent;
                if ($parent->parent_id != 0) {
                    if (isset($category_tree[$parent->parent_id]) && isset($category_tree[$parent->parent_id][$parent->id])) {
                        @$category_tree[$parent->parent_id][$parent->id][$category->id];
                    }
                } else {
                    @$category_tree[$parent->id][$category->id] = $category->id;
                }
            }

            $categories_array[$category->id] = $category->parent_id;
        }

        $newProducts = Product::where('isUploaded', 1)->orderBy('listing_approved_at', 'DESC');

        $term              = $request->input('term');
        $brand             = '';
        $category          = '';
        $color             = '';
        $supplier          = [];
        $type              = '';
        $assigned_to_users = '';

        if (isset($request->brand[0]) && $request->brand[0] != null) {
            $newProducts = $newProducts->whereIn('brand', $request->get('brand'));
        }

        if (isset($request->color[0]) && $request->color[0] != null) {
            $newProducts = $newProducts->whereIn('color', $request->get('color'));
        }
        if (isset($request->category) && $request->category[0] != null && $request->category[0] != 1) {
            $category_children = [];

            foreach ($request->category as $category) {
                $is_parent = Category::isParent($category);

                if ($is_parent) {
                    $childs = Category::find($category)->childs()->get();

                    foreach ($childs as $child) {
                        $is_parent = Category::isParent($child->id);

                        if ($is_parent) {
                            $children = Category::find($child->id)->childs()->get();

                            foreach ($children as $chili) {
                                array_push($category_children, $chili->id);
                            }
                        } else {
                            array_push($category_children, $child->id);
                        }
                    }
                } else {
                    array_push($category_children, $category);
                }
            }

            $newProducts = $newProducts->whereIn('category', $category_children);
            $category    = $request->category[0];
        }
        if ($request->type != '') {
            if ($request->type == 'Not Listed') {
                $newProducts = $newProducts->where('isFinal', 0)->where('isUploaded', 0);
            } else {
                if ($request->type == 'Listed') {
                    $newProducts = $newProducts->where('isUploaded', 1);
                } else {
                    if ($request->type == 'Approved') {
                        $newProducts = $newProducts->where('is_approved', 1);
                    } else {
                        if ($request->type == 'Image Cropped') {
                            $newProducts = $newProducts->where('is_image_processed', 1);
                        }
                    }
                }
            }

            $type = $request->get('type');
        }
        if (trim($term) != '') {
            $newProducts = $newProducts->where(function ($query) use ($term) {
                $query->where('id', 'LIKE', "%$term%")->orWhere('sku', 'LIKE', "%$term%");
            });
        }

        if ($request->get('user_id') > 0) {
            $newProducts = $newProducts->where('approved_by', $request->get('user_id'));
        }

        $selected_categories = $request->category ? $request->category : [1];
        $category_array      = Category::renderAsArray();
        $users               = User::all();

        $newProducts = $newProducts->with(['media', 'brands'])->paginate(50);

        return view('products.in_magento', [
            'products'         => $newProducts,
            'products_count'   => $newProducts->total(),
            'colors'           => $colors,
            'brands'           => $brands,
            'suppliers'        => $suppliers,
            'categories'       => $categories,
            'category_tree'    => $category_tree,
            'categories_array' => $categories_array,
            // 'category_selection' => $category_selection,
            // 'category_search'    => $category_search,
            'term'              => $term,
            'brand'             => $brand,
            'category'          => $category,
            'color'             => $color,
            'supplier'          => $supplier,
            'type'              => $type,
            'users'             => $users,
            'assigned_to_users' => $assigned_to_users,
            //            'cropped' => $cropped,
            //            'left_for_users'  => $left_for_users,
            'category_array'      => $category_array,
            'selected_categories' => $selected_categories,
            'queueSize'           => $queueSize,
        ]);
    }

    public function showListigByUsers(Request $request)
    {
        $whereFirst = '';
        if ($request->get('date')) {
            $whereFirst = ' AND DATE(created_at) = "' . $request->get('date') . '"';
        }
        $users = UserProduct::groupBy(['user_id'])
            ->select(DB::raw('
            user_id,
            COUNT(product_id) as total_assigned,
            (SELECT COUNT(DISTINCT(listing_histories.product_id)) FROM listing_histories WHERE listing_histories.user_id = user_products.user_id AND action IN ("LISTING_APPROVAL", "LISTING_REJECTED") ' . $whereFirst . ') as total_acted'));

        if ($request->get('date')) {
            $users = $users->whereRaw('DATE(created_at) = "' . $request->get('date') . '"');
        }

        $users = $users->with('user')->get();

        return view('products.assigned_products', compact('users'));
    }

    public function listing(Request $request, Stage $stage)
    {
        $colors           = (new Colors)->all();
        $categories       = Category::all();
        $category_tree    = [];
        $categories_array = [];
        $brands           = Brand::getAll();

        $suppliers = DB::select('
                SELECT id, supplier
                FROM suppliers

                INNER JOIN (
                    SELECT supplier_id FROM product_suppliers GROUP BY supplier_id
                    ) as product_suppliers
                ON suppliers.id = product_suppliers.supplier_id
        ');

        foreach (Category::all() as $category) {
            if ($category->parent_id != 0) {
                $parent = $category->parent;
                if ($parent->parent_id != 0) {
                    in_array($category->id, $category_tree[$parent->parent_id] ?? []);
                } else {
                    $category_tree[$parent->id][$category->id] = $category->id;
                }
            }

            $categories_array[$category->id] = $category->parent_id;
        }

        $term              = $request->input('term');
        $brand             = '';
        $category          = '';
        $color             = '';
        $supplier          = [];
        $type              = '';
        $assigned_to_users = '';

        $brandWhereClause    = '';
        $colorWhereClause    = '';
        $categoryWhereClause = '';
        $supplierWhereClause = '';
        $typeWhereClause     = '';
        $termWhereClause     = '';
        $croppedWhereClause  = '';
        $stockWhereClause    = ' AND stock >= 1';

        $userWhereClause = '';
        if (is_array($request->brand) && $request->brand[0] != null) {
            $brands_list = implode(',', $request->brand);

            $brand            = $request->brand[0];
            $brandWhereClause = " AND brand IN ($brands_list)";
        }

        if (is_array($request->color) && $request->color[0] != null) {
            $colors_list = implode(',', $request->color);

            $color            = $request->color[0];
            $colorWhereClause = " AND color IN ($colors_list)";
        }
        if (is_array($request->category) && $request->category[0] != null && $request->category[0] != 1) {
            $category_children = [];

            foreach ($request->category as $category) {
                $is_parent = Category::isParent($category);

                if ($is_parent) {
                    $childs = Category::find($category)->childs()->get();

                    foreach ($childs as $child) {
                        $is_parent = Category::isParent($child->id);

                        if ($is_parent) {
                            $children = Category::find($child->id)->childs()->get();

                            foreach ($children as $chili) {
                                array_push($category_children, $chili->id);
                            }
                        } else {
                            array_push($category_children, $child->id);
                        }
                    }
                } else {
                    array_push($category_children, $category);
                }
            }

            $category_list = implode(',', $category_children);

            $category            = $request->category[0];
            $categoryWhereClause = " AND category IN ($category_list)";
        }
        if (is_array($request->supplier) && $request->supplier[0] != null) {
            $suppliers_list      = implode(',', $request->supplier);
            $supplier            = $request->supplier;
            $supplierWhereClause = " AND products.id IN (SELECT product_id FROM product_suppliers WHERE supplier_id IN ($suppliers_list))";
        }
        if ($request->type != '') {
            if ($request->type == 'Not Listed') {
                $typeWhereClause = ' AND isFinal = 0 AND isUploaded = 0';
            } else {
                if ($request->type == 'Listed') {
                    $typeWhereClause = ' AND isUploaded = 1';
                } else {
                    if ($request->type == 'Approved') {
                        $typeWhereClause = ' AND is_approved = 1 AND last_imagecropper IS NULL';
                    } else {
                        if ($request->type == 'Image Cropped') {
                            $typeWhereClause = ' AND is_approved = 1 AND last_imagecropper IS NOT NULL';
                        }
                    }
                }
            }

            $type = $request->type;
        }
        if (trim($term) != '') {
            $termWhereClause = ' AND (sku LIKE "%' . $term . '%" OR id LIKE "%' . $term . '%")';
        }

        $cropped = $request->cropped == 'on' ? 'on' : '';
        if ($request->get('cropped') == 'on') {
            $croppedWhereClause = ' AND is_crop_approved = 1';
        }

        if ($request->users == 'on') {
            $users_products = User::role('Products Lister')->pluck('id');
            $users          = [];
            foreach ($users_products as $user) {
                $users[] = $user;
            }
            $users_list = implode(',', $users);

            $userWhereClause   = " AND products.id IN (SELECT product_id FROM user_products WHERE user_id IN ($users_list))";
            $stockWhereClause  = '';
            $assigned_to_users = 'on';
        }

        $left_for_users = '';
        if ($request->left_products == 'on') {
            $userWhereClause  = ' AND products.id NOT IN (SELECT product_id FROM user_products)';
            $stockWhereClause = ' AND stock >= 1 AND is_crop_approved = 1 AND is_crop_ordered = 1 AND is_image_processed = 1 AND isUploaded = 0 AND isFinal = 0';
            $left_for_users   = 'on';
        }

        $messages = UserProductFeedback::where('action', 'LISTING_APPROVAL_REJECTED')->where('user_id', Auth::id())->with('product')->get();

        if (Auth::user()->hasRole('Products Lister')) {
            $sql = '
                                            SELECT *, user_products.user_id as product_user_id,
                                            (SELECT mm1.created_at FROM remarks mm1 WHERE mm1.id = remark_id) AS remark_created_at
                                            FROM products

                                            LEFT JOIN (
                                                SELECT user_id, product_id FROM user_products
                                                ) as user_products
                                            ON products.id = user_products.product_id

                                            LEFT JOIN (
                                                SELECT MAX(id) AS remark_id, taskid FROM remarks WHERE module_type = "productlistings" GROUP BY taskid
                                                ) AS remarks
                                            ON products.id = remarks.taskid

                                            WHERE stock>=1 AND is_approved = 0 AND is_listing_rejected = 0 AND is_crop_approved = 1 AND is_crop_ordered = 1 ' . $brandWhereClause . $colorWhereClause . $categoryWhereClause . $supplierWhereClause . $typeWhereClause . $termWhereClause . $croppedWhereClause . $stockWhereClause . ' AND id IN (SELECT product_id FROM user_products WHERE user_id = ' . Auth::id() . ')
                                             AND id NOT IN (SELECT product_id FROM product_suppliers WHERE supplier_id = 60)
                                            ORDER BY listing_approved_at DESC, category, is_crop_ordered DESC, remark_created_at DESC, created_at DESC
                ';
        } else {
            $sql = '
                SELECT *, user_products.user_id as product_user_id,
                (SELECT mm1.created_at FROM remarks mm1 WHERE mm1.id = remark_id) AS remark_created_at
                FROM products

                LEFT JOIN (
                    SELECT user_id, product_id FROM user_products
                    ) as user_products
                ON products.id = user_products.product_id

                LEFT JOIN (
                    SELECT MAX(id) AS remark_id, taskid FROM remarks WHERE module_type = "productlistings" GROUP BY taskid
                    ) AS remarks
                ON products.id = remarks.taskid
                WHERE stock>=1 AND is_approved = 0 AND is_listing_rejected = 0  AND is_crop_approved = 1 AND is_crop_ordered = 1  ' . $stockWhereClause . $brandWhereClause . $colorWhereClause . $categoryWhereClause . $supplierWhereClause . $typeWhereClause . $termWhereClause . $croppedWhereClause . $userWhereClause . '
                ORDER BY listing_approved_at DESC, category, is_crop_ordered DESC, remark_created_at DESC, products.updated_at DESC
                ';
        }
        $new_products = DB::select($sql);

        $products_count = count($new_products);
        $currentPage    = LengthAwarePaginator::resolveCurrentPage();
        $perPage        = Setting::get('pagination');
        $currentItems   = array_slice($new_products, $perPage * ($currentPage - 1), $perPage);

        $new_products = new LengthAwarePaginator($currentItems, count($new_products), $perPage, $currentPage, [
            'path' => LengthAwarePaginator::resolveCurrentPath(),
        ]);

        $selected_categories = $request->category ? $request->category : [1];

        $category_array = Category::renderAsArray();

        $userStats             = [];
        $userStats['approved'] = ListingHistory::where('action', 'LISTING_APPROVAL')->where('user_id', Auth::user()->id)->count();
        $userStats['rejected'] = ListingHistory::where('action', 'LISTING_REJECTED')->where('user_id', Auth::user()->id)->count();

        return view('products.listing', [
            'products'            => $new_products,
            'products_count'      => $products_count,
            'colors'              => $colors,
            'brands'              => $brands,
            'suppliers'           => $suppliers,
            'categories'          => $categories,
            'category_tree'       => $category_tree,
            'categories_array'    => $categories_array,
            'term'                => $term,
            'brand'               => $brand,
            'category'            => $category,
            'color'               => $color,
            'supplier'            => $supplier,
            'type'                => $type,
            'assigned_to_users'   => $assigned_to_users,
            'cropped'             => $cropped,
            'left_for_users'      => $left_for_users,
            'category_array'      => $category_array,
            'selected_categories' => $selected_categories,
            'messages'            => $messages,
            'userStatus'          => $userStats,
        ]);
    }

    public function magentoConditionsCheck(Request $request)
    {
        if ($request->ajax()) {
            $query     = $request->get('fieldname');
            $fieldName = $request->get('filedname');
            $value     = $request->get('value');

            $products = Product::query();

            $products = $products->where(function ($query) {
                $query->where('status_id', StatusHelper::$productConditionsChecked);
            });

            $products = $products->where('is_conditions_checked', 1);
            $products = $products->leftJoin('product_verifying_users as pvu', function ($join) {
                $join->on('pvu.product_id', 'products.id');
                $join->where('pvu.user_id', '!=', auth()->user()->id);
            });

            $products = $products->join('log_list_magentos as LLM', 'products.id', '=', 'LLM.product_id');
            $products = $products->leftJoin('store_websites as SW', 'LLM.store_website_id', '=', 'SW.id');
            $products = $products->leftJoin('categories as c', 'c.id', '=', 'products.category');

            $products = $products->leftJoin('status as s', function ($join) {
                $join->on('products.status_id', 's.id');
            });

            if ($request->get('id') != '') {
                $products = $products->where('products.id', $request->get('id'));
            }
            if ($request->get('name') != '') {
                $products = $products->where('products.name', $request->get('name'));
            }
            if ($request->get('title') != '') {
                $products = $products->where('SW.title', $request->get('title'));
            }
            if ($request->get('color') != '') {
                $products = $products->where('products.color', $request->get('color'));
            }
            if ($request->get('compositon') != '') {
                $products = $products->where('products.composition', $request->get('compositon'));
            }
            if ($request->get('status') != '') {
                $products = $products->where('products.status', $request->get('status'));
            }
            if ($request->get('price') != '') {
                $products = $products->where('products.price_usd', $request->get('price'));
                $products = $products->orWhere('products.price_usd_special', $request->get('price'));
            }

            $products = $products->where('isUploaded', 0);

            if (isset($fieldName)) {
                if ($fieldName === 'title') {
                    $products = $products->where("SW.$fieldName", 'LIKE', "%$value%");
                }
                if ($fieldName === 'category') {
                    $products = $products->where("categories.$fieldName", 'LIKE', "%$value%");
                } else {
                    $products = $products->where("products.$fieldName", 'LIKE', "%$value%");
                }
            }
            $products         = $products->orderBy('llm_id', 'desc');
            $products         = $products->select(['products.*', 's.name as product_status', 'LLM.id as llm_id', 'LLM.message as llm_message', 'SW.title as sw_title', 'SW.id as sw_id']);
            $products         = $products->paginate(20);
            $productsCount    = $products->total();
            $imageCropperRole = auth()->user()->hasRole('ImageCropers');
            $categoryArray    = Category::renderAsArray();
            $colors           = (new Colors)->all();
            if (! Setting::has('auto_push_product')) {
                $auto_push_product = Setting::add('auto_push_product', 0, 'int');
            } else {
                $auto_push_product = Setting::get('auto_push_product');
            }
            $users = User::all();

            $view                    = (string) view('products.magento_conditions_check.list', compact('products', 'imageCropperRole', 'categoryArray', 'colors', 'auto_push_product', 'users', 'productsCount'));
            $return['view']          = $view;
            $return['productsCount'] = $productsCount;

            return response()->json(['status' => 200, 'data' => $return]);
        } else {
            return view('products.magento_conditions_check.index');
        }
    }

    public function autocompleteForFilter(Request $request)
    {
        $query  = $request->get('fieldname');
        $search = $request->get('filedname');
        $value  = $request->get('value');

        if (auth()->user()->isReviwerLikeAdmin('final_listing')) {
            $products = Product::query();
        } else {
            $products = Product::query()->where('assigned_to', auth()->user()->id);
        }
        $products = $products->where(function ($query) {
            $query->where('status_id', StatusHelper::$finalApproval);
            $query->orWhere('status_id', StatusHelper::$productConditionsChecked);
        });

        $products = $products->where('is_conditions_checked', 1);
        $products = $products->where('is_push_attempted', 0);

        $products = $products->join('log_list_magentos as LLM', 'products.id', '=', 'LLM.product_id');
        $products = $products->leftJoin('store_websites as SW', 'LLM.store_website_id', '=', 'SW.id');
        $products = $products->leftJoin('categories as c', 'c.id', '=', 'products.category');

        $products = $products->leftJoin('status as s', function ($join) {
            $join->on('products.status_id', 's.id');
        });

        $products = $products->where('isUploaded', 0);
        $products = $products->orderBy('llm_id', 'desc');
        $products = $products->select(['products.*', 's.name as product_status', 'LLM.id as llm_id', 'LLM.message as llm_message', 'SW.title as sw_title', 'c.title as category_title']);

        if ($search == 'title') {
            $products = $products->where("SW.$search", 'LIKE', "%$value%");
        }
        if ($search == 'category') {
            $products = $products->where('c.title', 'LIKE', "%$value%");
        } else {
            $products = $products->where("products.$search", 'LIKE', "%$value%");
        }

        $products         = $products->groupBy('LLM.product_id', 'LLM.store_website_id');
        $productsCount    = count($products->get());
        $products         = $products->select(['products.*', 'LLM.id as llm_id', 'LLM.message as llm_message', 'SW.id as sw_id', 'SW.title as sw_title'])->get()->toArray();
        $imageCropperRole = auth()->user()->hasRole('ImageCropers');
        $categoryArray    = Category::renderAsArray();
        $colors           = (new Colors)->all();
        if (! Setting::has('auto_push_product')) {
            $auto_push_product = Setting::add('auto_push_product', 0, 'int');
        } else {
            $auto_push_product = Setting::get('auto_push_product');
        }

        return response()->json(['status' => 200, 'data' => array_unique(array_column($products, $search))]);
    }

    public function magentoPushStatusForMagentoCheck(Request $request)
    {
        if ($request->ajax()) {
            $value  = $request->get('value');
            $search = $request->get('fieldname');

            $products = Product::query();
            $products = $products->where(function ($query) {
                $query->where('status_id', StatusHelper::$pushToMagento);
                $query->orWhere('status_id', StatusHelper::$inMagento);
            });
            $products = $products->where('is_push_attempted', 1);
            $products = $products->leftJoin('product_verifying_users as pvu', function ($join) {
                $join->on('pvu.product_id', 'products.id');
                $join->where('pvu.user_id', '!=', auth()->user()->id);
            });

            $products = $products->leftJoin('status as s', function ($join) {
                $join->on('products.status_id', 's.id');
            });

            $products = $products->where('isUploaded', 1);
            $products = $products->leftJoin('categories as c', 'c.id', '=', 'products.category');

            if ($request->get('id') != '') {
                $products = $products->where('products.id', $request->get('id'));
            }
            if ($request->get('name') != '') {
                $products = $products->where('products.name', $request->get('name'));
            }
            if ($request->get('title') != '') {
                $products = $products->where('products.name', $request->get('title'));
            }
            if ($request->get('color') != '') {
                $products = $products->where('products.color', $request->get('color'));
            }
            if ($request->get('composition') != '') {
                $composition = $request->get('compositon');
                $products    = $products->where('products.composition', 'LIKE', "%$composition%");
            }
            if ($request->get('status') != '') {
                $products = $products->where('products.status', $request->get('status'));
            }
            if ($request->get('price') != '') {
                $products = $products->where('products.price_usd', $request->get('price'));
                $products = $products->orWhere('products.price_usd_special', $request->get('price'));
                $products = $products->orWhere('products.price', $request->get('price'));
            }

            if (isset($search)) {
                if ($search === 'title' || $search === 'name') {
                    $products = $products->where('products.name', 'LIKE', "%$value%");
                }
                if ($search === 'category') {
                    $products = $products->where('categories.title', 'LIKE', "%$value%");
                } else {
                    $products = $products->where("products.$search", 'LIKE', "%$value%");
                }
            }

            $products         = $products->select(['products.*', 's.name as product_status'])->paginate(10);
            $productsCount    = $products->total();
            $imageCropperRole = auth()->user()->hasRole('ImageCropers');
            $categoryArray    = Category::renderAsArray();
            $colors           = (new Colors)->all();
            if (! Setting::has('auto_push_product')) {
                $auto_push_product = Setting::add('auto_push_product', 0, 'int');
            } else {
                $auto_push_product = Setting::get('auto_push_product');
            }
            $users = User::all();

            return view('products.magento_push_status.list', compact('products', 'imageCropperRole', 'categoryArray', 'colors', 'auto_push_product', 'users', 'productsCount'));
        } else {
            return view('products.magento_push_status.index');
        }
    }

    public function autocompleteSearchPushStatus(Request $request)
    {
        if (auth()->user()->isReviwerLikeAdmin('final_listing')) {
            $products = Product::query();
        } else {
            $products = Product::query()->where('assigned_to', auth()->user()->id);
        }
        $search   = $request->get('filedname');
        $products = $products->where(function ($query) {
            $query->where('status_id', StatusHelper::$pushToMagento);
            $query->orWhere('status_id', StatusHelper::$inMagento);
        });
        $products = $products->where('is_conditions_checked', 1);
        $products = $products->where('is_push_attempted', 1);

        $products = $products->join('log_list_magentos as LLM', 'products.id', '=', 'LLM.product_id');
        $products = $products->leftJoin('store_websites as SW', 'LLM.store_website_id', '=', 'SW.id');

        $products    = $products->where('isUploaded', 0);
        $products    = $products->leftJoin('categories as c', 'c.id', '=', 'products.category');
        $searchValue = $request->get('search_value');

        if (isset($search)) {
            if ($search === 'title' || $search === 'name') {
                $products = $products->where('products.name', 'LIKE', "%$searchValue%");
            }
            if ($search === 'category') {
                $products = $products->where('c.title', 'LIKE', "%$searchValue%");
            } else {
                $products = $products->where("products.$search", 'LIKE', "%$searchValue%");
            }
        }

        $products         = $products->select(['products.*', 's.name as product_status']);
        $products         = $products->get()->toArray();
        $imageCropperRole = auth()->user()->hasRole('ImageCropers');
        $categoryArray    = Category::renderAsArray();
        $colors           = (new Colors)->all();

        if (! Setting::has('auto_push_product')) {
            $auto_push_product = Setting::add('auto_push_product', 0, 'int');
        } else {
            $auto_push_product = Setting::get('auto_push_product');
        }

        return response()->json(['status' => 200, 'data' => array_unique(array_column($products, $search))]);
    }

    public function magentoConditionsCheckLogs($pId, $swId)
    {
        $logs = ProductPushErrorLog::where('product_id', '=', $pId)->where('store_website_id', '=', $swId)->orderBy('id', 'desc')->get();

        return response()->json(['code' => 200, 'data' => $logs]);
    }

    public function getLogListMagentoDetail($llm_id)
    {
        $logs = LogListMagento::where('id', $llm_id)->first();
        if (isset($logs) && ! empty($logs)) {
            return response()->json(['code' => 200, 'data' => $logs]);
        } else {
            return response()->json(['code' => 500, 'data' => [], 'msg' => 'Log details not found.']);
        }
    }

    /**
     * Display the specified resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function show(Product $product, Sizes $sizes)
    {
        $data = [];

        $data['dnf']               = $product->dnf;
        $data['id']                = $product->id;
        $data['name']              = $product->name;
        $data['short_description'] = $product->short_description;
        $data['activities']        = $product->activities;
        $data['scraped']           = $product->scraped_products;

        $data['measurement_size_type'] = $product->measurement_size_type;
        $data['lmeasurement']          = $product->lmeasurement;
        $data['hmeasurement']          = $product->hmeasurement;
        $data['dmeasurement']          = $product->dmeasurement;

        $data['size']        = $product->size;
        $data['size_value']  = $product->size_value;
        $data['sizes_array'] = $sizes->all();

        $data['composition']       = $product->composition;
        $data['sku']               = $product->sku;
        $data['made_in']           = $product->made_in;
        $data['brand']             = $product->brand;
        $data['color']             = $product->color;
        $data['price']             = $product->price;
        $data['status']            = $product->status_id;
        $data['euro_to_inr']       = $product->euro_to_inr;
        $data['price_inr']         = $product->price_inr;
        $data['price_inr_special'] = $product->price_inr_special;

        $data['isApproved']    = $product->isApproved;
        $data['rejected_note'] = $product->rejected_note;
        $data['isUploaded']    = $product->isUploaded;
        $data['isFinal']       = $product->isFinal;
        $data['stock']         = $product->stock;
        $data['reason']        = $product->rejected_note;

        $data['product_link']     = $product->product_link;
        $data['supplier']         = $product->supplier;
        $data['supplier_link']    = $product->supplier_link;
        $data['description_link'] = $product->description_link;
        $data['location']         = $product->location;

        $data['suppliers']      = '';
        $data['more_suppliers'] = [];

        foreach ($product->suppliers as $key => $supplier) {
            if ($key == 0) {
                $data['suppliers'] .= $supplier->supplier;
            } else {
                $data['suppliers'] .= ", $supplier->supplier";
            }
        }

        $data['more_suppliers'] = DB::select('SELECT sp.url as link,s.supplier as name
                            FROM `scraped_products` sp
                            JOIN scrapers sc on sc.scraper_name=sp.website
                            JOIN suppliers s ON s.id=sc.supplier_id
                            WHERE last_inventory_at > DATE_SUB(NOW(), INTERVAL sc.inventory_lifetime DAY) and sp.sku = :sku', ['sku' => $product->sku]);

        $data['images'] = $product->getMedia(config('constants.media_tags'));

        $data['categories'] = $product->category ? CategoryController::getCategoryTree($product->category) : '';

        $data['has_reference'] = ScrapedProducts::where('sku', $product->sku)->first() ? true : false;

        $data['product'] = $product;

        return view('partials.show', $data);
    }

    public function bulkUpdate(Request $request)
    {
        $selected_products = json_decode($request->selected_products, true);
        $category          = $request->category[0];

        foreach ($selected_products as $id) {
            $product           = Product::find($id);
            $product->category = $category;
            $product->save();

            $lh             = new ListingHistory();
            $lh->user_id    = Auth::user()->id;
            $lh->product_id = $id;
            $lh->content    = ['Category updated', $category];
            $lh->save();
        }

        return redirect()->back()->withSuccess('You have successfully bulk updated products!');
    }

    public function updateName(Request $request, $id)
    {
        $product       = Product::find($id);
        $product->name = $request->name;
        $product->save();

        $lh             = new ListingHistory();
        $lh->user_id    = Auth::user()->id;
        $lh->product_id = $id;
        $lh->content    = ['Name updated', $request->get('name')];
        $lh->save();

        return response('success');
    }

    public function updateDescription(Request $request, $id)
    {
        $product                    = Product::find($id);
        $product->short_description = $request->description;
        $product->save();

        $lh             = new ListingHistory();
        $lh->user_id    = Auth::user()->id;
        $lh->product_id = $id;
        $lh->content    = ['Description updated', $request->get('description')];
        $lh->save();

        return response('success');
    }

    public function updateComposition(Request $request, $id)
    {
        $product              = Product::find($id);
        $product->composition = $request->composition;
        $product->save();

        $lh             = new ListingHistory();
        $lh->user_id    = Auth::user()->id;
        $lh->product_id = $id;
        $lh->content    = ['Composition updated', $request->get('composition')];
        $lh->save();

        return response('success');
    }

    public function updateColor(Request $request, $id)
    {
        $product = Product::find($id);

        if ($product) {
            $productColHis             = new \App\ProductColorHistory;
            $productColHis->user_id    = \Auth::user()->id;
            $productColHis->color      = $request->color;
            $productColHis->old_color  = $product->color;
            $productColHis->product_id = $product->id;
            $productColHis->save();
        }

        $originalColor  = $product->color;
        $product->color = $request->color;
        $product->save();

        \App\ProductStatus::pushRecord($product->id, 'MANUAL_COLOR');

        $lh             = new ListingHistory();
        $lh->user_id    = Auth::user()->id;
        $lh->product_id = $id;
        $lh->content    = ['Color updated', $request->get('color')];
        $lh->save();

        if (! $originalColor) {
            return response('success');
        }

        $color = (new Colors)->getID($originalColor);
        if ($color) {
            return response('success');
        }

        $colorReference = ColorReference::where('original_color', $originalColor)->first();
        if ($colorReference) {
            return response('success');
        }

        $colorReference                 = new ColorReference();
        $colorReference->original_color = $originalColor;
        $colorReference->brand_id       = $product->brand;
        $colorReference->erp_color      = $request->get('color');
        $colorReference->save();

        return response('success');
    }

    public function updateCategory(Request $request, $id)
    {
        $product = Product::find($id);

        if ($product) {
            $productCatHis                  = new \App\ProductCategoryHistory;
            $productCatHis->user_id         = \Auth::user()->id;
            $productCatHis->category_id     = $request->category;
            $productCatHis->old_category_id = $product->category;
            $productCatHis->product_id      = $product->id;
            $productCatHis->save();

            \App\ProductStatus::pushRecord($product->id, 'MANUAL_CATEGORY');
        }
        $product->category = $request->category;
        $product->save();
        $lh             = new ListingHistory();
        $lh->user_id    = Auth::user()->id;
        $lh->product_id = $id;
        $lh->content    = ['Category updated', $request->get('category')];
        $lh->save();

        return response('success');
    }

    public function updateSize(Request $request, $id)
    {
        $product               = Product::find($id);
        $product->size         = is_array($request->size) && count($request->size) > 0 ? implode(',', $request->size) : '';
        $product->lmeasurement = $request->lmeasurement;
        $product->hmeasurement = $request->hmeasurement;
        $product->dmeasurement = $request->dmeasurement;
        $product->save();

        $lh             = new ListingHistory();
        $lh->user_id    = Auth::user()->id;
        $lh->product_id = $id;
        $lh->content    = ['Sizes updated', $request->get('lmeasurement') . ' X ' . $request->get('hmeasurement') . ' X ' . $request->get('dmeasurement')];
        $lh->save();

        return response('success');
    }

    public function updatePrice(Request $request, $id)
    {
        $product        = Product::find($id);
        $product->price = $request->price;

        if (! empty($product->brand)) {
            $product->price_inr         = $this->euroToInr($product->price, $product->brand);
            $product->price_inr_special = $this->calculateSpecialDiscount($product->price_inr_special, $product->brand);
        }

        $product->save();

        $l             = new ListingHistory();
        $l->user_id    = Auth::user()->id;
        $l->product_id = $id;
        $l->content    = ['Price updated', $product->price];

        return response()->json([
            'price_inr'         => $product->price_inr,
            'price_inr_special' => $product->price_inr_special,
        ]);
    }

    public function quickDownload($id)
    {
        $product = Product::find($id);

        $products_array = [];

        if ($product->hasMedia(config('constants.media_tags'))) {
            foreach ($product->getMedia(config('constants.media_tags')) as $image) {
                $path = public_path('uploads') . '/' . $image->filename . '.' . $image->extension;
                array_push($products_array, $path);
            }
        }

        return response()->download(public_path("$product->sku.zip"))->deleteFileAfterSend();
    }

    public function quickUpload(Request $request, $id)
    {
        $product   = Product::find($id);
        $image_url = '';

        if ($request->hasFile('images')) {
            $product->detachMediaTags(config('constants.media_tags'));

            foreach ($request->file('images') as $key => $image) {
                $media = MediaUploader::fromSource($image)
                    ->toDirectory('product/' . floor($product->id / config('constants.image_per_folder')))
                    ->upload();
                $product->attachMedia($media, config('constants.media_tags'));

                if ($key == 0) {
                    $image_url = getMediaUrl($media);
                }
            }

            $product->last_imagecropper = Auth::id();
            $product->save();
        }

        return response()->json([
            'image_url'         => $image_url,
            'last_imagecropper' => $product->last_imagecropper,
        ]);
    }

    public function calculateSpecialDiscount($price, $brand)
    {
        $dis_per   = BrandController::getDeductionPercentage($brand);
        $dis_price = $price - ($price * $dis_per) / 100;

        return round($dis_price, -3);
    }

    public function euroToInr($price, $brand)
    {
        $euro_to_inr = BrandController::getEuroToInr($brand);

        if (! empty($euro_to_inr)) {
            $inr = $euro_to_inr * $price;
        } else {
            $inr = Setting::get('euro_to_inr') * $price;
        }

        return round($inr, -3);
    }

    public function listMagento(Request $request, $id)
    {
        try {
            // code...
            // Get product by ID
            $product = Product::find($id);
            ImageApprovalPushProductOnlyJob::dispatch($product)->onQueue('imageapprovalpushproductonly');

            return response()->json([
                'result' => 'queuedForDispatch',
                'status' => 'listed',
            ]);
        } catch (Exception $e) {
            $msg = $e->getMessage();

            $logId = LogListMagento::log($id, $msg, 'info');
            ProductPushErrorLog::log('', $id, $msg, 'php', $logId->store_website_id, '', '', $logId->id);
            $this->updateLogUserId($logId);
            // Return error response by default
            return response()->json([
                'result' => 'productNotFound',
                'status' => 'error',
            ]);
        }
    }

    public function pushProductTest(Request $request)
    {
        try {
            $products = ProductHelper::getProducts(StatusHelper::$finalApproval, 1);
            $product  = $products->first();
            TestPushProductOnlyJob::dispatchSync($product);

            return Redirect::Back()->with('success', 'Push product test initiated for this product #' . $product->id . '. You can check the logs on <a href="' . route('list.magento.logging') . '">Log List Magento</a> page.');
        } catch (Exception $e) {
            $msg = $e->getMessage();

            $logId = LogListMagento::log($product->id, $msg, 'info');
            ProductPushErrorLog::log('', $product->id, $msg, 'php', $logId->store_website_id, '', '', $logId->id);
            $this->updateLogUserId($logId);

            return Redirect::Back()->with('error', 'Push product test failed for this product #' . $product->id . '. You can check the logs on <a href="' . route('list.magento.logging') . '">Log List Magento</a> page.');
        }
    }

    public function multilistMagento(Request $request)
    {
        $data = $request->data;

        foreach ($data as $key => $id) {
            try {
                //code...
                // Get product by ID
                $mode    = $request->get('mode', 'product-push');
                $product = Product::find($id);
                //check for hscode
                $hsCode = $product->hsCode($product->category, $product->composition);
                $hsCode = true;
                // If we have a product, push it to Magento
                if ($product !== null) {
                    // Dispatch the job to the queue
                    $category = $product->category;
                    $brand    = $product->brand;
                    //website search
                    $websiteArrays = ProductHelper::getStoreWebsiteName($product->id);
                    if (count($websiteArrays) == 0) {
                        \Log::info('Product started ' . $product->id . ' No website found');
                        $msg   = 'No website found for  Brand: ' . $product->brand . ' and Category: ' . $product->category;
                        $logId = LogListMagento::log($product->id, 'No website found ' . $product->id, 'info');
                        ProductPushErrorLog::log('', $product->id, $msg, 'error', $logId->store_website_id, '', '', $logId->id);
                        $this->updateLogUserId($logId);
                    } else {
                        $i = 1;
                        foreach ($websiteArrays as $websiteArray) {
                            $website = StoreWebsite::find($websiteArray);
                            if ($website) {
                                \Log::info('Product started website found For website' . $website->website);
                                $log = LogListMagento::log($product->id, 'Start push to magento for product id ' . $product->id, 'info', $website->id, 'waiting');
                                //currently we have 3 queues assigned for this task.
                                $log->sync_status = 'waiting';
                                $log->queue       = \App\Helpers::createQueueName($website->title);
                                $log->save();
                                PushToMagento::dispatch($product, $website, $log, $mode)->onQueue($log->queue);
                                $i++;
                            }
                        }
                    }

                    // Update the product, so it doesn't show up in final listing
                    $product->isUploaded = 1;
                    $product->save();
                    // Return response
                    return response()->json([
                        'result' => 'queuedForDispatch',
                        'status' => 'listed',
                    ]);
                }
            } catch (Exception $e) {
                //throw $th;
                $msg = $e->getMessage();

                $logId = LogListMagento::log($id, $msg, 'info');
                ProductPushErrorLog::log('', $id, $msg, 'php', $logId->store_website_id, '', '', $logId->id);
                $this->updateLogUserId($logId);
            }
        }

        return response()->json([
            'result' => 'queuedForDispatch',
            'status' => 'listed',
        ]);
    }

    public function updateLogUserId($logId)
    {
        $updateLogUser = LogListMagento::find($logId->id);
        if ($updateLogUser) {
            $updateLogUser->user_id = Auth::id();
            $updateLogUser->save();
        }
    }

    public function unlistMagento(Request $request, $id)
    {
        $product       = Product::find($id);
        $magentoHelper = new MagentoHelper;
        $result        = $magentoHelper->magentoUnlistProduct($product);

        return response()->json([
            'result' => $result,
            'status' => 'unlisted',
        ]);
    }

    public function approveMagento(Request $request, $id)
    {
        $product       = Product::find($id);
        $magentoHelper = new MagentoHelper;
        $result        = $magentoHelper->magentoUpdateStatus($product);

        return response()->json([
            'result' => $result,
            'status' => 'approved',
        ]);
    }

    public function updateMagento(Request $request, $id)
    {
        $product       = Product::find($id);
        $magentoHelper = new MagentoHelper;
        $result        = $magentoHelper->magentoProductUpdate($product);

        return response()->json([
            'result' => $result[1],
            'status' => 'updated',
        ]);
    }

    public function updateMagentoProduct(Request $request)
    {
        $product = Product::find($request->update_product_id);

        //////      Update Local Product    //////
        $product->name                  = $request->name;
        $product->price                 = $request->price;
        $product->price_eur_special     = $request->price_eur_special;
        $product->price_eur_discounted  = $request->price_eur_discounted;
        $product->price_inr             = $request->price_inr;
        $product->price_inr_special     = $request->price_inr_special;
        $product->price_inr_discounted  = $request->price_inr_discounted;
        $product->measurement_size_type = $request->measurement_size_type;
        $product->lmeasurement          = $request->lmeasurement;
        $product->hmeasurement          = $request->hmeasurement;
        $product->dmeasurement          = $request->dmeasurement;
        $product->composition           = $request->composition;
        $product->size                  = $request->size;
        $product->short_description     = $request->short_description;
        $product->made_in               = $request->made_in;
        $product->brand                 = $request->brand;
        $product->category              = $request->category;
        $product->supplier              = $request->supplier;
        $product->supplier_link         = $request->supplier_link;
        $product->product_link          = $request->product_link;
        $product->updated_at            = time();

        if ($product->update()) {
            if ($product->status_id == 12) {
                ///////     Update Magento Product  //////
                $options = [
                    'trace'              => true,
                    'connection_timeout' => 120,
                    'wsdl_cache'         => WSDL_CACHE_NONE,
                ];

                $proxy     = new \SoapClient(config('magentoapi.url'), $options);
                $sessionId = $proxy->login(config('magentoapi.user'), config('magentoapi.password'));

                $sku = $product->sku . $product->color;
                try {
                    $magento_product = json_decode(json_encode($proxy->catalogProductInfo($sessionId, $sku)), true);
                    if ($magento_product) {
                        if (! empty($product->size)) {
                            $associated_skus = [];
                            $new_variations  = 0;
                            $sizes_array     = explode(',', $product->size);
                            $categories      = CategoryController::getCategoryTreeMagentoIds($product->category);

                            //////      Add new Variations  //////
                            foreach ($sizes_array as $key2 => $size) {
                                $error_message = '';

                                try {
                                    $simple_product = json_decode(json_encode($proxy->catalogProductInfo($sessionId, $sku . '-' . $size)), true);
                                } catch (Exception $e) {
                                    $error_message = $e->getMessage();
                                }

                                if ($error_message == 'Product not exists.') {
                                    // CREATE VARIATION
                                    $productData = [
                                        'categories'        => $categories,
                                        'name'              => $product->name,
                                        'description'       => '<p></p>',
                                        'short_description' => $product->short_description,
                                        'website_ids'       => [1],
                                        // Id or code of website
                                        'status' => $magento_product['status'],
                                        // 1 = Enabled, 2 = Disabled
                                        'visibility' => 1,
                                        // 1 = Not visible, 2 = Catalog, 3 = Search, 4 = Catalog/Search
                                        'tax_class_id' => 2,
                                        // Default VAT
                                        'weight'     => 0,
                                        'stock_data' => [
                                            'use_config_manage_stock' => 1,
                                            'manage_stock'            => 1,
                                        ],
                                        'price' => $product->price_eur_special,
                                        // Same price than configurable product, no price change
                                        'special_price'         => $product->price_eur_discounted,
                                        'additional_attributes' => [
                                            'single_data' => [
                                                ['key' => 'msrp', 'value' => $product->price],
                                                ['key' => 'composition', 'value' => $product->composition],
                                                ['key' => 'color', 'value' => $product->color],
                                                ['key' => 'sizes', 'value' => $size],
                                                ['key' => 'country_of_manufacture', 'value' => $product->made_in],
                                                ['key' => 'brands', 'value' => BrandController::getBrandName($product->brand)],
                                            ],
                                        ],
                                    ];
                                    // Creation of product simple
                                    $result         = $proxy->catalogProductCreate($sessionId, 'simple', 14, $sku . '-' . $size, $productData);
                                    $new_variations = 1;
                                } else {
                                    // SIMPLE PRODUCT EXISTS
                                    $status = $simple_product['status'];
                                    // 1 = Enabled, 2 = Disabled
                                }
                                $associated_skus[] = $sku . '-' . $size;
                            }

                            if ($new_variations == 1) {
                                // IF THERE WAS NEW VARIATION CREATED, UPDATED THE MAIN PRODUCT
                                /**
                                 * Configurable product
                                 */
                                $productData = [
                                    'associated_skus' => $associated_skus,
                                ];
                                // Creation of configurable product
                                $result = $proxy->catalogProductUpdate($sessionId, $sku, $productData);
                            }
                            $messages = 'Product updated successfully';

                            return Redirect::Back()
                                ->with('success', $messages);
                        } else {
                            $messages[] = 'Sorry! No sizes found for magento update';

                            return Redirect::Back()
                                ->withErrors($messages);
                        }
                    } else {
                        $messages[] = 'Sorry! Product not found in magento';

                        return Redirect::Back()
                            ->withErrors($messages);
                    }
                } catch (Exception $e) {
                    $messages[] = $e->getMessage();

                    return Redirect::Back()
                        ->withErrors($messages);
                }
            } else {
                $messages = 'Product updated successfuly';

                return Redirect::Back()
                    ->with('success', $messages);
            }
        } else {
            $messages[] = 'Sorry! Please try again';

            return Redirect::Back()
                ->withErrors($messages);
        }

        return Redirect::Back();
    }

    public function approveProduct(Request $request, $id = null)
    {
        if ($id !== null) {
            $product = Product::find($id);

            $product->is_approved         = 1;
            $product->approved_by         = Auth::user()->id;
            $product->listing_approved_at = Carbon::now()->toDateTimeString();
            $product->save();

            $l             = new ListingHistory();
            $l->user_id    = Auth::user()->id;
            $l->product_id = $product->id;
            $l->action     = 'LISTING_APPROVAL';
            $l->content    = ['action' => 'LISTING_APPROVAL', 'message' => 'Listing approved!'];
            $l->save();

            // once product approved the remove from the edititing list
            $productVUser = \App\ProductVerifyingUser::where('product_id', $id)->first();
            if ($productVUser) {
                $productVUser->delete();
            }

            ActivityConroller::create($product->id, 'productlister', 'create');
        } else {
            $ids      = $request->ids;
            $products = Product::whereIn('id', explode(',', $ids))->get();
            foreach ($products as $product) {
                $product->is_approved         = 1;
                $product->approved_by         = Auth::user()->id;
                $product->listing_approved_at = Carbon::now()->toDateTimeString();
                $product->save();

                $l             = new ListingHistory();
                $l->user_id    = Auth::user()->id;
                $l->product_id = $product->id;
                $l->action     = 'LISTING_APPROVAL';
                $l->content    = ['action' => 'LISTING_APPROVAL', 'message' => 'Listing approved!'];
                $l->save();

                // once product approved the remove from the edititing list
                $productVUser = \App\ProductVerifyingUser::where('product_id', $id)->first();
                if ($productVUser) {
                    $productVUser->delete();
                }
            }

            // once product approved the remove from the edititing list
            $productVUser = \App\ProductVerifyingUser::where('product_id', $id)->first();
            if ($productVUser) {
                $productVUser->delete();
            }

            ActivityConroller::create($product->id, 'productlister', 'create');
        }

        return response()->json([
            'result'  => true,
            'status'  => 'is_approved',
            'success' => 'Products Approved successfully',
        ]);
    }

    public function submitForApproval(Request $request, $id)
    {
        $product         = Product::find($id);
        $product->status = StatusHelper::$submitForApproval;
        $product->save();

        $l             = new ListingHistory();
        $l->user_id    = Auth::user()->id;
        $l->product_id = $product->id;
        $l->action     = 'SUBMIT_FOR_APPROVAL';
        $l->content    = ['action' => 'SUBMIT_FOR_APPROVAL', 'message' => 'User has submitted for approval!'];
        $l->save();

        return response()->json([
            'result' => true,
            'status' => 'submit_for_approval',
        ]);
    }

    public function archive($id)
    {
        $product = Product::find($id);
        $product->delete();

        return redirect()->back()
            ->with('success', 'Product archived successfully');
    }

    public function restore($id)
    {
        $product = Product::withTrashed()->find($id);
        $product->restore();

        return redirect()->back()
            ->with('success', 'Product restored successfully');
    }

    public function destroy($id)
    {
        $product = Product::find($id);
        $product->forceDelete();

        return redirect()->back()
            ->with('success', 'Product deleted successfully');
    }

    public function originalCategory($id)
    {
        $product            = Product::find($id);
        $referencesCategory = '';

        if (isset($product->scraped_products)) {
            // starting to see that howmany category we going to update
            if (isset($product->scraped_products->properties) && isset($product->scraped_products->properties['category']) != null) {
                $category = $product->scraped_products->properties['category'];
                if (is_array($category)) {
                    $referencesCategory = implode(' > ', $category);
                }
            }

            $scrapedProductSkuArray = [];

            if (! empty($referencesCategory)) {
                $productSupplier = $product->supplier;
                $supplier        = Supplier::where('supplier', $productSupplier)->first();
                if ($supplier && $supplier->scraper) {
                    $scrapedProducts = ScrapedProducts::where('website', $supplier->scraper->scraper_name)->get();
                    foreach ($scrapedProducts as $scrapedProduct) {
                        $products = $scrapedProduct->properties['category'];
                        if (is_array($products)) {
                            $list = implode(' > ', $products);
                            if (strtolower($referencesCategory) == strtolower($list)) {
                                $scrapedProductSkuArray[] = $scrapedProduct->sku;
                            }
                        }
                    }
                }
            }

            if (isset($product->scraped_products->properties) && isset($product->scraped_products->properties['category']) != null) {
                return response()->json(['success', $referencesCategory, count($scrapedProductSkuArray)]);
            } else {
                return response()->json(['message', 'Category Is Not Present']);
            }
        } else {
            return response()->json(['message', 'Category Is Not Present']);
        }
    }

    public function changeAllCategoryForAllSupplierProducts(Request $request, $id)
    {
        \App\Jobs\UpdateScrapedCategory::dispatch([
            'product_id'  => $id,
            'category_id' => $request->category,
            'user_id'     => Auth::user()->id,
        ])->onQueue('supplier_products');

        return response()->json(['success', 'Product category has been sent for the update']);
    }

    public function attachProducts($model_type, $model_id, $type, $customer_id, Request $request)
    {
        $roletype = $request->input('roletype') ?? 'Sale';
        $products = Product::where('stock', '>=', 1)
            ->select(['id', 'sku', 'size', 'price_inr_special', 'brand', 'isApproved', 'stage', 'created_at'])
            ->orderBy('created_at', 'DESC')
            ->paginate(Setting::get('pagination'));

        $doSelection = true;
        $customer_id = $customer_id ?? null;

        if ($type == 'images') {
            $attachImages = true;
        } else {
            $attachImages = false;
        }

        if ($model_type == 'broadcast-images') {
            $attachImages = true;
            $doSelection  = false;
        }

        if (Order::find($model_id)) {
            $selected_products = self::getSelectedProducts($model_type, $model_id);
        } else {
            $selected_products = [];
        }

        $category_selection = Category::attr(['name' => 'category[]', 'class' => 'form-control'])
            ->selected(1)
            ->renderAsDropdown();

        return view('partials.grid', compact('products', 'roletype', 'model_id', 'selected_products', 'doSelection', 'model_type', 'category_selection', 'attachImages', 'customer_id'));
    }

    public function attachImages(Request $request, $model_type, $model_id = null, $status = null, $assigned_user = null)
    {
        if ($model_type == 'customer') {
            $customerId = $model_id;
        } else {
            $customerId = null;
        }
        $roletype = $request->input('roletype') ?? 'Sale';
        $term     = $request->input('term');
        if ($request->total_images) {
            $perPageLimit = $request->total_images;
        } else {
            $perPageLimit = $request->get('per_page');
        }

        if (Order::find($model_id)) {
            $selected_products = self::getSelectedProducts($model_type, $model_id);
        } else {
            $selected_products = [];
        }
        if (empty($perPageLimit)) {
            $perPageLimit = Setting::get('pagination');
        }

        $sourceOfSearch = $request->get('source_of_search', 'na');

        $products = (new Product())->newQuery()->latest();
        $products->where('has_mediables', 1);

        if (isset($request->brand[0])) {
            if ($request->brand[0] != null) {
                $products = $products->whereIn('brand', $request->brand);
            }
        }

        if (isset($request->color[0])) {
            if ($request->color[0] != null) {
                $products = $products->whereIn('color', $request->color);
            }
        }

        if (isset($request->category[0])) {
            if ($request->category[0] != null && $request->category[0] != 1) {
                $category_children = [];

                foreach ($request->category as $category) {
                    $is_parent = Category::isParent($category);

                    if ($is_parent) {
                        $childs = Category::find($category)->childs()->get();

                        foreach ($childs as $child) {
                            $is_parent = Category::isParent($child->id);

                            if ($is_parent) {
                                $children = Category::find($child->id)->childs()->get();

                                foreach ($children as $chili) {
                                    array_push($category_children, $chili->id);
                                }
                            } else {
                                array_push($category_children, $child->id);
                            }
                        }
                    } else {
                        array_push($category_children, $category);
                    }
                }

                $products = $products->whereIn('category', $category_children);
            }
        }

        if ($request->price_min != null && $request->price_min != 0) {
            $products = $products->where('price_inr_special', '>=', $request->price_min);
        }

        if ($request->price_max != null) {
            $products = $products->where('price_inr_special', '<=', $request->price_max);
        }

        if ($request->discounted_percentage_min != null && $request->discounted_percentage_min != 0) {
            $products = $products->where('discounted_percentage', '>=', $request->discounted_percentage_min);
        }

        if ($request->discounted_percentage_max != null) {
            $products = $products->where('discounted_percentage', '<=', $request->discounted_percentage_max);
        }

        if (isset($request->supplier[0])) {
            if ($request->supplier[0] != null) {
                $suppliers_list = implode(',', $request->supplier);

                $products = $products->whereRaw("products.id in (SELECT product_id FROM product_suppliers WHERE supplier_id IN ($suppliers_list))");
            }
        }

        if (trim($request->size) != '') {
            $products = $products->whereNotNull('size')->where(function ($query) use ($request) {
                $query->where('size', $request->size)->orWhere('size', 'LIKE', "%$request->size,")->orWhere('size', 'LIKE', "%,$request->size,%");
            });
        }

        if (isset($request->location[0])) {
            if ($request->location[0] != null) {
                $products = $products->whereIn('location', $request->location);
            }
        }

        if (isset($request->type[0])) {
            if ($request->type[0] != null && is_array($request->type)) {
                if (count($request->type) > 1) {
                    $products = $products->where(function ($query) {
                        $query->where('is_scraped', 1)->orWhere('status', 2);
                    });
                } else {
                    if ($request->type[0] == 'scraped') {
                        $products = $products->where('is_scraped', 1);
                    } elseif ($request->type[0] == 'imported') {
                        $products = $products->where('status', 2);
                    } else {
                        $products = $products->where('isUploaded', 1);
                    }
                }
            }
        }

        if ($request->date != '') {
            if (isset($products)) {
                if ($request->type[0] != null && $request->type[0] == 'uploaded') {
                    $products = $products->where('is_uploaded_date', 'LIKE', "%$request->date%");
                } else {
                    $products = $products->where('created_at', 'LIKE', "%$request->date%");
                }
            }
        }

        if (trim($term) != '') {
            $products = $products->where(function ($query) use ($term) {
                $query->where('sku', 'LIKE', "%$term%")
                    ->orWhere('id', 'LIKE', "%$term%")
                    ->orWhere('name', 'LIKE', "%$term%")
                    ->orWhere('short_description', 'LIKE', "%$term%");
                if ($term == -1) {
                    $query = $query->orWhere('isApproved', -1);
                }

                $brand_id = \App\Brand::where('name', 'LIKE', "%$term%")->value('id');
                if ($brand_id) {
                    $query = $query->orWhere('brand', 'LIKE', "%$brand_id%");
                }

                $category_id = $category = Category::where('title', 'LIKE', "%$term%")->value('id');
                if ($category_id) {
                    $query = $query->orWhere('category', $category_id);
                }
            });
            if ($roletype != 'Selection' && $roletype != 'Searcher') {
                $products = $products->whereNull('dnf');
            }
        }

        if (isset($request->ids[0])) {
            if ($request->ids[0] != null) {
                $products = $products->whereIn('id', $request->ids);
            }
        }

        $selected_categories = $request->category ? $request->category : 1;

        if ($request->quick_product === 'true') {
            $products = $products->where('quick_product', 1);
        }

        // assing product to varaible so can use as per condition for join table media
        if ($request->quick_product !== 'true') {
            $products = $products->whereRaw("(stock > 0 OR (supplier ='In-Stock'))");
        }

        if ($request->drafted_product == 'on') {
            $products = $products->whereRaw('quick_product = 1');
        }

        // if source is attach_media for search then check product has image exist or not
        if ($request->get('unsupported', null) != '') {
            $products = $products->join('mediables', function ($query) {
                $query->on('mediables.mediable_id', 'products.id')->where('mediable_type', \App\Product::class);
            });

            $mediaIds = \DB::table('media')->where('aggregate_type', 'image')->join('mediables', function ($query) {
                $query->on('mediables.media_id', 'media.id')->where('mediables.mediable_type', \App\Product::class);
            })->whereNotIn('extension', config('constants.gd_supported_files'))->select('id')->pluck('id')->toArray();

            $products = $products->whereIn('mediables.media_id', $mediaIds);
            $products = $products->groupBy('products.id');
        }

        if (! empty($request->quick_sell_groups) && is_array($request->quick_sell_groups)) {
            $products = $products->whereRaw('(id in (select product_id from product_quicksell_groups where quicksell_group_id in (' . implode(',', $request->quick_sell_groups) . ') ))');
        }

        // brand filter count start
        $brandGroups = clone $products;
        $brandGroups = $brandGroups->groupBy('brand')->select([\DB::raw('count(id) as total_product'), 'brand'])->pluck('total_product', 'brand')->toArray();
        $brandIds    = array_values(array_filter(array_keys($brandGroups)));

        $brandsModel = \App\Brand::whereIn('id', $brandIds)->pluck('name', 'id')->toArray();

        $countBrands = [];
        if (! empty($brandGroups) && ! empty($brandsModel)) {
            foreach ($brandGroups as $key => $count) {
                $countBrands[] = [
                    'id'    => $key,
                    'name'  => ! empty($brandsModel[$key]) ? $brandsModel[$key] : 'N/A',
                    'count' => $count,
                ];
            }
        }
        if ($request->category) {
            try {
                $filtered_category = $request->category;
            } catch (Exception $e) {
                $filtered_category = [1];
            }
        } else {
            $filtered_category = [1];
        }

        $category_selection = Category::attr(['name' => 'category[]', 'class' => 'form-control select-multiple-cat-list input-lg select-multiple', 'multiple' => true, 'data-placeholder' => 'Select Category..'])
            ->selected($filtered_category)
            ->renderAsDropdown();

        // category filter start count
        $categoryGroups = clone $products;
        $categoryGroups = $categoryGroups->groupBy('category')->select([\DB::raw('count(id) as total_product'), 'category'])->pluck('total_product', 'category')->toArray();
        $categoryIds    = array_values(array_filter(array_keys($categoryGroups)));

        $categoryModel = \DB::table('categories')->whereIn('id', $categoryIds)->pluck('title', 'id')->toArray();
        $countCategory = [];
        if (! empty($categoryGroups) && ! empty($categoryModel)) {
            foreach ($categoryGroups as $key => $count) {
                $countCategory[] = [
                    'id'    => $key,
                    'name'  => ! empty($categoryModel[$key]) ? $categoryModel[$key] : 'N/A',
                    'count' => $count,
                ];
            }
        }

        // suppliers filter start count/
        $suppliersGroups = clone $products;
        $all_product_ids = $suppliersGroups->pluck('id')->toArray();
        $countSuppliers  = [];
        if (! empty($all_product_ids)) {
            $suppliersGroups = \App\Product::leftJoin('product_suppliers', 'product_id', '=', 'products.id')
                ->where('products.id', $all_product_ids)
                ->groupBy('product_suppliers.supplier_id')
                ->select([\DB::raw('count(products.id) as total_product'), 'product_suppliers.supplier_id'])
                ->pluck('total_product', 'supplier_id')
                ->toArray();
            $suppliersIds   = array_values(array_filter(array_keys($suppliersGroups)));
            $suppliersModel = \App\Supplier::whereIn('id', $suppliersIds)->pluck('supplier', 'id')->toArray();

            if (! empty($suppliersGroups)) {
                foreach ($suppliersGroups as $key => $count) {
                    $countSuppliers[] = [
                        'id'    => $key,
                        'name'  => ! empty($suppliersModel[$key]) ? $suppliersModel[$key] : 'N/A',
                        'count' => $count,
                    ];
                }
            }
        }

        // select fields..
        $products = $products->select(['products.id', 'name', 'short_description', 'color', 'sku', 'products.category', 'products.size', 'price_eur_special', 'price_inr_special', 'supplier', 'purchase_status', 'products.created_at']);

        if ($request->get('is_on_sale') == 'on') {
            $products = $products->where('is_on_sale', 1);
        }

        if ($request->has('limit')) {
            $perPageLimit = ($request->get('limit') == 'all') ? $products->get()->count() : $request->get('limit');
        }

        $categoryAll = Category::with('childs.childLevelSencond')->where('parent_id', 0)->get();

        foreach ($categoryAll as $category) {
            $categoryArray[] = ['id' => $category->id, 'value' => $category->title];
            foreach ($category->childs as $child) {
                $categoryArray[] = ['id' => $child->id, 'value' => $category->title . ' ' . $child->title];
                if ($child->childLevelSencond != null) {
                    foreach ($child->childLevelSencond as $grandChild) {
                        $categoryArray[] = ['id' => $grandChild->id, 'value' => $category->title . ' ' . $child->title . ' ' . $grandChild->title];
                    }
                }
            }
        }

        if ($request->total_images) {
            $products = $products->limit($request->total_images)->get();
            $products = new LengthAwarePaginator($products, count($products), $request->total_images, 1, [
                'path' => LengthAwarePaginator::resolveCurrentPath(),
            ]);
        } else {
            $products = $products->paginate($perPageLimit);
        }

        $brand           = $request->brand;
        $products_count  = $products->total();
        $all_product_ids = [];
        $from            = request('from', '');
        if ($request->submit_type == 'send-to-approval') {
            $products_ids_cloned = clone $products;
            $product_ids         = $products_ids_cloned->pluck('id');
            $inserted            = 0;
            if (count($product_ids) > 0 && $customerId) {
                $json_brands                    = json_encode($request->brand);
                $json_categories                = json_encode($request->category);
                $json_supplier                  = json_encode($request->supplier);
                $json_color                     = json_encode($request->color);
                $json_location                  = json_encode($request->location);
                $size                           = $request->size;
                $suggestedProducts              = new \App\SuggestedProduct;
                $suggestedProducts->customer_id = $customerId;
                if ($json_brands != 'null' && $json_brands != '') {
                    $suggestedProducts->brands = $json_brands;
                }
                if ($json_categories != 'null' && $json_categories != '') {
                    $suggestedProducts->categories = $json_categories;
                }
                if ($json_color != 'null' && $json_color != '') {
                    $suggestedProducts->color = $json_color;
                }
                if ($json_supplier != 'null' && $json_supplier != '') {
                    $suggestedProducts->supplier = $json_supplier;
                }
                if ($json_location != 'null' && $json_location != '') {
                    $suggestedProducts->location = $json_location;
                }
                $suggestedProducts->size  = $size;
                $suggestedProducts->total = $perPageLimit;
                $suggestedProducts->save();
                $suggestedProductId = $suggestedProducts->id;

                $data_to_insert = [];
                foreach ($product_ids as $id) {
                    $exists = \App\SuggestedProductList::where('customer_id', $customerId)->where('product_id', $id)->where('date', date('Y-m-d'))->first();
                    if (! $exists) {
                        $pr = Product::find($id);
                        if ($pr->hasMedia(config('constants.attach_image_tag'))) {
                            $data_to_insert[] = [
                                'suggested_products_id' => $suggestedProductId,
                                'customer_id'           => $customerId,
                                'product_id'            => $id,
                                'date'                  => date('Y-m-d'),
                            ];
                        }
                        $category_brand_count = ErpLeads::where('category_id', $pr->category)->where('brand_id', $pr->brand)->count();
                        if ($category_brand_count === 0) {
                            $erp_lead                   = new ErpLeads;
                            $erp_lead->lead_status_id   = 1;
                            $erp_lead->customer_id      = $customerId;
                            $erp_lead->product_id       = $id;
                            $erp_lead->store_website_id = 15;
                            $erp_lead->category_id      = $pr->category;
                            $erp_lead->brand_id         = $pr->brand;
                            $erp_lead->type             = 'attach-images-for-product';
                            $erp_lead->min_price        = ! empty($request->price_min) ? $request->price_min : 0;
                            $erp_lead->max_price        = ! empty($request->price_max) ? $request->price_max : 0;
                            $erp_lead->save();
                        }
                    }
                }
                $inserted = count($data_to_insert);
                if ($inserted > 0) {
                    \App\SuggestedProductList::insert($data_to_insert);
                }
            }

            //
            if ($request->need_to_send_message == 1) {
                \App\ChatMessage::create([
                    'message'     => "Total product found '" . count($product_ids) . "' for the keyword message : {$request->keyword_matched}",
                    'customer_id' => $model_id,
                    'status'      => 2,
                    'approved'    => 1,
                ]);

                return ['total_product' => count($product_ids)];
            }
            $msg = $inserted . ' Products attached successfully';

            return response()->json(['code' => 200, 'message' => $msg]);
        }

        $mailEclipseTpl = mailEclipse::getTemplates()->where('template_dynamic', false);
        $rViewMail      = [];
        if (! empty($mailEclipseTpl)) {
            foreach ($mailEclipseTpl as $mTpl) {
                $rViewMail[$mTpl->template_slug] = $mTpl->template_name . ' [' . $mTpl->template_description . ']';
            }
        }

        if ($request->ajax()) {
            $html = view('partials.image-load', [
                'products'          => $products,
                'all_product_ids'   => $all_product_ids,
                'selected_products' => $request->selected_products ? json_decode($request->selected_products) : [],
                'model_type'        => $model_type,
                'countBrands'       => $countBrands,
                'countCategory'     => $countCategory,
                'countSuppliers'    => $countSuppliers,
                'customerId'        => $customerId,
                'categoryArray'     => $categoryArray,
                'rViewMail'         => $rViewMail,
            ])->render();

            if (! empty($from) && $from == 'attach-image') {
                return $html;
            }

            return response()->json(['html' => $html, 'products_count' => $products_count]);
        }

        $message_body = $request->message ? $request->message : '';
        $sending_time = $request->sending_time ?? '';

        $locations = \App\ProductLocation::pluck('name', 'name');
        $suppliers = Supplier::select(['id', 'supplier'])->whereIn('id', DB::table('product_suppliers')->selectRaw('DISTINCT(`supplier_id`) as suppliers')->pluck('suppliers')->toArray())->get();

        $quick_sell_groups = \App\QuickSellGroup::select('id', 'name')->orderBy('id', 'desc')->get();

        return view('partials.image-grid', compact(
            'products',
            'products_count',
            'roletype',
            'model_id',
            'selected_products',
            'model_type',
            'status',
            'assigned_user',
            'category_selection',
            'brand',
            'filtered_category',
            'message_body',
            'sending_time',
            'locations',
            'suppliers',
            'all_product_ids',
            'quick_sell_groups',
            'countBrands',
            'countCategory',
            'countSuppliers',
            'customerId',
            // 'categoryArray',
            'term',
            'rViewMail'
        ));
    }

    public function attachProductToModel($model_type, $model_id, $product_id)
    {
        switch ($model_type) {
            case 'order':
                $action = OrderController::attachProduct($model_id, $product_id);

                break;

            case 'sale':
                $action = SaleController::attachProduct($model_id, $product_id);
                break;
            case 'stock':
                $stock   = Stock::find($model_id);
                $product = Product::find($product_id);

                $stock->products()->attach($product);
                $action = 'Attached';
                break;
        }

        return ['msg' => 'success', 'action' => $action];
    }

    public static function getSelectedProducts($model_type, $model_id)
    {
        $selected_products = [];

        switch ($model_type) {
            case 'order':
                $order = Order::find($model_id);
                if (! empty($order)) {
                    $selected_products = $order->order_product()->with('product')->get()->pluck('product.id')->toArray();
                }
                break;

            case 'sale':
                $sale = Sale::find($model_id);
                if (! empty($sale)) {
                    $selected_products = json_decode($sale->selected_product, true) ?? [];
                }
                break;

            default:
                $selected_products = [];
        }

        return $selected_products;
    }

    public function store(Request $request)
    {
        $this->validate($request, [
            'sku' => 'required|unique:products',
        ]);

        $product = new Product;

        $product->name     = $request->name;
        $product->sku      = $request->sku;
        $size              = ! is_array($request->size) ? [$request->size] : $request->size;
        $product->size     = implode(',', $size);
        $product->brand    = $request->brand;
        $product->color    = $request->color;
        $product->supplier = $request->supplier;
        $product->location = $request->location;
        $product->category = $request->category ?? 1;
        if ($request->price) {
            $product->price = $request->price;
        }
        if ($request->price_inr_special) {
            $product->price_inr_special = $request->price_inr_special;
        }
        $product->stock = 1;

        $brand = Brand::find($request->brand);

        if ($request->price) {
            if (isset($request->brand) && ! empty($brand->euro_to_inr)) {
                $product->price_inr = $brand->euro_to_inr * $product->price;
            } else {
                $product->price_inr = Setting::get('euro_to_inr') * $product->price;
            }

            $deduction_percentage       = $brand && $brand->deduction_percentage ? $brand->deduction_percentage : 1;
            $product->price_inr         = round($product->price_inr, -3);
            $product->price_inr_special = $product->price_inr - ($product->price_inr * $deduction_percentage) / 100;

            $product->price_inr_special = round($product->price_inr_special, -3);
        } elseif ($request->price_inr_special) {
            if (isset($request->brand) && ! empty($brand->euro_to_inr)) {
                $product->price = $request->price_inr_special / $brand->euro_to_inr;
            } else {
                $product->price = $request->price_inr_special / Setting::get('euro_to_inr');
            }
            $product->price_inr = $request->price_inr_special;
        }

        $product->save();

        if ($request->supplier == 'In-stock') {
            $product->suppliers()->attach(11); // In-stock ID
        }

        if ($request->hasFile('image')) {
            $product->detachMediaTags(config('constants.media_tags'));
            $media = MediaUploader::fromSource($request->get('is_image_url') ? $request->get('image') : $request->file('image'))
                ->toDirectory('product/' . floor($product->id / config('constants.image_per_folder')) . '/' . $product->id)
                ->upload();
            $product->attachMedia($media, config('constants.media_tags'));
        }

        $product_image = $product->getMedia(config('constants.media_tags'))->first() ? getMediaUrl($product->getMedia(config('constants.media_tags'))->first()) : '';

        if ($request->order_id) {
            $order_product = new OrderProduct;

            $order_product->order_id      = $request->order_id;
            $order_product->sku           = $request->sku;
            $order_product->product_price = $product->price_inr_special;
            $order_product->size          = $request->size;
            $order_product->color         = $request->color;
            $order_product->qty           = $request->quantity;
            $order_product->product_id    = $product->id;
            $order_product->save();

            return response(['product' => $product, 'order' => $order_product, 'quantity' => $request->quantity, 'product_image' => $product_image]);
        } elseif ($request->stock_id) {
            $stock = Stock::find($request->stock_id);
            $stock->products()->attach($product);

            return response(['product' => $product, 'product_image' => $product_image]);
        }

        if ($request->ajax()) {
            return response()->json(['msg' => 'success']);
        }

        return redirect()->back()->with('success', 'You have successfully uploaded product!');
    }

    /**
     * @SWG\Get(
     *   path="/crop",
     *   tags={"Scraper"},
     *   summary="Return images array where the product status = auto crop",
     *   operationId="scraper-get-product-img",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *   @SWG\Response(response=406, description="not acceptable"),
     *   @SWG\Response(response=500, description="internal server error"),
     *
     *      @SWG\Parameter(
     *          name="product_id",
     *          in="path",
     *          required=false,
     *          type="string"
     *      ),
     *      @SWG\Parameter(
     *          name="supplier_id",
     *          in="path",
     *          required=false,
     *          type="string"
     *      ),
     * )
     */
    public function giveImage(Request $request)
    {
        \Log::info('crop_image_start_time: ' . date('Y-m-d H:i:s'));
        $productId  = request('product_id', null);
        $supplierId = request('supplier_id', null);
        if ($productId != null) {
            $product = Product::where('id', $productId)->first();
            if ($product) {
                //set initial pending status for isBeingCropped
                $scrap_status_data = [
                    'product_id'     => $product->id,
                    'old_status'     => $product->status_id,
                    'new_status'     => StatusHelper::$isBeingCropped,
                    'pending_status' => 1,
                    'created_at'     => date('Y-m-d H:i:s'),
                ];
                \App\ProductStatusHistory::addStatusToProduct($scrap_status_data);

                //set initial pending status for pending products with category(attributeRejectCategory)
                $scrap_status_data = [
                    'product_id'     => $product->id,
                    'old_status'     => $product->status_id,
                    'new_status'     => StatusHelper::$attributeRejectCategory,
                    'pending_status' => 1,
                    'created_at'     => date('Y-m-d H:i:s'),
                ];
                \App\ProductStatusHistory::addStatusToProduct($scrap_status_data);
            }
            \Log::info('product_start_time_if_block: ' . date('Y-m-d H:i:s'));
            $product = Product::where('id', $productId)->where('category', '>', 3)->first();
            \Log::info('product_end_time_if_block: ' . date('Y-m-d H:i:s'));
        } elseif ($supplierId != null) {
            \Log::info('product_supplier_start_time: ' . date('Y-m-d H:i:s'));
            $product = Product::join('product_suppliers as ps', 'ps.product_id', 'products.id')
                ->where('ps.supplier_id', $supplierId)
                ->where('products.status_id', StatusHelper::$autoCrop)
                ->where('products.category', '>', 3)
                ->where('products.stock', '>=', 1)
                ->orderBy('products.scrap_priority', 'DESC')
                ->select('products.*')
                ->first();
            \Log::info('product_supplier_end_time: ' . date('Y-m-d H:i:s'));
        } else {
            \Log::info('product_image_start_time_else_block: ' . date('Y-m-d H:i:s'));
            // Get next product
            $product = Product::select('id', 'status_id', 'category', 'lmeasurement', 'hmeasurement', 'dmeasurement')->where('products.status_id', StatusHelper::$autoCrop)
                ->where('products.category', '>', 3)
                ->where('products.stock', '>=', 1)
                ->orderBy('products.scrap_priority', 'DESC');
            // Prioritize suppliers
            $prioritizeSuppliers = "CASE WHEN brand IN (4,13,15,18,20,21,24,25,27,30,32,144,145) AND category IN (11,39,5,41,14,42,60,17,31,63) AND products.supplier IN ('G & B Negozionline', 'Tory Burch', 'Wise Boutique', 'Biffi Boutique (S.P.A.)', 'MARIA STORE', 'Lino Ricci Lei', 'Al Duca d\'Aosta', 'Tiziana Fausti', 'Leam') THEN 0 ELSE 1 END";
            $product             = $product->orderByRaw($prioritizeSuppliers);
            // Show on sale products first
            $product = $product->orderBy('is_on_sale', 'DESC');
            // Show latest approvals first
            $product = $product->orderBy('listing_approved_at', 'DESC');

            $product = $product->with('suppliers_info:id,product_id,supplier_id', 'suppliers_info.supplier:id,priority')->whereHas('suppliers_info', function ($query) {
                $query->select('id', 'product_id', 'supplier_id');
                $query->whereHas('supplier', function ($query) {
                    $query->select('id')->where('priority', '!=', null);
                });
            })
                ->whereHasMedia('original')
                ->first();
            if (! empty($product)) {
                $product->priority = isset($product->suppliers_info->first()->supplier->priority) ? $product->suppliers_info->first()->supplier->priority : 5;
            }
            \Log::info('product_image_end_time_else_block: ' . date('Y-m-d H:i:s'));

            unset($product->priority);
        }

        if (! $product) {
            // Return JSON
            return response()->json([
                'status' => 'no_product',
            ]);
        }

        $debug = request('debug', false);
        if (empty($debug)) {
            $product->status_id = StatusHelper::$isBeingCropped;
            $product->save();
        }

        \Log::info('mediables_start_time: ' . date('Y-m-d H:i:s'));
        $mediables = DB::table('mediables')->select('media_id')->where('mediable_id', $product->id)->where('mediable_type', \App\Product::class)->where('tag', 'original')->get();
        \Log::info('mediables_end_time: ' . date('Y-m-d H:i:s'));
        //deleting old images
        \Log::info('old_image_start_time: ' . date('Y-m-d H:i:s'));
        $oldImages = DB::table('mediables')->select('media_id')->where('mediable_id', $product->id)->where('mediable_type', \App\Product::class)->where('tag', '!=', 'original')->get();
        \Log::info('old_image_end_time: ' . date('Y-m-d H:i:s'));
        //old scraped products
        if ($oldImages) {
            foreach ($oldImages as $img) {
                $media = Media::where('id', $img->media_id)->first();
                if ($media) {
                    $image_path = $media->getAbsolutePath();
                    if (\File::exists($image_path)) {
                        \File::delete($image_path);
                    }
                    $media->delete();
                }
            }
        }

        foreach ($mediables as $mediable) {
            $mediableArray[] = $mediable->media_id;
        }

        if (! isset($mediableArray)) {
            return response()->json([
                'status' => 'no_product',
            ]);
        }

        \Log::info('media_start_time: ' . date('Y-m-d H:i:s'));
        $images = Media::select('id', 'filename', 'extension', 'mime_type', 'disk', 'directory')->whereIn('id', $mediableArray)->get();

        foreach ($images as $image) {
            $output['media_id'] = $image->id;
            $image->setAttribute('pivot', $output);
        }
        \Log::info('media_end_time: ' . date('Y-m-d H:i:s'));

        // Get category
        $category = $product->product_category;

        // Get other information related to category
        $cat    = $category->title;
        $parent = '';
        $child  = '';
        try {
            if ($cat != 'Select Category') {
                if ($category->isParent($category->id)) {
                    $parent = $cat;
                    $child  = $cat;
                } else {
                    $parent = $category->parent()->first()->title;
                    $child  = $cat;
                }
            }
        } catch (\ErrorException $e) {
            //
        }

        \Log::info('website_array_start_time: ' . date('Y-m-d H:i:s'));
        //Getting Website Color
        $websiteArrays = ProductHelper::getStoreWebsiteNameByTag($product->id);
        if (count($websiteArrays) == 0) {
            $colors = [];
        } else {
            foreach ($websiteArrays as $websiteArray) {
                $website = $websiteArray;
                if ($website) {
                    $isCropped = SiteCroppedImages::where('website_id', $websiteArray->id)
                        ->where('product_id', $product->id)->exists();
                    if (! $isCropped) {
                        [$r, $g, $b] = sscanf($website->cropper_color, '#%02x%02x%02x');
                        if (! empty($r) && ! empty($g) && ! empty($b)) {
                            $hexcode  = '(' . $r . ',' . $g . ',' . $b . ')';
                            $colors[] = [
                                'code'              => $hexcode,
                                'color'             => $website->cropper_color_name,
                                'size'              => $website->cropping_size,
                                'store'             => $website->title,
                                'logo_color'        => $website->logo_color,
                                'logo_border_color' => $website->logo_border_color,
                                'text_color'        => $website->text_color,
                                'border_color'      => ['color' => $website->border_color, 'thickness' => $website->border_thickness],
                            ];
                        }
                    }
                }
            }
        }
        \Log::info('website_array_end_time: ' . date('Y-m-d H:i:s'));
        if (! isset($colors)) {
            $colors = [];
        }
        if ($parent == null && $parent == '') {
            // Set new status
            $product->status_id = StatusHelper::$attributeRejectCategory;
            $product->save();

            \Log::info('crop_image_end_time: ' . date('Y-m-d H:i:s'));
            // Return JSON
            return response()->json([
                'status' => 'no_product',
            ]);
        } else {
            // Set new status
            $debug = request('debug', false);
            if (empty($debug)) {
                $product->status_id = StatusHelper::$isBeingCropped;
                $product->save();
            }

            $category_text = '';
            if ($child == 'Unknown Category') {
                $category_text = $parent;
            } else {
                $category_text = $parent . ' ' . $child;
            }
            $res = [
                'product_id'    => $product->id,
                'image_urls'    => $images,
                'l_measurement' => $product->lmeasurement,
                'h_measurement' => $product->hmeasurement,
                'd_measurement' => $product->dmeasurement,
                'category'      => $category_text,
                'colors'        => $colors,
            ];

            $http = CropImageGetRequest::create([
                'product_id' => $product->id,
                'request'    => json_encode($request->all()),
                'response'   => json_encode($res),
            ]);

            $res['token'] = $http->id;

            \Log::info('crop_image_end_time: ' . date('Y-m-d H:i:s'));
            // Return product
            return response()->json($res);
        }
    }

    /**
     * @SWG\Post(
     *   path="/link/image-crop",
     *   tags={"Crop"},
     *   summary="Save cropped image for product",
     *   operationId="crop-save-product-img",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *   @SWG\Response(response=406, description="not acceptable"),
     *   @SWG\Response(response=500, description="internal server error"),
     *
     *      @SWG\Parameter(
     *          name="product_id",
     *          in="path",
     *          required=true,
     *          type="string"
     *      ),
     *      @SWG\Parameter(
     *          name="file",
     *          in="formData",
     *          required=true,
     *          type="file"
     *      ),
     *      @SWG\Parameter(
     *          name="color",
     *          in="formData",
     *          required=true,
     *          type="string"
     *      ),
     *      @SWG\Parameter(
     *          name="media_id",
     *          in="formData",
     *          required=true,
     *          type="string"
     *      ),
     *      @SWG\Parameter(
     *          name="filename",
     *          in="formData",
     *          required=true,
     *          type="string"
     *      ),
     *      @SWG\Parameter(
     *          name="time",
     *          in="formData",
     *          required=true,
     *          type="string"
     *      ),
     * )
     */
    public function saveImage(Request $request)
    {
        $req = $request->all();

        $req['file'] = $request->file;

        $httpHistory = CropImageHttpRequestResponse::create([
            'crop_image_get_request_id' => $request->token,
            'request'                   => json_encode($req),
        ]);
        try {
            // Find the product or fail
            $product = Product::find($request->get('product_id'));

            if (! $product) {
                $res = [
                    'status'  => 'error',
                    'message' => 'Unknown product with ID:' . $request->get('product_id'),
                ];

                $httpHistory->update(['response' => json_encode($res)]);

                return response()->json($res);
            }

            //sets initial status pending for finalApproval in product status histroy
            $data = [
                'product_id'     => $product->id,
                'old_status'     => $product->status_id,
                'new_status'     => StatusHelper::$finalApproval,
                'pending_status' => 1,
                'created_at'     => date('Y-m-d H:i:s'),
            ];
            \App\ProductStatusHistory::addStatusToProduct($data);

            // Check if we have a file
            if ($request->hasFile('file')) {
                $image = $request->file('file');

                //Get the last image of the product.
                $allMediaIds = [];
                $pMedia      = $product->getMedia(config('constants.media_original_tag'));
                if (! $pMedia->isEmpty()) {
                    foreach ($pMedia as $m) {
                        $allMediaIds[] = $m->id;
                    }
                }

                $productMediacount = count($allMediaIds);

                $media = MediaUploader::fromSource($image)
                    ->useFilename('CROPPED_' . time() . '_' . rand(555, 455545))
                    ->toDirectory('product/' . floor($product->id / config('constants.image_per_folder')) . '/' . $product->id)
                    ->upload();
                $colorName = null;
                if ($request->get('color')) {
                    $colorCode = str_replace(['(', ')'], '', $request->get('color'));
                    $rgbarr    = explode(',', $colorCode, 3);
                    $hex       = sprintf('#%02x%02x%02x', $rgbarr[0], $rgbarr[1], $rgbarr[2]);
                    $colorName = $hex;
                    $tag       = 'gallery_' . $hex;

                    // check the store website count is existed with the total image
                    $storeWebCount = $product->getMedia($tag)->count();
                    if ($productMediacount <= $storeWebCount) {
                        $store_website_detail = StoreWebsite::where('cropper_color', 'LIKE', '%' . $request->get('color'))->first();
                        if ($store_website_detail !== null) {
                            $store_websites = StoreWebsite::where('tag_id', $store_website_detail->tag_id)->get();
                            foreach ($store_websites as $sw_key => $sw_data) {
                                if (isset($req['store']) && $req['store'] == $sw_data->title) {
                                    $exist = SiteCroppedImages::where('website_id', $sw_data->id)
                                        ->where('product_id', $product->id)->exists();
                                    if (! $exist) {
                                        SiteCroppedImages::create([
                                            'website_id' => $sw_data->id,
                                            'product_id' => $product->id,
                                        ]);
                                    }
                                }
                            }
                        }
                    }
                } else {
                    $tag = config('constants.media_gallery_tag');
                }

                $product->attachMedia($media, $tag);
                $product->crop_count = $product->crop_count + 1;
                $product->save();

                $imageReference                      = new CroppedImageReference();
                $imageReference->original_media_id   = $request->get('media_id');
                $imageReference->new_media_id        = $media->id;
                $imageReference->original_media_name = $request->get('filename');
                $imageReference->new_media_name      = $media->filename . '.' . $media->extension;
                $imageReference->speed               = $request->get('time');
                $imageReference->product_id          = $product->id;
                $imageReference->color               = $colorName;
                $imageReference->instance_id         = $request->get('instance_id');
                $imageReference->save();

                $httpHistory->update(['cropped_image_reference_id' => $imageReference->id]);

                //CHeck number of products in Crop Reference Grid
                $cropCount = CroppedImageReference::where('product_id', $product->id)
                    ->whereIn('original_media_id', $allMediaIds)
                    ->count();

                //check website count using Product
                $websiteArrays = ProductHelper::getStoreWebsiteName($product->id);

                if (count($websiteArrays) == 0) {
                    $multi = 1;
                } else {
                    $multi = count($websiteArrays);
                }

                $totalM = $productMediacount;

                $productMediacount = ($productMediacount * $multi);

                if ($productMediacount <= $cropCount) {
                    $product->cropped_at = Carbon::now()->toDateTimeString();
                    //check final approval
                    if ($product->checkPriceRange()) {
                        $product->status_id = StatusHelper::$finalApproval;
                    } else {
                        $product->status_id = StatusHelper::$priceCheck;
                    }

                    $product->scrap_priority = 0;
                    $product->save();
                } else {
                    $product->cropped_at = Carbon::now()->toDateTimeString();
                    $product->save();
                }

                // get the status as per crop
                if ($product->category > 0) {
                    $category = \App\Category::find($product->category);
                    if (! empty($category) && $category->status_after_autocrop > 0) {
                        \App\Helpers\StatusHelper::updateStatus($product, $category->status_after_autocrop);
                    }
                }
            } else {
                $product->status_id = StatusHelper::$cropSkipped;
                $product->save();
            }

            $res = [
                'status' => 'success',
            ];

            $httpHistory->update(['response' => json_encode($res)]);

            return response()->json($res);
        } catch (Exception $e) {
            $res = [
                'status'  => 'error',
                'message' => $e->getMessage(),
                'line_no' => $e->getLine(),
                'file'    => $e->getFile(),
            ];

            $httpHistory->update(['response' => json_encode($res)]);

            return response()->json($res);
        }
    }

    public function rejectedListingStatistics()
    {
        $products = DB::table('products')->where('is_listing_rejected', 1)->groupBy(['listing_remark', 'supplier'])->selectRaw('COUNT(*) as total_count, supplier, listing_remark')->orderBy('total_count', 'DESC')->get();

        return view('products.rejected_stats', compact('products'));
    }

    public function addListingRemarkToProduct(Request $request)
    {
        $productId = $request->get('product_id');
        $remark    = $request->get('remark');

        $product = Product::find($productId);
        if ($product) {
            $product->listing_remark      = $remark;
            $product->is_listing_rejected = $request->get('rejected');
            $product->listing_rejected_by = Auth::user()->id;
            $product->is_approved         = 0;
            $product->listing_rejected_on = date('Y-m-d');
            $product->save();
        }

        if ($request->get('senior') && $product) {
            $s                 = new UserProductFeedback();
            $s->user_id        = $product->approved_by;
            $s->senior_user_id = Auth::user()->id;
            $s->action         = 'LISTING_APPROVAL_REJECTED';
            $s->content        = ['action' => 'LISTING_APPROVAL_REJECTED', 'previous_action' => 'LISTING_APPROVAL', 'current_action' => 'LISTING_REJECTED', 'message' => 'Your listing has been rejected because of : ' . $remark];
            $s->message        = "Your listing approval has been discarded by the Admin because of this issue: $remark. Please make sure you check these details before approving any future product.";
            $s->product_id     = $product->id;
            $s->save();
        }

        if ($request->get('rejected') && $product) {
            $l             = new ListingHistory();
            $l->action     = 'LISTING_REJECTED';
            $l->content    = ['action' => 'LISTING_REJECTED', 'page' => 'LISTING'];
            $l->user_id    = Auth::user()->id;
            $l->product_id = $product->id;
            $l->save();
        }

        return response()->json([
            'status' => 'success',
        ]);
    }

    public function showAutoRejectedProducts()
    {
        $totalRemaining = Product::where('stock', '>=', 1)->where('is_listing_rejected_automatically', 1)->count();
        $totalDone      = Product::where('stock', '>=', 1)->where('was_auto_rejected', 1)->count();

        return view('products.auto_rejected_stats', compact('totalDone', 'totalRemaining'));
    }

    public function affiliateProducts(Request $request)
    {
        $colors        = (new Colors)->all();
        $category_tree = [];
        $brands        = Brand::all();
        $brand         = null;
        $price         = null;
        $color         = [];
        $products      = Product::where('is_without_image', 0);

        if ($request->get('sku')) {
            $products = $products->where(function ($query) use ($request) {
                $sku = $request->get('sku');
                $query->where('sku', $sku)
                    ->orWhere('name', 'LIKE', "%$sku%")
                    ->orWhere('short_description', 'LIKE', "%$sku%");
            });
        }

        foreach (Category::all() as $category) {
            if ($category->parent_id != 0) {
                $parent = $category->parent;
                if ($parent->parent_id != 0) {
                    $category_tree[$parent->parent_id][$parent->id][$category->id];
                } else {
                    $category_tree[$parent->id][$category->id] = $category->id;
                }
            }

            $categories_array[$category->id] = $category->parent_id;
        }

        if ($request->get('brand') > 0) {
            $brand    = $request->get('brand');
            $products = $products->where('brand', $brand);
        }

        $selected_categories = $request->get('category') ?: [1];
        if ($request->get('category')[0] != null && $request->get('category')[0] != 1) {
            $category_children = [];

            foreach ($request->get('category') as $category) {
                $is_parent = Category::isParent($category);

                if ($is_parent) {
                    $childs = Category::find($category)->childs()->get();

                    foreach ($childs as $child) {
                        $is_parent = Category::isParent($child->id);

                        if ($is_parent) {
                            $children = Category::find($child->id)->childs()->get();

                            foreach ($children as $chili) {
                                array_push($category_children, $chili->id);
                            }
                        } else {
                            array_push($category_children, $child->id);
                        }
                    }
                } else {
                    array_push($category_children, $category);
                }
            }

            $products = $products->whereIn('category', $category_children);
        }

        if ($request->color[0] != null) {
            $products = $products->whereIn('color', $request->color);
            $color    = $request->color;
        }

        if ($request->get('price')[0] !== null) {
            $price    = $request->get('price');
            $price    = explode(',', $price);
            $products = $products->whereBetween('price_inr_special', [$price[0], $price[1]]);
        }

        $category_array = Category::renderAsArray();

        $products = $products->paginate(20);

        $c = $color;

        return view('products.affiliate', compact('products', 'request', 'brands', 'categories_array', 'category_array', 'selected_categories', 'brand', 'colors', 'c', 'price'));
    }

    public function showRejectedListedProducts(Request $request)
    {
        $products            = new Product;
        $products            = $products->where('stock', '>=', 1);
        $reason              = '';
        $supplier            = [];
        $selected_categories = [];

        if ($request->get('reason') !== '') {
            $reason   = $request->get('reason');
            $products = $products->where('listing_remark', 'LIKE', "%$reason%");
        }

        if ($request->get('date') !== '') {
            $date     = $request->get('date');
            $products = $products->where('listing_rejected_on', 'LIKE', "%$date%");
        }

        if ($request->get('id') !== '') {
            $id       = $request->get('id');
            $products = $products->where('id', $id)->orWhere('sku', 'LIKE', "%$id%");
        }

        if ($request->get('user_id') > 0) {
            $products = $products->where('listing_rejected_by', $request->get('user_id'));
        }

        if ($request->get('type') === 'accepted') {
            $products = $products->where('is_listing_rejected', 0)->where('listing_remark', '!=', '');
        } else {
            $products = $products->where('is_listing_rejected', 1);
        }

        $suppliers = DB::select('
                SELECT id, supplier
                FROM suppliers

                INNER JOIN (
                    SELECT supplier_id FROM product_suppliers GROUP BY supplier_id
                    ) as product_suppliers
                ON suppliers.id = product_suppliers.supplier_id
        ');

        if ($request->supplier[0] != null) {
            $supplier = $request->get('supplier');
            $products = $products->whereIn('id', DB::table('product_suppliers')->whereIn('supplier_id', $supplier)->pluck('product_id'));
        }

        if ($request->category[0] != null && $request->category[0] != 1) {
            $category_children = [];
            foreach ($request->category as $category) {
                $is_parent = Category::isParent($category);

                if ($is_parent) {
                    $childs = Category::find($category)->childs()->get();

                    foreach ($childs as $child) {
                        $is_parent = Category::isParent($child->id);

                        if ($is_parent) {
                            $children = Category::find($child->id)->childs()->get();

                            foreach ($children as $chili) {
                                array_push($category_children, $chili->id);
                            }
                        } else {
                            array_push($category_children, $child->id);
                        }
                    }
                } else {
                    array_push($category_children, $category);
                }
            }
            $products            = $products->whereIn('category', $category_children);
            $selected_categories = [$request->get('category')[0]];
        }
        $users = User::all();

        $category_array = Category::renderAsArray();

        $products = $products->with('log_scraper_vs_ai')->where('stock', '>=', 1)->where('is_listing_rejected', 1)->orderBy('listing_rejected_on', 'DESC')->orderBy('updated_at', 'DESC')->paginate(25);

        $rejectedListingSummary = DB::table('products')->where('stock', '>=', 1)->selectRaw('DISTINCT(listing_remark) as remark, COUNT(listing_remark) as issue_count')->where('is_listing_rejected', 1)->groupBy('listing_remark')->orderBy('issue_count', 'DESC')->get();

        return view('products.rejected_listings', compact('products', 'reason', 'category_array', 'selected_categories', 'suppliers', 'supplier', 'request', 'users', 'rejectedListingSummary'));
    }

    public function updateProductListingStats(Request $request)
    {
        $product = Product::find($request->get('product_id'));
        if ($product) {
            $product->is_corrected        = $request->get('is_corrected');
            $product->is_script_corrected = $request->get('is_script_corrected');
            $product->save();
        }

        return response()->json([
            'status' => 'success',
        ]);
    }

    public function deleteOutOfStockProducts()
    {
        $product = Product::where('stock', 0)->delete();

        return redirect()->back()->with('success', 'Productsssss deleted successfully');
    }

    public function deleteProduct(Request $request)
    {
        if ($request->has('product_id')) {
            $product = Product::find($request->get('product_id'));

            if ($product) {
                $product->forceDelete();
            }
        } else {
            $ids             = $request->ids;
            $delete_products = Product::whereIn('id', explode(',', $ids))->get();
            foreach ($delete_products as $delete_product) {
                $delete_product->deleted_at = date('Y-m-d H:i:s');
                $delete_product->save();
            }
        }

        return response()->json([
            'status'  => 'Products Deleted successfully',
            'success' => 'Products Deleted successfully',
        ]);
    }

    public function relistProduct(Request $request)
    {
        $product = Product::find($request->get('product_id'));

        if ($product) {
            $product->is_listing_rejected = $request->get('rejected');
            $product->save();
        }

        return response()->json([
            'status' => 'success',
        ]);
    }

    public function productMultiDescription(Request $request)
    {
        $products = \App\ScrapedProducts::selectRaw('scraped_products.sku, COUNT(*) as count, scraped_products.product_id')
            ->where('scraped_products.sku', '!=', '')
            ->groupBy('scraped_products.sku')
            ->orderByDesc('count')
            ->paginate(25);

        return view('products.multidescription', compact('products'));
    }

    public function productMultiDescriptionCheck(Request $request)
    {
        $sku          = $request->input('sku');
        $productCount = Product::where('sku', $sku)->count();

        return response()->json(['result' => $productCount]);
    }

    public function productMultiDescriptionSku(Request $request)
    {
        $sku      = $request->id;
        $products = \App\ScrapedProducts::selectRaw('scraped_products.id as sid, scraped_products.sort_order as sort_order, scraped_products.description, scraped_products.brand_id, scraped_products.website as website, products.name as pname, brands.name as bname')
            ->join('products', 'scraped_products.product_id', '=', 'products.id')
            ->join('brands', 'scraped_products.brand_id', '=', 'brands.id')
            ->where('scraped_products.sku', $sku)
            ->get();

        return view('products.skumultidescription', compact('products', 'sku'));
    }

    public function productMultiDescriptionUpdate(Request $request)
    {
        $updates   = $request->productData;
        $sku       = $request->sku;
        $condition = $request->condition;
        foreach ($updates as $update) {
            $productId = $update['id'];
            $sortOrder = $update['value'];
            \App\ScrapedProducts::where('id', $productId)->where('sku', $sku)->update(['sort_order' => $sortOrder]);
            if ($condition == 1 && $sortOrder == 1) {
                $getdescription = \App\ScrapedProducts::where('id', $productId)->where('sku', $sku)->first();
                Product::where('sku', $sku)->update(['short_description' => $getdescription->description]);
            }
        }

        return response()->json(['message' => 'Sort orders updated successfully']);
    }

    public function productSizeLog(Request $request)
    {
        $query = ProductSupplier::with('supplier', 'product')
            ->where(function ($query) {
                $query->whereNotNull('size')->orWhere('size', '!=', '');
            });

        if ($request->has('product_id') && $request->filled('product_id')) {
            $query->where('product_id', $request->input('product_id'));
        }

        if ($request->supplier) {
            $query->whereIn('product_suppliers.supplier_id', $request->supplier); // Specify the table for the column 'supplier_id'
        }

        if ($request->has('sku') && $request->filled('sku')) {
            $query->whereHas('product', function ($query) use ($request) {
                $query->where('sku', $request->input('sku'));
            });
        }

        // // Add the groupBy clause here
        $supplier       = Supplier::select('id', 'supplier')->get();
        $products_count = $query->count();
        $products       = $query->paginate(50);

        return view('products.size', compact('products', 'products_count', 'request', 'supplier'));
    }

    public function productDescriptionHistory(Request $request)
    {
        $id = $request->id;

        $query = LogScraper::where('sku', $id)
            ->leftJoin('brands as b', 'b.id', 'log_scraper.brand')
            ->leftJoin('categories as c', 'c.id', 'log_scraper.category')
            ->select([
                'log_scraper.*',
                'b.name as brand_name',
                'c.title as category_name']);
        $products = $query->orderBy('updated_at', 'DESC')->get();

        return view('products.partials.history', compact('products'));
    }

    public function productDescription(Request $request)
    {
        $query = ProductSupplier::with('supplier', 'product')
            ->select(['product_suppliers.*', 'scrapers.id as scraper_id', 'scrapers.last_started_at as last_started_at'])
            ->join('scrapers', 'scrapers.supplier_id', 'product_suppliers.supplier_id');
        if ($request->get('product_id') != '') {
            $products = $query->where('product_id', $request->get('product_id'));
        }
        if ($request->get('sku') != '') {
            $products = $query->whereHas('product', function ($query) use ($request) {
                $query->where('sku', $request->get('sku'));
            });
        }

        $supplier = Supplier::select('id', 'supplier')->get();

        if ($request->supplier) {
            $query->whereIn('product_suppliers.supplier_id', $request->supplier); // Specify the table for the column 'supplier_id'
        }
        if ($request->colors) {
            $query->whereIn('product_suppliers.color', $request->colors); // Specify the table for the column 'supplier_id'
        }
        if ($request->sizeSystem) {
            $query->whereIn('product_suppliers.size_system', $request->sizeSystem); // Specify the table for the column 'supplier_id'
        }
        if ($request->product_title) {
            $products = $query->where('title', 'LIKE', '%' . $request->product_title . '%');
        }
        if ($request->product_description) {
            $products = $query->where('description', 'LIKE', '%' . $request->product_description . '%');
        }
        if ($request->product_color) {
            $products = $query->where('color', 'LIKE', '%' . $request->product_color . '%');
        }
        if ($request->product_size) {
            $products = $query->where('size', 'LIKE', '%' . $request->product_size . '%');
        }
        if ($request->product_composition) {
            $products = $query->where('composition', 'LIKE', '%' . $request->product_composition . '%');
        }
        if ($request->product_size_system) {
            $products = $query->where('size_system', 'LIKE', '%' . $request->product_size_system . '%');
        }
        if ($request->product_price) {
            $products = $query->where('price', 'LIKE', '%' . $request->product_price . '%');
        }
        if ($request->product_discount) {
            $products = $query->where('price_discounted', 'LIKE', '%' . $request->product_discount . '%');
        }

        $products_count = $query->count();
        $products       = $query->orderBy('product_id', 'DESC')->paginate(50);

        return view('products.description', compact('products', 'products_count', 'request', 'supplier'));
    }

    public function productDescriptionUpdate(Request $request)
    {
        $ids  = $request->ids;
        $from = $request->from;
        $to   = $request->to;
        DescriptionChange::create([
            'keyword'      => $from,
            'replace_with' => $to,
        ]);
        foreach ($ids as $id) {
            $prod              = ProductSupplier::where('product_id', $id)->first();
            $description       = str_replace($from, $to, $prod->description);
            $prod->description = $description;
            $prod->save();
        }

        return response()->json([
            'code'    => 200,
            'message' => 'Your request has been update successfully',
        ]);
    }

    public function productScrapLog(Request $request)
    {
        $products = Product::orderBy('updated_at', 'DESC');

        if ($request->get('product_id') != '') {
            $products = $products->where('id', $request->get('product_id'));
        }
        if ($request->get('sku') != '') {
            $products = $products->where('sku', $request->get('sku'));
        }
        if ($request->get('select_date') != '') {
            $date = $request->get('select_date');
        } else {
            $date = date('Y-m-d');
        }
        $statusarray = [];
        if ($request->get('status') != '') {
            $statusarray = [$request->get('status')];
        } else {
            $statusarray = [2, 4, 9, 15, 20, 33, 35, 36, 38, 39, 40];
        }

        $products_count = $products->count();

        $products = $products->paginate(50);

        $products->getCollection()->transform(function ($getproduct) {
            $getproduct->total_count = $getproduct->productstatushistory->count();
            $history_log             = [];
            $productstatushistory    = $getproduct->productstatushistory->toArray();
            foreach ($productstatushistory as $key => $history) {
                $history['created_at']               = Carbon::parse($history['created_at'])->format('H:i');
                $history_log[$history['new_status']] = $history;
            }
            $getproduct->alllog_status = $history_log;

            return $getproduct;
        });

        $status = \App\Helpers\StatusHelper::getStatus();

        $datatableModel = DataTableColumn::select('column_name')->where('user_id', auth()->user()->id)->where('section_name', 'products-status-history')->first();

        $dynamicColumnsToShowp = [];
        if (! empty($datatableModel->column_name)) {
            $hideColumns           = $datatableModel->column_name ?? '';
            $dynamicColumnsToShowp = json_decode($hideColumns, true);
        }

        return view('products.statuslog', compact('products', 'request', 'status', 'products_count', 'request', 'dynamicColumnsToShowp'));
    }

    public function columnVisbilityUpdate(Request $request)
    {
        $userCheck = DataTableColumn::where('user_id', auth()->user()->id)->where('section_name', 'products-status-history')->first();

        if ($userCheck) {
            $column               = DataTableColumn::find($userCheck->id);
            $column->section_name = 'products-status-history';
            $column->column_name  = json_encode($request->column_p);
            $column->save();
        } else {
            $column               = new DataTableColumn();
            $column->section_name = 'products-status-history';
            $column->column_name  = json_encode($request->column_p);
            $column->user_id      = auth()->user()->id;
            $column->save();
        }

        return redirect()->back()->with('success', 'column visiblity Added Successfully!');
    }

    public function productStats(Request $request)
    {
        $products = Product::orderBy('updated_at', 'DESC');

        if ($request->get('status') != '') {
            $status   = $request->get('status') == 'approved' ? 1 : 0;
            $products = $products->where('is_approved', $status);
        }
        if ($request->has('user_id') >= 1) {
            $products = $products->where(function ($query) use ($request) {
                $query->where('approved_by', $request->get('user_id'))
                    ->orWhere('crop_approved_by', $request->get('user_id'))
                    ->orWhere('listing_rejected_by', $request->get('user_id'))
                    ->orWhere('crop_rejected_by', $request->get('user_id'))
                    ->orWhere('crop_ordered_by', $request->get('user_id'));
            });
        }
        $sku = '';

        if ($request->get('sku') != '') {
            $sku      = $request->get('sku');
            $products = $products->where('sku', 'LIKE', "%$sku%");
        }

        if ($request->get('range_start') != '') {
            $products = $products->where(function ($query) use ($request) {
                $query->where('crop_approved_at', '>=', $request->get('range_start'))
                    ->orWhere('listing_approved_at', '>=', $request->get('range_start'))
                    ->orWhere('listing_rejected_on', '>=', $request->get('range_start'))
                    ->orWhere('crop_ordered_at', '>=', $request->get('range_start'))
                    ->orWhere('crop_rejected_at', '>=', $request->get('range_start'));
            });
        }
        if ($request->get('range_end') != '') {
            $products = $products->where(function ($query) use ($request) {
                $query->where('crop_approved_at', '<=', $request->get('range_end'))
                    ->orWhere('listing_approved_at', '<=', $request->get('range_end'))
                    ->orWhere('listing_rejected_on', '<=', $request->get('range_end'))
                    ->orWhere('crop_ordered_at', '<=', $request->get('range_end'))
                    ->orWhere('crop_rejected_at', '<=', $request->get('range_end'));
            });
        }

        $products = $products->paginate(50);
        $users    = User::all();

        return view('products.stats', compact('products', 'sku', 'users', 'request'));
    }

    public function showSOP(Request $request)
    {
        $sopType = $request->get('type');
        $sop     = Sop::where('name', $sopType)->first();

        if (! $sop) {
            $sop          = new Sop();
            $sop->name    = $request->name;
            $sop->content = $request->content;

            $sop->save();
        }

        return view('products.sop', compact('sop'));
    }

    public function getSupplierScrappingInfo(Request $request)
    {
        return View('scrap.supplier-info');
    }

    public function deleteImage()
    {
        $productId = request('product_id', 0);
        $mediaId   = request('media_id', 0);
        $mediaType = request('media_type', 'gallery');

        $cond = Db::table('mediables')->where([
            'media_id'    => $mediaId,
            'mediable_id' => $productId,
            //"tag" => $mediaType,
            'mediable_type' => \App\Product::class,
        ])->delete();

        if ($cond) {
            return response()->json(['code' => 1, 'data' => []]);
        }

        return response()->json(['code' => 0, 'data' => [], 'message' => 'No media found']);
    }

    public function sendMessageSelectedCustomer(Request $request)
    {
        $params            = request()->all();
        $params['user_id'] = \Auth::id();
        $params['status']  = \App\ChatMessage::CHAT_AUTO_BROADCAST;

        $token = request('customer_token', '');

        if (! empty($token)) {
            $customerIds = json_decode(session($token));
            if (empty($customerIds)) {
                $customerIds = [];
            }
        }
        // if customer is not available then choose what it is before
        if (empty($customerIds)) {
            $customerIds = $request->get('customers_id', '');
            $customerIds = explode(',', $customerIds);
        }

        $params['customer_ids'] = $customerIds;

        $groupId            = \DB::table('chat_messages')->max('group_id');
        $params['group_id'] = ($groupId > 0) ? $groupId + 1 : 1;
        $params['is_queue'] = request('is_queue', 0);

        \App\Jobs\SendMessageToCustomer::dispatch($params)->onQueue('customer_message');

        if ($request->ajax()) {
            return response()->json(['msg' => 'success']);
        } else {
            return response()->json(['msg' => 'error']);
        }

        if ($request->get('return_url')) {
            return redirect('/' . $request->get('return_url'));
        }

        return redirect('/erp-leads');
    }

    public function assignGroupSelectedCustomer(Request $request)
    {
        $customerIDs = explode(',', $request->get('customers_id'));
        if (! empty($customerIDs)) {
            foreach ($customerIDs as $cid) {
                $customerExist = MessagingGroupCustomer::where(['message_group_id' => $request->sms_group_id, 'customer_id' => $cid])->first();
                if ($customerExist == null) {
                    MessagingGroupCustomer::create(['message_group_id' => $request->sms_group_id, 'customer_id' => $cid]);
                }
            }
        }

        return response()->json(['msg' => 'success']);
    }

    public function createGroupSelectedCustomer(Request $request)
    {
        $params            = request()->all();
        $params['user_id'] = \Auth::id();

        $token = request('customer_token', '');

        if (! empty($token)) {
            $customerIds = json_decode(session($token));
            if (empty($customerIds)) {
                $customerIds = [];
            }
        }
        // if customer is not available then choose what it is before
        if (empty($customerIds)) {
            $customerIds = $request->get('customers_id', '');
            $customerIds = explode(',', $customerIds);
        }

        $params['customer_ids'] = $customerIds;

        $data = \App\MessagingGroup::create([
            'name'             => $request->name,
            'store_website_id' => $request->store_website_id,
            'service_id'       => $request->service_id,
        ]);

        $customers = \App\Customer::whereIn('id', $params['customer_ids'])->update(['store_website_id' => $params['store_website_id']]);

        if ($customers) {
            return response()->json(['msg' => 'success']);
        } else {
            return response()->json(['msg' => 'error']);
        }

        if ($request->get('return_url')) {
            return redirect('/' . $request->get('return_url'));
        }

        return redirect('/erp-leads');
    }

    /**
     * This function is use for create suggested product log
     *
     * @param type [array] inputArray
     * @param Request $request  Request
     * @param mixed   $log
     * @param mixed   $type
     * @param mixed   $parentId
     *
     * @return void;
     */
    public function createSuggestedProductLog($log = '', $type = '', $parentId = '')
    {
        try {
            $prod = ProductSuggestedLog::create([
                'parent_id' => $parentId,
                'log'       => $log,
                'type'      => $type,
            ]);
        } catch (Exception $e) {
            $prod = ProductSuggestedLog::create(['parent_id' => $parentId, 'log' => $e->getMessage(), 'type' => 'not catch']);
        }
    }

    public function queueCustomerAttachImages(Request $request)
    {
        $prodSugId = isset($request->hidden_suggestedproductid) ? $request->hidden_suggestedproductid : '';
        try {
            // This condition is use for send now no whatsapp
            if ($request->is_queue == 2) {
                return $this->sendNowCustomerAttachImages($request);
            } else {
                $data['_token']          = $request->_token;
                $data['send_pdf']        = $request->send_pdf;
                $data['pdf_file_name']   = ! empty($request->pdf_file_name) ? $request->pdf_file_name : '';
                $data['images']          = $request->images;
                $data['image']           = $request->image;
                $data['screenshot_path'] = $request->screenshot_path;
                $data['message']         = $request->message;
                $data['customer_id']     = $request->customer_id;
                $data['status']          = $request->status;
                $data['type']            = $request->type;
                \App\Jobs\AttachImagesSend::dispatch($data)->onQueue('customer_message');

                $json = request()->get('json', false);

                if ($json) {
                    $this->createSuggestedProductLog('Message Send later Queue', 'Send later Queue', $prodSugId);

                    return response()->json(['code' => 200, 'message' => 'Message Send later Queue']);
                }
                if ($request->get('return_url')) {
                    return redirect($request->get('return_url'));
                }

                return redirect()->route('get.customer.post.show', $prodSugId)->withSuccess('Message Send For Queue');
            }
        } catch (Exception $e) {
            $prod = ProductSuggestedLog::create(['parent_id' => $prodSugId, 'log' => $e->getMessage(), 'type' => 'not catch']);
        }
    }

    /**
     * This function is use for send now image on whatsapp
     *
     * @return type JsonResponse
     */
    public function sendNowCustomerAttachImages(Request $request)
    {
        $prodSugId = isset($request->hidden_suggestedproductid) ? $request->hidden_suggestedproductid : '';
        try {
            $requestData = new Request();
            $requestData->setMethod('POST');
            $requestData->request->add([
                '_token'          => $request->_token,
                'send_pdf'        => $request->send_pdf,
                'pdf_file_name'   => $request->pdf_file_name,
                'images'          => $request->images,
                'image'           => $request->image,
                'screenshot_path' => $request->screenshot_path,
                'message'         => $request->message,
                'customer_id'     => $request->customer_id,
                'status'          => $request->status,
                'type'            => $request->type,
            ]);
            app(\App\Http\Controllers\WhatsAppController::class)->sendMessage($requestData, 'customer');

            $json = request()->get('json', false);
            if ($json) {
                $this->createSuggestedProductLog('Message Send Now on whatsapp', 'Send Now', $prodSugId);

                return response()->json(['code' => 200, 'message' => 'Message Send Now on whatsapp']);
            }
            if ($request->get('return_url')) {
                return redirect($request->get('return_url'));
            }

            return redirect()->route('customer.post.show', $prodSugId)->withSuccess('Message Send Now on whatsapp');
        } catch (Exception $e) {
            $prod = ProductSuggestedLog::create(['parent_id' => $prodSugId, 'log' => $e->getMessage(), 'type' => 'not catch']);
        }
    }

    public function cropImage(Request $request)
    {
        $id               = $request->id;
        $img              = $request->img;
        $style            = $request->style;
        $style            = explode(' ', $style);
        $name             = str_replace(['scale(', ')'], '', $style[4]);
        $newHeight        = (($name * 3.333333) * 1000);
        [$width, $height] = getimagesize($img);
        $thumb            = imagecreatetruecolor($newHeight, $newHeight);
        try {
            $source = imagecreatefromjpeg($img);
        } catch (Exception $e) {
            $source = imagecreatefrompng($img);
        }

        // Resize
        imagecopyresized($thumb, $source, 0, 0, 0, 0, $newHeight, $newHeight, $width, $height);

        $thumbWidth  = imagesx($thumb);
        $thumbHeight = imagesy($thumb);

        $canvasImage = imagecreatetruecolor(1000, 1000); // Creates a black image

        // Fill it with white (optional)
        $gray = imagecolorallocate($canvasImage, 227, 227, 227);
        imagefill($canvasImage, 0, 0, $gray);

        imagecopy($canvasImage, $thumb, (1000 - $thumbWidth) / 2, (1000 - $thumbHeight) / 2, 0, 0, $thumbWidth, $thumbHeight);
        $url  = config('env.APP_URL');
        $path = str_replace($url, '', $img);

        imagejpeg($canvasImage, public_path() . '/' . $path);
        $product = Product::find($id);

        return response()->json(['success' => 'success', 200]);
    }

    public function hsCodeIndex(Request $request)
    {
        if ($request->category || $request->keyword) {
            $products = Product::select('composition', 'category')->where('composition', 'LIKE', '%' . request('keyword') . '%')->where('category', $request->category[0])->groupBy('composition')->get();

            foreach ($products as $product) {
                if ($product->category != null) {
                    $categoryTree = CategoryController::getCategoryTree($product->category);
                    if (is_array($categoryTree)) {
                        $childCategory = implode(' > ', $categoryTree);
                    }

                    $cat            = Category::findOrFail($request->category[0]);
                    $parentCategory = $cat->title;

                    if ($product->composition != null) {
                        if ($request->group == 'on') {
                            $composition    = strip_tags($product->composition);
                            $compositions[] = str_replace(['&nbsp;', '/span>'], ' ', $composition);
                        } else {
                            if ($product->isGroupExist($product->category, $product->composition, $parentCategory, $childCategory)) {
                                $composition    = strip_tags($product->composition);
                                $compositions[] = str_replace(['&nbsp;', '/span>'], ' ', $composition);
                            }
                        }
                    }
                }
            }
            if (! isset($compositions)) {
                $compositions   = [];
                $childCategory  = '';
                $parentCategory = '';
            }
            $keyword       = $request->keyword;
            $groupSelected = $request->group;
        } else {
            $keyword        = '';
            $compositions   = [];
            $childCategory  = '';
            $parentCategory = '';
            $groupSelected  = '';
        }
        $selected_categories = $request->category ? $request->category : 1;

        $category_selection = Category::attr(['name' => 'category[]', 'class' => 'form-control select-multiple2', 'id' => 'category_value'])
            ->selected($selected_categories)
            ->renderAsDropdown();
        $hscodes              = SimplyDutyCategory::all();
        $categories           = Category::all();
        $groups               = HsCodeGroup::all();
        $cate                 = HsCodeGroupsCategoriesComposition::groupBy('category_id')->pluck('category_id')->toArray();
        $pendingCategory      = Category::all()->except($cate);
        $pendingCategoryCount = $pendingCategory->count();
        $setting              = HsCodeSetting::first();
        $countries            = SimplyDutyCountry::all();

        return view('products.hscode', compact('keyword', 'compositions', 'childCategory', 'parentCategory', 'category_selection', 'hscodes', 'categories', 'groups', 'groupSelected', 'pendingCategoryCount', 'setting', 'countries'));
    }

    public function saveGroupHsCode(Request $request)
    {
        $name         = $request->name;
        $compositions = $request->compositions;
        $key          = HsCodeSetting::first();
        if ($key == null) {
            return response()->json(['Please Update the Hscode Setting']);
        }
        $api                = $key->key;
        $fromCountry        = $key->from_country;
        $destinationCountry = $key->destination_country;
        if ($api == null || $fromCountry == null || $destinationCountry == null) {
            return response()->json(['Please Update the Hscode Setting']);
        }
        $category   = Category::select('id', 'title')->where('id', $request->category)->first();
        $categoryId = $category->id;

        if ($request->composition) {
            $hscodeSearchString = str_replace(['&gt;', '>'], '', $name . ' ' . $category->title . ' ' . $request->composition);
        } else {
            $hscodeSearchString = str_replace(['&gt;', '>'], '', $name);
        }

        $hscode = HsCode::where('description', $hscodeSearchString)->first();

        if ($hscode != null) {
            return response()->json(['error' => 'HsCode Already exist']);
        }

        $hscodeSearchString = urlencode($hscodeSearchString);

        $searchString = 'https://www.api.simplyduty.com/api/classification/get-hscode?APIKey=' . $api . '&fullDescription=' . $hscodeSearchString . '&originCountry=' . $fromCountry . '&destinationCountry=' . $destinationCountry . '&getduty=false';
        $startTime    = date('Y-m-d H:i:s', LARAVEL_START);
        $ch           = curl_init();

        // set url
        curl_setopt($ch, CURLOPT_URL, $searchString);

        //return the transfer as a string
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);

        // $output contains the output string
        $output   = curl_exec($ch);
        $httpcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        LogRequest::log($startTime, $searchString, 'POST', json_encode([]), json_decode($output), $httpcode, \App\Http\Controllers\ProductController::class, 'saveGroupHsCode');

        // close curl resource to free up system resources
        curl_close($ch);

        $categories = json_decode($output);

        if (! isset($categories->HSCode)) {
            return response()->json(['error' => 'Something is wrong with the API. Please check the balance.']);
        } else {
            if ($categories->HSCode != null) {
                $hscode              = new HsCode();
                $hscode->code        = $categories->HSCode;
                $hscode->description = urldecode($hscodeSearchString);
                $hscode->save();

                if ($request->existing_group != null) {
                    $group = HsCodeGroup::find($request->existing_group);
                } else {
                    $group              = new HsCodeGroup();
                    $group->hs_code_id  = $hscode->id;
                    $group->name        = $name . ' > ' . $category->title;
                    $group->composition = $request->composition;
                    $group->save();
                }

                $id = $group->id;
                if ($request->compositions) {
                    foreach ($compositions as $composition) {
                        $comp                   = new HsCodeGroupsCategoriesComposition();
                        $comp->hs_code_group_id = $id;
                        $comp->category_id      = $categoryId;
                        $comp->composition      = $composition;
                        $comp->save();
                    }
                }
            }
        }

        return response()->json(['Hscode Generated successfully'], 200);
    }

    public function editGroup(Request $request)
    {
        $group              = HsCodeGroup::find($request->id);
        $group->hs_code_id  = $request->hscode;
        $group->name        = $request->name;
        $group->composition = $request->composition;
        $group->save();

        return response()->json(['success' => 'success'], 200);
    }

    public function productTranslation(Request $request)
    {
        $term        = $request->term;
        $language    = $request->language;
        $is_rejected = $request->input('is_rejected', '0');
        $query       = new Product_translation();
        if (! empty($term)) {
            $query = $query->where(function ($q) use ($request) {
                $q->where('title', 'LIKE', '%' . $request->term . '%')
                    ->orWhere('description', 'LIKE', '%' . $request->term . '%');
            });
        }
        if (! empty($language)) {
            $query = $query->where(function ($q) use ($request) {
                $q->Where('locale', 'LIKE', '%' . $request->language . '%');
            });
        }

        if ($request->has('is_rejected')) {
            $query = $query->where(function ($q) use ($is_rejected) {
                $q->Where('is_rejected', $is_rejected);
            });
        }

        $product_translations = $query->orderBy('product_id', 'desc')->paginate(10)->appends(request()->except(['page'])); //catch 2

        $product_translation_history = ProductTranslationHistory::get();

        $languages = TranslationLanguage::get();

        $all_languages = Language::get();

        if ($request->ajax()) {
            return response()->json([
                'tbody' => view('products.translations.product-search', compact('product_translations', 'term', 'language', 'is_rejected'))->with('i', ($request->input('page', 1) - 1) * 5)->render(),
                'links' => (string) $product_translations->render(),
            ], 200);
        }

        return view('products.translations.product-list', compact('product_translations', 'term', 'language', 'languages', 'all_languages', 'product_translation_history'))
            ->with('i', ($request->input('page', 1) - 1) * 5);
    }

    public function translationLanguage(ProductTranslationRequest $request)
    {
        $this->validate($request, [
            'locale' => 'sometimes|nullable|string|max:255',
            'code'   => 'required',
        ]);

        $data = $request->except('_token');
        Language::create($data);

        return response()->json([
            'message' => 'Successfully updated the data',
        ]);
    }

    public function productTranslationRejection(Request $request)
    {
        $product_translation              = Product_translation::find($request->product_translation_id);
        $product_translation->is_rejected = $request->value;
        $product_translation->save();
        $product_translation_history                         = new ProductTranslationHistory;
        $product_translation_history->is_rejected            = $request->value;
        $product_translation_history->user_id                = Auth::user()->id;
        $product_translation_history->product_translation_id = $request->product_translation_id;
        $product_translation_history->save();

        return response()->json([
            'message' => 'Rejected Successfully',
            'value'   => $request->value,
        ]);
    }

    public function viewProductTranslation($id)
    {
        $locales             = Product_translation::groupBy('locale')->pluck('locale');
        $languages           = Language::get();
        $sites               = StoreWebsite::get();
        $product_translation = Product_translation::find($id);

        return view('products.translations.view-or-edit', [
            'product_translation' => $product_translation,
            'locales'             => $locales,
            'sites'               => $sites,
            'languages'           => $languages,
        ]);
    }

    public function getProductTranslationDetails($id, $locale)
    {
        $product_translation = Product_translation::where('product_id', $id)->where('locale', $locale)->first();

        return response()->json([
            'product_translation' => $product_translation,
        ]);
    }

    public function editProductTranslation($id, Request $request)
    {
        Product_translation::where('id', $id)->update(['locale' => $request->language, 'title' => $request->title, 'description' => $request->description, 'site_id' => $request->site_id]);
        ProductTranslationHistory::insert([
            'user_id'                => Auth::user()->id,
            'product_translation_id' => $id,
            'locale'                 => $request->language,
            'title'                  => $request->title,
            'description'            => $request->description,
        ]);

        return response()->json([
            'message' => 'Successfully updated the data',
        ]);
    }

    public function published(Request $request)
    {
        $id      = $request->get('id');
        $website = $request->get('website', []);

        \App\WebsiteProduct::where('product_id', $id)->delete();

        if (! empty($website)) {
            foreach ($website as $web) {
                $website                   = new \App\WebsiteProduct;
                $website->product_id       = $id;
                $website->store_website_id = $web;
                $website->save();
            }
        }

        return response()->json(['code' => 200]);
    }

    public function originalColor($id)
    {
        $product         = Product::find($id);
        $referencesColor = '';
        if (isset($product->scraped_products)) {
            // starting to see that howmany color we going to update
            if (isset($product->scraped_products->properties) && isset($product->scraped_products->properties['colors']) != null) {
                $color = $product->scraped_products->properties['colors'];
                if (is_array($color)) {
                    $referencesColor = implode(' > ', $color);
                } else {
                    $referencesColor = $color;
                }
            }

            // starting to see that howmany color we going to update
            if (isset($product->scraped_products->properties) && isset($product->scraped_products->properties['color']) != null) {
                $color = $product->scraped_products->properties['color'];
                if (is_array($color)) {
                    $referencesColor = implode(' > ', $color);
                } else {
                    $referencesColor = $color;
                }
            }

            $scrapedProductSkuArray = [];

            if (! empty($referencesColor)) {
                $productSupplier = $product->supplier;
                $supplier        = Supplier::where('supplier', $productSupplier)->first();
                if ($supplier && $supplier->scraper) {
                    $scrapedProducts = ScrapedProducts::where('website', $supplier->scraper->scraper_name)->get();
                    foreach ($scrapedProducts as $scrapedProduct) {
                        if (isset($scrapedProduct->properties['color'])) {
                            $products = $scrapedProduct->properties['color'];
                            if (! empty($products)) {
                                $scrapedProductSkuArray[] = $scrapedProduct->sku;
                            }
                        }

                        if (isset($scrapedProduct->properties['colors'])) {
                            $products = $scrapedProduct->properties['colors'];
                            if (! empty($products)) {
                                $scrapedProductSkuArray[] = $scrapedProduct->sku;
                            }
                        }
                    }
                }
            }

            if (isset($product->scraped_products->properties) && isset($product->scraped_products->properties['colors']) != null) {
                return response()->json(['success', $referencesColor, count($scrapedProductSkuArray)]);
            } else {
                return response()->json(['message', 'Color Is Not Present']);
            }
        } else {
            return response()->json(['message', 'Color Is Not Present']);
        }
    }

    public function changeAllColorForAllSupplierProducts(Request $request, $id)
    {
        \App\Jobs\UpdateScrapedColor::dispatch([
            'product_id' => $id,
            'color'      => $request->color,
            'user_id'    => \Auth::user()->id,
        ])->onQueue('supplier_products');

        return response()->json(['success', 'Product color has been sent for the update']);
    }

    public function storeWebsiteDescription(Request $request)
    {
        $websites = $request->store_wesites;
        if (is_array($websites) && $request->product_id != null && $request->description != null) {
            foreach ($websites as $website) {
                $storeWebsitePA = \App\StoreWebsiteProductAttribute::where('product_id', $request->product_id)->where('store_website_id', $website)->first();
                if (! $storeWebsitePA) {
                    $storeWebsitePA                   = new \App\StoreWebsiteProductAttribute;
                    $storeWebsitePA->product_id       = $request->product_id;
                    $storeWebsitePA->store_website_id = $website;
                }
                $storeWebsitePA->store_website_id = $website;
                $storeWebsitePA->description      = $request->description;
                $storeWebsitePA->save();

                return response()->json(['code' => 200, 'data' => [], 'message' => 'Store website description stored successfully']);
            }
        }

        return response()->json(['code' => 500, 'data' => [], 'message' => 'Required field is missing']);
    }

    public function changeAutoPushValue(Request $request)
    {
        if (Setting::get('auto_push_product') == 0) {
            $val = 1;
        } else {
            $val = 0;
        }
        $settings = Setting::set('auto_push_product', $val, 'int');

        return response()->json(['code' => 200, 'data' => $settings, 'message' => 'Status changed']);
    }

    public function pushProduct(Request $request)
    {
        $limit = $request->get('no_of_product', config('constants.no_of_product'));
        // Mode($mode) defines the whether it's a condition check or product push.
        $mode     = $request->get('mode', config('constants.mode'));
        $products = ProductHelper::getProducts(StatusHelper::$finalApproval, $limit);
        \Log::info('Product push star time: ' . date('Y-m-d H:i:s'));
        $no_of_product = count($products);
        foreach ($products as $key => $product) {
            $details                  = [];
            $details['product_index'] = ($key) + 1;
            $details['no_of_product'] = $no_of_product;

            PushProductOnlyJob::dispatch($product, $details)->onQueue('pushproductonly');
        }
        \Log::info('Product push end time: ' . date('Y-m-d H:i:s'));

        if ($mode == 'conditions-check') {
            return response()->json(['code' => 200, 'message' => 'Conditions checked completed successfully!']);
        } elseif ($mode == 'product-push') {
            return response()->json(['code' => 200, 'message' => 'Push product successfully!']);
        }
    }

    public function processProductsConditionsCheck(Request $request)
    {
        $limit = $request->get('no_of_product', config('constants.no_of_product'));
        // Mode($mode) defines the whether it's a condition check or product push.
        $mode = $request->get('mode', config('constants.mode'));
        // Gets all products with final approval status
        $products = ProductHelper::getProducts(StatusHelper::$finalApproval, $limit);

        $no_of_product = count($products);
        foreach ($products as $key => $product) {
            $details                  = [];
            $details['product_index'] = ($key) + 1;
            $details['no_of_product'] = $no_of_product;
            Flow2ConditionCheckProductOnly::dispatch($product, $details)->onQueue('conditioncheckonly');
        }

        if ($mode == 'conditions-check') {
            return response()->json(['code' => 200, 'message' => 'Conditions checked completed successfully!']);
        } elseif ($mode == 'product-push') {
            return response()->json(['code' => 200, 'message' => 'Push product successfully!']);
        }
    }

    /**
     * @return \Illuminate\Http\JsonResponse
     */
    public function pushProductsToMagento(Request $request)
    {
        $mode     = 'product-push';
        $limit    = $request->get('no_of_product', config('constants.no_of_product'));
        $products = ProductHelper::getProducts(StatusHelper::$productConditionsChecked, $limit);
        if ($products->count() == 0) {
            return response()->json(['code' => 500, 'message' => 'No products found!']);
        }

        $no_of_product = count($products);
        foreach ($products as $key => $product) {
            $details                  = [];
            $details['product_index'] = ($key) + 1;
            $details['no_of_product'] = $no_of_product;

            Flow2PushProductOnlyJob::dispatch($product, $details)->onQueue('pushproductflow2only');
        }

        return response()->json(['code' => 200, 'message' => 'Product pushed to magento successfully!']);
    }

    public function pushToMagentoConditions(Request $request)
    {
        $drConditions = PushToMagentoCondition::all();
        if (($request->condition && $request->condition != null) && ($request->magento_description && $request->magento_description != null)) {
            $conditions = PushToMagentoCondition::where('condition', $request->condition)->where('description', 'LIKE', '%' . $request->magento_description . '%')->get();
        } elseif ($request->magento_description && $request->magento_description != null) {
            $conditions = PushToMagentoCondition::where('description', 'LIKE', '%' . $request->magento_description . '%')->get();
        } elseif ($request->condition && $request->condition != null) {
            $conditions = PushToMagentoCondition::where('condition', $request->condition)->get();
        } else {
            $conditions = PushToMagentoCondition::all();
        }

        return view('products.conditions', compact('conditions', 'drConditions'));
    }

    public function updateConditionStatus(Request $request)
    {
        $input = $request->input();
        PushToMagentoCondition::where('id', $input['id'])->update(['status' => $input['status']]);

        return 'Status Updated';
    }

    public function updateConditionUpteamStatus(Request $request)
    {
        $input = $request->input();
        PushToMagentoCondition::where('id', $input['id'])->update(['upteam_status' => $input['upteam_status']]);

        return 'Upteam Status Updated';
    }

    public function getPreListProducts()
    {
        $newProducts = Product::where('status_id', StatusHelper::$finalApproval);
        $newProducts = QueryHelper::approvedListingOrderFinalApproval($newProducts, true);

        $newProducts = $newProducts->where('isUploaded', 0);

        $newProducts = $newProducts->select(DB::raw('products.brand,products.category,products.assigned_to,count(*) as total'))
            ->groupBy('products.brand', 'products.category', 'products.assigned_to')->paginate(50);
        foreach ($newProducts as $product) {
            if ($product->brand) {
                $brand = Brand::find($product->brand);
                if ($brand) {
                    $product->brandName = $brand->name;
                } else {
                    $product->brandName = '';
                }
            } else {
                $product->brandName = '';
            }
            if ($product->category) {
                $category = Category::find($product->category);
                if ($category) {
                    $product->categoryName = $category->title;
                } else {
                    $product->categoryName = '';
                }
            } else {
                $product->categoryName = '';
            }
            if ($product->assigned_to) {
                $product->assignTo = User::find($product->assigned_to)->name;
            } else {
                $product->assignTo = '';
            }
        }
        $users = User::all()->pluck('name', 'id')->toArray();

        return view('products.assign-products', compact('newProducts', 'users'));
    }

    public function assignProduct(Request $request)
    {
        $category    = $request->category;
        $brand       = $request->brand;
        $assigned_to = $request->assigned_to;
        if (! $assigned_to) {
            return response()->json(['message' => 'Select one user'], 500);
        }
        $products = Product::where('products.status_id', StatusHelper::$finalApproval)->where('products.category', $category)->where('products.brand', $brand);

        $products = QueryHelper::approvedListingOrderFinalApproval($products, true);
        $products = $products->where('products.isUploaded', 0);
        $products = $products->select('products.*')->get();

        foreach ($products as $product) {
            $product->update(['assigned_to' => $assigned_to]);
        }

        $data['assign_from']  = Auth::id();
        $data['is_statutory'] = 2;
        $data['task_details'] = 'Final Approval Assignment';
        $data['task_subject'] = 'Final Approval Assignment';
        $data['assign_to']    = $assigned_to;

        $task = Task::create($data);
        if (! empty($task)) {
            $task->users()->attach([$data['assign_to'] => ['type' => User::class]]);
        }

        if ($task->is_statutory != 1) {
            $message = '#' . $task->id . '. ' . $task->task_subject . '. ' . $task->task_details;
        } else {
            $message = $task->task_subject . '. ' . $task->task_details;
        }

        $params = [
            'number'   => null,
            'user_id'  => Auth::id(),
            'approved' => 1,
            'status'   => 2,
            'task_id'  => $task->id,
            'message'  => $message,
        ];
        $user               = User::find($assigned_to);
        $params['erp_user'] = $assigned_to;
        app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($user->phone, $user->whatsapp_number, $params['message']);

        $chat_message = ChatMessage::create($params);

        $myRequest = new Request();
        $myRequest->setMethod('POST');
        $myRequest->request->add(['messageId' => $chat_message->id]);
        app(\App\Http\Controllers\WhatsAppController::class)->approveMessage('task', $myRequest);

        $username = $user->name;

        return response()->json(['message' => 'Successful', 'user' => $username]);
    }

    public function assignProductNoWise(Request $request)
    {
        $no_of_product_assign = $request->get('no_of_product_assign', 0);
        $assigned_to          = $request->assigned_to;
        if (! $assigned_to) {
            return redirect()->back()->withErrors('Select one user');
        }
        $products = Product::where('products.status_id', StatusHelper::$finalApproval);

        $products = QueryHelper::approvedListingOrderFinalApproval($products, true);
        $products = $products->where('products.isUploaded', 0);

        if ($no_of_product_assign > 0) {
            $products = $products->limit($no_of_product_assign);
        } else {
            $products = $products->limit(0);
        }

        $products = $products->select('products.*')->get();

        foreach ($products as $product) {
            $product->update(['assigned_to' => $assigned_to]);
        }

        $data['assign_from']  = Auth::id();
        $data['is_statutory'] = 2;
        $data['task_details'] = 'Final Approval Assignment';
        $data['task_subject'] = 'Final Approval Assignment';
        $data['assign_to']    = $assigned_to;

        $task = Task::create($data);
        if (! empty($task)) {
            $task->users()->attach([$data['assign_to'] => ['type' => User::class]]);
        }

        if ($task->is_statutory != 1) {
            $message = '#' . $task->id . '. ' . $task->task_subject . '. ' . $task->task_details;
        } else {
            $message = $task->task_subject . '. ' . $task->task_details;
        }

        $params = [
            'number'   => null,
            'user_id'  => Auth::id(),
            'approved' => 1,
            'status'   => 2,
            'task_id'  => $task->id,
            'message'  => $message,
        ];

        $user               = User::find($assigned_to);
        $params['erp_user'] = $assigned_to;
        app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($user->phone, $user->whatsapp_number, $params['message']);

        $chat_message = ChatMessage::create($params);

        $myRequest = new Request();
        $myRequest->setMethod('POST');
        $myRequest->request->add(['messageId' => $chat_message->id]);
        app(\App\Http\Controllers\WhatsAppController::class)->approveMessage('task', $myRequest);

        $username = $user->name;

        return redirect()->back()->withSuccess('Product assigned to person successfully');
    }

    public function draftedProducts(Request $request)
    {
        \Log::info('action started');
        $products = Product::where('quick_product', 1)
            ->leftJoin('brands as b', 'b.id', 'products.brand')
            ->leftJoin('categories as c', 'c.id', 'products.category')
            ->select([
                'products.id',
                'products.name as product_name',
                'b.name as brand_name',
                'c.title as category_name',
                'products.supplier',
                'products.status_id',
                'products.created_at',
                'products.supplier_link',
                'products.composition',
                'products.size',
                'products.lmeasurement',
                'products.hmeasurement',
                'products.dmeasurement',
                'products.color',
            ]);

        if ($request->category != null && $request->category != 1) {
            $products = $products->where('products.category', $request->category);
        }

        if ($request->brand_id != null) {
            $products = $products->where('products.brand', $request->brand_id);
        }

        if ($request->supplier_id != null) {
            $products = $products->where('products.supplier', $request->supplier_id);
        }

        if ($request->status_id != null) {
            $products = $products->where('products.status_id', $request->status_id);
        }

        $products = $products->orderby('products.created_at', 'desc')->paginate()->appends(request()->except(['page']));

        \Log::info('Page Displayed here');

        return view('drafted-supplier-product.index', compact('products'));
    }

    public function editDraftedProduct(Request $request)
    {
        $product = Product::where('id', $request->id)->first();

        return view('drafted-supplier-product.edit-modal', ['product' => $product]);
    }

    public function deleteDraftedProducts(Request $request)
    {
        $productIds = $request->products;
        if (! empty($productIds)) {
            $products = \App\Product::whereIn('id', $productIds)->get();
            if (! $products->isEmpty()) {
                foreach ($products as $product) {
                    $product->delete();
                }
            }
        }

        return response()->json(['code' => 200, 'data' => [], 'message' => 'Successfully deleted!']);
    }

    public function editDraftedProducts(Request $request)
    {
        $draftedProduct = Product::where('id', $request->id)->first();

        if ($draftedProduct) {
            $draftedProduct->fill($request->all());
            $draftedProduct->save();

            return response()->json(['code' => 200, 'data' => $draftedProduct, 'message' => 'Successfully edited!']);
        }

        return response()->json(['code' => 500, 'error' => 'Wrong row id!']);
    }

    public function updateApprovedBy(Request $request, $product_id)
    {
        $product = Product::find($product_id);

        if ($product) {
            $product->update([
                'is_approved' => 1,
                'approved_by' => $request->user_id,
            ]);
        }

        return response()->json([
            'code' => 200,
        ]);
    }

    public function createTemplate(Request $request)
    {
        $this->validate($request, [
            'template_no'      => 'required',
            'product_media_id' => 'required',
            'background'       => 'required',
            'text'             => 'required',
        ]);

        $product_media_id           = explode(',', $request->product_media_id);
        $template                   = new \App\ProductTemplate;
        $template->template_no      = $request->template_no;
        $template->text             = $request->text;
        $template->background_color = $request->background;
        $template->template_status  = 'python';

        if ($template->save()) {
            if (! empty($request->get('product_media_id')) && is_array($request->get('product_media_id'))) {
                foreach ($request->get('product_media_id') as $mediaid) {
                    $media = Media::find($mediaid);
                    $template->attachMedia($media, ['template-image-attach']);
                    $template->save();
                    $imagesArray[] = getMediaUrl($media);
                }
            }

            return redirect()->back()->with('success', 'Template has been created successfully');
        }

        return redirect()->back()->with('error', 'Something went wrong, Please try again!');
    }

    /**
     * This funcrtion is use for delete product suggested
     *
     * @param mixed $ids
     *
     * @return JsonResponse
     */
    public function deleteSuggestedProduct(Request $request, $ids = '')
    {
        try {
            $idArr   = explode(',', $request->ids);
            $sugProd = \App\SuggestedProduct::whereIn('id', $idArr)->delete();
            if ($sugProd != 0) {
                return response()->json(['code' => 200, 'message' => 'Successfully Deleted']);
            }

            return response()->json(['code' => 500, 'message' => 'Please select any record']);
        } catch (Exception $e) {
            return response()->json(['code' => 500, 'message' => $e->getMessage()]);
        }
    }

    /**
     * This funcrtion is use for get product suggested log
     *
     * @return JsonResponse
     */
    public function getSuggestedProductLog(Request $request)
    {
        try {
            $sugProd = ProductSuggestedLog::where('parent_id', $request->id)->get();
            if ($sugProd->toArray()) {
                $html = '';
                foreach ($sugProd as $sugProdData) {
                    $html .= '<tr>';
                    $html .= '<td>' . $sugProdData->id . '</td>';
                    $html .= '<td>' . $sugProdData->log . '</td>';
                    $html .= '</tr>';
                }

                return response()->json(['code' => 200, 'data' => $html, 'message' => 'Log listed Successfully']);
            }

            return response()->json(['code' => 500, 'message' => 'Log not found']);
        } catch (Exception $e) {
            return response()->json(['code' => 500, 'message' => $e->getMessage()]);
        }
    }

    public function attachedImageGrid($model_type, $model_id, $status, $assigned_user, Request $request)
    {
        $model_type = 'customer';
        if ($model_type == 'customer') {
            $customerId = $model_id;
        } else {
            $customerId = null;
        }
        if ($request->customer_id) {
            $explode = explode('/', $request->customer_id);
            if (count($explode) > 1) {
                $customerId = $explode[1];
            }
        }

        if ($request->category) {
            try {
                $filtered_category = $request->category;
            } catch (Exception $e) {
                $filtered_category = [];
            }
        } else {
            $filtered_category = [];
        }
        $category_selection = Category::attr(['name' => 'category[]', 'class' => 'form-control select-multiple-cat-list input-lg select-multiple', 'multiple' => true, 'data-placeholder' => 'Select Category..'])
            ->selected($filtered_category)
            ->renderAsDropdown();

        //\DB::enableQueryLog();
        $roletype = $request->input('roletype') ?? 'Sale';
        $term     = $request->input('term');
        if ($request->total_images) {
            $perPageLimit = $request->total_images;
        } else {
            $perPageLimit = $request->get('per_page');
        }

        if (empty($perPageLimit)) {
            $perPageLimit = Setting::get('pagination');
        }
        $suggestedProducts = \App\SuggestedProduct::with('customer')->leftJoin('suggested_product_lists as spl', 'spl.suggested_products_id', 'suggested_products.id');
        $suggestedProducts = $suggestedProducts->leftJoin('products as p', 'spl.product_id', 'p.id');
        $suggestedProducts = $suggestedProducts->leftJoin('customers as c', 'c.id', 'suggested_products.customer_id');
        if ($customerId) {
            $suggestedProducts = $suggestedProducts->where('suggested_products.customer_id', $customerId);
        }

        if ($request->category != null) {
            $suggestedProducts = $suggestedProducts->whereIn('p.category', $request->category);
        }

        if ($request->brand != null) {
            $suggestedProducts = $suggestedProducts->whereIn('p.brand', $request->brand);
        }

        if ($request->platform != null) {
            $suggestedProducts = $suggestedProducts->where('suggested_products.platform', $request->platform);
        }

        if (! empty($term)) {
            $suggestedProducts = $suggestedProducts->where(function ($q) use ($term) {
                $q->orWhere('p.sku', 'LIKE', '%' . $term . '%')->orWhere('p.id', 'LIKE', '%' . $term . '%');
            });
        }

        $loggedInUser        = auth()->user();
        $isInCustomerService = $loggedInUser->isInCustomerService();
        if ($isInCustomerService) {
            $suggestedProducts = $suggestedProducts->where('c.user_id', $loggedInUser->id);
        }

        // $perPageLimit
        $suggestedProducts = $suggestedProducts->select(DB::raw('suggested_products.*, max(suggested_products.created_at) as created_at'))->orderBy('suggested_products.created_at', 'DESC')->groupBy('suggested_products.id')->paginate($perPageLimit);

        foreach ($suggestedProducts as $suggestion) {
            $last_attached = \App\SuggestedProductList::where('suggested_products_id', $suggestion->id)->orderBy('date', 'desc')->first();
            if ($last_attached) {
                $suggestion->last_attached = $last_attached->date;
            } else {
                $suggestion->last_attached = $suggestion->created_at;
            }
            $brandIds = \App\SuggestedProductList::join('products', 'suggested_product_lists.product_id', 'products.id')->where('suggested_product_lists.customer_id', $suggestion->customer_id)->where('suggested_products_id', $suggestion->id)->groupBy('products.brand')->pluck('products.brand');
            if (count($brandIds) > 0) {
                $suggestion->brdNames = Brand::whereIn('id', $brandIds)->get();
            } else {
                $suggestion->brdNames = [];
            }

            $catIds = \App\SuggestedProductList::join('products', 'suggested_product_lists.product_id', 'products.id')->where('suggested_product_lists.customer_id', $suggestion->customer_id)->where('suggested_products_id', $suggestion->id)->groupBy('products.category')->pluck('products.category');
            if (count($catIds) > 0) {
                $suggestion->catNames = Category::whereIn('id', $catIds)->get();
            } else {
                $suggestion->catNames = [];
            }
        }

        $templateArr = \App\Template::all();

        $all_product_ids   = [];
        $model_type        = 'customer';
        $countBrands       = 0;
        $countCategory     = 0;
        $countSuppliers    = 0;
        $categoryArray     = [];
        $from              = '';
        $products_count    = 0;
        $selected_products = [];
        $brand             = $request->brand;
        if ($request->ajax()) {
            $html = view('partials.attached-image-load', [
                'suggestedProducts' => $suggestedProducts,
                'all_product_ids'   => $all_product_ids,
                'brand'             => $brand,
                'selected_products' => $request->selected_products ? json_decode($request->selected_products) : [],
                'model_type'        => $model_type,
                'countBrands'       => $countBrands,
                'countCategory'     => $countCategory,
                'countSuppliers'    => $countSuppliers,
                'customerId'        => $customerId,
                'categoryArray'     => $categoryArray,
            ])->render();
            if (! empty($from) && $from == 'attach-image') {
                return $html;
            }

            $selected_products = $request->selected_products ? json_decode($request->selected_products) : [];

            return view('partials.attached-image-load', compact(
                'suggestedProducts', 'all_product_ids', 'brand', 'selected_products', 'model_type', 'countBrands', 'countCategory', 'countSuppliers', 'customerId', 'categoryArray'));
        }

        $message_body = $request->message ? $request->message : '';
        $sending_time = $request->sending_time ?? '';

        $locations = \App\ProductLocation::pluck('name', 'name');
        $suppliers = Supplier::select(['id', 'supplier'])->whereIn('id', DB::table('product_suppliers')->selectRaw('DISTINCT(`supplier_id`) as suppliers')->pluck('suppliers')->toArray())->get();

        $quick_sell_groups = \App\QuickSellGroup::select('id', 'name')->orderBy('id', 'desc')->get();
        $customers         = \App\Customer::pluck('name', 'id');

        return view('partials.attached-image-grid', compact(
            'suggestedProducts', 'templateArr', 'products_count', 'roletype', 'model_id', 'selected_products', 'model_type', 'status', 'assigned_user', 'category_selection', 'brand', 'filtered_category', 'message_body', 'sending_time', 'locations', 'suppliers', 'all_product_ids', 'quick_sell_groups', 'countBrands', 'countCategory', 'countSuppliers', 'customerId', 'categoryArray', 'term', 'customers'
        ));
    }

    public function crop_rejected_status(Request $request)
    {
        if ($request->status == 'reject') {
            $lastPriorityScrap = Product::orderBy('scrap_priority', 'desc')->first();
            if ($lastPriorityScrap) {
                if ($lastPriorityScrap->scrap_priority) {
                    $lastPriority = $lastPriorityScrap->scrap_priority + 1;
                } else {
                    $lastPriority = 1;
                }
            } else {
                $lastPriority = 1;
            }

            Product::where('id', $request->product_id)->update(['status_id' => StatusHelper::$autoCrop, 'scrap_priority' => $lastPriority]);
            SiteCroppedImages::where('product_id', $request->product_id)->where('website_id', $request->site_id)->delete();
        }
        RejectedImages::updateOrCreate(
            ['website_id' => $request->site_id, 'product_id' => $request->product_id, 'user_id' => auth()->user()->id],
            ['status' => $request->status == 'approve' ? 1 : 0]
        );

        return response()->json(['code' => 200, 'message' => 'Successfully rejected']);
    }

    public function all_crop_rejected_status(Request $request)
    {
        if ($request->status == 'reject') {
            $lastPriorityScrap = Product::orderBy('scrap_priority', 'desc')->first();
            if ($lastPriorityScrap) {
                if ($lastPriorityScrap->scrap_priority) {
                    $lastPriority = $lastPriorityScrap->scrap_priority + 1;
                } else {
                    $lastPriority = 1;
                }
            } else {
                $lastPriority = 1;
            }
            $sites = SiteCroppedImages::where('product_id', $request->product_id)->get();
            foreach ($sites as $site) {
                RejectedImages::updateOrCreate(
                    ['website_id' => $site->website_id, 'product_id' => $request->product_id, 'user_id' => auth()->user()->id],
                    ['status' => $request->status == 'approve' ? 1 : 0]
                );
            }

            Product::where('id', $request->product_id)->update(['status_id' => StatusHelper::$autoCrop, 'scrap_priority' => $lastPriority]);
            SiteCroppedImages::where('product_id', $request->product_id)->delete();
        }

        return response()->json(['code' => 200, 'message' => 'Successfully rejected']);
    }

    public function attachMoreProducts($suggested_products_id)
    {
        $lastSuggestion = \App\SuggestedProduct::where('id', $suggested_products_id)->orderBy('created_at', 'desc')->first();
        $customerId     = $lastSuggestion->customer_id;
        $brands         = [];
        $categories     = [];
        $term           = '';
        $limit          = 10;
        if ($lastSuggestion) {
            if ($lastSuggestion->brands) {
                $brands = json_decode($lastSuggestion->brands);
            }
            if ($lastSuggestion->categories) {
                $categories = json_decode($lastSuggestion->categories);
            }
            $term  = $lastSuggestion->keyword;
            $limit = $lastSuggestion->total;
        }
        $remove_ids = \App\SuggestedProductList::where('suggested_products_id', $suggested_products_id)->pluck('product_id as id');

        $products = (new Product())->newQuery()->latest();

        if (count($brands) > 0) {
            $products = $products->whereIn('brand', $brands);
        }

        if (count($categories) > 0) {
            $category_children = [];

            foreach ($categories as $category) {
                $is_parent = Category::isParent($category);

                if ($is_parent) {
                    $childs = Category::find($category)->childs()->get();

                    foreach ($childs as $child) {
                        $is_parent = Category::isParent($child->id);

                        if ($is_parent) {
                            $children = Category::find($child->id)->childs()->get();

                            foreach ($children as $chili) {
                                array_push($category_children, $chili->id);
                            }
                        } else {
                            array_push($category_children, $child->id);
                        }
                    }

                    array_push($category_children, $category);
                } else {
                    array_push($category_children, $category);
                }
            }

            $products = $products->whereIn('category', $category_children);
        }

        if (trim($term) != '') {
            $products = $products->where(function ($query) use ($term) {
                $query->where('sku', 'LIKE', "%$term%")
                    ->orWhere('id', 'LIKE', "%$term%")
                    ->orWhere('name', 'LIKE', "%$term%")
                    ->orWhere('short_description', 'LIKE', "%$term%");
                if ($term == -1) {
                    $query = $query->orWhere('isApproved', -1);
                }

                $brand_id = \App\Brand::where('name', 'LIKE', "%$term%")->value('id');
                if ($brand_id) {
                    $query = $query->orWhere('brand', 'LIKE', "%$brand_id%");
                }

                $category_id = $category = Category::where('title', 'LIKE', "%$term%")->value('id');
                if ($category_id) {
                    $query = $query->orWhere('category', $category_id);
                }
            });
        }
        if (count($remove_ids) > 0) {
            $products = $products->whereNotIn('products.id', $remove_ids);
        }

        // select fields..
        $products = $products->select(['products.id', 'name', 'short_description', 'color', 'sku', 'products.category', 'products.size', 'price_eur_special', 'price_inr_special', 'supplier', 'purchase_status', 'products.created_at']);

        $products = $products->paginate($limit);

        if (count($products) > 0) {
            $data_to_insert = [];
            foreach ($products as $product) {
                $exists = \App\SuggestedProductList::where('suggested_products_id', $suggested_products_id)->where('customer_id', $customerId)->where('product_id', $product->id)->where('date', date('Y-m-d'))->first();
                if (! $exists) {
                    $pr = Product::find($product->id);
                    if ($pr->hasMedia(config('constants.attach_image_tag'))) {
                        $data_to_insert[] = [
                            'suggested_products_id' => $suggested_products_id,
                            'customer_id'           => $customerId,
                            'product_id'            => $product->id,
                            'date'                  => date('Y-m-d'),
                        ];
                    }
                }
            }
            if (count($data_to_insert) > 0) {
                \App\SuggestedProductList::insert($data_to_insert);
            }
        }
        $url = '/attached-images-grid/customer?customer_id=' . $customerId;

        return response()->json(['message' => 'Successfull', 'url' => $url, 'code' => 200]);
    }

    public function suggestedProducts($model_type, $model_id, $status, $assigned_user, Request $request)
    {
        $model_type = 'customer';
        $customerId = null;
        if ($request->customer_id) {
            $explode = explode('/', $request->customer_id);
            if (count($explode) > 1) {
                $customerId = $explode[1];
            }
        }
        $roletype = $request->input('roletype') ?? 'Sale';
        $term     = $request->input('term');
        if ($request->total_images) {
            $perPageLimit = $request->total_images;
        } else {
            $perPageLimit = $request->get('per_page');
        }
        if (empty($perPageLimit)) {
            $perPageLimit = Setting::get('pagination');
        }
        $suggestedProducts = \App\SuggestedProduct::join('suggested_product_lists', 'suggested_products.customer_id', 'suggested_product_lists.customer_id')->where('suggested_product_lists.chat_message_id', '!=', null);
        if ($customerId) {
            $suggestedProducts = $suggestedProducts->where('suggested_products.customer_id', $customerId);
        }

        $suggestedProducts = $suggestedProducts->select(DB::raw('suggested_products.*, suggested_products.created_at as created_at'))->orderBy('created_at', 'DESC')->groupBy('suggested_products.id')->paginate($perPageLimit);

        foreach ($suggestedProducts as $suggestion) {
            $suggestion->last_attached = \App\SuggestedProduct::where('customer_id', $suggestion->customer_id)->orderBy('created_at', 'desc')->first()->created_at;

            $brandIds = \App\SuggestedProductList::join('products', 'suggested_product_lists.product_id', 'products.id')->where('suggested_product_lists.customer_id', $suggestion->customer_id)->where('suggested_products_id', $suggestion->id)->groupBy('products.brand')->pluck('products.brand');
            if (count($brandIds) > 0) {
                $suggestion->brdNames = Brand::whereIn('id', $brandIds)->get();
            } else {
                $suggestion->brdNames = [];
            }

            $catIds = \App\SuggestedProductList::join('products', 'suggested_product_lists.product_id', 'products.id')->where('suggested_product_lists.customer_id', $suggestion->customer_id)->where('suggested_products_id', $suggestion->id)->groupBy('products.category')->pluck('products.category');
            if (count($catIds) > 0) {
                $suggestion->catNames = Category::whereIn('id', $catIds)->get();
            } else {
                $suggestion->catNames = [];
            }
        }

        if ($request->category) {
            try {
                $filtered_category = $request->category;
            } catch (Exception $e) {
                $filtered_category = [1];
            }
        } else {
            $filtered_category = [1];
        }

        $category_selection = Category::attr(['name' => 'category[]', 'class' => 'form-control select-multiple-cat-list input-lg select-multiple', 'multiple' => true, 'data-placeholder' => 'Select Category..'])
            ->selected($filtered_category)
            ->renderAsDropdown();

        $all_product_ids   = [];
        $model_type        = 'customer';
        $countBrands       = 0;
        $countCategory     = 0;
        $countSuppliers    = 0;
        $categoryArray     = [];
        $from              = '';
        $products_count    = 0;
        $selected_products = [];
        $brand             = $request->brand;
        if ($request->ajax()) {
            $html = view('partials.suggested-image-load', [
                'suggestedProducts' => $suggestedProducts,
                'all_product_ids'   => $all_product_ids,
                'selected_products' => $request->selected_products ? json_decode($request->selected_products) : [],
                'model_type'        => $model_type,
                'countBrands'       => $countBrands,
                'countCategory'     => $countCategory,
                'countSuppliers'    => $countSuppliers,
                'customerId'        => $customerId,
                'categoryArray'     => $categoryArray,
                'brand'             => $brand,
            ])->render();

            if (! empty($from) && $from == 'attach-image') {
                return $html;
            }

            $selected_products = $request->selected_products ? json_decode($request->selected_products) : [];

            return view('partials.suggested-image-load', compact(
                'suggestedProducts', 'all_product_ids', 'selected_products', 'model_type', 'countBrands', 'countCategory', 'countSuppliers', 'customerId', 'categoryArray', 'brand'
            ));
        }

        $message_body = $request->message ? $request->message : '';
        $sending_time = $request->sending_time ?? '';

        $locations = \App\ProductLocation::pluck('name', 'name');
        $suppliers = Supplier::select(['id', 'supplier'])->whereIn('id', DB::table('product_suppliers')->selectRaw('DISTINCT(`supplier_id`) as suppliers')->pluck('suppliers')->toArray())->get();

        $quick_sell_groups = \App\QuickSellGroup::select('id', 'name')->orderBy('id', 'desc')->get();

        $customers = \App\Customer::pluck('name', 'id');

        return view('partials.suggested-image-grid', compact(
            'suggestedProducts', 'products_count', 'roletype', 'model_id', 'selected_products', 'model_type', 'status', 'assigned_user', 'category_selection', 'brand', 'filtered_category', 'message_body', 'sending_time', 'locations', 'suppliers', 'all_product_ids', 'quick_sell_groups', 'countBrands', 'countCategory', 'countSuppliers', 'customerId', 'categoryArray', 'term', 'customers'
        ));
    }

    public function removeProducts($suggested_products_id, Request $request)
    {
        $products = json_decode($request->products, true);
        foreach ($products as $product_list_id) {
            $suggested = \App\SuggestedProductList::find($product_list_id);
            if ($suggested) {
                if ($suggested->chat_message_id) {
                    $suggested->remove_attachment = 1;
                    $suggested->save();
                } else {
                    $suggested->delete();
                }
            }
        }
        $remains = \App\SuggestedProductList::where('suggested_products_id', $suggested_products_id)->count();
        if (! $remains) {
            \App\SuggestedProduct::where('id', $suggested_products_id)->delete();
        }

        return response()->json(['code' => 200, 'message' => 'Successfull']);
    }

    public function removeSingleProduct($customer_id, Request $request)
    {
        $suggested = \App\SuggestedProductList::find($request->product_id);
        if ($suggested) {
            if ($suggested->chat_message_id) {
                $suggested->remove_attachment = 1;
                $suggested->save();
            } else {
                $suggested->delete();

                $remains = \App\SuggestedProductList::where('customer_id', $customer_id)->count();
                if (! $remains) {
                    \App\SuggestedProduct::where('customer_id', $customer_id)->delete();
                }
            }
        }

        return response()->json(['code' => 200, 'message' => 'Successfull']);
    }

    public function forwardProducts(Request $request)
    {
        $customerId = 0;
        if ($request->customer_id) {
            $explode = explode('/', $request->customer_id);
            if (count($explode) > 1) {
                $customerId = $explode[1];
            }
        }

        $forward_suggestedproductid = $request->forward_suggestedproductid;

        if (! $customerId) {
            $msg = ' Customer not found';

            return response()->json(['code' => 500, 'message' => $msg]);
        }

        $suggestedProducts = false;
        if ($forward_suggestedproductid) {
            $suggestedProducts = \App\SuggestedProduct::where('customer_id', $customerId)->where('id', $forward_suggestedproductid)->orderBy('created_at', 'desc')->first();
        }

        $products = json_decode($request->products, true);
        $total    = count($products);

        if ($suggestedProducts) {
            $suggestedProducts->touch();
            $new_suggestedproductid = $suggestedProducts->id;
        } else {
            $suggestedProducts              = new \App\SuggestedProduct;
            $suggestedProducts->customer_id = $customerId;
            $suggestedProducts->total       = $total;
            $suggestedProducts->save();
            $new_suggestedproductid = $suggestedProducts->id;
        }

        $listIds        = json_decode($request->products, true);
        $data_to_insert = [];
        $inserted       = 0;

        if (! empty($listIds) && is_array($listIds)) {
            foreach ($listIds as $listedImage) {
                $productList  = \App\SuggestedProductList::find($listedImage);
                $product      = Product::find($productList->product_id);
                $imageDetails = $product->getMedia(config('constants.attach_image_tag'))->first();
                $image_key    = $imageDetails->getKey();
                $media        = Media::find($image_key);
                if ($media) {
                    $mediable = \App\Mediables::where('media_id', $media->id)->where('mediable_type', \App\Product::class)->first();
                    if ($mediable) {
                        $exists = \App\SuggestedProductList::where('suggested_products_id', $new_suggestedproductid)->where('customer_id', $customerId)->where('product_id', $mediable->mediable_id)->where('date', date('Y-m-d'))->first();
                        if (! $exists) {
                            $pr = Product::find($mediable->mediable_id);
                            if ($pr->hasMedia(config('constants.attach_image_tag'))) {
                                $data_to_insert[] = [
                                    'suggested_products_id' => $new_suggestedproductid,
                                    'customer_id'           => $customerId,
                                    'product_id'            => $mediable->mediable_id,
                                    'date'                  => date('Y-m-d'),
                                ];
                            }
                        }
                    }
                }
            }

            $inserted = count($data_to_insert);
            if ($inserted > 0) {
                \App\SuggestedProductList::insert($data_to_insert);
            }

            if ($request->type == 'forward') {
                $data['_token']          = $request->_token;
                $data['send_pdf']        = 0;
                $data['pdf_file_name']   = '';
                $data['images']          = $request->products;
                $data['image']           = null;
                $data['screenshot_path'] = null;
                $data['message']         = null;
                $data['customer_id']     = $customerId;
                $data['status']          = 2;
                $data['type']            = 'customer-attach';
                \App\Jobs\AttachImagesSend::dispatch($data)->onQueue('customer_message');
            }
        }
        $msg = $inserted . ' Products added successfully';

        return response()->json(['code' => 200, 'message' => $msg]);
    }

    public function resendProducts($suggestedproductid, Request $request)
    {
        $suggestedProducts = \App\SuggestedProduct::where('id', $suggestedproductid)->orderBy('created_at', 'desc')->first();
        $customer_id       = $suggestedProducts->customer_id;
        $products          = json_decode($request->products, true);
        $suggestedProducts->touch();

        $data['_token']          = $request->_token;
        $data['send_pdf']        = 0;
        $data['pdf_file_name']   = '';
        $data['images']          = $request->products;
        $data['image']           = null;
        $data['screenshot_path'] = null;
        $data['message']         = null;
        $data['customer_id']     = $customer_id;
        $data['status']          = 2;
        $data['type']            = 'customer-attach';
        \App\Jobs\AttachImagesSend::dispatch($data)->onQueue('customer_message');
        $msg = ' Images Resend successfully';

        return response()->json(['code' => 200, 'message' => $msg]);
    }

    public function getCustomerProducts($type, $suggested_products_id, $customer_id, Request $request)
    {
        $term = null;
        //$suggested_products_id=3;
        $suggestedProductsLists = \App\SuggestedProductList::with('getMedia')->where('suggested_products_id', $suggested_products_id)->where('customer_id', $customer_id)->where('remove_attachment', 0)
            ->orderBy('date', 'desc')->whereNotNull('media_id')->get();

        if ($type == 'attach') {
            $productsLists = \App\SuggestedProductList::where('suggested_products_id', $suggested_products_id)->where('customer_id', $customer_id)->whereNull('media_id')->where('remove_attachment', 0)
                ->select('suggested_product_lists.*')->orderBy('date', 'desc')->get()->unique('date');
        } else {
            $productsLists = \App\SuggestedProductList::where('customer_id', $customer_id)->whereNull('media_id')->where('chat_message_id', '!=', null)
                ->select('suggested_product_lists.*')->orderBy('date', 'desc')->get()->unique('date');
        }
        $customer = \App\Customer::find($customer_id);

        foreach ($productsLists as $suggestion) {
            if ($type == 'attach') {
                $products = \App\SuggestedProductList::join('products', 'suggested_product_lists.product_id', 'products.id')
                    ->where('suggested_product_lists.customer_id', $customer_id)
                    ->where('suggested_product_lists.suggested_products_id', $suggested_products_id)
                    ->where('remove_attachment', 0)
                    ->where('suggested_product_lists.date', $suggestion->date);
            } else {
                $products = \App\SuggestedProductList::join('products', 'suggested_product_lists.product_id', 'products.id')
                    ->where('suggested_product_lists.customer_id', $customer_id)
                    ->where('suggested_product_lists.suggested_products_id', $suggested_products_id)
                    ->where('chat_message_id', '!=', null)
                    ->where('suggested_product_lists.date', $suggestion->date);
            }

            if (isset($request->brand[0])) {
                if ($request->brand[0] != null) {
                    $products = $products->whereIn('products.brand', $request->brand);
                }
            }

            if (isset($request->category[0])) {
                if ($request->category[0] != null && $request->category[0] != 1) {
                    $category_children = [];

                    foreach ($request->category as $category) {
                        $is_parent = Category::isParent($category);

                        if ($is_parent) {
                            $childs = Category::find($category)->childs()->get();

                            foreach ($childs as $child) {
                                $is_parent = Category::isParent($child->id);

                                if ($is_parent) {
                                    $children = Category::find($child->id)->childs()->get();

                                    foreach ($children as $chili) {
                                        array_push($category_children, $chili->id);
                                    }
                                } else {
                                    array_push($category_children, $child->id);
                                }
                            }
                        } else {
                            array_push($category_children, $category);
                        }
                    }
                    $products = $products->whereIn('category', $category_children);
                }
            }

            if (trim($term) != '') {
                $products = $products->where(function ($query) use ($term) {
                    $query->where('sku', 'LIKE', "%$term%")
                        ->orWhere('products.id', 'LIKE', "%$term%")
                        ->orWhere('name', 'LIKE', "%$term%")
                        ->orWhere('short_description', 'LIKE', "%$term%");
                    if ($term == -1) {
                        $query = $query->orWhere('isApproved', -1);
                    }

                    $brand_id = \App\Brand::where('name', 'LIKE', "%$term%")->value('id');
                    if ($brand_id) {
                        $query = $query->orWhere('brand', 'LIKE', "%$brand_id%");
                    }

                    $category_id = $category = Category::where('title', 'LIKE', "%$term%")->value('id');
                    if ($category_id) {
                        $query = $query->orWhere('category', $category_id);
                    }
                });
            }
            $suggestion->products = $products->select('products.*', 'suggested_product_lists.created_at as sort', 'suggested_product_lists.id as suggested_product_list_id')->orderBy('sort')->get();
        }
        $selected_products = [];
        $model_type        = 'customer';
        if ($type == 'attach') {
            return view('partials.attached-image-products', compact('productsLists', 'customer_id', 'selected_products', 'model_type', 'suggested_products_id', 'customer', 'suggestedProductsLists'));
        } else {
            return view('partials.suggested-image-products', compact('productsLists', 'customer_id', 'selected_products', 'model_type', 'suggested_products_id', 'customer', 'suggestedProductsLists'));
        }
    }

    public function addDraftProductsToQuickSell(Request $request)
    {
        $post = $request->all();

        $group = \App\QuickSellGroup::orderBy('id', 'desc')->first();
        if ($group != null) {
            $group_create        = new \App\QuickSellGroup();
            $incrementId         = ($group->group + 1);
            $group_create->group = $incrementId;
            $group_create->name  = $post['groupName'];
            $group_create->save();
            $group_id = $group_create->group;
        } else {
            $group        = new \App\QuickSellGroup();
            $group->group = 1;
            $group->name  = $post['groupName'];
            $group->save();
            $group_id = $group->group;
        }
        foreach ($request->products as $id) {
            $group                     = new \App\ProductQuicksellGroup();
            $group->product_id         = $id;
            $group->quicksell_group_id = $group_id;
            $group->save();
        }
        $msg = 'Products are added into group successfully';

        return response()->json(['code' => 200, 'message' => $msg]);
    }

    public function test(Request $request)
    {
        $product = Product::where('id', $request->productid)->first();
        if ($product !== null) {
            $image = $product->getMedia(config('constants.attach_image_tag'))->first();
            $data  = [
                'title'       => $product->name,
                'url'         => getMediaUrl($image),
                'amount'      => $product->price,
                'description' => $product->short_description,
            ];
        } else {
            $data = [
                'status' => false,

            ];
        }

        return response()->json($data);
    }

    public function add_product_def_cust($product_id, Request $request)
    {
        $product = Product::find($product_id);

        $def_cust_id = config('env.DEFAULT_CUST_ID');

        $customers = \App\Customer::find($def_cust_id);

        $statement = \DB::select("SHOW TABLE STATUS LIKE 'orders'");
        $nextId    = 0;
        if (! empty($statement)) {
            $nextId = $statement[0]->Auto_increment;
        }

        $order_id = 'OFF-' . date('Ym') . '-' . $nextId;

        $order_data = [
            'customer_id' => $def_cust_id,
            'order_id'    => $order_id,
            'order_date'  => date('Y-m-d'),
            'client_name' => $customers->name,
        ];
        $order = Order::create($order_data);

        $order_id = $order->id;

        $orderproduct_data = [
            'order_id'      => $order_id,
            'sku'           => $product->sku,
            'product_id'    => $product->id,
            'product_price' => $product->price,
        ];

        $order_products = OrderProduct::create($orderproduct_data);

        return response()->json(['code' => 200, 'message' => 'Purchase Products Added successfully']);
    }

    public function sendLeadPrice(Request $request)
    {
        if (empty($request->customer_id) && empty($request->product_id)) {
            return response()->json(['code' => 500, 'message' => 'Please check product id and customer id exist']);
        }

        $customer = \App\Customer::find($request->customer_id);

        if ($customer && ! empty($request->product_id)) {
            app(\App\Http\Controllers\CustomerController::class)->dispatchBroadSendPrice($customer, array_unique([$request->product_id]), true);
        }

        return response()->json(['code' => 200, 'data' => [], 'message' => 'Lead price created']);
    }

    public function getWebsites(Request $request)
    {
        $productId = $request->get('product_id');
        if ($productId > 0) {
            $websites     = \App\Helpers\ProductHelper::getStoreWebsiteName($productId);
            $websitesList = \App\StoreWebsite::whereIn('id', $websites)->get();
            if (! $websitesList->isEmpty()) {
                return response()->json(['code' => 200, 'data' => $websitesList]);
            } else {
                return response()->json(['code' => 200, 'data' => []]);
            }
        } else {
            return response()->json(['code' => 200, 'data' => []]);
        }
    }

    public function getTranslationProduct(Request $request, $id)
    {
        $translation = \App\Product_translation::where('product_id', $id)->get();

        return view('products.partials.translation-product', compact('translation'));
    }

    public function changeimageorder(Request $request)
    {
        if (! empty($request->mid) && ! empty($request->pid) && ! empty($request->val)) {
            \App\Mediables::where('mediable_type', \App\Product::class)->where('mediable_id', $request->pid)->where('media_id', $request->mid)->update(['order' => $request->val]);

            return response()->json(['code' => 200, 'data' => [], 'message' => 'order update successfully']);
        } else {
            return response()->json(['code' => 0, 'data' => [], 'message' => 'error']);
        }
    }

    public function pushproductlist(Request $request)
    {
        $products = \App\StoreWebsiteProduct::join('products', 'store_website_products.product_id', 'products.id');
        $products->join('store_websites', 'store_website_products.store_website_id', 'store_websites.id');
        $products->leftJoin('categories', 'products.category', 'categories.id');
        $products->leftJoin('brands', 'products.brand', 'brands.id');
        $products->select('store_website_products.*', 'products.name as product_name', 'store_websites.title as store_website_name', 'store_websites.magento_url as store_website_url', 'categories.title as category', 'brands.name as brand');
        if ($request->website != '') {
            $products->where('store_website_id', $request->website);
        }
        if ($request->category != '') {
            $products->where('products.category', $request->category);
        }
        if ($request->brand != '') {
            $products->where('products.brand', $request->brand);
        }
        $products->orderBy('created_at', 'desc');
        $products     = $products->paginate(Setting::get('pagination'));
        $websiteList  = \App\StoreWebsite::get();
        $categoryList = \App\Category::all();
        $brandList    = \App\Brand::get();

        return view('products.pushproductlist', compact('products', 'categoryList', 'brandList', 'websiteList'))
            ->with('i', (request()->input('page', 1) - 1) * 10);
    }

    public function changeCategory(Request $request)
    {
        $product = \App\Product::find($request->get('product_id'));
        if ($product) {
            $product->category = $request->category_id;
            $product->save();

            return response()->json(['code' => 200, 'message' => 'category updated successfully']);
        } else {
            return response()->json(['code' => 500, 'message' => 'category is unable to update']);
        }
    }

    public function approvedScrapperImages(Request $request, $pageType = '')
    {
        $all_store_websites = StoreWebsite::where('website_source', 'magento')->pluck('title', 'id')->toArray();

        $images = new scraperImags();
        if (! empty($request->store_website_id)) {
            $images = $images->whereIn('store_website', $request->store_website_id);
        }

        $checking = 0;
        if (! empty($request->si_status)) {
            if ($request->si_status == 1) {
                $images = $images->where('si_status', 1);
            } elseif ($request->si_status == 2) {
                $images = $images->where('si_status', 2);
            } elseif ($request->si_status == 3) {
                $images = $images->where('si_status', 3);
            } elseif ($request->si_status == 4) {
                $images = $images->where('manually_approve_flag', 1);
            } else {
                $images   = $images->where('si_status', 1);
                $checking = 1;
            }
        } else {
            $images   = $images->where('si_status', 1);
            $checking = 1;
        }

        if (! empty($request->url)) {
            $images = $images->where(function ($query) use ($term) {
                return $query->orWhere('url', 'like', '%' . $term . '%');
            });
        }
        $images = $images->orderBy('id', 'DESC');
        $images = $images->paginate(60);

        if ($request->ajax()) {
            if ($checking == 1) {
                if (! empty($images[0]->id)) {
                    \App\scraperImags::where('id', '>', $images[0]->id)->where('si_status', 1)->where('manually_approve_flag', 0)->update(['si_status' => 2]);
                }
            }

            $viewpath = 'products.scrapper_listing_image_ajax';

            return view($viewpath, [
                'checking'       => $checking,
                'products'       => $images,
                'products_count' => $images->total(),
            ]);
        }

        $viewpath = 'products.scrapper_listing';

        return view($viewpath, [
            'checking'           => $checking,
            'products'           => $images,
            'all_store_websites' => $all_store_websites,
            'products_count'     => $images->total(),
        ]);
    }

    public function getProductSupplierList(Request $request)
    {
        $datas = Product::with('suppliers_name')->select('id', 'supplier')->where('id', $request->product_id)->first();

        $suppliers = [];
        $supplier  = '';
        if (! empty($datas)) {
            if (! empty($datas['suppliers_name'])) {
                $suppliers = $datas['suppliers_name'];
            }

            if (! empty($datas['supplier'])) {
                $supplier = $datas['supplier'];
            }
        }

        return response()->json([
            'status'      => true,
            'data'        => $suppliers,
            'supplier'    => $supplier,
            'message'     => 'History get successfully',
            'status_name' => 'success',
        ], 200);
    }

    public function approvedScrapperImagesCompare(Request $request, $pageType = '', $id = '')
    {
        if (! empty($id)) {
            $image = scraperImags::find($id);

            if (! empty($image)) {
                $images = new scraperImags();
                $images = $images->where('url', $image->url);

                $images = $images->orderBy('id', 'DESC');
                $images = $images->paginate(60);

                if ($request->ajax()) {
                    $viewpath = 'products.scrapper_listing_image_ajax_compare';

                    return view($viewpath, [
                        'products'       => $images,
                        'products_count' => $images->total(),
                    ]);
                }

                $viewpath = 'products.scrapper_listing_compare';

                return view($viewpath, [
                    'products'       => $images,
                    'products_count' => $images->total(),
                ]);
            }
        }
    }

    public function truncateScrapperImagesMedia(Request $request)
    {
        $scrapperImages = scraperImags::pluck('img_url');

        if (! empty($scrapperImages)) {
            foreach ($scrapperImages as $key => $value) {
                $path = public_path() . '/scrappersImages/';
                if (file_exists($path . $value)) {
                    unlink($path . $value);
                }
            }
        }

        DB::statement('TRUNCATE TABLE scraper_imags');

        return response()->json([
            'status'      => true,
            'message'     => ' Your selected batabase tables has been truncate successfully',
            'status_name' => 'success',
        ], 200);
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/ProductCropperController.php 
Content: <?php

namespace App\Http\Controllers;

use App\User;
use App\Image;
use App\Sizes;
use App\Stage;
use App\Product;
use App\Setting;
use App\Category;
use Carbon\Carbon;
use App\CropAmends;
use App\ProductStatus;
use App\ListingHistory;
use Plank\Mediable\Media;
use App\Helpers\QueryHelper;
use App\UserProductFeedback;
use Illuminate\Http\Request;
use App\Helpers\StatusHelper;
use App\CroppedImageReference;
use Illuminate\Support\Facades\DB;
use Illuminate\Contracts\Auth\Guard;
use Illuminate\Support\Facades\Auth;
use Plank\Mediable\Facades\MediaUploader as MediaUploader;

class ProductCropperController extends Controller
{
    public function __construct()
    {
        $this->middleware('auth');
    }

    public function index(Stage $stage)
    {
        $products = Product::latest()
            ->where('stock', '>=', 1)
            ->where('stage', '>=', $stage->get('Supervisor'))
            ->whereNull('dnf')
            ->withMedia(config('constants.media_tags'))
            ->select(['id', 'sku', 'size', 'price_inr_special', 'brand', 'supplier', 'isApproved', 'stage', 'status', 'is_scraped', 'created_at'])
            ->paginate(Setting::get('pagination'));

        $roletype = 'ImageCropper';

        $category_selection = Category::attr(['name' => 'category[]', 'class' => 'form-control select-multiple'])
            ->selected(1)
            ->renderAsDropdown();

        return view('partials.grid', compact('products', 'roletype', 'category_selection'))
            ->with('i', (request()->input('page', 1) - 1) * 10);
    }

    public function edit(Sizes $sizes, Product $productimagecropper)
    {
        if ($productimagecropper->isUploaded == 1) {
            return redirect(route('products.show', $productimagecropper->id));
        }

        $data = [];

        $data['dnf']               = $productimagecropper->dnf;
        $data['id']                = $productimagecropper->id;
        $data['name']              = $productimagecropper->name;
        $data['short_description'] = $productimagecropper->short_description;
        $data['sku']               = $productimagecropper->sku;
        $data['description_link']  = $productimagecropper->description_link;
        $data['location']          = $productimagecropper->location;
        $data['product_link']      = $productimagecropper->product_link;

        $data['measurement_size_type'] = $productimagecropper->measurement_size_type;
        $data['lmeasurement']          = $productimagecropper->lmeasurement;
        $data['hmeasurement']          = $productimagecropper->hmeasurement;
        $data['dmeasurement']          = $productimagecropper->dmeasurement;

        $data['size_value']  = $productimagecropper->size_value;
        $data['sizes_array'] = $sizes->all();

        $data['size'] = $productimagecropper->size;

        $data['composition'] = $productimagecropper->composition;
        $data['made_in']     = $productimagecropper->made_in;
        $data['brand']       = $productimagecropper->brand;
        $data['color']       = $productimagecropper->color;
        $data['price']       = $productimagecropper->price;

        $data['isApproved']    = $productimagecropper->isApproved;
        $data['isUploaded']    = $productimagecropper->isUploaded;
        $data['isFinal']       = $productimagecropper->isFinal;
        $data['rejected_note'] = $productimagecropper->rejected_note;

        $data['images'] = $productimagecropper->getMedia(config('constants.media_tags'));

        $data['category'] = Category::attr(['name' => 'category', 'class' => 'form-control', 'disabled' => 'disabled'])
            ->selected($productimagecropper->category)
            ->renderAsDropdown();

        return view('imagecropper.edit', $data);
    }

    public function update(Request $request, Guard $auth, Product $productimagecropper, Stage $stage)
    {
        $productimagecropper->stage = $stage->get('ImageCropper');

        $validations = [];

        //:-( ahead
        $check_image = 0;
        $images      = $productimagecropper->getMedia(config('constants.media_tags'));
        $images_no   = count($images);

        for ($i = 0; $i < 5; $i++) {
            if ($request->input('oldImage' . $i) != 0) {
                $validations['image.' . $i] = 'mimes:jpeg,bmp,png,jpg';

                if (empty($request->file('image.' . $i))) {
                    $check_image++;
                }
            }
        }

        $messages = [];
        if ($check_image == $images_no) {
            $validations['image']       = 'required';
            $messages['image.required'] = 'Atleast on image is required. Last image can not be removed';
        }
        //:-( over

        $this->validate($request, $validations);

        self::replaceImages($request, $productimagecropper);

        $productimagecropper->last_imagecropper = Auth::id();
        $productimagecropper->save();

        NotificaitonContoller::store('has searched', ['Listers'], $productimagecropper->id);
        ActivityConroller::create($productimagecropper->id, 'imagecropper', 'create');

        return redirect()->route('productimagecropper.index')
            ->with('success', 'ImageCropper updated successfully.');
    }

    public function replaceImages($request, $productattribute)
    {
        $delete_array = [];
        for ($i = 0; $i < 5; $i++) {
            if ($request->input('oldImage' . $i) != 0) {
                $delete_array[] = $request->input('oldImage' . $i);
            }

            if (! empty($request->file('image.' . $i))) {
                $media = MediaUploader::fromSource($request->file('image.' . $i))
                    ->toDirectory('product/' . floor($productattribute->id / config('constants.image_per_folder')))
                    ->upload();
                $productattribute->attachMedia($media, config('constants.media_tags'));
            }
        }

        $results = Media::whereIn('id', $delete_array)->get();
        $results->each(function ($media) {
            Image::trashImage($media->basename);
            $media->delete();
        });
    }

    public static function rejectedProductCountByUser()
    {
        return Product::where('last_imagecropper', Auth::id())
            ->where('isApproved', -1)
            ->count();
    }

    public function getListOfImagesToBeVerified(Request $request)
    {
        $products = Product::where('status_id', StatusHelper::$cropApproval);
        $products = QueryHelper::approvedListingOrder($products);
        $products = $products->paginate(24);

        $totalApproved  = 0;
        $totalRejected  = 0;
        $totalSequenced = 0;

        if ($request->get('date') != '') {
            $date = $request->get('date');

            if (Auth::user()->hasRole('Crop Approval')) {
                $stats = UserProductFeedback::where('user_id')->whereIn('action', [
                    'CROP_APPROVAL_REJECTED',
                    'CROP_SEQUENCED_REJECTED',
                ])->get();
                $totalApproved  = Product::where('crop_approved_by', Auth::id())->where('crop_approved_at', 'LIKE', "%$date%")->count();
                $totalRejected  = Product::where('crop_rejected_by', Auth::id())->where('crop_rejected_at', 'LIKE', "%$date%")->count();
                $totalSequenced = Product::where('crop_rejected_by', Auth::id())->where('crop_rejected_at', 'LIKE', "%$date%")->count();
            } else {
                $stats = DB::table('products')
                    ->selectRaw('SUM(is_image_processed) as cropped, COUNT(*) AS total, SUM(is_crop_approved) as approved, SUM(is_crop_rejected) AS rejected')
                    ->where('is_scraped', 1)
                    ->where('is_without_image', 0)
                    ->where('stock', '>=', (int) $request->stock)
                    ->first();
            }
        } else {
            if (Auth::user()->hasRole('Crop Approval')) {
                $stats = UserProductFeedback::where('user_id')->whereIn('action', [
                    'CROP_APPROVAL_REJECTED',
                    'CROP_SEQUENCED_REJECTED',
                ])->get();

                $totalApproved = Product::where('crop_approved_by', Auth::id());
                $totalApproved = QueryHelper::approvedListingOrder($totalApproved);
                $totalApproved = $totalApproved->count();

                $totalRejected = Product::where('crop_rejected_by', Auth::id());
                $totalRejected = QueryHelper::approvedListingOrder($totalRejected);
                $totalRejected = $totalRejected->count();

                $totalSequenced = Product::where('crop_rejected_by', Auth::id());
                $totalSequenced = QueryHelper::approvedListingOrder($totalSequenced);
                $totalSequenced = $totalSequenced->count();
            } else {
                $stats           = new \stdClass();
                $stats->cropped  = StatusHelper::getCroppedCount();
                $stats->total    = StatusHelper::getTotalProductsScraped();
                $stats->approved = StatusHelper::getCropApprovedCount();
                $stats->rejected = StatusHelper::getCropRejectedCount();
            }
        }

        $rejectedCrops = Product::where('crop_rejected_by', Auth::user()->id)->where('is_crop_approved', 0)->where('is_crop_rejected', 0)->where('stock', '>=', 1)->paginate(20);

        return view('products.crop_list', compact('products', 'stats', 'totalRejected', 'totalSequenced', 'totalApproved', 'rejectedCrops'));
    }

    public function showImageToBeVerified($id, Request $request)
    {
        $product                         = Product::find($id);
        $product->is_crop_being_verified = 1;
        $product->save();

        $secondProduct = Product::where('is_image_processed', 1)
            ->where('id', '!=', $id)
            ->where('is_crop_rejected', 0)
            ->where('is_crop_approved', 0)
            ->whereRaw('id NOT IN (SELECT product_id FROM crop_amends)')
            ->where('is_crop_being_verified', 0)
            ->orderBy('is_on_sale', 'DESC')
            ->first();

        $q = '';
        if ($request->get('rejected') === 'yes') {
            $q = 'rejected=yes';
        }

        $category = $product->category;
        $img      = Category::getCroppingGridImageByCategoryId($category);

        $category_array = Category::renderAsArray();

        return view('products.crop', compact('q', 'product', 'secondProduct', 'img', 'category', 'category_array'));
    }

    public function getApprovedImages(Request $request)
    {
        // Add check for out of stock
        $stock = $request->stock === 0 ? 0 : 1;

        // Get products which are crop approved
        $products = Product::where('status_id', StatusHelper::$cropSequencing)
            ->where('stock', '>=', $stock);

        // Limit to one user if this is requested
        if ($request->get('user_id') > 0) {
            $products = $products->where('crop_approved_by', $request->get('user_id'));
        }

        // Get images with cropApprover
        $products = $products->with('cropApprover')->paginate(25);

        // Get all users for dropdown
        $users = User::all();

        // Get requested user
        $userId = $request->get('user_id');

        return view('products.approved_crop_list', compact('products', 'users', 'userId'));
    }

    public function ammendCrop($id, Request $request, Stage $stage)
    {
        $this->validate($request, [
            'size' => 'required',
        ]);

        $sizes    = $request->get('size');
        $padding  = $request->get('padding');
        $mediaIds = $request->get('mediaIds');

        foreach ($sizes as $key => $size) {
            if ($size != 'ok') {
                $rec = new CropAmends();
                //update mediaId
                $cropRefrence = CroppedImageReference::where('new_media_id', $mediaIds[$key])->first();
                if (! $cropRefrence) {
                    continue;
                }
                $rec->file_url   = getMediaUrl($cropRefrence->media);
                $rec->settings   = ['size' => $size, 'padding' => $padding[$key] ?? 96, 'media_id' => $cropRefrence->original_media_id];
                $rec->product_id = $id;
                $rec->save();

                Media::where('id', $mediaIds[$key])->delete();
            }
        }

        $secondProduct = Product::where('status_id', '=', StatusHelper::$cropApproval)
            ->where('id', '!=', $id)
            ->whereNotIn('id', DB::table('crop_amends')->pluck('product_id')->toArray())
            ->first();

        return redirect()->action([\App\Http\Controllers\ProductCropperController::class, 'showImageToBeVerified'], $secondProduct->id)->with('message', 'Cropping approved successfully!');
    }

    /**
     * @SWG\Get(
     *   path="/crop/amends",
     *   tags={"Crop"},
     *   summary="Get Crop amends",
     *   operationId="crop-get-crop-amends",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *   @SWG\Response(response=406, description="not acceptable"),
     *   @SWG\Response(response=500, description="internal server error"),
     * )
     */
    public function giveAmends()
    {
        $amend = CropAmends::where('status', 1)->first();

        return response()->json($amend);
    }

    /**
     * @SWG\Post(
     *   path="/crop/amends",
     *   tags={"Crop"},
     *   summary="Save Crop amends",
     *   operationId="crop-save-crop-amends",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *   @SWG\Response(response=406, description="not acceptable"),
     *   @SWG\Response(response=500, description="internal server error"),
     *
     *      @SWG\Parameter(
     *          name="file",
     *          in="formData",
     *          required=true,
     *          type="file"
     *      ),
     *      @SWG\Parameter(
     *          name="product_id",
     *          in="formData",
     *          required=true,
     *          type="string"
     *      ),
     *      @SWG\Parameter(
     *          name="media_id",
     *          in="formData",
     *          required=true,
     *          type="integer"
     *      ),
     *      @SWG\Parameter(
     *          name="amend_id",
     *          in="formData",
     *          required=true,
     *          type="integer"
     *      ),
     * )
     */
    public function saveAmends(Request $request)
    {
        $this->validate($request, [
            'file'       => 'required',
            'product_id' => 'required',
            'media_id'   => 'required',
            'amend_id'   => 'required',
        ]);

        $product                         = Product::findOrFail($request->get('product_id'));
        $product->is_crop_being_verified = 0;

        if ($request->hasFile('file')) {
            $image = $request->file('file');
            $media = MediaUploader::fromSource($image)
                ->toDirectory('product/' . floor($product->id / config('constants.image_per_folder')))
                ->upload();
            $product->attachMedia($media, config('constants.media_tags'));
        }

        $amend = CropAmends::findOrFail($request->get('amend_id'));
        $amend->delete();

        return response()->json([
            'status' => 'success',
        ]);
    }

    public function approveCrop($id, Request $request)
    {
        $product                   = Product::findOrFail($id);
        $product->status_id        = StatusHelper::$cropSequencing;
        $product->is_crop_approved = 1;
        $product->crop_approved_by = Auth::user()->id;
        $product->crop_approved_at = Carbon::now()->toDateTimeString();
        $product->is_crop_rejected = 0;
        $product->save();

        $e             = new ListingHistory();
        $e->user_id    = Auth::user()->id;
        $e->product_id = $product->id;
        $e->content    = ['action' => 'CROP_APPROVAL', 'page' => 'Approved Listing Page'];
        $e->action     = 'CROP_APPROVAL';
        $e->save();

        $secondProduct = null;

        if ($request->get('rejected') === 'yes') {
            $secondProduct = Product::where('crop_rejected_by', Auth::user()->id)->where('is_crop_approved', 0)->where('is_crop_rejected', 0)->first();
        }

        if (! $secondProduct) {
            $secondProduct = Product::where('is_image_processed', 1)
                ->where('id', '!=', $id)
                ->where('is_crop_rejected', 0)
                ->where('is_crop_approved', 0)
                ->where('is_crop_being_verified', 0)
                ->whereNotIn('id', DB::table('crop_amends')->pluck('product_id')->toArray())
                ->orderBy('is_on_sale', 'DESC')
                ->where(function ($q) {
                    $q->where('size', '!=', '')
                        ->orWhere(function ($qq) {
                            $qq->where('lmeasurement', '!=', '')
                                ->where('hmeasurement', '!=', '')
                                ->where('dmeasurement', '!=', '');
                        });
                })
                ->first();
        }

        if (! $secondProduct) {
            $secondProduct = Product::where('status_id', StatusHelper::$cropApproval);
            $secondProduct = QueryHelper::approvedListingOrder($secondProduct);
            $secondProduct = $secondProduct->first();
        }

        if (! $secondProduct || ! isset($secondProduct->id)) {
            return redirect()->action([\App\Http\Controllers\ProductCropperController::class, 'getListOfImagesToBeVerified']);
        } else {
            return redirect()->action([\App\Http\Controllers\ProductCropperController::class, 'showImageToBeVerified'], $secondProduct->id)->with('message', 'Cropping approved successfully!');
        }
    }

    public function cropApprovalConfirmation($id, Request $request)
    {
        // Get product
        $product = Product::findOrFail($id);

        // Insert crop approval confirmation
        ListingHistory::createNewListing(Auth::id(), $product->id, "[ 'action' => 'CROP_APPROVAL_CONFIRMATION', 'page' => 'Approved Listing Page' ]", 'CROP_APPROVAL_CONFIRMATION');

        // Add new status
        ProductStatus::updateStatus($product->id, 'CROP_APPROVAL_CONFIRMATION', 1);

        if ($product) {
            //sets initial status pending for finalApproval in product status histroy
            $data = [
                'product_id'     => $product->id,
                'old_status'     => $product->status_id,
                'new_status'     => StatusHelper::$finalApproval,
                'pending_status' => 1,
                'created_at'     => date('Y-m-d H:i:s'),
            ];
            \App\ProductStatusHistory::addStatusToProduct($data);
        }

        // Set new status
        //check final approval
        if ($product->checkPriceRange()) {
            $product->status_id = StatusHelper::$finalApproval;
        } else {
            $product->status_id = StatusHelper::$priceCheck;
        }
        //$product->status_id = StatusHelper::$finalApproval;
        $product->save();

        return 'ok';
    }

    public function rejectCrop($id, Stage $stage, Request $request)
    {
        // Get product
        $product = Product::findOrFail($id);

        if ($product->status_id == StatusHelper::$cropRejected) {
            if ($request->ajax()) {
                return response()->json(['sucesss'], 200);
            }
        }

        if ($product->status_id == StatusHelper::$manualImageUpload) {
            if ($request->ajax()) {
                return response()->json(['sucesss'], 200);
            }
        }

        // Get last image cropper
        $lastImageCropper = $product->crop_approved_by;

        // Update product to status rejected
        if ($request->get('remark') == 'Image incorrect') {
            $product->status_id = StatusHelper::$manualImageUpload;
        } else {
            $product->status_id = StatusHelper::$cropRejected;
        }

        $product->is_crop_rejected       = 1;
        $product->crop_remark            = $request->get('remark');
        $product->crop_rejected_by       = Auth::user()->id;
        $product->is_approved            = 0;
        $product->is_crop_approved       = 0;
        $product->is_crop_ordered        = 0;
        $product->is_crop_being_verified = 0;
        $product->crop_rejected_at       = Carbon::now()->toDateTimeString();
        $product->save();

        // Log crop approval denied
        if ((int) $lastImageCropper > 0) {
            $e             = new ListingHistory();
            $e->user_id    = $lastImageCropper;
            $e->product_id = $product->id;
            $e->content    = ['action' => 'CROP_APPROVAL_DENIED', 'page' => 'Approved Listing Page'];
            $e->action     = 'CROP_APPROVAL_DENIED';
            $e->save();
        }

        // Log crop rejected
        $e             = new ListingHistory();
        $e->user_id    = Auth::user()->id;
        $e->product_id = $product->id;
        $e->content    = ['action' => 'CROP_REJECTED', 'page' => 'Approved Listing Page'];
        $e->action     = 'CROP_REJECTED';
        $e->save();

        if ($request->get('senior') && $product) {
            $s                 = new UserProductFeedback();
            $s->user_id        = $product->crop_approved_by;
            $s->senior_user_id = Auth::user()->id;
            $s->action         = 'CROP_APPROVAL_REJECTED';
            $s->content        = ['action' => 'CROP_APPROVAL_REJECTED', 'previous_action' => 'CROP_APPROVAL', 'current_action' => 'CROP_REJECTED', 'message' => 'Your cropping approval has been rejected.'];
            $s->message        = 'Your cropping approval has been rejected. The reason was: ' . $request->get('remark');
            $s->product_id     = $product->id;
            $s->save();
        }

        if ($request->isXmlHttpRequest()) {
            return response()->json([
                'status' => 'success',
            ]);
        }

        $secondProduct = null;

        if ($request->get('rejected') === 'yes') {
            $secondProduct = Product::where('crop_rejected_by', Auth::user()->id)->where('is_crop_approved', 0)->where('is_crop_rejected', 0)->first();
        }

        if (! $secondProduct) {
            $secondProduct = Product::where('status_id', StatusHelper::$cropApproval);
            $secondProduct = QueryHelper::approvedListingOrder($secondProduct);
            $secondProduct = $secondProduct->first();
        }

        if (! $secondProduct) {
            return redirect()->action([\App\Http\Controllers\ProductCropperController::class, 'getListOfImagesToBeVerified']);
        }

        return redirect()->action([\App\Http\Controllers\ProductCropperController::class, 'showImageToBeVerified'], $secondProduct->id)->with('message', 'Cropping rejected!');
    }

    public function crop_issue_page(Request $request)
    {
    }

    public function showRejectedCrops(Request $request)
    {
        $products            = Product::where('is_crop_rejected', 1);
        $reason              = '';
        $supplier            = [];
        $selected_categories = [];

        if ($request->get('reason') !== '') {
            $reason   = $request->get('reason');
            $products = $products->where('stock', '>=', 1)->where(function ($query) use ($reason) {
                $query = $query->where('crop_remark', 'LIKE', "%$reason%")
                    ->orWhere('id', 'LIKE', "%$reason%")
                    ->orWhere('sku', 'LIKE', "%$reason%");
            });
        }

        if ($request->get('user_id')) {
            $products = $products->where('crop_rejected_by', $request->get('user_id'));
        }

        $suppliers = DB::select('
				SELECT id, supplier
				FROM suppliers

				INNER JOIN (
					SELECT supplier_id FROM product_suppliers GROUP BY supplier_id
					) as product_suppliers
				ON suppliers.id = product_suppliers.supplier_id
		');

        if ($request->supplier[0] != null) {
            $supplier = $request->get('supplier');
            $products = $products->whereIn('id', DB::table('product_suppliers')->whereIn('supplier_id', $supplier)->pluck('product_id'));
        }

        $users = User::all();

        if ($request->category[0] != null && $request->category[0] != 1) {
            $category_children = [];
            foreach ($request->category as $category) {
                $is_parent = Category::isParent($category);

                if ($is_parent) {
                    $childs = Category::find($category)->childs()->get();

                    foreach ($childs as $child) {
                        $is_parent = Category::isParent($child->id);

                        if ($is_parent) {
                            $children = Category::find($child->id)->childs()->get();

                            foreach ($children as $chili) {
                                array_push($category_children, $chili->id);
                            }
                        } else {
                            array_push($category_children, $child->id);
                        }
                    }
                } else {
                    array_push($category_children, $category);
                }
            }
            $products            = $products->whereIn('category', $category_children);
            $selected_categories = [$request->get('category')[0]];
        }

        if (! empty($request->brand)) {
            $products = $products->whereIn('brand', $request->brand);
        }

        if (! empty($request->color)) {
            $products = $products->whereIn('color', $request->color);
        }

        if (! empty($request->size)) {
            $products = $products->whereNotNull('size')->where(function ($query) use ($request) {
                $query->where('size', $request->size)->orWhere('size', 'LIKE', "%$request->size,")->orWhere('size', 'LIKE', "%,$request->size,%");
            });
        }

        if (! empty($request->location)) {
            $products = $products->whereIn('location', $request->location);
        }

        $products = $products->orderBy('updated_at', 'DESC')->paginate(24);

        $category_array = \App\Category::attr(['name' => 'category[]', 'class' => 'form-control select2', 'placeholder' => 'Select Category'])->selected(request()->get('category', 1))->renderAsDropdown();

        return view('products.rejected_crop_list', compact('products', 'suppliers', 'supplier', 'reason', 'selected_categories', 'category_array', 'users'));
    }

    public function cropIssuesPage()
    {
        $issues = DB::table('products')->selectRaw('DISTINCT(crop_remark) as remark, COUNT(crop_remark) as issue_count')->where('stock', '>=', 1)->where('is_crop_rejected', 1)->groupBy('crop_remark')->orderBy('issue_count', 'DESC')->get();

        return view('products.crop_issue_summary', compact('issues'));
    }

    public function showRejectedImageToBeverified($id)
    {
        $product       = Product::find($id);
        $secondProduct = Product::where('id', '!=', $id)->where('is_crop_rejected', 1)->first();

        $category = $product->category;
        $img      = Category::getCroppingGridImageByCategoryId($category);

        $medias             = $product->getMedia(config('constants.media_tags'));
        $originalMediaCount = 0;

        foreach ($medias as $media) {
            if (stripos(strtoupper($media->filename), 'CROPPED') === false) {
                $originalMediaCount++;
            }
        }

        return view('products.rejected_crop', compact('product', 'secondProduct', 'img', 'originalMediaCount'));
    }

    public function approveRejectedImage(Request $request)
    {
    }

    public function downloadImagesForProducts($id, $type)
    {
        $product = Product::findOrFail($id);

        $medias   = $product->getMedia(config('constants.media_tags'));
        $zip_file = md5(time()) . '.zip';
        $zip      = new \ZipArchive();
        $zip->open($zip_file, \ZipArchive::CREATE);
        foreach ($medias as $key => $media) {
            $fileName = $media->getAbsolutePath();
            if ($type === 'cropped' && stripos(strtoupper($media->filename), 'CROPPED') !== false) {
                $zip->addFile($fileName, $media->filename . '.' . $media->extension);
            }
            if ($type === 'original' && stripos(strtoupper($media->filename), 'CROPPED') === false) {
                $zip->addFile($fileName, $media->filename . '.' . $media->extension);
            }
        }

        $zip->close();

        return response()->download($zip_file);
    }

    public function approveRejectedCropped($id, Request $request)
    {
        $product = Product::find($id);

        $action = 'MARK_NOT_CROPPED';
        if ($request->get('action') == 'uncropped') {
            $product->status_id = 4;
            $product->save();
        } else {
            if ($request->get('action') == 'approved') {
                $product->status_id        = 6;
                $product->crop_approved_by = Auth::id();
                $product->crop_approved_at = Carbon::now()->toDateTimeString();
                $product->save();
                $action = 'CROP_APPROVAL';
            } else {
                if ($request->get('action') == 'manual') {
                    $product->status_id = 21;
                    $product->save();
                    $action = 'SENT_FOR_MANUAL_CROPPING';
                } else {
                    if ($request->get('unreject')) {
                        $product->status_id = 5;
                        $product->save();
                        $action = 'RESENT_FOR_APPROVAL';
                    }
                }
            }
        }

        $l             = new ListingHistory();
        $l->action     = $action;
        $l->content    = ['action' => $action, 'message' => ''];
        $l->user_id    = Auth::user()->id;
        $l->product_id = $product->id;
        $l->save();

        $secondProduct = Product::where('id', '!=', $id)->where('status_id', StatusHelper::$cropRejected)->first();

        return redirect()->action([\App\Http\Controllers\ProductCropperController::class, 'showRejectedImageToBeverified'], $secondProduct->id)->with('message', 'Rejected image approved and has been moved to approval grid.');
    }

    public function updateCroppedImages(Request $request)
    {
        dd($request->all());
    }

    public function giveImagesToBeAmended()
    {
        $image = CropAmends::where('status', 1)->first();

        return response()->json($image);
    }

    public function showCropOrderRejectedList()
    {
        $products = Product::where('is_order_rejected', 1)->orderBy('updated_at', 'DESC')->paginate(24);
    }

    public function showCropVerifiedForOrdering()
    {
        // Set initial product
        $product = Product::where('status_id', StatusHelper::$cropSequencing);

        // Add queryhelper
        $product = QueryHelper::approvedListingOrder($product);

        // Get first
        $product = $product->first();

        // No products found
        if ($product == null) {
            exit('No products found');
        }

        // Get total number of products awaiting for sequencing
        $total = Product::where('status_id', StatusHelper::$cropSequencing)->count();

        // Update the status so this product will not show up
        $product->status_id = StatusHelper::$isBeingSequenced;
        $product->save();

        // Set count of crops ordered by the current logged in user
        $count = Product::where('crop_ordered_by', Auth::id())->count();

        // Return view
        return view('products.sequence', compact('product', 'total', 'count'));
    }

    public function skipSequence($id, Request $request)
    {
        // Find product or fail
        $product = Product::findOrFail($id);

        // Check if the product is being sequenced
        if ($product->status_id != StatusHelper::$isBeingSequenced) {
            // Check for ajax
            if ($request->isXmlHttpRequest()) {
                return response()->json([
                    'status' => 'failed',
                ], 400);
            } else {
                // Redirect
                return redirect()->action([\App\Http\Controllers\ProductCropperController::class, 'showCropVerifiedForOrdering']);
            }
        }

        $product->status_id        = StatusHelper::$cropSkipped;
        $product->crop_rejected_at = Carbon::now()->toDateTimeString();
        $product->crop_rejected_by = $request->isXmlHttpRequest() ? 109 : Auth::id();
        $product->save();

        // Store listing history
        $listingHistory             = new ListingHistory();
        $listingHistory->action     = 'SKIP_SEQUENCE';
        $listingHistory->product_id = $product->id;
        $listingHistory->user_id    = Auth::user()->id;
        $listingHistory->content    = ['action' => 'SKIP_SEQUENCE', 'page' => 'Sequence Approver'];
        $listingHistory->save();

        // Return JSON if the request is ajax
        if ($request->isXmlHttpRequest()) {
            return response()->json([
                'status' => 'success',
            ]);
        }

        // Redirect
        return redirect()->action([\App\Http\Controllers\ProductCropperController::class, 'showCropVerifiedForOrdering']);
    }

    public function rejectSequence($id, Request $request)
    {
        $product                    = Product::findOrFail($id);
        $product->is_crop_ordered   = 0;
        $product->is_order_rejected = 1;
        $product->is_approved       = 0;
        $product->save();

        $l             = new ListingHistory();
        $l->action     = 'REJECT_SEQUENCE';
        $l->product_id = $product->id;
        $l->user_id    = Auth::user()->id;
        $l->content    = ['action' => 'REJECT_SEQUENCE', 'page' => 'Approved Listing'];
        $l->save();

        if ($request->get('senior') && $product) {
            $s                 = new UserProductFeedback();
            $s->user_id        = $product->crop_ordered_by;
            $s->senior_user_id = Auth::user()->id;
            $s->action         = 'CROP_SEQUENCED_REJECTED';
            $s->content        = ['action' => 'CROP_SEQUENCED_REJECTED', 'previous_action' => 'CROP_SEQUENCED', 'current_action' => 'CROP_SEQUENCED_REJECTED', 'message' => 'Your sequencing has been rejected.'];
            $s->message        = 'Your crop sequence was not proper. Please check for this one';
            $s->product_id     = $product->id;
            $s->save();
        }

        return response()->json([
            'status' => 'success',
        ]);
    }

    public function saveSequence($id, Request $request)
    {
        // Find product or fail
        $product = Product::findOrFail($id);

        // Is this product currently being sequenced
        if ($product->status_id != StatusHelper::$isBeingSequenced) {
            // Redirect
            return redirect()->action([\App\Http\Controllers\ProductCropperController::class, 'showCropVerifiedForOrdering']);
        }

        $medias = $request->get('images');
        foreach ($medias as $mediaId => $order) {
            if ($order !== null) {
                DB::table('mediables')->where('media_id', $mediaId)->where('mediable_type', \App\Product::class)->update([
                    'order' => $order,
                ]);
            } else {
                DB::table('mediables')->where('media_id', $mediaId)->where('mediable_type', \App\Product::class)->delete();
                DB::table('media')->where('id', $mediaId)->delete();
            }
        }

        // Update product
        $product->status_id       = StatusHelper::$imageEnhancement;
        $product->crop_ordered_by = Auth::user()->id;
        $product->crop_ordered_at = Carbon::now()->toDateTimeString();
        $product->save();

        $listingHistory             = new ListingHistory();
        $listingHistory->action     = 'CROP_SEQUENCED';
        $listingHistory->user_id    = Auth::user()->id;
        $listingHistory->product_id = $product->id;
        $listingHistory->content    = ['action' => 'CROP_SEQUENCED', 'page' => 'Crop Sequencer'];
        $listingHistory->save();

        return redirect()->action([\App\Http\Controllers\ProductCropperController::class, 'showCropVerifiedForOrdering'])->with('message', 'Previous image ordered successfully!');
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/ProductInventoryController.php 
Content: <?php

namespace App\Http\Controllers;

use DB;
use App\User;
use App\Brand;
use App\Stage;
use DataTables;
use App\Helpers;
use App\Product;
use App\Setting;
use App\Category;
use App\Supplier;
use Carbon\Carbon;
use Dompdf\Dompdf;
use App\ColorReference;
use Illuminate\Http\Request;
use App\SupplierBrandDiscount;
use App\Models\DataTableColumn;
use App\Imports\InventoryImport;
use App\ProductDiscountExcelFile;
use App\Jobs\UpdateFromSizeManager;
use App\SupplierDiscountLogHistory;
use PhpOffice\PhpSpreadsheet\Reader\Xls;
use Illuminate\Support\Facades\Validator;
use PhpOffice\PhpSpreadsheet\Reader\Xlsx;
use Plank\Mediable\Facades\MediaUploader as MediaUploader;

class ProductInventoryController extends Controller
{
    public function index(Stage $stage)
    {
        $products = Product::latest()
            ->where('stock', '>=', 1)
            ->whereNull('dnf')
            ->select(['id', 'name', 'sku', 'size', 'price_inr_special', 'brand', 'supplier', 'isApproved', 'stage', 'status', 'is_scraped', 'created_at', 'category', 'color']);

        $products_count = $products->count();
        $products       = $products->paginate(Setting::get('pagination'));

        $roletype = 'Inventory';

        $category_selection = Category::attr(['name' => 'category[]', 'class' => 'form-control'])
            ->selected(1)
            ->renderAsDropdown();

        $categoryAll = Category::where('parent_id', 0)->get();
        foreach ($categoryAll as $category) {
            $categoryArray[] = ['id' => $category->id, 'value' => $category->title];
            $childs          = Category::where('parent_id', $category->id)->get();
            foreach ($childs as $child) {
                $categoryArray[] = ['id' => $child->id, 'value' => $category->title . ' ' . $child->title];
                $grandChilds     = Category::where('parent_id', $child->id)->get();
                if ($grandChilds != null) {
                    foreach ($grandChilds as $grandChild) {
                        $categoryArray[] = ['id' => $grandChild->id, 'value' => $category->title . ' ' . $child->title . ' ' . $grandChild->title];
                    }
                }
            }
        }

        $sampleColors = ColorReference::select('erp_color')->groupBy('erp_color')->get();

        $categoryArray = [];

        return view('partials.grid', compact('products', 'products_count', 'roletype', 'category_selection', 'categoryArray', 'sampleColors'))
            ->with('i', (request()->input('page', 1) - 1) * 10);
    }

    // Function to flatten the 3-level array into a 2-level array
    public function flattenCategories($array, &$result = [])
    {
        foreach ($array as $key => $value) {
            if (is_array($value)) {
                $result[$key] = 0;
                // Recursive call to flatten the next level
                $this->flattenCategories($value, $result);
            } else {
                // Assign the value to the flattened array
                $result[$key] = $value;
            }
        }
    }

    public function list(Request $request, Stage $stage)
    {
        $category_tree = [];

        foreach (Category::all() as $category) {
            if ($category->parent_id != 0) {
                $parent = $category->parent;
                if ($parent->parent_id != 0) {
                    if (isset($category_tree[$parent->parent_id][$parent->id]) && is_array($category_tree[$parent->parent_id][$parent->id])) {
                        // Make sure the third level exists before assignment
                        $category_tree[$parent->parent_id][$parent->id][$category->id] = 0; // Change 0 to the desired value
                    } else {
                        // If the third level doesn't exist, initialize it as an empty array before assignment
                        $category_tree[$parent->parent_id][$parent->id] = [$category->id => 0]; // Change 0 to the desired value
                    }
                } else {
                    $category_tree[$parent->id][$category->id] = 0;
                }
            }
        }

        // Flatten the $category_tree array into a 2-level array
        // Loop through each category and flatten its subcategories
        foreach ($category_tree as $category_id => $subcategories) {
            // Create a temporary array to store the flattened subcategories
            $flattened_subcategories = [];
            $this->flattenCategories($subcategories, $flattened_subcategories);

            // Replace the first level keys with the flattened subcategories
            $category_tree[$category_id] = $flattened_subcategories;
        }

        $brands_array    = Brand::getAll();
        $products_brands = Product::latest()
            ->where('stage', '>=', $stage->get('Approver'))
            ->whereNull('dnf')
            ->where('stock', '>=', 1)->get()
            ->groupBy([function ($query) use ($brands_array) {
                if (isset($brands_array[$query->brand])) {
                    return $brands_array[$query->brand];
                }

                return 'Unknown Brand';
            }, 'supplier', 'category']);

        $inventory_data = [];

        foreach ($products_brands as $brand_name => $suppliers) {
            foreach ($suppliers as $supplier_name => $categories) {
                $tree                                        = [];
                $inventory_data[$brand_name][$supplier_name] = $category_tree;

                foreach ($categories as $category_id => $products) {
                    $category = Category::find($category_id);
                    if ($category !== null && $category->parent_id != 0) {
                        $parent = $category->parent;
                        if (isset($parent->parent_id) && $parent->parent_id != 0) {
                            @$inventory_data[$brand_name][$supplier_name][$parent->parent_id][$parent->id] += count($products);
                        } else {
                            @$inventory_data[$brand_name][$supplier_name][$parent->id][$category->id] += count($products);
                        }
                    }
                }
            }
        }

        $categories_array = [];
        $categories       = Category::all();

        foreach ($categories as $category) {
            $categories_array[$category->id] = $category->title;
        }

        return view('products.list', compact('inventory_data', 'categories_array'))
            ->with('i', (request()->input('page', 1) - 1) * 10);
    }

    public function edit(Product $productlister)
    {
        return redirect(route('products.show', $productlister->id));
    }

    public function stock(Product $product, Request $request, Stage $stage)
    {
        $this->validate($request, [
            'stock' => 'required|numeric|min:0',
        ]);

        $result         = $this->magentoSoapUpdateStock($product, $request->input('stock'));
        $product->stock = $request->input('stock');
        $product->stage = $stage->get('Inventory');
        $product->save();

        if ($result) {
            ActivityConroller::create($product->id, 'inventory', 'create');

            return back()->with('success', 'Product inventory has been updated');
        }

        return back()->with('error', 'Error Occured while uploading stock');
    }

    public function instock(Request $request)
    {
        $data         = [];
        $term         = $request->input('term');
        $data['term'] = $term;

        $productQuery = Product::latest()->with(['brands', 'product_category']);

        if (isset($request->brand) && $request->brand[0] != null) {
            $productQuery  = $productQuery->whereIn('brand', $request->brand);
            $data['brand'] = $request->brand[0];
        }
        if (isset($request->color) && is_array($request->color) && $request->color[0] != null) {
            $productQuery  = $productQuery->whereIn('color', $request->color);
            $data['color'] = $request->color;
        }

        if (! empty($request->category) && $request->category[0] != 1) {
            $category          = Category::with('childs.childLevelSencond')->find($request->category[0]);
            $category_children = [];
            if ($category->childs->count()) {
                $childs = $category->childs;
                foreach ($childs as $child) {
                    if ($child->childLevelSencond->count()) {
                        $grandChilds = $child->childLevelSencond;
                        foreach ($grandChilds as $grandChild) {
                            $category_children[] = $grandChild->id;
                        }
                    } else {
                        $category_children[] = $child->id;
                    }
                }
            } else {
                $category_children[] = $category->id;
            }
            $productQuery->whereIn('category', $category_children);
            $data['category'] = $request->category[0];
        }

        if (isset($request->location) && $request->location[0] != null) {
            $productQuery->whereIn('location', $request->location);

            $data['location'] = $request->location;
        }

        if (isset($request->no_locations) && $request->no_locations) {
            $productQuery->whereNull('location');

            $data['no_locations'] = true;
        }

        $productQuery->when(! empty($term), function ($e) use ($term) {
            $e->where(function ($q) use ($term) {
                $q->where('sku', 'LIKE', "%$term%")
                    ->orWhereHas('brands', function ($a) use ($term) {
                        $a->where('name', 'LIKE', "%$term%");
                    })->orwhereHas('product_category', function ($q) use ($term) {
                        $q->where('title', 'LIKE', "%$term%");
                    })
                    ->orWhere(function ($q) use ($term) {
                        $arr_id = Product::STOCK_STATUS;
                        $key    = array_search(ucwords($term), $arr_id);
                        $q->where('stock_status', $key);
                    });
            });
        });

        $selected_brand = null;
        if ($request->brand) {
            $selected_brand = Brand::select('id', 'name')->whereIn('id', $request->brand)->get();
        }
        $data['selected_brand'] = $selected_brand;

        $selected_categories = $request->category ? $request->category : 1;

        $data['category_selection'] = Category::attr(['name' => 'category[]', 'class' => 'form-control'])
            ->selected($selected_categories)
            ->renderAsDropdown();

        $stockStatus = $request->get('stock_status', '');
        if (! empty($stockStatus)) {
            $productQuery->where('stock_status', $stockStatus);
        }

        if ($request->get('shoe_size', false)) {
            $productQuery->where('products.size', 'like', '%' . $request->get('shoe_size') . '%');
        }

        $productQuery->where(function ($query) {
            $query->where('purchase_status', '!=', 'Delivered')->orWhereNull('purchase_status');
        });

        if ($request->get('in_pdf') === 'on') {
            $data['products'] = $productQuery->whereRaw("(products.id IN (SELECT product_id FROM product_suppliers WHERE supplier_id = 11) OR (location IS NOT NULL AND location != ''))")->get();
        } else {
            $data['products'] = $productQuery->whereRaw("(products.id IN (SELECT product_id FROM product_suppliers WHERE supplier_id = 11) OR (location IS NOT NULL AND location != ''))")->paginate(Setting::get('pagination'));
        }

        $data['date']        = $request->date ? $request->date : '';
        $data['type']        = $request->type ? $request->type : '';
        $data['customer_id'] = $request->customer_id ? $request->customer_id : '';
        $data['locations']   = (new \App\ProductLocation())->pluck('name')->toArray() + ['In-Transit' => 'In-Transit'];

        $data['new_category_selection'] = Category::attr(['name' => 'category', 'class' => 'form-control', 'id' => 'product-category'])
            ->renderAsDropdown();

        $data['category_tree']    = [];
        $data['categories_array'] = [];

        foreach (Category::with('parent')->get() as $category) {
            if ($category->parent_id != 0) {
                $parent = $category->parent;
                if ($parent) {
                    if ($parent->parent_id != 0) {
                        @$data['category_tree'][$parent->parent_id][$parent->id][$category->id];
                    } else {
                        $data['category_tree'][$parent->id][$category->id] = $category->id;
                    }
                }
            }

            $data['categories_array'][$category->id] = $category->parent_id;
        }

        if ($request->get('in_pdf') === 'on') {
            set_time_limit(0);
            $html = view('instock.instock_pdf', $data);

            $pdf = new Dompdf();
            $pdf->loadHtml($html);
            $pdf->render();
            $pdf->stream('instock.pdf');

            return;
        }

        return view('instock.index', $data);
    }

    public function inDelivered(Request $request)
    {
        $data         = [];
        $term         = $request->input('term');
        $data['term'] = $term;

        $productQuery = (new Product())->newQuery()->latest();
        if ($request->brand[0] != null) {
            $productQuery  = $productQuery->whereIn('brand', $request->brand);
            $data['brand'] = $request->brand[0];
        }

        if ($request->color[0] != null) {
            $productQuery  = $productQuery->whereIn('color', $request->color);
            $data['color'] = $request->color[0];
        }

        if (isset($request->category) && $request->category[0] != 1) {
            $is_parent         = Category::isParent($request->category[0]);
            $category_children = [];

            if ($is_parent) {
                $childs = Category::find($request->category[0])->childs()->get();

                foreach ($childs as $child) {
                    $is_parent = Category::isParent($child->id);

                    if ($is_parent) {
                        $children = Category::find($child->id)->childs()->get();

                        foreach ($children as $chili) {
                            array_push($category_children, $chili->id);
                        }
                    } else {
                        array_push($category_children, $child->id);
                    }
                }
            } else {
                array_push($category_children, $request->category[0]);
            }

            $productQuery = $productQuery->whereIn('category', $category_children);

            $data['category'] = $request->category[0];
        }

        if (isset($request->price) && $request->price != null) {
            $exploded = explode(',', $request->price);
            $min      = $exploded[0];
            $max      = $exploded[1];

            if ($min != '0' || $max != '10000000') {
                $productQuery = $productQuery->whereBetween('price_inr_special', [$min, $max]);
            }

            $data['price'][0] = $min;
            $data['price'][1] = $max;
        }

        if (trim($term) != '') {
            $productQuery = $productQuery->where(function ($query) use ($term) {
                $query->orWhere('sku', 'LIKE', "%$term%")
                    ->orWhere('id', 'LIKE', "%$term%");
            });

            if ($term == -1) {
                $productQuery = $productQuery->where(function ($query) {
                    return $query->orWhere('isApproved', -1);
                });
            }

            if (Brand::where('name', 'LIKE', "%$term%")->first()) {
                $brand_id     = Brand::where('name', 'LIKE', "%$term%")->first()->id;
                $productQuery = $productQuery->where(function ($query) use ($brand_id) {
                    return $query->orWhere('brand', 'LIKE', "%$brand_id%");
                });
            }

            if ($category = Category::where('title', 'LIKE', "%$term%")->first()) {
                $category_id  = $category = Category::where('title', 'LIKE', "%$term%")->first()->id;
                $productQuery = $productQuery->where(function ($query) use ($term) {
                    return $query->orWhere('category', CategoryController::getCategoryIdByName($term));
                });
            }
        }

        $selected_categories = $request->category ? $request->category : 1;

        $data['category_selection'] = Category::attr(['name' => 'category[]', 'class' => 'form-control select-multiple2'])
            ->selected($selected_categories)
            ->renderAsDropdown();

        if ($request->get('shoe_size', false)) {
            $productQuery = $productQuery->where('products.size', 'like', '%' . $request->get('shoe_size') . '%');
        }

        $data['products'] = $productQuery->where('products.purchase_status', '=', 'Delivered')->paginate(Setting::get('pagination'));

        return view('indelivered.index', $data);
    }

    public function magentoSoapUpdateStock($product, $stockQty)
    {
        $options = [
            'trace'              => true,
            'connection_timeout' => 120,
            'wsdl_cache'         => WSDL_CACHE_NONE,
        ];
        $proxy     = new \SoapClient(config('magentoapi.url'), $options);
        $sessionId = $proxy->login(config('
		api.user'), config('magentoapi.password'));

        $sku    = $product->sku . $product->color;
        $result = false;

        if (! empty($product->size)) {
            $sizes_array = explode(',', $product->size);

            foreach ($sizes_array as $size) {
                $error_message = '';

                try {
                    $result = $proxy->catalogInventoryStockItemUpdate($sessionId, $sku . '-' . $size, [
                        'qty'         => $stockQty,
                        'is_in_stock' => $stockQty ? 1 : 0,
                    ]);
                } catch (Exception $e) {
                    $error_message = $e->getMessage();
                }

                if ($error_message == 'Product not exists.') {
                    $product->isUploaded = 0;
                    $product->isFinal    = 0;
                    $product->save();
                }
            }

            $error_message = '';
            try {
                $result = $proxy->catalogInventoryStockItemUpdate($sessionId, $sku, [
                    'is_in_stock' => $stockQty ? 1 : 0,
                ]);
            } catch (Exception $e) {
                $error_message = $e->getMessage();
            }

            if ($error_message == 'Product not exists.') {
                $product->isUploaded = 0;
                $product->isFinal    = 0;
                $product->save();
            }
        } else {
            $error_message = '';

            try {
                $result = $proxy->catalogInventoryStockItemUpdate($sessionId, $sku, [
                    'qty'         => $stockQty,
                    'is_in_stock' => $stockQty ? 1 : 0,
                ]);
            } catch (Exception $e) {
                $error_message = $e->getMessage();
            }

            if ($error_message == 'Product not exists.') {
                $product->isUploaded = 0;
                $product->isFinal    = 0;
                $product->save();
            }
        }

        return $result;
    }

    public function import(Request $request)
    {
        $this->validate($request, [
            'file' => 'required',
        ]);

        $array = (new InventoryImport)->toArray($request->file('file'));

        $new_array    = [];
        $brands_array = Helpers::getUserArray(Brand::all());

        foreach ($array[0] as $key => $item) {
            $new_array[$item['modellovariante']][] = $item;
        }

        foreach ($new_array as $sku => $items) {
            $formatted_sku = str_replace(' ', '', $sku);

            if ($product = Product::where('sku', $formatted_sku)->first()) {
                if (in_array($items[0]['brand'], $brands_array)) {
                    if (count($items) > 1) {
                        $sizes                = '';
                        $product->stock       = 1;
                        $product->import_date = Carbon::now();
                        $product->status      = 3; // Import Update status

                        foreach ($items as $key => $item) {
                            $size = str_replace('½', '.5', $item['taglia']);

                            if ($key == 0) {
                                $sizes .= $size;
                            } else {
                                $sizes .= ',' . $size;
                            }
                        }

                        if (! preg_match('/UNI/', $sizes)) {
                            $product->size = $sizes;
                        }

                        $product->save();
                    } else {
                        $product->stock       = 1;
                        $product->import_date = Carbon::now();
                        $product->status      = 3; // Import Update status

                        foreach ($items as $key => $item) {
                            $size = str_replace('½', '.5', $item['taglia']);
                        }

                        if (! preg_match('/UNI/', $size)) {
                            $product->size = $size;
                        }

                        $product->save();
                    }
                }
            } else {
                if (in_array($items[0]['brand'], $brands_array)) {
                    if (count($items) > 1) {
                        $sizes                = '';
                        $product              = new Product;
                        $product->sku         = $formatted_sku;
                        $product->brand       = array_search($items[0]['brand'], $brands_array);
                        $product->stage       = 3;
                        $product->stock       = 1;
                        $product->import_date = Carbon::now();
                        $product->status      = 2; // Import Create status

                        foreach ($items as $key => $item) {
                            $size = str_replace('½', '.5', $item['taglia']);

                            if ($key == 0) {
                                $sizes .= $size;
                            } else {
                                $sizes .= ',' . $size;
                            }
                        }

                        if (! preg_match('/UNI/', $sizes)) {
                            $product->size = $sizes;
                        }

                        $product->save();
                    } else {
                        $product              = new Product;
                        $product->sku         = $formatted_sku;
                        $product->brand       = array_search($items[0]['brand'], $brands_array);
                        $product->stage       = 3;
                        $product->stock       = 1;
                        $product->import_date = Carbon::now();
                        $product->status      = 2; // Import Create status

                        foreach ($items as $key => $item) {
                            $size = str_replace('½', '.5', $item['taglia']);
                        }

                        if (! preg_match('/UNI/', $size)) {
                            $product->size = $sizes;
                        }

                        $product->save();
                    }
                }
            }
        }

        return back()->with('success', 'You have successfully imported Inventory');
    }

    public function instructionCreate()
    {
        $productId = request()->get('product_id', 0);
        $users     = \App\User::all()->pluck('name', 'id');
        $product   = \App\Product::where('id', $productId)->first();
        $locations = \App\ProductLocation::all()->pluck('name', 'name');
        $couriers  = \App\Courier::all()->pluck('name', 'name');
        $order     = [];
        if ($product) {
            $order = \App\OrderProduct::where('product_id', $product->id)
                ->join('orders as o', 'o.id', 'order_products.order_id')
                ->select(['o.id', \DB::raw("concat(o.id,' => ',o.client_name) as client_name")])->pluck('client_name', 'id');
        }

        $reply_categories = \App\ReplyCategory::whereHas('product_dispatch')->get();

        return view('instock.instruction_create', compact(['productId', 'users', 'order', 'locations', 'couriers', 'reply_categories']));
    }

    public function instruction()
    {
        $params = request()->all();

        // validate incoming request

        $validator = Validator::make($params, [
            'product_id'          => 'required',
            'location_name'       => 'required',
            'instruction_type'    => 'required',
            'instruction_message' => 'required',
            'courier_name'        => 'required',
            'courier_details'     => 'required',
            'date_time'           => 'required',
        ]);

        if ($validator->fails()) {
            return response()->json(['code' => 0, 'errors' => $validator->messages()]);
        }

        // start to store first location as per the request
        $product     = \App\Product::where('id', $params['product_id'])->first();
        $instruction = new \App\Instruction();

        if ($params['instruction_type'] == 'dispatch') {
            $orderId = request()->get('order_id', 0);
            if ($orderId > 0) {
                $order = \App\Order::where('id', $params['order_id'])->first();
                if ($order) {
                    $instruction->customer_id = $order->customer_id;
                    $order->order_status      = 'Delivered';
                    $order->order_status_id   = \App\Helpers\OrderHelper::$delivered;
                    $order->save();

                    if ($order->customer) {
                        $customer = $order->customer;
                    }
                }
            } else {
                $instruction->customer_id = request()->get('customer_id', 0);
            }

            $customer = ($instruction->customer) ? $instruction->customer->name : '';

            $assign_to = request()->get('assign_to', 0);

            if ($assign_to > 0) {
                $user = \App\User::where('id', $assign_to)->first();
            }
            // if customer object found then send message
            if (! empty($user)) {
                $extraString = '';

                // check if any date time set
                if (! empty($params['date_time'])) {
                    $extraString = ' on ' . $params['date_time'];
                }

                // set for pending amount
                if (! empty($params['pending_amount'])) {
                    $extraString .= ' and ' . $params['pending_amount'] . ' to be collected';
                }
                // send message
                $messageData = implode("\n", [
                    "{$product->name} to be delivered to {$customer} {$extraString}",
                    $params['courier_name'],
                    $params['courier_details'],
                ]);

                $params['approved'] = 1;
                $params['message']  = $messageData;
                $params['status']   = 2;
                $params['user_id']  = $user->id;

                app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($user->phone, $user->whatsapp_number, $messageData);
                $chat_message = \App\ChatMessage::create($params);
                if ($product->hasMedia(config('constants.media_tags'))) {
                    foreach ($product->getMedia(config('constants.media_tags')) as $image) {
                        app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($user->phone, $user->whatsapp_number, null, getMediaUrl($image));
                        $chat_message->attachMedia($image, config('constants.media_tags'));
                    }
                }
            }
        } elseif ($params['instruction_type'] == 'location') {
            if ($product) {
                $product->location = 'In-Transit'; //$params["location_name"];
                $product->save();

                $params['location_name'] = 'In-Transit - ' . $params['location_name'];

                $user = \App\User::where('id', $params['assign_to'])->first();
                if ($user) {
                    // send location message
                    $pendingAmount = (! empty($params['pending_amount'])) ? ' and Pending amount : ' . $params['pending_amount'] : '';
                    $messageData   = implode("\n", [
                        "Pls. Despatch {$product->name} to " . $params['location_name'] . $pendingAmount,
                        $params['instruction_message'],
                        $params['courier_name'],
                        $params['courier_details'],
                    ]);

                    $params['approved'] = 1;
                    $params['message']  = $messageData;
                    $params['status']   = 2;
                    $params['user_id']  = $user->id;

                    app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($user->phone, $user->whatsapp_number, $messageData);
                    $chat_message = \App\ChatMessage::create($params);
                    if ($product->hasMedia(config('constants.media_tags'))) {
                        foreach ($product->getMedia(config('constants.media_tags')) as $image) {
                            app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($user->phone, $user->whatsapp_number, null, getMediaUrl($image));
                            $chat_message->attachMedia($image, config('constants.media_tags'));
                        }
                    }
                }
            }
        }

        $instruction->category_id   = 7;
        $instruction->instruction   = $params['instruction_message'];
        $instruction->assigned_from = \Auth::user()->id;
        $instruction->assigned_to   = $params['assign_to'];
        $instruction->product_id    = $params['product_id'];
        $instruction->order_id      = isset($params['order_id']) ? $params['order_id'] : null;
        $instruction->save();

        $productHistory = new \App\ProductLocationHistory();
        $productHistory->fill($params);
        $productHistory->created_by          = \Auth::user()->id;
        $productHistory->instruction_message = $params['instruction_message'];
        $productHistory->save();

        return response()->json(['code' => 1, 'message' => 'Done']);
    }

    public function locationHistory()
    {
        $productId = request()->get('product_id', 0);
        $locations = (new \App\ProductLocation())->pluck('name')->toArray();
        $product   = \App\Product::where('id', $productId)->First();
        $history   = \App\ProductLocationHistory::where('product_id', $productId)
            ->orderBy('date_time', 'desc')
            ->get();

        return view('instock.history_list', compact(['history', 'locations', 'product']));
    }

    public function dispatchCreate()
    {
        $productId = request()->get('product_id', 0);

        return view('instock.dispatch_create', compact(['productId', 'users', 'order']));
    }

    public function dispatchStore(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'product_id'      => 'required',
            'modeof_shipment' => 'required',
            'delivery_person' => 'required',
            'awb'             => 'required',
            'eta'             => 'required',
        ]);

        if ($validator->fails()) {
            return response()->json(['code' => 0, 'errors' => $validator->messages()]);
        }

        $productDispatch = new \App\ProductDispatch;
        $productDispatch->fill($request->all());
        $productDispatch->save();

        $uploaded_images = [];

        if ($request->hasFile('file')) {
            try {
                foreach ($request->file('file') as $image) {
                    $media = MediaUploader::fromSource($image)->toDirectory('dispatch-images')->upload();
                    array_push($uploaded_images, $media);
                    $productDispatch->attachMedia($media, config('constants.media_tags'));
                }
            } catch (Exception $exception) {
                //
            }
        }

        if ($request->get('product_id') > 0) {
            $product                  = \App\Product::where('id', $request->get('product_id'))->first();
            $product->purchase_status = 'Delivered';
            $product->location        = null;
            $product->save();
            $instruction = \App\Instruction::where('product_id', $request->get('product_id'))->where('customer_id', '>', '0')->orderBy('id', 'desc')->first();
            if ($instruction) {
                $customer = \App\Customer::where('id', $instruction->customer_id)->first();

                // if customer object found then send message
                if (! empty($customer)) {
                    $params      = [];
                    $messageData = implode("\n", [
                        "We have Despatched your {$product->name} by {$productDispatch->delivery_person}",
                        "AWB : {$request->awb}",
                        "Mode Of Shipment  : {$request->modeof_shipment}",
                    ]);

                    $params['approved']    = 1;
                    $params['message']     = $messageData;
                    $params['status']      = 2;
                    $params['customer_id'] = $customer->id;
                    $chat_message          = \App\ChatMessage::create($params);

                    // if product has image then send message with image otherwise send with photo
                    if ($productDispatch->hasMedia(config('constants.media_tags'))) {
                        foreach ($productDispatch->getMedia(config('constants.media_tags')) as $image) {
                            $url = createProductTextImage($image->getAbsolutePath(), 'product-dispatch', $messageData, $color = '000000', $fontSize = '15', $needAbs = false);
                            if (! empty($url)) {
                                app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($customer->phone, $customer->whatsapp_number, null, $url);
                            }
                            $chat_message->attachMedia($image, config('constants.media_tags'));
                        }
                    } else {
                        app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($customer->phone, $customer->whatsapp_number, $messageData);
                    }
                }
            }
        }

        return response()->json(['code' => 1, 'message' => 'Done']);
    }

    public function locationChange(Request $request)
    {
        $product = \App\Product::where('id', $request->get('product_id', 0))->first();

        if ($product) {
            $product->location = $request->get('location', $product->location);
            $product->save();

            $productHistory = new \App\ProductLocationHistory();
            $params         = [
                'location_name' => $product->location,
                'product_id'    => $product->id,
                'date_time'     => date('Y-m-d H:i:s'),
            ];
            $productHistory->fill($params);
            $productHistory->created_by = \Auth::user()->id;
            $productHistory->save();
        }

        return response()->json(['code' => 1, 'productHistory' => $productHistory, 'userName' => $productHistory->user->name]);
    }

    public function updateField(Request $request)
    {
        $id         = $request->get('id');
        $fieldName  = $request->get('field_name', '');
        $fieldValue = $request->get('field_value', '');

        if ($id > 0 && ! empty($fieldValue) && ! empty($fieldName)) {
            $product = \App\Product::where('id', $id)->first();
            if ($product) {
                $product->$fieldName = $fieldValue;
                $product->save();

                return response()->json(['code' => 200, 'message' => $fieldName . ' updated successfully']);
            }
        }

        return response()->json(['code' => 500, 'message' => 'Oops, Required field is missing']);
    }

    public function inventoryList(Request $request)
    {
        ini_set('memory_limit', -1);
        $filter_data    = $request->input();
        $inventory_data = \App\Product::getProducts($filter_data);

        // started to update status request
        if ($request->get('update_status', false) == true) {
            foreach ($inventory_data as $upd) {
                $nups = $request->get('status_id_update', 0);
                if ($nups) {
                    $upd->status_id = $nups;
                    if ($nups != \App\Helpers\StatusHelper::$requestForExternalScraper) {
                        $upd->sub_status_id = null;
                    }
                    $upd->save();
                }
            }

            return response()->json(['code' => 200, 'data' => [], 'message' => 'Request has been updated successfully']);
        }
        // end for update request status

        $query = DB::table('products as p')
            ->selectRaw('
				   sum(CASE WHEN p.category = ""
			           OR p.category IS NULL THEN 1 ELSE 0 END) AS missing_category,
			       sum(CASE WHEN p.color = ""
			           OR p.color IS NULL THEN 1 ELSE 0 END) AS missing_color,
			       sum(CASE WHEN p.composition = ""
			           OR p.composition IS NULL THEN 1 ELSE 0 END) AS missing_composition,
			       sum(CASE WHEN p.name = ""
			           OR p.name IS NULL THEN 1 ELSE 0 END) AS missing_name,
			       sum(CASE WHEN p.short_description = ""
			           OR p.short_description IS NULL THEN 1 ELSE 0 END) AS missing_short_description,
			       sum(CASE WHEN p.price = ""
			           OR p.price IS NULL THEN 1 ELSE 0 END) AS missing_price,
			       sum(CASE WHEN p.size = ""
			           OR p.size IS NULL AND p.measurement_size_type IS NULL THEN 1 ELSE 0 END) AS missing_size,
			       sum(CASE WHEN p.measurement_size_type = ""
			           OR p.measurement_size_type AND p.size = "" OR p.size IS NULL THEN 1 ELSE 0 END) AS missing_measurement,
			       `p`.`supplier`
				')
            ->where('p.supplier', '<>', '');
        $query = $query->groupBy('p.supplier')->havingRaw('missing_category > 1 or missing_color > 1 or missing_composition > 1 or missing_name > 1 or missing_short_description >1 ');

        $reportData = $query->get();

        $scrapped_query = DB::table('scraped_products as p')
            ->selectRaw('
				   sum(CASE WHEN p.category = ""
			           OR p.category IS NULL THEN 1 ELSE 0 END) AS missing_category,
			       sum(CASE WHEN p.color = ""
			           OR p.color IS NULL THEN 1 ELSE 0 END) AS missing_color,
			       sum(CASE WHEN p.composition = ""
			           OR p.composition IS NULL THEN 1 ELSE 0 END) AS missing_composition,
			       sum(CASE WHEN p.title = ""
			           OR p.title IS NULL THEN 1 ELSE 0 END) AS missing_name,
			       sum(CASE WHEN p.description = ""
			           OR p.description IS NULL THEN 1 ELSE 0 END) AS missing_short_description,
			       sum(CASE WHEN p.price = ""
			           OR p.price IS NULL THEN 1 ELSE 0 END) AS missing_price,
			       sum(CASE WHEN p.size = ""
			           OR p.size IS NULL THEN 1 ELSE 0 END) AS missing_size,
			       `p`.`supplier`,
			       `p`.`website`
				')
            ->where('p.website', '<>', '');
        $scrapped_query = $scrapped_query->groupBy('p.website')->havingRaw('missing_category > 1 or missing_color > 1 or missing_composition > 1 or missing_name > 1 or missing_short_description >1 ');

        $scrappedReportData   = $scrapped_query->get();
        $inventory_data_count = $inventory_data->total();
        $status_list          = \App\Helpers\StatusHelper::getStatus();

        foreach ($inventory_data as $product) {
            $product['medias'] = \App\Mediables::getMediasFromProductId($product['id']);
            $product_history   = $product->productstatushistory;

            foreach ($product_history as $each) {
                $each['old_status'] = isset($status_list[$each['old_status']]) ? $status_list[$each['old_status']] : 0;
                $each['new_status'] = isset($status_list[$each['new_status']]) ? $status_list[$each['new_status']] : 0;
            }
            $product['status_history'] = $product_history;
        }

        //for filter

        $sku         = [];
        $pname       = [];
        $brandsArray = [];
        $arr         = DB::table('products')->select('name', 'sku')->get();
        foreach ($arr as $a) {
            $sku[$a->sku]    = $a->sku;
            $pname[$a->name] = $a->name;
        }

        $brands = DB::table('brands')->select('id', 'name')->get();
        foreach ($brands as $brand) {
            $brandsArray[$brand->id] = $brand->name;
        }

        $selected_brand = null;
        $selected_brand = Brand::select('id', 'name')->get();

        $selected_supplier = null;
        $selected_supplier = Supplier::select('id', 'supplier')->get();

        $selected_categories = null;
        $selected_categories = Category::select('id', 'title')->get();

        $brands_names   = $brandsArray;
        $products_names = $pname;
        $products_sku   = $sku;

        asort($products_names);
        asort($products_sku);

        $products_categories = [];
        $datatableModel      = DataTableColumn::select('column_name')->where('user_id', auth()->user()->id)->where('section_name', 'inventory-list')->first();

        $dynamicColumnsToShowPi = [];
        if (! empty($datatableModel->column_name)) {
            $hideColumns            = $datatableModel->column_name ?? '';
            $dynamicColumnsToShowPi = json_decode($hideColumns, true);
        }

        if (request()->ajax()) {
            return view('product-inventory.inventory-list-partials.load-more', compact('inventory_data', 'dynamicColumnsToShowPi'));
        }

        return view('product-inventory.inventory-list', compact('inventory_data', 'products_names', 'products_categories', 'products_sku', 'status_list', 'inventory_data_count', 'reportData', 'scrappedReportData', 'selected_brand', 'selected_supplier', 'selected_categories', 'dynamicColumnsToShowPi'));
    }

    public function columnVisbilityUpdate(Request $request)
    {
        $userCheck = DataTableColumn::where('user_id', auth()->user()->id)->where('section_name', 'postman-listing')->first();
        $result    = null;

        if ($userCheck) {
            $column               = DataTableColumn::find($userCheck->id);
            $column->section_name = 'inventory-list';
            $column->column_name  = json_encode($request->column_pi);
            $result               = $column->save();
        } else {
            $column               = new DataTableColumn();
            $column->section_name = 'inventory-list';
            $column->column_name  = json_encode($request->column_pi);
            $column->user_id      = auth()->user()->id;
            $result               = $column->save();
        }

        if (request()->ajax()) {
            return response()->json(['code' => 200, 'data' => $result, 'message' => 'Column Visibility Updated Successfully!']);
        }

        return redirect()->back()->with('success', 'Column Visibility Updated Successfully!');
    }

    public function inventoryListNew(Request $request)
    {
        $filter_data    = $request->input();
        $selected_brand = null;
        $term           = '';
        $inventory_data = \App\Product::join('store_website_product_attributes as swp', 'swp.product_id', 'products.id');
        if ($request->start_date != '') {
            $inventory_data->whereDate('products.created_at', '>=', $request->start_date);
        }
        if ($request->end_date != '') {
            $inventory_data->whereDate('products.created_at', '<=', $request->end_date);
        }
        $inventory_data = $inventory_data->leftJoin('brands as b', function ($q) {
            $q->on('b.id', 'products.brand');
        });
        $inventory_data = $inventory_data->leftJoin('categories as c', function ($q) {
            $q->on('c.id', 'products.category');
        });
        if (isset($request->brand_names)) {
            $inventory_data = $inventory_data->whereIn('brand', $request->brand_names);
            $selected_brand = Brand::select('id', 'name')->whereIn('id', $request->brand_names)->get();
        }

        if (isset($request->term)) {
            $term           = $request->term;
            $inventory_data = $inventory_data->where(function ($q) use ($term) {
                $q->where('products.name', 'LIKE', "%$term%")
                    ->orWhere('products.sku', 'LIKE', "%$term%")
                    ->orWhere('c.title', 'LIKE', "%$term%")
                    ->orWhere('b.name', 'LIKE', "%$term%")
                    ->orWhere('products.id', 'LIKE', "%$term%");
            });
        }

        $inventory_data = $inventory_data->select('products.*', 'b.name as brand_name');
        $inventory_data = $inventory_data->orderBy('swp.created_at', 'desc')->paginate(20);

        $inventory_data_count = $inventory_data->total();

        $totalProduct = \App\Supplier::join('scrapers as sc', 'sc.supplier_id', 'suppliers.id')
            ->join('scraped_products as sp', 'sp.website', 'sc.scraper_name')
            ->join('products as p', 'p.id', 'sp.product_id')
            ->where('suppliers.supplier_status_id', 1)
            ->select(\DB::raw('count(distinct p.id) as total'))->first();

        $totalProduct = ($totalProduct) ? $totalProduct->total : 0;

        $noofProductInStock = \App\Product::where('stock', '>', 0)->count();
        $productUpdated     = \App\InventoryStatusHistory::whereDate('date', '=', date('Y-m-d'))->select(\DB::raw('count(distinct product_id) as total'))->first();
        $productUpdated     = ($productUpdated) ? $productUpdated->total : 0;

        $history = \App\InventoryHistory::orderBy('date', 'DESC')->limit(7)->get();

        if (request()->ajax()) {
            return view('product-inventory.inventory-list-partials.load-more-new', compact('inventory_data', 'noofProductInStock', 'productUpdated', 'totalProduct', 'selected_brand', 'term'));
        }

        return view('product-inventory.inventory-list-new', compact('inventory_data', 'inventory_data_count', 'noofProductInStock', 'productUpdated', 'totalProduct', 'history', 'selected_brand', 'term'));
    }

    public function downloadReport()
    {
        $query = DB::table('products as p')
            ->selectRaw('
				   sum(CASE WHEN p.category = ""
			           OR p.category IS NULL THEN 1 ELSE 0 END) AS missing_category,
			       sum(CASE WHEN p.color = ""
			           OR p.color IS NULL THEN 1 ELSE 0 END) AS missing_color,
			       sum(CASE WHEN p.composition = ""
			           OR p.composition IS NULL THEN 1 ELSE 0 END) AS missing_composition,
			       sum(CASE WHEN p.name = ""
			           OR p.name IS NULL THEN 1 ELSE 0 END) AS missing_name,
			       sum(CASE WHEN p.short_description = ""
			           OR p.short_description IS NULL THEN 1 ELSE 0 END) AS missing_short_description,
			       sum(CASE WHEN p.price = ""
			           OR p.price IS NULL THEN 1 ELSE 0 END) AS missing_price,
			       sum(CASE WHEN p.size = ""
			           OR p.size IS NULL AND p.measurement_size_type IS NULL THEN 1 ELSE 0 END) AS missing_size,
			       sum(CASE WHEN p.measurement_size_type = ""
			           OR p.measurement_size_type AND p.size = "" OR p.size IS NULL THEN 1 ELSE 0 END) AS missing_measurement,
			       `p`.`supplier`
				')
            ->where('p.supplier', '<>', '');
        $query = $query->groupBy('p.supplier')->havingRaw('missing_category > 1 or missing_color > 1 or missing_composition > 1 or missing_name > 1 or missing_short_description >1 ');

        $reportDatas = $query->get();

        return \Excel::download(new \App\Exports\ReportExport($reportDatas), 'exports.xls');
    }

    public function downloadScrapReport()
    {
        $query = DB::table('scraped_products as p')
            ->selectRaw('
				   sum(CASE WHEN p.category = ""
			           OR p.category IS NULL THEN 1 ELSE 0 END) AS missing_category,
			       sum(CASE WHEN p.color = ""
			           OR p.color IS NULL THEN 1 ELSE 0 END) AS missing_color,
			       sum(CASE WHEN p.composition = ""
			           OR p.composition IS NULL THEN 1 ELSE 0 END) AS missing_composition,
			       sum(CASE WHEN p.title = ""
			           OR p.title IS NULL THEN 1 ELSE 0 END) AS missing_name,
			       sum(CASE WHEN p.description = ""
			           OR p.description IS NULL THEN 1 ELSE 0 END) AS missing_short_description,
			       sum(CASE WHEN p.price = ""
			           OR p.price IS NULL THEN 1 ELSE 0 END) AS missing_price,
			       sum(CASE WHEN p.size = ""
			           OR p.size IS NULL THEN 1 ELSE 0 END) AS missing_size,
			       `p`.`supplier`
				')
            ->where('p.supplier', '<>', '');
        $query = $query->groupBy('p.supplier')->havingRaw('missing_category > 1 or missing_color > 1 or missing_composition > 1 or missing_name > 1 or missing_short_description >1 ');

        $reportDatas = $query->get();

        return \Excel::download(new \App\Exports\ReportExport($reportDatas), 'exports.xls');
    }

    public function inventoryHistory($id)
    {
        $inventory_history = \App\InventoryStatusHistory::getInventoryHistoryFromProductId($id);

        foreach ($inventory_history as $each) {
            $supplier = \App\Supplier::find($each['supplier_id']);
            if ($supplier) {
                $each['supplier'] = $supplier->supplier;
            } else {
                $each['supplier'] = '';
            }
        }

        return response()->json(['data' => $inventory_history]);
    }

    public function getSuppliers($id)
    {
        $suppliers = Product::with(['suppliers_info', 'suppliers_info.supplier'])->find($id);

        return response()->json(['data' => $suppliers->suppliers_info]);
    }

    public function getProductImages($id)
    {
        $product = Product::find($id);
        $urls    = [];
        if ($product) {
            $medias = \App\Mediables::getMediasFromProductId($id);
            $medias = $product->getMedia(config('constants.attach_image_tag'));
            foreach ($medias as $media) {
                $urls[] = getMediaUrl($media);
            }
        }

        return response()->json(['urls' => $urls]);
    }

    public function getProductRejectedImages($id)
    {
        $product = Product::find($id);
        $urls    = [];
        if ($product) {
            $medias      = \App\RejectedImages::getRejectedMediasFromProductId($id);
            $site_medias = $medias->groupBy('title');
            if ($site_medias->count()) {
                $view = view('product-inventory.inventory-list-partials.rejected-images', ['site_medias' => $site_medias]);
                $html = $view->render();
            } else {
                $html = '<h1>No rejected media found</h1>';
            }
        } else {
            $html = '<h1>No product found</h1>';
        }

        return response()->json(['html' => $html]);
    }

    public function changeSizeSystem(Request $request)
    {
        $product_ids   = $request->get('product_ids');
        $size_system   = $request->get('size_system');
        $messages      = [];
        $errorMessages = [];
        if (! empty($size_system) && ! empty($product_ids)) {
            $products = \App\Product::whereIn('id', $product_ids)->get();
            if (! $products->isEmpty()) {
                foreach ($products as $product) {
                    $productSupplier = \App\ProductSupplier::where('product_id', $product->id)->where('supplier_id', $product->supplier_id)->first();
                    if ($productSupplier) {
                        $productSupplier->size_system = $size_system;
                        $allSize                      = explode(',', $product->size);
                        $euSize                       = \App\Helpers\ProductHelper::getEuSize($product, $allSize, $productSupplier->size_system);
                        $product->size_eu             = implode(',', $euSize);
                        if (empty($euSize)) {
                            $product->status_id = \App\Helpers\StatusHelper::$unknownSize;
                            $errorMessages[]    = "$product->sku has issue with size";
                        } else {
                            $messages[] = "$product->sku updated successfully";
                            foreach ($euSize as $es) {
                                \App\ProductSizes::updateOrCreate([
                                    'product_id' => $product->id, 'supplier_id' => $product->supplier_id, 'size' => $es,
                                ], [
                                    'product_id' => $product->id, 'quantity' => 1, 'supplier_id' => $product->supplier_id, 'size' => $es,
                                ]);
                            }
                        }
                        $productSupplier->save();
                        $product->save();
                    }
                }
            }
        }

        return response()->json(['code' => 200, 'data' => [], 'message' => implode('</br>', $messages), 'error_messages' => implode('</br>', $errorMessages)]);
    }

    public function changeErpSize(Request $request)
    {
        $sizes         = $request->sizes;
        $erpSizes      = $request->erp_size;
        $sizeSystemStr = $request->size_system;
        $categoryId    = $request->category_id;

        if (! empty($sizes) && ! empty($erpSizes) && ! empty($sizeSystemStr)) {
            /// check first size system exist or not
            $sizeSystem = \App\SystemSize::where('name', $sizeSystemStr)->first();

            if (! $sizeSystem) {
                $sizeSystem       = new \App\SystemSize;
                $sizeSystem->name = $sizeSystem;
                $sizeSystem->save();
            }

            // check size exist or not
            if (! empty($erpSizes)) {
                foreach ($erpSizes as $k => $epSize) {
                    $existSize = \App\SystemSizeManager::where('category_id', $categoryId)->where('erp_size', $epSize)->first();

                    if (! $existSize) {
                        $existSize              = new \App\SystemSizeManager;
                        $existSize->category_id = $categoryId;
                        $existSize->erp_size    = $epSize;
                        $existSize->status      = 1;
                        $existSize->save();
                    }

                    if (isset($sizes[$k])) {
                        $checkMainSize = \App\SystemSizeRelation::where('system_size_manager_id', $sizeSystem->id)
                            ->where('system_size', $existSize->id)
                            ->where('size', $sizes[$k])
                            ->first();

                        if (! $checkMainSize) {
                            $checkMainSize                         = new \App\SystemSizeRelation;
                            $checkMainSize->system_size_manager_id = $existSize->id;
                            $checkMainSize->system_size            = $sizeSystem->id;
                            $checkMainSize->size                   = $sizes[$k];
                            $checkMainSize->save();
                        }
                    }
                }

                UpdateFromSizeManager::dispatch([
                    'category_id' => $categoryId,
                    'size_system' => $sizeSystemStr,
                ])->onQueue('mageone');
            }
        }

        return response()->json(['code' => 200, 'data' => [], 'message' => 'Your request has been send to the jobs']);
    }

    public function updateStatus(Request $request)
    {
        $product_ids    = $request->get('product_ids');
        $product_status = $request->get('product_status');

        $messages      = [];
        $errorMessages = [];
        if (! empty($product_status) && ! empty($product_ids)) {
            $products = \App\Product::whereIn('id', $product_ids)->get();
            if (! $products->isEmpty()) {
                foreach ($products as $product) {
                    if ($product->status_id != $product_status) {
                        $product->status_id = $product_status;
                        $product->save();
                        $messages[] = "$product->name updated successfully";
                    }
                }
            } else {
                $messages[] = 'Something went wrong. Please try again later.';
            }
        }

        return response()->json(['code' => 200, 'data' => [], 'message' => implode('</br>', $messages), 'error_messages' => implode('</br>', $errorMessages)]);
    }

    public function supplierProductSummary(Request $request, int $supplier_id)
    {
        $inventory = \App\InventoryStatusHistory::whereDate('created_at', '>', Carbon::now()->subDays(7))->where('supplier_id', $supplier_id)->orderBy('in_stock', 'desc');

        if ($request->search) {
            $inventory->where('product_id', 'like', '%' . $request->search)->orWhereHas('product', function ($query) use ($request) {
                $query->where('name', 'like', '%' . $request->search . '%');
            });
        }

        $total_rows = $inventory->count();

        $inventory = $inventory->paginate(Setting::get('pagination'));

        $allHistory = [];

        foreach ($inventory as $key => $history) {
            $row = ['id' => $history->id, 'product_name' => $history->product->name ?? '', 'supplier_name' => $history->supplier->supplier ?? '', 'product_id' => $history->product_id, 'brand_name' => $history->product->brands->name ?? ''];

            $dates = \App\InventoryStatusHistory::whereDate('created_at', '>', Carbon::now()->subDays(7))->where('supplier_id', $history->supplier_id)->where('product_id', $history->product_id)->get();

            $row['dates'] = $dates;

            $allHistory[] = (object) $row;
        }

        return view('product-inventory.supplier-inventory-history', compact('allHistory', 'inventory', 'total_rows', 'request'));
    }

    public function supplierProductHistory(Request $request)
    {
        $total_rows         = 25;
        $supplier_droupdown = Supplier::select('id', 'supplier')->get();
        $suppliers          = Supplier::query();
        if ($request->supplier) {
            $suppliers = $suppliers->where('id', $request->supplier);
        }
        $suppliers  = $suppliers->paginate($total_rows);
        $allHistory = [];
        $columnData = [];
        $start_date = new \DateTime(date('Y-m-d', strtotime('-7 days')));
        $end_date   = new \DateTime(date('Y-m-d'));
        $interval   = new \DateInterval('P1D');
        $range      = new \DatePeriod($start_date, $interval, $end_date);

        if ($request->ajax()) {
            return response()->json([
                'tbody' => view('product-inventory.partials.supplier-product-history-data', compact('total_rows', 'suppliers', 'range'))->render(),
            ], 200);
        }

        return view('product-inventory.supplier-product-history', compact('range', 'supplier_droupdown', 'total_rows', 'suppliers', 'columnData'));
    }

    public static function getLastScrappedOn($supplier_id)
    {
        $data = (array) DB::table('inventory_status_histories')->where('supplier_id', '=', $supplier_id)->latest('date')->first();

        if (isset($data['date'])) {
            return $data['date'];
        }

        return '';
    }

    public function supplierProductHistoryWithView(Request $request)
    {
        $suppliers    = \App\Supplier::pluck('supplier', 'id')->toArray();
        $selectedDate = Carbon::now()->subDays(7);
        $dataToInsert = [];
        for ($date = $selectedDate; $date < Carbon::now(); Carbon::parse($date)->addDays(1)) {
            $inventoryHistoryView = \App\InventoryStatusHistory::where('inventory_status_histories.created_at', 'like', $date . '%')->first();
            if ($inventoryHistoryView == null) {
                $inventory = \App\InventoryStatusHistory::leftjoin('scrapers', 'scrapers.supplier_id', '=', 'inventory_status_histories.supplier_id')->select('inventory_status_histories.created_at', 'inventory_status_histories.supplier_id', 'scrapers.last_completed_at', DB::raw('count(distinct product_id) as product_count_count'))
                    ->whereDate('inventory_status_histories.created_at', '=', $selectedDate)
                    ->where('in_stock', '>', 0)
                    ->groupBy('inventory_status_histories.supplier_id');

                if ($request->supplier and $request->supplier != '') {
                    $inventory = $inventory->where('inventory_status_histories.supplier_id', $request->supplier);
                }

                $inventory  = $inventory->orderBy('product_count_count', 'desc')->paginate(2); //dd($inventory);
                $total_rows = $inventory->total();
                $allHistory = [];
                $date       = date('Y-m-d', strtotime(date('Y-m-d') . ' -6 day'));
                $extraDates = $date;
                $columnData = [];
                for ($i = 1; $i < 8; $i++) {
                    $columnData[] = $extraDates;
                    $extraDates   = date('Y-m-d', strtotime($extraDates . ' +1 day'));
                }

                foreach ($inventory as $key => $row) {
                    $newRow                  = [];
                    $newRow['supplier_name'] = '';
                    if (isset($suppliers[$row->supplier_id])) {
                        $newRow['supplier_name'] = $suppliers[$row->supplier_id];
                    }
                    $brandCount = \App\InventoryStatusHistory::join('products as p', 'p.id', 'inventory_status_histories.product_id')
                        ->whereDate('inventory_status_histories.created_at', '>=', $selectedDate)
                        ->where('inventory_status_histories.supplier_id', $row->supplier_id)
                        ->groupBy('p.brand')
                        ->select(\DB::raw('count(p.brand) as total'))
                        ->get()
                        ->count();

                    $newRow['brands']           = $brandCount;
                    $newRow['products']         = $row->product_count_count;
                    $newRow['supplier_id']      = $row->supplier_id;
                    $newRow['last_scrapped_on'] = $row->last_completed_at;

                    foreach ($columnData as $c) {
                        $totalProduct = \App\InventoryStatusHistory::whereDate('created_at', $c)
                            ->where('supplier_id', $row->supplier_id)
                            ->select(\DB::raw('count(distinct product_id) as total_product'))->first();
                        $newRow['dates'][$c] = ($totalProduct) ? $totalProduct->total_product : 0;

                        $dataToInsert[] = ['supplier_id' => $row->supplier_id, 'supplier_name' => $newRow['supplier_name'], 'last_scrapped_on' => $newRow['last_scrapped_on'], 'products' => $newRow['products'], 'brands' => $newRow['brands'], 'date' => $c, 'count' => $newRow['dates'][$c]];
                    }

                    array_push($allHistory, $newRow);
                }
            }
        }

        dd($dataToInsert);
        if (count($dataToInsert) > 0) {
            \App\InventoryStatusHistoryView::insert($dataToInsert);
        }

        if ($request->ajax()) {
            return response()->json([
                'tbody' => view('product-inventory.partials.supplier-product-history-data', compact('allHistory', 'inventory', 'total_rows', 'request', 'columnData'))->render(),
            ], 200);
        }

        return view('product-inventory.supplier-product-history', compact('allHistory', 'inventory', 'total_rows', 'suppliers', 'request', 'columnData'));
    }

    public function supplierProductHistoryCopy(Request $request)
    {
        $suppliers = \App\Supplier::pluck('supplier', 'id')->toArray();
        dd($suppliers);

        $inventory = \App\InventoryStatusHistory::leftjoin('scrapers', 'scrapers.supplier_id', '=', 'inventory_status_histories.supplier_id')->select('inventory_status_histories.created_at', 'inventory_status_histories.supplier_id', 'scrapers.last_completed_at', DB::raw('count(distinct product_id) as product_count_count', 'GROUP_CONCAT(product_id) as brand_products'))
            ->whereDate('inventory_status_histories.created_at', '>=', Carbon::now()->subDays(7))
            ->where('in_stock', '>', 0)
            ->groupBy('inventory_status_histories.supplier_id');

        if ($request->supplier) {
            $inventory = $inventory->where('inventory_status_histories.supplier_id', $request->supplier);
        }

        $inventory  = $inventory->orderBy('product_count_count', 'desc')->paginate(1); //dd($inventory);
        $total_rows = $inventory->total();
        $allHistory = [];
        $date       = date('Y-m-d', strtotime(date('Y-m-d') . ' -6 day'));
        $extraDates = $date;
        $columnData = [];
        for ($i = 1; $i < 8; $i++) {
            $columnData[] = $extraDates;
            $extraDates   = date('Y-m-d', strtotime($extraDates . ' +1 day'));
        }

        foreach ($inventory as $key => $row) {
            $newRow                  = [];
            $newRow['supplier_name'] = '';
            if (isset($suppliers[$row->supplier_id])) {
                $newRow['supplier_name'] = $suppliers[$row->supplier_id];
            }

            $brandCount = \App\InventoryStatusHistory::join('products as p', 'p.id', 'inventory_status_histories.product_id')->whereDate('inventory_status_histories.created_at', '>', Carbon::now()->subDays(7))->where('inventory_status_histories.supplier_id', $row->supplier_id)
                ->where('in_stock', '>', 0)
                ->groupBy('p.brand')
                ->select(\DB::raw('count(p.brand) as total'))
                ->get()
                ->count();

            $newRow['brands']           = $brandCount;
            $newRow['products']         = $row->product_count_count;
            $newRow['supplier_id']      = $row->supplier_id;
            $newRow['last_scrapped_on'] = $row->last_completed_at;

            foreach ($columnData as $c) {
                $totalProduct        = \App\InventoryStatusHistory::whereDate('created_at', $c)->where('supplier_id', $row->supplier_id)->select(\DB::raw('count(distinct product_id) as total_product'))->first();
                $newRow['dates'][$c] = ($totalProduct) ? $totalProduct->total_product : 0;
            }
            array_push($allHistory, $newRow);
        }
        if ($request->ajax()) {
            return response()->json([
                'tbody' => view('product-inventory.partials.supplier-product-history-data', compact('allHistory', 'inventory', 'total_rows', 'request', 'columnData'))->render(),
            ], 200);
        }

        return view('product-inventory.supplier-product-history', compact('allHistory', 'inventory', 'total_rows', 'suppliers', 'request', 'columnData'));
    }

    public function supplierProductHistoryBrand(Request $request)
    {
        $inventory = \App\InventoryStatusHistory::join('products as p', 'p.id', 'inventory_status_histories.product_id')
            ->leftjoin('brands as b', 'b.id', 'p.brand')
            ->whereDate('inventory_status_histories.created_at', '>', Carbon::now()->subDays(7))->where('inventory_status_histories.supplier_id', $request->supplier_id)
            ->where('in_stock', '>', 0)
            ->groupBy('p.brand')
            ->select([\DB::raw('count(distinct p.id) as total'), 'p.brand', 'b.name'])
            ->orderBy('total', 'desc')
            ->get();

        return view('product-inventory.brand-history', compact('inventory'));
    }

    public function mergeScrapBrand(Request $request)
    {
        $scraperBrand  = $request->get('scraper_brand');
        $originalBrand = $request->get('product_brand');

        if (! empty($scraperBrand) && ! empty($originalBrand)) {
            $updateQuery = \DB::statement('update products join scraped_products as sp on sp.sku = products.sku 
						join brands as b1 on b1.id = products.brand
						join brands as b2 on b2.id = sp.brand_id
						set products.brand = sp.brand_id , products.last_brand = products.brand
						where b1.name = ? and b2.name = ?', [$originalBrand, $scraperBrand]);
        } else {
            return redirect()->back()->with('error', 'Please enter product brand and scraper brand');
        }

        return redirect()->back()->with('message', 'Product(s) updated successfully');
    }

    public function supplierDiscountFiles(Request $request)
    {
        $suppliers = \App\Supplier::all();

        $rows = \App\SupplierBrandDiscount::with('supplier', 'brand');

        if ($request->supplier) {
            $rows = $rows->where('supplier_id', $request->supplier);
        }

        if ($request->brands) {
            $rows = $rows->where('brand_id', $request->brands);
        }

        $rows = $rows->paginate(30);

        $brand_data = \App\SupplierBrandDiscount::distinct()->get(['brand_id']);
        $id         = $request->id;
        $excel_data = ProductDiscountExcelFile::join('users', 'users.id', 'product_discount_excel_files.user_id')->select('product_discount_excel_files.*', 'users.name')->get();

        return view('product-inventory.discount-files', compact('suppliers', 'rows', 'brand_data', 'request', 'excel_data'));
    }

    public function download_excel(Request $request)
    {
        $file = $request->filename;

        return response()->download(public_path('/product_discount_file/' . $file));
    }

    public function discountlogHistory(Request $request)
    {
        $users  = User::get();
        $id     = $request->id;
        $header = $request->header;

        $discount_log = SupplierDiscountLogHistory::join('users', 'users.id', 'supplier_discount_log_history.user_id')->where('supplier_brand_discounts_id', $id)->where('header_name', $header)->select('supplier_discount_log_history.*', 'users.name')->get();

        if ($discount_log) {
            return $discount_log;
        }

        return 'error';
    }

    public function exportExcel(Request $request)
    {
        $this->validate($request, [
            'excel' => 'required|file',
        ]);

        $file = $request->file('excel');

        if ($file->getClientOriginalExtension() == 'xlsx') {
            $reader = new Xlsx();
        } else {
            if ($file->getClientOriginalExtension() == 'xls') {
                $reader = new Xls();
            }
        }

        try {
            $ogfilename = $file->getClientOriginalName();

            $fileName_array = rtrim($ogfilename, '.xlsx');
            $fileName       = ($fileName_array) . '_' . time() . '.' . $file->extension();

            $params_file['excel_name'] = $fileName;
            $params_file['user_id']    = \Auth::user()->id;

            $spreadsheet = $reader->load($file->getPathname());

            $rows = $spreadsheet->getActiveSheet()->toArray();

            // -----------------------------------------------------------------------------Brand-----------------------------------------------------------------------

            if ($rows[1][0] == 'Brand') {
                foreach ($rows as $key => $row) {
                    if ($key == 0 || $key == 1) {
                        continue;
                    }
                    $brand_name = trim($row[0]);

                    $brand = Brand::where('name', 'like', '%' . $brand_name . '%')->first();

                    if (! $brand) {
                        $params_brand = [
                            'name' => $brand_name,
                        ];
                        $brand = Brand::create($params_brand);
                    }

                    $discount  = new SupplierBrandDiscount();
                    $exist_row = SupplierBrandDiscount::where('brand_id', $brand->id)->where('supplier_id', $request->supplier)->where('gender', $row[1])->where('category', $row[2])->first();
                    if ($row[4] != '') {
                        $segments = CategorySegment::where('status', 1)->get();
                        if (! $segments->isEmpty()) {
                            foreach ($segments as $segment) {
                                $csd = \App\CategorySegmentDiscount::where('brand_id', $brand->id)->where('category_segment_id', $segment->id)->first();
                                if ($csd) {
                                    $csd->amount = $row[4];
                                    $csd->save();
                                } else {
                                    \App\CategorySegmentDiscount::create([
                                        'brand_id'            => $brand->id,
                                        'category_segment_id' => $segment->id,
                                        'amount'              => $row[4],
                                        'amount_type'         => 'percentage',
                                    ]);
                                }
                            }
                        }
                    }

                    if ($exist_row) {
                        if ($exist_row->condition_from_retail != $row[4]) {
                            $updaterow4 = SupplierBrandDiscount::where('brand_id', $brand->id)->where('supplier_id', $request->supplier)->where('gender', $row[1])->where('category', $row[2])->where('condition_from_retail', $exist_row->condition_from_retail)->update(['condition_from_retail' => $row[4]]);

                            $params['supplier_brand_discounts_id'] = $exist_row->id;
                            $params['header_name']                 = 'condition_from_retail';
                            $params['old_value']                   = $exist_row->condition_from_retail;
                            $params['new_value']                   = $row[4];
                            $params['user_id']                     = \Auth::user()->id;

                            $log_history = \App\SupplierDiscountLogHistory::create($params);
                        }

                        if ($exist_row->condition_from_retail_exceptions != $row[5]) {
                            $updaterow5 = SupplierBrandDiscount::where('brand_id', $brand->id)->where('supplier_id', $request->supplier)->where('gender', $row[1])->where('category', $row[2])->where('condition_from_retail', $row[4])->where('condition_from_retail_exceptions', $exist_row->condition_from_retail_exceptions)->update(['condition_from_retail_exceptions' => $row[5]]);

                            $params['supplier_brand_discounts_id'] = $exist_row->id;
                            $params['header_name']                 = 'condition_from_retail_exceptions';
                            $params['old_value']                   = $exist_row->condition_from_retail_exceptions;
                            $params['new_value']                   = $row[5];
                            $params['user_id']                     = \Auth::user()->id;

                            $log_history1 = \App\SupplierDiscountLogHistory::create($params);
                        }
                    } else {
                        $discount->supplier_id                      = $request->supplier;
                        $discount->brand_id                         = $brand->id;
                        $discount->gender                           = $row[1];
                        $discount->category                         = $row[2];
                        $discount->exceptions                       = $row[3];
                        $discount->condition_from_retail            = $row[4];
                        $discount->condition_from_retail_exceptions = $row[5];
                        $discount->save();

                        if ($row[4] != null) {
                            $params['supplier_brand_discounts_id'] = $discount->id;
                            $params['header_name']                 = 'condition_from_retail';
                            $params['old_value']                   = '-';
                            $params['new_value']                   = $row[4];
                            $params['user_id']                     = \Auth::user()->id;
                            $log_history                           = \App\SupplierDiscountLogHistory::create($params);
                        }

                        if ($row[5] != null) {
                            $params['supplier_brand_discounts_id'] = $discount->id;
                            $params['header_name']                 = 'condition_from_retail_exceptions';
                            $params['old_value']                   = '-';
                            $params['new_value']                   = $row[5];
                            $params['user_id']                     = \Auth::user()->id;
                            $log_history1                          = \App\SupplierDiscountLogHistory::create($params);
                        }
                    }
                }

                $file->move(public_path('product_discount_file'), $fileName);
                $excel_log = ProductDiscountExcelFile::create($params_file);

                return redirect()->back()->with('success', 'Excel Imported Successfully!');
            }
            // ------------------------------------------------------------------ SS21---------------------------------------------------------------------------
            if ($rows[0][1] == 'SS21') {
                $array1      = $array2 = [];
                $first_time1 = 1;
                $first_row   = $rows[0][1];
                foreach ($rows as $key => $row) {
                    if ($row[1] == 'SS21' || $row[1] == 'ST' || $key == 2) {
                        continue;
                    }

                    $array1[] = [$row[1], $row[2]];
                    $array2[] = [$row[4], $row[5]];
                }

                $categories = [];
                $cat        = [];
                foreach ($array1 as $key => $row) {
                    if ($row[0] == null && $row[1] == null) {
                        if ($cat[0][0] == null && $cat[0][1] == null) {
                            unset($cat[0]);
                        }
                        $categories[] = $cat;
                        $cat          = [];
                    }
                    $cat[] = $row;
                }
                if ($cat[0][0] == null && $cat[0][1] == null) {
                    unset($cat[0]);
                }
                $categories[] = $cat;
                $cat          = [];
                foreach ($array2 as $key => $row) {
                    if ($row[0] == null && $row[1] == null) {
                        if ($cat[0][0] == null && $cat[0][1] == null) {
                            unset($cat[0]);
                        }
                        $categories[] = $cat;
                        $cat          = [];
                    }
                    $cat[] = $row;
                }
                if ($cat[0][0] == null && $cat[0][1] == null) {
                    unset($cat[0]);
                }
                $categories[] = $cat;
                $total        = 1;
                foreach ($categories as $key_ => $cats) {
                    if (isset($cats[0])) {
                        array_unshift($cats, []);
                    }
                    $condition_from_retail = null;
                    foreach ($cats as $key => $cat) {
                        if ($key == 1) {
                            $category = trim($cat[0]);

                            $gender   = strpos($category, 'WOMAN') !== false ? 'WOMAN' : (strpos($category, 'MAN') !== false ? 'MAN' : '');
                            $category = str_replace(' + ACC', '', $category);

                            continue;
                        } elseif ($key == 2) {
                            $gen_price = $cat[0];
                            if ($first_row == 'SS21') {
                                $generic_price = trim(str_replace('GENERIC PRICE: COST', '', $gen_price));
                                $generic_price = str_replace('+', '', $generic_price);
                            } else {
                                $generic_price = trim(str_replace('GENERIC PRICE: COST+', '', $gen_price));
                                $generic_price = trim(str_replace('GENERIC PRICE: COST +', '', $generic_price));
                            }

                            continue;
                        } elseif ($key == 3) {
                            $exceptions                       = $cat[0];
                            $condition_from_retail_exceptions = trim(str_replace('EXCEPTIONS', '', $exceptions));
                            $condition_from_retail_exceptions = str_replace('+', '', $condition_from_retail_exceptions);

                            continue;
                        } elseif ($key == 0) {
                            continue;
                        } else {
                            $brand_name = $cat[0];

                            $condition_from_retail = $cat[1] !== null ? str_replace('C+', '', $cat[1]) : $condition_from_retail;

                            $brand = Brand::where('name', $brand_name)->first();

                            if (! $brand) {
                                $params_brand = [
                                    'name' => $brand_name,
                                ];
                                $brand = Brand::create($params_brand);
                            }

                            $discount = new SupplierBrandDiscount();

                            $exist_row = SupplierBrandDiscount::where('brand_id', $brand->id)->where('supplier_id', $request->supplier)->where('gender', $gender)->where('category', $category)->first();

                            if ($condition_from_retail != '') {
                                $segments = CategorySegment::where('status', 1)->get();
                                if (! $segments->isEmpty()) {
                                    foreach ($segments as $segment) {
                                        $csd = \App\CategorySegmentDiscount::where('brand_id', $brand->id)->where('category_segment_id', $segment->id)->first();
                                        if ($csd) {
                                            $csd->amount = $condition_from_retail;
                                            $csd->save();
                                        } else {
                                            \App\CategorySegmentDiscount::create([
                                                'brand_id'            => $brand->id,
                                                'category_segment_id' => $segment->id,
                                                'amount'              => $condition_from_retail,
                                                'amount_type'         => 'percentage',
                                            ]);
                                        }
                                    }
                                }
                            }

                            if ($exist_row) {
                                if ($exist_row->condition_from_retail != $condition_from_retail) {
                                    $updaterow4 = SupplierBrandDiscount::where('brand_id', $brand->id)->where('supplier_id', $request->supplier);

                                    if (isset($gender) && $gender != '') {
                                        $updaterow4 = $updaterow4->where('gender', $gender);
                                    }

                                    $updaterow4 = $updaterow4->where('category', $category)->where('condition_from_retail', $exist_row->condition_from_retail)->update(['condition_from_retail' => $condition_from_retail]);

                                    $params['supplier_brand_discounts_id'] = $exist_row->id;
                                    $params['header_name']                 = 'condition_from_retail';
                                    $params['old_value']                   = $exist_row->condition_from_retail;
                                    $params['new_value']                   = $condition_from_retail;
                                    $params['user_id']                     = \Auth::user()->id;

                                    $log_history = \App\SupplierDiscountLogHistory::create($params);
                                }

                                $generic_price_data = (isset($generic_price) && $generic_price != '' ? $generic_price : (isset($brand->deduction_percentage) ? $brand->deduction_percentage . '%' : '0%'));

                                if ($exist_row->generic_price != $generic_price_data) {
                                    $updaterow4 = SupplierBrandDiscount::where('brand_id', $brand->id)->where('supplier_id', $request->supplier)->where('gender', $gender)->where('category', $category)->where('generic_price', $exist_row->generic_price)->update(['generic_price' => $generic_price_data]);

                                    $params['supplier_brand_discounts_id'] = $exist_row->id;
                                    $params['header_name']                 = 'generic_price';
                                    $params['old_value']                   = $exist_row->generic_price;
                                    $params['new_value']                   = $generic_price_data;
                                    $params['user_id']                     = \Auth::user()->id;

                                    $log_history = \App\SupplierDiscountLogHistory::create($params);
                                }

                                if ($exist_row->condition_from_retail_exceptions != $condition_from_retail_exceptions) {
                                    $updaterow4 = SupplierBrandDiscount::where('brand_id', $brand->id)->where('supplier_id', $request->supplier)->where('gender', $gender)->where('category', $category)->where('condition_from_retail_exceptions', $exist_row->condition_from_retail_exceptions)->update(['condition_from_retail_exceptions' => $condition_from_retail_exceptions]);

                                    $params['supplier_brand_discounts_id'] = $exist_row->id;
                                    $params['header_name']                 = 'condition_from_retail_exceptions';
                                    $params['old_value']                   = $exist_row->condition_from_retail_exceptions;
                                    $params['new_value']                   = $condition_from_retail_exceptions;
                                    $params['user_id']                     = \Auth::user()->id;

                                    $log_history = \App\SupplierDiscountLogHistory::create($params);
                                }
                            } else {
                                $generic_price_data = (isset($generic_price) && $generic_price != '' ? $generic_price : (isset($brand->deduction_percentage) ? $brand->deduction_percentage . '%' : ''));

                                $discount->supplier_id                      = $request->supplier;
                                $discount->brand_id                         = $brand->id;
                                $discount->gender                           = $gender;
                                $discount->category                         = $category;
                                $discount->generic_price                    = $generic_price_data;
                                $discount->condition_from_retail            = $condition_from_retail;
                                $discount->condition_from_retail_exceptions = $condition_from_retail_exceptions;
                                $discount->save();

                                if ($condition_from_retail != null) {
                                    $params['supplier_brand_discounts_id'] = $discount->id;
                                    $params['header_name']                 = 'condition_from_retail';
                                    $params['old_value']                   = '-';
                                    $params['new_value']                   = $condition_from_retail;
                                    $params['user_id']                     = \Auth::user()->id;
                                    $log_history                           = \App\SupplierDiscountLogHistory::create($params);
                                }

                                if ($generic_price != null) {
                                    $params['supplier_brand_discounts_id'] = $discount->id;
                                    $params['header_name']                 = 'generic_price';
                                    $params['old_value']                   = '-';
                                    $params['new_value']                   = $generic_price_data;
                                    $params['user_id']                     = \Auth::user()->id;
                                    $log_history                           = \App\SupplierDiscountLogHistory::create($params);
                                }

                                if ($condition_from_retail_exceptions != null) {
                                    $params['supplier_brand_discounts_id'] = $discount->id;
                                    $params['header_name']                 = 'condition_from_retail_exceptions';
                                    $params['old_value']                   = '-';
                                    $params['new_value']                   = $condition_from_retail_exceptions;
                                    $params['user_id']                     = \Auth::user()->id;
                                    $log_history                           = \App\SupplierDiscountLogHistory::create($params);
                                }
                            }
                        }
                    }
                }

                $file->move(public_path('product_discount_file'), $fileName);
                $excel_log = ProductDiscountExcelFile::create($params_file);

                return redirect()->back()->with('success', 'Excel Imported Successfully!');
            }
            // -------------------------------------------------------------------------FW21-----------------------------------------------------------------------
            if ($rows[0][1] == 'FW21') {
                $array1      = $array2 = [];
                $first_time1 = 1;
                $first_row   = $rows[0][1];
                foreach ($rows as $key => $row) {
                    if ($row[1] == 'FW21' || $row[1] == 'ST' || $key == 2) {
                        continue;
                    }

                    $array1[] = [$row[1], $row[2]];
                    $array2[] = [$row[4], $row[5]];
                }

                $categories = [];
                $cat        = [];
                foreach ($array1 as $key => $row) {
                    if ($row[0] == null && $row[1] == null) {
                        if ($cat[0][0] == null && $cat[0][1] == null) {
                            unset($cat[0]);
                        }
                        $categories[] = $cat;
                        $cat          = [];
                    }
                    $cat[] = $row;
                }
                if ($cat[0][0] == null && $cat[0][1] == null) {
                    unset($cat[0]);
                }
                $categories[] = $cat;
                $cat          = [];
                foreach ($array2 as $key => $row) {
                    if ($row[0] == null && $row[1] == null) {
                        if ($cat[0][0] == null && $cat[0][1] == null) {
                            unset($cat[0]);
                        }
                        $categories[] = $cat;
                        $cat          = [];
                    }
                    $cat[] = $row;
                }
                if ($cat[0][0] == null && $cat[0][1] == null) {
                    unset($cat[0]);
                }
                $categories[] = $cat;
                $total        = 1;
                foreach ($categories as $key_ => $cats) {
                    if (isset($cats[0])) {
                        array_unshift($cats, []);
                    }
                    $condition_from_retail = null;
                    foreach ($cats as $key => $cat) {
                        if ($key == 1) {
                            $category = trim($cat[0]);
                            $gender   = strpos($category, 'WOMAN') !== false ? 'WOMAN' : (strpos($category, 'MAN') !== false ? 'MAN' : '');
                            $category = str_replace(' + ACC', '', $category);

                            continue;
                        } elseif ($key == 2) {
                            $gen_price = $cat[0];
                            if ($first_row == 'FW21') {
                                $generic_price = trim(str_replace('GENERIC PRICE: COST', '', $gen_price));
                                $generic_price = str_replace('+', '', $generic_price);
                            } else {
                                $generic_price = trim(str_replace('GENERIC PRICE: COST+', '', $gen_price));
                                $generic_price = trim(str_replace('GENERIC PRICE: COST +', '', $generic_price));
                            }

                            continue;
                        } elseif ($key == 3) {
                            $exceptions                       = $cat[0];
                            $condition_from_retail_exceptions = trim(str_replace('EXCEPTIONS', '', $exceptions));
                            $condition_from_retail_exceptions = str_replace('+', '', $condition_from_retail_exceptions);

                            continue;
                        } elseif ($key == 0) {
                            continue;
                        } else {
                            $brand_name = $cat[0];

                            $condition_from_retail = $cat[1] !== null ? str_replace('C+', '', $cat[1]) : $condition_from_retail;
                            $brand                 = Brand::where('name', $brand_name)->first();

                            if (! $brand) {
                                $params_brand = [
                                    'name' => $brand_name,
                                ];
                                $brand = Brand::create($params_brand);
                            }

                            if ($condition_from_retail != '') {
                                $segments = CategorySegment::where('status', 1)->get();
                                if (! $segments->isEmpty()) {
                                    foreach ($segments as $segment) {
                                        $csd = \App\CategorySegmentDiscount::where('brand_id', $brand->id)->where('category_segment_id', $segment->id)->first();
                                        if ($csd) {
                                            $csd->amount = $condition_from_retail;
                                            $csd->save();
                                        } else {
                                            \App\CategorySegmentDiscount::create([
                                                'brand_id'            => $brand->id,
                                                'category_segment_id' => $segment->id,
                                                'amount'              => $condition_from_retail,
                                                'amount_type'         => 'percentage',
                                            ]);
                                        }
                                    }
                                }
                            }

                            $discount = new SupplierBrandDiscount();

                            $exist_row = SupplierBrandDiscount::where('brand_id', $brand->id)->where('supplier_id', $request->supplier)->where('gender', $gender)->where('category', $category)->first();

                            if ($exist_row) {
                                if ($exist_row->condition_from_retail != $condition_from_retail) {
                                    $updaterow4 = SupplierBrandDiscount::where('brand_id', $brand->id)->where('supplier_id', $request->supplier);

                                    if (isset($gender) && $gender != '') {
                                        $updaterow4 = $updaterow4->where('gender', $gender);
                                    }

                                    $updaterow4 = $updaterow4->where('gender', $gender)->where('category', $category)->where('condition_from_retail', $exist_row->condition_from_retail)->update(['condition_from_retail' => $condition_from_retail]);

                                    $params['supplier_brand_discounts_id'] = $exist_row->id;
                                    $params['header_name']                 = 'condition_from_retail';
                                    $params['old_value']                   = $exist_row->condition_from_retail;
                                    $params['new_value']                   = $condition_from_retail;
                                    $params['user_id']                     = \Auth::user()->id;

                                    $log_history = \App\SupplierDiscountLogHistory::create($params);
                                }

                                $generic_price_data = (isset($generic_price) && $generic_price != '' ? $generic_price : (isset($brand->deduction_percentage) ? $brand->deduction_percentage . '%' : ''));

                                if ($exist_row->generic_price != $generic_price_data) {
                                    $updaterow4 = SupplierBrandDiscount::where('brand_id', $brand->id)->where('supplier_id', $request->supplier)->where('gender', $gender)->where('category', $category)->where('generic_price', $exist_row->generic_price)->update(['generic_price' => $generic_price_data]);

                                    $params['supplier_brand_discounts_id'] = $exist_row->id;
                                    $params['header_name']                 = 'generic_price';
                                    $params['old_value']                   = $exist_row->generic_price;
                                    $params['new_value']                   = $generic_price_data;
                                    $params['user_id']                     = \Auth::user()->id;

                                    $log_history = \App\SupplierDiscountLogHistory::create($params);
                                }

                                if ($exist_row->condition_from_retail_exceptions != $condition_from_retail_exceptions) {
                                    $updaterow4 = SupplierBrandDiscount::where('brand_id', $brand->id)->where('supplier_id', $request->supplier)->where('gender', $gender)->where('category', $category)->where('condition_from_retail_exceptions', $exist_row->condition_from_retail_exceptions)->update(['condition_from_retail_exceptions' => $condition_from_retail_exceptions]);

                                    $params['supplier_brand_discounts_id'] = $exist_row->id;
                                    $params['header_name']                 = 'condition_from_retail_exceptions';
                                    $params['old_value']                   = $exist_row->condition_from_retail_exceptions;
                                    $params['new_value']                   = $condition_from_retail_exceptions;
                                    $params['user_id']                     = \Auth::user()->id;

                                    $log_history = \App\SupplierDiscountLogHistory::create($params);
                                }
                            } else {
                                $generic_price_data = (isset($generic_price) && $generic_price != '' ? $generic_price : (isset($brand->deduction_percentage) ? $brand->deduction_percentage . '%' : ''));

                                $discount->supplier_id                      = $request->supplier;
                                $discount->brand_id                         = $brand->id;
                                $discount->gender                           = $gender;
                                $discount->category                         = $category;
                                $discount->generic_price                    = $generic_price_data;
                                $discount->condition_from_retail            = $condition_from_retail;
                                $discount->condition_from_retail_exceptions = $condition_from_retail_exceptions;
                                $discount->save();

                                if ($condition_from_retail != null) {
                                    $params['supplier_brand_discounts_id'] = $discount->id;
                                    $params['header_name']                 = 'condition_from_retail';
                                    $params['old_value']                   = '-';
                                    $params['new_value']                   = $condition_from_retail;
                                    $params['user_id']                     = \Auth::user()->id;
                                    $log_history                           = \App\SupplierDiscountLogHistory::create($params);
                                }

                                if ($generic_price != null) {
                                    $params['supplier_brand_discounts_id'] = $discount->id;
                                    $params['header_name']                 = 'generic_price';
                                    $params['old_value']                   = '-';
                                    $params['new_value']                   = $generic_price_data;
                                    $params['user_id']                     = \Auth::user()->id;
                                    $log_history                           = \App\SupplierDiscountLogHistory::create($params);
                                }

                                if ($condition_from_retail_exceptions != null) {
                                    $params['supplier_brand_discounts_id'] = $discount->id;
                                    $params['header_name']                 = 'condition_from_retail_exceptions';
                                    $params['old_value']                   = '-';
                                    $params['new_value']                   = $condition_from_retail_exceptions;
                                    $params['user_id']                     = \Auth::user()->id;
                                    $log_history                           = \App\SupplierDiscountLogHistory::create($params);
                                }
                            }
                        }
                    }
                }

                $file->move(public_path('product_discount_file'), $fileName);
                $excel_log = ProductDiscountExcelFile::create($params_file);

                return redirect()->back()->with('success', 'Excel Imported Successfully!');
            }

            if ($rows[0][1] == 'FW20') {
                $array1      = $array2 = [];
                $first_time1 = 1;
                $first_row   = $rows[0][1];
                foreach ($rows as $key => $row) {
                    if ($row[1] == 'FW20' || $row[1] == 'ST' || $key == 2) {
                        continue;
                    }

                    $row_1 = (isset($row[1]) && $row[1] != null ? $row[1] : '-');
                    $row_2 = (isset($row[2]) && $row[2] != null ? $row[2] : '-');

                    $row_4 = (isset($row[4]) && $row[4] != null ? $row[4] : '-');
                    $row_5 = (isset($row[5]) && $row[5] != null ? $row[5] : '-');

                    $array1[] = [$row_1, $row_2];
                    $array2[] = [$row_4, $row_5];
                }
                $categories = [];
                $cat        = [];
                foreach ($array1 as $key => $row) {
                    if ($row[0] == null && $row[1] == null) {
                        if ($cat[0][0] == null && $cat[0][1] == null) {
                            unset($cat[0]);
                        }
                        $categories[] = $cat;
                        $cat          = [];
                    }
                    $cat[] = $row;
                }
                if ($cat[0][0] == null && $cat[0][1] == null) {
                    unset($cat[0]);
                }
                $categories[] = $cat;
                $cat          = [];
                foreach ($array2 as $key => $row) {
                    if ($row[0] == null && $row[1] == null) {
                        if ($cat[0][0] == null && $cat[0][1] == null) {
                            unset($cat[0]);
                        }
                        $categories[] = $cat;
                        $cat          = [];
                    }
                    $cat[] = $row;
                }
                if ($cat[0][0] == null && $cat[0][1] == null) {
                    unset($cat[0]);
                }
                $categories[] = $cat;
                $total        = 1;
                foreach ($categories as $key_ => $cats) {
                    if (isset($cats[0])) {
                        array_unshift($cats, []);
                    }
                    foreach ($cats as $key => $cat) {
                        if ($key == 1) {
                            $category = trim($cat[0]);
                            $gender   = strpos($category, 'WOMAN') !== false ? 'WOMAN' : 'MAN';
                            $category = str_replace(' + ACC', '', $category);

                            continue;
                        } elseif ($key == 2) {
                            $gen_price = $cat[0];

                            if ($first_row == 'FW20') {
                                $generic_price = trim(str_replace('GENERIC PRICE: COST', '', $gen_price));
                                $generic_price = str_replace('+', '', $generic_price);
                            } else {
                                $generic_price = trim(str_replace('GENERIC PRICE: COST +', '', $gen_price));
                                $generic_price = trim(str_replace('GENERIC PRICE: COST+', '', $generic_price));
                            }

                            continue;
                        } elseif ($key == 3 || $key == 0) {
                            continue;
                        } else {
                            $brand_name            = trim($cat[0]);
                            $condition_from_retail = $cat[1] !== null ? str_replace('C+', '', $cat[1]) : $condition_from_retail;

                            $brand = Brand::where('name', 'like', '%' . $brand_name . '%')->first();

                            if (! $brand) {
                                $params_brand = [
                                    'name' => $brand_name,
                                ];
                                $brand = Brand::create($params_brand);
                            }
                            if ($condition_from_retail != '') {
                                $segments = CategorySegment::where('status', 1)->get();
                                if (! $segments->isEmpty()) {
                                    foreach ($segments as $segment) {
                                        $csd = \App\CategorySegmentDiscount::where('brand_id', $brand->id)->where('category_segment_id', $segment->id)->first();
                                        if ($csd) {
                                            $csd->amount = $condition_from_retail;
                                            $csd->save();
                                        } else {
                                            \App\CategorySegmentDiscount::create([
                                                'brand_id'            => $brand->id,
                                                'category_segment_id' => $segment->id,
                                                'amount'              => $condition_from_retail,
                                                'amount_type'         => 'percentage',
                                            ]);
                                        }
                                    }
                                }
                            }
                            $discount = new SupplierBrandDiscount();

                            $exist_row = SupplierBrandDiscount::where('brand_id', $brand->id)->where('supplier_id', $request->supplier)->where('gender', $gender)->where('category', $category)->first();

                            if ($exist_row) {
                                if ($exist_row->condition_from_retail != $condition_from_retail) {
                                    $updaterow4 = SupplierBrandDiscount::where('brand_id', $brand->id)->where('supplier_id', $request->supplier)->where('gender', $gender)->where('category', $category)->where('condition_from_retail', $exist_row->condition_from_retail)->update(['condition_from_retail' => $condition_from_retail]);

                                    $params['supplier_brand_discounts_id'] = $exist_row->id;
                                    $params['header_name']                 = 'condition_from_retail';
                                    $params['old_value']                   = $exist_row->condition_from_retail;
                                    $params['new_value']                   = $condition_from_retail;
                                    $params['user_id']                     = \Auth::user()->id;

                                    $log_history = \App\SupplierDiscountLogHistory::create($params);
                                }

                                if ($exist_row->generic_price != $generic_price) {
                                    $updaterow4 = SupplierBrandDiscount::where('brand_id', $brand->id)->where('supplier_id', $request->supplier)->where('gender', $gender)->where('category', $category)->where('generic_price', $exist_row->generic_price)->update(['generic_price' => $generic_price]);

                                    $params['supplier_brand_discounts_id'] = $exist_row->id;
                                    $params['header_name']                 = 'generic_price';
                                    $params['old_value']                   = $exist_row->generic_price;
                                    $params['new_value']                   = $generic_price;
                                    $params['user_id']                     = \Auth::user()->id;

                                    $log_history = \App\SupplierDiscountLogHistory::create($params);
                                }
                            } else {
                                $discount->supplier_id           = $request->supplier;
                                $discount->brand_id              = $brand->id;
                                $discount->gender                = $gender;
                                $discount->category              = $category;
                                $discount->generic_price         = $generic_price;
                                $discount->condition_from_retail = $condition_from_retail;
                                $discount->save();

                                if ($condition_from_retail != null) {
                                    $params['supplier_brand_discounts_id'] = $discount->id;
                                    $params['header_name']                 = 'condition_from_retail';
                                    $params['old_value']                   = '-';
                                    $params['new_value']                   = $condition_from_retail;
                                    $params['user_id']                     = \Auth::user()->id;
                                    $log_history                           = \App\SupplierDiscountLogHistory::create($params);
                                }

                                if ($generic_price != null) {
                                    $params['supplier_brand_discounts_id'] = $discount->id;
                                    $params['header_name']                 = 'generic_price';
                                    $params['old_value']                   = '-';
                                    $params['new_value']                   = $generic_price;
                                    $params['user_id']                     = \Auth::user()->id;
                                    $log_history                           = \App\SupplierDiscountLogHistory::create($params);
                                }
                            }
                        }
                    }
                }

                $file->move(public_path('product_discount_file'), $fileName);
                $excel_log = ProductDiscountExcelFile::create($params_file);

                return redirect()->back()->with('success', 'Excel Imported Successfully!');
            }
        } catch (Exception $e) {
            return redirect()->back()->with('error', 'Something went wrong, please check your file!');
        }

        return redirect()->back()->with('error', 'Something went wrong, please check your file!');
    }

    public function mapping_excel(Request $request)
    {
        $this->validate($request, [
            'excel' => 'required|file',
        ]);

        $file = $request->file('excel');

        if ($file->getClientOriginalExtension() == 'xlsx') {
            $reader = new Xlsx();
        } else {
            if ($file->getClientOriginalExtension() == 'xls') {
                $reader = new Xls();
            }
        }

        try {
            $ogfilename                = $file->getClientOriginalName();
            $fileName_array            = rtrim($ogfilename, '.xlsx');
            $fileName                  = ($fileName_array) . '_' . time() . '.' . $file->extension();
            $params_file['excel_name'] = $fileName;
            $params_file['user_id']    = \Auth::user()->id;

            $spreadsheet = $reader->load($file->getPathname());

            $rows = $spreadsheet->getActiveSheet()->toArray();
            $i    = 0;
            foreach ($rows as $row) {
                if ($row[$i] != '' && $row[$i + 1] != '' && $row[$i + 2] != '') {
                    $data         = $row;
                    $column_index = $i;
                    break;
                }
                $i++;
            }

            return response()->json(['code' => 200, 'message' => 'Header Data Get Successfully , Please do Mapping', 'header_data' => $data, 'column_index' => $column_index]);
        } catch (Exception $e) {
            return response()->json(['code' => 400, 'message' => 'Something went wrong, please check your file!']);
        }

        return response()->json(['code' => 400, 'message' => 'Something went wrong, please check your file!']);
    }

    public function export_mapping_excel(Request $request)
    {
        $file = $request->file;

        if ($file->getClientOriginalExtension() == 'xlsx') {
            $reader = new Xlsx();
        } else {
            if ($file->getClientOriginalExtension() == 'xls') {
                $reader = new Xls();
            }
        }

        try {
            $brand_index                     = $request->brand_dropdown;
            $gender_index                    = $request->gender_dropdown;
            $category_index                  = $request->category_dropdown;
            $exceptions_index                = $request->exceptions_dropdown;
            $generice_price_index            = $request->generice_price_dropdown;
            $condition_from_retail_index     = $request->condition_from_retail_dropdown;
            $condition_from_exceptions_index = $request->condition_from_exceptions_dropdown;
            $column_index                    = $request->column_index;

            $ogfilename = $file->getClientOriginalName();

            $fileName_array = rtrim($ogfilename, '.xlsx');
            $fileName       = ($fileName_array) . '_' . time() . '.' . $file->extension();

            $params_file['excel_name'] = $fileName;
            $params_file['user_id']    = \Auth::user()->id;

            $spreadsheet = $reader->load($file->getPathname());

            $rows = $spreadsheet->getActiveSheet()->toArray();

            foreach ($rows as $key => $row) {
                if ($key <= $column_index) {
                    continue;
                }

                $brand_name = trim($row[$brand_index]);

                if ($brand_name != '') {
                    $brand = Brand::where('name', 'like', '%' . $brand_name . '%')->first();
                } else {
                    $brand = '';
                }

                if (! $brand && $brand_name != '') {
                    $params_brand = [
                        'name' => $brand_name,
                    ];
                    $brand = Brand::create($params_brand);
                }

                if ($brand) {
                    if ($row[$condition_from_retail_index] != '') {
                        $segments = CategorySegment::where('status', 1)->get();
                        if (! $segments->isEmpty()) {
                            foreach ($segments as $segment) {
                                $csd = \App\CategorySegmentDiscount::where('brand_id', $brand->id)->where('category_segment_id', $segment->id)->first();
                                if ($csd) {
                                    $csd->amount = $row[$condition_from_retail_index];
                                    $csd->save();
                                } else {
                                    \App\CategorySegmentDiscount::create([
                                        'brand_id'            => $brand->id,
                                        'category_segment_id' => $segment->id,
                                        'amount'              => $row[$condition_from_retail_index],
                                        'amount_type'         => 'percentage',
                                    ]);
                                }
                            }
                        }
                    }
                    $discount = new SupplierBrandDiscount();

                    $exist_row = SupplierBrandDiscount::where('brand_id', $brand->id)->where('supplier_id', $request->supplier)->where('gender', $row[$gender_index])->where('category', $row[$category_index])->first();

                    if ($exist_row) {
                        if ($generice_price_index != null && $exist_row->generic_price != $row[$generice_price_index]) {
                            $updaterow3 = SupplierBrandDiscount::where('brand_id', $brand->id)->where('supplier_id', $request->supplier)->where('gender', $row[$gender_index])->where('category', $row[$category_index])->where('generic_price', $exist_row->generic_price)->update(['generic_price' => $row[$generice_price_index]]);

                            $params['supplier_brand_discounts_id'] = $exist_row->id;
                            $params['header_name']                 = 'generic_price';
                            $params['old_value']                   = $exist_row->generic_price;
                            $params['new_value']                   = $row[$generice_price_index];
                            $params['user_id']                     = \Auth::user()->id;

                            $log_history = \App\SupplierDiscountLogHistory::create($params);
                        }

                        if ($condition_from_retail_index != null && $exist_row->condition_from_retail != $row[$condition_from_retail_index]) {
                            $updaterow4 = SupplierBrandDiscount::where('brand_id', $brand->id)->where('supplier_id', $request->supplier)->where('gender', $row[$gender_index])->where('category', $row[$category_index])->where('condition_from_retail', $exist_row->condition_from_retail)->update(['condition_from_retail' => $row[$condition_from_retail_index]]);

                            $params['supplier_brand_discounts_id'] = $exist_row->id;
                            $params['header_name']                 = 'condition_from_retail';
                            $params['old_value']                   = $exist_row->condition_from_retail;
                            $params['new_value']                   = $row[$condition_from_retail_index];
                            $params['user_id']                     = \Auth::user()->id;

                            $log_history = \App\SupplierDiscountLogHistory::create($params);
                        }

                        if ($condition_from_exceptions_index != null && $exist_row->condition_from_retail_exceptions != $row[$condition_from_exceptions_index]) {
                            $updaterow5 = SupplierBrandDiscount::where('brand_id', $brand->id)->where('supplier_id', $request->supplier)->where('gender', $row[$gender_index])->where('category', $row[$category_index])->where('condition_from_retail', $row[$condition_from_retail_index])->where('condition_from_retail_exceptions', $exist_row->condition_from_retail_exceptions)->update(['condition_from_retail_exceptions' => $row[$condition_from_exceptions_index]]);

                            $params['supplier_brand_discounts_id'] = $exist_row->id;
                            $params['header_name']                 = 'condition_from_retail_exceptions';
                            $params['old_value']                   = $exist_row->condition_from_retail_exceptions;
                            $params['new_value']                   = $row[$condition_from_exceptions_index];
                            $params['user_id']                     = \Auth::user()->id;

                            $log_history1 = \App\SupplierDiscountLogHistory::create($params);
                        }
                    } else {
                        $discount->supplier_id                      = $request->supplier;
                        $discount->brand_id                         = $brand->id;
                        $discount->gender                           = $row[$gender_index];
                        $discount->category                         = $row[$category_index];
                        $discount->generic_price                    = ($generice_price_index != null ? $row[$generice_price_index] : null);
                        $discount->exceptions                       = ($exceptions_index != null ? $row[$exceptions_index] : null);
                        $discount->condition_from_retail            = ($condition_from_retail_index != null ? $row[$condition_from_retail_index] : null);
                        $discount->condition_from_retail_exceptions = ($condition_from_exceptions_index ? $row[$condition_from_exceptions_index] : null);
                        $discount->save();

                        if ($generice_price_index != null && $row[$generice_price_index] != null) {
                            $params['supplier_brand_discounts_id'] = $discount->id;
                            $params['header_name']                 = 'generic_price';
                            $params['old_value']                   = '-';
                            $params['new_value']                   = $row[$generice_price_index];
                            $params['user_id']                     = \Auth::user()->id;
                            $log_history                           = \App\SupplierDiscountLogHistory::create($params);
                        }

                        if ($condition_from_retail_index != null && $row[$condition_from_retail_index] != null) {
                            $params['supplier_brand_discounts_id'] = $discount->id;
                            $params['header_name']                 = 'condition_from_retail';
                            $params['old_value']                   = '-';
                            $params['new_value']                   = $row[$condition_from_retail_index];
                            $params['user_id']                     = \Auth::user()->id;
                            $log_history                           = \App\SupplierDiscountLogHistory::create($params);
                        }

                        if ($condition_from_exceptions_index != null && $row[$condition_from_exceptions_index] != null) {
                            $params['supplier_brand_discounts_id'] = $discount->id;
                            $params['header_name']                 = 'condition_from_retail_exceptions';
                            $params['old_value']                   = '-';
                            $params['new_value']                   = $row[$condition_from_exceptions_index];
                            $params['user_id']                     = \Auth::user()->id;
                            $log_history1                          = \App\SupplierDiscountLogHistory::create($params);
                        }
                    }
                }
            }

            $file->move(public_path('product_discount_file'), $fileName);
            $excel_log = ProductDiscountExcelFile::create($params_file);

            return response()->json(['code' => 200, 'message' => 'Excel Imported Successfully!']);
        } catch (Exception $e) {
            return response()->json(['code' => 400, 'message' => 'Something went wrong, please check your file!']);
        }

        return response()->json(['code' => 400, 'message' => 'Something went wrong, please check your file!']);
    }

    public function updategenericprice(Request $request)
    {
        $generic_price_data = $request->generic_price_data;
        $id                 = $request->generic_id;

        $brand_disc = SupplierBrandDiscount::find($id);

        $brand_disc_history                              = new SupplierDiscountLogHistory;
        $brand_disc_history->supplier_brand_discounts_id = $id;
        $brand_disc_history->header_name                 = 'generic_price';
        $brand_disc_history->old_value                   = $brand_disc->generic_price;
        $brand_disc_history->new_value                   = $generic_price_data;
        $brand_disc_history->user_id                     = \Auth::id();

        $brand_disc_history->save();

        $brand_disc->generic_price = $generic_price_data;
        $brand_disc->save();

        return response()->json([
            'brand_disc' => $brand_disc,
        ]);
    }

    public function conditionprice(Request $request)
    {
        $condition_from_retail_data = $request->condition_from_retail_data;
        $id                         = $request->condition_id;

        $condition_disc = SupplierBrandDiscount::find($id);

        $condition_disc_history                              = new SupplierDiscountLogHistory;
        $condition_disc_history->supplier_brand_discounts_id = $id;
        $condition_disc_history->header_name                 = 'condition_from_retail';
        $condition_disc_history->old_value                   = $condition_disc->condition_from_retail;
        $condition_disc_history->new_value                   = $condition_from_retail_data;
        $condition_disc_history->user_id                     = \Auth::id();

        $condition_disc_history->save();

        $condition_disc->condition_from_retail = $condition_from_retail_data;
        $condition_disc->save();

        return response()->json([
            'condition_disc' => $condition_disc,
        ]);
    }

    public function exceptionsprice(Request $request)
    {
        $condition_from_retail_exceptions_data = $request->condition_from_retail_exceptions_data;
        $id                                    = $request->condition_exceptions_id;

        $exceptions_discount = SupplierBrandDiscount::find($id);

        $exceptions_discount_his                              = new SupplierDiscountLogHistory;
        $exceptions_discount_his->supplier_brand_discounts_id = $id;
        $exceptions_discount_his->header_name                 = 'condition_from_retail_exceptions';
        $exceptions_discount_his->old_value                   = $exceptions_discount->condition_from_retail_exceptions;
        $exceptions_discount_his->new_value                   = $condition_from_retail_exceptions_data;
        $exceptions_discount_his->user_id                     = \Auth::id();

        $exceptions_discount_his->save();

        $exceptions_discount->condition_from_retail_exceptions = $condition_from_retail_exceptions_data;
        $exceptions_discount->save();

        return response()->json([
            'exceptions_discount' => $exceptions_discount,
        ]);
    }

    public function scrapelog(Request $request)
    {
        // Get results

        $logs = DB::table('scraped_product_missing_log');

        $logs        = $logs->paginate(Setting::get('pagination'));
        $total_count = $logs->total();
        // Show results
        if ($request->ajax()) {
            return view('products.scrape_log_ajax', compact('logs', 'total_count'));
        } else {
            return view('products.scrape_log', compact('logs', 'total_count'));
        }
    }

    // Inventory sold out products list
    public function getStockwithZeroQuantity(Request $request)
    {
        if ($request->ajax()) {
            $products = \App\InventoryStatusHistory::query();
            $products->with('product', 'supplier');

            if (isset($request->id) && ! empty($request->id)) {
                $products = $products->where('product_id', $request->id);
            }
            if (isset($request->name) && ! empty($request->name)) {
                $products->select('inventory_status_histories.*')->leftjoin('products as p1', 'p1.id', 'inventory_status_histories.product_id')->
                where('p1.name', $request->name);
            }

            if (isset($request->sku) && ! empty($request->sku)) {
                $products->select('inventory_status_histories.*')->leftjoin('products as p2', 'p2.id', 'inventory_status_histories.product_id')->
                where('p2.sku', $request->sku);
            }

            $products->where('in_stock', 1)
                ->groupBy('product_id')
                ->orderBy('created_at', 'desc');

            return Datatables::of($products)
                ->addIndexColumn()
                ->addColumn('product_name', function ($row) {
                    $product = $row->product ? $row->product->name : 'N/A';

                    return $product;
                })
                ->addColumn('sku', function ($row) {
                    $product = $row->product ? $row->product->sku : 'N/A';

                    return $product;
                })
                ->addColumn('action', function ($row) {
                    $actionBtn = '<a href="javascript:void(0)" data-id="' . $row->id . '" data-product-id="' . $row->product_id . '" class="get-product-log-detail btn btn-warning btn-sm"><i class="fa fa-list fa-sm"></i></a>&nbsp;';

                    return $actionBtn;
                })
                ->rawColumns(['action', 'product_name', 'sku'])
                ->make(true);
        }

        return view('product-inventory.out-of-stock');
    }

    // Inventory sold out product history list
    public function outOfStockProductLog(Request $request)
    {
        $product = $request->product;
        if ($product) {
            $productsLog = \App\InventoryStatusHistory::with('product', 'supplier')->where(['in_stock' => 1, 'product_id' => $request->product])->get();
            $productName = $productsLog[0]->product ? $productsLog[0]->product->name : 'N/A';
            $productSku  = $productsLog[0]->product ? $productsLog[0]->product->sku : 'N/A';
            $response    = (string) view('product-inventory.out-of-stock-product-log', compact('productsLog'));

            return response()->json(['success' => true, 'msg' => 'Product logs found successfully.', 'data' => $response, 'productName' => $productName, 'productSku' => $productSku]);
        } else {
            return response()->json(['success' => false, 'msg' => 'No product history found']);
        }
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/ProductTemplatesController.php 
Content: <?php

namespace App\Http\Controllers;

use App\Product;
use App\Setting;
use App\Category;
use App\Template;
use App\LogRequest;
use App\StoreWebsite;
use App\BroadcastImage;
use App\ProductTemplate;
use Plank\Mediable\Media;
use App\ProductTemplateLog;
use Illuminate\Http\Request;
use Plank\Mediable\Facades\MediaUploader as MediaUploader;

class ProductTemplatesController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request)
    {
        $images     = $request->get('images', false);
        $productArr = null;
        if ($images) {
            $productIdsArr = \DB::table('mediables')
                ->whereIn('media_id', json_decode($images))
                ->where('mediable_type', \App\Product::class)
                ->pluck('mediable_id')
                ->toArray();

            if (! empty($productIdsArr)) {
                $productArr = \App\Product::select('id', 'name', 'sku', 'brand')->whereIn('id', $productIdsArr)->get();
            }
        }

        $texts            = \App\ProductTemplate::where('text', '!=', '')->groupBy('text')->pluck('text', 'text')->toArray();
        $backgroundColors = \App\ProductTemplate::where('background_color', '!=', '')->groupBy('background_color')->pluck('background_color', 'background_color')->toArray();

        $templateArr = \App\Template::all();

        $templatesJSON = \App\Template::with('modifications')->get()->toArray();

        return view('product-template.index', compact('templateArr', 'productArr', 'texts', 'backgroundColors', 'templatesJSON'));
    }

    public function response()
    {
        $keyword = request('keyword');

        $records = \App\ProductTemplate::leftJoin('brands as b', 'b.id', 'product_templates.brand_id')->leftJoin('store_websites as sw', 'sw.id', 'product_templates.store_website_id');

        if (! empty($keyword)) {
            $records = $records->where(function ($q) use ($keyword) {
                $q->orWhere('product_templates.product_title', 'like', '%' . $keyword . '%')->orWhere('product_templates.text', 'like', '%' . $keyword . '%')->orWhere('product_templates.product_id', 'like', '%' . $keyword . '%');
            });
        }
        $records = $records->orderBy('id', 'desc')
            ->select(['product_templates.*', 'b.name as brand_name', 'sw.title as website_name'])
            ->paginate(Setting::get('pagination'));

        $array = [];
        foreach ($records as $record) {
            if ($record->hasMedia('template-image')) {
                $media = $record->getMedia('template-image')->first();
                if (! empty($media)) {
                    $record->image_url = getMediaUrl($media);
                }
            }
        }

        return response()->json([
            'code'       => 1,
            'result'     => $records,
            'pagination' => (string) $records->appends(request()->except('page')),
        ]);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     *                                   function is renamed from create to previous_create after implement bearbanner api
     */
    public function previous_create(Request $request)
    {
        $template = new \App\ProductTemplate;
        $params   = request()->all();
        if (empty($params['product_id'])) {
            $params['product_id'] = [];
        }
        $params['product_id'] = implode(',', (array) $params['product_id']);
        if (isset($params['background_color']) && is_array($params['background_color'])) {
            $params['background_color'] = implode(',', (array) $params['background_color']);
        }

        $template->fill($params);

        if ($template->save()) {
            if (! empty($request->get('product_media_list')) && is_array($request->get('product_media_list'))) {
                foreach ($request->get('product_media_list') as $mediaid) {
                    $media = Media::find($mediaid);
                    $template->attachMedia($media, ['template-image']);
                }
            }

            if ($request->hasFile('files')) {
                foreach ($request->file('files') as $image) {
                    $media = MediaUploader::fromSource($image)->toDirectory('product-template-images')->upload();
                    $template->attachMedia($media, ['template-image']);
                }
            }
        }

        return response()->json(['code' => 1, 'message' => 'Product Template Created successfully!']);
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        $template = \App\ProductTemplate::where('id', $id)->first();

        if ($template) {
            $template->delete();
        }

        return response()->json(['code' => 1, 'message' => 'Product Template Deleted successfully!']);
    }

    /**
     * @SWG\Get(
     *   path="/product-template",
     *   tags={"Product Template"},
     *   summary="Get Product Template",
     *   operationId="get-product-template",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *   @SWG\Response(response=406, description="not acceptable"),
     *   @SWG\Response(response=500, description="internal server error"),
     *
     *      @SWG\Parameter(
     *          name="mytest",
     *          in="path",
     *          required=true,
     *          type="string"
     *      ),
     * )
     */
    public function apiIndex(Request $request)
    {
        $record = \App\ProductTemplate::where('is_processed', '!=', 2)->where('template_status', 'python')->latest()->first();

        if (! $record) {
            $data = ['message' => 'Template not found'];

            return response()->json($data);
        }

        if ($record->category) {
            $category = $record->category;
            // Get other information related to category
            $cat = $category->title;
        }

        $parent = '';
        $child  = '';

        try {
            if ($cat != 'Select Category') {
                if ($category->isParent($category->id)) {
                    $parent = $cat;
                    $child  = $cat;
                } else {
                    $parent = $category->parent()->first()->title;
                    $child  = $cat;
                }
            }
        } catch (\ErrorException $e) {
            //
        }
        $productCategory = $parent . ' ' . $child;

        $data = [];
        //check if template exist
        $templateProductCount = $record->template->no_of_images;

        $record->is_processed = 2;
        $record->save();

        if ($record) {
            $data = [
                'id'                     => $record->id,
                'templateNumber'         => $record->template_no,
                'productTitle'           => $record->product_title,
                'productBrand'           => ($record->brand) ? $record->brand->name : '',
                'productCategory'        => $productCategory,
                'productPrice'           => $record->price,
                'productDiscountedPrice' => $record->discounted_price,
                'productCurrency'        => $record->currency,
                'text'                   => $record->text,
                'fontStyle'              => $record->font_style,
                'fontSize'               => $record->font_size,
                'backgroundColor'        => explode(',', $record->background_color),
                'color'                  => $record->color,
                'logo'                   => ($record->storeWebsite) ? $record->storeWebsite->title : '',
            ];

            if ($record->hasMedia('template-image-attach')) {
                $images = [];
                foreach ($record->getMedia('template-image-attach') as $i => $media) {
                    $images[] = getMediaUrl($media);
                }
                $data['image'] = $images;
            }
        }

        return response()->json($data);
    }

    /**
     * @SWG\Post(
     *   path="/product-template",
     *   tags={"Product Template"},
     *   summary="Save Product Template",
     *   operationId="save-product-template",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *   @SWG\Response(response=406, description="not acceptable"),
     *   @SWG\Response(response=500, description="internal server error"),
     *
     *      @SWG\Parameter(
     *          name="mytest",
     *          in="path",
     *          required=true,
     *          type="string"
     *      ),
     * )
     */
    public function apiSave(Request $request)
    {
        // Try to get ID from 'product_id' (this will be changed to id)
        $id = $request->post('product_id', 0);

        // Try to get ID from 'id' if no id is set
        if ((int) $id == 0) {
            $id = $request->post('id', 0);
        }

        // Only do queries if we have an id
        if ((int) $id > 0) {
            $template = \App\ProductTemplate::where('id', $id)->first();

            if ($template) {
                if ($request->post('image')) {
                    $image = base64_decode($request->post('image'));
                    $media = MediaUploader::fromString($image)->toDirectory(date('Y/m/d'))->useFilename('product-template-' . $id)->upload();
                    $template->attachMedia($media, 'template-image');
                    $template->is_processed = 1;
                    $template->save();

                    // Store as broadcast image
                    $broadcastImage           = new BroadcastImage();
                    $broadcastImage->products = '[' . $template->product_id . ']';
                    $broadcastImage->save();
                    $broadcastImage->attachMedia($media, config('constants.media_tags'));

                    //Save Product For Image In Mediable
                    if ($template->product_id != null) {
                        $product = Product::find($template->product_id);
                        $tag     = 'template_' . $template->template_no;
                        $product->attachMedia($media, $tag);
                    }

                    return response()->json(['code' => 1, 'message' => 'Product template updated successfully']);
                }
            } else {
                return response()->json(['code' => 0, 'message' => 'Sorry, can not find product template in record']);
            }
        }

        return response()->json(['code' => 0, 'message' => 'An unknown error has occured']);
    }

    public function NewApiSave(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'text'            => 'required',
            'backgroundColor' => 'nullable',
        ]);

        if ($validator->fails()) {
            return response()->json(['code' => 500, 'message' => 'Invalid request', 'error' => $validator->errors()]);
        }

        $new = [
            'text'             => request('text'),
            'background_color' => request('backgroundColor'),
        ];

        $template = ProductTemplate::insertGetId($new);
        $template = \App\ProductTemplate::where('id', $template)->first();
        if ($template) {
            return response()->json($template);
        }

        return response()->json(['code' => 0, 'message' => 'An unknown error has occured']);
    }

    /**
     * Show the image for selecting product id.
     *
     * @return \Illuminate\Http\Response
     */
    public function selectProductId(Request $request)
    {
        $html      = '';
        $productId = $request->get('product_ids');
        if ($productId) {
            $productArr = \App\Product::whereIn('id', $productId)->get();
            if ($productArr) {
                foreach ($productArr as $product) {
                    foreach ($product->media as $k => $media) {
                        $html .= '<div class="col-sm-3" style="padding-bottom: 10px;">
                                    <div class="imagePreview">
                                        <img src="' . getMediaUrl($media) . '" width="100%" height="100%">
                                    </div>
                                    <label class="btn btn-primary">
                                        <input type="checkbox" name="product_media_list[]" value="' . $media->id . '" class="product_media_list"> Select
                                    </label>
                                </div>';
                    }
                }
            }
        }

        return response()->json(['data' => $html]);
    }

    public function imageIndex(Request $request)
    {
        $temps = Template::all();
        if ($request->template || $request->brand || $request->category) {
            $query = ProductTemplate::query();

            if (! empty($request->template)) {
                $query->where('template_no', $request->template);
            }

            if (! empty($request->brand)) {
                $query->whereIn('brand_id', $request->brand);
            }

            if (! empty($request->category && $request->category[0] != 1)) {
                $query->whereIn('category_id', $request->category);
            }

            $range = explode(' - ', request('date_range'));

            if ($range[0] == end($range)) {
                $query->whereDate('updated_at', end($range));
            } else {
                $start = str_replace('/', '-', $range[0]);
                $end   = str_replace('/', '-', end($range));
                $query->whereBetween('updated_at', [$start, $end]);
            }

            $templates = $query->where('is_processed', 1)->orderBy('updated_at', 'desc')->paginate(Setting::get('pagination'))->appends(request()->except(['page']));
        } else {
            $templates = ProductTemplate::where('is_processed', 1)->orderBy('updated_at', 'desc')->paginate(Setting::get('pagination'));
        }

        $selected_categories = $request->category ? $request->category : 1;

        $category_selection = Category::attr(['name' => 'category[]', 'class' => 'form-control select-multiple2'])
            ->selected($selected_categories)
            ->renderAsDropdown();

        return view('product-template.image', compact('templates', 'temps', 'category_selection'));
    }

    public function create(Request $request)
    {
        $template    = new \App\ProductTemplate;
        $params      = request()->all();
        $imagesArray = [];
        if (empty($params['product_id'])) {
            $params['product_id'] = [];
        }

        $params['product_id'] = implode(',', (array) $params['product_id']);
        if ($request->modifications_array) {
            $params['background_color'] = $request->modifications_array[0]['background'] ?? null;
            $params['text']             = $request->modifications_array[0]['text'] ?? null;
            $params['color']            = $request->modifications_array[0]['color'] ?? null;
        }

        $template->fill($params);

        if ($template->save()) {
            $StoreWebsite = StoreWebsite::where('id', $request->store_website_id)->first();

            if (! empty($request->get('product_media_list')) && is_array($request->get('product_media_list'))) {
                $mediaList = array_unique($request->get('product_media_list'));
                foreach ($mediaList as $mediaid) {
                    $media = Media::find($mediaid);
                    try {
                        $template->attachMedia($media, ['template-image-attach']);
                        $template->save();
                    } catch (Exception $e) {
                    }

                    try {
                        $StoreWebsite->attachMedia($media, ['website-image-attach']);
                    } catch (Exception $e) {
                    }
                    $imagesArray[] = getMediaUrl($media);
                }
            }

            if ($request->hasFile('files')) {
                foreach ($request->file('files') as $image) {
                    $media = MediaUploader::fromSource($image)->toDirectory('product-template-images')->upload();

                    $template->attachMedia($media, ['template-image-attach']);
                    $template->save();
                    $imagesArray[] = getMediaUrl($media);

                    $StoreWebsite->attachMedia($media, ['website-image-attach']);
                }
            }

            if ($request->generate_image_from == 'banner-bear') {
                return $res = $this->makeBearBannerImage($request, $imagesArray, $template);
            } else {
                $template->template_status = 'python';
                $template->save();

                //call here the api
                if ($template->category) {
                    $category = $template->category;
                    // Get other information related to category
                    $cat = $category->title;
                }

                $parent = '';
                $child  = '';

                try {
                    if ($cat != 'Select Category') {
                        if ($category->isParent($category->id)) {
                            $parent = $cat;
                            $child  = $cat;
                        } else {
                            $parent = $category->parent()->first()->title;
                            $child  = $cat;
                        }
                    }
                } catch (\ErrorException $e) {
                    //
                }
                $productCategory = $parent . ' ' . $child;

                $data = [];
                //check if template exist
                $templateProductCount = $template->template->no_of_images;

                $template->is_processed = 2;
                $template->save();

                if ($template) {
                    try {
                        $data = [
                            'id'                     => $template->id,
                            'templateNumber'         => $template->template_no,
                            'productTitle'           => $template->product_title,
                            'productBrand'           => ($template->brand) ? $template->brand->name : '',
                            'productCategory'        => $productCategory,
                            'productPrice'           => $template->price,
                            'productDiscountedPrice' => $template->discounted_price,
                            'productCurrency'        => $template->currency,
                            'text'                   => $template->text,
                            'fontStyle'              => $template->font_style,
                            'fontSize'               => $template->font_size,
                            'backgroundColor'        => explode(',', $template->background_color),
                            'color'                  => $template->color,
                            'logo'                   => ($template->storeWebsite) ? $template->storeWebsite->title : '',
                        ];

                        if ($template->hasMedia('template-image-attach')) {
                            $images = [];
                            foreach ($template->getMedia('template-image-attach') as $i => $media) {
                                $images[] = getMediaUrl($media);
                            }
                            $data['image'] = $images;
                        }
                        \Log::info(json_encode($data, true));
                        $url           = env('PYTHON_PRODUCT_TEMPLATES') . '/api/product-template';
                        $response      = \App\Helpers\GuzzleHelper::post($url, $data, []);
                        $log           = new ProductTemplateLog();
                        $log->url      = $url;
                        $log->data     = json_encode($data);
                        $log->response = $response;
                        $log->save();
                    } catch (Exception $e) {
                        \Log::info('Product Templates controller : 541 ' . $e->getMessage());
                    }
                }
            }
        }

        return response()->json(['code' => 1, 'message' => 'Product Template Created successfully!']);
    }

    public function makeBearBannerImage($request, $imagesArray, $template)
    {
        try {
            $modifications = [];

            if ($request->modifications_array) {
                foreach ($request->modifications_array as $key => $value) {
                    array_push($modifications, $value);
                }
            }

            if (count($imagesArray)) {
                foreach ($imagesArray as $key => $image_url) {
                    $key = $key + 1;
                    array_push($modifications, ['name' => 'product_' . $key, 'image_url' => $image_url]);
                }
            }

            $body = ['template' => $template->template->uid, 'modifications' => $modifications, 'webhook_url' => route('api.product.update.webhook'), 'metadata' => $template->id];

            $url     = env('BANNER_API_LINK') . '/images';
            $api_key = env('BANNER_API_KEY');

            $headers = [
                'Authorization' => 'Bearer ' . $api_key,
                'Content-Type'  => 'application/json',
            ];

            $response = \App\Helpers\GuzzleHelper::post($url, $body, $headers);

            if (isset($response->uid)) {
                ProductTemplate::where('id', $template->id)->update(['uid' => $response->uid, 'is_processed' => 2, 'template_status' => $response->status]);
            }

            return response()->json(['code' => 1, 'message' => 'Product Template Created successfully!']);
        } catch (\GuzzleHttp\Exception\BadResponseException $e) {
            return response()->json(['code' => 0, 'message' => json_decode($e->getResponse()->getBody()->getContents())->message]);
        }
    }

    public function updateWebhook(Request $request)
    {
        $header = $request->header('Authorization', 'default');

        if ($header == 'Bearer ' . env('BANNER_WEBHOOK_KEY')) {
            if ($request->metadata) {
                $template = ProductTemplate::find($request->metadata);

                $template->template_status = $request->status;

                $contents = $this->getImageByCurl($request->image_url_png);

                $media = MediaUploader::fromString($contents)->useFilename('profile')->toDirectory('product-template-images')->upload();

                $template->attachMedia($media, ['template-image']);

                $template->template_status = $request->status;

                $template->save();
            }
        }
    }

    public function fetchImage(Request $request)
    {
        try {
            $url     = env('BANNER_API_LINK') . '/images/' . $request->uid;
            $api_key = env('BANNER_API_KEY');

            $headers = [
                'Authorization' => 'Bearer ' . $api_key,
                'Content-Type'  => 'application/json',
            ];

            $response = \App\Helpers\GuzzleHelper::get($url, $headers);

            if (isset($response->uid)) {
                $template = ProductTemplate::where('id', $response->metadata)->first();

                $path     = $response->image_url_png;
                $filename = basename($path);
                $media    = MediaUploader::fromSource($image)->toDirectory(date('Y/m/d'))->useFilename($filename)->upload();
                $template->attachMedia($media, 'template-image');
                $template->save();

                ProductTemplate::where('id', $response->metadata)->where('uid', $response->uid)->update(['template_status' => $response->status, 'is_processed' => 1, 'image_url' => $response->image_url_png]);
            }

            return response()->json(['code' => 1, 'message' => 'Image fetched successfully!', 'image' => $response->image_url_png]);
        } catch (\GuzzleHttp\Exception\BadResponseException $e) {
            return response()->json(['code' => 0, 'message' => json_decode($e->getResponse()->getBody()->getContents())->message]);
        }
    }

    public function getImageByCurl($url)
    {
        $startTime = date('Y-m-d H:i:s', LARAVEL_START);
        $ch        = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        $response = curl_exec($ch);
        $httpcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        LogRequest::log($startTime, $url, 'POST', json_encode([]), json_decode($response), $httpcode, \App\Http\Controllers\ProductTemplatesController::class, 'restartScript');
        curl_close($ch);

        return $response;
    }

    public function getlog()
    {
        $template_logs = ProductTemplateLog::paginate(15);

        return view('product-template.logs', compact('template_logs'));
    }

    public function loginstance(Request $request)
    {
        $url  = env('PYTHON_PRODUCT_TEMPLATES') . '/api/get-logs';
        $date = ($request->date != '') ? \Carbon\Carbon::parse($request->date)->format('m-d-Y') : '';
        \Log::info('Payment_Template_loginstance -->' . $url);
        if (! empty($date)) {
            $data = ['date' => $date];
        } else {
            return response()->json([
                'type'     => 'error',
                'response' => 'Please select Date',
            ], 200);
        }

        $data = json_encode($data);

        \Log::info('Payment_Template_loginstance -->' . $data);
        $ch = curl_init($url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
        curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: application/json', 'accept: application/json']);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
        $result1 = curl_exec($ch);
        \log::info($result1);
        $result = explode("\n", $result1);
        \log::info($result);
        if (count($result) > 1) {
            return response()->json([
                'type'     => 'success',
                'response' => view('instagram.hashtags.partials.get_status', compact('result'))->render(),
            ], 200);
        } else {
            return response()->json([
                'type'     => 'error',
                'response' => ($result[0] == '') ? 'Please select Date' : "Product Template for $date is  not found",
            ], 200);
        }
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/Products/ManualCroppingController.php 
Content: <?php

namespace App\Http\Controllers\Products;

use File;
use App\Product;
use Carbon\Carbon;
use App\ListingHistory;
use App\ScrapedProducts;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Auth;
use Plank\Mediable\Facades\MediaUploader as MediaUploader;

class ManualCroppingController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        $products = Product::where('manual_crop', 1)
            ->where('stock', '>=', 1)
            ->where('is_crop_approved', 0)
            ->where('is_manual_cropped', 0)
            ->whereIn('id', DB::table('user_manual_crop')->where('user_id', Auth::id())->pluck('product_id')->toArray())
            ->get();

        return view('products.crop.manual.index', compact('products'));
    }

    public function assignProductsToUser()
    {
        $currentUser = Auth::user();

        $reservedProductIds = DB::table('user_manual_crop')->pluck('product_id')->toArray();
        $products           = Product::whereNotIn('id', $reservedProductIds)
            ->where('manual_crop', 1)
            ->where('is_crop-approved', 0)
            ->where('is_manual_cropped', 0)
            ->take(25)
            ->get();

        if ($products->count() === 0) {
            return redirect()->back()->with('message', 'There are no products to be assigned!');
        }

        $currentUser->manualCropProducts()->attach($products);

        return redirect()->back()->with('message', $products->count() . ' new products assigned successfully!');
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        //
    }

    /**
     * Display the specified resource.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        $product = Product::find($id);

        if (! $product) {
            return redirect()->action([\App\Http\Controllers\Products\ManualCroppingController::class, 'index'])->with('message', 'The product you were trying to open does not exist anymore.');
        }

        $originalMediaCount = 0;

        $medias = $product->getMedia(config('constants.media_tags'));
        foreach ($medias as $media) {
            if (stripos(strtoupper($media->filename), 'CROPPED') === false) {
                $originalMediaCount++;
            }
        }

        $references = ScrapedProducts::where('sku', $product->sku)->pluck('url', 'website');

        return view('products.crop.manual.show', compact('product', 'references', 'originalMediaCount'));
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        $this->validate($request, [
            'images' => 'required',
        ]);

        $product = Product::find($id);
        $files   = $request->allFiles();

        if ($files !== []) {
            $this->deleteCroppedImages($product);
            foreach ($files['images'] as $file) {
                $media = MediaUploader::fromSource($file)
                    ->useFilename(uniqid('cropped_', true))
                    ->toDirectory('product/' . floor($product->id / config('constants.image_per_folder')))
                    ->upload();
                $product->attachMedia($media, config('constants.media_tags'));
            }
        }

        $product->is_crop_rejected   = 0;
        $product->cropped_at         = Carbon::now()->toDateTimeString();
        $product->manual_cropped_at  = Carbon::now()->toDateTimeString();
        $product->is_image_processed = 1;
        $product->is_manual_cropped  = 1;
        $product->manual_crop        = 1;
        $product->manual_cropped_by  = Auth::id();
        $product->save();

        $e             = new ListingHistory();
        $e->user_id    = Auth::user()->id;
        $e->product_id = $product->id;
        $e->content    = ['action' => 'MANUAL_CROPPED', 'page' => 'Manual Crop Page'];
        $e->action     = 'MANUAL_CROPPED';
        $e->save();

        $product = Product::where('manual_crop', 1)
            ->where('is_crop_approved', 0)
            ->where('is_manual_cropped', 0)
            ->whereIn('id', DB::table('user_manual_crop')->where('user_id', Auth::id())->pluck('product_id')->toArray())
            ->first();

        if (! $product) {
            return redirect()->action([\App\Http\Controllers\Products\ManualCroppingController::class, 'index'])->with('message', 'There are no assigned products available for cropping anymore.');
        }

        return redirect()->action([\App\Http\Controllers\Products\ManualCroppingController::class, 'show'], $product->id)->with('message', 'The previous product has been sent for approval!');
    }

    private function deleteCroppedImages($product)
    {
        if ($product->hasMedia(config('constants.media_tags'))) {
            foreach ($product->getMedia(config('constants.media_tags')) as $key => $image) {
                if (stripos(strtoupper($image->filename), 'CROPPED') !== false) {
                    $image_path = $image->getAbsolutePath();

                    if (File::exists($image_path)) {
                        try {
                            File::delete($image_path);
                        } catch (Exception $exception) {
                        }
                    }

                    $image->delete();
                }
            }

            $product->is_image_processed = 1;
            $product->save();
        }
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        //
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/ProjectFileManagerController.php 
Content: <?php

namespace App\Http\Controllers;

use DB;
use File;
use App\User;
use App\Setting;
use App\ProjectFileManager;
use Illuminate\Http\Request;
use App\ProjectFileManagerHistory;

class ProjectFileManagerController extends Controller
{
    public $folderLimit = ['public' => 200];

    public $dumpData = [];

    public $updateData = [];

    public $count = 0;

    public function index(Request $request)
    {
        $totalSizeq = ProjectFileManager::whereNull('parent')->get();

        $totalSize = 0;

        if (! $totalSizeq->isEmpty()) {
            foreach ($totalSizeq as $tSq) {
                $size = preg_replace('/[^0-9.]+/', '', $tSq->size);
                $totalSize += $size;
            }
        }

        $query = ProjectFileManager::query();
        if ($request->search) {
            $query = $query->where('name', 'LIKE', '%' . $request->search . '%')->orWhere('parent', 'LIKE', '%' . $request->search . '%');
        }
        $projectDirectoryData = $query->orderByRaw('CAST(size AS DECIMAL(10,2)) DESC')->paginate(25)->appends(request()->except(['page']));

        $limit_data = Setting::get('project_file_managers');

        if ($limit_data) {
            $limit_rec = $limit_data;
        } else {
            $limit_rec = 10;
        }

        return view('project_directory_manager.index', compact('projectDirectoryData', 'totalSize', 'limit_rec'))
            ->with('i', ($request->input('page', 1) - 1) * 5);
    }

    public function insertsize(Request $request)
    {
        $data = ['val' => $request->size,
            'name'     => 'project_file_managers',
            'type'     => 'int',
        ];

        Setting::updateOrCreate(
            [
                'name' => 'project_file_managers',
            ],
            $data
        );
    }

    public function update(Request $request)
    {
        if ($request->post('id') && $request->post('size')) {
            $directoryData                  = ProjectFileManager::find($request->post('id'));
            $directoryData->notification_at = $request->post('size');
            $directoryData->save();
            echo 'Size Updated Successfully';
        } else {
            echo 'Incomplete Request';
        }
    }

    //Cron Funciton called from ProjectDirectory Console Command to dump all folders in Db
    public function listTree()
    {
        $directory = base_path();
        \Log::info('PROJECT_MANAGER => started to scan file directory');
        $this->listFolderFiles($directory);

        ProjectFileManager::insert($this->dumpData);

        foreach ($this->updateData as $key => $value) {
            DB::table('project_file_managers')
                ->where('id', $value['id'])
                ->update(['size' => $value['size']]);
        }
        exit;
    }

    public function listFolderFiles($dir)
    {
        //for replace base path
        $basePath = base_path();
        foreach (new \DirectoryIterator($dir) as $fileInfo) {
            if (! $fileInfo->isDot()) {
                if ($fileInfo->isDir()) {
                    $exePath = ['.git', 'vendor'];
                    $yes     = false;
                    foreach ($exePath as $exe) {
                        if (stripos($fileInfo->getPathname(), $exe) !== false) {
                            $yes = true;
                        }
                    }

                    if ($yes) {
                        continue;
                    }

                    $batchPathReplace = str_replace($basePath, '', $fileInfo->getPathname());
                    $parentPath       = str_replace($fileInfo->getFilename(), '', $batchPathReplace);
                    $parentPath       = str_replace('\\', '/', $parentPath);

                    $size = $this->folderSize($fileInfo->getPathname());

                    $data = DB::table('project_file_managers')->where('name', $fileInfo->getFilename())->where('parent', $parentPath)->first();

                    if (empty($data)) {
                        $this->dumpData[$this->count]['name']         = $fileInfo->getFilename();
                        $this->dumpData[$this->count]['project_name'] = 'erp';
                        $this->dumpData[$this->count]['size']         = $size;
                        $this->dumpData[$this->count]['parent']       = $parentPath;
                        $this->dumpData[$this->count]['created_at']   = date('Y-m-d H:i:s');
                    } else {
                        $this->updateData[$data->id]['id']   = $data->id;
                        $this->updateData[$data->id]['size'] = $size;
                        $sizeInMB                            = number_format($size / 1048576, 0);
                        if (isset($data->notification_at) && $sizeInMB > $data->notification_at) {
                            $requestData = new Request();
                            $requestData->setMethod('POST');
                            $requestData->request->add(['priority' => 1, 'issue' => "Error With folder size {$fileInfo->getFilename()} which is more then {$sizeInMB} and expected size is {$data->notification_at}", 'status' => 'Planned', 'module' => "{$sizeInMB}", 'subject' => "Error With folder size {$fileInfo->getFilename()}", 'assigned_to' => 6]);
                            app(\App\Http\Controllers\DevelopmentController::class)->issueStore($requestData, 'issue');
                        }
                    }
                    $this->count++;
                    self::listFolderFiles($fileInfo->getPathname());
                }
            }
        }
    }

    public function folderSize($dir)
    {
        $size = 0;

        foreach (glob(rtrim($dir, '/') . '/*', GLOB_NOSORT) as $each) {
            $size += is_file($each) ? filesize($each) : self::folderSize($each);
        }

        return $size;
    }

    public function getLatestSize(Request $request)
    {
        ini_set('memory_limt', -1);
        $id          = $request->get('id');
        $fileManager = \App\ProjectFileManager::find($id);
        if ($fileManager) {
            $path      = base_path() . DIRECTORY_SEPARATOR . (str_replace('./', '', $fileManager->name));
            $file_size = 0;
            $old_size  = $fileManager->size;

            $limit_data = Setting::get('project_file_managers');

            if ($limit_data) {
                $limit_rec = $limit_data;
            } else {
                $limit_rec = 10;
            }

            $increase_size = (($old_size * $limit_rec) / 100);

            if (is_dir($path)) {
                $io       = popen('/usr/bin/du -sk ' . $path, 'r');
                $size     = fgets($io, 4096);
                $new_size = substr($size, 0, strpos($size, "\t"));
                pclose($io);
            } else {
                $new_size = filesize($path) / 1024;
                $new_size = round($new_size, 2);
            }

            if (is_numeric($new_size)) {
                $size = number_format($new_size / 1024, 2, '.', '');
            }

            $fileManager->size = $new_size;
            $fileManager->save();

            if ($old_size != $new_size) {
                $param = [
                    'project_id' => $id,
                    'name'       => $fileManager->name,
                    'old_size'   => $old_size . 'MB',
                    'new_size'   => $new_size . 'MB',
                    'user_id'    => \Auth::user()->id,
                ];

                ProjectFileManagerHistory::create($param);
            }

            $both_size = ($old_size + $increase_size);

            if ($new_size >= $both_size) {
                $message = 'Project Directory Size increase in Path = ' . $fileManager->name . ',' . ' OldSize = ' . $old_size . 'MB' . ' And ' . 'NewSize = ' . $new_size . 'MB';

                $users = User::get();
                foreach ($users as $user) {
                    if ($user->isAdmin()) {
                        app(\App\Http\Controllers\WhatsAppController::class)->sendWithWhatsApp($user->phone, $user->whatsapp_number, $message);
                    }
                }
                $updatesize = DB::table('project_file_managers')->where(['id' => $id])->update(['display_dev_master' => 1]);
            } else {
                $updatesize = DB::table('project_file_managers')->where(['id' => $id])->update(['display_dev_master' => 0]);
            }

            return response()->json(['code' => 200, 'message' => 'Current size is : ' . $new_size, 'size' => $new_size . '(MB)']);
        }

        return response()->json(['code' => 500, 'message' => 'Current size is : ' . $new_size]);
    }

    public function sizelogHistory(Request $request)
    {
        $users = User::get();
        $id    = $request->id;

        $past_date = date('Y-m-d', strtotime('-7 days'));

        $size_log = ProjectFileManagerHistory::Leftjoin('users', 'users.id', 'project_file_managers_history.user_id')
            ->where('project_id', $id)
            ->whereDate('project_file_managers_history.created_at', '>=', $past_date)
            ->select('project_file_managers_history.*', 'users.name')->get();

        if ($size_log) {
            return $size_log;
        }

        return 'error';
    }

    public function deleteFile(Request $request)
    {
        $id          = $request->get('id');
        $fileManager = \App\ProjectFileManager::find($id);
        if ($fileManager) {
            $path = base_path() . DIRECTORY_SEPARATOR . (str_replace('./', '', $fileManager->name));
            if (! is_dir($path)) {
                if (! is_writable($path)) {
                    return response()->json(['code' => 500, 'message' => "{$path} is not writeable"]);
                } else {
                    unlink($path);
                    $fileManager->delete();

                    return response()->json(['code' => 200, 'message' => "{$path} has been deleted"]);
                }
            } else {
                return response()->json(['code' => 500, 'message' => "can not delete {$path} is directory"]);
            }
        }

        return response()->json(['code' => 500, 'message' => "{$path} has been not found in record"]);
    }

    public function getfilenameandsize(Request $request)
    {
        $name = $request->get('name');

        $path  = base_path() . DIRECTORY_SEPARATOR . (str_replace('./', '', $name));
        $files = File::files($path);

        $file_size_arr = [];

        foreach ($files as $key => $value) {
            $file_size_arr[$key]['file_name'] = $value->getfilename();

            $base      = log($value->getSize()) / log(1024);
            $suffix    = ['', 'k', 'M', 'G', 'T'][floor($base)];
            $size      = pow(1024, $base - floor($base)) . $suffix;
            $File_size = round($size, 2) . ' ' . $suffix;

            $file_size_arr[$key]['file_size'] = $File_size;
        }

        return response()->json(['file_size_arr' => $file_size_arr, 'path' => $path, 'files' => $files]);
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/PurchaseController.php 
Content: <?php

namespace App\Http\Controllers;

use Auth;
use Storage;
use App\File;
use App\Task;
use App\User;
use App\Agent;
use App\Brand;
use App\Email;
use App\Order;
use App\Reply;
use App\Remark;
use App\Comment;
use App\Helpers;
use App\Message;
use App\Product;
use App\Setting;
use App\Category;
use App\Customer;
use App\Purchase;
use App\Supplier;
use Carbon\Carbon;
use Dompdf\Dompdf;
use App\ChatMessage;
use App\PrivateView;
use App\OrderProduct;
use App\StatusChange;
use App\ReplyCategory;
use App\LogExcelImport;
use App\PurchaseDiscount;
use App\Mail\PurchaseEmail;
use Illuminate\Support\Arr;
use Illuminate\Http\Request;
use App\CommunicationHistory;
use App\ReadOnly\SupplierList;
use App\Exports\PurchasesExport;
use App\ReadOnly\PurchaseStatus;
use App\Events\ProformaConfirmed;
use App\Mails\Manual\ForwardEmail;
use App\Mails\Manual\ReplyToEmail;
use Illuminate\Support\Facades\DB;
use Webklex\PHPIMAP\ClientManager;
use App\Mails\Manual\PurchaseExport;
use Illuminate\Support\Facades\Mail;
use Maatwebsite\Excel\Facades\Excel;
use Illuminate\Support\Facades\Validator;
use App\ReadOnly\OrderStatus as OrderStatus;
use Illuminate\Pagination\LengthAwarePaginator;
use Plank\Mediable\Facades\MediaUploader as MediaUploader;

class PurchaseController extends Controller
{
    public function index(Request $request)
    {
        $term = $request->input('term');

        if ($request->input('orderby') == '') {
            $orderby = 'DESC';
        } else {
            $orderby = 'ASC';
        }

        switch ($request->input('sortby')) {
            case 'date':
                $sortby = 'created_at';
                break;
            case 'purchase_handler':
                $sortby = 'purchase_handler';
                break;
            case 'supplier':
                $sortby = 'supplier';
                break;
            case 'status':
                $sortby = 'status';
                break;
            case 'communication':
                $sortby = 'communication';
                break;
            default:
                $sortby = 'created_at';
        }

        $purchases = (new Purchase())->newQuery()->with([
            'orderProducts' => function ($query) {
                $query->with([
                    'Order' => function ($q) {
                        $q->with('customer');
                    },
                ]);
                $query->with(['Product']);
            },
            'Products' => function ($query) {
                $query->with([
                    'orderproducts' => function ($quer) {
                        $quer->with([
                            'Order' => function ($q) {
                                $q->with('customer');
                            },
                        ]);
                    },
                ]);
            },
            'purchase_supplier',
        ]);

        if (! empty($term)) {
            $purchases = $purchases
                ->orWhere('id', 'like', '%' . $term . '%')
                ->orWhere('purchase_handler', Helpers::getUserIdByName($term))
                ->orWhere('supplier', 'like', '%' . $term . '%')
                ->orWhere('status', 'like', '%' . $term . '%')
                ->orWhereHas('Products', function ($query) use ($term) {
                    $query->where('sku', 'LIKE', "%$term%");
                });
        }

        if ($sortby != 'communication') {
            $purchases = $purchases->orderBy($sortby, $orderby);
        }

        $users = Helpers::getUserArray(User::all());

        $purchases_array = $purchases->select(['id', 'purchase_handler', 'supplier', 'supplier_id', 'status', 'created_at'])->get()->toArray();

        $currentPage  = LengthAwarePaginator::resolveCurrentPage();
        $perPage      = 10;
        $currentItems = array_slice($purchases_array, $perPage * ($currentPage - 1), $perPage);

        $purchases_array = new LengthAwarePaginator($currentItems, count($purchases_array), $perPage, $currentPage, [
            'path' => LengthAwarePaginator::resolveCurrentPath(),
        ]);

        $purchase_data = [
            '0' => 0,
            '1' => 0,
            '2' => 0,
            '3' => 0,
            '4' => 0,
        ];
        $purchase_products = Product::with('orderproducts')->whereHas('purchases')->get();

        foreach ($purchase_products as $product) {
            if (count($product->orderproducts) > 0) {
                if ($product->orderproducts[0]->purchase_status != 'In Transit from Italy to Dubai' && $product->orderproducts[0]->purchase_status != 'Shipment Received in Dubai' && $product->orderproducts[0]->purchase_status != 'Shipment in Transit from Dubai to India' && $product->orderproducts[0]->purchase_status != 'Shipment Received in India') {
                    $purchase_data['0'] += 1;
                }

                if ($product->orderproducts[0]->purchase_status == 'In Transit from Italy to Dubai') {
                    $purchase_data['1'] += 1;
                }

                if ($product->orderproducts[0]->purchase_status == 'Shipment Received in Dubai') {
                    $purchase_data['2'] += 1;
                }

                if ($product->orderproducts[0]->purchase_status == 'Shipment in Transit from Dubai to India') {
                    $purchase_data['3'] += 1;
                }

                if ($product->orderproducts[0]->purchase_status == 'Shipment Received in India') {
                    $purchase_data['4'] += 1;
                }
            } else {
                $purchase_data['0'] += 1;
            }
        }

        $suppliers    = Supplier::select(['id', 'supplier'])->get();
        $agents       = Agent::where('model_type', \App\Supplier::class)->get();
        $agents_array = [];

        foreach ($agents as $agent) {
            $agents_array[$agent->model_id][$agent->id] = $agent->name . ' - ' . $agent->email;
        }

        if ($request->ajax()) {
            $html = view('purchase.purchase-item', ['purchases_array' => $purchases_array, 'orderby' => $orderby, 'users' => $users])->render();

            return response()->json(['html' => $html]);
        }

        return view('purchase.index', compact('purchases_array', 'term', 'orderby', 'users', 'suppliers', 'agents_array', 'purchase_data'));
    }

    public function purchaseGrid(Request $request, $page = null)
    {
        $purchases = Db::select('select p.sku,p.id,pp.order_product_id from purchase_products as pp join products as p on p.id = pp.product_id');

        $not_include_products = [];
        $includedPurchases    = [];
        foreach ((array) $purchases as $product) {
            if ($product->order_product_id > 0) {
                $not_include_products[] = $product->order_product_id;
                $includedPurchases[]    = $product->id;
            }
        }

        $skuNeed = Db::select('select p.id from order_products as op join products as p on p.id = op.product_id left join purchase_products as pp on pp.order_product_id = op.id  where pp.order_product_id is null group by op.sku');
        $skuNeed = collect($skuNeed)->pluck('id')->toArray();

        $ignoreSku  = array_diff($includedPurchases, $skuNeed);
        $customerId = request()->get('customer_id', 0);

        if ($request->status[0] != null && $request->supplier[0] == null && $request->brand[0] == null) {
            $status      = $request->status;
            $status_list = implode("','", $request->status ?? []);
            $orders      = OrderProduct::join('orders as o', 'o.id', 'order_products.order_id')
                ->join('products as p', 'p.id', 'order_products.product_id')
                ->whereIn('o.order_status', $status)
                ->where('qty', '>=', 1);

            if ($customerId > 0) {
                $orders = $orders->where('o.customer_id', $customerId);
            }

            $orders = $orders->select(['order_products.sku', 'p.id'])->get();
        }
        $status_list = implode("','", $request->status ?? []);

        if ($request->supplier[0] != null) {
            $supplier      = $request->supplier[0];
            $supplier_list = implode(',', $request->supplier);

            if ($request->status[0] != null) {
                $status_list = implode("','", $request->status);

                $orders = OrderProduct::select(['order_products.sku', 'order_products.order_id', 'p.id'])->join('orders as o', 'o.id', 'order_products.order_id')
                    ->join('products as p', 'p.id', 'order_products.product_id')
                    ->join('product_suppliers as ps', 'ps.product_id', 'p.id')
                    ->whereIn('o.order_status', $request->status)
                    ->whereIn('ps.supplier_id', $request->supplier)->where('qty', '>=', 1);
                if ($customerId > 0) {
                    $orders = $orders->where('o.customer_id', $customerId);
                }

                $orders = $orders->get();
            } else {
                $orders = OrderProduct::select(['order_products.sku', 'order_products.order_id', 'p.id'])->join('orders as o', 'o.id', 'order_products.order_id');
                if ($page == 'canceled-refunded') {
                    $orders = $orders->whereIn('o.order_status_id', [\App\Helpers\OrderHelper::$cancel, \App\Helpers\OrderHelper::$refundToBeProcessed]);
                } elseif ($page == 'ordered') {
                } elseif ($page == 'delivered') {
                    $orders = $orders->whereIn('o.order_status_id', [\App\Helpers\OrderHelper::$delivered]);
                } elseif ($page == 'non_ordered') {
                    $orders = $orders->whereNotIn('o.order_status_id', [
                        \App\Helpers\OrderHelper::$followUpForAdvance,
                        \App\Helpers\OrderHelper::$proceedWithOutAdvance,
                        \App\Helpers\OrderHelper::$advanceRecieved,
                        \App\Helpers\OrderHelper::$prepaid,
                    ]);
                } else {
                    $orders = $orders->whereIn('o.order_status_id', [
                        \App\Helpers\OrderHelper::$followUpForAdvance,
                        \App\Helpers\OrderHelper::$proceedWithOutAdvance,
                        \App\Helpers\OrderHelper::$advanceRecieved,
                        \App\Helpers\OrderHelper::$prepaid,
                    ]);
                }
                $orders = $orders->join('products as p', 'p.id', 'order_products.product_id')->join('product_suppliers as ps', 'ps.product_id', 'p.id')->whereIn('ps.supplier_id', $request->supplier)
                    ->where('qty', '>=', 1);
                if ($customerId > 0) {
                    $orders = $orders->where('o.customer_id', $customerId);
                }

                $orders = $orders->get();
            }
        }

        if ($request->brand[0] != null) {
            $brand = $request->brand[0];

            if ($request->status[0] != null || $request->supplier[0] != null) {
                $orders = OrderProduct::select(['order_products.sku', 'order_products.order_id', 'p.id'])
                    ->join('orders as o', 'o.id', 'order_products.order_id')
                    ->join('products as p', 'p.sku', 'order_products.sku');
                if ($request->status[0] != null) {
                    $orders = $orders->whereIn('o.order_status', $request->status);
                }
                $orders = $orders->where('brand', $brand)->where('qty', '>=', 1);
                if ($customerId > 0) {
                    $orders = $orders->where('o.customer_id', $customerId);
                }

                $orders = $orders->get();
            } else {
                $orders = OrderProduct::select(['order_products.sku', 'order_products.order_id', 'p.id'])->join('orders as o', 'o.id', 'order_products.order_id');
                if ($page == 'canceled-refunded') {
                    $orders = $orders->whereIn('o.order_status_id', [
                        \App\Helpers\OrderHelper::$cancel,
                        \App\Helpers\OrderHelper::$refundToBeProcessed,
                    ]);
                } elseif ($page == 'ordered') {
                } elseif ($page == 'delivered') {
                    $orders = $orders->whereIn('o.order_status_id', [
                        \App\Helpers\OrderHelper::$delivered,
                    ]);
                } elseif ($page == 'non_ordered') {
                    $orders = $orders->whereNotIn('o.order_status_id', [
                        \App\Helpers\OrderHelper::$followUpForAdvance,
                        \App\Helpers\OrderHelper::$proceedWithOutAdvance,
                        \App\Helpers\OrderHelper::$advanceRecieved,
                        \App\Helpers\OrderHelper::$prepaid,
                    ]);
                } else {
                    $orders = $orders->whereIn('o.order_status_id', [
                        \App\Helpers\OrderHelper::$followUpForAdvance,
                        \App\Helpers\OrderHelper::$proceedWithOutAdvance,
                        \App\Helpers\OrderHelper::$advanceRecieved,
                        \App\Helpers\OrderHelper::$prepaid,
                    ]);
                }

                $orders = $orders->join('products as p', 'p.id', 'order_products.product_id')->where('brand', $brand)->where('qty', '>=', 1);
                if ($customerId > 0) {
                    $orders = $orders->where('o.customer_id', $customerId);
                }

                $orders = $orders->get();
            }
        }

        if (! empty($request->order_id)) {
            $orders = OrderProduct::select(['order_products.sku', 'order_products.order_id', 'p.id'])
                ->join('orders as o', 'o.id', 'order_products.order_id')
                ->join('products as p', 'p.id', 'order_products.product_id');
            if ($page == 'canceled-refunded') {
                $orders = $orders->whereIn('o.order_status_id', [
                    \App\Helpers\OrderHelper::$cancel,
                    \App\Helpers\OrderHelper::$refundToBeProcessed,
                ]);
            } elseif ($page == 'ordered') {
            } elseif ($page == 'delivered') {
                $orders = $orders->whereIn('o.order_status_id', [
                    \App\Helpers\OrderHelper::$delivered,
                ]);
            } elseif ($page == 'non_ordered') {
                $orders = $orders->whereNotIn('o.order_status_id', [
                    \App\Helpers\OrderHelper::$followUpForAdvance,
                    \App\Helpers\OrderHelper::$proceedWithOutAdvance,
                    \App\Helpers\OrderHelper::$advanceRecieved,
                    \App\Helpers\OrderHelper::$prepaid,
                ]);
            } else {
                $orders = $orders->whereIn('o.order_status_id', [
                    \App\Helpers\OrderHelper::$followUpForAdvance,
                    \App\Helpers\OrderHelper::$proceedWithOutAdvance,
                    \App\Helpers\OrderHelper::$advanceRecieved,
                    \App\Helpers\OrderHelper::$prepaid,
                ]);
            }

            $orders = $orders->where('qty', '>=', 1)->where('o.id', '=', $request->order_id)->get();
        }

        if ($request->status[0] == null && $request->supplier[0] == null && $request->brand[0] == null && empty($request->order_id)) {
            $orders = OrderProduct::select(['order_products.sku', 'order_products.order_id', 'p.id'])
                ->join('orders as o', 'o.id', 'order_products.order_id')
                ->join('products as p', 'p.id', 'order_products.product_id');
            if ($page == 'canceled-refunded') {
                $orders = $orders->whereIn('o.order_status_id', [
                    \App\Helpers\OrderHelper::$cancel,
                    \App\Helpers\OrderHelper::$refundToBeProcessed,
                ]);
            } elseif ($page == 'ordered') {
            } elseif ($page == 'delivered') {
                $orders = $orders->whereIn('o.order_status_id', [
                    \App\Helpers\OrderHelper::$delivered,
                ]);
            } elseif ($page == 'non_ordered') {
                $orders = $orders->whereNotIn('o.order_status_id', [
                    \App\Helpers\OrderHelper::$followUpForAdvance,
                    \App\Helpers\OrderHelper::$proceedWithOutAdvance,
                    \App\Helpers\OrderHelper::$advanceRecieved,
                    \App\Helpers\OrderHelper::$prepaid,
                ]);
            } else {
                $orders = $orders->whereIn('o.order_status_id', [
                    \App\Helpers\OrderHelper::$followUpForAdvance,
                    \App\Helpers\OrderHelper::$proceedWithOutAdvance,
                    \App\Helpers\OrderHelper::$advanceRecieved,
                    \App\Helpers\OrderHelper::$prepaid,
                ]);
            }

            $orders = $orders->where('qty', '>=', 1);
            if ($customerId > 0) {
                $orders = $orders->where('o.customer_id', $customerId);
            }

            $orders = $orders->get();
        }

        $new_orders     = [];
        $includedOrders = [];
        foreach ($orders as $order) {
            array_push($new_orders, $order['id']);
            array_push($includedOrders, $order['order_id']);
        }

        $color    = $request->get('color');
        $size     = $request->get('size');
        $products = Product::with([
            'orderproducts' => function ($query) use ($page, $not_include_products, $includedOrders, $color, $size) {
                if ($page != 'ordered') {
                    $query->whereNotIn('id', $not_include_products);
                }
                $query->with([
                    'order' => function ($q) use ($includedOrders) {
                        $q->with('customer');
                        $q->whereIn('id', array_unique($includedOrders));
                    },
                ]);

                if (! empty($color) && is_array($color)) {
                    $query = $query->whereIn('color', $color);
                }

                if (! empty($size)) {
                    $query = $query->where('size', $size);
                }
            },
            'purchases',
            'suppliers',
            'brands',
        ])->whereIn('id', $new_orders);

        if ($page == 'ordered') {
            $products = $products->whereHas('purchases', function ($query) {
                $query->where('status', 'Ordered');
            });
        } else {
            $products = $products->whereNotIn('id', $ignoreSku);
        }

        $term         = $request->input('term');
        $status       = isset($status) ? $status : '';
        $supplier     = isset($supplier) ? $supplier : '';
        $brand        = isset($brand) ? $brand : '';
        $order_status = (new OrderStatus)->all();

        foreach ($order_status as $key => $value) {
            if (! $page) {
                if (! in_array($key, ['Follow up for advance', 'Proceed without Advance', 'Advance received', 'Prepaid'])) {
                    unset($order_status[$key]);
                }
            } else {
                if ($page == 'non_ordered') {
                    if (in_array($key, ['Follow up for advance', 'Proceed without Advance', 'Advance received', 'Prepaid'])) {
                        unset($order_status[$key]);
                    }
                }
            }
        }

        $supplier_list = (new SupplierList)->all();

        $suppliers = DB::select('
          SELECT s.id, s.supplier
          FROM suppliers as s
          JOIN product_suppliers as ps on ps.supplier_id = s.id
          where
          ps.stock >= 1
          GROUP BY supplier_id');

        $suppliers_array = [];
        foreach ($suppliers as $supp) {
            $suppliers_array[$supp->id] = $supp->supplier;
        }

        if (! empty($term)) {
            $products = $products->where(function ($query) use ($term) {
                return $query
                    ->orWhere('name', 'like', '%' . $term . '%')
                    ->orWhere('short_description', 'like', '%' . $term . '%')
                    ->orWhere('sku', 'like', '%' . $term . '%')
                    ->orWhere('supplier', 'like', '%' . $term . '%');
            });
        }

        if ($request->category_id != null && $request->category_id != 1) {
            $category_children = [];

            $is_parent = Category::isParent($request->category_id);

            if ($is_parent) {
                $childs = Category::find($request->category_id)->childs()->get();

                foreach ($childs as $child) {
                    $is_parent = Category::isParent($child->id);

                    if ($is_parent) {
                        $children = Category::find($child->id)->childs()->get();

                        foreach ($children as $chili) {
                            array_push($category_children, $chili->id);
                        }
                    } else {
                        array_push($category_children, $child->id);
                    }
                }
            } else {
                array_push($category_children, $request->category_id);
            }

            $products = $products->whereIn('category', $category_children);
        }

        $new_products = [];
        $products     = $products->select(['id', 'sku', 'supplier', 'brand', 'category', 'price', 'price_inr'])->get()->sortBy('supplier');
        $count        = 0;
        $productIds   = [];
        foreach ($products as $key => $product) {
            $supplier_list   = '';
            $single_supplier = '';

            $customer_names = '';
            $customers      = [];
            $orderCount     = 0;
            $sizeArr        = [];
            foreach ($product->orderproducts as $key => $order_product) {
                if ($order_product->order && $order_product->order->customer) {
                    $customers[] = $order_product->order->customer;
                }

                if (! empty($order_product->order)) {
                    $orderCount++;
                    if (! empty($order_product->size)) {
                        $sizeArr[] = $order_product->size;
                    }
                }
            }

            if (! $orderCount) {
                continue;
            }

            $supplier_msg = DB::table('purchase_product_supplier')
                ->select('suppliers.id', 'suppliers.supplier', 'chat_messages.id as chat_messages_id', 'chat_messages.message', 'chat_messages.created_at')
                ->leftJoin('suppliers', 'suppliers.id', '=', 'purchase_product_supplier.supplier_id')
                ->leftJoin('chat_messages', 'chat_messages.id', '=', 'purchase_product_supplier.chat_message_id')
                ->where('purchase_product_supplier.product_id', '=', $product->id)
                ->orderBy('chat_messages.created_at', 'DESC')
                ->get();

            $supplier_msg_data = [];
            foreach ($supplier_msg as $key => $value) {
                $supplier_msg_data[$value->id]['supplier'] = $value->supplier;

                if (! isset($data[$value->id]['chat_messages'])) {
                    $supplier_msg_data[$value->id]['chat_messages'] = [];
                }

                if (! empty($value->chat_messages_id)) {
                    $supplier_msg_data[$value->id]['chat_messages'][] = [
                        'message'    => $value->message,
                        'created_at' => $value->created_at,
                    ];
                }
            }
            $productIds[] = $product->id;

            $new_products[$count]['id']              = $product->id;
            $new_products[$count]['sku']             = $product->sku;
            $new_products[$count]['price']           = $product->price;
            $new_products[$count]['price_inr']       = $product->price_inr;
            $new_products[$count]['supplier']        = $product->supplier;
            $new_products[$count]['supplier_list']   = $supplier_list;
            $new_products[$count]['single_supplier'] = $single_supplier;
            $new_products[$count]['brand']           = $product->brands ? $product->brands->name : 'No Brand';
            $new_products[$count]['brand_id']        = $product->brands ? $product->brands->id : '';
            $new_products[$count]['category']        = $product->category;
            $new_products[$count]['image']           = $product->getMedia(config('constants.media_tags'))->first() ? getMediaUrl($product->getMedia(config('constants.media_tags'))->first()) : '';
            $new_products[$count]['abs_img_url']     = $product->getMedia(config('constants.media_tags'))->first() ? $product->getMedia(config('constants.media_tags'))->first()->getAbsolutePath() : '';
            $new_products[$count]['customer_id']     = ! empty($product->orderproducts->first()->order) ? (! empty($product->orderproducts->first()->order->customer) ? $product->orderproducts->first()->order->customer->id : 'No Customer') : 'No Order';
            $new_products[$count]['customers']       = $customers;
            $new_products[$count]['customer_names']  = '';
            $new_products[$count]['order_products']  = $product->orderproducts;
            $new_products[$count]['order_price']     = ! empty($product->orderproducts->first()->product_price) ? $product->orderproducts->first()->product_price : 0;
            $new_products[$count]['order_date']      = ! empty($product->orderproducts->first()->order) ? $product->orderproducts->first()->order->order_date : 'No Order';
            $new_products[$count]['order_advance']   = ! empty($product->orderproducts->first()->order) ? $product->orderproducts->first()->order->advance_detail : 'No Order';
            $new_products[$count]['supplier_msg']    = $supplier_msg_data;
            $new_products[$count]['size']            = implode(',', array_unique($sizeArr));

            $count++;
        }

        $new_products = array_values(Arr::sort($new_products, function ($value) {
            return $value['order_date'];
        }));

        $new_products = array_reverse($new_products);

        $suppliers_all  = [];
        $suppliersQuery = DB::select('SELECT sp.id FROM `scraped_products` sp
            join scrapers sc on sc.scraper_name =  sp.website
            JOIN suppliers s ON s.id=sc.supplier_id 
            inner join order_products op on op.product_id = sp.product_id where last_inventory_at > DATE_SUB(NOW(), INTERVAL sc.inventory_lifetime DAY)');
        $cnt = count($suppliersQuery);

        if ($cnt > 0 && ! empty($productIds)) {
            $suppliers_all = DB::select('SELECT id, supplier, product_id
          FROM suppliers
          INNER JOIN (
            SELECT supplier_id FROM product_suppliers GROUP BY supplier_id
            ) as product_suppliers
          ON suppliers.id = product_suppliers.supplier_id
          LEFT JOIN purchase_product_supplier on purchase_product_supplier.supplier_id =suppliers.id and product_id in ( :product_id )', ['product_id' => implode(',', $productIds)]);
        }
        $activSuppliers = DB::select('SELECT 
                                        suppliers.id, 
                                        supplier,
                                        "" as product_id
                                    FROM 
                                        suppliers
                                    WHERE
                                        suppliers.status=1 and  deleted_at is null');
        if ($request->get('in_pdf') === 'on') {
            set_time_limit(0);

            $html = view('purchase.purchase-grid-pdf')->with([
                'products'        => $new_products,
                'order_status'    => $order_status,
                'supplier_list'   => $supplier_list,
                'suppliers_array' => $suppliers_array,
                'suppliers_all'   => $suppliers_all,
                'term'            => $term,
                'status'          => $status,
                'supplier'        => $supplier,
                'brand'           => $brand,
                'page'            => $page,
            ]);

            $pdf = new Dompdf();
            $pdf->loadHtml($html);
            $pdf->render();
            $pdf->stream('orders.pdf');

            return;
        }

        $currentPage  = LengthAwarePaginator::resolveCurrentPage();
        $perPage      = Setting::get('pagination');
        $currentItems = array_slice($new_products, $perPage * ($currentPage - 1), $perPage);

        $totalSku     = count($new_products);
        $new_products = new LengthAwarePaginator($currentItems, count($new_products), $perPage, $currentPage, [
            'path' => LengthAwarePaginator::resolveCurrentPath(),
        ]);

        $category_selection = \App\Category::attr(['name' => 'category[]', 'class' => 'form-control select-multiple2'])->selected(1)->renderAsDropdown();
        $categoryFilter     = \App\Category::attr(['name' => 'category_id', 'class' => 'form-control select-multiple2'])->selected(request()->get('category_id', 1))->renderAsDropdown();

        $suppliers = Supplier::select(['id', 'supplier'])->whereIn('id', DB::table('product_suppliers')->selectRaw('DISTINCT(`supplier_id`) as suppliers')->pluck('suppliers')->toArray())->get();

        return view('purchase.purchase-grid')->with([
            'products'           => $new_products,
            'order_status'       => $order_status,
            'supplier_list'      => $supplier_list,
            'suppliers_array'    => $suppliers_array,
            'suppliers_all'      => $suppliers_all,
            'term'               => $term,
            'status'             => $status,
            'supplier'           => $supplier,
            'brand'              => $brand,
            'page'               => $page,
            'category_selection' => $category_selection,
            'activSuppliers'     => $activSuppliers,
            'categoryFilter'     => $categoryFilter,
            'suppliers'          => $suppliers,
            'totalSku'           => $totalSku,
        ]);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }

    public function export(Request $request)
    {
        $selected_purchases = json_decode($request->selected_purchases);

        foreach ($selected_purchases as $purchase_id) {
            $purchase         = Purchase::find($purchase_id);
            $purchase->status = 'Request Sent to Supplier';
            $purchase->save();
        }

        $path = 'purchase_exports/' . Carbon::now()->format('Y-m-d-H-m-s') . '_purchases_export.xlsx';

        Excel::store(new PurchasesExport($selected_purchases), $path, 'files');

        return Storage::disk('files')->download($path);
    }

    public function sendExport(Request $request)
    {
        $path     = 'purchase_exports/' . Carbon::now()->format('Y-m-d-H-m-s') . '_purchases_export.xlsx';
        $filename = Carbon::now()->format('Y-m-d-H-m-s') . '_purchases_export.xlsx';

        if ($request->hasFile('file')) {
            $file = $request->file('file');
            $file->storeAs('purchase_exports', $filename, 'files');
        }

        $first_agent_email = '';
        $cc_agents_emails  = [];
        foreach ($request->agent_id as $key => $agent_id) {
            $agent = Agent::find($agent_id);

            if ($key == 0) {
                $first_agent_email = $agent->email;
            } else {
                $cc_agents_emails[] = $agent->email;
            }
        }

        $emailClass = (new PurchaseExport($path, $request->subject, $request->message))->build();
        $from_email = \App\Helpers::getFromEmail();
        $email      = Email::create([
            'model_id'        => $request->supplier_id,
            'model_type'      => Supplier::class,
            'from'            => $from_email,
            'to'              => $first_agent_email,
            'subject'         => $request->subject,
            'message'         => $request->message,
            'template'        => 'purchase-simple',
            'additional_data' => json_encode(['attachment' => $path]),
            'status'          => 'pre-send',
        ]);

        \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');

        return redirect()->back()->withSuccess('You have successfully sent an email!');
    }

    public function downloadFile(Request $request, $id)
    {
        $file = File::find($id);

        return Storage::disk('files')->download('files/' . $file->filename);
    }

    public function downloadAttachments(Request $request)
    {
        return Storage::disk('files')->download($request->path);
    }

    public function merge(Request $request)
    {
        $selected_purchases = json_decode($request->selected_purchases);

        foreach ($selected_purchases as $key => $purchase_id) {
            if ($key == 0) {
                $main_purchase = Purchase::find($purchase_id);
            } else {
                $merging_purchase = Purchase::find($purchase_id);

                if ($main_purchase->transaction_amount == '' || $main_purchase->shipment_cost == '') {
                    $main_purchase->transaction_id     = $merging_purchase->transaction_id;
                    $main_purchase->transaction_date   = $merging_purchase->transaction_date;
                    $main_purchase->transaction_amount = $merging_purchase->transaction_amount;
                    $main_purchase->bill_number        = $merging_purchase->bill_number;
                    $main_purchase->shipper            = $merging_purchase->shipper;
                    $main_purchase->shipment_status    = $merging_purchase->shipment_status;
                    $main_purchase->shipment_cost      = $merging_purchase->shipment_cost;
                    $main_purchase->save();
                }

                foreach ($merging_purchase->purchaseProducts as $product) {
                    $purchaseProducts                   = new \App\PurchaseProduct;
                    $purchaseProducts->purchase_id      = $main_purchase->id;
                    $purchaseProducts->product_id       = $product->product_id;
                    $purchaseProducts->order_product_id = $product->order_product_id;
                    $purchaseProducts->save();
                }

                $merging_purchase->products()->detach();

                $remarks = Remark::where('taskid', $merging_purchase->id)->where('module_type', 'purchase-product-remark')->get();

                foreach ($remarks as $remark) {
                    $remark->taskid = $main_purchase->id;
                    $remark->save();
                }

                $purchase_discounts = PurchaseDiscount::where('purchase_id', $merging_purchase->id)->get();

                foreach ($purchase_discounts as $discount) {
                    $discount->purchase_id = $main_purchase->id;
                    $discount->save();
                }

                $merging_purchase->delete();
            }
        }

        return redirect()->route('purchase.index')->with('success', 'You have successfully merged purchases');
    }

    public function assignBatch(Request $request, $id)
    {
        $purchase = Purchase::find($id);

        if ($purchase->products) {
            foreach ($purchase->products as $product) {
                if ($product->orderproducts) {
                    foreach ($product->orderproducts as $order_product) {
                        $order_product->purchase_id  = $id;
                        $order_product->batch_number = '';
                        $order_product->save();
                    }
                }
            }
        }

        return redirect()->route('purchase.show', $id)->withSuccess('You have successfully assigned a batch number!');
    }

    public function assignSplitBatch(Request $request, $id)
    {
        $max_batch_number = OrderProduct::where('purchase_id', $id)->latest('batch_number')->first();

        if ($max_batch_number) {
            foreach (json_decode($request->order_products) as $order_product_id) {
                $order_product               = OrderProduct::find($order_product_id);
                $order_product->purchase_id  = $id;
                $order_product->batch_number = (int) $max_batch_number->batch_number + 1;
                $order_product->save();
            }
        } else {
            foreach (json_decode($request->order_products) as $order_product_id) {
                $order_product               = OrderProduct::find($order_product_id);
                $order_product->purchase_id  = $id;
                $order_product->batch_number = 1;
                $order_product->save();
            }
        }

        return redirect()->route('purchase.show', $id)->withSuccess('You have successfully assigned a batch number!');
    }

    public function calendar()
    {
        $purchases      = Purchase::whereNotNull('shipment_date')->get();
        $order_products = OrderProduct::whereNotNull('shipment_date')->get();
        $purchase_data  = [];

        foreach ($order_products as $order_product) {
            if ($order_product->order && $order_product->order->customer) {
                $purchase_data[] = [
                    'customer_id'       => $order_product->order->customer->id,
                    'order_product_id'  => $order_product->id,
                    'customer_name'     => $order_product->order->customer->name,
                    'customer_city'     => $order_product->order->customer->city,
                    'shipment_date'     => $order_product->shipment_date,
                    'product_name'      => $order_product->product->name,
                    'reschedule_count'  => $order_product->reschedule_count,
                    'is_order_priority' => $order_product->order->is_priority,
                ];
            }
        }

        return view('purchase.calendar', [
            'purchase_data' => $purchase_data,
        ]);
    }

    /**
     * Store a newly created resource in storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $this->validate($request, [
            'purchase_handler' => 'required',
            'order_products'   => 'required',
        ]);

        $supllierWise         = [];
        $postOP               = json_decode($request->order_products, true);
        $supplierWiseProducts = [];

        if (! empty($postOP)) {
            foreach ($postOP as $post) {
                @[$opId, $supplierId]                = explode('#', $post);
                $supplierId                          = ! empty($supplierId) ? $supplierId : 0;
                $supplierWiseProducts[$supplierId][] = $opId;
            }
        }

        if (! empty($supplierWiseProducts)) {
            foreach ($supplierWiseProducts as $productList) {
                // assing purchase supllier wise
                $purchase                   = new Purchase;
                $purchase->purchase_handler = $request->purchase_handler;
                $purchase->supplier_id      = $request->supplier_id;
                $purchase->status           = 'Pending Purchase';

                // now store the order products
                if ($purchase->save()) {
                    // find all order products
                    $orderProducts = \App\OrderProduct::whereIn('id', $productList)->get();

                    if (! $orderProducts->isEmpty()) {
                        foreach ($orderProducts as $orderProduct) {
                            \App\PurchaseProduct::insert([
                                'purchase_id'      => $purchase->id,
                                'product_id'       => $orderProduct->product->id,
                                'order_product_id' => $orderProduct->id,
                            ]);

                            $orderProduct->purchase_status = 'Pending Purchase';
                            $orderProduct->save();
                        }
                    }
                    // storing in product end
                }
            }
        }

        return redirect()->route('purchase.index');
    }

    public function updateDelivery(Request $request, $id)
    {
        $order_product                = OrderProduct::find($id);
        $old_shipment_date            = $order_product->shipment_date;
        $order_product->shipment_date = $request->shipment_date;
        $order_product->reschedule_count += 1;
        $order_product->save();

        if (! $order_product->is_delivery_date_changed()) {
            // Customer Message
            $params = [
                'number'   => null,
                'user_id'  => Auth::id(),
                'approved' => 0,
                'status'   => 1,
            ];

            if ($order_product->private_view) {
                $delivery_date         = Carbon::parse($order_product->shipment_date)->format('d \of\ F');
                $product_name          = $order_product->product->name;
                $params['customer_id'] = $order_product->private_view->customer_id;
                $params['message']     = "Your product $product_name delivery time has been rescheduled. It will be delivered on $delivery_date";

                $chat_message = ChatMessage::create($params);
            }

            CommunicationHistory::create([
                'model_id'   => $order_product->id,
                'model_type' => OrderProduct::class,
                'type'       => 'order-delivery-date-changed',
                'method'     => 'whatsapp',
            ]);
        }

        return response('success', 200);
    }

    /**
     * Display the specified resource.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        $purchase         = Purchase::find($id);
        $data['emails']   = [];
        $data['comments'] = Comment::with('user')->where('subject_id', $purchase->id)
            ->where('subject_type', '=', Order::class)->get();
        $data['users']              = User::all()->toArray();
        $messages                   = Message::all()->where('moduleid', $purchase->id)->where('moduletype', '=', 'purchase')->sortByDesc('created_at')->take(10)->toArray();
        $data['messages']           = $messages;
        $data['tasks']              = Task::where('model_type', 'purchase')->where('model_id', $purchase->id)->get()->toArray();
        $data['approval_replies']   = Reply::where('model', 'Approval Purchase')->get();
        $data['internal_replies']   = Reply::where('model', 'Internal Purchase')->get();
        $data['purchase_status']    = (new PurchaseStatus)->all();
        $data['reply_categories']   = ReplyCategory::all();
        $data['suppliers']          = Supplier::all();
        $data['purchase_discounts'] = PurchaseDiscount::where('purchase_id', $id)->where('type', 'product')->latest()->take(3)->get()->groupBy([
            function ($query) {
                return Carbon::parse($query->created_at)->format('Y-m-d H:i:s');
            },
            'product_id',
        ]);

        $data['purchase_discounts_rest'] = PurchaseDiscount::where('purchase_id', $id)->where('type', 'product')->latest()->skip(3)->take(30)->get()->groupBy([
            function ($query) {
                return Carbon::parse($query->created_at)->format('Y-m-d H:i:s');
            },
            'product_id',
        ]);

        $data['agents_array'] = [];
        $agents               = Agent::all();

        foreach ($agents as $agent) {
            $data['agents_array'][$agent->model_id][$agent->id] = $agent->name . ' - ' . $agent->email;
        }

        return view('purchase.show', $data)->withOrder($purchase);
    }

    public function productShow($id)
    {
        $product = Product::find($id);

        $data['users']            = User::all()->toArray();
        $messages                 = Message::all()->where('moduleid', $product->id)->where('moduletype', '=', 'product')->sortByDesc('created_at')->take(10)->toArray();
        $data['messages']         = $messages;
        $data['approval_replies'] = Reply::where('model', 'Approval Purchase')->get();
        $data['internal_replies'] = Reply::where('model', 'Internal Purchase')->get();
        $data['order_details']    = OrderProduct::where('sku', $product->sku)->get(['order_id', 'size']);

        return view('purchase.product-show', $data)->withProduct($product);
    }

    public function productReplace(Request $request)
    {
        $old_product = Product::find($request->moduleid);
        $new_product = Product::find(json_decode($request->images)[0]);

        foreach ($old_product->purchases as $purchase) {
            $purchase->products()->detach($old_product);
            $purchase->products()->attach($new_product);
        }

        foreach ($old_product->orderproducts as $order_product) {
            $new_order                  = new OrderProduct;
            $new_order->order_id        = $order_product->order_id;
            $new_order->sku             = $new_product->sku;
            $new_order->product_id      = $new_product->id;
            $new_order->product_price   = $new_product->price_inr_special;
            $new_order->size            = $order_product->size;
            $new_order->color           = $order_product->color;
            $new_order->purchase_status = 'Pending Purchase';
            $new_order->save();

            $order_product->purchase_status = 'Replaced';
            $order_product->save();
        }

        PurchaseDiscount::where('product_id', $old_product->id)->delete();

        return redirect()->route('purchase.index')->with('success', 'You have successfully replaced product!');
    }

    public function productRemove(Request $request, $id)
    {
        $product  = Product::find($id);
        $purchase = Purchase::find($request->purchase_id);

        $purchase->products()->detach($product);

        PurchaseDiscount::where('product_id', $id)->delete();

        return redirect()->route('purchase.show', $request->purchase_id)->with('success', 'You have successfully removed product!');
    }

    public function productCreateReplace(Request $request)
    {
        $this->validate($request, [
            'sku' => 'required|unique:products',
        ]);

        $product = new Product;

        $product->name     = $request->name;
        $product->sku      = $request->sku;
        $product->size     = $request->size;
        $product->brand    = $request->brand;
        $product->color    = $request->color;
        $product->supplier = $request->supplier;
        $product->price    = $request->price;

        $brand = Brand::find($request->brand);

        if ($request->price) {
            if (isset($request->brand) && ! empty($brand->euro_to_inr)) {
                $product->price_inr = $brand->euro_to_inr * $product->price;
            } else {
                $product->price_inr = Setting::get('euro_to_inr') * $product->price;
            }

            $product->price_inr         = round($product->price_inr, -3);
            $product->price_inr_special = $product->price_inr - ($product->price_inr * $brand->deduction_percentage) / 100;

            $product->price_inr_special = round($product->price_inr_special, -3);
        }

        $product->save();

        $product->detachMediaTags(config('constants.media_tags'));
        $media = MediaUploader::fromSource($request->file('image'))
            ->toDirectory('product/' . floor($product->id / config('constants.image_per_folder')))
            ->upload();
        $product->attachMedia($media, config('constants.media_tags'));

        $old_product = Product::find($request->product_id);

        foreach ($old_product->purchases as $purchase) {
            $purchase->products()->detach($old_product);
            $purchase->products()->attach($product);
        }

        foreach ($old_product->orderproducts as $order_product) {
            $new_order                  = new OrderProduct;
            $new_order->order_id        = $order_product->order_id;
            $new_order->sku             = $product->sku;
            $new_order->product_price   = $product->price_inr_special;
            $new_order->size            = $order_product->size;
            $new_order->color           = $order_product->color;
            $new_order->purchase_status = 'Pending Purchase';
            $new_order->save();

            $order_product->purchase_status = 'Replaced';
            $order_product->save();
        }

        PurchaseDiscount::where('product_id', $old_product->id)->delete();

        return redirect()->back()->with('success', 'You have successfully created and replaced product!');
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        //
    }

    public function updateStatus(Request $request, $id)
    {
        $purchase = Purchase::find($id);

        StatusChange::create([
            'model_id'    => $purchase->id,
            'model_type'  => Purchase::class,
            'user_id'     => Auth::id(),
            'from_status' => $purchase->status,
            'to_status'   => $request->status,
        ]);

        $purchase->status = $request->status;
        $purchase->save();

        if ($request->status == 'Shipment Received in Dubai') {
            $product_names = '';

            if ($purchase->products) {
                foreach ($purchase->products as $product) {
                    $supplier = Supplier::where('supplier', 'In-stock')->first();

                    $product->supplier = 'In-stock';
                    $product->location = 'Dubai';
                    $product->save();

                    $product->suppliers()->syncWithoutDetaching($supplier);

                    $product_names .= "$product->name, ";
                }
            }

            if (! $purchase->is_sent_in_dubai()) {
                // Making task for Yogesh
                $data = [
                    'task_subject' => 'Shipment to India',
                    'task_details' => "Please arrange shipment for India - ID $purchase->id",
                    'is_statutory' => 0,
                    'assign_from'  => Auth::id(),
                    'assign_to'    => 6,
                    'category'     => 12,
                ];

                $task = Task::create($data);

                $task->users()->attach([6 => ['type' => User::class]]);

                // Message to Carier
                $params = [
                    'number'   => null,
                    'user_id'  => Auth::id(),
                    'message'  => "These pcs: $product_names are available for shipment to India - confirm if urgency needed to drop for faster transit",
                    'approved' => 0,
                    'status'   => 1,
                ];

                $chat_message = ChatMessage::create($params);

                $whatsapp_number = Auth::user()->whatsapp_number != '' ? Auth::user()->whatsapp_number : null;

                $stock_coordinators = User::role('Stock Coordinator')->get();

                foreach ($stock_coordinators as $coordinator) {
                    $params['erp_user'] = $coordinator->id;
                    $chat_message       = ChatMessage::create($params);

                    $whatsapp_number = $coordinator->whatsapp_number != '' ? $coordinator->whatsapp_number : null;

                    app(\App\Http\Controllers\WhatsAppController::class)->sendWithNewApi($coordinator->phone, $whatsapp_number, $params['message'], null, $chat_message->id);

                    $chat_message->update([
                        'approved' => 1,
                        'status'   => 2,
                    ]);
                }

                CommunicationHistory::create([
                    'model_id'   => $purchase->id,
                    'model_type' => Purchase::class,
                    'type'       => 'purchase-in-dubai',
                    'method'     => 'whatsapp',
                ]);
            }
        }

        $product_information = '';
        $letters_array       = [
            '1' => 'A',
            '2' => 'B',
            '3' => 'C',
            '4' => 'D',
            '5' => 'E',
            '6' => 'F',
            '7' => 'G',
        ];

        if ($request->status == 'Shipment in Transit from Dubai to India') {
            if (! $purchase->is_sent_dubai_to_india()) {
                $product_names = '';

                if ($purchase->products) {
                    foreach ($purchase->products as $key => $product) {
                        $product_names .= "$product->name - ";

                        if ($key == 0) {
                            $product_information .= "$product->name - Size $product->size - $product->color";
                        } else {
                            $product_information .= ", $product->name - Size $product->size - $product->color";
                        }

                        if ($product->orderproducts) {
                            foreach ($product->orderproducts as $order_product) {
                                $batch_number = $order_product->purchase_id . (array_key_exists($order_product->batch_number, $letters_array) ? $letters_array[$order_product->batch_number] : '');
                                $product_names .= "#$batch_number, ";

                                if ($order_product->order && $order_product->order->customer) {
                                    $product_information .= $order_product->order->customer->address . ', ' . $order_product->order->customer->pincode . ', ' . $order_product->order->customer->city . '; ';
                                }
                            }
                        }
                    }
                }

                // Message to Stock Coordinator
                $params = [
                    'number'   => null,
                    'user_id'  => Auth::id(),
                    'message'  => "These pcs: $product_names are expected to arrive in India - x + 2 days -pls. coordinate and arrange collection",
                    'approved' => 0,
                    'status'   => 1,
                ];

                $stock_coordinators = User::role('Stock Coordinator')->get();

                foreach ($stock_coordinators as $coordinator) {
                    $params['erp_user'] = $coordinator->id;
                    $chat_message       = ChatMessage::create($params);

                    $whatsapp_number = $coordinator->whatsapp_number != '' ? $coordinator->whatsapp_number : null;

                    app(\App\Http\Controllers\WhatsAppController::class)->sendWithNewApi($coordinator->phone, $whatsapp_number, $params['message'], null, $chat_message->id);

                    $chat_message->update([
                        'approved' => 1,
                        'status'   => 2,
                    ]);
                }

                // Message to Delivery Coordinator
                $params = [
                    'number'   => null,
                    'user_id'  => Auth::id(),
                    'message'  => "This: $product_information are expected to arrive in India - x + 2 days to you. - for delivery to the follow customers pls. coordinate",
                    'approved' => 0,
                    'status'   => 1,
                ];

                $coordinators = User::role('Delivery Coordinator')->get();

                foreach ($coordinators as $coordinator) {
                    $params['erp_user'] = $coordinator->id;
                    $chat_message       = ChatMessage::create($params);

                    $whatsapp_number = $coordinator->whatsapp_number != '' ? $coordinator->whatsapp_number : null;

                    app(\App\Http\Controllers\WhatsAppController::class)->sendWithNewApi($coordinator->phone, $whatsapp_number, $params['message'], null, $chat_message->id);

                    $chat_message->update([
                        'approved' => 1,
                        'status'   => 2,
                    ]);
                }

                CommunicationHistory::create([
                    'model_id'   => $purchase->id,
                    'model_type' => Purchase::class,
                    'type'       => 'purchase-dubai-to-india',
                    'method'     => 'whatsapp',
                ]);
            }
        }

        if ($request->status == 'Shipment Received in India') {
            if ($purchase->products && ! $purchase->is_sent_in_mumbai()) {
                foreach ($purchase->products as $product) {
                    $supplier = Supplier::where('supplier', 'In-stock')->first();

                    $product->location = 'Mumbai';
                    $product->save();

                    $product->suppliers()->syncWithoutDetaching($supplier);

                    if ($product->orderproducts) {
                        $params = [
                            'number'   => null,
                            'user_id'  => Auth::id(),
                            'approved' => 0,
                            'status'   => 1,
                            'message'  => 'Your Order is received in India',
                        ];

                        foreach ($product->orderproducts as $order_product) {
                            if ($order_product->order && $order_product->order->customer) {
                                $params['customer_id'] = $order_product->order->customer->id;

                                ChatMessage::create($params);

                                // Creating inventory for Aliya
                                $private_view              = new PrivateView;
                                $private_view->customer_id = $order_product->order->customer->id;
                                $private_view->date        = Carbon::now()->addDays(3);
                                $private_view->save();

                                $private_view->products()->attach($product);
                            }
                        }
                    }
                }

                CommunicationHistory::create([
                    'model_id'   => $purchase->id,
                    'model_type' => Purchase::class,
                    'type'       => 'purchase-in-mumbai',
                    'method'     => 'whatsapp',
                ]);

                // Message to Aliya about time ?
                $params = [
                    'number'   => null,
                    'user_id'  => Auth::id(),
                    'message'  => 'Orders are in India, please coordinate',
                    'approved' => 0,
                    'status'   => 1,
                ];

                $coordinators = User::role('Delivery Coordinator')->get();

                foreach ($coordinators as $coordinator) {
                    $params['erp_user'] = $coordinator->id;
                    $chat_message       = ChatMessage::create($params);

                    $whatsapp_number = $coordinator->whatsapp_number != '' ? $coordinator->whatsapp_number : null;

                    app(\App\Http\Controllers\WhatsAppController::class)->sendWithNewApi($coordinator->phone, $whatsapp_number, $params['message'], null, $chat_message->id);

                    $chat_message->update([
                        'approved' => 1,
                        'status'   => 2,
                    ]);
                }

                // Message to Stock Holder
                $params = [
                    'number'   => null,
                    'user_id'  => Auth::id(),
                    'message'  => 'Confirm Aliyas time if it is ok to hand over the products',
                    'approved' => 0,
                    'status'   => 1,
                ];

                $stock_coordinators = User::role('Stock Coordinator')->get();

                foreach ($stock_coordinators as $coordinator) {
                    $params['erp_user'] = $coordinator->id;
                    $chat_message       = ChatMessage::create($params);

                    $whatsapp_number = $coordinator->whatsapp_number != '' ? $coordinator->whatsapp_number : null;

                    app(\App\Http\Controllers\WhatsAppController::class)->sendWithNewApi($coordinator->phone, $whatsapp_number, $params['message'], null, $chat_message->id);

                    $chat_message->update([
                        'approved' => 1,
                        'status'   => 2,
                    ]);
                }
            }
        }

        foreach ($purchase->products as $product) {
            foreach ($product->orderproducts as $order_product) {
                if ($request->status != $order_product->purchase_status) {
                    StatusChange::create([
                        'model_id'    => $order_product->id,
                        'model_type'  => OrderProduct::class,
                        'user_id'     => Auth::id(),
                        'from_status' => $order_product->purchase_status,
                        'to_status'   => $request->status,
                    ]);
                }

                $order_product->purchase_status = $request->status;
                $order_product->save();
            }

            $product->purchase_status = $purchase->status;
            $product->save();
        }

        return response($purchase->status);
    }

    public function updateProductStatus(Request $request, $id)
    {
        $product                  = Product::find($request->product_id);
        $product->purchase_status = $request->status;
        $product->save();

        $params = [
            'number'   => null,
            'user_id'  => Auth::id(),
            'approved' => 0,
            'status'   => 1,
            'message'  => 'Your Product is not available with the Supplier. Please choose alternative',
        ];

        foreach ($product->purchases as $purchase) {
            if ($purchase->id == $id) {
                foreach ($purchase->products as $related_product) {
                    if ($related_product->id == $product->id) {
                        foreach ($product->orderproducts as $order_product) {
                            if ($order_product->order) {
                                $params['customer_id'] = $order_product->order->customer->id;

                                ChatMessage::create($params);
                            }
                        }
                    }
                }
            }
        }

        return response('success');
    }

    public function updatePercentage(Request $request, $id)
    {
        foreach ($request->percentages as $percentage) {
            $product             = Product::find($percentage[0]);
            $product->percentage = $percentage[1];
            $product->save();

            PurchaseDiscount::create([
                'purchase_id' => $request->purchase_id,
                'product_id'  => $percentage[0],
                'percentage'  => $percentage[1],
                'amount'      => $request->amount,
                'type'        => $request->type,
            ]);
        }

        $purchase         = Purchase::find($request->purchase_id);
        $purchase->status = 'Price under Negotiation';
        $purchase->save();

        return response('success');
    }

    public function saveBill(Request $request, $id)
    {
        $purchase                     = Purchase::find($id);
        $purchase->supplier_id        = $request->supplier;
        $purchase->agent_id           = $request->agent_id;
        $purchase->transaction_id     = $request->transaction_id;
        $purchase->transaction_date   = $request->transaction_date;
        $purchase->transaction_amount = $request->transaction_amount;
        $purchase->bill_number        = $request->bill_number;
        $purchase->shipper            = $request->shipper;
        $purchase->shipment_cost      = $request->shipment_cost;
        $purchase->shipment_date      = $request->shipment_date;
        $purchase->shipment_status    = $request->shipment_status;
        $purchase->supplier_phone     = $request->supplier_phone;
        $purchase->whatsapp_number    = $request->whatsapp_number;

        if ($request->bill_number != '') {
            $purchase->status = 'AWB Details Received';
        }

        if ($request->transaction_date != '') {
            if (! $purchase->is_sent_awb_actions()) {
                // Task to Sushil
                $data = [
                    'task_subject' => 'Purchase Delivery',
                    'task_details' => "Please Follow up with Purchase Delivery - ID $purchase->id",
                    'is_statutory' => 0,
                    'assign_from'  => Auth::id(),
                    'assign_to'    => 7,
                    'category'     => 12,
                ];

                $task = Task::create($data);

                $task->users()->attach([7 => ['type' => User::class]]);

                // Message to Yogesh
                $params = [
                    'number'   => null,
                    'user_id'  => Auth::id(),
                    'approved' => 1,
                    'status'   => 2,
                    'erp_user' => 6,
                    'message'  => "Products from Purchase ID $purchase->id are in transit",
                ];

                $chat_message = ChatMessage::create($params);
                $yogesh       = User::find(6);

                // Customer Message
                $params = [
                    'number'   => null,
                    'user_id'  => Auth::id(),
                    'approved' => 0,
                    'status'   => 1,
                ];

                $delivery_information = '';
                foreach ($purchase->products as $product) {
                    if ($product->orderproducts) {
                        foreach ($product->orderproducts as $order_product) {
                            // Update Order Product Details
                            $order_product->shipment_date = Carbon::parse($request->transaction_date)->addDays(12);
                            $order_product->save();

                            if ($order_product->order && $order_product->order->customer) {
                                $shipment_days         = Carbon::parse($order_product->shipment_date)->diffInDays(Carbon::now());
                                $params['customer_id'] = $order_product->order->customer->id;
                                $params['message']     = "Your product $product->name has been shipped from our Italy office and is expected to be delivered to you in $shipment_days days - account for weekend and holiday";

                                $chat_message = ChatMessage::create($params);

                                // Aliya message details
                                $customer_city = $order_product->order->customer->city;
                                $customer_name = $order_product->order->customer->name;
                                $delivery_information .= "$customer_city - $product->name for $customer_name; ";

                                // Creating inventory for Aliya
                                $private_view                   = new PrivateView;
                                $private_view->customer_id      = $order_product->order->customer->id;
                                $private_view->order_product_id = $order_product->id;
                                $private_view->date             = Carbon::parse($order_product->shipment_date)->addDays(10);
                                $private_view->save();

                                $private_view->products()->attach($product);
                            }
                        }
                    }
                }

                // throw new Exception($delivery_information);

                $params = [
                    'number'   => null,
                    'user_id'  => Auth::id(),
                    'message'  => "These are the shipments that need to be delivered in the next 12 days and please ensure office boys are allocated and all travel bookings are made $delivery_information",
                    'approved' => 0,
                    'status'   => 1,
                ];

                $coordinators = User::role('Delivery Coordinator')->get();

                foreach ($coordinators as $coordinator) {
                    $params['erp_user'] = $coordinator->id;
                    $chat_message       = ChatMessage::create($params);

                    $whatsapp_number = $coordinator->whatsapp_number != '' ? $coordinator->whatsapp_number : null;

                    // throw new Exception($coordinator->id);

                    app(\App\Http\Controllers\WhatsAppController::class)->sendWithNewApi($coordinator->phone, $whatsapp_number, $params['message'], null, $chat_message->id);

                    $chat_message->update([
                        'approved' => 1,
                        'status'   => 2,
                    ]);
                }

                CommunicationHistory::create([
                    'model_id'   => $id,
                    'model_type' => Purchase::class,
                    'type'       => 'purchase-awb-generated',
                    'method'     => 'whatsapp',
                ]);
            }
        }

        $purchase->save();

        if ($request->hasFile('files')) {
            foreach ($request->file('files') as $file) {
                $original_name = $file->getClientOriginalName();
                $filename      = pathinfo($original_name, PATHINFO_FILENAME);
                $extension     = $file->getClientOriginalExtension();

                $full_name = $filename . '.' . $extension;

                $file->storeAs('files', $full_name, 'files');

                $new_file             = new File;
                $new_file->filename   = $full_name;
                $new_file->model_id   = $id;
                $new_file->model_type = Purchase::class;
                $new_file->save();
            }
        }

        return response()->json(['data' => $request->all()]);
    }

    public function confirmProforma(Request $request, $id)
    {
        $purchase     = Purchase::find($id);
        $matched      = 0;
        $total_amount = 0;
        foreach ($request->proformas as $data) {
            $product          = Product::find($data[0]);
            $discounted_price = round(($product->price - ($product->price * $product->percentage / 100)) / 1.22);
            $proforma         = $data[1];
            $total_amount += $proforma;
            if (($proforma - $discounted_price) < 10) {
                $matched++;
            }
        }
        if ($matched == count($request->proformas)) {
            $purchase->proforma_confirmed = 1;
            $purchase->proforma_id        = $request->proforma_id;
            $purchase->proforma_date      = $request->proforma_date;

            $purchase->status = 'Price Confirmed - Payment in Process';
            $purchase->save();
            event(new ProformaConfirmed($purchase, $total_amount));
        }

        return response()->json([
            'proforma_confirmed' => $purchase->proforma_confirmed,
        ]);
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        $purchase = Purchase::find($id);

        $purchase->delete();

        return redirect()->route('purchase.index')->with('success', 'Purchase has been archived');
    }

    public function permanentDelete($id)
    {
        $purchase = Purchase::find($id);

        $purchase->products()->detach();
        $purchase->forceDelete();

        return redirect()->route('purchase.index')->with('success', 'Purchase has been deleted');
    }

    public function getOrderProductsWithProductData($order_id)
    {
        $orderProducts = OrderProduct::where('order_id', '=', $order_id)->get()->toArray();
        $temp          = [];
        foreach ($orderProducts as $key => $value) {
            if (! empty($orderProducts[$key]['color'])) {
                $temp = Product::where('sku', '=', $orderProducts[$key]['sku'])
                    ->where('color', $orderProducts[$key]['color'])->whereNotNull('supplier_link')
                    ->get()->first();
            } else {
                $temp = Product::where('sku', '=', $orderProducts[$key]['sku'])->whereNotNull('supplier_link')
                    ->get()->first();
            }

            if (! empty($temp)) {
                $orderProducts[$key]['product']          = $temp;
                $orderProducts[$key]['product']['image'] = $temp->getMedia(config('constants.media_tags'))->first() ? getMediaUrl($temp->getMedia(config('constants.media_tags'))->first()) : '';
            }
        }

        return $temp;
    }

    // EMAIL INBOX

    public function emailInbox(Request $request)
    {
        try {
            $cm   = new ClientManager();
            $imap = $cm->make([
                'host'          => env('IMAP_HOST_PURCHASE'),
                'port'          => env('IMAP_PORT_PURCHASE'),
                'encryption'    => env('IMAP_ENCRYPTION_PURCHASE'),
                'validate_cert' => env('IMAP_VALIDATE_CERT_PURCHASE'),
                'username'      => env('IMAP_USERNAME_PURCHASE'),
                'password'      => env('IMAP_PASSWORD_PURCHASE'),
                'protocol'      => env('IMAP_PROTOCOL_PURCHASE'),
            ]);

            $imap->connect();
            if ($request->supplier_id) {
                $supplier = Supplier::find($request->supplier_id);

                if ($request->type == 'inbox') {
                    $inbox_name = 'INBOX';
                    $direction  = 'from';
                    $type       = 'incoming';
                } else {
                    $inbox_name = 'INBOX.Sent';
                    $direction  = 'to';
                    $type       = 'outgoing';
                }

                $inbox = $imap->getFolder($inbox_name);

                $latest_email = Email::where('type', $type)->where('model_id', $supplier->id)->where(function ($query) {
                    $query->where('model_type', \App\Supplier::class)->orWhere('model_type', \App\Purchase::class);
                })->latest()->first();

                $latest_email_date = $latest_email
                    ? Carbon::parse($latest_email->created_at)
                    : Carbon::parse('1990-01-01');

                $supplierAgentsCount = $supplier->agents()->count();

                if ($supplierAgentsCount == 0) {
                    $emails = $inbox->messages()->where($direction, $supplier->email)->since(Carbon::parse($latest_email_date)->format('Y-m-d H:i:s'));
                    $emails = $emails->leaveUnread()->get();
                    $this->createEmailsForEmailInbox($supplier, $type, $latest_email_date, $emails);
                } else {
                    if ($supplierAgentsCount == 1) {
                        $emails = $inbox->messages()->where($direction, $supplier->agents[0]->email)->since(Carbon::parse($latest_email_date)->format('Y-m-d H:i:s'));
                        $emails = $emails->leaveUnread()->get();

                        $this->createEmailsForEmailInbox($supplier, $type, $latest_email_date, $emails);
                    } else {
                        foreach ($supplier->agents as $key => $agent) {
                            if ($key == 0) {
                                $emails = $inbox->messages()->where($direction, $agent->email)->where([
                                    ['SINCE', $latest_email_date->format('d M y H:i')],
                                ]);
                                $emails = $emails->leaveUnread()->get();
                                $this->createEmailsForEmailInbox($supplier, $type, $latest_email_date, $emails);
                            } else {
                                $additional = $inbox->messages()->where($direction, $agent->email)->since(Carbon::parse($latest_email_date)->format('Y-m-d H:i:s'));
                                $additional = $additional->leaveUnread()->get();
                                $this->createEmailsForEmailInbox($supplier, $type, $latest_email_date, $additional);
                            }
                        }
                    }
                }

                $db_emails = $supplier->emails()->with('model')->where('type', $type)->get();

                $emails_array = [];
                $count        = 0;
                foreach ($db_emails as $key2 => $email) {
                    $dateCreated = $email->created_at->format('D, d M Y');
                    $timeCreated = $email->created_at->format('H:i');
                    $userName    = null;
                    if ($email->model instanceof Supplier) {
                        $userName = $email->model->supplier;
                    } elseif ($email->model instanceof Customer) {
                        $userName = $email->model->name;
                    }
                    if ($email->model_type == \App\Supplier::class) {
                        $array = is_array(json_decode($email->additional_data, true)) ? json_decode($email->additional_data, true) : [];

                        if (array_key_exists('attachment', $array)) {
                            $attachment = json_decode($email->additional_data, true)['attachment'];
                            if (is_array($attachment)) {
                                foreach ($attachment as $attach) {
                                    $filename = explode('/', $attach);
                                    $filename = explode('.', end($filename));
                                    if (end($filename) == 'xlsx' || end($filename) == 'xls') {
                                        $log = LogExcelImport::where('supplier_email', $supplier->email)->where('filename', $filename[0])->first();
                                        if ($log != null) {
                                            if ($log->status == 1) {
                                                $alert[] = 'Excel import process';
                                            } elseif ($log->status == 2) {
                                                $alert[] = 'Excel import created';
                                            } elseif ($log->status == 0) {
                                                $alert[] = 'Excel import error';
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (! isset($alert)) {
                        $alert = [];
                    }
                    $emails_array[$count + $key2]['id']        = $email->id;
                    $emails_array[$count + $key2]['subject']   = $email->subject;
                    $emails_array[$count + $key2]['seen']      = $email->seen;
                    $emails_array[$count + $key2]['type']      = $email->type;
                    $emails_array[$count + $key2]['date']      = $email->created_at;
                    $emails_array[$count + $key2]['from']      = $email->from;
                    $emails_array[$count + $key2]['to']        = $email->to;
                    $emails_array[$count + $key2]['message']   = $email->message;
                    $emails_array[$count + $key2]['cc']        = $email->cc;
                    $emails_array[$count + $key2]['bcc']       = $email->bcc;
                    $emails_array[$count + $key2]['alert']     = $alert;
                    $emails_array[$count + $key2]['replyInfo'] = "On {
                $dateCreated} at {
                $timeCreated}, $userName <{
                $email->from}> wrote:";
                    $emails_array[$count + $key2]['dateCreated'] = $dateCreated;
                    $emails_array[$count + $key2]['timeCreated'] = $timeCreated;
                }

                $emails_array = array_values(Arr::sort($emails_array, function ($value) {
                    return $value['date'];
                }));

                $emails_array = array_reverse($emails_array);

                $perPage      = 10;
                $currentPage  = LengthAwarePaginator::resolveCurrentPage();
                $currentItems = array_slice($emails_array, $perPage * ($currentPage - 1), $perPage);
                $emails       = new LengthAwarePaginator($currentItems, count($emails_array), $perPage, $currentPage);

                $view = view('purchase.partials.email', ['emails' => $emails, 'type' => $request->type])->render();

                return response()->json(['emails' => $view]);
            } else {
                return response()->json(['message' => 'Something went wrong!'], 422);
            }
        } catch (Exception $e) {
            return response()->json(['message' => 'Something went wrong!'], 422);
        }
    }

    private function createEmailsForEmailInbox($supplier, $type, $latest_email_date, $emails)
    {
        foreach ($emails as $email) {
            $content = $email->hasHTMLBody() ? $email->getHTMLBody() : $email->getTextBody();

            if ($email->getDate()->format('Y-m-d H:i:s') > $latest_email_date->format('Y-m-d H:i:s')) {
                $attachments_array = [];
                $attachments       = $email->getAttachments();

                $attachments->each(function ($attachment) use (&$attachments_array) {
                    file_put_contents(storage_path('app/files/email-attachments/' . $attachment->name), $attachment->content);
                    $path                = 'email-attachments/' . $attachment->name;
                    $attachments_array[] = $path;
                });

                $params = [
                    'model_id'        => $supplier->id,
                    'model_type'      => Supplier::class,
                    'type'            => $type,
                    'seen'            => $email->getFlags()['seen'],
                    'from'            => $email->getFrom()[0]->mail,
                    'to'              => array_key_exists(0, $email->getTo()) ? $email->getTo()[0]->mail : $email->getReplyTo()[0]->mail,
                    'subject'         => $email->getSubject(),
                    'message'         => $content,
                    'template'        => 'customer-simple',
                    'additional_data' => json_encode(['attachment' => $attachments_array]),
                    'created_at'      => $email->getDate(),
                ];

                Email::create($params);
            }
        }
    }

    public function emailFetch(Request $request)
    {
        $imap = new Client([
            'host'          => env('IMAP_HOST_PURCHASE'),
            'port'          => env('IMAP_PORT_PURCHASE'),
            'encryption'    => env('IMAP_ENCRYPTION_PURCHASE'),
            'validate_cert' => env('IMAP_VALIDATE_CERT_PURCHASE'),
            'username'      => env('IMAP_USERNAME_PURCHASE'),
            'password'      => env('IMAP_PASSWORD_PURCHASE'),
            'protocol'      => env('IMAP_PROTOCOL_PURCHASE'),
        ]);

        $imap->connect();

        if ($request->type == 'inbox') {
            $inbox = $imap->getFolder('INBOX');
        } else {
            $inbox = $imap->getFolder('INBOX.Sent');
            $inbox->query();
        }

        if ($request->email_type == 'server') {
            $email = $inbox->getMessage($uid = $request->uid, null, null, true, true, true);
            if ($email->hasHTMLBody()) {
                $content = $email->getHTMLBody();
            } else {
                $content = $email->getTextBody();
            }

            $attachments_array = [];
            $attachments       = $email->getAttachments();

            $attachments->each(function ($attachment) use (&$content) {
                file_put_contents(storage_path('app/files/email-attachments/' . $attachment->name), $attachment->content);
                $path = 'email-attachments/' . $attachment->name;
                $content .= " <form action='" . route('purchase.download.attachments') . "' method='GET'><input type='hidden' name='path' value='" . $path . "' /><button type='submit' class='btn-link'>Attachment</button></form>";
            });
        } else {
            $email       = Email::find($request->uid);
            $email->seen = 1;
            $email->save();

            $to_email = $email->to;
            $array    = is_array(json_decode($email->additional_data, true)) ? json_decode($email->additional_data, true) : [];

            if (array_key_exists('attachment', $array)) {
                $attachment = json_decode($email->additional_data, true)['attachment'];
                if (is_array($attachment)) {
                    $content = $email->message;
                    foreach ($attachment as $attach) {
                        if ($email->model_type == \App\Supplier::class) {
                            $supplier = Supplier::find($email->model_id);
                            if ($supplier != null) {
                                $filename = explode('/', $attach);
                                $filename = explode('.', end($filename));
                                if (end($filename) == 'xlsx' || end($filename) == 'xls') {
                                    $log = LogExcelImport::where('supplier_email', $supplier->email)->where('filename', $filename[0])->first();
                                    if ($log != null) {
                                        if ($log->status == 1) {
                                            $alert = 'Excel import process';
                                        } elseif ($log->status == 2) {
                                            $alert = 'Excel import created';
                                        } else {
                                            $alert = 'Excel import error';
                                        }
                                    }
                                }
                            }
                        }
                        if (! isset($alert)) {
                            $alert = '';
                        }
                        $content .= " <form action='" . route('purchase.download.attachments') . "' method='GET'><input type='hidden' name='path' value='" . $attach . "' /><button type='submit' class='btn-link'>Attachment</button>
                        <button type='button' class='btn-secondary' onclick='processExcel(" . $email->id . ")' id='email" . $email->id . "' data-attached='" . $attach . "' >" . $alert . '</button></form>';
                    }
                } else {
                    $content = "$email->message <form action='" . route('purchase.download.attachments') . "' method='GET'><input type='hidden' name='path' value='" . $attachment . "' /><button type='submit' class='btn-link'>Attachment</button></form>";
                }
            } else {
                $content = $email->message;
            }
        }

        return response()->json([
            'email'    => $content,
            'to_email' => isset($to_email) ? $to_email : '',
        ]);
    }

    public function emailSend(Request $request)
    {
        $this->validate($request, [
            'subject' => 'required|min:3|max:255',
            'message' => 'required',
            'email.*' => 'required|email',
            'cc.*'    => 'nullable|email',
            'bcc.*'   => 'nullable|email',
        ]);

        $supplier = Supplier::find($request->supplier_id);

        if ($supplier->default_email != '' || $supplier->email != '') {
            $file_paths = [];

            if ($request->hasFile('file')) {
                foreach ($request->file('file') as $file) {
                    $filename = $file->getClientOriginalName();

                    $file->storeAs('documents', $filename, 'files');

                    $file_paths[] = "documents/$filename";
                }
            }

            $cc     = $bcc = [];
            $emails = $request->email;

            if ($request->has('cc')) {
                $cc = array_values(array_filter($request->cc));
            }
            if ($request->has('bcc')) {
                $bcc = array_values(array_filter($request->bcc));
            }

            if (is_array($emails) && ! empty($emails)) {
                $to = array_shift($emails);
                $cc = array_merge($emails, $cc);

                $mail = Mail::to($to);

                if ($cc) {
                    $mail->cc($cc);
                }
                if ($bcc) {
                    $mail->bcc($bcc);
                }

                $mail->send(new PurchaseEmail($request->subject, $request->message, $file_paths));
            } else {
                return redirect()->back()->withErrors('Please select an email');
            }
            $from_email = \App\Helpers::getFromEmail();
            $params     = [
                'model_id'        => $supplier->id,
                'model_type'      => Supplier::class,
                'from'            => $from_email,
                'to'              => $request->email[0],
                'seen'            => 1,
                'subject'         => $request->subject,
                'message'         => $request->message,
                'template'        => 'customer-simple',
                'additional_data' => json_encode(['attachment' => $file_paths]),
                'cc'              => $cc ?: null,
                'bcc'             => $bcc ?: null,
            ];

            Email::create($params);

            return redirect()->route('supplier.show', $supplier->id)->withSuccess('You have successfully sent an email!');
        }

        return redirect()->route('supplier.show', $supplier->id)->withError('Please add an email first');
    }

    public function emailResend(Request $request)
    {
        $this->validate($request, [
            'purchase_id' => 'required|numeric',
            'email_id'    => 'required|numeric',
            'recipient'   => 'required|email',
        ]);

        $attachment = [];
        $purchase   = Purchase::find($request->purchase_id);

        $imap = new Client([
            'host'          => env('IMAP_HOST_PURCHASE'),
            'port'          => env('IMAP_PORT_PURCHASE'),
            'encryption'    => env('IMAP_ENCRYPTION_PURCHASE'),
            'validate_cert' => env('IMAP_VALIDATE_CERT_PURCHASE'),
            'username'      => env('IMAP_USERNAME_PURCHASE'),
            'password'      => env('IMAP_PASSWORD_PURCHASE'),
            'protocol'      => env('IMAP_PROTOCOL_PURCHASE'),
        ]);

        $imap->connect();

        if ($request->type == 'inbox') {
            $inbox = $imap->getFolder('INBOX');
        } else {
            $inbox = $imap->getFolder('INBOX.Sent');
            $inbox->query();
        }

        if ($request->email_type == 'server') {
            $email = $inbox->getMessage($uid = $request->email_id, null, null, true, true, true);

            if ($email->hasHTMLBody()) {
                $content = $email->getHTMLBody();
            } else {
                $content = $email->getTextBody();
            }

            Mail::to($request->recipient)->send(new PurchaseEmail($email->getSubject(), $content, $attachment));
            $from_email = \App\Helpers::getFromEmail();
            $params     = [
                'model_id'        => $purchase->id,
                'model_type'      => Purchase::class,
                'from'            => $from_email,
                'to'              => $request->recipient,
                'subject'         => 'Resent: ' . $email->getSubject(),
                'message'         => $content,
                'template'        => 'customer-simple',
                'additional_data' => json_encode(['attachment' => $attachment]),
            ];
        } else {
            $email = Email::find($request->email_id);

            $array = is_array(json_decode($email->additional_data, true)) ? json_decode($email->additional_data, true) : [];

            if (array_key_exists('attachment', $array)) {
                $temp = json_decode($email->additional_data, true)['attachment'];
            }

            if (! is_array($temp)) {
                $attachment[] = $temp;
            } else {
                $attachment = $temp;
            }

            Mail::to($request->recipient)->send(new PurchaseEmail($email->subject, $email->message, $attachment));
            $from_email = \App\Helpers::getFromEmail();
            $params     = [
                'model_id'        => $purchase->id,
                'model_type'      => Purchase::class,
                'from'            => $from_email,
                'to'              => $request->recipient,
                'subject'         => "Resent: $email->subject",
                'message'         => $email->message,
                'template'        => 'customer-simple',
                'additional_data' => json_encode(['attachment' => $attachment]),
            ];
        }

        Email::create($params);

        return redirect()->route('purchase.show', $purchase->id)->withSuccess('You have successfully resent an email!');
    }

    public function emailReply(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'message' => 'required',
        ]);

        if ($validator->fails()) {
            return response()->json(['success' => false, 'errors' => $validator->errors()->all()]);
        }

        $emailToReply = Email::findOrFail($request->reply_email_id);
        Mail::send(new ReplyToEmail($emailToReply, $request->message));

        return response()->json(['success' => true, 'message' => 'Email has been successfully sent.']);
    }

    public function emailForward(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'to.0' => 'required|email',
            'to.*' => 'nullable|email',
        ]);

        if ($validator->fails()) {
            return response()->json(['success' => false, 'errors' => $validator->errors()->all()]);
        }

        $forwardEmail = Email::findOrFail($request->forward_email_id);
        $forwardTo    = array_filter($request->to);

        foreach ($forwardTo as $to) {
            Mail::to($to)->send(new ForwardEmail($forwardEmail, $request->message));
        }

        return response()->json(['success' => true, 'message' => 'Email has been successfully sent.']);
    }

    public function sendmsgsupplier(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'supplier_id' => 'required',
            'message'     => 'required',
        ]);
        $supplier_id = json_decode($request->input('supplier_id'));

        $id = $request->input('id');

        $suppliers_all = DB::table('suppliers')
            ->select('id', 'phone', 'whatsapp_number', 'supplier')
            ->whereIn('id', $supplier_id)
            ->get();
        if (count($suppliers_all) > 0) {
            // Get product
            $media   = '';
            $product = Product::find($id);
            if ($product && $product->hasMedia(config('constants.media_tags'))) {
                $media = getMediaUrl($product->getMedia(config('constants.media_tags'))->first());
            }

            $sku  = isset($product->sku) ? $product->sku : '';
            $size = ! empty($request->get('size')) ? ' size ' . $request->get('size') : '';

            foreach ($suppliers_all as $supplier) {
                if ($supplier->phone != '') {
                    $message = $request->input('message') . ' (' . $sku . ')' . $size;

                    try {
                        dump('Sending message');

                        app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($supplier->phone, $supplier->whatsapp_number, $message, isset($media) && ! empty($media) ? $media : null);

                        $params = [
                            'number'      => $supplier->phone,
                            'user_id'     => Auth::id(),
                            'supplier_id' => $supplier->id,
                            'message'     => $message,
                            'approved'    => 0,
                            'status'      => 1,
                        ];

                        $chat_message = ChatMessage::create($params);

                        $values = ['product_id' => $id, 'supplier_id' => $supplier->id, 'chat_message_id' => $chat_message->id];
                        DB::table('purchase_product_supplier')->insert($values);
                    } catch (Exception $e) {
                        dump($e->getMessage());
                    }
                }
            }
        }
    }

    public function getMsgSupplier(Request $request)
    {
        $productId = $request->get('product_id', 0);
        $suppliers = $request->get('suppliers', []);

        $suppliers = DB::table('purchase_product_supplier')
            ->select('suppliers.id', 'suppliers.supplier', 'chat_messages.id as chat_messages_id', 'chat_messages.message', 'chat_messages.created_at')
            ->leftJoin('suppliers', 'suppliers.id', '=', 'purchase_product_supplier.supplier_id')
            ->leftJoin('chat_messages', 'chat_messages.id', '=', 'purchase_product_supplier.chat_message_id')
            ->where('purchase_product_supplier.product_id', '=', $productId)
            ->orderBy('chat_messages.created_at', 'DESC')
            ->get();
        $data = [];
        foreach ($suppliers as $key => $value) {
            $data[$value->id]['supplier'] = $value->supplier;

            if (! isset($data[$value->id]['chat_messages'])) {
                $data[$value->id]['chat_messages'] = [];
            }

            if (! empty($value->chat_messages_id)) {
                $data[$value->id]['chat_messages'][] = [
                    'message'    => $value->message,
                    'created_at' => $value->created_at,
                ];
            }
        }

        return response()->json($data);
    }

    public function sendEmailBulk(Request $request)
    {
        $this->validate($request, [
            'subject' => 'required|min:3|max:255',
            'message' => 'required',
            'cc.*'    => 'nullable|email',
            'bcc.*'   => 'nullable|email',
        ]);

        if ($request->suppliers) {
            $suppliers = Supplier::whereIn('id', $request->suppliers)->where(function ($query) {
                $query->whereNotNull('default_email')->orWhereNotNull('email');
            })->get();
        } else {
            if ($request->not_received != 'on' && $request->received != 'on') {
                return redirect()->route('purchase.index')->withErrors(['Please select either suppliers or option']);
            }
        }

        if ($request->not_received == 'on') {
            $suppliers = Supplier::doesnthave('emails')->where(function ($query) {
                $query->whereNotNull('default_email')->orWhereNotNull('email');
            })->get();
        }

        if ($request->received == 'on') {
            $suppliers = Supplier::whereDoesntHave('emails', function ($query) {
                $query->where('type', 'incoming');
            })->where(function ($query) {
                $query->whereNotNull('default_email')->orWhereNotNull('email');
            })->where('has_error', 0)->get();
        }

        $file_paths = [];

        if ($request->hasFile('file')) {
            foreach ($request->file('file') as $file) {
                $filename = $file->getClientOriginalName();

                $file->storeAs('documents', $filename, 'files');

                $file_paths[] = "documents/$filename";
            }
        }

        $cc = $bcc = [];
        if ($request->has('cc')) {
            $cc = array_values(array_filter($request->cc));
        }
        if ($request->has('bcc')) {
            $bcc = array_values(array_filter($request->bcc));
        }

        foreach ($suppliers as $supplier) {
            $mail = Mail::to($supplier->default_email ?? $supplier->email);

            if ($cc) {
                $mail->cc($cc);
            }
            if ($bcc) {
                $mail->bcc($bcc);
            }

            $mail->send(new PurchaseEmail($request->subject, $request->message, $file_paths));
            $from_email = \App\Helpers::getFromEmail();
            $params     = [
                'model_id'        => $supplier->id,
                'model_type'      => Supplier::class,
                'from'            => $from_email,
                'seen'            => 1,
                'to'              => $supplier->default_email ?? $supplier->email,
                'subject'         => $request->subject,
                'message'         => $request->message,
                'template'        => 'customer-simple',
                'additional_data' => json_encode(['attachment' => $file_paths]),
                'cc'              => $cc ?: null,
                'bcc'             => $bcc ?: null,
            ];

            Email::create($params);
        }

        return redirect()->route('purchase.index')->withSuccess('You have successfully sent emails in bulk!');
    }

    /**
     * Start to sync the products with order product id
     */
    public function syncOrderProductId()
    {
        $recordsOldUpdate = Db::select('
        select pp.id,pp.purchase_id, pp.product_id
        from purchase_products as pp join products as p on p.id = pp.product_id
        left join order_products as op on op.sku = p.sku
        where pp.order_product_id != op.id');

        if (! empty($recordsOldUpdate)) {
            foreach ($recordsOldUpdate as $records) {
                // start
                \App\PurchaseProduct::where('id', $records['id'])->update(['order_product_id' => $records['order_product_id']]);
            }
        }
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/PurchaseStatusController.php 
Content: <?php

namespace App\Http\Controllers;

use DB;
use App\PurchaseStatus;
use Illuminate\Http\Request;

class PurchaseStatusController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request)
    {
        $purchaseStatus = PurchaseStatus::orderBy('id', 'DESC')->paginate(10);

        return view('purchase-status.index', compact('purchaseStatus'))
            ->with('i', ($request->input('page', 1) - 1) * 10);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        return view('purchase-status.create');
    }

    /**
     * Store a newly created resource in storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $this->validate($request, [
            'name' => 'required|unique:purchase_status,name',
        ]);

        $department = PurchaseStatus::create(['name' => $request->input('name')]);

        return redirect()->route('purchase-status.index')
            ->with('success', 'Purchase Status created successfully');
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        $status = PurchaseStatus::find($id);

        return view('purchase-status.edit', compact('status'));
    }

    /**
     * Update the specified resource in storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        $this->validate($request, [
            'name' => 'required',
        ]);

        $purchaseStatus       = PurchaseStatus::find($id);
        $purchaseStatus->name = $request->input('name');
        $purchaseStatus->save();

        return redirect()->route('purchase-status.index')
            ->with('success', 'Purchase Status updated successfully');
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        DB::table('purchase_status')->where('id', $id)->delete();

        return redirect()->route('purchase-status.index')
            ->with('success', 'Purchase Status deleted successfully');
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/QuickCustomerController.php 
Content: <?php

namespace App\Http\Controllers;

use App\Customer;
use Illuminate\Http\Request;
use App\ReadOnly\SoloNumbers;

class QuickCustomerController extends Controller
{
    public function index(Request $request)
    {
        $title          = 'Quick Customer';
        $nextActionArr  = \DB::table('customer_next_actions')->get();
        $nextActionList = \DB::table('customer_next_actions')->pluck('name', 'id')->toArray();

        $reply_categories    = \App\ReplyCategory::orderby('id', 'DESC')->get();
        $groups              = \App\QuickSellGroup::select('id', 'name', 'group')->orderby('id', 'DESC')->get();
        $category_suggestion = \App\Category::attr(['name' => 'category[]', 'class' => 'form-control select-multiple', 'multiple' => 'multiple'])->renderAsDropdown();
        $brands              = \App\Brand::all()->toArray();
        $solo_numbers        = (new SoloNumbers)->all();
        $storeWebsites       = \App\StoreWebsite::all()->pluck('website', 'id')->toArray();

        $request->merge(['do_not_disturb' => '0']);

        return view('quick-customer.index', compact('storeWebsites', 'solo_numbers', 'title', 'category_suggestion', 'brands', 'nextActionArr', 'reply_categories', 'groups', 'nextActionList'));
    }

    public function records(Request $request)
    {
        $type              = $request->get('type', 'last_received');
        $chatMessagesWhere = 'WHERE status not in (7,8,9,10)';

        $customer = \App\Customer::query();

        if ($type == 'unread') {
            $customer = $customer->join('chat_messages_quick_datas as cmqs', function ($q) {
                $q->on('cmqs.model_id', 'customers.id')->where('cmqs.model', Customer::class);
            });
            $customer = $customer->join('chat_messages as cm', 'cm.id', 'cmqs.last_unread_message_id');
        } elseif ($type == 'last_communicated') {
            $customer = $customer->join('chat_messages_quick_datas as cmqs', function ($q) {
                $q->on('cmqs.model_id', 'customers.id')->where('cmqs.model', Customer::class);
            });
            $customer = $customer->join('chat_messages as cm', 'cm.id', 'cmqs.last_communicated_message_id');
        } elseif ($type == 'last_received') {
            $chatMessagesWhere .= " and message != '' and message is not null and number = c.phone";
            $customer = $customer->leftJoin(\DB::raw('(SELECT MAX(chat_messages.id) as  max_id, customer_id ,message as matched_message  FROM `chat_messages` join customers as c on c.id = chat_messages.customer_id ' . $chatMessagesWhere . ' GROUP BY customer_id ) m_max'), 'm_max.customer_id', '=', 'customers.id');
            $customer = $customer->leftJoin('chat_messages as cm', 'cm.id', '=', 'm_max.max_id');
            $customer = $customer->orderBy('cm.created_at', 'desc');
        } elseif ($type == null) {
            $customer = $customer->leftJoin(\DB::raw('(SELECT MAX(chat_messages.id) as  max_id, customer_id ,message as matched_message  FROM `chat_messages` join customers as c on c.id = chat_messages.customer_id ' . $chatMessagesWhere . ' GROUP BY customer_id ) m_max'), 'm_max.customer_id', '=', 'customers.id');
            $customer = $customer->leftJoin('chat_messages as cm', 'cm.id', '=', 'm_max.max_id');
        }
        $customer = $customer->orderBy('cm.created_at', 'desc');
        if ($request->customer_id != null) {
            $customer = $customer->where('customers.id', $request->customer_id);
        }

        if ($request->customer_name != null) {
            $customer = $customer->where('customers.name', 'like', '%' . $request->customer_name . '%');
        }

        if ($request->next_action != null) {
            $customer = $customer->where('customers.customer_next_action_id', $request->next_action);
        }

        if ($request->get('do_not_disturb') ||
            (($request->get('do_not_disturb') === '0' || $request->get('do_not_disturb') === 0) && $request->get('do_not_disturb') != '')) {
            $customer = $customer->where('customers.do_not_disturb', $request->get('do_not_disturb'));
        }

        $customer = $customer->select(['customers.*', 'cm.id as message_id', 'cm.status as message_status', 'cm.message'])->paginate(10);

        $items = [];
        foreach ($customer->items() as $item) {
            $item->message          = utf8_encode($item->message);
            $item->name             = utf8_encode($item->name);
            $item->address          = utf8_encode($item->address);
            $item->city             = utf8_encode($item->city);
            $item->country          = utf8_encode($item->country);
            $item->reminder_message = utf8_encode($item->reminder_message);
            $item->message          = utf8_encode($item->message);
            $item['short_message']  = strlen($item->message) > 20 ? substr($item->message, 0, 20) : $item->message;
            $item['short_name']     = strlen($item->name) > 10 ? substr($item->name, 0, 10) : $item->name;
            $items[]                = $item;
        }

        $title            = 'Quick Customer';
        $nextActionArr    = \DB::table('customer_next_actions')->get();
        $reply_categories = \App\ReplyCategory::orderby('name')->get();
        if (isset($_GET['page'])) {
            unset($_GET['page']);
        }

        return response()->json([
            'code'       => 200,
            'data'       => view('quick-customer.quicklist-html', compact('items', 'title', 'nextActionArr', 'reply_categories'))->render(),
            'total'      => $customer->total(),
            'pagination' => (string) $customer->appends($_GET)->links(),
            'page'       => $customer->currentPage(),
        ]);
    }

    public function addInWhatsappList(Request $request)
    {
        $ids = $request->customer_ids;
        if (! empty($ids)) {
            \DB::table('customers')->whereIn('id', $ids)->update(['in_w_list' => 1]);
        }

        return response()->json(['code' => 200, 'data' => [], 'message' => 'Whatsapp list added successfully']);
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/ReturnExchangeController.php 
Content: <?php

namespace App\Http\Controllers;

use Auth;
use App\Email;
use App\Order;
use App\Reply;
use Exception;
use App\Customer;
use App\AutoReply;
use Carbon\Carbon;
use Dompdf\Dompdf;
use App\EmailAddress;
use App\ReturnExchange;
use App\MailinglistTemplate;
use Illuminate\Http\Request;
use App\ReturnExchangeStatus;
use App\ReturnExchangeHistory;
use App\Models\DataTableColumn;
use App\Events\RefundDispatched;
use App\ReturnExchangeStatusLog;
use App\MailinglistTemplateCategory;
use Illuminate\Support\Facades\Mail;
use App\Http\Requests\CreateCouponRequest;
use App\Jobs\UpdateReturnStatusMessageTpl;
use seo2websites\MagentoHelper\MagentoHelperv2;

class ReturnExchangeController extends Controller
{
    public function getOrders($id)
    {
        if (! empty($id)) {
            $customer  = Customer::find($id);
            $orderData = [];

            if (! empty($customer)) {
                $orders = $customer->orders;
                if (! empty($orders)) {
                    foreach ($orders as $order) {
                        $orderProducts = $order->order_product;

                        if (! empty($orderProducts)) {
                            foreach ($orderProducts as $orderProduct) {
                                $orderData[] = ['id' => $orderProduct->id];
                            }
                        }
                    }
                }
            }
        }

        $status   = ReturnExchangeStatus::pluck('status_name', 'id');
        $response = (string) view('partials.return-exchange', compact('id', 'orderData', 'status'));

        return response()->json(['code' => 200, 'html' => $response]);
    }

    /**
     * save the exchange result
     *
     * @param Request
     * @param mixed $id
     *
     **/
    public function save(Request $request, $id)
    {
        $params    = $request->all();
        $sendEmail = $params['send_email'];
        unset($params['send_email']);
        $returnExchange = \App\ReturnExchange::create($params);

        if ($returnExchange) {
            // check if the order has been setup
            if (! empty($params['order_product_id'])) {
                $orderProduct = \App\OrderProduct::find($params['order_product_id']);
                if (! empty($orderProduct) && ! empty($orderProduct->product)) {
                    $product = $orderProduct->product;
                }
            }

            // check if the product id is not stroed with order produc then
            // check with product id
            if (empty($product)) {
                $product = \App\Product::find($params['product_id']);
            }

            if (! empty($product)) {
                $returnExchangeProduct                     = new \App\ReturnExchangeProduct;
                $returnExchangeProduct->product_id         = $product->id;
                $returnExchangeProduct->order_product_id   = $params['order_product_id'];
                $returnExchangeProduct->name               = $product->name;
                $returnExchangeProduct->return_exchange_id = $returnExchange->id;
                $returnExchangeProduct->save();
            }
            // once return exchange created send message if request is for the return
            $returnExchange->notifyToUser();
            $returnExchange->updateHistory();
            if ($request->type == 'refund') {
                // start a request to send message for refund
                $auto_reply = AutoReply::where('type', 'auto-reply')->where('keyword', 'order-refund')->first();
                if ($auto_reply) {
                    $auto_message = preg_replace('/{order_id}/i', ! empty($orderProduct) ? $orderProduct->order_id : 'N/A', $auto_reply->reply);
                    $auto_message = preg_replace('/{product_names}/i', ! empty($product) ? $product->name : 'N/A', $auto_message);
                    $requestData  = new Request();
                    $requestData->setMethod('POST');
                    $requestData->request->add(['customer_id' => $returnExchange->customer->id, 'message' => $auto_message, 'status' => 1]);
                    app(\App\Http\Controllers\WhatsAppController::class)->sendMessage($requestData, 'customer');
                }
            } elseif ($request->type == 'return') {
                // start a request to send message for return
                $auto_reply = AutoReply::where('type', 'auto-reply')->where('keyword', 'order-return')->first();
                if ($auto_reply) {
                    $auto_message = preg_replace('/{order_id}/i', ! empty($orderProduct) ? $orderProduct->order_id : 'N/A', $auto_reply->reply);
                    $auto_message = preg_replace('/{product_names}/i', ! empty($product) ? $product->name : 'N/A', $auto_message);
                    $requestData  = new Request();
                    $requestData->setMethod('POST');
                    $requestData->request->add(['customer_id' => $returnExchange->customer->id, 'message' => $auto_message, 'status' => 1]);
                    app(\App\Http\Controllers\WhatsAppController::class)->sendMessage($requestData, 'customer');
                }
            } elseif ($request->type == 'exchange') {
                // start a request to send message for exchange
                $auto_reply = AutoReply::where('type', 'auto-reply')->where('keyword', 'order-exchange')->first();
                if ($auto_reply) {
                    $auto_message = preg_replace('/{order_id}/i', ! empty($orderProduct) ? $orderProduct->order_id : 'N/A', $auto_reply->reply);
                    $auto_message = preg_replace('/{product_names}/i', ! empty($product) ? $product->name : 'N/A', $auto_message);
                    $requestData  = new Request();
                    $requestData->setMethod('POST');
                    $requestData->request->add(['customer_id' => $returnExchange->customer->id, 'message' => $auto_message, 'status' => 1]);
                    app(\App\Http\Controllers\WhatsAppController::class)->sendMessage($requestData, 'customer');
                }
            }

            // send emails
            if ($sendEmail == 'yes') {
                if ($request->type == 'refund') {
                    $emailClass = (new \App\Mails\Manual\InitializeRefundRequest($returnExchange))->build();

                    $email = Email::create([
                        'model_id'         => $returnExchange->id,
                        'model_type'       => \App\ReturnExchange::class,
                        'from'             => $emailClass->fromMailer,
                        'to'               => $returnExchange->customer->email,
                        'subject'          => $emailClass->subject,
                        'message'          => $emailClass->render(),
                        'template'         => 'refund-request',
                        'additional_data'  => $returnExchange->id,
                        'status'           => 'pre-send',
                        'store_website_id' => null,
                    ]);

                    \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');
                } elseif ($request->type == 'return') {
                    $emailClass = (new \App\Mails\Manual\InitializeReturnRequest($returnExchange))->build();

                    $email = Email::create([
                        'model_id'         => $returnExchange->id,
                        'model_type'       => \App\ReturnExchange::class,
                        'from'             => $emailClass->fromMailer,
                        'to'               => $returnExchange->customer->email,
                        'subject'          => $emailClass->subject,
                        'message'          => $emailClass->render(),
                        'template'         => 'return-request',
                        'additional_data'  => $returnExchange->id,
                        'status'           => 'pre-send',
                        'store_website_id' => null,
                        'is_draft'         => 1,
                    ]);

                    \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');
                } elseif ($request->type == 'exchange') {
                    $emailClass = (new \App\Mails\Manual\InitializeExchangeRequest($returnExchange))->build();

                    $email = Email::create([
                        'model_id'         => $returnExchange->id,
                        'model_type'       => \App\ReturnExchange::class,
                        'from'             => $emailClass->fromMailer,
                        'to'               => $returnExchange->customer->email,
                        'subject'          => $emailClass->subject,
                        'message'          => $emailClass->render(),
                        'template'         => 'exchange-request',
                        'additional_data'  => $returnExchange->id,
                        'status'           => 'pre-send',
                        'store_website_id' => null,
                        'is_draft'         => 1,
                    ]);

                    \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');
                }
            }
        }

        return response()->json(['code' => 200, 'data' => $returnExchange, 'message' => 'Request stored succesfully']);
    }

    public function index(Request $request)
    {
        $returnExchange = ReturnExchange::latest('created_at')->paginate(10);
        $quickreply     = Reply::where('model', 'Order')->get();

        $datatableModel = DataTableColumn::select('column_name')->where('user_id', auth()->user()->id)->where('section_name', 'return-exchange')->first();

        $dynamicColumnsToShowPostman = [];
        if (! empty($datatableModel->column_name)) {
            $hideColumns                 = $datatableModel->column_name ?? '';
            $dynamicColumnsToShowPostman = json_decode($hideColumns, true);
        }

        $status = ReturnExchangeStatus::all();

        return view('return-exchange.index', compact('returnExchange', 'quickreply', 'dynamicColumnsToShowPostman', 'status'));
    }

    public function statuscolor(Request $request)
    {
        $status_color = $request->all();
        $data         = $request->except('_token');
        foreach ($status_color['color_name'] as $key => $value) {
            $rexchangestatus                        = ReturnExchangeStatus::find($key);
            $rexchangestatus->return_exchange_color = $value;
            $rexchangestatus->save();
        }

        return redirect()->back()->with('success', 'The status color updated successfully.');
    }

    public function records(Request $request)
    {
        $params         = $request->all();
        $limit          = ! empty($params['limit']) ? $params['limit'] : 10;
        $returnExchange = ReturnExchange::leftJoin('return_exchange_products as rep', 'rep.return_exchange_id', 'return_exchanges.id')
            ->leftJoin('order_products as op', 'op.id', 'rep.order_product_id')
            ->leftJoin('customers as c', 'c.id', 'return_exchanges.customer_id')
            ->leftJoin('products as p', 'p.id', 'rep.product_id')
            ->leftJoin('orders as o', 'o.id', 'rep.order_product_id')
            ->leftJoin('store_website_orders as wo', 'wo.id', 'o.order_id')
            ->leftJoin('store_websites as w', 'w.id', 'wo.website_id')
            ->leftJoin('return_exchange_statuses as stat', 'stat.id', 'return_exchanges.status')
            ->latest('return_exchanges.created_at');
        if (! empty($params['customer_name'])) {
            $returnExchange = $returnExchange->where('c.name', 'like', '%' . $params['customer_name'] . '%');
        }

        if (! empty($params['customer_email'])) {
            $returnExchange = $returnExchange->where('c.email', 'like', '%' . $params['customer_email'] . '%');
        }

        if (! empty($params['customer_id'])) {
            $returnExchange = $returnExchange->where('c.id', $params['customer_id']);
        }

        if (! empty($params['order_id'])) {
            $returnExchange = $returnExchange->where('o.order_id', $params['order_id']);
        }

        if (! empty($params['order_number'])) {
            $returnExchange = $returnExchange->where('o.order_id', $params['order_number']);
        }

        if (! empty($params['status'])) {
            $returnExchange = $returnExchange->where('return_exchanges.status', $params['status']);
        }

        if (! empty($params['type'])) {
            $returnExchange = $returnExchange->where('return_exchanges.type', $params['type']);
        }

        if (! empty($params['est_completion_date'])) {
            $returnExchange = $returnExchange->where('return_exchanges.est_completion_date', '<=', $params['est_completion_date']);
        }

        if (! empty($params['product'])) {
            $returnExchange = $returnExchange->where(function ($q) use ($params) {
                $q->orWhere('p.name', 'like', '%' . $params['product'] . '%')
                    ->orWhere('p.id', 'like', '%' . $params['product'] . '%')
                    ->orWhere('p.sku', 'like', '%' . $params['product'] . '%');
            });
        }

        if (! empty($params['website'])) {
            $returnExchange = $returnExchange->where('w.title', 'like', '%' . $params['website'] . '%');
        }

        $loggedInUser        = auth()->user();
        $isInCustomerService = $loggedInUser->isInCustomerService();
        if ($isInCustomerService) {
            $returnExchange = $returnExchange->where('c.user_id', $loggedInUser->id);
        }

        $returnExchange = $returnExchange->select([
            'return_exchanges.*',
            'c.name as customer_name',
            'rep.product_id', 'rep.name',
            'stat.status_name as status_name',
            'stat.return_exchange_color as return_exchange_color',
            'w.title as website',
        ])->paginate($limit);

        // update items for status
        $items = $returnExchange->items();
        foreach ($items as &$item) {
            $item['created_at_formated']      = date('d-m', strtotime($item->created_at));
            $item['date_of_refund_formated']  = ! empty($item->date_of_refund) ? date('d-m-Y', strtotime($item->date_of_refund)) : '-';
            $item['dispatch_date_formated']   = ! empty($item->dispatch_date) ? date('d-m-Y', strtotime($item->dispatch_date)) : '-';
            $item['date_of_request_formated'] = ! empty($item->date_of_request) ? date('d-m-Y', strtotime($item->date_of_request)) : '-';
            $item['date_of_issue_formated']   = ! empty($item->date_of_issue) ? date('d-m-Y', strtotime($item->date_of_issue)) : '-';
        }
        $order_status_list = \DB::table('return_exchange_statuses')->get();

        $datatableModel = DataTableColumn::select('column_name')->where('user_id', auth()->user()->id)->where('section_name', 'return-exchange')->first();

        $dynamicColumnsToShowPostman = [];
        if (! empty($datatableModel->column_name)) {
            $hideColumns                 = $datatableModel->column_name ?? '';
            $dynamicColumnsToShowPostman = json_decode($hideColumns, true);
        }

        return response()->json([
            'code'                        => 200,
            'data'                        => $items,
            'order_status_list'           => $order_status_list,
            'pagination'                  => (string) $returnExchange->links(),
            'total'                       => $returnExchange->total(),
            'page'                        => $returnExchange->currentPage(),
            'dynamicColumnsToShowPostman' => $dynamicColumnsToShowPostman,
        ]);
    }

    /**
     * This function is used for Create retuen Exchange status Log
     *
     * @param Request $request
     *
     * @return JsonResponce
     */
    public function createReturnExchangeStatusLog($request)
    {
        try {
            $data = ReturnExchangeStatusLog::create([
                'return_exchanges_id' => $request->id,
                'status_name'         => $request->status_name,
                'status'              => $request->status_id,
                'updated_by'          => Auth::user()->id,
            ]);

            return response()->json(['code' => 200, 'data' => $data]);
        } catch (Exception $e) {
            return response()->json(['code' => 500, 'data' => $e->getMessage()]);
        }
    }

    /**
     * This function is used for update retuen Exchange status Log
     *
     * @return JsonResponce
     */
    public function updateExchangeStatuses(Request $request)
    {
        try {
            $data         = ReturnExchange::where('id', $request->id)->first();
            $data->status = $request->return_exchange_status;
            $data->save();
            $this->createReturnExchangeStatusLog($request);

            $template         = \App\ReturnExchange::ORDER_EXCHANGE_STATUS_TEMPLATE;
            $template         = str_replace(['#{id}', '#{status}'], [$data->id, $data->status], $template);
            $mailing_item_cat = MailinglistTemplateCategory::where('title', 'Status Return exchange')->first();
            if (empty($mailing_item_cat)) {
                \Log::channel('returnExchange')->info('Sending mail issue at the returnexchangecontroller  -> Please add caregory Status Return exchange');

                return response()->json(['code' => 500, 'message' => 'Please add caregory "Status Return exchange ExchangeID : #"' . $request->id]);
            }

            $mailing_item   = MailinglistTemplate::select('html_text')->where('category_id', $mailing_item_cat->id)->where('html_text', '!=', '')->first();
            $storeWebsiteID = $data->customer->storeWebsite->id;

            if ($storeWebsiteID) {
                $emailAddress = \App\EmailAddress::where('store_website_id', $storeWebsiteID)->first();
                if ($emailAddress) {
                    $from = $emailAddress->from_address;
                } else {
                    return response()->json(['code' => 500, 'message' => 'Cannot Find Email address ExchangeID : #"' . $request->id]);
                }
            } else {
                return response()->json(['code' => 500, 'message' => 'Website Id not found ExchangeID : #"' . $request->id]);
            }

            $emailClass = (new \App\Mails\Manual\DefaultEmailPriview($data->customer->email, $mailing_item->html_text, $data, $from))->build();
            if ($emailClass == 'Template not found') {
                return response()->json(['code' => 500, 'message' => 'Email priview not found. Please check e-mail template ExchangeID : #"' . $request->id]);
            }

            $preview = '';
            if ($emailClass != null) {
                $preview = $emailClass->render();
            } else {
                return response()->json(['code' => 500, 'message' => 'Email priview not found. Please check e-mail template ExchangeID : #"' . $request->id]);
            }

            $preview = "<table>
                    <tr>
                    <td>To</td><td>
                    <input type='email' required id='email_to_mail' class='form-control' name='to_mail' value='" . $data->customer->email . "' >
                    </td></tr><tr>
                    <td>From </td> <td>
                    <input type='email' required id='email_from_mail' class='form-control' name='from_mail' value='" . $from . "' >
                    </td></tr><tr>
                    <td>Preview </td> <td><textarea name='editableFile' rows='10' id='customEmailContent' >" . $preview . '</textarea></td>
                    </tr>
            </table>';

            return response()->json(['code' => 200, 'data' => compact('data', 'preview', 'template')]);
        } catch (Exception $e) {
            \Log::channel('returnExchange')->info('Sending mail issue at the returnexchangecontroller  ->' . $e->getMessage());

            return response()->json(['code' => 500, 'message' => $e->getMessage()]);
        }
    }

    public function updateStatusEmailSend(Request $request)
    {
        $params         = $request->all();
        $id             = $request->id;
        $returnExchange = \App\ReturnExchange::find($id);
        if (isset($request->status) && $request->status != '') {
            $code = 'REFUND-' . date('Ym') . '-' . rand(1000, 9999);

            $requestData = new Request();
            $requestData->setMethod('POST');
            $requestData->request->add([
                'name'               => $code,
                'store_website_id'   => $returnExchange->customer->storeWebsite->id,
                'website_ids'        => [0 => 0],
                'start'              => date('Y-m-d H:i:s'),
                'active'             => '1',
                'uses_per_coustomer' => 1,
                'customer_groups'    => [0 => 0],
                'coupon_type'        => 'SPECIFIC_COUPON',
                'code'               => $code,
                'simple_action'      => 'by_fixed',
                'discount_amount'    => $request->refund_amount,
            ]);

            try {
                $response   = app(\App\Http\Controllers\CouponController::class)->addRules($requestData);
                $emailClass = (new \App\Mails\Manual\StatusChangeRefund($returnExchange))->build();
                $email      = Email::create([
                    'model_id'         => $returnExchange->id,
                    'model_type'       => \App\ReturnExchange::class,
                    'from'             => $request->from_mail,
                    'to'               => $request->to_mail,
                    'subject'          => $request->message,
                    'message'          => 'Your refund coupon :' . $code . $request->custom_email_content,
                    'template'         => 'refund-coupon',
                    'additional_data'  => $returnExchange->id,
                    'status'           => 'pre-send',
                    'store_website_id' => null,
                    'is_draft'         => 1,
                ]);

                $receiverNumber = $returnExchange->customer->phone;

                \App\Jobs\TwilioSmsJob::dispatch($receiverNumber, 'Your refund coupon :' . $code, $returnExchange->customer->storeWebsite->id);

                $response = json_decode($response->getContent());
                if ($response->type == 'error') {
                    return response()->json(['code' => 500, 'data' => [], 'message' => json_decode($response->getContent())->message, 'error' => json_decode($response->getContent())->error]);
                }

                if ($response->type == 'error') {
                    \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');
                }
            } catch (Exception $e) {
                return response()->json(['code' => 500, 'data' => [], 'message' => 'Something went wrong']);
            }
        }

        //Sending Mail on changing of order status
        if (isset($request->send_message) && $request->send_message == '1') {
            //sending order message to the customer
            UpdateReturnStatusMessageTpl::dispatch($returnExchange->id, request('message', null))->onQueue('customer_message');
            try {
                if ($returnExchange->type == 'refund') {
                    $emailClass = (new \App\Mails\Manual\StatusChangeRefund($returnExchange))->build();
                    $email      = \App\Email::create([
                        'model_id'         => $returnExchange->id,
                        'model_type'       => \App\ReturnExchange::class,
                        'from'             => $request->from_mail,
                        'to'               => $request->to_mail,
                        'subject'          => $request->message,
                        'message'          => 'Your refund coupon :' . $code . $request->custom_email_content,
                        'template'         => 'refund-request',
                        'additional_data'  => $returnExchange->id,
                        'status'           => 'pre-send',
                        'store_website_id' => null,
                        'is_draft'         => 1,
                    ]);

                    \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');

                    $receiverNumber = $returnExchange->customer->phone;
                    \App\Jobs\TwilioSmsJob::dispatch($receiverNumber, $emailClass->subject, $returnExchange->customer->storeWebsite->id);
                } elseif ($returnExchange->type == 'return') {
                    $emailClass = (new \App\Mails\Manual\StatusChangeReturn($returnExchange))->build();
                    $email      = \App\Email::create([
                        'model_id'         => $returnExchange->id,
                        'model_type'       => \App\ReturnExchange::class,
                        'from'             => $request->from_mail,
                        'to'               => $request->to_mail,
                        'subject'          => $emailClass->subject,
                        'message'          => $request->custom_email_content, //$emailClass->render(),
                        'template'         => 'return-request',
                        'additional_data'  => $returnExchange->id,
                        'status'           => 'pre-send',
                        'store_website_id' => null,
                        'is_draft'         => 1,
                    ]);
                    \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');

                    $receiverNumber = $returnExchange->customer->phone;
                    \App\Jobs\TwilioSmsJob::dispatch($receiverNumber, $emailClass->subject, $returnExchange->customer->storeWebsite->id);
                } elseif ($returnExchange->type == 'exchange') {
                    $emailClass = (new \App\Mails\Manual\StatusChangeExchange($returnExchange))->build();
                    $email      = \App\Email::create([
                        'model_id'         => $returnExchange->id,
                        'model_type'       => \App\ReturnExchange::class,
                        'from'             => $request->from_mail,
                        'to'               => $request->to_mail,
                        'subject'          => $emailClass->subject,
                        'message'          => $request->custom_email_content, //$emailClass->render(),
                        'template'         => 'exchange-request',
                        'additional_data'  => $returnExchange->id,
                        'status'           => 'pre-send',
                        'store_website_id' => null,
                        'is_draft'         => 1,
                    ]);

                    \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');

                    $receiverNumber = $returnExchange->customer->phone;
                    \App\Jobs\TwilioSmsJob::dispatch($receiverNumber, $emailClass->subject, $returnExchange->customer->storeWebsite->id);
                }
            } catch (Exception $e) {
                \Log::channel('productUpdates')->info('Sending mail issue at the returnexchangecontroller #158 ->' . $e->getMessage());
            }
        }

        return response()->json(['code' => 200, 'data' => [], 'message' => 'Request updated succesfully!!']);
    }

    /**
     * This function is used for List retuen Exchange status Log
     *
     * @return JsonResponce
     */
    public function listExchangeStatusesLog(Request $request)
    {
        try {
            $data = ReturnExchangeStatusLog::select('return_exchange_status_logs.*', 'users.name AS updatedby_name')
                ->leftJoin('users', 'users.id', '=', 'return_exchange_status_logs.updated_by')
                ->where('return_exchanges_id', $request->id)
                ->get();
            if (! empty($data->toArray())) {
                return response()->json(['code' => 200, 'data' => $data]);
            } else {
                return response()->json(['code' => 500, 'message' => 'Logs not found']);
            }
        } catch (Exception $e) {
            return response()->json(['code' => 500, 'data' => $e->getMessage()]);
        }
    }

    public function detail(Request $request, $id)
    {
        $returnExchange = ReturnExchange::find($id);
        //check error return exist
        if (! empty($returnExchange)) {
            $data['return_exchange'] = $returnExchange;
            $data['status']          = ReturnExchangeStatus::pluck('status_name', 'id');
            if ($request->from == 'erp-customer') {
                return view('ErpCustomer::partials.edit-return-summery', compact('data'));
            }

            return response()->json(['code' => 200, 'data' => $data]);
        }
        // if not found then add error response
        return response()->json(['code' => 500, 'data' => []]);
    }

    public function update(Request $request, $id)
    {
        $params = $request->all();

        $returnExchange = \App\ReturnExchange::find($id);
        $status         = ReturnExchangeStatus::find($request->status);

        //Sending request to magento
        $magentoHelper = new MagentoHelperv2;
        $result        = $magentoHelper->changeReturnOrderStatus($status, $returnExchange);
        $response      = $result->getData();

        if (isset($response) && isset($response->status) && $response->status == false) {
            return response()->json($response->error, 500);
        }

        if (! empty($returnExchange)) {
            $returnExchange->fill($params);
            $returnExchange->save();

            if (isset($status->status_name) && $status->status_name == 'approve') {
                $storeList = \App\Website::where('store_website_id', $returnExchange->customer->storeWebsite->id)->get();

                $code = 'REFUND-' . date('Ym') . '-' . rand(1000, 9999);

                $requestData = new Request();
                $requestData->setMethod('POST');
                $requestData->request->add([
                    'name'               => $code,
                    'store_website_id'   => $returnExchange->customer->storeWebsite->id,
                    'website_ids'        => [0 => 0],
                    'start'              => date('Y-m-d H:i:s'),
                    'active'             => '1',
                    'uses_per_coustomer' => 1,
                    'customer_groups'    => [0 => 0],
                    'coupon_type'        => 'SPECIFIC_COUPON',
                    'code'               => $code,
                    'simple_action'      => 'by_fixed',
                    'discount_amount'    => $request->refund_amount,
                ]);

                try {
                    $response   = app(\App\Http\Controllers\CouponController::class)->addRules($requestData);
                    $emailClass = (new \App\Mails\Manual\StatusChangeRefund($returnExchange))->build();
                    $email      = Email::create([
                        'model_id'         => $returnExchange->id,
                        'model_type'       => \App\ReturnExchange::class,
                        'from'             => $emailClass->fromMailer,
                        'to'               => $returnExchange->customer->email,
                        'subject'          => $emailClass->subject,
                        'message'          => 'Your refund coupon :' . $code,
                        'template'         => 'refund-coupon',
                        'additional_data'  => $returnExchange->id,
                        'status'           => 'pre-send',
                        'store_website_id' => null,
                        'is_draft'         => 1,
                    ]);

                    $receiverNumber = $returnExchange->customer->phone;

                    \App\Jobs\TwilioSmsJob::dispatch($receiverNumber, 'Your refund coupon :' . $code, $returnExchange->customer->storeWebsite->id);

                    $response = json_decode($response->getContent());
                    if ($response->type == 'error') {
                        return response()->json(['code' => 500, 'data' => [], 'message' => json_decode($response->getContent())->message, 'error' => json_decode($response->getContent())->error]);
                    }
                    if ($response->type == 'error') {
                        \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');
                    }
                } catch (Exception $e) {
                    return response()->json(['code' => 500, 'data' => [], 'message' => 'Something went wrong']);
                }
            }

            //Sending Mail on changing of order status
            if (isset($request->send_message) && $request->send_message == '1') {
                //sending order message to the customer
                UpdateReturnStatusMessageTpl::dispatch($returnExchange->id, request('message', null))->onQueue('customer_message');
                try {
                    if ($returnExchange->type == 'refund') {
                        $emailClass = (new \App\Mails\Manual\StatusChangeRefund($returnExchange))->build();
                        $email      = \App\Email::create([
                            'model_id'         => $returnExchange->id,
                            'model_type'       => \App\ReturnExchange::class,
                            'from'             => $emailClass->fromMailer,
                            'to'               => $returnExchange->customer->email,
                            'subject'          => $emailClass->subject,
                            'message'          => $emailClass->render(),
                            'template'         => 'refund-request',
                            'additional_data'  => $returnExchange->id,
                            'status'           => 'pre-send',
                            'store_website_id' => null,
                            'is_draft'         => 1,
                        ]);

                        \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');

                        $receiverNumber = $returnExchange->customer->phone;
                        \App\Jobs\TwilioSmsJob::dispatch($receiverNumber, $emailClass->subject, $returnExchange->customer->storeWebsite->id);
                    } elseif ($returnExchange->type == 'return') {
                        $emailClass = (new \App\Mails\Manual\StatusChangeReturn($returnExchange))->build();
                        $email      = \App\Email::create([
                            'model_id'         => $returnExchange->id,
                            'model_type'       => \App\ReturnExchange::class,
                            'from'             => $emailClass->fromMailer,
                            'to'               => $returnExchange->customer->email,
                            'subject'          => $emailClass->subject,
                            'message'          => $emailClass->render(),
                            'template'         => 'return-request',
                            'additional_data'  => $returnExchange->id,
                            'status'           => 'pre-send',
                            'store_website_id' => null,
                            'is_draft'         => 1,
                        ]);
                        \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');

                        $receiverNumber = $returnExchange->customer->phone;
                        \App\Jobs\TwilioSmsJob::dispatch($receiverNumber, $emailClass->subject, $returnExchange->customer->storeWebsite->id);
                    } elseif ($returnExchange->type == 'exchange') {
                        $emailClass = (new \App\Mails\Manual\StatusChangeExchange($returnExchange))->build();
                        $email      = \App\Email::create([
                            'model_id'         => $returnExchange->id,
                            'model_type'       => \App\ReturnExchange::class,
                            'from'             => $emailClass->fromMailer,
                            'to'               => $returnExchange->customer->email,
                            'subject'          => $emailClass->subject,
                            'message'          => $emailClass->render(),
                            'template'         => 'exchange-request',
                            'additional_data'  => $returnExchange->id,
                            'status'           => 'pre-send',
                            'store_website_id' => null,
                            'is_draft'         => 1,
                        ]);

                        \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');

                        $receiverNumber = $returnExchange->customer->phone;
                        \App\Jobs\TwilioSmsJob::dispatch($receiverNumber, $emailClass->subject, $returnExchange->customer->storeWebsite->id);
                    }
                } catch (Exception $e) {
                    \Log::channel('productUpdates')->info('Sending mail issue at the returnexchangecontroller #158 ->' . $e->getMessage());
                }
            }

            $returnExchange->updateHistory();
        }

        return response()->json(['code' => 200, 'data' => [], 'message' => 'Request updated succesfully!!']);
    }

    public function regenerateCoupon(Request $request, $id)
    {
        $returnExchange = \App\ReturnExchange::find($id);
        $requestData    = new CreateCouponRequest();
        $requestData->setMethod('POST');
        $code = 'REFUND-' . date('Ym') . '-' . rand(1000, 9999);

        $storeList = \App\Website::where('store_website_id', $returnExchange->customer->storeWebsite->id)->get();

        $requestData->request->add([
            'name'               => $code,
            'store_website_id'   => $returnExchange->customer->storeWebsite->id,
            'customer_group_ids' => $returnExchange->customer_id,
            'website_ids'        => [$storeList[0]['platform_id'] ?? 0],
            'start'              => date('Y-m-d H:i:s'),
            'active'             => '1',
            'uses_per_coustomer' => 1,
            'simple_action'      => 'by_fixed',
            'discount_amount'    => $request->refund_amount,
        ]);

        try {
            $response = app(\App\Http\Controllers\CouponController::class)->addRules($requestData);

            return response()->json(['code' => 200, 'data' => [], 'message' => json_decode($response->getContent())->message]);
        } catch (Exception $e) {
            return response()->json(['code' => 500, 'data' => [], 'message' => $e->getMessage()]);
        }
    }

    public function delete(Request $request, $id)
    {
        $ids = explode(',', $id);
        foreach ($ids as $id) {
            $returnExchange = \App\ReturnExchange::find($id);
            if (! empty($returnExchange)) {
                // start to delete from here
                $returnExchange->returnExchangeProducts()->delete();
                $returnExchange->returnExchangeHistory()->delete();
                $returnExchange->delete();
            }
        }

        return response()->json(['code' => 200, 'data' => [], 'message' => 'Request deleted succesfully!!']);
    }

    public function history(Request $request, $id)
    {
        $result = \App\ReturnExchangeHistory::where('return_exchange_id', $id)->where('history_type', 'status')->leftJoin('users as u', 'u.id', 'return_exchange_histories.user_id')
            ->select(['return_exchange_histories.*', 'u.name as user_name'])
            ->orderby('return_exchange_histories.created_at', 'desc')
            ->get();

        $history = [];
        if (! empty($result)) {
            foreach ($result as $res) {
                $res['status'] = ReturnExchangeStatus::where('id', $res->status_id)->first()->status_name;
                $history[]     = $res;
            }
        }

        return response()->json(['code' => 200, 'data' => $history, 'message' => '']);
    }

    public function getProducts($id)
    {
        if (! empty($id)) {
            $product = \App\Product::find($id);
            if (! empty($product)) {
                $data['dnf']               = $product->dnf;
                $data['id']                = $product->id;
                $data['name']              = $product->name;
                $data['short_description'] = $product->short_description;
                $data['activities']        = $product->activities;
                $data['scraped']           = $product->scraped_products;

                $data['measurement_size_type'] = $product->measurement_size_type;
                $data['lmeasurement']          = $product->lmeasurement;
                $data['hmeasurement']          = $product->hmeasurement;
                $data['dmeasurement']          = $product->dmeasurement;

                $data['size']       = $product->size;
                $data['size_value'] = $product->size_value;

                $data['composition'] = $product->composition;
                $data['sku']         = $product->sku;
                $data['made_in']     = $product->made_in;
                $data['brand']       = $product->brand;
                $data['color']       = $product->color;
                $data['price']       = $product->price;
                $data['status']      = $product->status_id;

                $data['euro_to_inr']       = $product->euro_to_inr;
                $data['price_inr']         = $product->price_inr;
                $data['price_inr_special'] = $product->price_inr_special;

                $data['isApproved']    = $product->isApproved;
                $data['rejected_note'] = $product->rejected_note;
                $data['isUploaded']    = $product->isUploaded;
                $data['isFinal']       = $product->isFinal;
                $data['stock']         = $product->stock;
                $data['reason']        = $product->rejected_note;

                $data['product_link']     = $product->product_link;
                $data['supplier']         = $product->supplier;
                $data['supplier_link']    = $product->supplier_link;
                $data['description_link'] = $product->description_link;
                $data['location']         = $product->location;

                $data['suppliers']      = '';
                $data['more_suppliers'] = [];

                foreach ($product->suppliers as $key => $supplier) {
                    if ($key == 0) {
                        $data['suppliers'] .= $supplier->supplier;
                    } else {
                        $data['suppliers'] .= ", $supplier->supplier";
                    }
                }

                $image = $product->getMedia(config('constants.media_tags'))->first();

                if ($image !== null) {
                    $data['images'] = getMediaUrl($image);
                } else {
                    $data['images'] = '#';
                }

                $data['categories'] = $product->category ? CategoryController::getCategoryTree($product->category) : '';
                $data['product']    = $product;

                $response = (string) view('return-exchange.templates.productview', $data);
            }
        }

        return response()->json(['code' => 200, 'html' => $response ?? 'Product not found.']);
    }

    public function product(Request $request, $id)
    {
        if (! empty($id)) {
            $product = \App\Product::where('products.id', $id)
                ->leftJoin('order_products as op', 'op.product_id', 'products.id')
                ->leftJoin('orders', 'orders.id', 'op.order_id')
                ->leftJoin('brands', 'brands.id', 'products.brand')
                ->select(['orders.order_id as order_number', 'brands.name as product_brand', 'products.name as product_name',
                    'products.image as product_image', 'products.price as product_price',
                    'products.supplier as product_supplier', 'products.short_description as about_product', ])
                ->get();
        }

        return response()->json(['code' => 200, 'data' => $product, 'message' => '']);
    }

    public function updateCustomer(Request $request)
    {
        if ($request->update_type == 1) {
            $ids = explode(',', $request->selected_ids);
            foreach ($ids as $id) {
                $return = \App\ReturnExchange::where('id', $id)->first();
                if ($return && $request->customer_message && $request->customer_message != '') {
                    \App\Jobs\UpdateReturnExchangeStatusTpl::dispatch($return->id, $request->customer_message);
                }
            }
        } else {
            $ids = explode(',', $request->selected_ids);
            foreach ($ids as $id) {
                if (! empty($id) && $request->customer_message && $request->customer_message != '' && $request->status) {
                    $return  = \App\ReturnExchange::where('id', $id)->first();
                    $statuss = \App\ReturnExchangeStatus::where('id', $request->status)->first();
                    if ($return) {
                        $return->status = $request->status;
                        $return->save();
                        \App\Jobs\UpdateReturnExchangeStatusTpl::dispatch($return->id, $request->customer_message);
                    }
                }
            }
        }

        return response()->json(['message' => 'Successful'], 200);
    }

    public function createStatus(Request $request)
    {
        $this->validate($request, [
            'status_name' => 'required',
        ]);
        $input   = $request->except('_token');
        $isExist = \App\ReturnExchangeStatus::where('status_name', $request->status_name)->first();
        if (! $isExist) {
            \App\ReturnExchangeStatus::create([
                'status_name' => $request->status_name,
            ]);

            return response()->json(['message' => 'Successful'], 200);
        } else {
            return response()->json(['message' => 'Fail'], 401);
        }
    }

    public function createRefund(Request $request)
    {
        $this->validate($request, [
            'customer_id'        => 'required|integer',
            'refund_amount'      => 'required',
            'refund_amount_mode' => 'required|string',
        ]);

        $data                  = $request->except('_token');
        $data['date_of_issue'] = Carbon::parse($request->date_of_request)->addDays(10);

        if ($request->credited) {
            $data['credited'] = 1;
        }
        ReturnExchange::create($data);
        //create entry in table cash_flows
        \DB::table('cash_flows')->insert(
            [
                'cash_flow_able_id'   => $request->input('user_id'),
                'description'         => 'Vendor paid',
                'date'                => ('Y-m-d'),
                'amount'              => $request->input('refund_amount'),
                'type'                => 'paid',
                'cash_flow_able_type' => \App\ReturnExchange::class,

            ]
        );

        /// start a request to send message for refund
        $auto_reply = AutoReply::where('type', 'auto-reply')->where('keyword', 'order-refund-manual')->first();
        if ($auto_reply) {
            $requestData = new Request();
            $requestData->setMethod('POST');
            $requestData->request->add(['customer_id' => $request->customer_id, 'message' => $auto_reply->reply, 'status' => 1]);
            app(\App\Http\Controllers\WhatsAppController::class)->sendMessage($requestData, 'customer');
        }

        return response()->json(['message' => 'You have successfully added refund!'], 200);
    }

    public function getRefundInfo($id)
    {
        $returnExchange = ReturnExchange::find($id);
        $response       = (string) view('return-exchange.templates.update-refund', compact('returnExchange', 'id'));

        return response()->json(['code' => 200, 'html' => $response]);
    }

    public function updateRefund(Request $request)
    {
        $this->validate($request, [
            'customer_id'        => 'required|integer',
            'refund_amount'      => 'required',
            'id'                 => 'required',
            'refund_amount_mode' => 'required|string',
        ]);

        $data           = $request->except('_token', 'id', 'customer_id');
        $returnExchange = ReturnExchange::find($request->id);

        if (! $returnExchange->date_of_issue) {
            $data['date_of_issue'] = Carbon::parse($request->date_of_request)->addDays(10);
        }
        if ($returnExchange) {
            $returnExchange->update($data);
        }

        //Sending Mail on edit of return and exchange
        $mailingListCategory = MailinglistTemplateCategory::where('title', 'Refund and Exchange')->first();

        $templateData = MailinglistTemplate::where('store_website_id', $returnExchange->customer->store_website_id)->where('category_id', $mailingListCategory->id)->first();

        $arrToReplace = ['{FIRST_NAME}', '{REFUND_TYPE}', '{CHQ_NUMBER}', '{REFUND_AMOUNT}', '{DATE_OF_REFUND}', '{DETAILS}'];

        $valToReplace = [$returnExchange->customer->name, $returnExchange->type, $returnExchange->chq_number, $returnExchange->amount, $returnExchange->date_of_request, $returnExchange->details];
        $bodyText     = str_replace($arrToReplace, $valToReplace, $templateData->static_template);

        $storeEmailAddress = EmailAddress::where('store_website_id', $returnExchange->customer->store_website_id)->first();

        $emailData['subject']         = $templateData->subject;
        $emailData['static_template'] = $bodyText;
        $emailData['from']            = $storeEmailAddress->from_address;

        if (isset($request->message_via)) {
            if (in_array('email', $request->message_via)) {
                Mail::to($returnExchange->customer->email)->send(new \App\Mail\ReturnExchangeEmail($emailData));
            }

            if (in_array('sms', $request->message_via)) {
                $receiverNumber = $returnExchange->customer->phone;
                \App\Jobs\TwilioSmsJob::dispatch($receiverNumber, $bodyText, $returnExchange->customer->store_website_id);
            }
        }

        //Sending Mail on edit of return and exchange

        $updateOrder = 0;
        if (! $request->dispatched) {
            $data['dispatch_date'] = $returnExchange->dispatch_date;
            $data['awb']           = $returnExchange->awb;
        } else {
            $order_products = ReturnExchange::join('return_exchange_products', 'return_exchanges.id', 'return_exchange_products.return_exchange_id')
                ->join('order_products', 'order_products.id', 'return_exchange_products.order_product_id')->select('order_products.*')->first();
            if ($order_products) {
                $order = Order::find($order_products->order_id);
                if ($order) {
                    $updateOrder            = 1;
                    $order->order_status    = 'Refund Dispatched';
                    $order->order_status_id = \App\Helpers\OrderHelper::$refundDispatched;
                    event(new RefundDispatched($returnExchange));
                }
            }
        }

        if ($request->credited) {
            $data['credited'] = 1;
            if ($updateOrder == 1) {
                $order->order_status    = 'Refund Credited';
                $order->order_status_id = \App\Helpers\OrderHelper::$refundCredited;
            }
        }

        $data['date_of_issue'] = Carbon::parse($request->date_of_request)->addDays(10);
        if ($returnExchange) {
            if ($updateOrder == 1) {
                $order->save();
            }
        }

        return response()->json(['message' => 'You have successfully added refund!'], 200);
    }

    public function updateEstmatedDate(Request $request)
    {
        $returnExchange = ReturnExchange::find($request->exchange_id);
        if ($returnExchange) {
            if ($request->estimate_date && $request->estimate_date != '') {
                $oldDate                             = $returnExchange->est_completion_date;
                $returnExchange->est_completion_date = $request->estimate_date;
                $returnExchange->save();

                ReturnExchangeHistory::create([
                    'return_exchange_id' => $request->exchange_id,
                    'status_id'          => 0,
                    'user_id'            => Auth::user()->id,
                    'history_type'       => 'est_date',
                    'old_value'          => $oldDate,
                    'new_value'          => $request->estimate_date,
                ]);

                return response()->json(['code' => 200, 'message' => 'Successfull']);
            }
        }

        return response()->json(['code' => 500, 'message' => 'Return/exchange not found']);
    }

    public function estimationHistory(Request $request, $id)
    {
        $result = \App\ReturnExchangeHistory::where('return_exchange_id', $id)->where('history_type', 'est_date')->leftJoin('users as u', 'u.id', 'return_exchange_histories.user_id')
            ->select(['return_exchange_histories.*', 'u.name as user_name'])
            ->get();

        $history = [];
        if (! empty($result)) {
            foreach ($result as $res) {
                $history[] = $res;
            }
        }

        return response()->json(['code' => 200, 'data' => $history, 'message' => '']);
    }

    public function addNewReply(request $request)
    {
        if ($request->reply) {
            $replyData                = [];
            $html                     = '';
            $replyData['reply']       = $request->reply;
            $replyData['model']       = 'Order';
            $replyData['category_id'] = 1;
            $success                  = Reply::create($replyData);
            if ($success) {
                $replies = Reply::where('model', 'Order')->get();
                if ($replies) {
                    $html .= "<option value=''>Select Order Status</option>";
                    foreach ($replies as $reply) {
                        $html .= '<option value="' . $reply->id . '">' . $reply->reply . '</option>';
                    }
                }

                return response()->json(['message' => 'reply added successfully', 'html' => $html, 'status' => 200]);
            }

            return response()->json(['message' => 'unable to add reply', 'status' => 500]);
        }

        return response()->json(['message' => 'please enter a reply', 'status' => 400]);
    }

    public function resendEmail(Request $request)
    {
        $returnExchange = \App\ReturnExchange::find($request->id);
        if ($returnExchange) {
            try {
                if ($request->type == 'refund') {
                    $emailClass = (new \App\Mails\Manual\InitializeRefundRequest($returnExchange))->build();

                    $email = Email::create([
                        'model_id'         => $returnExchange->id,
                        'model_type'       => \App\ReturnExchange::class,
                        'from'             => $emailClass->fromMailer,
                        'to'               => $returnExchange->customer->email,
                        'subject'          => $emailClass->subject,
                        'message'          => $emailClass->render(),
                        'template'         => 'refund-request',
                        'additional_data'  => $returnExchange->id,
                        'status'           => 'pre-send',
                        'store_website_id' => null,
                        'is_draft'         => 1,
                    ]);

                    \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');
                } elseif ($request->type == 'return') {
                    $emailClass = (new \App\Mails\Manual\InitializeReturnRequest($returnExchange))->build();

                    $email = Email::create([
                        'model_id'         => $returnExchange->id,
                        'model_type'       => \App\ReturnExchange::class,
                        'from'             => $emailClass->fromMailer,
                        'to'               => $returnExchange->customer->email,
                        'subject'          => $emailClass->subject,
                        'message'          => $emailClass->render(),
                        'template'         => 'return-request',
                        'additional_data'  => $returnExchange->id,
                        'status'           => 'pre-send',
                        'store_website_id' => null,
                        'is_draft'         => 1,
                    ]);

                    \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');
                } elseif ($request->type == 'exchange') {
                    $emailClass = (new \App\Mails\Manual\InitializeExchangeRequest($returnExchange))->build();

                    $email = Email::create([
                        'model_id'         => $returnExchange->id,
                        'model_type'       => \App\ReturnExchange::class,
                        'from'             => $emailClass->fromMailer,
                        'to'               => $returnExchange->customer->email,
                        'subject'          => $emailClass->subject,
                        'message'          => $emailClass->render(),
                        'template'         => 'exchange-request',
                        'additional_data'  => $returnExchange->id,
                        'status'           => 'pre-send',
                        'store_website_id' => null,
                        'is_draft'         => 1,
                    ]);

                    \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');
                }
            } catch (Exception $e) {
                \Log::channel('productUpdates')->info('Sending mail issue at the returnexchangecontroller #694 ->' . $e->getMessage());
            }
        }

        return response()->json(['message' => 'Return request send successfully', 'status' => 200]);
    }

    public function status(Request $request)
    {
        $status   = ReturnExchangeStatus::query();
        $websites = \App\StoreWebsite::all();
        if ($request->search != null) {
            $status = $status->where('status_name', 'like', '%' . $request->search . '%');
        }

        $status = $status->get();

        return view('return-exchange.status', compact('status', 'websites'));
    }

    public function getStatusByWebsite(Request $request)
    {
        $website = \App\StoreWebsite::find($request->id);
        $status  = $website->returnExchangeStatus;

        return view('return-exchange.partial.list-status', compact('status'));
    }

    public function fetchMagentoStatus(Request $request)
    {
        $website       = \App\StoreWebsite::find($request->id);
        $magentoHelper = new MagentoHelperv2;
        $results       = $magentoHelper->getReturnOrderStatus($website);

        if (! is_array($results)) {
            $response = $results->getData();

            if (isset($response) && isset($response->status) && $response->status == false) {
                return response()->json($response->error, 500);
            }
        }

        foreach ($results as $result) {
            $checkIfExist = app(ReturnExchangeStatus::class)->where('status_name', $result->status)->where('store_website_id', $website->id)->first();
            if (! $checkIfExist) {
                $newStatus                   = new ReturnExchangeStatus;
                $newStatus->status_name      = $result->status;
                $newStatus->store_website_id = $website->id;
                $newStatus->save();
            }
        }
        $website->refresh();
        $status = $website->returnExchangeStatus;

        return view('return-exchange.partial.list-status', compact('status'));
    }

    public function saveStatusField(Request $request)
    {
        if ($request->id != null) {
            $status = ReturnExchangeStatus::find($request->id);
            if ($status) {
                $status->{$request->field} = $request->value;
                $status->save();

                return response()->json(['code' => 200, 'data' => $status, 'message' => 'Added successfully']);
            }
        }

        return response()->json(['code' => 500, 'data' => [], 'message' => 'No data found']);
    }

    public function deleteStatus(Request $request)
    {
        if ($request->id != null) {
            $status = ReturnExchangeStatus::find($request->id);
            if ($status) {
                $status->delete();

                return response()->json(['code' => 200, 'data' => $status, 'message' => 'Added successfully']);
            }
        }

        return response()->json(['code' => 500, 'data' => [], 'message' => 'No data found']);
    }

    public function statusWebsiteSave(Request $request)
    {
        $website       = \App\StoreWebsite::find($request->id);
        $magentoHelper = new MagentoHelperv2;
        $result        = $magentoHelper->addReturnOrderStatus($website, $request->status);
        $response      = $result->getData();
        if (isset($response) && isset($response->status) && $response->status == false) {
            return response()->json($response->error, 500);
        }
        if ($result) {
            $newStatus                   = new ReturnExchangeStatus;
            $newStatus->status_name      = $request->status;
            $newStatus->store_website_id = $website->id;
            $newStatus->save();
            $website->refresh();
            $status = $website->returnExchangeStatus;

            return view('return-exchange.partial.list-status', compact('status'));
        }

        return response()->json(['code' => 500, 'data' => [], 'message' => 'No data found']);
    }

    public function downloadRefundPdf(Request $request)
    {
        $return = \App\ReturnExchange::findOrFail($request->id);

        $customer = $return->customer;

        if ($customer) {
            $html_temp = view('maileclipse::templates.initializeRefundRequetDefault', compact(
                'customer', 'return'
            ));
            $pdf = new Dompdf();
            $pdf->loadHtml($html_temp);
            $pdf->render();
            $pdf->stream('refund.pdf');
        }
    }

    public function columnVisbilityUpdate(Request $request)
    {
        $userCheck = DataTableColumn::where('user_id', auth()->user()->id)->where('section_name', 'return-exchange')->first();

        if ($userCheck) {
            $column               = DataTableColumn::find($userCheck->id);
            $column->section_name = 'return-exchange';
            $column->column_name  = json_encode($request->column_returnexchange);
            $column->save();
        } else {
            $column               = new DataTableColumn();
            $column->section_name = 'return-exchange';
            $column->column_name  = json_encode($request->column_returnexchange);
            $column->user_id      = auth()->user()->id;
            $column->save();
        }

        return redirect()->back()->with('success', 'column visiblity Added Successfully!');
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/ReviewController.php 
Content: <?php

namespace App\Http\Controllers;

use Auth;
use App\User;
use App\Review;
use App\Account;
use App\Helpers;
use App\Scraper;
use App\Setting;
use App\Customer;
use App\Complaint;
use App\LogRequest;
use App\Instruction;
use App\StatusChange;
use App\ReviewSchedule;
use App\TargetLocation;
use App\ReviewBrandList;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;

class ReviewController extends Controller
{
    public function index(Request $request)
    {
        $serverIds = Scraper::groupBy('server_id')->where('server_id', '!=', null)->pluck('server_id');

        $filter_platform    = $request->platform ?? '';
        $filter_posted_date = $request->posted_date ?? '';
        $filter_brand       = $request->brand ?? '';
        $users_array        = Helpers::getUserArray(User::all());

        if ($request->platform != null) {
            $accounts         = Account::where('platform', $request->platform)->latest()->paginate(Setting::get('pagination'));
            $review_schedules = Review::with('review_schedule')->where('status', '!=', 'posted')->where('platform', $request->platform);
            $posted_reviews   = Review::with('review_schedule')->where('status', 'posted')->where('platform', $request->platform);

            $complaints = Complaint::where('platform', $request->platform);
        } else {
            $accounts = Account::latest()->paginate(Setting::get('pagination'));
        }

        if ($request->posted_date != null) {
            if ($request->platform != null) {
                $review_schedules = $review_schedules->where('posted_date', $request->posted_date);
                $posted_reviews   = $posted_reviews->where('posted_date', $request->posted_date);
                $complaints       = $complaints->where('date', $request->posted_date);
            } else {
                $review_schedules = Review::with('review_schedule')->where('status', '!=', 'posted')->where('posted_date', $request->posted_date);
                $posted_reviews   = Review::with('review_schedule')->where('status', 'posted')->where('posted_date', $request->posted_date);
                $complaints       = Complaint::where('date', $request->posted_date);
            }
        }

        if ($request->platform == null && $request->posted_date == null) {
            $review_schedules = Review::where('status', '!=', 'posted');
            $posted_reviews   = Review::with('review_schedule')->where('status', 'posted');
            $complaints       = (new Complaint)->newQuery();
        }

        $review_schedules = DB::table('brand_reviews')->orderBy('created_at', 'ASC');
        if ($filter_brand) {
            $review_schedules->where('brand', $filter_brand);
        }
        if ($filter_posted_date) {
            $review_schedules->whereDate('created_at', $filter_posted_date);
        }

        $review_schedules_count = $review_schedules->count();

        $review_schedules = $review_schedules->latest()->paginate(Setting::get('pagination'), ['*'], 'review-page');

        $posted_reviews = $posted_reviews->latest()->paginate(Setting::get('pagination'), ['*'], 'posted-page');
        $complaints     = $complaints->where('thread_type', 'thread')->latest()->paginate(Setting::get('pagination'), ['*'], 'complaints-page');

        $customers      = Customer::select(['id', 'name', 'email', 'instahandler', 'phone'])->get();
        $accounts_array = Account::select(['id', 'first_name', 'last_name', 'email'])->get();

        $instagram_dm_reviews = Review::where('platform', 'instagram_dm')->get();

        $countries  = TargetLocation::all();
        $brand_list = ReviewBrandList::all();

        return view('reviews.index', [
            'accounts'               => $accounts,
            'customers'              => $customers,
            'review_schedules'       => $review_schedules,
            'review_schedules_count' => $review_schedules_count,
            'posted_reviews'         => $posted_reviews,
            'complaints'             => $complaints,
            'filter_platform'        => $filter_platform,
            'filter_posted_date'     => $filter_posted_date,
            'filter_brand'           => $filter_brand,
            'users_array'            => $users_array,
            'accounts_array'         => $accounts_array,
            'instagram_dm_reviews'   => $instagram_dm_reviews,
            'brand_list'             => $brand_list,
            'countries'              => $countries,
            'serverIds'              => $serverIds,
        ]);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $this->validate($request, [
            'title'      => 'required',
            'review'     => 'required',
            'account_id' => 'required',
        ]);

        $review             = new Review();
        $review->account_id = $request->get('account_id');
        $review->review     = $request->get('review');
        $review->title      = $request->get('title');
        $review->save();

        return redirect()->back()->with('message', 'Review added successfully!');
    }

    public function accountStore(Request $request)
    {
        $this->validate($request, [
            'first_name'      => 'sometimes|nullable|string',
            'last_name'       => 'sometimes|nullable|string',
            'email'           => 'sometimes|nullable|email',
            'password'        => 'required|min:3',
            'dob'             => 'sometimes|nullable|date',
            'platform'        => 'required|string',
            'followers_count' => 'sometimes|nullable|numeric',
            'posts_count'     => 'sometimes|nullable|numeric',
            'dp_count'        => 'sometimes|nullable|numeric',
        ]);

        $data = $request->except('_token');

        $data['broadcast'] = ($request->get('broadcast') == 'on') ? 1 : 0;

        Account::create($data);

        return redirect()->route('review.index')->withSuccess('You have successfully added an account!');
    }

    public function scheduleStore(Request $request)
    {
        $this->validate($request, [
            'date'         => 'required|date',
            'platform'     => 'sometimes|nullable|string',
            'review_count' => 'sometimes|nullable|numeric',
            'status'       => 'required|string',
        ]);

        $data = $request->except(['_token', 'review']);

        $review_schedule = ReviewSchedule::create($data);

        foreach ($request->review as $review) {
            if ($review) {
                $new_review                     = new Review;
                $new_review->review_schedule_id = $review_schedule->id;
                $new_review->review             = $review;
                $new_review->posted_date        = $request->date;
                $new_review->platform           = $request->platform;
                $new_review->status             = $request->status;
                $new_review->save();
            }
        }

        Instruction::create([
            'customer_id'   => '841',
            'instruction'   => 'Approve Reviews',
            'assigned_from' => Auth::id(),
            'assigned_to'   => 6,
        ]);

        return redirect()->route('review.index')->withSuccess('You have successfully added a review schedule!');
    }

    /**
     * Display the specified resource.
     *
     * @param int $id
     *
     * @return array|\Illuminate\Contracts\View\Factory|\Illuminate\View\View
     */
    public function show($id)
    {
        $account = Account::findOrFail($id);

        return view('reviews.show', compact('account'));
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        $review = Review::findOrFail($id);

        return view('sitejabber.edit', compact('review'));
    }

    /**
     * Update the specified resource in storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        $review = Review::findOrFail($id);

        if (! $review) {
            return redirect()->action([\App\Http\Controllers\SitejabberQAController::class, 'accounts'])->with('message', 'Edit failed!');
        }

        $review->review = $request->get('review');
        $review->title  = $request->get('title');

        $review->save();

        return redirect()->action([\App\Http\Controllers\SitejabberQAController::class, 'accounts'])->with('message', 'Edit successful!!');

        $this->validate($request, [
            'review'        => 'required|string',
            'posted_date'   => 'sometimes|nullable|date',
            'review_link'   => 'sometimes|nullable|string',
            'serial_number' => 'sometimes|nullable|string',
            'platform'      => 'sometimes|nullable|string',
            'account_id'    => 'sometimes|nullable|numeric',
            'customer_id'   => 'sometimes|nullable|numeric',
        ]);

        $review = Review::find($id);

        $data = $request->except(['_token', '_method', 'account_id']);

        $review->update($data);

        return redirect()->action([\App\Http\Controllers\SitejabberQAController::class, 'accounts'])->with('message', 'Review has been posted successfully!');

        return redirect()->route('review.index')->withSuccess('You have successfully updated the review!');
    }

    public function updateStatus(Request $request, $id)
    {
        $review              = Review::find($id);
        $review->is_approved = 1;
        $review->save();

        if (! $request->isXmlHttpRequest()) {
            return redirect()->back()->with('message', 'The review has been approved!');
        }

        return response()->json(['status' => $request->is_approved]);
    }

    public function updateReview(Request $request, $id)
    {
        $review         = Review::find($id);
        $review->review = $request->review;
        $review->save();

        return response('success');
    }

    public function accountUpdate(Request $request, $id)
    {
        $this->validate($request, [
            'first_name'      => 'sometimes|nullable|string',
            'last_name'       => 'sometimes|nullable|string',
            'email'           => 'sometimes|nullable|email',
            'password'        => 'required|min:3',
            'dob'             => 'sometimes|nullable|date',
            'platform'        => 'required|string',
            'followers_count' => 'sometimes|nullable|numeric',
            'posts_count'     => 'sometimes|nullable|numeric',
            'dp_count'        => 'sometimes|nullable|numeric',
        ]);

        $data              = $request->except(['_token', '_method']);
        $data['broadcast'] = 0;

        if ($request->get('broadcast') == 1) {
            $data['broadcast'] = 1;
        }

        Account::find($id)->update($data);

        return redirect()->route('review.index')->withSuccess('You have successfully updated an account!');
    }

    public function scheduleUpdate(Request $request, $id)
    {
        $this->validate($request, [
            'account_id'   => 'sometimes|nullable|numeric',
            'customer_id'  => 'sometimes|nullable|numeric',
            'date'         => 'required|date',
            'posted_date'  => 'sometimes|nullable|date',
            'platform'     => 'sometimes|nullable|string',
            'review_count' => 'sometimes|nullable|numeric',
            'review_link'  => 'sometimes|nullable|string',
            'status'       => 'required|string',
        ]);

        $data = $request->except(['_token', '_method', 'review']);

        $review_schedule = ReviewSchedule::find($id);
        $review_schedule->update($data);

        foreach ($review_schedule->reviews as $review) {
            $review->delete();
        }

        foreach ($request->review as $review) {
            if ($review) {
                $new_review                     = new Review;
                $new_review->review_schedule_id = $review_schedule->id;
                $new_review->review             = $review;

                if ($review_schedule->status == 'posted') {
                    $new_review->status      = 'posted';
                    $new_review->is_approved = 1;
                }

                $new_review->save();
            }
        }

        return redirect()->route('review.index')->withSuccess('You have successfully added a review schedule!');
    }

    public function scheduleUpdateStatus(Request $request, $id)
    {
        $review = Review::find($id);

        StatusChange::create([
            'model_id'    => $review->id,
            'model_type'  => Review::class,
            'user_id'     => Auth::id(),
            'from_status' => $review->status,
            'to_status'   => $request->status,
        ]);

        $review->status = $request->status;
        $review->save();

        return response('success');
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        $review = Review::find($id);

        $review->forceDelete();

        return redirect()->bak()->with('message', 'You have successfully deleted a review!');
    }

    public function accountDestroy($id)
    {
        $account = Account::find($id);

        $account->delete();

        return redirect()->route('review.index')->withSuccess('You have successfully deleted an account!');
    }

    public function scheduleDestroy($id)
    {
        $review = Review::find($id);

        $review->delete();

        return redirect()->route('review.index')->withSuccess('You have successfully deleted a review!');
    }

    public function createFromInstagramHashtag(Request $request)
    {
        $this->validate($request, [
            'post'      => 'required',
            'comment'   => 'required',
            'poster'    => 'required',
            'commenter' => 'required',
            'media_id'  => 'required',
            'date'      => 'required',
            'code'      => 'required',
        ]);

        $review                   = new Complaint();
        $review->customer_id      = null;
        $review->platform         = 'instagram';
        $review->complaint        = '<strong>@' . $request->get('poster') . ' => ' . $request->get('post') . '</strong><li>@' . $request->get('commenter') . ' => ' . $request->get('comment') . '</li>';
        $review->link             = 'https://instagram.com/p/' . $request->get('code');
        $review->status           = 'pending';
        $review->plan_of_action   = 'instagram_reply';
        $review->where            = 'INSTAGRAM_HASHTAG';
        $review->username         = $request->get('poster');
        $review->name             = $request->get('poster');
        $review->thread_type      = 'thread';
        $review->date             = $request->get('date');
        $review->media_id         = $request->get('media_id');
        $review->receipt_username = $request->get('commenter');
        $review->save();

        return redirect()->back()->with('message', 'Comment sent for review');
    }

    public function restartScript(Request $request)
    {
        $serverId = $request->serverId;

        $url       = 'https://' . $serverId . '.theluxuryunlimited.com:' . config('env.NODE_SERVER_PORT') . '/restart-script?filename=reviewScraper/trustPilot.js';
        $startTime = date('Y-m-d H:i:s', LARAVEL_START);
        $curl      = curl_init();

        curl_setopt($curl, CURLOPT_URL, $url);
        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);

        $response = curl_exec($curl);

        $err      = curl_error($curl);
        $httpcode = curl_getinfo($curl, CURLINFO_HTTP_CODE);
        LogRequest::log($startTime, $url, 'POST', json_encode([]), json_decode($response), $httpcode, \App\Http\Controllers\ReviewController::class, 'getImageByCurl');

        curl_close($curl);

        if (! empty($err)) {
            return response()->json(['code' => 500, 'message' => 'Could not fetch response from server']);
        }

        $response = json_decode($response);

        if (isset($response->message)) {
            return response()->json(['code' => 200, 'message' => $response->message]);
        } else {
            return response()->json(['code' => 500, 'message' => 'Check if Server is running']);
        }
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/SERankingController.php 
Content: <?php

namespace App\Http\Controllers;

use DB;
use App\SERanking;

class SERankingController extends Controller
{
    private $apiKey;

    /**
     * Set the API Key for SERankingController Class
     */
    public function __construct()
    {
        $this->apiKey = '66122f8ad1adb1c075c75aba3bd503a4a559fc7f';
    }

    /**
     * Get Results
     *
     * @param mixed $url
     */
    public function getResults($url)
    {
        $context = stream_context_create([
            'http' => [
                'method'        => 'GET',
                'ignore_errors' => true,
                'header'        => [
                    "Authorization: Token $this->apiKey",
                    'Content-Type: application/json; charset=utf-8',
                ],
            ],
        ]);
        $httpStatus = null;
        $results    = file_get_contents('https://api4.seranking.com/' . $url, 0, $context);
        if (isset($http_response_header)) {
            preg_match('`HTTP/[0-9\.]+\s+([0-9]+)`', $http_response_header[0], $matches);
            $httpStatus = $matches[1];
        }
        if (! $results) {
            echo 'Request failed!';
        } else {
            $results = json_decode($results);
        }

        return $results;
    }

    /**
     * Get Sites
     */
    public function getSites()
    {
        // $site_id = 1083512;
        $sites = $this->getResults('sites');

        return View(
            'se-ranking.sites',
            compact('sites')
        );
    }

    /**
     * Get KeyWords
     */
    public function getKeyWords()
    {
        $site_id = 1083512;
        if (! empty($_GET['keyword'])) {
            $keyword  = $_GET['keyword'];
            $keywords = SERanking::where('name', 'like', '%' . $keyword . '%')->get();
        } else {
            $keywords = $this->getResults('sites/' . $site_id . '/keywords');
        }
        DB::table('s_e_rankings')->truncate();
        foreach ($keywords as $key => $new_item) {
            DB::table('s_e_rankings')->insert(
                [
                    'id'               => $new_item->id,
                    'name'             => $new_item->name,
                    'group_id'         => $new_item->group_id,
                    'link'             => $new_item->link,
                    'first_check_date' => $new_item->first_check_date,
                ]
            );
        }
        $keyword_stats = $this->getResults('sites/' . $site_id . '/positions');

        return View(
            'se-ranking.keywords',
            compact('keywords', 'keyword_stats')
        );
    }

    /**
     * Get Competitors
     *
     * @param mixed $id
     */
    public function getCompetitors($id = '')
    {
        $site_id           = 1083512;
        $keywords_pos_data = [];
        $competitors       = $this->getResults('competitors/site/' . $site_id);
        if (! empty($id)) {
            $keywords_pos_data = $this->getResults('competitors/' . $id . '/positions');

            return View(
                'se-ranking.comp-key-pos',
                compact('competitors', 'keywords_pos_data')
            );
        }

        return View(
            'se-ranking.competitors',
            compact('competitors', 'keywords_pos_data')
        );
    }

    /**
     * Get Analytics
     */
    public function getAnalytics()
    {
        $site_id   = 1083512;
        $analytics = $this->getResults('analytics/' . $site_id . '/potential');

        return View(
            'se-ranking.analytics',
            compact('analytics')
        );
    }

    /**
     * Get BackLinks
     */
    public function getBacklinks()
    {
        $site_id   = 1083512;
        $backlinks = $this->getResults('backlinks/' . $site_id . '/stat');

        return View(
            'se-ranking.backlinks',
            compact('backlinks')
        );
    }

    /**
     * Get Research Data
     */
    public function getResearchData()
    {
        $r_data = $this->getResults('research/overview?domain=sololuxury.co.in');

        return View(
            'se-ranking.research-data',
            compact('r_data')
        );
    }

    /**
     * Get Site Audit
     */
    public function getSiteAudit()
    {
        $site_id = 1083512;
        $audit   = $this->getResults('audit/' . $site_id . '/report');

        return View(
            'se-ranking.audit',
            compact('audit')
        );
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/SaleController.php 
Content: <?php

namespace App\Http\Controllers;

use App\Sale;
use App\User;
use App\Image;
use App\Product;
use App\Setting;
use Plank\Mediable\Media;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Spatie\Permission\Models\Role;
use Illuminate\Support\Facades\Auth;
use Plank\Mediable\Facades\MediaUploader as MediaUploader;

class SaleController extends Controller
{
    public function __construct()
    {
    }

    public function index()
    {
        $sales = Sale::latest()->paginate(Setting::get('pagination'));

        $users = $this->getUserArray(User::all());

        return view('sales-item.index', compact('sales', 'users'));
    }

    public function create()
    {
        $data = [];

        $data['date_of_request']         = '';
        $data['sale_persons']            = $this->getUserArray($this->getUsersByRoleName());
        $data['sales_person_name']       = '';
        $data['client_name']             = '';
        $data['client_phone']            = '';
        $data['instagram_handle']        = '';
        $data['description']             = '';
        $data['selected_product']        = '';
        $data['selected_products_array'] = [];
        $data['products_array']          = [];

        $data['allocated_to']   = '';
        $data['users']          = $this->getUserArray(User::all());
        $data['finished_at']    = '';
        $data['check_1']        = '';
        $data['check_2']        = '';
        $data['check_3']        = '';
        $data['sent_to_client'] = '';
        $data['remark']         = '';
        $data['modify']         = 0;
        $data['img_url']        = '';
        $data['img_id']         = '';

        return view('sales.form', $data);
    }

    public function show(Sale $sale)
    {
        $data                 = $sale->toArray();
        $data['sale_persons'] = $this->getUserArray($this->getUsersByRoleName());
        $data['users']        = $this->getUserArray(User::all());

        $data['selected_products_array'] = json_decode($sale->selected_product);
        $data['products_array']          = [];
        $data['sale']                    = $sale;

        if (! empty($data['selected_products_array'])) {
            foreach ($data['selected_products_array'] as $product_id) {
                $skuOrName                           = $this->getProductNameSkuById($product_id);
                $data['products_array'][$product_id] = $skuOrName;
            }
        }

        return view('sales.show', $data);
    }

    public function store(Request $request)
    {
        $sale = new Sale();

        $this->validate($request, [
            'sales_person_name' => 'required',
            'allocated_to'      => 'required',
            'description'       => 'required',
            'image'             => 'mimes:jpeg,bmp,png,jpg',
        ]);

        $data                     = $request->except('_token', 'image');
        $data['author_id']        = Auth::id();
        $data['date_of_request']  = date('Y-m-d');
        $data['created_at']       = date('Y-m-d H:i:s');
        $data['updated_at']       = date('Y-m-d H:i:s');
        $data['selected_product'] = json_encode($request->input('selected_product'));

        $sale->insert($data);

        $sale_id = DB::getPdo()->lastInsertId();

        if ($request->has('image')) {
            $sale_instance = $sale->find($sale_id);
            $media         = MediaUploader::fromSource($request->file('image'))
                ->toDirectory('sale/' . floor($sale_instance->id / config('constants.image_per_folder')))
                ->upload();
            $sale_instance->attachMedia($media, config('constants.media_tags'));
        }

        ActivityConroller::create($sale_id, 'sales', 'create');

        return redirect(route('sales-item.index'));
    }

    public function edit(Sale $sale)
    {
        $data                 = $sale->toArray();
        $data['sale_persons'] = $this->getUserArray($this->getUsersByRoleName());
        $data['users']        = $this->getUserArray(User::all());

        $data['selected_products_array'] = json_decode($sale->selected_product);
        $data['products_array']          = [];

        if (! empty($data['selected_products_array'])) {
            foreach ($data['selected_products_array'] as $product_id) {
                $skuOrName                           = $this->getProductNameSkuById($product_id);
                $data['products_array'][$product_id] = $skuOrName;
            }
        }

        $data['modify'] = 1;

        $image = $sale->getMedia(config('constants.media_tags'))->first();

        if (empty($image)) {
            // nothing
            $data['img_url'] = '';
            $data['img_id']  = '';
        } else {
            $data['img_url'] = getMediaUrl($image);
            $data['img_id']  = $image->id;
        }

        return view('sales.form', $data);
    }

    public function update(Sale $sale, Request $request)
    {
        $this->validate($request, [
            'sales_person_name' => 'required',
            'allocated_to'      => 'required',
            'description'       => 'required',
            'image'             => 'mimes:jpeg,bmp,png,jpg',
        ]);

        ActivityConroller::create($sale->id, 'sales', 'update');
        NotificaitonContoller::store('Sale Updated', '', '', $sale->id, $sale->author_id);

        $sale->sales_person_name = $request->input('sales_person_name');
        $sale->client_name       = $request->input('client_name');
        $sale->client_phone      = $request->input('client_phone');
        $sale->instagram_handle  = $request->input('instagram_handle');
        $sale->description       = $request->input('description');
        $sale->selected_product  = json_encode($request->input('selected_product'));
        $sale->allocated_to      = $request->input('allocated_to');
        $sale->finished_at       = $request->input('finished_at');
        $sale->check_1           = $request->input('check_1') ? $request->input('check_1') : 0;
        $sale->check_2           = $request->input('check_2') ? $request->input('check_2') : 0;
        $sale->check_3           = $request->input('check_3') ? $request->input('check_3') : 0;
        $sale->sent_to_client    = $request->input('sent_to_client');
        $sale->remark            = $request->input('remark');

        self::replaceImage($request, $sale);

        $sale->update();

        return redirect(route('sales-item.index'));
    }

    public function destroy(Sale $sale)
    {
        $sale->delete();

        return redirect()->route('sales-item.index')
            ->with('success', 'Sale deleted successfully');
    }

    public function selectionGrid(Sale $sale)
    {
        $products = Product::latest()->paginate(Setting::get('pagination'));
        $roletype = 'Sale';
        $sale_id  = $sale->id;

        $selected_products = json_decode($sale->selected_product, true) ?? [];

        return view('partials.grid', compact('products', 'roletype', 'sale_id', 'selected_products'));
    }

    public static function attachProduct($model_id, $product_id)
    {
        $sale = Sale::findOrFail($model_id);

        $selected_product = json_decode($sale->selected_product, true) ?? [];

        if (! in_array($product_id, $selected_product)) {
            array_push($selected_product, $product_id);
            $action = 'Attached';
        } else {
            if (($key = array_search($product_id, $selected_product)) !== false) {
                unset($selected_product[$key]);
                $action = 'Attach';
            }
        }

        $sale->selected_product = json_encode($selected_product);
        $sale->save();

        return $action;
    }

    public function getUsersByRoleName($roleName = 'Sales')
    {
        $roleID = Role::findByName($roleName);

        $users = DB::table('users as u')
            ->select('u.id', 'u.name')
            ->where('m.role_id', '=', $roleID->id)
            ->leftJoin('model_has_roles as m', 'm.model_id', '=', 'u.id')
            ->distinct()
            ->get();

        return $users;
    }

    public function getUserArray($users)
    {
        $userArray = [];

        foreach ($users as $user) {
            $userArray[((string) $user->id)] = $user->name;
        }

        return $userArray;
    }

    public function searchProduct(Request $request)
    {
        $q = $request->input('q');

        $results = Product::select('id', 'name', 'sku', 'brand')
            ->where('id', 'LIKE', '%' . $q . '%')
            ->orWhere('sku', 'LIKE', '%' . $q . '%')
            ->orWhere('name', 'LIKE', '%' . $q . '%')
            ->offset(0)
            ->limit(15)
            ->get();

        return $results;
    }

    public function getProductNameSkuById($product_id)
    {
        $product = new Product();

        $product_instance = $product->find($product_id);

        return $product_instance->name ? $product_instance->name : $product_instance->sku;
    }

    public function replaceImage($request, $sale)
    {
        if ($request->input('oldImage') != 0) {
            $results = Media::where('id', $request->input('oldImage'))->get();

            $results->each(function ($media) {
                Image::trashImage($media->basename);
                $media->delete();
            });

            if (! empty($request->file('image'))) {
                $media = MediaUploader::fromSource($request->file('image'))
                    ->toDirectory('sale/' . floor($sale->id / config('constants.image_per_folder')))
                    ->upload();
                $sale->attachMedia($media, config('constants.media_tags'));
            }
        }
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/ScrapController.php 
Content: <?php

namespace App\Http\Controllers;

use Storage;
use App\User;
use App\Brand;
use App\Image;
use Validator;
use App\Helpers;
use App\Product;
use App\Scraper;
use App\Setting;
use App\Supplier;
use Carbon\Carbon;
use App\LogRequest;
use App\ScrapApiLog;
use App\ScrapCounts;
use App\ScrapeQueues;
use App\StoreWebsite;
use App\ScraperResult;
use App\ScraperMapping;
use App\ScrapedProducts;
use App\Loggers\LogScraper;
use App\ScrapRequestHistory;
use Illuminate\Http\Request;
use App\Helpers\StatusHelper;
use App\Helpers\ProductHelper;
use App\Imports\ProductsImport;
use App\Loggers\ScrapPythonLog;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use App\Models\ScrapedProductsLinks;
use Maatwebsite\Excel\Facades\Excel;
use App\Services\Scrap\PinterestScraper;
use PhpOffice\PhpSpreadsheet\Reader\Xls;
use PhpOffice\PhpSpreadsheet\Reader\Xlsx;
use App\Services\Products\ProductsCreator;
use App\Services\Scrap\GoogleImageScraper;
use App\Models\ScrapedProductsLinksHistory;
use App\Services\Products\GnbProductsCreator;
use Illuminate\Pagination\LengthAwarePaginator;
use Plank\Mediable\Facades\MediaUploader as MediaUploader;

class ScrapController extends Controller
{
    public function __construct(private GoogleImageScraper $googleImageScraper, private PinterestScraper $pinterestScraper, private GnbProductsCreator $gnbCreator)
    {
    }

    public function index()
    {
        return view('scrap.index');
    }

    public function scrapGoogleImages(Request $request)
    {
        $this->validate($request, [
            'query' => 'required',
            'noi'   => 'required',
        ]);

        $q    = $request->get('query');
        $noi  = $request->get('noi');
        $chip = $request->get('chip');

        $pinterestData = [];
        $googleData    = [];

        if ($request->get('pinterest') === 'on') {
            $pinterestData = $this->pinterestScraper->scrapPinterestImages($q, $chip, $noi);
            if (! is_array($pinterestData)) {
                // Pinterest data is also coming from google
                return redirect()->back()->with('error', 'HTML element is changed in Google.');
            }
        }

        if ($request->get('google') === 'on') {
            $googleData = $this->googleImageScraper->scrapGoogleImages($q, $chip, $noi);
            if (! is_array($googleData)) {
                return redirect()->back()->with('error', 'HTML element is changed in Google.');
            }
        }

        return view('scrap.extracted_images', compact('googleData', 'pinterestData'));
    }

    public function activity()
    {
        $date = Carbon::now()->subDays(7)->format('Y-m-d');

        $links_count = DB::select('
									SELECT site_name, created_at, COUNT(*) as total FROM
								 		(SELECT scrap_entries.site_name, DATE_FORMAT(scrap_entries.created_at, "%Y-%m-%d") as created_at
								  		 FROM scrap_entries
								  		 WHERE scrap_entries.created_at > ?)
								    AS SUBQUERY
								   	GROUP BY created_at, site_name;
							', [$date]);

        $scraped_count = DB::select('
									SELECT website, created_at, COUNT(*) as total FROM
								 		(SELECT scraped_products.website, DATE_FORMAT(scraped_products.created_at, "%Y-%m-%d") as created_at
								  		 FROM scraped_products
								  		 WHERE scraped_products.created_at > ?)
								    AS SUBQUERY
								   	GROUP BY created_at, website;
							', [$date]);

        $products_count = DB::select('
									SELECT website, created_at, COUNT(*) as total FROM
								 		(SELECT scraped_products.website, scraped_products.sku, DATE_FORMAT(scraped_products.created_at, "%Y-%m-%d") as created_at
								  		 FROM scraped_products

                       RIGHT JOIN (
                         SELECT products.sku FROM products
                       ) AS products
                       ON scraped_products.sku = products.sku

								  		 WHERE scraped_products.created_at > ?
                       )

								    AS SUBQUERY
								   	GROUP BY created_at, website;
							', [$date]);

        $activity_data = DB::select('
									SELECT website, status, created_at, COUNT(*) as total FROM
								 		(SELECT scrap_activities.website, scrap_activities.status, DATE_FORMAT(scrap_activities.created_at, "%Y-%m-%d") as created_at
								  		 FROM scrap_activities
								  		 WHERE scrap_activities.created_at > ?)
								    AS SUBQUERY
								   	GROUP BY created_at, website, status;
							', [$date]);

        $data = [];

        $link_entries = ScrapCounts::where('created_at', '>', $date)->orderBy('created_at', 'DESC')->get();

        foreach ($links_count as $item) {
            if ($item->site_name == 'GNB') {
                $item->site_name = 'G&B';
            }

            $data[$item->created_at][$item->site_name]['links'] = $item->total;
        }

        foreach ($scraped_count as $item) {
            $data[$item->created_at][$item->website]['scraped'] = $item->total;
        }

        foreach ($products_count as $item) {
            $data[$item->created_at][$item->website]['created'] = $item->total;
        }

        foreach ($activity_data as $item) {
            $data[$item->created_at][$item->website][$item->status] = $item->total;
        }

        ksort($data);
        $data = array_reverse($data);

        $currentPage  = LengthAwarePaginator::resolveCurrentPage();
        $perPage      = 24;
        $currentItems = array_slice($data, $perPage * ($currentPage - 1), $perPage);

        $data = new LengthAwarePaginator($currentItems, count($data), $perPage, $currentPage, [
            'path' => LengthAwarePaginator::resolveCurrentPath(),
        ]);

        return view('scrap.activity', [
            'data'         => $data,
            'link_entries' => $link_entries,
        ]);
    }

    public function downloadImages(Request $request)
    {
        $this->validate($request, [
            'data' => 'required|array',
        ]);
        $data       = $request->get('data');
        $product_id = $request->get('product_id');

        $images = [];

        foreach ($data as $key => $datum) {
            try {
                $imgData = file_get_contents($datum);

                $fileName = md5(time() . microtime()) . '.png';
                Storage::disk('s3')->put('social-media/' . $fileName, $imgData);
                $i           = new Image();
                $i->filename = $fileName;
                if (! empty($product_id)) {
                    $i->product_id = $product_id;
                }
                $i->save();

                $images[] = $fileName;

                $StoreWebsite = StoreWebsite::where('id', 18)->first();
                if ($StoreWebsite) {
                    $media = MediaUploader::fromSource($datum)->toDirectory('product-template-images')->upload();
                    $StoreWebsite->attachMedia($media, ['website-image-attach']);
                }
            } catch (Exception $exception) {
                \Log::error('Image save :: ' . $exception->getMessage());
                dd($exception->getMessage());

                continue;
            }
        }

        $downloaded = true;

        return view('scrap.extracted_images', compact('images', 'downloaded'));
    }

    /**
     * @SWG\Post(
     *   path="/scrap-products/add",
     *   tags={"Scrape​r"},
     *   summary="Add Product from scraper to erp",
     *   operationId="scrape​r-post-product",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *   @SWG\Response(response=406, description="not acceptable"),
     *   @SWG\Response(response=500, description="internal server error"),
     *
     *      @SWG\Parameter(
     *          name="sku",
     *          in="formData",
     *          required=true,
     *          type="string"
     *      ),
     *      @SWG\Parameter(
     *          name="url",
     *          in="formData",
     *          required=true,
     *          type="string"
     *      ),
     *      @SWG\Parameter(
     *          name="images",
     *          in="formData",
     *          required=true,
     *          type="array",
     *
     *           @SWG\Items(
     *              type="string",
     *           ),
     *      ),
     *
     *      @SWG\Parameter(
     *          name="properties",
     *          in="formData",
     *          required=true,
     *          type="array",
     *
     *          @SWG\Items(
     *             type="string",
     *           ),
     *      ),
     *
     *      @SWG\Parameter(
     *          name="website",
     *          in="formData",
     *          required=true,
     *          type="string"
     *      ),
     *      @SWG\Parameter(
     *          name="price",
     *          in="formData",
     *          required=true,
     *          type="string"
     *      ),
     *      @SWG\Parameter(
     *          name="brand",
     *          in="formData",
     *          required=true,
     *          type="string"
     *      ),
     * )
     */
    public function syncProductsFromNodeApp(Request $request)
    {
        // Update request data with common mistakes
        $request = ProductHelper::fixCommonMistakesInRequest($request);

        // Log before validating
        $errorLog = LogScraper::LogScrapeValidationUsingRequest($request);

        // Return error
        if (! empty($errorLog['error'])) {
            return response()->json([
                'error' => $errorLog['error'],
            ]);
        }

        // Validate input
        $validator = Validator::make($request->all(), [
            'sku'        => 'required',
            'url'        => 'required',
            'images'     => 'required|array',
            'properties' => 'required',
            'website'    => 'required',
            'price'      => 'required',
            'brand'      => 'required',
        ]);

        if ($validator->fails()) {
            return response()->json(['code' => 500, 'error' => $validator->errors()]);
        }

        // Get SKU
        $sku = ProductHelper::getSku($request->get('sku'));

        // Get brand
        $brand = Brand::where('name', $request->get('brand'))->first();

        // No brand found?
        if (! $brand) {
            // Check for reference
            $brand = Brand::where('references', 'LIKE', '%' . $request->get('brand') . '%')->first();

            if (! $brand) {
                // if brand is not then create a brand
                $brand = Brand::create([
                    'name' => $request->get('brand'),
                ]);
            }
        }

        // fix property array
        $requestedProperties = $request->get('properties');
        if (! empty($requestedProperties)) {
            foreach ($requestedProperties as $key => &$value) {
                if ($key == 'category') {
                    $requestedProperties[$key] = ! is_array($value) ? [$value] : $value;
                }
            }
        }
        $request->request->add(['properties' => $requestedProperties]);

        $categoryForScrapedProducts    = '';
        $colorForScrapedProducts       = '';
        $compositionForScrapedProducts = '';

        // remove categories if it is matching with sku
        $propertiesExt = $request->get('properties');
        if (isset($propertiesExt['category'])) {
            if (is_array($propertiesExt['category'])) {
                $categories = array_map('strtolower', $propertiesExt['category']);
                $strsku     = strtolower($sku);

                if (in_array($strsku, $categories)) {
                    $index = array_search($strsku, $categories);
                    unset($categories[$index]);
                }
                //category for scrapper
                if (is_array($categories)) {
                    $categoryForScrapedProducts = implode(',', $categories);
                } else {
                    $categoryForScrapedProducts = $categories;
                }

                $propertiesExt['category'] = $categories;
            } else {
                $propertiesExt['category'] = '';
            }
        }

        //color for scraperProducts for
        if (isset($propertiesExt['color'])) {
            if (is_array($propertiesExt['color'])) {
                $colorForScrapedProducts = implode(',', $propertiesExt['color']);
            } else {
                $colorForScrapedProducts = $propertiesExt['color'];
            }
        }

        //compostion for scraped Products
        if (isset($propertiesExt['material_used'])) {
            if (is_array($propertiesExt['material_used'])) {
                $compositionForScrapedProducts = implode(',', $propertiesExt['material_used']);
            } else {
                $compositionForScrapedProducts = $propertiesExt['material_used'];
            }
        }

        // Get this product from scraped products
        $scrapedProduct = ScrapedProducts::where('sku', $sku)->where('website', $request->get('website'))->first();
        $images         = $request->get('images') ?? [];
        $scPrice        = (float) $request->get('price');

        try {
            if (strlen($scPrice) > 4 && strlen($scPrice) < 6) {
                $scPrice = substr($scPrice, 0, 3);
                $scPrice = $scPrice . '.00';
            } elseif (strlen($scPrice) > 5 && strlen($scPrice) < 7) {
                $scPrice = substr($scPrice, 0, 4);
                $scPrice = $scPrice . '.00';
            }
        } catch (Exception $e) {
            \Log::info('Having problem with this price' . $scPrice . ' and get message is ' . $e->getMessage());
        }

        if (is_numeric($scPrice)) {
            $scPrice = ceil($scPrice / 10) * 10;
        }

        if ($scrapedProduct) {
            // Set values for existing scraped product
            $scrapedProduct->images      = $images;
            $scrapedProduct->url         = $request->get('url');
            $scrapedProduct->properties  = $propertiesExt;
            $scrapedProduct->is_sale     = $request->get('is_sale') ?? 0;
            $scrapedProduct->title       = ProductHelper::getRedactedText($request->get('title'), 'name');
            $scrapedProduct->description = ProductHelper::getRedactedText($request->get('description'), 'short_description');
            $scrapedProduct->brand_id    = $brand->id;
            $scrapedProduct->currency    = $request->get('currency');
            $scrapedProduct->price       = (float) $scPrice;
            if ($request->get('currency') == 'EUR') {
                $scrapedProduct->price_eur = (float) $scPrice;
            }
            $scrapedProduct->discounted_price      = $request->get('discounted_price');
            $scrapedProduct->discounted_percentage = (float) $request->get('discounted_percentage', 0.00);
            $scrapedProduct->original_sku          = trim($request->get('sku'));
            $scrapedProduct->last_inventory_at     = Carbon::now()->toDateTimeString();
            $scrapedProduct->validated             = empty($errorLog['error']) ? 1 : 0;
            $scrapedProduct->validation_result     = $errorLog['error'] . $errorLog['warning'];
            $scrapedProduct->category              = isset($request->properties['category']) ? serialize($request->properties['category']) : null;
            $scrapedProduct->categories            = $categoryForScrapedProducts;
            $scrapedProduct->color                 = $colorForScrapedProducts;
            $scrapedProduct->composition           = $compositionForScrapedProducts;
            $scrapedProduct->material_used         = $compositionForScrapedProducts;
            $scrapedProduct->supplier_id           = isset($requestedProperties['supplier']) ? $requestedProperties['supplier'] : null;
            $scrapedProduct->country               = isset($requestedProperties['country']) ? $requestedProperties['country'] : null;
            $scrapedProduct->size                  = (isset($requestedProperties['sizes']) && is_array($requestedProperties['sizes'])) ? implode(',', $requestedProperties['sizes']) : null;
            if ($request->get('size_system') != '') {
                $scrapedProduct->size_system = $request->get('size_system');
            }
            $scrapedProduct->save();
            $scrapedProduct->touch();
        } else {
            // Create new scraped product
            $scrapedProduct = new ScrapedProducts();

            $scrapedProduct->images                = $images;
            $scrapedProduct->sku                   = $sku;
            $scrapedProduct->original_sku          = trim($request->get('sku'));
            $scrapedProduct->discounted_price      = $request->get('discounted_price');
            $scrapedProduct->is_sale               = $request->get('is_sale') ?? 0;
            $scrapedProduct->has_sku               = 1;
            $scrapedProduct->url                   = $request->get('url');
            $scrapedProduct->title                 = ProductHelper::getRedactedText($request->get('title') ?? 'N/A', 'name');
            $scrapedProduct->description           = ProductHelper::getRedactedText($request->get('description'), 'short_description');
            $scrapedProduct->properties            = $propertiesExt;
            $scrapedProduct->currency              = ProductHelper::getCurrency($request->get('currency'));
            $scrapedProduct->price                 = (float) $scPrice;
            $scrapedProduct->discounted_percentage = (float) $request->get('discounted_percentage', 0.00);
            if ($request->get('currency') == 'EUR') {
                $scrapedProduct->price_eur = (float) $scPrice;
            }
            $scrapedProduct->last_inventory_at = Carbon::now()->toDateTimeString();
            $scrapedProduct->website           = $request->get('website');
            $scrapedProduct->brand_id          = $brand->id;
            $scrapedProduct->category          = isset($request->properties['category']) ? serialize($request->properties['category']) : null;
            $scrapedProduct->validated         = empty($errorLog) ? 1 : 0;
            $scrapedProduct->validation_result = $errorLog['error'] . $errorLog['warning'];
            //adding new fields
            $scrapedProduct->categories    = $categoryForScrapedProducts;
            $scrapedProduct->color         = $colorForScrapedProducts;
            $scrapedProduct->composition   = $compositionForScrapedProducts;
            $scrapedProduct->material_used = $compositionForScrapedProducts;
            $scrapedProduct->supplier_id   = isset($requestedProperties['supplier']) ? $requestedProperties['supplier'] : null;
            $scrapedProduct->country       = isset($requestedProperties['country']) ? $requestedProperties['country'] : null;
            $scrapedProduct->size          = (isset($requestedProperties['sizes']) && is_array($requestedProperties['sizes'])) ? implode(',', $requestedProperties['sizes']) : null;
            if ($request->get('size_system') != '') {
                $scrapedProduct->size_system = $request->get('size_system');
            }
            $scrapedProduct->save();
        }

        $scrap_details = Scraper::where(['scraper_name' => $request->get('website')])->first();
        $this->saveScrapperRequest($scrap_details, $errorLog);

        // Create or update product
        $scrapedProductUpdate = ScrapedProducts::where('sku', $sku)
            ->whereNotNull('description') // Filter out rows where description is null
            ->orderBy('sort_order') // Order by sort_order
            ->first();
        app(ProductsCreator::class)->createProduct($scrapedProductUpdate);

        // Return response
        return response()->json([
            'status' => 'Added items successfully!',
        ]);
    }

    public function storeUnknownSizes(Request $request)
    {
        $statusId = \App\Helpers\StatusHelper::$unknownSize;
        $products = Product::where('status_id', $statusId)->select('id', 'size', 'supplier_id')->get();
        foreach ($products as $product) {
            $size_system  = ScrapedProducts::where('product_id', $product->id)->pluck('size_system')->first();
            $systemSizeId = \App\SystemSize::where('name', $size_system)->pluck('id')->first();
            $sizes        = explode(',', $product['size']);
            foreach ($sizes as $size) {
                $erp_sizeFound = \App\SizeAndErpSize::where(['size' => $size])->first();
                if ($erp_sizeFound == null) {
                    \App\SizeAndErpSize::updateOrCreate(['size' => $size, 'system_size_id' => $systemSizeId], ['size' => $size, 'system_size_id' => $systemSizeId]);
                } elseif ($erp_sizeFound['erp_size_id'] != null) {
                    $erp_size = SystemSizeManager::where('id', $erp_sizeFound['erp_size_id'])->pluck('erp_size')->first();

                    \App\ProductSizes::updateOrCreate([
                        'product_id' => $product->id, 'supplier_id' => $product->supplier_id, 'size' => $erp_size,
                    ], [
                        'product_id' => $product->id, 'quantity' => 1, 'supplier_id' => $product->supplier_id, 'size' => $erp_size,
                    ]);
                }
            }
        }

        return redirect(url('/'));
    }

    public function saveScrapperRequest($scrap_details, $errorLog)
    {
        try {
            //check if scraper of same id have records with same day , then only update the end time
            $check_history = ScrapRequestHistory::where(['scraper_id' => $scrap_details->id, 'start_date' => Carbon::now()])->firstOrFail();
            //update the request data
            ScrapRequestHistory::where(['scraper_id' => $scrap_details->id])->update([
                'end_time'       => Carbon::now(),
                'request_sent'   => empty($errorLog) ? intval($check_history->request_sent + 1) : intval($check_history->request_sent),
                'request_failed' => empty($errorLog) ? intval($check_history->request_failed) : intval($check_history->request_failed + 1),
            ]);
        } catch (Exception $e) {
            if ($scrap_details) {
                ScrapRequestHistory::create([
                    'scraper_id'     => $scrap_details->id,
                    'date'           => Carbon::now(),
                    'start_time'     => Carbon::now(),
                    'end_time'       => Carbon::now(),
                    'request_sent'   => empty($errorLog) ? 1 : 0,
                    'request_failed' => empty($errorLog) ? 0 : 1,
                ]);
            }
        }

        return true;
    }

    public function excel_import()
    {
        $products = ScrapedProducts::where('website', 'EXCEL_IMPORT_TYPE_1')->paginate(25);

        return view('scrap.excel', compact('products'));
    }

    public function excel_store(Request $request)
    {
        $this->validate($request, [
            'file' => 'required|file',
        ]);

        $file = $request->file('file');

        if ($file->getClientOriginalExtension() == 'xlsx') {
            $reader = new Xlsx();
        } else {
            if ($file->getClientOriginalExtension() == 'xls') {
                $reader = new Xls();
            }
        }

        $spreadsheet = $reader->load($file->getPathname());
        $cells       = [];

        $i = 0;
        foreach ($spreadsheet->getActiveSheet()->getDrawingCollection() as $drawing) {
            if ($drawing instanceof \PhpOffice\PhpSpreadsheet\Worksheet\MemoryDrawing) {
                ob_start();
                call_user_func(
                    $drawing->getRenderingFunction(),
                    $drawing->getImageResource()
                );
                $imageContents = ob_get_contents();
                ob_end_clean();
                switch ($drawing->getMimeType()) {
                    case \PhpOffice\PhpSpreadsheet\Worksheet\MemoryDrawing::MIMETYPE_PNG:
                        $extension = 'png';
                        break;
                    case \PhpOffice\PhpSpreadsheet\Worksheet\MemoryDrawing::MIMETYPE_GIF:
                        $extension = 'gif';
                        break;
                    case \PhpOffice\PhpSpreadsheet\Worksheet\MemoryDrawing::MIMETYPE_JPEG:
                        $extension = 'jpg';
                        break;
                }
            } else {
                $zipReader     = fopen($drawing->getPath(), 'r');
                $imageContents = '';
                while (! feof($zipReader)) {
                    $imageContents .= fread($zipReader, 1024);
                }
                fclose($zipReader);
                $extension = $drawing->getExtension();
            }

            $myFileName = '00_Image_' . ++$i . '.' . $extension;
            file_put_contents('uploads/social-media/' . $myFileName, $imageContents);
            $cells[substr($drawing->getCoordinates(), 2)][] = $myFileName;
        }

        $cells_new = [];
        $c         = 0;
        foreach ($cells as $cell) {
            $cells_new[$c] = $cell;
            $c++;
        }

        $files = Excel::toArray(new ProductsImport(), $file);
        $th    = [];

        foreach ($files[0] as $key => $file) {
            if (
                in_array('MODELLO', $file)
                + in_array('VARIANTE', $file)
                + in_array('COLORE', $file)
                + in_array('GRUPPO', $file)
                + in_array('SETTORE', $file)
                + in_array('DESCRIZIONE', $file)
                + in_array('BRAND', $file)
                + in_array('PR. ACQUISTO', $file)
                + in_array('TESSUTO', $file)
                + in_array('PR. VENDITA', $file)
                + in_array('COD. FOTO', $file)
                >= 4) {
                $th = $file;
                unset($files[0][$key]);
                break;
            }
            unset($files[0][$key]);
        }

        $fields_only_with_keys = [];

        foreach ($th as $key => $file) {
            if ($file) {
                $fields_only_with_keys[$key] = $file;
            }
        }

        $dataToSave = [];

        foreach ($files[0] as $pkey => $row) {
            $null_count = 0;
            foreach ($row as $item) {
                if ($item === null) {
                    $null_count++;
                }
            }
            if ($null_count > 30) {
                unset($files[0][$pkey]);
            }
        }

        $c = 0;
        foreach ($files[0] as $pkey => $row) {
            foreach ($fields_only_with_keys as $key => $item) {
                $dataToSave[$pkey][$item] = $row[$key];
                if ($item == 'COD. FOTO') {
                    $dataToSave[$pkey][$item] = $cells_new[$c];
                }
            }
            $c++;
        }

        foreach ($dataToSave as $item) {
            $sku = $item['MODELLO VARIANTE COLORE'] ?? null;
            if (! $sku) {
                continue;
            }

            $brand = Brand::where('name', $item['BRAND'] ?? 'UNKNOWN_BRAND_FROM_FILE')->first();

            if (! $brand) {
                continue;
            }

            $sp                      = new ScrapedProducts();
            $sp->website             = 'EXCEL_IMPORT_TYPE_1';
            $sp->sku                 = $sku;
            $sp->has_sku             = 1;
            $sp->brand_id            = $brand->id;
            $sp->title               = $sku;
            $sp->description         = $item['description'] ?? null;
            $sp->images              = $item['COD. FOTO'] ?? [];
            $sp->price               = 'N/A';
            $sp->properties          = $item;
            $sp->url                 = 'N/A';
            $sp->is_property_updated = 0;
            $sp->is_price_updated    = 0;
            $sp->is_enriched         = 0;
            $sp->can_be_deleted      = 0;
            $sp->save();
        }

        return redirect()->back()->with('message', 'Excel Imported Successfully!');
    }

    /**
     * @SWG\Post(
     *   path="/save-supplier",
     *   tags={"Scraper"},
     *   summary="Create supplier",
     *   operationId="scraper-product-save-supplier",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *   @SWG\Response(response=406, description="not acceptable"),
     *   @SWG\Response(response=500, description="internal server error"),
     *
     *      @SWG\Parameter(
     *          name="supplier",
     *          in="formData",
     *          required=true,
     *          type="string"
     *      ),
     *      @SWG\Parameter(
     *          name="phone",
     *          in="formData",
     *          required=true,
     *          type="string"
     *      ),
     *      @SWG\Parameter(
     *          name="address",
     *          in="formData",
     *          required=true,
     *          type="string"
     *      ),
     *      @SWG\Parameter(
     *          name="website",
     *          in="formData",
     *          required=true,
     *          type="string"
     *      ),
     *      @SWG\Parameter(
     *          name="email",
     *          in="formData",
     *          required=true,
     *          type="string"
     *      ),
     *      @SWG\Parameter(
     *          name="social_handle",
     *          in="formData",
     *          required=true,
     *          type="string"
     *      ),
     *      @SWG\Parameter(
     *          name="instagram_handle",
     *          in="formData",
     *          required=true,
     *          type="string"
     *      )
     * )
     */
    public function saveSupplier(Request $request)
    {
        $this->validate($request, [
            'supplier' => 'required',
        ]);

        $s = Supplier::where('supplier', $request->get('supplier'))->first();

        if ($s) {
            $s->email = $request->get('email');
            $s->save();

            return response()->json([
                'message' => 'Added successfully!',
            ]);
        }

        $params = [
            'supplier'         => ucwords($request->get('supplier')),
            'phone'            => str_replace('+', '', $request->get('phone')),
            'address'          => $request->get('address'),
            'website'          => $request->get('website'),
            'email'            => $request->get('email'),
            'social_handle'    => $request->get('social_handle'),
            'instagram_handle' => $request->get('instagram_handle'),
        ];

        Supplier::create($params);

        return response()->json([
            'message' => 'Added successfully!',
        ]);
    }

    /**
     * @SWG\Post(
     *   path="/products/new-supplier",
     *   tags={"Scraper"},
     *   summary="Update/Add product from external scraper",
     *   operationId="scraper-add-procuct-supplier",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *   @SWG\Response(response=406, description="not acceptable"),
     *   @SWG\Response(response=500, description="internal server error"),
     * )
     */
    /**
     * Save incoming data from scraper
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function saveFromNewSupplier(Request $request)
    {
        $receivedJson = json_decode($request->getContent());
        if (! isset($receivedJson)) {
            return response()->json([
                'status' => 'Json format not valid',
            ], 400);
        }

        if ($receivedJson->id == '') {
            return response()->json([
                'status' => 'Product id empty',
            ], 400);
        }

        if ($receivedJson->brand == '') {
            return response()->json([
                'status' => 'Brand name is empty',
            ], 400);
        }
        // Find product
        $product = Product::find($receivedJson->id);

        if ($product) {
            // sets initial status pending for Finished external Scraper
            $pending_finished_external_scraper = [
                'product_id'     => $product->id,
                'old_status'     => $product->status_id,
                'new_status'     => StatusHelper::$externalScraperFinished,
                'pending_status' => 1,
                'created_at'     => date('Y-m-d H:i:s'),
            ];
            \App\ProductStatusHistory::addStatusToProduct($pending_finished_external_scraper);
        }
        // Get brand
        $brand = Brand::where('name', $receivedJson->brand)->first();
        // No brand found?
        if (! $brand) {
            // Check for reference
            $brand = Brand::where('references', 'LIKE', '%' . $receivedJson->brand . '%')->first();

            if (! $brand) {
                // if brand is not then create a brand
                $brand = Brand::create([
                    'name' => $receivedJson->brand,
                ]);
            }
        }
        //add log in scraped product
        $website        = isset($receivedJson->website) ? $receivedJson->website : '';
        $scrapedProduct = null;
        if (! empty($website)) {
            $scrapedProduct = ScrapedProducts::where('website', $website)
                ->where('sku', ! empty($receivedJson->sku) ? $receivedJson->sku : $product->sku)
                ->first();

            if ($scrapedProduct == null || $scrapedProduct == '') {
                $scrapedProduct          = new ScrapedProducts();
                $scrapedProduct->sku     = ! empty($receivedJson->sku) ? $receivedJson->sku : $product->sku;
                $scrapedProduct->website = $website;
            }

            $scrapedProduct->has_sku       = 1;
            $scrapedProduct->supplier      = isset($receivedJson->supplier) ? $receivedJson->supplier : '';
            $scrapedProduct->title         = isset($receivedJson->title) ? $receivedJson->title : '';
            $scrapedProduct->composition   = isset($receivedJson->composition) ? $receivedJson->composition : '';
            $scrapedProduct->color         = isset($receivedJson->color) ? $receivedJson->color : '';
            $scrapedProduct->brand_id      = $brand->id;
            $scrapedProduct->description   = $brand->description;
            $scrapedProduct->material_used = isset($receivedJson->composition) ? $receivedJson->composition : '';
            $scrapedProduct->country       = isset($receivedJson->country) ? $receivedJson->country : '';
            $scrapedProduct->size          = isset($receivedJson->sizes) ? implode(',', $receivedJson->sizes) : '';
            $scrapedProduct->url           = isset($receivedJson->url) ? $receivedJson->url : '';
            $scrapedProduct->images        = isset($receivedJson->images) ? serialize($receivedJson->images) : '';
            $scrapedProduct->size_system   = isset($receivedJson->size_system) ? $receivedJson->size_system : '';
            $scrapedProduct->currency      = isset($receivedJson->currency) ? $receivedJson->currency : '';
            $scrapedProduct->price         = isset($receivedJson->price) ? ($receivedJson->price) : '';

            $scrapedProduct->is_property_updated = 0;
            $scrapedProduct->is_external_scraper = 1;
            $scrapedProduct->is_price_updated    = 0;
            $scrapedProduct->is_enriched         = 0;
            $scrapedProduct->can_be_deleted      = 0;
            $scrapedProduct->validated           = 1;
            $scrapedProduct->save();
        }

        // Return false if no product is found
        if ($product == null) {
            // $scrapedProduct->validated = 1;
            if ($scrapedProduct) {
                $scrapedProduct->validated         = 0;
                $scrapedProduct->validation_result = 'Error processing your request (#1)';
                $scrapedProduct->save();
            }

            return response()->json([
                'status' => 'Error processing your request (#1)',
            ], 400);
        }

        if (isset($receivedJson->status)) {
            // Search For ScraperQueue
            ScrapeQueues::where('done', 0)->where('product_id', $product->id)->update(['done' => 2]);
            $product->status_id = StatusHelper::$unableToScrape;
            $product->save();

            if ($scrapedProduct) {
                $scrapedProduct->validated         = 0;
                $scrapedProduct->validation_result = 'Product processed for unable to scrap';
                $scrapedProduct->save();
            }

            return response()->json([
                'status' => 'Product processed for unable to scrap',
            ]);
        }

        $input = get_object_vars($receivedJson);

        // Validate request
        $validator = Validator::make($input, [
            'id'          => 'required',
            'images'      => 'required|array',
            'description' => 'required',
        ]);

        // Return an error if the validator fails
        if ($validator->fails()) {
            if ($scrapedProduct) {
                $scrapedProduct->validation_result = json_encode($validator->messages());
                $scrapedProduct->save();
            }

            return response()->json($validator->messages(), 400);
        }

        // If product is found, update it
        if ($product) {
            // clear the request using for the new scraper
            $propertiesArray = [
                'material_used' => isset($receivedJson->properties->material_used) ? $receivedJson->properties->material_used : $receivedJson->composition,
                'color'         => isset($receivedJson->properties->color) ? $receivedJson->properties->color : $receivedJson->color,
                'sizes'         => isset($receivedJson->properties->sizes) ? $receivedJson->properties->sizes : $receivedJson->sizes,
                'category'      => isset($receivedJson->properties->category) ? $receivedJson->properties->category : $receivedJson->category,
                'dimension'     => isset($receivedJson->properties->dimension) ? $receivedJson->properties->dimension : $receivedJson->dimensions,
                'country'       => isset($receivedJson->properties->country) ? $receivedJson->properties->country : $receivedJson->country,
            ];

            $formatter = (new \App\Services\Products\ProductsCreator)->getGeneralDetails($propertiesArray);

            $color       = \App\ColorNamesReference::getColorRequest($formatter['color'], $receivedJson->url, $receivedJson->title, $receivedJson->description);
            $composition = $formatter['composition'];
            if (! empty($formatter['composition'])) {
                $composition = \App\Compositions::getErpName($formatter['composition']);
            }

            $description = $receivedJson->description;
            if (! empty($receivedJson->description)) {
                $description = \App\DescriptionChange::getErpName($receivedJson->description);
            }

            // Set basic data
            if (empty($product->name)) {
                $product->name = $receivedJson->title;
            }

            if (empty($product->short_description)) {
                $product->short_description = $description;
            }

            if (empty($product->composition)) {
                $product->composition = $composition;
            }

            if (empty($product->color) && ! empty($formatter['color'])) {
                $product->color = $color;
            }

            if (empty($formatter['color'])) {
                $product->suggested_color = $color;
            }

            if (empty($product->description_link)) {
                $product->description_link = $receivedJson->url;
            }

            if (empty($product->made_in)) {
                $product->made_in = $formatter['made_in'];
            }

            if (empty($product->category)) {
                $product->category = $formatter['category'];
            }

            // if size is empty then only update
            if (empty($product->size)) {
                $product->size = $formatter['size'];
            }
            if ((int) $product->price == 0) {
                $product->price = $receivedJson->price;
            }
            $product->listing_remark = 'Original SKU: ' . $receivedJson->sku;

            // Set optional data
            if (! $product->lmeasurement) {
                $product->lmeasurement = $formatter['lmeasurement'];
            }
            if (! $product->hmeasurement) {
                $product->hmeasurement = $formatter['hmeasurement'];
            }
            if (! $product->dmeasurement) {
                $product->dmeasurement = $formatter['dmeasurement'];
            }

            // Save
            $product->status_id = StatusHelper::$externalScraperFinished;
            $product->save();

            // sets initial status pending for Finished external Scraper
            $finished_external_scraper = [
                'product_id'     => $product->id,
                'old_status'     => $product->status_id,
                'new_status'     => StatusHelper::$externalScraperFinished,
                'pending_status' => 0,
                'created_at'     => date('Y-m-d H:i:s'),
            ];
            \App\ProductStatusHistory::addStatusToProduct($finished_external_scraper);

            // Check if we have images
            $product->attachImagesToProduct($receivedJson->images);

            if (isset($receivedJson->website)) {
                $supplierModel = Supplier::leftJoin('scrapers as sc', 'sc.supplier_id', 'suppliers.id')->where(function ($query) use ($receivedJson) {
                    $query->where('supplier', '=', $receivedJson->website)->orWhere('sc.scraper_name', '=', $receivedJson->website);
                })->first();

                if ($supplierModel) {
                    $productSupplier = \App\ProductSupplier::where('supplier_id', $supplierModel->id)->where('product_id', $product->id)->first();
                    if (! $productSupplier) {
                        $productSupplier              = new \App\ProductSupplier;
                        $productSupplier->supplier_id = $supplierModel->id;
                        $productSupplier->product_id  = $product->id;
                    }

                    $productSupplier->title         = $receivedJson->title;
                    $productSupplier->description   = $description;
                    $productSupplier->supplier_link = $receivedJson->url;
                    $productSupplier->stock         = 1;
                    $productSupplier->price         = ($product->price > 0) ? $product->price : 0;
                    $productSupplier->size          = $formatter['size'];
                    $productSupplier->color         = isset($formatter['color']) ? $formatter['color'] : '';
                    $productSupplier->composition   = isset($formatter['composition']) ? $formatter['composition'] : '';
                    $productSupplier->sku           = $receivedJson->sku;
                    $productSupplier->save();
                }
            }

            // Update scrape_queues by product ID
            ScrapeQueues::where('done', 0)->where('product_id', $product->id)->update(['done' => 1]);
            // Return response
            return response()->json([
                'status' => 'Product processed',
            ]);
        }
        //
        if ($scrapedProduct) {
            $scrapedProduct->validated         = 0;
            $scrapedProduct->validation_result = 'Error processing your request (#99)';
            $scrapedProduct->save();
        }

        // Still here? Return error
        return response()->json([
            'status' => 'Error processing your request (#99)',
        ], 400);
    }

    /**
     * @SWG\Post(
     *   path="/scrape/process-product-links",
     *   tags={"Scraper"},
     *   summary="Process product links for scraper to check which links are available to scrap",
     *   operationId="scraper-process-product-links",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *   @SWG\Response(response=406, description="not acceptable"),
     *   @SWG\Response(response=500, description="internal server error"),
     *
     *      @SWG\Parameter(
     *          name="links[]",
     *          in="formData",
     *          required=true,
     *          type="string"
     *      ),
     *      @SWG\Parameter(
     *          name="website",
     *          in="formData",
     *          required=true,
     *          type="string"
     *      ),
     * )
     */
    public function scrap_links(Request $request)
    {
        $scrap_links = ScrapedProductsLinks::select('*');

        if (! empty($request->status)) {
            $scrap_links = $scrap_links->where('status', $request->status);
        }

        if (! empty($request->selected_date)) {
            $scrap_links = $scrap_links->whereDate('created_at', '=', $request->selected_date);
        }

        if (! empty($request->search)) {
            $scrap_links = $scrap_links->where('links', 'LIKE', '%' . $request->search . '%')->orWhere('website', 'LIKE', '%' . $request->search . '%');
        }

        $scrap_links = $scrap_links->orderBy('id', 'DESC')->paginate(25);

        return view('scrap.scrap-links', ['scrap_links' => $scrap_links])->with('i', ($request->input('page', 1) - 1) * 25);
    }

    public function scrapLinksStatusHistories($id)
    {
        $datas = ScrapedProductsLinksHistory::where('scraped_products_links_id', $id)->latest()->get();

        return response()->json([
            'status'      => true,
            'data'        => $datas,
            'message'     => 'History get successfully',
            'status_name' => 'success',
        ], 200);
    }

    public function processProductLinks(Request $request)
    {
        $pendingUrl = [];
        $links      = $request->links;
        $website    = $request->website;

        if (empty($website)) {
            $rawJson = json_decode($request->instance()->getContent());
            $website = isset($rawJson->website) ? $rawJson->website : null;
        }
        if (is_string($links)) {
            $links = json_decode($links);
        } else {
            $rawJson = json_decode($request->instance()->getContent());
            $links   = isset($rawJson->links) ? $rawJson->links : null;
        }

        if (is_array($links)) {
            $scraper = Scraper::where('scraper_name', $website)->first();
            if (! empty($scraper)) {
                if ($scraper->full_scrape == 1) {
                    $scraper->full_scrape = 0;
                    $scraper->save();

                    foreach ($links as $key => $value) {
                        $input                     = [];
                        $input['status']           = 'new';
                        $input['website']          = $website;
                        $input['links']            = $value;
                        $input['scrap_product_id'] = 0;

                        $ScrapedProductsLinksNew = ScrapedProductsLinks::updateOrCreate(
                            ['links' => $value, 'website' => $website], $input
                        );

                        if (! empty($ScrapedProductsLinksNew)) {
                            ScrapedProductsLinksHistory::create([
                                'scraped_products_links_id' => $ScrapedProductsLinksNew->id,
                                'status'                    => 'new',
                            ]);
                        }
                    }

                    return $links;
                }
            }

            foreach ($links as $link) {
                // Load scraped product and update last_inventory_at
                $scrapedProduct = ScrapedProducts::where('url', $link)->where('website', $website)->first();

                if ($scrapedProduct != null) {
                    Log::channel('productUpdates')->debug('[scraped_product] Found existing product with sku ' . ProductHelper::getSku($scrapedProduct->sku));
                    $scrapedProduct->url               = $link;
                    $scrapedProduct->last_inventory_at = Carbon::now();
                    $scrapedProduct->save();

                    $input                     = [];
                    $input['status']           = 'in stock';
                    $input['website']          = $website;
                    $input['links']            = $link;
                    $input['scrap_product_id'] = $scrapedProduct->id;

                    $ScrapedProductsLinksInStock = ScrapedProductsLinks::updateOrCreate(
                        ['links' => $link, 'website' => $website], $input
                    );

                    if (! empty($ScrapedProductsLinksInStock)) {
                        ScrapedProductsLinksHistory::create([
                            'scraped_products_links_id' => $ScrapedProductsLinksInStock->id,
                            'status'                    => 'in stock',
                        ]);
                    }
                } else {
                    $pendingUrl[] = $link;

                    $input                     = [];
                    $input['status']           = 'out of stock';
                    $input['website']          = $website;
                    $input['links']            = $link;
                    $input['scrap_product_id'] = 0;

                    $ScrapedProductsLinksOutOfStock = ScrapedProductsLinks::updateOrCreate(
                        ['links' => $link, 'website' => $website], $input
                    );

                    if (! empty($ScrapedProductsLinksOutOfStock)) {
                        ScrapedProductsLinksHistory::create([
                            'scraped_products_links_id' => $ScrapedProductsLinksOutOfStock->id,
                            'status'                    => 'out of stock',
                        ]);
                    }
                }
            }

            //Getting Supplier by Scraper name
            try {
                $scraper       = Scraper::where('scraper_name', $website)->first();
                $totalLinks    = count($links);
                $pendingLinks  = count($pendingUrl);
                $existingLinks = ($totalLinks - $pendingLinks);

                if ($scraper != '' && $scraper != null) {
                    $scraper->scraper_total_urls    = $totalLinks;
                    $scraper->scraper_existing_urls = $existingLinks;
                    $scraper->scraper_new_urls      = $pendingLinks;
                    $scraper->update();
                }

                $scraperResult                = new ScraperResult();
                $scraperResult->date          = date('Y-m-d');
                $scraperResult->scraper_name  = $website;
                $scraperResult->total_urls    = $totalLinks;
                $scraperResult->existing_urls = $existingLinks;
                $scraperResult->new_urls      = $pendingLinks;
                $scraperResult->save();
            } catch (Exception $e) {
            }
        }

        return $pendingUrl;
    }

    /**
     * @SWG\Post(
     *   path="/scrape/process-product-links-by-brand",
     *   tags={"Scraper"},
     *   summary="Process product links for scraper to check which links are available to scrap and will store the entry brand wise",
     *   operationId="scraper-process-product-links-by-brand",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *   @SWG\Response(response=406, description="not acceptable"),
     *   @SWG\Response(response=500, description="internal server error"),
     *
     *      @SWG\Parameter(
     *          name="links[]",
     *          in="formData",
     *          required=true,
     *          type="string"
     *      ),
     *      @SWG\Parameter(
     *          name="website",
     *          in="formData",
     *          required=true,
     *          type="string"
     *      ),
     * )
     */
    public function processProductLinksByBrand(Request $request)
    {
        set_time_limit(0);

        $pendingUrl = [];
        $links      = $request->links;
        $website    = $request->website;

        if (empty($website)) {
            $rawJson = json_decode($request->instance()->getContent());
            $website = isset($rawJson->website) ? $rawJson->website : null;
        }
        if (is_string($links)) {
            $links = json_decode($links);
        } else {
            $rawJson = json_decode($request->instance()->getContent());
            $links   = isset($rawJson->links) ? $rawJson->links : null;
        }

        if (is_array($links)) {
            $scraper = Scraper::where('scraper_name', $website)->first();
            if (! empty($scraper)) {
                if ($scraper->full_scrape == 1) {
                    $scraper->full_scrape = 0;
                    $scraper->save();

                    return $links;
                }
            }

            $brands = [];

            foreach ($links as $link) {
                // Load scraped product and update last_inventory_at
                $scrapedProduct = ScrapedProducts::where('url', $link->link)->where('website', $website)->first();

                if ($scrapedProduct != null) {
                    Log::channel('productUpdates')->debug('[scraped_product] Found existing product with sku ' . ProductHelper::getSku($scrapedProduct->sku));
                    $scrapedProduct->url               = $link->link;
                    $scrapedProduct->last_inventory_at = Carbon::now();
                    $scrapedProduct->save();

                    $product = \App\Product::where('sku', $scrapedProduct->sku)->first();
                    if ($product) {
                        $product->stock = $product->stock + 1;
                    }
                    $product->save();
                } else {
                    $pendingUrl[] = $link->link;
                }

                if (isset($brands[$link->brand])) {
                    $brands[$link->brand] = $brands[$link->brand] + 1;
                } else {
                    $brands[$link->brand] = 1;
                }
            }

            if (! empty($brands)) {
                foreach ($brands as $bn => $t) {
                    $brandM = \App\Brand::where('name', $bn)->first();
                    if ($brandM) {
                        $bscraperResult               = new \App\BrandScraperResult();
                        $bscraperResult->date         = date('Y-m-d');
                        $bscraperResult->scraper_name = $website;
                        $bscraperResult->total_urls   = $t;
                        $bscraperResult->brand_id     = $brandM->id;
                        $bscraperResult->save();
                    }
                }
            }

            //Getting Supplier by Scraper name
            try {
                $scraper       = Scraper::where('scraper_name', $website)->first();
                $totalLinks    = count($links);
                $pendingLinks  = count($pendingUrl);
                $existingLinks = ($totalLinks - $pendingLinks);

                if ($scraper != '' && $scraper != null) {
                    $scraper->scraper_total_urls    = $totalLinks;
                    $scraper->scraper_existing_urls = $existingLinks;
                    $scraper->scraper_new_urls      = $pendingLinks;
                    $scraper->update();
                }

                $scraperResult                = new ScraperResult();
                $scraperResult->date          = date('Y-m-d');
                $scraperResult->scraper_name  = $website;
                $scraperResult->total_urls    = $totalLinks;
                $scraperResult->existing_urls = $existingLinks;
                $scraperResult->new_urls      = $pendingLinks;
                $scraperResult->save();
            } catch (Exception $e) {
            }
        }

        return $pendingUrl;
    }

    public function scrapedUrls(Request $request)
    {
        $totalSkuRecords       = 0;
        $totalUniqueSkuRecords = 0;
        $users                 = Helpers::getUserArray(User::role('Developer')->get());
        if ($request->website || $request->url || $request->sku || $request->title || $request->price || $request->created || $request->brand || $request->updated || $request->currency == 0 || $request->orderCreated || $request->orderUpdated || $request->columns || $request->color || $request->psize || $request->category || $request->product_id || $request->dimension || $request->prod_img_filter || $request->prod_error_filter) {
            $query = \App\ScrapedProducts::query();

            $dateRange = request('daterange', '');
            $startDate = false;
            $endDate   = false;

            if (! empty($dateRange)) {
                $range = explode(' - ', $dateRange);
                if (! empty($range[0]) && ! empty($range[1])) {
                    $startDate = $range[0];
                    $endDate   = $range[1];
                }
            }

            //global search website
            if (request('prod_img_filter') != null && request('prod_img_filter') == '0') {
                $query->whereRaw('( JSON_EXTRACT(images, "$")  like "%.jpg%" or  JSON_EXTRACT(images, "$")  like "%.png%" or JSON_EXTRACT(images, "$") like "%.jpeg%" or JSON_EXTRACT(images, "$") like "%.gif%")');
            } elseif (request('prod_img_filter') != null && request('prod_img_filter') == '1') {
                $query->whereRaw('not( JSON_EXTRACT(images, "$")  like "%.jpg%" or  JSON_EXTRACT(images, "$")  like "%.png%" or JSON_EXTRACT(images, "$") like "%.jpeg%" or JSON_EXTRACT(images, "$") like "%.gif%")');
            }

            if (request('prod_error_filter') != null && request('prod_error_filter') == '0') {
                $query->where('validation_result', '!=', null);
            } elseif (request('prod_error_filter') != null && request('prod_error_filter') == '1') {
                $query->where('validation_result', '=', null);
            }
            if (request('website') != null) {
                $query->whereIn('website', $request->website);
            }

            if (request('url') != null) {
                $query->where('url', 'LIKE', "%{$request->url}%");
            }

            if (request('sku') != null) {
                $query->where('sku', 'LIKE', "%{$request->sku}%");
            }

            if (request('title') != null) {
                $query->where('title', 'LIKE', "%{$request->title}%");
            }

            if (request('currency') != null) {
                $query->where('currency', 'LIKE', "%{$request->currency}%");
            }

            if (request('price') != null) {
                $query->where('price', 'LIKE', "%{$request->price}%");
            }

            if (request('color') != null) {
                $query->whereRaw('JSON_EXTRACT(properties, \'$.color\') like "%' . $request->color . '%"');
            }

            if (request('category') != null) {
                $query->whereRaw('JSON_EXTRACT(properties, \'$.category\') like "%' . $request->category . '%"');
            }

            if (request('psize') != null) {
                $query->whereRaw('JSON_EXTRACT(properties, \'$.sizes\') like "%' . $request->psize . '%" OR JSON_EXTRACT(properties, \'$.size\') like "%' . $request->psize . '%"');
            }

            if (request('dimension') != null) {
                $query->whereRaw('JSON_EXTRACT(properties, \'$.dimension\') like "%' . $request->dimension . '%"');
            }

            if (request('product_id') != null) {
                $productIds = explode(',', $request->product_id);
                $query->whereIn('product_id', $productIds);
            }

            if (request('created') != null) {
                $query->whereDate('created_at', Carbon::parse($request->created)->format('Y-m-d'));
            }

            if (request('brand') != null) {
                $suppliers = request('brand');
                $query->whereIn('brand_id', $suppliers);
            }

            if (request('updated') != null) {
                $query->whereDate('updated_at', request('updated'));
            }

            if (! empty($startDate)) {
                $query->whereDate('created_at', ' >= ', $startDate);
            }

            if (! empty($endDate)) {
                $query->whereDate('created_at', ' <= ', $endDate);
            }

            if (request('orderCreated') != null) {
                if (request('orderCreated') == 0) {
                    $query->orderby('created_at', 'asc');
                } else {
                    $query->orderby('created_at', 'desc');
                }
            }

            if (request('orderUpdated') != null) {
                if (request('orderUpdated') == 0) {
                    $query->orderby('updated_at', 'asc');
                } else {
                    $query->orderby('updated_at', 'desc');
                }
            }

            if (request('orderCreated') == null && request('orderUpdated') == null) {
                $query->orderby('updated_at', 'desc');
            }

            $paginate = (Setting::get('pagination') * 10);
            $logs     = $query->paginate($paginate)->appends(request()->except(['page']));
            $search   = [
                \DB::raw('count(*) as total_record'),
                \DB::raw('count(DISTINCT p.sku) as total_u_record'),
            ];

            if (! empty($startDate) && ! empty($endDate)) {
                $search[] = \DB::raw("DATE_FORMAT(scraped_products.created_at, '%Y-%m-%d') as date");
            } else {
                $search[] = \DB::raw("'All' as date");
            }

            $totalUniqueSkuRecords = \DB::table('scraped_products')->leftJoin('products as p', function ($q) {
                $q->on('p.id', 'scraped_products.product_id')->where('stock', '>=', 1);
            });

            if (! empty($startDate)) {
                $totalUniqueSkuRecords->whereDate('scraped_products.created_at', ' >= ', $startDate);
            }

            if (! empty($endDate)) {
                $totalUniqueSkuRecords->whereDate('scraped_products.created_at', ' <= ', $endDate);
                $totalUniqueSkuRecords->groupBy(\DB::raw('DATE_FORMAT(scraped_products.created_at, "%Y-%m-%d")'));
            }

            $totalUniqueSkuRecords->select($search);
            $summeryRecords = $totalUniqueSkuRecords->get();

            $response = request()->except(['page']);
            if (empty($response['columns'])) {
                $response['columns'] = ['color', 'category', 'size', 'dimension'];
            }
        } else {
            $response = '';
            $paginate = (Setting::get('pagination') * 10);

            $logs = LogScraper::orderby('updated_at', 'desc')->paginate($paginate);
        }
        if ($request->ajax()) {
            return response()->json([
                'tbody' => view('scrap.partials.scraped_url_data', compact('logs', 'response', 'summeryRecords', 'users'))->render(),
                'links' => (string) $logs->render(),
                'count' => $logs->total(),
            ], 200);
        }

        return view('scrap.scraped_url', compact('logs', 'response', 'summeryRecords', 'users'));
    }

    /**
     * @SWG\Get(
     *   path="/products/auto-rejected",
     *   tags={"Scraper"},
     *   summary="List of product which is in queue where done = 0 in scrap_queues",
     *   operationId="scraper-products-auto-rejected",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *   @SWG\Response(response=406, description="not acceptable"),
     *   @SWG\Response(response=500, description="internal server error"),
     * )
     */

    /**
     * @SWG\Get(
     *   path="products/get-products-to-scrape",
     *   tags={"Scraper"},
     *   summary="List of product which is in queue where done = 0 in scrap_queues",
     *   operationId="scraper-products-get-products-to-scrape",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *   @SWG\Response(response=406, description="not acceptable"),
     *   @SWG\Response(response=500, description="internal server error"),
     * )
     */

    /**
     * @SWG\Get(
     *   path="products/new-supplier",
     *   tags={"Scraper"},
     *   summary="List of product which is in queue where done = 0 in scrap_queues",
     *   operationId="scraper-products-new-supplier",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *   @SWG\Response(response=406, description="not acceptable"),
     *   @SWG\Response(response=500, description="internal server error"),
     * )
     */
    public function getProductsToScrape()
    {
        // Set empty value of productsToPush
        $productsToPush = [];

        // Get all products with status scrape from scrape_queues
        $scrapeQueues = ScrapeQueues::where('done', 0)->orderBy('product_id', 'DESC')->take(50)->get();

        // Check if we have products and loop over them
        if ($scrapeQueues !== null) {
            foreach ($scrapeQueues as $scrapedQueue) {
                // Get product
                $product = Product::find($scrapedQueue->product_id);

                // Add to array
                $productsToPush[] = [
                    'id'           => $scrapedQueue->product_id,
                    'sku'          => null,
                    'original_sku' => null,
                    'brand'        => $product->brands ? $product->brands->name : '',
                    'url'          => $scrapedQueue->url,
                    'supplier'     => $product->supplier,
                ];

                // Update status to is being scraped
                $product->status_id = StatusHelper::$isBeingScrapedWithGoogleImageSearch;
                $product->save();
            }
        }

        // Only run if productsToPush is empty
        if (! is_array($productsToPush) || count($productsToPush) == 0) {
            // Get all products with status scrape
            $products = Product::where('status_id', StatusHelper::$scrape)->where('stock', '>=', 1)->orderBy('products.id', 'DESC')->take(50)->get();

            // Check if we have products and loop over them
            if ($products !== null) {
                foreach ($products as $product) {
                    // Get original SKU
                    $scrapedProduct = ScrapedProducts::where('sku', $product->sku)->first();

                    if ($scrapedProduct != null) {
                        // Add to array
                        $productsToPush[] = [
                            'id'           => $product->id,
                            'sku'          => $product->sku,
                            'original_sku' => ProductHelper::getOriginalSkuByBrand(! empty($scrapedProduct->original_sku) ? $scrapedProduct->original_sku : $scrapedProduct->sku, $product->brands ? $product->brands->id : 0),
                            'brand'        => $product->brands ? $product->brands->name : '',
                            'url'          => null,
                            'supplier'     => $product->supplier,
                        ];

                        // Update status to is being scraped
                        $product->status_id = StatusHelper::$isBeingScraped;
                        $product->save();
                    }
                }
            }
        }

        // Return JSON response
        return response()->json($productsToPush);
    }

    public function genericScraper(Request $request)
    {
        $query = Scraper::query();

        if ($request->global != null) {
            $query = $query->where('scraper_name', 'LIKE', "%{$request->global}%")
                ->orWhere('product_url_selector', 'LIKE', "%{$request->global}%")
                ->orWhere('designer_url_selector', 'LIKE', "%{$request->global}%")
                ->orWhere('starting_urls', 'LIKE', "%{$request->global}%")
                ->orWhere('run_gap', 'LIKE', "%{$request->global}%")
                ->orWhere('time_out', 'LIKE', "%{$request->global}%")
                ->orWhereHas('mainSupplier', function ($qu) use ($request) {
                    $qu->where('supplier', 'LIKE', "%{$request->global}%");
                });
        }

        if ($request->scraper_name != null) {
            $query = $query->where('scraper_name', 'LIKE', "%{$request->scraper_name}%");
        }

        if ($request->run_gap_search != null) {
            $query = $query->where('run_gap', 'LIKE', "%{$request->run_gap_search}%");
        }

        if ($request->time_out_search != null) {
            $query = $query->where('time_out', 'LIKE', "%{$request->time_out_search}%");
        }

        if ($request->starting_url_search != null) {
            $query = $query->where('starting_urls', 'LIKE', "%{$request->starting_url_search}%");
        }

        if ($request->designer_url_search != null) {
            $query = $query->where('designer_url_selector', 'LIKE', "%{$request->designer_url_search}%");
        }

        if ($request->product_url_search != null) {
            $query = $query->where('product_url_selector', 'LIKE', "%{$request->product_url_search}%");
        }

        if ($request->supplier_name != null) {
            $query = $query->whereHas('mainSupplier', function ($qu) use ($request) {
                $qu->where('supplier', 'LIKE', "%{$request->supplier_name}%");
            });
        }

        $suppliers = Supplier::where('supplier_status_id', 1)->get();
        $scrapers  = $query->paginate(25)->appends(request()->except(['page']));

        if ($request->ajax()) {
            return response()->json([
                'tbody' => view('scrap.partials.supplier-scraper-data', compact('scrapers', 'suppliers'))->render(),
                'links' => (string) $scrapers->render(),
                'count' => $scrapers->total(),
            ], 200);
        }

        return view('scrap.supplier-scraper', compact('scrapers', 'suppliers'));
    }

    public function genericScraperSave(Request $request)
    {
        if ($request->id) {
            $scraper = Scraper::find($request->id);
        } else {
            $scraper               = new Scraper;
            $scraper->scraper_name = $request->name;
            $scraper->supplier_id  = $request->supplier_id;
        }

        $scraper->run_gap               = $request->run_gap;
        $scraper->full_scrape           = ! empty($request->full_scrape) ? $request->full_scrape : '';
        $scraper->time_out              = $request->time_out;
        $scraper->starting_urls         = $request->starting_url;
        $scraper->product_url_selector  = $request->product_url_selector;
        $scraper->designer_url_selector = $request->designer_url;
        $scraper->save();

        if ($request->ajax()) {
            return response()->json(['success'], 200);
        }

        return redirect()->back()->with('message', 'Scraper Saved');
    }

    public function genericMapping($id)
    {
        $scraper  = Scraper::find($id);
        $mappings = ScraperMapping::where('scrapers_id', $id)->get();

        return view('scrap.generic-scraper-mapping', compact('scraper', 'mappings', 'id'));
    }

    public function genericMappingSave(Request $request)
    {
        $id        = $request->id;
        $select    = $request->select;
        $count     = count($select);
        $functions = $request->functions;
        $parameter = $request->parameter;
        $selector  = $request->selector;

        for ($i = 0; $i < $count; $i++) {
            if ($select[$i] != null) {
                $updateMapping = ScraperMapping::where('scrapers_id', $id)->where('field_name', $select[$i])->first();
                if ($updateMapping != null) {
                    $mapping = $updateMapping;
                } else {
                    $mapping = new ScraperMapping;
                }
                if ($selector[$i] == null) {
                    $selector[$i] = '';
                }
                if ($functions[$i] == null) {
                    $functions[$i] = '';
                }
                if ($parameter[$i] == null) {
                    $parameter[$i] = '';
                }

                $mapping->field_name  = $select[$i];
                $mapping->scrapers_id = $id;
                $mapping->selector    = $selector[$i];
                $mapping->function    = $functions[$i];
                $mapping->parameter   = $parameter[$i];
                $mapping->save();
            }
        }

        return response()->json(['success'], 200);
    }

    /**
     * @SWG\Get(
     *   path="/scraper/next",
     *   tags={"Scrape​r"},
     *   summary="Send the next scraper",
     *   operationId="scraper-next",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *   @SWG\Response(response=400, description="No Scraper Present"),
     *   @SWG\Response(response=500, description="internal server error"),
     * )
     */
    public function sendScrapDetails()
    {
        $scraper = Scraper::whereRaw('(scrapers.start_time IS NULL OR scrapers.start_time < "2000-01-01 00:00:00" OR (scrapers.start_time < scrapers.end_time AND scrapers.end_time < DATE_SUB(NOW(), INTERVAL scrapers.run_gap HOUR)))')->where('time_out', '>', 0)->first();

        if ($scraper == null) {
            return response()->json(['message' => 'No Scraper Present'], 400);
        }
        $startingURLs = explode("\n", str_replace("\r", '', $scraper->starting_urls));

        $maps = ScraperMapping::where('scrapers_id', $scraper->id)->get();

        foreach ($maps as $map) {
            $mapArray[] = [$map->field_name => ['selector' => $map->selector, 'function' => $map->function, 'parameters' => $map->parameter]];
        }

        if (! isset($mapArray)) {
            $mapArray = [];
        }

        $scraper->start_time = now();
        $scraper->save();

        return response()->json(
            [
                'id'                    => $scraper->id,
                'website'               => $scraper->scraper_name,
                'timeout'               => $scraper->time_out,
                'starting_urls'         => $startingURLs,
                'designer_url_selector' => $scraper->designer_url_selector,
                'product_url_selector'  => $scraper->product_url_selector,
                'map'                   => $mapArray,
            ]
        );
    }

    /**
     * @SWG\Post(
     *   path="/scraper/endtime",
     *   tags={"Scrape​r"},
     *   summary="Update scraper end time",
     *   operationId="scraper-endtime",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *   @SWG\Response(response=400, description="No Scraper Present"),
     *   @SWG\Response(response=500, description="internal server error"),
     *
     *      @SWG\Parameter(
     *          name="id",
     *          in="path",
     *          required=true,
     *          type="integer"
     *      ),
     * )
     */
    public function recieveScrapDetails(Request $request)
    {
        $id      = $request->id;
        $scraper = Scraper::find($id);
        if ($scraper == null) {
            return response()->json(['message' => 'No Scraper Present'], 400);
        }
        $scraper->end_time = now();
        $scraper->save();

        return response()->json(['success'], 200);
    }

    public function genericMappingDelete(Request $request)
    {
        $id      = $request->id;
        $mapping = ScraperMapping::find($id);
        $mapping->delete();

        return response()->json(['success'], 200);
    }

    public function scraperFullScrape(Request $request)
    {
        $scraper = Scraper::find($request->id);
        if (! empty($scraper)) {
            $scraper->full_scrape = $request->value;
            $scraper->save();
        }

        return response()->json(['success'], 200);
    }

    /**
     * @SWG\Post(
     *   path="/scraper/ready",
     *   tags={"Scrape​r"},
     *   summary="Update scraper last started at time",
     *   operationId="scrapper-ready",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *
     *      @SWG\Parameter(
     *          name="scraper_name",
     *          in="path",
     *          required=true,
     *          type="string"
     *      ),
     * )
     */
    /**
     * Store scraper starting time
     */
    public function scraperReady(Request $request)
    {
        $scraper = Scraper::where('scraper_name', $request->scraper_name)->first();
        if (! empty($scraper)) {
            $scraper->last_started_at = Carbon::now();
            $scraper->save();
        }

        return response()->json(['success'], 200);
    }

    /**
     * @SWG\Post(
     *   path="/scraper/completed",
     *   tags={"Scrape​r"},
     *   summary="Update scraper last completed at",
     *   operationId="scrapper-completed",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *
     *      @SWG\Parameter(
     *          name="scraper_name",
     *          in="path",
     *          required=true,
     *          type="string"
     *      ),
     * )
     */
    /**
     * Store scraper completed time
     */
    public function scraperCompleted(Request $request)
    {
        $scraper = Scraper::where('scraper_name', $request->scraper_name)->first();
        if (! empty($scraper)) {
            $scraper->last_completed_at = Carbon::now();
            $scraper->save();
        }

        return response()->json(['success'], 200);
    }

    /**
     * @SWG\Get(
     *   path="/scraper/need-to-start",
     *   tags={"Scrape​r"},
     *   summary="List of scraper which need to start",
     *   operationId="scraper-need-start",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *   @SWG\Response(response=500, description="internal server error"),
     *
     *      @SWG\Parameter(
     *          name="server_id",
     *          in="path",
     *          required=true,
     *          type="string"
     *      ),
     * )
     */
    public function needToStart(Request $request)
    {
        if ($request->server_id != null) {
            $totalScraper = [];
            $scrapers     = Scraper::select('parent_id', 'scraper_name')->where('server_id', $request->server_id)->where('scraper_start_time', \DB::raw('HOUR(now())'))->get();
            foreach ($scrapers as $scraper) {
                if (! $scraper->parent_id) {
                    $totalScraper[] = $scraper->scraper_name;
                } else {
                    $totalScraper[] = $scraper->parent->scraper_name . '/' . $scraper->scraper_name;
                }
            }

            return response()->json(['code' => 200, 'data' => $totalScraper, 'message' => '']);
        } else {
            return response()->json(['code' => 500, 'message' => 'Please send server id']);
        }
    }

    /**
     * @SWG\Get(
     *   path="/scraper-needed-products",
     *   tags={"Scrape​r"},
     *   summary="Send product which is on request from external scraper",
     *   operationId="scraper-needed-product",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     * )
     */
    public function scraperNeeded(Request $request)
    {
        $products = Product::where('status_id', StatusHelper::$requestForExternalScraper)
            ->leftJoin('brands', function ($join) {
                $join->on('products.brand', '=', 'brands.id');
            })
            ->leftJoin('suppliers', function ($join) {
                $join->on('products.supplier_id', '=', 'suppliers.id');
            })
            ->select(['products.id', 'products.sku', 'products.supplier', 'products.status_id', 'brands.name'])
            ->orderBy('brands.priority', 'desc')
            ->orderBy('suppliers.priority', 'desc')
            ->latest('products.created_at')
            ->limit(50)
            ->get()
            ->toArray();
        if ($products) {
            foreach ($products as $value) {
                $scrap_status_data = [
                    'product_id'     => $value['id'],
                    'old_status'     => StatusHelper::$requestForExternalScraper,
                    'new_status'     => StatusHelper::$sendtoExternalScraper,
                    'pending_status' => 1,
                    'created_at'     => date('Y-m-d H:i:s'),
                ];
                \App\ProductStatusHistory::addStatusToProduct($scrap_status_data);
            }
        }
        foreach ($products as $value) {
            Product::where('id', $value['id'])->update(['status_id' => StatusHelper::$sendtoExternalScraper]);
            $scrap_status_data = [
                'product_id'     => $value['id'],
                'old_status'     => StatusHelper::$requestForExternalScraper,
                'new_status'     => StatusHelper::$sendtoExternalScraper,
                'pending_status' => 0,
                'created_at'     => date('Y-m-d H:i:s'),
            ];
            \App\ProductStatusHistory::addStatusToProduct($scrap_status_data);
        }

        return response()->json($products);
    }

    /**
     * @SWG\Post(
     *   path="/node/restart-script",
     *   tags={"Node"},
     *   summary="Product restart node",
     *   operationId="procuct-restart-node",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *   @SWG\Response(response=406, description="not acceptable"),
     *   @SWG\Response(response=500, description="internal server error"),
     *
     *      @SWG\Parameter(
     *          name="mytest",
     *          in="path",
     *          required=true,
     *          type="string"
     *      ),
     * )
     */
    public function restartNode(Request $request)
    {
        if ($request->name && $request->server_id) {
            $scraper = Scraper::where('scraper_name', $request->name)->first();
            if (! $scraper->parent_id) {
                $name = $scraper->scraper_name;
            } else {
                $name = $scraper->parent->scraper_name . '/' . $scraper->scraper_name;
            }
            $url       = 'https://' . $request->server_id . '.theluxuryunlimited.com:' . config('env.NODE_SERVER_PORT') . '/restart-script?filename=' . $name . '.js';
            $startTime = date('Y-m-d H:i:s', LARAVEL_START);
            $curl      = curl_init();
            curl_setopt($curl, CURLOPT_URL, $url);
            curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
            $response = curl_exec($curl);
            $httpcode = curl_getinfo($curl, CURLINFO_HTTP_CODE);
            LogRequest::log($startTime, $url, 'GET', json_encode([]), json_decode($response), $httpcode, \App\Http\Controllers\ScrapController::class, 'restartNode');
            curl_close($curl);

            if ($response) {
                return response()->json(['code' => 200, 'message' => 'Script Restarted']);
            } else {
                return response()->json(['code' => 500, 'message' => 'Check if Server is running']);
            }
        }
    }

    /**
     * @SWG\Post(
     *   path="/node/get-status",
     *   tags={"Node"},
     *   summary="procuct get status",
     *   operationId="procuct-get-status",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *   @SWG\Response(response=406, description="not acceptable"),
     *   @SWG\Response(response=500, description="internal server error"),
     *
     *      @SWG\Parameter(
     *          name="mytest",
     *          in="path",
     *          required=true,
     *          type="string"
     *      ),
     * )
     */
    public function getStatus(Request $request)
    {
        if ($request->name && $request->server_id) {
            $scraper = Scraper::where('scraper_name', $request->name)->first();
            if (! $scraper->parent_id) {
                $name = $scraper->scraper_name;
            } else {
                $name = $scraper->parent->scraper_name . '/' . $scraper->scraper_name;
            }
            $url       = 'https://' . $request->server_id . '.theluxuryunlimited.com:' . config('env.NODE_SERVER_PORT') . '/process-list?filename=' . $name . '.js';
            $startTime = date('Y-m-d H:i:s', LARAVEL_START);
            $curl      = curl_init();
            curl_setopt($curl, CURLOPT_URL, $url);
            curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
            $response = curl_exec($curl);
            $httpcode = curl_getinfo($curl, CURLINFO_HTTP_CODE);
            LogRequest::log($startTime, $url, 'GET', json_encode([]), json_decode($response), $httpcode, \App\Http\Controllers\ScrapController::class, 'getStatus');
            curl_close($curl);

            if ($response) {
                $re  = '/\d+/m';
                $str = $response;
                preg_match_all($re, $str, $matches, PREG_SET_ORDER, 0);

                if (count($matches) == 2 || count($matches) == 1 || count($matches) == 0) {
                    return response()->json(['code' => 200, 'message' => 'Script Is Not Running']);
                } else {
                    return response()->json(['code' => 200, 'message' => "Script Is Running \n" . json_decode($response)->Process[0]->duration]);
                }
            } else {
                return response()->json(['code' => 500, 'message' => 'Check if Server is running']);
            }
        }
    }

    public function updateNode(Request $request)
    {
        if ($request->name && $request->server_id) {
            $scraper = Scraper::where('scraper_name', $request->name)->first();
            if (! $scraper->parent_id) {
                $name = $scraper->scraper_name;
            } else {
                $name = $scraper->parent->scraper_name . '/' . $scraper->scraper_name;
            }

            $url       = 'https://' . $request->server_id . '.theluxuryunlimited.com:' . config('env.NODE_SERVER_PORT') . '/process-list?filename=' . $name . '.js';
            $startTime = date('Y-m-d H:i:s', LARAVEL_START);
            $curl      = curl_init();
            curl_setopt($curl, CURLOPT_URL, $url);
            curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
            $response = curl_exec($curl);
            $httpcode = curl_getinfo($curl, CURLINFO_HTTP_CODE);
            LogRequest::log($startTime, $url, 'POST', json_encode([]), json_decode($response), $httpcode, \App\Http\Controllers\ScrapController::class, 'updateNode');
            curl_close($curl);

            $duration = json_decode($response);
            $duration = isset($duration->Process[0]->duration) ? $duration->Process[0]->duration : null;
            if ($response) {
                return response()->json(['code' => 200, 'message' => 'Script Restarted', 'duration' => $duration]);
            } else {
                return response()->json(['code' => 500, 'message' => 'Check if Server is running']);
            }
        }
    }

    public function killNode(Request $request)
    {
        if ($request->name && $request->server_id) {
            $scraper = Scraper::where('scraper_name', $request->name)->first();
            if (! $scraper->parent_id) {
                $name = $scraper->scraper_name;
            } else {
                $name = $scraper->parent->scraper_name . '/' . $scraper->scraper_name;
            }

            $url       = 'https://' . $request->server_id . '.theluxuryunlimited.com:' . config('env.NODE_SERVER_PORT') . '/kill-scraper?filename=' . $name . '.js';
            $startTime = date('Y-m-d H:i:s', LARAVEL_START);
            $curl      = curl_init();
            curl_setopt($curl, CURLOPT_URL, $url);
            curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
            $httpcode = curl_getinfo($curl, CURLINFO_HTTP_CODE);
            $response = curl_exec($curl);
            curl_close($curl);
            LogRequest::log($startTime, $url, 'POST', json_encode([]), json_decode($response), $httpcode, \App\Http\Controllers\ScrapController::class, 'killNode');
            if ($response) {
                return response()->json(['code' => 200, 'message' => 'Script Restarted']);
            } else {
                return response()->json(['code' => 500, 'message' => 'Check if Server is running']);
            }
        }
    }

    public function saveChildScraper(Request $request)
    {
        $errorMsg = null;

        $request->validate([
            'supplier_id' => 'required',
            'run_gap'     => 'required',
            'start_time'  => 'required',
        ]);

        try {
            $scrperEx = explode('#', $request->scraper_name);

            $scraper = Scraper::whereNull('parent_id');

            if (! empty($scrperEx[0])) {
                $scraper = $scraper->where('scraper_name', $scrperEx[0]);
            }

            if (! empty($scrperEx[1])) {
                $scraper = $scraper->where('id', $scrperEx[1]);
            }

            $scraper = $scraper->first();

            if ($scraper) {
                $parentId                      = $scraper->id;
                $scraperChild                  = new Scraper;
                $scraperChild->scraper_name    = $request->name;
                $scraperChild->supplier_id     = $scraper->supplier_id;
                $scraperChild->parent_id       = $parentId;
                $scraperChild->run_gap         = $request->run_gap;
                $scraperChild->start_time      = $request->start_time;
                $scraperChild->scraper_made_by = $request->scraper_made_by;
                $scraperChild->server_id       = $request->server_id;
                $scraperChild->save();

                $errorMsg = 'Scraper Not Found';
            }
        } catch (\PDOException $e) {
            $errorMsg = $e->getMessage();
        }

        if ($request->ajax()) {
            return response()->json([
                'status' => $errorMsg ? 'error' : 'success',
                'msg'    => $errorMsg ? $errorMsg : 'Child Scraper Saved',
            ]);
        }

        return redirect()->back()->with('message', $errorMsg ? $errorMsg : 'Child Scraper Saved');
    }

    public function assignScrapProductTask(Request $request)
    {
        $requestData = new Request();
        $requestData->setMethod('POST');
        $requestData->request->add([
            'priority'    => 1,
            'issue'       => $request->message, // issue detail
            'status'      => 'Planned',
            'module'      => 'Scraper',
            'subject'     => $request->subject, // enter issue name
            'assigned_to' => 6,
        ]);
        app(\App\Http\Controllers\DevelopmentController::class)->issueStore($requestData, 'issue');

        return redirect()->back();
    }

    /**
     * @SWG\POST(
     *   consumes={"multipart/form-data"},
     *   path="/scrape/send-screenshot",
     *   tags={"Scrape​r"} ,
     *   summary="Store scraper screenshot into database",
     *   operationId="scrape-send-screenshot",
     *
     *   @SWG\Response(response=200, description="Screenshot saved successfully"),
     *   @SWG\Response(response=500, description="Required field is missing"),
     *
     *      @SWG\Parameter(
     *          name="website",
     *          in="formData",
     *          required=true,
     *          type="string"
     *      ),
    @SWG\Parameter(
     *          name="screenshot",
     *          in="formData",
     *          required=true,
     *          type="file"
     *      ),
     * )
     */
    public function sendScreenshot(Request $request)
    {
        return response()->json(['code' => 500, 'data' => [], 'message' => 'Screenshot request has been disabled']);

        if (empty($request->website)) {
            return response()->json(['code' => 500, 'data' => [], 'message' => 'website (scraper name) is required field']);
        }

        if (! $request->hasFile('screenshot')) {
            return response()->json(['code' => 500, 'data' => [], 'message' => 'Screenshot is required']);
        }

        return response()->json(['code' => 200, 'data' => [], 'message' => 'Screenshot saved successfully']);
    }

    /**
     * @SWG\POST(
     *   path="/scrape/send-position",
     *   tags={"Scrape​r"} ,
     *   summary="Store scraper posiotion periodically",
     *   operationId="scrape-send-position",
     *
     *   @SWG\Response(response=200, description="History saved successfully"),
     *   @SWG\Response(response=500, description="Required field is missing"),
     *
     *      @SWG\Parameter(
     *          name="website",
     *          in="formData",
     *          required=true,
     *          type="string"
     *      ),
    @SWG\Parameter(
     *          name="comment",
     *          in="formData",
     *          required=true,
     *          type="string"
     *      ),
     * )
     */
    public function sendPosition(Request $request)
    {
        if (empty($request->website)) {
            return response()->json(['code' => 500, 'data' => [], 'message' => 'website (scraper name) is required field']);
        }

        if (empty($request->get('comment'))) {
            return response()->json(['code' => 500, 'data' => [], 'message' => 'Comment is required']);
        }

        $scraper = \App\Scraper::where('scraper_name', $request->website)->first();

        if (! $scraper) {
            return response()->json(['code' => 500, 'data' => [], 'message' => 'website (scraper name) is wrong']);
        }

        $history = new \App\ScraperPositionHistory;
        $history->fill([
            'scraper_name' => $scraper->scraper_name,
            'scraper_id'   => $scraper->id,
            'comment'      => $request->get('comment'),
        ]);

        $history->save();

        return response()->json(['code' => 200, 'data' => [], 'message' => 'History saved successfully']);
    }

    public function getLatestLog(Request $request)
    {
        if ($request->name && $request->server_id) {
            $scraper = Scraper::where('scraper_name', $request->name)->first();
            if (! $scraper->parent_id) {
                $name = $scraper->scraper_name;
            } else {
                $name = $scraper->parent->scraper_name . '/' . $scraper->scraper_name;
            }

            $url       = 'https://' . $request->server_id . '.theluxuryunlimited.com:' . config('env.NODE_SERVER_PORT') . '/send-position?website=' . $name;
            $startTime = date('Y-m-d H:i:s', LARAVEL_START);
            $curl      = curl_init();

            curl_setopt($curl, CURLOPT_URL, $url);
            curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);

            $response = curl_exec($curl);
            $httpcode = curl_getinfo($curl, CURLINFO_HTTP_CODE);
            LogRequest::log($startTime, $url, 'POST', json_encode([]), json_decode($response), $httpcode, \App\Http\Controllers\ScrapController::class, 'getLatestLog');

            curl_close($curl);

            if (! empty($response)) {
                $response = json_decode($response);

                \Log::info(print_r($response, true));

                if ((isset($response->status) && $response->status == "Didn't able to find file of given scrapper") || empty($response->log)) {
                    echo 'Sorry , no log was return from server';
                    exit;
                } else {
                    if (! empty($response->log)) {
                        $file = "$request->server_id-$scraper->scraper_name.txt";
                        header('Content-Description: File Transfer');
                        header('Content-type: application/octet-stream');
                        header('Content-disposition: attachment; filename= ' . $file . '');
                        $log = base64_decode($response->log);

                        if (! empty($log)) {
                            $api_log               = new ScrapApiLog;
                            $api_log->scraper_id   = $scraper->id;
                            $api_log->server_id    = $request->server_id;
                            $api_log->log_messages = $log;
                            $api_log->save();
                        }
                    }
                }
            } else {
                abort(404);
            }
        }
    }

    /**
     * @SWG\GET(
     *   path="/scrape/auto-restart",
     *   tags={"Scrape​r"} ,
     *   summary="Check scraper is auto restart ?",
     *   operationId="scrape-auto-restart",
     *
     *   @SWG\Response(response=200, description="Success"),
     *   @SWG\Response(response=500, description="Required field is missing"),
     *
     *      @SWG\Parameter(
     *          name="website",
     *          in="formData",
     *          required=true,
     *          type="string"
     *      )
     * )
     */
    public function needToAutoRestart(Request $request)
    {
        if (empty($request->website)) {
            return response()->json(['code' => 500, 'data' => [], 'message' => 'website (scraper name) is required field']);
        }

        $scraper = \App\Scraper::where('scraper_name', $request->website)->first();

        if (! $scraper) {
            return response()->json(['code' => 500, 'data' => [], 'message' => 'website (scraper name) is  wrong']);
        }

        return response()->json(['code' => 200, 'auto_restart' => $scraper->auto_restart]);
    }

    /**
     * @SWG\GET(
     *   path="/scrape/update-restart-time",
     *   tags={"Scrape​r"} ,
     *   summary="Update scraper restart time",
     *   operationId="scrape-update-restart-time",
     *
     *   @SWG\Response(response=200, description="History saved successfully"),
     *   @SWG\Response(response=500, description="Required field is missing"),
     *
     *      @SWG\Parameter(
     *          name="website",
     *          in="formData",
     *          required=true,
     *          type="string"
     *      )
     * )
     */
    public function updateRestartTime(Request $request)
    {
        if (empty($request->website)) {
            return response()->json(['code' => 500, 'data' => [], 'message' => 'website (scraper name) is required field']);
        }

        $scraper = \App\Scraper::where('scraper_name', $request->website)->first();

        if (! $scraper) {
            return response()->json(['code' => 500, 'data' => [], 'message' => 'website (scraper name) is wrong']);
        }

        $remark_entry = \App\ScrapRemark::create([
            'scraper_name' => $scraper->scraper_name,
            'scrap_field'  => 'update-restart-time',
            'new_value'    => date('Y-m-d H:i:s'),
            'scrap_id'     => $scraper->id,
        ]);

        return response()->json(['code' => 200, 'data' => [], 'message' => 'History saved successfully']);
    }

    public function getServerStatistics(Request $request)
    {
        $servers  = Scraper::whereNotNull('server_id')->groupBy('server_id')->pluck('server_id', 'id')->toArray();
        $scrapers = Scraper::whereNotNull('server_id');

        if ($request->has('q') && ! empty($request->get('q'))) {
            $scrapers->where('scraper_name', 'LIKE', '%' . $request->get('q') . '%');
        }
        $scrapers = $scrapers->select('id', 'server_id', 'scraper_name', 'scraper_start_time')->get();
        $data     = [];
        foreach ($scrapers as $scraper) {
            if ($scraper->scraper_start_time >= 0 && $scraper->scraper_start_time <= 3) {
                $data[$scraper->server_id][3][] = $scraper->scraper_name;
            } elseif ($scraper->scraper_start_time > 3 && $scraper->scraper_start_time <= 6) {
                $data[$scraper->server_id][6][] = $scraper->scraper_name;
            } elseif ($scraper->scraper_start_time > 6 && $scraper->scraper_start_time <= 9) {
                $data[$scraper->server_id][9][] = $scraper->scraper_name;
            } elseif ($scraper->scraper_start_time > 9 && $scraper->scraper_start_time <= 12) {
                $data[$scraper->server_id][12][] = $scraper->scraper_name;
            } elseif ($scraper->scraper_start_time > 12 && $scraper->scraper_start_time <= 15) {
                $data[$scraper->server_id][15][] = $scraper->scraper_name;
            } elseif ($scraper->scraper_start_time > 15 && $scraper->scraper_start_time <= 18) {
                $data[$scraper->server_id][18][] = $scraper->scraper_name;
            } elseif ($scraper->scraper_start_time > 18 && $scraper->scraper_start_time <= 21) {
                $data[$scraper->server_id][21][] = $scraper->scraper_name;
            } elseif ($scraper->scraper_start_time > 21 && $scraper->scraper_start_time <= 24) {
                $data[$scraper->server_id][24][] = $scraper->scraper_name;
            }
        }

        return view()->make('scrap.server-statistics', compact('servers', 'data'));
    }

    public function getPythonLog(Request $request)
    {
        $storeWebsites = ['sololuxury', 'avoir-chic', 'brands-labels', 'o-labels', 'suvandnat', 'veralusso'];
        $devices       = ['mobile', 'desktop', 'tablet'];

        if ($request->website || $request->created_at) {
            $query = ScrapPythonLog::orderby('updated_at', 'desc');

            if (request('created_at') != null) {
                $query->whereDate('created_at', request('created_at'));
            }
            if (request('website') != null) {
                $query->where('website', 'LIKE', "%{$request->website}%");
            }

            $paginate = (Setting::get('pagination') * 10);
            $logs     = $query->paginate($paginate)->appends(request()->except(['page']));
        } else {
            $paginate = (Setting::get('pagination') * 10);
            $logs     = ScrapPythonLog::orderby('created_at', 'desc')->paginate($paginate);
        }

        if ($request->ajax()) {
            return response()->json([
                'tbody' => view('scrap.partials.python_logdata', compact('logs'))->render(),
                'links' => (string) $logs->render(),
                'count' => $logs->total(),
            ], 200);
        }

        return view('scrap.python_log', compact('logs', 'storeWebsites', 'devices'));
    }

    public function loginstance(Request $request)
    {
        $url  = '167.86.88.58:5000/get-logs ';
        $date = ($request->date != '') ? \Carbon\Carbon::parse($request->date)->format('m-d-Y') : '';

        $data = [];
        if (! empty($date)) {
            $data = ['website' => $request->website, 'date' => $date, 'device' => $request->device];
        } else {
            return response()->json([
                'type'     => 'error',
                'response' => 'Please select Date',
            ], 200);
        }
        $insertData = $data;
        $data       = json_encode($data);
        $ch         = curl_init($url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
        curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: application/json', 'accept: application/json']);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
        $result1 = curl_exec($ch);

        if ($result1 == 'Log File Not Found') {
            $insertData['log_text'] = $result1;
        } else {
            $file_name = 'python_logs/python_site_log_' . $insertData['website'] . '_' . $insertData['device'] . '.log';
            Storage::put($file_name, $result1);
            $insertData['log_text'] = url('/storage/app/' . $file_name);
        }

        ScrapPythonLog::create($insertData);
        $result = explode("\n", $result1);

        if (count($result) > 1) {
            return response()->json([
                'type'     => 'success',
                'response' => view('instagram.hashtags.partials.get_status', compact('result'))->render(),
            ], 200);
        } else {
            return response()->json([
                'type'     => 'error',
                'response' => 'Log File Not Found',
            ], 200);
        }
    }

    public function showProductStat(Request $request)
    {
        $products    = [];
        $brands_list = Brand::whereNull('deleted_at')->pluck('name', 'id');

        if (! empty($request->has('brands'))) {
            $brands    = Brand::whereNull('deleted_at')->whereIn('id', $request->get('brands'))->get();
            $suppliers = DB::table('scraped_products')->selectRaw('DISTINCT(`website`)')->pluck('website');

            foreach ($suppliers as $supplier) {
                foreach ($brands as $brand) {
                    $products[$supplier][$brand->name] = ScrapedProducts::where('website', $supplier)
                        ->where('brand_id', $brand->id);
                    if (! empty($request->get('start_date')) && ! empty($request->get('end_date'))) {
                        if ($request->get('start_date') != null && $request->get('end_date') != null) {
                            $products[$supplier][$brand->name] = $products[$supplier][$brand->name]->whereBetween('created_at', [$request->get('start_date'), $request->get('end_date')]);
                        }
                    }

                    $products[$supplier][$brand->name] = $products[$supplier][$brand->name]->count();
                }
            }
        }

        return view('scrap.scraped_product_data', compact('products', 'request', 'brands_list'));
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/ScrapLogsController.php 
Content: <?php

namespace App\Http\Controllers;

use File;
use Carbon\Carbon;
use App\DatabaseLog;
use Illuminate\Support\Str;
use Illuminate\Http\Request;
use App\SlowLogsEnableDisable;
use Illuminate\Support\Facades\DB;

class ScrapLogsController extends Controller
{
    public function index(Request $Request)
    {
        $name    = '';
        $servers = \App\Scraper::select('server_id')->whereNotNull('server_id')->groupBy('server_id')->get();

        $scrapLogsStatus = \App\LogMessageStatus::all();

        return view('scrap-logs.index', compact('name', 'servers', 'scrapLogsStatus'));
    }

    public function updateLogStatus(Request $request)
    {
        $input = $request->input();
        \App\LogMessageStatus::where('id', $input['id'])->update(['status' => $input['log_status']]);

        return 'success';
    }

    public function filter($searchVal, $dateVal, Request $request)
    {
        if (! empty($request->get('month'))) {
            $month = $request->get('month');
        } else {
            $month = Carbon::now()->format('M');
        }

        if (! empty($request->get('year'))) {
            $month .= $request->get('year');
        } else {
            $month .= Carbon::now()->format('y');
        }

        $serverArray = [];
        $servers     = \App\Scraper::select('server_id')->whereNotNull('server_id')->groupBy('server_id')->get();
        if ($request->server_id !== null) {
            $servers = \App\Scraper::select('server_id')->where('server_id', $request->server_id)->groupBy('server_id')->get();
        }
        foreach ($servers as $server) {
            $serverArray[] = $server['server_id'];
        }

        $searchVal = $searchVal != 'null' ? $searchVal : '';
        $dateVal   = $dateVal != 'null' ? $dateVal : '';
        $file_list = [];

        $files = File::allFiles(config('env.SCRAP_LOGS_FOLDER'));

        $date = $dateVal;

        $date = strlen($dateVal) == 1 ? "0$dateVal" : $dateVal;

        $lines        = [];
        $log_status   = '';
        $status_lists = DB::table('scrapper_log_status')->get();

        foreach ($files as $key => $val) {
            $day_of_file = explode('-', $val->getFilename());
            $day_of_file = str_replace('.log', '', $day_of_file);

            if (((end($day_of_file) == $date) || (isset($day_of_file[1]) and strtolower($day_of_file[1]) == strtolower($date . $month))) && (Str::contains($val->getFilename(), $searchVal) || empty($searchVal))) {
                if (! in_array($val->getRelativepath(), $serverArray)) {
                    continue;
                }

                $file_path_new = env('SCRAP_LOGS_FOLDER') . '/' . $val->getRelativepath() . '/' . $val->getFilename();

                $file = file($file_path_new);

                $log_msg = '';
                for ($i = max(0, count($file) - 3); $i < count($file); $i++) {
                    $log_msg .= $file[$i];
                }

                $file_path_info = pathinfo($val->getFilename());
                $file_name_str  = $file_path_info['filename'];
                $file_name_ss   = $val->getFilename();

                $lines[] = "=============== $file_name_ss log started from here ===============";

                for ($i = max(0, count($file) - 10); $i < count($file); $i++) {
                    $lines[] = $file[$i];
                }

                $lines[] = "=============== $file_name_ss log ended from here ===============";
                if ($log_msg != '') {
                    foreach ($status_lists as $key => $value) {
                        if (stripos(strtolower($log_msg), $value->text) !== false) {
                            $log_status = $value->status;
                        }
                    }
                }
                if ($log_msg == '') {
                    $log_msg = 'Log data not found.';
                }
                $logStatus = \App\LogMessageStatus::firstOrCreate(['log_message' => $log_msg], ['log_message' => $log_msg]);

                array_push($file_list, [
                    'filename'   => $file_name_ss,
                    'foldername' => $val->getRelativepath(),
                    'log_msg'    => $log_msg,
                    //	"status"=>$log_status,
                    'status'     => $logStatus['status'],
                    'scraper_id' => $file_name_str,
                ]
                );
            }
        }

        //config
        if (strtolower(request('download')) == 'yes') {
            $nameF    = 'scraper-log-temp-file.txt';
            $namefile = storage_path() . '/logs/' . $nameF;
            $content  = implode("\n", $lines);

            //save file
            $file = fopen($namefile, 'w') or exit('Unable to open file!');
            fwrite($file, $content);
            fclose($file);

            //header download
            header('Content-Disposition: attachment; filename="' . $nameF . '"');
            header('Content-Type: application/force-download');
            header('Expires: 0');
            header('Cache-Control: must-revalidate');
            header('Pragma: public');
            header('Content-Type: text/plain');

            echo $content;
            exit;
        }

        return response()->json(['file_list' => $file_list]);
    }

    public function filtertosavelogdb()
    {
        $file_list = [];
        $searchVal = '';
        $dateVal   = '';
        $file_list = [];
        $files     = File::allFiles(config('env.SCRAP_LOGS_FOLDER'));

        $date = empty($dateVal) ? Carbon::now()->format('d') : sprintf('%02d', $dateVal);
        if ($date == 01) {
            $date = 32;
        }

        foreach ($files as $key => $val) {
            $day_of_file = explode('-', $val->getFilename());
            if (Str::contains(end($day_of_file), sprintf('%02d', $date - 1)) && (Str::contains($val->getFilename(), $searchVal) || empty($searchVal))) {
                $file_path_new = config('env.SCRAP_LOGS_FOLDER') . '/' . $val->getRelativepath() . '/' . $val->getFilename();

                $file    = file($file_path_new);
                $log_msg = '';
                for ($i = max(0, count($file) - 3); $i < count($file); $i++) {
                    $log_msg .= $file[$i];
                }
                if ($log_msg == '') {
                    $log_msg = 'Log data not found.';
                }
                $file_path_info = pathinfo($val->getFilename());

                $search_scraper = substr($file_path_info['filename'], 0, -3);
                $search_scraper = str_replace('-', '_', $search_scraper);
                $scrapers_info  = DB::table('scrapers')
                    ->select('id')
                    ->where('scraper_name', 'like', $search_scraper)
                    ->get();

                if (count($scrapers_info) > 0) {
                    $scrap_logs_info = DB::table('scrap_logs')
                        ->select('id', 'scraper_id')
                        ->where('scraper_id', '=', $scrapers_info[0]->id)
                        ->get();
                    $scrapers_id = $scrapers_info[0]->id;
                } else {
                    $scrapers_id = 0;
                }

                if (count($scrap_logs_info) == 0) {
                    $file_list_data = [
                        'scraper_id'   => $scrapers_id,
                        'folder_name'  => $val->getRelativepath(),
                        'file_name'    => $val->getFilename(),
                        'log_messages' => $log_msg,
                        'created_date' => date('Y-m-d H:i:s'),
                        'updated_date' => date('Y-m-d H:i:s'),
                    ];
                    DB::table('scrap_logs')->insert($file_list_data);
                }
            }
        }
    }

    public function logdata()
    {
        return \App\ScrapRemark::select('scraper_name', 'remark', \DB::raw('count(*) as log_count'), \DB::raw("group_concat(scraper_name SEPARATOR ' ') as scraper_name"))
            ->where('scrap_field', 'last_line_error')
            ->whereDate('created_at', date('Y-m-d'))
            ->groupBy('remark')
            ->get();
    }

    public function loghistory($filename)
    {
        $day_of_file = explode('-', $filename);
        $day_of_file = str_replace('.log', '', $day_of_file);

        $fileLogs = [];

        $scraper = \App\Scraper::where('scraper_name', $day_of_file[0])->first();
        if ($scraper) {
            $toDate   = date('Y-m-d', strtotime('+1 day'));
            $fromDate = date('Y-m-d', strtotime('-7 days'));
            $fileLogs = \App\ScrapLog::where('scraper_id', $scraper->id)->whereBetween('created_at', [$fromDate, $toDate])->get();
        }

        return $fileLogs;
    }

    public function fetchlog()
    {
        $file_list       = [];
        $scrap_logs_info = DB::table('scrap_logs')
            ->select('*')
            ->get();
        foreach ($scrap_logs_info as $row_log) {
            array_push($file_list, [
                'filename'   => $row_log->file_name,
                'foldername' => $row_log->folder_name,
                'log_msg'    => $row_log->log_messages,
                'scraper_id' => $row_log->scraper_id,
            ]
            );
        }

        return response()->json(['file_list' => $file_list]);
    }

    public function history(Request $request)
    {
        $day_of_file = explode('-', $request->filename);
        $day_of_file = str_replace('.log', '', $day_of_file);

        $cdate     = Carbon::now()->subDays(7);
        $last7days = \App\ScrapRemark::where('scraper_name', 'like', $day_of_file[0])->where('created_at', '>=', $cdate)->get();

        return $last7days;
    }

    public function fileView($filename, $foldername)
    {
        $path = config('env.SCRAP_LOGS_FOLDER') . '/' . $foldername . '/' . $filename;

        return response()->file($path);
    }

    public function indexByName($name)
    {
        $name = strtolower(str_replace(' ', '', $name));

        return view('scrap-logs.index', compact('name'));
    }

    public function databaseLog(Request $request)
    {
        $search       = '';
        $databaseLogs = DatabaseLog::orderBy('created_at', 'desc');
        $logBtn       = SlowLogsEnableDisable::orderBy('id', 'desc')->first();
        if ($request->search) {
            $databaseLogs = $databaseLogs->where('log_message', 'Like', '%' . $search . '%')->paginate(25);
        } else {
            $databaseLogs = $databaseLogs->paginate(25);
        }

        return view('scrap-logs.database-log', compact('databaseLogs', 'search', 'logBtn'));
    }

    public function enableMysqlAccess(Request $request)
    {
        $cmd         = 'bash ' . getenv('DEPLOYMENT_SCRIPTS_PATH') . 'mysql-slowlogs.sh -f enable';
        $allOutput   = [];
        $allOutput[] = $cmd;
        $result      = exec($cmd, $allOutput);

        if ($result == '') {
            $result = 'Not any response';
        } else {
            $result = is_array($result) ? json_encode($result, true) : $result;
        }
        SlowLogsEnableDisable::create([
            'user_id'  => \Auth::user()->id ?? '',
            'response' => $result,
            'type'     => 'Enable',
        ]);

        return redirect()->back()->with('success', 'Slow Logs enable successfully.');
    }

    public function disableMysqlAccess(Request $request)
    {
        $cmd         = 'bash ' . getenv('DEPLOYMENT_SCRIPTS_PATH') . 'mysql-slowlogs.sh -f disable';
        $allOutput   = [];
        $allOutput[] = $cmd;
        $result      = exec($cmd, $allOutput);

        if ($result == '') {
            $result = 'Not any response';
        } else {
            $result = is_array($result) ? json_encode($result, true) : $result;
        }
        SlowLogsEnableDisable::create([
            'user_id'  => \Auth::user()->id ?? '',
            'response' => $result,
            'type'     => 'Disable',
        ]);

        return redirect()->back()->with('success', 'Slow Logs disable successfully.');
    }

    public function disableEnableHistory(Request $request)
    {
        try {
            $data = SlowLogsEnableDisable::select('slow_logs_enable_disables.*', 'users.name AS userName')
                ->leftJoin('users', 'slow_logs_enable_disables.user_id', 'users.id')
                ->orderBy('slow_logs_enable_disables.id', 'DESC')
                ->get();

            return response()->json(['code' => 200, 'data' => $data, 'message' => 'Listed successfully!!!']);
        } catch (Exception $e) {
            $msg = $e->getMessage();

            return response()->json(['code' => 500, 'data' => [], 'message' => $msg]);
        }
    }

    public function databaseTruncate(Request $request)
    {
        try {
            $data = DatabaseLog::query()->truncate();

            return response()->json(['code' => 200, 'data' => $data, 'message' => 'Datalog Truncated successfully!!!']);
        } catch (Exception $e) {
            $msg = $e->getMessage();

            return response()->json(['code' => 500, 'data' => [], 'message' => $msg]);
        }
    }

    public function store(Request $request)
    {
        $data = [
            'text'   => strtolower($request->errortext),
            'status' => strtolower($request->errorstatus),
        ];

        DB::table('scrapper_log_status')->insert($data);

        return redirect()->back()->with('success', 'New status created successfully.');
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/ScrapStatisticsController.php 
Content: <?php

namespace App\Http\Controllers;

use Auth;
use App\User;
use Exception;
use App\Scraper;
use Carbon\Carbon;
use App\ScrapRemark;
use App\ScrapHistory;
use App\DeveloperTask;
use App\ScraperProcess;
use App\ScrapStatistics;
use Illuminate\Http\Request;
use App\Models\DataTableColumn;
use App\Exports\ScrapRemarkExport;
use Illuminate\Support\Facades\DB;
use App\Models\ScrapStatisticsStaus;
use Maatwebsite\Excel\Facades\Excel;
use Zend\Diactoros\Response\JsonResponse;
use Plank\Mediable\Facades\MediaUploader as MediaUploader;

class ScrapStatisticsController extends Controller
{
    /**
     * @SWG\Get(
     *   path="/stat",
     *   tags={"Statistic"},
     *   summary="Get Statistics",
     *   operationId="get-statistics",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *   @SWG\Response(response=406, description="not acceptable"),
     *   @SWG\Response(response=500, description="internal server error"),
     *
     *      @SWG\Parameter(
     *          name="mytest",
     *          in="path",
     *          required=true,
     *          type="string"
     *      ),
     * )
     */
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request)
    {
        // Set dates
        $endDate    = date('Y-m-d H:i:s');
        $keyWord    = $request->get('term', '');
        $madeby     = $request->get('scraper_made_by', 0);
        $scrapeType = $request->get('scraper_type', 0);

        $timeDropDown = self::get_times();

        $serverIds             = Scraper::groupBy('server_id')->where('server_id', '!=', null)->pluck('server_id');
        $getLatestOptimization = \App\ScraperServerStatusHistory::whereRaw('id in (
            SELECT MAX(id)
            FROM scraper_server_status_histories
            GROUP BY server_id
        )')
            ->pluck('in_percentage', 'server_id')->toArray();

        // Get active suppliers
        $activeSuppliers = Scraper::with([
            'scraperDuration' => function ($q) {
                $q->orderBy('id', 'desc');
            },
            'scrpRemark' => function ($q) {
                $q->whereNull('scrap_field')->where('user_name', '!=', '')->orderBy('created_at', 'desc');
            },
            'latestMessageNew' => function ($q) {
                $q->whereNotIn('chat_messages.status', ['7', '8', '9', '10'])
                    ->take(1)
                    ->orderBy('id', 'desc');
            },
            'lastErrorFromScrapLogNew',
            'developerTaskNew',
            'scraperMadeBy',
            'childrenScraper.scraperMadeBy',
            'mainSupplier',

        ])
            ->withCount('childrenScraper')
            ->join('suppliers as s', 's.id', 'scrapers.supplier_id')
            ->where('supplier_status_id', 1)
            ->whereIn('scrapper', [1, 2])
            ->whereNull('parent_id');

        if (! empty($keyWord)) {
            $activeSuppliers->where(function ($q) use ($keyWord) {
                $q->where('s.supplier', 'like', "%{$keyWord}%")
                    ->orWhere('scrapers.scraper_name', 'like', "%{$keyWord}%");
            });
        }

        if ($madeby > 0) {
            $activeSuppliers->where('scrapers.scraper_made_by', $madeby);
        }

        if ($request->get('scrapers_status', '') != '') {
            $activeSuppliers->where('scrapers.status', $request->get('scrapers_status', ''));
        }

        if ($scrapeType > 0) {
            $activeSuppliers->where('scraper_type', $scrapeType);
        }

        if ($request->task_assigned_to > 0) {
            $activeSuppliers->whereRaw('scrapers.id IN (SELECT scraper_id FROM developer_tasks WHERE assigned_to = ' . $request->task_assigned_to . ' and scraper_id > 0)');
        }

        $activeSuppliers = $activeSuppliers->orderby('scrapers.flag', 'desc')->orderby('s.supplier', 'asc');

        $ids = $activeSuppliers->pluck('supplier_id')->toArray();

        $activeSuppliers = $activeSuppliers->paginate(10);

        $suppliers = DB::table('products')
            ->select(DB::raw('count(*) as inventory'), 'supplier_id as id', DB::raw('max(created_at) as last_date'))
            ->groupBy('supplier_id')->orderBy('created_at', 'desc')->get();
        $data = [];

        foreach ($suppliers as $supplier) {
            if ($supplier->id !== null) {
                $data[$supplier->id]['inventory'] = $supplier->inventory;
                $data[$supplier->id]['last_date'] = $supplier->last_date;
            }
        }

        foreach ($activeSuppliers as $activeSupplier) {
            if (isset($data[$activeSupplier->supplier_id])) {
                $activeSupplier->inventory = $data[$activeSupplier->supplier_id]['inventory'];
                $activeSupplier->last_date = $data[$activeSupplier->supplier_id]['last_date'];
            } else {
                $activeSupplier->inventory = 0;
                $activeSupplier->last_date = null;
            }
        }
        // Get scrape data
        $yesterdayDate = date('Y-m-d', strtotime('-1 day'));
        $sql           = '
            SELECT
                s.id,
                s.supplier,
                sc.inventory_lifetime,
                sc.scraper_new_urls,
                sc.scraper_existing_urls,
                sc.scraper_total_urls,
                sc.scraper_start_time,
                sc.scraper_logic,
                sc.scraper_made_by,
                sc.server_id,
                sc.id as scraper_id,
                ls.website,
                ls.ip_address,
                COUNT(ls.id) AS total,
                SUM(IF(ls.validated=0,1,0)) AS failed,
                SUM(IF(ls.validated=1,1,0)) AS validated,
                SUM(IF(ls.validation_result LIKE "%[error]%",1,0)) AS errors,
                SUM(IF(ls.validation_result LIKE "%[warning]%",1,0)) AS warnings,
                SUM(IF(ls.created_at LIKE "%' . $yesterdayDate . '%",1,0)) AS total_new_product,
                MAX(ls.last_inventory_at) AS last_scrape_date,
                IF(MAX(ls.last_inventory_at) < DATE_SUB(NOW(), INTERVAL sc.inventory_lifetime DAY),0,1) AS running
            FROM
                suppliers s
            JOIN
                scrapers sc
            ON
                sc.supplier_id = s.id
            JOIN
                scraped_products ls
            ON
                sc.scraper_name=ls.website
            WHERE
                sc.scraper_name IS NOT NULL AND

                ' . ($request->excelOnly == 1 ? 'ls.website LIKE "%_excel" AND' : '') . '
                ' . ($request->excelOnly == -1 ? 'ls.website NOT LIKE "%_excel" AND' : '') . '
                ls.last_inventory_at > DATE_SUB(NOW(), INTERVAL sc.inventory_lifetime DAY)
            GROUP BY
                sc.id
            ORDER BY
                sc.scraper_priority desc
        ';
        $scrapeData = DB::select($sql);

        $scrapper_total = count($scrapeData); //Purpose : Scrapper Count - DEVTASK-4219

        $allScrapperName = [];

        if (! empty($scrapeData)) {
            foreach ($scrapeData as $data) {
                if (isset($data->id) && $data->id > 0) {
                    $allScrapperName[$data->id] = $data->website;
                }
            }
        }

        /* Scrapper status count */

        $allStatus = Scraper::scrapersStatus();

        $allStatusCounts = \App\Scraper::join('suppliers as s', 's.id', 'scrapers.supplier_id')
            ->selectRaw('COUNT(s.id) as total_count, scrapers.status')
            ->whereIn('scrapers.status', $allStatus)
            ->where('supplier_status_id', 1)
            ->groupBy('scrapers.status')
            ->get()
            ->pluck('total_count', 'status');

        $lastRunAt = \DB::table('scraped_products')->groupBy('website')->select([\DB::raw('MAX(last_inventory_at) as last_run_at'), 'website'])->pluck('last_run_at', 'website')->toArray();

        $users       = \App\User::all()->pluck('name', 'id')->toArray();
        $allScrapper = Scraper::whereNull('parent_id')->pluck('scraper_name', 'id')->toArray();
        // Return view

        $datatableModel = DataTableColumn::select('column_name')->where('user_id', auth()->user()->id)->where('section_name', 'scrap-statistics')->first();

        $dynamicColumnsToShows = [];
        if (! empty($datatableModel->column_name)) {
            $hideColumns           = $datatableModel->column_name ?? '';
            $dynamicColumnsToShows = json_decode($hideColumns, true);
        }

        if ($request->ajax()) {
            if ($request->get('load-status')) {
                return view('scrap.ajax.status', compact('allStatus', 'allStatusCounts'))->render();
            }

            return view('scrap.ajax.stats', compact('allStatus', 'allStatusCounts', 'activeSuppliers', 'serverIds', 'scrapeData', 'users', 'allScrapperName', 'timeDropDown', 'lastRunAt', 'allScrapper', 'getLatestOptimization', 'scrapper_total', 'dynamicColumnsToShows'))->render();
        }

        return view('scrap.stats', compact('allStatus', 'allStatusCounts', 'activeSuppliers', 'serverIds', 'scrapeData', 'users', 'allScrapperName', 'timeDropDown', 'lastRunAt', 'allScrapper', 'getLatestOptimization', 'scrapper_total', 'dynamicColumnsToShows'));
    }

    public function ssstatusCreate(Request $request)
    {
        try {
            $status               = new ScrapStatisticsStaus();
            $status->status       = $request->status_name;
            $status->status_value = $request->status_name;
            $status->save();

            $statuses = Scraper::scrapersStatus();

            return response()->json(['code' => 200, 'message' => 'status Create successfully', 'data' => $statuses]);
        } catch (Exception $e) {
            $msg = $e->getMessage();

            return response()->json(['code' => 500, 'message' => $msg]);
        }
    }

    public function columnVisbilityUpdate(Request $request)
    {
        $userCheck = DataTableColumn::where('user_id', auth()->user()->id)->where('section_name', 'scrap-statistics')->first();

        if ($userCheck) {
            $column               = DataTableColumn::find($userCheck->id);
            $column->section_name = 'scrap-statistics';
            $column->column_name  = json_encode($request->column_s);
            $column->save();
        } else {
            $column               = new DataTableColumn();
            $column->section_name = 'scrap-statistics';
            $column->column_name  = json_encode($request->column_s);
            $column->user_id      = auth()->user()->id;
            $column->save();
        }

        return response()->json([
            'status' => 'success',
            'msg'    => 'column visiblity Added Successfully!',
        ]);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function quickView(Request $request)
    {
        $endDate    = date('Y-m-d H:i:s');
        $keyWord    = $request->get('term', '');
        $column     = request('column');
        $orderby    = request('order_by', 'desc');
        $madeby     = $request->get('scraper_made_by', 0);
        $scrapeType = $request->get('scraper_type', 0);

        $timeDropDown = self::get_times();

        $developerTasks = \App\DeveloperTask::where('scraper_id', $request->id)->latest()->get();

        $serverIds             = Scraper::groupBy('server_id')->where('server_id', '!=', null)->pluck('server_id');
        $getLatestOptimization = \App\ScraperServerStatusHistory::whereRaw('id in (
            SELECT MAX(id)
            FROM scraper_server_status_histories
            GROUP BY server_id
        )')
            ->pluck('in_percentage', 'server_id')->toArray();

        // Get active suppliers
        $activeSuppliers = Scraper::with([
            'scrpRemark' => function ($q) {
                $q->whereNull('scrap_field')->where('user_name', '!=', '')->orderBy('created_at', 'desc');
            },
            'latestMessageNew' => function ($q) {
                $q->whereNotIn('chat_messages.status', ['7', '8', '9', '10'])
                    ->take(1)
                    ->orderBy('id', 'desc');
            },
            'lastErrorFromScrapLogNew',
            'developerTaskNew',
            'scraperMadeBy',
            'childrenScraper.scraperMadeBy',
            'mainSupplier',
        ])
            ->withCount('childrenScraper')
            ->join('suppliers as s', 's.id', 'scrapers.supplier_id')
            ->where('supplier_status_id', 1)
            ->whereIn('scrapper', [1, 2])
            ->whereNull('parent_id');

        if (! empty($keyWord)) {
            $activeSuppliers->where(function ($q) use ($keyWord) {
                $q->where('s.supplier', 'like', "%{$keyWord}%")->orWhere('scrapers.scraper_name', 'like', "%{$keyWord}%");
            });
        }

        if (isset($request->assigned_to) && count($request->assigned_to)) {
            $activeSuppliers->whereHas('developerTaskNew', function ($q) use ($request) {
                $q->whereIn('assigned_to', $request->assigned_to);
            });
        }

        if (! empty($column) && $column == 'last_started_at') {
            $activeSuppliers = $activeSuppliers->orderby('scrapers.' . $column . '', $orderby)->get();
        } else {
            $activeSuppliers = $activeSuppliers->orderby('scrapers.flag', 'desc')->orderby('s.supplier', 'asc')->get();
        }

        $assignedUsers = [];
        if ($activeSuppliers) {
            foreach ($activeSuppliers as $_supplier) {
                $developerTasks = \App\DeveloperTask::where('scraper_id', $_supplier->id)->latest()->get();
                if ($developerTasks) {
                    foreach ($developerTasks as $_task) {
                        if (isset($_task->assigned_to) and isset($_task->assignedUser->name)) {
                            $assignedUsers[$_task->assigned_to] = $_task->assignedUser->name;
                        }
                    }
                }
            }
        }

        // Get scrape data
        $yesterdayDate = date('Y-m-d', strtotime('-1 day'));
        $sql           = '
            SELECT
                s.id,
                s.supplier,
                sc.inventory_lifetime,
                sc.scraper_new_urls,
                sc.scraper_existing_urls,
                sc.scraper_total_urls,
                sc.scraper_start_time,
                sc.scraper_logic,
                sc.scraper_made_by,
                sc.server_id,
                sc.id as scraper_id,
                ls.website,
                ls.ip_address,
                COUNT(ls.id) AS total,
                SUM(IF(ls.validated=0,1,0)) AS failed,
                SUM(IF(ls.validated=1,1,0)) AS validated,
                SUM(IF(ls.validation_result LIKE "%[error]%",1,0)) AS errors,
                SUM(IF(ls.validation_result LIKE "%[warning]%",1,0)) AS warnings,
                SUM(IF(ls.created_at LIKE "%' . $yesterdayDate . '%",1,0)) AS total_new_product,
                MAX(ls.last_inventory_at) AS last_scrape_date,
                IF(MAX(ls.last_inventory_at) < DATE_SUB(NOW(), INTERVAL sc.inventory_lifetime DAY),0,1) AS running
            FROM
                suppliers s
            JOIN
                scrapers sc
            ON
                sc.supplier_id = s.id
            JOIN
                scraped_products ls
            ON
                sc.supplier_id=ls.supplier_id
            WHERE
                sc.scraper_name IS NOT NULL AND

                ' . ($request->excelOnly == 1 ? 'ls.website LIKE "%_excel" AND' : '') . '
                ' . ($request->excelOnly == -1 ? 'ls.website NOT LIKE "%_excel" AND' : '') . '
                ls.last_inventory_at > DATE_SUB(NOW(), INTERVAL sc.inventory_lifetime DAY)
            GROUP BY
                sc.id
            ORDER BY
                ' . ($column == 'least_product' ? 'total_new_product ' . $orderby . ' ' : 'sc.scraper_priority DESC') . '
            ';

        $scrapeData = DB::select($sql);

        $allScrapperName = [];

        if (! empty($scrapeData)) {
            foreach ($scrapeData as $data) {
                if (isset($data->id) && $data->id > 0) {
                    $allScrapperName[$data->id] = $data->website;
                }
            }
        }

        $allStatus = Scraper::scrapersStatus();

        $allStatusCounts = \App\Scraper::join('suppliers as s', 's.id', 'scrapers.supplier_id')
            ->selectRaw('COUNT(s.id) as total_count, scrapers.status')
            ->whereIn('scrapers.status', $allStatus)
            ->where('supplier_status_id', 1)
            ->groupBy('scrapers.status')
            ->get()
            ->pluck('total_count', 'status');

        $lastRunAt = \DB::table('scraped_products')->groupBy('website')->select([\DB::raw('MAX(last_inventory_at) as last_run_at'), 'website'])->pluck('last_run_at', 'website')->toArray();

        $users       = \App\User::all()->pluck('name', 'id')->toArray();
        $allScrapper = Scraper::whereNull('parent_id')->pluck('scraper_name', 'id')->toArray();
        // Return view
        try {
            return view('scrap.quick-stats', compact('allStatusCounts', 'allStatus', 'activeSuppliers', 'serverIds', 'scrapeData', 'users', 'allScrapperName', 'timeDropDown', 'lastRunAt', 'allScrapper', 'getLatestOptimization', 'assignedUsers'));
        } catch (Exception $e) {
            \Log::error('Quick-stats-page :: ' . $e->getMessage());
        }
    }

    /**
     * Store a newly created resource in storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $this->validate($request, [
            'supplier' => 'required',
            'type'     => 'required',
            'url'      => 'required',
        ]);

        $stat              = new ScrapStatistics();
        $stat->supplier    = $request->get('supplier');
        $stat->type        = $request->get('type');
        $stat->url         = $request->get('url');
        $stat->description = $request->get('description');
        $stat->save();

        return response()->json([
            'status' => 'Added successfully!',
        ]);
    }

    /**
     * Display the specified resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function show(ScrapStatistics $scrapStatistics)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function edit(ScrapStatistics $scrapStatistics)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, ScrapStatistics $scrapStatistics)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function destroy(ScrapStatistics $scrapStatistics)
    {
        //
    }

    public function assetManager()
    {
        $start = Carbon::now()->format('Y-m-d 00:00:00');
        $end   = Carbon::now()->format('Y-m-d 23:59:00');

        return view('scrap.asset-manager');
    }

    public function showHistory(Request $request)
    {
        $remarks = ScrapRemark::where('scrap_id', $request->search)->where('scrap_field', $request->field);

        if (in_array($request->field, ['scraper_start_time', 'server_id', 'status'])) {
            $remarks = $remarks->where(function ($q) {
                $q->orWhere('old_value', '!=', '')->orWhere('new_value', '!=', '');
            });
        }

        $remarks = $remarks->get();

        return response()->json($remarks, 200);
    }

    public function getRemark(Request $request)
    {
        $name = $request->input('name');

        $remarks = ScrapRemark::where('scraper_name', $name)->where('user_name', '!=', '');

        if ($request->get('auto') == 'true') {
            $remarks = $remarks->whereNull('scrap_field');
        }

        $remarks = $remarks->latest()->get();

        $download = $request->input('download');

        return response()->json($remarks, 200);
    }

    public function addRemark(Request $request)
    {
        $remark     = $request->input('remark');
        $name       = $request->input('id');
        $created_at = date('Y-m-d H:i:s');
        $update_at  = date('Y-m-d H:i:s');
        $last_rec   = ''; //Purpose : Last Record - DEVTASK-4219

        if (! empty($remark)) {
            $remark_entry = ScrapRemark::create([
                'scraper_name' => $name,
                'remark'       => $remark,
                'user_name'    => Auth::user()->name,
            ]);

            $needToSend      = request()->get('need_to_send', false);
            $includeAssignTo = request()->get('inlcude_made_by', false);

            if ($needToSend == 1) {
                if (Auth::user()->phone != '' && Auth::user()->whatsapp_number != '') {
                    app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi(Auth::user()->phone, Auth::user()->whatsapp_number, 'SCRAPER-REMARK#' . $name . "\n" . $remark);
                }

                if ($includeAssignTo == 1) {
                    $scraper = \App\Scraper::where('scraper_name', $name)->first();
                    if ($scraper) {
                        $sendPer = $scraper->scraperMadeBy;
                        if ($sendPer) {
                            app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($sendPer->phone, $sendPer->whatsapp_number, 'SCRAPER-REMARK#' . $name . "\n" . $remark);
                        }
                    }
                }
            }

            $last_rec = ScrapRemark::latest()->first(); //Purpose : Last Record - DEVTASK-4219
        }

        return response()->json(['remark' => $remark, 'last_record' => $last_rec], 200); //Purpose : Send Last Record - DEVTASK-4219
    }

    public function updateField(Request $request)
    {
        $fieldName  = request()->get('field');
        $fieldValue = request()->get('field_value');
        $search     = request()->get('search');
        $remark     = request()->get('remark');
        $suplier    = \App\Scraper::where('supplier_id', $search)->first();

        if (! $suplier) {
            $suplier = \App\Scraper::find($search);
        }

        if ($suplier) {
            $oldValue = $suplier->{$fieldName};

            if ($fieldName == 'scraper_made_by') {
                $oldValue = ($suplier->scraperMadeBy) ? $suplier->scraperMadeBy->name : '';
            }

            if ($fieldName == 'parent_supplier_id') {
                $oldValue = ($suplier->scraperParent) ? $suplier->scraperParent->scraper_name : '';
            }

            $suplier->{$fieldName} = $fieldValue;
            $suplier->save();

            $suplier = \App\Scraper::where('supplier_id', $search)->first();

            if (! $suplier) {
                $suplier = \App\Scraper::find($search);
            }

            $newValue = $fieldValue;

            if ($fieldName == 'scraper_made_by') {
                $newValue = ($suplier->scraperMadeBy) ? $suplier->scraperMadeBy->name : '';
            }

            if ($fieldName == 'parent_supplier_id') {
                $newValue = ($suplier->scraperParent) ? $suplier->scraperParent->scraper_name : '';
            }

            $remark_entry = ScrapRemark::create([
                'scraper_name' => $suplier->scraper_name,
                'remark'       => "{$fieldName} updated old value was $oldValue and new value is $newValue",
                'user_name'    => Auth::user()->name,
                'scrap_field'  => $fieldName,
                'old_value'    => $oldValue,
                'new_value'    => $newValue,
                'scrap_id'     => $suplier->id,
            ]);

            if (! empty($remark)) {
                $remark_entry = ScrapRemark::create([
                    'scraper_name' => $suplier->scraper_name,
                    'remark'       => $remark,
                    'user_name'    => Auth::user()->name,
                    'scrap_id'     => $suplier->id,
                ]);
            }
        }

        return response()->json(['code' => 200, 'data' => $suplier]);
    }

    public function multipleUpdateField(Request $request)
    {
        $fieldName  = 'full_scrape';
        $fieldValue = 1;

        if (! empty($request->ids)) {
            foreach ($request->ids as $key => $value) {
                $search  = $value;
                $remark  = request()->get('remark');
                $suplier = \App\Scraper::where('supplier_id', $search)->first();

                if (! $suplier) {
                    $suplier = \App\Scraper::find($search);
                }

                if ($suplier) {
                    $oldValue = $suplier->{$fieldName};

                    if ($fieldName == 'scraper_made_by') {
                        $oldValue = ($suplier->scraperMadeBy) ? $suplier->scraperMadeBy->name : '';
                    }

                    if ($fieldName == 'parent_supplier_id') {
                        $oldValue = ($suplier->scraperParent) ? $suplier->scraperParent->scraper_name : '';
                    }

                    $suplier->{$fieldName} = $fieldValue;
                    $suplier->save();

                    $suplier = \App\Scraper::where('supplier_id', $search)->first();

                    if (! $suplier) {
                        $suplier = \App\Scraper::find($search);
                    }

                    $newValue = $fieldValue;

                    if ($fieldName == 'scraper_made_by') {
                        $newValue = ($suplier->scraperMadeBy) ? $suplier->scraperMadeBy->name : '';
                    }

                    if ($fieldName == 'parent_supplier_id') {
                        $newValue = ($suplier->scraperParent) ? $suplier->scraperParent->scraper_name : '';
                    }

                    $remark_entry = ScrapRemark::create([
                        'scraper_name' => $suplier->scraper_name,
                        'remark'       => "{$fieldName} updated old value was $oldValue and new value is $newValue",
                        'user_name'    => Auth::user()->name,
                        'scrap_field'  => $fieldName,
                        'old_value'    => $oldValue,
                        'new_value'    => $newValue,
                        'scrap_id'     => $suplier->id,
                    ]);

                    if (! empty($remark)) {
                        $remark_entry = ScrapRemark::create([
                            'scraper_name' => $suplier->scraper_name,
                            'remark'       => $remark,
                            'user_name'    => Auth::user()->name,
                            'scrap_id'     => $suplier->id,
                        ]);
                    }
                }
            }
        }

        return response()->json(['code' => 200]);
    }

    public function updateScrapperField(Request $request)
    {
        $fieldName  = request()->get('field');
        $fieldValue = request()->get('field_value');
        $search     = request()->get('search');

        $suplier = \App\Scraper::find($search);

        if (! $suplier) {
            return response()->json(['code' => 500]);
        }

        if ($suplier) {
            $oldValue = $suplier->{$fieldName};

            if ($fieldName == 'scraper_made_by') {
                $oldValue = ($suplier->scraperMadeBy) ? $suplier->scraperMadeBy->name : '';
            }

            if ($fieldName == 'parent_supplier_id') {
                $oldValue = ($suplier->scraperParent) ? $suplier->scraperParent->scraper_name : '';
            }

            $suplier->{$fieldName} = $fieldValue;
            $suplier->save();

            $suplier = \App\Scraper::where('supplier_id', $search)->first();

            if (! $suplier) {
                $suplier = \App\Scraper::find($search);
            }

            $newValue = $fieldValue;

            if ($fieldName == 'scraper_made_by') {
                $newValue = ($suplier->scraperMadeBy) ? $suplier->scraperMadeBy->name : '';
            }

            if ($fieldName == 'parent_supplier_id') {
                $newValue = ($suplier->scraperParent) ? $suplier->scraperParent->scraper_name : '';
            }

            $remark_entry = ScrapRemark::create([
                'scrap_id'     => $suplier->id,
                'scraper_name' => $suplier->scraper_name,
                'remark'       => "{$fieldName} updated old value was $oldValue and new value is $newValue",
                'user_name'    => Auth::user()->name,
                'scrap_field'  => $fieldName,
                'old_value'    => $oldValue,
                'new_value'    => $newValue,
            ]);
        }

        return response()->json(['code' => 200]);
    }

    public function updatePriority(Request $request)
    {
        $ids  = $request->get('ids');
        $prio = count($ids);

        if (! empty($ids)) {
            foreach ($ids as $k => $id) {
                if (isset($id['id'])) {
                    $scrap = \App\Scraper::where('supplier_id', $id['id'])->first();
                    if ($scrap) {
                        $scrap->scraper_priority = $prio;
                        $scrap->save();
                    }
                }
                $prio--;
            }
        }

        return response()->json(['code' => 200]);
    }

    public function getHistory(Request $request)
    {
        $field = $request->get('field', 'supplier');
        $value = $request->get('search', '0');

        $history = [];

        if ($value > 0) {
            if ($field == 'supplier') {
                $history = ScrapHistory::where('model', \App\Supplier::class)->join('users as u', 'u.id', 'scrap_histories.created_by')->where('model_id', $value)
                    ->orderBy('created_at', 'DESC')
                    ->select('scrap_histories.*', 'u.name as created_by_name')
                    ->get()
                    ->toArray();
            }
        }

        return response()->json(['code' => 200, 'data' => $history]);
    }

    private static function get_times($default = '19:00', $interval = '+60 minutes')
    {
        $output = [];

        $current = strtotime('00:00');
        $end     = strtotime('23:59');

        while ($current <= $end) {
            $time          = date('G', $current);
            $output[$time] = date('h.i A', $current);
            $current       = strtotime($interval, $current);
        }

        return $output;
    }

    public function getLastRemark(Request $request)
    {
        $lastRemark = \DB::select("select * from scrap_remarks as sr join ( SELECT MAX(id) AS id FROM scrap_remarks WHERE user_name != '' AND scrap_field IS NULL  GROUP BY scraper_name ) as max_s on sr.id =  max_s.id   join scrapers as scr on scr.scraper_name = sr.scraper_name  left join scrap_logs as scr_logs on scr_logs.scraper_id = scr.id  WHERE sr.user_name IS NOT NULL order by sr.scraper_name asc");

        $suppliers = DB::table('products')
            ->select(DB::raw('count(*) as inventory'), 'supplier_id as id', DB::raw('max(created_at) as last_date'))
            ->groupBy('supplier_id')->orderBy('created_at', 'desc')->get();
        $data = [];

        foreach ($suppliers as $supplier) {
            if ($supplier->id !== null) {
                $data[$supplier->id]['inventory'] = $supplier->inventory;
                $data[$supplier->id]['last_date'] = $supplier->last_date;
            }
        }

        foreach ($lastRemark as $lastRemar) {
            if (isset($data[$lastRemar->supplier_id])) {
                $lastRemar->inventory = $data[$lastRemar->supplier_id]['inventory'];
                $lastRemar->last_date = $data[$lastRemar->supplier_id]['last_date'];
            } else {
                $lastRemar->inventory = 0;
                $lastRemar->last_date = null;
            }
        }

        $download = $request->input('download');
        if (! empty($download)) {
            return Excel::download(new ScrapRemarkExport($lastRemark), 'remarks.csv');
        }

        return response()->json(['code' => 200, 'data' => $lastRemark]);
    }

    public function addNote(Request $request)
    {
        try {
            $this->validate($request, [
                'scraper_name' => 'required',
                'remark'       => 'required',
            ]);
            $remark = $request->remark;

            if (! empty($remark)) {
                $note = ScrapRemark::create([
                    'scraper_name' => $request->scraper_name,
                    'remark'       => $request->remark,
                    'user_name'    => Auth::user()->name,
                ]);

                if ($request->hasfile('image')) {
                    $media = MediaUploader::fromSource($request->file('image'))
                        ->toDirectory('scrap-note')
                        ->upload();
                    $note->attachMedia($media, config('constants.media_tags'));
                }
            }

            if ($request->ajax()) {
                return response()->json([
                    'status' => 'success',
                    'msg'    => 'Note added successfully.',
                ]);
            }

            session()->flash('success', 'Note added successfully.');

            return redirect()->back();
        } catch (Exception $e) {
            if ($request->ajax()) {
                return response()->json([
                    'status' => 'error',
                    'msg'    => $e->getMessage(),
                ]);
            }

            session()->flash('error', $e->getMessage());

            return redirect()->back();
        }
    }

    public function serverStatistics(Request $request)
    {
        try {
            $scrappers = Scraper::query();
            $scrap     = $scrappers->where('inventory_lifetime', '!=', 0)->where('server_id', '!=', '');

            if ($request->type) {
                if ($request->type == 'server_id_filter') {
                    if (! empty($request->order)) {
                        $scrappers->where('server_id', $request->order);
                    }
                } elseif ($request->type == 'filter_by_text') {
                    if (! empty($request->order)) {
                        $scrappers->where('scraper_name', 'LIKE', '%' . $request->order . '%');
                    }
                } else {
                    $scrappers->orderBy($request->type, $request->order);
                }
            }

            $scrappers = $scrap->paginate(50);

            $servers = Scraper::select('server_id')->whereNotNull('server_id')->groupBy('server_id')->get();

            if ($request->ajax()) {
                return response()->json([
                    'tbody' => view('scrap.partials.scrap-server-status-data', compact('scrappers', 'servers'))->with('i', ($request->input('page', 1) - 1) * 5)->render(),
                    'links' => (string) $scrappers->render(),
                    'count' => $scrappers->total(),
                ], 200);
            }

            return view('scrap.scrap-server-status', compact('scrappers', 'servers'));
        } catch (Exception $e) {
        }
    }

    public function serverStatisticsHistory($scrap_name)
    {
        try {
            $scrap_history = Scraper::where(['scraper_name' => $scrap_name])
                ->where('created_at', '>=', Carbon::now()->subDays(25)->toDateTimeString())
                ->get();

            return new JsonResponse(['status' => 1, 'message' => 'Scrapping history', 'data' => $scrap_history, 'name' => $scrap_name]);
        } catch (Exception $e) {
            return new JsonResponse(['status' => 0, 'message' => $e->getMessage()]);
        }
    }

    public function getScreenShot(Request $request)
    {
        $screenshots = \App\ScraperScreenshotHistory::where('scraper_id', $request->id)->latest()->paginate(15);

        return view('scrap.partials.screenshot-history', compact('screenshots'));
    }

    public function positionHistory(Request $request)
    {
        $histories = \App\ScraperPositionHistory::where('scraper_id', $request->id)->latest()->paginate(15);

        return view('scrap.partials.position-history', compact('histories'));
    }

    //STRAT - Purpose : Download  Position History - DEVTASK-4086
    public function positionHistorydownload(Request $request)
    {
        $histories = \App\ScraperPositionHistory::where('scraper_id', $request->id)->latest()->get();

        $chatFileData = '';
        $chatFileData .= html_entity_decode('Scraper Position History', ENT_QUOTES, 'UTF-8');
        $chatFileData .= "\n" . "\n";

        if (! $histories->isEmpty()) {
            foreach ($histories as $k => $v) {
                $chatFileData .= html_entity_decode('Scraper Name : ' . $v->scraper_name, ENT_QUOTES, 'UTF-8');
                $chatFileData .= "\n";
                $chatFileData .= html_entity_decode('Comment : ' . $v->comment, ENT_QUOTES, 'UTF-8');
                $chatFileData .= "\n";
                $chatFileData .= html_entity_decode('Created at : ' . $v->created_at, ENT_QUOTES, 'UTF-8');
                $chatFileData .= "\n" . "\n";
            }
        }

        $storagelocation = storage_path() . '/chatMessageFiles';
        if (! is_dir($storagelocation)) {
            mkdir($storagelocation, 0777, true);
        }
        $filename = 'Scraper_Position_History.txt';
        $file     = $storagelocation . '/' . $filename;
        $txt      = fopen($file, 'w') or exit('Unable to open file!');
        fwrite($txt, $chatFileData);
        fclose($txt);
        if ($chatFileData == '') {
            return response()->json([
                'downloadUrl' => '',
            ]);
        }

        return response()->json([
            'downloadUrl' => $file,
        ]);
    }

    //END - DEVTASK-4086

    public function taskList(Request $request)
    {
        $id = $request->id;

        if (isset($request->type) && $request->type == 'brand') {
            $developerTasks = \App\DeveloperTask::where('brand_id', $request->id)->latest()->get();
        } else {
            $developerTasks = \App\DeveloperTask::where('scraper_id', $request->id)->latest()->get();
        }

        $replies = \App\Reply::where('model', 'scrap-statistics')->whereNull('deleted_at')->pluck('reply', 'id')->toArray();

        return view('scrap.partials.task', compact('developerTasks', 'id', 'replies'));
    }

    public function taskListMultiple(Request $request)
    {
        $id = implode(',', $request->id);

        return view('scrap.partials.task-multiple', compact('id'));
    }

    public function killedList(Request $request)
    {
        $id = $request->id;

        $histories = \App\ScraperKilledHistory::where('scraper_id', $request->id)->latest()->get();

        return view('scrap.partials.killed', compact('histories', 'id'));
    }

    public function addReply(Request $request)
    {
        $reply     = $request->get('reply');
        $autoReply = [];
        // add reply from here
        if (! empty($reply)) {
            $autoReply = \App\Reply::updateOrCreate(
                ['reply' => $reply, 'model' => 'scrap-statistics', 'category_id' => 1],
                ['reply' => $reply]
            );
        }

        return response()->json(['code' => 200, 'data' => $autoReply]);
    }

    public function deleteReply(Request $request)
    {
        $id = $request->get('id');

        if ($id > 0) {
            $autoReply = \App\Reply::where('id', $id)->first();
            if ($autoReply) {
                $autoReply->delete();
            }
        }

        return response()->json([
            'code' => 200, 'data' => \App\Reply::where('model', 'scrap-statistics')
                ->whereNull('deleted_at')
                ->pluck('reply', 'id')
                ->toArray(),
        ]);
    }

    public function taskCreateMultiple(Request $request, $id)
    {
        $requestData = new Request();
        $requestData->setMethod('POST');

        if (isset($request->type) && $request->type == 'brand') {
            $scraper = \App\Brand::whereIn('id', explode(',', $id))->get();
        }

        if ($scraper) {
            foreach ($scraper as $_brand) {
                $requestData->request->add([
                    'priority'     => 1,
                    'issue'        => 'EXTERNAL SCRAPPER ' . $_brand->scraper_name,
                    'status'       => 'In Progress',
                    'module'       => 'Scraper',
                    'subject'      => 'EXTERNAL SCRAPPER ' . $_brand->scraper_name,
                    'assigned_to'  => $request->get('assigned_to'),
                    'scraper_id'   => $_brand->id,
                    'task_type_id' => 1,
                ]);

                if (isset($request->type) && $request->type == 'brand') {
                    $requestData->request->add([
                        'brand_id'   => $_brand->id,
                        'scraper_id' => '',
                        'subject'    => 'EXTERNAL SCRAPPER ' . $_brand->name,
                    ]);
                }

                app(\App\Http\Controllers\DevelopmentController::class)->issueStore($requestData, 'issue');
            }
        }

        return view('scrap.partials.task-multiple', compact('id'));
    }

    public function taskCreate(Request $request, $id)
    {
        $requestData = new Request();
        $requestData->setMethod('POST');

        $scraper = \App\Scraper::find($id);

        if (isset($request->type) && $request->type == 'brand') {
            $scraper = \App\Brand::find($id);
        }

        if ($scraper) {
            $requestData->request->add([
                'priority'     => 1,
                'issue'        => $request->task_description,
                'status'       => 'In Progress',
                'module'       => 'Scraper',
                'subject'      => $scraper->scraper_name . ' - ' . $request->task_subject,
                'assigned_to'  => $request->get('assigned_to'),
                'scraper_id'   => $id,
                'task_type_id' => 1,
            ]);

            if (isset($request->type) && $request->type == 'brand') {
                $requestData->request->add([
                    'brand_id'   => $id,
                    'scraper_id' => '',
                    'subject'    => 'EXTERNAL SCRAPPER ' . $scraper->name . ' - ' . $request->task_subject,
                ]);
            }

            app(\App\Http\Controllers\DevelopmentController::class)->issueStore($requestData, 'issue');
        }

        if (isset($request->type) && $request->type == 'brand') {
            $developerTasks = \App\DeveloperTask::where('brand_id', $request->id)->latest()->get();
        } else {
            $developerTasks = \App\DeveloperTask::where('scraper_id', $request->id)->latest()->get();
        }

        $replies = \App\Reply::where('model', 'scrap-statistics')->whereNull('deleted_at')->pluck('reply', 'id')->toArray();

        return view('scrap.partials.task', compact('developerTasks', 'id', 'replies'));
    }

    public function autoRestart(Request $request)
    {
        if ($request->status == 'on') {
            $affected = \DB::table('scrapers')->update(['auto_restart' => 1]);
        } else {
            $affected = \DB::table('scrapers')->update(['auto_restart' => 0]);
        }

        return redirect()->back();
    }

    public function positionAll()
    {
        $histories    = \App\ScraperPositionHistory::whereDate('created_at', now()->subDays(7)->format('Y-m-d'))->latest()->get();
        $chatFileData = '';
        $chatFileData .= html_entity_decode('Scraper Position History', ENT_QUOTES, 'UTF-8');
        $chatFileData .= "\n" . "\n";

        if (! $histories->isEmpty()) {
            foreach ($histories as $k => $v) {
                $chatFileData .= html_entity_decode('Scraper Name : ' . $v->scraper_name, ENT_QUOTES, 'UTF-8');
                $chatFileData .= "\n";
                $chatFileData .= html_entity_decode('Comment : ' . $v->comment, ENT_QUOTES, 'UTF-8');
                $chatFileData .= "\n";
                $chatFileData .= html_entity_decode('Created at : ' . $v->created_at, ENT_QUOTES, 'UTF-8');
                $chatFileData .= "\n" . "\n";
            }
        }

        $storagelocation = storage_path() . '/chatMessageFiles';
        if (! is_dir($storagelocation)) {
            mkdir($storagelocation, 0777, true);
        }
        $filename = 'Scraper_Position_History.txt';
        $file     = $storagelocation . '/' . $filename;
        $txt      = fopen($file, 'w') or exit('Unable to open file!');
        fwrite($txt, $chatFileData);
        fclose($txt);
        if ($chatFileData == '') {
            return response()->json([
                'downloadUrl' => '',
            ]);
        }

        return response()->json([
            'downloadUrl' => $file,
        ]);
    }

    public function serverStatusHistory(Request $request)
    {
        $statusHistory = \App\ScraperServerStatusHistory::whereDate('created_at', $request->date)->latest()->get();

        return view('scrap.partials.status-history', compact('statusHistory'));
    }

    public function serverStatusProcess(Request $request)
    {
        $statusHistory = \App\ScraperProcess::whereDate('created_at', $request->date)->orderBy('scraper_name', 'asc')->latest()->get();

        return view('scrap.partials.process-status-history', compact('statusHistory'));
    }

    public function getScraperServerTiming(Request $request)
    {
        \Artisan::call('check:scraper-running-status');

        $statusHistory = \App\ScraperServerStatusHistory::where('scraper_name', $request->scraper_name)->latest()->get();

        return view('scrap.partials.status-history', compact('statusHistory'));
    }

    public function getLastErrors(Request $request)
    {
        $remarks = \App\ScrapRemark::where('scrap_field', 'last_line_error')->where('scrap_id', $request->id)->get();

        return view('scrap.partials.scrap-remarks', compact('remarks'));
    }

    public function logDetails(Request $request)
    {
        $logDetails = \App\ScrapLog::where('scraper_id', $request->scrapper_id)->latest()->get();

        return view('scrap.partials.log-details', compact('logDetails'));
    }

    public function scrapperLogList(Request $request)
    {
        $logDetails = \App\ScrapLog::leftJoin('scrapers', 'scrapers.id', '=', 'scrap_logs.scraper_id')
            ->whereNull('folder_name')->select('scrap_logs.*', 'scrapers.scraper_name');

        $scrapname = '';
        $scrapdate = '';

        if ($request->scraper_name) {
            $scrapname = $request->scraper_name;
            $logDetails->where('scrapers.scraper_name', 'LIKE', '%' . $request->scraper_name . '%');
        }

        if ($request->created_at) {
            $scrapdate = $request->created_at;

            $logDetails->whereDate('scrap_logs.created_at', $request->created_at);
        }

        $logDetails = $logDetails->orderBy('id', 'desc')->paginate(50)->appends(request()->query());

        return view('scrap.log_list', compact('logDetails', 'scrapname', 'scrapdate'));
    }

    public function serverHistory(Request $request)
    {
        $requestedDate = request('planned_at', date('Y-m-d'));

        $totalServers = \App\ScraperServerStatusHistory::groupBy('server_id')->pluck('server_id')->toArray();

        $timeSlots        = [];
        $listOfServerUsed = [];
        for ($i = 0; $i < 24; $i++) {
            $tms               = strlen($i) > 1 ? $i : '0' . $i;
            $timeSlots["$tms"] = $tms;
            // check the scrapper which run on current time
            $scrapers = \App\ScraperServerStatusHistory::runOnGiveTime($requestedDate, $tms);
            if (! $scrapers->isEmpty()) {
                foreach ($scrapers as $s) {
                    $listOfServerUsed["$tms"][$s->server_id][] = [
                        'scraper_name'  => $s->scraper_name,
                        'memory_string' => 'T: ' . $s->total_memory . ' U:' . $s->used_memory . ' P:' . $s->in_percentage,
                        'pid'           => $s->pid,
                    ];
                }
            }
        }

        return view('scrap.server-history', compact('totalServers', 'timeSlots', 'requestedDate', 'listOfServerUsed'));
    }

    public function endJob(Request $request)
    {
        $pid    = $request->get('pid');
        $server = $request->get('server_id');

        $cmd = 'bash ' . getenv('DEPLOYMENT_SCRIPTS_PATH') . '/scraper-kill.sh ' . $server . ' ' . $pid . ' 2>&1';

        $allOutput   = [];
        $allOutput[] = $cmd;
        $result      = exec($cmd, $allOutput);

        \Log::info(print_r($result, true));

        return response()->json(['code' => 200, 'message' => 'Your job has been stopped']);
    }

    //START - Purpose : Add get data for scrappers - DEVTASK-20102
    public function view_scrappers_data(Request $request)
    {
        $scraper_proc = [];

        $scraper_process = ScraperProcess::where('scraper_name', '!=', '')->orderBy('started_at', 'DESC')->get()->unique('scraper_id');
        foreach ($scraper_process as $key => $sp) {
            $to            = \Carbon\Carbon::createFromFormat('Y-m-d H:s:i', $sp->started_at);
            $from          = \Carbon\Carbon::now();
            $diff_in_hours = $to->diffInMinutes($from);
            if ($diff_in_hours > 1440) {
                array_push($scraper_proc, $sp);
            }
        }
        $users    = User::pluck('name', 'id')->toArray();
        $scrapers = Scraper::leftJoin('users', 'users.id', '=', 'scrapers.assigned_to')->whereNotIn('id', $scraper_process->pluck('scraper_id'))->select('scrapers.*', 'users.email as assignedTo')->get();

        return view('scrap.scraper-process-list', compact('scraper_process', 'scrapers', 'users'));
    }

    //END - DEVTASK-20102

    public function assignScrapperIssue(Request $request)
    {
        $assigendTo      = $request->assigned_to;
        $scrapperDetails = Scraper::where('id', $request->scrapper_id)->first();
        if ($assigendTo != null and $scrapperDetails != null) {
            $hasAssignedIssue = DeveloperTask::where('scraper_id', $scrapperDetails->scrapper_id)->where('assigned_to', $assigendTo)
                ->where('is_resolved', 0)->first();
            if (! $hasAssignedIssue) {
                $requestData = new Request();
                $requestData->setMethod('POST');
                $requestData->request->add([
                    'priority'    => 1,
                    'issue'       => "Scraper didn't Run In Last 24 Hr",
                    'status'      => 'Planned',
                    'module'      => 'Scraper',
                    'subject'     => $scrapperDetails->scraper_name,
                    'assigned_to' => $assigendTo,
                ]);
                app(\App\Http\Controllers\DevelopmentController::class)->issueStore($requestData, $assigendTo);
            }
            Scraper::where('id', $request->scrapper_id)->update(['assigned_to' => $assigendTo]);
        }

        return 'success';
    }

    public function changeUser()
    {
        $insert = DB::insert('insert into `developer_tasks` (`priority`, `subject`, `task`, `responsible_user_id`, `assigned_to`, `module_id`, `user_id`, `assigned_by`, `created_by`, `reference`, `status`, `task_type_id`, `scraper_id`, `brand_id`, `updated_at`, `created_at`,`parent_id`,`estimate_date`,hubstaff_task_id)
        select `priority`, `subject`, `task`, `responsible_user_id`, "500", `module_id`, `user_id`, `assigned_by`, `created_by`, `reference`, `status`, `task_type_id`, `scraper_id`, `brand_id`, `updated_at`, `created_at`,`parent_id`,`estimate_date`,hubstaff_task_id from `developer_tasks` where`assigned_to` = 472 and `status` = "In Progress"');
        echo 'Data inserted successfully';
        exit;
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/Select2Controller.php 
Content: <?php

namespace App\Http\Controllers;

use DB;
use App\Task;
use App\User;
use App\Brand;
use App\Vendor;
use App\Category;
use App\Customer;
use App\Supplier;
use App\SopCategory;
use App\TaskCategory;
use App\DeveloperTask;
use App\ProductSupplier;
use App\DocumentCategory;
use Illuminate\Http\Request;
use App\CodeShortCutPlatform;
use App\Models\ZabbixWebhookData;
use App\Models\CodeShortcutFolder;
use App\TimeDoctor\TimeDoctorMember;
use Illuminate\Support\Facades\Auth;
use App\TimeDoctor\TimeDoctorAccount;
use App\TimeDoctor\TimeDoctorProject;

class Select2Controller extends Controller
{
    public function customers(Request $request)
    {
        $customers = Customer::select('id', 'name', 'email');

        if (! empty($request->q)) {
            $customers->where(function ($q) use ($request) {
                $q->where('name', 'LIKE', '%' . $request->q . '%')
                    ->orWhere('email', 'LIKE', '%' . $request->q . '%');
            });
        }

        $customers = $customers->paginate(30);

        $result['total_count']        = $customers->total();
        $result['incomplete_results'] = $customers->nextPageUrl() !== null;

        foreach ($customers as $customer) {
            $result['items'][] = [
                'id'   => $customer->id,
                'text' => $customer->name,
            ];
        }

        return response()->json($result);
    }

    public function suppliers(Request $request)
    {
        $suppliers = Supplier::select('id', 'supplier');

        if (! empty($request->q)) {
            $suppliers->where(function ($q) use ($request) {
                $q->where('supplier', 'LIKE', '%' . $request->q . '%')
                    ->orWhere('email', 'LIKE', '%' . $request->q . '%');
            });
        }
        $suppliers                    = $suppliers->paginate(30);
        $result['total_count']        = $suppliers->total();
        $result['incomplete_results'] = $suppliers->nextPageUrl() !== null;

        foreach ($suppliers as $supplier) {
            $result['items'][] = [
                'id'   => $supplier->id,
                'text' => $supplier->supplier,
            ];
        }

        return response()->json($result);
    }

    public function scrapedBrand(Request $request)
    {
        $scrapedBrandsRaw = Supplier::selectRaw('scraped_brands_raw')->whereNotNull('scraped_brands_raw')->get();
        $rawBrands        = [];

        foreach ($scrapedBrandsRaw as $key => $value) {
            array_push($rawBrands, array_unique(array_filter(array_column(json_decode($value->scraped_brands_raw, true), 'name'))));
        }

        $finalBrands = [];

        foreach ($rawBrands as $key => $brand) {
            $finalBrands += $brand;
        }
        $finalBrands = array_unique($finalBrands);
        if (! empty($request->q)) {
            $finalBrands = array_filter($finalBrands, function ($ele) use ($request) {
                return strpos(strtolower($ele), strtolower($request->q));
            });
        }
        foreach ($finalBrands as $key => $supplier) {
            if (strip_tags($supplier)) {
                $result['items'][] = [
                    'id'   => strip_tags($supplier),
                    'text' => strip_tags($supplier),
                ];
            }
            $result['total_count'] = count($finalBrands);
        }

        return response()->json($result);
    }

    public function updatedbyUsers(Request $request)
    {
        $suppliers = User::select('id', 'name');

        $suppliers = $suppliers->paginate(30);

        $result['total_count']        = $suppliers->total();
        $result['incomplete_results'] = $suppliers->nextPageUrl() !== null;

        foreach ($suppliers as $supplier) {
            $result['items'][] = [
                'id'   => $supplier->id,
                'text' => $supplier->name,
            ];
        }

        return response()->json($result);
    }

    public function users(Request $request)
    {
        $users = User::select('id', 'name', 'email');

        if (! empty($request->q)) {
            $users->where(function ($q) use ($request) {
                $q->where('name', 'LIKE', '%' . $request->q . '%')
                    ->orWhere('email', 'LIKE', '%' . $request->q . '%');
            });
        }

        $users = $users->orderBy('name', 'asc')->paginate(30);

        $result['total_count']        = $users->total();
        $result['incomplete_results'] = $users->nextPageUrl() !== null;

        foreach ($users as $user) {
            $text = $user->name;

            if ($request->get('format') === 'name-email') {
                $text = $user->name . ' - ' . $user->email;
            }

            $result['items'][] = [
                'id'   => $user->id,
                'text' => $text,
            ];
        }

        return response()->json($result);
    }

    public function users_vendors(Request $request)
    {
        $users = User::select('id', 'name', 'email');

        if (! empty($request->q)) {
            $users->where(function ($q) use ($request) {
                $q->where('name', 'LIKE', '%' . $request->q . '%')
                    ->orWhere('email', 'LIKE', '%' . $request->q . '%');
            });
        }

        $users = $users->orderBy('name', 'asc')->paginate(30);

        $result['total_count']        = $users->total();
        $result['incomplete_results'] = $users->nextPageUrl() !== null;

        foreach ($users as $user) {
            $text = $user->name;

            if ($request->get('format') === 'name-email') {
                $text = $user->name . ' - ' . $user->email;
            }

            $result['items'][] = [
                'id'   => $user->id,
                'text' => $text,
            ];
        }

        $vendors = Vendor::select('id', 'name', 'email');
        if (! empty($request->q)) {
            $vendors->where(function ($q) use ($request) {
                $q->where('name', 'LIKE', '%' . $request->q . '%')
                    ->orWhere('email', 'LIKE', '%' . $request->q . '%');
            });
        }
        $vendors = $vendors->paginate(30);

        $result_vendors['vendors_total_count']        = $vendors->total();
        $result_vendors['vendors_incomplete_results'] = $vendors->nextPageUrl() !== null;

        foreach ($vendors as $user) {
            $text = $user->name;

            if ($request->get('format') === 'name-email') {
                $text = $user->name . ' - ' . $user->email;
            }

            $result_vendors['items'][] = [
                'id'   => $user->id,
                'text' => $text,
            ];
        }

        array_push($result, $result_vendors);

        return response()->json($result);
    }

    public function allBrand(Request $request)
    {
        if (isset($request->sort)) {
            $brands = Brand::select('id', 'name')->orderBy('name', 'ASC');
        } else {
            $brands = Brand::select('id', 'name');
        }

        if (! empty($request->q)) {
            $brands->where(function ($q) use ($request) {
                $q->where('name', 'LIKE', $request->q . '%');
            });
        }

        $brands = $brands->paginate(30);

        $result['total_count']        = $brands->total();
        $result['incomplete_results'] = $brands->nextPageUrl() !== null;

        foreach ($brands as $brand) {
            $result['items'][] = [
                'id'   => $brand->id,
                'text' => $brand->name,
            ];
        }

        return response()->json($result);
    }

    public function allTasks(Request $request)
    {
        if (isset($request->sort)) {
            $tasks = DeveloperTask::select('id', 'subject')->where('subject', '<>', '');
        } else {
            $tasks = DeveloperTask::select('id', 'subject')->where('subject', '<>', '');
        }

        if (! empty($request->q)) {
            $tasks->where(function ($q) use ($request) {
                $q->where('id', 'LIKE', $request->q . '%')->orwhere('subject', 'LIKE', $request->q . '%')->get();
            });
        }
        $tasks = $tasks->paginate(30);

        if (! count($tasks)) {
            if (isset($request->sort)) {
                $tasks = Task::select('id', 'task_subject')->where('task_subject', '<>', '');
            } else {
                $tasks = Task::select('id', 'task_subject')->where('task_subject', '<>', '');
            }

            if (! empty($request->q)) {
                $tasks->where(function ($q) use ($request) {
                    $q->where('id', 'LIKE', $request->q . '%')->orwhere('task_subject', 'LIKE', $request->q . '%')->get();
                });
            }
            $tasks = $tasks->paginate(30);
        }
        $result['total_count']        = $tasks->total();
        $result['incomplete_results'] = $tasks->nextPageUrl() !== null;

        foreach ($tasks as $task) {
            $result['items'][] = [
                'id'   => $task->id,
                'text' => get_class($task) == \App\DeveloperTask::class ? '#DEVTASK-' . $task->id . '-' . $task->subject : '#TASK-' . $task->id . '-' . $task->task_subject,
            ];
        }

        return response()->json($result);
    }

    public function allCategory(Request $request)
    {
        $category = Category::select('id', 'title');

        if (! empty($request->q)) {
            $category->where(function ($q) use ($request) {
                $q->where('title', 'LIKE', $request->q . '%');
            });
        }

        $category = $category->paginate(30);

        $result['total_count']        = $category->total();
        $result['incomplete_results'] = $category->nextPageUrl() !== null;

        foreach ($category as $cat) {
            $result['items'][] = [
                'id'   => $cat->id,
                'text' => $cat->title,
            ];
        }

        return response()->json($result);
    }

    public function customersByMultiple(Request $request)
    {
        $term      = request()->get('q', null);
        $customers = \App\Customer::select('id', 'name', 'phone')->where('name', 'like', "%{$term}%")->orWhere('phone', 'like', "%{$term}%")->orWhere('id', 'like', "%{$term}%");

        $customers = $customers->paginate(30);

        $result['total_count']        = $customers->total();
        $result['incomplete_results'] = $customers->nextPageUrl() !== null;

        foreach ($customers as $customer) {
            $result['items'][] = [
                'id'   => $customer->id,
                'text' => '<strong>Name</strong>: ' . $customer->name . ' <strong>Phone</strong>: ' . $customer->phone,
            ];
        }

        return response()->json($result);
    }

    public function allWebsites(Request $request)
    {
        $term     = request()->get('q', null);
        $websites = \App\StoreWebsite::select('id', 'title');

        $websites = $websites->paginate(30);

        $result['total_count']        = $websites->total();
        $result['incomplete_results'] = $websites->nextPageUrl() !== null;

        foreach ($websites as $website) {
            $result['items'][] = [
                'id'   => $website->id,
                'text' => $website->title,
            ];
        }

        return response()->json($result);
    }

    public function timeDoctorAccounts(Request $request)
    {
        $time_doctor_accounts = TimeDoctorAccount::select('id', 'time_doctor_email');

        if (! empty($request->q)) {
            $time_doctor_accounts->where(function ($q) use ($request) {
                $q->where('time_doctor_email', 'LIKE', '%' . $request->q . '%');
            });
        }

        $time_doctor_accounts = $time_doctor_accounts->orderBy('time_doctor_email', 'asc')->paginate(30);

        $result['total_count']        = $time_doctor_accounts->total();
        $result['incomplete_results'] = $time_doctor_accounts->nextPageUrl() !== null;

        foreach ($time_doctor_accounts as $account) {
            $text = $account->time_doctor_email;

            $result['items'][] = [
                'id'   => $account->id,
                'text' => $text,
            ];
        }

        return response()->json($result);
    }

    public function timeDoctorAccountsForTask(Request $request)
    {
        $time_doctor_accounts = TimeDoctorAccount::select('id', 'time_doctor_email');

        if (! empty($request->q)) {
            $time_doctor_accounts->where(function ($q) use ($request) {
                $q->where('time_doctor_email', 'LIKE', '%' . $request->q . '%');
            });
        }

        // If I am the member of TimeDoctor, then get my latest time_doctor_account_id
        if (isset(Auth::user()->id)) {
            $myTimeDoctorMember = TimeDoctorMember::where('user_id', Auth::user()->id)->latest()->first();
            if ($myTimeDoctorMember) {
                // Check record exist, Otherwise it will ignore the below condition & get all the remaining accounts as usual.
                $accountExists = TimeDoctorAccount::where('id', $myTimeDoctorMember->time_doctor_account_id)->where('auth_token', '!=', '')->exists();
                if ($accountExists) {
                    $time_doctor_accounts = $time_doctor_accounts->where('id', $myTimeDoctorMember->time_doctor_account_id);
                }
            }
        }

        $time_doctor_accounts = $time_doctor_accounts->where('auth_token', '!=', '');

        $time_doctor_accounts = $time_doctor_accounts->orderBy('time_doctor_email', 'asc')->paginate(30);

        $result['total_count']        = $time_doctor_accounts->total();
        $result['incomplete_results'] = $time_doctor_accounts->nextPageUrl() !== null;

        foreach ($time_doctor_accounts as $account) {
            $text = $account->time_doctor_email;

            $result['items'][] = [
                'id'   => $account->id,
                'text' => $text,
            ];
        }

        return response()->json($result);
    }

    public function timeDoctorProjects(Request $request)
    {
        $time_doctor_projects = TimeDoctorProject::select('time_doctor_project_id', 'time_doctor_project_name');

        if (! empty($request->q)) {
            $time_doctor_projects->where(function ($q) use ($request) {
                $q->where('time_doctor_project_name', 'LIKE', '%' . $request->q . '%');
            });
        }
        if (! empty($request->account_id)) {
            $time_doctor_projects->where('time_doctor_account_id', $request->account_id);
        }

        $time_doctor_projects = $time_doctor_projects->orderBy('time_doctor_project_id', 'asc')->paginate(30);

        $result['total_count']        = $time_doctor_projects->total();
        $result['incomplete_results'] = $time_doctor_projects->nextPageUrl() !== null;

        foreach ($time_doctor_projects as $project) {
            $text = $project->time_doctor_project_name;

            $result['items'][] = [
                'id'   => $project->time_doctor_project_id,
                'text' => $text,
            ];
        }

        return response()->json($result);
    }

    public function timeDoctorProjectsAjax(Request $request)
    {
        $time_doctor_projects = TimeDoctorProject::select('time_doctor_project_id', 'time_doctor_project_name');

        if (! empty($request->q)) {
            $time_doctor_projects->where(function ($q) use ($request) {
                $q->where('time_doctor_project_name', 'LIKE', '%' . $request->q . '%');
            });
        }
        if (! empty($request->account_id)) {
            $time_doctor_projects->where('time_doctor_account_id', $request->account_id);
        }

        $time_doctor_projects = $time_doctor_projects->orderBy('time_doctor_project_id', 'asc')->get();
        $response_str         = "<option value=''>Select Project</option>";
        foreach ($time_doctor_projects as $project) {
            $response_str .= "<option value='" . $project->time_doctor_project_id . "'>" . $project->time_doctor_project_name . '</option>';
        }

        return $response_str;
    }

    public function taskCategory(Request $request)
    {
        if (! empty($request->q)) {
            $taskCategories = TaskCategory::where('is_approved', 1)
                ->where('parent_id', 0)
                ->where('title', 'LIKE', $request->q . '%')
                ->get()
                ->toArray();
        } else {
            $taskCategories = TaskCategory::where('is_approved', 1)
                ->where('parent_id', 0)
                ->get()
                ->toArray();
        }

        $result = [];

        if (empty($taskCategories)) {
            $result['items'][] = [
                'id'   => '',
                'text' => 'Category not available',
            ];
        } else {
            foreach ($taskCategories as $cat) {
                $result['items'][] = [
                    'id'   => $cat['id'],
                    'text' => $cat['title'],
                ];
            }
        }

        return response()->json($result);
    }

    public function zabbixWebhookData(Request $request)
    {
        $zabbixWebhookDatas = ZabbixWebhookData::select('id', 'subject')->whereNull('zabbix_task_id');

        if (! empty($request->q)) {
            $zabbixWebhookDatas->where(function ($q) use ($request) {
                $q->where('subject', 'LIKE', '%' . $request->q . '%');
            });
        }

        $zabbixWebhookDatas = $zabbixWebhookDatas->latest()->get();

        foreach ($zabbixWebhookDatas as $zabbixWebhookData) {
            $result['items'][] = [
                'id'   => $zabbixWebhookData->id,
                'text' => $zabbixWebhookData->subject,
            ];
        }

        return response()->json($result);
    }

    public function sopCategories(Request $request)
    {
        $sopCategories = SopCategory::select('id', 'category_name');

        if (! empty($request->q)) {
            $sopCategories->where(function ($q) use ($request) {
                $q->where('category_name', 'LIKE', '%' . $request->q . '%');
            });
        }

        $sopCategories = $sopCategories->latest()->get();

        foreach ($sopCategories as $sopCategory) {
            $result['items'][] = [
                'id'   => $sopCategory->id,
                'text' => $sopCategory->category_name,
            ];
        }

        return response()->json($result);
    }

    public function shortcutplatform(Request $request)
    {
        $dataPlatforms = CodeShortCutPlatform::select('id', 'name')->get();

        if (! empty($request->q)) {
            $dataPlatforms->where(function ($q) use ($request) {
                $q->where('subject', 'LIKE', '%' . $request->q . '%');
            });
        }

        $result = [];

        if (empty($dataPlatforms)) {
            $result['items'][] = [
                'id'   => '',
                'text' => 'Supplier not available',
            ];
        } else {
            foreach ($dataPlatforms as $dataPlatform) {
                $result['items'][] = [
                    'id'   => $dataPlatform->id,
                    'text' => $dataPlatform->name,
                ];
            }
        }

        return response()->json($result);
    }

    public function shortcutSuppliers(Request $request)
    {
        $dataSuppliers = Supplier::select('id', 'supplier')->get();

        if (! empty($request->q)) {
            $dataSuppliers->where(function ($q) use ($request) {
                $q->where('subject', 'LIKE', '%' . $request->q . '%');
            });
        }

        $result = [];

        if (empty($dataSuppliers)) {
            $result['items'][] = [
                'id'   => '',
                'text' => 'Supplier not available',
            ];
        } else {
            foreach ($dataSuppliers as $dataSupplier) {
                $result['items'][] = [
                    'id'   => $dataSupplier->id,
                    'text' => $dataSupplier->supplier,
                ];
            }
        }

        return response()->json($result);
    }

    public function shortcutFolders(Request $request)
    {
        $dataFolderNames = CodeShortcutFolder::select('id', 'name')->get();

        if (! empty($request->q)) {
            $dataFolderNames->where(function ($q) use ($request) {
                $q->where('name', 'LIKE', '%' . $request->q . '%');
            });
        }

        $result = [];

        if (empty($dataFolderNames)) {
            $result['items'][] = [
                'id'   => '',
                'text' => 'FolderName not available',
            ];
        } else {
            foreach ($dataFolderNames as $dataFolderName) {
                $result['items'][] = [
                    'id'   => $dataFolderName->id,
                    'text' => $dataFolderName->name,
                ];
            }
        }

        return response()->json($result);
    }

    public function productColors(Request $request)
    {
        $uniqueColorsQuery = ProductSupplier::distinct('color');

        if (! empty($request->q)) {
            $uniqueColorsQuery->where('color', 'LIKE', '%' . $request->q . '%');
        }

        $uniqueColors = $uniqueColorsQuery->pluck('color');

        $result = [];

        if ($uniqueColors->isEmpty()) {
            $result['items'][] = [
                'id'   => '',
                'text' => 'Supplier not available',
            ];
        } else {
            foreach ($uniqueColors as $uniqueColor) {
                $result['items'][] = [
                    'id'   => $uniqueColor,
                    'text' => $uniqueColor,
                ];
            }
        }

        return response()->json($result);
    }

    public function producsizeSystem(Request $request)
    {
        $uniqueSizeQuery = ProductSupplier::distinct('size_system');

        if (! empty($request->q)) {
            $uniqueSizeQuery->where('size_system', 'LIKE', '%' . $request->q . '%');
        }

        $uniqueSizeSystems = $uniqueSizeQuery->pluck('size_system');

        $result = [];

        if ($uniqueSizeSystems->isEmpty()) {
            $result['items'][] = [
                'id'   => '',
                'text' => 'Supplier not available',
            ];
        } else {
            foreach ($uniqueSizeSystems as $uniqueSizeSystem) {
                $result['items'][] = [
                    'id'   => $uniqueSizeSystem,
                    'text' => $uniqueSizeSystem,
                ];
            }
        }

        return response()->json($result);
    }

    public function shortcutdocumentCategory(Request $request)
    {
        $categories = DocumentCategory::select('id', 'name')->get();

        if (! empty($request->q)) {
            $categories->where(function ($q) use ($request) {
                $q->where('name', 'LIKE', '%' . $request->q . '%');
            });
        }

        $result = [];

        if (empty($categories)) {
            $result['items'][] = [
                'id'   => '',
                'text' => 'category not available',
            ];
        } else {
            foreach ($categories as $category) {
                $result['items'][] = [
                    'id'   => $category->id,
                    'text' => $category->name,
                ];
            }
        }

        return response()->json($result);
    }

    public function vochuerPlatform(Request $request)
    {
        $query = DB::table('voucher_coupon_platforms')->select();

        if (! empty($request->q)) {
            $query->where(function ($q) use ($request) {
                $q->where('name', 'LIKE', '%' . $request->q . '%');
            });
        }

        $platforms = $query->pluck('name', 'id');

        $result = [];

        if (empty($platforms)) {
            $result['items'][] = [
                'id'   => '',
                'text' => 'platforms not available',
            ];
        } else {
            foreach ($platforms as $key => $plat) {
                $result['items'][] = [
                    'id'   => $key,
                    'text' => $plat,
                ];
            }
        }

        return response()->json($result);
    }

    public function vochuerEmail(Request $request)
    {
        $query = DB::table('email_addresses')->select();

        if (! empty($request->q)) {
            $query->where(function ($q) use ($request) {
                $q->where('from_address', 'LIKE', '%' . $request->q . '%');
            });
        }

        $vocherEmails = $query->pluck('id', 'from_address');

        $result = [];

        if (empty($vocherEmails)) {
            $result['items'][] = [
                'id'   => '',
                'text' => 'Emails not available',
            ];
        } else {
            foreach ($vocherEmails as $key => $email) {
                $result['items'][] = [
                    'id'   => $email,
                    'text' => $key,
                ];
            }
        }

        return response()->json($result);
    }

    public function vochuerWhatsappconfig(Request $request)
    {
        $query = DB::table('whatsapp_configs')->select();

        if (! empty($request->q)) {
            $query->where(function ($q) use ($request) {
                $q->where('number', 'LIKE', '%' . $request->q . '%');
            });
        }

        $whatsapp_configs = $query->pluck('number', 'id');

        $result = [];

        if (empty($whatsapp_configs)) {
            $result['items'][] = [
                'id'   => '',
                'text' => 'Whatsapp number not available',
            ];
        } else {
            foreach ($whatsapp_configs as $key => $number) {
                $result['items'][] = [
                    'id'   => $key,
                    'text' => $number,
                ];
            }
        }

        return response()->json($result);
    }

    public function magentoCreateFromCategory(Request $request)
    {
        $magnetoCategories = \App\SiteDevelopmentCategory::wherenotNull('title');

        if (! empty($request->q)) {
            $magnetoCategories->where('title', 'LIKE', '%' . $request->q . '%');
        }

        $magnetoCategories = $magnetoCategories->pluck('title', 'id');
        $result            = [];

        if ($magnetoCategories->isEmpty()) {
            $result['items'][] = [
                'id'   => '',
                'text' => 'Categories not available',
            ];
        } else {
            foreach ($magnetoCategories as $key => $title) {
                $result['items'][] = [
                    'id'   => $key,
                    'text' => $title,
                ];
            }
        }

        return response()->json($result);
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/SocialController.php 
Content: <?php

namespace App\Http\Controllers;

use Session;
use App\Image;
use App\Product;
use App\Setting;
use App\LogRequest;
use FacebookAds\Api;
use App\AdsSchedules;
use Facebook\Facebook;
use App\Social\SocialConfig;
use Illuminate\Http\Request;
use App\Helpers\SocialHelper;
use FacebookAds\Object\AdAccount;
use Illuminate\Support\Facades\Http;
use FacebookAds\Object\Fields\AdFields;

class SocialController extends Controller
{
    private $user_access_token;

    private $page_access_token;

    private $page_id;

    private $ad_acc_id;

    public function __construct(private Facebook $fb)
    {
        $this->user_access_token = env('USER_ACCESS_TOKEN', 'EAAIALK1F98IBAISAK2NXibnN4DFmLhOnpdTmbj78TEDZAexu8SZCeqoSvV9SDjpwnsoYWjIyumOpjkHmdCWCDumMV584uj5kUkFVbHTZBhJDMnjWgrg1L1O0nAZAq19cfX2PYJz5IC40DtK3ZBZBSAwn4O5Jcs6xDRcmlL9iAp6487YGKweOKHNhJ6AoPZCZBny5ZBZCQKczYSwDO6mpdQrMZCLZBW1xVZA4l42AZD');

        $this->page_access_token = env('PAGE_ACCESS_TOKEN', 'EAAIALK1F98IBAADvogUlzUYHxV93adk3qwiRDrxqByiVmiiEO1FZAqCOMFaRqrFZAS4Fa3f8EQ8Wa1ODKXV9NgXmW6aF4FUiWlaftWsZBpBFzlGTiUMUMazcy5x2LVVKRqOKOBJLwxGkpzZBKpGZAu91aXnZBjQKRqwwwDjHoocER0P2q7V5iDXJlmfwWoQ2iuan14pttYYKa1Lh7RtF7BaSeR7sjtGZBK3tIV4JvDzPQZDZD');
        $this->page_id           = '107451495586072';
        $this->ad_acc_id         = 'act_128125721296439';
    }

    public function getSchedules(Request $request)
    {
        $schedules = AdsSchedules::all();
        $startTime = date('Y-m-d H:i:s', LARAVEL_START);

        $p = '';
        if ($request->has('date_from') && $request->has('date_to')) {
            $p = "&time_range={'since':'$request->date_form','until':'$request->date_to'}";
        }

        $query = 'https://graph.facebook.com/v3.2/' . $this->ad_acc_id . '/ads?fields=id,name,targeting,status,created_time,adcreatives{thumbnail_url},adset{name},insights{campaign_name,account_id,reach,impressions,cost_per_unique_click,actions,spend,clicks}&limit=10&access_token=' . $this->user_access_token;

        if ($request->has('previous')) {
            $query = $request->get('prev');
        }
        if ($request->has('next')) {
            $query = $request->get('nxt');
        }

        // Call to Graph api here
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $query);
        curl_setopt($ch, CURLOPT_VERBOSE, 1);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
        curl_setopt($ch, CURLOPT_POST, 0);

        $resp     = curl_exec($ch);
        $httpcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        LogRequest::log($startTime, $query, 'GET', json_encode([]), json_decode($resp), $httpcode, SocialController::class, 'getSchedules');
        $resp = json_decode($resp);

        $pagination = $resp->paging;
        $previous   = $pagination->previous ?? '';
        $next       = $pagination->next ?? '';

        $resp = collect($resp->data);

        $ads = $resp->map(function ($item) use ($p) {
            return $this->getAdsFromArray($item, $p);
        });

        return view('social.ad_schedules', compact('ads', 'schedules', 'previous', 'next', 'request'));
    }

    public function createAdSchedule(Request $request)
    {
        $this->validate($request, [
            'name' => 'required',
            'date' => 'required|date',
        ]);

        $ad                = new AdsSchedules();
        $ad->name          = $request->get('name');
        $ad->scheduled_for = $request->get('date');
        $ad->save();

        return redirect()->action([SocialController::class, 'showSchedule'], $ad->id)->with('message', 'The ad has been scheduled successfully!');
    }

    public function showSchedule($id, Request $request)
    {
        $ad = AdsSchedules::findOrFail($id);

        $images = \DB::table('ads_schedules_attachments')->where('ads_schedule_id', $ad->id)->get();

        $images = $images->map(function ($item) {
            return [
                'id'    => $item->attachment_id,
                'image' => $this->getImagesByType($item->attachment_id, $item->attachment_type),
            ];
        });

        return view('social.schedule', compact('ad', 'images'));
    }

    private function getImagesByType($aid, $type)
    {
        if ($type == 'image') {
            $img = Image::find($aid);

            return '/uploads/social-media/' . $img->filename;
        }

        $pro = Product::find($aid);

        return $pro->imageurl;
    }

    public function attachMedia($id, Request $request)
    {
        if ($request->has('images')) {
            $images = $request->get('images') ?? [];

            \DB::table('ads_schedules_attachments')->where('ads_schedule_id', $id)->where('attachment_type', 'image')->delete();

            foreach ($images as $image) {
                \DB::table('ads_schedules_attachments')->insert([
                    'ads_schedule_id' => $id,
                    'attachment_id'   => $image,
                    'attachment_type' => 'image',
                ]);
            }
        }

        $selectedImages = \DB::table('ads_schedules_attachments')->where('ads_schedule_id', $id)->where('attachment_type', 'image')->get(['attachment_id'])->pluck('attachment_id');
        $images         = Image::where('status', 2)->whereNotIn('id', $selectedImages)->get();
        $selectedImages = Image::whereIn('id', $selectedImages)->get();

        return view('social.attach_image', compact('images', 'selectedImages', 'id'));
    }

    public function attachProducts(Request $request, $scheduleId)
    {
        $schedule = AdsSchedules::find($scheduleId);

        if ($request->has('save')) {
            $selectedImages = $request->get('images') ?? [];
            $selectedImages = Product::whereIn('id', $selectedImages)->get();

            foreach ($selectedImages as $selectedImage) {
                \DB::table('ads_schedules_attachments')->insert([
                    'ads_schedule_id' => $scheduleId,
                    'attachment_id'   => $selectedImage->id,
                    'attachment_type' => 'product',
                ]);
            }

            return redirect()->action([SocialController::class, 'showSchedule'], $scheduleId);
        }

        $selectedImages = $request->get('images') ?? [];

        $selectedImages = Product::whereIn('id', $selectedImages)->get();

        $products = Product::whereNotNull('sku')->whereNotIn('id', $selectedImages)->latest()->paginate(40);

        return view('social.attach_products', compact('schedule', 'products', 'selectedImages', 'request'));
    }

    public function getAdInsights()
    {
        $query = 'https://graph.facebook.com/v3.2/' . $this->ad_acc_id . '/campaigns?fields=ads{id,name,targeting,status,created_time,adcreatives{thumbnail_url},adset{name},insights.level(adset){campaign_name,account_id,reach,impressions,cost_per_unique_click,actions,spend,clicks}}&limit=5&access_token=' . $this->user_access_token . '';
        // Call to Graph api here
        $startTime = date('Y-m-d H:i:s', LARAVEL_START);
        $ch        = curl_init();
        curl_setopt($ch, CURLOPT_URL, $query);
        curl_setopt($ch, CURLOPT_VERBOSE, 1);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
        curl_setopt($ch, CURLOPT_POST, 0);

        $resp = curl_exec($ch);

        $resp     = collect(json_decode($resp)->data);
        $httpcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        LogRequest::log($startTime, $query, 'GET', json_encode([]), json_decode($resp), $httpcode, SocialController::class, 'getSchedules');

        $ads = $resp->map(function ($item) {
            if (isset($item->ads)) {
                return $this->getAdsFromArray($item->ads);
            }
        });

        return response()->json($ads);
    }

    public function getAdSchedules()
    {
        $account = new AdAccount($this->ad_acc_id, null, Api::init($this->fb->getApp()->getId(), $this->fb->getApp()->getSecret(), $this->page_access_token));
        $ads     = $account->getAds([
            AdFields::NAME,
            AdFields::UPDATED_TIME,
            AdFields::ADSET_ID,
            AdFields::STATUS,
            AdFields::TARGETING,
            AdFields::PRIORITY,
            AdFields::CREATED_TIME,
            AdFields::CAMPAIGN_ID,
        ]);

        $ads = collect($ads)->map(function ($ad) {
            return [
                'id'           => $ad->id,
                'title'        => $ad->name,
                'updated_time' => $ad->updated_time,
                'adset_id'     => $ad->adset_id,
                'status'       => $ad->status,
                'targeting'    => $this->getPropertiesAfterFiltration($ad->targeting),
                'priority'     => $ad->priority,
                'start'        => $ad->created_time,
                'campaign_id'  => $ad->campaign_id,
            ];
        });

        return response()->json($ads);
    }

    private function getPropertiesAfterFiltration($properties): array
    {
        $propertiesToReturn = [];
        $genders            = [
            '1' => 'Male',
            '2' => 'Female',
        ];

        foreach ($properties as $key => $property) {
            if (! is_array($property)) {
                $propertiesToReturn[$key] = $property;
            }

            if ($key === 'genders') {
                $p = [];
                foreach ($property as $item) {
                    if ($item === 0) {
                        continue;
                    }
                    $p[] = $genders[$item];
                }
                $propertiesToReturn[$key] = implode(', ', $p);
            }
        }

        return $propertiesToReturn;
    }

    public function index()
    {
        return view('social.post');
    }

    // public function for getting Social Page posts

    public function pagePost(Request $request)
    {
        if ($request->input('next') && ! empty($request->input('next'))) {
            $data['posts'] = substr($request->input('next'), 32);
            $data['posts'] = $this->fb->get($data['posts'])->getGraphEdge();
        } elseif ($request->input('previous') && ! empty($request->input('previous'))) {
            $data['posts'] = substr($request->input('previous'), 32);
            $data['posts'] = $this->fb->get($data['posts'])->getGraphEdge();
        } else {
            $data['posts'] = $this->fb->get('' . $this->page_id . '/feed?fields=id,full_picture,permalink_url,name,description,message,created_time,from,story,likes.limit(0).summary(true),comments.summary(true).filter(stream)&limit=10&access_token=' . $this->page_access_token . '')->getGraphEdge();
        }

        // Making Pagination

        if (isset($data['posts']->getMetaData()['paging']['next']) && ! empty($data['posts']->getMetaData()['paging']['next'])) {
            $data['next'] = $data['posts']->getMetaData()['paging']['next'];
        }

        if (isset($data['posts']->getMetaData()['paging']['previous']) && ! empty($data['posts']->getMetaData()['paging']['previous'])) {
            $data['previous'] = $data['posts']->getMetaData()['paging']['previous'];
        }

        // Getting Final Result as Array
        $data['posts'] = $data['posts']->all();
        $data['posts'] = array_map(function ($post) {
            $post = $post->all();

            return [
                'id'            => $post['id'],
                'full_picture'  => $post['full_picture'] ?? null,
                'permalink_url' => $post['permalink_url'] ?? null,
                'name'          => $post['name'] ?? 'N/A',
                'message'       => $post['message'] ?? null,
                'created_time'  => $post['created_time'],
                'from'          => $post['from'],
                'likes'         => [
                    'summary' => $post['likes']->getMetaData()['summary'],
                ],
                'comments' => [
                    'summary' => $post['comments']->getMetaData()['summary'],
                    'items'   => implode(',', array_map(function ($item) {
                        return $item['id'];
                    }, $post['comments']->asArray())),
                    'url' => $post['comments']->getParentGraphEdge(),
                ],
            ];
        }, $data['posts']);

        return view('social.get-posts', $data);
    }

    public function getComments(Request $request)
    {
        $this->validate($request, [
            'items' => 'required',
        ]);
        $items    = explode(',', $request->get('items'));
        $comments = array_map(function ($commmentId) {
            $comment = $this->fb->get($commmentId . '?fields=id,message,from,can_comment&access_token=' . $this->page_access_token)->getDecodedBody();

            return $comment;
        }, $items);

        return response()->json($comments);
    }

    public function postComment(Request $request)
    {
        $this->validate($request, [
            'message' => 'required',
            'post_id' => 'required',
        ]);

        $message = $request->get('message');
        $postId  = $request->get('post_id');

        $comment = $this->fb
            ->post($postId . '/comments',
                [
                    'message' => $message,
                    'fields'  => 'id,message,from',
                ],
                $this->page_access_token
            )->getDecodedBody();

        $comment['status'] = 'success';

        return response()->json($comment);
    }

    // Creating posts to page via sdk

    public function createPost(Request $request)
    {
        $request->validate([
            'message'  => 'required',
            'source.*' => 'mimes:jpeg,bmp,png,gif,tiff',
            'video'    => 'mimes:3g2,3gp,3gpp,asf,avi,dat,divx,dv,f4v,flv,gif,m2ts,m4v,mkv,mod,mov,mp4,mpe, mpeg,mpeg4,mpg,mts,nsv,ogm,ogv,qt,tod,tsvob,wmv',

        ]);

        // Message
        $message = $request->input('message');

        // Image  Case

        if ($request->hasFile('source')) {
            // Description
            $data['caption']      = ($request->input('description')) ? $request->input('description') : '';
            $data['published']    = 'false';
            $data['access_token'] = $this->page_access_token;

            foreach ($request->file('source') as $key => $source) {
                $data['source'] = $this->fb->fileToUpload($source);

                // post multi-photo story
                $multiPhotoPost['attached_media[' . $key . ']'] = '{"media_fbid":"' . $this->fb->post('/me/photos', $data)->getGraphNode()->asArray()['id'] . '"}';
            }

            // Uploading Multi story facebook photo
            $multiPhotoPost['access_token'] = $this->page_access_token;
            $multiPhotoPost['message']      = $message;
            if ($request->has('date') && $request->input('date') > date('Y-m-d')) {
                $multiPhotoPost['published']              = 'true';
                $multiPhotoPost['scheduled_publish_time'] = strtotime($request->input('date'));
            }
            $resp = $this->fb->post('/me/feed', $multiPhotoPost)->getGraphNode()->asArray();
            if (isset($resp->error->message)) {
                Session::flash('message', $resp->error->message);
            } else {
                Session::flash('message', 'Content Posted successfully');
            }

            return redirect()->route('social.post.page');
        } // Video Case
        elseif ($request->hasFile('video')) {
            $data['title'] = '' . trim($message) . '';

            $data['description'] = '' . trim($request->input('description')) . '';

            $data['source'] = $this->fb->videoToUpload('' . trim($request->file('video')) . '');

            if ($request->has('date') && $request->input('date') > date('Y-m-d')) {
                $data['published']              = 'false';
                $data['scheduled_publish_time'] = strtotime($request->input('date'));
            }
            $resp = $this->fb->post('/me/videos', $data, $this->page_access_token)->getGraphNode()->asArray()['id'];

            if (isset($resp->error->message)) {
                Session::flash('message', $resp->error->message);
            } else {
                Session::flash('message', 'Content Posted successfully');
            }

            return redirect()->route('social.post.page');
        } // Simple Post Case

        else {
            $data['description']  = $request->input('description');
            $data['message']      = $message;
            $data['access_token'] = $this->page_access_token;
            if ($request->has('date') && $request->input('date') > date('Y-m-d')) {
                $data['published']              = 'false';
                $data['scheduled_publish_time'] = strtotime($request->input('date'));
            }
            $resp = $this->fb->post('/me/feed', $data)->getGraphNode()->asArray();

            if (isset($resp->error->message)) {
                Session::flash('message', $resp->error->message);
            } else {
                Session::flash('message', 'Content Posted successfully');
            }

            return redirect()->route('social.post.page');
        }
    }

    private function getAdsFromArray($ad, $p)
    {
        return [
            'id'           => $ad->id,
            'name'         => $ad->name,
            'status'       => $ad->status,
            'created_time' => $ad->created_time,
            'adset_name'   => $ad->adset->name,
            'adset_id'     => $ad->adset->id,
            'ad_creatives' => $this->getAdCreative($ad->adcreatives->data),
            'ad_insights'  => $this->getInsights($ad, $p),
            'targeting'    => $this->getPropertiesAfterFiltration($ad->targeting),
        ];
    }

    private function getAdCreative($adc)
    {
        return collect($adc)->map(function ($item) {
            return $item->thumbnail_url;
        });
    }

    private function getInsights($ad, $p)
    {
        $startTime = date('Y-m-d H:i:s', LARAVEL_START);
        $adId      = $ad->id;
        $url       = "https://graph.facebook.com/v3.2/$adId/insights?fields=campaign_name,account_id,reach,impressions,cost_per_unique_click,actions,spend,clicks&access_token=EAAD7Te0j0B8BAJKziYXYZCNZB0i6B9JMBvYULH5kIeH5qm6N9E3DZBoQyZCZC0bxZB4c4Rl5gifAqVa788DRaCWXQ2fNPtKFVnEoKvb5Nm1ufMG5cZCTTzKZAM8qUyaDtT0mmyC0zjhv5S9IJt70tQBpDMRHk9XNYoPTtmBedrvevtPIRPEUKns8feYJMkqHS6EZD" . $p;
        $ch        = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_VERBOSE, 1);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
        curl_setopt($ch, CURLOPT_POST, 0);

        $resp = curl_exec($ch);

        $resp     = json_decode($resp, true); // response deocded
        $httpcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        LogRequest::log($startTime, $url, 'GET', json_encode([]), $resp, $httpcode, SocialController::class, 'getImageByCurl');

        $insights = collect($resp['data']);

        foreach ($insights as $insight) {
            return $insight;
        }
    }

    public function getAdAccount($config, $fb)
    {
        $response = '';

        try {
            $token   = $config->token;
            $page_id = $config->page_id;
            // Get the \Facebook\GraphNodes\GraphUser object for the current user.
            // If you provided a 'default_access_token', the '{access-token}' is optional.
            $url = sprintf('https://graph.facebook.com/v15.0//me/adaccounts?access_token=' . $token); //New using graph API

            return $response = SocialHelper::curlGetRequest($url);
        } catch (\FacebookExceptions\FacebookResponseException   $e) {
            // When Graph returns an error
        } catch (\FacebookExceptions\FacebookSDKException $e) {
        }
        if ($response != '') {
            try {
                $pages = $response->getGraphEdge()->asArray();
                foreach ($pages as $key) {
                    return $key['id'];
                }
            } catch (exception $e) {
                $this->socialPostLog($config->id, $config->platform, 'error', 'not get adaccounts id->' . $e->getMessage());
            }
        }
    }

    // Function for Getting Reports via curl
    public function report(Request $request)
    {
        if ($request->id) {
            $config = SocialConfig::find($request->id);
        } else {
            $configs = SocialConfig::pluck('name', 'id');
        }

        $resp          = '';
        $socialConfigs = SocialConfig::latest()->paginate(Setting::get('pagination'));

        foreach ($socialConfigs as $config) {
            if (isset($config->ads_manager)) {
                $query = 'https://graph.facebook.com/v16.0/' . $config->ads_manager . '/campaigns?fields=ads{id,name,status,created_time,adcreatives{thumbnail_url},adset{name},insights.level(adset){campaign_name,account_id,reach,impressions,cost_per_unique_click,actions,spend}}&limit=3000&access_token=' . $config->token . '';

                // Call to Graph api here
                $startTime = date('Y-m-d H:i:s', LARAVEL_START);
                $ch        = curl_init();
                curl_setopt($ch, CURLOPT_URL, $query);
                curl_setopt($ch, CURLOPT_VERBOSE, 1);
                curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
                curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
                curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
                curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
                curl_setopt($ch, CURLOPT_POST, 0);

                $resp     = curl_exec($ch);
                $resp     = json_decode($resp);
                $httpcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
                LogRequest::log($startTime, $query, 'GET', json_encode([]), $resp, $httpcode, SocialController::class, 'getImageByCurl');

                curl_close($ch);

                $resp->token = $config->id;

                if (isset($resp->data)) {
                    if (isset($resp->error->error_user_msg)) {
                        Session::flash('message', $resp->error->error_user_msg);
                    } elseif (isset($resp->error->message)) {
                        Session::flash('message', $resp->error->message);
                    }

                    return view('social.reports', ['resp' => $resp]);
                }
            }
        }

        return view('social.reports', ['resp' => $resp]);
    }

    public function reportHistory(Request $request)
    {
        $socialHistoryData = \App\Social\SocialAdHistory::where('ad_ac_id', $request->id)->get();
        if ($request->ajax()) {
            return response()->json([
                'tbody' => view('social.reports-history', compact('socialHistoryData'))->render(),
            ], 200);
        }
    }

    // Get pagination Report()

    public function paginateReport(Request $request)
    {
        if ($request->has('next')) {
            $query = $request->input('next');
        } elseif ($request->has('previous')) {
            $query = $request->input('previous');
        } else {
            return redirect()->route('social.report');
        }

        // Call to Graph api here
        $startTime = date('Y-m-d H:i:s', LARAVEL_START);
        $ch        = curl_init();
        curl_setopt($ch, CURLOPT_URL, $query);
        curl_setopt($ch, CURLOPT_VERBOSE, 1);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
        curl_setopt($ch, CURLOPT_POST, 0);

        $resp     = curl_exec($ch);
        $resp     = json_decode($resp); //response decoded
        $httpcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        LogRequest::log($startTime, $query, 'GET', json_encode([]), $resp, $httpcode, SocialController::class, 'paginateReport');
        curl_close($ch);
        if (isset($resp->error->error_user_msg)) {
            Session::flash('message', $resp->error->error_user_msg);
        } elseif (isset($resp->error->message)) {
            Session::flash('message', $resp->error->message);
        }

        return view('social.reports', ['resp' => $resp]);
    }

    // Getting reports for adCreative

    // Function for Getting Reports via curl
    public function adCreativereport()
    {
        $resp                = '';
        $socialConfigs       = SocialConfig::latest()->paginate(Setting::get('pagination'));
        $adAccountCollection = [];
        $startTime           = date('Y-m-d H:i:s', LARAVEL_START);

        foreach ($socialConfigs as $config) {
            $query = 'https://graph.facebook.com/v15.0/' . $config->ads_manager . '/campaigns?fields=ads{adcreatives{id,name,thumbnail_url},insights.level(ad).metrics(ctr){cost_per_unique_click,spend,impressions,frequency,reach,unique_clicks,clicks,ctr,ad_name,adset_name,cpc,cpm,cpp,campaign_name,ad_id,adset_id,account_id,account_name}}&access_token=' . $config->token . '';

            // Call to Graph api here
            $ch = curl_init();
            curl_setopt($ch, CURLOPT_URL, $query);
            curl_setopt($ch, CURLOPT_VERBOSE, 1);
            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
            curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
            curl_setopt($ch, CURLOPT_POST, 0);

            $resp     = curl_exec($ch);
            $resp     = json_decode($resp);
            $httpcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
            LogRequest::log($startTime, $query, 'GET', json_encode([]), $resp, $httpcode, SocialController::class, 'adCreativereport');
            curl_close($ch);

            $resp->token = $config->token;

            if ($resp->data) {
                if (isset($resp->error->error_user_msg)) {
                    Session::flash('message', $resp->error->error_user_msg);
                } elseif (isset($resp->error->message)) {
                    Session::flash('message', $resp->error->message);
                }

                return view('social.reports', ['resp' => $resp]);
            }
        }

        return view('social.adcreative-reports', ['resp' => $resp]);
    }
    // end of getting reports via ad creatvie

    // paginate ad creative report
    public function adCreativepaginateReport(Request $request)
    {
        if ($request->has('next')) {
            $query = $request->input('next');
        } elseif ($request->has('previous')) {
            $query = $request->input('previous');
        } else {
            return redirect()->route('social.report');
        }

        // Call to Graph api here
        $startTime = date('Y-m-d H:i:s', LARAVEL_START);
        $ch        = curl_init();
        curl_setopt($ch, CURLOPT_URL, $query);
        curl_setopt($ch, CURLOPT_VERBOSE, 1);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
        curl_setopt($ch, CURLOPT_POST, 0);

        $resp     = curl_exec($ch);
        $resp     = json_decode($resp);
        $httpcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        LogRequest::log($startTime, $query, 'GET', json_encode([]), $resp, $httpcode, SocialController::class, 'adCreativepaginateReport');
        curl_close($ch);

        if (isset($resp->error->error_user_msg)) {
            Session::flash('message', $resp->error->error_user_msg);
        } elseif (isset($resp->error->message)) {
            Session::flash('message', $resp->error->message);
        }

        return view('social.adcreative-reports', ['resp' => $resp]);
    }

    // end of paginate ad  creative report

    // Changing Ad status via curl
    public function changeAdStatus($ad_id, $status, $config)
    {
        $startTime            = date('Y-m-d H:i:s', LARAVEL_START);
        $config               = SocialConfig::find($config);
        $data['access_token'] = $config['token'];
        $data['status']       = $status;

        $url = 'https://graph.facebook.com/v15.0/' . $ad_id;

        // Call to Graph api here
        $response = Http::withHeaders([
            'Content-Type' => 'application/json',
        ])
            ->post($url, $data);

        $httpcode = $response->status();

        $responseData = $response->json();

        if ($response->failed()) {
            $err = $response->body();
        }

        LogRequest::log($startTime, $url, 'GET', json_encode($data), $responseData, $httpcode, SocialController::class, 'changeAdStatus');

        if (isset($err)) {
            Session::flash('message', $err);
        } else {
            Session::flash('message', 'Status changed successfully');
        }

        return redirect()->route('social.report');
    }

    // Creating New Campaign via curl

    public function createCampaign()
    {
        return view('social.campaign');
    }

    // For storing campaign to fb via curl

    public function storeCampaign(Request $request)
    {
        $request->validate([
            'name'      => 'required',
            'objective' => 'required',
            'status'    => 'required',
        ]);

        $data['name']      = $request->input('name');
        $data['objective'] = $request->input('objective');
        $data['status']    = $request->input('status');

        if ($request->has('buying_type')) {
            $data['buying_type'] = $request->input('buying_type');
        } else {
            $data['buying_type'] = 'AUCTION';
        }

        if ($request->has('daily_budget')) {
            $data['daily_budget'] = $request->input('daily_budget');
        }

        // Storing to fb via curl

        try {
            $data['access_token'] = $this->user_access_token;

            $url       = 'https://graph.facebook.com/v3.2/' . $this->ad_acc_id . '/campaigns';
            $startTime = date('Y-m-d H:i:s', LARAVEL_START);
            // Call to Graph api here
            $curl = curl_init();
            curl_setopt($curl, CURLOPT_URL, $url);
            curl_setopt($curl, CURLOPT_POST, true);
            curl_setopt($curl, CURLOPT_AUTOREFERER, true);
            curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
            curl_setopt($curl, CURLOPT_POSTFIELDS, $data);

            $resp     = curl_exec($curl);
            $resp     = json_decode($resp); //response decodeed
            $httpcode = curl_getinfo($curl, CURLINFO_HTTP_CODE);
            LogRequest::log($startTime, $url, 'POST', json_encode($data), $resp, $httpcode, SocialController::class, 'storeCampaign');
            curl_close($curl);

            if (isset($resp->error->message)) {
                Session::flash('message', $resp->error->message);
            } else {
                Session::flash('message', 'Campaign created  successfully');
            }

            return redirect()->route('social.ad.campaign.create');
        } catch (Exception $e) {
            Session::flash('message', $e);

            return redirect()->route('social.ad.campaign.create');
        }
    }

    // Creating New Campaign via curl

    public function createAdset()
    {
        $query = 'https://graph.facebook.com/v3.2/' . $this->ad_acc_id . '/campaigns?fields=name,id&limit=100&access_token=' . $this->user_access_token . '';

        // Call to Graph api here
        $startTime = date('Y-m-d H:i:s', LARAVEL_START);
        $ch        = curl_init();
        curl_setopt($ch, CURLOPT_URL, $query);
        curl_setopt($ch, CURLOPT_VERBOSE, 1);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
        curl_setopt($ch, CURLOPT_POST, 0);

        $resp       = curl_exec($ch);
        $resp       = json_decode($resp); //response decoded
        $httpcode   = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        $parameters = [];
        LogRequest::log($startTime, $query, 'POST', json_encode($parameters), $resp, $httpcode, SocialController::class, 'createAdset');

        curl_close($ch);

        if (isset($resp->error->error_user_msg)) {
            Session::flash('message', $resp->error->error_user_msg);
        } elseif (isset($resp->error->message)) {
            Session::flash('message', $resp->error->message);
        }

        return view('social.adset', ['campaigns' => $resp->data]);
    }

    // For storing adset to fb via curl

    public function storeAdset(Request $request)
    {
        $request->validate([
            'name'             => 'required',
            'destination_type' => 'required',
            'status'           => 'required',
            'campaign_id'      => 'required',
            'start_time'       => 'required',
            'end_time'         => 'required',
            'billing_event'    => 'required',
            'bid_amount'       => 'required',
        ]);

        $data['name']             = $request->input('name');
        $data['destination_type'] = $request->input('destination_type');
        $data['campaign_id']      = $request->input('campaign_id');
        $data['billing_event']    = $request->input('billing_event');
        $data['start_time']       = strtotime($request->input('start_time'));
        $data['end_time']         = strtotime($request->input('end_time'));
        $data['targeting']        = json_encode(['geo_locations' => ['countries' => ['US']]]);
        if ($request->has('daily_budget')) {
            $data['daily_budget'] = $request->input('daily_budget');
        }

        $data['status'] = $request->input('status');

        if ($request->has('bid_amount')) {
            $data['bid_amount'] = $request->input('bid_amount');
        }

        // Storing to fb via curl

        try {
            $data['access_token'] = $this->user_access_token;

            $url = 'https://graph.facebook.com/v3.2/' . $this->ad_acc_id . '/adsets';

            // Call to Graph api here
            $startTime = date('Y-m-d H:i:s', LARAVEL_START);
            $curl      = curl_init();
            curl_setopt($curl, CURLOPT_URL, $url);
            curl_setopt($curl, CURLOPT_POST, true);
            curl_setopt($curl, CURLOPT_AUTOREFERER, true);
            curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
            curl_setopt($curl, CURLOPT_POSTFIELDS, $data);

            $resp     = curl_exec($curl);
            $resp     = json_decode($resp); //response decoded
            $httpcode = curl_getinfo($curl, CURLINFO_HTTP_CODE);
            LogRequest::log($startTime, $url, 'POST', json_encode($data), $resp, $httpcode, SocialController::class, 'storeAdset');

            curl_close($curl);
            if (isset($resp->error->error_user_msg)) {
                Session::flash('message', $resp->error->error_user_msg);
            } elseif (isset($resp->error->message)) {
                Session::flash('message', $resp->error->message);
            } else {
                Session::flash('message', 'Adset created  successfully');
            }

            return redirect()->route('social.ad.adset.create');
        } catch (Exception $e) {
            Session::flash('message', $e);

            return redirect()->route('social.ad.adset.create');
        }
    }

    // for creating Ad
    public function createAd()
    {
        $query     = 'https://graph.facebook.com/v3.2/' . $this->ad_acc_id . '/?fields=adsets{name,id},adcreatives{id,name}&limit=100&access_token=' . $this->user_access_token . '';
        $startTime = date('Y-m-d H:i:s', LARAVEL_START);
        // Call to Graph api here
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $query);
        curl_setopt($ch, CURLOPT_VERBOSE, 1);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
        curl_setopt($ch, CURLOPT_POST, 0);

        $resp     = curl_exec($ch);
        $resp     = json_decode($resp);
        $httpcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        LogRequest::log($startTime, $query, 'POST', json_encode([]), $resp, $httpcode, SocialController::class, 'createAd');

        curl_close($ch);

        if (isset($resp->error->message)) {
            Session::flash('message', $resp->error->message);
        }

        return view('social.ad', ['adsets' => $resp->adsets->data, 'adcreatives' => $resp->adcreatives->data]);
    }

    // For storing campaign to fb via curl

    public function storeAd(Request $request)
    {
        $request->validate([
            'name'          => 'required',
            'adset_id'      => 'required',
            'adcreative_id' => 'required',
            'status'        => 'required',
        ]);

        $data['name']     = $request->input('name');
        $data['adset_id'] = $request->input('adset_id');
        $data['creative'] = json_encode(['creative_id' => $request->input('adcreative_id')]);

        $data['status'] = $request->input('status');

        // Storing to fb via curl

        try {
            $data['access_token'] = $this->user_access_token;

            $url       = 'https://graph.facebook.com/v3.2/' . $this->ad_acc_id . '/ads';
            $startTime = date('Y-m-d H:i:s', LARAVEL_START);
            // Call to Graph api here
            $curl = curl_init();
            curl_setopt($curl, CURLOPT_URL, $url);
            curl_setopt($curl, CURLOPT_POST, true);
            curl_setopt($curl, CURLOPT_AUTOREFERER, true);
            curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
            curl_setopt($curl, CURLOPT_POSTFIELDS, $data);

            $resp     = curl_exec($curl);
            $resp     = json_decode($resp); //response decoded
            $httpcode = curl_getinfo($curl, CURLINFO_HTTP_CODE);
            LogRequest::log($startTime, $url, 'POST', json_encode($data), $resp, $httpcode, SocialController::class, 'storeAd');

            curl_close($curl);

            if (isset($resp->error->error_user_msg)) {
                Session::flash('message', $resp->error->error_user_msg);
            } elseif (isset($resp->error->message)) {
                Session::flash('message', $resp->error->error_user_msg);
            } else {
                Session::flash('message', 'Adset created  successfully');
            }

            return redirect()->route('social.ad.create');
        } catch (Exception $e) {
            Session::flash('message', $e);

            return redirect()->route('social.ad.create');
        }
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/SopController.php 
Content: <?php

namespace App\Http\Controllers;

use App\Sop;
use App\User;
use Exception;
use Dompdf\Dompdf;
use App\SopCategory;
use App\SopPermission;
use Illuminate\Support\Str;
use Illuminate\Http\Request;
use App\Models\SopHasCategory;
use App\PurchaseProductOrderLog;
use Illuminate\Support\Facades\DB;

class SopController extends Controller
{
    public function index(Request $request)
    {
        $users   = User::all();
        $usersop = Sop::with(['purchaseProductOrderLogs', 'user', 'sopCategory']);
        if ($request->get('search')) {
            $usersop = $usersop->where('name', 'like', '%' . $request->get('search') . '%')
                ->orWhere('content', 'like', '%' . $request->get('search') . '%');
        }

        if ($request->get('category')) {
            $sop_ids = SopHasCategory::distinct('sop_id')->whereIn('sop_category_id', $request->get('category'))->select('sop_id')->get()->pluck('sop_id')->toArray();
            $usersop = $usersop->whereIn('id', $sop_ids);
        }

        $usersop = $usersop->orderBy('id', 'desc')->limit(25)->paginate(25);

        $total_record    = $usersop->total();
        $category_result = SopCategory::all();
        $request         = $request->all();

        return view('products.sop', compact('usersop', 'total_record', 'users', 'category_result', 'request'));
    }

    public function sopnamedata_logs(Request $request)
    {
        $log_data = PurchaseProductOrderLog::with(['updated_by', 'sop', 'sop.user'])->where('purchase_product_order_id', $request->id)
            ->where('header_name', $request->header_name)
            ->orderByDesc('id')
            ->get();

        return response()->json(['log_data' => $log_data, 'code' => 200]);
    }

    public function delete($id)
    {
        $usersop = Sop::findOrFail($id);
        $usersop->delete();

        return response()->json([
            'message' => 'Data deleted Successfully!',
        ]);
    }

    /**
     * Sop category add in table
     *
     * @return void
     */
    public function categoryStore(Request $request)
    {
        $category = SopCategory::where('category_name', $request->category_name)->first();
        if ($category) {
            return response()->json(['success' => false, 'message' => 'Category already existed']);
        }
        try {
            $resp = SopCategory::create(['category_name' => $request->category_name]);

            return response()->json(['success' => true, 'message' => 'Category added successfully', 'data' => $resp]);
        } catch (exception $e) {
            return response()->json(['success' => false, 'message' => $e->getMessage()]);
        }
    }

    public function categorylist()
    {
        $category_result = SopCategory::all();

        return response()->json(['success' => true, 'data' => $category_result, 'message' => 'Record found']);
    }

    public function store(Request $request)
    {
        $sopType = $request->get('type');
        $sop     = Sop::where('name', $sopType)->first();

        $name = Sop::where('name', $request->get('name'))->first();

        if ($name) {
            return response()->json(['success' => false, 'message' => 'Name already existed']);
        }

        $appendData = '';
        if (! $sop) {
            $category     = $request->get('category');
            $sop          = new Sop();
            $sop->name    = $request->get('name');
            $sop->content = $request->get('content');
            $sop->user_id = \Auth::id();
            $sop->save();

            if (! empty($category) && count($category) > 0) {
                $sop->sopCategory()->attach($category);
            }

            $params['purchase_product_order_id'] = $sop->id;
            $params['header_name']               = 'SOP Listing Approve Logs';
            $params['replace_from']              = '-';
            $params['replace_to']                = $request->get('name');
            $params['created_by']                = \Auth::id();

            $appendsop  = Sop::with(['purchaseProductOrderLogs', 'user', 'sopCategory'])->find($sop->id);
            $users      = User::all();
            $appendData = view('products.partials.sop-list-single', compact('appendsop', 'users'))->render();
            $log        = PurchaseProductOrderLog::create($params);
        }

        $user_email = User::select('email')->where('id', $sop->user_id)->get();

        $only_date = $sop->created_at->todatestring();

        return response()->json(['only_date' => $only_date, 'sop' => $sop, 'user_email' => $user_email, 'params' => $params, 'appendData' => $appendData]);
    }

    public function edit(Request $request)
    {
        $sopedit = Sop::with('sopCategory')->findOrFail($request->id);

        if (isset($sopedit->sopCategory) && count($sopedit->sopCategory) > 0) {
            $sopedit->sopCategory = $sopedit->sopCategory->pluck('id');
        }

        return response()->json(['sopedit' => $sopedit]);
    }

    public function update(Request $request)
    {
        $category = $request->get('category', '');
        $name     = $request->get('name', '');

        $cat = Sop::where('category', $request->get('category'))->where('id', '!=', $request->id)->first();
        if ($cat) {
            return response()->json(['success' => false, 'message' => 'Category already existed']);
        }

        $sopedit = Sop::where('id', $request->id)->first();
        if ($sopedit) {
            $sopedit->name    = $request->get('name', '');
            $sopedit->content = $request->get('content', '');
            $updatedSop       = $sopedit->save();

            $sopedit->hasSopCategory()->delete();
            if (! empty($category) && count($category) > 0) {
                $sopedit->sopCategory()->attach($category ?? []);
            }
            $params['purchase_product_order_id'] = $request->id;
            $params['header_name']               = 'SOP Listing Approve Logs';
            $params['replace_from']              = $request->get('sop_old_name', '');
            $params['replace_to']                = $request->get('name', '');
            $params['created_by']                = \Auth::id();

            if (isset($sopedit->sopCategory) && count($sopedit->sopCategory) > 0) {
                $temp                 = $sopedit->sopCategory->pluck('category_name')->toArray();
                $sopedit->sopCategory = implode(',', $temp);
            }

            $log = PurchaseProductOrderLog::create($params);

            if ($sopedit) {
                return response()->json([
                    'sopedit' => $sopedit,
                    'params'  => $params,
                    'type'    => 'edit',
                ]);
            }
        } else {
            $sop          = new Sop();
            $sop->name    = $request->get('name');
            $sop->content = $request->get('content');
            $sop->user_id = \Auth::id();
            $sop->save();

            $sop->hasSopCategory()->delete();
            if (! empty($category) && count($category) > 0) {
                $sop->sopCategory()->attach($category ?? []);
            }

            $params['purchase_product_order_id'] = $sop->id;
            $params['header_name']               = 'SOP Listing Approve Logs';
            $params['replace_from']              = '-';
            $params['replace_to']                = $request->get('name');
            $params['created_by']                = \Auth::id();

            if (isset($sopedit->sopCategory) && count($sopedit->sopCategory) > 0) {
                $temp                 = $sopedit->sopCategory->pluck('category_name')->toArray();
                $sopedit->sopCategory = implode(',', $temp);
            }

            $log = PurchaseProductOrderLog::create($params);

            $user_email = User::select('email')->where('id', $sop->user_id)->get();
            $only_date  = $sop->created_at->todatestring();

            if ($sop) {
                return response()->json([
                    'sopedit'    => $sop,
                    'params'     => $params,
                    'type'       => 'new',
                    'only_date'  => $only_date,
                    'user_email' => $user_email,
                ]);
            }
        }
    }

    public function updateSopCategory(Request $request)
    {
        $sop = Sop::findOrFail($request->id);

        if ($sop && $request->type == 'attach') {
            $sop->sopCategory()->attach($request->updateCategoryId);
        }

        if ($sop && $request->type == 'detach') {
            $sop->sopCategory()->detach($request->updateCategoryId);
        }

        return response()->json(['success' => true, 'message' => 'Category updated successfully']);
    }

    public function search(Request $request)
    {
        $searchsop = $request->get('search');
        $usersop   = DB::table('sops')->where('name', 'like', '%' . $searchsop . '%')->paginate(10);

        return view('products.sop', compact('usersop'));
    }

    public function ajaxsearch(Request $request)
    {
        $searchsop = $request->get('search');
        if (! empty($searchsop)) {
            $usersop = DB::table('sops')->where('name', 'like', '%' . $searchsop . '%')->get();
        } else {
            $usersop = Sop::all();
        }
        $users = User::all();

        $html = '';
        foreach ($usersop as $key => $value) {
            $html .= '<tr id="sid' . $value->id . '" class="parent_tr" data-id="' . $value->id . '">
                        <td class="sop_table_id">' . $value->id . '</td>
                            <td class="expand-row-msg" data-name="name" data-id="' . $value->id . '">
                                <span class="show-short-name-' . $value->id . '">' . Str::limit($value->name, 17, '..') . '</span>
                                <span style="word-break:break-all;" class="show-full-name-' . $value->id . ' hidden">' . $value->name . '</span>
                            </td>
                            <td class="expand-row-msg Website-task " data-name="content" data-id="' . $value->id . '">
                                <span class="show-short-content-{{$value->id}}">' . Str::limit($value->content, 50, '..') . '</span>
                                <span style="word-break:break-all;" class="show-full-content-' . $value->id . ' hidden">' . $value->content . '</span>
                            </td>
                            <td class="p-1">
                                <a href="javascript:;" data-id="' . $value->id . '" class="menu_editor_edit btn btn-xs p-2" >
                                    <i class="fa fa-edit"></i>
                                </a>
                            </td>
                        </tr>';
        }

        return $html;
    }

    public function downloaddata($id)
    {
        $usersop = Sop::where('id', $id)->first();
        if ($usersop) {
            $data['name']    = $usersop->name;
            $data['content'] = $usersop->content;

            $html = view('maileclipse::templates.Viewdownload', [
                'name'    => $usersop->name,
                'content' => $usersop->content,
                'usersop' => $usersop = Sop::where('id', $usersop->id)->first(),

            ]);

            $pdf = new Dompdf();
            $pdf->loadHtml($html);
            $pdf->render();
            $pdf->stream(date('Y-m-d H:i:s') . 'SOPData.pdf');
        }
    }

    public function sopPermissionData(Request $request)
    {
        $user_id    = $request->user_id;
        $permission = SopPermission::where('user_id', $user_id)->get();

        return response()->json(['status' => true, 'permissions' => $permission]);
    }

    public function sopPermissionList(Request $request)
    {
        $user_id = $request->user_id;
        $sop     = $request->sop;

        $permission = SopPermission::where('user_id', $user_id);
        if ($permission->count() > 0) {
            $permission->delete();
        }
        if ($sop) {
            foreach ($sop as $sp) {
                $sopPermission          = new SopPermission;
                $sopPermission->user_id = $user_id;
                $sopPermission->sop_id  = $sp;
                $sopPermission->save();
            }
        }

        return response()->json(['status' => true, 'message' => 'Permission Saved successfully']);
    }

    public function sopPermissionUserList(Request $request)
    {
        $sop       = Sop::find($request->sop_id);
        $sop_users = SopPermission::where('sop_id', $request->sop_id)->get()->pluck('user_id');
        $user      = User::all();

        return response()->json(['user_list' => $sop_users, 'user' => $user, 'sop' => $sop]);
    }

    public function sopRemovePermission(Request $request)
    {
        $user_id        = $request->user_id;
        $sop_id         = $request->sop_id;
        $sop_permission = SopPermission::where('sop_id', $sop_id)->delete();
        if ($user_id) {
            foreach ($user_id as $u_id) {
                $new_permission          = new SopPermission;
                $new_permission->sop_id  = $sop_id;
                $new_permission->user_id = $u_id;
                $new_permission->save();
            }
        }

        return response()->json(['message' => 'Permission Apply Successfully']);
    }

    /**
     * Delete category
     */
    public function categoryDelete(Request $request)
    {
        try {
            SopHasCategory::where('sop_category_id', $request->id)->delete();
            SopCategory::destroy($request->id);

            return redirect()->back()->withSuccess('Caregory delete successfully.');
        } catch (Exception $e) {
            return redirect()->back()->withError('Error while deleting category.');
        }
    }

    /**
     * Sop category update
     */
    public function categoryUpdate(Request $request)
    {
        try {
            if (! isset($request->name) || $request->name == '') {
                throw new Exception('Category name must required.');
            }
            if (! isset($request->id) || $request->id == '') {
                throw new Exception('Category not found.');
            }

            $sopcategory = SopCategory::find($request->id);

            if ($sopcategory) {
                $sopcategory->category_name = $request->name;
                $sopcategory->update();
            } else {
                throw new Exception('Category not found.');
            }

            return redirect()->back()->withSuccess('Category successfully created.');
        } catch (Exception $e) {
            //throw $th;
            return redirect()->back()->withError($e->getMessage());
        }
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/SupplierCategoryController.php 
Content: <?php

namespace App\Http\Controllers;

use DB;
use App\User;
use App\SupplierCategory;
use Illuminate\Http\Request;

class SupplierCategoryController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request)
    {
        $suppliercategory = SupplierCategory::orderBy('id', 'DESC')->paginate(10);

        return view('supplier-category.index', compact('suppliercategory'))
            ->with('i', ($request->input('page', 1) - 1) * 10);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        return view('supplier-category.create');
    }

    /**
     * Store a newly created resource in storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $this->validate($request, [
            'name' => 'required|unique:supplier_category,name',
        ]);

        $department = SupplierCategory::create(['name' => $request->input('name')]);

        return redirect()->route('supplier-category.index')
            ->with('success', 'Supplier Category created successfully');
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        $category = SupplierCategory::find($id);

        return view('supplier-category.edit', compact('category'));
    }

    /**
     * Update the specified resource in storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        $this->validate($request, [
            'name' => 'required',
        ]);

        $department       = SupplierCategory::find($id);
        $department->name = $request->input('name');
        $department->save();

        return redirect()->route('supplier-category.index')
            ->with('success', 'Supplier Category updated successfully');
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        DB::table('supplier_category')->where('id', $id)->delete();

        return redirect()->route('supplier-category.index')
            ->with('success', 'Supplier Category deleted successfully');
    }

    public function usersPermission(Request $request)
    {
        $users      = User::where('is_active', 1)->orderBy('name', 'asc')->with('supplierCategoryPermission')->get();
        $categories = SupplierCategory::orderBy('name', 'asc')->get();

        return view('suppliers.supplier-category-permission.index', compact('users', 'categories'))->with('i', ($request->input('page', 1) - 1) * 10);
    }

    public function updatePermission(Request $request)
    {
        $user_id     = $request->user_id;
        $category_id = $request->supplier_category_id;
        $check       = $request->check;
        $user        = User::findorfail($user_id);
        //ADD PERMISSION
        if ($check == 1) {
            $user->supplierCategoryPermission()->attach($category_id);
            $message = 'Permission added Successfully';
        }
        //REMOVE PERMISSION
        if ($check == 0) {
            $user->supplierCategoryPermission()->detach($category_id);
            $message = 'Permission removed Successfully';
        }

        $data = [
            'success' => true,
            'message' => $message,
        ];

        return response()->json($data);
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/SupplierController.php 
Content: <?php

namespace App\Http\Controllers;

use Auth;
use App\User;
use App\Brand;
use App\Email;
use Validator;
use DataTables;
use App\Helpers;
use App\Product;
use App\Setting;
use App\Category;
use App\Supplier;
use App\ChatMessage;
use App\SupplierSize;
use App\ReplyCategory;
use App\QuickSellGroup;
use App\SupplierStatus;
use App\SupplierCategory;
use App\SupplierPriority;
use App\Mail\PurchaseEmail;
use App\SupplierBrandCount;
use App\SupplierPriceRange;
use App\SupplierSubCategory;
use Illuminate\Http\Request;
use App\ReadOnly\SoloNumbers;
use App\ProductQuicksellGroup;
use App\SupplierCategoryCount;
use App\Marketing\WhatsappConfig;
use App\SupplierBrandCountHistory;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Mail;
use App\Helpers\SupplierPriorityTrait;
use Illuminate\Pagination\LengthAwarePaginator;
use seo2websites\ErpExcelImporter\ErpExcelImporter;
use Plank\Mediable\Facades\MediaUploader as MediaUploader;

class SupplierController extends Controller
{
    use SupplierPriorityTrait;

    const DEFAULT_FOR = 3; //For Supplier

    /**
     * Add/Edit Remainder functionality
     */
    public function updateReminder(Request $request)
    {
        $supplier                   = Supplier::find($request->get('supplier_id'));
        $supplier->frequency        = $request->get('frequency');
        $supplier->reminder_message = $request->get('message');
        $supplier->save();

        return response()->json([
            'success',
        ]);
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request)
    {
        $solo_numbers            = (new SoloNumbers)->all();
        $term                    = $request->term ?? '';
        $type                    = $request->type ?? [];
        $supplier_filter         = $request->supplier_filter ?? '';
        $scrappertype            = isset($request->scrappertype) ? implode(',', $request->scrappertype) : '';
        $supplier_category_id    = isset($request->supplier_category_id) ? implode(',', $request->supplier_category_id) : '';
        $supplier_status_id      = isset($request->supplier_status_id) ? implode(',', $request->supplier_status_id) : '';
        $supplier_price_range_id = isset($request->supplier_price_range_id) ? implode(',', $request->supplier_price_range_id) : '';
        $updated_by              = isset($request->updated_by) ? implode(',', $request->updated_by) : '';
        $source                  = $request->get('source') ?? '';
        $typeWhereClause         = '';

        if (isset($type) && in_array('has_error', $type)) {
            $typeWhereClause = ' AND has_error = 1';
        }
        if (isset($type) && in_array('not_updated', $type)) {
            $typeWhereClause = ' AND is_updated = 0';
        }
        if (isset($type) && in_array('updated', $type)) {
            $typeWhereClause = ' AND is_updated = 1';
        }

        if ($supplier_price_range_id != '') {
            $typeWhereClause .= ' AND supplier_price_range_id in (' . $supplier_price_range_id . ')';
        }

        if ($supplier_category_id != '') {
            $typeWhereClause .= ' AND supplier_category_id in (' . $supplier_category_id . ')';
        }
        if ($supplier_status_id != '') {
            $typeWhereClause .= ' AND supplier_status_id in (' . $supplier_status_id . ')';
        }
        if ($scrappertype != '') {
            $typeWhereClause .= ' AND suppliers.scrapper in (' . $scrappertype . ')';
        }
        if ($updated_by != '') {
            $typeWhereClause .= ' AND updated_by in (' . $updated_by . ')';
        }

        if ($request->status) {
            $typeWhereClause .= ' AND suppliers.status in (' . $request->status . ')';
        }

        if ($supplier_filter) {
            $typeWhereClause .= ' AND suppliers.id IN (' . implode(',', $supplier_filter) . ')';
        }
        if (! empty($request->brand)) {
            $brands     = [];
            $references = [];
            foreach ($request->brand as $key => $value) {
                $selecteBrandById = Brand::where('id', $value)->get()->first();
                if (! empty($selecteBrandById->name)) {
                    array_push($brands, $selecteBrandById->name);
                }
                if (! empty($selecteBrandById->references)) {
                    array_push($references, $selecteBrandById->references);
                }
            }
            $filterBrands     = implode('|', $brands);
            $filterReferences = str_replace(';', '|', implode('|', $references));
            if (! empty($filterBrands)) {
                $typeWhereClause .= ' AND (brands RLIKE "' . $filterBrands . '"';
                $typeWhereClause .= 'OR scraped_brands RLIKE "' . $filterBrands . '"';
                $typeWhereClause .= 'OR scraped_brands_raw RLIKE "' . $filterBrands . '")';
            }
            if (! empty($filterReferences)) {
                $typeWhereClause .= ' OR (brands RLIKE "' . $filterReferences . '"';
                $typeWhereClause .= 'OR scraped_brands RLIKE "' . $filterReferences . '"';
                $typeWhereClause .= 'OR scraped_brands_raw RLIKE "' . $filterReferences . '")';
            }
        } else {
            if (! empty($request->scrapedBrand)) {
                $scrapedBrands = implode('|', $request->scrapedBrand);
                $typeWhereClause .= ' AND (brands RLIKE "' . $scrapedBrands . '"';
                $typeWhereClause .= 'OR scraped_brands RLIKE "' . $scrapedBrands . '"';
                $typeWhereClause .= 'OR scraped_brands_raw RLIKE "' . $scrapedBrands . '")';
            }
        }

        $runQuery = 0;

        if (! auth()->user()->isAdmin()) {
            $userCategoryPermissionId  = auth()->user()->supplierCategoryPermission->pluck('id')->toArray() + [0];
            $userCategoryPermissionId1 = implode(',', $userCategoryPermissionId);
            $typeWhereClause .= "AND suppliers.supplier_category_id IN ($userCategoryPermissionId1)";
            $runQuery = 1;
        } else {
            $runQuery = 1;
        }
        $suppliers = [];

        if ($runQuery) {
            $suppliers = DB::select('
                                    SELECT suppliers.frequency,suppliers.language_id,suppliers.supplier_sub_category_id,suppliers.supplier_status_id,suppliers.supplier_size_id,suppliers.scrapper, suppliers.reminder_message, suppliers.id, suppliers.is_blocked , suppliers.supplier, suppliers.phone, suppliers.source,suppliers.supplier_price_range_id, suppliers.brands, suppliers.email, suppliers.default_email, suppliers.address, suppliers.social_handle, suppliers.gst, suppliers.is_flagged, suppliers.has_error, suppliers.whatsapp_number, suppliers.status, sc.scraper_name, suppliers.supplier_category_id, suppliers.supplier_status_id, sc.inventory_lifetime,suppliers.created_at,suppliers.updated_at,suppliers.updated_by,u.name as updated_by_name, suppliers.scraped_brands_raw,suppliers.language,
                                    suppliers.est_delivery_time,suppliers.size_system_id,suppliers.priority,suppliers.product_type,
                  (SELECT mm1.message FROM chat_messages mm1 WHERE mm1.id = message_id) as message,
                  (SELECT mm2.created_at FROM chat_messages mm2 WHERE mm2.id = message_id) as message_created_at,
                  (SELECT mm3.id FROM purchases mm3 WHERE mm3.id = purchase_id) as purchase_id,
                  (SELECT mm4.created_at FROM purchases mm4 WHERE mm4.id = purchase_id) as purchase_created_at,
                  (SELECT mm5.message FROM emails mm5 WHERE mm5.id = email_id) as email_message,
                  (SELECT mm6.seen FROM emails mm6 WHERE mm6.id = email_id) as email_seen,
                  (SELECT mm7.created_at FROM emails mm7 WHERE mm7.id = email_id) as email_created_at,
                  CASE WHEN IFNULL(message_created_at, "1990-01-01 00:00") > IFNULL(email_created_at, "1990-01-01 00:00") THEN "message" WHEN IFNULL(message_created_at, "1990-01-01 00:00") < IFNULL(email_created_at, "1990-01-01 00:00") THEN "email" ELSE "none" END as last_type,
                  CASE WHEN IFNULL(message_created_at, "1990-01-01 00:00") > IFNULL(email_created_at, "1990-01-01 00:00") THEN message_created_at WHEN IFNULL(message_created_at, "1990-01-01 00:00") < IFNULL(email_created_at, "1990-01-01 00:00") THEN email_created_at ELSE "1990-01-01 00:00" END as last_communicated_at

                  FROM (SELECT * FROM suppliers

                  LEFT JOIN (SELECT MAX(id) as message_id, supplier_id, message, MAX(created_at) as message_created_at FROM chat_messages GROUP BY supplier_id ORDER BY created_at DESC) AS chat_messages
                  ON suppliers.id = chat_messages.supplier_id

                  LEFT JOIN (SELECT MAX(id) as purchase_id, supplier_id as purchase_supplier_id, created_at AS purchase_created_at FROM purchases GROUP BY purchase_supplier_id ORDER BY created_at DESC) AS purchases
                  ON suppliers.id = purchases.purchase_supplier_id

                  LEFT JOIN (SELECT MAX(id) as email_id, model_id as email_model_id, MAX(created_at) AS email_created_at FROM emails WHERE model_type LIKE "%Supplier%" OR "%Purchase%" GROUP BY model_id ORDER BY created_at DESC) AS emails
                  ON suppliers.id = emails.email_model_id)

                  AS suppliers
                  left join scrapers as sc on sc.supplier_id = suppliers.id
                  left join users as u on u.id = suppliers.updated_by
                  WHERE (

                  source LIKE "%' . $source . '%" AND
                  (sc.parent_id IS NULL AND
                  (supplier LIKE "%' . $term . '%" OR
                  suppliers.phone LIKE "%' . $term . '%" OR
                  suppliers.email LIKE "%' . $term . '%" OR
                  suppliers.address LIKE "%' . $term . '%" OR
                  suppliers.social_handle LIKE "%' . $term . '%" OR
                  sc.scraper_name LIKE "%' . $term . '%" OR
                  brands LIKE "%' . $term . '%" OR
                   suppliers.id IN (SELECT model_id FROM agents WHERE model_type LIKE "%Supplier%" AND (name LIKE "%' . $term . '%" OR phone LIKE "%' . $term . '%" OR email LIKE "%' . $term . '%")))))' . $typeWhereClause . '
                  ORDER BY last_communicated_at DESC, status DESC
              ');
        }

        $suppliers_all = null;

        if ($request->supplier_filter) {
            $suppliers_all = Supplier::where(function ($query) {
                $query->whereNotNull('email')->orWhereNotNull('default_email');
            })->whereIn('id', $request->supplier_filter)->get();
        }
        $currentPage  = LengthAwarePaginator::resolveCurrentPage();
        $perPage      = Setting::get('pagination');
        $currentItems = array_slice($suppliers, $perPage * ($currentPage - 1), $perPage);

        $supplierscnt = count($suppliers);
        $suppliers    = new LengthAwarePaginator($currentItems, count($suppliers), $perPage, $currentPage, [
            'path' => LengthAwarePaginator::resolveCurrentPath(),
        ]);

        $suppliercategory    = SupplierCategory::pluck('name', 'id')->toArray();
        $suppliersubcategory = SupplierSubCategory::pluck('name', 'id')->toArray();
        $supplierstatus      = SupplierStatus::pluck('name', 'id')->toArray();
        $suppliersize        = SupplierSize::pluck('size', 'id')->toArray();

        $statistics = DB::select('SELECT supplier_status_id, ss.name, COUNT(*) AS number_of_products FROM suppliers s LEFT join supplier_status ss on ss.id = s.supplier_status_id WHERE supplier_status_id IN (SELECT id from supplier_status) GROUP BY supplier_status_id');

        $scrapedBrandsRaw = Supplier::whereNotNull('scraped_brands_raw')->get()->all();
        $rawBrands        = [];
        foreach ($scrapedBrandsRaw as $key => $value) {
            array_push($rawBrands, array_unique(array_filter(array_column(json_decode($value->scraped_brands_raw, true), 'name'))));
            array_push($rawBrands, array_unique(array_filter(explode(',', $value->scraped_brands))));
        }
        $scrapedBrands = array_unique(array_reduce($rawBrands, 'array_merge', []));

        $data = Setting::where('type', 'ScrapeBrandsRaw')->get()->first();
        if (! empty($data)) {
            $selectedBrands = json_decode($data->val, true);
        } else {
            $selectedBrands = [];
        }

        $whatsappConfigs = WhatsappConfig::where('provider', 'LIKE', '%Chat-API%')->get();

        //Get All Product Supplier
        $allSupplierProduct = [];

        //Get All supplier price range
        $allSupplierPriceRanges = SupplierPriceRange::select('supplier_price_range.*', DB::raw("CONCAT(supplier_price_range.price_from,'-',supplier_price_range.price_to) as full_range"))->get()->toArray();
        $reply_categories       = ReplyCategory::with('supplier')->get();
        $languages              = \App\Language::get();
        $sizeSystem             = \App\SystemSize::pluck('name', 'id')->toArray();

        return view('suppliers.index', [
            'suppliers'            => $suppliers,
            'suppliers_all'        => $suppliers_all,
            'solo_numbers'         => $solo_numbers,
            'languages'            => $languages,
            'term'                 => $term,
            'type'                 => $type,
            'scrappertype'         => $scrappertype,
            'supplier_filter'      => $supplier_filter,
            'source'               => $source,
            'suppliercategory'     => $suppliercategory,
            'suppliersubcategory'  => $suppliersubcategory,
            'supplierstatus'       => $supplierstatus,
            'suppliersize'         => $suppliersize,
            'supplier_category_id' => $supplier_category_id,
            'supplier_status_id'   => $supplier_status_id,
            'count'                => $supplierscnt,
            'statistics'           => $statistics,
            'total'                => 0,
            // 'brands'                 => $brands,
            'scrapedBrands'          => $scrapedBrands,
            'selectedBrands'         => $selectedBrands,
            'whatsappConfigs'        => $whatsappConfigs,
            'allSupplierProduct'     => $allSupplierProduct,
            'allSupplierPriceRanges' => $allSupplierPriceRanges,
            'reply_categories'       => $reply_categories,
            'sizeSystem'             => $sizeSystem,
        ]);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $this->validate($request, [
            'supplier'           => 'required|string|unique:suppliers|max:255',
            'address'            => 'sometimes|nullable|string',
            'phone'              => 'sometimes|nullable|numeric',
            'default_phone'      => 'sometimes|nullable|numeric',
            'whatsapp_number'    => 'sometimes|nullable|numeric',
            'email'              => 'sometimes|nullable|email',
            'social_handle'      => 'sometimes|nullable',
            'scraper_name'       => 'sometimes|nullable',
            'product_type'       => 'sometimes|nullable',
            'inventory_lifetime' => 'sometimes|nullable',
            'gst'                => 'sometimes|nullable|max:255',
        ]);

        $data                  = $request->except('_token');
        $data['default_phone'] = $request->phone ?? '';
        $data['default_email'] = $request->email ?? '';

        $source = $request->get('source', '');

        if (! empty($source)) {
            $data['supplier_status_id'] = 0;
        }

        //get default whatsapp number for vendor from whatsapp config
        if (empty($data['whatsapp_number'])) {
            $task_info = DB::table('whatsapp_configs')
                ->select('*')
                ->whereRaw('find_in_set(' . self::DEFAULT_FOR . ',default_for)')
                ->first();

            if ($task_info) {
                $data['whatsapp_number'] = $task_info->number;
            }
        }
        $scrapper_name = preg_replace("/\s+/", '', $request->supplier);
        $supplier      = Supplier::where('supplier', $scrapper_name)->get();

        if ($supplier->isEmpty()) {
            $supplier = Supplier::create($data);
            if ($supplier->id > 0) {
                $scraper = \App\Scraper::create([
                    'supplier_id'        => $supplier->id,
                    'scraper_name'       => $request->get('scraper_name', $scrapper_name),
                    'inventory_lifetime' => $request->get('inventory_lifetime', ''),
                ]);
            }
            $supplier->scrapper = $scraper->id;
            $supplier->save();
        } else {
            $scraper = \App\Scraper::where('scraper_name', $scrapper_name)->get();
            if (empty($scraper)) {
                $scraper = \App\Scraper::create([
                    'supplier_id'        => $supplier->id,
                    'scraper_name'       => $request->get('scraper_name', $scrapper_name),
                    'inventory_lifetime' => $request->get('inventory_lifetime', ''),
                ]);
                $supplier->scrapper = $scraper->id;
                $supplier->save();
            } else {
                $supplier->scrapper = $scraper->id;
                $supplier->save();
            }
        }

        if (! empty($source)) {
            return redirect()->back()->withSuccess('You have successfully saved a supplier!');
        }

        return redirect()->route('supplier.index')->withSuccess('You have successfully saved a supplier!');
    }

    /**
     * Display the specified resource.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        $supplier               = Supplier::find($id);
        $user                   = User::where('id', $supplier->updated_by)->first();
        $suppliers              = Supplier::select(['id', 'supplier'])->where('supplier_status_id', 1)->orderby('supplier', 'asc')->get();
        $reply_categories       = ReplyCategory::all();
        $users_array            = Helpers::getUserArray(User::all());
        $emails                 = [];
        $suppliercategory       = SupplierCategory::pluck('name', 'id');
        $supplierstatus         = SupplierStatus::pluck('name', 'id');
        $new_category_selection = Category::attr(['name' => 'category', 'class' => 'form-control', 'id' => 'category'])->renderAsDropdown();
        $locations              = \App\ProductLocation::pluck('name', 'name');

        $category_selection = Category::attr(['name' => 'category', 'class' => 'form-control', 'id' => 'category_selection'])
            ->renderAsDropdown();

        return view('suppliers.show', [
            'supplier'               => $supplier,
            'reply_categories'       => $reply_categories,
            'users_array'            => $users_array,
            'emails'                 => $emails,
            'suppliercategory'       => $suppliercategory,
            'supplierstatus'         => $supplierstatus,
            'suppliers'              => $suppliers,
            'new_category_selection' => $new_category_selection,
            'locations'              => $locations,
            'category_selection'     => $category_selection,
            'user'                   => $user,
        ]);
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        $this->validate($request, [
            //'supplier_category_id'        => 'required|string|max:255',
            'supplier'           => 'required|string|max:255',
            'address'            => 'sometimes|nullable|string',
            'phone'              => 'sometimes|nullable|numeric',
            'default_phone'      => 'sometimes|nullable|numeric',
            'whatsapp_number'    => 'sometimes|nullable|numeric',
            'email'              => 'sometimes|nullable|email',
            'default_email'      => 'sometimes|nullable|email',
            'social_handle'      => 'sometimes|nullable',
            'scraper_name'       => 'sometimes|nullable',
            'inventory_lifetime' => 'sometimes|nullable',
            'gst'                => 'sometimes|nullable|max:255',
        ]);

        $data                  = $request->except('_token');
        $data['default_phone'] = $request->default_phone != '' ? $request->default_phone : $request->phone;
        $data['default_email'] = $request->default_email != '' ? $request->default_email : $request->email;
        $data['is_updated']    = 1;
        Supplier::find($id)->update($data);

        $scrapers     = \App\Scraper::where('supplier_id', $id)->get();
        $multiscraper = explode(',', $request->get('scraper_name', ''));
        $multiscraper = array_map('strtolower', $multiscraper);
        if (! $scrapers->isEmpty()) {
            foreach ($scrapers as $scr) {
                if (! in_array(strtolower($scr->scraper_name), $multiscraper)) {
                    $scr->delete();
                }
            }
        }

        if (! empty($multiscraper)) {
            foreach ($multiscraper as $multiscr) {
                $scraper = \App\Scraper::where('supplier_id', $id)->where('scraper_name', $multiscr)->first();
                if ($scraper) {
                    $scraper->inventory_lifetime = $request->get('inventory_lifetime', '');
                } else {
                    $scraper                     = new \App\Scraper;
                    $scraper->supplier_id        = $id;
                    $scraper->inventory_lifetime = $request->get('inventory_lifetime', '');
                    $scraper->scraper_name       = $multiscr;
                }
                $scraper->save();
            }
        }

        return redirect()->back()->withSuccess('You have successfully updated a supplier!');
    }

    /**
     * Ajax Load More message method
     *
     * @param mixed $id
     */
    public function loadMoreMessages(Request $request, $id)
    {
        $supplier = Supplier::find($id);

        $chat_messages = $supplier->whatsapps()->skip(1)->take(3)->pluck('message');

        return response()->json([
            'messages' => $chat_messages,
        ]);
    }

    /**
     * Ajax Flag Update method
     */
    public function flag(Request $request)
    {
        $supplier = Supplier::find($request->supplier_id);

        if ($supplier->is_flagged == 0) {
            $supplier->is_flagged = 1;
        } else {
            $supplier->is_flagged = 0;
        }

        $supplier->save();

        return response()->json(['is_flagged' => $supplier->is_flagged]);
    }

    /**
     * Send Bulk email to supplier
     */
    public function sendEmailBulk(Request $request)
    {
        $this->validate($request, [
            'subject' => 'required|min:3|max:255',
            'message' => 'required',
            'cc.*'    => 'nullable|email',
            'bcc.*'   => 'nullable|email',
        ]);

        if ($request->suppliers) {
            $suppliers = Supplier::whereIn('id', $request->suppliers)->where(function ($query) {
                $query->whereNotNull('default_email')->orWhereNotNull('email');
            })->get();
        } else {
            if ($request->not_received != 'on' && $request->received != 'on') {
                return redirect()->route('supplier.index')->withErrors(['Please select either suppliers or option']);
            }
        }

        if ($request->not_received == 'on') {
            $suppliers = Supplier::doesnthave('emails')->where(function ($query) {
                $query->whereNotNull('default_email')->orWhereNotNull('email');
            })->get();
        }

        if ($request->received == 'on') {
            $suppliers = Supplier::whereDoesntHave('emails', function ($query) {
                $query->where('type', 'incoming');
            })->where(function ($query) {
                $query->whereNotNull('default_email')->orWhereNotNull('email');
            })->where('has_error', 0)->get();
        }

        $file_paths = [];

        if ($request->hasFile('file')) {
            foreach ($request->file('file') as $file) {
                $filename = $file->getClientOriginalName();

                $file->storeAs('documents', $filename, 'files');

                $file_paths[] = "documents/$filename";
            }
        }

        $cc = $bcc = [];
        if ($request->has('cc')) {
            $cc = array_values(array_filter($request->cc));
        }
        if ($request->has('bcc')) {
            $bcc = array_values(array_filter($request->bcc));
        }

        foreach ($suppliers as $supplier) {
            $mail = Mail::to($supplier->default_email ?? $supplier->email);

            if ($cc) {
                $mail->cc($cc);
            }
            if ($bcc) {
                $mail->bcc($bcc);
            }

            $mail->send(new PurchaseEmail($request->subject, $request->message, $file_paths));

            $params = [
                'model_id'        => $supplier->id,
                'model_type'      => Supplier::class,
                'from'            => 'buying@amourint.com',
                'seen'            => 1,
                'to'              => $supplier->default_email ?? $supplier->email,
                'subject'         => $request->subject,
                'message'         => $request->message,
                'template'        => 'customer-simple',
                'additional_data' => json_encode(['attachment' => $file_paths]),
                'cc'              => $cc ?: null,
                'bcc'             => $bcc ?: null,
            ];

            Email::create($params);
        }

        return redirect()->route('supplier.index')->withSuccess('You have successfully sent emails in bulk!');
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        $supplier = Supplier::find($id);

        $supplier->delete();

        return redirect()->route('supplier.index')->withSuccess('You have successfully deleted a supplier');
    }

    /**
     * Add Notes method
     *
     * @param mixed $id
     */
    public function addNote($id, Request $request)
    {
        $supplier = Supplier::findOrFail($id);
        $notes    = $supplier->notes;
        if (! is_array($notes)) {
            $notes = [];
        }

        $notes[]         = $request->get('note');
        $supplier->notes = $notes;
        $supplier->save();

        return response()->json([
            'status' => 'success',
        ]);
    }

    public function supplierupdate(Request $request)
    {
        $supplier            = Supplier::find($request->get('supplier_id'));
        $supplier->frequency = $request->get('id');
        $type                = $request->get('type');
        if ($type == 'category') {
            $supplier->supplier_category_id = $request->get('id');
        }
        if ($type == 'status') {
            $supplier->supplier_status_id = $request->get('id');
        }
        $supplier->save();

        return response()->json([
            'success',
        ]);
    }

    public function getsuppliers(Request $request)
    {
        $input = $request->all();

        $supplier_category_id = $input['supplier_category_id'];

        $supplier_status_id = $input['supplier_status_id'];

        $filter = $input['filter'];

        $data            = '';
        $typeWhereClause = '';
        $suppliers_all   = [];
        if ($supplier_category_id == '' && $supplier_status_id == '') {
            //
        } else {
            if ($supplier_category_id != '') {
                $typeWhereClause .= ' AND supplier_category_id=' . $supplier_category_id;
            }
            if ($supplier_status_id != '') {
                $typeWhereClause .= ' AND supplier_status_id=' . $supplier_status_id;
            }

            if ($filter != '') {
                $typeWhereClause .= ' AND supplier like "' . $filter . '%"';
            }
            $suppliers_all = Supplier::select('id', 'supplier', 'email', 'default_email')
                ->where('email', '!=', '')
                ->whereRaw($typeWhereClause)
                ->get();
        }

        if (count($suppliers_all) > 0) {
            foreach ($suppliers_all as $supplier) {
                $data .= '<option value="' . $supplier->id . '">' . $supplier->supplier . ' - ' . $supplier->default_email . ' / ' . $supplier->email . '</option>';
            }
        }

        return $data;
    }

    public function addSupplierCategoryCount()
    {
        $suppliercount   = SupplierCategoryCount::all();
        $category_parent = Category::where('parent_id', 0)->get();
        $category_child  = Category::where('parent_id', '!=', 0)->get();
        $supplier        = Supplier::where('supplier_status_id', 1)->orderby('supplier', 'asc')->get();

        return view('suppliers.supplier_category_count', compact('supplier', 'suppliercount', 'category_parent', 'category_child'));
    }

    public function saveSupplierCategoryCount(Request $request)
    {
        $category_id = $request->category_id;
        $supplier_id = $request->supplier_id;
        $count       = $request->count;

        $data['category_id'] = $category_id;
        $data['supplier_id'] = $supplier_id;
        $data['cnt']         = $count;
        SupplierCategoryCount::create($data);

        return 'Saved SucessFully';
    }

    public function getSupplierCategoryCount(Request $request)
    {
        $limit = $request->input('length');
        $start = $request->input('start');

        $suppliercount      = SupplierCategoryCount::query();
        $suppliercountTotal = SupplierCategoryCount::count();
        $supplier_list      = Supplier::where('supplier_status_id', 1)->orderby('supplier', 'asc')->get();
        $category_parent    = Category::where('parent_id', 0)->get();
        $category_child     = Category::where('parent_id', '!=', 0)->get();

        $suppliercount = $suppliercount->offset($start)->limit($limit)->orderBy('supplier_id', 'asc')->get();
        foreach ($suppliercount as $supplier) {
            $sup = '';
            foreach ($supplier_list as $v) {
                if ($v->id == $supplier->supplier_id) {
                    $sup .= '<option value="' . $v->id . '" selected>' . $v->supplier . '</option>';
                } else {
                    $sup .= '<option value="' . $v->id . '">' . $v->supplier . '</option>';
                }
            }

            $cat = '';
            foreach ($category_parent as $c) {
                if ($c->id == $supplier->category_id) {
                    $cat .= '<option value="' . $c->id . '" selected>' . $c->title . '</option>';
                } else {
                    $cat .= '<option value="' . $c->id . '">' . $c->title . '</option>';
                    if ($c->childs) {
                        foreach ($c->childs as $categ) {
                            $cat .= '<option value="' . $categ->id . '">-&nbsp;' . $categ->title . '</option>';
                        }
                    }
                }
            }
            foreach ($category_child as $c) {
                if ($c->id == $supplier->category_id) {
                    $cat .= '<option value="' . $c->id . '" selected>' . $c->title . '</option>';
                } else {
                    $cat .= '<option value="' . $c->id . '">' . $c->title . '</option>';
                    if ($c->childs) {
                        foreach ($c->childs as $categ) {
                            $cat .= '<option value="' . $categ->id . '">-&nbsp;' . $categ->title . '</option>';
                        }
                    }
                }
            }

            $sub_array   = [];
            $sub_array[] = '<select class="form-control update" data-column="supplier_id" data-id="' . $supplier['id'] . '">' . $sup . '</select>';
            $sub_array[] = '<select class="form-control update" data-id="' . $supplier['id'] . '" data-column="category_id">' . $cat . '</select>';
            $sub_array[] = '<input type="number"  data-id="' . $supplier['id'] . '" data-column="cnt" value="' . $supplier['cnt'] . '"  class="form-control update">';
            $sub_array[] = '<button type="button" name="delete" class="btn btn-danger btn-xs delete" id="' . $supplier['id'] . '">Delete</button>';
            $data[]      = $sub_array;
        }
        if (! empty($data)) {
            $output = [
                'draw'            => intval($request->input('draw')),
                'recordsTotal'    => $suppliercountTotal,
                'recordsFiltered' => $suppliercountTotal,
                'data'            => $data,
            ];
        } else {
            $output = [
                'draw'            => 0,
                'recordsTotal'    => 0,
                'recordsFiltered' => 0,
                'data'            => [],
            ];
        }

        return json_encode($output);
    }

    public function updateSupplierCategoryCount(Request $request)
    {
        $id                          = $request->id;
        $column_name                 = $request->column_name;
        $value                       = $request->value;
        $suppliercount               = SupplierCategoryCount::findorfail($request->id);
        $suppliercount->$column_name = $value;
        $suppliercount->update();

        return 'Data Updated';
    }

    public function deleteSupplierCategoryCount(Request $request)
    {
        $id            = $request->id;
        $suppliercpunt = SupplierCategoryCount::findorfail($id);
        if ($suppliercpunt) {
            SupplierCategoryCount::destroy($id);
        }

        return 'Data Deleted';
    }

    public function addSupplierBrandCount()
    {
        $suppliercount   = SupplierBrandCount::all();
        $brand           = Brand::orderby('name', 'asc')->get();
        $supplier        = Supplier::where('supplier_status_id', 1)->orderby('supplier', 'asc')->get();
        $category_parent = Category::where('parent_id', 0)->get();
        $category_child  = Category::where('parent_id', '!=', 0)->get();

        return view('suppliers.supplier_brand_count', compact('supplier', 'suppliercount', 'brand', 'category_parent', 'category_child'));
    }

    public function saveSupplierBrandCount(Request $request)
    {
        $brand_id    = $request->brand_id;
        $supplier_id = $request->supplier_id;
        $count       = $request->count;
        $url         = $request->url;
        $category_id = $request->category_id;

        $data['brand_id']    = $brand_id;
        $data['supplier_id'] = $supplier_id;
        $data['cnt']         = $count;
        $data['url']         = $url;
        $data['category_id'] = $category_id;

        SupplierBrandCount::create($data);

        return 'Saved SucessFully';
    }

    public function getSupplierBrandCount(Request $request)
    {
        $columns = [
            0 => 'supplier_id',
            1 => 'category_id',
            2 => 'brand_id',
            3 => 'count',
            4 => 'url',
            5 => 'action',
        ];

        $limit = $request->input('length');
        $start = $request->input('start');

        $suppliercount      = SupplierBrandCount::query();
        $suppliercountTotal = SupplierBrandCount::count();
        $supplier_list      = Supplier::where('supplier_status_id', 1)->orderby('supplier', 'asc')->get();
        $brand_list         = Brand::orderby('name', 'asc')->get();
        $category_parent    = Category::where('parent_id', 0)->orderby('title', 'asc')->get();
        $category_child     = Category::where('parent_id', '!=', 0)->orderby('title', 'asc')->get();

        $suppliercount = $suppliercount->offset($start)->limit($limit)->orderBy('supplier_id', 'asc')->get();

        foreach ($suppliercount as $supplier) {
            $sup = '';

            foreach ($supplier_list as $v) {
                if ($v->id == $supplier->supplier_id) {
                    $sup .= '<option value="' . $v->id . '" selected>' . $v->supplier . '</option>';
                } else {
                    $sup .= '<option value="' . $v->id . '">' . $v->supplier . '</option>';
                }
            }

            $brands = '';
            foreach ($brand_list as $v) {
                if ($v->id == $supplier->brand_id) {
                    $brands .= '<option value="' . $v->id . '" selected>' . $v->name . '</option>';
                } else {
                    $brands .= '<option value="' . $v->id . '">' . $v->name . '</option>';
                }
            }

            $cat = '';
            $cat .= '<option>Select Category</option>';
            foreach ($category_parent as $c) {
                if ($c->id == $supplier->category_id) {
                    $cat .= '<option value="' . $c->id . '" selected>' . $c->title . '</option>';
                } else {
                    $cat .= '<option value="' . $c->id . '">' . $c->title . '</option>';
                    if ($c->childs) {
                        foreach ($c->childs as $categ) {
                            $cat .= '<option value="' . $categ->id . '">-&nbsp;' . $categ->title . '</option>';
                        }
                    }
                }
            }
            foreach ($category_child as $c) {
                if ($c->id == $supplier->category_id) {
                    $cat .= '<option value="' . $c->id . '" selected>' . $c->title . '</option>';
                } else {
                    $cat .= '<option value="' . $c->id . '">' . $c->title . '</option>';
                    if ($c->childs) {
                        foreach ($c->childs as $categ) {
                            $cat .= '<option value="' . $categ->id . '">-&nbsp;' . $categ->title . '</option>';
                        }
                    }
                }
            }

            $sub_array   = [];
            $sub_array[] = '<select disabled class="form-control">' . $sup . '</select>';
            $sub_array[] = '<select class="form-control" disabled>' . $cat . '</select>';
            $sub_array[] = '<select disabled class="form-control">' . $brands . '</select>';
            $sub_array[] = '<input type="number"  data-id="' . $supplier['id'] . '" data-column="cnt" value="' . $supplier['cnt'] . '"  class="form-control update">';
            $sub_array[] = $supplier['url'];
            $sub_array[] = '<button type="button" name="delete" class="btn btn-danger btn-xs delete" id="' . $supplier['id'] . '">Delete</button>';
            $data[]      = $sub_array;
        }

        if (! empty($data)) {
            $output = [
                'draw'            => intval($request->input('draw')),
                'recordsTotal'    => $suppliercountTotal,
                'recordsFiltered' => $suppliercountTotal,
                'data'            => $data,
            ];
        } else {
            $output = [
                'draw'            => 0,
                'recordsTotal'    => 0,
                'recordsFiltered' => 0,
                'data'            => [],
            ];
        }

        return json_encode($output);
    }

    public function updateSupplierBrandCount(Request $request)
    {
        $id            = $request->id;
        $column_name   = $request->column_name;
        $value         = $request->value;
        $suppliercount = SupplierBrandCount::findorfail($request->id);

        // Update in history
        $history                          = new SupplierBrandCountHistory();
        $history->supplier_brand_count_id = $suppliercount->id;
        $history->supplier_id             = $suppliercount->supplier_id;
        $history->brand_id                = $suppliercount->brand_id;
        $history->cnt                     = $suppliercount->cnt;
        $history->url                     = $suppliercount->url;
        $history->category_id             = $suppliercount->category_id;
        $history->save();
        //Update the value
        $suppliercount->$column_name = $value;
        $suppliercount->update();

        return 'Data Updated';
    }

    public function deleteSupplierBrandCount(Request $request)
    {
        $id            = $request->id;
        $suppliercount = SupplierBrandCount::findorfail($id);
        if ($suppliercount) {
            // Update in history
            $history                          = new SupplierBrandCountHistory();
            $history->supplier_brand_count_id = $suppliercount->id;
            $history->supplier_id             = $suppliercount->supplier_id;
            $history->brand_id                = $suppliercount->brand_id;
            $history->cnt                     = $suppliercount->cnt;
            $history->url                     = $suppliercount->url;
            $history->category_id             = $suppliercount->category_id;
            $history->save();
            SupplierBrandCount::destroy($id);
        }

        return 'Data Deleted';
    }

    public function block(Request $request)
    {
        $supplier = Supplier::find($request->supplier_id);

        if ($supplier->is_blocked == 0) {
            $supplier->is_blocked = 1;
        } else {
            $supplier->is_blocked = 0;
        }

        $supplier->save();

        return response()->json(['is_blocked' => $supplier->is_blocked]);
    }

    public function saveImage(Request $request)
    {
        // Only create Product
        if ($request->type == 1) {
            // Create Group ID with Product
            $images = explode(',', $request->checkbox1[0]);
            if ($images) {
                $createdProducts = [];
                foreach ($images as $image) {
                    if ($image != null) {
                        $product = Product::select('sku')->where('sku', 'LIKE', '%QUICKSELL' . date('yz') . '%')->orderBy('id', 'desc')->first();
                        if ($product) {
                            $number = str_ireplace('QUICKSELL', '', $product->sku) + 1;
                        } else {
                            $number = date('yz') . sprintf('%02d', 1);
                        }

                        $product = new Product;

                        $product->name     = 'QUICKSELL';
                        $product->sku      = 'QuickSell' . $number;
                        $product->size     = '';
                        $product->brand    = $product->brand = $request->brand;
                        $product->color    = '';
                        $product->location = request('location', '');
                        if ($request->category == null) {
                            $product->category = '';
                        } else {
                            $product->category = $request->category;
                        }

                        if ($request->supplier == null) {
                            $product->supplier = 'QUICKSELL';
                        } else {
                            $sup               = Supplier::findorfail($request->supplier);
                            $product->supplier = $sup->supplier;
                        }
                        if ($request->buying_price == null) {
                            $product->price = 0;
                        } else {
                            $product->price = $request->buying_price;
                        }
                        if ($request->special_price == null) {
                            $product->price_inr_special = 0;
                        } else {
                            $product->price_inr_special = $request->special_price;
                        }
                        $product->stock         = 1;
                        $product->quick_product = 1;
                        $product->is_pending    = 1;
                        $product->save();
                        $createdProducts[] = $product->id;
                        preg_match_all('#\bhttps?://[^,\s()<>]+(?:\([\w\d]+\)|([^,[:punct:]\s]|/))#', $image, $match);
                        $image = isset($match[0][0]) ? $match[0][0] : false;
                        if (! empty($image)) {
                            $jpg      = \Image::make($image)->encode('jpg');
                            $filename = substr($image, strrpos($image, '/'));
                            $filename = str_replace('/', '', $filename);
                            $media    = MediaUploader::fromString($jpg)->useFilename($filename)->upload();
                            $product->attachMedia($media, config('constants.media_tags'));
                        }
                    }
                }
                if (count($createdProducts) > 0) {
                    $message = count($createdProducts) . ' Product(s) has been created successfully, id\'s are ' . json_encode($createdProducts);
                    $code    = 200;
                } else {
                    $message = 'No Images selected';
                    $code    = 500;
                }

                return response()->json(['code' => $code, 'message' => $message]);
            } else {
                return response()->json(['code' => 500, 'message' => 'No Images selected']);
            }
        } elseif ($request->type == 3) {
            // Create Group ID with Product
            $images = $request->images;

            $images = explode('"', $images);
            if ($images) {
                $createdProducts = [];
                foreach ($images as $image) {
                    if ($image != null) {
                        if ($image != '[' && $image != ']' && $image != ',') {
                            $product           = new Product;
                            $product->name     = $request->name;
                            $product->sku      = $request->sku;
                            $product->size     = $request->size;
                            $product->brand    = $request->brand;
                            $product->color    = $request->color;
                            $product->location = $request->location;
                            $product->category = $request->category;
                            $product->supplier = $request->supplier;

                            if ($request->price == null) {
                                $product->price = 0;
                            } else {
                                $product->price = $request->price;
                            }

                            if ($request->price_special == null) {
                                $product->price_inr_special = 0;
                            } else {
                                $product->price_inr_special = $request->price_special;
                            }
                            $product->stock           = 1;
                            $product->purchase_status = 'InStock';
                            $product->save();
                            $createdProducts[] = $product->id;
                            preg_match_all('#\bhttps?://[^,\s()<>]+(?:\([\w\d]+\)|([^,[:punct:]\s]|/))#', $image, $match);
                            $image = isset($match[0][0]) ? $match[0][0] : false;
                            if (! empty($image)) {
                                $jpg      = \Image::make($image)->encode('jpg');
                                $filename = substr($image, strrpos($image, '/'));
                                $filename = str_replace('/', '', $filename);
                                $media    = MediaUploader::fromString($jpg)->useFilename($filename)->upload();
                                $product->attachMedia($media, config('constants.media_tags'));
                            }
                        }
                    }
                }
                if (count($createdProducts) > 0) {
                    $message = count($createdProducts) . ' Product(s) has been created successfully, id\'s are ' . json_encode($createdProducts);
                    $code    = 200;
                } else {
                    $message = 'No Images selected';
                    $code    = 500;
                }

                return response()->json(['code' => $code, 'message' => $message]);
            } else {
                return response()->json(['code' => 500, 'message' => 'No Images selected']);
            }
        } else {
            // Create Group ID with Product
            $images = explode(',', $request->checkbox[0]);

            if ($images) {
                // Loop Over Images

                $group = QuickSellGroup::orderBy('id', 'desc')->first();
                if ($group != null) {
                    if ($request->groups != null) {
                        $group_create = QuickSellGroup::findorfail($request->groups);
                        $group_id     = $group_create->group;
                    } else {
                        $group_create = new QuickSellGroup();
                        $incrementId  = ($group->group + 1);
                        if ($request->group_id != null) {
                            $group_create->name = $request->group_id;
                        }
                        $group_create->suppliers     = json_encode($request->supplier);
                        $group_create->brands        = json_encode($request->brand);
                        $group_create->price         = $request->buying_price;
                        $group_create->special_price = $request->special_price;
                        $group_create->categories    = json_encode($request->category);
                        $group_create->group         = $incrementId;
                        $group_create->save();
                        $group_id = $group_create->group;
                    }
                } else {
                    $group                       = new QuickSellGroup();
                    $group->group                = 1;
                    $group_create->name          = $request->group_id;
                    $group_create->suppliers     = json_encode($request->suppliers);
                    $group_create->brands        = json_encode($request->brand);
                    $group_create->price         = $request->buying_price;
                    $group_create->special_price = $request->special_price;
                    $group_create->categories    = json_encode($request->categories);
                    $group->save();
                    $group_id = $group->group;
                }
                $createdProducts = [];
                foreach ($images as $image) {
                    //Getting the last created QUICKSELL
                    $product = Product::select('sku')->where('sku', 'LIKE', '%QUICKSELL' . date('yz') . '%')->orderBy('id', 'desc')->first();
                    if ($product) {
                        $number = str_ireplace('QUICKSELL', '', $product->sku) + 1;
                    } else {
                        $number = date('yz') . sprintf('%02d', 1);
                    }
                    $product = new Product;

                    $product->name     = 'QUICKSELL';
                    $product->sku      = 'QuickSell' . $number;
                    $product->size     = '';
                    $product->brand    = $request->brand;
                    $product->color    = '';
                    $product->location = request('location', '');
                    if ($request->category == null) {
                        $product->category = '';
                    } else {
                        $product->category = $request->category;
                    }

                    if ($request->supplier == null) {
                        $product->supplier = 'QUICKSELL';
                    } else {
                        $sup               = Supplier::findorfail($request->supplier);
                        $product->supplier = $sup->supplier;
                    }
                    if ($request->buying_price == null) {
                        $product->price = 0;
                    } else {
                        $product->price = $request->buying_price;
                    }
                    if ($request->special_price == null) {
                        $product->price_inr_special = 0;
                    } else {
                        $product->price_inr_special = $request->special_price;
                    }

                    $product->stock         = 1;
                    $product->quick_product = 1;
                    $product->is_pending    = 1;
                    $product->save();
                    $createdProducts[] = $product->id;
                    preg_match_all('#\bhttps?://[^,\s()<>]+(?:\([\w\d]+\)|([^,[:punct:]\s]|/))#', $image, $match);
                    if (isset($match[0]) && isset($match[0][0])) {
                        $image = $match[0][0];
                        $jpg   = \Image::make($image)->encode('jpg');

                        $filename = substr($image, strrpos($image, '/'));
                        $filename = str_replace('/', '', $filename);
                        $media    = MediaUploader::fromString($jpg)->useFilename($filename)->upload();
                        $product->attachMedia($media, config('constants.media_tags'));
                    }
                    // if Product is true
                    if ($product == true) {
                        //Finding last created Product using sku
                        $product_id = Product::where('sku', $product->sku)->first();
                        if ($product_id != null) {
                            $id = $product_id->id;
                            //getting last group id

                            $group                     = new ProductQuicksellGroup();
                            $group->product_id         = $id;
                            $group->quicksell_group_id = $group_id;
                            $group->save();
                        }
                    }
                }
                if (count($createdProducts) > 0) {
                    $message = count($createdProducts) . ' Product(s) has been created successfully, id\'s are ' . json_encode($createdProducts);
                    $code    = 200;
                } else {
                    $message = 'No Images selected';
                    $code    = 500;
                }

                return response()->json(['code' => $code, 'message' => $message]);
            } else {
                return response()->json(['code' => 500, 'message' => 'No Images selected']);
            }
        }
    }

    /**
     * @SWG\Post(
     *   path="/supplier/brands-raw",
     *   tags={"Scraper"},
     *   summary="Update supplier brand raw",
     *   operationId="scraper-post-supplier-brands",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *   @SWG\Response(response=403, description="not acceptable"),
     *   @SWG\Response(response=500, description="internal server error"),
     *
     *      @SWG\Parameter(
     *          name="supplier_id",
     *          in="formData",
     *          required=true,
     *          type="integer"
     *      ),
     *      @SWG\Parameter(
     *          name="brands_raw",
     *          in="formData",
     *          required=true,
     *          type="string"
     *      ),
     * )
     */
    public function apiBrandsRaw(Request $request)
    {
        // Get supplier ID
        $supplierId = (int) $request->supplier_id;
        $brandsRaw  = $request->brands_raw;

        if (empty($supplierId) || empty($brandsRaw)) {
            return response()->json(['error' => 'The fields supplier_id and brands_raw are obligated'], 403);
        }

        // Get Supplier model
        $supplier = Supplier::find($supplierId);

        // Do we have a result?
        if ($supplier != null) {
            $supplier->scraped_brands_raw = $brandsRaw;
            $supplier->save();

            return response()->json(['success' => 'Supplier updated'], 200);
        }

        // Still here? Return an error
        return response()->json(['error' => 'Supplier not found'], 403);
    }

    /**
     * Get scraped brand and scraped brands raw of a supplier
     *
     * @return json response with brand and brand raw
     */
    public function getScrapedBrandAndBrandRaw(Request $request)
    {
        $supplierId = $request->id;

        $supplier = Supplier::find($supplierId);
        if ($supplier->scraped_brands != '') {
            $scrapedBrands = array_filter(explode(',', $supplier->scraped_brands));

            sort($scrapedBrands);
        } else {
            $scrapedBrands = [];
        }

        if ($supplier->scraped_brands_raw != '') {
            $rawBrands = array_unique(array_filter(array_column(json_decode($supplier->scraped_brands_raw, true), 'name')));

            sort($rawBrands);
        } else {
            $rawBrands = [];
        }

        return response()->json(['scrapedBrands' => $scrapedBrands, 'scrapedBrandsRaw' => $rawBrands], 200);
    }

    /**
     * Update scraped brand from scrapped brands raw for a supplier
     *
     * @return json response with update status
     */
    public function updateScrapedBrandFromBrandRaw(Request $request)
    {
        $supplierId   = $request->id;
        $newBrandData = ($request->newBrandData) ? $request->newBrandData : [];

        // Get Supplier model
        $supplier = Supplier::find($supplierId);

        // Do we have a result?
        if ($supplier != null) {
            $supplier->scraped_brands = implode(',', $newBrandData);
            $supplier->save();

            return response()->json(['success' => 'Supplier brand updated'], 200);
        }

        // Still here? Return an error
        return response()->json(['error' => 'Supplier not found'], 403);
    }

    public function excelImport(Request $request)
    {
        if ($request->attachment) {
            $supplier = Supplier::find($request->id);
            $file     = explode('/', $request->attachment);
            if (class_exists('\\seo2websites\\ErpExcelImporter\\ErpExcelImporter')) {
                $excel = $supplier->getSupplierExcelFromSupplierEmail();
                $excel = ErpExcelImporter::excelFileProcess(end($file), $excel, $supplier->email);

                return response()->json(['success' => 'File Processed For Import'], 200);
            } else {
                return response()->json(['error' => 'File Couldnt Process For Import'], 200);
            }
        }

        if ($request->file('excel_file')) {
            $file = $request->file('excel_file');
            if ($file->getClientOriginalExtension() == 'xls' || $file->getClientOriginalExtension() == 'xlsx') {
                $path     = 'files/email-attachments/file';
                $fileName = $file->hashName();
                $filePath = $file->saveAs($path, $fileName);
                $supplier = Supplier::find($request->id);
                if (class_exists('\\seo2websites\\ErpExcelImporter\\ErpExcelImporter')) {
                    $excel = $supplier->getSupplierExcelFromSupplierEmail();
                    $excel = ErpExcelImporter::excelFileProcess($filePath, $excel, $supplier->email);

                    return redirect()->back()->withSuccess('File Processed For Import');
                } else {
                    return redirect()->back()->withErrors('Excel Importer Not Found');
                }
            } else {
                return redirect()->back()->withErrors('Please Use Excel FIle');
            }
        }
    }

    /**
     * Remove particular scraped brand from scrapped brands for a supplier
     *
     * @return json response with status, updated brand list, raw brand list
     */
    public function removeScrapedBrand(Request $request)
    {
        $supplierId      = $request->id;
        $removeBrandData = $request->removeBrandData;

        // Get Supplier model
        $supplier = Supplier::find($supplierId);

        // Do we have a result?
        if ($supplier != null) {
            if ($supplier->scraped_brands != '') {
                $scrapedBrands = array_filter(explode(',', $supplier->scraped_brands));

                $newBrandData = array_diff($scrapedBrands, [$removeBrandData]);
                sort($newBrandData);
            } else {
                $newBrandData = [];
            }
            if ($supplier->scraped_brands_raw != '') {
                $rawBrands = array_unique(array_filter(array_column(json_decode($supplier->scraped_brands_raw, true), 'name')));
                sort($rawBrands);
            } else {
                $rawBrands = [];
            }

            $supplier->scraped_brands = implode(',', $newBrandData);
            $supplier->save();

            return response()->json(['scrapedBrands' => $newBrandData, 'scrapedBrandsRaw' => $rawBrands, 'success' => 'Scraped brand removed'], 200);
        }

        // Still here? Return an error
        return response()->json(['error' => 'Supplier not found'], 403);
    }

    public function changeMail(Request $request)
    {
        $supplier        = Supplier::find($request->supplier_id);
        $supplier->email = $request->email;
        $supplier->save();

        return response()->json(['code' => 200, 'data' => [], 'message' => 'Email updated successfully']);
    }

    public function changePhone(Request $request)
    {
        $supplier        = Supplier::find($request->supplier_id);
        $supplier->phone = $request->phone;
        $supplier->save();

        return response()->json(['code' => 200, 'data' => [], 'message' => 'Telephone Number updated successfully']);
    }

    public function changeSize(Request $request)
    {
        $supplier                   = Supplier::find($request->supplier_id);
        $supplier->supplier_size_id = $request->size;
        $supplier->save();

        return response()->json(['code' => 200, 'data' => [], 'message' => 'Size updated successfully']);
    }

    public function changeSizeSystem(Request $request)
    {
        $supplier                 = Supplier::find($request->supplier_id);
        $supplier->size_system_id = $request->size;
        $supplier->save();

        return response()->json(['code' => 200, 'data' => [], 'message' => 'Size System updated successfully']);
    }

    public function changeWhatsapp(Request $request)
    {
        $supplier                  = Supplier::find($request->supplier_id);
        $supplier->whatsapp_number = $request->whatsapp;
        $supplier->save();

        return response()->json(['code' => 200, 'data' => [], 'message' => 'Whatsapp Number updated successfully']);
    }

    /**
     * copy selected scraped brands to brand for a supplier
     *
     * @return json response with update status, brands
     */
    public function copyScrapedBrandToBrand(Request $request)
    {
        $supplierId = $request->id;

        // Get Supplier model
        $supplier = Supplier::find($supplierId);

        // Do we have a result?
        if ($supplier != null) {
            $selectedScrapedBrand = ($supplier->scraped_brands) ? $supplier->scraped_brands : '';
            if ($selectedScrapedBrand != '') {
                //We have got selected scraped brands, now store that in brands
                $supplier->brands = '"[' . $selectedScrapedBrand . ']"';
                $supplier->save();

                $miniScrapedBrand = strlen($selectedScrapedBrand) > 10 ? substr($selectedScrapedBrand, 0, 10) . '...' : $selectedScrapedBrand;

                return response()->json(['success' => 'Supplier brand updated', 'mini' => $miniScrapedBrand, 'full' => $selectedScrapedBrand], 200);
            } else {
                return response()->json(['error' => 'Scraped brands not selected for the supplier'], 403);
            }
        }

        // Still here? Return an error
        return response()->json(['error' => 'Supplier not found'], 403);
    }

    public function languageTranslate(Request $request)
    {
        $supplier           = Supplier::find($request->id);
        $supplier->language = $request->language;
        $supplier->save();

        return response()->json(['success' => 'Supplier language updated'], 200);
    }

    public function priority(Request $request)
    {
        $supplier           = Supplier::find($request->id);
        $supplier->priority = $request->priority;
        $supplier->save();

        return response()->json(['success' => 'Supplier priority updated'], 200);
    }

    public function manageScrapedBrands(Request $request)
    {
        $arr  = [];
        $data = Setting::where('type', 'ScrapeBrandsRaw')->get()->first();
        if (empty($data)) {
            $brand['type'] = 'ScrapeBrandsRaw';
            $brand['val']  = json_encode($request->selectedBrands);
            Setting::create($brand);
        } else {
            $data->val = json_encode($request->selectedBrands);
            $data->save();
        }

        return 'Scraped Brands Raw removed from dropdown successfully';
    }

    public function changeWhatsappNo(Request $request)
    {
        $supplier                  = Supplier::find($request->supplier_id);
        $supplier->whatsapp_number = $request->number;
        $supplier->update();

        return response()->json(['success' => 'Supplier Whatsapp updated'], 200);
    }

    public function changeStatus(Request $request)
    {
        $supplierId = $request->get('supplier_id');
        $statusId   = $request->get('supplier_status_id');

        if (! empty($supplierId)) {
            $supplier = \App\Supplier::find($supplierId);
            if (! empty($supplier)) {
                $supplier->supplier_status_id = ($statusId == 'false') ? 0 : 1;
                $supplier->save();
            }
        }

        return response()->json(['code' => 200, 'data' => [], 'message' => 'Status updated successfully']);
    }

    /**
     * Change supplier category
     */
    public function changeCategory(Request $request)
    {
        $supplierId = $request->get('supplier_id');
        $categoryId = $request->get('supplier_category_id');

        if (! empty($supplierId)) {
            $supplier = \App\Supplier::find($supplierId);
            if (! empty($supplier)) {
                $supplier->fill(['supplier_category_id' => $categoryId])->save();
            }
        }

        return response()->json(['code' => 200, 'data' => [], 'message' => 'Category updated successfully']);
    }

    public function changeSupplierStatus(Request $request)
    {
        $supplierId = $request->get('supplier_id');
        $status     = $request->get('status');

        if (! empty($supplierId)) {
            $supplier = \App\Supplier::find($supplierId);
            if (! empty($supplier)) {
                $supplier->fill(['supplier_status_id' => $status])->save();
            }
        }

        return response()->json(['code' => 200, 'data' => [], 'message' => 'Status updated successfully']);
    }

    public function changeSubCategory(Request $request)
    {
        $supplierId = $request->get('supplier_id');
        $categoryId = $request->get('supplier_sub_category_id');

        if (! empty($supplierId)) {
            $supplier = \App\Supplier::find($supplierId);
            if (! empty($supplier)) {
                $supplier->fill(['supplier_sub_category_id' => $categoryId])->save();
            }
        }

        return response()->json(['code' => 200, 'data' => [], 'message' => 'Sub Category updated successfully']);
    }

    public function editInventorylifetime(Request $request)
    {
        $supplierId         = $request->get('supplier_id');
        $inventory_lifetime = $request->get('inventory_lifetime');

        if (! empty($supplierId)) {
            $supplier = \App\Scraper::where('supplier_id', $supplierId)->first();
            if (! empty($supplier)) {
                $supplier->fill(['inventory_lifetime' => $inventory_lifetime])->save();
            }
        }

        return response()->json(['code' => 200, 'data' => [], 'message' => 'Inventory lifetime updated successfully']);
    }

    public function changeScrapper(Request $request)
    {
        $supplierId = $request->get('supplier_id');
        $scrapperId = $request->get('scrapper');
        if (! empty($supplierId)) {
            $supplier = \App\Supplier::find($supplierId);
            $scrapper = \App\Scraper::where('supplier_id', $supplierId)->first();
            if (! empty($scrapper)) {
                $supplier->fill(['scrapper' => $scrapperId])->save();
            } else {
                $scrapper_name = preg_replace("/\s+/", '', $supplier->supplier);
                $scrapper_name = strtolower($scrapper_name);
                $scraper       = \App\Scraper::create([
                    'supplier_id'        => $supplier->id,
                    'scraper_name'       => $request->get('scraper_name', $scrapper_name),
                    'inventory_lifetime' => $request->get('inventory_lifetime', ''),
                ]);
                $supplier->fill(['scrapper' => $scrapperId])->save();
            }
        }

        return response()->json(['code' => 200, 'data' => [], 'message' => 'Scrapper updated successfully']);
    }

    public function changeLanguage(Request $request)
    {
        $supplierId = $request->get('supplier_id');
        $languageId = $request->get('language');
        if (! empty($supplierId)) {
            $language = \App\Supplier::where('id', $supplierId)->update(['language_id' => $languageId]);
        }

        return response()->json(['code' => 200, 'data' => [], 'message' => 'Language updated successfully']);
    }

    /**
     * Add supplier category
     */
    public function addCategory(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'name' => 'required',
        ]);

        if ($validator->fails()) {
            return redirect()->back()
                ->withErrors($validator)
                ->withInput();
        }

        SupplierCategory::create($request->all());

        return redirect()->route('supplier.index')->withSuccess('You have successfully saved a category!');
    }

    public function addSubCategory(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'name' => 'required',
        ]);

        if ($validator->fails()) {
            return redirect()->back()
                ->withErrors($validator)
                ->withInput();
        }

        SupplierSubCategory::create($request->all());

        return redirect()->route('supplier.index')->withSuccess('You have successfully saved a sub category!');
    }

    public function addStatus(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'name' => 'required',
        ]);

        if ($validator->fails()) {
            return redirect()->back()
                ->withErrors($validator)
                ->withInput();
        }

        SupplierStatus::create($request->all());

        return redirect()->route('supplier.index')->withSuccess('You have successfully saved a status!');
    }

    public function addSupplierSize(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'size' => 'required',
        ]);

        if ($validator->fails()) {
            return redirect()->back()
                ->withErrors($validator)
                ->withInput();
        }

        SupplierSize::create($request->all());

        return redirect()->route('supplier.index')->withSuccess('You have successfully saved a supplier size!');
    }

    public function MessageTranslateHistory(Request $request)
    {
        $history = \App\SupplierTranslateHistory::orderBy('id', 'desc')->where('supplier_id', $request->supplier)->get();

        return response()->json(['code' => 200, 'data' => $history]);
    }

    public function sendMessage(Request $request)
    {
        $suppliers = Supplier::whereIn('id', $request->suppliers)->get();
        $params    = [];
        $message   = [];
        //Create broadcast
        $broadcast = \App\BroadcastMessage::create(['name' => $request->name]);
        if (count($suppliers)) {
            foreach ($suppliers as $key => $item) {
                $params = [
                    'supplier_id' => $item->id,
                    'number'      => null,
                    'message'     => $request->message,
                    'user_id'     => Auth::id(),
                    'status'      => 1,
                ];
                $message = [
                    'type_id'              => $item->id,
                    'type'                 => App\Supplier::class,
                    'broadcast_message_id' => $broadcast->id,
                ];
                $chat_message    = ChatMessage::create($params);
                $broadcastnumber = \App\BroadcastMessageNumber::create($message);
                $approveRequest  = new Request();
                $approveRequest->setMethod('GET');
                $approveRequest->request->add(['messageId' => $chat_message->id]);

                app(WhatsAppController::class)->approveMessage('supplier', $approveRequest);
            }
        }

        return response()->json(['code' => 200, 'data' => [], 'message' => 'Message sent successfully']);
    }

    public function addPriceRange(Request $request)
    {
        SupplierPriceRange::create($request->all());

        return redirect()->route('supplier.index')->withSuccess('You have successfully saved a price range!');
    }

    public function changePriceRange(Request $request)
    {
        $supplierId   = $request->get('supplier_id');
        $priceRangeId = $request->get('price_range_id');

        if (! empty($supplierId)) {
            $supplier = \App\Supplier::find($supplierId);
            if (! empty($supplier)) {
                $supplier->fill(['supplier_price_range_id' => $priceRangeId])->save();
            }
        }

        return response()->json(['code' => 200, 'data' => [], 'message' => 'Price Range updated successfully']);
    }

    public function supplierList(Request $request, $source)
    {
        $list = \App\Supplier::where('source', $source)->where('supplier_status_id', 1)->pluck('supplier', 'id');

        return response()->json(['code' => 200, 'data' => $list]);
    }

    public function getPrioritiesList(Request $request)
    {
        $priorities = SupplierPriority::get();
        if ($request->ajax()) {
            $suppliers = \App\Supplier::query();
            $suppliers->with('supplier_category');
            if (isset($request->supplier) && ! empty($request->supplier)) {
                $suppliers = $suppliers->where('supplier', $request->supplier);
            }
            if (isset($request->priority) && ! empty($request->priority)) {
                $suppliers = $suppliers->where('priority', $request->priority);
            }
            if (isset($request->priority) && ($request->priority == 0)) {
                $suppliers = $suppliers->where('priority', null);
            }

            $suppliers->orderBy('created_at', 'desc');

            return Datatables::of($suppliers)
                ->addIndexColumn()
                ->addColumn('supplier_category_name', function ($row) {
                    $supplier_category_name = ($row->supplier_category) ? $row->supplier_category->name : 'N/A';

                    return $supplier_category_name;
                })
                ->addColumn('action', function ($row) {
                    $actionBtn = '<a href="javascript:void(0)" data-id="' . $row->id . '" class="update-supplier-priority btn btn-warning btn-sm"><i class="fa fa-edit fa-sm"></i></a>&nbsp;';

                    return $actionBtn;
                })
                ->rawColumns(['action', 'supplier_category_id'])
                ->make(true);
        }

        return view('suppliers.supplier_category_priority', compact('priorities'));
    }

    public function addNewPriority(Request $request)
    {
        $validateArr['priority'] = 'required|numeric|unique:supplier_priority,priority';
        $validator               = Validator::make($request->all(), $validateArr);

        if ($validator->fails()) {
            $return = ['code' => 500, 'message' => $validator->errors()->first()];
        } else {
            $supplier_priority = SupplierPriority::create([
                'priority' => $request->priority,
            ]);
            $return = ['code' => 200, 'message' => 'Supplier priority created!'];
        }

        return response()->json($return);
    }

    public function getSupplierPriorityList(Request $request)
    {
        $supplier_priority_list = \App\SupplierPriority::get();
        if (isset($supplier_priority_list) && count($supplier_priority_list)) {
            $show_history = (string) view('suppliers.ajax_priority_list', compact('supplier_priority_list'));
            $return       = ['code' => 200, 'message' => 'Success', 'html' => $show_history];
        } else {
            $return = ['code' => 500, 'message' => 'No Results Found.'];
        }

        return response()->json($return);
    }

    public function getSupplierForPriority(Request $request)
    {
        $supplier               = Supplier::with('supplier_category')->where('id', $request->id)->first();
        $supplier_priority_list = \App\SupplierPriority::get();
        if ($supplier) {
            $category = $supplier->supplier_category ? $supplier->supplier_category->name : "N\A";
            $return   = ['code' => 200, 'success' => true, 'message' => 'Success', 'supplier' => $supplier, 'category' => $category, 'supplier_priority_list' => $supplier_priority_list];
        } else {
            $return = ['code' => 500, 'success' => false, 'message' => 'No Results Found.'];
        }

        return response()->json($return);
    }

    public function updateSupplierPriority(Request $request)
    {
        $supplier_id     = $request->id;
        $priority        = $request->priority;
        $updatedPriority = $this->updatePriority($supplier_id, $priority);
        if ($updatedPriority) {
            $response = ['code' => 200, 'success' => true, 'message' => 'Supplier priority updated!'];
        } else {
            $response = ['code' => 500, 'success' => false, 'message' => 'No Results Found.'];
        }

        return response()->json($response);
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/SupplierStatusController.php 
Content: <?php

namespace App\Http\Controllers;

use DB;
use App\SupplierStatus;
use Illuminate\Http\Request;

class SupplierStatusController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request)
    {
        $supplierstatus = SupplierStatus::orderBy('id', 'DESC')->paginate(10);

        return view('supplier-status.index', compact('supplierstatus'))
            ->with('i', ($request->input('page', 1) - 1) * 10);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        return view('supplier-status.create');
    }

    /**
     * Store a newly created resource in storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $this->validate($request, [
            'name' => 'required|unique:supplier_status,name',
        ]);

        $department = SupplierStatus::create(['name' => $request->input('name')]);

        return redirect()->route('supplier-status.index')
            ->with('success', 'Supplier Status created successfully');
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        $status = SupplierStatus::find($id);

        return view('supplier-status.edit', compact('status'));
    }

    /**
     * Update the specified resource in storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        $this->validate($request, [
            'name' => 'required',
        ]);

        $department       = SupplierStatus::find($id);
        $department->name = $request->input('name');
        $department->save();

        return redirect()->route('supplier-status.index')
            ->with('success', 'Supplier Status updated successfully');
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        DB::table('supplier_status')->where('id', $id)->delete();

        return redirect()->route('supplier-status.index')
            ->with('success', 'Supplier Status deleted successfully');
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/TargetLocationController.php 
Content: <?php

namespace App\Http\Controllers;

use App\TargetLocation;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;

class TargetLocationController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        $locations = TargetLocation::all();

        return view('instagram.location.index', compact('locations'));
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $this->validate($request, [
            'country' => 'required',
            'region'  => 'required',
            'lat'     => 'required',
            'lng'     => 'required',
        ]);

        $location              = new TargetLocation();
        $location->country     = $request->get('country');
        $location->region      = $request->get('region');
        $polyY                 = explode(',', $request->get('lat'));
        $polyX                 = explode(',', $request->get('lng'));
        $location->region_data = [$polyX, $polyY];

        $location->save();

        return redirect()->back()->with('message', 'Location added successfully!');
    }

    /**
     * Display the specified resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function show(TargetLocation $targetLocation)
    {
        return view('instagram.location.show', compact('targetLocation'));
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param \App\TargetLocation $targetLocation
     * @param mixed               $review
     *
     * @return \Illuminate\Http\Response
     */
    public function edit($review)
    {
        $stats = DB::table('instagram_users_lists')
            ->select(DB::raw('COUNT(`instagram_users_lists`.`id`) AS count, `target_locations`.`id` as location_id, `target_locations`.`country`, `target_locations`.`region`'))
            ->leftJoin('target_locations', 'instagram_users_lists.location_id', '=', 'target_locations.id')
            ->groupBy('location_id')->get()->toArray();

        $data   = [];
        $labels = [];
        foreach ($stats as $stat) {
            $data[]   = $stat->count;
            $labels[] = "\"$stat->country ($stat->region)\"";
        }

        $data   = implode(', ', $data);
        $labels = implode(', ', $labels);

        return view('instagram.location.report', compact('data', 'labels', 'stats'));
    }

    /**
     * Update the specified resource in storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, TargetLocation $targetLocation)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function destroy(TargetLocation $targetLocation)
    {
        //
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/TaskModuleController.php 
Content: <?php

namespace App\Http\Controllers;

use App\Sop;
use App\Task;
use App\User;
use Exception;
use App\Remark;
use App\Contact;
use App\Helpers;
use App\Setting;
use App\RoleUser;
use App\UserRate;
use Carbon\Carbon;
use App\BugTracker;
use App\TaskRemark;
use App\TaskStatus;
use App\ChatMessage;
use App\SatutoryTask;
use App\StoreWebsite;
use App\TaskCategory;
use App\DeveloperTask;
use App\ReplyCategory;
use App\WhatsAppGroup;
use GuzzleHttp\Client;
use App\DocumentRemark;
use App\LogChatMessage;
use App\PaymentReceipt;
use App\UserAvaibility;
use App\SiteDevelopment;
use App\TaskUserHistory;
use App\GoogleScreencast;
use App\ScheduledMessage;
use App\UserEvent\UserEvent;
use App\WhatsAppGroupNumber;
use Illuminate\Http\Request;
use App\DeveloperTaskHistory;
use App\ChatMessagesQuickData;
use App\Helpers\HubstaffTrait;
use App\Helpers\MessageHelper;
use App\Hubstaff\HubstaffTask;
use GuzzleHttp\RequestOptions;
use App\Models\DataTableColumn;
use App\Hubstaff\HubstaffMember;
use App\SiteDevelopmentCategory;
use App\TimeDoctor\TimeDoctorTask;
use Illuminate\Support\Facades\DB;
use App\Models\TaskStartEndHistory;
use App\Exports\AllTasksExcelExport;
use Illuminate\Support\Facades\Auth;
use Maatwebsite\Excel\Facades\Excel;
use App\Models\TaskHubstaffCreateLog;
use App\Models\Tasks\TaskHistoryForCost;
use App\Jobs\UploadGoogleDriveScreencast;
use GuzzleHttp\Exception\ClientException;
use App\Library\TimeDoctor\Src\Timedoctor;
use App\Models\Tasks\TaskHistoryForStartDate;
use Plank\Mediable\Facades\MediaUploader as MediaUploader;

class TaskModuleController extends Controller
{
    use HubstaffTrait;

    private $githubClient;

    public function __construct()
    {
        $this->githubClient = new Client(
            [
                'auth' => [
                    config('env.GITHUB_USERNAME'),
                    c
                    onfig('env.GITHUB_TOKEN'),
                ],
            ]
        );
        $this->init(config('env.HUBSTAFF_SEED_PERSONAL_TOKEN'));
    }

    public function index(Request $request)
    {
        if (! $request->input('type') || $request->input('type') == '') {
            $type = 'pending';
        } else {
            $type = $request->input('type');
        }

        $category = '';
        if ($request->category != '') {
            $category = $request->category;
            if ($request->category == 1) {
                $category = '';
            }
        }

        $term         = $request->term ?? '';
        $data['task'] = [];

        $search_term_suggestions                 = [];
        $search_suggestions                      = [];
        $assign_from_arr                         = [0];
        $special_task_arr                        = [0];
        $assign_to_arr                           = [0];
        $data['task']['pending']                 = [];
        $data['task']['statutory_not_completed'] = [];
        $data['task']['completed']               = [];

        if ($type == 'pending') {
            // Get Pending tasks via model
            $data['task']['pending'] = Task::getSearchedTasks('pending_list', $request);

            foreach ($data['task']['pending'] as $task) {
                array_push($assign_to_arr, $task->assign_to);
                array_push($assign_from_arr, $task->assign_from);
                array_push($special_task_arr, $task->id);
            }

            $user_ids_from = array_unique($assign_from_arr);
            $user_ids_to   = array_unique($assign_to_arr);

            foreach ($data['task']['pending'] as $task) {
                $search_suggestions[] = '#' . $task->id . ' ' . $task->task_subject . ' ' . $task->task_details;
                $from_exist           = in_array($task->assign_from, $user_ids_from);
                if ($from_exist) {
                    $from_user = $task->assign_from_username;
                    if ($from_user) {
                        $search_term_suggestions[] = $from_user;
                    }
                }

                $to_exist = in_array($task->assign_to, $user_ids_to);
                if ($to_exist) {
                    $to_user = $task->assign_to_username;
                    if ($to_user) {
                        $search_term_suggestions[] = $to_user;
                    }
                }
                $search_term_suggestions[] = "$task->id";
                $search_term_suggestions[] = $task->task_subject;
                $search_term_suggestions[] = $task->task_details;
            }
        } elseif ($type == 'completed') {
            // Get Completed tasks via model
            $data['task']['completed'] = Task::getSearchedTasks('completed_list', $request);

            foreach ($data['task']['completed'] as $task) {
                array_push($assign_to_arr, $task->assign_to);
                array_push($assign_from_arr, $task->assign_from);
                array_push($special_task_arr, $task->id);
            }

            $user_ids_from = array_unique($assign_from_arr);
            $user_ids_to   = array_unique($assign_to_arr);

            foreach ($data['task']['completed'] as $task) {
                $search_suggestions[] = '#' . $task->id . ' ' . $task->task_subject . ' ' . $task->task_details;
                $from_exist           = in_array($task->assign_from, $user_ids_from);
                if ($from_exist) {
                    $from_user = $task->assign_from_username;
                    if ($from_user) {
                        $search_term_suggestions[] = $from_user;
                    }
                }

                $to_exist = in_array($task->assign_to, $user_ids_to);
                if ($to_exist) {
                    $to_user = $task->assign_to_username;
                    if ($to_user) {
                        $search_term_suggestions[] = $to_user;
                    }
                }
                $search_term_suggestions[] = "$task->id";
                $search_term_suggestions[] = $task->task_subject;
                $search_term_suggestions[] = $task->task_details;
            }
        } elseif ($type == 'statutory_not_completed') {
            // Get Statutory tasks via model
            $data['task']['statutory_not_completed'] = Task::getSearchedTasks('statutory_not_completed_list', $request);

            foreach ($data['task']['statutory_not_completed'] as $task) {
                array_push($assign_to_arr, $task->assign_to);
                array_push($assign_from_arr, $task->assign_from);
                array_push($special_task_arr, $task->id);
            }

            $user_ids_from = array_unique($assign_from_arr);
            $user_ids_to   = array_unique($assign_to_arr);

            foreach ($data['task']['statutory_not_completed'] as $task) {
                $search_suggestions[] = '#' . $task->id . ' ' . $task->task_subject . ' ' . $task->task_details;
                $from_exist           = in_array($task->assign_from, $user_ids_from);
                if ($from_exist) {
                    $from_user = $task->assign_from_username;
                    if ($from_user) {
                        $search_term_suggestions[] = $from_user;
                    }
                }

                $to_exist = in_array($task->assign_to, $user_ids_to);
                if ($to_exist) {
                    $to_user = $task->assign_to_username;
                    if ($to_user) {
                        $search_term_suggestions[] = $to_user;
                    }
                }
                $search_term_suggestions[] = "$task->id";
                $search_term_suggestions[] = $task->task_subject;
                $search_term_suggestions[] = $task->task_details;
            }
        } else {
            return;
        }

        $usersOrderByName            = User::orderBy('name')->get();
        $data['users']               = $usersOrderByName->toArray();
        $data['daily_activity_date'] = $request->daily_activity_date ? $request->daily_activity_date : date('Y-m-d');

        // Lead user process starts
        $model_team                    = \DB::table('teams')->where('user_id', auth()->user()->id)->get()->toArray();
        $isTeamLeader                  = head($model_team);
        $team_members_array[]          = auth()->user()->id;
        $team_id_array                 = [];
        $team_members_array_unique_ids = '';
        $isTeamLeader                  = null;
        if (count($model_team) > 0) {
            $isTeamLeader = $model_team[0];
        }
        // Lead user process ends

        $selected_user = $request->input('selected_user');

        if ($isTeamLeader && ! Auth::user()->hasRole('Admin')) {
            $usrlst = [];

            for ($k = 0; $k < count($model_team); $k++) {
                $team_id_array[] = $model_team[$k]->id;
            }

            $model_user_model = \DB::table('team_user')->whereIn('team_id', $team_id_array)->get()->toArray();
            for ($m = 0; $m < count($model_user_model); $m++) {
                $team_members_array[] = $model_user_model[$m]->user_id;
            }

            foreach ($usersOrderByName as $user) {
                if (in_array($user->id, $team_members_array)) {
                    $usrlst[] = $user;
                }
            }
        } else {
            $usrlst = $usersOrderByName;
        }

        $users          = Helpers::getUserArray($usrlst);
        $usersForExport = [];

        if (Auth::user()->hasRole('Admin')) {
            $usersForExport = User::select('name', 'id')->get();
        } else {
            $usersForExport = User::select('name', 'id')->where('id', '=', Auth::user()->id)->get();
        }

        $all_task_categories = TaskCategory::all();
        $selected_category   = $request->category;
        if (Auth::user()->hasRole('Admin')) {
            if (empty($request->category)) {
                $selected_category = 1;
            }
        }
        $categories = $approved_categories = $task_categories = [];
        foreach ($all_task_categories as $category) {
            if ($category->parent_id == 0) {
                $task_categories[] = $category;
            }

            $categories[$category->id] = $category->title;

            if ($category->is_approved == 1) {
                $approved_categories[] = $category->toArray();
            }
        }

        $selected_category = $request->category;

        if (Auth::user()->hasRole('Admin')) {
            if (empty($request->category)) {
                $selected_category = 1;
            }
        }

        $task_categories_dropdown = nestable($approved_categories)->attr(
            [
                'name'  => 'category',
                'class' => 'form-control input-sm',
            ]
        )->selected($selected_category)->renderAsDropdown();

        if (! empty($selected_user) && ! Helpers::getadminorsupervisor()) {
            return response()->json(['user not allowed'], 405);
        }

        $tasks_view = [];
        $priority   = \App\ErpPriority::where('model_type', '=', Task::class)->pluck('model_id')->toArray();

        $openTask = \App\Task::join('users as u', 'u.id', 'tasks.assign_to')->whereNull('tasks.is_completed')->groupBy('tasks.assign_to')->select(\DB::raw('count(u.id) as total'), 'u.name as person')->pluck('total', 'person');

        if ($request->is_statutory_query == 3) {
            $title = 'Discussion tasks';
        } else {
            $title = 'Task & Activity';
        }

        $task_statuses = TaskStatus::all();

        $datatableModel = DataTableColumn::select('column_name')->where('user_id', auth()->user()->id)->where('section_name', 'task-listing')->first();

        $dynamicColumnsToShowTask = [];
        if (! empty($datatableModel->column_name)) {
            $hideColumns              = $datatableModel->column_name ?? '';
            $dynamicColumnsToShowTask = json_decode($hideColumns, true);
        }

        $reply_categories = ReplyCategory::select('id', 'name')
            ->with('approval_leads', 'sub_categories')
            ->where('parent_id', 0)
            ->where('id', 44)
            ->orderby('name', 'ASC')->get();

        if ($request->ajax()) {
            if ($type == 'pending') {
                return view('task-module.partials.pending-row-ajax', compact('data', 'users', 'selected_user', 'category', 'term', 'search_suggestions', 'search_term_suggestions', 'tasks_view', 'categories', 'task_categories', 'task_categories_dropdown', 'priority', 'openTask', 'type', 'title', 'task_statuses', 'isTeamLeader', 'dynamicColumnsToShowTask', 'reply_categories'));
            } elseif ($type == 'statutory_not_completed') {
                return view('task-module.partials.statutory-row-ajax', compact('data', 'users', 'selected_user', 'category', 'term', 'search_suggestions', 'search_term_suggestions', 'tasks_view', 'categories', 'task_categories', 'task_categories_dropdown', 'priority', 'openTask', 'type', 'title', 'task_statuses', 'isTeamLeader', 'dynamicColumnsToShowTask', 'reply_categories'));
            } elseif ($type == 'completed') {
                return view('task-module.partials.completed-row-ajax', compact('data', 'users', 'selected_user', 'category', 'term', 'search_suggestions', 'search_term_suggestions', 'tasks_view', 'categories', 'task_categories', 'task_categories_dropdown', 'priority', 'openTask', 'type', 'title', 'task_statuses', 'isTeamLeader', 'dynamicColumnsToShowTask', 'reply_categories'));
            } else {
                return view('task-module.partials.pending-row-ajax', compact('data', 'users', 'selected_user', 'category', 'term', 'search_suggestions', 'search_term_suggestions', 'tasks_view', 'categories', 'task_categories', 'task_categories_dropdown', 'priority', 'openTask', 'type', 'title', 'task_statuses', 'isTeamLeader', 'dynamicColumnsToShowTask', 'reply_categories'));
            }
        }

        if ($request->is_statutory_query == 3) {
            return view('task-module.discussion-tasks', compact('data', 'users', 'selected_user', 'category', 'term', 'search_suggestions', 'search_term_suggestions', 'tasks_view', 'categories', 'task_categories', 'task_categories_dropdown', 'priority', 'openTask', 'type', 'title', 'task_statuses', 'isTeamLeader', 'dynamicColumnsToShowTask', 'reply_categories'));
        } else {
            $taskStatusData = TaskStatus::get();

            $statuseslist     = $taskStatusData->pluck('name', 'id')->toArray();
            $selectStatusList = $taskStatusData->pluck('id')->toArray();
            $taskstatus       = $taskStatusData;

            return view('task-module.show', compact('taskstatus', 'data', 'users', 'selected_user', 'category', 'term', 'search_suggestions', 'search_term_suggestions', 'tasks_view', 'categories', 'task_categories', 'task_categories_dropdown', 'priority', 'openTask', 'type', 'title', 'task_statuses', 'statuseslist', 'selectStatusList', 'isTeamLeader', 'dynamicColumnsToShowTask', 'reply_categories', 'usersForExport'));
        }
    }

    public function taskColumnVisbilityUpdate(Request $request)
    {
        $userCheck = DataTableColumn::where('user_id', auth()->user()->id)->where('section_name', 'task-listing')->first();

        if ($userCheck) {
            $column               = DataTableColumn::find($userCheck->id);
            $column->section_name = 'task-listing';
            $column->column_name  = json_encode($request->column_task);
            $column->save();
        } else {
            $column               = new DataTableColumn();
            $column->section_name = 'task-listing';
            $column->column_name  = json_encode($request->column_task);
            $column->user_id      = auth()->user()->id;
            $column->save();
        }

        return redirect()->back()->with('success', 'column visiblity Added Successfully!');
    }

    public function indexModules(Request $request)
    {
        if (! $request->input('type') || $request->input('type') == '') {
            $type = 'pending';
        } else {
            $type = $request->input('type');
        }

        $category = '';
        if ($request->category != '') {
            $category = $request->category;
            if ($request->category == 1) {
                $category = '';
            }
        }

        $term         = $request->term ?? '';
        $data['task'] = [];

        $search_term_suggestions                 = [];
        $search_suggestions                      = [];
        $assign_from_arr                         = [0];
        $special_task_arr                        = [0];
        $assign_to_arr                           = [0];
        $data['task']['pending']                 = [];
        $data['task']['statutory_not_completed'] = [];
        $data['task']['completed']               = [];

        if ($type == 'pending') {
            // Get Pending tasks via model
            $data['task']['pending'] = Task::getSearchedTasks('pending_list', $request);

            foreach ($data['task']['pending'] as $task) {
                array_push($assign_to_arr, $task->assign_to);
                array_push($assign_from_arr, $task->assign_from);
                array_push($special_task_arr, $task->id);
            }

            $user_ids_from = array_unique($assign_from_arr);
            $user_ids_to   = array_unique($assign_to_arr);

            foreach ($data['task']['pending'] as $task) {
                $search_suggestions[] = '#' . $task->id . ' ' . $task->task_subject . ' ' . $task->task_details;
                $from_exist           = in_array($task->assign_from, $user_ids_from);
                if ($from_exist) {
                    $from_user = $task->assign_from_username;
                    if ($from_user) {
                        $search_term_suggestions[] = $from_user;
                    }
                }

                $to_exist = in_array($task->assign_to, $user_ids_to);
                if ($to_exist) {
                    $to_user = $task->assign_to_username;
                    if ($to_user) {
                        $search_term_suggestions[] = $to_user;
                    }
                }
                $search_term_suggestions[] = "$task->id";
                $search_term_suggestions[] = $task->task_subject;
                $search_term_suggestions[] = $task->task_details;
            }
        } elseif ($type == 'completed') {
            // Get Completed tasks via model
            $data['task']['completed'] = Task::getSearchedTasks('completed_list', $request);

            foreach ($data['task']['completed'] as $task) {
                array_push($assign_to_arr, $task->assign_to);
                array_push($assign_from_arr, $task->assign_from);
                array_push($special_task_arr, $task->id);
            }

            $user_ids_from = array_unique($assign_from_arr);
            $user_ids_to   = array_unique($assign_to_arr);

            foreach ($data['task']['completed'] as $task) {
                $search_suggestions[] = '#' . $task->id . ' ' . $task->task_subject . ' ' . $task->task_details;
                $from_exist           = in_array($task->assign_from, $user_ids_from);
                if ($from_exist) {
                    $from_user = $task->assign_from_username;
                    if ($from_user) {
                        $search_term_suggestions[] = $from_user;
                    }
                }

                $to_exist = in_array($task->assign_to, $user_ids_to);
                if ($to_exist) {
                    $to_user = $task->assign_to_username;
                    if ($to_user) {
                        $search_term_suggestions[] = $to_user;
                    }
                }
                $search_term_suggestions[] = "$task->id";
                $search_term_suggestions[] = $task->task_subject;
                $search_term_suggestions[] = $task->task_details;
            }
        } elseif ($type == 'statutory_not_completed') {
            // Get Statutory tasks via model
            $data['task']['statutory_not_completed'] = Task::getSearchedTasks('statutory_not_completed_list', $request);

            foreach ($data['task']['statutory_not_completed'] as $task) {
                array_push($assign_to_arr, $task->assign_to);
                array_push($assign_from_arr, $task->assign_from);
                array_push($special_task_arr, $task->id);
            }

            $user_ids_from = array_unique($assign_from_arr);
            $user_ids_to   = array_unique($assign_to_arr);

            foreach ($data['task']['statutory_not_completed'] as $task) {
                $search_suggestions[] = '#' . $task->id . ' ' . $task->task_subject . ' ' . $task->task_details;
                $from_exist           = in_array($task->assign_from, $user_ids_from);
                if ($from_exist) {
                    $from_user = $task->assign_from_username;
                    if ($from_user) {
                        $search_term_suggestions[] = $from_user;
                    }
                }

                $to_exist = in_array($task->assign_to, $user_ids_to);
                if ($to_exist) {
                    $to_user = $task->assign_to_username;
                    if ($to_user) {
                        $search_term_suggestions[] = $to_user;
                    }
                }
                $search_term_suggestions[] = "$task->id";
                $search_term_suggestions[] = $task->task_subject;
                $search_term_suggestions[] = $task->task_details;
            }
        } else {
            return;
        }

        $usersOrderByName            = User::orderBy('name')->get();
        $data['users']               = $usersOrderByName->toArray();
        $data['daily_activity_date'] = $request->daily_activity_date ? $request->daily_activity_date : date('Y-m-d');

        // Lead user process starts
        $model_team                    = \DB::table('teams')->where('user_id', auth()->user()->id)->get()->toArray();
        $isTeamLeader                  = head($model_team);
        $team_members_array[]          = auth()->user()->id;
        $team_id_array                 = [];
        $team_members_array_unique_ids = '';
        $isTeamLeader                  = null;
        if (count($model_team) > 0) {
            $isTeamLeader = $model_team[0];
        }
        // Lead user process ends

        $selected_user = $request->input('selected_user');

        if ($isTeamLeader && ! Auth::user()->hasRole('Admin')) {
            $usrlst = [];

            for ($k = 0; $k < count($model_team); $k++) {
                $team_id_array[] = $model_team[$k]->id;
            }

            $model_user_model = \DB::table('team_user')->whereIn('team_id', $team_id_array)->get()->toArray();
            for ($m = 0; $m < count($model_user_model); $m++) {
                $team_members_array[] = $model_user_model[$m]->user_id;
            }

            foreach ($usersOrderByName as $user) {
                if (in_array($user->id, $team_members_array)) {
                    $usrlst[] = $user;
                }
            }
        } else {
            $usrlst = $usersOrderByName;
        }

        $users = Helpers::getUserArray($usrlst);

        $all_task_categories = TaskCategory::all();
        $selected_category   = $request->category;
        if (Auth::user()->hasRole('Admin')) {
            if (empty($request->category)) {
                $selected_category = 1;
            }
        }
        $categories = $approved_categories = $task_categories = [];
        foreach ($all_task_categories as $category) {
            if ($category->parent_id == 0) {
                $task_categories[] = $category;
            }

            $categories[$category->id] = $category->title;

            if ($category->is_approved == 1) {
                $approved_categories[] = $category->toArray();
            }
        }

        $selected_category = $request->category;

        if (Auth::user()->hasRole('Admin')) {
            if (empty($request->category)) {
                $selected_category = 1;
            }
        }

        $task_categories_dropdown = nestable($approved_categories)->attr(
            [
                'name'  => 'category',
                'class' => 'form-control input-sm',
            ]
        )->selected($selected_category)->renderAsDropdown();

        if (! empty($selected_user) && ! Helpers::getadminorsupervisor()) {
            return response()->json(['user not allowed'], 405);
        }

        $tasks_view = [];
        $priority   = \App\ErpPriority::where('model_type', '=', Task::class)->pluck('model_id')->toArray();

        $openTask = \App\Task::join('users as u', 'u.id', 'tasks.assign_to')->whereNull('tasks.is_completed')->groupBy('tasks.assign_to')->select(\DB::raw('count(u.id) as total'), 'u.name as person')->pluck('total', 'person');

        if ($request->is_statutory_query == 3) {
            $title = 'Discussion tasks';
        } else {
            $title = 'Task & Activity';
        }

        $task_statuses = TaskStatus::all();

        if ($request->ajax()) {
            if ($type == 'pending') {
                return view('task-module.partials.pending-row-ajax', compact('data', 'users', 'selected_user', 'category', 'term', 'search_suggestions', 'search_term_suggestions', 'tasks_view', 'categories', 'task_categories', 'task_categories_dropdown', 'priority', 'openTask', 'type', 'title', 'task_statuses', 'isTeamLeader'));
            } elseif ($type == 'statutory_not_completed') {
                return view('task-module.partials.statutory-row-ajax', compact('data', 'users', 'selected_user', 'category', 'term', 'search_suggestions', 'search_term_suggestions', 'tasks_view', 'categories', 'task_categories', 'task_categories_dropdown', 'priority', 'openTask', 'type', 'title', 'task_statuses', 'isTeamLeader'));
            } elseif ($type == 'completed') {
                return view('task-module.partials.completed-row-ajax', compact('data', 'users', 'selected_user', 'category', 'term', 'search_suggestions', 'search_term_suggestions', 'tasks_view', 'categories', 'task_categories', 'task_categories_dropdown', 'priority', 'openTask', 'type', 'title', 'task_statuses', 'isTeamLeader'));
            } else {
                return view('task-module.partials.pending-row-ajax', compact('data', 'users', 'selected_user', 'category', 'term', 'search_suggestions', 'search_term_suggestions', 'tasks_view', 'categories', 'task_categories', 'task_categories_dropdown', 'priority', 'openTask', 'type', 'title', 'task_statuses', 'isTeamLeader'));
            }
        }

        if ($request->is_statutory_query == 3) {
            return view('task-module.discussion-tasks', compact('data', 'users', 'selected_user', 'category', 'term', 'search_suggestions', 'search_term_suggestions', 'tasks_view', 'categories', 'task_categories', 'task_categories_dropdown', 'priority', 'openTask', 'type', 'title', 'task_statuses', 'isTeamLeader'));
        } else {
            $taskStatusData = TaskStatus::get();

            $statuseslist     = $taskStatusData->pluck('name', 'id')->toArray();
            $selectStatusList = $taskStatusData->pluck('id')->toArray();
            $taskstatus       = $taskStatusData;

            return view('task-module.show-modules', compact('taskstatus', 'data', 'users', 'selected_user', 'category', 'term', 'search_suggestions', 'search_term_suggestions', 'tasks_view', 'categories', 'task_categories', 'task_categories_dropdown', 'priority', 'openTask', 'type', 'title', 'task_statuses', 'statuseslist', 'selectStatusList', 'isTeamLeader'));
        }
    }

    public function statuscolor(Request $request)
    {
        $status_color = $request->all();
        $data         = $request->except('_token');
        foreach ($status_color['color_name'] as $key => $value) {
            $bugstatus             = TaskStatus::find($key);
            $bugstatus->task_color = $value;
            $bugstatus->save();
        }

        return redirect()->back()->with('success', 'The status color updated successfully.');
    }

    public function saveMilestone(Request $request)
    {
        $task = Task::find($request->task_id);
        if (! $task->is_milestone) {
            return;
        }
        $total = $request->total;
        if ($task->milestone_completed) {
            if ($total <= $task->milestone_completed) {
                return response()->json(
                    [
                        'message' => 'Milestone no can\'t be reduced',
                    ], 500
                );
            }
        }

        if ($total > $task->no_of_milestone) {
            return response()->json(
                [
                    'message' => 'Estimated milestone exceeded',
                ], 500
            );
        }
        if (! $task->cost || $task->cost == '') {
            return response()->json(
                [
                    'message' => 'Please provide cost first',
                ], 500
            );
        }

        $newCompleted    = $total - $task->milestone_completed;
        $individualPrice = $task->cost / $task->no_of_milestone;
        $totalCost       = $individualPrice * $newCompleted;

        $task->milestone_completed = $total;
        $task->save();
        $payment_receipt                 = new PaymentReceipt;
        $payment_receipt->date           = date('Y-m-d');
        $payment_receipt->worked_minutes = $task->approximate;
        $payment_receipt->rate_estimated = $totalCost;
        $payment_receipt->status         = 'Pending';
        $payment_receipt->task_id        = $task->id;
        $payment_receipt->user_id        = $task->assign_to;
        $payment_receipt->save();

        return response()->json(
            [
                'status' => 'success',
            ]
        );
    }

    public function updatePriorityNo(Request $request)
    {
        $task = Task::find($request->task_id);

        if (Auth::user()->id == $task->assign_to || Auth::user()->isAdmin()) {
            $task->priority_no = $request->priority;
            $task->save();

            return response()->json(['msg' => 'success']);
        } else {
            return response()->json(['msg' => 'Unauthorized access'], 500);
        }
    }

    public function taskListByUserId(Request $request)
    {
        $user_id        = $request->get('user_id', 0);
        $selected_issue = $request->get('selected_issue', []);
        $issues         = Task::select('tasks.*')->leftJoin(
            'erp_priorities', function ($query) {
                $query->on('erp_priorities.model_id', '=', 'tasks.id');
                $query->where('erp_priorities.model_type', '=', Task::class);
            }
        )->whereNull('is_verified');

        if (auth()->user()->isAdmin()) {
            $issues = $issues->where(
                function ($q) use ($selected_issue, $user_id) {
                    if ((count($selected_issue) != 0 && count($selected_issue) != 1)) {
                        $q->whereIn('tasks.id', $selected_issue);
                    }

                    $user_id = is_null($user_id) ? 0 : $user_id;

                    if ($user_id != 0) {
                        $q->where('tasks.assign_to', $user_id)->orWhere('tasks.master_user_id', $user_id);
                    }
                }
            );
        } else {
            $issues = $issues->whereNotNull('erp_priorities.id');
        }

        $issues = $issues->groupBy('tasks.id')->orderBy('erp_priorities.id')->get();

        foreach ($issues as &$value) {
            $value->created_by = User::where('id', $value->assign_from)->value('name');
            $value->created_at = \Carbon\Carbon::parse($value->created_at)->format('d-m-y H:i:s');
        }
        unset($value);
        $viewData = view('task-module.taskpriority', compact('issues'))->render();

        return response()->json(
            [
                'html' => $viewData,

            ], 200
        );
    }

    public function setTaskPriority(Request $request)
    {
        $priority = $request->get('priority', null);
        $user_id  = $request->get('user_id', 0);

        //delete old priority
        \App\ErpPriority::where('user_id', $user_id)->where('model_type', '=', Task::class)->delete();

        if (! empty($priority)) {
            foreach ((array) $priority as $model_id) {
                \App\ErpPriority::create(
                    [
                        'model_id'   => $model_id,
                        'model_type' => Task::class,
                        'user_id'    => $user_id,
                    ]
                );
            }

            $developerTask = Task::select('tasks.id', 'tasks.task_subject', 'tasks.task_details', 'tasks.assign_from')->join(
                'erp_priorities', function ($query) use ($user_id) {
                    $user_id = is_null($user_id) ? 0 : $user_id;
                    $query->on('erp_priorities.model_id', '=', 'tasks.id');
                    $query->where('erp_priorities.model_type', '=', Task::class);
                    $query->where('user_id', $user_id);
                }
            )->whereNull('is_verified')->orderBy('erp_priorities.id')->get();

            $message = '';
            $i       = 1;

            foreach ($developerTask as $value) {
                $message .= $i . ' : #Task-' . $value->id . '-' . $value->task_subject . "\n";
                $i++;
            }

            if (! empty($message)) {
                $requestData = new Request();
                $requestData->setMethod('POST');
                $params            = [];
                $params['user_id'] = $user_id;

                $string = '';

                if (! empty($request->get('global_remarkes', null))) {
                    $string .= $request->get('global_remarkes') . "\n";
                }

                $string .= "Task Priority is : \n" . $message;

                $params['message'] = $string;
                $params['status']  = 2;
                $requestData->request->add($params);
                app(\App\Http\Controllers\WhatsAppController::class)->sendMessage($requestData, 'priority');
            }
        }

        return response()->json(
            [
                'status' => 'success',
            ]
        );
    }

    public function store(Request $request)
    {
        dd('We are not using this function anymore, If you reach here, that means that we have to change this.');
        $this->validate(
            $request, [
                'task_subject' => 'required',
                'task_details' => 'required',
                'assign_to'    => 'required_without:assign_to_contacts',
            ]
        );
        $data                = $request->except('_token');
        $data['assign_from'] = Auth::id();

        if ($request->task_type == 'quick_task') {
            $data['is_statutory'] = 0;
            $data['category']     = 6;
            $data['model_type']   = $request->model_type;
            $data['model_id']     = $request->model_id;
        }

        if ($request->task_type == 'note-task') {
            $main_task = Task::find($request->task_id);
        } else {
            if ($request->assign_to) {
                $data['assign_to'] = $request->assign_to[0];
            } else {
                $data['assign_to'] = $request->assign_to_contacts[0];
            }
        }

        if (! empty($data['status'])) {
            $data['status'] = 3;
        }

        $task = Task::create($data);

        if ($request->is_statutory == 3) {
            foreach ($request->note as $note) {
                if ($note != null) {
                    Remark::create(
                        [
                            'taskid'      => $task->id,
                            'remark'      => $note,
                            'module_type' => 'task-note',
                        ]
                    );
                }
            }
        }

        if ($request->task_type != 'note-task') {
            if ($request->assign_to) {
                foreach ($request->assign_to as $user_id) {
                    $task->users()->attach([$user_id => ['type' => User::class]]);
                }
            }

            if ($request->assign_to_contacts) {
                foreach ($request->assign_to_contacts as $contact_id) {
                    $task->users()->attach([$contact_id => ['type' => Contact::class]]);
                }
            }
        }

        if ($task->is_statutory != 1) {
            $message = '#' . $task->id . '. ' . $task->task_subject . '. ' . $task->task_details;
        } else {
            $message = $task->task_subject . '. ' . $task->task_details;
        }

        $params = [
            'number'   => null,
            'user_id'  => Auth::id(),
            'approved' => 1,
            'status'   => 2,
            'task_id'  => $task->id,
            'message'  => $message,
        ];
        if (count($task->users) > 0) {
            if ($task->assign_from == Auth::id()) {
                foreach ($task->users as $key => $user) {
                    if ($key == 0) {
                        $params['erp_user'] = $user->id;
                    } else {
                        app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($user->phone, $user->whatsapp_number, $params['message']);
                    }
                }
            } else {
                foreach ($task->users as $key => $user) {
                    if ($key == 0) {
                        $params['erp_user'] = $task->assign_from;
                    } else {
                        if ($user->id != Auth::id()) {
                            app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($user->phone, $user->whatsapp_number, $params['message']);
                        }
                    }
                }
            }
        }

        if (count($task->contacts) > 0) {
            foreach ($task->contacts as $key => $contact) {
                if ($key == 0) {
                    $params['contact_id'] = $task->assign_to;
                } else {
                    app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($contact->phone, null, $params['message']);
                }
            }
        }

        $chat_message = ChatMessage::create($params);
        ChatMessagesQuickData::updateOrCreate(
            [
                'model'    => \App\Task::class,
                'model_id' => $params['task_id'],
            ], [
                'last_communicated_message'    => @$params['message'],
                'last_communicated_message_at' => $chat_message->created_at,
                'last_communicated_message_id' => ($chat_message) ? $chat_message->id : null,
            ]
        );

        $myRequest = new Request();
        $myRequest->setMethod('POST');
        $myRequest->request->add(['messageId' => $chat_message->id]);

        app(\App\Http\Controllers\WhatsAppController::class)->approveMessage('task', $myRequest);

        $hubstaff_project_id = config('env.HUBSTAFF_BULK_IMPORT_PROJECT_ID');

        $assignedUser = HubstaffMember::where('user_id', $request->input('assign_to'))->first();

        $hubstaffUserId = null;
        if ($assignedUser) {
            $hubstaffUserId = $assignedUser->hubstaff_user_id;
        }
        $taskSummery = substr($message, 0, 200);

        $hubstaffTaskId = $this->createHubstaffTask(
            $taskSummery, $hubstaffUserId, $hubstaff_project_id
        );

        if ($hubstaffTaskId) {
            $task->hubstaff_task_id = $hubstaffTaskId;
            $task->save();
        }
        if ($hubstaffUserId) {
            $task                      = new HubstaffTask();
            $task->hubstaff_task_id    = $hubstaffTaskId;
            $task->project_id          = $hubstaff_project_id;
            $task->hubstaff_project_id = $hubstaff_project_id;
            $task->summary             = $message;
            $task->save();
        }

        $task_statuses = TaskStatus::all();

        if ($request->ajax()) {
            $hasRender = request('has_render', false);

            if (! empty($hasRender)) {
                $users    = Helpers::getUserArray(User::all());
                $priority = \App\ErpPriority::where('model_type', '=', Task::class)->pluck('model_id')->toArray();

                if ($task->is_statutory == 1) {
                    $mode = 'task-module.partials.statutory-row';
                } elseif ($task->is_statutory == 3) {
                    $mode = 'task-module.partials.discussion-pending-raw';
                } else {
                    $mode = 'task-module.partials.pending-row';
                }

                $view = (string) view($mode, compact('task', 'priority', 'users', 'task_statuses'));

                return response()->json(
                    [
                        'code'      => 200,
                        'statutory' => $task->is_statutory,
                        'raw'       => $view,
                    ]
                );
            }

            return response('success');
        }

        return redirect()->back()->with('success', 'Task created successfully.');
    }

    public function createHubstaffTask(string $taskSummary, ?int $hubstaffUserId, int $projectId, bool $shouldRetry = true)
    {
        $tokens = $this->getTokens();

        $url = 'https://api.hubstaff.com/v2/projects/' . $projectId . '/tasks';

        $httpClient = new Client();
        try {
            $body = [
                'summary' => $taskSummary,
            ];

            if ($hubstaffUserId) {
                $body['assignee_id'] = $hubstaffUserId;
            } else {
                $body['assignee_id'] = config('env.HUBSTAFF_DEFAULT_ASSIGNEE_ID');
            }

            $response = $httpClient->post(
                $url, [
                    RequestOptions::HEADERS => [
                        'Authorization' => 'Bearer ' . $tokens->access_token,
                        'Content-Type'  => 'application/json',
                    ],

                    RequestOptions::BODY => json_encode($body),
                ]
            );
            $parsedResponse = json_decode($response->getBody()->getContents());

            return $parsedResponse->task->id;
        } catch (ClientException $e) {
            if ($e->getCode() == 401) {
                $this->refreshTokens();
                if ($shouldRetry) {
                    return $this->createHubstaffTask(
                        $taskSummary, $hubstaffUserId, $projectId, false
                    );
                } else {
                }
            }
        }

        return false;
    }

    public function flag(Request $request)
    {
        if ($request->task_type == 'DEVTASK') {
            $task = DeveloperTask::find($request->task_id);
        } else {
            $task = Task::find($request->task_id);
        }

        if ($task->is_flagged == 0) {
            $task->is_flagged = 1;
        } else {
            $task->is_flagged = 0;
        }

        $task->save();

        return response()->json(['is_flagged' => $task->is_flagged]);
    }

    public function remarkFlag(Request $request)
    {
        $remark = Remark::find($request->remark_id);

        if ($remark->is_flagged == 0) {
            $remark->is_flagged = 1;
        } else {
            $remark->is_flagged = 0;
        }

        $remark->save();

        return response()->json(['is_flagged' => $remark->is_flagged]);
    }

    public function plan(Request $request, $id)
    {
        $user                      = auth()->user();
        $task                      = Task::find($id);
        $task->time_slot           = $request->time_slot;
        $task->planned_at          = $request->planned_at;
        $task->general_category_id = $request->get('general_category_id', null);
        $task->save();

        // Save the data in user event
        $schedultDate = Carbon::parse($request->planned_at);
        $timeSlotArr  = explode('-', $request->time_slot);
        $c_start_at   = Carbon::parse("$request->planned_at " . $timeSlotArr[0]);
        $c_end_at     = Carbon::parse("$request->planned_at " . $timeSlotArr[1]);

        // Delete old event of plan task task
        UserEvent::where('subject', 'LIKE', "%Planned task $task->id%")->delete();

        $userEvent              = new UserEvent();
        $userEvent->user_id     = $user->id;
        $userEvent->description = trim($timeSlotArr[0]) . '-' . trim($timeSlotArr[1]) . ', ' . $schedultDate->format('l') . ', ' . $schedultDate->toDateString();
        $userEvent->subject     = "Planned task $task->id ($task->task_subject)";
        $userEvent->date        = $schedultDate;
        $userEvent->start       = $c_start_at->toDateTime();
        $userEvent->end         = $c_end_at->toDateTime();
        $userEvent->save();

        return response()->json(
            [
                'task' => $task,
            ]
        );
    }

    public function loadView(Request $request)
    {
        $tasks = Task::whereIn('id', $request->selected_tasks)->get();
        $users = Helpers::getUserArray(User::all());
        $view  = view(
            'task-module.partials.task-view', [
                'tasks_view' => $tasks,
                'users'      => $users,
            ]
        )->render();

        return response()->json(
            [
                'view' => $view,
            ]
        );
    }

    public function assignMessages(Request $request)
    {
        $messages_ids = json_decode($request->selected_messages, true);

        foreach ($messages_ids as $message_id) {
            $message          = ChatMessage::find($message_id);
            $message->task_id = $request->task_id;
            $message->save();
        }

        return redirect()->back()->withSuccess('You have successfully assign messages');
    }

    public function messageReminder(Request $request)
    {
        $this->validate(
            $request, [
                'message_id'    => 'required|numeric',
                'reminder_date' => 'required',
            ]
        );

        $message = ChatMessage::find($request->message_id);

        $additional_params = [
            'user_id'    => $message->user_id,
            'task_id'    => $message->task_id,
            'erp_user'   => $message->erp_user,
            'contact_id' => $message->contact_id,
        ];

        $params = [
            'user_id'      => Auth::id(),
            'message'      => 'Reminder - ' . $message->message,
            'type'         => 'task',
            'data'         => json_encode($additional_params),
            'sending_time' => $request->reminder_date,
        ];

        ScheduledMessage::create($params);

        return redirect()->back()->withSuccess('You have successfully set a reminder!');
    }

    public function convertTask(Request $request, $id)
    {
        $task = Task::find($id);

        $task->is_statutory = 3;
        $task->save();

        return response('success', 200);
    }

    public function updateSubject(Request $request, $id)
    {
        $task               = Task::find($id);
        $task->task_subject = $request->subject;
        $task->save();

        return response('success', 200);
    }

    public function addNote(Request $request, $id)
    {
        Remark::create(
            [
                'taskid'      => $id,
                'remark'      => $request->note,
                'module_type' => 'task-note',
            ]
        );

        return response('success', 200);
    }

    public function addSubnote(Request $request, $id)
    {
        $remark = Remark::create(
            [
                'taskid'      => $id,
                'remark'      => $request->note,
                'module_type' => 'task-note-subnote',
            ]
        );

        $id = $remark->id;

        return response(['success' => $id], 200);
    }

    public function updateCategory(Request $request, $id)
    {
        $task           = Task::find($id);
        $task->category = $request->category;
        $task->save();

        return response('success', 200);
    }

    public function show($id)
    {
        $task = Task::find($id);

        if (! $task) {
            abort(404, 'Task is not exist');
        }

        $chatMessages = ChatMessage::where('task_id', $id)->get();
        if ((! $task->users->contains(Auth::id()) && $task->is_private == 1) || ($task->assign_from != Auth::id() && $task->contacts()->count() > 0) || (! $task->users->contains(Auth::id()) && $task->assign_from != Auth::id() && Auth::id() != 6)) {
            return redirect()->back()->withErrors('This task is private!');
        }

        $users       = User::all();
        $users_array = Helpers::getUserArray(User::all());
        $categories  = TaskCategory::attr(
            [
                'title'       => 'category',
                'class'       => 'form-control input-sm',
                'placeholder' => 'Select a Category',
                'id'          => 'task_category',
            ]
        )->selected($task->category)->renderAsDropdown();

        if (request()->has('keyword')) {
            $taskNotes = $task->notes()->orderBy('is_flagged')->where('is_hide', 0)->where('remark', 'like', '%' . request()->keyword . '%')->paginate(20);
        } else {
            $taskNotes = $task->notes()->orderBy('is_flagged')->where('is_hide', 0)->paginate(20);
        }

        $hiddenRemarks = $task->notes()->where('is_hide', 1)->get();

        return view(
            'task-module.task-show', [
                'task'          => $task,
                'users'         => $users,
                'users_array'   => $users_array,
                'categories'    => $categories,
                'taskNotes'     => $taskNotes,
                'hiddenRemarks' => $hiddenRemarks,
                'chatMessages'  => $chatMessages,
            ]
        );
    }

    public function searchTask(Request $request)
    {
        $id = $request->id;

        if ($request->input('selected_user') == '') {
            $userid = Auth::id();

            $searchMasterUserId = $userid;
            if ($request->search_master_user_id != '') {
                $searchMasterUserId = $request->search_master_user_id;
            }

            $searchSecondMasterUserId = $userid;
            if ($request->search_second_master_user_id != '') {
                $searchSecondMasterUserId = $request->search_second_master_user_id;
            }

            $userquery = ' AND (assign_from = ' . $userid . ' OR  second_master_user_id = ' . $searchSecondMasterUserId . ' OR  master_user_id = ' . $searchMasterUserId . ')';
        } else {
            $userid = $request->input('selected_user');

            $userqueryInner = '';

            if ($request->search_master_user_id != '') {
                $searchMasterUserId = $request->search_master_user_id;

                $userqueryInner .= ' OR master_user_id = ' . $searchMasterUserId;
            }

            if ($request->search_second_master_user_id != '') {
                $searchSecondMasterUserId = $request->search_second_master_user_id;

                $userqueryInner .= ' OR  second_master_user_id = ' . $searchSecondMasterUserId;
            }

            $userquery = ' AND (assign_to = ' . $userid . $userqueryInner . ')';
        }

        if (! $request->input('type') || $request->input('type') == '') {
            $type = 'pending';
        } else {
            $type = $request->input('type');
        }

        $term         = $request->term ?? '';
        $data['task'] = [];

        $search_term_suggestions                 = [];
        $search_suggestions                      = [];
        $assign_from_arr                         = [0];
        $special_task_arr                        = [0];
        $assign_to_arr                           = [0];
        $data['task']['pending']                 = [];
        $data['task']['statutory_not_completed'] = [];
        $data['task']['completed']               = [];

        if ($type == 'pending') {
            // Get Pending tasks via model
            $data['task']['pending'] = Task::getSearchedTasks('pending', $request);

            foreach ($data['task']['pending'] as $task) {
                array_push($assign_to_arr, $task->assign_to);
                array_push($assign_from_arr, $task->assign_from);
                array_push($special_task_arr, $task->id);
            }

            $user_ids_from = array_unique($assign_from_arr);
            $user_ids_to   = array_unique($assign_to_arr);

            foreach ($data['task']['pending'] as $task) {
                $search_suggestions[] = '#' . $task->id . ' ' . $task->task_subject . ' ' . $task->task_details;
                $from_exist           = in_array($task->assign_from, $user_ids_from);
                if ($from_exist) {
                    if ($task->assign_from_username) {
                        $search_term_suggestions[] = $task->assign_from_username;
                    }
                }

                $to_exist = in_array($task->assign_to, $user_ids_to);
                if ($to_exist) {
                    if ($task->assign_to_username) {
                        $search_term_suggestions[] = $task->assign_to_username;
                    }
                }
                $search_term_suggestions[] = "$task->id";
                $search_term_suggestions[] = $task->task_subject;
                $search_term_suggestions[] = $task->task_details;
            }
        }
        //task pending backup
        $usersOrderByName            = User::orderBy('name')->get();
        $data['users']               = $usersOrderByName->toArray();
        $data['daily_activity_date'] = $request->daily_activity_date ? $request->daily_activity_date : date('Y-m-d');

        // Lead user process starts
        $model_team           = \DB::table('teams')->where('user_id', auth()->user()->id)->get()->toArray();
        $team_members_array[] = auth()->user()->id;
        $team_id_array        = [];
        $isTeamLeader         = null;
        if (count($model_team) > 0) {
            $isTeamLeader = $model_team[0];
        }
        // Lead user process ends

        $selected_user = $request->input('selected_user');

        if ($isTeamLeader && ! Auth::user()->hasRole('Admin')) {
            $usrlst = [];

            for ($k = 0; $k < count($model_team); $k++) {
                $team_id_array[] = $model_team[$k]->id;
            }
            $model_user_model = \DB::table('team_user')->whereIn('team_id', $team_id_array)->get()->toArray();
            for ($m = 0; $m < count($model_user_model); $m++) {
                $team_members_array[] = $model_user_model[$m]->user_id;
            }

            foreach ($usersOrderByName as $user) {
                if (in_array($user->id, $team_members_array)) {
                    $usrlst[] = $user;
                }
            }
        } else {
            $usrlst = $usersOrderByName;
        }

        $users               = Helpers::getUserArray($usrlst);
        $all_task_categories = TaskCategory::all();
        $selected_category   = $request->category;
        if (Auth::user()->hasRole('Admin')) {
            if (empty($request->category)) {
                $selected_category = 1;
            }
        }
        $categories = $approved_categories = [];
        foreach ($all_task_categories as $category) {
            $categories[$category->id] = $category->title;

            if ($category->is_approved == 1) {
                $approved_categories[] = $category->toArray();
            }
        }

        $task_categories_dropdown = nestable($approved_categories)->attr(
            [
                'name'  => 'category',
                'class' => 'form-control input-sm',
            ]
        )->selected($selected_category)->renderAsDropdown();

        if (! empty($selected_user) && ! Helpers::getadminorsupervisor()) {
            return response()->json(['user not allowed'], 405);
        }
        $tasks_view = [];
        $priority   = \App\ErpPriority::where('model_type', '=', Task::class)->pluck('model_id')->toArray();

        $openTask = \App\Task::join('users as u', 'u.id', 'tasks.assign_to')->whereNull('tasks.is_completed')->groupBy('tasks.assign_to')->select(\DB::raw('count(u.id) as total'), 'u.name as person')->pluck('total', 'person');

        if ($request->is_statutory_query == 3) {
            $title = 'Discussion tasks';
        } else {
            $title = 'Task & Activity';
        }

        $task_statuses = TaskStatus::all();

        return view('task-module.partials.menu-search-task-ajax', compact('data', 'users', 'selected_user', 'category', 'term', 'search_suggestions', 'search_term_suggestions', 'tasks_view', 'categories', 'task_categories_dropdown', 'priority', 'openTask', 'type', 'title', 'task_statuses', 'isTeamLeader'));
    }

    public function update(Request $request, $id)
    {
        $this->validate(
            $request, [
                'assign_to.*'  => 'required_without:assign_to_contacts',
                'sending_time' => 'sometimes|nullable|date',
            ]
        );

        $task = Task::find($id);
        $task->users()->detach();
        $task->contacts()->detach();

        if ($request->assign_to) {
            foreach ($request->assign_to as $user_id) {
                $task->users()->attach([$user_id => ['type' => User::class]]);
            }

            $task->assign_to = $request->assign_to[0];
        }

        if ($request->assign_to_contacts) {
            foreach ($request->assign_to_contacts as $contact_id) {
                $task->users()->attach([$contact_id => ['type' => Contact::class]]);
            }

            $task->assign_to = $request->assign_to_contacts[0];
        }

        if ($request->sending_time) {
            $task->sending_time = $request->sending_time;
        }

        $task->save();

        return redirect()->route('task.show', $id)->withSuccess('You have successfully reassigned users!');
    }

    public function makePrivate(Request $request, $id)
    {
        $task = Task::find($id);

        if ($task->is_private == 1) {
            $task->is_private = 0;
        } else {
            $task->is_private = 1;
        }

        $task->save();

        return response()->json(
            [
                'task' => $task,
            ]
        );
    }

    public function isWatched(Request $request, $id)
    {
        $task = Task::find($id);

        if ($task->is_watched == 1) {
            $task->is_watched = 0;
        } else {
            $task->is_watched = 1;
        }

        $task->save();

        return response()->json(
            [
                'task' => $task,
            ]
        );
    }

    public function complete(Request $request, $taskid)
    {
        $task = Task::find($taskid);
        if ($request->type == 'complete') {
            if (is_null($task->is_completed)) {
                $task->is_completed = date('Y-m-d H:i:s');
            } elseif (is_null($task->is_verified)) {
                if ($task->assignedTo) {
                    if ($task->assignedTo->fixed_price_user_or_job == 1) {
                        // Fixed price task.
                        if ($task->cost == null) {
                            if ($request->ajax()) {
                                return response()->json(
                                    [
                                        'message' => 'Please provide cost for fixed price task.',
                                    ], 500
                                );
                            }

                            return redirect()->back()->with('error', 'Please provide cost for fixed price task.');
                        }
                        if (! $task->is_milestone) {
                            $payment_receipt                 = new PaymentReceipt;
                            $payment_receipt->date           = date('Y-m-d');
                            $payment_receipt->worked_minutes = $task->approximate;
                            $payment_receipt->rate_estimated = $task->cost;
                            $payment_receipt->status         = 'Pending';
                            $payment_receipt->task_id        = $task->id;
                            $payment_receipt->user_id        = $task->assign_to;
                            $payment_receipt->save();
                        }
                    }
                }
                $task->is_verified = date('Y-m-d H:i:s');
            }
        } elseif ($request->type == 'clear') {
            $task->is_completed = null;
            $task->is_verified  = null;
        }
        $task->save();

        if ($request->ajax()) {
            return response()->json(
                [
                    'task' => $task,
                ]
            );
        }

        return redirect()->back()->with('success', 'Task marked as completed.');
    }

    public function start(Request $request, $taskid)
    {
        $task = Task::find($taskid);

        $task->actual_start_date = date('Y-m-d H:i:s');
        $task->save();

        if ($request->ajax()) {
            return response()->json(
                [
                    'task' => $task,
                ]
            );
        }

        return redirect()->back()->with('success', 'Task started.');
    }

    public function statutoryComplete($taskid)
    {
        $task                  = SatutoryTask::find($taskid);
        $task->completion_date = date('Y-m-d H:i:s');

        if ($task->assign_to == Auth::id()) {
            $task->save();
        }

        $message = 'Statutory Task Completed: ' . $task->task_details;

        return redirect()->back()->with('success', 'Statutory Task marked as completed.');
    }

    public function addRemark(Request $request)
    {
        $remark     = $request->input('remark');
        $id         = $request->input('id');
        $created_at = date('Y-m-d H:i:s');
        $update_at  = date('Y-m-d H:i:s');
        if ($request->module_type == 'document') {
            $remark_entry = DocumentRemark::create(
                [
                    'document_id' => $id,
                    'remark'      => $remark,
                    'module_type' => $request->module_type,
                    'user_name'   => $request->user_name ? $request->user_name : Auth::user()->name,
                ]
            );
        } else {
            $remark_entry = Remark::create(
                [
                    'taskid'      => $id,
                    'remark'      => $remark,
                    'module_type' => $request->module_type,
                    'user_name'   => $request->user_name ? $request->user_name : Auth::user()->name,
                ]
            );
        }

        return response()->json(['remark' => $remark], 200);
    }

    public function list(Request $request)
    {
        $pending_tasks   = Task::where('is_statutory', 0)->whereNull('is_completed');
        $developer_tasks = DeveloperTask::orderBy('id', 'DESC');

        if (! Auth::user()->hasRole('Admin')) {
            $pending_tasks   = $pending_tasks->where('assign_to', Auth::id());
            $developer_tasks = $developer_tasks->where('assigned_to', Auth::id());
        }
        if ($request->term && $request->term != null) {
            $pending_tasks   = $pending_tasks->where('id', 'LIKE', "%$request->term%");
            $developer_tasks = $developer_tasks->where('id', 'LIKE', "%$request->term%");
        }

        if ($request->task_subject && $request->task_subject != null) {
            $pending_tasks   = $pending_tasks->where('task_subject', 'LIKE', "%$request->task_subject%");
            $developer_tasks = $developer_tasks->where('subject', 'LIKE', "%$request->task_subject%");
        }

        if (is_array($request->user) && $request->user[0] != null) {
            $pending_tasks   = $pending_tasks->whereIn('assign_to', $request->user);
            $developer_tasks = $developer_tasks->whereIn('assigned_to', $request->user);
        }

        if ($request->get('is-filter-created', null) === 'on' && $request->get('start_date', null) && $request->get('end_date', null)) {
            // dd($request->start_date,$request->get('end_date', null));
            $pending_tasks   = $pending_tasks->where('tasks.created_at', '>=', $request->start_date);
            $developer_tasks = $developer_tasks->where('developer_tasks.created_at', '>=', $request->start_date);

            $pending_tasks   = $pending_tasks->where('tasks.created_at', '<=', $request->end_date);
            $developer_tasks = $developer_tasks->where('developer_tasks.created_at', '<=', $request->end_date);
        }

        if ($request->get('is-filter-tracked', null) === 'on' && $request->get('start_date_tracked', null) && $request->get('end_date_tracked', null)) {
            $pending_tasks   = $pending_tasks->where('tasks.m_start_date', '>=', $request->start_date_tracked);
            $developer_tasks = $developer_tasks->where('developer_tasks.m_start_date', '>=', $request->start_date_tracked);

            $pending_tasks   = $pending_tasks->where('tasks.m_start_date', '<=', $request->end_date_tracked);
            $developer_tasks = $developer_tasks->where('developer_tasks.m_start_date', '<=', $request->end_date_tracked);
        }

        $users        = Helpers::getUserArray(User::all());
        $user         = $request->user ?? [];
        $date         = $request->date ?? '';
        $taskstatus   = TaskStatus::get();
        $isTeamLeader = \App\Team::where('user_id', auth()->user()->id)->first();

        if ($request->get('export_excel', null)) {
            return $this->exportExcel($pending_tasks, $developer_tasks);
        }

        $pending_tasks   = $pending_tasks->orderBy('id', 'DESC')->latest()->paginate(Setting::get('pagination'));
        $developer_tasks = $developer_tasks->latest()->paginate(Setting::get('pagination'));

        return view(
            'task-module.list', [
                'pending_tasks'   => $pending_tasks,
                'taskstatus'      => $taskstatus,
                'isTeamLeader'    => $isTeamLeader,
                'users'           => $users,
                'user'            => $user,
                'date'            => $date,
                'developer_tasks' => $developer_tasks,
                'start_date'      => $request->get('start_date', ''),
                'end_date'        => $request->get('end_date', ''),
            ]
        );
    }

    public function exportExcel($pendingTasks, $developerTasks)
    {
        return Excel::download(new AllTasksExcelExport($pendingTasks, $developerTasks), 'all_tasks.xlsx');
    }

    public function getremark(Request $request)
    {
        $id = $request->input('id');

        $task = Task::find($id);

        echo $task->remark;
    }

    public function deleteTask(Request $request)
    {
        $id   = $request->input('id');
        $task = Task::find($id);

        if ($task) {
            $task->remark = $request->input('comment');
            $task->save();

            $task->delete();
        }

        if ($request->ajax()) {
            return response()->json(['code' => 200]);
        }
    }

    public function archiveTask($id)
    {
        $task = Task::find($id);

        $task->delete();

        if ($request->ajax()) {
            return response('success');
        }

        return redirect('/');
    }

    public function archiveTaskRemark($id)
    {
        $task            = Remark::find($id);
        $remark          = $task->remark;
        $task->delete_at = now();
        $task->update();

        return response(['success' => $remark], 200);
    }

    public function deleteStatutoryTask(Request $request)
    {
        $id   = $request->input('id');
        $task = SatutoryTask::find($id);
        $task->delete();

        return redirect()->back();
    }

    public function exportTask(Request $request)
    {
        $users = $request->input('selected_user');
        $from  = $request->input('range_start') . ' 00:00:00.000000';
        $to    = $request->input('range_end') . ' 23:59:59.000000';

        $tasks = (new Task())->newQuery()->withTrashed()->whereBetween(
            'created_at', [
                $from,
                $to,
            ]
        )->where('assign_from', '!=', 0)->where('assign_to', '!=', 0);

        if (! empty($users)) {
            $tasks = $tasks->whereIn('assign_to', $users);
        }

        $tasks_list = $tasks->get()->toArray();
        $tasks_csv  = [];
        $userList   = Helpers::getUserArray(User::all());

        for ($i = 0; $i < count($tasks_list); $i++) {
            $task_csv                    = [];
            $task_csv['id']              = $tasks_list[$i]['id'];
            $task_csv['SrNo']            = $i + 1;
            $task_csv['assign_from']     = $userList[$tasks_list[$i]['assign_from']];
            $task_csv['assign_to']       = $userList[$tasks_list[$i]['assign_to']];
            $task_csv['type']            = $tasks_list[$i]['is_statutory'] == 1 ? 'Statutory' : 'Other';
            $task_csv['task_subject']    = $tasks_list[$i]['task_subject'];
            $task_csv['task_details']    = $tasks_list[$i]['task_details'];
            $task_csv['completion_date'] = $tasks_list[$i]['completion_date'];
            $task_csv['remark']          = $tasks_list[$i]['remark'];
            $task_csv['completed_on']    = $tasks_list[$i]['is_completed'];
            $task_csv['created_on']      = $tasks_list[$i]['created_at'];

            array_push($tasks_csv, $task_csv);
        }

        return view('task-module.export')->withTasks($tasks_csv);
    }

    public function outputCsv($fileName, $assocDataArray)
    {
        header('Pragma: public');
        header('Expires: 0');
        header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
        header('Cache-Control: private', false);
        header('Content-Type: text/csv');
        header('Content-Disposition: attachment;filename=' . $fileName);
        if (isset($assocDataArray['0'])) {
            $fp = fopen('php://output', 'w');
            fputcsv($fp, array_keys($assocDataArray['0']));
            foreach ($assocDataArray as $values) {
                fputcsv($fp, $values);
            }
            fclose($fp);
        }
    }

    public static function getClasses($task)
    {
        $classes = ' ';
        $classes .= ' ' . ((empty($task) && $task->assign_from == Auth::user()->id) ? 'mytask' : '') . ' ';
        $classes .= ' ' . ((empty($task) && time() > strtotime($task->completion_date . ' 23:59:59')) ? 'isOverdue' : '') . ' ';

        $task_status = empty($task) ? Helpers::statusClass($task->assign_status) : '';

        $classes .= $task_status;

        return $classes;
    }

    public function recurringTask()
    {
        $statutory_tasks = SatutoryTask::all()->toArray();

        foreach ($statutory_tasks as $statutory_task) {
            switch ($statutory_task['recurring_type']) {
                case 'EveryDay':
                    self::createTasksFromSatutary($statutory_task);
                    break;

                case 'EveryWeek':
                    if ($statutory_task['recurring_day'] == date('D')) {
                        self::createTasksFromSatutary($statutory_task);
                    }
                    break;

                case 'EveryMonth':
                    if ($statutory_task['recurring_day'] == date('d')) {
                        self::createTasksFromSatutary($statutory_task);
                    }
                    break;

                case 'EveryYear':
                    $dayNdate = date('d-n', strtotime($statutory_task['recurring_day']));
                    if ($dayNdate == date('d-n')) {
                        self::createTasksFromSatutary($statutory_task);
                    }
                    break;
            }
        }
    }

    public static function createTasksFromSatutary($statutory_task)
    {
        $statutory_task['is_statutory'] = 1;
        $statutory_task['statutory_id'] = $statutory_task['id'];
        $task                           = Task::create($statutory_task);
    }

    public function getTaskRemark(Request $request)
    {
        $id = $request->input('id');

        if (is_null($request->module_type)) {
            $remark = \App\Task::getremarks($id);
        } else {
            $remark = Remark::where('module_type', $request->module_type)->where('taskid', $id)->get();
        }

        return response()->json($remark, 200);
    }

    public function addWhatsAppGroup(Request $request)
    {
        $whatsapp_number = '971562744570';
        $task            = Task::findorfail($request->id);

        // Yogesh Sir Number
        $admin_number  = User::findorfail(6);
        $assigned_from = Helpers::getUserArray(User::where('id', $task->assign_from)->get());
        $assigned_to   = Helpers::getUserArray(User::where('id', $task->assign_to)->get());
        $task_id       = $task->id;

        //Check if task id is present in Whats App Group
        $group = WhatsAppGroup::where('task_id', $task_id)->first();

        if ($group == null) {
            //First Create Group Using Admin id
            $phone  = $admin_number->phone;
            $result = app(\App\Http\Controllers\WhatsAppController::class)->createGroup($task_id, '', $phone, '', $whatsapp_number);
            if (isset($result['chatId']) && $result['chatId'] != null) {
                $task_id = $task_id;
                $chatId  = $result['chatId'];
                //Create Group
                $group           = new WhatsAppGroup;
                $group->task_id  = $task_id;
                $group->group_id = $chatId;
                $group->save();
                //Save Whats App Group With Reference To Group ID
                $group_number           = new WhatsAppGroupNumber;
                $group_number->group_id = $group->id;
                $group_number->user_id  = $admin_number->id;
                $group_number->save();
                //Chat Message
                $params['task_id']  = $task_id;
                $params['group_id'] = $group->id;
                ChatMessage::create($params);
            } else {
                $group           = new WhatsAppGroup;
                $group->task_id  = $task_id;
                $group->group_id = null;
                $group->save();

                $group_number           = new WhatsAppGroupNumber;
                $group_number->group_id = $group->id;
                $group_number->user_id  = $admin_number->id;
                $group_number->save();

                $params['task_id']      = $task_id;
                $params['group_id']     = $group->id;
                $params['error_status'] = 1;
                ChatMessage::create($params);
            }
        }

        //iF assigned from is different from Yogesh Sir
        if ($admin_number->id != array_keys($assigned_from)[0]) {
            $request->request->add(
                [
                    'group_id'        => $group->id,
                    'user_id'         => array_keys($assigned_from),
                    'task_id'         => $task->id,
                    'whatsapp_number' => $whatsapp_number,
                ]
            );

            $this->addGroupParticipant(request());
        }

        //Add Assigned To Into Whats App Group
        if (array_keys($assigned_to)[0] != null) {
            $request->request->add(
                [
                    'group_id'        => $group->id,
                    'user_id'         => array_keys($assigned_to),
                    'task_id'         => $task->id,
                    'whatsapp_number' => $whatsapp_number,
                ]
            );

            $this->addGroupParticipant(request());
        }

        return response()->json(['group_id' => $group->id]);
    }

    public function addGroupParticipant(Request $request)
    {
        $whatsapp_number = '971562744570';
        //Now Add Participant In the Group

        foreach ($request->user_id as $key => $value) {
            $check = WhatsAppGroupNumber::where('group_id', $request->group_id)->where('user_id', $value)->first();
            if ($check == null) {
                $user   = User::findorfail($value);
                $group  = WhatsAppGroup::where('task_id', $request->task_id)->first();
                $phone  = $user->phone;
                $result = app(\App\Http\Controllers\WhatsAppController::class)->createGroup('', $group->group_id, $phone, '', $whatsapp_number);
                if (isset($result['add']) && $result['add'] != null) {
                    $task_id = $request->task_id;

                    $group_number           = new WhatsAppGroupNumber;
                    $group_number->group_id = $request->group_id;
                    $group_number->user_id  = $user->id;
                    $group_number->save();
                    $params['user_id']  = $user->id;
                    $params['task_id']  = $task_id;
                    $params['group_id'] = $request->group_id;
                    ChatMessage::create($params);
                } else {
                    $task_id = $request->task_id;

                    $group_number           = new WhatsAppGroupNumber;
                    $group_number->group_id = $request->group_id;
                    $group_number->user_id  = $user->id;
                    $group_number->save();
                    $params['user_id']      = $user->id;
                    $params['task_id']      = $task_id;
                    $params['group_id']     = $request->group_id;
                    $params['error_status'] = 1;
                    ChatMessage::create($params);
                }
            }
        }

        return redirect()->back()->with('message', 'Participants Added To Group');
    }

    public function getDetails(Request $request)
    {
        $task = \App\Task::where('id', $request->get('task_id', 0))->first();

        if ($task) {
            return response()->json(
                [
                    'code' => 200,
                    'data' => $task,
                ]
            );
        }

        return response()->json(
            [
                'code'    => 500,
                'message' => 'Sorry, no task found',
            ]
        );
    }

    public function saveNotes(Request $request)
    {
        $task = \App\Task::where('id', $request->get('task_id', 0))->first();

        if ($task) {
            if ($task->is_statutory == 3) {
                foreach ($request->note as $note) {
                    if ($note != null) {
                        Remark::create(
                            [
                                'taskid'      => $task->id,
                                'remark'      => $note,
                                'module_type' => 'task-note',
                            ]
                        );
                    }
                }
            }

            return response()->json(
                [
                    'code'    => 200,
                    'data'    => $task,
                    'message' => 'Note added!',
                ]
            );
        }

        return response()->json(
            [
                'code'    => 500,
                'message' => 'Sorry, no task found',
            ]
        );
    }

    public function getWebsiteList(Request $request)
    {
        if ($request->id[0] == 'all') {
            $websiteData = StoreWebsite::all();
        } else {
            $websiteData = StoreWebsite::whereIn('id', $request->id)->get();
        }
        $websiteCheckbox = '';
        foreach ($websiteData as $website) {
            $websiteCheckbox .= '<div class="col-4 py-1"><div style="float: left;height: auto;margin-right: 6px;"><input style="height:13px;" type="checkbox" name="website_name[' . $website->id . ']" value="' . $website->title . ' - ' . $request->cat_title . '"/></div> <div class=""  style="float: left;height: auto;margin-right: 6px;overflow-wrap: anywhere;width: 80%;">' . $website->website . '</div></div>';
        }

        return response()->json(
            [
                'code'    => 200,
                'data'    => $websiteCheckbox,
                'message' => 'List of website!',
            ]
        );
    }

    public function createMultipleTaskFromSortcutBugtrack(Request $request)
    {
        try {
            $this->validate(
                $request, [
                    'task_subject'      => 'required',
                    'task_detail'       => 'required',
                    'task_asssigned_to' => 'required_without:assign_to_contacts',
                ]
            );
            $bug_list_ids      = explode(',', $request->task_bug_ids);
            $model_bug_tracker = BugTracker::whereIn('id', $bug_list_ids)->get()->toArray();
            $bug_tracker_array = [];
            $postfix_task_bug  = '';
            $model_name        = 0;
            for ($p = 0; $p < count($model_bug_tracker); $p++) {
                $bug_primary_id                     = $model_bug_tracker[$p]['id'];
                $bug_tracker_array[$bug_primary_id] = $model_bug_tracker[$p];
                $model_name                         = $model_bug_tracker[0]['module_id'];
            }

            foreach ($bug_tracker_array as $bug_key => $bug_tracker_ele) {
                $postfix_task_bug .= '<br/>' . $bug_key . ' :Step to Reproduce : <br/>' . $bug_tracker_ele['step_to_reproduce'];
                $postfix_task_bug .= '<br/>Expected Result : <br/>' . $bug_tracker_ele['expected_result'];
                $postfix_task_bug .= '<br/>Remark : <br/>' . $bug_tracker_ele['remark'];
            }

            $model_site_dev_category    = SiteDevelopmentCategory::where('title', $model_name)->get()->toArray();
            $site_development_module_id = 0;
            if (count($model_site_dev_category) > 0 && $model_site_dev_category[0]['id'] > 0) {
                $site_development_module_id = $model_site_dev_category[0]['id'];
            }

            $website_multiple_arrays = array_keys($request->website_name);

            for ($m = 0; $m < count($website_multiple_arrays); $m++) {
                $data_site['site_development_category_id']        = $site_development_module_id;
                $data_site['bug_id']                              = $request->site_id;
                $data_site['website_id']                          = $website_multiple_arrays[$m];
                $data_site['created_at']                          = date('Y-m-d H:i:s');
                $data_site['site_development_master_category_id'] = 4;

                $site_devlopment_exist        = SiteDevelopment::where('bug_id', $request->site_id)->where('website_id', $website_multiple_arrays[$m])->get()->toArray();
                $site_developement_primary_id = 0;
                if (count($site_devlopment_exist) == 0) {
                    $res_site_dev                 = SiteDevelopment::create($data_site);
                    $site_developement_primary_id = $res_site_dev->id;
                } else {
                    if (isset($site_devlopment_exist[0]['id']) && $site_devlopment_exist[0]['id'] > 0) {
                        $site_developement_primary_id = $site_devlopment_exist[0]['id'];
                    }
                }
            }

            $site_dev_category_id = \App\SiteDevelopment::where('id', $site_developement_primary_id)->select('site_development_category_id')->first();
            $cat_id               = $site_dev_category_id->id;
            if (is_array($request->website_name)) {
                $sub_array = [];
                foreach ($request->website_name as $key => $website) {
                    $sub_array[] = $website;
                }
                $site_developement_id = \App\SiteDevelopment::select('id')->where(
                    [
                        'site_development_category_id' => $site_dev_category_id->site_development_category_id,
                        'website_id'                   => $website_multiple_arrays[0], //$key
                    ]
                )->first();
                if (isset($site_developement_id->id)) {
                    $website               = implode(',', $sub_array);
                    $request->task_subject = $website;
                    $message               = '';
                    $assignedUserId        = 0;
                    $taskType              = $request->task_type;
                    $data                  = $request->except('_token');
                    $data['site_id']       = 0;
                    $data['bug_id']        = $request->site_id;
                    $data['task_subject']  = $website;
                    $data['task_bug_ids']  = $request->task_bug_ids;
                    $data['task_detail'] .= $postfix_task_bug;
                    if ($taskType == '4' || $taskType == '5' || $taskType == '6') {
                        $data = [];
                        if (is_array($request->task_asssigned_to)) {
                            $data['assigned_to'] = $request->task_asssigned_to[0];
                        } else {
                            $data['assigned_to'] = $request->task_asssigned_to;
                        }
                        $data['user_id']      = loginId();
                        $data['subject']      = $website;
                        $data['task']         = $data['task_detail'];
                        $data['task_type_id'] = 1;
                        $data['cost']         = $request->get('cost', 0);
                        $data['status']       = DeveloperTask::DEV_TASK_STATUS_PLANNED;
                        $data['created_by']   = loginId();
                        if ($taskType == 5 || $taskType == 6) {
                            $data['task_type_id'] = 3;
                        }

                        $data['subject']              = $website;
                        $data['task_type']            = $taskType;
                        $data['task']                 = $data['task_detail'];
                        $data['task_type_id']         = 1;
                        $data['user_feedback_cat_id'] = $request->get('user_feedback_cat_id');
                        $data['site_developement_id'] = 0;
                        $data['cost']                 = $request->get('cost', 0);
                        $data['status']               = 'In Progress';
                        $data['created_by']           = Auth::id();

                        $task = $this->taskCreateMaster($data);

                        if ($task) {
                            if (count($bug_list_ids) > 0) {
                                $task_asssigned_user_to = $data['assigned_to'];
                                for ($k = 0; $k < count($bug_list_ids); $k++) {
                                    $bug_tacker_id               = $bug_list_ids[$k];
                                    $bug_tracking                = BugTracker::find($bug_tacker_id);
                                    $bug_tracking->bug_status_id = 6;
                                    $bug_tracking->assign_to     = $task_asssigned_user_to;
                                    $bug_tracking->updated_at    = date('Y-m-d H:i:s');
                                    $bug_tracking->updated_by    = Auth::user()->name;
                                    $bug_tracking->save();
                                }
                            }
                        }

                        if (request('need_review_task')) {
                            $data['parent_review_task_id'] = $task->id;
                            $reviewTask                    = $cntrl->developerTaskCreate($data);
                        }
                    } else {
                        $data['site_developement_id'] = 0;
                        $data['task_subject']         = $website;
                        $data['task_type']            = $taskType;
                        $data['assign_from']          = loginId();
                        $data['status']               = 5;
                        $data['customer_id']          = $data['customer_id'] ?? null;
                        $data['cost']                 = $data['cost'] ?? null;

                        $task = $this->taskCreateMaster($data);

                        if ($task) {
                            if (count($bug_list_ids) > 0) {
                                if (is_array($request->task_asssigned_to)) {
                                    $data['assigned_to'] = $request->task_asssigned_to[0];
                                } else {
                                    $data['assigned_to'] = $request->task_asssigned_to;
                                }
                                $task_asssigned_user_to = $data['assigned_to'];
                                for ($k = 0; $k < count($bug_list_ids); $k++) {
                                    $bug_tacker_id               = $bug_list_ids[$k];
                                    $bug_tracking                = BugTracker::find($bug_tacker_id);
                                    $bug_tracking->bug_status_id = 6;
                                    $bug_tracking->assign_to     = $task_asssigned_user_to;
                                    $bug_tracking->updated_at    = date('Y-m-d H:i:s');
                                    $bug_tracking->updated_by    = Auth::user()->name;
                                    $bug_tracking->save();
                                }
                            }
                        }

                        if (request('need_review_task')) {
                            $data['parent_review_task_id'] = $task->id;
                            $reviewTask                    = $this->taskCreateMaster($data);
                        }
                    }
                }
            } else {
                $this->createTaskFromSortcut($request);

                if (count($bug_list_ids) > 0) {
                    if (is_array($request->task_asssigned_to)) {
                        $task_asssigned_user_to = $request->task_asssigned_to[0];
                    } else {
                        $task_asssigned_user_to = $request->task_asssigned_to;
                    }
                    for ($k = 0; $k < count($bug_list_ids); $k++) {
                        $bug_tacker_id               = $bug_list_ids[$k];
                        $bug_tracking                = BugTracker::find($bug_tacker_id);
                        $bug_tracking->bug_status_id = 6;
                        if ($task_asssigned_user_to > 0) {
                            $bug_tracking->assign_to = $task_asssigned_user_to;
                        }
                        $bug_tracking->updated_at = date('Y-m-d H:i:s');
                        $bug_tracking->updated_by = Auth::user()->name;
                        $bug_tracking->save();
                    }
                }
            }

            return response()->json(['code' => 200, 'data' => [], 'message' => 'Your quick task has been created!']);
        } catch (Exception $e) {
            return response()->json(['code' => 500, 'message' => $e->getMessage()]);
        }
    }

    public function createMultipleTaskFromSortcut(Request $request)
    {
        try {
            $this->validate(
                $request, [
                    'task_subject'      => 'required',
                    'task_detail'       => 'required',
                    'task_asssigned_to' => 'required_without:assign_to_contacts',
                ]
            );
            $site_dev_category_id = \App\SiteDevelopment::where('id', $request->site_id)->select('site_development_category_id')->first();
            $cat_id               = $site_dev_category_id->id;
            if (is_array($request->website_name)) {
                foreach ($request->website_name as $key => $website) {
                    $site_developement_id = \App\SiteDevelopment::select('id')->where(
                        [
                            'site_development_category_id' => $site_dev_category_id->site_development_category_id,
                            'website_id'                   => $key,
                        ]
                    )->first();
                    if (isset($site_developement_id->id)) {
                        $request->task_subject = $website;
                        $message               = '';
                        $assignedUserId        = 0;
                        $taskType              = request('task_type');
                        $data                  = $request->except('_token');
                        $data['site_id']       = $site_developement_id->id;
                        $data['task_subject']  = $website;
                        if ($taskType == '4' || $taskType == '5' || $taskType == '6') {
                            $data = [];
                            if (is_array($request->task_asssigned_to)) {
                                $data['assigned_to'] = $request->task_asssigned_to[0];
                            } else {
                                $data['assigned_to'] = $request->task_asssigned_to;
                            }
                            $data['user_id']              = loginId();
                            $data['subject']              = $website;
                            $data['task']                 = $request->get('task_detail');
                            $data['task_type_id']         = 1;
                            $data['site_developement_id'] = $request->get('site_id');
                            $data['cost']                 = $request->get('cost', 0);
                            $data['status']               = DeveloperTask::DEV_TASK_STATUS_PLANNED;
                            $data['created_by']           = loginId();
                            if ($taskType == 5 || $taskType == 6) {
                                $data['task_type_id'] = 3;
                            }

                            $data['subject']              = $website;
                            $data['task']                 = $request->get('task_detail');
                            $data['task_type_id']         = 1;
                            $data['user_feedback_cat_id'] = $request->get('user_feedback_cat_id');
                            $data['site_developement_id'] = $request->get('site_id');
                            $data['cost']                 = $request->get('cost', 0);
                            $data['status']               = 'In Progress';
                            $data['created_by']           = Auth::id();

                            $task = $this->developerTaskCreate($data);

                            if (request('need_review_task')) {
                                $data['parent_review_task_id'] = $task->id;
                                $reviewTask                    = $cntrl->developerTaskCreate($data);
                            }
                        } else {
                            $data['site_developement_id'] = $site_developement_id->id;
                            $data['task_subject']         = $website;
                            $data['task_type']            = $data['task_type'] ?? null;
                            $data['assign_from']          = loginId();
                            $data['status']               = 5; // Planned - As per DEVTASK-22162
                            $data['customer_id']          = $data['customer_id'] ?? null;
                            $data['cost']                 = $data['cost'] ?? null;

                            $task = $this->taskCreateMaster($data);

                            if (request('need_review_task')) {
                                $data['parent_review_task_id'] = $task->id;
                                $reviewTask                    = $this->taskCreateMaster($data);
                            }
                        }
                    }
                }
            } else {
                $this->createTaskFromSortcut($request);
            }

            return response()->json(
                [
                    'code'    => 200,
                    'data'    => [],
                    'message' => 'Your quick task has been created!',
                ]
            );
        } catch (Exception $e) {
            return response()->json(
                [
                    'code'    => 500,
                    'message' => $e->getMessage(),
                ]
            );
        }
    }

    public function createMultipleTaskFromSortcutPostman(Request $request)
    {
        try {
            $this->validate(
                $request, [
                    'task_subject'      => 'required',
                    'task_detail'       => 'required',
                    'task_asssigned_to' => 'required_without:assign_to_contacts',
                ]
            );

            $this->createTaskFromSortcut($request);

            return response()->json(
                [
                    'code'    => 200,
                    'data'    => [],
                    'message' => 'Your quick task has been created!',
                ]
            );
        } catch (Exception $e) {
            return response()->json(
                [
                    'code'    => 500,
                    'message' => $e->getMessage(),
                ]
            );
        }
    }

    public function createMultipleTaskFromSortcutDevOops(Request $request)
    {
        try {
            $this->validate(
                $request, [
                    'task_subject'      => 'required',
                    'task_detail'       => 'required',
                    'task_asssigned_to' => 'required_without:assign_to_contacts',
                ]
            );

            $this->createTaskFromSortcut($request);

            return response()->json(
                [
                    'code'    => 200,
                    'data'    => [],
                    'message' => 'Your quick task has been created!',
                ]
            );
        } catch (Exception $e) {
            return response()->json(
                [
                    'code'    => 500,
                    'message' => $e->getMessage(),
                ]
            );
        }
    }

    public function createMultipleTaskFromSortcutUserSchedules(Request $request)
    {
        try {
            $this->validate(
                $request, [
                    'task_subject'      => 'required',
                    'task_detail'       => 'required',
                    'task_asssigned_to' => 'required_without:assign_to_contacts',
                ]
            );

            $this->createTaskFromSortcut($request);

            return response()->json(
                [
                    'code'    => 200,
                    'data'    => [],
                    'message' => 'Your quick task has been created!',
                ]
            );
        } catch (Exception $e) {
            return response()->json(
                [
                    'code'    => 500,
                    'message' => $e->getMessage(),
                ]
            );
        }
    }

    public function createMultipleTaskFromScriptDocument(Request $request)
    {
        try {
            $this->validate(
                $request, [
                    'task_subject'      => 'required',
                    'task_detail'       => 'required',
                    'task_asssigned_to' => 'required_without:assign_to_contacts',
                ]
            );

            $this->createTaskFromSortcut($request);

            return response()->json(
                [
                    'code'    => 200,
                    'data'    => [],
                    'message' => 'Your quick task has been created!',
                ]
            );
        } catch (Exception $e) {
            return response()->json(
                [
                    'code'    => 500,
                    'message' => $e->getMessage(),
                ]
            );
        }
    }

    public function createMultipleTaskFromSortcutMagentoProblems(Request $request)
    {
        try {
            $this->validate(
                $request, [
                    'task_subject'      => 'required',
                    'task_detail'       => 'required',
                    'task_asssigned_to' => 'required_without:assign_to_contacts',
                ]
            );

            $this->createTaskFromSortcut($request);

            return response()->json(
                [
                    'code'    => 200,
                    'data'    => [],
                    'message' => 'Your quick task has been created!',
                ]
            );
        } catch (Exception $e) {
            return response()->json(
                [
                    'code'    => 500,
                    'message' => $e->getMessage(),
                ]
            );
        }
    }

    public function createMultipleTaskFromSortcutWebsiteLogs(Request $request)
    {
        try {
            $this->validate(
                $request, [
                    'task_subject'      => 'required',
                    'task_detail'       => 'required',
                    'task_asssigned_to' => 'required_without:assign_to_contacts',
                ]
            );

            $this->createTaskFromSortcut($request);

            return response()->json(
                [
                    'code'    => 200,
                    'data'    => [],
                    'message' => 'Your quick task has been created!',
                ]
            );
        } catch (Exception $e) {
            return response()->json(
                [
                    'code'    => 500,
                    'message' => $e->getMessage(),
                ]
            );
        }
    }

    public function createMultipleTaskFromSortcutSentry(Request $request)
    {
        try {
            $this->validate(
                $request, [
                    'task_subject'      => 'required',
                    'task_detail'       => 'required',
                    'task_asssigned_to' => 'required_without:assign_to_contacts',
                ]
            );

            $this->createTaskFromSortcut($request);

            return response()->json(
                [
                    'code'    => 200,
                    'data'    => [],
                    'message' => 'Your quick task has been created!',
                ]
            );
        } catch (Exception $e) {
            return response()->json(
                [
                    'code'    => 500,
                    'message' => $e->getMessage(),
                ]
            );
        }
    }

    public function createMultipleTaskFromSortcutSonar(Request $request)
    {
        try {
            $this->validate(
                $request, [
                    'task_subject'      => 'required',
                    'task_detail'       => 'required',
                    'task_asssigned_to' => 'required_without:assign_to_contacts',
                ]
            );

            $this->createTaskFromSortcut($request);

            return response()->json(
                [
                    'code'    => 200,
                    'data'    => [],
                    'message' => 'Your quick task has been created!',
                ]
            );
        } catch (Exception $e) {
            return response()->json(
                [
                    'code'    => 500,
                    'message' => $e->getMessage(),
                ]
            );
        }
    }

    public function createTaskFromSortcut(Request $request)
    {
        $this->validate(
            $request, [
                'task_subject'      => 'required',
                'task_detail'       => 'required',
                'task_asssigned_to' => 'required_without:assign_to_contacts',
            ]
        );

        $message        = '';
        $assignedUserId = 0;
        $taskType       = request('task_type');
        $data           = $request->except('_token');
        $quick_task     = request('quick_task');

        if ($taskType == '4' || $taskType == '5' || $taskType == '6' || ($taskType == '0' && $quick_task == '1')) {
            $data = [];
            if (is_array($request->task_asssigned_to)) {
                $data['assigned_to'] = $request->task_asssigned_to[0];
            } else {
                $data['assigned_to'] = $request->task_asssigned_to;
            }
            $data['user_id']              = loginId();
            $data['subject']              = $request->get('task_subject');
            $data['task']                 = $request->get('task_detail');
            $data['task_type_id']         = 1;
            $data['site_developement_id'] = $request->get('site_id');
            $data['cost']                 = $request->get('cost', 0);
            $data['status']               = DeveloperTask::DEV_TASK_STATUS_PLANNED;
            $data['created_by']           = loginId();
            if ($taskType == 5 || $taskType == 6) {
                $data['task_type_id'] = 3;
            }

            $data['subject']                 = $request->get('task_subject');
            $data['task']                    = $request->get('task_detail');
            $data['task_type_id']            = 1;
            $data['user_feedback_cat_id']    = $request->get('user_feedback_vendor_id') ?? 0;
            $data['user_feedback_vendor_id'] = $request->get('user_feedback_cat_id') ?? 0;
            $data['site_developement_id']    = $request->get('site_id');
            $data['cost']                    = $request->get('cost', 0);
            $data['status']                  = 'In Progress';
            $data['created_by']              = Auth::id();

            $task = $this->developerTaskCreate($data);

            if (request('need_review_task')) {
                $data['parent_review_task_id'] = $task->id;
                $reviewTask                    = $cntrl->developerTaskCreate($data);
            }
        } else {
            $data['task_type']   = $data['task_type'] ?? null;
            $data['assign_from'] = loginId();
            $data['status']      = 5; // Planned - As per DEVTASK-22162
            $data['customer_id'] = $data['customer_id'] ?? null;
            $data['cost']        = $data['cost'] ?? null;

            $task = $this->taskCreateMaster($data);

            if (request('need_review_task')) {
                $data['parent_review_task_id'] = $task->id;
                $reviewTask                    = $this->taskCreateMaster($data);
            }
        }

        return response()->json(
            [
                'code'    => 200,
                'data'    => [],
                'message' => 'Your quick task has been created!',
            ]
        );
    }

    public function taskCreateMaster($data)
    {
        if ($data['task_type'] ?? null) {
            $data['is_statutory'] = $data['task_type'];
        }
        if ($data['task_detail'] ?? null) {
            $data['task_details'] = $data['task_detail'];
        }
        if ($data['site_id'] ?? null) {
            $data['site_developement_id'] = $data['site_id'];
        }
        if ($data['category_id'] ?? null) {
            $data['category'] = $data['category_id'];
        }

        if ($temp = $data['task_asssigned_to'] ?? null) {
            $data['assign_to'] = is_array($temp) ? $temp[0] : $temp;
        }

        if ($data['task_type'] != 'note-task') {
            if (! isset($data['assign_to'])) {
                if ($temp = $data['assign_to_contacts'] ?? null) {
                    $data['assign_to'] = is_array($temp) ? $temp[0] : $temp;
                }
            }
        }

        if ($data['task_type'] == 'quick_task') {
            $data['is_statutory'] = 0;
            $data['category']     = 6;
        }

        if ($data['parent_review_task_id'] ?? 0) {
            $data['task_subject'] = $data['task_subject'] . ' - #REVIEW_TASK';
            $data['task_details'] = $data['task_details'] . ' - #REVIEW_TASK';
        }

        $newCreated = 0;

        // Discussion task
        if ($data['task_type'] == 3) {
            $task = Task::find($data['task_subject']);
            if (! $task) {
                $task       = Task::create($data);
                $newCreated = 1;
            }

            $remarks = $task->task_subject;
            $exist   = Remark::where('taskid', $task->id)->where('remark', $remarks)->where('module_type', 'task-note')->first();
            if (! $exist) {
                Remark::create(
                    [
                        'taskid'      => $task->id,
                        'remark'      => $remarks,
                        'module_type' => 'task-note',
                    ]
                );
            }
            if ($data['note'] ?? []) {
                $data['note'] = is_array($data['note']) ? $data['note'] : [$data['note']];
                foreach ($data['note'] as $note) {
                    if (trim($note)) {
                        Remark::create(
                            [
                                'taskid'      => $task->id,
                                'remark'      => $note,
                                'module_type' => 'task-note',
                            ]
                        );
                    }
                }
            }
        } else {
            $task       = Task::create($data);
            $newCreated = 1;
        }

        if ($newCreated) {
            if (isset($data['task_for']) && $data['task_for'] == 'time_doctor') {
                $this->timeDoctorActions('TASK', $task, $data['time_doctor_project'], $data['time_doctor_account'], $data['assign_to']);
            } else {
                $this->hubstaffActions('TASK', $task);
            }
        }

        if ($task->is_statutory != 1) {
            $message = '#' . $task->id . '. ' . $task->task_subject . '. ' . $task->task_details;
        } else {
            $message = $task->task_subject . '. ' . $task->task_details;
        }

        if ($data['task_type'] != 'note-task') {
            if ($temp = $data['task_asssigned_to'] ?? null) {
                if (is_array($temp)) {
                    foreach ($temp as $user_id) {
                        $task->users()->attach([$user_id => ['type' => User::class]]);
                    }
                } else {
                    $task->users()->attach([$temp => ['type' => User::class]]);
                }
            }

            if ($temp = $data['assign_to_contacts'] ?? null) {
                if (is_array($temp)) {
                    foreach ($temp as $contact_id) {
                        $task->users()->attach([$contact_id => ['type' => Contact::class]]);
                    }
                } else {
                    $task->users()->attach([$temp => ['type' => Contact::class]]);
                }
            }
        }

        $params = [
            'number'   => null,
            'user_id'  => loginId(),
            'approved' => 1,
            'status'   => 2,
            'task_id'  => $task->id,
            'message'  => $message,
        ];

        if (count($task->users) > 0) {
            if ($task->assign_from == Auth::id()) {
                foreach ($task->users as $key => $user) {
                    if ($key == 0) {
                        $params['erp_user'] = $user->id;
                    } else {
                        app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($user->phone, $user->whatsapp_number, $params['message']);
                    }
                }
            } else {
                foreach ($task->users as $key => $user) {
                    if ($key == 0) {
                        $params['erp_user'] = $task->assign_from;
                    } else {
                        if ($user->id != Auth::id()) {
                            app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($user->phone, $user->whatsapp_number, $params['message']);
                        }
                    }
                }
            }
        }

        if (count($task->contacts) > 0) {
            foreach ($task->contacts as $key => $contact) {
                if ($key == 0) {
                    $params['contact_id'] = $task->assign_to;
                } else {
                    app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($contact->phone, null, $params['message']);
                }
            }
        }

        $chat_message = ChatMessage::create($params);
        ChatMessagesQuickData::updateOrCreate(
            [
                'model'    => \App\Task::class,
                'model_id' => $params['task_id'],
            ], [
                'last_communicated_message'    => @$params['message'],
                'last_communicated_message_at' => $chat_message->created_at,
                'last_communicated_message_id' => ($chat_message) ? $chat_message->id : null,
            ]
        );

        $myRequest = new Request();
        $myRequest->setMethod('POST');
        $myRequest->request->add(['messageId' => $chat_message->id]);

        app(\App\Http\Controllers\WhatsAppController::class)->approveMessage('task', $myRequest);

        return $task;
    }

    public function developerTaskCreate($data)
    {
        $loggedUser = request()->user();

        $data['created_by'] = loginId();

        if ($data['parent_review_task_id'] ?? 0) {
            $data['subject'] = $data['subject'] . ' - #REVIEW_TASK';
            $data['task']    = $data['task'] . ' - #REVIEW_TASK';
        }
        $task = DeveloperTask::create($data);

        // Check the assinged user in any team ?
        if ($task->assigned_to > 0 && empty($task->team_lead_id)) {
            $teamUser = \App\TeamUser::where('user_id', $task->assigned_to)->first();
            if ($teamUser) {
                $team = $teamUser->team;
                if ($team) {
                    $task->team_lead_id = $team->user_id;
                    $task->save();
                }
            } else {
                $isTeamLeader = \App\Team::where('user_id', $task->assigned_to)->first();
                if ($isTeamLeader) {
                    $task->team_lead_id = $task->assigned_to;
                    $task->save();
                }
            }
        }

        // CREATE GITHUB REPOSITORY BRANCH
        $newBranchName = $this->createBranchOnGithub(
            $task->repository_id,
            $task->id,
            $task->subject
        );

        // UPDATE TASK WITH BRANCH NAME
        if ($newBranchName) {
            $task->github_branch_name = $newBranchName;
            $task->save();
        }

        // SEND MESSAGE
        if (is_string($newBranchName)) {
            $message = $task->task . PHP_EOL . 'A new branch ' . $newBranchName . " has been created. Please pull the current code and run 'git checkout " . $newBranchName . "' to work in that branch.";
        } else {
            $message = $task->task;
        }
        $requestData = new Request();
        $requestData->setMethod('POST');
        $requestData->request->add(['issue_id' => $task->id, 'message' => $message, 'status' => 1]);
        app(\App\Http\Controllers\WhatsAppController::class)->sendMessage($requestData, 'issue');

        MessageHelper::sendEmailOrWebhookNotification([
            $task->user_id,
            $task->assigned_to,
            $task->master_user_id,
            $task->responsible_user_id,
            $task->team_lead_id,
            $task->tester_id,
        ], ' [ ' . $loggedUser->name . ' ] - ' . $message);

        $hubstaff_project_id = config('env.HUBSTAFF_BULK_IMPORT_PROJECT_ID') ?: 0;

        $hubstaffUserId = null;
        if ($assignedUser = HubstaffMember::where('user_id', $task->assigned_to)->first()) {
            $hubstaffUserId = $assignedUser->hubstaff_user_id;
        }

        $summary = substr($task->task, 0, 200);
        if ($data['task_type_id'] == 1) {
            $taskSummery = '#DEVTASK-' . $task->id . ' => ' . $summary;
        } else {
            $taskSummery = '#TASK-' . $task->id . ' => ' . $summary;
        }

        if (isset($data['task_for']) && $data['task_for'] == 'time_doctor') {
            $this->timeDoctorActions('DEVTASK', $task, $data['time_doctor_project'], $data['assigned_to']);
        } else {
            $hubstaffTaskId = '';
            if (env('PRODUCTION', true)) {
                $hubstaffTaskId = $this->createHubstaffTask(
                    $taskSummery,
                    $hubstaffUserId,
                    $hubstaff_project_id
                );
            } else {
                $hubstaff_project_id = '#TASK-3';
                $hubstaffUserId      = 406; //for local system
                $hubstaffTaskId      = 34543; //for local system
            }

            if ($hubstaffTaskId) {
                $task->hubstaff_task_id = $hubstaffTaskId;
                $task->save();

                $task                      = new HubstaffTask();
                $task->hubstaff_task_id    = $hubstaffTaskId;
                $task->project_id          = $hubstaff_project_id;
                $task->hubstaff_project_id = $hubstaff_project_id;
                $task->summary             = $task->task;
                $task->save();
            }
        }

        return $task;
    }

    public function hubstaffActions($type, $task)
    {
        $hubstaff_project_id = config('env.HUBSTAFF_BULK_IMPORT_PROJECT_ID');

        if ($type == 'DEVTASK') {
            $message      = '#DEVTASK-' . $task->id . ' => ' . $task->subject;
            $assignedToId = $task->assigned_to;
        } elseif ($type == 'TASK') {
            $message      = '#TASK-' . $task->id . ' => ' . $task->task_subject . '. ' . $task->task_details;
            $assignedToId = $task->assign_to;
        } else {
            return false;
        }

        if ($assignedUser = HubstaffMember::where('user_id', $assignedToId)->first()) {
            $taskSummary    = substr($message, 0, 200);
            $hubstaffTaskId = $this->createHubstaffTask(
                $taskSummary, $assignedUser->hubstaff_user_id, $hubstaff_project_id
            );

            if ($hubstaffTaskId) {
                $task->hubstaff_task_id = $hubstaffTaskId;
                $task->save();

                $hubtask                      = new HubstaffTask();
                $hubtask->hubstaff_task_id    = $hubstaffTaskId;
                $hubtask->project_id          = $hubstaff_project_id;
                $hubtask->hubstaff_project_id = $hubstaff_project_id;
                $hubtask->summary             = $message;
                $hubtask->save();

                return true;
            }
        }

        return false;
    }

    public function timeDoctorActions($type, $task, $projectId, $accountId, $assignTo)
    {
        $check_entry                                  = 0;
        $project_data                                 = [];
        $project_data['time_doctor_project']          = $projectId;
        $project_data['time_doctor_task_name']        = $task['task_subject'];
        $project_data['time_doctor_task_description'] = $task['task_details'];

        if ($type == 'DEVTASK') {
            $message      = '#DEVTASK-' . $task->id . ' => ' . $task->subject;
            $assignedToId = $assignTo;
        } elseif ($type == 'TASK') {
            $message      = '#TASK-' . $task->id . ' => ' . $task->task_subject . '. ' . $task->task_details;
            $assignedToId = $assignTo;
        } else {
            return false;
        }

        $assignUsersData = \App\TimeDoctor\TimeDoctorAccount::find($accountId);
        if ($assignUsersData && $assignUsersData->company_id && $assignUsersData->auth_token) {
            $timedoctor  = Timedoctor::getInstance();
            $companyId   = $assignUsersData->company_id;
            $accessToken = $assignUsersData->auth_token;

            $taskSummary            = substr($message, 0, 200);
            $timeDoctorTaskResponse = $timedoctor->createGeneralTask($companyId, $accessToken, $project_data, $task->id, $type);
            $errorMessages          = config('constants.TIME_DOCTOR_API_RESPONSE_MESSAGE');
            switch ($timeDoctorTaskResponse['code']) {
                case '401':
                    return ['code' => 500, 'data' => [], 'message' => $errorMessages['401']];
                    break;
                case '403':
                    return ['code' => 500, 'data' => [], 'message' => $errorMessages['403']];
                    break;
                case '409':
                    return ['code' => 500, 'data' => [], 'message' => $errorMessages['409']];
                    break;
                case '422':
                    return ['code' => 500, 'data' => [], 'message' => $errorMessages['422']];
                    break;
                case '500':
                case '404':
                    return ['code' => 500, 'data' => [], 'message' => $errorMessages['404']];
                    break;
                default:
                    $timeDoctorTaskId = $timeDoctorTaskResponse['data']['id'];
                    if ($timeDoctorTaskId) {
                        $task->time_doctor_task_id = $timeDoctorTaskId;
                        $task->save();

                        $time_doctor_task                         = new TimeDoctorTask();
                        $time_doctor_task->time_doctor_task_id    = $timeDoctorTaskId;
                        $time_doctor_task->project_id             = $projectId;
                        $time_doctor_task->time_doctor_project_id = $projectId;
                        $time_doctor_task->summery                = $message;
                        $time_doctor_task->save();
                    }

                    return ['code' => 200, 'data' => [], 'message' => 'Time doctor task created successfully'];
                    break;
            }
        } else {
            return false;
        }

        return false;
    }

    //START - Purpose : Set Remined , Revise - DEVTASK-4354
    public function sendRemindMessage(Request $request)
    {
        $user = User::find($request->user_id);
        if ($user) {
            $receiver_user_phone = $user->phone;
            if ($receiver_user_phone) {
                $task = Task::find($request->id);
                $msg  = 'PLS ADD ESTIMATED TIME FOR TASK  ' . '#TASK-' . $task->id . '-' . $task->subject;
                $chat = ChatMessage::create(
                    [
                        'number'            => $receiver_user_phone,
                        'user_id'           => $user->id,
                        'customer_id'       => $user->id,
                        'message'           => $msg,
                        'status'            => 0,
                        'developer_task_id' => $request->id,
                    ]
                );

                app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($receiver_user_phone, $user->whatsapp_number, $msg, false, $chat->id);

                MessageHelper::sendEmailOrWebhookNotification([$task->user_id], $msg);
            }
        }

        return response()->json(
            [
                'message' => 'Remind message sent successfully',
            ]
        );
    }

    public function sendReviseMessage(Request $request)
    {
        $user = User::find($request->user_id);
        if ($user) {
            $receiver_user_phone = $user->phone;
            if ($receiver_user_phone) {
                $task = Task::find($request->id);
                $msg  = 'TIME NOT APPROVED REVISE THE ESTIMATED TIME FOR TASK ' . '#TASK-' . $task->id . '-' . $task->subject;
                $chat = ChatMessage::create(
                    [
                        'number'            => $receiver_user_phone,
                        'user_id'           => $user->id,
                        'customer_id'       => $user->id,
                        'message'           => $msg,
                        'status'            => 0,
                        'developer_task_id' => $request->id,
                    ]
                );
                app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($receiver_user_phone, $user->whatsapp_number, $msg, false, $chat->id);

                MessageHelper::sendEmailOrWebhookNotification([$task->assigned_to], $msg);
            }
        }

        return response()->json(
            [
                'message' => 'Revise message sent successfully',
            ]
        );
    }

    //END - DEVTASK-4354

    public function getDiscussionSubjects()
    {
        $discussion_subjects = Task::where('is_statutory', 3)->where('is_verified', null)->pluck('task_subject', 'id')->toArray();

        return response()->json(
            [
                'code'                => 200,
                'discussion_subjects' => $discussion_subjects,
            ]
        );
    }

    /***
     * Delete task note
     */
    public function deleteTaskNote(Request $request)
    {
        $task = Remark::whereId($request->note_id)->delete();
        session()->flash('success', 'Deleted successfully.');

        return response(['success' => 'Deleted'], 200);
    }

    /**
     * Hide task note from list
     */
    public function hideTaskRemark(Request $request)
    {
        $task = Remark::whereId($request->note_id)->update(['is_hide' => 1]);
        session()->flash('success', 'Hide successfully.');

        return response(['success' => 'Hidden'], 200);
    }

    public function assignMasterUser(Request $request)
    {
        $masterUserId = $request->get('master_user_id');
        $issue        = Task::find($request->get('issue_id'));

        $user = User::find($masterUserId);

        if (! $user) {
            return response()->json(
                [
                    'status'  => 'success',
                    'message' => 'user not found',
                ], 500
            );
        }

        if ($request->get('lead') == '1') {
            $old_id = $issue->master_user_id;
            if (! $old_id) {
                $old_id = 0;
            }
            $issue->master_user_id = $masterUserId;
            $task_type             = 'leaddeveloper';
        } else {
            $old_id = $issue->second_master_user_id;
            if (! $old_id) {
                $old_id = 0;
            }
            $issue->second_master_user_id = $masterUserId;
            $task_type                    = 'second_leaddeveloper';
        }

        $issue->save();

        $hubstaff_project_id = config('env.HUBSTAFF_BULK_IMPORT_PROJECT_ID');

        $assignedUser = HubstaffMember::where('user_id', $masterUserId)->first();

        $hubstaffUserId = null;
        if ($assignedUser) {
            $hubstaffUserId = $assignedUser->hubstaff_user_id;
        }
        $message        = '#' . $issue->id . '. ' . $issue->task_subject . '. ' . $issue->task_details;
        $summary        = substr($message, 0, 200);
        $hubstaffTaskId = $this->createHubstaffTask(
            $summary, $hubstaffUserId, $hubstaff_project_id
        );
        if ($hubstaffTaskId) {
            $issue->lead_hubstaff_task_id = $hubstaffTaskId;
            $issue->save();
        }
        if ($hubstaffTaskId) {
            $task                      = new HubstaffTask();
            $task->hubstaff_task_id    = $hubstaffTaskId;
            $task->project_id          = $hubstaff_project_id;
            $task->hubstaff_project_id = $hubstaff_project_id;
            $task->summary             = $message;
            $task->save();
        }
        $taskUser             = new TaskUserHistory;
        $taskUser->model      = \App\Task::class;
        $taskUser->model_id   = $issue->id;
        $taskUser->old_id     = ($old_id == '') ? 0 : $old_id;
        $taskUser->new_id     = $masterUserId;
        $taskUser->user_type  = $task_type;
        $taskUser->updated_by = Auth::user()->name;
        $taskUser->save();

        return response()->json(
            [
                'status' => 'success',
            ]
        );
    }

    public function uploadDocuments(Request $request)
    {
        $path = storage_path('tmp/uploads');

        if (! file_exists($path)) {
            mkdir($path, 0777, true);
        }

        $file = $request->file('file');

        $name = uniqid() . '_' . trim($file->getClientOriginalName());

        $file->move($path, $name);

        return response()->json(
            [
                'name'          => $name,
                'original_name' => $file->getClientOriginalName(),
            ]
        );
    }

    public function saveDocuments(Request $request)
    {
        $loggedUser = $request->user();

        if (! $request->task_id || $request->task_id == '') {
            return response()->json(
                [
                    'code'    => 500,
                    'data'    => [],
                    'message' => 'Select one task',
                ]
            );
        }

        $documents = $request->input('document', []) ? $request->input('document', []) : $request->document;

        $task = Task::find($request->task_id);
        if (! empty($documents)) {
            $count = count([$documents]);

            $message = '[' . $loggedUser->name . '] - #ISSUE-' . $task->id . ' - ' . $task->task_subject . "\n\n " . $count . ' new attchment' . ($count > 1 ? 's' : '');

            foreach ($documents as $file) {
                $path  = storage_path('tmp/uploads/' . $file);
                $media = MediaUploader::fromSource($path)->toDirectory('task-files/' . floor($task->id / config('constants.image_per_folder')))->upload();
                $task->attachMedia($media, config('constants.media_tags'));

                if (! empty($media->filename)) {
                    DB::table('media')->where('filename', $media->filename)->update(['user_id' => Auth::id()]);
                }

                $message .= "\n" . $file;
            }

            $message . "\nhas been added. \n Please check it and add your comment if any.";

            MessageHelper::sendEmailOrWebhookNotification($task->users->pluck('id')->toArray(), $message);

            return response()->json(
                [
                    'code'    => 200,
                    'data'    => [],
                    'message' => 'Done!',
                ]
            );
        } else {
            return response()->json(
                [
                    'code'    => 500,
                    'data'    => [],
                    'message' => 'No documents for upload',
                ]
            );
        }
    }

    public function previewTaskImage($id)
    {
        $task = Task::find($id);

        $records = [];
        if ($task) {
            $userList    = User::pluck('name', 'id')->all();
            $task        = Task::find($id);
            $userName    = '';
            $mediaDetail = [];
            if ($task->hasMedia(config('constants.attach_image_tag'))) {
                foreach ($task->getMedia(config('constants.attach_image_tag')) as $media) {
                    $imageExtensions = [
                        'jpg',
                        'jpeg',
                        'gif',
                        'png',
                        'bmp',
                        'svg',
                        'svgz',
                        'cgm',
                        'djv',
                        'djvu',
                        'ico',
                        'ief',
                        'jpe',
                        'pbm',
                        'pgm',
                        'pnm',
                        'ppm',
                        'ras',
                        'rgb',
                        'tif',
                        'tiff',
                        'wbmp',
                        'xbm',
                        'xpm',
                        'xwd',
                    ];
                    $explodeImage = explode('.', getMediaUrl($media));
                    $extension    = end($explodeImage);

                    if (in_array($extension, $imageExtensions)) {
                        $isImage = true;
                    } else {
                        $isImage = false;
                    }

                    $mediaDetail = DB::table('media')->where('id', $media->id)->first();
                    if ($mediaDetail) {
                        $userName = User::where('id', $mediaDetail->user_id)->pluck('name')->first();
                    } else {
                        $userName = '';
                    }

                    $records[] = [
                        'media_id'   => $id,
                        'id'         => $media->id,
                        'url'        => getMediaUrl($media),
                        'task_id'    => $task->id,
                        'isImage'    => $isImage,
                        'userList'   => $userList,
                        'userName'   => $userName,
                        'created_at' => $media->created_at,
                    ];
                }
            }
        }

        $records = array_reverse($records);
        $title   = 'Preview images';

        return view('task-module.partials.preview-task-images', compact('title', 'records'));
    }

    public function SendTask(Request $request)
    {
        $id = $request->id;

        if ($request->type == 'TASK') {
            $task = Task::find($request->taskdata);
            $user = User::find($task->assign_to);
        } else {
            $task = DeveloperTask::find($request->taskdata);
            $user = User::find($task->user_id);
        }
        $taskdata = $request->taskdata;

        $media = \Plank\Mediable\Media::find($request->id);

        $admin = Auth::user();

        $userid = Auth::id();
        $msg    = getMediaUrl($media);
        if ($user && $user->phone) {
            if ($request->type == 'TASK') {
                $params = ChatMessage::create(
                    [
                        'id'      => $id,
                        'user_id' => $userid,
                        'task_id' => $request->task_id,

                        'sent_to_user_id' => $user->id,

                        'erp_user'   => $task->assign_to,
                        'contact_id' => $task->assign_to,
                        'message'    => getMediaUrl($media),

                    ]
                );
                $params = ChatMessage::create(
                    [
                        'id'      => $id,
                        'user_id' => $user->id,
                        'task_id' => $taskdata,

                        'sent_to_user_id' => $userid,

                        'erp_user'   => $task->assign_to,
                        'contact_id' => $task->assign_to,
                        'message'    => getMediaUrl($media),

                    ]
                );
            } else {
                $params = ChatMessage::create(
                    [
                        'id'                => $id,
                        'user_id'           => $userid,
                        'task_id'           => $request->task_id,
                        'developer_task_id' => $task->id,
                        'sent_to_user_id'   => $user->id,
                        'issue_id'          => $task->id,
                        'erp_user'          => $task->assign_to,
                        'contact_id'        => $task->assign_to,
                        'message'           => getMediaUrl($media),

                    ]
                );
            }

            if ($params) {
                app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($user->phone, $user->whatsapp_number, $msg);

                return response()->json(
                    [
                        'message' => 'Successfully Send File',
                    ], 200
                );
            }

            return response()->json(
                [
                    'message' => 'Something Was Wrong',
                ], 500
            );

            return response()->json(['message' => 'Sorry required fields is missing like id , userid'], 500);
        }
    }

    public function sendDocument(Request $request)
    {
        if ($request->id != null && $request->user_id != null) {
            $media   = \Plank\Mediable\Media::find($request->id);
            $user    = \App\User::find($request->user_id);
            $id      = $request->id;
            $task    = Task::find($request->user_id);
            $task_id = $request->doc_id;
            $userid  = Auth::id();
            $msg     = getMediaUrl($media);
            if ($user && $user->phone) {
                $params = ChatMessage::create(
                    [
                        'id' => $id,
                        // 'user_id' => $user->id,
                        'user_id'         => $userid,
                        'task_id'         => $task_id,
                        'erp_user'        => $user->id,
                        'sent_to_user_id' => $userid,
                        'message'         => getMediaUrl($media),

                    ]
                );

                if ($params) {
                    app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($user->phone, $user->whatsapp_number, $msg);

                    return response()->json(
                        [
                            'message' => 'Successfully Send Document',
                        ], 200
                    );
                }

                return response()->json(
                    [
                        'message' => 'Something Was Wrong',
                    ], 500
                );
            }
        }

        return response()->json(['message' => 'Sorry required fields is missing like User, Phone'], 500);
    }

    public function SendTaskSOP(Request $request)
    {
        $media = \Plank\Mediable\Media::find($request->id);
        $user  = \App\User::find($request->user_id);

        $task     = Task::find($request->task_id);
        $username = User::find($task->assign_to);

        $userid = Auth::id();

        $params = Sop::create(
            [
                'name'    => $username->name,
                'content' => getMediaUrl($media),

            ]
        );

        return response()->json(['message' => 'Data Added Successfully']);
    }

    public function approveTimeHistory(Request $request)
    {
        if (Auth::user()->isAdmin) {
            if (! $request->approve_time || $request->approve_time == '' || ! $request->developer_task_id || $request->developer_task_id == '') {
                return response()->json(
                    [
                        'message' => 'Select one time first',
                    ], 500
                );
            }
            DeveloperTaskHistory::where('developer_task_id', $request->developer_task_id)->where('attribute', 'estimation_minute')->where('model', \App\Task::class)->update(['is_approved' => 0]);
            $history              = DeveloperTaskHistory::find($request->approve_time);
            $history->is_approved = 1;
            $history->save();

            $task         = Task::find($request->developer_task_id);
            $task->status = Task::TASK_STATUS_APPROVED;
            $task->save();

            $time = $history->new_value !== null ? $history->new_value : $history->old_value;
            $msg  = 'TIME APPROVED FOR TASK ' . '#DEVTASK-' . $task->id . '-' . $task->subject . ' - ' . $time . ' MINS';

            $user        = User::find($request->user_id);
            $admin       = Auth::user();
            $master_user = User::find($task->master_user_id);

            if ($user) {
                if ($admin->phone) {
                    $chat = ChatMessage::create(
                        [
                            'number'            => $admin->phone,
                            'user_id'           => $user->id,
                            'customer_id'       => $user->id,
                            'message'           => $msg,
                            'status'            => 0,
                            'developer_task_id' => $request->developer_task_id,
                        ]
                    );
                } elseif ($user->phone) {
                    $chat = ChatMessage::create(
                        [
                            'number'            => $user->phone,
                            'user_id'           => $user->id,
                            'customer_id'       => $user->id,
                            'message'           => $msg,
                            'status'            => 0,
                            'developer_task_id' => $request->developer_task_id,
                        ]
                    );
                } elseif ($master_user && $master_user->phone) {
                    $chat = ChatMessage::create(
                        [
                            'number'            => $master_user->phone,
                            'user_id'           => $user->id,
                            'customer_id'       => $user->id,
                            'message'           => $msg,
                            'status'            => 0,
                            'developer_task_id' => $request->developer_task_id,
                        ]
                    );
                }
                if (isset($chat)) {
                    if ($admin->phone) {
                        app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($admin->phone, $admin->whatsapp_number, $msg, false, $chat->id);
                    }
                    if ($user->phone) {
                        app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($user->phone, $user->whatsapp_number, $msg, false, $chat->id);
                    }
                    if ($master_user && $master_user->phone) {
                        app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($master_user->phone, $master_user->whatsapp_number, $msg, false, $chat->id);
                    }
                }
            }

            return response()->json(
                [
                    'message' => 'Success',
                ], 200
            );
        }

        return response()->json(
            [
                'message' => 'Only admin can approve',
            ], 500
        );
    }

    public function getTrackedHistory(Request $request)
    {
        $id   = $request->id;
        $type = $request->type;
        if ($type == 'lead') {
            $task_histories = DB::select(DB::raw('SELECT hubstaff_activities.task_id,cast(hubstaff_activities.starts_at as date) as starts_at_date,sum(hubstaff_activities.tracked) as total_tracked,tasks.master_user_id,users.name FROM `hubstaff_activities`  join tasks on tasks.lead_hubstaff_task_id = hubstaff_activities.task_id join users on users.id = tasks.master_user_id where tasks.id = ' . $id . ' group by starts_at_date'));
        } else {
            $task_histories = DB::select(DB::raw('SELECT hubstaff_activities.task_id,cast(hubstaff_activities.starts_at as date) as starts_at_date,sum(hubstaff_activities.tracked) as total_tracked,tasks.assign_to,users.name FROM `hubstaff_activities`  join tasks on tasks.hubstaff_task_id = hubstaff_activities.task_id join users on users.id = tasks.assign_to where tasks.id = ' . $id . ' group by starts_at_date'));
        }

        return response()->json(['histories' => $task_histories]);
    }

    public function taskCreateGetRemark(Request $request)
    {
        try {
            $msg = '';
            if ($request->remark != '') {
                TaskRemark::create(
                    [
                        'task_id'    => $request->task_id,
                        'task_type'  => $request->type,
                        'updated_by' => Auth::id(),
                        'remark'     => $request->remark,
                    ]
                );
                $msg = ' Created and ';
            }
            $taskRemarkData = TaskRemark::where(
                [
                    [
                        'task_id',
                        '=',
                        $request->task_id,
                    ],
                    [
                        'task_type',
                        '=',
                        $request->type,
                    ],
                ]
            )->get();
            $html = '';
            foreach ($taskRemarkData as $taskRemark) {
                $html .= '<tr>';
                $html .= '<td>' . $taskRemark->id . '</td>';
                $html .= '<td>' . $taskRemark->users->name . '</td>';
                $html .= '<td>' . $taskRemark->remark . '</td>';
                $html .= '<td>' . $taskRemark->created_at . '</td>';
                $html .= "<td><i class='fa fa-copy copy_remark' data-remark_text='" . $taskRemark->remark . "'></i></td>";
            }

            return response()->json(
                [
                    'code'    => 200,
                    'data'    => $html,
                    'message' => 'Remark ' . $msg . ' listed Successfully',
                ]
            );
        } catch (Exception $e) {
            return response()->json(
                [
                    'code'    => 500,
                    'data'    => '',
                    'message' => $e->getMessage(),
                ]
            );
        }
    }

    public function devgetTaskRemark(Request $request)
    {
        if ($request->status != 'view') {
            if ($request->remark != '') {
                $remark = TaskRemark::create(
                    [
                        'task_id'    => $request->task_id,
                        'task_type'  => $request->type,
                        'updated_by' => Auth::id(),
                        'remark'     => $request->remark,
                    ]
                );
            }
        } else {
            $remark = TaskRemark::where([['task_id', '=', $request->task_id], ['task_type', '=', $request->type]])->get();
        }

        return response()->json(['remark' => $remark], 200);
    }

    public function createHubstaffManualTask(Request $request)
    {
        $task = Task::find($request->id);

        if ($task) {
            if ($request->task_for_modal == 'hubstaff') {
                if ($request->type == 'developer') {
                    $user_id = $task->assign_to;
                } else {
                    $user_id = $task->master_user_id;
                }
                $hubstaff_project_id = config('env.HUBSTAFF_BULK_IMPORT_PROJECT_ID');

                $assignedUser = HubstaffMember::where('user_id', $user_id)->first();

                $hubstaffUserId = null;
                if ($assignedUser) {
                    $hubstaffUserId = $assignedUser->hubstaff_user_id;
                }
                $taskSummery = '#' . $task->id . '. ' . $task->task_subject;
                if ($hubstaffUserId) {
                    $hubstaffTaskId = $this->createHubstaffTask(
                        $taskSummery, $hubstaffUserId, $hubstaff_project_id
                    );
                } else {
                    $log                = new TaskHubstaffCreateLog();
                    $log->task_id       = $request->id;
                    $log->error_message = 'Hubstaff member not found';
                    $log->user_id       = Auth::id();
                    $log->save();

                    return response()->json(
                        [
                            'message' => 'Hubstaff member not found',
                        ], 500
                    );
                }
                if ($hubstaffTaskId) {
                    if ($request->type == 'developer') {
                        $task->hubstaff_task_id = $hubstaffTaskId;
                    } else {
                        $task->lead_hubstaff_task_id = $hubstaffTaskId;
                    }
                    $task->save();
                } else {
                    $log                = new TaskHubstaffCreateLog();
                    $log->task_id       = $request->id;
                    $log->error_message = 'Hubstaff task not create';
                    $log->user_id       = Auth::id();
                    $log->save();

                    return response()->json(
                        [
                            'message' => 'Hubstaff task not created',
                        ], 500
                    );
                }
                if ($hubstaffTaskId) {
                    $task                      = new HubstaffTask();
                    $task->hubstaff_task_id    = $hubstaffTaskId;
                    $task->project_id          = $hubstaff_project_id;
                    $task->hubstaff_project_id = $hubstaff_project_id;
                    $task->summary             = $taskSummery;
                    $task->save();
                }
            } else {
                try {
                    $timeDoctorTaskResponse = $this->timeDoctorActions('TASK', $task, $request->time_doctor_project, $request->time_doctor_account, $request->assigned_to);

                    $log                = new TaskHubstaffCreateLog();
                    $log->task_id       = $request->id;
                    $log->error_message = $timeDoctorTaskResponse['message'] ?? '';
                    $log->user_id       = Auth::id();
                    $log->save();

                    return response()->json([
                        'message' => $timeDoctorTaskResponse['message'],
                    ], $timeDoctorTaskResponse['code']);
                } catch (Exception $e) {
                    return response()->json([
                        'message' => $e->getMessage(),
                    ], \Illuminate\Http\Response::HTTP_INTERNAL_SERVER_ERROR);
                }
            }

            return response()->json(
                [
                    'message' => 'Successful',
                ], 200
            );
        } else {
            $log                = new TaskHubstaffCreateLog();
            $log->task_id       = $request->id;
            $log->error_message = 'Task not found';
            $log->user_id       = Auth::id();
            $log->save();

            return response()->json(
                [
                    'message' => 'Task not found',
                ], 500
            );
        }
    }

    public function getTaskCategories()
    {
        $categories = TaskCategory::where('is_approved', 1)->get();

        return view('task-module.partials.all-task-category', compact('categories'));
    }

    public function completeBulkTasks(Request $request)
    {
        if (count($request->selected_tasks) > 0) {
            foreach ($request->selected_tasks as $t) {
                $task               = Task::find($t);
                $task->is_completed = date('Y-m-d H:i:s');
                $task->is_verified  = date('Y-m-d H:i:s');
                if ($task->assignedTo) {
                    if ($task->assignedTo->fixed_price_user_or_job == 1) {
                        // Fixed price task.
                        continue;
                    }
                }
                $task->save();
            }
        }

        return response()->json(['message' => 'Successful']);
    }

    public function deleteBulkTasks(Request $request)
    {
        if (count($request->selected_tasks) > 0) {
            foreach ($request->selected_tasks as $t) {
                $task = Task::where('id', $t)->delete();
            }
        }

        return response()->json(['message' => 'Successful']);
    }

    public function getTimeHistory(Request $request)
    {
        $id          = $request->id;
        $task_module = DeveloperTaskHistory::join('users', 'users.id', 'developer_tasks_history.user_id')->where('developer_task_id', $id)->where('model', \App\Task::class)->where('attribute', 'estimation_minute')->select('developer_tasks_history.*', 'users.name')->orderBy('developer_tasks_history.id', 'DESC')->get();
        if ($task_module) {
            return $task_module;
        }

        return 'error';
    }

    /* update task status
    */

    public function updateStatus(Request $request)
    {
        try {
            $task       = Task::find($request->task_id);
            $old_status = $task->status;

            $task->status = $request->status;

            if (request('status') == Task::TASK_STATUS_IN_PROGRESS) {
                if ($task->actual_start_date == null || $task->actual_start_date == '0000-00-00 00:00:00') {
                    $task->actual_start_date = date('Y-m-d H:i:s');
                }
            }
            if (request('status') == Task::TASK_STATUS_DONE) {
                $task->actual_end_date = date('Y-m-d H:i:s');
            }

            $task->save();
            DeveloperTaskHistory::create(
                [
                    'developer_task_id' => $request->task_id,
                    'model'             => \App\Task::class,
                    'attribute'         => 'task_status',
                    'old_value'         => $old_status,
                    'new_value'         => $task->status,
                    'user_id'           => Auth::id(),
                ]
            );

            if ($task->status == 1) {
                $task_user = User::find($task->assign_to);
                if (! $task_user) {
                    return response()->json(
                        [
                            'message' => 'Please assign the task.',
                        ], 500
                    );
                }
                $team_user = \DB::table('team_user')->where('user_id', $task->assign_to)->first();
                if ($team_user) {
                    $team_lead = \DB::table('teams')->where('id', $team_user->team_id)->first();
                    if ($team_lead) {
                        $task_user_for_payment = User::find($team_lead->user_id);
                    }
                }
                if (empty($task_user_for_payment)) {
                    $task_user_for_payment = $task_user;
                }
                if ($task_user_for_payment->fixed_price_user_or_job == 0) {
                    return response()->json(
                        [
                            'message' => 'Please provide salary payment method for user.',
                        ], 500
                    );
                }
                if (! empty($task_user_for_payment)) {
                    if ($task_user_for_payment->fixed_price_user_or_job == 1) {
                        if ($task->cost == null) {
                            return response()->json(
                                [
                                    'message' => 'Please provide cost for fixed price task.',
                                ], 500
                            );
                        }
                        $rate_estimated = $task->cost ?? 0;
                    } elseif ($task_user_for_payment->fixed_price_user_or_job == 2) {
                        $userRate = UserRate::getRateForUser($task_user_for_payment->id);
                        if ($userRate && $userRate->hourly_rate !== null) {
                            $rate_estimated = $task->approximate * ($userRate->hourly_rate ?? 0) / 60;
                        } else {
                            return response()->json(
                                [
                                    'message' => 'Please provide hourly rate of user.',
                                ], 500
                            );
                        }
                    }
                    $receipt_id = PaymentReceipt::create(
                        [
                            'status'         => 'Pending',
                            'rate_estimated' => $rate_estimated,
                            'date'           => date('Y-m-d'),
                            'currency'       => '',
                            'user_id'        => $task_user_for_payment->id,
                            'by_command'     => 4,
                            'task_id'        => $task->id,
                        ]
                    );

                    if ($task->status == 1) {
                        if ($task->task_bug_ids != '') {
                            $task_details_info = explode(',', $task->task_bug_ids);
                            if (count($task_details_info) > 0) {
                                $admin_user_id       = 0;
                                $customer_role_users = RoleUser::where(['role_id' => 1])->with('user')->get()->toArray();
                                if (count($customer_role_users) > 0) {
                                    for ($m = 0; $m < count($customer_role_users); $m++) {
                                        if (isset($customer_role_users[$m]['user']['id']) && $customer_role_users[$m]['user']['id'] > 0) {
                                            $admin_user_id = $customer_role_users[$m]['user']['id'];
                                            $m             = count($customer_role_users);
                                        }
                                    }
                                }

                                for ($k = 0; $k < count($task_details_info); $k++) {
                                    $bug_tacker_id = $task_details_info[$k];
                                    $bug_tracking  = BugTracker::find($bug_tacker_id);
                                    if ($task->status == 3) { // In progress
                                        $bug_tracking->bug_status_id = 5;
                                    } elseif ($task->status == 1) { // complete
                                        $bug_tracking->bug_status_id = 6;
                                        if ($admin_user_id > 0) {
                                            $bug_tracking->assign_to = $admin_user_id;
                                        }
                                    } elseif ($task->status == 2) { // Discussing
                                        $bug_tracking->bug_status_id = 7;
                                        if ($admin_user_id > 0) {
                                            $bug_tracking->assign_to = $admin_user_id;
                                        }
                                    }

                                    $bug_tracking->updated_at = date('Y-m-d H:i:s');
                                    $bug_tracking->updated_by = Auth::user()->name;
                                    $bug_tracking->save();
                                }
                            }
                        }
                    }
                }
            }

            if ($task->status == 3 || $task->status == 2 || $task->status == 6 || $task->status == 15 || $task->status == 16) {
                if ($task->task_bug_ids != '') {
                    $task_details_info = explode(',', $task->task_bug_ids);
                    if (count($task_details_info) > 0) {
                        $admin_user_id       = 0;
                        $customer_role_users = RoleUser::where(['role_id' => 1])->with('user')->get()->toArray();
                        if (count($customer_role_users) > 0) {
                            for ($m = 0; $m < count($customer_role_users); $m++) {
                                if (isset($customer_role_users[$m]['user']['id']) && $customer_role_users[$m]['user']['id'] > 0) {
                                    $admin_user_id = $customer_role_users[$m]['user']['id'];
                                    $m             = count($customer_role_users);
                                }
                            }
                        }

                        for ($k = 0; $k < count($task_details_info); $k++) {
                            $bug_tacker_id = $task_details_info[$k];
                            $bug_tracking  = BugTracker::find($bug_tacker_id);
                            if ($task->status == 3) { // In progress
                                $bug_tracking->bug_status_id = 6;
                            } elseif ($task->status == 15 || $task->status == 16) { // complete
                                $bug_tracking->bug_status_id = 7;
                                $bug_tracking->assign_to     = $bug_tracking->created_by;
                            } elseif ($task->status == 2) { // Discussing
                                $bug_tracking->bug_status_id = 8;
                                if ($admin_user_id > 0) {
                                    $bug_tracking->assign_to = $admin_user_id;
                                }
                            } elseif ($task->status == 6) { // Discuss with Lead
                                $bug_tracking->bug_status_id = 10;
                                if ($admin_user_id > 0) {
                                    $bug_tracking->assign_to = $admin_user_id;
                                }
                            }

                            $bug_tracking->updated_at = date('Y-m-d H:i:s');
                            $bug_tracking->updated_by = Auth::user()->name;
                            $bug_tracking->save();
                        }
                    }
                }
            }

            return response()->json(
                [
                    'status'  => 'success',
                    'message' => 'The task status updated.',
                ], 200
            );
        } catch (Exception $e) {
            return response()->json(
                [
                    'status'  => 'error',
                    'message' => 'The task status not updated.',
                ], 500
            );
        }
    }

    /* create new task status */

    public function createStatus(Request $request)
    {
        $this->validate($request, ['task_status' => 'required']);

        try {
            TaskStatus::create(['name' => $request->task_status]);

            return redirect()->back()->with('success', 'The task status created successfully.');
        } catch (Exception $e) {
            return redirect()->back()->with('error', $e->getMessage());
        }
    }

    public function updateTaskReminder(Request $request)
    {
        $task                      = Task::find($request->get('task_id'));
        $task->frequency           = $request->get('frequency');
        $task->reminder_message    = $request->get('message');
        $task->reminder_from       = $request->get('reminder_from', '0000-00-00 00:00');
        $task->reminder_last_reply = $request->get('reminder_last_reply', 0);
        $task->last_send_reminder  = date('Y-m-d H:i:s');
        $task->save();

        $message = $request->get('message');
        if (optional($task->assignedTo)->phone) {
            $requestData = new Request();
            $requestData->setMethod('POST');
            $requestData->request->add(
                [
                    'task_id' => $task->id,
                    'message' => $message,
                    'status'  => 1,
                ]
            );
            app(\App\Http\Controllers\WhatsAppController::class)->sendMessage($requestData, 'task');
        }

        return response()->json(
            [
                'success',
            ]
        );
    }

    public function sendBrodCast(Request $request)
    {
        $taskIds = $request->selected_tasks;

        if (! empty($taskIds)) {
            foreach ($taskIds as $tid) {
                // started to send message
                $requestData = new Request();
                $requestData->setMethod('POST');
                $requestData->request->add(
                    [
                        'task_id' => $tid,
                        'message' => $request->message,
                        'status'  => 1,
                    ]
                );
                app(\App\Http\Controllers\WhatsAppController::class)->sendMessage($requestData, 'task');
            }

            return response()->json(
                [
                    'code'    => 200,
                    'message' => 'Message has been sent to all selected task',
                ]
            );
        }

        return response()->json(
            [
                'code'    => 500,
                'message' => 'Please select atleast one task',
            ]
        );
    }

    public function CommunicationTaskStatus(Request $request)
    {
        $task = Task::find($request->get('task_id'));

        if ($task->communication_status == 0) {
            $status = 1;
        }
        if ($task->communication_status == 1) {
            $status = 0;
        }

        $updatetask                       = Task::find($request->get('task_id'));
        $updatetask->communication_status = $status;
        $updatetask->update();

        return response()->json(
            [
                'status'               => 'success',
                'communication_status' => $status,
            ]
        );
    }

    public function recurringHistory(request $request)
    {
        $task_id  = $request->input('task_id');
        $html     = '';
        $chatData = LogChatMessage::where('task_id', $task_id)->where('task_time_reminder', 0)->orderBy('id', 'DESC')->get();
        $i        = 1;
        if (count($chatData) > 0) {
            foreach ($chatData as $history) {
                $html .= '<tr>';
                $html .= '<td>' . $i . '</td>';
                $html .= '<td>' . $history->log_case_id . '</td>';
                $html .= '<td>' . $history->message . '</td>';
                $html .= '<td>' . $history->log_msg . '</td>';
                $html .= '<td>' . $history->created_at . '</td>';
                $html .= '</tr>';

                $i++;
            }

            return response()->json(
                [
                    'html'    => $html,
                    'success' => true,
                ], 200
            );
        } else {
            $html .= '<tr>';
            $html .= '<td></td>';
            $html .= '<td></td>';
            $html .= '<td></td>';
            $html .= '<td></td>';
            $html .= '<td></td>';
            $html .= '</tr>';
        }

        return response()->json(
            [
                'html'    => $html,
                'success' => true,
            ], 200
        );
    }

    public function AssignTaskToUser(Request $request)
    {
        $task   = Task::find($request->get('issue_id'));
        $old_id = $task->assign_to;
        if (! $old_id) {
            $old_id = 0;
        } else {
            DB::delete(
                'delete from task_users where task_id = ? AND user_id = ? AND type = ?', [
                    $task->id,
                    $old_id,
                    User::class,
                ]
            );
        }
        $task->assign_to = $request->get('user_id');

        $slotAvailable = $this->userSchedulesLoadData($request->get('user_id'));

        if (! empty($slotAvailable)) {
            $task->start_date = $slotAvailable['st'];
            $task->due_date   = $slotAvailable['en'];
        }

        $task->save();

        $hubstaff_project_id = config('env.HUBSTAFF_BULK_IMPORT_PROJECT_ID');

        $assignedUser = HubstaffMember::where('user_id', $request->input('user_id'))->first();

        $hubstaffUserId = null;
        if ($assignedUser) {
            $hubstaffUserId = $assignedUser->hubstaff_user_id;
        }
        if ($task->is_statutory != 1) {
            $message = '#' . $task->id . '. ' . $task->task_subject . '. ' . $task->task_details;
        } else {
            $message = $task->task_subject . '. ' . $task->task_details;
        }

        $taskSummery = substr($message, 0, 200);

        $hubstaffTaskId = $this->createHubstaffTask(
            $taskSummery, $hubstaffUserId, $hubstaff_project_id
        );

        if ($hubstaffTaskId) {
            $task->hubstaff_task_id = $hubstaffTaskId;
            $task->save();
        }
        if ($hubstaffUserId) {
            $task                      = new HubstaffTask();
            $task->hubstaff_task_id    = $hubstaffTaskId;
            $task->project_id          = $hubstaff_project_id;
            $task->hubstaff_project_id = $hubstaff_project_id;
            $task->summary             = $message;
            $task->save();
        }

        $taskUser             = new TaskUserHistory;
        $taskUser->model      = \App\Task::class;
        $taskUser->model_id   = $task->id;
        $taskUser->old_id     = $old_id;
        $taskUser->new_id     = $request->get('user_id');
        $taskUser->user_type  = 'developer';
        $taskUser->updated_by = Auth::user()->name;
        $taskUser->save();

        $values = [
            'task_id' => $request->get('issue_id'),
            'user_id' => $request->get('user_id'),
            'type'    => \App\User::class,
        ];
        DB::table('task_users')->insert($values);

        return response()->json(['status' => 'success']);
    }

    public function dropdownSlotWise()
    {
        try {
            $options = $this->userSchedulesLoadDataDropDown(request('userId'));

            $return = [];
            if (count($options)) {
                foreach ($options as $k => $v) {
                    $return[] = '<option value="' . $v . '">' . $v . '</option>';
                }
            }

            return response()->json(
                [
                    'list' => $return ? implode('', $return) : null,
                ]
            );
        } catch (\Throwable $th) {
            return respException($th);
        }
    }

    public function userSchedulesLoadDataDropDown($user_id)
    {
        $usertemp = 0;
        $count    = 0;
        $data     = [];

        $isPrint = ! request()->ajax();

        $stDate = $start_date = date('Y-m-d');
        $enDate = $start_date = date('Y-m-d', strtotime(' + 5 days'));

        if ($stDate && $enDate) {
            $filterDates    = dateRangeArr($stDate, $enDate);
            $filterDatesNew = [];
            foreach ($filterDates as $row) {
                $filterDatesNew[$row['date']] = $row;
            }

            $q = User::query();
            $q->leftJoin('user_avaibilities as ua', 'ua.user_id', '=', 'users.id');
            $q->where('users.is_task_planned', 1);
            $q->where('ua.is_latest', 1);
            if (! isAdmin()) {
                $q->where('users.id', loginId());
            }
            if ($srch = request('srchUser')) {
                $q->where('users.id', $srch);
            }
            if (request('is_active')) {
                $q->where('users.is_active', request('is_active') == 1 ? 1 : 0);
            }
            $q->select([
                'users.id',
                'users.name',
                \DB::raw('ua.id AS uaId'),
                \DB::raw('ua.date AS uaDays'),
                \DB::raw('ua.from AS uaFrom'),
                \DB::raw('ua.to AS uaTo'),
                \DB::raw('ua.start_time AS uaStTime'),
                \DB::raw('ua.end_time AS uaEnTime'),
                \DB::raw('ua.lunch_time AS uaLunchTime'),
                \DB::raw('ua.lunch_time_from AS lunch_time_from'),
                \DB::raw('ua.lunch_time_to AS lunch_time_to'),
            ]);
            $users = $q->get();
            $count = $users->count();

            if ($count) {
                $filterDatesOnly = array_column($filterDates, 'date');

                $userIds = [];

                // Prepare user's data
                $userArr = [];
                foreach ($users as $single) {
                    $userIds[] = $single->id;
                    if ($single->uaId) {
                        $single->uaStTime    = date('H:i:00', strtotime($single->uaStTime));
                        $single->uaEnTime    = date('H:i:00', strtotime($single->uaEnTime));
                        $single->uaLunchTime = $single->uaLunchTime ? date('H:i:00', strtotime($single->uaLunchTime)) : '';

                        $single->uaDays = $single->uaDays ? explode(',', str_replace(' ', '', $single->uaDays)) : [];
                        $availableDates = UserAvaibility::getAvailableDates($single->uaFrom, $single->uaTo, $single->uaDays, $filterDatesOnly);
                        $availableSlots = UserAvaibility::dateWiseHourlySlotsV2($availableDates, $single->uaStTime, $single->uaEnTime, $single->uaLunchTime, $single);

                        $userArr[] = [
                            'id'             => $single->id,
                            'name'           => $single->name,
                            'uaLunchTime'    => $single->uaLunchTime ? substr($single->uaLunchTime, 0, 5) : '',
                            'uaId'           => $single->uaId,
                            'uaDays'         => $single->uaDays,
                            'availableDays'  => $single->uaDays,
                            'availableDates' => $availableDates,
                            'availableSlots' => $availableSlots,
                        ];
                    } else {
                        $userArr[] = [
                            'id'             => $single->id,
                            'name'           => $single->name,
                            'uaLunchTime'    => null,
                            'uaId'           => null,
                            'uaDays'         => [],
                            'availableDays'  => [],
                            'availableDates' => [],
                            'availableSlots' => [],
                        ];
                    }
                }

                // Get Tasks & Developer Tasks -- Arrange with End time & Mins
                $tasksArr = [];
                if ($userIds) {
                    $tasksInProgress = $this->typeWiseTasks('IN_PROGRESS', [
                        'userIds' => $userIds,
                    ]);
                    $tasksPlanned = $this->typeWiseTasks('PLANNED', [
                        'userIds' => $userIds,
                    ]);

                    if ($tasksInProgress) {
                        foreach ($tasksInProgress as $task) {
                            $task->st_date = date('Y-m-d H:i:00', strtotime($task->st_date));

                            if (! isset($task->en_date)) {
                                $task->en_date = date('Y-m-d H:i:00', strtotime($task->st_date . ' + ' . $task->est_minutes . 'minutes'));
                            }
                            $tasksArr[$task->assigned_to][$task->status2][] = [
                                'id'              => $task->id,
                                'typeId'          => $task->type . '-' . $task->id,
                                'stDate'          => $task->st_date,
                                'enDate'          => $task->en_date,
                                'status'          => $task->status,
                                'status2'         => $task->status2,
                                'mins'            => $task->est_minutes,
                                'manually_assign' => $task->manually_assign,
                            ];
                        }
                    }
                    if ($tasksPlanned) {
                        foreach ($tasksPlanned as $task) {
                            $task->est_minutes                              = 20;
                            $task->st_date                                  = $task->st_date ?: date('Y-m-d H:i:00');
                            $task->en_date                                  = date('Y-m-d H:i:00', strtotime($task->st_date . ' + ' . $task->est_minutes . 'minutes'));
                            $tasksArr[$task->assigned_to][$task->status2][] = [
                                'id'              => $task->id,
                                'typeId'          => $task->type . '-' . $task->id,
                                'stDate'          => $task->st_date,
                                'enDate'          => $task->en_date,
                                'status'          => $task->status,
                                'status2'         => $task->status2,
                                'mins'            => $task->est_minutes,
                                'manually_assign' => $task->manually_assign,
                            ];
                        }
                    }
                }
                if ($isPrint) {
                    _p($tasksArr);
                }
                // Arrange tasks on users slots
                foreach ($userArr as $k1 => $user) {
                    $userTasksArr = isset($tasksArr[$user['id']]) && count($tasksArr[$user['id']]) ? $tasksArr[$user['id']] : [];
                    if ($user['uaId'] && isset($user['availableSlots']) && count($user['availableSlots'])) {
                        foreach ($user['availableSlots'] as $date => $slots) {
                            foreach ($slots as $k2 => $slot) {
                                if ($slot['type'] == 'AVL' || $slot['slot_type'] == 'AVL') {
                                    $res               = $this->slotIncreaseAndShift($slot, $userTasksArr);
                                    $userTasks         = $res['userTasks'] ?? [];
                                    $slot['taskIds']   = $res['taskIds'] ?? [];
                                    $slot['userTasks'] = $res['userTasks'] ?? [];
                                }
                                $slots[$k2] = $slot;
                            }

                            $user['availableSlots'][$date] = $slots;
                        }
                    }
                    $userArr[$k1] = $user;
                }

                if ($isPrint) {
                    _p($userArr);
                }

                // Arange for datatable
                foreach ($userArr as $user) {
                    if ($user['uaId'] && isset($user['availableSlots']) && count($user['availableSlots'])) {
                        foreach ($user['availableSlots'] as $date => $slots) {
                            $divSlots = [];
                            foreach ($slots as $slot) {
                                $title   = '';
                                $class   = '';
                                $display = [
                                    date('H:i', strtotime($slot['st'])),
                                    ' - ',
                                    date('H:i', strtotime($slot['en'])),
                                ];

                                if (in_array($slot['type'], ['AVL']) && $slot['slot_type'] != 'PAST') {
                                    $ut_array         = [];
                                    $ut_arrayManually = [];

                                    if (! empty($slot['userTasks'])) {
                                        foreach ($slot['userTasks'] as $ut) {
                                            if ($ut['manually_assign'] == 1) {
                                                array_push($ut_arrayManually, $ut['typeId']);
                                            } else {
                                                array_push($ut_array, $ut['typeId']);
                                            }
                                        }
                                    }

                                    $developerTaskID = $ut_array;
                                    if (! empty($developerTaskID)) {
                                        $display[] = ' (' . implode(', ', $developerTaskID) . ')';

                                        $title = [];
                                        foreach ($slot['taskIds'] as $taskId => $taskRow) {
                                            $title[] = $taskId . ' - (' . $taskRow['status2'] . ')';
                                        }
                                        $title = implode(PHP_EOL, $title);
                                    }

                                    $class = 'text-secondary';

                                    // $title
                                    $display = implode('', $display);

                                    $divSlots[] = $display;
                                }
                            }

                            for ($p = 0; $p < 13; $p++) {
                                $varid = 'slots' . $p;
                                if (isset($divSlots[$p])) {
                                    $str = str_replace('(AVL)', '<br>(AVL)', $divSlots[$p]);
                                    $str = str_replace('(LUNCH)', '<br>(LUNCH)', $divSlots[$p]);
                                    $str = str_replace('(PAST)', '<br>(PAST)', $divSlots[$p]);

                                    $data[] = $date . ' (' . $str . ')';
                                }
                            }

                            $usertemp = $usertemp + 1;
                        }
                    }
                }
            }

            return $data;
        }
    }

    public function userSchedulesLoadData($user_id)
    {
        $usertemp = 0;
        $count    = 0;
        $data     = [];

        $isPrint = ! request()->ajax();

        $stDate = $start_date = date('Y-m-d');
        $enDate = $start_date = date('Y-m-d', strtotime(' + 30 days'));
        if ($stDate && $enDate) {
            $filterDates    = dateRangeArr($stDate, $enDate);
            $filterDatesNew = [];
            foreach ($filterDates as $row) {
                $filterDatesNew[$row['date']] = $row;
            }

            $q = User::query();
            $q->leftJoin('user_avaibilities as ua', 'ua.user_id', '=', 'users.id');
            $q->where('users.is_task_planned', 1);
            $q->where('ua.is_latest', 1);
            if (! isAdmin()) {
                $q->where('users.id', loginId());
            }

            $q->where('users.id', $user_id);

            if (request('is_active')) {
                $q->where('users.is_active', request('is_active') == 1 ? 1 : 0);
            }
            $q->select([
                'users.id',
                'users.name',
                \DB::raw('ua.id AS uaId'),
                \DB::raw('ua.date AS uaDays'),
                \DB::raw('ua.from AS uaFrom'),
                \DB::raw('ua.to AS uaTo'),
                \DB::raw('ua.start_time AS uaStTime'),
                \DB::raw('ua.end_time AS uaEnTime'),
                \DB::raw('ua.lunch_time AS uaLunchTime'),
                \DB::raw('ua.lunch_time_from AS lunch_time_from'),
                \DB::raw('ua.lunch_time_to AS lunch_time_to'),
            ]);
            $users = $q->get();
            $count = $users->count();

            if ($count) {
                $filterDatesOnly = array_column($filterDates, 'date');

                $userIds = [];

                // Prepare user's data
                $userArr = [];
                foreach ($users as $single) {
                    $userIds[] = $single->id;
                    if ($single->uaId) {
                        $single->uaStTime    = date('H:i:00', strtotime($single->uaStTime));
                        $single->uaEnTime    = date('H:i:00', strtotime($single->uaEnTime));
                        $single->uaLunchTime = $single->uaLunchTime ? date('H:i:00', strtotime($single->uaLunchTime)) : '';

                        $single->uaDays = $single->uaDays ? explode(',', str_replace(' ', '', $single->uaDays)) : [];
                        $availableDates = UserAvaibility::getAvailableDates($single->uaFrom, $single->uaTo, $single->uaDays, $filterDatesOnly);
                        $availableSlots = UserAvaibility::dateWiseHourlySlotsV2($availableDates, $single->uaStTime, $single->uaEnTime, $single->uaLunchTime, $single);

                        $userArr[] = [
                            'id'             => $single->id,
                            'name'           => $single->name,
                            'uaLunchTime'    => $single->uaLunchTime ? substr($single->uaLunchTime, 0, 5) : '',
                            'uaId'           => $single->uaId,
                            'uaDays'         => $single->uaDays,
                            'availableDays'  => $single->uaDays,
                            'availableDates' => $availableDates,
                            'availableSlots' => $availableSlots,
                        ];
                    } else {
                        $userArr[] = [
                            'id'             => $single->id,
                            'name'           => $single->name,
                            'uaLunchTime'    => null,
                            'uaId'           => null,
                            'uaDays'         => [],
                            'availableDays'  => [],
                            'availableDates' => [],
                            'availableSlots' => [],
                        ];
                    }
                }

                // Get Tasks & Developer Tasks -- Arrange with End time & Mins
                $tasksArr = [];
                if ($userIds) {
                    $tasksInProgress = $this->typeWiseTasks('IN_PROGRESS', [
                        'userIds' => $userIds,
                    ]);
                    $tasksPlanned = $this->typeWiseTasks('PLANNED', [
                        'userIds' => $userIds,
                    ]);

                    if ($tasksInProgress) {
                        foreach ($tasksInProgress as $task) {
                            $task->st_date = date('Y-m-d H:i:00', strtotime($task->st_date));

                            if (! isset($task->en_date)) {
                                $task->en_date = date('Y-m-d H:i:00', strtotime($task->st_date . ' + ' . $task->est_minutes . 'minutes'));
                            }
                            $tasksArr[$task->assigned_to][$task->status2][] = [
                                'id'              => $task->id,
                                'typeId'          => $task->type . '-' . $task->id,
                                'stDate'          => $task->st_date,
                                'enDate'          => $task->en_date,
                                'status'          => $task->status,
                                'status2'         => $task->status2,
                                'mins'            => $task->est_minutes,
                                'manually_assign' => $task->manually_assign,
                            ];
                        }
                    }
                    if ($tasksPlanned) {
                        foreach ($tasksPlanned as $task) {
                            $task->est_minutes                              = 20;
                            $task->st_date                                  = $task->st_date ?: date('Y-m-d H:i:00');
                            $task->en_date                                  = date('Y-m-d H:i:00', strtotime($task->st_date . ' + ' . $task->est_minutes . 'minutes'));
                            $tasksArr[$task->assigned_to][$task->status2][] = [
                                'id'              => $task->id,
                                'typeId'          => $task->type . '-' . $task->id,
                                'stDate'          => $task->st_date,
                                'enDate'          => $task->en_date,
                                'status'          => $task->status,
                                'status2'         => $task->status2,
                                'mins'            => $task->est_minutes,
                                'manually_assign' => $task->manually_assign,
                            ];
                        }
                    }
                }
                if ($isPrint) {
                    _p($tasksArr);
                }
                // Arrange tasks on users slots
                foreach ($userArr as $k1 => $user) {
                    $userTasksArr = isset($tasksArr[$user['id']]) && count($tasksArr[$user['id']]) ? $tasksArr[$user['id']] : [];
                    if ($user['uaId'] && isset($user['availableSlots']) && count($user['availableSlots'])) {
                        foreach ($user['availableSlots'] as $date => $slots) {
                            foreach ($slots as $k2 => $slot) {
                                if ($slot['type'] == 'AVL' || $slot['slot_type'] == 'AVL') {
                                    $res = $this->slotIncreaseAndShift($slot, $userTasksArr);

                                    $userTasks         = $res['userTasks'] ?? [];
                                    $slot['taskIds']   = $res['taskIds'] ?? [];
                                    $slot['userTasks'] = $res['userTasks'] ?? [];
                                }
                                $slots[$k2] = $slot;
                            }

                            $user['availableSlots'][$date] = $slots;
                        }
                    }
                    $userArr[$k1] = $user;
                }

                if ($isPrint) {
                    _p($userArr);
                }

                // Arange for datatable
                foreach ($userArr as $user) {
                    if ($user['uaId'] && isset($user['availableSlots']) && count($user['availableSlots'])) {
                        foreach ($user['availableSlots'] as $date => $slots) {
                            $divSlots = [];
                            foreach ($slots as $slot) {
                                $title   = '';
                                $class   = '';
                                $display = [
                                    date('H:i', strtotime($slot['st'])),
                                    ' - ',
                                    date('H:i', strtotime($slot['en'])),
                                ];

                                $displayManually = [
                                    date('H:i', strtotime($slot['st'])),
                                    ' - ',
                                    date('H:i', strtotime($slot['en'])),
                                ];

                                $displayManually = [];

                                if (in_array($slot['type'], ['AVL', 'SMALL-LUNCH', 'LUNCH-START', 'LUNCH-END']) && $slot['slot_type'] != 'PAST') {
                                    $ut_array         = [];
                                    $ut_arrayManually = [];

                                    if (! empty($slot['userTasks'])) {
                                        foreach ($slot['userTasks'] as $ut) {
                                            if ($ut['manually_assign'] == 1) {
                                                array_push($ut_arrayManually, $ut['typeId']);
                                            } else {
                                                array_push($ut_array, $ut['typeId']);
                                            }
                                        }
                                    } else {
                                        if ($slot['type'] == 'AVL') {
                                            return $slot;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    public function typeWiseTasks($type, $wh = [])
    {
        $userIds         = $wh['userIds'] ?? [0];
        $taskStatuses    = [0];
        $devTaskStatuses = ['none'];

        if ($type == 'IN_PROGRESS') {
            $taskStatuses = [
                Task::TASK_STATUS_IN_PROGRESS,
            ];
            $devTaskStatuses = [
                DeveloperTask::DEV_TASK_STATUS_IN_PROGRESS,
            ];
        } elseif ($type == 'PLANNED') {
            $taskStatuses = [
                Task::TASK_STATUS_PLANNED,
            ];
            $devTaskStatuses = [
                DeveloperTask::DEV_TASK_STATUS_PLANNED,
            ];
        }

        // start_date IS NOT NULL AND approximate > 0
        // start_date IS NOT NULL AND estimate_minutes > 0

        $sql = "SELECT
            listdata.*
            FROM (
            (
                SELECT 
                    id, 
                    'T' AS type, 
                    assign_to AS assigned_to, 
                    manually_assign, 
                    task_subject AS title, 
                    start_date AS st_date, 
                    due_date AS en_date, 
                    COALESCE(approximate, 0) AS est_minutes, 
                    status,
                    (
                        CASE
                            WHEN status = '" . Task::TASK_STATUS_IN_PROGRESS . "' THEN 'IN_PROGRESS'
                            WHEN status = '" . Task::TASK_STATUS_PLANNED . "' THEN 'PLANNED'
                        END
                    ) AS status2
                FROM 
                    tasks 
                WHERE 
                1
                AND (
                    ( status = '" . Task::TASK_STATUS_IN_PROGRESS . "' AND start_date IS NOT NULL )
                    OR 
                    ( status != '" . Task::TASK_STATUS_IN_PROGRESS . "' )
                )
                AND deleted_at IS NULL
                AND assign_to IN (" . implode(',', $userIds) . ") 
                AND status IN ('" . implode("','", $taskStatuses) . "') 
            )
            UNION
            (
                SELECT 
                    id, 
                    'DT' AS type, 
                    assigned_to AS assigned_to, 
                    manually_assign, 
                    subject AS title, 
                    start_date AS st_date, 
                    estimate_date AS en_date, 
                    COALESCE(estimate_minutes, 0) AS est_minutes, 
                    status,
                    (
                        CASE
                            WHEN status = '" . DeveloperTask::DEV_TASK_STATUS_IN_PROGRESS . "' THEN 'IN_PROGRESS'
                            WHEN status = '" . DeveloperTask::DEV_TASK_STATUS_PLANNED . "' THEN 'PLANNED'
                        END
                    ) AS status2
                FROM developer_tasks
                WHERE 1
                AND (
                    ( status = '" . DeveloperTask::DEV_TASK_STATUS_IN_PROGRESS . "' AND start_date IS NOT NULL )
                    OR 
                    ( status != '" . DeveloperTask::DEV_TASK_STATUS_IN_PROGRESS . "' )
                )
                AND deleted_at IS NULL
                AND assigned_to IN (" . implode(',', $userIds) . ")
                AND status IN ('" . implode("','", $devTaskStatuses) . "')
            )
        ) AS listdata
        ORDER BY listdata.st_date ASC";

        $tasks = \DB::select($sql, []);

        return $tasks;
    }

    public function slotIncreaseAndShift($slot, $tasks)
    {
        // IN_PROGRESS, PLANNED
        $checkDates = 0;

        $taskIds   = [];
        $userTasks = [];

        if ($tasks) {
            if ($list = ($tasks['IN_PROGRESS'] ?? [])) {
                foreach ($list as $k => $task) {
                    $SlotStart = Carbon::parse($slot['st']);
                    $SlotEnd   = Carbon::parse($slot['en']);
                    $TaskStart = Carbon::parse($task['stDate']);
                    $TaskEnd   = Carbon::parse($task['enDate']);

                    if (
                        ($TaskStart->gte($SlotStart) && $TaskStart->lte($SlotEnd)) ||
                        ($TaskEnd->gte($SlotStart) && $TaskEnd->lte($SlotEnd))
                    ) {
                        array_push($userTasks, $task);
                    } elseif ($TaskStart->lte($SlotStart) && $TaskEnd->gte($SlotEnd)) {
                        array_push($userTasks, $task);
                    }
                }
                $list                 = array_values($list);
                $tasks['IN_PROGRESS'] = $list;
            }

            if ($list = ($tasks['PLANNED'] ?? [])) {
                foreach ($list as $k => $task) {
                    $SlotStart = Carbon::parse($slot['st']);
                    $SlotEnd   = Carbon::parse($slot['en']);
                    $TaskStart = Carbon::parse($task['stDate']);
                    $TaskEnd   = Carbon::parse($task['enDate']);

                    if (
                        ($TaskStart->gte($SlotStart) && $TaskStart->lte($SlotEnd)) ||
                        ($TaskEnd->gte($SlotStart) && $TaskEnd->lte($SlotEnd))
                    ) {
                        array_push($userTasks, $task);
                    } elseif ($TaskStart->lte($SlotStart) && $TaskEnd->gte($SlotEnd)) {
                        array_push($userTasks, $task);
                    }
                }
                $list             = array_values($list);
                $tasks['PLANNED'] = $list;
            }
        }
        // print_r($userTasks);
        return [
            'taskIds'   => $taskIds ?? [],
            'userTasks' => $userTasks ?? [],
        ];
    }

    /**
     * return branch name or false
     *
     * @param mixed $repositoryId
     * @param mixed $taskId
     * @param mixed $taskTitle
     * @param mixed $branchName
     */
    private function createBranchOnGithub($repositoryId, $taskId, $taskTitle, $branchName = 'master')
    {
        $newBranchName = 'DEVTASK-' . $taskId;

        // get the master branch SHA
        // https://api.github.com/repositories/:repoId/branches/master
        $url = 'https://api.github.com/repositories/' . $repositoryId . '/branches/' . $branchName;
        try {
            $response  = $this->githubClient->get($url);
            $masterSha = json_decode($response->getBody()->getContents())->commit->sha;
        } catch (Exception $e) {
            return false;
        }

        // create a branch
        // https://api.github.com/repositories/:repo/git/refs
        $url = 'https://api.github.com/repositories/' . $repositoryId . '/git/refs';
        try {
            $this->githubClient->post(
                $url, [
                    RequestOptions::BODY => json_encode(
                        [
                            'ref' => 'refs/heads/' . $newBranchName,
                            'sha' => $masterSha,
                        ]
                    ),
                ]
            );

            return $newBranchName;
        } catch (Exception $e) {
            if ($e instanceof ClientException && $e->getResponse()->getStatusCode() == 422) {
                // branch already exists
                return $newBranchName;
            }

            return false;
        }
    }

    public function getUserHistory(Request $request)
    {
        if (isset($request->type)) {
            if ($request->type == 'developer') {
                $users = TaskUserHistory::where('model', \App\DeveloperTask::class)->where('model_id', $request->id)->get();
            } else {
                $users = TaskUserHistory::where('model', \App\Task::class)->where('model_id', $request->id)->get();
            }
        } else {
            $users = TaskUserHistory::where('model', \App\Task::class)->where('model_id', $request->id)->get();
        }

        foreach ($users as $u) {
            $old_name = null;
            $new_name = null;
            if ($u->old_id) {
                $old_name = User::find($u->old_id)->name;
            }
            if ($u->new_id) {
                $new_name = User::find($u->new_id)->name;
            }
            $u->new_name = $new_name;
            $u->old_name = $old_name;
        }

        return response()->json(
            [
                'users' => $users,
            ], 200
        );
    }

    public function getSiteDevelopmentTask(Request $request)
    {
        $site_developement_id = \App\SiteDevelopment::where('website_id', $request->site_id)->pluck('id');
        $merged               = [];
        if (! empty($site_developement_id)) {
            $taskStatistics['Devtask'] = DeveloperTask::whereIn('site_developement_id', $site_developement_id)->where('status', '!=', 'Done')->select();

            $query               = DeveloperTask::join('users', 'users.id', 'developer_tasks.assigned_to')->whereIn('site_developement_id', $site_developement_id)->where('status', '!=', 'Done')->select('developer_tasks.id', 'developer_tasks.task as subject', 'developer_tasks.status', 'users.name as assigned_to_name');
            $query               = $query->addSelect(DB::raw("'Devtask' as task_type,'developer_task' as message_type"));
            $taskStatistics      = $query->get();
            $othertask           = Task::whereIn('site_developement_id', $site_developement_id)->whereNull('is_completed')->select();
            $query1              = Task::join('users', 'users.id', 'tasks.assign_to')->whereIn('site_developement_id', $site_developement_id)->whereNull('is_completed')->select('tasks.id', 'tasks.task_subject as subject', 'tasks.assign_status', 'users.name as assigned_to_name');
            $query1              = $query1->addSelect(DB::raw("'Othertask' as task_type,'task' as message_type"));
            $othertaskStatistics = $query1->get();
            $merged              = $othertaskStatistics->merge($taskStatistics);
        }

        return response()->json(
            [
                'code'           => 200,
                'taskStatistics' => $merged,
            ]
        );
    }

    /*
    * AssignMultipleTaskToUser : Assign multiple task to user
    * DEVTASK-21672
    */
    public function AssignMultipleTaskToUser(Request $request)
    {
        $tasks = $request->get('taskIDs');
        if (count($tasks) > 0) {
            foreach ($tasks as $tsk) {
                $task   = Task::find($tsk);
                $old_id = $task->assign_to;
                if (! $old_id) {
                    $old_id = 0;
                } else {
                    DB::delete(
                        'delete from task_users where task_id = ? AND user_id = ? AND type = ?', [
                            $task->id,
                            $old_id,
                            User::class,
                        ]
                    );
                }
                $task->assign_to = $request->get('user_assigned_to');
                $task->save();
                $hubstaff_project_id = config('env.HUBSTAFF_BULK_IMPORT_PROJECT_ID');

                $assignedUser = HubstaffMember::where('user_id', $request->input('user_assigned_to'))->first();

                $hubstaffUserId = null;
                if ($assignedUser) {
                    $hubstaffUserId = $assignedUser->hubstaff_user_id;
                }
                if ($task->is_statutory != 1) {
                    $message = '#' . $task->id . '. ' . $task->task_subject . '. ' . $task->task_details;
                } else {
                    $message = $task->task_subject . '. ' . $task->task_details;
                }

                $taskSummery = substr($message, 0, 200);

                $hubstaffTaskId = $this->createHubstaffTask(
                    $taskSummery, $hubstaffUserId, $hubstaff_project_id
                );

                if ($hubstaffTaskId) {
                    $task->hubstaff_task_id = $hubstaffTaskId;
                    $task->save();
                }
                if ($hubstaffUserId) {
                    $task                      = new HubstaffTask();
                    $task->hubstaff_task_id    = $hubstaffTaskId;
                    $task->project_id          = $hubstaff_project_id;
                    $task->hubstaff_project_id = $hubstaff_project_id;
                    $task->summary             = $message;
                    $task->save();
                }

                $taskUser             = new TaskUserHistory;
                $taskUser->model      = \App\Task::class;
                $taskUser->model_id   = $task->id;
                $taskUser->old_id     = $old_id;
                $taskUser->new_id     = $request->get('user_assigned_to');
                $taskUser->user_type  = 'developer';
                $taskUser->updated_by = Auth::user()->name;
                $taskUser->save();

                $values = [
                    'task_id' => $task->id,
                    'user_id' => $request->get('user_assigned_to'),
                    'type'    => \App\User::class,
                ];
                DB::table('task_users')->insert($values);
            }
        }

        return redirect('/development/automatic/tasks')->withSuccess('You have successfully assigned task!');
    }

    public function dropdownUserWise()
    {
        try {
            $dataArr = [];
            if ($userId = request('userId')) {
                $dTasks = DeveloperTask::where('assigned_to', $userId)->whereNotIn(
                    'status', [
                        DeveloperTask::DEV_TASK_STATUS_APPROVED,
                        DeveloperTask::DEV_TASK_STATUS_IN_PROGRESS,
                        DeveloperTask::DEV_TASK_STATUS_REOPEN,
                        DeveloperTask::DEV_TASK_STATUS_PLANNED,
                    ]
                )->orderBy('id', 'DESC')->get();
                foreach ($dTasks as $key => $dTask) {
                    $dataArr['Developer Tasks']['DT-' . $dTask->id] = '(DT-' . $dTask->id . ') - ' . $dTask->subject;
                }

                $tasks = Task::where('assign_to', $userId)->whereNotIn(
                    'status', [
                        Task::TASK_STATUS_APPROVED,
                        Task::TASK_STATUS_IN_PROGRESS,
                        Task::TASK_STATUS_REOPEN,
                        Task::TASK_STATUS_PLANNED,
                    ]
                )->orderBy('id', 'DESC')->get();
                foreach ($tasks as $key => $task) {
                    $dataArr['Tasks']['T-' . $task->id] = '(T-' . $task->id . ') - ' . $task->task_subject;
                }
            }

            return response()->json(
                [
                    'list' => $dataArr ? makeDropdown($dataArr) : null,
                ]
            );
        } catch (\Throwable $th) {
            return respException($th);
        }
    }

    public function slotMove()
    {
        try {
            if (! empty(request('tasks'))) {
                $tasks = explode(',', request('tasks'));
            }

            if (! empty(request('dev_tasks'))) {
                $dev_tasks = explode(',', request('dev_tasks'));
            }

            $phrase  = request('taskTime');
            $healthy = ['(', ')'];
            $yummy   = ['', ''];

            $newPhrase = str_replace($healthy, $yummy, $phrase);

            $taskTime = explode(' ', $newPhrase);

            if (! empty($tasks)) {
                foreach ($tasks as $key => $value) {
                    $task = Task::find($value);

                    if ($task) {
                        $task->start_date = $taskTime[0] . ' ' . $taskTime[1];
                        $task->due_date   = $taskTime[0] . ' ' . $taskTime[2];

                        $task->save();
                    }
                }
            }

            if (! empty($dev_tasks)) {
                foreach ($dev_tasks as $key => $value) {
                    $task = DeveloperTask::find($value);

                    if ($task) {
                        $task->start_date    = $taskTime[0] . ' ' . $taskTime[1];
                        $task->estimate_date = $taskTime[0] . ' ' . $taskTime[3];

                        $task->save();
                    }
                }
            }

            return respJson(200, 'Time slot updated successfully.');
        } catch (\Throwable $th) {
            return response()->json(['message' => $th->getMessage()], 500);
        }
    }

    public function slotAssign()
    {
        try {
            $newValue = request('date') . ' ' . request('slot') . ':00';
            if ($id = isDeveloperTaskId(request('taskId'))) {
                if ($single = DeveloperTask::find($id)) {
                    if (! empty($single->estimate_date) || ! empty($single->start_date)) {
                        throw new Exception('You already have updated your estimate date.');
                    }
                    if (empty($single->estimate_minutes) || $single->estimate_minutes == null || $single->estimate_minutes == '') {
                        throw new Exception('Update your estimate time first.');
                    }

                    $oldValue = $single->start_date;
                    if ($oldValue == $newValue) {
                        return respJson(400, 'No change in time slot.');
                    }

                    $single->slotTaskRemarks = request('slotTaskRemarks');
                    $single->status          = 'Planned';
                    $single->manually_assign = 1;
                    $single->start_date      = $newValue;
                    $single->estimate_date   = date('Y-m-d H:i:00', strtotime($single->start_date . " +$single->estimate_minutes minute"));

                    $single->save();
                    $single->updateHistory('start_date', $oldValue, $newValue);

                    return respJson(200, 'Time slot updated successfully.');
                }
            } elseif ($id = isRegularTaskId(request('taskId'))) {
                if ($single = Task::find($id)) {
                    if (! empty($single->due_date) || ! empty($single->start_date)) {
                        throw new Exception('You already have updated your estimate date.');
                    }

                    if (empty($single->approximate) || $single->approximate == null || $single->approximate == '' || $single->approximate == 0) {
                        throw new Exception('Update your estimate time first.');
                    }

                    $single->slotTaskRemarks = request('slotTaskRemarks');
                    $single->manually_assign = 1;
                    $oldValue                = $single->start_date;

                    $single->start_date = $newValue;
                    $single->due_date   = date('Y-m-d H:i:00', strtotime($single->start_date . " +$single->approximate minute"));

                    $single->save();

                    TaskHistoryForStartDate::historySave($single->id, $oldValue, $newValue, 0);

                    return respJson(200, 'Time slot updated successfully.');
                }
            }

            return respJson(404, 'No task found.');
        } catch (\Throwable $th) {
            return response()->json(['message' => $th->getMessage()], 500);
        }
    }

    public function taskGet()
    {
        try {
            $errors = reqValidate(
                request()->all(), [
                    'id' => 'required',
                ], []
            );
            if ($errors) {
                return respJson(400, $errors[0]);
            }
            $subquery = DB::raw('SELECT remark FROM developer_tasks_history WHERE developer_task_id=tasks.id ORDER BY id DESC');
            $single   = Task::where('tasks.id', request('id'))->select(
                'tasks.*', DB::raw('(SELECT remark FROM developer_tasks_history WHERE developer_task_id=tasks.id ORDER BY id DESC LIMIT 1) as task_remark'), DB::raw('(SELECT new_value FROM task_history_for_start_date WHERE task_id=tasks.id ORDER BY id DESC LIMIT 1) as task_start_date'), DB::raw("(SELECT new_due_date FROM task_due_date_history_logs WHERE task_id=tasks.id AND task_type='TASK' ORDER BY id DESC LIMIT 1) as task_new_due_date")
            )->first();
            if (! $single) {
                return respJson(404, 'No task found.');
            }

            return respJson(
                200, '', [
                    'data' => $single,
                    'user' => $single->assignedTo ?? null,
                ]
            );
        } catch (\Throwable $th) {
            return respException($th);
        }
    }

    public function taskUpdateStartDate()
    {
        if ($new = request('value')) {
            try {
                if ($task = Task::find(request('task_id'))) {
                    if ($task->assign_to == Auth::user()->id) {
                        $params['message']  = 'Estimated Start Datetime: ' . $new;
                        $params['user_id']  = Auth::user()->id;
                        $params['task_id']  = $task->id;
                        $params['approved'] = 1;
                        $params['status']   = 2;
                        ChatMessage::create($params);
                    }
                    $task->updateStartDate($new);

                    return respJson(200, 'Successfully updated.');
                }
            } catch (Exception $e) {
                return respJson(404, $e->getMessage());
            }

            return respJson(404, 'No task found.');
        }

        return respJson(400, 'Start date is required.');
    }

    public function taskUpdateDueDate()
    {
        if ($new = request('value')) {
            try {
                if ($task = Task::find(request('task_id'))) {
                    if ($task->assign_to == Auth::user()->id) {
                        $params['message']  = 'Estimated End Datetime: ' . $new;
                        $params['user_id']  = Auth::user()->id;
                        $params['task_id']  = $task->id;
                        $params['approved'] = 1;
                        $params['status']   = 2;
                        ChatMessage::create($params);
                    }
                    $task->updateDueDate($new);

                    return respJson(200, 'Successfully updated.');
                }
            } catch (Exception $e) {
                return respJson(404, $e->getMessage());
            }

            return respJson(404, 'No task found.');
        }

        return respJson(400, 'Due date is required.');
    }

    public function updateCost()
    {
        if (! isAdmin()) {
            return respJson(403, 'Not authorized for users to update cost.');
        }
        $new = request('cost');
        if (is_numeric($new)) {
            if ($task = Task::find(request('task_id'))) {
                $oldValue = $task->cost;
                if ($task->assign_to == Auth::user()->id) {
                    $params['message']  = 'New Cost: ' . $new;
                    $params['user_id']  = Auth::user()->id;
                    $params['task_id']  = $task->id;
                    $params['approved'] = 1;
                    $params['status']   = 2;
                    ChatMessage::create($params);
                }
                $task->update(['cost' => $new]);
                TaskHistoryForCost::create(
                    [
                        'task_id'    => $task->id,
                        'old_value'  => $oldValue,
                        'new_value'  => $new,
                        'updated_by' => Auth::id(),
                    ]
                );

                return respJson(200, 'Successfully updated.');
            }

            return respJson(404, 'No task found.');
        }

        return respJson(400, 'Cost must be numeric.');
    }

    public function updateApproximate()
    {
        $task_id     = request('task_id');
        $approximate = request('approximate');
        $remark      = request('remark');

        if (! is_numeric($approximate)) {
            return respJson(400, 'Estimated time must be numeric.');
        }
        if ($task = Task::find($task_id)) {
            if (! isAdmin() && $task->assign_to != loginId()) {
                return respJson(403, 'Unauthorized access.');
            }
            if ($task->assign_to == Auth::user()->id) {
                $params['message']  = 'Estimated Time: [In Minutes] ' . $approximate . ',  ' . 'Remark: ' . $remark;
                $params['user_id']  = Auth::user()->id;
                $params['task_id']  = $task_id;
                $params['approved'] = 1;
                $params['status']   = 2;
                ChatMessage::create($params);
            }

            DeveloperTaskHistory::create(
                [
                    'developer_task_id' => $task->id,
                    'model'             => \App\Task::class,
                    'attribute'         => 'estimation_minute',
                    'old_value'         => $task->approximate,
                    'remark'            => $remark ?: null,
                    'new_value'         => $approximate,
                    'user_id'           => auth()->id(),
                ]
            );

            if (! isAdmin()) {
                $task->status = Task::TASK_STATUS_USER_ESTIMATED;
            }
            $task->approximate = $approximate;
            $task->save();

            if (Auth::user()->isAdmin()) {
                $user = User::find($task->assign_to);
                $msg  = 'TIME ESTIMATED BY ADMIN FOR TASK ' . '#DEVTASK-' . $task->id . '-' . $task->subject . ' ' . $approximate . ' MINS';
            } else {
                $user = User::find($task->master_user_id);
                $msg  = 'TIME ESTIMATED BY USER FOR TASK ' . '#DEVTASK-' . $task->id . '-' . $task->subject . ' ' . $approximate . ' MINS';
            }
            if ($user) {
                if ($receiver_user_phone = $user->phone) {
                    $chat = ChatMessage::create(
                        [
                            'number'            => $receiver_user_phone,
                            'user_id'           => $user->id,
                            'customer_id'       => $user->id,
                            'message'           => $msg,
                            'status'            => 0,
                            'developer_task_id' => $task_id,
                        ]
                    );
                    app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($receiver_user_phone, $user->whatsapp_number, $msg, false, $chat->id);
                }
            }

            return respJson(200, 'Estimation updated successfully.');
        }

        return respJson(404, 'No task found.');
    }

    /**
     * Upload a task file to google drive
     */
    public function uploadFile(Request $request)
    {
        $request->validate([
            'file'               => 'required',
            'file_creation_date' => 'required',
            'remarks'            => 'sometimes',
            'task_id'            => 'required',
            'file_read'          => 'sometimes',
            'file_write'         => 'sometimes',
        ]);

        $data = $request->all();
        try {
            foreach ($data['file'] as $file) {
                DB::transaction(function () use ($file, $data) {
                    $task             = Task::find($data['task_id']);
                    $googleScreencast = new GoogleScreencast();

                    $googleScreencast->file_name = $file->getClientOriginalName();
                    $googleScreencast->file_name .= " (TASK-$task->id " . ($task->task_subject ?? '-') . ')';

                    $googleScreencast->extension = $file->extension();
                    $googleScreencast->user_id   = Auth::id();

                    $googleScreencast->read  = '';
                    $googleScreencast->write = '';

                    $googleScreencast->remarks            = $data['remarks'];
                    $googleScreencast->file_creation_date = $data['file_creation_date'];

                    $googleScreencast->belongable_id   = $data['task_id'];
                    $googleScreencast->belongable_type = Task::class;
                    $googleScreencast->save();
                    UploadGoogleDriveScreencast::dispatchNow($googleScreencast, $file);
                });
            }

            return back()->with('success', 'File is Uploaded to Google Drive.');
        } catch (Exception $e) {
            \Log::error($e->getMessage());

            return back()->with('error', 'Something went wrong. Please try again');
        }
    }

    /**
     * This function will return a list of files which are uploaded under uicheck class
     */
    public function getUploadedFilesList(Request $request)
    {
        try {
            $result = [];
            if (isset($request->task_id)) {
                $result = GoogleScreencast::where('belongable_type', Task::class)->where('belongable_id', $request->task_id)->orderBy('id', 'desc')->with('user')->get();
                if (isset($result) && count($result) > 0) {
                    $result = $result->toArray();
                }

                return response()->json([
                    'data' => view('task-module.google-drive-list', compact('result'))->render(),
                ]);
            } else {
                throw new Exception('Task not found');
            }
        } catch (Exception $e) {
            \Log::error($e->getMessage());

            return response()->json([
                'data' => view('task-module.google-drive-list', ['result' => null])->render(),
            ]);
        }
    }

    public function taskModuleListLogHistory(Request $request)
    {
        $logs = TaskHubstaffCreateLog::with(['user', 'task'])
            ->where('task_id', $request->id)->get();

        return response()->json([
            'status'      => true,
            'data'        => $logs,
            'message'     => 'Successfully get Logs history status',
            'status_name' => 'success',
        ], 200);
    }

    public function deleteDevTask(Request $request)
    {
        $id = $request->input('id');
        if ($request->tasktype == 'Devtask') {
            $task = DeveloperTask::find($id);
        } elseif ($request->tasktype == 'Othertask') {
            $task = Task::find($id);
        }

        if ($task) {
            $task->delete();
        }

        if ($request->ajax()) {
            return response()->json(['code' => 200]);
        }
    }

    public function startTimeHistory(Request $request)
    {
        $task = Task::find($request->developer_task_id);

        if ($request->task_type == 1) {
            $input['m_start_date'] = Carbon::now();
            $input['task_start']   = 1;
            $input['status']       = 5;

            $history             = new TaskStartEndHistory();
            $history->user_id    = auth()->user()->id;
            $history->task_id    = $request->developer_task_id;
            $history->start_date = Carbon::now();
            $history->save();
        } elseif ($request->task_type == 2) {
            $input['m_end_date'] = Carbon::now();
            $input['task_start'] = 3;

            $history = TaskStartEndHistory::where('task_id', $request->developer_task_id)->orderBy('id', 'DESC')->first();

            if (! empty($history)) {
                $history->end_date = Carbon::now();
                $history->save();
            }
        }

        $task->update($input);

        return response()->json(['msg' => 'success']);
    }

    public function getTimeHistoryStartEnd(Request $request)
    {
        $id = $request->id;

        $task_histories = TaskStartEndHistory::where('task_id', $id)->orderBy('id', 'DESC')->get();

        return response()->json(['histories' => $task_histories]);
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/TasksController.php 
Content: <?php

namespace App\Http\Controllers;

use File;
use App\User;
use DataTables;
use App\CronJob;
use App\CronActivity;
use App\ScheduleQuery;
use Studio\Totem\Task;
use App\CronJobErroLog;
use Studio\Totem\Totem;
use App\DeveloperModule;
use function storage_path;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Studio\Totem\Http\Requests\TaskRequest;

class TasksController extends Controller
{
    public function dashboard()
    {
        return redirect()->route('totem.tasks.all');
    }

    public function index(Request $request)
    {
        $userCronIds = CronActivity::where('assign_to_id', \Auth::User()->id)->pluck('cron_id')->all();

        if ($request->ajax()) {
            $tasks = Task::with('frequencies');
            $tasks->select(env('TOTEM_TABLE_PREFIX') . 'tasks.*',
                DB::raw('IFNULL((select (sum(duration)/count(id)) from ' . env('TOTEM_TABLE_PREFIX') . 'task_results where ' . env('TOTEM_TABLE_PREFIX') . 'task_results.task_id=' . env('TOTEM_TABLE_PREFIX') . 'tasks.id), 0) as runtime_avg'),
                DB::raw('(select name from developer_modules where developer_modules.id=' . env('TOTEM_TABLE_PREFIX') . 'tasks.developer_module_id) as module_name'),
                DB::raw('(select ran_at from ' . env('TOTEM_TABLE_PREFIX') . 'task_results where ' . env('TOTEM_TABLE_PREFIX') . 'task_results.task_id=' . env('TOTEM_TABLE_PREFIX') . 'tasks.id order by id desc limit 1) as last_ran_at')
            );
            if (! (auth()->user()->isAdmin() || auth()->user()->isCronManager())) {
                $tasks->whereIn('id', $userCronIds);
            }

            return Datatables::of($tasks)
                ->addIndexColumn()
                ->addColumn('module', function ($task) {
                    return $task->developer_module_id ? DeveloperModule::find($task->developer_module_id)->name : '';
                })
                ->orderColumn('module', function ($query, $order) {
                    $query->orderBy('module_name', $order);
                })
                ->addColumn('averageRuntime', function ($task) {
                    return number_format($task->averageRuntime / 1000, 2) . ' seconds';
                })
                ->orderColumn('averageRuntime', function ($query, $order) {
                    $query->orderBy('runtime_avg', $order);
                })
                ->addColumn('last_run', function ($task) {
                    return $task->lastResult ? $task->lastResult->ran_at->toDateTimeString() : 'N/A';
                })
                ->orderColumn('last_run', function ($query, $order) {
                    $query->orderBy('last_ran_at', $order);
                })
                ->addColumn('frequency', function ($task) {
                    return $task->frequencies && count($task->frequencies) > 0 ? implode(', ', $task->frequencies->pluck('label')->toArray()) : '';
                })
                ->addColumn('upcoming', function ($task) {
                    return $task->upcoming;
                })
                ->addColumn('action', function ($task) {
                    $btn = '';
                    $btn .= '<a style="padding:1px;" class="btn d-inline btn-image view-task" href="#" data-id="' . $task->id . '" title="view task" data-expression="' . $task->getCronExpression() . '"><img src="/images/view.png" style="cursor: pointer; width: 0px;"></a>';
                    if (auth()->user()->isAdmin()) {
                        $btn .= '<a style="padding:1px;" class="btn d-inline btn-image edit-task" href="#" data-id="' . $task->id . '" title="edit task"><img src="/images/edit.png" style="cursor: pointer; width: 0px;"></a>';
                        $btn .= '<a style="padding:1px;" class="btn d-inline btn-image delete-tasks" href="#" data-id="' . $task->id . '" title="delete task"><img src="/images/delete.png" style="cursor: pointer; width: 0px;"></a>';
                    }
                    $btn .= '<a style="padding:1px;" class="btn d-inline btn-image execute-task" href="#" data-id="' . $task->id . '" title="execute Task"><img src="/images/send.png" style="cursor: pointer; width: 0px;"></a>';
                    $btn .= '<a style="padding:1px;" class="btn d-inline btn-image execution-history" href="#" data-id="' . $task->id . '" title="task execution history"><i class="fa fa-globe" aria-hidden="true"></i></a>';
                    $btn .= '<a style="padding:1px;" class="btn d-inline btn-image task-history" href="#" data-id="' . $task->id . '" title="Task History">T</a>';
                    $btn .= '<a style="padding:1px;" class="btn d-inline btn-image command-execution-error" href="#" data-id="' . $task->id . '"  title="Cron Run error History"><i class="fa fa-exclamation-triangle" aria-hidden="true"></i></a>';
                    $btn .= '<a style="padding:1px;" class="btn d-inline btn-image command-schedule" href="#" data-id="' . $task->command . '" title="See Cron query and description"><i class="fa fa-exclamation-circle" aria-hidden="true"></i></a>';
                    $btn .= '<a style="padding:1px;" class="btn d-inline btn-image show-cron-history" href="#" data-id="' . $task->id . '" title="Show cron assign history"><img src="/images/history.png"  style="cursor: pointer; width: 0px;"></a>';
                    if (auth()->user()->isAdmin() || auth()->user()->isCronManager()) {
                        $btn .= '<a style="padding:1px;" class="btn d-inline btn-image assign-user" href="#" assing-id="' . $task->users_ids . '" task-id="' . $task->id . '" title="Assign user"><i class="fa fa-universal-access" aria-hidden="true"></i></a>';
                    }

                    return $btn;
                })
                ->addColumn('checkbox', function ($task) {
                    $btn = '';
                    if (auth()->user()->isAdmin() || auth()->user()->isCronManager()) {
                        $btn .= '<input style="height:15px;" type="checkbox" data-id="' . $task->id . '" class="checkBoxClass" id="checkbox' . $task->id . '"/></td>';
                    }

                    return $btn;
                })
                ->addColumn('enable_disable', function ($task) {
                    $btn = '';
                    if (auth()->user()->isAdmin() || auth()->user()->isCronManager()) {
                        $btn .= '<label class="switch">
                                        <input class="active-task" data-id="' . $task->id . '" data-active="' . $task->is_active . '" ' . ($task->is_active ? 'checked' : '') . ' type="checkbox">
                                        <span class="slider round"></span>
                                    </label>';
                    }

                    return $btn;
                })
                ->filter(function ($query) use ($request) {
                    if ($request->get('search')['value']) {
                        $query->where(function ($q) use ($request) {
                            $q->where('description', 'like', '%' . $request->get('search')['value'] . '%')
                                ->orWhere('id', 'like', '%' . $request->get('search')['value'] . '%');
                        });
                    }
                    if ($request->filter_frequency != '') {
                        $query->whereHas('frequencies', function ($query) use ($request) {
                            $query->where('interval', $request->filter_frequency);
                        });
                    }
                    if ($request->is_active != '') {
                        $query->where('is_active', $request->is_active);
                    }
                    if ($request->description != '') {
                        $query->where('description', $request->description);
                    }
                })
                ->rawColumns(['checkbox', 'action', 'enable_disable'])
                ->make(true);
        }

        $columns = [
            ['data'=>'checkbox', 'name'=>'checkbox'],
            ['data'=> 'id', 'name'=>'id'],
            ['data'=> 'description', 'name'=>'description'],
            ['data'=> 'module', 'name'=>'module'],
            ['data'=> 'averageRuntime', 'name'=>'averageRuntime'],
            ['data'=> 'last_run', 'name'=>'last_run'],
            ['data'=> 'upcoming', 'name'=>'upcoming'],
            ['data'=> 'frequency', 'name'=>'frequency'],
            ['data'=> 'action', 'name'=>'action'],
            ['data'=> 'enable_disable', 'name'=>'enable_disable'],
        ];

        $tasks = Task::orderBy('description');
        if (! (auth()->user()->isAdmin() || auth()->user()->isCronManager())) {
            $tasks->whereIn('id', $userCronIds);
            $columns = array_filter($columns, function ($data) {
                return ! in_array($data['name'], ['checkbox', 'enable_disable']);
            });
        }
        $tasks = $tasks->pluck('description', 'id');

        return view('totem.tasks.index_new', [
            'tasks'            => $tasks,
            'task'             => null,
            'queries'          => ScheduleQuery::all(),
            'users'            => User::all(),
            'developer_module' => DeveloperModule::all(),
            'commands'         => Totem::getCommands(),
            'timezones'        => timezone_identifiers_list(),
            'frequencies'      => Totem::frequencies(),
            'total_tasks'      => Task::count(),
            'columns'          => array_values($columns),
        ])->with('i', (request()->input('page', 1) - 1) * 50);
    }

    public function executionHistory($task)
    {
        $taskResults = [];
        $assigned    = CronActivity::where('assign_to_id', \Auth::User()->id)->where('cron_id', $task->id)->first();

        if (auth()->user()->isAdmin() || auth()->user()->isCronManager() || $assigned) {
            $taskResults = $task->results()->latest()->take(10)->get();
        }

        return response()->json([
            'task' => $taskResults,
        ]);
    }

    public function create()
    {
        return view('totem::tasks.form', [
            'task'        => new Task,
            'commands'    => Totem::getCommands(),
            'timezones'   => timezone_identifiers_list(),
            'frequencies' => Totem::frequencies(),
        ]);
    }

    public function store(TaskRequest $request)
    {
        Task::create($request->only([
            'description',
            'command',
            'parameters',
            'timezone',
            'developer_module_id',
            'expression',
            'notification_email_address',
            'notification_phone_number',
            'notification_slack_webhook',
            'dont_overlap',
            'run_in_maintenance',
            'run_on_one_server',
            'auto_cleanup_num',
            'auto_cleanup_type',
        ]));

        return response()->json([
            'status'  => true,
            'message' => 'Task Created Successfully.',
        ]);
    }

    public function view(Task $task)
    {
        return response()->json([
            'task'    => Task::find($task->id),
            'results' => $task->results->count() > 0 ? number_format($task->results->sum('duration') / (1000 * $task->results->count()), 2) : '0',
        ]);
    }

    public function edit(Task $task)
    {
        return response()->json([
            'task'        => $task,
            'commands'    => Totem::getCommands(),
            'timezones'   => timezone_identifiers_list(),
            'frequencies' => Totem::frequencies(),
        ]);
    }

    public function update(TaskRequest $request, Task $task)
    {
        $task = Task::where('id', $task->id)->update($request->only([
            'description',
            'command',
            'parameters',
            'timezone',
            'developer_module_id',
            'expression',
            'notification_email_address',
            'notification_phone_number',
            'notification_slack_webhook',
            'dont_overlap',
            'run_in_maintenance',
            'run_on_one_server',
            'auto_cleanup_num',
            'auto_cleanup_type',
        ]));

        return response()->json([
            'status'  => true,
            'message' => 'Task Updated Successfully.',
        ]);
    }

    public function destroy($task, Request $request)
    {
        if ($task) {
            $task->delete();

            return response()->json([
                'status'  => true,
                'message' => 'Task Deleted Successfully.',
            ]);
        } else {
            return response()->json([
                'status'  => false,
                'message' => 'Task Not Found.',
            ]);
        }
    }

    public function status($task, Request $request)
    {
        if ($task) {
            if ($request->active == 1) {
                DB::table('crontasks')->where('id', $task->id)->update([
                    'is_active' => 0,
                ]);
                $msg = 'Task Deactivated Successfully.';
            } else {
                $x = DB::table('crontasks')->where('id', $task->id)->update([
                    'is_active' => 1,
                ]);
                $msg = 'Task Activated Successfully.';
            }

            return response()->json([
                'status'  => true,
                'message' => $msg,
            ]);
        } else {
            return response()->json([
                'status'  => false,
                'message' => 'Task Not Found.',
            ]);
        }
    }

    public function execute(Task $task)
    {
        File::put(storage_path('tasks.json'), Task::all()->toJson());

        return response()
            ->download(storage_path('tasks.json'), 'tasks.json')
            ->deleteFileAfterSend(true);
    }

    public function developmentTask(Request $request, $task)
    {
        $findTasks = \App\DeveloperTask::where('subject', 'like', '%' . strtoupper($task->command) . '%')->latest()->get();

        return view('totem.tasks.partials.development-task-list', compact('findTasks'));
    }

    public function totemCommandError(Request $request, $task)
    {
        $tortem    = CronJob::where('id', '=', $task->id)->first();
        $cronError = CronJobErroLog::where('signature', '=', $tortem->signature)->get();

        return response()->json([
            'data'    => $cronError,
            'message' => 'Listed successfully!!!',
        ]);

        return $cronError;
    }

    public function queryCommand(Request $request, $name)
    {
        $query = ScheduleQuery::where('schedule_name', '=', $name)->get()->toArray();

        return $query;
    }

    public function cronHistory(Request $request, $name)
    {
        $query = CronActivity::where('cron_id', '=', $name)->get()->map(function (CronActivity $cronActivity) {
            return [
                'assign_by_name' => $cronActivity->assignBy->name,
                'assign_to_name' => $cronActivity->assignTo->name,
            ];
        });

        return $query;
    }

    public function enableDisableCron(Request $request)
    {
        if ($request->get('ids')) {
            DB::table('crontasks')->whereIn('id', $request->get('ids'))->update([
                'is_active' => $request->get('active'),
            ]);
            $msg = $request->get('active') ? 'Task enabled Successfully' : 'Task disabled Successfully';

            return response()->json([
                'status'  => true,
                'message' => $msg,
            ]);
        }
    }

    public function assignUsers(Request $request)
    {
        foreach ($request->get('users_id') as $userId) {
            $cron               = new CronActivity();
            $cron->assign_by_id = \Auth::user()->id;
            $cron->cron_id      = $request->get('task-id');
            $cron->assign_to_id = $userId;
            $cron->save();
        }

        return response()->json([
            'status'  => true,
            'message' => 'Cron assign succesfully',
        ]);
    }

    public function bulkAssign(Request $request)
    {
        $crons    = DB::table('crontasks')->get()->toArray();
        $cron_ids = [];
        foreach ($crons as $cron) {
            $cron_ids[] = $cron->id;
        }
        foreach ($request->get('users_id') as $userId) {
            foreach ($cron_ids as $cron_id) {
                $cron               = new CronActivity();
                $cron->assign_by_id = \Auth::user()->id;
                $cron->cron_id      = $cron_id;
                $cron->assign_to_id = $userId;
                $cron->save();
            }
        }

        return response()->json([
            'status'  => true,
            'message' => 'Cron assign succesfully',
        ]);
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/TemplatesController.php 
Content: <?php

namespace App\Http\Controllers;

use DB;
use App\Brand;
use App\Product;
use App\Setting;
use App\Category;
use App\Template;
use App\LogRequest;
use App\ProductTemplate;
use Plank\Mediable\Media;
use Illuminate\Support\Str;
use Illuminate\Http\Request;
use App\Helpers\GuzzleHelper;
use Illuminate\Support\Facades\Http;
use Plank\Mediable\Facades\MediaUploader as MediaUploader;

class TemplatesController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        $templates = \App\Template::orderBy('id', 'desc')->with('modifications:template_id,tag,value,row_index')->paginate(Setting::get('pagination'));

        return view('template.index', compact('templates'));
    }

    public function response()
    {
        $records = \App\Template::orderBy('id', 'desc')->paginate(Setting::get('pagination'));
        foreach ($records as &$item) {
            $media       = $item->lastMedia(config('constants.media_tags'));
            $item->image = ($media) ? getMediaUrl($media) : '';
        }

        return response()->json([
            'code'       => 1,
            'result'     => $records,
            'pagination' => (string) $records->links(),
        ]);
    }

    public function updateBearBannerTemplate(Request $request)
    {
        $template = \App\Template::find($request->id);

        $template->name = $request->name;

        $template->save();

        $tags = [];

        $body = ['name' => $request->name, 'tags' => $tags];

        $url = env('BANNER_API_LINK') . '/templates/' . $template->uid;

        $api_key = env('BANNER_API_KEY');

        $headers = [
            'Authorization' => 'Bearer ' . $api_key,
            'Content-Type'  => 'application/json',
        ];

        $response = GuzzleHelper::patch($url, $body, $headers);

        return redirect()->back()->with('success', 'The template is updated.');
    }

    public static function bearBannerTemplates()
    {
        $url = env('BANNER_API_LINK') . '/templates';

        $api_key = env('BANNER_API_KEY');

        $headers = [
            'Authorization' => 'Bearer ' . $api_key,
            'Content-Type'  => 'application/json',
        ];

        $response = GuzzleHelper::get($url, $headers);

        return $response;
    }

    public function updateTemplatesFromBearBanner(Request $request)
    {
        $templates = collect(self::bearBannerTemplates());

        foreach ($templates as $key => $row) {
            $template = ['name' => $row->name, 'uid' => $row->uid, 'is_processed' => 1];

            if ($existingTemplate = Template::whereUid($row->uid)->first()) {
                $existingTemplate->update($template);
                $existingTemplate->modifications()->delete();

                $template = $existingTemplate;

                if ($row->preview_url) {
                    $media = $template->lastMedia(config('constants.media_tags'));
                    $template->detachMedia($media);
                }
            } else {
                $template = Template::create($template);
            }
            if ($row->available_modifications) {
                $available_modifications = $row->available_modifications;
            } else {
                $available_modifications = [];
            }

            if ($row->preview_url) {
                $contents = $this->getImageByCurl($row->preview_url);

                $media = MediaUploader::fromString($contents)->useFilename('template-' . time())->toDirectory('template-images')->upload();

                $template->attachMedia($media, config('constants.media_tags'));
            }

            foreach ($available_modifications as $row_index => $tag) {
                foreach ($tag as $name => $value) {
                    $modifications = ['tag' => $name, 'value' => $value, 'template_id' => $template->id, 'row_index' => $row_index];

                    $template->modifications()->create($modifications);
                }
            }
        }
        if ($request->ajax()) {
            return response()->json(['status' => 1, 'message' => 'Templates updated successfully!']);
        }

        return redirect()->back()->with('success', 'Templates are updated.');
    }

    public function createWebhook(Request $request)
    {
        $header = $request->header('Authorization', 'default');

        if ($header == 'Bearer ' . env('BANNER_WEBHOOK_KEY')) {
            $this->updateTemplatesFromBearBanner();
        }
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create(Request $request)
    {
        $template = new \App\Template;
        if ($request->auto_generate_product == 'on') {
            $request->merge(['auto_generate_product' => '1']);
        }

        $template->fill(request()->all());

        if ($template->save()) {
            if ($request->hasFile('files')) {
                foreach ($request->file('files') as $image) {
                    $media = MediaUploader::fromSource($image)->toDirectory('template-images')->upload();
                    $template->attachMedia($media, config('constants.media_tags'));
                }
            }
        }

        return response()->json(['code' => 1, 'message' => 'Template Created successfully!']);
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        $template = \App\Template::where('id', $id)->first();

        if ($template) {
            $template->delete();
        }

        return response()->json(['code' => 1, 'message' => 'Template Deleted successfully!']);
    }

    public function edit(Request $request)
    {
        $template = \App\Template::find(5);
        if ($request->auto == 'on') {
            $template->auto_generate_product = 1;
        } else {
            $template->auto_generate_product = 0;
        }
        $template->name         = $request->name;
        $template->no_of_images = $request->number;
        $template->update();

        if ($template->save()) {
            if ($request->hasFile('files')) {
                foreach ($request->file('files') as $image) {
                    $media = MediaUploader::fromSource($image)->toDirectory('template-images')->upload();

                    $template->attachMedia($media, config('constants.media_tags'));
                }
            }
        }

        return redirect()->back();
    }

    public function typeIndex(Request $request)
    {
        $temps = Template::all();
        if ($request->search) {
            $templates = ProductTemplate::where('template_no', $request->search)->paginate(Setting::get('pagination'))->appends(request()->except(['page']));
        } else {
            $templates = ProductTemplate::paginate(Setting::get('pagination'));
        }

        if ($request->ajax()) {
            return response()->json([
                'tbody' => view('product-template.partials.type-list-template', compact('templates', 'temps'))->render(),
                'links' => (string) $templates->render(),
                'total' => $templates->total(),
            ], 200);
        }

        return view('product-template.type-index', compact('templates', 'temps'));
    }

    public function generateTempalateCategoryBrand()
    {
        $templates = Template::where('auto_generate_product', 1)->get();
        foreach ($templates as $template) {
            $categories = Category::select('id')->get();
            foreach ($categories as $category) {
                $brands = Brand::select('id')->get();
                foreach ($brands as $brand) {
                    $products = Product::where('category', $category->id)->where('brand', $brand->id)->latest()->limit(50)->get();
                    foreach ($products as $product) {
                        if ($product->getMedia(config('constants.media_tags'))->count() != 0) {
                            $oldTemplate = ProductTemplate::where('template_no', $template->id)->where('type', 1)->orderBy('id', 'desc')->first();
                            if ($oldTemplate != null) {
                                $mediable = DB::table('mediables')->where('mediable_type', \App\ProductTemplate::class)->where('mediable_id', $oldTemplate->id)->count();
                                if ($template->no_of_images == $mediable) {
                                    //check if Product Template Already Exist
                                    $temp = ProductTemplate::where('template_no', $template->id)->where('brand_id', $product->brand)->where('category_id', $product->category)->where('is_processed', 0)->where('type', 1)->count();

                                    if ($temp == 0) {
                                        $productTemplate                   = new ProductTemplate;
                                        $productTemplate->template_no      = $template->id;
                                        $productTemplate->product_title    = '';
                                        $productTemplate->brand_id         = $product->brand;
                                        $productTemplate->currency         = 'eur';
                                        $productTemplate->price            = '';
                                        $productTemplate->discounted_price = '';
                                        $productTemplate->category_id      = $product->category;
                                        $productTemplate->product_id       = '';
                                        $productTemplate->is_processed     = 0;
                                        $productTemplate->type             = 1;
                                        $productTemplate->save();
                                        $media = $product->getMedia(config('constants.media_tags'))->first();
                                        $media = Media::find($media->id);
                                        $tag   = 'template-image';
                                        try {
                                            $productTemplate->attachMedia($media, $tag);
                                        } catch (Exception $e) {
                                            continue;
                                        }
                                    }
                                } else {
                                    $media = $product->getMedia(config('constants.media_tags'))->first();
                                    $media = Media::find($media->id);
                                    $tag   = 'template-image';
                                    try {
                                        $oldTemplate->attachMedia($media, $tag);
                                    } catch (Exception $e) {
                                        continue;
                                    }
                                }
                            } else {
                                //check if Product Template Already Exist
                                $temp = ProductTemplate::where('template_no', $template->id)->where('brand_id', $product->brand)->where('category_id', $product->category)->where('is_processed', 0)->where('type', 1)->count();
                                if ($temp == 0) {
                                    $productTemplate                   = new ProductTemplate;
                                    $productTemplate->template_no      = $template->id;
                                    $productTemplate->product_title    = '';
                                    $productTemplate->brand_id         = $product->brand;
                                    $productTemplate->currency         = 'eur';
                                    $productTemplate->price            = '';
                                    $productTemplate->discounted_price = '';
                                    $productTemplate->category_id      = $product->category;
                                    $productTemplate->product_id       = '';
                                    $productTemplate->is_processed     = 0;
                                    $productTemplate->type             = 1;
                                    $productTemplate->save();
                                    $media = $product->getMedia(config('constants.media_tags'))->first();
                                    $media = Media::find($media->id);
                                    $tag   = 'template-image';
                                    try {
                                        $productTemplate->attachMedia($media, $tag);
                                    } catch (Exception $e) {
                                        continue;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        return response()->json(['message' => 'Sucess'], 200);
    }

    public function getTemplateProduct(request $request)
    {
        $id           = $request->input('productid');
        $productData  = product::find($id);
        $image        = $productData->getMedia(\Config('constants.media_original_tag'))->first();
        $responseData = [
            'status'            => 'success',
            'productName'       => $productData->name,
            'short_description' => Str::limit($productData->short_description, 20, $end = '...'),
            'price'             => '$' . $productData->price,
            'product_url'       => 'www.test.com',
        ];
        if ($image) {
            $responseData['product_image'] = getMediaUrl($image);
        }
        if (isset($productData)) {
            return response()->json($responseData);
        }

        return response()->json(['status' => 'failed', 'message' => 'Product not found']);
    }

    public function getImageByCurl($url)
    {
        $startTime = date('Y-m-d H:i:s', LARAVEL_START);

        $result   = Http::get($url);
        $response = $result->json();

        LogRequest::log($startTime, $url, 'GET', json_encode([]), $response, $result->status(), TemplatesController::class, 'report');

        return $response;
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/TestController.php 
Content: <?php

namespace App\Http\Controllers;

use Illuminate\Support\Arr;
use Google\Cloud\BigQuery\BigQueryClient;

class TestController extends Controller
{
    public function index()
    {
        $order = \App\Order::find(57);

        $html     = \DB::table('email_templates')->where('id', 1)->first();
        $htmlData = $html->html;
        $re       = '/<loop-orderProducts>((.|\n)*?)<\/loop-orderProducts>/m';
        preg_match_all($re, $htmlData, $matches, PREG_SET_ORDER, 0);
        if (count($matches) != 0) {
            foreach ($matches as $index => $match) {
                $data = null;
                foreach ($order->orderProducts as $orderProduct) {
                    $data .= $this->getData($orderProduct, $match[1]);
                }
                if ($data) {
                    $htmlData = str_replace($match[1], $data, $htmlData);
                }
            }
        }

        $newData = $this->getData($order, $htmlData);
        echo $newData;
    }

    public function getData($order, $htmlData)
    {
        preg_match_all('/{{(.*?)}}/i', $htmlData, $matches);
        if (count($matches) != 0) {
            $matches = $matches[0];
            foreach ($matches as $match) {
                $matchString = str_replace(['{{', '}}'], '', $match);
                $value       = Arr::get($order, trim($matchString));
                $htmlData    = str_replace($match, $value, $htmlData);
            }
        }

        return $htmlData;
    }

    public function bigQuery()
    {
        $config = [
            'keyFilePath' => '/Users/satyamtripathi/Work/sololux-erp/public/big.json',
            'projectId'   => 'brandsandlabels',
        ];

        $bigQuery       = new BigQueryClient($config);
        $query          = 'SELECT * FROM `brandsandlabels.firebase_crashlytics.com_app_brandslabels_ANDROID_REALTIME` WHERE DATE(event_timestamp) = "2022-06-03"';
        $queryJobConfig = $bigQuery->query($query)
            ->parameters([]);
        $queryResults = $bigQuery->runQuery($queryJobConfig);
        foreach ($queryResults as $row) {
            dd($row);
        }
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/TmpController.php 
Content: <?php

namespace App\Http\Controllers;

use Plank\Mediable\Media;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;

class TmpController extends Controller
{
    public function updateImageDirectory(Request $request)
    {
        $mediaArr = Media::paginate($request->get('limit', 1000));
        foreach ($mediaArr as $media) {
            if (empty($media->directory) && $media->fileExists()) {
                $mediables = DB::table('mediables')->where('media_id', $media->id)->first();
                if ($mediables) {
                    $table = strtolower(str_replace('App\\', '', $mediables->mediable_type));

                    if (! empty($mediables->mediable_id) && $mediables->mediable_id > 1) {
                        $key = floor($mediables->mediable_id / 10000);
                    } else {
                        $key = strtolower(substr($media->basename, 0, 1) . '/' . substr($media->basename, 1, 1));
                    }

                    if ($media->getDiskPath() != $table . '/' . $key . '/' . ltrim($media->basename, '/')) {
                        $media->move($table . '/' . $key);
                    }
                }
            }
        }
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/TmpTaskController.php 
Content: <?php

namespace App\Http\Controllers;

use App\Product;
use App\StoreWebsite;
use App\Jobs\PushToMagento;
use Illuminate\Http\Request;
use App\Helpers\ProductHelper;
use App\Loggers\LogListMagento;
use App\Library\DHL\GetRateRequest;

class TmpTaskController extends Controller
{
    public function importLeads()
    {
        set_time_limit(0);
        $leads = \App\Leads::where('customer_id', '>', 0)->get();

        if (! $leads->isEmpty()) {
            foreach ($leads as $lead) {
                try {
                    $jsonBrand    = json_decode($lead->multi_brand, true);
                    $jsonCategory = json_decode($lead->multi_category, true);

                    $jsonBrand    = ! empty($jsonBrand) ? (is_array($jsonBrand) ? array_filter($jsonBrand) : [$jsonBrand]) : [];
                    $jsonCategory = ! empty($jsonCategory) ? (is_array($jsonCategory) ? array_filter($jsonCategory) : [$jsonCategory]) : [];

                    if ($lead->selected_product) {
                        $selectedProduct = json_decode($lead->selected_product, true);

                        $product = \App\Product::where('id', (is_array($selectedProduct) ? $selectedProduct[0] : $selectedProduct))->first();

                        if ($product) {
                            if (empty($jsonBrand)) {
                                $jsonBrand = [$product->brand];
                            }

                            if (empty($jsonCategory)) {
                                $jsonCategory = [$product->category];
                            }
                        }
                    }

                    $brandSegment = null;
                    if (! empty($jsonBrand)) {
                        $brand = \App\Brand::whereIn('id', $jsonBrand)->get();
                        if ($brand) {
                            $brandSegmentArr = [];
                            foreach ($brand as $v) {
                                $brandSegmentArr[] = $v->brand_segment;
                            }
                            $brandSegment = implode(',', array_unique($brandSegmentArr));
                        }
                    }

                    $erpLead = \App\ErpLeads::where([
                        'brand_id'      => isset($jsonBrand[0]) ? $jsonBrand[0] : '',
                        'category_id'   => isset($jsonCategory[0]) ? $jsonCategory[0] : '',
                        'customer_id'   => $lead->customer_id,
                        'brand_segment' => $brandSegment,
                    ])->first();

                    if (! $erpLead) {
                        $erpLead = new \App\ErpLeads;
                    }

                    $erpLead->lead_status_id   = $lead->status;
                    $erpLead->customer_id      = $lead->customer_id;
                    $erpLead->product_id       = ! empty($product) ? $product->id : null;
                    $erpLead->brand_id         = isset($jsonBrand[0]) ? $jsonBrand[0] : null;
                    $erpLead->brand_segment    = $brandSegment;
                    $erpLead->store_website_id = 15;
                    $erpLead->category_id      = isset($jsonCategory[0]) ? $jsonCategory[0] : null;
                    $erpLead->color            = null;
                    $erpLead->size             = $lead->size;
                    $erpLead->min_price        = 0.00;
                    $erpLead->max_price        = 0.00;
                    $erpLead->type             = 'import-leads';
                    $erpLead->created_at       = $lead->created_at;
                    $erpLead->updated_at       = $lead->updated_at;
                    $erpLead->save();

                    $mediaArr = $lead->getMedia(config('constants.media_tags'));
                    foreach ($mediaArr as $media) {
                        \DB::table('mediables')->where('media_id', $media->id)->where('mediable_type', \App\ErpLeads::class)->delete();
                        $erpLead->attachMedia($media, config('constants.media_tags'));
                    }
                } catch (\Illuminate\Database\QueryException $e) {
                    // do what you want here with $e->getMessage();
                }
            }
        }
    }

    public function importProduct()
    {
        $scraped_product = \App\ScrapedProducts::orderBy('id', 'desc')->first();
        app(\App\Services\Products\ProductsCreator::class)->createProduct($scraped_product);
    }

    public function testEmail(Request $request)
    {
        $orderSaved = \App\Order::find(2102);

        try {
            $email = \App\Email::create([
                'model_id'        => $orderSaved->id,
                'model_type'      => \App\Order::class,
                'from'            => 'customercare@sololuxury.co.in',
                'to'              => 'webreak.pravin@gmail.com',
                'subject'         => 'TEST',
                'message'         => 'Hello world',
                'template'        => 'order-confirmation',
                'additional_data' => $orderSaved->id,
                'status'          => 'pre-send',
                'is_draft'        => 1,
            ]);

            \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');
        } catch (Exception $e) {
            \Log::error($e);
            \Log::info('Order email was not send due to template not setup' . $orderSaved->id);
        }

        exit;

        $cnt           = 'IN';
        $website       = \App\StoreWebsite::find($request->get('store_website_id'));
        $product       = \App\Product::find($request->get('product_id'));
        $dutyPrice     = $product->getDuty($cnt);
        $discountPrice = $product->getPrice($website, $cnt, null, true, $dutyPrice);

        \Log::info(print_r($discountPrice, true));
        exit;

        $suggestion = \App\SuggestedProduct::first();
        print_r($suggestion);
        exit;

        SuggestedProduct::attachMoreProducts($suggestion);
        exit;
        //
        $order = \App\Order::latest()->first();

        if ($order) {
            $customer   = $order->customer;
            $orderItems = $order->order_product;

            $data['order']      = $order;
            $data['customer']   = $customer;
            $data['orderItems'] = $orderItems;

            Mail::to('solanki7492@gmail.com')->send(new OrderInvoice($data));
        }
    }

    public function dhl(Request $request)
    {
        $rate   = new GetRateRequest('soap');
        $result = $rate->call();
    }

    public function testPushProduct(Request $request)
    {
        $queueName = [
            '1' => 'mageone',
            '2' => 'magetwo',
            '3' => 'magethree',
        ];

        if ($request->product_id == null) {
            exit('Please Enter product id');
        }

        $productId = $request->product_id;
        if ($request->store_website_ids != null) {
            $websiteArrays = explode(',', $request->store_website_ids);
        }
        $product = \App\Product::find($request->product_id);

        // call product
        if ($product) {
            if (empty($websiteArrays)) {
                $websiteArrays = ProductHelper::getStoreWebsiteName($product->id);
            }
            if (count($websiteArrays) == 0) {
                \Log::channel('productUpdates')->info('Product started ' . $product->id . ' No website found');
                $msg = 'No website found for  Brand: ' . $product->brand . ' and Category: ' . $product->category;
            } else {
                $i = 1;
                foreach ($websiteArrays as $websiteArray) {
                    $website = StoreWebsite::find($websiteArray);
                    if ($website) {
                        // testing
                        \Log::channel('productUpdates')->info('Product started website found For website' . $website->website);
                        $log = LogListMagento::log($product->id, 'Start push to magento for product id ' . $product->id, 'info', $website->id);
                        //currently we have 3 queues assigned for this task.
                        if ($i > 3) {
                            $i = 1;
                        }
                        $log->queue = \App\Helpers::createQueueName($website->title);
                        $log->save();
                        PushToMagento::dispatch($product, $website, $log)->onQueue($log->queue);
                        $i++;
                    }
                }
            }
        }
    }

    public function fixBrandPrice()
    {
        $brands = \App\Brand::all();

        if (! $brands->isEmpty()) {
            foreach ($brands as $brand) {
                $isUpdatePrice = false;
                if (strlen($brand->min_sale_price) > 4) {
                    $isUpdatePrice = true;
                    echo "{$brand->name} updated from {$brand->min_sale_price} to " . substr($brand->min_sale_price, 0, 4);
                    echo '</br>';
                    $brand->min_sale_price = substr($brand->min_sale_price, 0, 4);
                }

                if (strlen($brand->max_sale_price) > 4) {
                    $isUpdatePrice = true;
                    echo "{$brand->name} updated from {$brand->max_sale_price} to " . substr($brand->max_sale_price, 0, 4);
                    echo '</br>';
                    $brand->max_sale_price = substr($brand->max_sale_price, 0, 4);
                }

                if ($isUpdatePrice) {
                    $brand->save();
                }
            }
        }
    }

    public function deleteChatMessages()
    {
        $limit        = request('limit', 10000);
        $chatMessages = \App\ChatMessage::where('group_ids', '>', 0)->orderBy('created_at', 'asc')->limit($limit)->get();
        if (! $chatMessages->isEmpty()) {
            foreach ($chatMessages as $chatM) {
                $medias = $chatM->getAllMediaByTag();
                if (! $medias->isEmpty()) {
                    foreach ($medias as $i => $media) {
                        foreach ($media as $m) {
                            if (strpos($m->directory, 'product') === false) {
                                echo $m->getAbsolutePath() . ' started to delete';
                                $m->delete();
                            }
                        }
                    }
                }
            }
        }
    }

    public function deleteProductImages()
    {
        $limit    = request('limit', 10000);
        $products = \App\Product::leftJoin('order_products as op', 'op.product_id', 'products.id')->where('stock', '<=', 0)
            ->where('supplier', '!=', 'in-stock')
            ->where('has_mediables', 1)
            ->havingRaw('op.product_id is null')
            ->groupBy('products.id')
            ->select(['products.*', 'op.product_id'])
            ->limit($limit)
            ->get();

        if (! $products->isEmpty()) {
            foreach ($products as $product) {
                $medias = $product->getAllMediaByTag();
                if (! $medias->isEmpty()) {
                    foreach ($medias as $i => $media) {
                        foreach ($media as $m) {
                            echo $m->getAbsolutePath() . ' started to delete';
                            $m->delete();
                        }
                    }
                }
                $product->has_mediables = 0;
                $product->save();
            }
        }
    }

    public function deleteQueue(Request $request)
    {
        \Redis::command('flushdb');
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/TwilioController.php 
Content: <?php

/**
 * Class TwilioController | app/Http/Controllers/TwilioController.php
 * Twilio integration for VOIP purpose using Twilio's Voice REST API
 *
 * @filesource required php 7 as this file contains tokenizer extension which was not stable prior to this version
 *
 * @see https://www.twilio.com/docs/voice/quickstart/php
 * @see FindByNumberController
 *
 * @author   sololux <sololux@gmail.com>
 */

namespace App\Http\Controllers;

use App\User;
use Response;
use App\Order;
use Validator;
use App\Helpers;
use App\Setting;
use App\Customer;
use App\RoleUser;
use Twilio\Twiml;
use App\Recording;
use App\TwilioLog;
use Carbon\Carbon;
use App\LogRequest;
use App\CallHistory;
use App\ChatMessage;
use App\OrderStatus;
use App\TwilioAgent;
use App\OrderProduct;
use App\StoreWebsite;
use App\TwilioWorker;
use App\CallRecording;
use App\ReplyCategory;
use App\ReturnExchange;
use App\TwilioActivity;
use App\TwilioCallData;
use App\TwilioPriority;
use App\TwilioWorkflow;
use Twilio\Rest\Client;
use App\AgentCallStatus;
use App\CallBusyMessage;
use App\ChatbotQuestion;
use App\TwilioCallBlock;
use App\TwilioCondition;
use App\TwilioKeyOption;
use App\TwilioTaskQueue;
use App\TwilioWorkspace;
use App\TwilioAccountLog;
use App\TwilioCredential;
use App\TwilioCallJourney;
use App\TwilioCallWaiting;
use App\TwilioDequeueCall;
use App\TwilioMessageTone;
use App\TwilioActiveNumber;
use App\TwilioSitewiseTime;
use App\TwilioWebhookError;
use Illuminate\Support\Str;
use Twilio\Jwt\ClientToken;
use App\TwilioCallStatistic;
use Illuminate\Http\Request;
use App\Helpers\TwilioHelper;
use App\ReturnExchangeStatus;
use App\TwilioCallForwarding;
use App\CallBusyMessageStatus;
use App\ReturnExchangeProduct;
use Twilio\TwiML\VoiceResponse;
use App\StoreWebsiteTwilioNumber;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Auth;
use App\Models\TwilioConditionStatus;
use Twilio\Jwt\TaskRouter\WorkerCapability;
use App\Models\Twilio\TwilioMessageDeliveryLogs;
use Symfony\Component\HttpFoundation\JsonResponse;

/**
 * Class TwilioController - active record
 *
 * A Twillio class which is extending FindBYNumber controller class
 * This class is used to make and receive phone calls with Twilio Programmable Voice.
 */
class TwilioController extends FindByNumberController
{
    public function __construct()
    {
        \Debugbar::disable();
    }

    public function createToken(Request $request)
    {
        $conditionsWithIds = TwilioCondition::where('status', 1)->pluck('id', 'condition')->toArray();
        $conditions        = array_keys($conditionsWithIds);

        if (\Auth::check()) {
            $user    = \Auth::user();
            $user_id = $user->id;

            $check_is_agent = TwilioAgent::where('user_id', $user_id)->where('status', 1)->first();
            if ($check_is_agent && in_array('check_is_agent', $conditions)) {
                $twilio_active_credential = StoreWebsiteTwilioNumber::join('twilio_active_numbers', 'twilio_active_numbers.id', 'store_website_twilio_numbers.twilio_active_number_id')
                    ->where('store_website_twilio_numbers.store_website_id', $check_is_agent->store_website_id)
                    ->select('twilio_active_numbers.twilio_credential_id', 'twilio_active_numbers.workspace_sid')
                    ->first();
                Log::channel('customerDnd')->info('twilio_active_credential ==> ' . $twilio_active_credential->twilio_credential_id);

                $devices = TwilioCredential::where('status', 1)->whereNotNull('twiml_app_sid')->where('id', $twilio_active_credential->twilio_credential_id)->get();

                if ($devices && in_array('devices', $conditions)) {
                    $agent = 'customer_call_agent_' . $user_id;
                    if ($devices->count()) {
                        $tokens  = [];
                        $workers = [];
                        foreach ($devices as $device) {
                            $capability = new ClientToken($device->account_id, $device->auth_token);
                            $capability->allowClientOutgoing($device->twiml_app_sid);

                            $capability->allowClientIncoming($agent);
                            $expiresIn = (3600 * 8);
                            $token     = $capability->generateToken($expiresIn);
                            $tokens[]  = $token;

                            $twilioWorkspace = TwilioWorkspace::where('workspace_sid', $twilio_active_credential->workspace_sid)->firstOrFail();
                            $twilioWorker    = TwilioWorker::where('user_id', $user_id)->where('twilio_workspace_id', $twilioWorkspace->id)->firstOrFail();

                            $capability = new WorkerCapability($device->account_id, $device->auth_token, $twilio_active_credential->workspace_sid, $twilioWorker->worker_sid);
                            $capability->allowFetchSubresources();
                            $capability->allowActivityUpdates();
                            $capability->allowReservationUpdates();
                            $workers[] = $capability->generateToken($expiresIn);
                        }

                        return response()->json(['twilio_tokens' => $tokens, 'workers' => $workers, 'agent' => $agent]);
                    }

                    return response()->json(['empty' => true]);
                }

                return response()->json(['empty' => true]);
            } else {
                return response()->json(['empty' => true]);
            }
        }

        return response()->json(['empty' => true]);
    }

    /**
     * This function is use for create Twilio log
     *
     * @param type [array] inputArray
     * @param Request $request    Request
     * @param mixed   $inputArray
     * @param mixed   $logType
     * @param mixed   $type
     *
     * @return void;
     */
    public function createTwilioLog(Request $request, $inputArray = [], $logType = '', $type = 'default')
    {
        try {
            $number      = $request->get('From') ?? 0;
            $call_sid    = $request->get('CallSid') ?? 0;
            $account_sid = $request->get('AccountSid') ?? 0;
            foreach ($inputArray as $requestDataKey => $requestDataVal) {
                if (is_array($requestDataVal)) {
                    foreach ($requestDataVal as $reqKey => $reqVal) {
                        if (is_array($reqVal)) {
                            $reqValEncode = json_encode($reqVal);
                        } else {
                            $reqValEncode = $reqVal;
                        }
                        TwilioLog::create([
                            'log'         => $logType . ' ' . $reqKey . ' : ' . $reqValEncode,
                            'account_sid' => $account_sid,
                            'call_sid'    => $call_sid,
                            'phone'       => $number,
                            'type'        => $type,
                        ]);
                    }
                } else {
                    TwilioLog::create([
                        'log'         => $logType . ' ' . $requestDataKey . ' : ' . $requestDataVal,
                        'account_sid' => $account_sid,
                        'call_sid'    => $call_sid,
                        'phone'       => $number,
                        'type'        => $type,
                    ]);
                }
            }
        } catch (Exception $e) {
            TwilioLog::create(['log' => 'Workflow Log ' . $e->getMessage(), 'account_sid' => 0, 'call_sid' => 0, 'phone' => 0]);
        }
    }

    public function twilioEvents(Request $request, Client $twilioClient)
    {
        $missedCallEvents = config('services.twilio')['missedCallEvents'];
        // Create Twilio Log
        $inputArray = $request->input();
        $this->createTwilioLog($request, $inputArray, 'Twilio Event Method Called : Request Data is');
        $eventTypeName = $request->input('EventType');
        if (in_array($eventTypeName, $missedCallEvents) and strtolower($eventTypeName) == "$eventTypeName") {
            $taskAttr = $this->parseAttributes('TaskAttributes', $request);
            if (! empty($taskAttr)) {
                // Create Twilio Log
                $this->createTwilioLog($request, $inputArray, 'Twilio Missed Call Events Occur : Request Data is');
                $call   = CallBusyMessage::where('caller_sid', $taskAttr->call_sid)->first();
                $status = CallBusyMessageStatus::where('name', 'Reserved')->pluck('id')->first();
                if ($call != null) {
                    $call->update('call_busy_message_statuses_id', $status);
                } else {
                    CallBusyMessage::create(['twilio_call_sid' => $taskAttr->caller,
                        'caller_sid'                           => $taskAttr->call_sid, 'call_busy_message_statuses_id' => $status, ]);
                }
            }
        }
    }

    public function parseAttributes($name, $request)
    {
        $attrJson = $request->input($name);

        return json_decode($attrJson);
    }

    /**
     * Incoming call URL for Twilio programmable voice
     *
     * @param Request $request Request
     *
     * @return \Illuminate\Http\Response
     *
     * @Rest\Post("twilio/incoming")
     *
     * @uses Log
     * @uses Twiml
     */
    public function incomingCall(Request $request)
    {
        $number       = $request->get('From');
        $twilioNumber = $request->get('To');

        Log::channel('customerDnd')->info('Enter in Incoming Call Section ' . $number);
        $response = new VoiceResponse();

        $storeId      = null;
        $activeNumber = TwilioActiveNumber::where('phone_number', '+' . trim($twilioNumber, '+'))->first();
        if ($activeNumber) {
            $storeId = StoreWebsiteTwilioNumber::where('twilio_active_number_id', $activeNumber->id)->first();
        }
        [$context, $object] = $this->findCustomerOrLeadOrOrderByNumber(str_replace('+', '', $number), $storeId->store_website_id ?? null);
        if (! $context) {
            $context        = 'customers';
            $object         = new Customer;
            $object->name   = 'Customer from Call';
            $object->phone  = str_replace('+', '', $number);
            $object->rating = 1;
            $object->save();
        }
        $dial = $response->dial('',
            [
                'record'                  => true,
                'recordingStatusCallback' => config('app.url') . '/twilio/recordingStatusCallback?context=' . $context . '&amp;internalId=' . $object->id,

            ]);

        $clients = $this->getConnectedClients();

        /** @var Helpers $client */
        foreach ($clients as $client) {
            $dial->client($client)->parameter([
                'name'  => 'phone',
                'value' => $request->get('To'),
            ]);
        }

        return \Response::make((string) $response, '200')->header('Content-Type', 'text/xml');
    }

    /**
     * Incoming IVR
     *
     * @param Request $request Request
     *
     * @return \Illuminate\Http\Response
     *
     * @Rest\Post("twilio/ivr")
     *
     * @uses Log
     * @uses Twiml
     * @uses Config
     *
     * @todo Can move $response code to model for Twiml object
     */
    public function ivr(Request $request)
    {
        $conditionsWithIds = TwilioCondition::where('status', 1)->pluck('id', 'condition')->toArray();
        $conditions        = array_keys($conditionsWithIds);

        $number       = $request->get('From');
        $twilioNumber = $request->get('To');
        $call_sid     = $request->get('CallSid');
        $account_sid  = $request->get('AccountSid');
        // Create Twilio Log
        $inputArray = $request->input();
        $this->createTwilioLog($request, $inputArray, 'Call received from ' . $number);
        $count             = $request->get('count');
        $call_from_enqueue = ($request->get('call_from_enqueue') != null ? $request->get('call_from_enqueue') : 0);
        $call_with_agent   = ($request->get('call_with_agent') != null ? $request->get('call_with_agent') : 0);

        TwilioLog::create(['log' => 'After call received, from Mobile No ' . $number . ' Call with Agent is :' . $call_with_agent . ' and Call from enqueue is :' . $call_from_enqueue, 'account_sid' => $account_sid, 'call_sid' => $call_sid, 'phone' => $number]);
        TwilioCallJourney::create(['account_sid' => $account_sid, 'call_sid' => $call_sid, 'phone' => $number, 'call_entered' => 1]);
        $storeId      = null;
        $activeNumber = TwilioActiveNumber::where('phone_number', '+' . trim($twilioNumber, '+'))->first();
        if ($activeNumber) {
            $storeId = StoreWebsiteTwilioNumber::where('twilio_active_number_id', $activeNumber->id)->first();
        }

        [$context, $object] = $this->findCustomerOrLeadOrOrderByNumber(str_replace('+', '', $number), $storeId->store_website_id ?? null);

        $this->createTwilioLog($request, $inputArray, 'log ' . $object);

        Log::channel('customerDnd')->info('object:: ' . $object);

        $store_website_id = (isset($object->store_website_id) ? $object->store_website_id : 0);

        $messageTones = TwilioMessageTone::where('store_website_id', $store_website_id)->first();

        $checkEndworkRingExist = $checkIntroRingExist = $checkBusyRingExist = false;

        if (isset($messageTones['end_work_ring']) and $messageTones['end_work_ring'] != null) {
            $endworkRing           = url('twilio/' . rawurlencode($messageTones['end_work_ring']));
            $checkEndworkRingExist = $this->checkUrlExists($endworkRing); // Check URL exist or not
        }

        if (isset($messageTones['intro_ring']) and $messageTones['intro_ring'] != null) {
            $introRing           = url('twilio/' . rawurlencode($messageTones['intro_ring']));
            $checkIntroRingExist = $this->checkUrlExists($introRing); // Check URL exist or not
        }

        if (isset($messageTones['busy_ring']) and $messageTones['busy_ring'] != null) {
            $busyRing           = url('twilio/' . rawurlencode($messageTones['busy_ring']));
            $checkBusyRingExist = $this->checkUrlExists($busyRing); // Check URL exist or not
        }

        // if end work ring is not found take default one
        if ($checkEndworkRingExist == false) {
            $endworkRing = 'https://' . $request->getHost() . '/end_work_ring.mp3';
        }

        // if intro ring is not found take default one
        if ($checkIntroRingExist == false) {
            $introRing = 'https://' . $request->getHost() . '/intro_ring.mp3';
        }

        // if busy ring is not found take default one
        if ($checkBusyRingExist == false) {
            $busyRing = 'https://' . $request->getHost() . '/busy_ring.mp3';
        }

        $welcomeMessage = StoreWebsite::where('id', $store_website_id)->pluck('twilio_greeting_message')->first();
        if ($welcomeMessage == null) {
            $welcomeMessage = 'Welcome';
        }

        TwilioLog::create(['log' => 'Store website for mobile number ' . $number . ' is : ' . $store_website_id, 'account_sid' => $account_sid, 'call_sid' => $call_sid, 'phone' => $number]);

        $storewebsitetwiliono = StoreWebsiteTwilioNumber::where('store_website_id', '=', $store_website_id)->get();

        $twilio_active_number = [];
        if (! empty($storewebsitetwiliono) && in_array('storewebsitetwiliono', $conditions)) {
            foreach ($storewebsitetwiliono as $val) {
                $twilio_active_number[$val->id] = $val->twilio_active_number_id;
            }
        }

        $twilio_number_site_wise = implode(',', $twilio_active_number);

        if ($twilio_number_site_wise != '' && in_array('twilio_number_site_wise', $conditions)) {
            $get_numbers = TwilioActiveNumber::select('phone_number')->whereIn('id', $twilio_active_number)->get();
        } else {
            $get_numbers = TwilioActiveNumber::select('phone_number')->where('status', 'in-use')->get();
        }

        TwilioLog::create(['log' => 'After checking the store website for mobile number ' . $number . ', Twilio Active number is searched, Number From is: ' . $request->get('Called'), 'account_sid' => $account_sid, 'call_sid' => $call_sid, 'phone' => $number]);

        Log::channel('customerDnd')->info(' Number From :: >> ' . $request->get('Called'));
        $call_from = TwilioActiveNumber::where('phone_number', $request->get('Called'))->first();

        if ($call_from && in_array('call_from', $conditions)) {
            $storewebsitetwiliono_data = StoreWebsiteTwilioNumber::where('twilio_active_number_id', '=', $call_from->id)->first();
        } else {
            $storewebsitetwiliono_data = [];
        }

        // Create Twilio Log
        $inputArray = $storewebsitetwiliono_data;
        $this->createTwilioLog($request, $inputArray, 'Checked Store Website Twilio Number data for mobile number ' . $number);
        $url       = 'https://' . $request->getHost() . '/twilio/recordingStatusCallback';
        $actionurl = 'https://' . $request->getHost() . '/twilio/handleDialCallStatus';
        $recordurl = 'https://' . $request->getHost() . '/twilio/storetranscript';

        if ($store_website_id != 0) {
            $time_store_web_id = $store_website_id;
        } else {
            $time_store_web_id = $storewebsitetwiliono_data->store_website_id;
        }
        $sitewise_time = TwilioSitewiseTime::where('store_website_id', $time_store_web_id)->first();

        $time = Carbon::now();
        if ($sitewise_time && in_array('sitewise_time', $conditions)) {
            $start_time = $sitewise_time->start_time;
            $start_hrs  = explode(':', $start_time);
            $end_time   = $sitewise_time->end_time;
            $end_hrs    = explode(':', $end_time);

            $saturday = Carbon::now()->endOfWeek()->subDay();
            $sunday   = Carbon::now()->endOfWeek();
            $morning  = Carbon::create($time->year, $time->month, $time->day, $start_hrs[0], $start_hrs[1], 0);
            $evening  = Carbon::create($time->year, $time->month, $time->day, $end_hrs[0], $end_hrs[1], 0);
        } else {
            $morning = '';
            $evening = '';
        }

        TwilioLog::create(['log' => 'For mobile number ' . $number . ' Time Stored Web id is ' . $time_store_web_id, 'account_sid' => $account_sid, 'call_sid' => $call_sid, 'phone' => $number]);

        $key_data = TwilioKeyOption::where('website_store_id', $time_store_web_id)->orderBy('key', 'ASC')->get();

        $key_wise_option = [];

        if ($key_data) {
            foreach ($key_data as $kk => $vv) {
                $key_wise_option[$vv->description]['key']         = $vv['key'];
                $key_wise_option[$vv->description]['description'] = $vv['description'];
            }
        }

        // Create Twilio Log
        $inputArray = $storewebsitetwiliono_data;
        $this->createTwilioLog($request, $inputArray, 'For mobile number ' . $number . ' Key Wise Option is ');

        $response = new VoiceResponse();

        $customerInfo      = Customer::where('phone', str_replace('+', '', $request->get('Caller')))->first();
        $twilioCredentials = TwilioCredential::where('account_id', $request->get('AccountSid'))->first();
        $twilioActive      = TwilioActiveNumber::where('phone_number', $request->get('Called'))->first();

        TwilioCallStatistic::updateOrCreate([
            'call_sid' => $request->get('CallSid'),
        ], [
            'account_sid'              => $request->get('AccountSid'),
            'customer_id'              => $customerInfo->id ?? null,
            'customer_website_id'      => $customerInfo->store_website_id ?? null,
            'twilio_credentials_id'    => $twilioCredentials->id ?? null,
            'twilio_number_website_id' => $twilioActive->assigned_stores->store_website_id ?? null,
            'customer_number'          => $request->get('Caller'),
            'twilio_number'            => $request->get('Called'),
            'customer_country'         => $request->get('CallerCountry'),
            'twilio_number_country'    => $request->get('CalledCountry'),
            'direction'                => TwilioCallStatistic::DIRECTION[$request->get('Direction')],
        ]);

        if ($call_with_agent == 1 && in_array('call_with_agent', $conditions)) {
            TwilioLog::create(['log' => ' Will check for agent for mobile number ' . $number, 'account_sid' => $account_sid, 'call_sid' => $call_sid, 'phone' => $number]);

            if (in_array('morning', $conditions) && in_array('evening', $conditions) && $morning != '' && $evening != '' && ! $time->between($morning, $evening, true)) {
                TwilioCallJourney::updateOrCreate(['account_sid' => $account_sid, 'call_sid' => $call_sid, 'phone' => $number], ['called_in_working_hours' => 0]);
                TwilioLog::create(['log' => ' Oops call is not landed in working hours Closing the call for mobile number ' . $number, 'account_sid' => $account_sid, 'call_sid' => $call_sid, 'phone' => $number]);

                $call_history = TwilioCallData::updateOrCreate([
                    'call_sid' => ($request->get('CallSid') ?? 0),
                ], [
                    'call_sid'     => ($request->get('CallSid') ?? 0),
                    'account_sid'  => ($request->get('AccountSid') ?? 0),
                    'from'         => ($request->get('Caller') ?? 0),
                    'to'           => ($request->get('Called') ?? 0),
                    'call_data'    => 'time_close',
                    'aget_user_id' => '',
                ]);

                if (isset($storewebsitetwiliono_data->end_work_message) && $storewebsitetwiliono_data->end_work_message != '') {
                    $response->Say($storewebsitetwiliono_data->end_work_message);
                } else {
                    $response->play($endworkRing);
                }

                // Leave the call and record the messsage of customer
                if ($call_from_enqueue == 1) {
                    $response->leave(); // Makes the current call leave the queue, but doesn't hang up the call. Execution proceeds with the next verb after the '<Enqueue>' verb.
                }
            } else {
                TwilioCallJourney::updateOrCreate(['account_sid' => $account_sid, 'call_sid' => $call_sid, 'phone' => $number], ['called_in_working_hours' => 1]);

                TwilioLog::create(['log' => ' Call is landed on working hours for mobile number, ' . $number, 'account_sid' => $account_sid, 'call_sid' => $call_sid, 'phone' => $number]);

                // Execute this code only if call is come from enqueue verb
                if ($call_from_enqueue == 1) {
                    switch ((int) $count) {
                        case 0: // Coming from wait url
                            $response->redirect(route('waiturl', ['count' => 2], false));
                            break;

                        case 1: // Coming from wait url
                            TwilioLog::create(['log' => ' There is no agent is available for mobile number ' . $number, 'account_sid' => $account_sid, 'call_sid' => $call_sid, 'phone' => $number]);

                            //Call History - START
                            $call_history = TwilioCallData::updateOrCreate([
                                'call_sid' => ($request->get('CallSid') ?? 0),
                            ], [
                                'call_sid'     => ($request->get('CallSid') ?? 0),
                                'account_sid'  => ($request->get('AccountSid') ?? 0),
                                'from'         => ($request->get('Caller') ?? 0),
                                'to'           => ($request->get('Called') ?? 0),
                                'call_data'    => 'time_close',
                                'aget_user_id' => '',
                            ]);
                            //Call History - END

                            //Call waiting - START
                            TwilioCallWaiting::updateOrCreate([
                                'call_sid' => ($request->get('CallSid') ?? 0),
                            ], [
                                'call_sid'         => ($request->get('CallSid') ?? 0),
                                'account_sid'      => ($request->get('AccountSid') ?? 0),
                                'from'             => ($request->get('Caller') ?? 0),
                                'to'               => ($request->get('Called') ?? 0),
                                'store_website_id' => $store_website_id,
                                'status'           => 0,
                            ]);
                            //Call waiting - END

                            if (isset($storewebsitetwiliono_data->message_busy) && in_array('message_busy', $conditions) && $storewebsitetwiliono_data->message_busy != '') {
                                $response->Say($storewebsitetwiliono_data->message_busy);
                            } else {
                                $response->Say($busyRing);
                            }

                            $response->leave(); // Makes the current call leave the queue, but doesn't hang up the call. Execution proceeds with the next verb after the '<Enqueue>' verb.
                            break;

                        default:
                            $response->say('Good Bye!')->leave();
                            break;
                    }

                    return $response;
                }

                if ($count == 2) {
                    TwilioLog::create(['log' => ' Count data is 2 for mobile number, ' . $number, 'account_sid' => $account_sid, 'call_sid' => $call_sid, 'phone' => $number]);

                    // Ask customer to leave a message on beep
                    return $this->handleIncomingCall();
                }

                if ($count == 4) {
                    if (isset($storewebsitetwiliono_data->message_not_available) && $storewebsitetwiliono_data->message_not_available != '') {
                        $response->say($storewebsitetwiliono_data->message_not_available);
                    } else {
                        $response->say('Thanks you for your patience, Our All Lines are bussy. Please leave a message after the beep.');
                    }

                    $recordurl = 'https://' . $request->getHost() . '/twilio/storerecording';

                    $response->record(
                        [
                            'maxLength'          => '20',
                            'method'             => 'GET',
                            'action'             => route('hangup', [], false),
                            'transcribeCallback' => $recordurl,
                            'finishOnKey'        => '*',
                        ]
                    );
                    TwilioLog::create(['log' => ' Call will be hung up beacuse count data is 4 for mobile number, ' . $number, 'account_sid' => $account_sid, 'call_sid' => $call_sid, 'phone' => $number]);

                    return $response;
                }

                $clients = $this->getConnectedClients('customer_call_agent');
                // Create Twilio Log
                $inputArray = $clients;
                $this->createTwilioLog($request, $inputArray, 'Fetched agents data for mobile number ' . $number);
                $is_available = 0;
                foreach ($clients as $client) {
                    $user_details = User::find($client['agent_id']);
                    $is_online    = $user_details->isOnline();

                    TwilioLog::create(['log' => 'Agent id is ' . $client['agent_id'] . ' &  Available is ' . $is_available . '  & online is ' . $is_online . ' for mobile number ' . $number, 'account_sid' => $account_sid, 'call_sid' => $call_sid, 'phone' => $number]);

                    if ($is_available == 0 && $is_online && in_array('is_available', $conditions) && in_array('is_online', $conditions)) {
                        TwilioLog::create(['log' => ' Agent Availblity before checking the call status is ' . $is_available, 'account_sid' => $account_sid, 'call_sid' => $call_sid, 'phone' => $number]);

                        // Add Agent Entry - START
                        $check_agent = AgentCallStatus::where('agent_id', $client['agent_id'])->where('agent_name_id', $client['agent_name_id'])->first();
                        if ($check_agent === null && in_array('check_agent', $conditions)) {
                            // user doesn't exist in AgentCallStatus - Insert Query for Add Agent User
                            $params_insert_agent = [
                                'agent_id'      => $client['agent_id'],
                                'agent_name'    => $client['agent_name'],
                                'agent_name_id' => $client['agent_name_id'],
                                'site_id'       => $time_store_web_id,
                                'twilio_no'     => $request->get('Called'),
                                'status'        => '0',
                            ];
                            AgentCallStatus::create($params_insert_agent);
                        }
                        // Add Agent Entry - END

                        $check_agent_available = AgentCallStatus::where('agent_id', $client['agent_id'])->where('agent_name_id', $client['agent_name_id'])->where('twilio_no', '!=', '')->first();

                        if ($check_agent_available != null && in_array('check_agent_available', $conditions)) {
                            if ($check_agent_available->status == 0) {
                                $is_available = 1;
                            }
                        } else {
                            $is_available = 1;
                        }
                        TwilioCallJourney::updateOrCreate(['account_sid' => $account_sid, 'call_sid' => $call_sid, 'phone' => $number], ['agent_available' => $is_available]);
                        TwilioCallJourney::updateOrCreate(['account_sid' => $account_sid, 'call_sid' => $call_sid, 'phone' => $number], ['agent_online' => $is_online]);

                        TwilioLog::create(['log' => ' Agent Availblity after checking the call status is ' . $is_available, 'account_sid' => $account_sid, 'call_sid' => $call_sid, 'phone' => $number]);

                        if ($is_available == 1 && in_array('is_available', $conditions)) {
                            TwilioLog::create(['log' => ' Assigned Agent id for mobile number ' . $number . ' is ' . $client['agent_name_id'], 'account_sid' => $account_sid, 'call_sid' => $call_sid, 'phone' => $number]);
                            $dial = $response->dial('', [
                                'record'                  => 'true',
                                'recordingStatusCallback' => $url,
                                'action'                  => $actionurl,
                                'timeout'                 => '60',
                            ]);

                            $dial->client($client['agent_name_id']);

                            AgentCallStatus::where('agent_id', $client['agent_id'])
                                ->where('agent_name_id', $client['agent_name_id'])
                                ->where('status', '0')
                                ->update(['status' => '1']);

                            $call_history = TwilioCallData::updateOrCreate([
                                'call_sid' => ($request->get('CallSid') ?? 0),
                            ], [
                                'call_sid'     => ($request->get('CallSid') ?? 0),
                                'account_sid'  => ($request->get('AccountSid') ?? 0),
                                'from'         => ($request->get('Caller') ?? 0),
                                'to'           => ($request->get('Called') ?? 0),
                                'call_data'    => 'client',
                                'aget_user_id' => $client['agent_id'],
                            ]);

                            TwilioCallWaiting::where('call_sid', $request->get('CallSid'))->delete();
                            //Call History - END
                        }
                    }
                }

                if ($is_available == 0 && in_array('is_available', $conditions)) {
                    TwilioLog::create(['log' => ' There is no agent is available for mobile number ' . $number, 'account_sid' => $account_sid, 'call_sid' => $call_sid, 'phone' => $number]);

                    $call_history = TwilioCallData::updateOrCreate([
                        'call_sid' => ($request->get('CallSid') ?? 0),
                    ], [
                        'call_sid'     => ($request->get('CallSid') ?? 0),
                        'account_sid'  => ($request->get('AccountSid') ?? 0),
                        'from'         => ($request->get('Caller') ?? 0),
                        'to'           => ($request->get('Called') ?? 0),
                        'call_data'    => 'time_close',
                        'aget_user_id' => '',
                    ]);
                    //Call History - END

                    //Call waiting - START
                    TwilioCallWaiting::updateOrCreate([
                        'call_sid' => ($request->get('CallSid') ?? 0),
                    ], [
                        'call_sid'         => ($request->get('CallSid') ?? 0),
                        'account_sid'      => ($request->get('AccountSid') ?? 0),
                        'from'             => ($request->get('Caller') ?? 0),
                        'to'               => ($request->get('Called') ?? 0),
                        'store_website_id' => $store_website_id,
                        'status'           => 0,
                    ]);
                    //Call waiting - END

                    if (isset($storewebsitetwiliono_data->message_busy) && in_array('message_busy', $conditions) && $storewebsitetwiliono_data->message_busy != '') {
                        $response->Say($storewebsitetwiliono_data->message_busy);
                    } else {
                        $response->Say($busyRing);
                    }

                    $count++;

                    TwilioLog::create(['log' => 'Current waiting is ' . $count, 'account_sid' => $account_sid, 'call_sid' => $call_sid, 'phone' => $number]);

                    $response->redirect(route('ivr', ['call_with_agent' => 1, 'count' => $count], false));
                }
            }

            return \Response::make((string) $response, '200')->header('Content-Type', 'text/xml');
        } else {
            if (isset($storewebsitetwiliono_data->message_available) && $storewebsitetwiliono_data->message_available != '') {
                $response->say($storewebsitetwiliono_data->message_available);
            } else {
                $response->play($introRing);
            }

            $gather = $response->gather(
                [
                    'input'     => 'speech dtmf',
                    'numDigits' => 1,
                    'action'    => route('twilio_call_menu_response', [], false),
                ]
            );
            $categories = ReplyCategory::where('parent_id', 51)->pluck('name')->toArray();

            if (isset($storewebsitetwiliono_data->category_menu_message) && $storewebsitetwiliono_data->category_menu_message != '') {
                $in_message = $storewebsitetwiliono_data->category_menu_message;
            } else {
                $in_message = 'Hello Please Speak any keyword on which you need information like Delivery or Shipping to hear 
				more options about it listen to the following options  ';
            }

            $in_message .= implode('  ', $categories);
            if ($key_data) {
                foreach ($key_data as $kk => $vv) {
                    $in_message .= ', Please Press ' . $vv['key'] . ' for a ' . $vv['details'] . ' . ';
                }
            }
            $in_message .= ', Please Press 0 for a Communicate with Our Agent .';

            TwilioLog::create(['log' => ' Waiting for agents to free, new message on dtmf is ' . $in_message, 'account_sid' => $account_sid, 'call_sid' => $call_sid, 'phone' => $number]);

            $gather->say(
                $in_message,
                ['loop' => 3]
            );

            $response->record(
                ['maxLength'             => '10',
                    'method'             => 'GET',
                    'action'             => route('twilio_call_menu_response', [], false),
                    'transcribeCallback' => $recordurl,
                ]
            );
        }

        $aa = 0;

        if ($aa == 1) {
            if ($morning != '' && in_array('morning', $conditions) && $evening != '' && in_array('evening', $conditions) && ! $time->between($morning, $evening, true)) {
                TwilioLog::create(['log' => ' Working hours over ', 'account_sid' => $account_sid, 'call_sid' => $call_sid, 'phone' => $number]);

                $call_history = TwilioCallData::updateOrCreate([
                    'call_sid' => ($request->get('CallSid') ?? 0),
                ], [
                    'call_sid'     => ($request->get('CallSid') ?? 0),
                    'account_sid'  => ($request->get('AccountSid') ?? 0),
                    'from'         => ($request->get('Caller') ?? 0),
                    'to'           => ($request->get('Called') ?? 0),
                    'call_data'    => 'time_close',
                    'aget_user_id' => '',
                ]);

                //Call History - END

                if (isset($storewebsitetwiliono_data->end_work_message) && in_array('end_work_message', $conditions) && $storewebsitetwiliono_data->end_work_message != '') {
                    $response->say($storewebsitetwiliono_data->end_work_message);
                } else {
                    $response->play($endworkRing);
                }
            } else {
                TwilioLog::create(['log' => 'called in working hours, intro tone is being played', 'account_sid' => $account_sid, 'call_sid' => $call_sid, 'phone' => $number]);
                $recordurl = 'https://' . $request->getHost() . '/twilio/storerecording';
                if ($count < 1) {
                    if (isset($storewebsitetwiliono_data->message_available) && $storewebsitetwiliono_data->message_available != '') {
                        $response->say($storewebsitetwiliono_data->message_available);
                    } else {
                        $response->play($introRing);
                    }

                    $gather = $response->gather(
                        [
                            'input'     => 'speech dtmf',
                            'numDigits' => 1,
                            'action'    => route('twilio_call_menu_response', [], false),
                        ]
                    );

                    $in_message = '';
                    if ($key_data) {
                        foreach ($key_data as $kk => $vv) {
                            $in_message .= ' Please Press ' . $vv['key'] . ' for a ' . $vv['details'];
                        }
                    }
                    $in_message .= ' Please Press 0 for a Communicate with Our Agent';

                    TwilioLog::create(['log' => ' key options being played ' . $in_message, 'account_sid' => $account_sid, 'call_sid' => $call_sid, 'phone' => $number]);

                    $gather->say(
                        $in_message,
                        ['loop' => 3]
                    );

                    $response->record(
                        ['maxLength'             => '10',
                            'method'             => 'GET',
                            'action'             => route('twilio_call_menu_response', [], false),
                            'transcribeCallback' => $recordurl,
                        ]
                    );
                }

                if ($count == 2) {
                    $gather = $response->gather(
                        [
                            'input'     => 'speech dtmf',
                            'numDigits' => 1,
                            'action'    => route('twilio_menu_response', [], false),
                        ]
                    );

                    $gather->say(
                        'Currently All Lines are busy.' .
                        'Please press 1 for a leave a message. Press 2 for a ' .
                        'Hold a Call response.',
                        ['loop' => 3]
                    );
                    $response->record(
                        ['maxLength'             => '10',
                            'method'             => 'GET',
                            'action'             => route('twilio_menu_response', [], false),
                            'transcribeCallback' => $recordurl,
                        ]
                    );
                }

                if ($count == 4) {
                    if (isset($storewebsitetwiliono_data->message_not_available) && in_array('message_not_available', $conditions) && $storewebsitetwiliono_data->message_not_available != '') {
                        $response->say($storewebsitetwiliono_data->message_not_available);
                    } else {
                        $response->say('Thanks for your patience, Our All Lines are bussy. Please leave a message');
                    }

                    $recordurl = 'https://' . $request->getHost() . '/twilio/storerecording';

                    $response->say('Please leave a message at the beep. Press the star key when finished.');

                    $response->record(
                        ['maxLength'             => '20',
                            'method'             => 'GET',
                            'action'             => route('hangup', [], false),
                            'transcribeCallback' => $recordurl,
                            'finishOnKey'        => '*',
                        ]
                    );
                    $response->hangup();

                    return $response;
                }

                $clients = $this->getConnectedClients('customer_call_agent');

                // Create Twilio Log
                $inputArray = $clients;
                $this->createTwilioLog($request, $inputArray, '');
                /** @var Helpers $client */
                $is_available = 0;
                foreach ($clients as $client) {
                    $user_details = User::find($client['agent_id']);
                    $is_online    = $user_details->isOnline();

                    if ($is_available == 0 && $is_online && in_array('is_available', $conditions) && in_array('is_online', $conditions)) {
                        // Add Agent Entry - START
                        $check_agent = AgentCallStatus::where('agent_id', $client['agent_id'])->where('agent_name_id', $client['agent_name_id'])->first();
                        if ($check_agent === null) {
                            // user doesn't exist in AgentCallStatus - Insert Query for Add Agent User
                            $params_insert_agent = [
                                'agent_id'      => $client['agent_id'],
                                'agent_name'    => $client['agent_name'],
                                'agent_name_id' => $client['agent_name_id'],
                                'site_id'       => $time_store_web_id,
                                'twilio_no'     => $request->get('Called'),
                                'status'        => '0',
                            ];
                            AgentCallStatus::create($params_insert_agent);
                        }
                        // Add Agent Entry - END

                        $check_agent_available = AgentCallStatus::where('agent_id', $client['agent_id'])->where('agent_name_id', $client['agent_name_id'])->where('twilio_no', '!=', '')->first();

                        if ($check_agent_available != null && in_array('check_agent_available', $conditions)) {
                            if ($check_agent_available->status == 0) {
                                $is_available = 1;
                            }
                        } else {
                            $is_available = 1;
                        }

                        TwilioLog::create(['log' => ' is agent available => ' . $is_available, 'account_sid' => $account_sid, 'call_sid' => $call_sid, 'phone' => $number]);

                        if ($is_available == 1 && in_array('is_available', $conditions)) {
                            $dial = $response->dial('', [
                                'record'                  => 'true',
                                'recordingStatusCallback' => $url,
                                'action'                  => $actionurl,
                                'timeout'                 => '60',
                            ]);

                            $dial->client($client['agent_name_id']);

                            AgentCallStatus::where('agent_id', $client['agent_id'])
                                ->where('agent_name_id', $client['agent_name_id'])
                                ->where('status', '0')
                                ->update(['status' => '1']);

                            $call_history = TwilioCallData::updateOrCreate([
                                'call_sid' => ($request->get('CallSid') ?? 0),
                            ], [
                                'call_sid'     => ($request->get('CallSid') ?? 0),
                                'account_sid'  => ($request->get('AccountSid') ?? 0),
                                'from'         => ($request->get('Caller') ?? 0),
                                'to'           => ($request->get('Called') ?? 0),
                                'call_data'    => 'client',
                                'aget_user_id' => $client['agent_id'],
                            ]);
                            TwilioCallJourney::updateOrCreate(['account_sid' => $account_sid, 'call_sid' => $call_sid, 'phone' => $number], ['call_answered' => 1]);

                            //Call History - END
                        }
                    }
                }

                if ($is_available == 0 && in_array('is_available', $conditions)) {
                    TwilioLog::create(['log' => ' Agent not available ', 'account_sid' => $account_sid, 'call_sid' => $call_sid, 'phone' => $number]);
                    $call_history = TwilioCallData::updateOrCreate([
                        'call_sid' => ($request->get('CallSid') ?? 0),
                    ], [
                        'call_sid'     => ($request->get('CallSid') ?? 0),
                        'account_sid'  => ($request->get('AccountSid') ?? 0),
                        'from'         => ($request->get('Caller') ?? 0),
                        'to'           => ($request->get('Called') ?? 0),
                        'call_data'    => 'time_close',
                        'aget_user_id' => '',
                    ]);
                    //Call History - END

                    //Call waiting - START
                    TwilioCallWaiting::updateOrCreate([
                        'call_sid' => ($request->get('CallSid') ?? 0),
                    ], [
                        'call_sid'         => ($request->get('CallSid') ?? 0),
                        'account_sid'      => ($request->get('AccountSid') ?? 0),
                        'from'             => ($request->get('Caller') ?? 0),
                        'to'               => ($request->get('Called') ?? 0),
                        'store_website_id' => $store_website_id,
                        'status'           => 0,
                    ]);
                    //Call waiting - END

                    if (isset($storewebsitetwiliono_data->message_busy) && in_array('message_busy', $conditions) && $storewebsitetwiliono_data->message_busy != '') {
                        $response->Say($storewebsitetwiliono_data->message_busy);
                    } else {
                        $response->Say($welcomeMessage);
                    }

                    $count++;
                    TwilioLog::create(['log' => 'connecting with agent attempt ' . $count, 'account_sid' => $account_sid, 'call_sid' => $call_sid, 'phone' => $number]);

                    $response->redirect(route('ivr', ['count' => $count], false));
                }
            }
        }

        return \Response::make((string) $response, '200')->header('Content-Type', 'text/xml');
    }

    public function webhookError(Request $request)
    {
        if (! empty($request->all())) {
            TwilioWebhookError::create([
                'sid'                => isset($request['Sid']) ? $request->get('Sid') : '',
                'account_sid'        => isset($request['AccountSid']) ? $request->get('AccountSid') : '',
                'parent_account_sid' => isset($request['ParentAccountSid']) ? $request->get('ParentAccountSid') : '',
                'level'              => isset($request['Level']) ? $request->get('Level') : '',
                'payload_type'       => isset($request['PayloadType']) ? $request->get('PayloadType') : '',
                'payload'            => isset($request['Payload']) ? $request->get('Payload') : '',
                'timestamp'          => isset($request['Timestamp']) ? Carbon::createFromTimestamp($request->get('Timestamp'))->toDateTimeString() : Carbon::now()->toDateTimeString(),
            ]);
        }
    }

    public function twilioWebhookErrorLogs()
    {
        $logs = TwilioWebhookError::paginate(100);

        return view('twilio.webhook-error-logs', compact('logs'));
    }

    // IVR Menu key input Action - START
    public function twilio_menu_response(Request $request)
    {
        $response = new VoiceResponse();
        $inputs   = $request->input();
        if (isset($inputs['Digits'])) {
            $selectedOption = $request->input('Digits');
            Log::channel('customerDnd')->info('twilio_menu_response...' . $selectedOption);
            if ($selectedOption == 1) {
                // $recordurl = \Config::get("app.url") . "/twilio/storerecording";
                $recordurl = 'https://' . $request->getHost() . '/twilio/storerecording';

                $response->say('Please leave a message after the beep. Press the star key when finished.');

                $response->record(
                    ['maxLength'             => '20',
                        'method'             => 'POST',
                        'action'             => route('waiturl', ['count' => 5], false),
                        'transcribeCallback' => $recordurl,
                        'finishOnKey'        => '*',
                    ]
                );

                return $response;
            } else {
                $response->say('Invalid number entered!');

                $response->redirect(route('handleIncomingCall', [], false));

                return $response;
            }
        } else {
            $recordedText = '';
            if (isset($inputs['SpeechResult'])) {
                $recordedText = $inputs['SpeechResult'];
            } else {
                if (isset($inputs['RecordingUrl'])) {
                    $recUrl       = $inputs['RecordingUrl'];
                    $recordedText = (new CallBusyMessage)->convertSpeechToText($recUrl, 0, $inputs['Called'], $inputs['Caller']);
                }
            }

            $reply    = ChatbotQuestion::where('value', 'like', '%' . $recordedText . '%')->orWhere('value', 'like', '%' . str_replace(' ', '_', $recordedText) . '%')->pluck('suggested_reply')->first();
            $response = new VoiceResponse();
            if ($reply == '' || $reply == null) {
                $response->Say(
                    'Invalid number entered!',
                    ['voice' => 'alice', 'language' => 'en-GB']
                );
            } else {
                $response->Say(
                    str_replace('_', ' ', $reply),
                    ['voice' => 'alice', 'language' => 'en-GB']
                );
            }

            TwilioLog::create(
                ['log' => 'User in Twilio Menu Respone, Speech Data is - ' . $recordedText . '<br> Response Data is - ' . $reply, 'account_sid' => ($request->input('AccountSid') ?? 0), 'call_sid' => ($request->input('CallSid') ?? 0), 'phone' => ($request->input('From') ?? 0), 'type' => 'speech']
            );

            $response->say(
                'Returning to the main menu',
                ['voice' => 'Alice', 'language' => 'en-GB']
            );
            $response->redirect(route('ivr', [], false));

            return $response;
        }

        $response->say(
            'Returning to the main menu',
            ['voice' => 'Alice', 'language' => 'en-GB']
        );
        $response->redirect(route('ivr', [], false));

        return $response;
    }

    public function workspaceEvent(Request $request)
    {
        // Create Twilio Log
        $inputArray = $request->all();
        $this->createTwilioLog($request, $inputArray, 'Event ');

        $cred = TwilioCredential::where('account_id', $request->get('AccountSid'))->first();

        $twilio   = new Client($cred->account_id, $cred->auth_token);
        $activity = clone $twilio;
        $task     = clone $twilio;
        $call     = clone $twilio;

        if ($request->get('EventType') == 'reservation.created') {
            $workerAttributes = json_decode($request->get('WorkerAttributes'));
            $agentId          = str_replace('client:customer_call_agent_', '', $workerAttributes->contact_uri);

            TwilioLog::create(['log' => 'Reservation Created for Agent ' . $agentId, 'account_sid' => 0, 'call_sid' => 0, 'phone' => 0]);
            TwilioDequeueCall::updateOrCreate([
                'agent_id' => $agentId,
            ], [
                'account_sid'     => $request->get('AccountSid'),
                'workspace_sid'   => $request->get('WorkspaceSid'),
                'taskqueue_sid'   => $request->get('TaskQueueSid'),
                'worker_sid'      => $request->get('WorkerSid'),
                'task_sid'        => $request->get('TaskSid'),
                'reservation_sid' => $request->get('ReservationSid'),
                'call_sid'        => json_decode($request->get('TaskAttributes'))->call_sid,
                'caller'          => json_decode($request->get('TaskAttributes'))->caller,
                'called'          => json_decode($request->get('TaskAttributes'))->called,
            ]);

            $taskAttributes = json_decode($request->get('TaskAttributes'));

            TwilioCallData::updateOrCreate([
                'call_sid' => ($taskAttributes->call_sid ?? 0),
            ], [
                'call_sid'     => ($taskAttributes->call_sid ?? 0),
                'account_sid'  => ($taskAttributes->account_sid ?? 0),
                'from'         => ($taskAttributes->caller ?? 0),
                'to'           => ($taskAttributes->called ?? 0),
                'call_data'    => 'client',
                'aget_user_id' => str_replace('client:customer_call_agent_', '', $workerAttributes->contact_uri),
            ]);
        }

        if ($request->get('EventType') == 'reservation.accepted') {
            TwilioCallWaiting::where('call_sid', json_decode($request->get('TaskAttributes'))->call_sid)->delete();

            $activtiySid = '';
            $activities  = $activity->taskrouter->v1->workspaces($request->get('WorkspaceSid'))
                ->activities
                ->read(['friendlyName' => 'Unavailable'], 1);
            foreach ($activities as $record) {
                $activtiySid = $record->sid;
            }

            $twilio->taskrouter->v1->workspaces($request->get('WorkspaceSid'))
                ->workers($request->get('WorkerSid'))
                ->update([
                    'activitySid' => $activtiySid,
                ]
                );
        }

        if ($request->get('EventType') == 'reservation.wrapup') {
            $activtiySid = '';
            $activities  = $activity->taskrouter->v1->workspaces($request->get('WorkspaceSid'))
                ->activities
                ->read(['friendlyName' => 'Available'], 1);
            foreach ($activities as $record) {
                $activtiySid = $record->sid;
            }

            $twilio->taskrouter->v1->workspaces($request->get('WorkspaceSid'))
                ->workers($request->get('WorkerSid'))
                ->update([
                    'activitySid' => $activtiySid,
                ]
                );

            $task->taskrouter->v1->workspaces($request->get('WorkspaceSid'))
                ->tasks($request->get('TaskSid'))
                ->update([
                    'assignmentStatus' => 'completed',
                ]);

            $call = $call->calls(json_decode($request->get('TaskAttributes'))->call_sid)->fetch();

            $callStatistic = TwilioCallStatistic::where('call_sid', $call->sid)->first();
            if ($callStatistic) {
                $callStatistic->update([
                    'call_duration' => $call->duration ?? 0,
                    'call_costing'  => $call->price ?? 0,
                ]);
            }
        }

        if ($request->get('EventType') == 'reservation.timeout' || $request->get('EventType') == 'reservation.canceled') {
            $twilio->calls(json_decode($request->get('TaskAttributes'))->worker_call_sid)
                ->update([
                    'status' => 'canceled',
                ]
                );
        }

        if ($request->get('EventType') == 'task.canceled') {
            TwilioCallWaiting::where('call_sid', json_decode($request->get('TaskAttributes'))->call_sid)->delete();
            $action_url           = $request->getSchemeAndHttpHost() . '/twilio/cancel-task-record';
            $recording_action_url = $request->getSchemeAndHttpHost() . '/twilio/store-cancel-task-record';

            if ($request->get('Reason') != 'hangup' && $request->get('Reason') != 'leave') {
                $task->calls(json_decode($request->get('TaskAttributes'))->call_sid)
                    ->update([
                        'twiml' => '<Response>
                    <Say>Currently, we are getting too much inquiry, Please leave a message at the beep. Press the star key when finished.</Say>
                    <Record action="' . $action_url . '" recordingStatusCallback="' . $recording_action_url . '" method="POST" finishOnKey="*"/>
                    </Response>',
                    ]
                    );
            } else {
                CallBusyMessage::updateOrCreate([
                    'caller_sid' => json_decode($request->get('TaskAttributes'))->call_sid,
                ], [
                    'message'         => 'Missed Call',
                    'twilio_call_sid' => json_decode($request->get('TaskAttributes'))->caller,
                ]);
            }

            $call = $call->calls(json_decode($request->get('TaskAttributes'))->call_sid)->fetch();

            $callStatistic = TwilioCallStatistic::where('call_sid', $call->sid)->first();
            if ($callStatistic) {
                $callStatistic->update([
                    'call_duration' => $call->duration ?? 0,
                    'call_costing'  => $call->price ?? 0,
                ]);
            }
        }

        return response()->json([], 204);
    }

    public function canceldTaskRecord(Request $request)
    {
        $response = new VoiceResponse();
        $response->say('We will contact you soon, Good bye');
        $response->hangup();

        return \Response::make((string) $response, '200')->header('Content-Type', 'text/xml');
    }

    public function storeCanceldTaskRecord(Request $request)
    {
        if (isset($request->RecordingSource) && $request->RecordingSource == 'RecordVerb') {
            $dequeue = TwilioDequeueCall::where('call_sid', $request->CallSid)->first();

            CallBusyMessage::updateOrCreate([
                'caller_sid' => $request->get('CallSid'),
            ], [
                'message'         => 'Missed Call',
                'twilio_call_sid' => $dequeue->caller,
            ]);

            CallRecording::updateOrCreate([
                'callsid' => $request->get('CallSid'),
            ], [
                'recording_url'   => $request->get('RecordingUrl'),
                'twilio_call_sid' => $request->get('CallSid'),
            ]);

            $cred   = TwilioCredential::where('account_id', $request->get('AccountSid'))->first();
            $twilio = new Client($cred->account_id, $cred->auth_token);
            $call   = $twilio->calls($request->get('CallSid'))->fetch();

            $callStatistic = TwilioCallStatistic::where('call_sid', $call->sid)->first();
            if ($callStatistic) {
                $callStatistic->update([
                    'call_duration' => $call->duration ?? 0,
                    'call_costing'  => $call->price ?? 0,
                ]);
            }
        }
    }

    public function storeCompleteTaskRecord(Request $request)
    {
        if ($request->get('CallStatus') == 'completed') {
            $agentId = str_replace('client:customer_call_agent_', '', $request->get('To'));

            $dequeue = TwilioDequeueCall::where('agent_id', $agentId)->first();

            CallBusyMessage::updateOrCreate([
                'caller_sid' => $dequeue->call_sid,
            ], [
                'message'         => 'Completed',
                'twilio_call_sid' => $dequeue->caller,
            ]);

            CallRecording::updateOrCreate([
                'callsid' => $dequeue->call_sid,
            ], [
                'recording_url'   => $request->get('RecordingUrl'),
                'twilio_call_sid' => $dequeue->call_sid,
            ]);
        }
    }

    public function assignmentTask(Request $request)
    {
        $recording_action_url = $request->getSchemeAndHttpHost() . '/twilio/store-complete-task-record';

        // Create Twilio Log
        $inputArray = $request->all();
        $this->createTwilioLog($request, $inputArray, 'Task ');
        $dequeueInstructionModel                      = new \stdClass;
        $dequeueInstructionModel->instruction         = 'dequeue';
        $dequeueInstructionModel->record              = 'record-from-answer';
        $dequeueInstructionModel->status_callback_url = $recording_action_url;

        $dequeueInstructionJson = json_encode($dequeueInstructionModel);

        // Create Twilio Log
        $inputArray = $dequeueInstructionModel;
        $this->createTwilioLog($request, $inputArray, 'JSON ');

        return response($dequeueInstructionJson)
            ->header('Content-Type', 'application/json');
    }

    public function updateReservationStatus(Request $request)
    {
        TwilioLog::create(['log' => 'Incoming Call Reject by Agent ' . $request->get('authid'), 'account_sid' => 0, 'call_sid' => 0, 'phone' => 0]);
        $agent = TwilioDequeueCall::where('agent_id', Auth::id())->first();
        $cred  = TwilioCredential::where('account_id', $agent->account_sid)->first();

        $twilio = new Client($cred->account_id, $cred->auth_token);

        $reservation = $twilio->taskrouter->v1->workspaces($agent->workspace_sid)
            ->tasks($agent->task_sid)
            ->reservations($agent->reservation_sid)
            ->update([
                'reservationStatus' => 'rejected',
            ]
            );
        // Create Twilio Log
        $inputArray = $agent->toArray();
        $this->createTwilioLog($request, $inputArray, 'Task Reservation Rejected by ' . $reservation->workerName);
    }

    public function rejectIncomingCall(Request $request)
    {
        $agent = TwilioDequeueCall::where('agent_id', Auth::id())->first();
        $cred  = TwilioCredential::where('account_id', $agent->account_sid)->first();

        $twilio = new Client($cred->account_id, $cred->auth_token);
        $twilio->taskrouter->v1->workspaces($agent->workspace_sid)
            ->tasks($agent->task_sid)
            ->update([
                'assignmentStatus' => 'canceled',
            ]
            );
    }

    public function blockIncomingCall()
    {
        $call = TwilioDequeueCall::where('agent_id', Auth::id())->first();
        $cred = TwilioCredential::where('account_id', $call->account_sid)->first();

        $customerInfo      = Customer::where('phone', str_replace('+', '', $call->caller))->first();
        $twilioCredentials = TwilioCredential::where('account_id', $call->account_sid)->first();
        $twilioActive      = TwilioActiveNumber::where('phone_number', $call->called)->first();

        TwilioCallBlock::create([
            'user_agent_id'            => $call->agent_id,
            'customer_id'              => $customerInfo->id ?? null,
            'twilio_credentials_id'    => $twilioCredentials->id ?? null,
            'customer_website_id'      => $customerInfo->store_website_id ?? null,
            'twilio_number_website_id' => $twilioActive->assigned_stores->store_website_id ?? null,
            'customer_number'          => $call->caller ?? null,
            'twilio_number'            => $call->called ?? null,
        ]);

        $twilio = new Client($cred->account_id, $cred->auth_token);

        $twilio->calls($call->call_sid)
            ->update([
                'status' => 'completed',
            ]
            );
    }

    public function waitUrl(Request $request)
    {
        $count = $request->get('count') ?? 1;

        // Find wait url exist for store websites
        $number       = $request->get('From'); // Customer Number
        $twilioNumber = $request->get('To'); // Twilio number
        $storeId      = null;
        $activeNumber = TwilioActiveNumber::where('phone_number', '+' . trim($twilioNumber, '+'))->first();
        if ($activeNumber) {
            $storeId = StoreWebsiteTwilioNumber::where('twilio_active_number_id', $activeNumber->id)->first();
        }

        [$context, $object] = $this->findCustomerOrLeadOrOrderByNumber(str_replace('+', '', $number), $storeId->store_website_id ?? null);

        $storeWebsiteId = (isset($object->store_website_id) ? $object->store_website_id : 0);

        $checkWaitUrlRingExist = false;
        if ($storeWebsiteId != 0) {
            $messageTones = TwilioMessageTone::where('store_website_id', $storeWebsiteId)->first();

            if (isset($messageTones['wait_url_ring']) and $messageTones['wait_url_ring'] != null) {
                $waitUrlRing           = url('twilio/' . rawurlencode($messageTones['wait_url_ring']));
                $checkWaitUrlRingExist = $this->checkUrlExists($waitUrlRing); // Check URL exist or not
            }
        }

        // if wait url ring is not found take default one
        if ($checkWaitUrlRingExist == false) {
            $waitUrlRing = $request->getSchemeAndHttpHost() . '/twilio-queue-music.mp3';
        }

        TwilioLog::create(['log' => 'WaitURL ' . $count . ' | ' . $request->get('QueueTime') . ' | ' . $request->get('AvgQueueTime') . ' | ' . $waitUrlRing, 'account_sid' => 0, 'call_sid' => 0, 'phone' => 0]);

        $recordurl = 'https://' . $request->getHost() . '/twilio/storerecording';

        $response = new VoiceResponse();
        if ($count == 2) {
            $response->say('All agents are Busy. Please wait for your turn.');
            $response->play($waitUrlRing);

            $count++;
            $response->redirect(route('waiturl', ['count' => $count], false));
        } elseif ($count == 3) {
            $response->say('All agents are Busy. Please wait for your turn.');
            $response->play($waitUrlRing);

            $count++;
            $response->redirect(route('waiturl', ['count' => $count], false));
        } elseif ($count == 4) {
            $response->play($waitUrlRing);

            $response->redirect(route('ivr', ['call_with_agent' => 1, 'count' => 1, 'call_from_enqueue' => 1], false));
        } elseif ($count == 5) {
            $response->say('Thank you for your message, We will contact you soon.');
            $response->hangup();
        } else {
            $response->say('All agents are Busy. Please wait for your turn.');
            $response->play($waitUrlRing);

            $response->redirect(route('ivr', ['call_with_agent' => 1, 'count' => 0, 'call_from_enqueue' => 1], false));
        }

        return \Response::make((string) $response, '200')->header('Content-Type', 'text/xml');
    }

    public function twilio_call_menu_response(Request $request)
    {
        $response = new VoiceResponse();
        Log::channel('customerDnd')->info('twilio_call_menu_response...' . $request);

        $conditionsWithIds = TwilioCondition::where('status', 1)->pluck('id', 'condition')->toArray();
        $conditions        = array_keys($conditionsWithIds);

        $number     = $request->get('From');
        $to         = $request->get('To');
        $AccountSid = $request->get('AccountSid');
        $CallSid    = $request->get('CallSid');

        $storeId      = null;
        $activeNumber = TwilioActiveNumber::where('phone_number', '+' . trim($to, '+'))->first();
        if ($activeNumber) {
            $storeId = StoreWebsiteTwilioNumber::where('twilio_active_number_id', $activeNumber->id)->first();
        }
        [$context, $object] = $this->findCustomerOrLeadOrOrderByNumber(str_replace('+', '', $number), $storeId->store_website_id ?? null);
        $store_website_id   = (isset($object->store_website_id) ? $object->store_website_id : 0);
        try {
            $call_from = TwilioActiveNumber::where('phone_number', $request->get('Called'))->first();
            $workflow  = TwilioWorkflow::where('workflow_sid', $call_from->workflow_sid)->first();

            // Create Twilio Log
            $inputArray = $workflow;
            $this->createTwilioLog($request, $inputArray, 'Workflow Log ');
        } catch (Exception $e) {
            TwilioLog::create(['log' => 'Workflow Log ' . $e->getMessage(), 'account_sid' => 0, 'call_sid' => 0, 'phone' => 0]);
        }

        if ($call_from && in_array('call_from', $conditions)) {
            $storewebsitetwiliono_data = StoreWebsiteTwilioNumber::where('twilio_active_number_id', '=', $call_from->id)->first();
        } else {
            $storewebsitetwiliono_data = [];
        }

        if ($store_website_id != 0 && in_array('store_website_id', $conditions)) {
            $time_store_web_id = $store_website_id;
        } else {
            $time_store_web_id = $storewebsitetwiliono_data->store_website_id;
        }

        Log::channel('customerDnd')->info('time_store_web_id: ' . $time_store_web_id);
        $inputs = $request->input();
        TwilioCallJourney::updateOrCreate(['account_sid' => $AccountSid, 'call_sid' => $CallSid, 'phone' => $number], ['handled_by_chatbot' => 1]);

        if (isset($inputs['Digits'])) {
            $selectedOption = $request->input('Digits');
            $key_data       = TwilioKeyOption::where('website_store_id', $time_store_web_id)->orderBy('key', 'ASC')->get();

            $key_wise_option = [];

            if ($key_data) {
                foreach ($key_data as $kk => $vv) {
                    $key_wise_option[$vv->key]['key']         = $vv['key'];
                    $key_wise_option[$vv->key]['description'] = $vv['description'];
                    $key_wise_option[$vv->key]['message']     = $vv['message'];
                }
            }
            Log::channel('customerDnd')->info('twilio_call_menu_response...' . $selectedOption);
            if ($selectedOption == 0) {
                TwilioCallWaiting::updateOrCreate([
                    'call_sid' => ($request->get('CallSid') ?? 0),
                ], [
                    'call_sid'         => ($request->get('CallSid') ?? 0),
                    'account_sid'      => ($request->get('AccountSid') ?? 0),
                    'from'             => ($request->get('Caller') ?? 0),
                    'to'               => ($request->get('Called') ?? 0),
                    'store_website_id' => $store_website_id,
                    'status'           => 0,
                ]);
                $priority   = 0;
                $tasknumber = 0;
                if ($object) {
                    if ($object->do_not_disturb) {
                        $priority   = 0;
                        $tasknumber = -1;
                    } else {
                        $priority   = $object->is_priority;
                        $tasknumber = $object->is_priority;
                    }
                }

                $task = [
                    'type' => (string) $tasknumber,
                ];
                $response->enqueue(null, ['workflowSid' => $call_from->workflow_sid, 'waitUrl' => route('waiturl', [], false)])->task(json_encode($task), ['priority' => $priority, 'timeout' => $workflow->task_timeout]);

                // This code is executed after we leave enqueue using twilio leave() function
                $response->say('Please leave a message after the beep. Press the star key when finished.');

                $response->record(
                    [
                        'maxLength'          => '30',
                        'method'             => 'POST',
                        'action'             => route('waiturl', ['count' => 5], false),
                        'transcribeCallback' => 'https://' . $request->getHost() . '/twilio/storetranscript',
                        'finishOnKey'        => '*',
                    ]
                );
                TwilioLog::create(['log' => 'Enqueue Log ' . (string) $response, 'account_sid' => 0, 'call_sid' => 0, 'phone' => 0]);

                return \Response::make((string) $response, '200')->header('Content-Type', 'text/xml');
            } else {
                if (array_key_exists($selectedOption, $key_wise_option)) {
                    Log::channel('customerDnd')->info('key Description ::' . $key_wise_option[$selectedOption]['description']);

                    if ($key_wise_option[$selectedOption]['description'] == 'order') {
                        Log::channel('customerDnd')->info('twilio_call_menu_response >>> order');

                        if (isset($key_wise_option[$selectedOption]['message']) && $key_wise_option[$selectedOption]['message'] != '') {
                            $response->say($key_wise_option[$selectedOption]['message']);
                        }

                        $gather = $response->gather(
                            [
                                'numDigits' => 30,
                                'action'    => route('twilio_order_status_and_information_on_call', [], false),
                            ]
                        );

                        $gather->say(
                            'Please Enter Your Order Id',
                            ['loop' => 3]
                        );
                    } elseif ($key_wise_option[$selectedOption]['description'] == 'product') {
                        Log::channel('customerDnd')->info('twilio_call_menu_response >>> product');

                        if (isset($key_wise_option[$selectedOption]['message']) && $key_wise_option[$selectedOption]['message'] != '') {
                            $response->say($key_wise_option[$selectedOption]['message']);
                        }

                        $gather = $response->gather(
                            [
                                'numDigits' => 1,
                                'action'    => route('twilio_call_menu_response', [], false),
                            ]
                        );

                        $in_message = 'Please Press 0 for a Communicate with Our Agent';

                        $gather->say(
                            $in_message,
                            ['loop' => 3]
                        );
                    } elseif ($key_wise_option[$selectedOption]['description'] == 'administration') {
                        Log::channel('customerDnd')->info('twilio_call_menu_response >>> Administration');

                        if (isset($key_wise_option[$selectedOption]['message']) && $key_wise_option[$selectedOption]['message'] != '') {
                            $response->say($key_wise_option[$selectedOption]['message']);
                        }

                        $gather = $response->gather(
                            [
                                'numDigits' => 1,
                                'action'    => route('twilio_call_menu_response', [], false),
                            ]
                        );

                        $in_message = 'Please Press 0 for a Communicate with Our Agent';

                        $gather->say(
                            $in_message,
                            ['loop' => 3]
                        );
                    } elseif ($key_wise_option[$selectedOption]['description'] == 'socialmedia') {
                        Log::channel('customerDnd')->info('twilio_call_menu_response >>> socialmedia');

                        if (isset($key_wise_option[$selectedOption]['message']) && $key_wise_option[$selectedOption]['message'] != '') {
                            $response->say($key_wise_option[$selectedOption]['message']);
                        }

                        $gather = $response->gather(
                            [
                                'numDigits' => 1,
                                'action'    => route('twilio_call_menu_response', [], false),
                            ]
                        );

                        $in_message = 'Please Press 0 for a Communicate with Our Agent';

                        $gather->say(
                            $in_message,
                            ['loop' => 3]
                        );
                    } elseif ($key_wise_option[$selectedOption]['description'] == 'return_refund_exchange') {
                        Log::channel('customerDnd')->info('twilio_call_menu_response >>> return_refund_exchange');

                        $gather = $response->gather(
                            [
                                'timeout' => 2,
                                'action'  => route('twilio_return_refund_exchange_on_call', [], false),
                            ]
                        );

                        $gather->say(
                            'Please Press 1 for Return, Please Press 2 for Refund, Please Press 3 for Exchange, Please Press 0 for a Communicate with Our Agent',
                            ['loop' => 3]
                        );
                    } elseif ($key_wise_option[$selectedOption]['description'] == 'general') {
                        Log::channel('customerDnd')->info('twilio_call_menu_response >>> general');

                        if (isset($key_wise_option[$selectedOption]['message']) && $key_wise_option[$selectedOption]['message'] != '') {
                            $response->say($key_wise_option[$selectedOption]['message']);
                        }

                        $gather = $response->gather(
                            [
                                'numDigits' => 1,
                                'action'    => route('twilio_call_menu_response', [], false),
                            ]
                        );

                        $in_message = 'Please Press 0 for a Communicate with Our Agent';

                        $gather->say(
                            $in_message,
                            ['loop' => 3]
                        );
                    } else {
                        Log::channel('customerDnd')->info('else >>>');
                        $response->say('Invalid number entered! Returning to main menu.');
                        $response->redirect(route('ivr', [], false));
                    }

                    return $response;
                } else {
                    Log::channel('customerDnd')->info('else >>>');
                    $response->say('Invalid number entered! Returning to main menu.');
                    $response->redirect(route('ivr', [], false));

                    return $response;
                }
            }
        } else {
            $recordurl = 'https://' . $request->getHost() . '/twilio/storetranscript';
            $customer  = $object; // Customer's data
            if (isset($inputs['SpeechResult'])) {
                $recordedText = str_replace('.', '', $inputs['SpeechResult']);
            } else {
                $recUrl       = $inputs['RecordingUrl'];
                $recordedText = (new CallBusyMessage)->convertSpeechToText($recUrl, $time_store_web_id, $to, $number);
            }

            // If recorded text is not found again call ivr function
            if (empty($recordedText) || empty($customer)) {
                $response->say('Sorry your answer is not found. Returning to the main menu.');
                $response->redirect(route('ivr', ['count' => 2], false));

                return $response;
            }

            $params = [
                'number'      => $customer->phone,
                'message'     => $recordedText,
                'media_url'   => null,
                'approved'    => 0,
                'status'      => 0,
                'contact_id'  => null,
                'erp_user'    => null,
                'supplier_id' => null,
                'task_id'     => null,
                'dubizzle_id' => null,
                'vendor_id'   => null,
                'customer_id' => $customer->id,
            ];

            // Store first data in chat message table
            $messageModel = ChatMessage::create($params);

            // Create auto reply message if answer found in our DB else go to watson reply
            \App\Helpers\MessageHelper::sendwatson($customer, $recordedText, null, $messageModel, $params, false);

            // take reply given to customer
            $checkReply = \App\ChatbotReply::where(['replied_chat_id' => $messageModel->id])->first();

            if (! empty($checkReply)) {
                $response->say($checkReply['answer']);
                $response->pause(['length' => 2]);

                $gather = $response->gather(
                    [
                        'input'     => 'speech dtmf',
                        'numDigits' => 1,
                        'action'    => route('twilio_call_menu_response', [], false),
                    ]
                );

                $gather->say(
                    'Speak any keyword for any further assistance. Press 0 For a Communicate with Our Agent or simply hang up the call',
                    ['loop' => 3]
                );

                $response->record(
                    ['maxLength'             => '10',
                        'method'             => 'GET',
                        'action'             => route('twilio_call_menu_response', [], false),
                        'transcribeCallback' => $recordurl,
                    ]
                );
            } else {
                // call agent
                $gather = $response->gather(
                    [
                        'numDigits'   => 1,
                        'action'      => route('twilio_call_menu_response', [], false),
                        'finishOnKey' => '*',
                    ]
                );

                $gather->say(
                    'Please press 0 to communicate with our agent or press the star key to end the call.',
                    ['loop' => 3]
                );
            }

            return $response;
        }

        $response->say(
            'Returning to the main menu',
            ['voice' => 'Alice', 'language' => 'en-GB']
        );
        $response->redirect(route('ivr', [], false));

        return $response;
    }

    public function twilio_order_status_and_information_on_call(Request $request)
    {
        $selectedOption = $request->input('Digits');
        $response       = new VoiceResponse();
        Log::channel('customerDnd')->info('twilio_order_status_and_information_on_call Order Id = ' . $selectedOption);

        $conditionsWithIds = TwilioCondition::where('status', 1)->pluck('id', 'condition')->toArray();
        $conditions        = array_keys($conditionsWithIds);

        $order_data = Order::where('order_id', $selectedOption)->first();

        $option = ($request->get('sel_option') != null ? 1 : 0);

        if ($order_data && $option == 1 && in_array('order_data', $conditions)) {
            Log::channel('customerDnd')->info('Order Data Match' . json_encode($order_data));
            Log::channel('customerDnd')->info('Option :: > ' . $request->get('sel_option'));

            if ($request->get('sel_option') == 'return' || $request->get('sel_option') == 'exchange' || $request->get('sel_option') == 'refund') {
                $order_pro = OrderProduct::where('order_id', $order_data->id)->first();

                if ($order_pro && in_array('order_pro', $conditions)) {
                    Log::channel('customerDnd')->info('order_product_id ::  ' . $order_pro->id);

                    $return_exchange_pro = ReturnExchangeProduct::where('order_product_id', $order_pro->id)->first();

                    if ($return_exchange_pro && in_array('return_exchange_pro', $conditions)) {
                        Log::channel('customerDnd')->info('return_exchange_pro  return_exchange_id::  ' . $return_exchange_pro->return_exchange_id);

                        Log::channel('customerDnd')->info('return_exchange_pro  status_id::  ' . $return_exchange_pro->status_id);
                    }

                    $order_status = '';

                    if ($return_exchange_pro && in_array('return_exchange_pro', $conditions) && $return_exchange_pro->return_exchange_id != null && $return_exchange_pro->return_exchange_id != '') {
                        $return_exchange = ReturnExchange::where('id', $return_exchange_pro->return_exchange_id)->first();

                        $returnexchangestatus = ReturnExchangeStatus::where('id', $return_exchange->status)->first();

                        $order_status = $returnexchangestatus->status_name;

                        $response->say('Your Order ' . $request->get('sel_option') . ' Status is ' . $order_status);

                        $response->say('Thank you.');

                        $response->say('Do you need any futher support.');

                        $response->redirect(route('ivr', ['count' => 0], false));

                        $response->hangup();

                        return $response;
                    } elseif ($return_exchange_pro && in_array('return_exchange_pro', $conditions) && $return_exchange_pro->status_id != null && $return_exchange_pro->status_id != '') {
                        $returnexchangestatus = ReturnExchangeStatus::where('id', $return_exchange_pro->status_id)->first();

                        $order_status = $returnexchangestatus->status_name;

                        $response->say('Your Order ' . $request->get('sel_option') . ' Status is ' . $order_status);

                        $response->say('Thank you.');

                        $response->say('Do you need any futher support.');

                        $response->redirect(route('ivr', ['count' => 0], false));

                        return $response;
                    } else {
                        Log::channel('customerDnd')->info('Not Match Any Record regarding ' . $request->get('sel_option') . ' .');

                        $response->say('Not Match Any Record regarding ' . $request->get('sel_option') . ' .');

                        $response->redirect(route('ivr', ['count' => 0], false));

                        return $response;
                    }
                } else {
                    Log::channel('customerDnd')->info('Not Match Any Record regarding ' . $request->get('sel_option') . ' .');

                    $response->say('Not Match Any Record regarding ' . $request->get('sel_option') . ' .');

                    $response->redirect(route('ivr', ['count' => 0], false));

                    return $response;
                }
            }
        } elseif ($order_data && $option == 0 && in_array('order_data', $conditions)) {
            Log::channel('customerDnd')->info('Order Data Match' . json_encode($order_data));
            $order_status = '';
            if ($order_data->order_status_id != null) {
                $orderStatusList = OrderStatus::where('id', $order_data->order_status_id)->first();

                Log::channel('customerDnd')->info('Order Status = ' . $orderStatusList->status);
                $order_status = $orderStatusList->status;
            } elseif ($order_data->order_status != null) {
                $order_status = $order_data->order_status;
            }

            $response->say('Your Order Status is ' . $order_status);

            $response->say('Thank you.');
            $response->say('Do you need any futher support.');

            $response->redirect(route('ivr', ['count' => 0], false));

            $response->hangup();

            return $response;
        } else {
            Log::channel('customerDnd')->info('Not Match Any Record from your Input');

            $response->say('Not Match Any Record from your Input');

            $response->redirect(route('ivr', ['count' => 0], false));

            return $response;
        }
    }

    public function twilio_return_refund_exchange_on_call(Request $request)
    {
        $selectedOption = $request->input('Digits');
        $response       = new VoiceResponse();
        Log::channel('customerDnd')->info('return_refund_exchange selectedOption = ' . $selectedOption);

        if ($selectedOption == 0) {
            // Call with our agent
            Log::channel('customerDnd')->info('return_refund_exchange >> Call with our agent ');
            $response->redirect(route('ivr', ['call_with_agent' => 1], false));
        } elseif ($selectedOption == 1) {
            Log::channel('customerDnd')->info('return_refund_exchange >> Return ');

            $gather = $response->gather(
                [
                    'numDigits' => 30,
                    'action'    => route('twilio_order_status_and_information_on_call', ['sel_option' => 'return'], false),
                ]
            );

            $gather->say(
                'Please Enter Your Order Id',
                ['loop' => 3]
            );
        } elseif ($selectedOption == 2) {
            //Refund
            Log::channel('customerDnd')->info('return_refund_exchange >> Refund ');

            $gather = $response->gather(
                [
                    'numDigits' => 30,
                    'action'    => route('twilio_order_status_and_information_on_call', ['sel_option' => 'refund'], false),
                ]
            );

            $gather->say(
                'Please Enter Your Order Id',
                ['loop' => 3]
            );
        } elseif ($selectedOption == 3) {
            //Exchange
            Log::channel('customerDnd')->info('return_refund_exchange >> Exchange ');

            $gather = $response->gather(
                [
                    'numDigits' => 30,
                    'action'    => route('twilio_order_status_and_information_on_call', ['sel_option' => 'exchange'], false),
                ]
            );

            $gather->say(
                'Please Enter Your Order Id',
                ['loop' => 3]
            );
        } else {
            $response->say('Invalid number entered!');

            $response->redirect(route('ivr', ['count' => 2], false));
        }

        return $response;
    }

    // IVR Menu key input Action - END

    public function leave_message_rec(Request $request)
    {
        $response = new VoiceResponse();
        Log::channel('customerDnd')->info(' leave_message_rec ');

        $response->hangup();

        return $response;
    }

    /**
     * Gather action
     *
     * @param Request $request Request
     *
     * @return \Illuminate\Http\Response
     *
     * @Rest\Post("twilio/gatherAction")
     *
     * @uses Log
     * @uses Twiml
     * @uses Config
     */
    public function gatherAction(Request $request)
    {
        $response = new VoiceResponse();
        Log::channel('customerDnd')->info(' TIME CHECKING : 2');

        $digits = trim($request->get('Digits'));
        Log::channel('customerDnd')->info(' TIME CHECKING : 3');

        $clients = [];

        $number = $request->get('From');
        Log::channel('customerDnd')->info(' TIME CHECKING : 4');

        $recordurl = 'https://' . $request->getHost() . '/twilio/storerecording';
        Log::channel('customerDnd')->info(' TIME CHECKING : 5');

        if ($digits === '0') {
            Log::channel('customerDnd')->info(' Enterd into Leave a message section');
            $response->record(
                ['maxLength'             => '20',
                    'method'             => 'GET',
                    'action'             => route('hangup', [], false),
                    'transcribeCallback' => $recordurl,
                ]
            );

            $response->Say(
                'No recording received. Goodbye',
                ['voice' => 'alice', 'language' => 'en-GB']
            );
            $response->hangup();

            return $response;
        } else {
            $this->createIncomingGather($request, $response, 'We did not understand that input.');
        }

        return \Response::make((string) $response, '200')->header('Content-Type', 'text/xml');
    }

    /**
     * Outgoing call URL
     *
     * @param Request $request Request
     *
     * @return \Illuminate\Http\Response
     *
     * @Rest\Post("twilio/outgoing")
     *
     * @uses Log
     * @uses Twiml
     * @uses Config
     */
    public function outgoingCall(Request $request)
    {
        Log::channel('customerDnd')->info('Call Status: = ' . $request->get('CallStatus'));

        $conditionsWithIds = TwilioCondition::where('status', 1)->pluck('id', 'condition')->toArray();
        $conditions        = array_keys($conditionsWithIds);

        $number = $request->get('PhoneNumber');
        Log::channel('customerDnd')->info('Call SID: ' . $request->get('CallSid'));
        $context = $request->get('context');
        $id      = $request->get('internalId');

        if ($request->get('CallNumber') != null) {
            $callFrom = $request->get('CallNumber');
        } else {
            $callFrom = \Config::get('twilio.default_caller_id');
        }

        $actionurl = 'https://' . $request->getHost() . '/twilio/handleOutgoingDialCallStatus' . "?phone_number=$number";

        Log::channel('customerDnd')->info('Outgoing call function Enter ' . $id);
        $response = new VoiceResponse();
        $response->dial($number, [
            'callerId'                => $callFrom,
            'record'                  => 'true',
            'recordingStatusCallback' => 'https://' . $request->getHost() . '/twilio/recordingStatusCallback?context=' . $context . '&internalId=' . $id . '&Mobile=' . $number,
            'action'                  => $actionurl,
        ]);

        //Change Agent Call Status - START
        Log::channel('customerDnd')->info('AuthId: ' . $request->get('AuthId'));
        $user_id   = $request->get('AuthId');
        $user_data = User::find($user_id);

        $twilio_number_data = TwilioActiveNumber::where('phone_number', $callFrom)->first();

        $storewebsiteid = StoreWebsiteTwilioNumber::select('store_website_id')->where('twilio_active_number_id', '=', $twilio_number_data->id)->first();

        $store_website_id = $storewebsiteid->store_website_id;

        $agent_name_id = 'customer_call_agent_' . $user_id;

        $check_agent = AgentCallStatus::where('agent_id', $user_id)->where('agent_name_id', $agent_name_id)->first();

        if ($check_agent != null && in_array('check_agent', $conditions)) {
            AgentCallStatus::where('agent_id', $user_id)
                ->where('agent_name_id', $agent_name_id)
                ->where('status', '0')
                ->update(['status' => '1']);
        } else {
            $params_insert_agent = [
                'agent_id'      => $user_data->id,
                'agent_name'    => $user_data->name,
                'agent_name_id' => $agent_name_id,
                'site_id'       => $store_website_id,
                'twilio_no'     => $callFrom,
                'status'        => '1',
            ];
            AgentCallStatus::create($params_insert_agent);
        }
        //Change Agent Call Status - END

        //Call History - START
        Log::channel('customerDnd')->info('outgoingCall :: TwilioCallData Added');
        Log::channel('customerDnd')->info($request->get('CallSid') . ' | ' . $request->get('AccountSid') . ' | ' . $callFrom . ' | ' . $number . ' | ' . $request->get('AuthId'));

        $call_history = TwilioCallData::updateOrCreate([
            'call_sid' => ($request->get('CallSid') ?? 0),
        ], [
            'call_sid'     => ($request->get('CallSid') ?? 0),
            'account_sid'  => ($request->get('AccountSid') ?? 0),
            'from'         => ($callFrom ?? 0),
            'to'           => ($number ?? 0),
            'call_data'    => 'agent',
            'aget_user_id' => $request->get('AuthId'),
        ]);
        //Call History - END

        $params = [
            'twilio_call_sid' => $number,
            'message'         => 'Missed Call',
            'caller_sid'      => $request->get('CallSid'),
        ];
        Log::channel('customerDnd')->info('-----33333----- ');
        CallBusyMessage::create($params);

        $recordurl = 'https://' . $request->getHost() . '/twilio/storetranscript';
        Log::channel('customerDnd')->info('Trasncript Call back url ' . $recordurl);
        $response->record(['transcribeCallback' => $recordurl]);

        return \Response::make((string) $response, '200')->header('Content-Type', 'text/xml');
    }

    public function change_agent_status(Request $request)
    {
        $conditionsWithIds = TwilioCondition::where('status', 1)->pluck('id', 'condition')->toArray();
        $conditions        = array_keys($conditionsWithIds);
        if ($request->get('status') !== null && \Auth::check()) {
            $user = \Auth::user();
            Log::channel('customerDnd')->info('change_agent_status >>>>');
            $user_id = $user->id;

            $current_status = 1;
            $status         = 0;
            $agent_name_id  = 'customer_call_agent_' . $user_id;

            $check_agent = AgentCallStatus::where('agent_id', $user_id)->where('agent_name_id', $agent_name_id)->first();
            if ($check_agent != null && in_array('check_agent', $conditions)) {
                AgentCallStatus::where('agent_id', $user_id)
                    ->where('agent_name_id', $agent_name_id)
                    ->where('status', $current_status)
                    ->update(['status' => $status]);
            }
        } else {
            Log::channel('customerDnd')->info('change_agent_status  >>' . $request->get('authid'));
            $user_id        = $request->get('authid');
            $current_status = ($request->get('status') == 1 ? 0 : 1);
            $status         = $request->get('status');
            $agent_name_id  = 'customer_call_agent_' . $user_id;
            $check_agent    = AgentCallStatus::where('agent_id', $user_id)->where('agent_name_id', $agent_name_id)->first();
            if ($check_agent != null && in_array('check_agent', $conditions)) {
                AgentCallStatus::where('agent_id', $user_id)
                    ->where('agent_name_id', $agent_name_id)
                    ->where('status', $current_status)
                    ->update(['status' => $status]);
            }
        }
    }

    public function addNumber(Request $request)
    {
        $agent_id   = $request->get('authid');
        $number     = $request->get('number');
        $status     = $request->get('status');
        $add_number = \App\TwilioCurrentCall::create(['agent_id' => $agent_id, 'number' => $number, 'status' => $status]);
    }

    public function updateNumberStatus(Request $request)
    {
        $agent_id      = $request->get('authid');
        $number        = $request->get('number');
        $update_number = \App\TwilioCurrentCall::where(['agent_id' => $agent_id, 'number' => $number, 'status' => 1])->update(['status' => 0]);
    }

    public function removeWaitingCalls(Request $request)
    {
        TwilioCallWaiting::where('call_sid', $request->get('callSid'))->delete();
    }

    public function getWaitingCallList()
    {
        $agentId   = Auth::id();
        $agentData = TwilioAgent::where('user_id', $agentId)->where('status', 1)->first();

        $waitingCalls = \App\TwilioCallWaiting::with('storeWebsite')->leftJoin('customers as c', 'c.phone', \DB::raw('REPLACE(twilio_call_waitings.from, "+", "")'))->where('c.store_website_id', $agentData->store_website_id)->orderBy('twilio_call_waitings.created_at', 'desc')
            ->select(['twilio_call_waitings.*', 'c.name', 'c.email'])->get();

        return response()->json([
            'calls' => $waitingCalls,
        ]);
    }

    public function change_agent_call_status(Request $request)
    {
        $user              = \Auth::user();
        $user_id           = $user->id;
        $conditionsWithIds = TwilioCondition::where('status', 1)->pluck('id', 'condition')->toArray();
        $conditions        = array_keys($conditionsWithIds);
        Log::channel('customerDnd')->info('change_agent_call_status  >>');
        $current_status = ($request->get('status') == 1 ? 0 : 1);
        $status         = $request->get('status');
        $agent_name_id  = 'customer_call_agent_' . $user_id;
        Log::channel('customerDnd')->info('agent_id >>> ' . $user_id);
        Log::channel('customerDnd')->info('agent_name_id >>> ' . $agent_name_id);
        $check_agent = AgentCallStatus::where('agent_id', $user_id)->where('agent_name_id', $agent_name_id)->first();
        Log::channel('customerDnd')->info('check_agent >>> ' . $check_agent);
        if ($check_agent != null && in_array('check_agent', $conditions)) {
            Log::channel('customerDnd')->info('id >>> ' . $check_agent->id);
            AgentCallStatus::where('agent_id', $user_id)
                ->where('agent_name_id', $agent_name_id)
                ->update(['status' => $status]);
        }
    }

    /**
     * @SWG\Post(
     *   path="/twilio-conference",
     *   tags={"Twilio"},
     *   summary="post twilio conference",
     *   operationId="post-twilio-conference",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *   @SWG\Response(response=406, description="not acceptable"),
     *   @SWG\Response(response=500, description="internal server error"),
     *
     *      @SWG\Parameter(
     *          name="mytest",
     *          in="path",
     *          required=true,
     *          type="string"
     *      ),
     * )
     */
    /**
     * Outgoing Conference call URL
     *
     * @param Request $request Request
     *
     * @return \Illuminate\Http\Response
     *
     * @Rest\Post("twilio-conference")
     *
     * @uses Log
     * @uses Config
     */
    public function outgoingCallConference(Request $request, Response $response)
    {
        $from    = $request->numbersFrom;
        $to      = $request->numbers;
        $context = $request->context;
        $id      = $request->id;
        $sid     = \Config::get('twilio.account_sid');
        $token   = \Config::get('twilio.auth_token');
        $twilio  = new Client($sid, $token);

        foreach ($to as $number) {
            $participant = $twilio->conferences(\Config::get('twilio.conference_sid'))
                ->participants
                ->create($from, $number);
            $caller_sid = $participant->callSid;
            $details[]  = ['number' => $number, 'sid' => $caller_sid];
        }

        // Via a request instance...
        return \Response::make($details, '200')->header('Content-Type', 'text/xml');
    }

    /**
     * @SWG\Post(
     *   path="/twilio-conference-mute",
     *   tags={"Twilio"},
     *   summary="post twilio mute conference",
     *   operationId="post-twilio-mute-conference",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *   @SWG\Response(response=406, description="not acceptable"),
     *   @SWG\Response(response=500, description="internal server error"),
     *
     *      @SWG\Parameter(
     *          name="mytest",
     *          in="path",
     *          required=true,
     *          type="string"
     *      ),
     * )
     */
    /**
     * Mute Number From Conference
     *
     * @param Request $request Request
     *
     * @return \Illuminate\Http\Response
     *
     * @Rest\Post("twilio-conference-mute")
     *
     * @uses Log
     * @uses Config
     */
    public function muteConferenceNumber(Request $request)
    {
        $caller_sid  = $request->sid;
        $participant = $twilio->conferences(\Config::get('twilio.conference_sid'))
            ->participants($caller_sid)
            ->update(['muted' => true]);
        // Via a request instance...
        return \Response::make('Muted SucessFully', '200')->header('Content-Type', 'text/xml');
    }

    /**
     * @SWG\Post(
     *   path="/twilio-conference-hold",
     *   tags={"Twilio"},
     *   summary="post twilio hold conference",
     *   operationId="post-twilio-hold-conference",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *   @SWG\Response(response=406, description="not acceptable"),
     *   @SWG\Response(response=500, description="internal server error"),
     *
     *      @SWG\Parameter(
     *          name="mytest",
     *          in="path",
     *          required=true,
     *          type="string"
     *      ),
     * )
     */
    /**
     * Hold Number From Conference
     *
     * @param Request $request Request
     *
     * @return \Illuminate\Http\Response
     *
     * @Rest\Post("twilio-conference-hold")
     *
     * @uses Log
     * @uses Config
     */
    public function holdConferenceNUmber(Request $request)
    {
        $caller_sid  = $request->sid;
        $participant = $twilio->conferences(\Config::get('twilio.conference_sid'))
            ->participants($caller_sid)
            ->update(['muted' => true]);
        // Via a request instance...
        return \Response::make('Hold SucessFully', '200')->header('Content-Type', 'text/xml');
    }

    /**
     * @SWG\Post(
     *   path="/twilio-conference-remove",
     *   tags={"Twilio"},
     *   summary="post twilio remove conference",
     *   operationId="post-twilio-remove-conference",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *   @SWG\Response(response=406, description="not acceptable"),
     *   @SWG\Response(response=500, description="internal server error"),
     *
     *      @SWG\Parameter(
     *          name="mytest",
     *          in="path",
     *          required=true,
     *          type="string"
     *      ),
     * )
     */
    /**
     * Remove Number From Conference
     *
     * @param Request $request Request
     *
     * @return \Illuminate\Http\Response
     *
     * @Rest\Post("twilio-conference-remove")
     *
     * @uses Log
     * @uses Config
     */
    public function removeConferenceNumber(Request $request)
    {
        $caller_sid  = $request->sid;
        $participant = $twilio->conferences(\Config::get('twilio.conference_sid'))
            ->participants($caller_sid)
            ->update(['muted' => true]);
        // Via a request instance...
        return \Response::make('Number Removed SucessFully', '200')->header('Content-Type', 'text/xml');
    }

    /**
     * Store a new Trasnscript from call
     *
     * @param Request $request Request
     *
     * @return string
     *
     * @Rest\Post("twilio/storetranscript")
     *
     * @uses Log
     * @uses CallRecording
     */
    public function storetranscript(Request $request)
    {
        Log::channel('customerDnd')->info('---------------- Enter in Function for Trasncript--------------------- ' . $request->get('CallStatus'));
        $sid = $request->get('CallSid');
        Log::channel('customerDnd')->info('TranscriptionText ' . $request->input('TranscriptionText'));

        $call_status = $request->get('CallStatus');
        if ($call_status == 'completed') {
            CallRecording::updateOrCreate([
                'callsid' => $sid,
            ], [
                'recording_url'   => $request->input('RecordingUrl'),
                'twilio_call_sid' => $sid,
                'message'         => $request->input('TranscriptionText'),
            ]);
        }

        return 'Ok';
    }

    /**
     * Outgoing call URL
     *
     * @param Request $request Request
     *
     * @return \Illuminate\Http\Response
     *
     * @Rest\Get("twilio/getLeadByNumber")
     *
     * @uses Customer
     */
    public function getLeadByNumber(Request $request)
    {
        $number       = $request->get('number');
        $twilioNumber = $request->get('twilio_number');
        $activeNumber = TwilioActiveNumber::where('phone_number', '+' . trim($twilioNumber, '+'))->first();
        if ($activeNumber) {
            $storeId = StoreWebsiteTwilioNumber::where('twilio_active_number_id', $activeNumber->id)->first();
        }
        [$context, $object] = $this->findCustomerAndRelationsByNumber(str_replace('+', '', $number), $storeId->store_website_id ?? null);

        if (! $context) {
            return response()->json(['found' => false, 'number' => $number]);
        }
        $result = [
            'found' => true,
            'data'  => $object,
        ];

        return response()->json($result);
    }

    /**
     * Recording status callback
     *
     * @param Request $request Request
     *
     * @return \Illuminate\Http\Response
     *
     * @Rest\Post("twilio/recordingStatusCallback")
     *
     * @return void
     *
     * @uses CallRecording
     */
    public function recordingStatusCallback(Request $request)
    {
        Log::channel('customerDnd')->info('recordingStatusCallback');
        $url    = $request->get('RecordingUrl');
        $sid    = $request->get('CallSid');
        $params = [
            'recording_url'   => $url,
            'twilio_call_sid' => $sid,
            'callsid'         => $sid,
        ];
        $context    = $request->get('context');
        $internalId = $request->get('internalId');

        if ($context && $internalId) {
            if ($context == 'leads') {
                $params['lead_id'] = $internalId;
            } elseif ($context == 'orders') {
                $params['order_id'] = $internalId;
            } elseif ($context == 'customers') {
                $params['customer_id'] = $internalId;
            }
        }
        $customer_mobile = $request->get('Mobile');
        if ($customer_mobile != '') {
            $params['customer_number'] = $customer_mobile;
        }

        CallRecording::create($params);
    }

    /**
     * Get data of connected clients
     *
     * @param Role $role
     *
     * @return array $clients
     *
     * @uses Helpers
     * @uses User
     *
     * @todo static user id's are passed and role is given
     */
    private function getConnectedClients($role = '')
    {
        $hods = User::Join('twilio_agents', 'twilio_agents.user_id', 'users.id')->where('twilio_agents.status', '1')->select('users.*')->get();
        // Create Twilio Log
        $inputData  = [];
        $inputArray = $hods;
        $request    = new Request();
        $this->createTwilioLog($request, $inputArray, 'Checking Agents in Connected Client Method ');
        Log::channel('customerDnd')->info('getConnectedClients >> hods:::::::::');
        $andy    = User::find(216);
        $yogesh  = User::find(6);
        $clients = [];
        /** @var Helpers $hod */
        foreach ($hods as $hod) {
            if ($role == 'customer_call_agent') {
                $clients[$hod->id]['agent_id']      = $hod->id;
                $clients[$hod->id]['agent_name']    = $hod->name;
                $clients[$hod->id]['agent_name_id'] = 'customer_call_agent_' . $hod->id;
            } else {
                $clients[] = str_replace('-', '_', Str::slug($hod->name));
            }
        }

        if (Setting::get('incoming_calls_andy') == 1) {
            if ($role == 'customer_call_agent') {
                $clients[$andy->id]['agent_id']      = $andy->id;
                $clients[$andy->id]['agent_name']    = $andy->name;
                $clients[$andy->id]['agent_name_id'] = 'customer_call_agent_' . $andy->id;
            } else {
                $clients[] = str_replace('-', '_', Str::slug($andy->name));
            }
        }

        if (Setting::get('incoming_calls_yogesh') == 1) {
            if ($role == 'customer_call_agent') {
                $clients[$yogesh->id]['agent_id']      = $yogesh->id;
                $clients[$yogesh->id]['agent_name']    = $yogesh->name;
                $clients[$yogesh->id]['agent_name_id'] = 'customer_call_agent_' . $yogesh->id;
            } else {
                $clients[] = str_replace('-', '_', Str::slug($yogesh->name));
            }
        }

        return $clients;
    }

    /**
     * Incoming calls gathering
     *
     * @param object $response
     * @param mixed  $speech
     *
     * @return void
     *
     * @uses Config
     */
    private function createIncomingGather(Request $request, $response, $speech)
    {
        Log::channel('customerDnd')->info('Gathering action...');

        $action_url = 'https://' . $request->getHost() . '/twilio/gatherAction';
        $gather     = $response->gather([
            'action' => $action_url,
        ]);
        $gather->play('https://' . $request->getHost() . '/busy_ring.mp3');
    }

    /**
     * Handle Dial call callback
     *
     * @param Request $request Request
     *
     * @return \Illuminate\Http\Response
     *
     * @Rest\Post("twilio/handleDialCallStatus")
     *
     * @uses CallHistory
     * @uses Customer
     * @uses Log
     */
    public function handleDialCallStatus(Request $request)
    {
        if (isset($request->CallDuration) && $request->CallDuration == 1) {
            \Cache::forever('fdfdas', $request->all());
            $request->merge(['status' => 'missed']);
            $this->eventsFromFront($request);
        }
        $conditionsWithIds = TwilioCondition::where('status', 1)->pluck('id', 'condition')->toArray();
        $conditions        = array_keys($conditionsWithIds);
        $response          = new VoiceResponse();
        $callStatus        = $request->input('DialCallStatus');
        $recordurl         = 'https://' . $request->getHost() . '/twilio/storerecording';
        Log::channel('customerDnd')->info('Current Call Status ' . $callStatus);

        if ($callStatus === 'completed') {
            $recordurl = 'https://' . $request->getHost() . '/twilio/storetranscript';
            Log::channel('customerDnd')->info('Trasncript Call back url ' . $recordurl);
            $response->record(['transcribeCallback' => $recordurl]);
        } else {
            $params = [
                'twilio_call_sid' => $request->input('Caller'),
                'message'         => 'Missed Call',
                'caller_sid'      => $request->input('CallSid'),
            ];

            //Add Customer If Not Exist in

            $check_customer = Customer::where('phone', 'LIKE', str_replace('+', '', $request->input('Caller')))->first();

            if (! $check_customer && in_array('check_customer', $conditions)) {
                $get_twilio_active_number = TwilioActiveNumber::where('phone_number', $request->input('Called'))->first();
                $store_web_twilio_no      = StoreWebsiteTwilioNumber::where('twilio_active_number_id', $get_twilio_active_number->id)->first();

                $defaultWhatapp = $task_info = \DB::table('whatsapp_configs')
                    ->select('*')
                    ->whereRaw('find_in_set(' . CustomerController::DEFAULT_FOR . ',default_for)')
                    ->first();
                $defaultNo = $defaultWhatapp->number;

                $add_customer = [
                    'name'             => str_replace('+', '', $request->input('Caller')),
                    'phone'            => str_replace('+', '', $request->input('Caller')),
                    'whatsapp_number'  => $defaultNo,
                    'store_website_id' => $store_web_twilio_no->store_website_id,
                ];

                Customer::create($add_customer);
            }
            Log::channel('customerDnd')->info('-----222222----- ');

            CallBusyMessage::create($params);

            Log::channel('customerDnd')->info(' Missed Call saved');
            Log::channel('customerDnd')->info('-----SID----- ' . $request->input('CallSid'));

            $this->createIncomingGather($request, $response, 'Please dial 0 for leave message');
        }

        if ($customer = Customer::where('phone', 'LIKE', str_replace('+91', '', $request->input('Caller')))->first()) {
            $params = [
                'customer_id' => $customer->id,
                'status'      => '',
            ];

            CallHistory::create($params);
        }

        return $response;
    }

    /**
     * Handle Dial call callback
     *
     * @param Request $request Request
     *
     * @return \Illuminate\Http\Response
     *
     * @Rest\Post("twilio/handleOutgoingDialCallStatus")
     *
     * @uses CallHistory
     * @uses Customer
     * @uses ChatMessage
     * @uses Log
     */
    public function handleOutgoingDialCallStatus(Request $request)
    {
        $response   = new VoiceResponse();
        $callStatus = $request->input('DialCallStatus');
        Log::channel('customerDnd')->info('Current Outgoing Call Status ' . $callStatus);

        $conditionsWithIds = TwilioCondition::where('status', 1)->pluck('id', 'condition')->toArray();
        $conditions        = array_keys($conditionsWithIds);

        if ($callStatus == 'busy' || $callStatus == 'no-answer' && in_array('callStatus', $conditions)) {
            if ($customer = Customer::where('phone', $request->phone_number)->first()) {
                $params = [
                    'number'      => null,
                    'message'     => 'Greetings from Solo Luxury, our Solo Valets were trying to get in touch with you but were unable to get through, you can call us on 0008000401700. Please do not use +91 when calling  as it does not connect to our toll free number.',
                    'customer_id' => $customer->id,
                    'approved'    => 1,
                    'status'      => 2,
                ];

                ChatMessage::create($params);

                app(\App\Http\Controllers\WhatsAppController::class)->sendWithWhatsApp($customer->phone, $customer->whatsapp_number, $params['message']);
            }

            if ($request->input('From') != null || $request->input('From') != null || $request->input('From') != '') {
                $Caller = $request->input('From');
            } else {
                $Caller = $request->input('Caller');
            }

            $user_data = explode(':', $Caller);
            $user      = $user_data[1];

            $current_status = 1;
            $status         = 0;
            $agent_name_id  = $user;

            $check_agent = AgentCallStatus::where('agent_name_id', $agent_name_id)->first();
            if ($check_agent != null && in_array('check_agent', $conditions)) {
                AgentCallStatus::where('agent_name_id', $agent_name_id)
                    ->where('status', $current_status)
                    ->update(['status' => $status]);
            }
        }

        if ($customer = Customer::where('phone', 'LIKE', str_replace('+91', '', $request->phone_number))->first()) {
            if ($callStatus == null || $callStatus == '' && in_array('callStatus', $conditions)) {
                $callStatus = 'missed';
            }

            $params = [
                'customer_id' => $customer->id,
                'status'      => $callStatus,
            ];

            CallHistory::create($params);
        }

        return $response;
    }

    /**
     * Store a new recording from callback
     *
     * @param Request $request Request
     *
     * @return \Illuminate\Http\Response
     *
     * @Rest\Post("twilio/storerecording")
     *
     * @uses CallBusyMessage
     */
    public function storeRecording(Request $request)
    {
        Log::channel('customerDnd')->info('storeRecording ');

        $url    = $request->get('RecordingUrl');
        $sid    = $request->get('CallSid');
        $params = [
            'recording_url'   => $url,
            'twilio_call_sid' => $sid,
            'callsid'         => $sid,
        ];

        CallRecording::create($params);

        Log::channel('customerDnd')->info('outgoingCall :: TwilioCallData Added');
        Log::channel('customerDnd')->info($request->get('CallSid') . ' | ' . $request->get('AccountSid') . ' | ' . $request->get('Caller') . ' | ' . $request->get('Called') . ' | ' . $request->get('AuthId'));

        $call_history = TwilioCallData::updateOrCreate([
            'call_sid' => ($request->get('CallSid') ?? 0),
        ], [
            'call_sid'     => ($request->get('CallSid') ?? 0),
            'account_sid'  => ($request->get('AccountSid') ?? 0),
            'from'         => $request->get('Caller'),
            'to'           => $request->get('Called'),
            'call_data'    => 'leave_message',
            'aget_user_id' => null,
        ]);

        TwilioCallWaiting::where('call_sid', $request->get('CallSid'))->delete();
    }

    /**
     * Replies with a hangup
     *
     * @return \Illuminate\Http\Response
     *
     * @Rest\Post("/twilio/hangup")
     */
    public function showHangup(Request $request)
    {
        // Create Twilio Log
        $inputArray = $request->input();
        $this->createTwilioLog($request, $inputArray, 'Call is going to hungup ');
        $response = new VoiceResponse();
        $response->Say(
            'Thank you for your message. Goodbye',
            ['voice' => 'alice', 'language' => 'en-GB']
        );
        $response->hangup();

        return $response;
    }

    public function manageTwilioAccounts(Request $request)
    {
        $all_accounts = TwilioCredential::where(['status' => 1])->where('twiml_app_sid', '!=', null);

        $twilio_user_list = User::LeftJoin('twilio_agents', 'user_id', 'users.id')->select('users.*', 'twilio_agents.status')->orderBy('users.name', 'ASC')->get();

        $store_websites = StoreWebsite::LeftJoin('twilio_sitewise_times as tst', 'tst.store_website_id', 'store_websites.id')->select('store_websites.*', 'tst.start_time', 'tst.end_time')->orderBy('store_websites.website', 'ASC')->get();

        $conditionsWithIds = TwilioCondition::where('status', 1)->pluck('id', 'condition')->toArray();
        $conditions        = array_keys($conditionsWithIds);

        $twilio_key_options_data = TwilioKeyOption::get();
        $twilio_key_arr          = [];

        $twiliconditionsemails = TwilioCredential::distinct('twilio_email')->pluck('twilio_email');
        $twiliAccountIds       = TwilioCredential::distinct('account_id')->pluck('account_id');
        $twiliAuthTokens       = TwilioCredential::distinct('auth_token')->pluck('auth_token');

        if ($request->twilicondition_email !== null) {
            $all_accounts = $all_accounts->WhereIn('twilio_email', $request->twilicondition_email);
        }
        if ($request->account_id !== null) {
            $all_accounts = $all_accounts->WhereIn('account_id', $request->account_id);
        }
        if ($request->auth_token !== null) {
            $all_accounts = $all_accounts->WhereIn('auth_token', $request->auth_token);
        }
        if ($request->recovery_code !== null) {
            $all_accounts = $all_accounts->where('twilio_recovery_code', 'LIKE', '%' . $request->recovery_code . '%');
        }

        $all_accounts = $all_accounts->get();

        if ($twilio_key_options_data && in_array('twilio_key_options_data', $conditions)) {
            foreach ($twilio_key_options_data as $key => $value) {
                $twilio_key_arr[$value->key]['option']  = $value->description;
                $twilio_key_arr[$value->key]['desc']    = $value->details;
                $twilio_key_arr[$value->key]['message'] = $value->message;
            }
        }

        return view('twilio.manage-accounts', compact('all_accounts', 'twilio_user_list', 'store_websites', 'twilio_key_arr', 'twiliconditionsemails', 'twiliAccountIds', 'twiliAuthTokens'));
    }

    public function addAccount(Request $request)
    {
        try {
            if (isset($request->id)) {
                //then update

                TwilioCredential::where('id', '=', $request->id)->update([
                    'twilio_email'         => $request->email,
                    'account_id'           => $request->account_id,
                    'auth_token'           => $request->auth_token,
                    'twilio_recovery_code' => $request->recovery_code,
                ]);

                return redirect()->back()->with('success', 'Twilio details updated successfully');
            } else {
                $create_new = TwilioCredential::create([
                    'twilio_email'         => $request->email,
                    'account_id'           => $request->account_id,
                    'auth_token'           => $request->auth_token,
                    'twilio_recovery_code' => $request->recovery_code,
                ]);

                //Create TwiML Apps - START
                $sid               = $request->account_id;
                $token             = $request->auth_token;
                $twilio            = new Client($sid, $token);
                $voice_request_url = 'https://' . $request->getHost() . '/twilio/outgoing';

                $application = $twilio->applications
                    ->create([
                        'voiceMethod'  => 'GET',
                        'voiceUrl'     => $voice_request_url,
                        'friendlyName' => 'voice call',
                    ]
                    );

                if ($application) {
                    TwilioCredential::where('id', '=', $create_new->id)->update(['twiml_app_sid' => $application->sid]);
                }
                //Create TwiML Apps - END

                //Get Phone Number - START
                $local = $twilio->availablePhoneNumbers('US')
                    ->local
                    ->read(['areaCode' => 510], 20);

                $phone_number = $local[0]->phoneNumber;

                $voice_call_comes_url    = 'https://' . $request->getHost() . '/twilio/ivr';
                $call_status_changes_url = 'https://' . $request->getHost() . '/twilio/handleDialCallStatus';

                $incoming_phone_number = $twilio->incomingPhoneNumbers
                    ->create(['phoneNumber' => $phone_number]);

                //Get Phone Number - END
                TwilioAccountLog::log($request->email, $request->account_id, 'New twilio account added successfully');

                return redirect()->back()->with('success', 'New twilio account added successfully');
            }
        } catch (Exception $e) {
            TwilioAccountLog::log($request->email, $request->account_id, $e->getMessage());

            return redirect()->back()->with('error', $e->getMessage());
        }
    }

    public function deleteAccount($id)
    {
        try {
            TwilioCredential::where('id', '=', $id)->update(['status' => 0]);

            return redirect()->back()->with('success', 'Twilio account deleted successfully');
        } catch (Exception $e) {
            return redirect()->back()->with('error', $e->getMessage());
        }
    }

    /**
     * This function is use to getting detail for selected email address from the Twilio number
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function manageNumbersPopup($id)
    {
        try {
            $account_id = $id;
            //get account details
            $check_account       = TwilioCredential::where(['id' => $id])->where('twiml_app_sid', '!=', null)->firstOrFail();
            $numbers             = TwilioActiveNumber::where('twilio_credential_id', '=', $id)->with('assigned_stores.store_website')->get();
            $store_websites      = StoreWebsite::all();
            $customer_role_users = RoleUser::where(['role_id' => 1])->with('user')->get();
            $workspace           = TwilioWorkspace::where('twilio_credential_id', '=', $id)->where('deleted', 0)->get();
            $twilio_user_list    = User::LeftJoin('twilio_agents', 'user_id', 'users.id')->select('users.*', 'twilio_agents.status')->orderBy('users.name', 'ASC')->get();
            $worker              = TwilioWorker::join('twilio_workspaces', 'twilio_workspaces.id', 'twilio_workers.twilio_workspace_id')
                ->where('twilio_workers.twilio_credential_id', '=', $id)
                ->where('twilio_workers.deleted', 0)
                ->select('twilio_workspaces.workspace_name', 'twilio_workers.*')
                ->get();

            $activities = TwilioActivity::join('twilio_workspaces', 'twilio_workspaces.id', 'twilio_activities.twilio_workspace_id')
                ->where('twilio_activities.twilio_credential_id', '=', $id)
                ->where('twilio_activities.deleted', 0)
                ->select('twilio_workspaces.workspace_name', 'twilio_activities.*')
                ->get();
            foreach ($activities as $activity) {
                if ($activity['availability'] == 1) {
                    $activity['availability'] = 'True';
                } else {
                    $activity['availability'] = 'False';
                }
            }
            $workflows = TwilioWorkflow::join('twilio_workspaces', 'twilio_workspaces.id', 'twilio_workflows.twilio_workspace_id')
                ->where('twilio_workflows.twilio_credential_id', '=', $id)
                ->where('twilio_workflows.deleted', 0)
                ->select('twilio_workspaces.workspace_name', 'twilio_workflows.*')
                ->get();

            $taskqueue = TwilioTaskQueue::join('twilio_workspaces', 'twilio_workspaces.id', 'twilio_task_queue.twilio_workspace_id')
                ->where('twilio_task_queue.twilio_credential_id', '=', $id)
                ->where('twilio_task_queue.deleted', 0)
                ->select('twilio_workspaces.workspace_name', 'twilio_task_queue.*')
                ->get();

            return view('twilio.manage-numbers-list', compact('numbers', 'store_websites', 'customer_role_users', 'account_id', 'workspace', 'worker', 'activities', 'workflows', 'taskqueue', 'twilio_user_list'));
        } catch (Exception $e) {
            return $e->getMessage();
        }
    }

    public function manageNumbers($id)
    {
        try {
            $account_id = $id;
            //get account details
            $check_account       = TwilioCredential::where(['id' => $id])->where('twiml_app_sid', '!=', null)->firstOrFail();
            $numbers             = TwilioActiveNumber::where('twilio_credential_id', '=', $id)->with('assigned_stores.store_website')->get();
            $store_websites      = StoreWebsite::all();
            $customer_role_users = RoleUser::where(['role_id' => 1])->with('user')->get();
            $workspace           = TwilioWorkspace::where('twilio_credential_id', '=', $id)->where('deleted', 0)->get();

            $twilio_user_list = User::LeftJoin('twilio_agents', 'user_id', 'users.id')->select('users.*', 'twilio_agents.status')->orderBy('users.name', 'ASC')->get();

            $priority = TwilioPriority::where('twilio_priorities.account_id', '=', $id)
                ->where('twilio_priorities.deleted_at', null)
                ->select('twilio_priorities.*')
                ->orderBy('twilio_priorities.priority_no')
                ->get();

            $worker = TwilioWorker::join('twilio_workspaces', 'twilio_workspaces.id', 'twilio_workers.twilio_workspace_id')
                ->where('twilio_workers.twilio_credential_id', '=', $id)
                ->where('twilio_workers.deleted', 0)
                ->select('twilio_workspaces.workspace_name', 'twilio_workers.*')
                ->get();

            $activities = TwilioActivity::join('twilio_workspaces', 'twilio_workspaces.id', 'twilio_activities.twilio_workspace_id')
                ->where('twilio_activities.twilio_credential_id', '=', $id)
                ->where('twilio_activities.deleted', 0)
                ->select('twilio_workspaces.workspace_name', 'twilio_activities.*')
                ->get();
            foreach ($activities as $activity) {
                if ($activity['availability'] == 1) {
                    $activity['availability'] = 'True';
                } else {
                    $activity['availability'] = 'False';
                }
            }
            $workflows = TwilioWorkflow::join('twilio_workspaces', 'twilio_workspaces.id', 'twilio_workflows.twilio_workspace_id')
                ->where('twilio_workflows.twilio_credential_id', '=', $id)
                ->where('twilio_workflows.deleted', 0)
                ->select('twilio_workspaces.workspace_name', 'twilio_workflows.*')
                ->get();

            $taskqueue = TwilioTaskQueue::join('twilio_workspaces', 'twilio_workspaces.id', 'twilio_task_queue.twilio_workspace_id')
                ->where('twilio_task_queue.twilio_credential_id', '=', $id)
                ->where('twilio_task_queue.deleted', 0)
                ->select('twilio_workspaces.workspace_name', 'twilio_task_queue.*')
                ->get();

            return view('twilio.manage-numbers', compact('numbers', 'store_websites', 'customer_role_users', 'account_id', 'workspace', 'worker', 'priority', 'activities', 'workflows', 'taskqueue', 'twilio_user_list'));
        } catch (Exception $e) {
            return redirect()->back()->with('error', $e->getMessage());
        }
    }

    /**
     * THis function is use for the list messages on seperate page for each website.
     *
     * @params $id [int]
     *
     * retuen View
     *
     * @param mixed $id
     */
    public function manageAllNumbers($id)
    {
        try {
            if ($id != 'none') {
                $account_id = $id;
                //get account details
                $check_account       = TwilioCredential::where(['id' => $id])->where('twiml_app_sid', '!=', null)->firstOrFail();
                $numbers             = TwilioActiveNumber::where('twilio_credential_id', '=', $id)->with('assigned_stores.store_website')->get();
                $store_websites      = StoreWebsite::all();
                $customer_role_users = RoleUser::where(['role_id' => 1])->with('user')->get();
                $workspace           = TwilioWorkspace::where('twilio_credential_id', '=', $id)->where('deleted', 0)->get();

                $twilio_user_list = User::LeftJoin('twilio_agents', 'user_id', 'users.id')->select('users.*', 'twilio_agents.status')->orderBy('users.name', 'ASC')->get();

                $priority = TwilioPriority::where('twilio_priorities.account_id', '=', $id)
                    ->where('twilio_priorities.deleted_at', null)
                    ->select('twilio_priorities.*')
                    ->get();

                $worker = TwilioWorker::join('twilio_workspaces', 'twilio_workspaces.id', 'twilio_workers.twilio_workspace_id')
                    ->where('twilio_workers.twilio_credential_id', '=', $id)
                    ->where('twilio_workers.deleted', 0)
                    ->select('twilio_workspaces.workspace_name', 'twilio_workers.*')
                    ->get();

                $activities = TwilioActivity::join('twilio_workspaces', 'twilio_workspaces.id', 'twilio_activities.twilio_workspace_id')
                    ->where('twilio_activities.twilio_credential_id', '=', $id)
                    ->where('twilio_activities.deleted', 0)
                    ->select('twilio_workspaces.workspace_name', 'twilio_activities.*')
                    ->get();
                foreach ($activities as $activity) {
                    if ($activity['availability'] == 1) {
                        $activity['availability'] = 'True';
                    } else {
                        $activity['availability'] = 'False';
                    }
                }
                $workflows = TwilioWorkflow::join('twilio_workspaces', 'twilio_workspaces.id', 'twilio_workflows.twilio_workspace_id')
                    ->where('twilio_workflows.twilio_credential_id', '=', $id)
                    ->where('twilio_workflows.deleted', 0)
                    ->select('twilio_workspaces.workspace_name', 'twilio_workflows.*')
                    ->get();

                $taskqueue = TwilioTaskQueue::join('twilio_workspaces', 'twilio_workspaces.id', 'twilio_task_queue.twilio_workspace_id')
                    ->where('twilio_task_queue.twilio_credential_id', '=', $id)
                    ->where('twilio_task_queue.deleted', 0)
                    ->select('twilio_workspaces.workspace_name', 'twilio_task_queue.*')
                    ->get();

                return view('twilio.manage_all_numbers', compact('numbers', 'store_websites', 'customer_role_users', 'account_id', 'workspace', 'worker', 'priority', 'activities', 'workflows', 'taskqueue', 'twilio_user_list'));
            } else {
                return redirect()->route('twilio-manage-accounts')->with('error', 'Please slect from number row. ');
            }
        } catch (Exception $e) {
            return redirect()->back()->with('error', $e->getMessage());
        }
    }

    public function getTwilioActiveNumbers($account_id)
    {
        try {
            //get account details
            $check_account = TwilioCredential::where(['id' => $account_id])->where('twiml_app_sid', '!=', null)->firstOrFail();
            $url           = 'https://api.twilio.com/2010-04-01/Accounts/' . $check_account->account_id . '/IncomingPhoneNumbers.json?Beta=false&PageSize=50&Page=0';
            $result        = TwilioHelper::curlGetRequest($url, $check_account->account_id, $check_account->auth_token);
            $result        = json_decode($result);

            if (count($result->incoming_phone_numbers) > 0) {
                $this->saveNumber($result->incoming_phone_numbers, $account_id);
            }
            if ($result->end > 0) {
                for ($i = 1; $i <= $result->end; $i++) {
                    $url    = 'https://api.twilio.com/2010-04-01/Accounts/' . $check_account->account_id . '/IncomingPhoneNumbers.json?Beta=false&PageSize=50&Page=' . $i;
                    $result = TwilioHelper::curlGetRequest($url, $check_account->account_id, $check_account->auth_token);
                    $result = json_decode($result);
                    if (count($result->incoming_phone_numbers) > 0) {
                        $this->saveNumber($result->incoming_phone_numbers, $account_id);
                    }
                }
            }

            return redirect()->back()->with('success', 'Number saved successfully');
        } catch (Exception $e) {
            return redirect()->back()->with('error', 'Something went wrong');
        }
    }

    public function saveNumber($incoming_phone_numbers, $account_id)
    {
        try {
            foreach ($incoming_phone_numbers as $numbers) {
                //check if no. already exists then update
                $find_number = TwilioActiveNumber::where('phone_number', '=', $numbers->phone_number)->where('twilio_credential_id', $account_id)->first();
                if ($find_number) {
                    $find_number->update([
                        'sid'                   => $numbers->sid,
                        'account_sid'           => $numbers->account_sid,
                        'friendly_name'         => $numbers->friendly_name,
                        'phone_number'          => $numbers->phone_number,
                        'voice_url'             => $numbers->voice_url,
                        'date_created'          => $numbers->date_created,
                        'date_updated'          => $numbers->date_updated,
                        'sms_url'               => $numbers->sms_url,
                        'voice_receive_mode'    => isset($numbers->voice_receive_mode) ?? 'voice',
                        'api_version'           => $numbers->api_version,
                        'voice_application_sid' => $numbers->voice_application_sid,
                        'sms_application_sid'   => $numbers->sms_application_sid,
                        'trunk_sid'             => $numbers->trunk_sid,
                        'emergency_status'      => $numbers->emergency_status,
                        'emergency_address_id'  => $numbers->emergency_address_sid,
                        'address_sid'           => $numbers->address_sid,
                        'identity_sid'          => $numbers->identity_sid,
                        'bundle_sid'            => $numbers->bundle_sid,
                        'uri'                   => $numbers->uri,
                        'status'                => $numbers->status,
                        'twilio_credential_id'  => $account_id,
                    ]);
                } else {
                    TwilioActiveNumber::create([
                        'sid'                   => $numbers->sid,
                        'account_sid'           => $numbers->account_sid,
                        'friendly_name'         => $numbers->friendly_name,
                        'phone_number'          => $numbers->phone_number,
                        'voice_url'             => $numbers->voice_url,
                        'date_created'          => $numbers->date_created,
                        'date_updated'          => $numbers->date_updated,
                        'sms_url'               => $numbers->sms_url,
                        'voice_receive_mode'    => isset($numbers->voice_receive_mode) ?? 'voice',
                        'api_version'           => $numbers->api_version,
                        'voice_application_sid' => $numbers->voice_application_sid,
                        'sms_application_sid'   => $numbers->sms_application_sid,
                        'trunk_sid'             => $numbers->trunk_sid,
                        'emergency_status'      => $numbers->emergency_status,
                        'emergency_address_id'  => $numbers->emergency_address_sid,
                        'address_sid'           => $numbers->address_sid,
                        'identity_sid'          => $numbers->identity_sid,
                        'bundle_sid'            => $numbers->bundle_sid,
                        'uri'                   => $numbers->uri,
                        'status'                => $numbers->status,
                        'twilio_credential_id'  => $account_id,
                    ]);
                }
            }

            return true;
        } catch (Exception $e) {
            return false;
        }
    }

    public function getWorkflowList(Request $request)
    {
        try {
            $workspace = TwilioWorkspace::where('workspace_sid', $request->workspace_sid)->firstOrFail();

            $workflows = TwilioWorkflow::where('twilio_workspace_id', $workspace->id)->where('deleted', 0)->get();

            return response()->json([
                'workflows' => $workflows,
            ]);
        } catch (Exception $e) {
            return response()->json([
                'message' => 'Please select valid Workflow',
            ], 500);
        }
    }

    public function assignTwilioNumberToStoreWebsite(Request $request)
    {
        $conditionsWithIds = TwilioCondition::where('status', 1)->pluck('id', 'condition')->toArray();
        $conditions        = array_keys($conditionsWithIds);
        //check if same no. assigned to some store website
        try {
            $check_rec = StoreWebsiteTwilioNumber::where('store_website_id', '=', $request->store_website_id)
                ->first();

            if ($check_rec && in_array('check_rec', $conditions)) {
                if ($check_rec->store_website_id == $request->store_website_id && $check_rec->twilio_credentials_id != $request->credential_id) {
                    return new JsonResponse(['status' => 0, 'message' => 'Site already assigned to another Twilio Account']);
                }
            }
        } catch (Exception $e) {
            //do nothing
        }

        try {
            //create new record
            $number_details = TwilioActiveNumber::where('id', $request->twilio_number_id)->first();
            if ($number_details) {
                $number_details->workspace_sid = $request->workspace_sid;
                $number_details->workflow_sid  = $request->workflow_sid;
                $number_details->save();
            }

            $storeWebsiteProduct = StoreWebsiteTwilioNumber::updateOrCreate([
                'twilio_active_number_id' => $request->twilio_number_id,
                'twilio_credentials_id'   => $request->credential_id,
            ], [
                'store_website_id'                      => $request->store_website_id,
                'twilio_active_number_id'               => $request->twilio_number_id,
                'twilio_credentials_id'                 => $request->credential_id,
                'message_available'                     => $request->message_available,
                'message_not_available'                 => $request->message_not_available,
                'end_work_message'                      => $request->end_work_message,
                'message_busy'                          => $request->message_busy,
                'category_menu_message'                 => $request->category_menu_message,
                'sub_category_menu_message'             => $request->sub_category_menu_message,
                'speech_response_not_available_message' => $request->speech_response_not_available_message,
            ]);

            return new JsonResponse(['status' => 1, 'message' => 'Number assigned to store website successfully']);
        } catch (Exception $e) {
            return new JsonResponse(['status' => 0, 'message' => 'Something went wrong']);
        }
    }

    public function twilioCallForward(Request $request)
    {
        $startTime       = date('Y-m-d H:i:s', LARAVEL_START);
        $number_details  = TwilioActiveNumber::where('id', $request->twilio_number_id)->first();
        $account_details = TwilioCredential::where('id', $request->twilio_account_id)->where('twiml_app_sid', '!=', null)->first();
        try {
            TwilioCallForwarding::where(['forwarding_on' => $request->agent_id])->firstOrFail();

            return new JsonResponse(['status' => 0, 'message' => 'Agent already assigned for other no.']);
        } catch (Exception $e) {
        }
        try {
            //get number details
            $agent_details = User::where('id', $request->agent_id)->first();
            TwilioCallForwarding::where(['twilio_number' => $number_details->phone_number])->delete();
            TwilioCallForwarding::create([
                'twilio_number_sid'       => $number_details->sid,
                'twilio_number'           => $number_details->phone_number,
                'forwarding_on'           => $request->agent_id,
                'twilio_active_number_id' => $request->twilio_number_id,
            ]);
            $base_url = config('env.APP_URL');
            //update webhook url on twilio console using api
            $ch  = curl_init();
            $url = "https://api.twilio.com/2010-04-01/Accounts/' . $account_details->account_id . '/IncomingPhoneNumbers/' . $number_details->sid . '.json'";
            curl_setopt($ch, CURLOPT_URL, 'https://api.twilio.com/2010-04-01/Accounts/' . $account_details->account_id . '/IncomingPhoneNumbers/' . $number_details->sid . '.json');
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
            curl_setopt($ch, CURLOPT_POST, 1);
            curl_setopt($ch, CURLOPT_POSTFIELDS, 'VoiceUrl=' . $base_url . '/run-webhook/' . $number_details->sid . '');
            curl_setopt($ch, CURLOPT_USERPWD, $account_details->account_id . ':' . $account_details->auth_token);
            $httpcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
            $result   = curl_exec($ch);
            if (curl_errno($ch)) {
                echo 'Error:' . curl_error($ch);
            }
            curl_close($ch);

            LogRequest::log($startTime, $url, 'POST', json_encode(['VoiceUrl=' . $base_url . '/run-webhook/' . $number_details->sid]), json_decode($result), $httpcode, \App\Http\Controllers\TwilioController::class, 'twilioCallForward');

            return new JsonResponse(['status' => 1, 'message' => 'Number forwarded to agent successfully.']);
        } catch (Exception $e) {
            return new JsonResponse(['status' => 0, 'message' => $e->getMessage()]);
        }
    }

    public function runWebhook($sid)
    {
        Log::channel('customerDnd')->info('Webhook called successfully');
        $twiml = new VoiceResponse();
        //get forwarded no. of this twilio_sid
        $forwarding = TwilioCallForwarding::where('twilio_number_sid', '=', $sid)->first();
        Log::channel('customerDnd')->info('forwarding number details ' . $forwarding->forwarding_on);
        Log::channel('customerDnd')->info('number dialled');
        $twiml->Say('Please wait , we are connecting your call');
        $twiml->dial($forwarding->forwarding_on, ['record' => 'record-from-ringing-dual']);
        $twiml->hangup();
        echo $twiml;
        exit;
    }

    public function callManagement(Request $request)
    {
        $twilio_accounts = TwilioCredential::where('status', true)->where('twiml_app_sid', '!=', null)->get();
        $id              = $request->get('id');
        if ($id != null) {
            $twilio_account_details = TwilioCredential::where(['id' => $id])->with('numbers.assigned_stores', 'numbers.forwarded.forwarded_number_details.user_availabilities')->first();
            $customer_role_users    = RoleUser::where(['role_id' => 50])->with('user')->get();

            return view('twilio.manage-calls', compact('twilio_accounts', 'customer_role_users', 'twilio_account_details'));
        }

        return view('twilio.manage-calls', compact('twilio_accounts'));
    }

    public function getIncomingList(Request $request, $number_sid, $phone_number)
    {
        try {
            $id             = $request->get('id');
            $check_account  = TwilioCredential::where(['id' => $id])->where('twiml_app_sid', '!=', null)->firstOrFail();
            $sid            = $check_account->account_id;
            $token          = $check_account->auth_token;
            $url            = 'https://api.twilio.com/2010-04-01/Accounts/' . $sid . '/Calls.json?To=' . $phone_number;
            $incoming_calls = TwilioHelper::curlGetRequest($url, $sid, $token);
            $incoming_calls = json_decode($incoming_calls);

            return view('twilio.incoming-calls', compact('incoming_calls', 'phone_number'));
        } catch (Exception $e) {
            dd($e->getMessage());
        }
    }

    public function incomingCallRecording(Request $request, $call_sid)
    {
        $id                        = $request->get('id');
        $check_account             = TwilioCredential::where(['id' => $id])->where('twiml_app_sid', '!=', null)->firstOrFail();
        $sid                       = $check_account->account_id;
        $token                     = $check_account->auth_token;
        $url                       = 'https://api.twilio.com/2010-04-01/Accounts/' . $sid . '/Calls/' . $call_sid . '/Recordings.json';
        $incoming_calls_recordings = TwilioHelper::curlGetRequest($url, $sid, $token);
        $incoming_calls_recordings = json_decode($incoming_calls_recordings);
        if (count($incoming_calls_recordings->recordings) > 0) {
            $rec_sid = $incoming_calls_recordings->recordings[0]->sid;
        } else {
            return redirect()->back()->with('error', 'Recording not found');
        }
        $file = 'https://api.twilio.com/2010-04-01/Accounts/' . $sid . '/Recordings/' . $rec_sid . '.mp3';
        header('Content-type: application/x-file-to-save');
        header('Content-Disposition: attachment; filename=' . basename($file));
        readfile($file);
        exit;
    }

    public function CallRecordings($id)
    {
        try {
            $check_account = TwilioCredential::where(['id' => $id])->where('twiml_app_sid', '!=', null)->firstOrFail();
            $sid           = $check_account->account_id;
            $token         = $check_account->auth_token;
            $twilio        = new Client($sid, $token);
            $url           = 'https://api.twilio.com/2010-04-01/Accounts/' . $sid . '/Recordings.json?__referrer=runtime&Format=json&PageSize=100&Page=0';
            $result        = TwilioHelper::curlGetRequest($url, $sid, $token);
            $result        = json_decode($result);

            return view('twilio.manage-recordings', compact('result', 'id'));
        } catch (Exception $e) {
            return redirect('twilio/manage-numbers')->withErrors(['Undefined twilio account']);
        }
    }

    public function downloadRecording(Request $request, $recording_id)
    {
        $id            = $request->get('id');
        $check_account = TwilioCredential::where(['id' => $id])->where('twiml_app_sid', '!=', null)->firstOrFail();
        $sid           = $check_account->account_id;
        $file          = 'https://api.twilio.com/2010-04-01/Accounts/' . $sid . '/Recordings/' . $recording_id . '.mp3';
        header('Content-type: application/x-file-to-save');
        header('Content-Disposition: attachment; filename=' . basename($file));
        readfile($file);
        exit;
    }

    public function eventsFromFront(Request $request)
    {
        // Create Twilio Log
        $inputArray = $request->input();
        $this->createTwilioLog($request, $inputArray, 'Twilio From Event Called here ');
        $status       = $request->status ?? null;
        $phone        = str_replace('+', '', $request->From ?? '+');
        $call_id      = $request->CallSid;
        $customer     = Customer::where('phone', $phone)->first();
        $call_history = CallHistory::where('call_id', $call_id)->first();
        if (! $call_history) {
            if ($customer) {
                $history                   = new CallHistory();
                $history->customer_id      = $customer->id;
                $history->status           = $status;
                $history->call_id          = $call_id;
                $history->store_website_id = $this->getStoreWebsiteId($request);
                $history->save();
            }

            return response()->json(true);
        }

        return response()->json(false);
    }

    public function setStorePhoneNumberAndGetWebsite($sid, $phone)
    {
        $twilio = TwilioCredential::where('account_id', $sid)->where('twiml_app_sid', '!=', null)->first();
        if ($twilio) {
            $url    = 'https://api.twilio.com/2010-04-01/Accounts/' . $sid . '/IncomingPhoneNumbers.json';
            $result = TwilioHelper::curlPostRequest($url, 'PhoneNumber=' . $phone, $sid . ':' . $twilio->auth_token);
            $result = json_decode($result);
            if ($result->sid) {
                $active_number                        = new TwilioActiveNumber();
                $active_number->sid                   = $result->sid ?? null;
                $active_number->account_sid           = $result->account_sid ?? null;
                $active_number->friendly_name         = $result->friendly_name ?? null;
                $active_number->phone_number          = $result->phone_number ?? null;
                $active_number->voice_url             = $result->voice_url ?? null;
                $active_number->date_created          = $result->date_created ?? null;
                $active_number->date_updated          = $result->date_updated ?? null;
                $active_number->sms_url               = $result->sms_url ?? null;
                $active_number->voice_receive_mode    = $result->voice_receive_mode ?? null;
                $active_number->api_version           = $result->api_version ?? null;
                $active_number->voice_application_sid = $result->voice_application_sid ?? null;
                $active_number->sms_application_sid   = $result->sms_application_sid ?? null;
                $active_number->trunk_sid             = $result->trunk_sid ?? null;
                $active_number->emergency_status      = $result->emergency_status ?? null;
                $active_number->emergency_address_sid = $result->emergency_address_sid ?? null;
                $active_number->address_sid           = $result->address_sid ?? null;
                $active_number->identity_sid          = $result->identity_sid ?? null;
                $active_number->bundle_sid            = $result->bundle_sid ?? null;
                $active_number->uri                   = $result->uri ?? null;
                $active_number->status                = $result->status ?? null;
                $active_number->twilio_credential_id  = $twilio->id;
                $active_number->save();
                $web_site = StoreWebsiteTwilioNumber::where('twilio_active_number_id', $active_number->id)->first();
                if ($web_site) {
                    return $web_site;
                } else {
                    $answer = $this->create_store_website_twilio_numbers($active_number);
                    if ($answer) {
                        return $answer;
                    }
                }
            }
        }

        return false;
    }

    public function create_store_website_twilio_numbers($active_number)
    {
        $store_web_site = new StoreWebsiteTwilioNumber();
        $web_site       = StoreWebsite::first();
        if (! $web_site) {
            return false;
        }
        $store_web_site->store_website_id        = $web_site->id;
        $store_web_site->twilio_active_number_id = $active_number->id;
        $store_web_site->save();

        return $store_web_site;
    }

    private function getStoreWebsiteId($request)
    {
        $to  = $request->To ?? '';
        $sid = $request->AccountSid ?? '';
        if ($to && $sid) {
            $active_number = TwilioActiveNumber::where('phone_number', $to)->first();
            if ($active_number) {
                $web_site = StoreWebsiteTwilioNumber::where('twilio_active_number_id', $active_number->id)->first();
                if ($web_site) {
                    return $web_site->store_website_id;
                } else {
                    $answer = $this->create_store_website_twilio_numbers($active_number);
                    if ($answer) {
                        return $answer->store_website_id;
                    }
                }
            } else {
                $answer = $this->setStorePhoneNumberAndGetWebsite($sid, $to);
                if ($answer) {
                    return $answer->store_website_id;
                }
            }
        }

        return null;
    }

    public function manageUsers(Request $request)
    {
        $website_id = $request->website_id;
        TwilioAgent::where('status', '1')->where('store_website_id', $website_id)->update(['status' => 0]);

        if ($request->form_data) {
            foreach ($request->form_data as $key => $value) {
                $storeWebsiteProduct = TwilioAgent::updateOrCreate([
                    'user_id'          => $value,
                    'store_website_id' => $website_id,
                ], [
                    'user_id'          => $value,
                    'store_website_id' => $website_id,
                    'status'           => 1,
                ]);
            }
        }

        return new JsonResponse(['status' => 1, 'message' => 'Twilio Agent Added Successfully']);
    }

    public function setWebsiteTime(Request $request)
    {
        $storeWebsiteProduct = TwilioSitewiseTime::updateOrCreate([
            'store_website_id' => $request->site_id,
        ], [
            'store_website_id' => $request->site_id,
            'start_time'       => $request->start_time,
            'end_time'         => $request->end_time,
        ]);

        return new JsonResponse(['status' => 1, 'message' => 'Time Set Successfully']);
    }

    public function getWebsiteAgent(Request $request)
    {
        $twilio_user         = User::orderBy('name')->get();
        $store_website_list  = [];
        $website_credentials = StoreWebsiteTwilioNumber::where('store_website_id', $request->website_id)->select('twilio_credentials_id')->first();
        if ($website_credentials) {
            $twilio_credentials_id = $website_credentials->twilio_credentials_id;
            $website_credentials   = StoreWebsiteTwilioNumber::where('twilio_credentials_id', $twilio_credentials_id)->get()->toArray();
            $store_website_list    = array_unique(array_column($website_credentials, 'store_website_id'));
        }

        $twilio_agent = TwilioAgent::get();

        $twilio_agent_arr = [];
        $twilio_user_list = [];

        foreach ($twilio_agent as $key => $val) {
            if (in_array($val->store_website_id, $store_website_list)) {
                $twilio_agent_arr[$val->user_id]['is_same_website'] = 1;
            }

            $twilio_agent_arr[$val->user_id]['status']  = $val->status;
            $twilio_agent_arr[$val->user_id]['website'] = $val->store_website_id;
        }

        foreach ($twilio_user as $key => $val) {
            if (array_key_exists($val->id, $twilio_agent_arr)) {
                $twilio_user_list[$key]                    = $val;
                $twilio_user_list[$key]['status']          = $twilio_agent_arr[$val->id]['status'];
                $twilio_user_list[$key]['website']         = $twilio_agent_arr[$val->id]['website'];
                $twilio_user_list[$key]['is_same_website'] = ($twilio_agent_arr[$val->id]['is_same_website'] ?? 0);
            } else {
                $twilio_user_list[$key] = $val;
            }
        }

        return new JsonResponse(['status' => 1, 'twilio_user_list' => $twilio_user_list]);
    }

    public function setTwilioKey(Request $request)
    {
        $check_this_action = TwilioKeyOption::where('website_store_id', $request->get('website_store_id'))
            ->where('description', $request->get('option'))
            ->first();
        $conditionsWithIds = TwilioCondition::where('status', 1)->pluck('id', 'condition')->toArray();
        $conditions        = array_keys($conditionsWithIds);

        if ($check_this_action && $request->get('up_id') == 0 && in_array('check_this_action', $conditions)) {
            return new JsonResponse(['status' => 0, 'message' => 'This Option Alreday Set in Another Key']);
        } else {
            $call_history = TwilioKeyOption::updateOrCreate([
                'key'              => $request->get('key_no'),
                'website_store_id' => $request->get('website_store_id'),
            ], [
                'key'              => $request->get('key_no'),
                'description'      => $request->get('option'),
                'details'          => $request->get('description'),
                'message'          => $request->get('message'),
                'website_store_id' => $request->get('website_store_id'),
            ]);

            return new JsonResponse(['status' => 1, 'message' => 'Option Set Successfully']);
        }
    }

    public function saveTwilioGreetingMessage(Request $request)
    {
        StoreWebsite::where('id', $request->get('website_store_id'))->update(['twilio_greeting_message' => $request->get('welcome_message')]);

        return new JsonResponse(['status' => 1, 'message' => 'Greeting message Set Successfully']);
    }

    public function getTwilioKeyData(Request $request)
    {
        $keydata = TwilioKeyOption::where('website_store_id', $request->website_store_id)->get();
        $web_id  = $request->website_store_id;

        $twilio_key_arr = [];
        $html           = '';
        if ($keydata) {
            foreach ($keydata as $key => $value) {
                $twilio_key_arr[$value->key]['option']  = $value->description;
                $twilio_key_arr[$value->key]['desc']    = $value->details;
                $twilio_key_arr[$value->key]['message'] = $value->message;
                $twilio_key_arr[$value->key]['id']      = $value->id;
            }

            $html = view('twilio.twilio_key_data', compact('twilio_key_arr', 'web_id'))->render(); //dd( $html);
        }
        $greetingMessage = StoreWebsite::where('id', $request->website_store_id)->pluck('twilio_greeting_message')->first();

        return ['html' => $html, 'welcome_message' => $greetingMessage];
    }

    public function getTwilioKeyDataOptions(Request $request)
    {
        $store_websites = StoreWebsite::LeftJoin('twilio_sitewise_times as tst', 'tst.store_website_id', 'store_websites.id')->select('store_websites.*', 'tst.start_time', 'tst.end_time')->orderBy('store_websites.website', 'ASC');
        if ($request->web_site_id) {
            $store_websites = $store_websites->where('store_websites.id', $request->web_site_id);
        }
        if ($request->website_ids) {
            $store_websites = $store_websites->whereIn('store_websites.id', $request->website_ids);
        }
        $store_websites = $store_websites->get();
        $web_id         = $request->website_store_id;
        $web_site_id    = $request->web_site_id;

        $twilio_key_arr = [];
        $html           = '';

        foreach ($store_websites as $store_website_data) {
            $keydata = TwilioKeyOption::where('website_store_id', $store_website_data->id)->get();

            foreach ($keydata as $key => $value) {
                $twilio_key_arr[$store_website_data->id][$value->key]['option']  = $value->description;
                $twilio_key_arr[$store_website_data->id][$value->key]['desc']    = $value->details;
                $twilio_key_arr[$store_website_data->id][$value->key]['message'] = $value->message;
                $twilio_key_arr[$store_website_data->id][$value->key]['id']      = $value->id;
            }
        }

        return view('twilio.twilio_key_data_options', compact('twilio_key_arr', 'web_id', 'store_websites', 'web_site_id'))->render();
    }

    public function setTwilioWorkSpace(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'workspace_name' => 'required',
            'callback_url'   => 'required',
        ]);

        if ($validator->fails()) {
            $errors  = $validator->getMessageBag();
            $errors  = $errors->toArray();
            $message = '';
            foreach ($errors as $error) {
                $message .= $error[0] . '<br>';
            }

            return response()->json(['status' => 'failed', 'statusCode' => 500, 'message' => $message]);
        }

        try {
            $account_id     = $request->account_id;
            $check_account  = TwilioCredential::where(['id' => $account_id])->firstOrFail();
            $sid            = $check_account->account_id;
            $token          = $check_account->auth_token;
            $twilio         = new Client($sid, $token);
            $workspace_name = $request->workspace_name;
            $workspace      = $twilio->taskrouter->v1->workspaces
                ->create($workspace_name, // friendlyName
                    [
                        'eventCallbackUrl' => $request->callback_url,
                        'template'         => 'FIFO',
                    ]
                );
            TwilioWorkspace::create([
                'twilio_credential_id' => $account_id,
                'workspace_name'       => $workspace_name,
                'workspace_sid'        => $workspace->sid,
                'callback_url'         => $request->callback_url,
            ]);

            return response()->json(['status' => 'success', 'statusCode' => 200, 'message' => 'Workspace Created successfully']);
        } catch (Exception $e) {
            return response()->json(['status' => 'failed', 'statusCode' => 500, 'message' => 'Something went wrong']);
        }
    }

    public function deleteTwilioWorkSpace(Request $request)
    {
        $workspace_id = $request->workspace_id;

        $getdata = TwilioWorkspace::where('id', $workspace_id)->first();

        $check_account = TwilioCredential::where(['id' => $getdata->twilio_credential_id])->firstOrFail();
        $sid           = $check_account->account_id;
        $token         = $check_account->auth_token;
        $twilio        = new Client($sid, $token);

        $twilio->taskrouter->v1->workspaces($getdata->workspace_sid)->delete();

        TwilioWorkspace::where('id', $workspace_id)->update(['deleted' => 1]);

        return new JsonResponse(['code' => 200, 'message' => 'Workspace deleted successfully']);
    }

    public function createTwilioPriority(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'priority_no'   => 'required',
            'priority_name' => 'required',
            'account_id'    => 'required',
        ]);

        if ($validator->fails()) {
            $errors  = $validator->getMessageBag();
            $errors  = $errors->toArray();
            $message = '';
            foreach ($errors as $error) {
                $message .= $error[0] . '<br>';
            }

            return response()->json(['status' => 'failed', 'statusCode' => 500, 'message' => $message]);
        }

        $accountId    = $request->account_id;
        $priorityNo   = $request->priority_no;
        $priorityName = $request->priority_name;

        $check_name = TwilioPriority::where('priority_no', $priorityNo)->where('account_id', $accountId)->where('twilio_priorities.deleted_at', null)->first();

        if ($check_name) {
            return new JsonResponse(['status' => 'failed', 'statusCode' => 500, 'message' => 'This Priority Number already exists']);
        } else {
            $priority_latest = TwilioPriority::create([
                'priority_no'   => $priorityNo,
                'account_id'    => $accountId,
                'priority_name' => $priorityName,
            ]);
            $priority_latest_record = TwilioPriority::where('twilio_priorities.account_id', $accountId)
                ->where('twilio_priorities.deleted_at', null)
                ->where('twilio_priorities.id', $priority_latest->id)
                ->select('twilio_priorities.*')
                ->first();

            return response()->json(['status' => 'success', 'statusCode' => 200, 'message' => 'Priority Created successfully', 'data' => $priority_latest_record]);
        }
    }

    public function deleteTwilioPriority(Request $request)
    {
        $priority_id = $request->priority_id;

        $getdata = TwilioPriority::where('id', $priority_id)->first();

        TwilioPriority::where('id', $priority_id)->update(['deleted_at' => date('Y-m-d H:i:s')]);

        return new JsonResponse(['code' => 200, 'message' => 'Priority deleted successfully']);
    }

    public function createTwilioWorker(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'workspace_id'    => 'required',
            'user_id'         => 'required|not_in:0',
            'worker_phone'    => 'required',
            'worker_priority' => 'required',
        ]);

        if ($validator->fails()) {
            $errors  = $validator->getMessageBag();
            $errors  = $errors->toArray();
            $message = '';
            foreach ($errors as $error) {
                $message .= $error[0] . '<br>';
            }

            return response()->json(['status' => 'failed', 'statusCode' => 500, 'message' => $message]);
        }

        $workspace_id         = $request->workspace_id;
        $twilio_credential_id = $request->account_id;
        $user_id              = $request->user_id;

        $user = User::find($user_id);

        $check_name = TwilioWorker::where('user_id', $user_id)->where('twilio_workspace_id', $workspace_id)->where('deleted', 0)->first();

        if ($check_name) {
            return new JsonResponse(['status' => 'failed', 'statusCode' => 500, 'message' => 'This Worker already exists']);
        } else {
            $workspace_data = TwilioWorkspace::where('id', $workspace_id)->first();

            $check_account = TwilioCredential::where(['id' => $workspace_data->twilio_credential_id])->firstOrFail();
            $sid           = $check_account->account_id;
            $token         = $check_account->auth_token;
            $twilio        = new Client($sid, $token);
            $activity      = clone $twilio;

            $activtiySid = '';
            $activities  = $activity->taskrouter->v1->workspaces($workspace_data->workspace_sid)
                ->activities
                ->read(['friendlyName' => 'Offline'], 1);
            foreach ($activities as $record) {
                $activtiySid = $record->sid;
            }

            $worker = $twilio->taskrouter->v1->workspaces($workspace_data->workspace_sid)->workers->create($user->name,
                ['attributes' => json_encode([
                    'customer_value' => $request->worker_priority,
                    'phone'          => $request->worker_phone,
                    'contact_uri'    => 'client:customer_call_agent_' . $user->id,
                ]),
                    'activitySid' => $activtiySid,
                ]
            );

            TwilioWorker::create([
                'twilio_credential_id' => $twilio_credential_id,
                'twilio_workspace_id'  => $workspace_id,
                'worker_name'          => $user->name,
                'user_id'              => $user->id,
                'priority'             => json_encode($request->worker_priority),
                'worker_sid'           => $worker->sid,
                'worker_phone'         => $request->worker_phone,
            ]);

            $worker_latest_record = TwilioWorker::join('twilio_workspaces', 'twilio_workspaces.id', 'twilio_workers.twilio_workspace_id')
                ->where('twilio_workers.worker_name', $user->name)
                ->where('twilio_workers.twilio_workspace_id', $workspace_id)
                ->where('twilio_workers.deleted', 0)
                ->select('twilio_workspaces.workspace_name', 'twilio_workers.*')
                ->first();

            return response()->json(['status' => 'success', 'statusCode' => 200, 'message' => 'Worker Created successfully', 'data' => $worker_latest_record]);
        }
    }

    public function deleteTwilioWorker(Request $request)
    {
        $worker_id = $request->worker_id;

        $getdata            = TwilioWorker::where('id', $worker_id)->first();
        $get_workspace_data = TwilioWorkspace::where('id', $getdata->twilio_workspace_id)->first();

        $check_account = TwilioCredential::where(['id' => $getdata->twilio_credential_id])->firstOrFail();
        $sid           = $check_account->account_id;
        $token         = $check_account->auth_token;
        $twilio        = new Client($sid, $token);

        $twilio->taskrouter->v1->workspaces($get_workspace_data->workspace_sid)->workers($getdata->worker_sid)->delete();

        TwilioWorker::where('id', $worker_id)->update(['deleted' => 1]);

        return new JsonResponse(['code' => 200, 'message' => 'Worker deleted successfully']);
    }

    public function createTwilioWorkflow(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'workspace_id'                     => 'required',
            'workflow_name'                    => 'required',
            'fallback_assignment_callback_url' => 'required',
            'assignment_callback_url'          => 'required',
            'task_queue'                       => 'required',
            'worker_reservation_timeout'       => 'required',
            'task_timeout'                     => 'required',
        ]);

        if ($validator->fails()) {
            $errors  = $validator->getMessageBag();
            $errors  = $errors->toArray();
            $message = '';
            foreach ($errors as $error) {
                $message .= $error[0] . '<br>';
            }

            return response()->json(['status' => 'failed', 'statusCode' => 500, 'message' => $message]);
        }

        $workspace_id                     = $request->workspace_id;
        $workflow_name                    = $request->workflow_name;
        $twilio_credential_id             = $request->account_id;
        $fallback_assignment_callback_url = $request->fallback_assignment_callback_url;
        $assignment_callback_url          = $request->assignment_callback_url;
        $task_queue_id                    = $request->task_queue;

        $check_name     = TwilioWorkflow::where('workflow_name', $workflow_name)->where('twilio_workspace_id', $workspace_id)->first();
        $task_queue_sid = TwilioTaskQueue::where('id', $task_queue_id)->where('twilio_workspace_id', $workspace_id)->pluck('task_queue_sid')->first();

        if ($check_name) {
            return new JsonResponse(['status' => 'failed', 'statusCode' => 500, 'message' => 'This workflow already exists']);
        } else {
            $workspace_data = TwilioWorkspace::where('id', $workspace_id)->first();

            $check_account = TwilioCredential::where(['id' => $workspace_data->twilio_credential_id])->firstOrFail();
            $sid           = $check_account->account_id;
            $token         = $check_account->auth_token;
            $twilio        = new Client($sid, $token);

            $workflow = $twilio->taskrouter->v1->workspaces($workspace_data->workspace_sid)->workflows->create($workflow_name,
                json_encode([
                    'task_routing' => [
                        'filters' => [
                            [
                                'expression' => '1==1',
                                'targets'    => [
                                    [
                                        'queue'      => $task_queue_sid,
                                        'expression' => 'task.type IN worker.customer_value',
                                    ],
                                ],
                            ],
                        ],
                    ],
                ]), [
                    'assignmentCallbackUrl'         => $request->assignment_callback_url,
                    'fallbackAssignmentCallbackUrl' => $request->fallback_assignment_callback_url,
                    'taskReservationTimeout'        => $request->worker_reservation_timeout,
                ]);

            TwilioWorkflow::create([
                'twilio_credential_id'             => $twilio_credential_id,
                'twilio_workspace_id'              => $workspace_id,
                'workflow_name'                    => $workflow_name,
                'workflow_sid'                     => $workflow->sid,
                'task_queue_id'                    => $task_queue_id,
                'fallback_assignment_callback_url' => $request->fallback_assignment_callback_url,
                'assignment_callback_url'          => $request->assignment_callback_url,
                'worker_reservation_timeout'       => $request->worker_reservation_timeout,
                'task_timeout'                     => $request->task_timeout,
            ]);

            $workflow_latest_record = TwilioWorkflow::join('twilio_workspaces', 'twilio_workspaces.id', 'twilio_workflows.twilio_workspace_id')
                ->where('twilio_workflows.workflow_name', $workflow_name)
                ->where('twilio_workflows.twilio_workspace_id', $workspace_id)
                ->where('twilio_workflows.deleted', 0)
                ->select('twilio_workspaces.workspace_name', 'twilio_workflows.*')
                ->first();

            return response()->json(['status' => 'success', 'statusCode' => 200, 'message' => 'Workflow Created successfully', 'data' => $workflow_latest_record, 'type' => 'workflowList']);
        }
    }

    public function deleteTwilioWorkflow(Request $request)
    {
        $workflow_id = $request->id;
        $getdata     = TwilioWorkflow::where('id', $workflow_id)->first();
        if ($getdata != null) {
            $get_workspace_data = TwilioWorkspace::where('id', $getdata->twilio_workspace_id)->first();
            $check_account      = TwilioCredential::where(['id' => $getdata->twilio_credential_id])->firstOrFail();
            $sid                = $check_account->account_id;
            $token              = $check_account->auth_token;
            $twilio             = new Client($sid, $token);

            $twilio->taskrouter->v1->workspaces($get_workspace_data->workspace_sid)->workflows($getdata->workflow_sid)->delete();

            TwilioWorkflow::where('id', $workflow_id)->update(['deleted' => 1]);

            return new JsonResponse(['code' => 200, 'message' => 'Workflow deleted successfully']);
        } else {
            return new JsonResponse(['code' => 500, 'message' => 'Workflow not found']);
        }
    }

    public function editTwilioWorkflow(Request $request)
    {
        $workflow_id = $request->id;
        $getdata     = TwilioWorkflow::where('id', $workflow_id)->first();
        if ($getdata != null) {
            $get_workspace_data = TwilioWorkspace::where('id', $getdata->twilio_workspace_id)->first();
            $check_account      = TwilioCredential::where(['id' => $getdata->twilio_credential_id])->firstOrFail();
            $sid                = $check_account->account_id;
            $token              = $check_account->auth_token;
            $twilio             = new Client($sid, $token);

            $twilio->taskrouter->v1->workspaces($get_workspace_data->workspace_sid)->workflows($getdata->workflow_sid)->update([
                'taskReservationTimeout' => $request->workerReservationTimeout,
            ]);

            TwilioWorkflow::where('id', $workflow_id)->update([
                'worker_reservation_timeout' => $request->workerReservationTimeout,
                'task_timeout'               => $request->taskTimeout,
            ]);

            return new JsonResponse(['code' => 200, 'message' => 'Workflow update successfully']);
        } else {
            return new JsonResponse(['code' => 500, 'message' => 'Workflow not found']);
        }
    }

    public function createTwilioActivity(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'workspace_id'  => 'required',
            'activity_name' => 'required',
        ]);

        if ($validator->fails()) {
            $errors  = $validator->getMessageBag();
            $errors  = $errors->toArray();
            $message = '';
            foreach ($errors as $error) {
                $message .= $error[0] . '<br>';
            }

            return response()->json(['status' => 'failed', 'statusCode' => 500, 'message' => $message]);
        }

        $workspace_id         = $request->workspace_id;
        $activity_name        = $request->activity_name;
        $availability         = $request->availability;
        $twilio_credential_id = $request->account_id;

        $check_name = TwilioActivity::where('activity_name', $activity_name)->where('twilio_workspace_id', $workspace_id)->first();

        if ($check_name) {
            return new JsonResponse(['status' => 'failed', 'statusCode' => 500, 'message' => 'This Activity already exists']);
        } else {
            $workspace_data = TwilioWorkspace::where('id', $workspace_id)->first();

            $check_account = TwilioCredential::where(['id' => $workspace_data->twilio_credential_id])->firstOrFail();
            $sid           = $check_account->account_id;
            $token         = $check_account->auth_token;
            $twilio        = new Client($sid, $token);

            $twilioAvailability = $twilio->taskrouter->v1->workspaces($workspace_data->workspace_sid)->activities->create($activity_name, [
                'availability' => $availability,
            ]);
            TwilioActivity::create([
                'twilio_credential_id' => $twilio_credential_id,
                'twilio_workspace_id'  => $workspace_id,
                'activity_name'        => $activity_name,
                'availability'         => $availability,
                'activity_sid'         => $twilioAvailability->sid,
            ]);

            $activities_latest_record = TwilioActivity::join('twilio_workspaces', 'twilio_workspaces.id', 'twilio_activities.twilio_workspace_id')
                ->where('twilio_activities.activity_name', $activity_name)
                ->where('twilio_activities.twilio_workspace_id', $workspace_id)
                ->where('twilio_activities.deleted', 0)
                ->select('twilio_workspaces.workspace_name', 'twilio_activities.*')
                ->first();
            if (isset($activities_latest_record['availability'])) {
                if ($activities_latest_record['availability'] == 1) {
                    $activities_latest_record['availability'] = 'True';
                } else {
                    $activities_latest_record['availability'] = 'False';
                }
            }

            return response()->json(['status' => 'success', 'statusCode' => 200, 'message' => 'Activity Created successfully', 'data' => $activities_latest_record, 'type' => 'activityList']);
        }
    }

    public function deleteTwilioActivity(Request $request)
    {
        $activity_id = $request->id;
        $getdata     = TwilioActivity::where('id', $activity_id)->first();
        if ($getdata != null) {
            $get_workspace_data = TwilioWorkspace::where('id', $getdata->twilio_workspace_id)->first();
            $check_account      = TwilioCredential::where(['id' => $getdata->twilio_credential_id])->firstOrFail();
            $sid                = $check_account->account_id;
            $token              = $check_account->auth_token;
            $twilio             = new Client($sid, $token);

            $twilio->taskrouter->v1->workspaces($get_workspace_data->workspace_sid)->activities($getdata->activity_sid)->delete();

            TwilioActivity::where('id', $activity_id)->update(['deleted' => 1]);

            return new JsonResponse(['code' => 200, 'message' => 'Activity deleted successfully']);
        } else {
            return new JsonResponse(['code' => 500, 'message' => 'Activity not found']);
        }
    }

    public function createTwilioTaskQueue(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'workspace_id'            => 'required',
            'task_queue_name'         => 'required',
            'assignment_activity_id'  => 'required',
            'reservation_activity_id' => 'required',
            'task_order'              => 'required',
            'max_reserved_workers'    => 'required',
            'queue_expression'        => 'required',
        ]);

        if ($validator->fails()) {
            $errors  = $validator->getMessageBag();
            $errors  = $errors->toArray();
            $message = '';
            foreach ($errors as $error) {
                $message .= $error[0] . '<br>';
            }

            return response()->json(['status' => 'failed', 'statusCode' => 500, 'message' => $message]);
        }

        $workspace_id          = $request->workspace_id;
        $task_queue_name       = $request->task_queue_name;
        $assignmentActivitySid = $reservationActivitySid = null;
        if ($request->assignment_activity_id) {
            $assignmentActivitySid = TwilioActivity::where('id', $assignmentActivitySid)->where('twilio_workspace_id', $workspace_id)->pluck('activity_sid')->first();
        }
        if ($request->reservation_activity_id) {
            $reservationActivitySid = TwilioActivity::where('id', $request->reservation_activity_id)->where('twilio_workspace_id', $workspace_id)->pluck('activity_sid')->first();
        }
        $twilio_credential_id = $request->account_id;

        $check_name = TwilioTaskQueue::where('task_queue_name', $task_queue_name)->where('twilio_workspace_id', $workspace_id)->first();

        if ($check_name) {
            return new JsonResponse(['status' => 'failed', 'statusCode' => 500, 'message' => 'This Task Queue already exists']);
        } else {
            $workspace_data = TwilioWorkspace::where('id', $workspace_id)->first();

            $check_account = TwilioCredential::where(['id' => $workspace_data->twilio_credential_id])->firstOrFail();
            $sid           = $check_account->account_id;
            $token         = $check_account->auth_token;
            $twilio        = new Client($sid, $token);

            $twilioTaskQueue = $twilio->taskrouter->v1->workspaces($workspace_data->workspace_sid)->taskQueues->create($task_queue_name, [
                'assignmentActivitySid'  => $assignmentActivitySid,
                'reservationActivitySid' => $reservationActivitySid,
                'targetWorkers'          => $request->queue_expression,
                'maxReservedWorkers'     => $request->max_reserved_workers,
                'taskOrder'              => $request->task_order,
            ]);
            TwilioTaskQueue::create([
                'twilio_credential_id'    => $twilio_credential_id,
                'twilio_workspace_id'     => $workspace_id,
                'task_queue_name'         => $task_queue_name,
                'task_order'              => $request->task_order,
                'reservation_activity_id' => $request->reservation_activity_id,
                'assignment_activity_id'  => $request->assignment_activity_id,
                'target_workers'          => $request->queue_expression,
                'max_reserved_workers'    => $request->max_reserved_workers,
                'task_queue_sid'          => $twilioTaskQueue->sid,
            ]);

            $task_latest_record = TwilioTaskQueue::join('twilio_workspaces', 'twilio_workspaces.id', 'twilio_task_queue.twilio_workspace_id')
                ->where('twilio_task_queue.task_queue_name', $task_queue_name)
                ->where('twilio_task_queue.twilio_workspace_id', $workspace_id)
                ->where('twilio_task_queue.deleted', 0)
                ->select('twilio_workspaces.workspace_name', 'twilio_task_queue.*')
                ->first();

            return response()->json(['status' => 'success', 'statusCode' => 200, 'message' => 'Task Queue Created successfully', 'data' => $task_latest_record, 'type' => 'taskQueueList']);
        }
    }

    public function deleteTwilioTaskQueue(Request $request)
    {
        $taskQueueId = $request->id;
        $getdata     = TwilioTaskQueue::where('id', $taskQueueId)->first();
        if ($getdata != null) {
            $get_workspace_data = TwilioWorkspace::where('id', $getdata->twilio_workspace_id)->first();
            $check_account      = TwilioCredential::where(['id' => $getdata->twilio_credential_id])->firstOrFail();
            $sid                = $check_account->account_id;
            $token              = $check_account->auth_token;
            $twilio             = new Client($sid, $token);

            $twilio->taskrouter->v1->workspaces($get_workspace_data->workspace_sid)->taskQueues($getdata->task_queue_sid)->delete();

            TwilioTaskQueue::where('id', $taskQueueId)->update(['deleted' => 1]);

            return new JsonResponse(['code' => 200, 'message' => 'TwilioTaskQueue deleted successfully']);
        } else {
            return new JsonResponse(['code' => 500, 'message' => 'TwilioTaskQueue not found']);
        }
    }

    public function fetchActivitiesFromWorkspace($workspaceId)
    {
        $twilioActivities[0] = TwilioActivity::where('twilio_workspace_id', $workspaceId)->where('deleted', 0)->where('availability', 0)->pluck('activity_name', 'id')->toArray();
        $twilioActivities[1] = $twilioActivities[0];

        return $twilioActivities;
    }

    public function fetchTaskQueueFromWorkspace($workspaceId)
    {
        $twilioTaskQueue = TwilioTaskQueue::where('twilio_workspace_id', $workspaceId)->pluck('task_queue_name', 'id')->where('deleted', 0)->toArray();

        return $twilioTaskQueue;
    }

    public function twilioErpLogs(Request $request)
    {
        $input      = $request->input();
        $twilioLogs = TwilioLog::orderBy('id', 'desc');
        if (isset($input['caller'])) {
            $twilioLogs = $twilioLogs->where('phone', 'like', '%' . $input['caller'] . '%');
        }
        if (isset($input['log'])) {
            $twilioLogs = $twilioLogs->where('log', 'like', '%' . $input['log'] . '%');
        }
        if ($request->date) {
            $dataArr = $twilioLogs->where('created_at', 'LIKE', '%' . $request->date . '%');
        }
        $twilioLogs = $twilioLogs->paginate(20);

        $recordedText = 'International delivery';

        return view('twilio.erp_logs', compact('twilioLogs', 'input'));
    }

    public function speechToTextLogs(Request $request)
    {
        $input      = $request->input();
        $twilioLogs = TwilioLog::where('type', 'speech')->orderBy('id', 'desc');
        if (isset($input['caller'])) {
            $twilioLogs = $twilioLogs->where('phone', 'like', '%' . $input['caller'] . '%');
        }
        if (isset($input['log'])) {
            $twilioLogs = $twilioLogs->where('log', 'like', '%' . $input['log'] . '%');
        }
        $twilioLogs = $twilioLogs->paginate(20);

        return view('twilio.speech_to_text_logs', compact('twilioLogs', 'input'));
    }

    /**
     * This function is use for list of Twilio call block
     *
     * @return view
     */
    public function callBlocks(Request $request)
    {
        $title = 'Twilio Call Blocks';
        try {
            $input            = $request->input();
            $twilioCallBlocks = TwilioCallBlock::select('twilio_call_blocks.customer_id', 'twilio_call_blocks.id', 'twilio_call_blocks.twilio_credentials_id', 'twilio_call_blocks.customer_website_id', 'twilio_call_blocks.twilio_number_website_id', 'twilio_call_blocks.customer_number', 'twilio_call_blocks.twilio_number', 'twilio_call_blocks.created_at', 'c.name AS customerName', 'tc.twilio_email', 'sw.website AS customerWebsite', 'swtc.website AS twWebsite')
                ->leftjoin('customers AS c', 'c.id', 'twilio_call_blocks.customer_id')
                ->leftjoin('twilio_credentials AS tc', 'tc.id', 'twilio_call_blocks.twilio_credentials_id')
                ->leftjoin('store_websites AS sw', 'sw.id', 'twilio_call_blocks.customer_website_id')
                ->leftjoin('store_websites AS swtc', 'swtc.id', 'twilio_call_blocks.twilio_number_website_id')
                ->orderBy('twilio_call_blocks.id', 'desc');

            if (isset($input['search_twilio_number'])) {
                $twilioCallBlocks = $twilioCallBlocks->where('twilio_call_blocks.twilio_number', 'like', '%' . $input['search_twilio_number'] . '%');
            }
            if (isset($input['search_customer_number'])) {
                $twilioCallBlocks = $twilioCallBlocks->where('twilio_call_blocks.customer_number', 'like', '%' . $input['search_customer_number'] . '%');
            }
            $twilioCallBlocks = $twilioCallBlocks->paginate(20);

            return view('twilio.twilio-call-block   ', compact('twilioCallBlocks', 'input'));
        } catch (Exception $e) {
            return redirect()->back()->with('error', 'please try again');
        }
    }

    /**
     * This funcrtion is use for delete Call block
     *
     * @param mixed $ids
     *
     * @return JsonResponse
     */
    public function deleteCallBlocks(Request $request, $ids = '')
    {
        try {
            $idArr     = explode(',', $request->ids);
            $callBlock = TwilioCallBlock::whereIn('id', $idArr)->delete();
            if ($callBlock != 0) {
                return response()->json(['code' => 200, 'message' => 'Successfully Deleted']);
            }

            return response()->json(['code' => 500, 'message' => 'Please select any record']);
        } catch (Exception $e) {
            return response()->json(['code' => 500, 'message' => $e->getMessage()]);
        }
    }

    /**
     * This function is use for list of Twilio call Statistic
     *
     * @return view
     */
    public function callStatistic(Request $request)
    {
        $title = 'Twilio Call Statistic';
        try {
            $input               = $request->input();
            $twilioCallStatistic = TwilioCallStatistic::select('twilio_call_statistics.id', 'twilio_call_statistics.account_sid', 'twilio_call_statistics.call_sid', 'twilio_call_statistics.customer_website_id', 'twilio_call_statistics.twilio_number_website_id', 'twilio_call_statistics.customer_number', 'twilio_call_statistics.twilio_number', 'twilio_call_statistics.created_at', 'c.name AS customerName', 'tc.twilio_email', 'sw.website AS customerWebsite', 'swtc.website AS twWebsite')
                ->leftjoin('customers AS c', 'c.id', 'twilio_call_statistics.customer_id')
                ->leftjoin('twilio_credentials AS tc', 'tc.id', 'twilio_call_statistics.twilio_credentials_id')
                ->leftjoin('store_websites AS sw', 'sw.id', 'twilio_call_statistics.customer_website_id')
                ->leftjoin('store_websites AS swtc', 'swtc.id', 'twilio_call_statistics.twilio_number_website_id')
                ->orderBy('twilio_call_statistics.id', 'desc');

            $customers              = Customer::Select('id', 'name')->get();
            $twiliconditionsemails  = TwilioCredential::Select('id', 'twilio_email')->get();
            $storeWebsites          = StoreWebsite::Select('id', 'website')->get();
            $reqcustomerNames       = $request->customer_names;
            $reqtwiliconditionEmail = $request->twilicondition_email;
            $reqCustomerWebsites    = $request->customer_websites;
            $reqTwilioWebsites      = $request->twilio_websites;

            if (isset($input['search_account_sid'])) {
                $twilioCallStatistic = $twilioCallStatistic->where('twilio_call_statistics.account_sid', 'like', '%' . $input['search_account_sid'] . '%');
            }
            if (isset($input['search_twilio_number'])) {
                $twilioCallStatistic = $twilioCallStatistic->where('twilio_call_statistics.twilio_number', 'like', '%' . $input['search_twilio_number'] . '%');
            }
            if (isset($input['search_customer_number'])) {
                $twilioCallStatistic = $twilioCallStatistic->where('twilio_call_statistics.customer_number', 'like', '%' . $input['search_customer_number'] . '%');
            }
            if (isset($input['customer_names'])) {
                $twilioCallStatistic = $twilioCallStatistic->whereIn('twilio_call_statistics.customer_id', $input['customer_names']);
            }
            if (isset($input['twilicondition_email'])) {
                $twilioCallStatistic = $twilioCallStatistic->whereIn('twilio_call_statistics.twilio_credentials_id', $input['twilicondition_email']);
            }
            if (isset($input['customer_websites'])) {
                $twilioCallStatistic = $twilioCallStatistic->whereIn('twilio_call_statistics.customer_website_id', $input['customer_websites']);
            }
            if (isset($input['twilio_websites'])) {
                $twilioCallStatistic = $twilioCallStatistic->whereIn('twilio_call_statistics.twilio_number_website_id', $input['twilio_websites']);
            }
            $twilioCallStatistic = $twilioCallStatistic->paginate(20);

            return view('twilio.twilio-call-statistic', compact('twilioCallStatistic', 'input', 'customers', 'storeWebsites', 'twiliconditionsemails', 'reqcustomerNames', 'reqtwiliconditionEmail', 'reqCustomerWebsites', 'reqTwilioWebsites'));
        } catch (Exception $e) {
            return redirect()->back()->with('error', 'please try again');
        }
    }

    /**
     * This funcrtion is use for delete Call block
     *
     * @return JsonResponse
     */
    public function deleteCallStatistic(Request $request)
    {
        try {
            $idArr         = explode(',', $request->ids);
            $callStatistic = TwilioCallStatistic::whereIn('id', $idArr)->delete();
            if ($callStatistic != 0) {
                return response()->json(['code' => 200, 'message' => 'Successfully Deleted']);
            }

            return response()->json(['code' => 500, 'message' => 'Please select any record']);
        } catch (Exception $e) {
            return response()->json(['code' => 500, 'message' => $e->getMessage()]);
        }
    }

    public function twilioAccountLogs(Request $request)
    {
        $accountLogs = new TwilioAccountLog();

        if ($request->twiliAccount_email) {
            $accountLogs = $accountLogs->WhereIn('email', $request->twiliAccount_email);
        }
        if ($request->sid) {
            $accountLogs = $accountLogs->where('sid', 'LIKE', '%' . $request->sid . '%');
        }
        if ($request->log) {
            $accountLogs = $accountLogs->where('log', 'LIKE', '%' . $request->log . '%');
        }
        if ($request->date) {
            $accountLogs = $accountLogs->where('created_at', 'LIKE', '%' . $request->date . '%');
        }

        $accountLogs = $accountLogs->latest()->paginate(\App\Setting::get('pagination', 50));

        $twiliAccountemails = TwilioAccountLog::distinct('email')->pluck('email');

        return view('twilio.account_logs', compact('accountLogs', 'twiliAccountemails'));
    }

    public function getConditions(Request $request)
    {
        $drConditions = TwilioCondition::all();
        if (($request->condition && $request->condition != null) && ($request->description && $request->description != null)) {
            $conditions = TwilioCondition::where('condition', $request->condition)->where('description', 'LIKE', '%' . $request->description . '%')->get();
        } elseif ($request->description && $request->description != null) {
            $conditions = TwilioCondition::where('description', 'LIKE', '%' . $request->description . '%')->get();
        } elseif ($request->condition && $request->condition != null) {
            $conditions = TwilioCondition::where('condition', $request->condition)->get();
        } elseif ($request->active_status != null) {
            $conditions = TwilioCondition::where('status', $request->active_status)->get();
        } else {
            $conditions = TwilioCondition::all();
        }

        return view('twilio.conditions', compact('conditions', 'drConditions'));
    }

    public function updateConditionStatus(Request $request)
    {
        $input           = $request->input();
        $twiliConditions = TwilioCondition::where('id', $input['id'])->update(['status' => $input['status']]);
        $twiliConditions = TwilioCondition::find($input['id']);

        if ($twiliConditions->status == 0) {
            $statusColor = TwilioConditionStatus::find(2);
        } else {
            $statusColor = TwilioConditionStatus::find($twiliConditions->status);
        }

        return response()->json([
            'status'      => true,
            'color'       => $statusColor->color,
            'message'     => 'Status Updated',
            'status_name' => 'success',
        ], 200);
    }

    public function saveMessageTone(Request $request)
    {
        $rules = [
            'end_work_ring' => 'mimes:mp3',
            'intro_ring'    => 'mimes:mp3',
            'busy_ring'     => 'mimes:mp3',
            'wait_url_ring' => 'mimes:mp3',
        ];
        $validator = Validator::make($request->all(), $rules);
        if ($validator->fails()) {
            return response()->json(['status' => 'failed', 'errors' => $validator->errors(), 'statusCode' => 400]);
        }
        $input                      = $request->input();
        $files                      = $request->files;
        $params['store_website_id'] = $input['store_website_id'];

        foreach ($files as $key => $file) {
            $fileName        = $file->getClientOriginalName();
            $fileNameArray[] = $fileName;

            $params[$key] = $params['store_website_id'] . $key . $fileName;
            $file->move(public_path('twilio'), $params[$key]);
        }
        TwilioMessageTone::updateOrCreate(['store_website_id' => $params['store_website_id']], $params);

        return response()->json(['status' => 'success', 'message' => 'Message tones updated', 'statusCode' => 200]);
    }

    public function viewMessageTones(Request $request)
    {
        $twilioMessageTones = StoreWebsite::leftJoin('twilio_message_tones', 'twilio_message_tones.store_website_id', 'store_websites.id')
            ->select('twilio_message_tones.*', 'store_websites.title as website', 'store_websites.id as websiteId')->get();

        $websiteIds = $request->input('website_ids', []);

        if ($websiteIds) {
            $twilioMessageTones = StoreWebsite::leftJoin('twilio_message_tones', 'twilio_message_tones.store_website_id', 'store_websites.id')
                ->select('twilio_message_tones.*', 'store_websites.title as website', 'store_websites.id as websiteId')
                ->whereIn('store_websites.id', $websiteIds)
                ->get();
        }

        return view('twilio.manage-tones', compact('twilioMessageTones', 'websiteIds'));
    }

    public function twilioCallJourney(Request $request)
    {
        $call_Journeies = TwilioCallJourney::query();

        if ($request->phone) {
            // phone number with search query
            $call_Journeies = $call_Journeies->where('phone', 'like', $request->phone . '%');
        }

        if ($request->store_id) {
            // relation with search query
            $call_Journeies = $call_Journeies->whereHas('twilio_credential', function ($query) use ($request) {
                $query->where('id', 'like', $request->store_id);
            });
        }

        if ($request->account_id) {
            $call_Journeies = $call_Journeies->where('account_sid', 'like', $request->account_id . '%');
        }

        if ($request->call_id) {
            $call_Journeies = $call_Journeies->where('call_sid', 'like', $request->call_id . '%');
        }

        if ($request->filled('call_entered') && $request->call_entered === 'yes' || $request->call_entered === 'Yes') {
            $call_Journeies = $call_Journeies->where('call_entered', 1);
        } elseif ($request->filled('call_entered') && $request->call_entered === 'No' || $request->call_entered === 'no') {
            $call_Journeies = $call_Journeies->where('call_entered', '!=', 1);
        }

        if ($request->filled('handled_by_chatbot') && $request->handled_by_chatbot === 'yes' || $request->handled_by_chatbot === 'Yes') {
            $call_Journeies = $call_Journeies->where('handled_by_chatbot', 1);
        } elseif ($request->filled('handled_by_chatbot') && $request->handled_by_chatbot === 'No' || $request->handled_by_chatbot === 'no') {
            $call_Journeies = $call_Journeies->where('handled_by_chatbot', '!=', 1);
        }

        if ($request->filled('called_working_hours') && $request->called_working_hours === 'yes' || $request->called_working_hours === 'Yes') {
            $call_Journeies = $call_Journeies->where('called_in_working_hours', 1);
        } elseif ($request->filled('called_working_hours') && $request->called_working_hours === 'No' || $request->called_working_hours === 'no') {
            $call_Journeies = $call_Journeies->where('called_in_working_hours', '!=', 1);
        }

        if ($request->filled('avaiable_agent') && $request->avaiable_agent === 'yes' || $request->avaiable_agent === 'Yes') {
            $call_Journeies = $call_Journeies->where('agent_available', 1);
        } elseif ($request->filled('avaiable_agent') && $request->avaiable_agent === 'No' || $request->avaiable_agent === 'no') {
            $call_Journeies = $call_Journeies->where('agent_available', '!=', 1);
        }

        if ($request->filled('agent_online') && $request->agent_online === 'yes' || $request->agent_online === 'Yes') {
            $call_Journeies = $call_Journeies->where('agent_online', 1);
        } elseif ($request->filled('agent_online') && $request->agent_online === 'No' || $request->agent_online === 'no') {
            $call_Journeies = $call_Journeies->where('agent_online', '!=', 1);
        }

        if ($request->filled('call_answered') && $request->call_answered === 'yes' || $request->call_answered === 'Yes') {
            $call_Journeies = $call_Journeies->where('call_answered', 1);
        } elseif ($request->filled('call_answered') && $request->call_answered === 'No' || $request->call_answered === 'no') {
            $call_Journeies = $call_Journeies->where('call_answered', '!=', 1);
        }

        $call_Journeies = $call_Journeies->with(['twilio_credential:id,account_id,twilio_email'])
            ->orderBy('id', 'desc')
            ->paginate(Setting::get('pagination'));

        if ($request->ajax()) {
            $count = $call_Journeies->count();

            $html = view('twilio.partials.call_journey_data', compact('call_Journeies'))->render();

            if (count($call_Journeies)) {
                return ['status' => 1, 'html' => $html, 'count' => $count, 'call_Journeies' => $call_Journeies];
            } else {
                return ['status' => 0, 'html' => '<tr id="noresult_tr"><td colspan="7">No More Records</td></tr>'];
            }
        }

        return view('twilio.call_journey', compact('call_Journeies'));
    }

    /**
     * This function is use for list of Twilio SMS delivery logs
     *
     * @return view
     */
    public function twilioDeliveryLogs(Request $request)
    {
        $query = TwilioMessageDeliveryLogs::orderBy('created_at', 'desc')->with('customers:id,name,email');

        $twiliCoustomerEmails = Customer::select('id', 'email')->get();

        if ($request->twilicustomer_email) {
            $query->whereIn('customer_id', $request->twilicustomer_email);
        }
        if ($request->message_id) {
            $query->where('message_sid', 'LIKE', '%' . $request->message_id . '%');
        }
        if ($request->user_from) {
            $query->where('from', 'LIKE', '%' . $request->user_from . '%');
        }
        if ($request->user_to) {
            $query->where('to', 'LIKE', '%' . $request->user_to . '%');
        }
        if ($request->deliver_status) {
            $query->where('delivery_status', 'LIKE', '%' . $request->deliver_status . '%');
        }
        if ($request->date) {
            $query->where('created_at', 'LIKE', '%' . $request->date . '%');
        }

        $twilioDeliveryLogs = $query->paginate(50);

        return view('twilio.delivery_logs', compact('twilioDeliveryLogs', 'twiliCoustomerEmails'));
    }

    /**
     * This function is use for handling message delivery status. webhook call for twilio send message
     *
     * @param int $cid
     * @param int $marketingMessageCId
     *
     * @return JsonResponse
     */
    public function handleMessageDeliveryStatus(Request $request, $cid, $marketingMessageCId)
    {
        try {
            // Check customer Id is present or not
            if (empty($cid)) {
                throw new Exception('Required parameters are missing');
            }

            // Check marketing message customer Id is present or not
            if (empty($marketingMessageCId)) {
                throw new Exception('Required parameters are missing');
            }

            // Store webhook response in database
            TwilioMessageDeliveryLogs::create([
                'marketing_message_customer_id' => $marketingMessageCId,
                'customer_id'                   => $cid,
                'account_sid'                   => $request->input('AccountSid'),
                'message_sid'                   => $request->input('MessageSid'),
                'to'                            => $request->input('To'),
                'from'                          => $request->input('From'),
                'delivery_status'               => $request->input('MessageStatus'),
                'api_version'                   => $request->input('ApiVersion'),
            ]);
        } catch (Exception $e) {
            \Log::info('handleMessageDeliveryStatus customer id -> ' . $cid);
            \Log::info('handleMessageDeliveryStatus marketing message customer id -> ' . $marketingMessageCId);
            \Log::info('handleMessageDeliveryStatus AccountSid -> ' . $request->input('AccountSid'));
            \Log::info('handleMessageDeliveryStatus MessageSid -> ' . $request->input('MessageSid'));
            \Log::info('handleMessageDeliveryStatus twilio webhook error -> ' . $e->getMessage());
        }
    }

    /**
     * This function is used to ask customer to leave a message
     *
     * @return XmlResponse
     */
    public function handleIncomingCall()
    {
        $response = new VoiceResponse();
        $gather   = $response->gather(
            [
                'input'     => 'speech dtmf',
                'numDigits' => 1,
                'action'    => route('twilio_menu_response', [], false),
            ]
        );

        $gather->say(
            'Currently all lines are busy. Please press 1 for a leave a message',
            ['loop' => 3]
        );

        return $response;
    }

    /**
     * This function is used to check URL is exist or not
     *
     * @param string $url
     *
     * @return bool
     */
    public function checkUrlExists($url)
    {
        $startTime = date('Y-m-d H:i:s', LARAVEL_START);
        $ch        = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        // don't download content
        curl_setopt($ch, CURLOPT_NOBODY, 1);
        curl_setopt($ch, CURLOPT_FAILONERROR, 1);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        $httpcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);

        $result = curl_exec($ch);

        // Check result is not empty
        if ($result !== false) {
            $status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
            curl_close($ch);

            return $status_code == 200;
        }

        curl_close($ch);
        LogRequest::log($startTime, $url, 'POST', json_encode([]), json_decode($result), $httpcode, \App\Http\Controllers\TwilioController::class, 'twilioCallForward');

        return false;
    }

    public function StatusColourUpdate(request $request)
    {
        $formData = $request->input('formData');

        if (is_array($formData)) {
            foreach ($formData as $data) {
                // Search for an existing record based on status_name
                $statusColor = TwilioConditionStatus::firstOrCreate([
                    'status_name' => $data['status'],
                ]);

                // Update the existing record with the new color code
                $statusColor->color = $data['colorCode'];
                $statusColor->save();
            }

            // Return a success response if needed
            return response()->json(['message' => 'Status colors saved successfully']);
        }

        // Return an error response if formData is not an array
        return response()->json(['error' => 'Invalid form data']);
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/UserController.php 
Content: <?php

namespace App\Http\Controllers;

use DB;
use Log;
use Auth;
use Hash;
use Cache;
use App\Role;
use App\Task;
use App\User;
use DateTime;
use App\ApiKey;
use App\Helpers;
use App\Payment;
use App\Product;
use App\Setting;
use App\Customer;
use App\UserRate;
use App\UserLogin;
use Carbon\Carbon;
use App\Permission;
use App\UserLoginIp;
use App\UserProduct;
use App\UserSysyemIp;
use App\PaymentMethod;
use Illuminate\Support\Arr;
use App\WebhookNotification;
use Illuminate\Http\Request;
use App\Marketing\WhatsappConfig;
use App\Hubstaff\HubstaffActivity;
use App\EmailNotificationEmailDetails;
use App\Hubstaff\HubstaffPaymentAccount;

class UserController extends Controller
{
    const DEFAULT_FOR = 4; //For User

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request)
    {
        $query = User::query();

        if ($request->id) {
            $query = $query->where('id', $request->id);
        }
        if ($request->term) {
            $query = $query->where('name', 'LIKE', '%' . $request->term . '%')->orWhere('email', 'LIKE', '%' . $request->term . '%')
                ->orWhere('phone', 'LIKE', '%' . $request->term . '%');
        }

        $data = $query->orderBy('name', 'asc')->paginate(25)->appends(request()->except(['page']));
        if ($request->ajax()) {
            return response()->json([
                'tbody' => view('users.partials.list-users', compact('data'))->with('i', ($request->input('page', 1) - 1) * 5)->render(),
                'links' => (string) $data->render(),
                'count' => $data->total(),
            ], 200);
        }
        $whatsapp = WhatsappConfig::where('status', 1)->pluck('number');

        return view('users.index', compact('data', 'whatsapp'))
            ->with('i', ($request->input('page', 1) - 1) * 5);
    }

    public function changeWhatsapp(Request $request)
    {
        $user = User::find($request->user_id);
        $data = ['whatsapp_number' => $request->whatsapp_number];
        $user->update($data);

        return response()->json(['success' => 'successfully updated', 'data' => $data]);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        $roles       = Role::pluck('name', 'name')->all();
        $users       = User::all();
        $agent_roles = ['sales' => 'Sales', 'support' => 'Support', 'queries' => 'Others'];

        return view('users.create', compact('roles', 'users', 'agent_roles'));
    }

    /**
     * Store a newly created resource in storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $this->validate($request, [
            'name'        => 'required',
            'email'       => 'required|email|unique:users,email',
            'gmail'       => 'sometimes|nullable|email',
            'phone'       => 'sometimes|nullable|integer|unique:users,phone',
            'password'    => 'required|same:confirm-password',
            'hourly_rate' => 'numeric',
            'currency'    => 'string',
            'timezone'    => 'required',
        ]);

        $input    = $request->all();
        $userRate = new UserRate();

        //get default whatsapp number for vendor from whatsapp config

        if (empty($input['whatsapp_number'])) {
            $task_info = DB::table('whatsapp_configs')
                ->select('*')
                ->whereRaw('find_in_set(' . self::DEFAULT_FOR . ',default_for)')
                ->first();
            $input['whatsapp_number'] = $task_info->number;
        }

        $userRate->start_date  = Carbon::now();
        $userRate->hourly_rate = $input['hourly_rate'];
        $userRate->currency    = $input['currency'];

        unset($input['hourly_rate']);
        unset($input['currency']);

        $input['name']     = str_replace(' ', '_', $input['name']);
        $input['password'] = Hash::make($input['password']);
        if (isset($input['agent_role'])) {
            $input['agent_role'] = implode(',', $input['agent_role']);
        }

        $user = User::create($input);

        $userRate->user_id = $user->id;
        $userRate->save();

        return redirect()->to('/users/' . $user->id . '/edit')->with('success', 'User created successfully');
    }

    /**
     * Display the specified resource.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        $user = User::find($id);

        if (Auth::id() != $id) {
            return redirect()->route('users.index')->withWarning("You don't have access to this page!");
        }

        $users_array      = Helpers::getUserArray(User::all());
        $roles            = Role::pluck('name', 'name')->all();
        $users            = User::all();
        $userRole         = $user->roles->pluck('name', 'name')->all();
        $agent_roles      = ['sales' => 'Sales', 'support' => 'Support', 'queries' => 'Others'];
        $user_agent_roles = explode(',', $user->agent_role);
        $api_keys         = ApiKey::select('number')->get();

        $pending_tasks = Task::where('is_statutory', 0)
            ->whereNull('is_completed')
            ->where(function ($query) use ($id) {
                return $query->orWhere('assign_from', $id)
                    ->orWhere('assign_to', $id);
            })->get();

        return view('users.show', [
            'user'             => $user,
            'users_array'      => $users_array,
            'roles'            => $roles,
            'users'            => $users,
            'userRole'         => $userRole,
            'agent_roles'      => $agent_roles,
            'user_agent_roles' => $user_agent_roles,
            'api_keys'         => $api_keys,
            'pending_tasks'    => $pending_tasks,
        ]);
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        $user       = User::with('webhookNotification')->find($id);
        $roles      = Role::orderBy('name', 'asc')->pluck('name', 'id')->all();
        $permission = Permission::orderBy('name', 'asc')->pluck('name', 'id')->all();

        $users            = User::all();
        $userRole         = $user->roles->pluck('name', 'id')->all();
        $userPermission   = $user->permissions->pluck('name', 'id')->all();
        $agent_roles      = ['sales' => 'Sales', 'support' => 'Support', 'queries' => 'Others'];
        $user_agent_roles = explode(',', $user->agent_role);
        $api_keys         = ApiKey::select('number')->get();
        $customers_all    = Customer::select(['id', 'name', 'email', 'phone', 'instahandler'])->whereRaw("customers.id NOT IN (SELECT customer_id FROM user_customers WHERE user_id != $id)")->get()->toArray();

        $userRate = UserRate::getRateForUser($user->id);

        $email_notification_data = EmailNotificationEmailDetails::where('user_id', $id)->first(); //Purpose : get email details - DEVTASK-4359

        return view(
            'users.edit',
            compact('user', 'users', 'roles', 'userRole', 'agent_roles', 'user_agent_roles', 'api_keys', 'customers_all', 'permission', 'userPermission', 'userRate', 'email_notification_data') //Purpose : add email_notification_data - DEVTASK-4359
        );
    }

    /**
     * Update the specified resource in storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        $this->validate($request, [
            'name'     => 'required',
            'email'    => 'required|email|unique:users,email,' . $id,
            'gmail'    => 'sometimes|nullable|email',
            'phone'    => 'sometimes|nullable|integer|unique:users,phone,' . $id,
            'password' => 'same:confirm-password',
            'roles'    => 'required',
        ]);

        $input = $request->all();

        $hourly_rate = $input['hourly_rate'];
        $currency    = $input['currency'];

        unset($input['hourly_rate']);
        unset($input['currency']);

        $input['name'] = str_replace(' ', '_', $input['name']);
        if (isset($input['agent_role'])) {
            $input['agent_role'] = implode(',', $input['agent_role']);
        } else {
            $input['agent_role'] = '';
        }

        if (! empty($input['password'])) {
            $input['password'] = Hash::make($input['password']);
        } else {
            $input = Arr::except($input, ['password']);
        }

        //START - Purpose : Set Email notification status - DEVTASK-4359
        $input['mail_notification'] = 0;
        if (isset($request->email_notification_chkbox)) {
            if ($request->email_notification_chkbox == 1) {
                $input['mail_notification'] = 1;
            }
        }

        if ($request->notification_mail_id != '') {
            EmailNotificationEmailDetails::updateOrCreate(
                ['user_id' => $id],
                ['emails' => $request->notification_mail_id]
            );
        }
        //END - DEVTASK-4359

        $user = User::find($id);
        $user->update($input);

        if ($request->customer != null && $request->customer[0] != '') {
            $user->customers()->sync($request->customer);
        }

        $user->roles()->sync($request->input('roles'));
        $user->permissions()->sync($request->input('permissions'));

        $user->listing_approval_rate  = $request->get('listing_approval_rate') ?? '0';
        $user->listing_rejection_rate = $request->get('listing_rejection_rate') ?? '0';
        $user->save();

        if ($request->webhook && isset($request->webhook['url']) && isset($request->webhook['payload'])) {
            WebhookNotification::updateOrCreate([
                'user_id' => $user->id,
            ], $request->webhook);
        }

        $userRate              = new UserRate();
        $userRate->start_date  = Carbon::now();
        $userRate->hourly_rate = $hourly_rate;
        $userRate->currency    = $currency;
        $userRate->user_id     = $user->id;
        $userRate->save();

        return redirect()->back()
            ->with('success', 'User updated successfully');
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        $user = User::find($id);
        $user->delete();

        return redirect()->route('users.index')
            ->with('success', 'User deleted successfully');
    }

    public function unassignProducts(Request $request, $id)
    {
        $user = User::find($id);

        $userProducts = UserProduct::where('user_id', $user->id)->pluck('product_id')->toArray();

        $products = Product::whereIn('id', $userProducts)->where('is_approved', 0)->where('is_listing_rejected', 0)->take($request->get('number') ?? 0)->get();

        foreach ($products as $product) {
            UserProduct::where('user_id', $user->id)->where('product_id', $product->id)->delete();
        }

        return redirect()->back()->with('success', 'Product unassigned successfully!');
    }

    public function showAllAssignedProductsForUser($id)
    {
        $userProducts = UserProduct::where('user_id', $id)->with('product')->orderBy('created_at', 'DESC')->get();

        $user = User::find($id);

        return view('products.assigned_products_list_by_user', compact('userProducts', 'user'));
    }

    public function assignProducts(Request $request, $id)
    {
        $user            = User::find($id);
        $amount_assigned = 25;

        $products = Product::where('stock', '>=', 1)
            ->where('is_crop_ordered', 1)
            ->where('is_order_rejected', 0)
            ->where('is_approved', 0)
            ->where('is_listing_rejected', 0)
            ->where('isUploaded', 0)
            ->where('isFinal', 0);

        $user_products = UserProduct::pluck('product_id')->toArray();

        $products = $products->whereNotIn('id', $user_products)
            ->whereIn('category', [5, 6, 7, 9, 11, 21, 22, 23, 24, 25, 26, 29, 34, 36, 37, 52, 53, 54, 55, 56, 57, 58, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 78, 79, 80, 81, 83, 84, 85, 87, 97, 98, 99, 100, 105, 109, 110, 111, 114, 117, 118])
            ->orderBy('is_on_sale', 'DESC')
            ->latest()
            ->take($amount_assigned)
            ->get();

        $user->products()->attach($products);

        if (count($products) >= $amount_assigned - 1) {
            $message = 'You have successfully assigned ' . count($products) . ' products';

            return redirect()->back()->with('success', $message);
        }

        $remaining = $amount_assigned - count($products);

        $products = Product::where('stock', '>=', 1)
            ->where('is_crop_ordered', 1)
            ->where('is_order_rejected', 0)
            ->where('is_listing_rejected', 0)
            ->where('is_approved', 0)
            ->where('isUploaded', 0)
            ->where('isFinal', 0);

        $user_products = UserProduct::pluck('product_id')->toArray();

        $products = $products->whereNotIn('id', $user_products)->orderBy('is_on_sale', 'DESC')->latest()->take($remaining)->get();
        $user->products()->attach($products);

        if (count($products) > 0) {
            $message = 'You have successfully assigned products';
        } else {
            $message = 'There were no products to assign!';
        }

        return redirect()->back()->withSuccess($message);
    }

    public function login(Request $request)
    {
        $date   = $request->date ? $request->date : Carbon::now()->format('Y-m-d');
        $logins = UserLogin::whereBetween('login_at', [$date, Carbon::parse($date)->addDay()])->latest()->paginate(Setting::get('pagination'));

        return view('users.login', [
            'logins' => $logins,
            'date'   => $date,
        ]);
    }

    public function activate(Request $request, $id)
    {
        $user = User::find($id);

        if ($user->is_active == 1) {
            $user->is_active = 0;
        } else {
            $user->is_active = 1;
        }

        $user->save();

        return redirect()->back()->withSuccess('You have successfully updated the user!');
    }

    public function payments(Request $request)
    {
        $params = $request->all();

        $date = new DateTime();

        if (isset($params['year']) && isset($params['week'])) {
            $year = $params['year'];
            $week = $params['week'];
        } else {
            $week = $date->format('W');
            $year = $date->format('Y');
        }

        $result = getStartAndEndDate($week, $year);
        $start  = $result['week_start'];
        $end    = $result['week_end'];

        $users              = User::join('hubstaff_payment_accounts as hpa', 'hpa.user_id', 'users.id')->with(['currentRate'])->get();
        $usersRatesThisWeek = UserRate::ratesForWeek($week, $year);

        $usersRatesPreviousWeek = UserRate::latestRatesForWeek($week - 1, $year);

        $activitiesForWeek = HubstaffActivity::getActivitiesForWeek($week, $year);

        $paymentsDone = Payment::getConsidatedUserPayments();

        $amountToBePaid = HubstaffPaymentAccount::getConsidatedUserAmountToBePaid();

        $now = now();

        foreach ($users as $user) {
            $user->secondsTracked = 0;
            $user->currency       = '-';
            $user->total          = 0;

            $userPaymentsDone      = 0;
            $userPaymentsDoneModel = $paymentsDone->first(function ($value) use ($user) {
                return $value->user_id == $user->id;
            });

            if ($userPaymentsDoneModel) {
                $userPaymentsDone = $userPaymentsDoneModel->paid;
            }

            $userPaymentsToBeDone    = 0;
            $userAmountToBePaidModel = $amountToBePaid->first(function ($value) use ($user) {
                return $value->user_id == $user->id;
            });

            if ($userAmountToBePaidModel) {
                $userPaymentsToBeDone = $userAmountToBePaidModel->amount;
            }

            $user->balance = $userPaymentsToBeDone - $userPaymentsDone;

            $invidualRatesPreviousWeek = $usersRatesPreviousWeek->first(function ($value, $key) use ($user) {
                return $value->user_id == $user->id;
            });

            $weekRates = [];

            if ($invidualRatesPreviousWeek) {
                $weekRates[] = [
                    'start_date' => $start,
                    'rate'       => $invidualRatesPreviousWeek->hourly_rate,
                    'currency'   => $invidualRatesPreviousWeek->currency,
                ];
            }

            $rates = $usersRatesThisWeek->filter(function ($value, $key) use ($user) {
                return $value->user_id == $user->id;
            });

            if ($rates) {
                foreach ($rates as $rate) {
                    $weekRates[] = [
                        'start_date' => $rate->start_date,
                        'rate'       => $rate->hourly_rate,
                        'currency'   => $rate->currency,
                    ];
                }
            }

            usort($weekRates, function ($a, $b) {
                return strtotime($a['start_date']) - strtotime($b['start_date']);
            });

            if (count($weekRates) > 0) {
                $lastEntry = $weekRates[count($weekRates) - 1];

                $weekRates[] = [
                    'start_date' => $end,
                    'rate'       => $lastEntry['rate'],
                    'currency'   => $lastEntry['currency'],
                ];

                $user->currency = $lastEntry['currency'];
            }

            $activities = $activitiesForWeek->filter(function ($value, $key) use ($user) {
                return $value->system_user_id === $user->id;
            });

            $user->trackedActivitiesForWeek = $activities;

            foreach ($activities as $activity) {
                $user->secondsTracked += $activity->tracked;
                $i = 0;
                while ($i < count($weekRates) - 1) {
                    $start = $weekRates[$i];
                    $end   = $weekRates[$i + 1];

                    if ($activity->starts_at >= $start['start_date'] && $activity->start_time < $end['start_date']) {
                        // the activity needs calculation for the start rate and hence do it
                        $earnings           = $activity->tracked * ($start['rate'] / 60 / 60);
                        $activity->rate     = $start['rate'];
                        $activity->earnings = $earnings;
                        $user->total += $earnings;
                        break;
                    }
                    $i++;
                }
            }
        }

        //exit;
        $paymentMethods = [];
        foreach (PaymentMethod::all() as $paymentMethod) {
            $paymentMethods[$paymentMethod->id] = $paymentMethod->name;
        }

        return view(
            'users.payments',
            [
                'users'          => $users,
                'selectedYear'   => $year,
                'selectedWeek'   => $week,
                'paymentMethods' => $paymentMethods,
            ]
        );
    }

    public function makePayment(Request $request)
    {
        $this->validate($request, [
            'amount'         => 'required|numeric|min:1',
            'payment_method' => 'required',
            'currency'       => 'required',
        ]);

        $parameters = $request->all();

        $paymentMethod = PaymentMethod::firstOrCreate([
            'name' => $parameters['payment_method'],
        ]);

        $payment                    = new Payment;
        $payment->user_id           = $parameters['user_id'];
        $payment->amount            = $parameters['amount'];
        $payment->currency          = $parameters['currency'];
        $payment->note              = $parameters['note'];
        $payment->payment_method_id = $paymentMethod->id;
        $payment->save();

        return redirect('/hubstaff/payments')->withSuccess('Payment saved!');
    }

    public function checkUserLogins()
    {
        Log::channel('customer')->info(Carbon::now() . ' begin checking users logins');
        $users = User::all();

        foreach ($users as $user) {
            if ($login = UserLogin::where('user_id', $user->id)->where('created_at', '>', Carbon::now()->format('Y-m-d'))->latest()->first()) {
            } else {
                $login = UserLogin::create(['user_id' => $user->id]);
            }

            if (Cache::has('user-is-online-' . $user->id)) {
                if ($login->logout_at) {
                    UserLogin::create(['user_id' => $user->id, 'login_at' => Carbon::now()]);
                } elseif (! $login->login_at) {
                    $login->update(['login_at' => Carbon::now()]);
                }
            } else {
                if ($login->created_at && ! $login->logout_at) {
                    $login->update(['logout_at' => Carbon::now()]);
                }
            }
        }

        Log::channel('customer')->info(Carbon::now() . ' end of checking users logins');
    }

    public function searchUser(Request $request)
    {
        $q = $request->input('q');

        $results = User::select('id', 'name', 'name AS text')
            ->orWhere('name', 'LIKE', '%' . $q . '%')
            ->offset(0)
            ->limit(15)
            ->get();

        return $results;
    }

    public function searchUserGlobal(Request $request)
    {
        $q = $request->input('q');

        $results = User::select('id', 'name', 'email', 'phone')
            ->orWhere('name', 'LIKE', '%' . $q . '%')
            ->orWhere('email', 'LIKE', '%' . $q . '%')
            ->orWhere('phone', 'LIKE', '%' . $q . '%')
            ->offset(0)
            ->limit(200)
            ->get();

        return $results;
    }

    public function loginIps(Request $request)
    {
        $user_ips = UserLoginIp::join('users', 'user_login_ips.user_id', '=', 'users.id')
            ->select('user_login_ips.*', 'users.email')
            ->latest()
            ->get();
        if ($request->ajax()) {
            return response()->json(['code' => 200, 'data' => $user_ips]);
        } else {
            return view('users.ips', compact('user_ips'));
        }
    }

    public function addSystemIp(Request $request)
    {
        if ($request->ip) {
            $shell_bash_cmd = 'bash ' . getenv('DEPLOYMENT_SCRIPTS_PATH') . '/webaccess-firewall.sh -f add -i ' . $request->ip . ' -c ' . $request->get('comment', '');
            $shell_cmd      = shell_exec($shell_bash_cmd);

            // Decode the JSON string into a PHP array
            $data = json_decode($shell_cmd, true);
            UserSysyemIp::create([
                'index_txt'       => $data['index'] ?? 'null',
                'ip'              => $request->ip,
                'user_id'         => $request->user_id ?? null,
                'other_user_name' => $request->other_user_name ?? null,
                'notes'           => $request->comment ?? null,
                'source'          => 'system',
                'command'         => $shell_bash_cmd,
                'status'          => $data['status'] ?? '',
                'message'         => $data['message'] ?? '',
            ]);

            $userID = $request->user_id ?? null;

            if ($userID) {
                $user = \App\User::find($userID);
                if ($user) {
                    $user->is_whitelisted = 1;
                    $user->save();
                    $params            = [];
                    $params['user_id'] = $userID;
                    $params['message'] = 'Your ip address ' . $request->ip . '  whitelist request has been approved';
                    // send chat message
                    $chat_message = \App\ChatMessage::create($params);
                    // send
                    app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($user->phone, $user->whatsapp_number, $params['message'], false, $chat_message->id);
                }
            }

            return response()->json(['code' => 200, 'data' => 'Success']);
        }

        return response()->json(['code' => 500, 'data' => 'Error occured!']);
    }

    public function deleteSystemIp(Request $request)
    {
        if ($request->usersystemid) {
            $row    = UserSysyemIp::where('id', $request->usersystemid)->first();
            $userID = $row->user_id ?? null;
            shell_exec('bash ' . getenv('DEPLOYMENT_SCRIPTS_PATH') . '/webaccess-firewall.sh -f delete -n ' . $row->index ?? '');

            $row->delete();
            if ($userID) {
                $user = \App\User::find($userID);
                if ($user) {
                    $user->is_whitelisted = 0;
                    $user->save();
                }
            }

            return response()->json(['code' => 200, 'data' => 'Success']);
        }

        return response()->json(['code' => 500, 'data' => 'Error occured!']);
    }

    public function statusChange(Request $request)
    {
        if ($request->status) {
            $user_ip_status = UserLoginIp::where('id', $request->id)->get();
            if ($request->status == 'Active') {
                $user_ip_status->is_status = UserLoginIp::where('id', $request->id)
                    ->update(['is_active' => true]);
            } else {
                $user_ip_status->is_status = UserLoginIp::where('id', $request->id)
                    ->update(['is_active' => false]);
            }
        }

        return $request->status;
    }

    public function addSystemIpFromText(Request $request)
    {
        if ($request->id) {
            $chatMessage = \app\ChatMessage::where('id', $request->id)->first();
            if ($chatMessage) {
                preg_match_all('/\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/', $chatMessage->message, $ip_matches);
                $ip_matches = array_filter($ip_matches);
                if (! empty($ip_matches)) {
                    if ($chatMessage->user_id > 0 || $chatMessage->erp_user > 0) {
                        foreach ($ip_matches[0] as $key => $value) {
                            $shell_cmd = shell_exec('bash ' . getenv('DEPLOYMENT_SCRIPTS_PATH') . '/webaccess-firewall.sh -f add -i ' . $value . ' -c Added from chat messages');
                            $userID    = $chatMessage->erp_user ?? $chatMessage->user_id;

                            UserSysyemIp::create([
                                'index_txt'       => $shell_cmd['index'] ?? 'null',
                                'ip'              => $value,
                                'user_id'         => $chatMessage->erp_user ?? $chatMessage->user_id,
                                'other_user_name' => $request->other_user_name ?? null,
                                'notes'           => 'Added from chat messages',
                                'source'          => 'message',
                            ]);

                            if ($userID) {
                                $user = \App\User::find($userID);
                                if ($user) {
                                    $user->is_whitelisted = 1;
                                    $user->save();
                                    $params            = [];
                                    $params['user_id'] = $userID;
                                    $params['message'] = 'Your ip address ' . $value . '  whitelist request has been approved';
                                    // send chat message
                                    $chat_message = \App\ChatMessage::create($params);
                                    // send
                                    app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($user->phone, $user->whatsapp_number, $params['message'], false, $chat_message->id);
                                }
                            }
                        }
                    }
                }

                return response()->json(['code' => 200, 'message' => 'Success']);
            } else {
                return response()->json(['code' => 500, 'message' => 'Can only white list user ip only!']);
            }
        }

        return response()->json(['code' => 500, 'message' => 'Message record not found!']);
    }

    public function bulkDeleteSystemIp(Request $request)
    {
        try {
            $systemIps = UserSysyemIp::get();
            if (! empty($systemIps)) {
                foreach ($systemIps as $systemIp) {
                    $userID = $systemIp->user_id ?? null;
                    shell_exec('bash ' . getenv('DEPLOYMENT_SCRIPTS_PATH') . '/webaccess-firewall.sh -f delete -n ' . $systemIp->index ?? '');
                    $systemIp->delete();
                    if ($userID) {
                        $user = \App\User::find($userID);
                        if ($user) {
                            $user->is_whitelisted = 0;
                            $user->save();
                        }
                    }
                }

                return response()->json(['code' => 200, 'data' => 'Success']);
            }
        } catch (\Throwable $e) {
            return response()->json(['code' => '500', 'message' => $e->getMessage()]);
        }
    }

    public function addSystemIpFromEmail(Request $request)
    {
        if ($request->email) {
            $user = \App\User::where('email', $request->email)->first();
            if (! empty($user)) {
                UserSysyemIp::create([
                    'index_txt' => $request->index_txt ?? 'null',
                    'ip'        => $request->ip,
                    'user_id'   => $user->id ?? null,
                    'notes'     => $request->comment ?? null,
                    'source'    => 'email',
                ]);
                $user->is_whitelisted = 1;
                $user->save();
                $params            = [];
                $params['user_id'] = $user->id;
                $params['message'] = 'Your ip address ' . $request->ip . '  whitelist request has been approved';
                // send chat message
                $chat_message = \App\ChatMessage::create($params);
                // send
                app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($user->phone, $user->whatsapp_number, $params['message'], false, $chat_message->id);
            }

            return response()->json(['code' => 200, 'data' => 'Success']);
        }

        return response()->json(['code' => 500, 'data' => 'Error occured!']);
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/UsersAutoCommentHistoriesController.php 
Content: <?php

namespace App\Http\Controllers;

use App\Account;
use Carbon\Carbon;
use App\AutoCommentHistory;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Auth;

class UsersAutoCommentHistoriesController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        $autoCommentHistories = new AutoCommentHistory();
        $user                 = Auth::user();
        if (! $user->hasRole('Admin')) {
            $autoCommentHistories = $autoCommentHistories->whereIn('id', DB::table('users_auto_comment_histories')
                ->where('user_id', $user->id)
                ->pluck('auto_comment_history_id')
                ->toArray()
            );
        }

        $accounts = Account::where('platform', 'instagram')->where('manual_comment', 1)->where('blocked', 0)->get();

        $comments = $autoCommentHistories->orderBy('created_at', 'DESC')->paginate(25);

        return view('instagram.auto_comments.user_ach', compact('comments', 'accounts'));
    }

    public function assignPosts()
    {
        $user = Auth::user();

        $autoCommentHistory = AutoCommentHistory::where('status', 0)
            ->whereNotIn('id', DB::table('users_auto_comment_histories')->pluck('auto_comment_history_id')->toArray())
            ->take(25)
            ->get();

        $productsAttached = 0;

        foreach ($autoCommentHistory as $ach) {
            DB::table('users_auto_comment_histories')->insert([
                'user_id'                 => $user->id,
                'auto_comment_history_id' => $ach->id,
                'created_at'              => Carbon::now()->toDateTimeString(),
                'updated_at'              => Carbon::now()->toDateTimeString(),
            ]);
            $productsAttached++;
        }

        return redirect()->back()->with('message', 'Successfully added ' . $productsAttached . ' posts to comment!');
    }

    public function sendMessagesToWhatsappToScrap(Request $request)
    {
        $posts = $request->get('posts');
        $user  = Auth::user();

        $message = 'The comments to be posted on posts are: ';

        foreach ($posts as $postId) {
            $post = AutoCommentHistory::find($postId);
            $message .= "\n Post Url: instagram://media?id=$post->post_id \n Comment: $post->comment \n\n";
        }

        $myRequest = new Request();
        $myRequest->setMethod('POST');
        $myRequest->request->add([
            'vendor_id'      => $user->id,
            'message'        => $message,
            'is_vendor_user' => 'yes',
            'status'         => 1,
        ]);

        app(WhatsAppController::class)->sendMessage($myRequest, 'vendor');

        return response()->json([
            'status' => 'success',
        ]);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        //
    }

    /**
     * Display the specified resource.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        //
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/VendorController.php 
Content: <?php

namespace App\Http\Controllers;

use Auth;
use Hash;
use Mail;
use App\Role;
use App\User;
use App\Email;
use App\Vendor;
use App\Helpers;
use App\Setting;
use App\Customer;
use App\Supplier;
use Carbon\Carbon;
use App\ChatMessage;
use App\VendorStatus;
use App\ReplyCategory;
use App\VendorProduct;
use App\VendorCategory;
use App\Mail\PurchaseEmail;
use App\VendorStatusDetail;
use Illuminate\Support\Arr;
use Illuminate\Support\Str;
use App\Helpers\GithubTrait;
use Illuminate\Http\Request;
use App\Helpers\HubstaffTrait;
use GuzzleHttp\RequestOptions;
use App\Models\DataTableColumn;
use App\Models\VendorFlowChart;
use App\Models\VendorFrequency;
use App\Models\VendorQuestions;
use App\Models\VendorPriceHistory;
use App\VendorStatusDetailHistory;
use Illuminate\Support\Facades\DB;
use Webklex\PHPIMAP\ClientManager;
use App\Models\VendorRatingQANotes;
use App\Meetings\ZoomMeetingDetails;
use App\Models\VendorFLowChartNotes;
use App\Models\VendorQuestionAnswer;
use App\Models\VendorQuestionStatus;
use App\Models\VendorRatingQAStatus;
use App\Models\VendorRemarksHistory;
use App\VendorStatusHistory as VSHM;
use App\Models\VendorFlowChartMaster;
use App\Models\VendorFlowChartStatus;
use App\Models\VendorRatingQuestions;
use App\Models\VendorFlowChartRemarks;
use App\Models\VendorFlowChartSorting;
use App\Models\VendorFlowChartAssignment;
use App\Models\VendorRatingQuestionAnswer;
use GuzzleHttp\Client as GuzzleHttpClient;
use App\Models\VendorQuestionStatusHistory;
use App\Models\VendorRatingQAStatusHistory;
use App\Models\VendorFlowChartStatusHistory;
use Illuminate\Pagination\LengthAwarePaginator;
use Plank\Mediable\Facades\MediaUploader as MediaUploader;

class VendorController extends Controller
{
    use GithubTrait;
    use HubstaffTrait;

    const DEFAULT_FOR = 2; //For Vendor

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function __construct()
    {
        $this->init(config('env.HUBSTAFF_SEED_PERSONAL_TOKEN'));
    }

    public function updateReminder(Request $request)
    {
        $vendor                      = Vendor::find($request->get('vendor_id'));
        $vendor->frequency           = $request->get('frequency');
        $vendor->reminder_message    = $request->get('message');
        $vendor->reminder_from       = $request->get('reminder_from', '0000-00-00 00:00');
        $vendor->reminder_last_reply = $request->get('reminder_last_reply', 0);
        $vendor->save();

        $message = 'Reminder : ' . $request->get('message');
        app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($vendor->phone, '', $message);

        return response()->json([
            'success',
        ]);
    }

    public function index(Request $request)
    {
        $term                 = $request->term;
        $email                = $request->email;
        $whatsappNumber       = $request->whatsapp_number;
        $phone                = $request->phone;
        $status               = $request->status;
        $updatedBy            = $request->updated_by;
        $category             = $request->category;
        $type                 = $request->type;
        $framework            = $request->framework;
        $communicationHistory = $request->communication_history;
        $fltVendorStatus      = $request->flt_vendor_status;
        $with_archived        = $request->get('with_archived') == 'on' ? true : false;

        $authUser            = Auth::user();
        $isAdmin             = $authUser->isAdmin();
        $permittedCategories = $isAdmin ? [] : $authUser->vendorCategoryPermission->pluck('id')->all() + [0];
        $sortByClause        = 'id';
        $orderby             = 'ASC';

        if ($request->orderby == '') {
            $orderby = 'DESC';
        }

        if ($request->sortby == 'category') {
            $sortByClause = 'category_name';
        }

        if ($request->sortby == 'communication') {
            $sortByClause = 'message_created_at';
        }

        if ($request->sortby == 'id') {
            $sortByClause = 'id';
        }

        $q = Vendor::with(['framework', 'latestMessage', 'category'])
            ->select(
                'vendors.*',
                DB::raw('(SELECT mm1.message FROM chat_messages mm1 WHERE mm1.id = chat_messages.message_id) as message'),
                DB::raw('(SELECT mm2.status FROM chat_messages mm2 WHERE mm2.id = chat_messages.message_id) as message_status'),
                DB::raw('(SELECT mm3.created_at FROM chat_messages mm3 WHERE mm3.id = chat_messages.message_id) as message_created_at')
            )
            ->leftJoin('vendor_frameworks AS vf', 'vendors.framework', '=', 'vf.id')
            ->leftJoin(DB::raw('(SELECT MAX(id) as message_id, vendor_id FROM chat_messages GROUP BY vendor_id ORDER BY created_at DESC) AS chat_messages'), function ($join) {
                $join->on('vendors.id', '=', 'chat_messages.vendor_id');
            })
            ->leftJoin('vendor_categories', function ($join) use ($authUser, $isAdmin, $permittedCategories) {
                $join->on('vendors.category_id', '=', 'vendor_categories.id');

                if (! $isAdmin) {
                    $join->where('vendors.email', '=', $authUser->email);

                    if (! empty($permittedCategories)) {
                        $join->whereIn('vendors.category_id', $permittedCategories);
                    }
                }
            })
            ->when($term, fn ($query) => $query->where('vendors.name', 'like', "%{$term}%"))
            ->when($email, fn ($query) => $query->where('email', 'like', "%{$email}%"))
            ->when($whatsappNumber, fn ($query) => $query->where('whatsapp_number', 'like', "%{$whatsappNumber}%"))
            ->when($phone, fn ($query) => $query->where('phone', 'like', "%{$phone}%"))
            ->when($status && ! $with_archived, fn ($query) => $query->where('status', '=', $status))
            ->when($updatedBy && ! $with_archived, fn ($query) => $query->where('updated_by', '=', $updatedBy))
            ->when($category, fn ($query) => $query->whereIn('category_id', $category))
            ->when($type, fn ($query) => $query->where('type', '=', $type))
            ->when($framework, fn ($query) => $query->where('framework', '=', $framework))
            ->when($communicationHistory && ! $with_archived, function ($query) use ($communicationHistory) {
                $query->where(function ($subQuery) use ($communicationHistory) {
                    $subQuery->whereIn('vendors.id', function ($subSubQuery) use ($communicationHistory) {
                        $subSubQuery->select('vendor_id')
                            ->from('chat_messages')
                            ->whereNotNull('vendor_id')
                            ->where('message', 'like', "%{$communicationHistory}%");
                    });
                });
            })
            ->when($fltVendorStatus, fn ($query) => $query->where('vendor_status', 'like', "%{$fltVendorStatus}%"))
            ->when($with_archived, fn ($query) => $query->withTrashed())
            ->where(function ($query) use ($with_archived) {
                if (! $with_archived) {
                    $query->whereNull('deleted_at');
                }
            })
            ->orderBy($sortByClause, $orderby);

        $vendors = $q->get();

        $totalVendor = count($vendors);

        $currentPage = LengthAwarePaginator::resolveCurrentPage();
        $perPage     = Setting::get('pagination');
        if (request()->get('select_all') == 'true') {
            $perPage     = count($vendors);
            $currentPage = 1;
        }

        if (! is_numeric($perPage)) {
            $perPage = 2;
        }

        $currentItems = $vendors->slice($perPage * ($currentPage - 1), $perPage);
        $vendors      = new LengthAwarePaginator($currentItems, count($vendors), $perPage, $currentPage, [
            'path' => LengthAwarePaginator::resolveCurrentPath(),
        ]);

        $vendor_categories = VendorCategory::all();
        $users             = User::all();
        $replies           = \App\Reply::where('model', 'Vendor')->whereNull('deleted_at')->pluck('reply', 'id')->toArray();
        $statusList        = \DB::table('vendor_status')->select('name')->pluck('name', 'name')->toArray();

        $updatedProducts = \App\Vendor::join('users as u', 'u.id', 'vendors.updated_by')
            ->groupBy('vendors.updated_by')
            ->select([\DB::raw('count(u.id) as total_records'), 'u.name'])
            ->get();

        $whatsapp       = DB::select('SELECT number FROM whatsapp_configs WHERE status = 1 '); // and provider="Chat-API"
        $status         = VendorStatus::all();
        $datatableModel = DataTableColumn::select('column_name')->where('user_id', auth()->user()->id)->where('section_name', 'vendors-listing')->first();

        $dynamicColumnsToShowVendors = [];
        if (! empty($datatableModel->column_name)) {
            $hideColumns                 = $datatableModel->column_name ?? '';
            $dynamicColumnsToShowVendors = json_decode($hideColumns, true);
        }

        $flowchart_master   = VendorFlowChartMaster::all();
        $vendor_flow_charts = VendorFlowChart::with('master')->orderBy('sorting', 'ASC')->get();
        $vendor_questions   = VendorQuestions::orderBy('sorting', 'ASC')->get();
        $rating_questions   = VendorRatingQuestions::orderBy('sorting', 'ASC')->get();
        $status_q           = VendorQuestionStatus::all();

        if ($request->ajax()) {
            return view('vendors.partials.data',
                [
                    'vendors'                     => $vendors,
                    'orderby'                     => $orderby,
                    'replies'                     => $replies,
                    'statusList'                  => $statusList,
                    'dynamicColumnsToShowVendors' => $dynamicColumnsToShowVendors,
                    'whatsapp'                    => $whatsapp,
                ]);
        }

        return view('vendors.index', [
            'vendors'                     => $vendors,
            'vendor_categories'           => $vendor_categories,
            'term'                        => $term,
            'orderby'                     => $orderby,
            'users'                       => $users,
            'status'                      => $status,
            'replies'                     => $replies,
            'updatedProducts'             => $updatedProducts,
            'totalVendor'                 => $totalVendor,
            'statusList'                  => $statusList,
            'dynamicColumnsToShowVendors' => $dynamicColumnsToShowVendors,
            'whatsapp'                    => $whatsapp,
            'flowchart_master'            => $flowchart_master,
            'vendor_flow_charts'          => $vendor_flow_charts,
            'vendor_questions'            => $vendor_questions,
            'rating_questions'            => $rating_questions,
            'status_q'                    => $status_q,
        ]);
    }

    /**
     * This will use to change vendor whatsapp number
     */
    public function changeWhatsapp(Request $request)
    {
        $vendor = Vendor::find($request->vendor_id)->first();
        $data   = ['whatsapp_number' => $request->whatsapp_number];
        $vendor->update($data);

        return response()->json(['success' => 'successfully updated', 'data' => $data]);
    }

    public function vendorSearch()
    {
        $term   = request()->get('q', null);
        $search = Vendor::where('name', 'LIKE', '%' . $term . '%')
            ->get();

        return response()->json($search);
    }

    public function vendorSearchEmail()
    {
        $term   = request()->get('q', null);
        $search = Vendor::where('email', 'LIKE', '%' . $term . '%')
            ->get();

        return response()->json($search);
    }

    public function vendorSearchPhone()
    {
        $term   = request()->get('q', null);
        $search = Vendor::where('phone', 'LIKE', '%' . $term . '%')
            ->get();

        return response()->json($search);
    }

    public function email(Request $request)
    {
        $vendorArr = Vendor::join('emails', 'emails.model_id', 'vendors.id')
            ->where('emails.model_type', Vendor::class)
            ->where('vendors.id', $request->get('id', 0))
            ->get();
        $data = [];
        foreach ($vendorArr as $vendor) {
            $additional_data = json_decode($vendor->additional_data);
            $data[]          = [
                'from'       => $vendor->from,
                'to'         => $vendor->to,
                'subject'    => $vendor->subject,
                'message'    => strip_tags($vendor->message),
                'cc'         => $vendor->cc,
                'bcc'        => $vendor->bcc,
                'created_at' => $vendor->created_at,
                'attachment' => ! empty($additional_data->attachment) ? $additional_data->attachment : '',
                'inout'      => $vendor->email != $vendor->from ? 'out' : 'in',
            ];
        }

        return response()->json($data);
    }

    public function assignUserToCategory(Request $request)
    {
        $user     = $request->get('user_id');
        $category = $request->get('category_id');

        $category          = VendorCategory::find($category);
        $category->user_id = $user;
        $category->save();

        return response()->json([
            'status' => 'success',
        ]);
    }

    public function product()
    {
        $products = VendorProduct::with('vendor')->latest()->paginate(Setting::get('pagination'));
        $vendors  = Vendor::select(['id', 'name'])->get();

        return view('vendors.product', [
            'products' => $products,
            'vendors'  => $vendors,
        ]);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $rules = [
            'category_id'          => 'sometimes|nullable|numeric',
            'name'                 => 'required|string|max:255',
            'address'              => 'sometimes|nullable|string',
            'email'                => 'sometimes|nullable|email',
            'gmail'                => 'sometimes|nullable|email',
            'social_handle'        => 'sometimes|nullable',
            'website'              => 'sometimes|nullable',
            'login'                => 'sometimes|nullable',
            'password'             => 'sometimes|nullable',
            'gst'                  => 'sometimes|nullable|max:255',
            'account_name'         => 'sometimes|nullable|max:255',
            'account_iban'         => 'sometimes|nullable|max:255',
            'account_swift'        => 'sometimes|nullable|max:255',
            'frequency_of_payment' => 'sometimes|nullable|max:255',
            'bank_name'            => 'sometimes|nullable|max:255',
            'bank_address'         => 'sometimes|nullable|max:255',
            'city'                 => 'sometimes|nullable|max:255',
            'country'              => 'sometimes|nullable|max:255',
            'ifsc_code'            => 'sometimes|nullable|max:255',
            'remark'               => 'sometimes|nullable|max:255',
        ];
        $vendorCount = ! empty($request['vendor_name']) ? count($request['vendor_name']) : 0;
        $vendorRules = $vendorData = [];
        $inputs      = $request->all();
        if ($vendorCount !== '') {
            $vendorRules = [
                'vendor_name'    => 'sometimes|array',
                'vendor_name.*'  => 'sometimes|string|max:255',
                'vendor_email'   => 'sometimes|array',
                'vendor_email.*' => 'sometimes|nullable|email',
                'vendor_gmail'   => 'sometimes|array',
                'vendor_gmail.*' => 'sometimes|nullable|email',
            ];
            for ($i = 0; $i < $vendorCount; $i++) {
                $vendorData[$i]['category_id'] = $request['category_id'];
                $vendorData[$i]['name']        = $request['vendor_name'][$i];
                $vendorData[$i]['email']       = $request['vendor_email'][$i];
                $vendorData[$i]['gmail']       = $request['vendor_gmail'][$i];
            }
        }
        $rules = array_merge($rules, $vendorRules);
        $this->validate($request, $rules);

        $source = $request->get('source', '');
        $data   = $request->except(['_token', 'create_user']);

        if (empty($data['whatsapp_number'])) {
            //get default whatsapp number for vendor from whatsapp config
            $task_info = DB::table('whatsapp_configs')
                ->select('*')
                ->whereRaw('find_in_set(' . self::DEFAULT_FOR . ',default_for)')
                ->first();
            if (isset($task_info->number) && $task_info->number != null) {
                $data['whatsapp_number'] = $task_info->number;
            }
        }

        if (empty($data['default_phone'])) {
            $data['default_phone'] = $data['phone'];
        }

        if (! empty($source)) {
            $data['status'] = 0;
        }
        if (! empty($request['framework'])) {
            $data['framework'] = implode(',', $request['framework']);
        }
        if (! empty($request['frequency_of_payment'])) {
            $data['frequency_of_payment'] = implode(',', $request['frequency_of_payment']);
        }

        $VPHA = 0;
        $VPH  = new VendorPriceHistory;
        if (! empty($request['price'])) {
            $data['price'] = $request['price'];
            $VPH->price    = $request['price'];
            $VPHA          = 1;
        }
        if (! empty($request['currency'])) {
            $data['currency'] = $request['currency'];
            $VPH->currency    = $request['currency'];
            $VPHA             = 1;
        }
        if (! empty($request['price_remarks'])) {
            $data['price_remarks'] = $request['price_remarks'];
            $VPH->hisotry          = $request['price_remarks'];
            $VPHA                  = 1;
        }

        $mainVendorData[0] = $data;
        $existArray        = [];
        $sourceStatus      = $validateStatus = false;
        $inputsData        = array_merge($mainVendorData, $vendorData);
        foreach ($inputsData as $key => $data) {
            $vendorInsert = Vendor::create($data);

            if ($VPHA == 1) {
                $VPH->vendor_id = $vendorInsert->id;
                $VPH->user_id   = Auth::user()->id;
                $VPH->save();
            }

            if ($request->create_user == 'on') {
                if ($data['email'] != null) {
                    $userEmail = User::where('email', $data['email'])->first();
                } else {
                    $userEmail = null;
                }
                if ($key == 0) {
                    $userPhone = User::where('phone', $data['phone'])->first();
                }
                if ($userEmail == null) {
                    $user       = new User;
                    $user->name = str_replace(' ', '_', $data['name']);
                    if ($data['email'] == null) {
                        $email = str_replace(' ', '_', $data['name']) . '@solo.com';
                    } else {
                        $email = $data['email'];
                    }
                    $password       = Str::random(10);
                    $user->email    = $email;
                    $user->gmail    = $data['gmail'];
                    $user->password = Hash::make($password);
                    $user->phone    = ! empty($data['phone']) ? $data['phone'] : null;

                    // check the default whatsapp no and store it
                    $whpno = \DB::table('whatsapp_configs')
                        ->select('*')
                        ->whereRaw('find_in_set(4,default_for)')
                        ->first();
                    if ($whpno) {
                        $user->whatsapp_number = $whpno->number;
                    }

                    $user->save();
                    $role = Role::where('name', 'Developer')->first();
                    $user->roles()->sync($role->id);
                    $message = 'We have created an account for you on our ERP. You can login using the following details: url: https://erp.theluxuryunlimited.com/ username: ' . $email . ' password:  ' . $password . '';
                    if ($key == 0) {
                        app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($data['phone'], $user->whatsapp_number, $message);
                    }
                } else {
                    if (! empty($source)) {
                        $sourceStatus = true;
                    }
                    $validateStatus = true;
                    $existArray[]   = $data['name'];
                }
            }
        }
        if ($sourceStatus) {
            return redirect()->back()->withErrors('Vendor Created , couldnt create User, Email or Phone Already Exist');
        }
        $existArrayString = '';
        if ($validateStatus) {
            if (! empty($existArray)) {
                $existArrayString = '(' . implode(',', $existArray) . ')';
            }

            return redirect()->route('vendors.index')->withErrors('Vendor Created , couldnt create User ' . $existArrayString . ', Email or Phone Already Exist');
        }

        $isInvitedOnGithub = false;
        if ($request->create_user_github == 'on' && isset($request->email) && isset($request->organization_id)) {
            //has requested for github invitation
            $isInvitedOnGithub = $this->sendGithubInvitaion($request->email, $request->organization_id);
        }

        $isInvitedOnHubstaff = false;
        if ($request->create_user_hubstaff == 'on' && isset($request->email)) {
            //has requested hubstaff invitation
            $isInvitedOnHubstaff = $this->sendHubstaffInvitation($request->email);
        }

        if (! empty($source)) {
            return redirect()->back()->withSuccess('You have successfully saved a vendor!');
        }

        return redirect()->route('vendors.index')->withSuccess('You have successfully saved a vendor!');
    }

    public function productStore(Request $request)
    {
        $this->validate($request, [
            'vendor_id'       => 'required|numeric',
            'images.*'        => 'sometimes|nullable|image',
            'date_of_order'   => 'required|date',
            'name'            => 'required|string|max:255',
            'qty'             => 'sometimes|nullable|numeric',
            'price'           => 'sometimes|nullable|numeric',
            'payment_terms'   => 'sometimes|nullable|string',
            'recurring_type'  => 'required|string',
            'delivery_date'   => 'sometimes|nullable|date',
            'received_by'     => 'sometimes|nullable|string',
            'approved_by'     => 'sometimes|nullable|string',
            'payment_details' => 'sometimes|nullable|string',
        ]);

        $data = $request->except('_token');

        $product = VendorProduct::create($data);

        if ($request->hasFile('images')) {
            foreach ($request->file('images') as $image) {
                $media = MediaUploader::fromSource($image)
                    ->toDirectory('vendorproduct/' . floor($product->id / config('constants.image_per_folder')))
                    ->upload();
                $product->attachMedia($media, config('constants.media_tags'));
            }
        }

        return redirect()->back()->withSuccess('You have successfully saved a vendor product!');
    }

    /**
     * Display the specified resource.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        $vendor            = Vendor::find($id);
        $vendor_categories = VendorCategory::all();
        $vendor_show       = true;
        $emails            = [];
        $reply_categories  = ReplyCategory::all();
        $users_array       = Helpers::getUserArray(User::all());

        return view('vendors.show', [
            'vendor'            => $vendor,
            'vendor_categories' => $vendor_categories,
            'vendor_show'       => $vendor_show,
            'reply_categories'  => $reply_categories,
            'users_array'       => $users_array,
            'emails'            => $emails,
        ]);
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        $this->validate($request, [
            'category_id'          => 'sometimes|nullable|numeric',
            'name'                 => 'required|string|max:255',
            'address'              => 'sometimes|nullable|string',
            'phone'                => 'sometimes|nullable|numeric',
            'default_phone'        => 'sometimes|nullable|numeric',
            'whatsapp_number'      => 'sometimes|nullable|numeric',
            'email'                => 'sometimes|nullable|email',
            'social_handle'        => 'sometimes|nullable',
            'website'              => 'sometimes|nullable',
            'login'                => 'sometimes|nullable',
            'password'             => 'sometimes|nullable',
            'gst'                  => 'sometimes|nullable|max:255',
            'account_name'         => 'sometimes|nullable|max:255',
            'account_iban'         => 'sometimes|nullable|max:255',
            'account_swift'        => 'sometimes|nullable|max:255',
            'frequency_of_payment' => 'sometimes|nullable|max:255',
            'bank_name'            => 'sometimes|nullable|max:255',
            'bank_address'         => 'sometimes|nullable|max:255',
            'city'                 => 'sometimes|nullable|max:255',
            'country'              => 'sometimes|nullable|max:255',
            'ifsc_code'            => 'sometimes|nullable|max:255',
            'remark'               => 'sometimes|nullable|max:255',
        ]);

        $vendorData = Vendor::find($id);

        $data = $request->except('_token');

        if (! empty($request['framework'])) {
            $data['framework'] = implode(',', $request['framework']);
        }

        if (! empty($request['frequency_of_payment'])) {
            $data['frequency_of_payment'] = implode(',', $request['frequency_of_payment']);
        }

        $VPHA = 0;
        $VPH  = new VendorPriceHistory;
        if (! empty($request['price'])) {
            $data['price'] = $request['price'];

            if ($vendorData['price'] != $request['price']) {
                $VPH->price = $request['price'];
                $VPHA       = 1;
            }
        }
        if (! empty($request['currency'])) {
            $data['currency'] = $request['currency'];

            if ($vendorData['currency'] != $request['currency']) {
                $VPH->currency = $request['currency'];
                $VPHA          = 1;
            }
        }
        if (! empty($request['price_remarks'])) {
            $data['price_remarks'] = $request['price_remarks'];

            if ($vendorData['price_remarks'] != $request['price_remarks']) {
                $VPH->hisotry = $request['price_remarks'];
                $VPHA         = 1;
            }
        }

        Vendor::find($id)->update($data);

        if ($VPHA == 1) {
            $VPH->vendor_id = $id;
            $VPH->user_id   = Auth::user()->id;
            $VPH->save();
        }

        return redirect()->route('vendors.index')->withSuccess('You have successfully updated a vendor!');
    }

    public function productUpdate(Request $request, $id)
    {
        $this->validate($request, [
            'vendor_id'       => 'sometimes|nullable|numeric',
            'images.*'        => 'sometimes|nullable|image',
            'date_of_order'   => 'required|date',
            'name'            => 'required|string|max:255',
            'qty'             => 'sometimes|nullable|numeric',
            'price'           => 'sometimes|nullable|numeric',
            'payment_terms'   => 'sometimes|nullable|string',
            'recurring_type'  => 'required|string',
            'delivery_date'   => 'sometimes|nullable|date',
            'received_by'     => 'sometimes|nullable|string',
            'approved_by'     => 'sometimes|nullable|string',
            'payment_details' => 'sometimes|nullable|string',
        ]);

        $data = $request->except('_token');

        $product = VendorProduct::find($id);
        $product->update($data);

        if ($request->hasFile('images')) {
            foreach ($request->file('images') as $image) {
                $media = MediaUploader::fromSource($image)
                    ->toDirectory('vendorproduct/' . floor($product->id / config('constants.image_per_folder')))
                    ->upload();
                $product->attachMedia($media, config('constants.media_tags'));
            }
        }

        return redirect()->back()->withSuccess('You have successfully updated a vendor product!');
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        $vendor = Vendor::find($id);
        $vendor->delete();

        return redirect()->route('vendors.index')->withSuccess('You have successfully deleted a vendor');
    }

    public function productDestroy($id)
    {
        $product = VendorProduct::find($id);

        $product->detachMediaTags(config('constants.media_tags'));
        $product->delete();

        return redirect()->back()->withSuccess('You have successfully deleted a vendor product!');
    }

    public function sendEmailBulk(Request $request)
    {
        $this->validate($request, [
            'subject' => 'required|min:3|max:255',
            'message' => 'required',
            'cc.*'    => 'nullable|email',
            'bcc.*'   => 'nullable|email',
        ]);

        $fromEmail = 'buying@amourint.com';
        $fromName  = 'buying';

        if ($request->from_mail) {
            $mail = \App\EmailAddress::where('id', $request->from_mail)->first();
            if ($mail) {
                $fromEmail = $mail->from_address;
                $fromName  = $mail->from_name;
                $config    = config('mail');
                unset($config['sendmail']);
                $configExtra = [
                    'driver' => $mail->driver,
                    'host'   => $mail->host,
                    'port'   => $mail->port,
                    'from'   => [
                        'address' => $mail->from_address,
                        'name'    => $mail->from_name,
                    ],
                    'encryption' => $mail->encryption,
                    'username'   => $mail->username,
                    'password'   => $mail->password,
                ];
                \Config::set('mail', array_merge($config, $configExtra));
                (new \Illuminate\Mail\MailServiceProvider(app()))->register();
            }
        }

        if ($request->vendor_ids) {
            $vendor_ids = explode(',', $request->vendor_ids);
            $vendors    = Vendor::whereIn('id', $vendor_ids)->get();
        }

        if ($request->vendors) {
            $vendors = Vendor::where('id', $request->vendors)->get();
        } else {
            if ($request->not_received != 'on' && $request->received != 'on') {
                return redirect()->route('vendors.index')->withErrors(['Please select vendors']);
            }
        }

        if ($request->not_received == 'on') {
            $vendors = Vendor::doesnthave('emails')->where(function ($query) {
                $query->whereNotNull('email');
            })->get();
        }

        if ($request->received == 'on') {
            $vendors = Vendor::whereDoesntHave('emails', function ($query) {
                $query->where('type', 'incoming');
            })->where(function ($query) {
                $query->orWhereNotNull('email');
            })->where('has_error', 0)->get();
        }

        $file_paths = [];

        if ($request->hasFile('file')) {
            foreach ($request->file('file') as $file) {
                $filename = $file->getClientOriginalName();

                $file->storeAs('documents', $filename, 'files');

                $file_paths[] = "documents/$filename";
            }
        }

        $cc = $bcc = [];
        if ($request->has('cc')) {
            $cc = array_values(array_filter($request->cc));
        }
        if ($request->has('bcc')) {
            $bcc = array_values(array_filter($request->bcc));
        }

        foreach ($vendors as $vendor) {
            $mail = Mail::to($vendor->email);

            if ($cc) {
                $mail->cc($cc);
            }
            if ($bcc) {
                $mail->bcc($bcc);
            }

            $mail->send(new PurchaseEmail($request->subject, $request->message, $file_paths, ['from' => $fromEmail]));

            $params = [
                'model_id'        => $vendor->id,
                'model_type'      => Vendor::class,
                'from'            => $fromEmail,
                'seen'            => 1,
                'to'              => $vendor->email,
                'subject'         => $request->subject,
                'message'         => $request->message,
                'template'        => 'customer-simple',
                'additional_data' => json_encode(['attachment' => $file_paths]),
                'cc'              => $cc ?: null,
                'bcc'             => $bcc ?: null,
            ];

            Email::create($params);
        }

        return redirect()->route('vendors.index')->withSuccess('You have successfully sent emails in bulk!');
    }

    public function sendEmail(Request $request)
    {
        $this->validate($request, [
            'subject' => 'required|min:3|max:255',
            'message' => 'required',
            'email.*' => 'required|email',
            'cc.*'    => 'nullable|email',
            'bcc.*'   => 'nullable|email',
        ]);

        $vendor = Vendor::find($request->vendor_id);

        $fromEmail = 'buying@amourint.com';
        $fromName  = 'buying';

        if ($request->from_mail) {
            $mail = \App\EmailAddress::where('id', $request->from_mail)->first();
            if ($mail) {
                $fromEmail = $mail->from_address;
                $fromName  = $mail->from_name;
                $config    = config('mail');
                unset($config['sendmail']);
                $configExtra = [
                    'driver' => $mail->driver,
                    'host'   => $mail->host,
                    'port'   => $mail->port,
                    'from'   => [
                        'address' => $mail->from_address,
                        'name'    => $mail->from_name,
                    ],
                    'encryption' => $mail->encryption,
                    'username'   => $mail->username,
                    'password'   => $mail->password,
                ];
                \Config::set('mail', array_merge($config, $configExtra));
                (new \Illuminate\Mail\MailServiceProvider(app()))->register();
            }
        }

        if ($vendor->email != '') {
            $file_paths = [];

            if ($request->hasFile('file')) {
                foreach ($request->file('file') as $file) {
                    $filename = $file->getClientOriginalName();

                    $file->storeAs('documents', $filename, 'files');

                    $file_paths[] = "documents/$filename";
                }
            }

            $cc     = $bcc = [];
            $emails = $request->email;

            if ($request->has('cc')) {
                $cc = array_values(array_filter($request->cc));
            }
            if ($request->has('bcc')) {
                $bcc = array_values(array_filter($request->bcc));
            }

            if (is_array($emails) && ! empty($emails)) {
                $to = array_shift($emails);
                $cc = array_merge($emails, $cc);

                $mail = Mail::to($to);

                if ($cc) {
                    $mail->cc($cc);
                }
                if ($bcc) {
                    $mail->bcc($bcc);
                }

                $mail->send(new PurchaseEmail($request->subject, $request->message, $file_paths, ['from' => $fromEmail]));
            } else {
                return redirect()->back()->withErrors('Please select an email');
            }

            $params = [
                'model_id'        => $vendor->id,
                'model_type'      => Vendor::class,
                'from'            => $fromEmail,
                'to'              => $request->email[0],
                'seen'            => 1,
                'subject'         => $request->subject,
                'message'         => $request->message,
                'template'        => 'customer-simple',
                'additional_data' => json_encode(['attachment' => $file_paths]),
                'cc'              => $cc ?: null,
                'bcc'             => $bcc ?: null,
            ];

            Email::create($params);

            return redirect()->route('vendors.show', $vendor->id)->withSuccess('You have successfully sent an email!');
        }
    }

    public function emailInbox(Request $request)
    {
        try {
            $cm   = new ClientManager();
            $imap = $cm->make([
                'host'          => env('IMAP_HOST_PURCHASE'),
                'port'          => env('IMAP_PORT_PURCHASE'),
                'encryption'    => env('IMAP_ENCRYPTION_PURCHASE'),
                'validate_cert' => env('IMAP_VALIDATE_CERT_PURCHASE'),
                'username'      => env('IMAP_USERNAME_PURCHASE'),
                'password'      => env('IMAP_PASSWORD_PURCHASE'),
                'protocol'      => env('IMAP_PROTOCOL_PURCHASE'),
            ]);

            $imap->connect();
            if ($request->vendor_id) {
                $vendor = Vendor::find($request->vendor_id);

                if ($request->type == 'inbox') {
                    $inbox_name = 'INBOX';
                    $direction  = 'from';
                    $type       = 'incoming';
                } else {
                    $inbox_name = 'INBOX.Sent';
                    $direction  = 'to';
                    $type       = 'outgoing';
                }

                $inbox = $imap->getFolder($inbox_name);

                $latest_email = Email::where('type', $type)->where('model_id', $vendor->id)->where('model_type', \App\Vendor::class)->latest()->first();

                $latest_email_date = $latest_email
                    ? Carbon::parse($latest_email->created_at)
                    : Carbon::parse('1990-01-01');

                $vendorAgentsCount = $vendor->agents()->count();

                if ($vendorAgentsCount == 0) {
                    $emails = $inbox->messages()->where($direction, $vendor->email)->since(Carbon::parse($latest_email_date)->format('Y-m-d H:i:s'));
                    $emails = $emails->leaveUnread()->get();
                    $this->createEmailsForEmailInbox($vendor, $type, $latest_email_date, $emails);
                } elseif ($vendorAgentsCount == 1) {
                    $emails = $inbox->messages()->where($direction, $vendor->agents[0]->email)->since(Carbon::parse($latest_email_date)->format('Y-m-d H:i:s'));
                    $emails = $emails->leaveUnread()->get();
                    $this->createEmailsForEmailInbox($vendor, $type, $latest_email_date, $emails);
                } else {
                    foreach ($vendor->agents as $key => $agent) {
                        if ($key == 0) {
                            $emails = $inbox->messages()->where($direction, $agent->email)->where([
                                ['SINCE', $latest_email_date->format('d M y H:i')],
                            ]);
                            $emails = $emails->leaveUnread()->get();
                            $this->createEmailsForEmailInbox($vendor, $type, $latest_email_date, $emails);
                        } else {
                            $additional = $inbox->messages()->where($direction, $agent->email)->since(Carbon::parse($latest_email_date)->format('Y-m-d H:i:s'));
                            $additional = $additional->leaveUnread()->get();
                            $this->createEmailsForEmailInbox($vendor, $type, $latest_email_date, $additional);
                        }
                    }
                }

                $db_emails = $vendor->emails()->with('model')->where('type', $type)->get();

                $emails_array = [];
                $count        = 0;
                foreach ($db_emails as $key2 => $email) {
                    $dateCreated = $email->created_at->format('D, d M Y');
                    $timeCreated = $email->created_at->format('H:i');
                    $userName    = null;
                    if ($email->model instanceof Supplier) {
                        $userName = $email->model->supplier;
                    } elseif ($email->model instanceof Customer) {
                        $userName = $email->model->name;
                    }

                    $emails_array[$count + $key2]['id']          = $email->id;
                    $emails_array[$count + $key2]['subject']     = $email->subject;
                    $emails_array[$count + $key2]['seen']        = $email->seen;
                    $emails_array[$count + $key2]['type']        = $email->type;
                    $emails_array[$count + $key2]['date']        = $email->created_at;
                    $emails_array[$count + $key2]['from']        = $email->from;
                    $emails_array[$count + $key2]['to']          = $email->to;
                    $emails_array[$count + $key2]['message']     = $email->message;
                    $emails_array[$count + $key2]['cc']          = $email->cc;
                    $emails_array[$count + $key2]['bcc']         = $email->bcc;
                    $emails_array[$count + $key2]['replyInfo']   = "On {$dateCreated} at {$timeCreated}, $userName <{$email->from}> wrote:";
                    $emails_array[$count + $key2]['dateCreated'] = $dateCreated;
                    $emails_array[$count + $key2]['timeCreated'] = $timeCreated;
                }

                $emails_array = array_values(Arr::sort($emails_array, function ($value) {
                    return $value['date'];
                }));

                $emails_array = array_reverse($emails_array);

                $perPage      = 10;
                $currentPage  = LengthAwarePaginator::resolveCurrentPage();
                $currentItems = array_slice($emails_array, $perPage * ($currentPage - 1), $perPage);
                $emails       = new LengthAwarePaginator($currentItems, count($emails_array), $perPage, $currentPage);

                $view = view('vendors.partials.email', ['emails' => $emails, 'type' => $request->type])->render();

                return response()->json(['emails' => $view]);
            } else {
                return response()->json(['message' => 'Something went wrong! No request data vaialable.'], 422);
            }
        } catch (Exception $e) {
            return response()->json(['message' => 'Something went wrong!'], 422);
        }
    }

    private function createEmailsForEmailInbox($vendor, $type, $latest_email_date, $emails)
    {
        foreach ($emails as $email) {
            $content = $email->hasHTMLBody() ? $email->getHTMLBody() : $email->getTextBody();

            if ($email->getDate()->format('Y-m-d H:i:s') > $latest_email_date->format('Y-m-d H:i:s')) {
                $attachments_array = [];
                $attachments       = $email->getAttachments();

                $attachments->each(function ($attachment) use (&$attachments_array) {
                    file_put_contents(storage_path('app/files/email-attachments/' . $attachment->name), $attachment->content);
                    $path                = 'email-attachments/' . $attachment->name;
                    $attachments_array[] = $path;
                });

                $params = [
                    'model_id'        => $vendor->id,
                    'model_type'      => Vendor::class,
                    'type'            => $type,
                    'seen'            => $email->getFlags()['seen'],
                    'from'            => $email->getFrom()[0]->mail,
                    'to'              => array_key_exists(0, $email->getTo()) ? $email->getTo()[0]->mail : $email->getReplyTo()[0]->mail,
                    'subject'         => $email->getSubject(),
                    'message'         => $content,
                    'template'        => 'customer-simple',
                    'additional_data' => json_encode(['attachment' => $attachments_array]),
                    'created_at'      => $email->getDate(),
                ];

                Email::create($params);
            }
        }
    }

    public function block(Request $request)
    {
        $vendor = Vendor::find($request->vendor_id);

        if ($vendor->is_blocked == 0) {
            $vendor->is_blocked = 1;
        } else {
            $vendor->is_blocked = 0;
        }

        $vendor->save();

        return response()->json(['is_blocked' => $vendor->is_blocked]);
    }

    public function addReply(Request $request)
    {
        $reply     = $request->get('reply');
        $autoReply = [];
        // add reply from here
        if (! empty($reply)) {
            $autoReply = \App\Reply::updateOrCreate(
                ['reply' => $reply, 'model' => 'Vendor', 'category_id' => 1],
                ['reply' => $reply]
            );
        }

        return response()->json(['code' => 200, 'data' => $autoReply]);
    }

    public function deleteReply(Request $request)
    {
        $id = $request->get('id');

        if ($id > 0) {
            $autoReply = \App\Reply::where('id', $id)->first();
            if ($autoReply) {
                $autoReply->delete();
            }
        }

        return response()->json([
            'code' => 200, 'data' => \App\Reply::where('model', 'Vendor')
                ->whereNull('deleted_at')
                ->pluck('reply', 'id')
                ->toArray(),
        ]);
    }

    public function createUser(Request $request)
    {
        $vendor = Vendor::find($request->id);
        //Check If User Exist
        $userEmail = User::where('email', $vendor->email)->first();
        $userPhone = User::where('phone', $vendor->phone)->first();
        if ($userEmail == null && $userPhone == null) {
            $user       = new User;
            $user->name = str_replace(' ', '_', $vendor->name);
            if ($vendor->email == null) {
                $email = str_replace(' ', '_', $vendor->name) . '@solo.com';
            } else {
                $email = $vendor->email;
            }
            $password       = Str::random(10);
            $user->email    = $email;
            $user->password = Hash::make($password);
            $user->phone    = $vendor->phone;
            $user->save();
            $role = Role::where('name', 'Developer')->first();
            $user->roles()->sync($role->id);
            $message = 'We have created an account for you on our ERP. You can login using the following details: url: https://erp.theluxuryunlimited.com/ username: ' . $email . ' password:  ' . $password . '';
            app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($vendor->phone, '', $message);

            return response()->json(['code' => 200, 'data' => 'User Created']);
        } else {
            return response()->json(['code' => 200, 'data' => "Couldn't Create User Email or Phone Already Exist"]);
        }
    }

    public function inviteGithub(Request $request)
    {
        $email          = $request->get('email');
        $organizationId = $request->get('organizationId');

        if (! empty($email) && strlen($organizationId) > 0) {
            if ($this->sendGithubInvitaion($email, $organizationId)) {
                return response()->json(
                    ['message' => 'Invitation sent to ' . $email]
                );
            }

            return response()->json(
                ['message' => 'Unable to send invitation to ' . $email],
                500
            );
        }

        return response()->json(
            ['message' => 'Email not mentioned'],
            400
        );
    }

    public function inviteHubstaff(Request $request)
    {
        $email = $request->get('email');
        if ($email) {
            $response = $this->sendHubstaffInvitation($email);
            if ($response['code'] == 200) {
                return response()->json(
                    ['message' => 'Invitation sent to ' . $email]
                );
            }

            return response()->json(
                ['message' => $response['message']],
                500
            );
        }

        return response()->json(
            ['message' => 'Email not mentioned'],
            400
        );
    }

    private function sendGithubInvitaion(string $email, $organizationId)
    {
        return $this->inviteUser($email, $organizationId);
    }

    public function changeHubstaffUserRole(Request $request)
    {
        $id   = $request->vendor_id;
        $role = $request->role;
        if ($id && $role && $role != '') {
            $vendor = Vendor::find($id);
            $user   = User::where('phone', $vendor->phone)->first();
            if ($user) {
                $member = \App\Hubstaff\HubstaffMember::where('user_id', $user->id)->first();
                if ($member) {
                    $hubstaff_member_id = $member->hubstaff_user_id;
                    // $hubstaff_member_id = 901839;
                    $response = $this->changeHubstaffUserRoleApi($hubstaff_member_id);
                    if ($response['code'] == 200) {
                        return response()->json(['message' => 'Role successfully changed in the hubstaff'], 200);
                    } else {
                        return response()->json(['message' => $response['message']], 500);
                    }
                }
            }
        }

        return response()->json(['message' => 'User or hubstaff member not found'], 500);
    }

    private function changeHubstaffUserRoleApi($hubstaff_member_id)
    {
        try {
            $tokens = $this->getTokens();
            $url    = 'https://api.hubstaff.com/v2/organizations/' . config('env.HUBSTAFF_ORG_ID') . '/update_members';
            $client = new GuzzleHttpClient();
            $body   = [
                'members' => [
                    [
                        'user_id' => $hubstaff_member_id,
                        'role'    => 'user',
                    ],
                ],
            ];

            $response = $client->put(
                $url,
                [
                    RequestOptions::HEADERS => [
                        'Authorization' => 'Bearer ' . $tokens->access_token,
                        'Content-Type'  => 'application/json',
                    ],
                    RequestOptions::BODY => json_encode($body),
                ]
            );
            $message = [
                'code'    => 200,
                'message' => 'Successful',
            ];

            return $message;
        } catch (Exception $e) {
            $exception = (string) $e->getResponse()->getBody();
            $exception = json_decode($exception);
            if ($e->getCode() != 200) {
                $message = [
                    'code'    => 500,
                    'message' => $exception->error,
                ];

                return $message;
            } else {
                $message = [
                    'code'    => 200,
                    'message' => 'Successful',
                ];

                return $message;
            }
        }
    }

    private function sendHubstaffInvitation(string $email)
    {
        try {
            $tokens   = $this->getTokens();
            $url      = 'https://api.hubstaff.com/v2/organizations/' . config('env.HUBSTAFF_ORG_ID') . '/invites';
            $client   = new GuzzleHttpClient();
            $response = $client->post(
                $url,
                [
                    RequestOptions::HEADERS => [
                        'Authorization' => 'Bearer ' . $tokens->access_token,
                        'Content-Type'  => 'application/json',
                    ],
                    RequestOptions::JSON => [
                        'email' => $email,
                    ],
                ]
            );
            $message = [
                'code'    => 200,
                'message' => 'Successful',
            ];

            return $message;
        } catch (Exception $e) {
            $exception = (string) $e->getResponse()->getBody();
            $exception = json_decode($exception);
            if ($e->getCode() != 200) {
                $message = [
                    'code'    => 500,
                    'message' => $exception->error,
                ];

                return $message;
            } else {
                $message = [
                    'code'    => 200,
                    'message' => 'Successful',
                ];

                return $message;
            }
        }
    }

    public function changeStatus(Request $request)
    {
        $vendorId = $request->get('vendor_id');
        $statusId = $request->get('status');

        if (! empty($vendorId)) {
            $vendor = \App\Vendor::find($vendorId);
            if (! empty($vendor)) {
                $vendor->status = ($statusId == 'false') ? 0 : 1;
                $vendor->save();
            }
        }

        return response()->json(['code' => 200, 'data' => [], 'message' => 'Status updated successfully']);
    }

    public function sendMessage(Request $request)
    {
        set_time_limit(0);
        $vendors = Vendor::whereIn('id', $request->vendors)->get();
        //Create broadcast
        $broadcast = \App\BroadcastMessage::create(['name' => $request->name]);
        if (count($vendors)) {
            foreach ($vendors as $key => $item) {
                $params = [
                    'vendor_id' => $item->id,
                    'number'    => null,
                    'message'   => $request->message,
                    'user_id'   => Auth::id(),
                    'status'    => 2,
                    'approved'  => 1,
                    'is_queue'  => 0,
                ];
                $message = [
                    'type_id'              => $item->id,
                    'type'                 => App\Vendor::class,
                    'broadcast_message_id' => $broadcast->id,
                ];
                $broadcastnumber = \App\BroadcastMessageNumber::create($message);
                $chat_message    = ChatMessage::create($params);
                $myRequest       = new Request();
                $myRequest->setMethod('POST');
                $myRequest->request->add(['messageId' => $chat_message->id]);
                app(\App\Http\Controllers\WhatsAppController::class)->approveMessage('vendor', $myRequest);
            }
        }
        // return $params;

        return response()->json(['code' => 200, 'data' => [], 'message' => 'Message sent successfully']);
    }

    public function editVendor(Request $request)
    {
        if (! $request->vendor_id || $request->vendor_id == '' || ! $request->column || $request->column == '' || ! $request->value || $request->value == '') {
            return response()->json(['message' => 'Incomplete data'], 500);
        }
        $vendor          = Vendor::find($request->vendor_id);
        $column          = $request->column;
        $vendor->$column = $request->value;
        $vendor->save();

        return response()->json(['message' => 'Successful'], 200);
    }

    public function addStatus(Request $request)
    {
        if ($request->vendor_id == '' || $request->status == '' || $request->agency == '' || $request->hourly_rate == '' || $request->available_hour == '' || $request->experience_level == '' || $request->communication_skill == '') {
            return response()->json(['message' => 'Incomplete data'], 500);
        }
        $vendorStatus = VendorStatusDetail::where('vendor_id', $request->vendor_id)->first();
        if (! $vendorStatus) {
            $vendorStatus = new VendorStatusDetail();
        }
        $vendorStatus->vendor_id           = $request->vendor_id;
        $vendorStatus->user_id             = Auth::user()->id;
        $vendorStatus->status              = $request->status;
        $vendorStatus->hourly_rate         = $request->hourly_rate;
        $vendorStatus->available_hour      = $request->available_hour;
        $vendorStatus->experience_level    = $request->experience_level;
        $vendorStatus->communication_skill = $request->communication_skill;
        $vendorStatus->agency              = $request->agency;
        $vendorStatus->remark              = $request->remark;
        $vendorStatus->save();

        $vendorStatusHistory                      = new VendorStatusDetailHistory();
        $vendorStatusHistory->vendor_id           = $request->vendor_id;
        $vendorStatusHistory->user_id             = Auth::user()->id;
        $vendorStatusHistory->status              = $request->status;
        $vendorStatusHistory->hourly_rate         = $request->hourly_rate;
        $vendorStatusHistory->available_hour      = $request->available_hour;
        $vendorStatusHistory->experience_level    = $request->experience_level;
        $vendorStatusHistory->communication_skill = $request->communication_skill;
        $vendorStatusHistory->agency              = $request->agency;
        $vendorStatusHistory->remark              = $request->remark;
        $vendorStatusHistory->save();

        return response()->json(['message' => 'Successful'], 200);
    }

    public function statusStore(Request $request)
    {
        $this->validate($request, [
            'name' => 'required|string',
        ]);
        $data = $request->except('_token');
        VendorStatus::create($data);

        return redirect()->back()->with('success', 'You have successfully created a status!');
    }

    public function updateStatus(Request $request)
    {
        $vendor                = Vendor::find($request->id);
        $vendor->vendor_status = $request->status;
        $vendor->save();

        $vshm            = new VSHM;
        $vshm->vendor_id = $request->id;
        $vshm->user_id   = $request->user_id;
        $vshm->status    = $request->status;
        $vshm->save();
    }

    public function vendorStatusHistory(Request $request)
    {
        $data = VSHM::with(['user' => function ($query) {
        }])->where('vendor_id', $request->id)->get();

        return response()->json(['code' => 200, 'data' => $data, 'message' => 'Message sent successfully']);
    }

    public function vendorDetailStatusHistory(Request $request)
    {
        $data = VendorStatusDetailHistory::where('vendor_id', $request->id)->with('user')->get();

        return response()->json(['code' => 200, 'data' => $data, 'message' => 'Message sent successfully']);
    }

    public function zoomMeetingList(Request $request)
    {
        $meetings = ZoomMeetingDetails::get();

        return view('vendors.list-zoom-meetings', [
            'meetings' => $meetings,
        ]);
    }

    public function updateMeetingDescription(Request $request)
    {
        $meetingdata              = ZoomMeetingDetails::find($request->id);
        $meetingdata->description = $request->description;
        $meetingdata->save();

        return response()->json(['code' => 200, 'message' => 'Successful'], 200);
    }

    public function refreshMeetingList(Request $request)
    {
        \Artisan::call('save:zoom-meetings');

        return redirect()->back();
    }

    public function syncMeetingsRecordings(Request $request)
    {
        \Artisan::call('zoom:meetings-sync');

        return redirect()->back();
    }

    public function statuscolor(Request $request)
    {
        $status_color = $request->all();
        $data         = $request->except('_token');
        foreach ($status_color['colorname'] as $key => $value) {
            $status_vendor        = VendorStatus::find($key);
            $status_vendor->name  = $value;
            $status_vendor->color = $status_color['color_name'][$key];
            $status_vendor->save();
        }

        return redirect()->back()->with('success', 'The status color updated successfully.');
    }

    public function deleteVStatus(Request $request)
    {
        try {
            VendorStatus::where('id', $request->id)->delete();

            return response()->json(['code' => '200', 'data' => [], 'message' => 'Data deleted successfully']);
        } catch (Exception $e) {
            return response()->json(['code' => '500', 'message' => $e->getMessage()]);
        }
    }

    public function storeshortcut(Request $request)
    {
        $rules = [
            'category_id' => 'sometimes|nullable|numeric',
            'name'        => 'required|string|max:255',
            'email'       => 'sometimes|nullable|email',
            'gmail'       => 'sometimes|nullable|email',
            'website'     => 'sometimes|nullable',
        ];
        $vendorCount = ! empty($request['vendor_name']) ? count($request['vendor_name']) : 0;
        $vendorRules = $vendorData = [];
        $inputs      = $request->all();
        if ($vendorCount !== '') {
            $vendorRules = [
                'vendor_name'    => 'sometimes|array',
                'vendor_name.*'  => 'sometimes|string|max:255',
                'vendor_email'   => 'sometimes|array',
                'vendor_email.*' => 'sometimes|nullable|email',
                'vendor_gmail'   => 'sometimes|array',
                'vendor_gmail.*' => 'sometimes|nullable|email',
            ];
            for ($i = 0; $i < $vendorCount; $i++) {
                $vendorData[$i]['category_id'] = $request['category_id'];
                $vendorData[$i]['name']        = $request['vendor_name'][$i];
                $vendorData[$i]['email']       = $request['vendor_email'][$i];
                $vendorData[$i]['gmail']       = $request['vendor_gmail'][$i];
            }
        }
        $rules = array_merge($rules, $vendorRules);
        $this->validate($request, $rules);

        $source = $request->get('source', '');
        $data   = $request->except(['_token', 'create_user']);

        if (empty($data['whatsapp_number'])) {
            //get default whatsapp number for vendor from whatsapp config
            $task_info = DB::table('whatsapp_configs')
                ->select('*')
                ->whereRaw('find_in_set(' . self::DEFAULT_FOR . ',default_for)')
                ->first();
            if (isset($task_info->number) && $task_info->number != null) {
                $data['whatsapp_number'] = $task_info->number;
            }
        }

        if (empty($data['default_phone'])) {
            $data['default_phone'] = $data['phone'];
        }

        if (! empty($source)) {
            $data['status'] = 0;
        }
        $mainVendorData[0] = $data;
        $existArray        = [];
        $sourceStatus      = $validateStatus = false;
        $inputsData        = array_merge($mainVendorData, $vendorData);
        foreach ($inputsData as $key => $data) {
            if (! empty($data['framework'])) {
                $data['framework'] = implode(',', $data['framework']);
            }
            Vendor::create($data);

            if ($request->create_user == 'on') {
                if ($data['email'] != null) {
                    $userEmail = User::where('email', $data['email'])->first();
                } else {
                    $userEmail = null;
                }
                if ($key == 0) {
                    $userPhone = User::where('phone', $data['phone'])->first();
                }
                if ($userEmail == null) {
                    $user       = new User;
                    $user->name = str_replace(' ', '_', $data['name']);
                    if ($data['email'] == null) {
                        $email = str_replace(' ', '_', $data['name']) . '@solo.com';
                    } else {
                        $email = $data['email'];
                    }
                    $password       = Str::random(10);
                    $user->email    = $email;
                    $user->gmail    = $data['gmail'];
                    $user->password = Hash::make($password);
                    $user->phone    = ! empty($data['phone']) ? $data['phone'] : null;

                    // check the default whatsapp no and store it
                    $whpno = \DB::table('whatsapp_configs')
                        ->select('*')
                        ->whereRaw('find_in_set(4,default_for)')
                        ->first();
                    if ($whpno) {
                        $user->whatsapp_number = $whpno->number;
                    }

                    $user->save();
                    $role = Role::where('name', 'Developer')->first();
                    $user->roles()->sync($role->id);
                    $message = 'We have created an account for you on our ERP. You can login using the following details: url: https://erp.theluxuryunlimited.com/ username: ' . $email . ' password:  ' . $password . '';
                    if ($key == 0) {
                        app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($data['phone'], $user->whatsapp_number, $message);
                    }
                } else {
                    if (! empty($source)) {
                        $sourceStatus = true;
                    }
                    $validateStatus = true;
                    $existArray[]   = $data['name'];
                }
            }
        }
        if ($sourceStatus) {
            return redirect()->back()->withErrors('Vendor Created , couldnt create User, Email or Phone Already Exist');
        }
        $existArrayString = '';
        if ($validateStatus) {
            if (! empty($existArray)) {
                $existArrayString = '(' . implode(',', $existArray) . ')';
            }

            return redirect()->route('vendors.index')->withErrors('Vendor Created , couldnt create User ' . $existArrayString . ', Email or Phone Already Exist');
        }

        $isInvitedOnGithub = false;
        if ($request->create_user_github == 'on' && isset($request->email) && isset($request->organization_id)) {
            //has requested for github invitation
            $isInvitedOnGithub = $this->sendGithubInvitaion($request->email, $request->organization_id);
        }

        $isInvitedOnHubstaff = false;
        if ($request->create_user_hubstaff == 'on' && isset($request->email)) {
            //has requested hubstaff invitation
            $isInvitedOnHubstaff = $this->sendHubstaffInvitation($request->email);
        }

        if (! empty($source)) {
            return redirect()->back()->withSuccess('You have successfully saved a vendor!');
        }

        return response()->json([
            'status' => 'success',
            'msg'    => 'You have successfully saved a vendor!',
        ]);
    }

    public function columnVisbilityUpdate(Request $request)
    {
        $userCheck = DataTableColumn::where('user_id', auth()->user()->id)->where('section_name', 'vendors-listing')->first();

        if ($userCheck) {
            $column               = DataTableColumn::find($userCheck->id);
            $column->section_name = 'vendors-listing';
            $column->column_name  = json_encode($request->column_vendors);
            $column->save();
        } else {
            $column               = new DataTableColumn();
            $column->section_name = 'vendors-listing';
            $column->column_name  = json_encode($request->column_vendors);
            $column->user_id      = auth()->user()->id;
            $column->save();
        }

        return redirect()->back()->with('success', 'column visiblity Added Successfully!');
    }

    public function framworkAdd(Request $request)
    {
        try {
            $framework = VendorFrequency::create(
                [
                    'user_id' => \Auth::user()->id,
                    'name'    => $request->framework_name,
                ]
            );

            return response()->json(['code' => 200, 'data' => $framework, 'message' => 'Added successfully!!!']);
        } catch (Exception $e) {
            $msg = $e->getMessage();

            return response()->json(['code' => 500, 'message' => $msg]);
        }
    }

    public function vendorRemarkHistory(Request $request)
    {
        $data = VendorRemarksHistory::with(['user' => function ($query) {
        }])->where('vendor_id', $request->id)->orderBy('id', 'DESC')->get();

        return response()->json(['code' => 200, 'data' => $data, 'message' => 'Message sent successfully']);
    }

    public function vendorRemarkPostHistory(Request $request)
    {
        try {
            $remarks = VendorRemarksHistory::create(
                [
                    'user_id'   => \Auth::user()->id,
                    'remarks'   => $request->remarks,
                    'vendor_id' => $request->vendor_id,
                ]
            );
            $remarks = VendorRemarksHistory::where('id', $remarks->id)->first();

            return response()->json(['code' => 200, 'data' => $remarks, 'message' => 'Added successfully!!!']);
        } catch (Exception $e) {
            $msg = $e->getMessage();

            return response()->json(['code' => 500, 'message' => $msg]);
        }
    }

    public function flowChart(Request $request, $master_id)
    {
        $VendorFlowchart = Vendor::with('category');

        if (request('category') != null) {
            $VendorFlowchart = $VendorFlowchart->where('category_id', $request->category);
        }

        if ((! empty(request('selectedId')) && (request('selectedId') != null))) {
            $VendorFlowchart = $VendorFlowchart->where('id', $request->selectedId);
        }

        $VendorFlowchart = $VendorFlowchart->whereNotNull('flowchart_date')->orderBy('flowchart_date', 'DESC')->paginate(25);

        $totalVendor = Vendor::whereNotNull('flowchart_date')->count();

        $datatableModel = DataTableColumn::select('column_name')->where('user_id', auth()->user()->id)->where('section_name', 'vendors-flow-chart-listing')->first();

        $dynamicColumnsToShowVendorsfc = [];
        if (! empty($datatableModel->column_name)) {
            $hideColumns                   = $datatableModel->column_name ?? '';
            $dynamicColumnsToShowVendorsfc = json_decode($hideColumns, true);
        }

        $flowchart_master = VendorFlowChartMaster::where('id', $master_id)->get();

        $vendor_flow_charts = VendorFlowChart::where('master_id', $master_id)->orderBy('sorting', 'ASC')->get();

        $vendor_categories = VendorCategory::all();

        $status = VendorFlowChartStatus::all();

        return view('vendors.flow-chart', compact('VendorFlowchart', 'dynamicColumnsToShowVendorsfc', 'totalVendor', 'vendor_flow_charts', 'vendor_categories', 'status', 'master_id', 'flowchart_master'))
            ->with('i', ($request->input('page', 1) - 1) * 25);
    }

    public function flowchartStore(Request $request)
    {
        $this->validate($request, [
            'master_id' => 'required',
            'name'      => 'required|string',
            'sorting'   => 'required|numeric',
        ]);
        $data               = $request->except('_token');
        $data['created_by'] = Auth::user()->id;
        VendorFlowChart::create($data);

        return redirect()->back()->with('success', 'You have successfully created a flow chart!');
    }

    public function getFlowchartMaster()
    {
        $flowchart_master = VendorFlowChartMaster::all();

        return $flowchart_master;
    }

    public function masterFlowchartStore(Request $request)
    {
        try {
            $this->validate($request, [
                'title' => 'required|string',
            ]);

            $data      = $request->except('_token');
            $flowchart = VendorFlowChartMaster::create($data);

            return response()->json(['code' => '200', 'data' => $flowchart, 'all' => $this->getFlowchartMaster(), 'message' => 'You have successfully created a master flow chart!']);
        } catch (\Throwable $e) {
            return response()->json(['code' => '500', 'message' => $e->getMessage()]);
        }
    }

    public function getAllMasterFlowcharts()
    {
        $flowchart_master = VendorFlowChartMaster::paginate(10);

        return view('vendors.flowchart-master.index', ['flowchart_master' => $flowchart_master]);
    }

    public function masterFlowchartDestroy($id)
    {
        try {
            $flowchart = VendorFlowChartMaster::find($id);
            if ($flowchart->flow_charts()->get()->isEmpty()) {
                $flowchart->delete();

                return response()->json(['code' => '200', 'data' => [], 'all' => $this->getFlowchartMaster(), 'message' => 'You have successfully deleted a master flow chart!']);
            } else {
                return response()->json(['code' => '400', 'message' => 'Vendor flow charts not empty!']);
            }
        } catch (\Throwable $e) {
            return response()->json(['code' => '500', 'message' => $e->getMessage()]);
        }
    }

    public function masterFlowchartUpdate(Request $request, $id)
    {
        try {
            $this->validate($request, [
                'title' => 'required|string',
            ]);

            $data      = $request->except('_token');
            $flowchart = VendorFlowChartMaster::find($id);
            $flowchart->update($data);

            return response()->json(['code' => '200', 'data' => [], 'all' => $this->getFlowchartMaster(), 'message' => 'You have successfully updated a master flow chart!']);
        } catch (\Throwable $e) {
            return response()->json(['code' => '500', 'message' => $e->getMessage()]);
        }
    }

    public function questionStore(Request $request)
    {
        $this->validate($request, [
            'question' => 'required',
        ]);
        $data               = $request->except('_token');
        $data['created_by'] = Auth::user()->id;
        VendorQuestions::create($data);

        return redirect()->back()->with('success', 'You have successfully created a question!');
    }

    public function rquestionStore(Request $request)
    {
        $this->validate($request, [
            'question' => 'required',
        ]);
        $data               = $request->except('_token');
        $data['created_by'] = Auth::user()->id;
        VendorRatingQuestions::create($data);

        return redirect()->back()->with('success', 'You have successfully created a question!');
    }

    public function assignMasterFlowchartToVendor(Request $request)
    {
        $vendor = Vendor::find($request->id);

        foreach ($request->flowcharts as $flowchart) {
            $assignment = $data = [
                'vendor_id' => $vendor->id,
                'master_id' => (int) $flowchart,
            ];

            $assignment['status'] = 1;

            VendorFlowChartAssignment::updateOrCreate(
                $data,
                $assignment
            );
        }

        return response()->json(['code' => 200, 'status' => 'success', 'message' => 'You have successfully assigned flow charts to vendor!']);
    }

    public function saveVendorFlowChartRemarks(Request $request)
    {
        $post = $request->all();

        $this->validate($request, [
            'vendor_id'     => 'required',
            'flow_chart_id' => 'required',
            'remarks'       => 'required',
        ]);

        $input             = $request->except(['_token']);
        $input['added_by'] = Auth::user()->id;
        VendorFlowChartRemarks::create($input);

        return response()->json(['code' => 200, 'data' => $input]);
    }

    public function getFlowChartRemarksHistories(Request $request)
    {
        $datas = VendorFlowChartRemarks::with(['user'])
            ->where('vendor_id', $request->vendor_id)
            ->where('flow_chart_id', $request->flow_chart_id)
            ->latest()
            ->get();

        return response()->json([
            'status'      => true,
            'data'        => $datas,
            'message'     => 'History get successfully',
            'status_name' => 'success',
        ], 200);
    }

    public function vendorFlowChartVolumnVisbilityUpdate(Request $request)
    {
        $userCheck = DataTableColumn::where('user_id', auth()->user()->id)->where('section_name', 'vendors-flow-chart-listing')->first();

        if ($userCheck) {
            $column               = DataTableColumn::find($userCheck->id);
            $column->section_name = 'vendors-flow-chart-listing';
            $column->column_name  = json_encode($request->column_vendorsfc);
            $column->save();
        } else {
            $column               = new DataTableColumn();
            $column->section_name = 'vendors-flow-chart-listing';
            $column->column_name  = json_encode($request->column_vendorsfc);
            $column->user_id      = auth()->user()->id;
            $column->save();
        }

        return redirect()->back()->with('success', 'column visiblity Added Successfully!');
    }

    public function vendorRqaVolumnVisbilityUpdate(Request $request)
    {
        $userCheck = DataTableColumn::where('user_id', auth()->user()->id)->where('section_name', 'vendors-rqa-listing')->first();

        if ($userCheck) {
            $column               = DataTableColumn::find($userCheck->id);
            $column->section_name = 'vendors-rqa-listing';
            $column->column_name  = json_encode($request->column_vendorsfc);
            $column->save();
        } else {
            $column               = new DataTableColumn();
            $column->section_name = 'vendors-rqa-listing';
            $column->column_name  = json_encode($request->column_vendorsfc);
            $column->user_id      = auth()->user()->id;
            $column->save();
        }

        return redirect()->back()->with('success', 'column visiblity Added Successfully!');
    }

    public function vendorQaVolumnVisbilityUpdate(Request $request)
    {
        $userCheck = DataTableColumn::where('user_id', auth()->user()->id)->where('section_name', 'vendors-qa-listing')->first();

        if ($userCheck) {
            $column               = DataTableColumn::find($userCheck->id);
            $column->section_name = 'vendors-qa-listing';
            $column->column_name  = json_encode($request->column_vendorsfc);
            $column->save();
        } else {
            $column               = new DataTableColumn();
            $column->section_name = 'vendors-qa-listing';
            $column->column_name  = json_encode($request->column_vendorsfc);
            $column->user_id      = auth()->user()->id;
            $column->save();
        }

        return redirect()->back()->with('success', 'column visiblity Added Successfully!');
    }

    public function getVendorAutocomplete(Request $request)
    {
        $input = $_GET['term'];

        $products = [];
        if (! empty($input)) {
            $products = Vendor::where('name', 'like', '%' . $input . '%')->whereNull('deleted_at')->pluck('name', 'id');
        }

        return response()->json($products);
    }

    public function sortingVendorFlowchart(Request $request)
    {
        $flow_chart = $request->all();
        $data       = $request->except('_token');
        foreach ($flow_chart['sorting'] as $key => $value) {
            $vendor_fc          = VendorFlowChart::find($key);
            $vendor_fc->sorting = $value;
            $vendor_fc->save();
        }

        return redirect()->back()->with('success', 'The flow-chart sorting updated successfully.');
    }

    public function vendorFeedbackStatus(Request $request)
    {
        $vendor = Vendor::find($request->id);

        if (empty($vendor->feeback_status)) {
            $data['feeback_status'] = 1;
        } else {
            $data['feeback_status'] = 0;
        }

        Vendor::find($request->id)->update($data);

        return redirect()->back()->with('success', 'Vendor feedback status has been updated!');
    }

    public function getVendorQuestions(Request $request)
    {
        $datas = VendorQuestions::with(['user'])
            ->latest()
            ->get();

        return response()->json([
            'status'      => true,
            'data'        => $datas,
            'message'     => 'Question get successfully',
            'status_name' => 'success',
        ], 200);
    }

    public function getVendorRatingQuestions(Request $request)
    {
        $datas = VendorQuestions::with(['user'])
            ->latest()
            ->get();

        return response()->json([
            'status'      => true,
            'data'        => $datas,
            'message'     => 'Question get successfully',
            'status_name' => 'success',
        ], 200);
    }

    public function getQuestionAnswerHistories(Request $request)
    {
        $datas = VendorQuestionAnswer::where('vendor_id', $request->vendor_id)
            ->where('question_id', $request->question_id)
            ->latest()
            ->get();

        return response()->json([
            'status'      => true,
            'data'        => $datas,
            'message'     => 'History get successfully',
            'status_name' => 'success',
        ], 200);
    }

    public function getRatingQuestionAnswerHistories(Request $request)
    {
        $datas = VendorRatingQuestionAnswer::where('vendor_id', $request->vendor_id)
            ->where('question_id', $request->question_id)
            ->latest()
            ->get();

        return response()->json([
            'status'      => true,
            'data'        => $datas,
            'message'     => 'History get successfully',
            'status_name' => 'success',
        ], 200);
    }

    public function saveVendorQuestionAnswer(Request $request)
    {
        $post = $request->all();

        $this->validate($request, [
            'vendor_id'   => 'required',
            'question_id' => 'required',
            'answer'      => 'required',
        ]);

        $input             = $request->except(['_token']);
        $input['added_by'] = Auth::user()->id;
        VendorQuestionAnswer::create($input);

        return response()->json(['code' => 200, 'data' => $input]);
    }

    public function saveVendorRatingQuestionAnswer(Request $request)
    {
        $post = $request->all();

        $this->validate($request, [
            'vendor_id'   => 'required',
            'question_id' => 'required',
            'answer'      => 'required',
        ]);

        $input             = $request->except(['_token']);
        $input['added_by'] = Auth::user()->id;
        VendorRatingQuestionAnswer::create($input);

        return response()->json(['code' => 200, 'data' => $input]);
    }

    public function vendorQuestionAnswerStatus(Request $request)
    {
        $vendor = Vendor::find($request->id);

        if (empty($vendor->question_status)) {
            $data['question_status'] = 1;
        } else {
            $data['question_status'] = null;
        }

        Vendor::find($request->id)->update($data);

        return redirect()->back()->with('success', 'You have successfully created a question answer!');
    }

    public function vendorRatingQuestionAnswerStatus(Request $request)
    {
        $vendor = Vendor::find($request->id);

        if (empty($vendor->rating_question_status)) {
            $data['rating_question_status'] = 1;
        } else {
            $data['rating_question_status'] = null;
        }

        Vendor::find($request->id)->update($data);

        return redirect()->back()->with('success', 'You have successfully created a question answer!');
    }

    public function questionAnswer(Request $request)
    {
        $VendorQuestionAnswer = Vendor::with('category');

        if (request('category') != null) {
            $VendorQuestionAnswer = $VendorQuestionAnswer->where('category_id', $request->category);
        }

        if ((! empty(request('selectedId')) && (request('selectedId') != null))) {
            $VendorQuestionAnswer = $VendorQuestionAnswer->where('id', $request->selectedId);
        }

        $VendorQuestionAnswer = $VendorQuestionAnswer->where('question_status', 1)->orderBy('flowchart_date', 'DESC')->paginate(25);

        $totalVendor = Vendor::where('question_status', 1)->count();

        $datatableModel = DataTableColumn::select('column_name')->where('user_id', auth()->user()->id)->where('section_name', 'vendors-qa-listing')->first();

        $dynamicColumnsToShowVendorsqa = [];
        if (! empty($datatableModel->column_name)) {
            $hideColumns                   = $datatableModel->column_name ?? '';
            $dynamicColumnsToShowVendorsqa = json_decode($hideColumns, true);
        }

        $vendor_questions = VendorQuestions::orderBy('sorting', 'ASC')->get();

        $vendor_categories = VendorCategory::all();

        $status = VendorRatingQAStatus::all();

        $status_q = VendorQuestionStatus::all();

        return view('vendors.question-answer', compact('VendorQuestionAnswer', 'dynamicColumnsToShowVendorsqa', 'totalVendor', 'vendor_questions', 'vendor_categories', 'status', 'status_q'))
            ->with('i', ($request->input('page', 1) - 1) * 25);
    }

    public function ratingquestionAnswer(Request $request)
    {
        $VendorQuestionAnswer = Vendor::with('category');

        if (request('category') != null) {
            $VendorQuestionAnswer = $VendorQuestionAnswer->where('category_id', $request->category);
        }

        if ((! empty(request('selectedId')) && (request('selectedId') != null))) {
            $VendorQuestionAnswer = $VendorQuestionAnswer->where('id', $request->selectedId);
        }

        $VendorQuestionAnswer = $VendorQuestionAnswer->where('rating_question_status', 1)->orderBy('flowchart_date', 'DESC')->paginate(25);

        $totalVendor = Vendor::where('rating_question_status', 1)->count();

        $datatableModel = DataTableColumn::select('column_name')->where('user_id', auth()->user()->id)->where('section_name', 'vendors-rqa-listing')->first();

        $dynamicColumnsToShowVendorsrqa = [];
        if (! empty($datatableModel->column_name)) {
            $hideColumns                    = $datatableModel->column_name ?? '';
            $dynamicColumnsToShowVendorsrqa = json_decode($hideColumns, true);
        }

        $rating_questions = VendorRatingQuestions::orderBy('sorting', 'ASC')->get();

        $vendor_categories = VendorCategory::all();

        $status = VendorRatingQAStatus::all();

        $status_q = VendorQuestionStatus::all();

        return view('vendors.rating-question-answer', compact('VendorQuestionAnswer', 'dynamicColumnsToShowVendorsrqa', 'totalVendor', 'rating_questions', 'vendor_categories', 'status', 'status_q'))
            ->with('i', ($request->input('page', 1) - 1) * 25);
    }

    public function rqaStatusCreate(Request $request)
    {
        try {
            $status              = new VendorRatingQAStatus();
            $status->status_name = $request->status_name;
            $status->save();

            return response()->json(['code' => 200, 'message' => 'status Create successfully']);
        } catch (Exception $e) {
            $msg = $e->getMessage();

            return response()->json(['code' => 500, 'message' => $msg]);
        }
    }

    public function rqastatuscolor(Request $request)
    {
        $status_color = $request->all();
        $data         = $request->except('_token');
        foreach ($status_color['colorname'] as $key => $value) {
            $vr_status               = VendorRatingQAStatus::find($key);
            $vr_status->status_name  = $value;
            $vr_status->status_color = $status_color['color_name'][$key];
            $vr_status->save();
        }

        return redirect()->back()->with('success', 'The status color updated successfully.');
    }

    public function deleteFlowchartstatus(Request $request)
    {
        try {
            VendorFlowChartStatus::where('id', $request->id)->delete();

            return response()->json(['code' => '200', 'data' => [], 'message' => 'Data deleted successfully']);
        } catch (Exception $e) {
            return response()->json(['code' => '500', 'message' => $e->getMessage()]);
        }
    }

    public function deleteQAStatus(Request $request)
    {
        try {
            VendorQuestionStatus::where('id', $request->id)->delete();

            return response()->json(['code' => '200', 'data' => [], 'message' => 'Data deleted successfully']);
        } catch (Exception $e) {
            return response()->json(['code' => '500', 'message' => $e->getMessage()]);
        }
    }

    public function deleteRQAStatus(Request $request)
    {
        try {
            VendorRatingQAStatus::where('id', $request->id)->delete();

            return response()->json(['code' => '200', 'data' => [], 'message' => 'Data deleted successfully']);
        } catch (Exception $e) {
            return response()->json(['code' => '500', 'message' => $e->getMessage()]);
        }
    }

    public function flowchartStatusCreate(Request $request)
    {
        try {
            $status              = new VendorFlowChartStatus();
            $status->status_name = $request->status_name;
            $status->save();

            return response()->json(['code' => 200, 'message' => 'status Create successfully']);
        } catch (Exception $e) {
            $msg = $e->getMessage();

            return response()->json(['code' => 500, 'message' => $msg]);
        }
    }

    public function flowchartstatuscolor(Request $request)
    {
        $status_color = $request->all();
        $data         = $request->except('_token');
        foreach ($status_color['colorname'] as $key => $value) {
            $vf_status               = VendorFlowChartStatus::find($key);
            $vf_status->status_name  = $value;
            $vf_status->status_color = $status_color['color_name'][$key];
            $vf_status->save();
        }

        return redirect()->back()->with('success', 'The status color updated successfully.');
    }

    public function rqaupdateStatus(Request $request)
    {
        $vendor_id      = $request->input('vendor_id');
        $question_id    = $request->input('question_id');
        $selectedStatus = $request->input('selectedStatus');

        $vendor_status        = VendorRatingQAStatusHistory::where('vendor_id', $vendor_id)->where('question_id', $question_id)->orderBy('id', 'DESC')->first();
        $history              = new VendorRatingQAStatusHistory();
        $history->vendor_id   = $vendor_id;
        $history->question_id = $question_id;

        if (! empty($vendor_status)) {
            $history->old_value = $vendor_status->new_value;
        } else {
            $history->old_value = '';
        }
        $history->new_value = $selectedStatus;
        $history->user_id   = Auth::user()->id;
        $history->save();

        return response()->json(['message' => 'Status updated successfully']);
    }

    public function rqaStatusHistories(Request $request)
    {
        $datas = VendorRatingQAStatusHistory::with(['user', 'newValue', 'oldValue'])
            ->where('vendor_id', $request->vendor_id)
            ->where('question_id', $request->question_id)
            ->latest()
            ->get();

        return response()->json([
            'status'      => true,
            'data'        => $datas,
            'message'     => 'History get successfully',
            'status_name' => 'success',
        ], 200);
    }

    public function flowchartupdateStatus(Request $request)
    {
        $vendor_id      = $request->input('vendor_id');
        $flow_chart_id  = $request->input('flow_chart_id');
        $selectedStatus = $request->input('selectedStatus');

        $vendor_status          = VendorFlowChartStatusHistory::where('vendor_id', $vendor_id)->where('flow_chart_id', $flow_chart_id)->orderBy('id', 'DESC')->first();
        $history                = new VendorFlowChartStatusHistory();
        $history->vendor_id     = $vendor_id;
        $history->flow_chart_id = $flow_chart_id;

        if (! empty($vendor_status)) {
            $history->old_value = $vendor_status->new_value;
        } else {
            $history->old_value = '';
        }
        $history->new_value = $selectedStatus;
        $history->user_id   = Auth::user()->id;
        $history->save();

        return response()->json(['message' => 'Status updated successfully']);
    }

    public function flowchartStatusHistories(Request $request)
    {
        $datas = VendorFlowChartStatusHistory::with(['user', 'newValue', 'oldValue'])
            ->where('vendor_id', $request->vendor_id)
            ->where('flow_chart_id', $request->flow_chart_id)
            ->latest()
            ->get();

        return response()->json([
            'status'      => true,
            'data'        => $datas,
            'message'     => 'History get successfully',
            'status_name' => 'success',
        ], 200);
    }

    public function getVendorRatingQuestionsAnswerNotes(Request $request)
    {
        $datas = VendorRatingQANotes::where('vendor_id', $request->vendor_id)
            ->where('question_id', $request->question_id)
            ->latest()
            ->get();

        return response()->json([
            'status'      => true,
            'data'        => $datas,
            'message'     => 'Question get successfully',
            'status_name' => 'success',
        ], 200);
    }

    public function notesStore(Request $request)
    {
        $this->validate($request, [
            'notes' => 'required',
        ]);
        $data            = $request->except('_token');
        $data['user_id'] = Auth::user()->id;
        VendorRatingQANotes::create($data);

        return redirect()->back()->with('success', 'You have successfully created a notes!');
    }

    public function flowchartnotesStore(Request $request)
    {
        $this->validate($request, [
            'notes' => 'required',
        ]);
        $data            = $request->except('_token');
        $data['user_id'] = Auth::user()->id;
        VendorFLowChartNotes::create($data);

        return redirect()->back()->with('success', 'You have successfully created a notes!');
    }

    public function qaStatusCreate(Request $request)
    {
        try {
            $status              = new VendorQuestionStatus();
            $status->status_name = $request->status_name;
            $status->save();

            return response()->json(['code' => 200, 'message' => 'status Create successfully']);
        } catch (Exception $e) {
            $msg = $e->getMessage();

            return response()->json(['code' => 500, 'message' => $msg]);
        }
    }

    public function qastatuscolor(Request $request)
    {
        $status_color = $request->all();
        $data         = $request->except('_token');
        foreach ($status_color['colorname'] as $key => $value) {
            $vq_status               = VendorQuestionStatus::find($key);
            $vq_status->status_name  = $value;
            $vq_status->status_color = $status_color['color_name'][$key];
            $vq_status->save();
        }

        return redirect()->back()->with('success', 'The status color updated successfully.');
    }

    public function qaupdateStatus(Request $request)
    {
        $vendor_id      = $request->input('vendor_id');
        $question_id    = $request->input('question_id');
        $selectedStatus = $request->input('selectedStatus');

        $vendor_status        = VendorQuestionStatusHistory::where('vendor_id', $vendor_id)->where('question_id', $question_id)->orderBy('id', 'DESC')->first();
        $history              = new VendorQuestionStatusHistory();
        $history->vendor_id   = $vendor_id;
        $history->question_id = $question_id;

        if (! empty($vendor_status)) {
            $history->old_value = $vendor_status->new_value;
        } else {
            $history->old_value = '';
        }
        $history->new_value = $selectedStatus;
        $history->user_id   = Auth::user()->id;
        $history->save();

        return response()->json(['message' => 'Status updated successfully']);
    }

    public function qaStatusHistories(Request $request)
    {
        $datas = VendorQuestionStatusHistory::with(['user', 'newValue', 'oldValue'])
            ->where('vendor_id', $request->vendor_id)
            ->where('question_id', $request->question_id)
            ->latest()
            ->get();

        return response()->json([
            'status'      => true,
            'data'        => $datas,
            'message'     => 'History get successfully',
            'status_name' => 'success',
        ], 200);
    }

    public function vendorAllSection(Request $request)
    {
        $VendorFlowchart       = [];
        $VendorQuestionAnswer  = [];
        $VendorQuestionRAnswer = [];

        if ((! empty(request('vendors')) && (request('vendors') != null))) {
            $VendorFlowchart = Vendor::with('category');

            if ((! empty(request('vendors')) && (request('vendors') != null))) {
                $VendorFlowchart = $VendorFlowchart->whereIn('id', $request->vendors);
            }

            $VendorFlowchart = $VendorFlowchart->whereNotNull('flowchart_date')->orderBy('flowchart_date', 'DESC')->get();

            $VendorQuestionAnswer = Vendor::with('category');

            if ((! empty(request('vendors')) && (request('vendors') != null))) {
                $VendorQuestionAnswer = $VendorQuestionAnswer->whereIn('id', $request->vendors);
            }

            $VendorQuestionAnswer = $VendorQuestionAnswer->where('question_status', 1)->orderBy('flowchart_date', 'DESC')->get();

            $VendorQuestionRAnswer = Vendor::with('category');

            if ((! empty(request('vendors')) && (request('vendors') != null))) {
                $VendorQuestionRAnswer = $VendorQuestionRAnswer->whereIn('id', $request->vendors);
            }

            $VendorQuestionRAnswer = $VendorQuestionRAnswer->where('rating_question_status', 1)->orderBy('flowchart_date', 'DESC')->get();
        }

        $vendor_flow_charts = VendorFlowChart::orderBy('sorting', 'ASC')->get();

        $vendor_categories = VendorCategory::all();

        $status = VendorFlowChartStatus::all();

        $vendor_questions = VendorQuestions::orderBy('sorting', 'ASC')->get();

        $status_q = VendorQuestionStatus::all();

        $vendor_r_questions = VendorRatingQuestions::orderBy('sorting', 'ASC')->get();

        $status_r = VendorRatingQAStatus::all();

        return view('vendors.all-section', compact('VendorFlowchart', 'VendorQuestionAnswer', 'VendorQuestionRAnswer', 'vendor_flow_charts', 'vendor_categories', 'vendor_r_questions', 'status', 'vendor_questions', 'status_q', 'status_r'));
    }

    public function deleteFlowchartCategory(Request $request)
    {
        try {
            VendorFlowChart::where('id', $request->id)->delete();

            return response()->json(['code' => '200', 'data' => [], 'message' => 'Data deleted successfully']);
        } catch (Exception $e) {
            return response()->json(['code' => '500', 'message' => $e->getMessage()]);
        }
    }

    public function deleteQACategory(Request $request)
    {
        try {
            VendorQuestions::where('id', $request->id)->delete();

            return response()->json(['code' => '200', 'data' => [], 'message' => 'Data deleted successfully']);
        } catch (Exception $e) {
            return response()->json(['code' => '500', 'message' => $e->getMessage()]);
        }
    }

    public function deleteRQACategory(Request $request)
    {
        try {
            VendorRatingQuestions::where('id', $request->id)->delete();

            return response()->json(['code' => '200', 'data' => [], 'message' => 'Data deleted successfully']);
        } catch (Exception $e) {
            return response()->json(['code' => '500', 'message' => $e->getMessage()]);
        }
    }

    public function flowchartSortOrder(Request $request)
    {
        $flowchart_vendor = $request->all();
        $data             = $request->except('_token');
        foreach ($flowchart_vendor['sorting'] as $key => $value) {
            $f_vendor          = VendorFlowChart::find($key);
            $f_vendor->sorting = $value;
            $f_vendor->save();
        }

        return redirect()->back()->with('success', 'The sort order updated successfully.');
    }

    public function qaSortOrder(Request $request)
    {
        $question_vendor = $request->all();
        $data            = $request->except('_token');
        foreach ($question_vendor['sorting'] as $key => $value) {
            $qa_vendor          = VendorQuestions::find($key);
            $qa_vendor->sorting = $value;
            $qa_vendor->save();
        }

        return redirect()->back()->with('success', 'The sort order updated successfully.');
    }

    public function rqaSortOrder(Request $request)
    {
        $rquestion_vendor = $request->all();
        $data             = $request->except('_token');
        foreach ($rquestion_vendor['sorting'] as $key => $value) {
            $rqa_vendor          = VendorRatingQuestions::find($key);
            $rqa_vendor->sorting = $value;
            $rqa_vendor->save();
        }

        return redirect()->back()->with('success', 'The sort order updated successfully.');
    }

    public function searchVendorFlowcharts(Request $request)
    {
        $vendor_id = $request->vendor_id;

        $VendorFlowchart = [];

        if ((! empty($vendor_id) && ($vendor_id != null))) {
            $VendorFlowchart = Vendor::with('category');

            $VendorFlowchart = $VendorFlowchart->where('id', $vendor_id);

            $VendorFlowchart = $VendorFlowchart->whereNotNull('flowchart_date')->orderBy('flowchart_date', 'DESC')->get();
        }

        $vendor_flow_charts = VendorFlowChart::orderBy('sorting', 'ASC')->get();

        $status = VendorFlowChartStatus::all();

        return view('vendors.partials.search-data-fc', compact('VendorFlowchart', 'vendor_flow_charts', 'status', 'vendor_id'));
    }

    public function searchVendorQa(Request $request)
    {
        $vendor_id = $request->vendor_id;

        $VendorQuestionAnswer = [];

        if ((! empty($vendor_id) && ($vendor_id != null))) {
            $VendorQuestionAnswer = Vendor::with('category');

            $VendorQuestionAnswer = $VendorQuestionAnswer->where('id', $vendor_id);

            $VendorQuestionAnswer = $VendorQuestionAnswer->where('question_status', 1)->orderBy('flowchart_date', 'DESC')->get();
        }

        $vendor_questions = VendorQuestions::orderBy('sorting', 'ASC')->get();

        $status_q = VendorQuestionStatus::all();

        return view('vendors.partials.search-data-qa', compact('VendorQuestionAnswer', 'vendor_questions', 'status_q', 'vendor_id'));
    }

    public function searchVendorRQa(Request $request)
    {
        $vendor_id = $request->vendor_id;

        $VendorQuestionRAnswer = [];

        if ((! empty($vendor_id) && ($vendor_id != null))) {
            $VendorQuestionRAnswer = Vendor::with('category');

            $VendorQuestionRAnswer = $VendorQuestionRAnswer->where('id', $vendor_id);

            $VendorQuestionRAnswer = $VendorQuestionRAnswer->where('rating_question_status', 1)->orderBy('flowchart_date', 'DESC')->get();
        }

        $vendor_r_questions = VendorRatingQuestions::orderBy('sorting', 'ASC')->get();

        $status_r = VendorRatingQAStatus::all();

        return view('vendors.partials.search-data-rqa', compact('VendorQuestionRAnswer', 'vendor_r_questions', 'status_r', 'vendor_id'));
    }

    public function getVendorFlowchartNotes(Request $request)
    {
        $datas = VendorFLowChartNotes::where('vendor_id', $request->vendor_id)
            ->where('flow_chart_id', $request->flow_chart_id)
            ->latest()
            ->get();

        return response()->json([
            'status'      => true,
            'data'        => $datas,
            'message'     => 'Question get successfully',
            'status_name' => 'success',
        ], 200);
    }

    public function searchforVendorFlowcharts(Request $request)
    {
        $vendor_id = $request->vendor_id;

        $VendorFlowchart = [];

        if ((! empty($vendor_id) && ($vendor_id != null))) {
            $VendorFlowchart = Vendor::with('category');

            $VendorFlowchart = $VendorFlowchart->where('id', $vendor_id);

            $VendorFlowchart = $VendorFlowchart->whereNotNull('flowchart_date')->orderBy('flowchart_date', 'DESC')->get();
        }

        $vendor_flow_charts = VendorFlowChart::orderBy('sorting', 'ASC')->get();

        if (! empty($vendor_flow_charts)) {
            foreach ($vendor_flow_charts as $key => $value) {
                $vendorflowcharts = VendorFlowChartSorting::where('vendor_id', $vendor_id)->where('flow_chart_id', $value->id)->first();

                if (empty($vendorflowcharts)) {
                    $vendorflowchartsSorting = VendorFlowChartSorting::where('vendor_id', $vendor_id)->orderBy('sorting_f', 'DESC')->first();

                    $sorting_f = ($key + 1);
                    if (! empty($vendorflowchartsSorting)) {
                        $sorting_f = ($vendorflowchartsSorting->sorting_f + 1);
                    }

                    $vendorfs                = new VendorFlowChartSorting();
                    $vendorfs->vendor_id     = $vendor_id;
                    $vendorfs->flow_chart_id = $value->id;
                    $vendorfs->sorting_f     = $sorting_f;
                    $vendorfs->save();
                }
            }
        }

        $vendor_flow_charts = VendorFlowChartSorting::with('flowchart')->where('vendor_id', $vendor_id)->orderBy('sorting_f', 'ASC')->get();

        $status = VendorFlowChartStatus::all();

        return view('vendors.partials.search-data-fc-vendor', compact('VendorFlowchart', 'vendor_flow_charts', 'status', 'vendor_id'));
    }

    public function flowchartupdatesorting(Request $request)
    {
        $update_sorting = $request->all();
        $data           = $request->except('_token');
        foreach ($update_sorting['updatesorting'] as $key => $value) {
            $upsorting            = VendorFlowChartSorting::find($key);
            $upsorting->sorting_f = $value;
            $upsorting->save();
        }

        return redirect()->back()->with('success', 'The sorting updated successfully.');
    }

    public function frequencyAdd(Request $request)
    {
        try {
            $frequency = VendorFrequency::create(
                [
                    'user_id' => \Auth::user()->id,
                    'name'    => $request->frequency_name,
                ]
            );
            $frequency = VendorFrequency::where('id', $frequency->id)->first();

            return response()->json(['code' => 200, 'data' => $frequency, 'message' => 'Added successfully!!!']);
        } catch (Exception $e) {
            $msg = $e->getMessage();

            return response()->json(['code' => 500, 'message' => $msg]);
        }
    }

    public function vendorPriceHistory(Request $request)
    {
        $data = VendorPriceHistory::with(['user' => function ($query) {
        }])->where('vendor_id', $request->id)->get();

        return response()->json(['code' => 200, 'data' => $data, 'message' => 'Message sent successfully']);
    }

    public function searchforVendorEmails(Request $request)
    {
        $vendor_id = $request->vendor_id;

        $vendor = Vendor::find($vendor_id);

        if (! empty($vendor)) {
            // Set default type as incoming
            $type = 'incoming';
            $seen = '0';
            $from = ''; //Purpose : Add var -  DEVTASK-18283

            $sender = $vendor->email;
            $date   = $request->date ?? '';

            $query = (new Email())->newQuery();

            $query = $query->leftJoin('chat_messages', 'chat_messages.email_id', 'emails.id')
                ->leftjoin('customers as c', 'c.id', 'chat_messages.customer_id')
                ->leftJoin('vendors as v', 'v.id', 'chat_messages.vendor_id')
                ->leftJoin('suppliers as s', 's.id', 'chat_messages.supplier_id');

            $query = $query->where(function ($query) use ($type) {
                $query->where('emails.type', $type)->orWhere('emails.type', 'open')->orWhere('emails.type', 'delivered')->orWhere('emails.type', 'processed');
            });

            $query = $query->where(function ($query) use ($sender) {
                $query->where('emails.from', $sender)->orWhere('emails.to', $sender);
            });

            $query = $query->select('emails.*', 'chat_messages.customer_id', 'chat_messages.supplier_id', 'chat_messages.vendor_id', 'c.is_auto_simulator as customer_auto_simulator',
                'v.is_auto_simulator as vendor_auto_simulator', 's.is_auto_simulator as supplier_auto_simulator');

            $query = $query->orderByDesc('emails.id');

            $emails = $query->orderBy('emails.id', 'DESC')->take(5)->get();

            $emailModelTypes = Email::emailModelTypeList();

            return view('vendors.partials.vendor-email', compact('emails', 'emailModelTypes'));
        }
    }

    public function getVendorFlowchartUpdateNotes(Request $request)
    {
        $vendorN       = VendorFLowChartNotes::find($request->note_id);
        $data['notes'] = $request->notes;
        $vendorN->update($data);

        return response()->json([
            'status'      => true,
            'message'     => 'Notes updated successfully',
            'status_name' => 'success',
        ], 200);
    }

    public function deleteFlowchartnotes(Request $request)
    {
        try {
            VendorFLowChartNotes::where('id', $request->id)->delete();

            return response()->json(['code' => '200', 'data' => [], 'message' => 'Data deleted successfully']);
        } catch (Exception $e) {
            return response()->json(['code' => '500', 'message' => $e->getMessage()]);
        }
    }

    public function getVendorrqaUpdateNotes(Request $request)
    {
        $vendorN       = VendorRatingQANotes::find($request->note_id);
        $data['notes'] = $request->notes;
        $vendorN->update($data);

        return response()->json([
            'status'      => true,
            'message'     => 'Notes updated successfully',
            'status_name' => 'success',
        ], 200);
    }

    public function deleteRqnotes(Request $request)
    {
        try {
            VendorRatingQANotes::where('id', $request->id)->delete();

            return response()->json(['code' => '200', 'data' => [], 'message' => 'Data deleted successfully']);
        } catch (Exception $e) {
            return response()->json(['code' => '500', 'message' => $e->getMessage()]);
        }
    }

    public function searchforSupplierEmails(Request $request)
    {
        $supplier_id = $request->supplier_id;

        $supplier = Supplier::find($supplier_id);

        if (! empty($supplier)) {
            // Set default type as incoming
            $type = 'incoming';
            $seen = '0';
            $from = ''; //Purpose : Add var -  DEVTASK-18283

            $sender = $supplier->email;
            $date   = $request->date ?? '';

            $query = (new Email())->newQuery();

            $query = $query->leftJoin('chat_messages', 'chat_messages.email_id', 'emails.id')
                ->leftjoin('customers as c', 'c.id', 'chat_messages.customer_id')
                ->leftJoin('vendors as v', 'v.id', 'chat_messages.vendor_id')
                ->leftJoin('suppliers as s', 's.id', 'chat_messages.supplier_id');

            $query = $query->where(function ($query) use ($type) {
                $query->where('emails.type', $type)->orWhere('emails.type', 'open')->orWhere('emails.type', 'delivered')->orWhere('emails.type', 'processed');
            });

            $query = $query->where(function ($query) use ($sender) {
                $query->where('emails.from', $sender)->orWhere('emails.to', $sender);
            });

            $query = $query->select('emails.*', 'chat_messages.customer_id', 'chat_messages.supplier_id', 'chat_messages.vendor_id', 'c.is_auto_simulator as customer_auto_simulator',
                'v.is_auto_simulator as vendor_auto_simulator', 's.is_auto_simulator as supplier_auto_simulator');

            $query = $query->orderByDesc('emails.id');

            $emails = $query->orderBy('emails.id', 'DESC')->take(5)->get();

            $emailModelTypes = Email::emailModelTypeList();

            return view('suppliers.partials.suppliers-email', compact('emails', 'emailModelTypes'));
        }
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/VoucherController.php 
Content: <?php

namespace App\Http\Controllers;

use Auth;
use App\Task;
use App\Team;
use App\User;
use App\Payment;
use App\Voucher;
use App\Currency;
use App\ChatMessage;
use App\DeveloperTask;
use App\PaymentMethod;
use App\PaymentReceipt;
use App\VoucherCategory;
use Illuminate\Http\Request;
use App\Events\VoucherApproved;
use Plank\Mediable\Facades\MediaUploader as MediaUploader;

class VoucherController extends Controller
{
    public function index(Request $request)
    {
        $start         = $request->range_start ? $request->range_start : date('Y-m-d', strtotime('monday this week'));
        $end           = $request->range_end ? $request->range_end : date('Y-m-d', strtotime('saturday this week'));
        $selectedUser  = $request->user_id ? $request->user_id : null;
        $status        = $request->status ? $request->status : 'Pending';
        $tasks         = PaymentReceipt::with('chat_messages', 'user')->where('status', $status);
        $teammembers   = Team::where(['teams.user_id' => Auth::user()->id])->join('team_user', 'team_user.team_id', '=', 'teams.id')->select(['team_user.user_id'])->get()->toArray();
        $teammembers[] = Auth::user()->id;

        $limit = request('limit');
        if (! empty($limit)) {
            if ($limit == 'all') {
                $limit = $tasks->count();
            }
        }

        $tasks = $tasks->orderBy('id', 'desc')->paginate($limit)->appends(request()->except('page'));

        foreach ($tasks as $task) {
            $task->user;

            $totalPaid = Payment::where('payment_receipt_id', $task->id)->sum('amount');
            if ($totalPaid) {
                $task->paid_amount = number_format($totalPaid, 2);
                $task->balance     = $task->rate_estimated - $totalPaid;
                $task->balance     = number_format($task->balance, 2);
            } else {
                $task->paid_amount = 0;
                $task->balance     = $task->rate_estimated;
                $task->balance     = number_format($task->balance, 2);
            }
            if ($task->task_id) {
                $task->taskdetails      = Task::find($task->task_id);
                $task->estimate_minutes = 0;
                if ($task->taskdetails) {
                    $task->details = $task->taskdetails->task_details;
                    if ($task->worked_minutes == null) {
                        $task->estimate_minutes = $task->taskdetails->approximate;
                    } else {
                        $task->estimate_minutes = $task->worked_minutes;
                    }
                }
            } elseif ($task->developer_task_id) {
                $task->taskdetails      = DeveloperTask::find($task->developer_task_id);
                $task->estimate_minutes = 0;
                if ($task->taskdetails) {
                    $task->details = $task->taskdetails->task;
                    if ($task->worked_minutes == null) {
                        $task->estimate_minutes = $task->taskdetails->estimate_minutes;
                    } else {
                        $task->estimate_minutes = $task->worked_minutes;
                    }
                }
            } else {
                $task->details          = $task->remarks;
                $task->estimate_minutes = $task->worked_minutes;
            }
        }
        $users = User::all();

        return view('vouchers.index', [
            'tasks'        => $tasks,
            'users'        => $users,
            'user'         => $request->user,
            'selectedUser' => $selectedUser,
        ]);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        $voucher_categories          = VoucherCategory::where('parent_id', 0)->get();
        $voucher_categories_dropdown = VoucherCategory::attr(['name' => 'category_id', 'class' => 'form-control', 'placeholder' => 'Select a Category'])
            ->renderAsDropdown();

        return view('vouchers.create', [
            'voucher_categories'          => $voucher_categories,
            'voucher_categories_dropdown' => $voucher_categories_dropdown,
        ]);
    }

    /**
     * Store a newly created resource in storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $this->validate($request, [
            'description' => 'required|min:3',
            'travel_type' => 'sometimes|nullable|string',
            'amount'      => 'sometimes|nullable|numeric',
            'paid'        => 'sometimes|nullable|numeric',
            'date'        => 'required|date',
        ]);

        $data            = $request->except('_token');
        $data['user_id'] = Auth::id();

        $voucher = Voucher::create($data);
        //create chat message
        $params = [
            'number'     => null,
            'user_id'    => Auth::id(),
            'voucher_id' => $voucher->id,
            'message'    => $voucher->description . ' ' . $voucher->amount,
        ];
        $message = ChatMessage::create($params);

        //TODO send message to admin yogesh for approval

        //TODO listen for whatsapp messages, identify the keywords and update the approval status accordingly
        if ($request->ajax()) {
            return response()->json(['id' => $voucher->id]);
        }

        return redirect()->route('voucher.index')->with('success', 'You have successfully created cash voucher');
    }

    public function storeCategory(Request $request)
    {
        $this->validate($request, [
            'title' => 'required_without:subcategory',
        ]);

        if ($request->title != '') {
            VoucherCategory::create(['title' => $request->title]);
        }

        if ($request->parent_id != '' && $request->subcategory != '') {
            VoucherCategory::create(['title' => $request->subcategory, 'parent_id' => $request->parent_id]);
        }

        return redirect()->back()->with('success', 'Category created successfully');
    }

    /**
     * Display the specified resource.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        $task = PaymentReceipt::where('id', $id)->first();

        return response()->json($task);

        //
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        $voucher                     = Voucher::find($id);
        $voucher_categories          = VoucherCategory::where('parent_id', 0)->get();
        $voucher_categories_dropdown = VoucherCategory::attr(['name' => 'category_id', 'class' => 'form-control', 'placeholder' => 'Select a Category'])
            ->selected($voucher->category_id)
            ->renderAsDropdown();

        return view('vouchers.edit', [
            'voucher'                     => $voucher,
            'voucher_categories'          => $voucher_categories,
            'voucher_categories_dropdown' => $voucher_categories_dropdown,
        ]);
    }

    /**
     * Update the specified resource in storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        if ($request->type == 'partial') {
            $this->validate($request, [
                'travel_type' => 'sometimes|nullable|string',
                'amount'      => 'sometimes|nullable|numeric',
            ]);
        } else {
            $this->validate($request, [
                'description' => 'required|min:3',
                'travel_type' => 'sometimes|nullable|string',
                'amount'      => 'sometimes|nullable|numeric',
                'paid'        => 'sometimes|nullable|numeric',
                'date'        => 'required|date',
            ]);
        }

        $data = $request->except('_token');

        Voucher::find($id)->update($data);

        if ($request->type == 'partial') {
            return redirect()->back()->with('success', 'You have successfully updated cash voucher');
        }

        return redirect()->route('voucher.index')->with('success', 'You have successfully updated cash voucher');
    }

    public function approve(Request $request, $id)
    {
        $voucher = Voucher::find($id);

        $voucher->approved = 2;

        $voucher->save();
        event(new VoucherApproved($voucher));
        //TODO send message to user via whatsapp notifying that the voucher request has been approved.
        return redirect()->route('voucher.index')->withSuccess('Voucher Approved.');
    }

    public function reject(Request $request, $id)
    {
        $voucher = Voucher::find($id);

        $voucher->reject_reason = $request->get('reject_reason');
        $voucher->reject_count += 1;

        $voucher->save();
        //TODO send message to user via whatsapp notifying that the voucher request has been rejected.
        return redirect()->route('voucher.index')->withSuccess('You have successfully updated the voucher!');
    }

    public function resubmit(Request $request, $id)
    {
        $voucher           = Voucher::find($id);
        $voucher->approved = 1;
        $voucher->resubmit_count += 1;

        $voucher->save();

        return redirect()->route('voucher.index')->withSuccess('You have successfully resubmitted the voucher!');
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        Voucher::find($id)->delete();

        return redirect()->route('voucher.index')->with('success', 'You have successfully deleted a cash voucher');
    }

    public function userSearch()
    {
        $term   = request()->get('q', null);
        $search = User::where('name', 'LIKE', '%' . $term . '%')
            ->orWhere('email', 'LIKE', '%' . $term . '%')->get();

        return response()->json($search);
    }

    public function createPaymentRequest(Request $request)
    {
        $this->validate($request, [
            'user_id'  => 'required',
            'date'     => 'required',
            'amount'   => 'required',
            'currency' => 'required',
        ]);

        $input                   = $request->except('_token');
        $input['status']         = 'Pending';
        $input['rate_estimated'] = $input['amount'];
        PaymentReceipt::create($input);

        return response()->json([
            'status' => 'success',
            'msg'    => 'Successfully created',
        ]);
    }

    public function paymentRequest()
    {
        $users = User::all();

        return view('vouchers.payment-request', compact('users'));
    }

    public function viewPaymentModal($id)
    {
        $task = PaymentReceipt::find($id);
        if ($task->user_id) {
            $task->userName = User::find($task->user_id)->name;
        }
        $paymentMethods = PaymentMethod::all();
        $currencies     = Currency::get();

        return view('vouchers.payment-modal', compact('task', 'paymentMethods', 'currencies'));
    }

    public function submitPayment($id, Request $request)
    {
        $this->validate($request, [
            'date'              => 'required',
            'amount'            => 'required',
            'currency'          => 'required',
            'payment_method_id' => 'required',
        ]);
        $preceipt = PaymentReceipt::find($id);

        if (! $preceipt) {
            return redirect()->back()->with('warning', 'Payment receipt not found');
        }
        $totalPaid = Payment::where('payment_receipt_id', $preceipt->id)->sum('amount');
        $newTotal  = $totalPaid + $request->amount;

        if ($newTotal > $preceipt->rate_estimated) {
            return redirect()->back()->with('warning', 'Amount can not be greater than receipt amount');
        }

        $input = $request->except('_token');

        if (! is_numeric($input['payment_method_id'])) {
            $paymentMethod = PaymentMethod::where('name', $input['payment_method_id'])->first();
            if (! $paymentMethod) {
                $paymentMethod = PaymentMethod::create([
                    'name' => $input['payment_method_id'],
                ]);
                $input['payment_method_id'] = $paymentMethod->id;
            } else {
                $input['payment_method_id'] = $paymentMethod->id;
            }
        }

        $payment_method              = PaymentMethod::find($input['payment_method_id']);
        $input['payment_receipt_id'] = $preceipt->id;
        $message['message']          = 'Admin has given the payment of Payment Receipt #' . $preceipt->id . ' and amount ' . $request->amount . ' ' . $request->currency . ' through ' . $payment_method->name . " \n Note: " . $request->note;
        $message['user_id']          = $request->user_id;
        $message['status']           = 1;

        Payment::create($input);
        $request1 = new \Illuminate\Http\Request();
        $request1->replace($message);

        $sendMessage = app(\App\Http\Controllers\WhatsAppController::class)->sendMessage($request1, 'user');
        if ($newTotal >= $preceipt->rate_estimated) {
            $preceipt->update(['status' => 'Done']);
            $cashdata['order_status'] = 'Done';
            $cashdata['status']       = 1;
        }

        return redirect()->back()->with('success', 'Successfully submitted');
    }

    public function uploadDocuments(Request $request)
    {
        $path = storage_path('tmp/uploads');

        if (! file_exists($path)) {
            mkdir($path, 0777, true);
        }

        $file = $request->file('file');

        $name = uniqid() . '_' . trim($file->getClientOriginalName());

        $file->move($path, $name);

        return response()->json([
            'name'          => $name,
            'original_name' => $file->getClientOriginalName(),
        ]);
    }

    public function saveDocuments(Request $request)
    {
        $documents = $request->input('document', []);
        if (! empty($documents)) {
            $receipt = PaymentReceipt::find($request->id);

            foreach ($request->input('document', []) as $file) {
                $path  = storage_path('tmp/uploads/' . $file);
                $media = MediaUploader::fromSource($path)
                    ->toDirectory('voucher/' . floor($request->id / config('constants.image_per_folder')))
                    ->upload();
                $receipt->attachMedia($media, config('constants.media_tags'));
            }

            return response()->json(['code' => 200, 'data' => [], 'message' => 'Done!']);
        } else {
            return response()->json(['code' => 500, 'data' => [], 'message' => 'No documents for upload']);
        }
    }

    public function listDocuments(Request $request, $id)
    {
        $receipt = PaymentReceipt::find($request->id);

        $userList = [];

        $records = [];
        if ($receipt) {
            if ($receipt->hasMedia(config('constants.media_tags'))) {
                foreach ($receipt->getMedia(config('constants.media_tags')) as $media) {
                    $records[] = [
                        'id'                 => $media->id,
                        'url'                => getMediaUrl($media),
                        'payment_receipt_id' => $request->id,
                    ];
                }
            }
        }

        return response()->json(['code' => 200, 'data' => $records]);
    }

    public function deleteDocument(Request $request)
    {
        if ($request->id != null) {
            $media = \Plank\Mediable\Media::find($request->id);
            if ($media) {
                $media->delete();

                return response()->json(['code' => 200, 'message' => 'Document delete succesfully']);
            }
        }

        return response()->json(['code' => 500, 'message' => 'No document found']);
    }

    public function viewManualPaymentModal()
    {
        $users          = User::all();
        $paymentMethods = PaymentMethod::all();
        $currencies     = Currency::get();

        return view('vouchers.manual-payment-modal', compact('users', 'paymentMethods', 'currencies'));
    }

    public function manualPaymentSubmit(Request $request)
    {
        $this->validate($request, [
            'date'              => 'required',
            'user_id'           => 'required',
            'amount'            => 'required',
            'currency'          => 'required',
            'payment_method_id' => 'required',
        ]);
        $input = $request->except('_token');

        $input['status']         = 'Pending';
        $input['rate_estimated'] = $input['amount'];
        $input['remarks']        = $input['note'];
        $paymentReceipt          = PaymentReceipt::create($input);

        $input['payment_receipt_id'] = $paymentReceipt->id;

        if (! is_numeric($input['payment_method_id'])) {
            $paymentMethod = PaymentMethod::where('name', $input['payment_method_id'])->first();
            if (! $paymentMethod) {
                $paymentMethod = PaymentMethod::create([
                    'name' => $input['payment_method_id'],
                ]);
                $input['payment_method_id'] = $paymentMethod->id;
            } else {
                $input['payment_method_id'] = $paymentMethod->id;
            }
        }

        Payment::create($input);

        return response()->json([
            'status' => 'success',
            'msg'    => 'Successfully submitted',
        ]);
    }

    public function paidSelected(Request $request)
    {
        $ids            = ! empty($request->ids) ? $request->ids : [0];
        $paymentReceipt = \App\PaymentReceipt::whereIn('id', $ids)->get();

        $paymentMethods = PaymentMethod::all();
        $currencies     = Currency::get();

        return view('vouchers.partials.modal-payment-receipt-paid', compact('paymentReceipt', 'currencies', 'paymentMethods'));
    }

    public function paidSelectedPaymentList(Request $request)
    {
        $payments = \App\Payment::where('payment_receipt_id', $request->payment_receipt_id)->get();

        return view('vouchers.partials.payment-receipt-list', compact('payments'));
    }

    public function payMultiple(Request $request)
    {
        $this->validate($request, [
            'date'              => 'required',
            'amount.*'          => 'required',
            'currency'          => 'required',
            'payment_method_id' => 'required',
        ]);

        $input = $request->except('_token');

        if (! is_numeric($input['payment_method_id'])) {
            $paymentMethod = PaymentMethod::where('name', $input['payment_method_id'])->first();
            if (! $paymentMethod) {
                $paymentMethod = PaymentMethod::create([
                    'name' => $input['payment_method_id'],
                ]);
                $input['payment_method_id'] = $paymentMethod->id;
            } else {
                $input['payment_method_id'] = $paymentMethod->id;
            }
        }

        $payment_method = PaymentMethod::find($input['payment_method_id']);

        if (! empty($request->amount)) {
            foreach ($request->amount as $k => $amount) {
                $preceipt = PaymentReceipt::find($k);
                if ($preceipt) {
                    $totalPaid = Payment::where('payment_receipt_id', $preceipt->id)->sum('amount');
                    $newTotal  = $totalPaid + $amount;

                    $input['payment_receipt_id'] = $preceipt->id;
                    $input['amount']             = $amount;
                    $message['message']          = 'Admin has given the payment of Payment Receipt #' . $preceipt->id . ' and amount ' . $amount . ' ' . $request->currency . ' through ' . $payment_method->name . " \n Note: " . $request->note;
                    $message['user_id']          = $preceipt->user_id;
                    $message['status']           = 1;

                    Payment::create($input);
                    $request1 = new \Illuminate\Http\Request();
                    $request1->replace($message);

                    $sendMessage = app(\App\Http\Controllers\WhatsAppController::class)->sendMessage($request1, 'user');
                    $cashData    = [
                        'user_id'             => $preceipt->user_id,
                        'description'         => 'Vendor paid',
                        'date'                => $request->input('date'),
                        'amount'              => $newTotal,
                        'type'                => 'paid',
                        'cash_flow_able_type' => \App\PaymentReceipt::class,
                        'created_at'          => date('Y-m-d H:i:s'),
                        'updated_by'          => \Auth::user()->id,
                    ];
                    if ($newTotal >= $preceipt->rate_estimated) {
                        $preceipt->update(['status' => 'Done']);
                        $cashdata['order_status'] = 'Done';
                        $cashdata['status']       = 1;
                    }
                    //create entry in table cash_flows
                    \DB::table('cash_flows')->insert($cashData);
                }
            }
        }

        return response()->json(['code' => 200, 'message' => 'Payment paid successfully']);
    }

    public function paymentHistory(request $request)
    {
        $task_id     = $request->input('task_id');
        $html        = '';
        $paymentData = \App\CashFlow::where('cash_flow_able_id', $task_id)
            ->where('cash_flow_able_type', \App\PaymentReceipt::class)
            ->where('type', 'paid')
            ->orderBy('date', 'DESC')
            ->get();
        $i = 1;
        if (count($paymentData) > 0) {
            foreach ($paymentData as $history) {
                $html .= '<tr>';
                $html .= '<td>' . $history->id . '</td>';
                $html .= '<td>' . $history->amount . '</td>';
                $html .= '<td>' . $history->date . '</td>';
                $html .= '<td>' . $history->description . '</td>';
                $html .= '</tr>';

                $i++;
            }

            return response()->json(['html' => $html, 'success' => true], 200);
        } else {
            $html .= '<tr>';
            $html .= '<td></td>';
            $html .= '<td></td>';
            $html .= '<td></td>';
            $html .= '<td></td>';
            $html .= '</tr>';
        }

        return response()->json(['html' => $html, 'success' => true], 200);
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/VoucherCouponController.php 
Content: <?php

namespace App\Http\Controllers;

use DB;
use Auth;
use App\Platform;
use App\CouponType;
use App\VoucherCoupon;
use App\VoucherCouponCode;
use App\VoucherCouponOrder;
use App\VoucherCouponRemark;
use Illuminate\Http\Request;
use App\Models\VoucherCouponStatus;
use App\Models\VoucherCouponStatusHistory;

class VoucherCouponController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        $voucher = new VoucherCoupon();

        $voucher = $voucher->select('voucher_coupons.*', 'wc.number', 'em.from_address', 'vcp.name AS plateform_name', 'u.name As user_name')
            ->with(['voucherCouponRemarks' => function ($q) {
                $q->select('id', 'voucher_coupons_id', 'remark');
            }])
            ->leftJoin('users As u', 'voucher_coupons.user_id', 'u.id')
            ->leftJoin('whatsapp_configs As wc', 'voucher_coupons.whatsapp_config_id', 'wc.id')
            ->leftJoin('email_addresses As em', 'voucher_coupons.email_address_id', 'em.id')
            ->leftJoin('voucher_coupon_platforms As vcp', 'voucher_coupons.platform_id', 'vcp.id');
        if (! empty(request('plateform_id'))) {
            $voucher = $voucher->where('platform_id', request('plateform_id'));
        }
        if (! empty(request('email_add'))) {
            $voucher = $voucher->where('email_address_id', request('email_add'));
        }
        if (! empty(request('whatsapp_id'))) {
            $voucher = $voucher->where('whatsapp_config_id', request('whatsapp_id'));
        }
        $voucher = $voucher->orderBy('id', 'DESC')->paginate(25)->appends(request()->except('page'));

        $platform         = Platform::get()->pluck('name', 'id');
        $whatsapp_configs = DB::table('whatsapp_configs')->get()->pluck('number', 'id');
        $emails           = DB::table('email_addresses')->get()->pluck('id', 'from_address');
        $coupontypes      = CouponType::get()->pluck('name', 'id');
        $status           = VoucherCouponStatus::all();

        return view('voucher-coupon.index', compact('voucher', 'platform', 'whatsapp_configs', 'emails', 'coupontypes', 'status'));
    }

    public function saveRemarks(Request $request)
    {
        $post = $request->all();

        $this->validate($request, [
            'voucher_coupons_id' => 'required',
            'remark'             => 'required',
        ]);

        $input = $request->except(['_token']);
        VoucherCouponRemark::create($input);

        return response()->json(['code' => 200, 'data' => $input]);
    }

    public function getRemarksHistories(Request $request)
    {
        $datas = VoucherCouponRemark::where('voucher_coupons_id', $request->voucher_coupons_id)
            ->latest()
            ->get();

        return response()->json([
            'status'      => true,
            'data'        => $datas,
            'message'     => 'History get successfully',
            'status_name' => 'success',
        ], 200);
    }

    public function statuscolor(Request $request)
    {
        $status_color = $request->all();
        $data         = $request->except('_token');
        foreach ($status_color['color_name'] as $key => $value) {
            $bugstatus               = VoucherCouponStatus::find($key);
            $bugstatus->status_color = $value;
            $bugstatus->save();
        }

        return redirect()->back()->with('success', 'The status color updated successfully.');
    }

    public function statusCreate(Request $request)
    {
        try {
            $status              = new VoucherCouponStatus();
            $status->status_name = $request->status_name;
            $status->save();

            return response()->json(['code' => 200, 'message' => 'status Create successfully']);
        } catch (Exception $e) {
            $msg = $e->getMessage();

            return response()->json(['code' => 500, 'message' => $msg]);
        }
    }

    public function updateStatus(Request $request)
    {
        $voucherId      = $request->input('voucherId');
        $selectedStatus = $request->input('selectedStatus');

        $voucher                     = VoucherCoupon::find($voucherId);
        $history                     = new VoucherCouponStatusHistory();
        $history->voucher_coupons_id = $voucherId;
        $history->old_value          = $voucher->status_id;
        $history->new_value          = $selectedStatus;
        $history->user_id            = Auth::user()->id;
        $history->save();

        $voucher->status_id = $selectedStatus;
        $voucher->save();

        return response()->json(['message' => 'Status updated successfully']);
    }

    public function statusHistories($id)
    {
        $datas = VoucherCouponStatusHistory::with(['user', 'newValue', 'oldValue'])
            ->where('voucher_coupons_id', $id)
            ->latest()
            ->get();

        return response()->json([
            'status'      => true,
            'data'        => $datas,
            'message'     => 'History get successfully',
            'status_name' => 'success',
        ], 200);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        try {
            if ($request->id) {
                $plate = VoucherCoupon::find($request->id);
            } else {
                $plate = new VoucherCoupon();
            }
            $plate->user_id            = \Auth::user()->id ?? '';
            $plate->platform_id        = $request->plateform_id ?? '';
            $plate->email_address_id   = $request->email_id ?? '';
            $plate->whatsapp_config_id = $request->whatsapp_config_id ?? '';
            $plate->password           = $request->password ?? '';
            $plate->save();

            return response()->json(['code' => 200, 'message' => 'Added successfully!!!']);
        } catch (Exception $e) {
            return response()->json(['code' => 500, 'message' => $e->getMessage()]);
        }
    }

    public function plateformStore(Request $request)
    {
        try {
            $plate       = new Platform();
            $plate->name = $request->plateform_name;
            $plate->save();

            return response()->json(['code' => 200, 'message' => 'Added successfully!!!']);
        } catch (Exception $e) {
            return response()->json(['code' => 500, 'message' => $e->getMessage()]);
        }
    }

    /**
     * Display the specified resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function show(VoucherCoupon $voucherCoupon)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param \App\VoucherCoupon $voucherCoupon
     *
     * @return \Illuminate\Http\Response
     */
    public function edit(Request $request)
    {
        try {
            $vou = VoucherCoupon::find($request->id);

            return response()->json(['code' => 200, 'data' => $vou, 'message' => 'Listed successfully!!!']);
        } catch (Exception $e) {
            $msg = $e->getMessage();

            return response()->json(['code' => 500, 'message' => $msg]);
        }
    }

    /**
     * Update the specified resource in storage.
     *
     * @param \App\VoucherCoupon $voucherCoupon
     * @param mixed              $id
     *
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        try {
            $vou         = VoucherCoupon::find($id);
            $vou->remark = $request->remark;
            $vou->save();

            return response()->json(['code' => 200, 'message' => 'Remark Updated successfully!!!']);
        } catch (Exception $e) {
            return response()->json(['code' => 500, 'message' => $e->getMessage()]);
        }
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param \App\VoucherCoupon $voucherCoupon
     *
     * @return \Illuminate\Http\Response
     */
    public function delete(Request $request)
    {
        try {
            $vou = VoucherCoupon::find($request->id);
            $vou->delete();

            return response()->json(['code' => 200, 'message' => 'Deleted successfully!!!']);
        } catch (Exception $e) {
            return response()->json(['code' => 500, 'message' => $e->getMessage()]);
        }
    }

    public function couponCodeCreate(Request $request)
    {
        try {
            if ($request->id) {
                $code = VoucherCouponCode::find($request->id);
            } else {
                $code = new VoucherCouponCode();
            }
            $code->user_id            = \Auth::user()->id ?? '';
            $code->voucher_coupons_id = $request->voucher_coupons_id;
            $code->coupon_code        = $request->coupon_code ?? '';
            $code->valid_date         = date('Y-m-d', strtotime($request->valid_date)) ?? '';
            $code->remark             = $request->code_remark ?? '';
            $code->coupon_type_id     = $request->coupon_type_id ?? '';
            $code->save();

            return response()->json(['code' => 200, 'message' => 'Coupon Code Added successfully!!!']);
        } catch (Exception $e) {
            return response()->json(['code' => 500, 'message' => $e->getMessage()]);
        }
    }

    public function couponCodeList(Request $request)
    {
        try {
            $vouCode = VoucherCouponCode::select('voucher_coupon_codes.*', 'users.name AS userName', 'vcp.name AS plateform_name', 'Vct.name AS couponType')
                ->leftJoin('users', 'users.id', 'voucher_coupon_codes.user_id')
                ->where('voucher_coupon_codes.voucher_coupons_id', $request->voucher_coupons_id)
                ->leftJoin('voucher_coupons As vc', 'vc.id', 'voucher_coupon_codes.voucher_coupons_id')
                ->leftJoin('voucher_coupon_platforms As vcp', 'vc.platform_id', 'vcp.id')
                ->leftJoin('voucher_coupon_types AS Vct', 'Vct.id', 'voucher_coupon_codes.coupon_type_id')
                ->get();

            return response()->json(['code' => 200, 'data' => $vouCode, 'message' => 'Listed successfully!!!']);
        } catch (Exception $e) {
            $msg = $e->getMessage();

            return response()->json(['code' => 500, 'message' => $msg]);
        }
    }

    public function couponCodeDelete(Request $request)
    {
        try {
            $vou = VoucherCouponCode::find($request->id);
            $vou->delete();

            return response()->json(['code' => 200, 'message' => 'Deleted successfully!!!']);
        } catch (Exception $e) {
            return response()->json(['code' => 500, 'message' => $e->getMessage()]);
        }
    }

    public function couponCodeOrderCreate(Request $request)
    {
        try {
            if ($request->id) {
                $code = VoucherCouponOrder::find($request->id);
            } else {
                $code = new VoucherCouponOrder();
            }
            $code->user_id            = \Auth::user()->id ?? '';
            $code->voucher_coupons_id = $request->voucher_coupons_id;
            $code->date_order_placed  = date('Y-m-d', strtotime($request->date_order_placed)) ?? '';
            $code->order_no           = $request->order_no ?? '';
            $code->order_amount       = $request->order_amount ?? '';
            $code->discount           = $request->discount ?? '';
            $code->final_amount       = $request->final_amount ?? '';
            $code->refund_amount      = $request->refund_amount ?? '';
            $code->remark             = $request->code_remark ?? '';
            $code->save();

            return response()->json(['code' => 200, 'message' => 'Coupon Code Order Added successfully!!!']);
        } catch (Exception $e) {
            return response()->json(['code' => 500, 'message' => $e->getMessage()]);
        }
    }

    public function couponCodeOrderList(Request $request)
    {
        try {
            $vouCodeO = VoucherCouponOrder::select('voucher_coupon_orders.*', 'users.name AS userName')->leftJoin('users', 'users.id', 'voucher_coupon_orders.user_id')->where('voucher_coupon_orders.voucher_coupons_id', $request->voucher_coupons_id)->get();

            return response()->json(['code' => 200, 'data' => $vouCodeO, 'message' => 'Listed successfully!!!']);
        } catch (Exception $e) {
            $msg = $e->getMessage();

            return response()->json(['code' => 500, 'message' => $msg]);
        }
    }

    public function couponCodeOrderDelete(Request $request)
    {
        try {
            $vou = VoucherCouponOrder::find($request->id);
            $vou->delete();

            return response()->json(['code' => 200, 'message' => 'Deleted successfully!!!']);
        } catch (Exception $e) {
            return response()->json(['code' => 500, 'message' => $e->getMessage()]);
        }
    }

    /**
     * Store Remark the specified resource in storage.
     *
     * @param \App\VoucherCoupon $voucherCouponId
     * @param mixed              $id
     *
     * @return \Illuminate\Http\Response
     */
    public function storeRemark(Request $request, $id)
    {
        try {
            $voucherCouponRemark                     = new VoucherCouponRemark;
            $voucherCouponRemark->voucher_coupons_id = $id;
            $voucherCouponRemark->remark             = $request->remark;
            $voucherCouponRemark->save();

            return response()->json(['code' => 200, 'message' => 'Remark Updated successfully!!!']);
        } catch (Exception $e) {
            return response()->json(['code' => 500, 'message' => $e->getMessage()]);
        }
    }

    public function coupontypeStore(Request $request)
    {
        try {
            $couponType       = new CouponType();
            $couponType->name = $request->coupon_type_name;
            $couponType->save();

            return response()->json(['code' => 200, 'message' => 'Coupon type Created successfully!!!']);
        } catch (Exception $e) {
            return response()->json(['code' => 500, 'message' => $e->getMessage()]);
        }
    }

    public function couponTypeList()
    {
        try {
            $perPage         = 10;
            $couponTypeLists = new VoucherCouponCode();

            $couponTypeLists = $couponTypeLists->select('voucher_coupon_codes.*', 'users.name AS userName', 'vcp.name AS plateform_name', 'Vct.name AS couponType')
                ->leftJoin('users', 'users.id', 'voucher_coupon_codes.user_id')
                ->leftJoin('voucher_coupons As vc', 'vc.id', 'voucher_coupon_codes.voucher_coupons_id')
                ->leftJoin('voucher_coupon_platforms As vcp', 'vc.platform_id', 'vcp.id')
                ->leftJoin('voucher_coupon_types AS Vct', 'Vct.id', 'voucher_coupon_codes.coupon_type_id')
                ->latest()
                ->paginate($perPage);

            return response()->json(['code' => 200, 'data' => $couponTypeLists, 'count' => count($couponTypeLists), 'message' => 'Listed successfully!!!']);
        } catch (Exception $e) {
            return response()->json(['code' => 500, 'message' => $e->getMessage()]);
        }
    }

    public function voucherscouponCodeList(Request $request)
    {
        $vouCode = new VoucherCouponCode();

        if (($request->coupon_code) !== null) {
            $vouCode = $vouCode->where('coupon_code', 'LIKE', '%' . $request->coupon_code . '%');
        }
        if ($request->coupon_types_ids !== null) {
            $vouCode = $vouCode->whereIn('coupon_type_id', $request->coupon_types_ids);
        }
        if ($request->username_ids !== null) {
            $vouCode = $vouCode->whereIn('user_id', $request->username_ids);
        }
        if ($request->date !== null) {
            $vouCode = $vouCode->where('valid_date', 'LIKE', '%' . $request->date . '%');
        }
        if ($request->platform_ids !== null) {
            $vouCode->whereHas('voucherCoupon.platform', function ($query) use ($request) {
                $query->where('platform_id', $request->platform_ids);
            });
        }

        $vouCode = $vouCode->latest()->paginate(\App\Setting::get('pagination', 10));

        return view('voucher-coupon.voucher-code-listing', compact('vouCode'));
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/WhatsAppController.php 
Content: <?php

namespace App\Http\Controllers;

use File;
use Image;
use App\Old;
use App\Task;
use App\User;
use Response;
use App\Email;
use App\Issue;
use App\Order;
use Validator;
use App\ApiKey;
use App\Lawyer;
use App\Vendor;
use App\Account;
use App\Blogger;
use App\Contact;
use App\ImQueue;
use App\Message;
use App\Product;
use App\Setting;
use App\Customer;
use App\Document;
use App\Dubbizle;
use App\Supplier;
use App\AutoReply;
use App\BrandFans;
use App\ColdLeads;
use App\LegalCase;
use Carbon\Carbon;
use Dompdf\Dompdf;
use App\LogRequest;
use App\ChatMessage;
use App\Instruction;
use App\MessageQueue;
use App\DeveloperTask;
use App\BroadcastImage;
use App\LogChatMessage;
use App\QuickSellGroup;
use App\CustomerCharity;
use Plank\Mediable\Media;
use App\WatsonChatJourney;
use App\AutoCompleteMessage;
use App\DocumentSendHistory;
use Illuminate\Http\Request;
use App\CommunicationHistory;
use App\ChatMessagesQuickData;
use App\Helpers\HubstaffTrait;
use App\Helpers\MessageHelper;
use App\Marketing\WhatsappConfig;
use App\Helpers\TranslationHelper;
use App\Mails\Manual\PurchaseExport;
use Illuminate\Support\Facades\Auth;
use Maatwebsite\Excel\Facades\Excel;
use App\Imports\CustomerNumberImport;
use GuzzleHttp\Client as GuzzleClient;
use App\Helpers\InstantMessagingHelper;
use App\Hubstaff\HubstaffActivitySummary;
use App\Marketing\WhatsappBusinessAccounts;
use IlluminUserFeedbackStatuspport\Facades\DB;
use Illuminate\Pagination\LengthAwarePaginator;
use App\Services\BulkCustomerMessage\KeywordsChecker;
use Plank\Mediable\Facades\MediaUploader as MediaUploader;

class WhatsAppController extends FindByNumberController
{
    use HubstaffTrait;

    const MEDIA_PDF_CHUNKS = 50;

    const AUTO_LEAD_SEND_PRICE = 281;

    private $githubClient;

    public function __construct()
    {
        $this->githubClient = new GuzzleClient([
            'auth' => [config('env.GITHUB_USERNAME'), config('env.GITHUB_TOKEN')],
        ]);
        $this->init(config('env.HUBSTAFF_SEED_PERSONAL_TOKEN'));
    }

    /**
     * Incoming message URL for whatsApp
     *
     * @return \Illuminate\Http\Response
     */
    public function incomingMessage(Request $request, GuzzleClient $client)
    {
        $data = $request->json()->all();
        $data = $this->mapForWassenger($data);
        if ($data['event'] == 'INBOX') {
            $to       = $data['to'];
            $from     = $data['from'];
            $text     = $data['text'];
            $lead     = $this->findLeadByNumber($from);
            $user     = $this->findUserByNumber($from);
            $supplier = $this->findSupplierByNumber($from);
            $customer = $this->findCustomerByNumber($from);

            $params = [
                'number' => $from,
            ];

            if ($user) {
                $params = $this->modifyParamsWithMessage($params, $data);

                $params['erp_user'] = $user->id;

                $params = $this->modifyParamsWithMessage($params, $data);

                if (array_key_exists('message', $params) && (preg_match_all("/#([\d]+)/i", $params['message'], $match))) {
                    $params['task_id'] = $match[1][0];
                }

                $message    = ChatMessage::create($params);
                $model_type = 'user';
                $model_id   = $user->id;

                if (array_key_exists('task_id', $params)) {
                    $this->sendRealTime($message, 'task_' . $match[1][0], $client);
                } else {
                    $this->sendRealTime($message, 'erp_user_' . $user->id, $client);
                }
            }

            if ($supplier) {
                $params['erp_user']    = null;
                $params['task_id']     = null;
                $params['supplier_id'] = $supplier->id;

                $params     = $this->modifyParamsWithMessage($params, $data, $supplier->id);
                $message    = ChatMessage::create($params);
                $model_type = 'supplier';
                $model_id   = $supplier->id;

                $this->sendRealTime($message, 'supplier_' . $supplier->id, $client);
            }

            if ($customer) {
                $params['erp_user']    = null;
                $params['supplier_id'] = null;
                $params['task_id']     = null;
                $params['customer_id'] = $customer->id;

                $params  = $this->modifyParamsWithMessage($params, $data);
                $message = ChatMessage::create($params);

                if (isset($params['message']) && $params['message']) {
                    (new KeywordsChecker())->assignCustomerAndKeywordForNewMessage($params['message'], $customer);
                }

                $model_type = 'customers';
                $model_id   = $customer->id;
                $customer->update([
                    'whatsapp_number' => $to,
                ]);

                $this->sendRealTime($message, 'customer_' . $customer->id, $client);

                if (Setting::get('forward_messages') == 1) {
                    if (Setting::get('forward_start_date') != null && Setting::get('forward_end_date') != null) {
                        $time       = Carbon::now();
                        $start_date = Carbon::parse(Setting::get('forward_start_date'));
                        $end_date   = Carbon::parse(Setting::get('forward_end_date'));

                        if ($time->between($start_date, $end_date, true)) {
                            $forward_users_ids = json_decode(Setting::get('forward_users'));
                            $second_message    = '';

                            if ($message->message == null) {
                                $forwarded_message = "FORWARDED from $customer->name";
                                $second_message    = $message->media_url;
                            } else {
                                $forwarded_message = "FORWARDED from $customer->name - " . $message->message;
                            }

                            foreach ($forward_users_ids as $user_id) {
                                $user = User::find($user_id);

                                $this->sendWithWhatsApp($user->phone, $user->whatsapp_number, $forwarded_message, false, $message->id);

                                if ($second_message != '') {
                                    $this->sendWithWhatsApp($user->phone, $user->whatsapp_number, $second_message, false, $message->id);
                                }
                            }
                        }
                    } else {
                        $forward_users_ids = json_decode(Setting::get('forward_users'));
                        $second_message    = '';

                        if ($message->message == null) {
                            $forwarded_message = "FORWARDED from $customer->name";
                            $second_message    = $message->media_url;
                        } else {
                            $forwarded_message = "FORWARDED from $customer->name - " . $message->message;
                        }

                        foreach ($forward_users_ids as $user_id) {
                            $user = User::find($user_id);

                            $this->sendWithWhatsApp($user->phone, $user->whatsapp_number, $forwarded_message, false, $message->id);

                            if ($second_message != '') {
                                $this->sendWithWhatsApp($user->phone, $user->whatsapp_number, $second_message, false, $message->id);
                            }
                        }
                    }
                }

                // Auto DND Keyword Stop Added By Satyam
                if (array_key_exists('message', $params) && strtoupper($params['message']) == 'DND' || strtoupper($params['message']) == 'STOP') {
                    if ($customer = Customer::find($params['customer_id'])) {
                        $customer->do_not_disturb = 1;
                        $customer->save();
                        \Log::channel('customerDnd')->debug('(Customer ID ' . $customer->id . ' line ' . $customer->name . ' ' . $customer->number . ': Added To DND');

                        $dnd_params = [
                            'number'      => null,
                            'user_id'     => 6,
                            'approved'    => 1,
                            'status'      => 9,
                            'customer_id' => $customer->id,
                            'message'     => AutoReply::where('type', 'auto-reply')->where('keyword', 'customer-dnd')->first()->reply,
                        ];

                        $auto_dnd_message = ChatMessage::create($dnd_params);

                        $this->sendWithWhatsApp($customer->phone, $customer->whatsapp_number, $dnd_params['message'], false, $auto_dnd_message->id);
                    }
                }

                // Auto Instruction
                if (array_key_exists('message', $params) && (preg_match('/price/i', $params['message']) || preg_match('/you photo/i', $params['message']) || preg_match('/pp/i', $params['message']) || preg_match('/how much/i', $params['message']) || preg_match('/cost/i', $params['message']) || preg_match('/rate/i', $params['message']))) {
                    if ($customer = Customer::find($params['customer_id'])) {
                        $two_hours                = Carbon::now()->subHours(2);
                        $latest_broadcast_message = ChatMessage::where('customer_id', $customer->id)->where('created_at', '>', $two_hours)->where('status', 8)->orderBy('id', 'DESC')->first();

                        if ($latest_broadcast_message) {
                            if (! $latest_broadcast_message->isSentBroadcastPrice()) {
                                if ($latest_broadcast_message->hasMedia(config('constants.media_tags'))) {
                                    $selected_products = [];

                                    foreach ($latest_broadcast_message->getMedia(config('constants.media_tags')) as $image) {
                                        $image_key     = $image->getKey();
                                        $mediable_type = 'BroadcastImage';

                                        $broadcast = BroadcastImage::with('Media')
                                            ->whereRaw("broadcast_images.id IN (SELECT mediables.mediable_id FROM mediables WHERE mediables.media_id = $image_key AND mediables.mediable_type LIKE '%$mediable_type%')")
                                            ->first();

                                        if ($broadcast) {
                                            $brod_products = json_decode($broadcast->products, true);

                                            if (count($brod_products) > 0) {
                                                foreach ($brod_products as $brod_pro) {
                                                    $selected_products[] = $brod_pro;
                                                }
                                            }
                                        }
                                    }

                                    if (isset($broadcast)) {
                                        if (! empty($selected_products)) {
                                            foreach ($selected_products as $pid) {
                                                $product    = \App\Product::where('id', $pid)->first();
                                                $quick_lead = \App\ErpLeads::create([
                                                    'customer_id'      => $customer->id,
                                                    'lead_status_id'   => 3,
                                                    'product_id'       => $pid,
                                                    'store_website_id' => 15,
                                                    'brand_id'         => $product ? $product->brand : null,
                                                    'category_id'      => $product ? $product->category : null,
                                                    'brand_segment'    => $product && $product->brands ? $product->brands->brand_segment : null,
                                                    'color'            => $customer->color,
                                                    'size'             => $customer->size,
                                                    'type'             => 'whatsapp-incoming-message',
                                                    'created_at'       => Carbon::now(),
                                                ]);
                                            }
                                            $requestData = new Request();
                                            $requestData->setMethod('POST');
                                            $requestData->request->add(['customer_id' => $customer->id, 'lead_id' => $quick_lead->id, 'selected_product' => $selected_products]);

                                            app(\App\Http\Controllers\LeadsController::class)->sendPrices($requestData);
                                        }

                                        CommunicationHistory::create([
                                            'model_id'   => $latest_broadcast_message->id,
                                            'model_type' => ChatMessage::class,
                                            'type'       => 'broadcast-prices',
                                            'method'     => 'whatsapp',
                                        ]);
                                    } else {
                                        //
                                    }
                                }
                            }
                        }

                        Instruction::create([
                            'customer_id'   => $customer->id,
                            'instruction'   => 'Please send the prices',
                            'category_id'   => 1,
                            'assigned_to'   => 7,
                            'assigned_from' => 6,
                        ]);
                    }
                }

                // Auto Replies
                $auto_replies = AutoReply::all();

                foreach ($auto_replies as $auto_reply) {
                    if (array_key_exists('message', $params) && $params['message'] != '') {
                        $keyword = $auto_reply->keyword;

                        if (preg_match("/{$keyword}/i", $params['message'])) {
                            $temp_params            = $params;
                            $temp_params['message'] = $auto_reply->reply;
                            $temp_params['status']  = 1;

                            ChatMessage::create($temp_params);

                            $this->sendRealTime($message, 'customer_' . $customer->id, $client);
                        }
                    }
                }
            } else {
                $params['customer_id'] = null;
            }

            if (! isset($user) && ! isset($purchase) && ! isset($customer)) {
                $modal_type              = 'leads';
                $user                    = User::get()[0];
                $validate_phone['phone'] = $from;

                $validator = Validator::make($validate_phone, [
                    'phone' => 'unique:customers,phone',
                ]);

                if ($validator->fails()) {
                } else {
                    $customer         = new Customer;
                    $customer->name   = $from;
                    $customer->phone  = $from;
                    $customer->rating = 2;
                    $customer->save();

                    $lead = \App\ErpLeads::create([
                        'customer_id'      => $customer->id,
                        'store_website_id' => 15,
                        'lead_status_id'   => 1,
                        'type'             => 'whatsapp-incoming-message',
                    ]);

                    $params['lead_id']     = $lead->id;
                    $params['customer_id'] = $customer->id;
                    $params                = $this->modifyParamsWithMessage($params, $data);
                    $message               = ChatMessage::create($params);
                    $model_type            = 'leads';
                    $model_id              = $lead->id;

                    $this->sendRealTime($message, 'customer_' . $customer->id, $client);
                }
            }

            // Auto Respond
            $today_date          = Carbon::now()->format('Y-m-d');
            $time                = Carbon::now();
            $start_time          = Setting::get('start_time');
            $start_time_exploded = explode(':', $start_time);
            $end_time            = Setting::get('end_time');
            $end_time_exploded   = explode(':', $end_time);
            $morning             = Carbon::create($time->year, $time->month, $time->day, $start_time_exploded[0], $start_time_exploded[1], 0);
            $not_morning         = Carbon::create($time->year, $time->month, $time->day, 0, 0, 0);
            $evening             = Carbon::create($time->year, $time->month, $time->day, $end_time_exploded[0], $end_time_exploded[1], 0);
            $not_evening         = Carbon::create($time->year, $time->month, $time->day, 23, 59, 0);
            $saturday            = Carbon::now()->endOfWeek()->subDay()->format('Y-m-d');
            $sunday              = Carbon::now()->endOfWeek()->format('Y-m-d');

            $chat_messages_query = ChatMessage::where('customer_id', $params['customer_id'])->whereBetween('created_at', [$morning, $evening])->whereNotNull('number');
            $chat_messages_count = $chat_messages_query->count();

            $chat_messages_evening_query = ChatMessage::where('customer_id', $params['customer_id'])->where(function ($query) use ($not_morning, $morning, $evening, $not_evening) {
                $query->whereBetween('created_at', [$not_morning, $morning])->orWhereBetween('created_at', [$evening, $not_evening]);
            })->whereNotNull('number');
            $chat_messages_evening_count = $chat_messages_evening_query->count();

            if ($chat_messages_count == 1) {
                $chat_messages_query_first = $chat_messages_query->first();
            }

            if ($chat_messages_evening_count == 1) {
                $chat_messages_evening_query_first = $chat_messages_evening_query->first();
            }

            if ($chat_messages_count == 1 && (isset($chat_messages_query_first) && $chat_messages_query_first->id == $message->id) && ($saturday != $today_date && $sunday != $today_date)) {
                $customer = Customer::find($params['customer_id']);
                $params   = [
                    'number'      => null,
                    'user_id'     => 6,
                    'approved'    => 1,
                    'status'      => 9,
                    'customer_id' => $params['customer_id'],
                ];

                if ($time->between($morning, $evening, true)) {
                    $params['message'] = AutoReply::where('type', 'auto-reply')->where('keyword', 'work-hours-greeting')->first()->reply;

                    sleep(1);
                    $additional_message = ChatMessage::create($params);
                    $this->sendWithWhatsApp($message->customer->phone, $customer->whatsapp_number, $additional_message->message, false, $additional_message->id);
                }
            } else {
                if (($chat_messages_evening_count == 1 && (isset($chat_messages_evening_query_first) && $chat_messages_evening_query_first->id == $message->id)) || ($chat_messages_count == 1 && ($saturday == $today_date || $sunday == $today_date))) {
                    $customer = Customer::find($params['customer_id']);

                    $auto_reply = AutoReply::where('type', 'auto-reply')->where('keyword', 'office-closed-message')->first();

                    $auto_message = preg_replace('/{start_time}/i', $start_time, $auto_reply->reply);
                    $auto_message = preg_replace('/{end_time}/i', $end_time, $auto_message);

                    $params = [
                        'number'      => null,
                        'user_id'     => 6,
                        'approved'    => 1,
                        'status'      => 9,
                        'customer_id' => $params['customer_id'],
                        'message'     => $auto_message,
                    ];

                    sleep(1);
                    $additional_message = ChatMessage::create($params);
                    $this->sendWithWhatsApp($message->customer->phone, $customer->whatsapp_number, $additional_message->message, false, $additional_message->id);
                }
            }
        } else {
            $custom_data = json_decode($data['custom_data'], true);

            $chat_message = ChatMessage::find($custom_data['chat_message_id']);

            if ($chat_message) {
                $chat_message->sent = 1;
                $chat_message->save();
            }
        }

        return response('');
    }

    public function mapForWassenger($data)
    {
        if (isset($data['event'])) {
            if ($data['event'] == 'message:in:new') {
                $data['event'] = 'INBOX';
            }
        }
        $data['messages'][] = $data['data'];
        unset($data['data']);

        if (isset($data['messages'])) {
            $data['messages'][0]['fromMe'] = false;
            $data['messages'][0]['author'] = $data['messages'][0]['from'];
            $data['instanceId']            = $data['messages'][0]['id'];
        }

        return $data;
    }

    public function sendRealTime($message, $model_id, $client, $customFile = null)
    {
        return;
        $realtime_params = [
            'realtime_id'  => $model_id,
            'id'           => $message->id,
            'number'       => $message->number,
            'assigned_to'  => $message->assigned_to ?? '',
            'created_at'   => Carbon::parse($message->created_at)->format('Y-m-d H:i:s'),
            'approved'     => $message->approved ?? 0,
            'status'       => $message->status ?? 0,
            'user_id'      => $message->user_id ?? 0,
            'erp_user'     => $message->erp_user ?? 0,
            'sent'         => $message->sent ?? 0,
            'resent'       => $message->resent ?? 0,
            'error_status' => $message->error_status ?? 0,
        ];

        // attach custom image or file here if not want to send original
        $mediaUrl = ($customFile && ! empty($customFile)) ? $customFile : $message->media_url;

        if ($mediaUrl) {
            $realtime_params['media_url']    = $mediaUrl;
            $headers                         = get_headers($mediaUrl, 1);
            $realtime_params['content_type'] = is_string($headers['Content-Type']) ? $headers['Content-Type'] : $headers['Content-Type'][1];
        }

        if ($message->message) {
            $realtime_params['message'] = $message->message;
        }

        $response = $client->post('https://sololuxury.co/deliver-message', [
            'form_params' => $realtime_params,
        ]);

        return response('success', 200);
    }

    public function incomingMessageNew(Request $request, GuzzleClient $client)
    {
        $data = $request->json()->all();

        if ($data['event'] == 'message:in:new') {
            $to       = str_replace('+', '', $data['data']['toNumber']);
            $from     = str_replace('+', '', $data['data']['fromNumber']);
            $text     = $data['data']['body'];
            $lead     = $this->findLeadByNumber($from);
            $user     = $this->findUserByNumber($from);
            $supplier = $this->findSupplierByNumber($from);
            $customer = $this->findCustomerByNumber($from);
            $dubbizle = $this->findDubbizleByNumber($from);

            $params = [
                'number'  => $from,
                'message' => '',
            ];

            if ($data['data']['type'] == 'text') {
                $params['message'] = $text;
            } else {
                if ($data['data']['type'] == 'image') {
                    $image_data = $data['data']['media']['preview']['image'];
                    $image_path = public_path() . '/uploads/temp_image.png';
                    $img        = Image::make(base64_decode($image_data))->encode('jpeg')->save($image_path);

                    $media = MediaUploader::fromSource($image_path)->upload();

                    File::delete('uploads/temp_image.png');
                }
            }

            if ($user) {
                $instruction = Instruction::where('assigned_to', $user->id)->latest()->first();

                if ($instruction) {
                    $myRequest = new Request();
                    $myRequest->setMethod('POST');
                    $myRequest->request->add(['remark' => $params['message'], 'id' => $instruction->id, 'module_type' => 'instruction', 'user_name' => 'User from Whatsapp']);

                    app(\App\Http\Controllers\TaskModuleController::class)->addRemark($myRequest);
                }

                NotificationQueueController::createNewNotification([
                    'message'    => $params['message'],
                    'timestamps' => ['+0 minutes'],
                    'model_type' => Instruction::class,
                    'model_id'   => $instruction->id,
                    'user_id'    => '6',
                    'sent_to'    => $instruction->assigned_from,
                    'role'       => '',
                ]);

                $params['erp_user'] = $user->id;

                if ($params['message'] != '' && (preg_match_all("/TASK ID ([\d]+)/i", $params['message'], $match))) {
                    $params['task_id'] = $match[1][0];
                }

                $params     = $this->modifyParamsWithMessage($params, $data);
                $message    = ChatMessage::create($params);
                $model_type = 'user';
                $model_id   = $user->id;

                if (array_key_exists('task_id', $params)) {
                    $this->sendRealTime($message, 'task_' . $match[1][0], $client);
                } else {
                    $this->sendRealTime($message, 'erp_user_' . $user->id, $client);
                }
            }

            if ($supplier) {
                $params['erp_user']    = null;
                $params['task_id']     = null;
                $params['supplier_id'] = $supplier->id;

                $message    = ChatMessage::create($params);
                $model_type = 'supplier';
                $model_id   = $supplier->id;

                $this->sendRealTime($message, 'supplier_' . $supplier->id, $client);
            }

            if ($dubbizle) {
                $params['erp_user']    = null;
                $params['task_id']     = null;
                $params['supplier_id'] = null;
                $params['dubbizle_id'] = $dubbizle->id;

                $message    = ChatMessage::create($params);
                $model_type = 'dubbizle';
                $model_id   = $dubbizle->id;

                $this->sendRealTime($message, 'dubbizle_' . $dubbizle->id, $client);
            }

            if ($customer) {
                $params['erp_user']    = null;
                $params['supplier_id'] = null;
                $params['task_id']     = null;
                $params['dubbizle_id'] = null;
                $params['customer_id'] = $customer->id;

                $message = ChatMessage::create($params);

                if ($params['message']) {
                    (new KeywordsChecker())->assignCustomerAndKeywordForNewMessage($params['message'], $customer);
                }

                $model_type = 'customers';
                $model_id   = $customer->id;
                $customer->update([
                    'whatsapp_number' => $to,
                ]);

                $this->sendRealTime($message, 'customer_' . $customer->id, $client);

                if (Setting::get('forward_messages') == 1) {
                    if (Setting::get('forward_start_date') != null && Setting::get('forward_end_date') != null) {
                        $time       = Carbon::now();
                        $start_date = Carbon::parse(Setting::get('forward_start_date'));
                        $end_date   = Carbon::parse(Setting::get('forward_end_date'));

                        if ($time->between($start_date, $end_date, true)) {
                            $forward_users_ids = json_decode(Setting::get('forward_users'));
                            $second_message    = '';

                            if ($message->message == null) {
                                $forwarded_message = "FORWARDED from $customer->name";
                                $second_message    = $message->media_url;
                            } else {
                                $forwarded_message = "FORWARDED from $customer->name - " . $message->message;
                            }

                            foreach ($forward_users_ids as $user_id) {
                                $user = User::find($user_id);

                                $this->sendWithNewApi($user->phone, $user->whatsapp_number, $forwarded_message, null, $message->id);

                                if ($second_message != '') {
                                    $this->sendWithNewApi($user->phone, $user->whatsapp_number, null, $second_message, $message->id);
                                }
                            }
                        }
                    } else {
                        $forward_users_ids = json_decode(Setting::get('forward_users'));
                        $second_message    = '';

                        if ($message->message == null) {
                            $forwarded_message = "FORWARDED from $customer->name";
                            $second_message    = $message->media_url;
                        } else {
                            $forwarded_message = "FORWARDED from $customer->name - " . $message->message;
                        }

                        foreach ($forward_users_ids as $user_id) {
                            $user = User::find($user_id);

                            $this->sendWithNewApi($user->phone, $user->whatsapp_number, $forwarded_message, null, $message->id);

                            if ($second_message != '') {
                                $this->sendWithNewApi($user->phone, $user->whatsapp_number, null, $second_message, $message->id);
                            }
                        }
                    }
                }

                // Auto DND
                if (array_key_exists('message', $params) && strtoupper($params['message']) == 'DND') {
                    if ($customer = Customer::find($params['customer_id'])) {
                        $customer->do_not_disturb = 1;
                        $customer->save();
                        \Log::channel('customerDnd')->debug('(Customer ID ' . $customer->id . ' line ' . $customer->name . ' ' . $customer->number . ': Added To DND');

                        $dnd_params = [
                            'number'      => null,
                            'user_id'     => 6,
                            'approved'    => 1,
                            'status'      => 9,
                            'customer_id' => $customer->id,
                            'message'     => AutoReply::where('type', 'auto-reply')->where('keyword', 'customer-dnd')->first()->reply,
                        ];

                        $auto_dnd_message = ChatMessage::create($dnd_params);

                        $this->sendWithNewApi($customer->phone, $customer->whatsapp_number, $dnd_params['message'], null, $auto_dnd_message->id);
                    }
                }

                // Auto Instruction
                if (array_key_exists('message', $params) && (preg_match('/price/i', $params['message']) || preg_match('/you photo/i', $params['message']) || preg_match('/pp/i', $params['message']) || preg_match('/how much/i', $params['message']) || preg_match('/cost/i', $params['message']) || preg_match('/rate/i', $params['message']))) {
                    if ($customer = Customer::find($params['customer_id'])) {
                        $two_hours                = Carbon::now()->subHours(2);
                        $latest_broadcast_message = ChatMessage::where('customer_id', $customer->id)->where('created_at', '>', $two_hours)->where('status', 8)->latest()->first();

                        if ($latest_broadcast_message) {
                            if (! $latest_broadcast_message->isSentBroadcastPrice()) {
                                if ($latest_broadcast_message->hasMedia(config('constants.media_tags'))) {
                                    $selected_products = [];

                                    foreach ($latest_broadcast_message->getMedia(config('constants.media_tags')) as $image) {
                                        $image_key     = $image->getKey();
                                        $mediable_type = 'BroadcastImage';

                                        $broadcast = BroadcastImage::with('Media')
                                            ->whereRaw("broadcast_images.id IN (SELECT mediables.mediable_id FROM mediables WHERE mediables.media_id = $image_key AND mediables.mediable_type LIKE '%$mediable_type%')")
                                            ->first();

                                        if ($broadcast) {
                                            $brod_products = json_decode($broadcast->products, true);

                                            if (count($brod_products) > 0) {
                                                foreach ($brod_products as $brod_pro) {
                                                    $selected_products[] = $brod_pro;
                                                }
                                            }
                                        }
                                    }

                                    if (isset($broadcast)) {
                                        foreach ($selected_products as $pid) {
                                            $product    = \App\Product::where('id', $pid)->first();
                                            $quick_lead = \App\ErpLeads::create([
                                                'customer_id'      => $customer->id,
                                                'lead_status_id'   => 3,
                                                'store_website_id' => 15,
                                                'product_id'       => $pid,
                                                'type'             => 'whatsapp-incoming-message-new',
                                                'brand_id'         => $product ? $product->brand : null,
                                                'category_id'      => $product ? $product->category : null,
                                                'brand_segment'    => $product && $product->brands ? $product->brands->brand_segment : null,
                                                'color'            => $customer->color,
                                                'size'             => $customer->size,
                                                'created_at'       => Carbon::now(),
                                            ]);
                                        }

                                        $requestData = new Request();
                                        $requestData->setMethod('POST');
                                        $requestData->request->add(['customer_id' => $customer->id, 'lead_id' => $quick_lead->id, 'selected_product' => $selected_products]);

                                        app(\App\Http\Controllers\LeadsController::class)->sendPrices($requestData);

                                        CommunicationHistory::create([
                                            'model_id'   => $latest_broadcast_message->id,
                                            'model_type' => ChatMessage::class,
                                            'type'       => 'broadcast-prices',
                                            'method'     => 'whatsapp',
                                        ]);
                                    } else {
                                        //
                                    }
                                }
                            }
                        }

                        Instruction::create([
                            'customer_id'   => $customer->id,
                            'instruction'   => 'Please send the prices',
                            'category_id'   => 1,
                            'assigned_to'   => 7,
                            'assigned_from' => 6,
                        ]);
                    }
                }

                // Auto Replies
                $auto_replies = AutoReply::all();

                foreach ($auto_replies as $auto_reply) {
                    if (array_key_exists('message', $params) && $params['message'] != '') {
                        $keyword = $auto_reply->keyword;

                        if (preg_match("/{$keyword}/i", $params['message'])) {
                            $temp_params            = $params;
                            $temp_params['message'] = $auto_reply->reply;
                            $temp_params['status']  = 1;

                            ChatMessage::create($temp_params);

                            $this->sendRealTime($message, 'customer_' . $customer->id, $client);
                        }
                    }
                }
            }

            if (! isset($user) && ! isset($purchase) && ! isset($customer)) {
                $modal_type              = 'leads';
                $user                    = User::get()[0];
                $validate_phone['phone'] = $from;

                $validator = Validator::make($validate_phone, [
                    'phone' => 'unique:customers,phone',
                ]);

                if ($validator->fails()) {
                } else {
                    $customer         = new Customer;
                    $customer->name   = $from;
                    $customer->phone  = $from;
                    $customer->rating = 2;
                    $customer->save();

                    $lead = \App\ErpLeads::create([
                        'customer_id'      => $customer->id,
                        'store_website_id' => 15,
                        'lead_status_id'   => 1,
                        'type'             => 'whatsapp-incoming-message-new',
                    ]);

                    $params['lead_id']     = $lead->id;
                    $params['customer_id'] = $customer->id;

                    $message    = ChatMessage::create($params);
                    $model_type = 'leads';
                    $model_id   = $lead->id;

                    $this->sendRealTime($message, 'customer_' . $customer->id, $client);
                }
            }

            // Auto Respond
            $today_date          = Carbon::now()->format('Y-m-d');
            $time                = Carbon::now();
            $start_time          = Setting::get('start_time');
            $start_time_exploded = explode(':', $start_time);
            $end_time            = Setting::get('end_time');
            $end_time_exploded   = explode(':', $end_time);
            $morning             = Carbon::create($time->year, $time->month, $time->day, $start_time_exploded[0], $start_time_exploded[1], 0);
            $not_morning         = Carbon::create($time->year, $time->month, $time->day, 0, 0, 0);
            $evening             = Carbon::create($time->year, $time->month, $time->day, $end_time_exploded[0], $end_time_exploded[1], 0);
            $not_evening         = Carbon::create($time->year, $time->month, $time->day, 23, 59, 0);
            $saturday            = Carbon::now()->endOfWeek()->subDay()->format('Y-m-d');
            $sunday              = Carbon::now()->endOfWeek()->format('Y-m-d');

            $chat_messages_query = ChatMessage::where('customer_id', $params['customer_id'])->whereBetween('created_at', [$morning, $evening])->whereNotNull('number');
            $chat_messages_count = $chat_messages_query->count();

            $chat_messages_evening_query = ChatMessage::where('customer_id', $params['customer_id'])->where(function ($query) use ($not_morning, $morning, $evening, $not_evening) {
                $query->whereBetween('created_at', [$not_morning, $morning])->orWhereBetween('created_at', [$evening, $not_evening]);
            })->whereNotNull('number');
            $chat_messages_evening_count = $chat_messages_evening_query->count();

            if ($chat_messages_count == 1) {
                $chat_messages_query_first = $chat_messages_query->first();
            }

            if ($chat_messages_evening_count == 1) {
                $chat_messages_evening_query_first = $chat_messages_evening_query->first();
            }

            if ($chat_messages_count == 1 && (isset($chat_messages_query_first) && $chat_messages_query_first->id == $message->id) && ($saturday != $today_date && $sunday != $today_date)) {
                $customer = Customer::find($params['customer_id']);
                $params   = [
                    'number'      => null,
                    'user_id'     => 6,
                    'approved'    => 1,
                    'status'      => 9,
                    'customer_id' => $params['customer_id'],
                ];

                if ($time->between($morning, $evening, true)) {
                    $params['message'] = AutoReply::where('type', 'auto-reply')->where('keyword', 'work-hours-greeting')->first()->reply;

                    sleep(1);
                    $additional_message = ChatMessage::create($params);
                    $this->sendWithNewApi($message->customer->phone, $customer->whatsapp_number, $additional_message->message, null, $additional_message->id);
                }
            } else {
                if (($chat_messages_evening_count == 1 && (isset($chat_messages_evening_query_first) && $chat_messages_evening_query_first->id == $message->id)) || ($chat_messages_count == 1 && ($saturday == $today_date || $sunday == $today_date))) {
                    $customer = Customer::find($params['customer_id']);

                    $auto_reply = AutoReply::where('type', 'auto-reply')->where('keyword', 'office-closed-message')->first();

                    $auto_message = preg_replace('/{start_time}/i', $start_time, $auto_reply->reply);
                    $auto_message = preg_replace('/{end_time}/i', $end_time, $auto_message);

                    $params = [
                        'number'      => null,
                        'user_id'     => 6,
                        'approved'    => 1,
                        'status'      => 9,
                        'customer_id' => $params['customer_id'],
                        'message'     => $auto_message,
                    ];

                    sleep(1);
                    $additional_message = ChatMessage::create($params);
                    $this->sendWithNewApi($message->customer->phone, $customer->whatsapp_number, $additional_message->message, null, $additional_message->id);
                }
            }

            if ($data['data']['type'] == 'image') {
                $media->move('chatmessage/' . floor($message->id / config('constants.image_per_folder')));
                $message->attachMedia($media, config('constants.media_tags'));
            }
        } else {
            $custom_data = json_decode($data['custom_data'], true);

            $chat_message = ChatMessage::find($custom_data['chat_message_id']);

            if ($chat_message) {
                $chat_message->sent = 1;
                $chat_message->save();
            }
        }

        return response('success', 200);
    }

    public function webhook(Request $request, GuzzleClient $client)
    {
        // Get json object
        $data                = $request->json()->all();
        $needToSendLeadPrice = false;
        $isReplied           = false;

        $data = $this->mapForWassenger($data);

        // Log incoming webhook
        \Log::channel('chatapi')->debug('Webhook: ' . json_encode($data));
        // Check for ack
        if (array_key_exists('ack', $data)) {
            //
        }

        // Check for messages
        if (! array_key_exists('messages', $data)) {
            return Response::json('ACK', 200);
        }

        // Loop over messages
        foreach ($data['messages'] as $chatapiMessage) {
            $quoted_message_id = null;
            // Convert false and true text to false and true
            if ($chatapiMessage['fromMe'] === 'false') {
                $chatapiMessage['fromMe'] = false;
            }
            if ($chatapiMessage['fromMe'] === 'true') {
                $chatapiMessage['fromMe'] = true;
            }

            $parentMessage = null;

            try {
                // check if quotedMsgId is available, if available then we will search for parent message
                if (isset($chatapiMessage['quotedMsgId'])) {
                    $parentMessage = ChatMessage::where('unique_id', $chatapiMessage['quotedMsgId'])->first();
                    if ($parentMessage) {
                        $quoted_message_id = $parentMessage->id;
                    }
                }
            } catch (Exception $e) {
                //continue
            }

            WatsonChatJourney::updateOrCreate(['chat_message_id' => $quoted_message_id], ['chat_entered' => 1]);
            WatsonChatJourney::updateOrCreate(['chat_message_id' => $quoted_message_id], ['message_received' => 1]);

            // Set default parameters
            $from        = str_replace('@c.us', '', $chatapiMessage['author']);
            $instanceId  = $data['instanceId'];
            $text        = $chatapiMessage['body'];
            $contentType = $chatapiMessage['type'];
            $numberPath  = substr($from, 0, 3) . '/' . substr($from, 3, 1);

            // Check if message already exists
            $chatMessage = ChatMessage::where('unique_id', $chatapiMessage['id'])->first();
            if ($chatMessage != null) {
                //continue;
            }

            // Find connection with this number in our database
            if ($chatapiMessage['fromMe'] == true) {
                $searchNumber = str_replace('@c.us', '', $chatapiMessage['chatId']);
            } else {
                $searchNumber = $from;
            }

            // Find objects by number
            $supplier = $this->findSupplierByNumber($searchNumber);
            $vendor   = $this->findVendorByNumber($searchNumber);
            $user     = $this->findUserByNumber($searchNumber);
            $dubbizle = $this->findDubbizleByNumber($searchNumber);
            $contact  = $this->findContactByNumber($searchNumber);
            $customer = $this->findCustomerByNumber($searchNumber);

            // check the message related to the supplier
            $sendToSupplier = false;
            if (! empty($text)) {
                $matchSupplier = explode('-', $text);
                if (
                    isset($matchSupplier[0]) && $matchSupplier[0] == 'S'
                    && isset($matchSupplier[1]) && is_numeric($matchSupplier[1])
                ) {
                    $sendToSupplier = true;
                    $supplier       = Supplier::find($matchSupplier[1]);
                }
            }
            if (! empty($customer)) {
                //
            }

            if (! empty($supplier) && $contentType !== 'image') {
                $supplierDetails = is_object($supplier) ? Supplier::find($supplier->id) : $supplier;
                $language        = $supplierDetails->language;
                if ($language != null) {
                    $fromLang = $language;
                    $toLang   = 'en';

                    if ($sendToSupplier) {
                        $fromLang = 'en';
                        $toLang   = $language;
                    }

                    $result = TranslationHelper::translate($fromLang, $toLang, $text);
                    if ($sendToSupplier) {
                        $text = $result;
                    } else {
                        $text = $result . ' -- ' . $text;
                    }
                }
            }
            $originalMessage = $text;
            // Set params
            $params = [
                'number'            => $from,
                'unique_id'         => $chatapiMessage['id'],
                'message'           => '',
                'media_url'         => null,
                'approved'          => $chatapiMessage['fromMe'] ? 1 : 0,
                'status'            => $chatapiMessage['fromMe'] ? 2 : 0,
                'contact_id'        => null,
                'erp_user'          => null,
                'supplier_id'       => null,
                'task_id'           => null,
                'dubizzle_id'       => null,
                'vendor_id'         => null,
                'customer_id'       => null,
                'quoted_message_id' => $quoted_message_id,
            ];

            try {
                // check if time exist then convert and assign it
                if (isset($chatapiMessage['time'])) {
                    $params['created_at'] = date('Y-m-d H:i:s', $chatapiMessage['time']);
                }
            } catch (Exception $e) {
                //If the date format is causing issue from whats app script messages
                $params['created_at'] = $chatapiMessage['time'];
            }

            // Check if the message is a URL
            if (filter_var($text, FILTER_VALIDATE_URL)) {
                if (substr($text, 0, 23) == 'https://firebasestorage') {
                    // Try to download the image
                    try {
                        // Get file extension
                        $extension = preg_replace("#\?.*#", '', pathinfo($text, PATHINFO_EXTENSION)) . "\n";

                        // Set tmp file
                        $filePath = public_path() . '/uploads/tmp_' . rand(0, 100000) . '.' . trim($extension);

                        // Copy URL to file path
                        copy($text, $filePath);

                        // Upload media
                        $media = MediaUploader::fromSource($filePath)->useFilename(uniqid(true, true))->toDisk('s3')->toDirectory('chat-messages/' . $numberPath)->upload();

                        // Delete the file
                        unlink($filePath);

                        // Update media URL
                        $params['media_url'] = getMediaUrl($media);
                        $params['message']   = isset($chatapiMessage['caption']) ? $chatapiMessage['caption'] : '';
                    } catch (Exception $exception) {
                        \Log::error($exception);
                        //
                    }
                } else {
                    try {
                        $extension = preg_replace("#\?.*#", '', pathinfo($text, PATHINFO_EXTENSION)) . "\n";
                        // Set tmp file
                        $filePath = public_path() . '/uploads/tmp_' . rand(0, 100000) . '.' . trim($extension);
                        // Copy URL to file path
                        copy($text, $filePath);
                        // Upload media
                        $media = MediaUploader::fromSource($filePath)->useFilename(uniqid(true, true))->toDisk('s3')->toDirectory('chat-messages/' . $numberPath)->upload();
                        // Delete the file
                        unlink($filePath);
                        // Update media URL
                        $params['media_url'] = getMediaUrl($media);
                        $params['message']   = isset($chatapiMessage['caption']) ? $chatapiMessage['caption'] : '';
                    } catch (Exception $exception) {
                        \Log::error($exception);
                        $params['message'] = $text;
                    }
                }
            } else {
                $params['message'] = $text;
            }

            // From me? Only store, nothing else
            if ($chatapiMessage['fromMe'] == true) {
                // Set objects
                $params['erp_user']    = isset($user->id) ? $user->id : null;
                $params['supplier_id'] = isset($supplier->id) ? $supplier->id : null;
                $params['task_id']     = null;
                $params['dubbizle_id'] = isset($dubbizle->id) ? $dubbizle->id : null;
                $params['vendor_id']   = isset($vendor->id) && ! isset($customer->id) ? $vendor->id : null;
                $params['customer_id'] = isset($customer->id) ? $customer->id : null;

                // Remove number
                $params['number'] = null;

                // Set unique ID
                $params['unique_id'] = $chatapiMessage['id'];

                // Check for duplicate vendor message
                if (isset($vendor->id)) {
                    // Find duplicate message
                    $duplicateChatMessage = ChatMessage::where('vendor_id', $vendor->id)->where('message', $params['message'])->first();

                    // Set vendor ID to null if message is found
                    if ($duplicateChatMessage != null) {
                        $params['vendor_id'] = null;
                    }
                }
                // Create message
                $message = ChatMessage::create($params);

                // Continue to the next record
                continue;
            }

            $userId = $supplierId = $contactId = $vendorId = $dubbizleId = $customerId = null;

            if ($user != null) {
                $userId = $user->id;
            }

            if ($contact != null) {
                $contactId = $contact->id;
            }

            if ($supplier != null) {
                $supplierId = $supplier->id;
            }

            if ($vendor != null) {
                $vendorId = $vendor->id;
            }

            if ($dubbizle != null) {
                $dubbizleId = $dubbizle->id;
            }

            if ($customer != null) {
                $customerId = $customer->id;
            }

            $params['user_id']     = $userId;
            $params['contact_id']  = $contactId;
            $params['supplier_id'] = $supplierId;
            $params['vendor_id']   = $vendorId;
            $params['dubbizle_id'] = $dubbizleId;
            $params['customer_id'] = $customerId;

            if ($vendor) {
                $params['user_type'] = 1;
            }

            if (! empty($user) || ! empty($contact) || ! empty($supplier) || ! empty($vendor) || ! empty($dubbizle) || ! empty($customer)) {
                // check that if message comes from customer,supplier,vendor
                if (! empty($customer)) {
                    $blockCustomer = \App\BlockWebMessageList::where('object_id', $customer->id)->where('object_type', Customer::class)->first();
                    if ($blockCustomer) {
                        $blockCustomer->delete();
                    }
                }
                // check for vendor and remvove from the list
                if (! empty($vendor)) {
                    $blockVendor = \App\BlockWebMessageList::where('object_id', $vendor->id)->where('object_type', Vendor::class)->first();
                    if ($blockVendor) {
                        $blockVendor->delete();
                    }
                }
                // check for supplier and remove from the list
                if (! empty($supplier)) {
                    $blockSupplier = \App\BlockWebMessageList::where('object_id', $supplier->id)->where('object_type', Supplier::class)->first();
                    if ($blockSupplier) {
                        $blockSupplier->delete();
                    }
                }
                $message = ChatMessage::create($params);
            } else {
                // create a customer here
                $customer = Customer::create([
                    'name'  => $from,
                    'phone' => $from,
                ]);
                $params['customer_id'] = $customer->id;
                $message               = ChatMessage::create($params);
            }

            if ($customer != null) {
                ChatMessagesQuickData::updateOrCreate([
                    'model'    => \App\Customer::class,
                    'model_id' => $params['customer_id'],
                ], [
                    'last_unread_message'    => @$params['message'],
                    'last_unread_message_at' => Carbon::now(),
                    'last_unread_message_id' => $message->id,
                ]);
            }

            // Is there a user linked to this number?
            if ($user) {
                // Add user ID to params

                // Check for task
                if ($params['message'] != '' && (preg_match_all("/#([\d]+)/i", $params['message'], $match))) {
                    // If task is found
                    if ($task = Task::find($match[1][0])) {
                        // Set the task_id parameter
                        $params['task_id'] = $match[1][0];

                        // Check for task users and set ERP user
                        if (count($task->users) > 0) {
                            if ($task->assign_from == $user->id) {
                                $params['erp_user'] = $task->assign_to;
                            } else {
                                $params['erp_user'] = $task->assign_from;
                            }
                        }

                        // Check for task contacts and set contact_id
                        if (count($task->contacts) > 0) {
                            if ($task->assign_from == $user->id) {
                                $params['contact_id'] = $task->assign_to;
                            } else {
                                $params['contact_id'] = $task->assign_from;
                            }
                        }
                    }
                }

                // Set media_url parameter
                if (isset($media)) {
                    $params['media_url'] = getMediaUrl($media);
                }

                // Attach media to message
                if (isset($media)) {
                    $message->attachMedia($media, config('constants.media_tags'));
                }

                // Send realtime message (???) if there is a task ID
                if (array_key_exists('task_id', $params) && ! empty($params['task_id'])) {
                    $this->sendRealTime($message, 'task_' . $task->id, $client);
                } else {
                    $this->sendRealTime($message, 'user_' . $user->id, $client);
                }
            }

            // Is there a contact linked to this number?
            if ($contact) {
                // Check for task ID
                if ($params['message'] != '' && (preg_match_all("/#([\d]+)/i", $params['message'], $match))) {
                    $params['task_id'] = $match[1][0];
                }

                if (array_key_exists('task_id', $params) && ! empty($params['task_id'])) {
                    $this->sendRealTime($message, 'task_' . $match[1][0], $client);
                } else {
                    $this->sendRealTime($message, 'user_' . $contact->id, $client);
                }
            }

            if ($supplier) {
                if ($params['media_url'] != null) {
                    self::saveProductFromSupplierIncomingImages($supplier->id, $params['media_url']);
                }
            }

            // Check for vendor
            if ($vendor) {
                // Set vendor category
                $category = $vendor->category;

                // Send message if all required data is set
                if ($category && $category->user_id && ($params['message'] || $params['media_url'])) {
                    $user = User::find($category->user_id);
                    if (isset($sendResult) && $sendResult) {
                        $message->unique_id = $sendResult['id'] ?? '';
                        $message->save();
                    }
                }

                $vendor->store_website_id = 1;
            }

            // check if the supplier message has been set then we need to send that message to erp user
            if ($supplier) {
                $phone    = $supplier->phone;
                $whatsapp = $supplier->whatsapp_number;
                if (! $sendToSupplier) {
                    $phone = ChatMessage::getSupplierForwardTo();
                }

                $textMessage = ($sendToSupplier) ? $params['message'] : 'S-' . $supplier->id . '-(' . $supplier->supplier . ')=> ' . $params['message'];
                if (isset($sendResult) && $sendResult) {
                    $message->unique_id = $sendResult['id'] ?? '';
                    $message->save();
                }
            }

            if ($dubbizle) {
                $model_type = 'dubbizle';
                $model_id   = $dubbizle->id;

                $this->sendRealTime($message, 'dubbizle_' . $dubbizle->id, $client);

                $params['dubbizle_id'] = null;
            }

            if ($supplier && $message) {
                \App\ChatbotReply::create([
                    'question'        => $params['message'],
                    'replied_chat_id' => $message->id,
                    'reply_from'      => 'database',
                ]);
            } elseif ($vendor && $message) {
                \App\ChatbotReply::create([
                    'question'        => $params['message'],
                    'replied_chat_id' => $message->id,
                    'reply_from'      => 'database',
                ]);
            }

            // }

            // Get all numbers from config
            $config = \Config::get('apiwha.instances');

            // Set isCustomerNumber to false by default
            $isCustomerNumber = false;
            // Loop over instance IDs to check if the whatsapp number is used for incoming messages from customers
            foreach ($config as $whatsAppNumber => $arrNumber) {
                if ($arrNumber['instance_id'] == $instanceId) {
                    $to               = $whatsAppNumber;
                    $isCustomerNumber = $arrNumber['customer_number'];
                    $instanceNumber   = $whatsAppNumber;
                }
            }

            /// Also get all numbers from database
            if (! $isCustomerNumber && $customer != null) {
                $whatsappConfigs = WhatsappConfig::where('is_customer_support', 0)->get();

                // Loop over whatsapp configs
                if ($whatsappConfigs !== null) {
                    foreach ($whatsappConfigs as $whatsappConfig) {
                        if ($whatsappConfig->username == $instanceId) {
                            $isCustomerNumber = $whatsappConfig->number;
                            $instanceNumber   = $whatsappConfig->number;
                        }
                    }
                }
            }

            // No to?
            if (empty($to)) {
                $to = $config[0]['number'];
            }

            WatsonChatJourney::updateOrCreate(['chat_message_id' => $quoted_message_id], ['reply_found_in_database' => 1]);
            WatsonChatJourney::updateOrCreate(['chat_message_id' => $quoted_message_id], ['reply' => $params['message']]);

            if ($customer) {
                (new \App\Services\Products\SendImagesOfProduct)->check($message);
                \App\Helpers\MessageHelper::whatsAppSend($customer, $params['message'], true, $message, false, $parentMessage);
                WatsonChatJourney::updateOrCreate(['chat_message_id' => $quoted_message_id], ['response_sent_to_cusomer' => 1]);
            }

            // Is this message from a customer?
            $isCustomerNumber = true;
            if ($customer && $isCustomerNumber) {
                if ($params['message']) {
                    (new KeywordsChecker())->assignCustomerAndKeywordForNewMessage($params['message'], $customer);
                }

                if (isset($media)) {
                    if ($contentType === 'image') {
                        $message->attachMedia($media, $contentType);
                        $message->save();
                    }
                }

                $model_type = 'customers';
                $model_id   = $customer->id;
                $customer->update([
                    'whatsapp_number' => $to,
                ]);

                $this->sendRealTime($message, 'customer_' . $customer->id, $client);

                if (Setting::get('forward_messages') == 1) {
                    if (Setting::get('forward_start_date') != null && Setting::get('forward_end_date') != null) {
                        $time       = Carbon::now();
                        $start_date = Carbon::parse(Setting::get('forward_start_date'));
                        $end_date   = Carbon::parse(Setting::get('forward_end_date'));

                        if ($time->between($start_date, $end_date, true)) {
                            $forward_users_ids = json_decode(Setting::get('forward_users'));
                            $second_message    = '';

                            if ($message->message == null) {
                                $forwarded_message = "FORWARDED from $customer->name";
                                $second_message    = $message->media_url;
                            } else {
                                $forwarded_message = "FORWARDED from $customer->name - " . $message->message;
                            }
                        }
                    } else {
                        $forward_users_ids = json_decode(Setting::get('forward_users'));
                        $second_message    = '';

                        if ($message->message == null) {
                            $forwarded_message = "FORWARDED from $customer->name";
                            $second_message    = $message->media_url;
                        } else {
                            $forwarded_message = "FORWARDED from $customer->name - " . $message->message;
                        }
                    }
                }

                // Auto DND
                if (array_key_exists('message', $params) && strtoupper($params['message']) == 'DND') {
                    if ($customer = Customer::find($params['customer_id'])) {
                        $customer->do_not_disturb = 1;
                        $customer->save();
                        \Log::channel('customerDnd')->debug('(Customer ID ' . $customer->id . ' line ' . $customer->name . ' ' . $customer->number . ': Added To DND');

                        $dnd_params = [
                            'number'            => null,
                            'user_id'           => 6,
                            'approved'          => 1,
                            'status'            => 9,
                            'customer_id'       => $customer->id,
                            'quoted_message_id' => $quoted_message_id,
                            'message'           => AutoReply::where('type', 'auto-reply')->where('keyword', 'customer-dnd')->first()->reply,
                        ];
                        $auto_dnd_message = ChatMessage::create($dnd_params);
                    }
                }
                $data = [
                    'model'           => $model_type,
                    'model_id'        => $model_id,
                    'chat_message_id' => $params['unique_id'],
                    'message'         => $message,
                    'status'          => 'started',
                ];
                $chat_message_log_id = \App\ChatbotMessageLog::generateLog($data);
                // Auto Instruction
                if ($params['customer_id'] != '1000' && $params['customer_id'] != '976') {
                    if ($customer = Customer::find($params['customer_id'])) {
                        \App\ChatbotMessageLogResponse::StoreLogResponse([
                            'chatbot_message_log_id' => $chat_message_log_id,
                            'request'                => '',
                            'response'               => 'Price for customer send function started.',
                            'status'                 => 'success',
                        ]);
                        $params['chat_message_log_id'] = $chat_message_log_id;
                        \App\Helpers\MessageHelper::sendwatson($customer, $params['message'], true, $message, $params, false, 'customer');

                        WatsonChatJourney::updateOrCreate(['chat_message_id' => $quoted_message_id], ['reply_searched_in_watson' => 1]);
                        WatsonChatJourney::updateOrCreate(['chat_message_id' => $quoted_message_id], ['reply' => $params['message']]);

                        \App\ChatbotMessageLogResponse::StoreLogResponse([
                            'chatbot_message_log_id' => $chat_message_log_id,
                            'request'                => '',
                            'response'               => 'Price for customer send function ended.',
                            'status'                 => 'success',
                        ]);
                    } else {
                        \App\ChatbotMessageLogResponse::StoreLogResponse([
                            'chatbot_message_log_id' => $chat_message_log_id,
                            'request'                => '',
                            'response'               => 'Send watson function faield customer  (' . $params['customer_id'] . ')  not found.',
                            'status'                 => 'failed',
                        ]);
                    }
                }

                //Auto reply
                if (isset($customer->id) && $customer->id > 0) {
                    //
                }
            }
            // Moved to the bottom of this loop, since it overwrites the message
            $fromMe            = $chatapiMessage['fromMe'] ?? true;
            $params['message'] = $originalMessage;
            if (! $fromMe && $params['message'] && strpos($originalMessage, 'V-') === 0) {
                $msg        = $params['message'];
                $msg        = explode(' ', $msg);
                $vendorData = $msg[0];
                $vendorId   = trim(str_replace('V-', '', $vendorData));
                $message    = str_replace('V-' . $vendorId, '', $params['message']);

                $vendor = Vendor::find($vendorId);
                if (! $vendor) {
                    return response('success');
                }

                $params['vendor_id']   = $vendorId;
                $params['customer_id'] = null;
                $params['approved']    = 1;
                $params['message']     = $message;
                $params['status']      = 2;

                ChatMessage::create($params);
            }

            if (! $fromMe && strpos($originalMessage, '#ISSUE-') === 0) {
                $m                    = new ChatMessage();
                $message              = str_replace('#ISSUE-', '', $originalMessage);
                $m->issue_id          = explode(' ', $message)[0];
                $m->user_id           = isset($user->id) ? $user->id : null;
                $m->message           = $originalMessage;
                $m->quoted_message_id = $quoted_message_id;
                $m->save();
            }

            if (! $fromMe && strpos($originalMessage, '#DEVTASK-') === 0) {
                $m                    = new ChatMessage();
                $message              = str_replace('#DEVTASK-', '', $originalMessage);
                $m->developer_task_id = explode(' ', $message)[0];
                $m->user_id           = isset($user->id) ? $user->id : null;
                $m->message           = $originalMessage;
                $m->quoted_message_id = $quoted_message_id;
                $m->save();
            }
        }

        return Response::json('success', 200);
    }

    public function outgoingProcessed(Request $request)
    {
        $data = $request->json()->all();

        foreach ($data as $event) {
            $chat_message = ChatMessage::find($event->data->reference);

            if ($chat_message) {
                $chat_message->sent = 1;
                $chat_message->save();
            }
        }

        return response('success', 200);
    }

    public function getAllMessages(Request $request)
    {
        $params = [];
        $result = [];
        if ($request->customerId) {
            $column = 'customer_id';
            $value  = $request->customerId;
        } else {
            if ($request->supplierId) {
                $column = 'supplier_id';
                $value  = $request->supplierId;
            } else {
                if ($request->taskId) {
                    $column = 'task_id';
                    $value  = $request->taskId;
                } else {
                    if ($request->erpUser) {
                        $column = 'erp_user';
                        $value  = $request->erpUser;
                    } else {
                        if ($request->dubbizleId) {
                            $column = 'dubbizle_id';
                            $value  = $request->dubbizleId;
                        } else {
                            $column = 'customer_id';
                            $value  = $request->customerId;
                        }
                    }
                }
            }
        }

        $messages = DB::select('
                  SELECT chat_messages.id, chat_messages.customer_id, chat_messages.number, chat_messages.user_id, chat_messages.erp_user, chat_messages.assigned_to, chat_messages.approved, chat_messages.status, chat_messages.sent, chat_messages.error_status, chat_messages.resent, chat_messages.created_at, chat_messages.media_url, chat_messages.message,
                  media.filename,
                  mediable_id

                  FROM chat_messages

                  LEFT JOIN (
                    SELECT * FROM media

                    RIGHT JOIN
                    (SELECT * FROM mediables WHERE mediable_type LIKE "%ChatMessage%") as mediables
                    ON mediables.media_id = media.id
                  ) AS media

                  ON mediable_id = chat_messages.id

                  WHERE ' . $column . ' = ' . $value . ' AND status != 7
                  ORDER BY chat_messages.created_at DESC
      ');

        if (Setting::get('show_automated_messages') == 0) {
            $messages = $messages->where('status', '!=', 9);
        }

        if ($request->erpUser) {
            $messages = $messages->whereNull('task_id');
        }

        // IS IT NECESSARY ?
        if ($request->get('elapse')) {
            $elapse = (int) $request->get('elapse');
            $date   = new \DateTime;
            $date->modify(sprintf('-%s seconds', $elapse));
        }

        foreach ($messages->latest()->get() as $message) {
            $messageParams = [
                'id'           => $message->id,
                'number'       => $message->number,
                'assigned_to'  => $message->assigned_to,
                'created_at'   => Carbon::parse($message->created_at)->format('Y-m-d H:i:s'),
                'approved'     => $message->approved,
                'status'       => $message->status,
                'user_id'      => $message->user_id,
                'erp_user'     => $message->erp_user,
                'sent'         => $message->sent,
                'resent'       => $message->resent,
                'error_status' => $message->error_status,
            ];

            if ($message->media_url) {
                $messageParams['media_url']    = $message->media_url;
                $headers                       = get_headers($message->media_url, 1);
                $messageParams['content_type'] = $headers['Content-Type'][1];
            }

            if ($message->message) {
                $messageParams['message'] = $message->message;
            }

            if ($message->hasMedia(config('constants.media_tags'))) {
                $images_array = [];

                foreach ($message->getMedia(config('constants.media_tags')) as $key => $image) {
                    $temp_image = [
                        'key'           => $image->getKey(),
                        'image'         => getMediaUrl($image),
                        'product_id'    => '',
                        'special_price' => '',
                        'size'          => '',
                    ];

                    $image_key     = $image->getKey();
                    $mediable_type = 'Product';

                    $product_image = Product::with('Media')
                        ->whereRaw("products.id IN (SELECT mediables.mediable_id FROM mediables WHERE mediables.media_id = $image_key AND mediables.mediable_type LIKE '%$mediable_type%')")
                        ->select(['id', 'price_inr_special', 'supplier', 'size', 'lmeasurement', 'hmeasurement', 'dmeasurement'])->first();

                    if ($product_image) {
                        $temp_image['product_id']    = $product_image->id;
                        $temp_image['special_price'] = $product_image->price_inr_special;

                        $string = $product_image->supplier;
                        $expr   = '/(?<=\s|^)[a-z]/i';
                        preg_match_all($expr, $string, $matches);
                        $supplier_initials               = implode('', $matches[0]);
                        $temp_image['supplier_initials'] = strtoupper($supplier_initials);

                        if ($product_image->size != null) {
                            $temp_image['size'] = $product_image->size;
                        } else {
                            $temp_image['size'] = (string) $product_image->lmeasurement . ', ' . (string) $product_image->hmeasurement . ', ' . (string) $product_image->dmeasurement;
                        }
                    }

                    array_push($images_array, $temp_image);
                }

                $messageParams['images'] = $images_array;
            }

            $result[] = array_merge($params, $messageParams);
        }

        $result      = array_values(collect($result)->sortBy('created_at')->reverse()->toArray());
        $currentPage = LengthAwarePaginator::resolveCurrentPage();
        $perPage     = 10;

        if ($request->page) {
            $currentItems = array_slice($result, $perPage * ($currentPage - 1), $perPage);
        } else {
            $currentItems = array_reverse(array_slice($result, $perPage * ($currentPage - 1), $perPage));
            $result       = array_reverse($result);
        }

        $result = new LengthAwarePaginator($currentItems, count($result), $perPage, $currentPage, [
            'path' => LengthAwarePaginator::resolveCurrentPath(),
        ]);

        return response()->json($result);
    }

    public function logchatmessage($log_case_id, $task_id, $message, $log_msg)
    {
        $log              = new LogChatMessage();
        $log->log_case_id = $log_case_id;
        $log->task_id     = $task_id;
        $log->message     = $message;
        $log->log_msg     = $log_msg;
        $log->save();
    }

    /**
     * Send message
     *
     *
     * @param mixed $context
     * @param mixed $ajaxNeeded
     *
     * @return \Illuminate\Http\Response
     *
     * @throws \Plank\MediableExceptions\MediaUrlException
     */
    public function sendMessage(Request $request, $context, $ajaxNeeded = false)
    {
        $this->validate($request, [
            'customer_id'             => 'sometimes|nullable|numeric',
            'supplier_id'             => 'sometimes|nullable|numeric',
            'erp_user'                => 'sometimes|nullable|numeric',
            'status'                  => 'required|numeric',
            'assigned_to'             => 'sometimes|nullable',
            'lawyer_id'               => 'sometimes|nullable|numeric',
            'case_id'                 => 'sometimes|nullable|numeric',
            'blogger_id'              => 'sometimes|nullable|numeric',
            'document_id'             => 'sometimes|nullable|numeric',
            'quicksell_id'            => 'sometimes|nullable|numeric',
            'old_id'                  => 'sometimes|nullable|numeric',
            'site_development_id'     => 'sometimes|nullable|numeric',
            'social_strategy_id'      => 'sometimes|nullable|numeric',
            'store_social_content_id' => 'sometimes|nullable|numeric',
            'payment_receipt_id'      => 'sometimes|nullable|numeric',
        ]);

        $data    = $request->except('_token');
        $chat_id = 0;
        if (isset($data['chat_id'])) {
            $chat_id = $data['chat_id'];
        }

        // set if there is no queue defaut for all pages
        if (! isset($data['is_queue'])) {
            $data['is_queue'] = 0;
        }
        $data['user_id'] = ((int) $request->get('user_id', 0) > 0) ? (int) $request->get('user_id', 0) : Auth::id();
        $data['number']  = $request->get('number');

        $loggedUser = $request->user();

        if ($request->add_autocomplete == 'true') {
            $exist = AutoCompleteMessage::where('message', $request->message)->exists();
            if (! $exist) {
                AutoCompleteMessage::create([
                    'message' => $request->message,
                ]);
            }
        }
        if ($context == 'email') {
            $lastMessage        = ChatMessage::find($request->chat_id);
            $data['from_email'] = $lastMessage->from_email;
            $data['to_email']   = $lastMessage->to_email;

            $data['is_email']     = 1;
            $data['email_id']     = $request->email_id;
            $data['message_type'] = 'email';
            unset($data['user_id']);
            $module_id = $request->email_id;
        } elseif ($context == 'customer') {
            $data['customer_id'] = $request->customer_id;
            $module_id           = $request->customer_id;
            //update if the customer message is going to send then update all old message to read
            \App\ChatMessage::updatedUnreadMessage($request->customer_id, $data['status']);
            $this->logchatmessage('#1', $request->task_id, $request->message, 'if the customer message is going to send');
            // update message for chatbot request->customer_id
            if (! empty($data['status']) && ! in_array($data['status'], \App\ChatMessage::AUTO_REPLY_CHAT)) {
                \DB::table('chat_messages as c')->join('chatbot_replies as cr', 'cr.replied_chat_id', '=', 'c.id')->where('c.customer_id', $request->customer_id)->where('cr.is_read', 0)->update(['cr.is_read' => 1]);
                \DB::table('chat_messages as c')->join('chatbot_replies as cr', 'cr.chat_id', '=', 'c.id')->where('c.customer_id', $request->customer_id)->where('cr.is_read', 0)->update(['cr.is_read' => 1]);
            }
        } elseif ($context == 'purchase') {
            $data['purchase_id'] = $request->purchase_id;
            $module_id           = $request->purchase_id;
            $this->logchatmessage('#2', $request->task_id, $request->message, 'if the purchase message is going to send');
        } elseif ($context == 'supplier') {
            $data['supplier_id'] = $request->supplier_id;
            $module_id           = $request->supplier_id;
            $this->logchatmessage('#3', $request->task_id, $request->message, 'if the supplier message is going to send');
        } elseif ($context == 'SOP-Data') {
            $data['sop_user_id'] = $request->sop_user_id;
            $module_id           = $request->sop_user_id;
            $this->logchatmessage('#4', $request->task_id, $request->message, 'if the supplier message is going to send');
        } elseif ($context == 'chatbot') { //Purpose : Add Chatbotreplay - DEVTASK-18280
            $data['customer_id'] = $request->customer_id;
            $module_id           = $request->customer_id;
            \App\ChatMessage::updatedUnreadMessage($request->customer_id, $data['status']);
            $this->logchatmessage('#5', $request->task_id, $request->message, 'if the chatbot message is going to send');
        } elseif ($context == 'user-feedback') {
            $data['user_feedback_id']          = $request->user_id;
            $data['user_feedback_category_id'] = $request->feedback_cat_id;
            $data['user_feedback_status']      = $request->feedback_status_id;
            $Admin_users                       = User::get();
            foreach ($Admin_users as $u) {
                if ($u->isAdmin()) {
                    $u_id = $u->id;
                    break;
                }
            }
            if (Auth::user()->isAdmin()) {
                $u_id = $request->user_id;
            }
            $data['user_id']         = $u_id;
            $data['sent_to_user_id'] = $u_id;
            $data['send_by']         = Auth::user()->isAdmin() ? Auth::id() : null;
            $module_id               = $u_id;
            $this->logchatmessage('#6', $request->task_id, $request->message, 'if the user-feedback message is going to send');
        } elseif ($context == 'user-feedback-hrTicket') {
            $data['user_feedback_id']          = $request->user_id;
            $data['user_feedback_category_id'] = $request->feedback_cat_id;
            $data['user_feedback_status']      = $request->feedback_status_id;
            $Admin_users                       = User::get();
            foreach ($Admin_users as $u) {
                if ($u->isAdmin()) {
                    $u_id = $u->id;
                    break;
                }
            }
            if (Auth::user()->isAdmin()) {
                $u_id = $request->user_id;
            }
            $data['user_id']         = $u_id;
            $data['sent_to_user_id'] = $u_id;
            $data['send_by']         = Auth::user()->isAdmin() ? Auth::id() : null;
            $module_id               = $u_id;
            $this->logchatmessage('#20', $request->task_id, $request->message, 'if the user-feedback HR Ticket message is going to send');
        } elseif ($context == 'hubstuff') {
            $data['hubstuff_activity_user_id'] = $request->hubstuff_id;
            $module_id                         = $request->hubstuff_id;
            $this->logchatmessage('#7', $request->task_id, $request->message, 'if the hubstuff message is going to send');
        } elseif ($context == 'timedoctor') {
            $data['time_doctor_activity_user_id'] = $request->time_doctor_id;
            $module_id                            = $request->time_doctor_id;
            $this->logchatmessage('#7', $request->task_id, $request->message, 'if the time doctor message is going to send');
        } else {
            if ($context == 'vendor') {
                $data['vendor_id'] = $request->vendor_id;
                $module_id         = $request->vendor_id;
                if ($request->get('is_vendor_user') == 'yes') {
                    $user              = User::find($request->get('vendor_id'));
                    $vendor            = Vendor::where('phone', $user->phone)->first();
                    $data['vendor_id'] = $vendor->id;
                    $module_id         = $vendor->id;
                }
                if ($request->get('message')) {
                    $data['message'] = $request->get('message');
                }

                // update message for chatbot request->vendor_id
                if (! empty($data['status']) && ! in_array($data['status'], \App\ChatMessage::AUTO_REPLY_CHAT)) {
                    \DB::table('chat_messages as c')->join('chatbot_replies as cr', 'cr.replied_chat_id', '=', 'c.id')->where('c.vendor_id', $request->vendor_id)->where('cr.is_read', 0)->update(['cr.is_read' => 1]);
                    \DB::table('chat_messages as c')->join('chatbot_replies as cr', 'cr.chat_id', '=', 'c.id')->where('c.vendor_id', $request->vendor_id)->where('cr.is_read', 0)->update(['cr.is_read' => 1]);
                }
                $this->logchatmessage('#8', $request->task_id, $request->message, 'update message for chatbot request');
            } elseif ($context == 'charity') {
                $data['charity_id'] = $request->vendor_id;
                $charity            = CustomerCharity::where('id', $request->vendor_id)->first();
                $module_id          = $request->vendor_id;
                if ($request->get('message')) {
                    $data['message'] = $request->get('message');
                }

                // update message for chatbot request->vendor_id
                if (! empty($data['status']) && ! in_array($data['status'], \App\ChatMessage::AUTO_REPLY_CHAT)) {
                    \DB::table('chat_messages as c')->join('chatbot_replies as cr', 'cr.replied_chat_id', '=', 'c.id')->where('c.charity_id', $request->charity_id)->where('cr.is_read', 0)->update(['cr.is_read' => 1]);
                    \DB::table('chat_messages as c')->join('chatbot_replies as cr', 'cr.chat_id', '=', 'c.id')->where('c.charity_id', $request->charity_id)->where('cr.is_read', 0)->update(['cr.is_read' => 1]);
                }
                $this->logchatmessage('#9', $request->task_id, $request->message, 'update message for charity request');
                unset($data['vendor_id']);
            } elseif ($context == 'uicheckMessage') {
                $this->logchatmessage('#21', $request->task_id, $request->message, 'If context UI check');
                $message               = $request->get('message');
                $params['message']     = $message;
                $params['message_en']  = $request->get('message');
                $params['ticket_id']   = $request->ticket_id;
                $params['user_id']     = $request->object_id;
                $params['ui_check_id'] = $request->task_id;
                $params['approved']    = 1;
                $params['status']      = 2;
                $chat_message          = ChatMessage::create($params);

                return response()->json(['message' => $chat_message]);
            } elseif ($context == 'task') {
                if ($request->task_id == 'undefined') {
                    $this->logchatmessage('#10', null, $request->message, 'If context conndition task is exit');
                } else {
                    $this->logchatmessage('#10', $request->task_id, $request->message, 'If context conndition task is exit');
                }
                $data['task_id']  = $request->task_id;
                $data['is_audio'] = $request->get('is_audio', 0);
                $task             = Task::find($request->task_id);

                if ($task->is_statutory != 1) {
                    $data['message'] = '#' . $data['task_id'] . '. ' . $task->task_subject . '. ' . $data['message'];
                } else {
                    $data['message'] = $task->task_subject . '. ' . $data['message'];
                }

                if ($request->send_message_recepients) {
                    $recepients = explode(',', $request->send_message_recepients);
                    foreach ($recepients as $recepient) {
                        if ($recepient == 'assign_by') {
                            $adm = User::find($task->assign_from);
                            if ($adm) {
                                WebNotificationController::sendBulkNotification($adm->id, 'Task & Activity', $data['message']);
                            }
                        } elseif ($recepient == 'assigned_to') {
                            foreach ($task->users as $key => $user) {
                                WebNotificationController::sendBulkNotification($user->id, 'Task & Activity', $data['message']);
                            }
                        } elseif ($recepient == 'master_user_id') {
                            if (! empty($task->master_user_id)) {
                                $userMaster = User::find($task->master_user_id);
                                if ($userMaster) {
                                    WebNotificationController::sendBulkNotification($userMaster->id, 'Task & Activity', $data['message']);
                                }
                            }
                        } elseif ($recepient == 'second_master_user_id') {
                            if (! empty($task->second_master_user_id)) {
                                $userMaster = User::find($task->second_master_user_id);
                                if ($userMaster) {
                                    //$this->sendWithThirdApi($userMaster->phone, $userMaster->whatsapp_number, $data['message']);
                                    WebNotificationController::sendBulkNotification($userMaster->id, 'Task & Activity', $data['message']);
                                }
                            }
                        } elseif ($recepient == 'contacts') {
                            if (count($task->contacts) > 0) {
                                foreach ($task->contacts as $key => $contact) {
                                    if ($key == 0) {
                                        $data['contact_id'] = $task->assign_to;
                                    } else {
                                        //
                                    }
                                }
                            }
                        }
                    }
                } else {
                    if (count($task->users) > 0) {
                        if ($task->assign_from == Auth::id()) {
                            foreach ($task->users as $key => $user) {
                                if ($key == 0) {
                                    $data['erp_user'] = $user->id;
                                } else {
                                    WebNotificationController::sendBulkNotification($user->id, 'Task & Activity', $data['message']);
                                }
                            }
                        } elseif ($task->master_user_id == Auth::id()) {
                            foreach ($task->users as $key => $user) {
                                if ($key == 0) {
                                    $data['erp_user'] = $user->id;
                                } else {
                                    WebNotificationController::sendBulkNotification($user->id, 'Task & Activity', $data['message']);
                                }
                            }
                            $adm = User::find($task->assign_from);
                            if ($adm) {
                                WebNotificationController::sendBulkNotification($adm->id, 'Task & Activity', $data['message']);
                            }
                        } else {
                            if (! $task->users->contains(Auth::id())) {
                                $data['erp_user'] = $task->assign_from;

                                foreach ($task->users as $key => $user) {
                                    WebNotificationController::sendBulkNotification($user->id, 'Task & Activity', $data['message']);
                                }
                            } else {
                                foreach ($task->users as $key => $user) {
                                    if ($key == 0) {
                                        $data['erp_user'] = $task->assign_from;
                                    } else {
                                        if ($user->id != Auth::id()) {
                                            WebNotificationController::sendBulkNotification($user->id, 'Task & Activity', $data['message']);
                                        }
                                    }
                                }
                            }
                        }
                    }

                    if (count($task->contacts) > 0) {
                        foreach ($task->contacts as $key => $contact) {
                            if ($key == 0) {
                                $data['contact_id'] = $task->assign_to;
                            } else {
                                //
                            }
                        }
                    }

                    // this will send message to the lead developer
                    if (! empty($task->master_user_id)) {
                        $userMaster = User::find($task->master_user_id);
                        if ($userMaster) {
                            $extraUser             = $data;
                            $extraUser['erp_user'] = $task->master_user_id;
                            $extraUser['user_id']  = $task->master_user_id;
                        }
                    }
                }
                $params['approved'] = 1;
                $params['status']   = 2;
                $chat_message       = ChatMessage::create($data);
                $this->logchatmessage('#11', $request->task_id, $request->message, 'New chat message is created');
                $module_id = $request->task_id;

                /** Sent To ChatbotMessage */
                $loggedUser = auth()->user();
                $roles      = ($loggedUser) ? $loggedUser->roles->pluck('name')->toArray() : [];

                if (! in_array('Admin', $roles)) {
                    \App\ChatbotReply::create([
                        'question' => '#' . $task->id . ' => ' . $request->message,
                        'reply'    => json_encode([
                            'context'  => 'task',
                            'issue_id' => $task->id,
                            'from'     => ($loggedUser) ? $loggedUser->id : 'cron',
                        ]),
                        'replied_chat_id' => $chat_message->id,
                        'reply_from'      => 'database',
                    ]);
                }

                // update message for chatbot request->vendor_id
                if (! empty($data['status']) && ! in_array($data['status'], \App\ChatMessage::AUTO_REPLY_CHAT)) {
                    \DB::table('chat_messages as c')->join('chatbot_replies as cr', 'cr.replied_chat_id', '=', 'c.id')->where('c.task_id', $task->id)->where('cr.is_read', 0)->update(['cr.is_read' => 1]);
                    \DB::table('chat_messages as c')->join('chatbot_replies as cr', 'cr.chat_id', '=', 'c.id')->where('c.task_id', $task->id)->where('cr.is_read', 0)->update(['cr.is_read' => 1]);
                }

                $message_ = '[ ' . @$loggedUser->name . ' ] - #' . $task->id . ' - ' . $task->task_subject . "\n\n" . $request->message;

                MessageHelper::sendEmailOrWebhookNotification($task->users->pluck('id')->toArray(), $message_);
            } elseif ($context == 'learning') {
                $this->logchatmessage('#12', $request->task_id, $request->message, 'If context learning is exit');
                $learning = \App\Learning::find($request->issue_id);
                if ($data['user_id'] == $learning->learning_vendor) {
                    $userId = $data['user_id'];
                } else {
                    $userId = $learning->learning_vendor;
                }

                $prefix = null;
                if ($learning && $learning->learningUser) {
                    $prefix = '#' . $learning->id . ' ' . $learning->learningUser->name . ' : ' . $learning->learning_subject . ' =>';
                }

                $params['message']         = $prefix . $request->get('message');
                $params['erp_user']        = $userId;
                $params['sent_to_user_id'] = $userId;
                $params['learning_id']     = $request->issue_id; //Purpose - Add learning_id - DEVTASK-4020
                $params['user_id']         = $userId;
                $params['approved']        = 1;
                $params['status']          = 2;
                $number                    = User::find($userId);
                if (! $number) {
                    return response()->json(['message' => null]);
                }
                $whatsapp = $number->whatsapp_number;
                $number   = $number->phone;

                $chat_message = ChatMessage::create($params);

                return response()->json(['message' => $chat_message]);
            } elseif ($context == 'ticket') {
                $this->logchatmessage('#13', $request->task_id, $request->message, 'If context ticket is exit');
                $send_ticket_options = [];
                if (isset($request->send_ticket_options)) {
                    $send_ticket_options = explode(',', $request->send_ticket_options);
                }
                $data['ticket_id'] = $request->ticket_id;
                $module_id         = $request->ticket_id;
                $ticket            = \App\Tickets::find($request->ticket_id);
                $message           = $request->get('message');
                if ($ticket) {
                    if ($ticket->lang_code != '' && $ticket->lang_code != 'en') {
                        $message = TranslationHelper::translate('en', $ticket->lang_code, $message);
                    }
                }
                $params['message']     = $message;
                $params['message_en']  = $request->get('message');
                $params['ticket_id']   = $request->ticket_id;
                $params['customer_id'] = $ticket->customer_id;
                $params['approved']    = 1;
                $params['status']      = 2;
                $params['user_id']     = optional(auth()->user())->id;
                $chat_message          = ChatMessage::create($params);

                // check if ticket has customer ?
                $whatsappNo = null;
                if ($ticket->user) {
                    $whatsappNo = $ticket->user->whatsapp_number;
                } elseif ($ticket->customer) {
                    $whatsappNo = $ticket->customer->whatsapp_number;
                }
                foreach ($send_ticket_options as $send_ticket_option) {
                    if ($send_ticket_option == 'whatsapp') {
                        //
                    } elseif ($send_ticket_option == 'send_to_tickets') {
                        $chat_message->send_to_tickets = 1;
                        $chat_message->save();
                    }
                }
                \Log::info('Start API CALL /rest/V1/ticket-counter/add');
                if ($ticket) {
                    $ticket_id        = $ticket->ticket_id;
                    $email            = $ticket->email;
                    $source_of_ticket = $ticket->source_of_ticket;
                    $storeWebsite     = \App\StoreWebsite::where('website', $source_of_ticket)->first();
                    if ($storeWebsite) {
                        $storeWebsiteCode = $storeWebsite->storeCode;
                        $magento_url      = $storeWebsite->magento_url;
                        $api_token        = $storeWebsite->api_token;
                        if (! empty($magento_url) && ! empty($storeWebsiteCode)) {
                            $startTime = date('Y-m-d H:i:s', LARAVEL_START);
                            $curl      = curl_init();
                            $url       = trim($magento_url, '/') . "/{$storeWebsiteCode->code}/rest/V1/ticket-counter/add";
                            curl_setopt_array($curl, [
                                CURLOPT_URL            => trim($magento_url, '/') . "/{$storeWebsiteCode->code}/rest/V1/ticket-counter/add",
                                CURLOPT_RETURNTRANSFER => true,
                                CURLOPT_ENCODING       => '',
                                CURLOPT_MAXREDIRS      => 10,
                                CURLOPT_TIMEOUT        => 0,
                                CURLOPT_FOLLOWLOCATION => true,
                                CURLOPT_HTTP_VERSION   => CURL_HTTP_VERSION_1_1,
                                CURLOPT_CUSTOMREQUEST  => 'PUT',
                                CURLOPT_POSTFIELDS     => '{
                                "ticketData":
                                {
                                    "ticket_id": "' . $ticket_id . '",
                                    "email": "' . $email . '"
                                }
                                }
                                ',
                                CURLOPT_HTTPHEADER => [
                                    'Content-Type: application/json',
                                    'Authorization: Bearer ' . $api_token,
                                ],
                            ]);

                            $response = curl_exec($curl);
                            $httpcode = curl_getinfo($curl, CURLINFO_HTTP_CODE);
                            \Log::info('API RESPONSE: ' . $response);
                            curl_close($curl);

                            LogRequest::log($startTime, $url, 'PUT', '{
                                "ticketData":
                                {
                                    "ticket_id": "' . $ticket_id . '",
                                    "email": "' . $email . '"
                                }
                                }', json_decode($response), $httpcode, \App\Http\Controllers\WhatsAppController::class, 'sendMessage');
                        } else {
                            \Log::info('Magento URL and Store Website code is not found:');
                        }
                    } else {
                        \Log::info('Store Website not found: ' . $source_of_ticket);
                    }
                } else {
                    \Log::info('Ticket Data Not Found ticket_id: ' . $request->ticket_id);
                }
                \Log::info('END API CALL /rest/V1/ticket-counter/add');

                return response()->json(['message' => $chat_message]);
            } else {
                if ($context == 'priority') {
                    $this->logchatmessage('#14', $request->task_id, $request->message, 'If context priority is exit');
                    $params             = [];
                    $params['message']  = $request->get('message', '');
                    $params['erp_user'] = $request->get('user_id', 0);
                    $params['user_id']  = $request->get('user_id', 0);
                    $params['approved'] = 1;
                    $params['status']   = 2;

                    $number = User::find($request->get('user_id', 0));

                    if (! $number) {
                        return response()->json(['message' => null]);
                    }
                    $whatsapp_number = $number->whatsapp_number;
                    $number          = $number->phone;

                    $chat_message = ChatMessage::create($params);

                    return response()->json(['message' => $chat_message]);
                } elseif ($context == 'activity') {
                    $this->logchatmessage('#15', $request->task_id, $request->message, 'If context activity is exit');
                    $data['erp_user'] = $request->user_id;
                    $module_id        = $request->user_id;
                    $user             = User::find($request->user_id);
                    if ($user && $user->phone) {
                        //
                    }
                } elseif ($context == 'overdue') {
                    $this->logchatmessage('#16', $request->task_id, $request->message, 'If context overdue is exit');
                    $data['erp_user'] = $request->user_id;
                    $user             = User::find($request->user_id);
                } elseif ($context == 'user') {
                    $this->logchatmessage('#17', $request->task_id, $request->message, 'If context user is exit');
                    $data['erp_user'] = $request->user_id;
                    $module_id        = $request->user_id;
                    $user             = User::find($request->user_id);
                } elseif ($context == 'dubbizle') {
                    $this->logchatmessage('#18', $request->task_id, $request->message, 'If context dubbizle is exit');
                    $data['dubbizle_id'] = $request->dubbizle_id;
                    $module_id           = $request->dubbizle_id;
                } elseif ($context == 'time_approval') {
                    $this->logchatmessage('#19', $request->task_id, $request->message, 'If context dubbizle is exit');
                    $summary = HubstaffActivitySummary::find($request->summery_id);
                    if ($summary) {
                        $userId = $summary->user_id;
                        $number = User::find($userId);
                        if (! $number) {
                            return response()->json(['message' => null]);
                        }
                        $whatsapp = $number->whatsapp_number;
                        $number   = $number->phone;

                        $params['erp_user']                     = $userId;
                        $params['user_id']                      = $userId;
                        $params['sent_to_user_id']              = $userId;
                        $params['approved']                     = 1;
                        $params['status']                       = 2;
                        $params['hubstaff_activity_summary_id'] = $request->summery_id;
                        $params['message']                      = $request->message;
                        $chat_message                           = ChatMessage::create($params);

                        return response()->json(['message' => $chat_message]);
                    }

                    return response()->json(['message' => null]);
                } elseif ($context == 'issue') {
                    $sendTo             = $request->get('sendTo', 'to_developer');
                    $params['issue_id'] = $request->get('issue_id');
                    $params['is_audio'] = $request->get('is_audio', 0);
                    $issue              = DeveloperTask::find($request->get('issue_id'));

                    $userId = $issue->assigned_to;
                    if ($sendTo == 'to_master') {
                        if ($issue->master_user_id) {
                            $userId = $issue->master_user_id;
                        }
                    }

                    if ($sendTo == 'to_team_lead') {
                        if ($issue->team_lead_id) {
                            $userId = $issue->team_lead_id;
                        }
                    }

                    if ($sendTo == 'to_tester') {
                        if ($issue->tester_id) {
                            $userId = $issue->tester_id;
                        }
                    }
                    $admin = 0;
                    if (! Auth::user() || ! Auth::user()->isAdmin()) {
                        $admin = $issue->created_by;
                    }
                    $params['erp_user']        = $userId;
                    $params['user_id']         = $data['user_id'];
                    $params['sent_to_user_id'] = $userId;
                    $params['approved']        = 1;
                    $params['status']          = 2;

                    $number = User::find($userId);
                    if (! $number) {
                        return response()->json(['message' => null]);
                    }
                    $whatsapp = $number->whatsapp_number;
                    $number   = $number->phone;
                    if ($request->type == 1) {
                        foreach ($issue->getMedia(config('constants.media_tags')) as $image) {
                            $params['message']   = '#TASK-' . $issue->id . '-' . $issue->subject . '=>' . getMediaUrl($image);
                            $params['media_url'] = getMediaUrl($image);

                            if (Auth::user()->id != $userId) {
                                $chat_message = ChatMessage::create($params);
                            }
                            if ($admin) {
                                $creator = User::find($admin);
                                if ($creator) {
                                    $num                       = $creator->phone;
                                    $whatsapp                  = $creator->whatsapp_number;
                                    $params['erp_user']        = $admin;
                                    $params['user_id']         = $data['user_id'];
                                    $params['sent_to_user_id'] = $admin;
                                    $params['approved']        = 1;
                                    $params['status']          = 2;
                                    $chat_message              = ChatMessage::create($params);
                                }
                            }
                        }
                    } elseif ($request->type == 2) {
                        $issue = Issue::find($request->get('issue_id'));
                        if ($request->hasfile('images')) {
                            foreach ($request->file('images') as $image) {
                                $media = MediaUploader::fromSource($image)->upload();
                                $issue->attachMedia($media, config('constants.media_tags'));
                                $params['message']   = '#ISSUE-' . $issue->id . '-' . $issue->subject . '=>' . getMediaUrl($media);
                                $params['media_url'] = getMediaUrl($media);
                                if (Auth::user()->id != $userId) {
                                    $chat_message = ChatMessage::create($params);
                                }

                                if ($admin) {
                                    $creator = User::find($admin);
                                    if ($creator) {
                                        $num                       = $creator->phone;
                                        $whatsapp                  = $creator->whatsapp_number;
                                        $params['erp_user']        = $admin;
                                        $params['user_id']         = $data['user_id'];
                                        $params['sent_to_user_id'] = $admin;
                                        $params['approved']        = 1;
                                        $params['status']          = 2;
                                        $chat_message              = ChatMessage::create($params);
                                    }
                                }
                            }
                        }
                    } else {
                        $params['developer_task_id'] = $request->get('issue_id');
                        $prefix                      = ($issue->task_type_id == 1) ? '#DEVTASK-' : '#ISSUE-';
                        $params['message']           = $prefix . $issue->id . '-' . $issue->subject . '=>' . $request->get('message');
                        if (Auth::user() && Auth::user()->id != $userId) {
                            $chat_message = ChatMessage::create($params);
                        }
                        if ($admin) {
                            $creator = User::find($admin);
                            if ($creator) {
                                $num                       = $creator->phone;
                                $whatsapp                  = $creator->whatsapp_number;
                                $params['erp_user']        = $admin;
                                $params['user_id']         = $data['user_id'];
                                $params['sent_to_user_id'] = $admin;
                                $params['approved']        = 1;
                                $params['status']          = 2;
                                $chat_message              = ChatMessage::create($params);
                            }
                        }

                        if ($issue->hasMedia(config('constants.media_tags'))) {
                            foreach ($issue->getMedia(config('constants.media_tags')) as $image) {
                                $params['media_url'] = getMediaUrl($image);
                                if (Auth::user()->id != $userId) {
                                    $chat_message = ChatMessage::create($params);
                                }
                                if ($admin) {
                                    $creator = User::find($admin);
                                    if ($creator) {
                                        $num                       = $creator->phone;
                                        $whatsapp                  = $creator->whatsapp_number;
                                        $params['erp_user']        = $admin;
                                        $params['user_id']         = $data['user_id'];
                                        $params['sent_to_user_id'] = $admin;
                                        $params['approved']        = 1;
                                        $params['status']          = 2;
                                        $chat_message              = ChatMessage::create($params);
                                    }
                                }
                            }
                        }
                    }

                    ChatMessagesQuickData::updateOrCreate([
                        'model'    => \App\DeveloperTask::class,
                        'model_id' => $params['issue_id'],
                    ], [
                        'last_communicated_message'    => @$params['message'],
                        'last_communicated_message_at' => Carbon::now(),
                        'last_communicated_message_id' => isset($chat_message) ? $chat_message->id : null,
                    ]);

                    // update message for chatbot request->vendor_id
                    if (! empty($data['status']) && ! in_array($data['status'], \App\ChatMessage::AUTO_REPLY_CHAT)) {
                        \DB::table('chat_messages as c')->join('chatbot_replies as cr', 'cr.replied_chat_id', '=', 'c.id')->where('c.developer_task_id', $issue->id)->where('cr.is_read', 0)->update(['cr.is_read' => 1]);
                        \DB::table('chat_messages as c')->join('chatbot_replies as cr', 'cr.chat_id', '=', 'c.id')->where('c.developer_task_id', $issue->id)->where('cr.is_read', 0)->update(['cr.is_read' => 1]);
                    }

                    if ($sendTo == 'to_master') {
                        /* Send to chatbot/messages */

                        \App\ChatbotReply::create([
                            'question' => '#DEVTASK-' . $issue->id . ' => ' . $request->message,
                            'reply'    => json_encode([
                                'context'  => 'issue',
                                'issue_id' => $issue->id,
                                'from'     => $request->user()->id,
                            ]),
                            'replied_chat_id' => isset($chat_message) ? $chat_message->id : '',
                            'reply_from'      => 'database',
                        ]);
                    }

                    if ($request->chat_reply_message_id) {
                        $messageReply = \App\ChatbotReply::find($request->chat_reply_message_id);

                        if ($messageReply) {
                            $prefix = ($issue->task_type_id == 1) ? '#DEVTASK-' : '#ISSUE-';

                            $messageReply->chat_id = $chat_message->id;

                            $messageReply->save();
                        }
                    }

                    //START - Purpose : Email notification - DEVTASK-4359
                    $user = \App\User::find($issue->assigned_to);

                    $message_ = ($issue->task_type_id == 1 ? '[ ' . $user->name . ' ] - #DEVTASK-' : '#ISSUE-') . $issue->id . ' - ' . $issue->subject . "\n\n" . $request->message;

                    MessageHelper::sendEmailOrWebhookNotification([$issue->assigned_to, $issue->team_lead_id, $issue->tester_id], $message_);
                    //END - DEVTASK-4359
                    WebNotificationController::sendWebNotification2($request->get('sendTo'), $params['issue_id'], $prefix . $issue->id . '-' . $issue->subject, $request->get('message'));

                    return response()->json(['message' => isset($chat_message) ? $chat_message : '']);
                } elseif ($context == 'auto_task') {
                    $params['issue_id'] = $request->get('issue_id');
                    $issue              = DeveloperTask::find($request->get('issue_id'));
                    $userId             = $issue->assigned_to;

                    $admin = $issue->created_by;

                    $params['erp_user']        = $userId;
                    $params['user_id']         = $data['user_id'];
                    $params['sent_to_user_id'] = $userId;
                    $params['approved']        = 1;
                    $params['status']          = 2;

                    $number = User::find($userId);
                    if (! $number) {
                        return response()->json(['message' => null]);
                    }
                    $whatsapp                    = $number->whatsapp_number;
                    $number                      = $number->phone;
                    $params['developer_task_id'] = $request->get('issue_id');
                    $prefix                      = ($issue->task_type_id == 1) ? '#DEVTASK-' : '#ISSUE-';
                    $params['message']           = $prefix . $issue->id . '-' . $issue->subject . '=>' . $request->get('message');
                    $chat_message                = ChatMessage::create($params);

                    if ($admin) {
                        $creator = User::find($admin);
                        if ($creator) {
                            $num                       = $creator->phone;
                            $whatsapp                  = $creator->whatsapp_number;
                            $params['erp_user']        = $admin;
                            $params['user_id']         = $data['user_id'];
                            $params['sent_to_user_id'] = $admin;
                            $params['approved']        = 1;
                            $params['status']          = 2;
                            $chat_message              = ChatMessage::create($params);
                        }
                    }
                    ChatMessagesQuickData::updateOrCreate([
                        'model'    => \App\DeveloperTask::class,
                        'model_id' => $params['issue_id'],
                    ], [
                        'last_communicated_message'    => @$params['message'],
                        'last_communicated_message_at' => Carbon::now(),
                        'last_communicated_message_id' => ($chat_message) ? $chat_message->id : null,
                    ]);

                    $message_ = ($issue->task_type_id == 1 ? '[ ' . $loggedUser->name . ' ]- #DEVTASK-' : '#ISSUE-') . $issue->id . ' - ' . $issue->subject . "\n\n" . $request->message;

                    $this->sendEmailOrWebhookNotification([$userId], $message_);

                    return response()->json(['message' => $chat_message]);
                } elseif ($context == 'document') {
                    //Sending Documents To User / Vendor / Contacts
                    $data['document_id'] = $request->document_id;
                    $module_id           = $request->document_id;

                    //Getting User For Sending Documents
                    if ($request->user_type == 1) {
                        $document     = Document::findOrFail($module_id);
                        $document_url = $document->getDocumentPathById($document->id);

                        foreach ($request->users as $key) {
                            $user = User::findOrFail($key);

                            // User ID For Chat Message
                            $data['user_id'] = $user->id;

                            //Creating Chat Message
                            $chat_message = ChatMessage::create($data);

                            //History
                            $history['send_by']     = Auth::id();
                            $history['send_to']     = $user->id;
                            $history['type']        = 'User';
                            $history['via']         = 'WhatsApp';
                            $history['document_id'] = $document->id;
                            DocumentSendHistory::create($history);
                        }

                    //Getting Vendor For Sending Documents
                    } elseif ($request->user_type == 2) {
                        $document     = Document::findOrFail($module_id);
                        $document_url = $document->getDocumentPathById($document->id);
                        foreach ($request->users as $key) {
                            $vendor = Vendor::findOrFail($key);

                            // Vendor ID For Chat Message
                            $data['vendor_id'] = $vendor->id;

                            //Creating Chat Message
                            $chat_message = ChatMessage::create($data);

                            //History
                            $history['send_by']     = Auth::id();
                            $history['send_to']     = $vendor->id;
                            $history['type']        = 'Vendor';
                            $history['via']         = 'WhatsApp';
                            $history['document_id'] = $document->id;
                            DocumentSendHistory::create($history);
                        }

                    //Getting Contact For Sending Documents
                    } elseif ($request->user_type == 3) {
                        $document     = Document::findOrFail($module_id);
                        $document_url = $document->getDocumentPathById($document->id);
                        foreach ($request->users as $key) {
                            $contact = Contact::findOrFail($key);

                            // Contact ID For Chat Message
                            $data['contact_id'] = $contact->id;

                            //Creating Chat Message
                            $chat_message = ChatMessage::create($data);

                            //History
                            $history['send_by']     = Auth::id();
                            $history['send_to']     = $contact->id;
                            $history['type']        = 'Contact';
                            $history['via']         = 'WhatsApp';
                            $history['document_id'] = $document->id;
                            DocumentSendHistory::create($history);
                        }
                    } elseif (isset($request->contact) && $request->contact != null) {
                        $document     = Document::findOrFail($module_id);
                        $document_url = $document->getDocumentPathById($document->id);

                        foreach ($request->contact as $contacts) {
                            // Contact ID For Chat Message
                            $data['number'] = $contacts;

                            //Creating Chat Message
                            $chat_message = ChatMessage::create($data);

                            //History
                            $history['send_by']     = Auth::id();
                            $history['send_to']     = $contacts;
                            $history['type']        = 'Manual Contact';
                            $history['via']         = 'WhatsApp';
                            $history['document_id'] = $document->id;
                            DocumentSendHistory::create($history);
                        }
                    }

                    return redirect()->back()->with('message', 'Document Send SucessFully');
                } elseif ($context == 'quicksell') {
                    $product = Product::findorfail($request->quicksell_id);
                    $image   = $product->getMedia(config('constants.media_tags'))->first()
                        ? getMediaUrl($product->getMedia(config('constants.media_tags'))->first())
                        : '';
                    foreach ($request->customers as $key) {
                        $customer = Customer::findOrFail($key);

                        // User ID For Chat Message
                        $data['customer_id'] = $customer->id;

                        //Creating Chat Message
                        $chat_message = ChatMessage::create($data);
                        //Sending Document
                        if ($customer->whatsapp_number == null) {
                            //
                        } else {
                            //
                        }
                    }

                    return redirect()->back()->with('message', 'Images Send SucessFully');
                } elseif ($context == 'quicksell_group') {
                    $products = $request->products;
                    if ($products != null) {
                        $products = explode(',', $products);
                        foreach ($products as $product) {
                            $product = Product::findorfail($product);
                            $image   = $product->getMedia(config('constants.media_tags'))->first()
                                ? getMediaUrl($product->getMedia(config('constants.media_tags'))->first())
                                : '';
                            if (isset($request->to_all)) {
                                $customers = Customer::all();
                            } elseif (! empty($request->customers_id) && is_array($request->customers_id)) {
                                $customers = Customer::whereIn('id', $request->customers_id)->get();
                            } elseif ($request->customers != null) {
                                $customers = Customer::whereIn('id', $request->customers)->get();
                            } elseif ($request->rating != null && $request->gender == null) {
                                $customers = Customer::where('rating', $request->rating)->get();
                            } elseif ($request->rating != null && $request->gender != null) {
                                $customers = Customer::where('rating', $request->rating)->where('gender', $request->gender)->get();
                            } else {
                                return redirect(route('quicksell.index'))->with('message', 'Please select Category');
                            }

                            if ($customers != null) {
                                foreach ($customers as $customer) {
                                    $data['customer_id'] = $customer->id;
                                    $chat_message        = ChatMessage::create($data);
                                }
                            }
                        }
                    } else {
                        if (! empty($request->redirect_back)) {
                            return redirect($request->redirect_back)->with('message', 'Please Select Products');
                        }

                        return redirect(route('quicksell.index'))->with('message', 'Please Select Products');
                    }

                    if ($request->redirect_back) {
                        return redirect($request->redirect_back)->with('message', 'Images Send SucessFully');
                    }

                    return redirect(route('quicksell.index'))->with('message', 'Images Send SucessFully');
                } elseif ($context == 'quicksell_group_send') {
                    if ($request->customerId != null && $request->groupId != null) {
                        //Find Group id
                        foreach ($request->groupId as $id) {
                            //got group
                            $groups = QuickSellGroup::select('id', 'group')->where('id', $id)->get();

                            //getting product id from group
                            if ($groups != null) {
                                foreach ($groups as $group) {
                                    $medias = [];

                                    $products = Product::with('media')
                                        ->select('products.*')
                                        ->join('product_quicksell_groups', 'product_quicksell_groups.product_id', '=', 'products.id')
                                        ->groupBy('products.id')
                                        ->where('quicksell_group_id', $group->group)
                                        ->get();

                                    foreach ($products as $product) {
                                        $image = $product->media()->whereIn('tag', config('constants.attach_image_tag'))->first();
                                        if ($image) {
                                            array_push($medias, $image);
                                        }
                                    }

                                    if (isset($medias) && count($medias) > 0) {
                                        if (! empty($request->send_pdf) && $request->send_pdf == 1) {
                                            $fn = '';
                                            if ($context == 'customer') {
                                                $fn = '_product';
                                            }

                                            $folder = 'temppdf_view_' . time();

                                            $pdfView = view('pdf_views.images' . $fn, compact('medias', 'folder'));
                                            $pdf     = new Dompdf();
                                            $pdf->setPaper([0, 0, 1000, 1000], 'portrait');
                                            $pdf->loadHtml($pdfView);
                                            if (! empty($request->pdf_file_name)) {
                                                $random = str_replace(' ', '-', $request->pdf_file_name . '-' . date('Y-m-d-H-i-s-') . rand());
                                            } else {
                                                $random = uniqid('sololuxury_', true);
                                            }
                                            if (! File::isDirectory(public_path() . '/pdf/')) {
                                                File::makeDirectory(public_path() . '/pdf/', 0777, true, true);
                                            }
                                            $fileName = public_path() . '/pdf/' . $random . '.pdf';
                                            $pdf->render();

                                            File::put($fileName, $pdf->output());

                                            $media = MediaUploader::fromSource($fileName)->upload();

                                            if ($request->customerId != null) {
                                                $customer = Customer::findorfail($request->customerId);
                                                if (! empty($request->send_pdf)) {
                                                    $file = config('env.APP_URL') . '/pdf/' . $random . '.pdf';
                                                }
                                                $data['customer_id'] = $customer->id;
                                                $chat_message        = ChatMessage::create($data);
                                            }
                                        } else {
                                            if ($medias != null) {
                                                if ($request->customerId != null) {
                                                    $customer = Customer::findorfail($request->customerId);
                                                    foreach ($medias as $media) {
                                                        $file                = getMediaUrl($media);
                                                        $data['customer_id'] = $customer->id;
                                                        $chat_message        = ChatMessage::create($data);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        return response()->json(['success']);
                    }
                } elseif ($context == 'old') {
                    $old = Old::findorfail($request->old_id);

                    if ($old != null) {
                        $data['old_id'] = $old->serial_no;
                        //Creating Chat Message
                        $data['message'] = $request->message;
                        $chat_message    = ChatMessage::create($data);

                        return response()->json([
                            'data' => $data,
                        ], 200);
                    }
                } elseif ($context == 'site_development') {
                    $chat_message = null;
                    $users        = $request->get('users', [$request->get('user_id', 6)]);
                    if (! empty($users)) {
                        foreach ($users as $user) {
                            $user = User::find($user);
                            if ($user) {
                                $params['message']             = $request->get('message');
                                $params['site_development_id'] = $request->get('site_development_id');
                                $params['approved']            = 1;
                                $params['status']              = 2;
                                $chat_message                  = ChatMessage::create($params);

                                return response()->json(['message' => $chat_message], 200);
                            }
                        }
                    }

                    return response()->json(['message' => 'No user selected'], 500);
                } elseif ($context == 'content_management') {
                    $chat_message = null;
                    $users        = $request->get('users', [$request->get('user_id', 0)]);

                    if (! empty($users)) {
                        foreach ($users as $user) {
                            $user                              = User::find($user);
                            $params['message']                 = $request->get('message');
                            $params['store_social_content_id'] = $request->get('store_social_content_id');
                            $params['approved']                = 1;
                            $params['status']                  = 2;
                            $chat_message                      = ChatMessage::create($params);
                        }
                    }

                    return response()->json(['message' => $chat_message]);
                } elseif ($context == 'task_lead') {
                    $params['task_id'] = $request->get('task_id');
                    $params['message'] = $request->get('message');

                    $params['approved'] = 1;
                    $params['status']   = 2;
                    $task               = Task::find($request->get('task_id'));
                    $user               = User::find($task->master_user_id);

                    if (! $user) {
                        return response()->json(['message' => 'Master user not found'], 500);
                    }
                    $params['user_id'] = $user->id;
                    if ($task->is_statutory != 1) {
                        $params['message'] = '#' . $task->id . '. ' . $task->task_subject . '. ' . $params['message'];
                    } else {
                        $params['message'] = $task->task_subject . '. ' . $params['message'];
                    }

                    $number          = $user->phone;
                    $whatsapp_number = $user->whatsapp_number;
                    if (! $number) {
                        return response()->json(['message' => 'User whatsapp no not available'], 500);
                    }
                    $chat_message = ChatMessage::create($params);
                } elseif ($context == 'social_strategy') {
                    $user = User::find($request->get('user_id'));

                    $params['message'] = $request->get('message');

                    $params['social_strategy_id'] = $request->get('social_strategy_id');
                    $params['approved']           = 1;

                    $params['status'] = 2;

                    $chat_message = ChatMessage::create($params);

                    return response()->json(['message' => $chat_message]);
                } elseif ($context == 'payment-receipts') {
                    $user           = null;
                    $paymentReceipt = \App\PaymentReceipt::find($request->get('payment_receipt_id'));
                    if ($paymentReceipt) {
                        if (auth()->user()->isAdmin()) {
                            $user = User::find($paymentReceipt->user_id);
                        }
                    }
                    if (! $user) {
                        $user = User::find(6);
                    }

                    $params['erp_user']           = $user->id;
                    $params['user_id']            = $user->id;
                    $params['message']            = $request->get('message');
                    $params['payment_receipt_id'] = $request->get('payment_receipt_id');
                    $params['approved']           = 1;
                    $params['status']             = 2;

                    $chat_message = ChatMessage::create($params);

                    return response()->json(['message' => $chat_message]);
                } else {
                    if ($context == 'developer_task') {
                        $params['developer_task_id'] = $request->get('developer_task_id');
                        $task                        = DeveloperTask::find($request->get('developer_task_id'));
                        $params['erp_user']          = $task->user_id;
                        $params['approved']          = 1;
                        $params['message']           = '#DEVTASK-' . $task->id . ' ' . $request->get('message');
                        $params['status']            = 2;

                        $user            = User::find($task->user_id);
                        $number          = $user->phone;
                        $whatsapp_number = $user->whatsapp_number;
                        $chat_message    = ChatMessage::create($params);

                        return response()->json(['message' => $chat_message]);
                    } else {
                        if ($context == 'lawyer') {
                            $data['lawyer_id'] = $request->lawyer_id;
                            $module_id         = $request->lawyer_id;
                        } else {
                            if ($context == 'case') {
                                $data['case_id']   = $request->case_id;
                                $data['lawyer_id'] = $request->lawyer_id;
                                $module_id         = $request->case_id;
                            } else {
                                if ($context == 'blogger') {
                                    $data['blogger_id'] = $request->blogger_id;
                                    $module_id          = $request->blogger_id;
                                }
                            }
                        }
                    }
                }
            }
        }
        if ($context != 'task') {
            $params['approved'] = 0;
            $params['status']   = 1;
            $chat_message       = ChatMessage::create($data);
        }

        //START - Purpose : Add ChatbotMessage entry - DEVTASK-4203
        if ($context == 'vendor') {
            /** Sent To ChatbotMessage */
            $loggedUser = $request->user();

            if ($loggedUser) {
                $roles = $loggedUser->roles->pluck('name')->toArray();

                if (! in_array('Admin', $roles)) {
                    \App\ChatbotReply::create([
                        'question' => $request->message,
                        'reply'    => json_encode([
                            'context'  => 'vendor',
                            'issue_id' => $data['vendor_id'],
                            'from'     => $loggedUser->id,
                        ]),
                        'replied_chat_id' => $chat_message->id,
                        'reply_from'      => 'database',
                    ]);
                }

                $messageReply = \App\ChatbotReply::find($request->chat_reply_message_id);

                if ($messageReply) {
                    $messageReply->chat_id = $chat_message->id;

                    $messageReply->save();
                }
            }
        }
        //END - DEVTASK-4203

        //STRAT - Purpose : Add record in chatbotreplay - DEVTASK-18280
        if ($context == 'chatbot') {
            if ($request->chat_reply_message_id) {
                $messageReply = \App\ChatbotReply::find($request->chat_reply_message_id);

                if ($messageReply) {
                    $messageReply->chat_id = $chat_message->id;

                    $messageReply->save();
                }
            }

            return response()->json(['message' => $chat_message]);
        }
        //END - DEVTASK-18280

        if ($context == 'customer') {
            ChatMessagesQuickData::updateOrCreate([
                'model'    => \App\Customer::class,
                'model_id' => $data['customer_id'],
            ], [
                'last_communicated_message'    => @$data['message'],
                'last_communicated_message_at' => Carbon::now(),
                'last_communicated_message_id' => ($chat_message) ? $chat_message->id : null,
            ]);
        }

        if ($context == 'task') {
            ChatMessagesQuickData::updateOrCreate([
                'model'    => \App\Task::class,
                'model_id' => $data['task_id'],
            ], [
                'last_communicated_message'    => @$data['message'],
                'last_communicated_message_at' => Carbon::now(),
                'last_communicated_message_id' => ($chat_message) ? $chat_message->id : null,
            ]);

            if ($request->chat_reply_message_id) {
                $messageReply = \App\ChatbotReply::find($request->chat_reply_message_id);

                if ($messageReply) {
                    $messageReply->chat_id = $chat_message->id;

                    $messageReply->save();
                }
            }
        }

        if ($context == 'task_lead') {
            ChatMessagesQuickData::updateOrCreate([
                'model'    => \App\Task::class,
                'model_id' => $data['task_id'],
            ], [
                'last_communicated_message'    => @$params['message'],
                'last_communicated_message_at' => Carbon::now(),
                'last_communicated_message_id' => ($chat_message) ? $chat_message->id : null,
            ]);
        }

        if ($context == 'email') {
            ChatMessagesQuickData::updateOrCreate([
                'model'    => \App\Email::class,
                'model_id' => $data['email_id'],
            ], [
                'last_communicated_message'    => @$params['message'],
                'last_communicated_message_at' => Carbon::now(),
                'last_communicated_message_id' => ($chat_message) ? $chat_message->id : null,
            ]);
        }

        if ($request->hasFile('image')) {
            $media = MediaUploader::fromSource($request->file('image'))
                ->toDirectory('chatmessage/' . floor($chat_message->id / config('constants.image_per_folder')))
                ->upload();
            $chat_message->attachMedia($media, config('constants.media_tags'));

            if ($context == 'task') {
                if (count($task->users) > 0) {
                    if ($task->assign_from == Auth::id()) {
                        foreach ($task->users as $key => $user) {
                            if ($key == 0) {
                                $data['erp_user'] = $user->id;
                            } else {
                                //
                            }
                        }
                    } else {
                        foreach ($task->users as $key => $user) {
                            if ($key == 0) {
                                $data['erp_user'] = $task->assign_from;
                            } else {
                                if ($user->id != Auth::id()) {
                                    //
                                }
                            }
                        }
                    }
                }

                if (count($task->contacts) > 0) {
                    foreach ($task->contacts as $key => $contact) {
                        if ($key == 0) {
                            $data['contact_id'] = $task->assign_to;
                        } else {
                            //
                        }
                    }
                }
            }
        }

        // get the status for approval
        $approveMessage = \App\Helpers\DevelopmentHelper::needToApproveMessage();
        $isNeedToBeSend = false;
        if (
            ((int) $approveMessage == 1
                || (Auth::id() == 49 && empty($chat_message->customer_id))
                || Auth::id() == 56
                || Auth::id() == 3
                || Auth::id() == 65
                || $context == 'task'
                || $request->get('is_vendor_user') == 'yes'
            )
        ) {
            $isNeedToBeSend = true;
        }

        $isNeedToBeSend = true;

        if ($request->images) {
            $imagesDecoded = json_decode($request->images, true);
            if (! empty($request->send_pdf) && $request->send_pdf == 1) {
                $fn           = ($context == 'customer' || $context == 'customers') ? '_product' : '';
                $folder       = 'temppdf_view_' . time();
                $mediasH      = Media::whereIn('id', $imagesDecoded)->get();
                $number       = 0;
                $chunkedMedia = $mediasH->chunk(self::MEDIA_PDF_CHUNKS);

                foreach ($chunkedMedia as $key => $medias) {
                    $pdfView = (string) view('pdf_views.images' . $fn, compact('medias', 'folder', 'chat_message'));
                    $pdf     = new Dompdf();
                    $pdf->setPaper([0, 0, 1000, 1000], 'portrait');
                    $pdf->loadHtml($pdfView);

                    if (! empty($request->pdf_file_name)) {
                        $random = str_replace(' ', '-', $request->pdf_file_name . '-' . ($key + 1) . '-' . date('Y-m-d-H-i-s-') . rand());
                    } else {
                        $random = uniqid('sololuxury_', true);
                    }

                    $fileName = public_path() . '/' . $random . '.pdf';
                    $pdf->render();

                    File::put($fileName, $pdf->output());

                    // send images in chunks to chat media
                    try {
                        if ($number == 0) {
                            $media = MediaUploader::fromSource($fileName)
                                ->toDirectory('chatmessage/' . floor($chat_message->id / config('constants.image_per_folder')))
                                ->upload();
                            $chat_message->attachMedia($media, config('constants.media_tags'));
                        } else {
                            $extradata             = $data;
                            $extradata['is_queue'] = 0;
                            $extra_chat_message    = ChatMessage::create($extradata);
                            $media                 = MediaUploader::fromSource($fileName)
                                ->toDirectory('chatmessage/' . floor($extra_chat_message->id / config('constants.image_per_folder')))
                                ->upload();
                            $extra_chat_message->attachMedia($media, config('constants.media_tags'));
                        }

                        File::delete($fileName);

                        $number++;
                    } catch (Exception $e) {
                        \Log::channel('whatsapp')->error($e);
                    }
                }
            } else {
                if (! empty($imagesDecoded) && is_array($imagesDecoded)) {
                    if ($request->type == 'customer-attach') {
                        foreach ($imagesDecoded as $iimg => $listedImage) {
                            $productList  = \App\SuggestedProductList::find($listedImage);
                            $product      = Product::find($productList->product_id);
                            $imageDetails = $product->getMedia(config('constants.attach_image_tag'))->first();
                            $image_key    = $imageDetails->getKey();
                            $media        = Media::find($image_key);
                            if ($media) {
                                $mediable = \App\Mediables::where('media_id', $media->id)->where('mediable_type', \App\Product::class)->first();
                                try {
                                    if ($iimg != 0) {
                                        $chat_message = ChatMessage::create($data);
                                    }
                                    $chat_message->attachMedia($media, config('constants.media_tags'));
                                    if ($mediable) {
                                        $productList->update(['chat_message_id' => $chat_message->id]);
                                    }
                                    // if this message is not first then send to the client
                                    if ($iimg != 0 && $isNeedToBeSend && $chat_message->status != 0 && $chat_message->is_queue == '0') {
                                        $myRequest = new Request();
                                        $myRequest->setMethod('POST');
                                        $myRequest->request->add(['messageId' => $chat_message->id]);
                                        $this->approveMessage($context, $myRequest);
                                        if ($mediable) {
                                            $productList->update(['chat_message_id' => $chat_message->id]);
                                        }
                                    }
                                } catch (Exception $e) {
                                    \Log::channel('whatsapp')->error($e);
                                }
                            }
                        }
                    } else {
                        $medias = Media::whereIn('id', array_unique($imagesDecoded))->get();
                        if (! $medias->isEmpty()) {
                            foreach ($medias as $iimg => $media) {
                                $mediable = \App\Mediables::where('media_id', $media->id)->where('mediable_type', \App\Product::class)->first();
                                try {
                                    if ($iimg != 0) {
                                        $chat_message = ChatMessage::create($data);
                                    }
                                    $chat_message->attachMedia($media, config('constants.media_tags'));
                                    // if this message is not first then send to the client
                                    if ($iimg != 0 && $isNeedToBeSend && $chat_message->status != 0 && $chat_message->is_queue == '0') {
                                        $myRequest = new Request();
                                        $myRequest->setMethod('POST');
                                        $myRequest->request->add(['messageId' => $chat_message->id]);
                                        $this->approveMessage($context, $myRequest);
                                    }
                                } catch (Exception $e) {
                                    \Log::channel('whatsapp')->error($e);
                                }
                            }
                        }
                    }
                }
            }
        }

        if ($request->screenshot_path != '') {
            $image_path = public_path() . '/uploads/temp_screenshot.png';
            $img        = substr($request->screenshot_path, strpos($request->screenshot_path, ',') + 1);
            $img        = Image::make(base64_decode($img))->encode('png')->save($image_path);

            $media = MediaUploader::fromSource($image_path)
                ->toDirectory('chatmessage/' . floor($chat_message->id / config('constants.image_per_folder')))
                ->upload();
            $chat_message->attachMedia($media, config('constants.media_tags'));

            File::delete('uploads/temp_screenshot.png');
        }

        // get the status for approval
        if ($isNeedToBeSend && $chat_message->status != 0 && $chat_message->is_queue == '0') {
            $myRequest = new Request();
            $myRequest->setMethod('POST');
            $myRequest->request->add(['messageId' => $chat_message->id]);
            $this->approveMessage($context, $myRequest, $chat_id);
        }

        if ($request->ajax() || $ajaxNeeded) {
            return response()->json(['message' => $chat_message]);
        }

        return redirect('/' . $context . '/' . $module_id);
    }

    public function sendMultipleMessages(Request $request)
    {
        $selected_leads = json_decode($request->selected_leads, true);
        $leads          = \App\ErpLeads::whereIn('id', $selected_leads)->get();

        if (count($leads) > 0) {
            foreach ($leads as $lead) {
                try {
                    $params     = [];
                    $model_type = 'leads';
                    $model_id   = $lead->id;
                    $params     = [
                        'lead_id' => $lead->id,
                        'number'  => null,
                        'message' => $request->message,
                        'user_id' => Auth::id(),
                    ];

                    if ($lead->customer) {
                        $params['customer_id'] = $lead->customer->id;
                    }

                    $message = ChatMessage::create($params);
                } catch (Exception $ex) {
                    return response($ex->getMessage(), 500);
                }
            }
        }

        return redirect()->route('leads.index');
    }

    public function updateAndCreate(Request $request)
    {
        $result = 'success';

        $message = Message::find($request->message_id);
        $params  = [
            'number'  => null,
            'status'  => 1,
            'user_id' => Auth::id(),
        ];

        if ($message) {
            $params = [
                'approved'   => 1,
                'status'     => 2,
                'created_at' => Carbon::now(),
            ];

            if ($request->moduletype == 'leads') {
                $params['lead_id'] = $message->moduleid;
                if ($lead = \App\ErpLeads::find($message->moduleid)) {
                    if ($lead->customer) {
                        $params['customer_id'] = $lead->customer->id;
                    }
                }
            } elseif ($request->moduletype == 'orders') {
                $params['order_id'] = $message->moduleid;
                if ($order = Order::find($message->moduleid)) {
                    if ($order->customer) {
                        $params['customer_id'] = $order->customer->id;
                    }
                }
            } elseif ($request->moduletype == 'customer') {
                $customer              = Customer::find($message->customer_id);
                $params['customer_id'] = $customer->id;
            } elseif ($request->moduletype == 'purchase') {
                $params['purchase_id'] = $message->moduleid;
            }

            $images = $message->getMedia(config('constants.media_tags'));

            if ($images->first()) {
                $params['message'] = null;
                $chat_message      = ChatMessage::create($params);

                foreach ($images as $img) {
                    $chat_message->attachMedia($img, config('constants.media_tags'));
                }
            } else {
                $params['message'] = $message->body;

                $chat_message = ChatMessage::create($params);
            }

            $myRequest = new Request();
            $myRequest->setMethod('POST');
            $myRequest->request->add(['messageId' => $chat_message->id]);

            $result = $this->approveMessage($request->moduletype, $myRequest);
        } else {
            if ($request->moduletype == 'customer') {
                $params['customer_id'] = $request->moduleid;
                $params['order_id']    = null;
            } elseif ($request->moduletype == 'leads') {
                $params['lead_id'] = $request->moduleid;
                if ($lead = \App\ErpLeads::find($request->moduleid)) {
                    if ($lead->customer) {
                        $params['customer_id'] = $lead->customer->id;
                    }
                }
            } else {
                $params['order_id'] = $request->moduleid;
                if ($order = Order::find($request->moduleid)) {
                    if ($order->customer) {
                        $params['customer_id'] = $order->customer->id;
                    }
                }
            }

            if ($request->images) {
                $params['message'] = null;
                $chat_message      = ChatMessage::create($params);
                foreach (json_decode($request->images) as $image) {
                    $media = Media::find($image);
                    $chat_message->attachMedia($media, config('constants.media_tags'));
                }
            }

            return redirect('/' . (! empty($request->moduletype) ? $request->moduletype : 'customer') . '/' . $request->moduleid);
        }

        return response()->json(['status' => $result]);
    }

    public function forwardMessage(Request $request)
    {
        $message = ChatMessage::find($request->message_id);

        foreach ($request->customer_id as $customer_id) {
            $new_message              = new ChatMessage;
            $new_message->number      = $message->number;
            $new_message->message     = $message->message;
            $new_message->lead_id     = $message->lead_id;
            $new_message->order_id    = $message->order_id;
            $new_message->user_id     = $message->user_id;
            $new_message->customer_id = $customer_id;
            $new_message->status      = 1;
            $new_message->media_url   = $message->media_url;

            $new_message->save();

            if ($images = $message->getMedia(config('constants.media_tags'))) {
                foreach ($images as $image) {
                    $new_message->attachMedia($image, config('constants.media_tags'));
                }
            }
        }

        return redirect()->back();
    }

    /**
     * poll messages
     *
     * @param mixed $context
     *
     * @return \Illuminate\Http\Response
     */
    public function pollMessages(Request $request, $context)
    {
        $params = [];
        $result = [];
        $skip   = $request->page && $request->page > 1 ? $request->page * 10 : 0;

        switch ($context) {
            case 'customer':
                $column       = 'customer_id';
                $column_value = $request->customerId;
                break;
            case 'purchase':
                $column       = 'purchase_id';
                $column_value = $request->purchaeId;
                break;
            default:
                $column       = 'customer_id';
                $column_value = $request->customerId;
        }

        $messages = ChatMessage::select(['id', "$column", 'number', 'user_id', 'assigned_to', 'approved', 'status', 'sent', 'resent', 'created_at', 'media_url', 'message'])->where($column, $column_value)->latest();

        // IS IT NECESSARY ?
        if ($request->get('elapse')) {
            $elapse = (int) $request->get('elapse');
            $date   = new \DateTime;
            $date->modify(sprintf('-%s seconds', $elapse));
        }

        foreach ($messages->get() as $message) {
            $messageParams = [
                'id'          => $message->id,
                'number'      => $message->number,
                'assigned_to' => $message->assigned_to,
                'created_at'  => Carbon::parse($message->created_at)->format('Y-m-d H:i:s'),
                'approved'    => $message->approved,
                'status'      => $message->status,
                'user_id'     => $message->user_id,
                'sent'        => $message->sent,
                'resent'      => $message->resent,
            ];

            if ($message->media_url) {
                $messageParams['media_url']    = $message->media_url;
                $headers                       = get_headers($message->media_url, 1);
                $messageParams['content_type'] = $headers['Content-Type'][1];
            }

            if ($message->message) {
                $messageParams['message'] = $message->message;
            }

            if ($message->hasMedia(config('constants.media_tags'))) {
                $images_array = [];

                foreach ($message->getMedia(config('constants.media_tags')) as $key => $image) {
                    $temp_image = [
                        'key'           => $image->getKey(),
                        'image'         => getMediaUrl($image),
                        'product_id'    => '',
                        'special_price' => '',
                        'size'          => '',
                    ];

                    $image_key = $image->getKey();

                    $product_image = Product::with('Media')
                        ->whereRaw("products.id IN (SELECT mediables.mediable_id FROM mediables WHERE mediables.media_id = $image_key)")
                        ->select(['id', 'price_inr_special', 'supplier', 'size', 'lmeasurement', 'hmeasurement', 'dmeasurement'])->first();

                    if ($product_image) {
                        $temp_image['product_id']    = $product_image->id;
                        $temp_image['special_price'] = $product_image->price_inr_special;

                        $string = $product_image->supplier;
                        $expr   = '/(?<=\s|^)[a-z]/i';
                        preg_match_all($expr, $string, $matches);
                        $supplier_initials               = implode('', $matches[0]);
                        $temp_image['supplier_initials'] = strtoupper($supplier_initials);

                        if ($product_image->size != null) {
                            $temp_image['size'] = $product_image->size;
                        } else {
                            $temp_image['size'] = (string) $product_image->lmeasurement . ', ' . (string) $product_image->hmeasurement . ', ' . (string) $product_image->dmeasurement;
                        }
                    }

                    array_push($images_array, $temp_image);
                }

                $messageParams['images'] = $images_array;
            }

            $result[] = array_merge($params, $messageParams);
        }

        $result      = array_values(collect($result)->sortBy('created_at')->reverse()->toArray());
        $currentPage = LengthAwarePaginator::resolveCurrentPage();
        $perPage     = 10;

        if ($request->page) {
            $currentItems = array_slice($result, $perPage * ($currentPage - 1), $perPage);
        } else {
            $currentItems = array_reverse(array_slice($result, $perPage * ($currentPage - 1), $perPage));
        }

        $result = new LengthAwarePaginator($currentItems, count($result), $perPage, $currentPage, [
            'path' => LengthAwarePaginator::resolveCurrentPath(),
        ]);

        return response()->json($result);
    }

    public function pollMessagesCustomer(Request $request)
    {
        // Remove time limit
        set_time_limit(0);

        $params = [];
        $result = [];
        if ($request->customerId) {
            $column = 'customer_id';
            $value  = $request->customerId;
        } else {
            if ($request->supplierId) {
                $column = 'supplier_id';
                $value  = $request->supplierId;
            } else {
                if ($request->vendorId) {
                    $column = 'vendor_id';
                    $value  = $request->vendorId;
                } else {
                    if ($request->taskId) {
                        $column = 'task_id';
                        $value  = $request->taskId;
                    } else {
                        if ($request->erpUser) {
                            $column = 'erp_user';
                            $value  = $request->erpUser;
                        } else {
                            if ($request->dubbizleId) {
                                $column = 'dubbizle_id';
                                $value  = $request->dubbizleId;
                            } else {
                                if ($request->lawyerId) {
                                    $column = 'lawyer_id';
                                    $value  = $request->lawyerId;
                                } else {
                                    if ($request->caseId) {
                                        $column = 'case_id';
                                        $value  = $request->caseId;
                                    } else {
                                        if ($request->bloggerId) {
                                            $column = 'blogger_id';
                                            $value  = $request->bloggerId;
                                        } else {
                                            if ($request->customerId) {
                                                $column = 'customer_id';
                                                $value  = $request->customerId;
                                            } else {
                                                if ($request->oldID) {
                                                    $column = 'old_id';
                                                    $value  = $request->oldId;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        $select_fields = ['id', 'customer_id', 'number', 'user_id', 'erp_user', 'assigned_to', 'approved', 'status', 'sent', 'error_status', 'resent', 'created_at', 'media_url', 'message'];
        if ($request->caseId) {
            array_push($select_fields, 'lawyer_id');
        }
        $messages = ChatMessage::select($select_fields)->where($column, $value)->where('status', '!=', 7);

        if ($request->caseId) {
            $messages = $messages->with('lawyer:id,name');
        }

        if (Setting::get('show_automated_messages') == 0) {
            $messages = $messages->where('status', '!=', 9);
        }

        if ($request->erpUser) {
            $messages = $messages->whereNull('task_id');
        }

        // IS IT NECESSARY ?
        if ($request->get('elapse')) {
            $elapse = (int) $request->get('elapse');
            $date   = new \DateTime;
            $date->modify(sprintf('-%s seconds', $elapse));
        }

        foreach ($messages->latest()->get() as $message) {
            $messageParams = [
                'id'           => $message->id,
                'number'       => $message->number,
                'assigned_to'  => $message->assigned_to,
                'created_at'   => Carbon::parse($message->created_at)->format('Y-m-d H:i:s'),
                'approved'     => $message->approved,
                'status'       => $message->status,
                'user_id'      => $message->user_id,
                'erp_user'     => $message->erp_user,
                'sent'         => $message->sent,
                'resent'       => $message->resent,
                'error_status' => $message->error_status,
            ];
            if ($request->caseId) {
                $messageParams['lawyer'] = optional($message->lawyer)->name;
            }

            if ($message->media_url) {
                $messageParams['media_url']    = $message->media_url;
                $headers                       = get_headers($message->media_url, 1);
                $messageParams['content_type'] = $headers['Content-Type'][1];
            }

            if ($message->message) {
                $messageParams['message'] = $message->message;
            }

            if ($message->hasMedia(config('constants.media_tags'))) {
                $images_array = [];

                foreach ($message->getMedia(config('constants.media_tags')) as $key => $image) {
                    $temp_image = [
                        'key'           => $image->getKey(),
                        'image'         => getMediaUrl($image),
                        'product_id'    => '',
                        'special_price' => '',
                        'size'          => '',
                    ];

                    $image_key     = $image->getKey();
                    $mediable_type = 'Product';

                    $product_image = Product::with('Media')
                        ->whereRaw("products.id IN (SELECT mediables.mediable_id FROM mediables WHERE mediables.media_id = $image_key AND mediables.mediable_type LIKE '%$mediable_type%')")
                        ->select(['id', 'price_inr_special', 'supplier', 'size', 'lmeasurement', 'hmeasurement', 'dmeasurement'])->first();

                    if ($product_image) {
                        $temp_image['product_id']    = $product_image->id;
                        $temp_image['special_price'] = $product_image->price_inr_special;

                        $string = $product_image->supplier;
                        $expr   = '/(?<=\s|^)[a-z]/i';
                        preg_match_all($expr, $string, $matches);
                        $supplier_initials               = implode('', $matches[0]);
                        $temp_image['supplier_initials'] = strtoupper($supplier_initials);

                        if ($product_image->size != null) {
                            $temp_image['size'] = $product_image->size;
                        } else {
                            $temp_image['size'] = (string) $product_image->lmeasurement . ', ' . (string) $product_image->hmeasurement . ', ' . (string) $product_image->dmeasurement;
                        }
                    }

                    array_push($images_array, $temp_image);
                }

                $messageParams['images'] = $images_array;
            }

            $result[] = array_merge($params, $messageParams);
        }

        $result      = array_values(collect($result)->sortBy('created_at')->reverse()->toArray());
        $currentPage = LengthAwarePaginator::resolveCurrentPage();
        $perPage     = 10000;

        if ($request->page) {
            $currentItems = array_slice($result, $perPage * ($currentPage - 1), $perPage);
        } else {
            $currentItems = array_reverse(array_slice($result, $perPage * ($currentPage - 1), $perPage));
            $result       = array_reverse($result);
        }

        $result = new LengthAwarePaginator($currentItems, count($result), $perPage, $currentPage, [
            'path' => LengthAwarePaginator::resolveCurrentPath(),
        ]);

        return response()->json($result);
    }

    public function approveMessage($context, Request $request, $chat_id = 0)
    {
        $defCustomer = '971547763482';

        $message     = ChatMessage::findOrFail($request->get('messageId'));
        $today_date  = Carbon::now()->format('Y-m-d');
        $is_mail     = 0;
        $model_id    = '';
        $model_class = '';
        $toemail     = '';
        $subject     = $request->get('subject') ?? null;
        if ($chat_id > 0) {
            $m = ChatMessage::where('id', $chat_id)->first();

            if ($m) {
                $is_mail = $m->is_email;
            }
        }

        if ($context == 'customer') {
            // check the customer message
            $customer = \App\Customer::find($message->customer_id);

            $model_id    = $message->customer_id;
            $model_class = \App\Customer::class;
            $toemail     = $customer->email;

            if (Setting::get('whatsapp_number_change') == 1) {
                $customer    = Customer::find($message->customer_id);
                $default_api = ApiKey::where('default', 1)->first();

                if (! $customer->whatsapp_number_change_notified() && $default_api->number != $customer->whatsapp_number) {
                    $params = [
                        'number'      => null,
                        'user_id'     => Auth::id(),
                        'approved'    => 1,
                        'status'      => 9,
                        'customer_id' => $message->customer_id,
                        'message'     => 'Our whatsapp number has changed',
                    ];

                    $additional_message = ChatMessage::create($params);

                    CommunicationHistory::create([
                        'model_id'   => $customer->id,
                        'model_type' => Customer::class,
                        'type'       => 'number-change',
                        'method'     => 'whatsapp',
                    ]);
                }
            }
            if (isset($customer)) {
                $phone           = $customer->phone;
                $whatsapp_number = $customer->whatsapp_number;
            } else {
                $customer = Customer::find($message->customer_id);
                if ($customer) {
                    $phone           = $customer->phone;
                    $whatsapp_number = $customer->whatsapp_number;
                }
            }
        } else {
            if ($context == 'supplier') {
                $supplier = Supplier::find($message->supplier_id);
                $phone    = $supplier->default_phone;
                if (empty($supplier->whatsapp_number)) {
                    $whatsapp_number = '971502609192';
                } else {
                    $whatsapp_number = $supplier->whatsapp_number;
                }
                $toemail     = $supplier->email;
                $model_id    = $message->supplier_id;
                $model_class = \App\Supplier::class;
            } else {
                if ($context == 'vendor') {
                    $vendor          = Vendor::find($message->vendor_id);
                    $phone           = $vendor->default_phone;
                    $whatsapp_number = $vendor->whatsapp_number;
                    $toemail         = $vendor->email;
                    $model_id        = $message->vendor_id;
                    $model_class     = \App\Vendor::class;
                } else {
                    if ($context == 'task') {
                        $sender = User::find($message->user_id);

                        $isUser = false;
                        if ($message->erp_user == '') {
                            $receiver = Contact::find($message->contact_id);
                        } else {
                            $isUser   = true;
                            $receiver = User::find($message->erp_user);
                        }

                        $phone           = @$receiver->phone;
                        $whatsapp_number = ($receiver && $isUser) ? $receiver->whatsapp_number : $sender->whatsapp_number;
                    } else {
                        if ($context == 'user') {
                            $sender = User::find($message->user_id);
                            $isUser = false;
                            if ($message->erp_user != '') {
                                $isUser   = true;
                                $receiver = User::find($message->erp_user);
                            } else {
                                $receiver = Contact::find($message->contact_id);
                            }

                            $phone           = $receiver->phone;
                            $whatsapp_number = ($receiver && $isUser) ? $receiver->whatsapp_number : $sender->whatsapp_number;
                        } else {
                            if ($context == 'dubbizle') {
                                $dubbizle        = Dubbizle::find($message->dubbizle_id);
                                $phone           = $dubbizle->phone_number;
                                $whatsapp_number = '971502609192';
                            } else {
                                if ($context == 'lawyer') {
                                    $lawyer          = Lawyer::find($message->lawyer_id);
                                    $phone           = $lawyer->default_phone;
                                    $whatsapp_number = $lawyer->whatsapp_number;
                                } else {
                                    if ($context == 'case') {
                                        $case   = LegalCase::find($message->case_id);
                                        $lawyer = $case->lawyer;
                                        if ($lawyer) {
                                            $phone = $lawyer->default_phone;
                                        } else {
                                            $phone = '';
                                        }
                                        $whatsapp_number = $case->whatsapp_number;
                                    } else {
                                        if ($context == 'blogger') {
                                            $blogger         = Blogger::find($message->blogger_id);
                                            $phone           = $blogger->default_phone;
                                            $whatsapp_number = $blogger->whatsapp_number;
                                        } else {
                                            if ($context == 'old') {
                                                $old             = Old::find($message->old_id);
                                                $phone           = $old->phone;
                                                $whatsapp_number = '';
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        $data = '';

        if ($message->message != '') {
            if ($context == 'supplier' || $context == 'customer' || $context == 'vendor' || $context == 'task' || $context == 'charity' || $context == 'dubbizle' || $context == 'lawyer' || $context == 'case' || $context == 'blogger' || $context == 'old' || $context == 'hubstuff' || $context == 'user-feedback' || $context == 'user-feedback-hrTicket' || $context == 'SOP-Data' || $context == 'timedoctor' || $context == 'email') {
                if ($context == 'supplier') {
                    $supplierDetails = Supplier::find($message->supplier_id);
                    $language        = $supplierDetails->language;
                    $model_id        = $message->supplier_id;
                    $model_class     = \App\Supplier::class;
                    $toemail         = $supplierDetails->email;
                    if ($language != null) {
                        try {
                            $result  = TranslationHelper::translate('en', $language, $message->message);
                            $history = [
                                'msg_id'        => $message->id,
                                'supplier_id'   => $message->supplier_id,
                                'original_msg'  => $message->message,
                                'translate_msg' => '(' . $language . ') ' . $result,
                                'error_log'     => 'N/A',
                            ];
                            \App\SupplierTranslateHistory::insert($history);
                        } catch (\Throwable $e) {
                            $history = [
                                'msg_id'        => $message->id,
                                'supplier_id'   => $message->supplier_id,
                                'original_msg'  => $message->message,
                                'translate_msg' => null,
                                'error_log'     => $e->getMessage(),
                            ];
                            \App\SupplierTranslateHistory::insert($history);
                            throw new Exception($e->getMessage(), 1);
                        }
                        $message->message = $result;
                    }
                }
                if ($context == 'customer') {
                    $supplierDetails = Customer::find($message->supplier_id);
                    $language        = isset($supplierDetails) && $supplierDetails ? $supplierDetails->language : '';
                    if ($language != null) {
                        $result           = TranslationHelper::translate('en', $language, $message->message);
                        $message->message = $result;
                    }
                }

                if ($context == 'user-feedback') {
                    $userDetails     = User::find($message->user_id);
                    $model_id        = $message->user_id;
                    $model_class     = \App\User::class;
                    $toemail         = $userDetails->email;
                    $phone           = $userDetails->phone;
                    $user            = \Auth::user();
                    $whatsapp_number = $user->whatsapp_number;
                    $language        = $userDetails->language;
                    if ($language != null) {
                        $result           = TranslationHelper::translate('en', $language, $message->message);
                        $message->message = $result;
                    }
                }
                if ($context == 'user-feedback-hrTicket') {
                    $userDetails     = User::find($message->user_id);
                    $model_id        = $message->user_id;
                    $model_class     = \App\User::class;
                    $toemail         = $userDetails->email;
                    $phone           = $userDetails->phone;
                    $user            = \Auth::user();
                    $whatsapp_number = $user->whatsapp_number;
                    $language        = $userDetails->language;
                    if ($language != null) {
                        $result           = TranslationHelper::translate('en', $language, $message->message);
                        $message->message = $result;
                    }
                }
                if ($context == 'charity') {
                    $msg             = ChatMessage::where('id', $request->messageId)->first();
                    $charity         = CustomerCharity::find($msg->charity_id);
                    $phone           = $charity->phone;
                    $whatsapp_number = Auth::user()->whatsapp_number;
                    $model_id        = $msg->charity_id;
                    $model_class     = \App\CustomerCharity::class;
                    $toemail         = $charity->email;
                }
                if ($context == 'SOP-Data') {
                    $user = User::find($message->sop_user_id);

                    $phone           = $user->phone;
                    $whatsapp_number = $user->whatsapp_number;
                    $model_id        = $message->sop_user_id;
                    $toemail         = $user->email;
                    $model_class     = \App\User::class;
                }
                if ($context == 'hubstuff') {
                    $user            = User::find($message->hubstuff_activity_user_id);
                    $phone           = $user->phone;
                    $toemail         = $user->email;
                    $whatsapp_number = Auth::user()->whatsapp_number;
                    $model_id        = $message->user_id;
                    $model_class     = \App\User::class;
                }

                if ($context == 'timedoctor') {
                    $user            = User::find($message->time_doctor_activity_user_id);
                    $phone           = $user->phone;
                    $toemail         = $user->email;
                    $whatsapp_number = Auth::user()->whatsapp_number;
                    $model_id        = $message->user_id;
                    $model_class     = \App\User::class;
                }

                if ($context == 'email') {
                    $emailObj    = Email::find($message->email_id);
                    $toemail     = $emailObj->to;
                    $model_id    = $message->email_id;
                    $model_class = \App\Email::class;
                }

                if ($is_mail == 1) {
                    $sendResult = $this->sendemail($message, $model_id, $model_class, $toemail, $chat_id, $subject);
                }
                if ($is_mail == 2) {
                    WebNotificationController::sendBulkNotification($message->user_id, $subject, $message->message);
                } else {
                    //
                }
            } else {
                if ($is_mail == 1) {
                    $sendResult = $this->sendemail($message, $model_id, $model_class, $toemail, $chat_id);
                }
                if ($is_mail == 2) {
                    WebNotificationController::sendBulkNotification($message->user_id, $subject, $message->message);
                } else {
                    //
                }
            }

            // Store send result
            if (isset($sendResult) && $sendResult) {
                $message->unique_id = $sendResult['id'] ?? '';
                $message->save();
            }
        }

        $sendMediaFile = true;
        if ($message->media_url != '') {
            // Store send result
            if (isset($sendResult) && $sendResult) {
                $message->unique_id = $sendResult['id'] ?? '';
                $message->save();
            }
            // check here that image media url is temp created if so we can delete that
            if (strpos($message->media_url, 'instant_message_') !== false) {
                $sendMediaFile = false;
                $path          = parse_url($message->media_url, PHP_URL_PATH);
                if (file_exists(public_path($path)) && strpos($message->media_url, $path) !== false) {
                    @unlink(public_path($path));
                    $message->media_url = null;
                    $message->save();
                }
            }
        }

        $images = $message->getMedia(config('constants.media_tags'));
        if (! empty($images) && $sendMediaFile) {
            $count = 0;
            foreach ($images as $key => $image) {
                $send = str_replace(' ', '%20', getMediaUrl($image));

                if ($context == 'task' || $context == 'vendor' || $context == 'supplier') {
                    // Store send result
                    if (isset($sendResult) && $sendResult) {
                        $message->unique_id = $sendResult['id'] ?? '';
                        $message->save();
                    }
                } else {
                    if ($count < 5) {
                        $count++;
                    } else {
                        sleep(5);

                        $count = 0;
                    }

                    // Store send result
                    if (isset($sendResult) && $sendResult) {
                        $message->unique_id = $sendResult['id'] ?? '';
                        $message->save();
                    }
                }
            }
        }

        $message->update([
            'approved'   => 1,
            'is_queue'   => 0,
            'status'     => 2,
            'created_at' => Carbon::now(),
        ]);

        return response()->json([
            'data' => $data,
        ], 200);
    }

    public function sendToAll(Request $request, $validate = true)
    {
        set_time_limit(0);
        if ($validate) {
            $this->validate($request, [
                'sending_time' => 'required|date',
                'frequency'    => 'required|numeric',
                'rating'       => 'sometimes|nullable|numeric',
                'gender'       => 'sometimes|nullable|string',
            ]);
        }

        $frequency = $request->frequency;

        if ($request->image_id != '') {
            $broadcast_image = BroadcastImage::find($request->image_id);
            if ($broadcast_image->hasMedia(config('constants.media_tags'))) {
                foreach ($broadcast_image->getMedia(config('constants.media_tags')) as $key2 => $brod_image) {
                    $content['image']['url'] = getMediaUrl($brod_image);
                    $content['image']['key'] = $brod_image->getKey();
                }
            }
        }
        //Broadcast For Whatsapp
        if (($request->to_all || $request->moduletype == 'customers') && $request->platform == 'whatsapp') {
            // Create empty array for checking numbers
            $arrCustomerNumbers = [];

            // Get all numbers from config
            $configs = WhatsappConfig::where('is_customer_support', 0)->get();

            //Loop over numbers
            foreach ($configs as $arrNumber) {
                if ($arrNumber['number']) {
                    $arrBroadcastNumbers[] = $arrNumber['number'];
                }
            }

            $minutes      = round(60 / $frequency);
            $max_group_id = ChatMessage::where('status', 8)->max('group_id') + 1;

            $data = Customer::whereNotNull('phone')->where('do_not_disturb', 0);

            if ($request->rating != '') {
                $data = $data->where('rating', $request->rating);
            }

            if ($request->gender != '') {
                $data = $data->where('gender', $request->gender);
            }

            if ($request->shoe_size != '') {
                $data = $data->where('shoe_size', $request->shoe_size);
            }

            if ($request->clothing_size != '') {
                $data = $data->where('clothing_size', $request->clothing_size);
            }

            $data = $data->get()->groupBy('broadcast_number');

            foreach ($data as $broadcastNumber => $customers) {
                $now     = $request->sending_time ? Carbon::parse($request->sending_time) : Carbon::now();
                $morning = Carbon::create($now->year, $now->month, $now->day, 9, 0, 0);
                $evening = Carbon::create($now->year, $now->month, $now->day, 19, 0, 0);

                if (! $now->between($morning, $evening, true)) {
                    if (Carbon::parse($now->format('Y-m-d'))->diffInWeekDays(Carbon::parse($morning->format('Y-m-d')), false) == 0) {
                        // add day
                        $now->addDay();
                        $now     = Carbon::create($now->year, $now->month, $now->day, 9, 0, 0);
                        $morning = Carbon::create($now->year, $now->month, $now->day, 9, 0, 0);
                        $evening = Carbon::create($now->year, $now->month, $now->day, 19, 0, 0);
                    } else {
                        // dont add day
                        $now     = Carbon::create($now->year, $now->month, $now->day, 9, 0, 0);
                        $morning = Carbon::create($now->year, $now->month, $now->day, 9, 0, 0);
                        $evening = Carbon::create($now->year, $now->month, $now->day, 19, 0, 0);
                    }
                }

                if (in_array($broadcastNumber, $arrBroadcastNumbers)) {
                    foreach ($customers as $customer) {
                        //Changes put by satyam for connecting Old BroadCast with New BroadCast page
                        if (isset($customer->customerMarketingPlatformActive)) {
                            if ($customer->customerMarketingPlatformActive->active == 1) {
                                //Checking For DND
                                if ($customer->do_not_disturb == 1) {
                                    continue;
                                }

                                //Checking For Last Message Send 24 hours
                                if (isset($customer->lastImQueueSend) && $customer->lastImQueueSend->sent_at >= Carbon::now()->subDay()->toDateTimeString()) {
                                    continue;
                                }

                                //Check if customer has Phone
                                if ($customer->phone == '' || $customer->phone == null) {
                                    continue;
                                }

                                //Check if customer has broadcast
                                if ($customer->broadcast_number == '' || $customer->broadcast_number == null) {
                                    continue;
                                }

                                $params = [
                                    'number'      => null,
                                    'user_id'     => Auth::id(),
                                    'customer_id' => $customer->id,
                                    'approved'    => 0,
                                    'status'      => 8, // status for Broadcast messages
                                    'group_id'    => $max_group_id,
                                ];

                                $priority = null; // Priority for broadcast messages, now the same as for normal messages
                                if ($request->image_id != null) {
                                    if ($content['image'] != null) {
                                        //Saving Message In Chat Message
                                        $chatMessage = ChatMessage::create($params);
                                        foreach ($content as $url) {
                                            //Attach image to chat message
                                            $chatMessage->attachMedia($url['key'], config('constants.media_tags'));
                                            $priority = 1;
                                            $send     = InstantMessagingHelper::scheduleMessage($customer->phone, $customer->broadcast_number, $request->message, $url['url'], $priority, $now, $max_group_id);
                                            if ($send != false) {
                                                $now->addMinutes($minutes);
                                                $now = InstantMessagingHelper::broadcastSendingTimeCheck($now);
                                            } else {
                                                continue;
                                            }
                                        }
                                    }
                                } elseif ($request->linked_images == null) {
                                    $chatMessage = ChatMessage::create($params);

                                    $send = InstantMessagingHelper::scheduleMessage($customer->phone, $customer->broadcast_number, $request->message, '', $priority, $now, $max_group_id);
                                    if ($send != false) {
                                        $now->addMinutes($minutes);
                                        $now = InstantMessagingHelper::broadcastSendingTimeCheck($now);
                                    }
                                } else {
                                    continue;
                                }

                                //DO NOT REMOVE THIS CODE
                                // MessageQueue::create([
                                //     'user_id' => Auth::id(),
                                //     'customer_id' => $customer->id,
                                //     'phone' => null,
                                //     'type' => 'message_all',
                                //     'data' => json_encode($content),
                                //     'sending_time' => $now,
                                //     'group_id' => $max_group_id
                                // ]);
                            }
                        }
                    }
                }
            }
        //Broadcast for Facebook
        } elseif (strtolower($request->platform) == 'facebook') {
            //Getting Frequency
            $minutes = round(60 / $frequency);
            //Getting Max Id
            $max_group_id = ChatMessage::where('status', 8)->max('group_id') + 1;

            //Getting All Brand Fans
            $brands = BrandFans::all();

            $count = 0;

            //Scheduling Time based on frequency
            $now     = $request->sending_time ? Carbon::parse($request->sending_time) : Carbon::now();
            $morning = Carbon::create($now->year, $now->month, $now->day, 9, 0, 0);
            $evening = Carbon::create($now->year, $now->month, $now->day, 19, 0, 0);

            if (! $now->between($morning, $evening, true)) {
                if (Carbon::parse($now->format('Y-m-d'))->diffInWeekDays(Carbon::parse($morning->format('Y-m-d')), false) == 0) {
                    // add day
                    $now->addDay();
                    $now     = Carbon::create($now->year, $now->month, $now->day, 9, 0, 0);
                    $morning = Carbon::create($now->year, $now->month, $now->day, 9, 0, 0);
                    $evening = Carbon::create($now->year, $now->month, $now->day, 19, 0, 0);
                } else {
                    // dont add day
                    $now     = Carbon::create($now->year, $now->month, $now->day, 9, 0, 0);
                    $morning = Carbon::create($now->year, $now->month, $now->day, 9, 0, 0);
                    $evening = Carbon::create($now->year, $now->month, $now->day, 19, 0, 0);
                }
            }
            $sendingTime = '';

            //Getting Last Broadcast Id
            $broadcastId = ImQueue::groupBy('broadcast_id')->orderby('broadcast_id', 'desc')->first();

            foreach ($brands as $brand) {
                $count++;

                // Convert maxTime to unixtime
                if (empty($sendingTime)) {
                    $maxTime = strtotime($now);
                } else {
                    $now     = $sendingTime ? Carbon::parse($sendingTime) : Carbon::now();
                    $morning = Carbon::create($now->year, $now->month, $now->day, 9, 0, 0);
                    $evening = Carbon::create($now->year, $now->month, $now->day, 19, 0, 0);

                    if (! $now->between($morning, $evening, true)) {
                        if (Carbon::parse($now->format('Y-m-d'))->diffInWeekDays(Carbon::parse($morning->format('Y-m-d')), false) == 0) {
                            // add day
                            $now->addDay();
                            $now     = Carbon::create($now->year, $now->month, $now->day, 9, 0, 0);
                            $morning = Carbon::create($now->year, $now->month, $now->day, 9, 0, 0);
                            $evening = Carbon::create($now->year, $now->month, $now->day, 19, 0, 0);
                        } else {
                            // dont add day
                            $now     = Carbon::create($now->year, $now->month, $now->day, 9, 0, 0);
                            $morning = Carbon::create($now->year, $now->month, $now->day, 9, 0, 0);
                            $evening = Carbon::create($now->year, $now->month, $now->day, 19, 0, 0);
                        }
                    }
                    $sendingTime = $now;
                    $maxTime     = strtotime($sendingTime);
                }

                // Add interval
                $maxTime = $maxTime + (3600 / $request->frequency);

                // Check if it's in the future
                if ($maxTime < time()) {
                    $maxTime = time();
                }

                $sendAfter   = date('Y-m-d H:i:s', $maxTime);
                $sendingTime = $sendAfter;
                //Getting Least Number of Messages Send Per Account
                $accounts = Account::where('platform', 'facebook')->where('status', 1)->get();
                $count    = [];
                foreach ($accounts as $account) {
                    $count[] = [$account->imQueueBroadcast->count() => $account->last_name];
                }
                //Arranging In Ascending Order
                ksort($count);
                if (! isset($broadcastId->broadcast_id)) {
                    $broadcastIdLast = 0;
                } else {
                    $broadcastIdLast = $broadcastId->broadcast_id;
                }
                //Just Sending Text To Facebook
                if (isset($content)) {
                    foreach ($content as $url) {
                        if (isset($count[0][key($count[0])])) {
                            $username                         = $count[0][key($count[0])];
                            $queue                            = new ImQueue();
                            $queue->im_client                 = 'facebook';
                            $queue->number_to                 = str_replace('https://www.facebook.com/', '', $brand->profile_url);
                            $queue->number_from               = $username;
                            $queue->text                      = $request->message;
                            $queue->priority                  = null;
                            $queue->image                     = $url['url'];
                            $queue->marketing_message_type_id = 1;
                            $queue->priority                  = 1;
                            $queue->broadcast_id              = ($broadcastIdLast + 1);
                            $queue->send_after                = $sendAfter;
                            $queue->save();
                        }
                    }
                } else {
                    //Sending Text with Image
                    if (isset($count[0][key($count[0])])) {
                        $username                         = $count[0][key($count[0])];
                        $queue                            = new ImQueue();
                        $queue->im_client                 = 'facebook';
                        $queue->number_to                 = str_replace('https://www.facebook.com/', '', $brand->profile_url);
                        $queue->number_from               = $username;
                        $queue->text                      = $request->message;
                        $queue->priority                  = null;
                        $queue->priority                  = 1;
                        $queue->marketing_message_type_id = 1;
                        $queue->broadcast_id              = ($broadcastId->broadcast_id + 1);
                        $queue->send_after                = $sendAfter;
                        $queue->save();
                    }
                }
            }
        } elseif (strtolower($request->platform) == 'instagram') {
            //Getting Cold Leads to Send Message
            $query      = ColdLeads::query();
            $competitor = $request->competitor;
            $limit      = 100;
            //Check if competitor is selected
            if (! empty($competitor)) {
                $comp  = CompetitorPage::find($competitor);
                $query = $query->where('because_of', 'LIKE', '%via ' . $comp->name . '%');
            }
            //check for gender
            if (! empty($request->gender)) {
                $query = $query->where('gender', $request->gender);
            }
            //Get Cold Leads to be send
            $coldleads = $query->where('status', 1)->where('messages_sent', '<', 5)->take($limit)->orderBy('messages_sent', 'ASC')->orderBy('id', 'ASC')->get();
            //Schedulaing Message based on frequency
            $minutes = round(60 / $frequency);

            $count = 0;

            //Scheduling Time based on frequency
            $now     = $request->sending_time ? Carbon::parse($request->sending_time) : Carbon::now();
            $morning = Carbon::create($now->year, $now->month, $now->day, 9, 0, 0);
            $evening = Carbon::create($now->year, $now->month, $now->day, 19, 0, 0);

            if (! $now->between($morning, $evening, true)) {
                if (Carbon::parse($now->format('Y-m-d'))->diffInWeekDays(Carbon::parse($morning->format('Y-m-d')), false) == 0) {
                    // add day
                    $now->addDay();
                    $now     = Carbon::create($now->year, $now->month, $now->day, 9, 0, 0);
                    $morning = Carbon::create($now->year, $now->month, $now->day, 9, 0, 0);
                    $evening = Carbon::create($now->year, $now->month, $now->day, 19, 0, 0);
                } else {
                    // dont add day
                    $now     = Carbon::create($now->year, $now->month, $now->day, 9, 0, 0);
                    $morning = Carbon::create($now->year, $now->month, $now->day, 9, 0, 0);
                    $evening = Carbon::create($now->year, $now->month, $now->day, 19, 0, 0);
                }
            }
            $sendingTime = '';
            //Getting Last Broadcast Id
            $broadcastId = ImQueue::groupBy('broadcast_id')->orderby('broadcast_id', 'desc')->first();

            foreach ($coldleads as $coldlead) {
                $count++;

                // Convert maxTime to unixtime
                if (empty($sendingTime)) {
                    $maxTime = strtotime($now);
                } else {
                    $now     = $sendingTime ? Carbon::parse($sendingTime) : Carbon::now();
                    $morning = Carbon::create($now->year, $now->month, $now->day, 9, 0, 0);
                    $evening = Carbon::create($now->year, $now->month, $now->day, 19, 0, 0);

                    if (! $now->between($morning, $evening, true)) {
                        if (Carbon::parse($now->format('Y-m-d'))->diffInWeekDays(Carbon::parse($morning->format('Y-m-d')), false) == 0) {
                            // add day
                            $now->addDay();
                            $now     = Carbon::create($now->year, $now->month, $now->day, 9, 0, 0);
                            $morning = Carbon::create($now->year, $now->month, $now->day, 9, 0, 0);
                            $evening = Carbon::create($now->year, $now->month, $now->day, 19, 0, 0);
                        } else {
                            // dont add day
                            $now     = Carbon::create($now->year, $now->month, $now->day, 9, 0, 0);
                            $morning = Carbon::create($now->year, $now->month, $now->day, 9, 0, 0);
                            $evening = Carbon::create($now->year, $now->month, $now->day, 19, 0, 0);
                        }
                    }
                    $sendingTime = $now;
                    $maxTime     = strtotime($sendingTime);
                }

                // Add interval
                $maxTime = $maxTime + (3600 / $request->frequency);

                // Check if it's in the future
                if ($maxTime < time()) {
                    $maxTime = time();
                }

                $sendAfter   = date('Y-m-d H:i:s', $maxTime);
                $sendingTime = $sendAfter;

                //Getting Least Number of Messages Send Per Account
                $accounts = Account::where('platform', 'instagram')->where('status', 1)->get();
                $count    = [];
                foreach ($accounts as $account) {
                    $count[] = [$account->imQueueBroadcast->count() => $account->last_name];
                }
                //Arranging In Ascending Order
                ksort($count);

                if (! isset($broadcastId->broadcast_id)) {
                    $broadcastIdLast = 0;
                } else {
                    $broadcastIdLast = $broadcastId->broadcast_id;
                }
                //Sending Text with Image
                if (isset($count[0][key($count[0])])) {
                    $username                         = $count[0][key($count[0])];
                    $queue                            = new ImQueue();
                    $queue->im_client                 = 'instagram';
                    $queue->number_to                 = $coldlead->platform_id;
                    $queue->number_from               = $username;
                    $queue->text                      = $request->message;
                    $queue->priority                  = null;
                    $queue->priority                  = 1;
                    $queue->marketing_message_type_id = 1;
                    $queue->broadcast_id              = ($broadcastIdLast + 1);
                    $queue->send_after                = $sendAfter;
                    $queue->save();
                }
            }
        } else {
            $minutes      = round(60 / $frequency);
            $now          = $request->sending_time ? Carbon::parse($request->sending_time) : Carbon::now();
            $morning      = Carbon::create($now->year, $now->month, $now->day, 9, 0, 0);
            $evening      = Carbon::create($now->year, $now->month, $now->day, 18, 0, 0);
            $max_group_id = MessageQueue::max('group_id') + 1;
            $array        = Excel::toArray(new CustomerNumberImport, $request->file('file'));

            foreach ($array as $item) {
                foreach ($item as $it) {
                    $number = (int) $it[0];

                    if (! $now->between($morning, $evening, true)) {
                        if (Carbon::parse($now->format('Y-m-d'))->diffInWeekDays(Carbon::parse($morning->format('Y-m-d')), false) == 0) {
                            // add day
                            $now->addDay();
                            $now     = Carbon::create($now->year, $now->month, $now->day, 9, 0, 0);
                            $morning = Carbon::create($now->year, $now->month, $now->day, 9, 0, 0);
                            $evening = Carbon::create($now->year, $now->month, $now->day, 18, 0, 0);
                        } else {
                            // dont add day
                            $now     = Carbon::create($now->year, $now->month, $now->day, 9, 0, 0);
                            $morning = Carbon::create($now->year, $now->month, $now->day, 9, 0, 0);
                            $evening = Carbon::create($now->year, $now->month, $now->day, 18, 0, 0);
                        }
                    }

                    MessageQueue::create([
                        'user_id'         => Auth::id(),
                        'customer_id'     => null,
                        'phone'           => $number,
                        'whatsapp_number' => $request->whatsapp_number,
                        'type'            => 'message_selected',
                        'data'            => json_encode($content),
                        'sending_time'    => $now,
                        'group_id'        => $max_group_id,
                    ]);

                    $now->addMinutes($minutes);
                }
            }
        }

        return redirect()->route('broadcast.images')->with('success', 'Messages are being sent in the background!');
    }

    public function resendMessage2(Request $request)
    {
        $messageId = $request->get('message_id');
        $message   = ChatMessage::find($messageId);

        $requestData = new Request();
        $requestData->setMethod('POST');
        $requestData->request->add(['customer_id' => $message->customer_id, 'message' => $message->message, 'status' => 1]);

        return $this->sendMessage($requestData, 'customer', true);
    }

    public function stopAll()
    {
        $message_queues = ImQueue::whereNull('sent_at')->get();

        foreach ($message_queues as $message_queue) {
            $message_queue->send_after = null;
            $message_queue->save();
        }

        return redirect()->back()->with('success', 'Messages stopped processing!');
    }

    public function sendWithWhatsApp($number, $sendNumber, $text, $validation = true, $chat_message_id = null)
    {
        $logDetail = [
            'number'          => $number,
            'whatsapp_number' => $sendNumber,
            'message'         => $text,
            'validation'      => $validation,
            'chat_message_id' => $chat_message_id,
        ];
        if ($validation == true) {
            if (Auth::id() != 3) {
                if (strlen($number) != 12 || ! preg_match('/^[91]{2}/', $number)) {
                    // DON'T THROW EXCEPTION
                    // throw new Exception("Invalid number format. Must be 12 digits and start with 91");
                    \Log::channel('whatsapp')->debug('(file ' . __FILE__ . ' line ' . __LINE__ . ') Invalid number format. Must be 12 digits and start with 91: ' . $number . ' [' . json_encode($logDetail) . '] ');

                    return false;
                }
            }
        }

        $api_keys = ApiKey::all();

        foreach ($api_keys as $api_key) {
            if ($api_key->number == $number) {
                return;
            }
        }
        $startTime = date('Y-m-d H:i:s', LARAVEL_START);
        $curl      = curl_init();

        if (Setting::get('whatsapp_number_change') == 1) {
            $keys = \Config::get('apiwha.api_keys');
            $key  = $keys[0]['key'];

            foreach ($api_keys as $api_key) {
                if ($api_key->default == 1) {
                    $key = $api_key->key;
                }
            }
        } else {
            if (is_null($sendNumber)) {
                $keys = \Config::get('apiwha.api_keys');
                $key  = $keys[0]['key'];

                foreach ($api_keys as $api_key) {
                    if ($api_key->default == 1) {
                        $key = $api_key->key;
                    }
                }
            } else {
                $keys = \Config::get('apiwha.api_keys');
                $key  = $keys[0]['key'];

                foreach ($api_keys as $api_key) {
                    if ($api_key->default == 1) {
                        $key = $api_key->key;
                    }
                }

                foreach ($api_keys as $api_key) {
                    if ($api_key->number == $sendNumber) {
                        $key = $api_key->key;
                    }
                }
            }
        }

        $encodedNumber = urlencode($number);
        $encodedText   = urlencode($text);

        if ($chat_message_id) {
            $custom_data = [
                'chat_message_id' => $chat_message_id,
            ];

            $encodedCustomData = urlencode(json_encode($custom_data));
        } else {
            $encodedCustomData = '';
        }
        $url = 'https://panel.apiwha.com/send_message.php?apikey=' . $key . '&number=' . $encodedNumber . '&text=' . $encodedText . '&custom_data=' . $encodedCustomData;
        curl_setopt_array($curl, [
            CURLOPT_URL            => $url,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING       => '',
            CURLOPT_MAXREDIRS      => 10,
            CURLOPT_TIMEOUT        => 30,
            CURLOPT_HTTP_VERSION   => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST  => 'GET',
        ]);

        $response = curl_exec($curl);
        $err      = curl_error($curl);
        $httpcode = curl_getinfo($curl, CURLINFO_HTTP_CODE);

        curl_close($curl);
        LogRequest::log($startTime, $url, 'GET', json_encode($logDetail), $response, $httpcode, \App\Http\Controllers\WhatsAppController::class, 'sendWithWhatsApp');

        if ($err) {
            // DON'T THROW EXCEPTION
            // throw new Exception("cURL Error #:" . $err);
            \Log::channel('whatsapp')->debug('(file ' . __FILE__ . ' line ' . __LINE__ . ') cURL Error for number ' . $number . ':' . $err . ' [' . json_encode($logDetail) . '] ');

            return false;
        } else {
            $result = json_decode($response);
            if (! $result->success) {
                // DON'T THROW EXCEPTION
                //throw new Exception("whatsapp request error: " . $result->description);
                \Log::channel('whatsapp')->debug('(file ' . __FILE__ . ' line ' . __LINE__ . ') WhatsApp request error for number ' . $number . ': ' . $result->description . ' [' . json_encode($logDetail) . '] ');

                return false;
            } else {
                // Log successful send
                \Log::channel('whatsapp')->debug('(file ' . __FILE__ . ' line ' . __LINE__ . ') Message was sent to number ' . $number . ':' . $response . ' [' . json_encode($logDetail) . '] ');
            }
        }
    }

    public function pullApiwha()
    {
        $curl = curl_init();

        $key = 'Z802FWHI8E2OP0X120QR';

        $encodedNumber = urlencode('917534013101');
        $encodedType   = urlencode('IN');

        $url = 'https://panel.apiwha.com/get_messages.php?apikey=' . $key . '&type=' . $encodedType . '&number=' . $encodedNumber;
        curl_setopt_array($curl, [
            CURLOPT_URL            => $url,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING       => '',
            CURLOPT_MAXREDIRS      => 10,
            CURLOPT_TIMEOUT        => 120,
            CURLOPT_HTTP_VERSION   => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST  => 'GET',
        ]);

        $response   = curl_exec($curl);
        $err        = curl_error($curl);
        $httpcode   = curl_getinfo($curl, CURLINFO_HTTP_CODE);
        $startTime  = date('Y-m-d H:i:s', LARAVEL_START);
        $parameters = [];
        curl_close($curl);

        LogRequest::log($startTime, $url, 'GET', json_encode($parameters), json_decode($response), $httpcode, \App\Http\Controllers\WhatsAppController::class, 'pullApiwha');

        if ($err) {
            // DON'T THROW EXCEPTION
            // throw new Exception( "cURL Error #:" . $err );
            \Log::channel('whatsapp')->debug('(file ' . __FILE__ . ' line ' . __LINE__ . ') cURL Error for number ' . $number . ':' . $err);

            return false;
        } else {
            $result = json_decode($response, true);
        }

        $filtered_data = [];

        foreach ($result as $item) {
            if (Carbon::parse($item['creation_date'])->gt(Carbon::parse('2019-06-17 00:00:00'))) {
                $filtered_data[] = $item;
                $customer        = $this->findCustomerByNumber($item['from']);

                if ($customer) {
                    $params = [
                        'number'      => $item['from'],
                        'customer_id' => $customer->id,
                        'message'     => $item['text'],
                        'created_at'  => $item['creation_date'],
                    ];
                }
            }
        }

        return $result;
    }

    public function sendWithNewApi($number, $whatsapp_number = null, $message = null, $file = null, $chat_message_id = null, $enqueue = 'opportunistic')
    {
        $logDetail = [
            'number'          => $number,
            'whatsapp_number' => $whatsapp_number,
            'message'         => $message,
            'file'            => $file,
            'chat_message_id' => $chat_message_id,
            'enqueue'         => $enqueue,
        ];

        $configs       = \Config::get('wassenger.api_keys');
        $encodedNumber = '+' . $number;
        $encodedText   = $message;
        $wa_token      = $configs[0]['key'];

        if ($whatsapp_number != null) {
            foreach ($configs as $key => $config) {
                if ($config['number'] == $whatsapp_number) {
                    $wa_device = $config['device'];

                    break;
                }

                $wa_device = $configs[0]['device'];
            }
        } else {
            $wa_device = $configs[0]['device'];
        }

        if ($file != null) {
            $file_exploded = explode('/', $file);
            $encoded_part  = str_replace('%25', '%', urlencode(str_replace(' ', '%20', $file_exploded[count($file_exploded) - 1])));
            array_pop($file_exploded);
            array_push($file_exploded, $encoded_part);

            $file_encoded = implode('/', $file_exploded);

            $array = [
                'url' => "$file_encoded",
            ];

            $curl = curl_init();
            $url  = "https://api.wassenger.com/v1/files?reference=$chat_message_id";

            curl_setopt_array($curl, [
                CURLOPT_URL            => $url,
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_ENCODING       => '',
                CURLOPT_MAXREDIRS      => 10,
                CURLOPT_TIMEOUT        => 180,
                CURLOPT_HTTP_VERSION   => CURL_HTTP_VERSION_1_1,
                CURLOPT_CUSTOMREQUEST  => 'POST',
                CURLOPT_POSTFIELDS     => json_encode($array),
                CURLOPT_HTTPHEADER     => [
                    'content-type: application/json',
                    "token: $wa_token",
                ],
            ]);

            $response  = curl_exec($curl);
            $err       = curl_error($curl);
            $httpcode  = curl_getinfo($curl, CURLINFO_HTTP_CODE);
            $startTime = date('Y-m-d H:i:s', LARAVEL_START);

            curl_close($curl);

            LogRequest::log($startTime, $url, 'POST', json_encode($array), json_decode($response), $httpcode, \App\Http\Controllers\WhatsAppController::class, 'sendWithNewApi');
            // throw new Exception("cURL Error #: whatttt");
            if ($err) {
                // DON'T THROW EXCEPTION
                //throw new Exception( "cURL Error #:" . $err );
                \Log::channel('whatsapp')->debug('(file ' . __FILE__ . ' line ' . __LINE__ . ') cURL Error for number ' . $number . ':' . $err . ' [' . json_encode($logDetail) . '] ');

                return false;
            } else {
                $result = json_decode($response, true);

                if (is_array($result)) {
                    if (array_key_exists('status', $result)) {
                        if ($result['status'] == 409) {
                            $image_id = $result['meta']['file'];
                        } else {
                            // DON'T THROW EXCEPTION
                            // throw new Exception( "Something was wrong with image: " . $result[ 'message' ] );
                            \Log::channel('whatsapp')->debug('(file ' . __FILE__ . ' line ' . __LINE__ . ') Something was wrong with the image for number ' . $number . ':' . $result['message'] . ' [' . json_encode($logDetail) . '] ');

                            return false;
                        }
                    } else {
                        $image_id = $result[0]['id'];
                    }
                }
            }
        }
        $array = [
            'phone'     => $encodedNumber,
            'message'   => (string) $encodedText,
            'reference' => (string) $chat_message_id,
            'device'    => "$wa_device",
            'enqueue'   => "$enqueue",
        ];

        if (isset($image_id)) {
            $array['media'] = [
                'file' => "$image_id",
            ];
        }

        $curl = curl_init();
        $url  = 'https://api.wassenger.com/v1/messages';

        curl_setopt_array($curl, [
            CURLOPT_URL            => $url,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING       => '',
            CURLOPT_MAXREDIRS      => 10,
            CURLOPT_TIMEOUT        => 180,
            CURLOPT_HTTP_VERSION   => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST  => 'POST',
            CURLOPT_POSTFIELDS     => json_encode($array),
            CURLOPT_HTTPHEADER     => [
                'content-type: application/json',
                "token: $wa_token",
            ],
        ]);

        $response  = curl_exec($curl);
        $err       = curl_error($curl);
        $http_code = curl_getinfo($curl, CURLINFO_HTTP_CODE);
        curl_close($curl);

        LogRequest::log($startTime, $url, 'POST', json_encode($array), json_decode($response), $httpcode, \App\Http\Controllers\WhatsAppController::class, 'sendWithNewApi');

        if ($err) {
            // DON'T THROW EXCEPTION
            // throw new Exception( "cURL Error #:" . $err );
            \Log::channel('whatsapp')->debug('(file ' . __FILE__ . ' line ' . __LINE__ . ') cURL Error for number ' . $number . ':' . $err . ' [' . json_encode($logDetail) . '] ');

            return false;
        } else {
            $result = json_decode($response, true);

            if ($http_code != 201) {
                // DON'T THROW EXCEPTION
                // throw new Exception( "Something was wrong with message: " . $response );
                \Log::channel('whatsapp')->debug('(file ' . __FILE__ . ' line ' . __LINE__ . ') Something was wrong with the message for number ' . $number . ':' . $response . ' [' . json_encode($logDetail) . '] ');

                return false;
            } else {
                // Log successful send
                \Log::channel('whatsapp')->debug('(file ' . __FILE__ . ' line ' . __LINE__ . ') Message was sent to number ' . $number . ':' . $response . ' [' . json_encode($logDetail) . '] ');
            }
        }

        return $result;
    }

    public function sendWithThirdApi($number, $whatsapp_number = null, $message = null, $file = null, $chat_message_id = null, $enqueue = 'opportunistic', $customer_id = null)
    {
        $logDetail = [
            'number'          => $number,
            'whatsapp_number' => $whatsapp_number,
            'message'         => $message,
            'file'            => $file,
            'chat_message_id' => $chat_message_id,
            'enqueue'         => $enqueue,
            'customer_id'     => $customer_id,
        ];

        $startTime = date('Y-m-d H:i:s', LARAVEL_START);

        // Get configs
        $config        = \Config::get('apiwha.instances');
        $whatAppConfig = WhatsappConfig::where('number', $whatsapp_number)->where('status', 1)->first();
        if (! $whatAppConfig) {
            // check if number is set or not then call from the table
            if (! isset($config[$whatsapp_number])) {
                $whatsappRecord = \App\Marketing\WhatsappConfig::where('provider', 'wassenger')
                    ->where('instance_id', '!=', '')
                    ->where('token', '!=', '')
                    ->where('status', 1)
                    ->where('number', $whatsapp_number)
                    ->first();

                if ($whatsappRecord) {
                    $config[$whatsapp_number] = [
                        'instance_id' => $whatsappRecord->instance_id,
                        'token'       => $whatsappRecord->token,
                        'is_use_own'  => $whatsappRecord->is_use_own,
                    ];
                }
            }
        } else {
            if ($whatAppConfig->provicer == 'official-whatsapp') {
                $whatsappAccount          = WhatsappBusinessAccounts::where('id', $whatAppConfig->instance_id)->first();
                $config[$whatsapp_number] = [
                    'provider'    => 'official-whatsapp',
                    'instance_id' => $whatsappAccount->id,
                    'token'       => $whatsappAccount->business_access_token,
                    'is_use_own'  => $whatAppConfig->is_use_own,
                ];
            } else {
                $config[$whatsapp_number] = [
                    'instance_id' => $whatAppConfig->instance_id,
                    'token'       => $whatAppConfig->token,
                    'is_use_own'  => $whatAppConfig->is_use_own,
                ];
            }
        }

        $chatMessage = null;
        if ($chat_message_id > 0) {
            $chatMessage = \App\ChatMessage::find($chat_message_id);
        }
        // Set instanceId and token
        $isUseOwn = false;
        if (isset($config[$whatsapp_number])) {
            $instanceId = $config[$whatsapp_number]['instance_id'];
            $token      = $config[$whatsapp_number]['token'];
            $isUseOwn   = isset($config[$whatsapp_number]['is_use_own']) ? $config[$whatsapp_number]['is_use_own'] : 0;
        } else {
            \Log::channel('whatsapp')->debug('(file ' . __FILE__ . ' line ' . __LINE__ . ') Whatsapp config not found for number ' . $whatsapp_number . ' while sending to number ' . $number . ' [' . json_encode($logDetail) . '] ');
            $instanceId = $config[0]['instance_id'];
            $token      = $config[0]['token'];
            $isUseOwn   = isset($config[0]['is_use_own']) ? $config[0]['is_use_own'] : 0;
        }
        if (isset($customer_id) && $message != null && $message != '') {
            $customer = Customer::findOrFail($customer_id);

            $fields = ['[[NAME]]' => $customer->name, '[[CITY]]' => $customer->city, '[[EMAIL]]' => $customer->email, '[[PHONE]]' => $customer->phone, '[[PINCODE]]' => $customer->pincode, '[[WHATSAPP_NUMBER]]' => $customer->whatsapp_number, '[[SHOESIZE]]' => $customer->shoe_size, '[[CLOTHINGSIZE]]' => $customer->clothing_size];

            preg_match_all("/\[[^\]]*\]]/", $message, $matches);
            $values = $matches[0];

            foreach ($values as $value) {
                if (isset($fields[$value])) {
                    $message = str_replace($value, $fields[$value], $message);
                }
            }
        }

        $encodedNumber = '+' . $number;
        if ($isUseOwn == 1) {
            $encodedNumber = $number;
        }

        $encodedText = $message;

        $array = [
            'phone' => $encodedNumber,
        ];

        if ($encodedText != null && $file == null) {
            $array['body'] = $encodedText;
            $link          = 'sendMessage';
        } else {
            $exploded          = explode('/', $file);
            $filename          = end($exploded);
            $array['body']     = $file;
            $array['filename'] = $filename;
            $link              = 'sendFile';
            $array['caption']  = $encodedText;
        }

        $array['instanceId'] = $instanceId;
        // here is we call python
        if ($isUseOwn == 1) {
            $domain = 'http://167.86.89.241:82/' . $link;
        } else {
            if (isset($config[$whatsapp_number]['provider']) && $config[$whatsapp_number]['provider'] == 'wassenger') {
                $domain           = 'https://api.wassenger.com/v1/messages?token=' . $token;
                $array['message'] = $array['body'];
                $array['device']  = $array['instanceId'];
                unset($array['body']);
                unset($array['instanceId']);
            } elseif (isset($config[$whatsapp_number]['provider']) && $config[$whatsapp_number]['provider'] == 'official-whatsapp') {
                $apiCalled             = true;
                $whatsappApiController = new WhatsAppOfficialController($config[$whatsapp_number]['instance_id']);
                $response              = $whatsappApiController->sendMessage([
                    'type'        => 'text',
                    'body'        => $message,
                    'preview_url' => true,
                    'number'      => $whatsapp_number,
                ]);
                if ($response['status']) {
                    if ($chatMessage) {
                        $chatMessage->unique_id    = $response['data']['messages'][0]['id'];
                        $chatMessage->error_status = \App\ChatMessage::ERROR_STATUS_SUCCESS;
                        $chatMessage->save();
                    }
                    \Log::channel('whatsapp')->debug('(file ' . __FILE__ . ' line ' . __LINE__ . ') Message was sent to number ' . $number . ':' . $response['data']['messages'][0]['id'] . ' [' . json_encode($logDetail) . '] ');

                    return $response['data']['messages'][0];
                } else {
                    \Log::channel('whatsapp')->debug('(file ' . __FILE__ . ' line ' . __LINE__ . ') cURL Error for number ' . $number . ': [' . json_encode($logDetail) . '] ');
                    if ($chatMessage) {
                        $chatMessage->error_status = \App\ChatMessage::ERROR_STATUS_ERROR;
                        $chatMessage->error_info   = json_encode($response);
                        $chatMessage->save();
                    }

                    return $response;
                }
            } else {
                $domain = "https://api.chat-api.com/instance$instanceId/$link?token=$token";
            }
        }

        $customerrequest_arr['CUSTOMREQUEST'] = 'POST';
        $message_arr['message']               = $message;
        $file_arr['file']                     = $file;

        $log_data = [
            'Message_Data'          => $message_arr,
            'Customer_request_data' => $customerrequest_arr,
            'PostFields'            => $array,
            'file_data'             => $file_arr,
            'logDetail_data'        => $logDetail,
        ];

        $str_log = 'Message :: ' . json_encode($message) . ' || Customer Request :: POST || Post Fields :: ' . json_encode($array) . ' || File :: ' . $file . ' || Log Details :: ' . json_encode($logDetail);

        \Log::channel('chatapi')->debug('cUrl_url:{"' . $domain . " } \nMessage: " . $str_log);

        $curl = curl_init();
        curl_setopt_array($curl, [
            CURLOPT_URL            => $domain,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING       => '',
            CURLOPT_MAXREDIRS      => 10,
            CURLOPT_TIMEOUT        => 300,
            CURLOPT_HTTP_VERSION   => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST  => 'POST',
            CURLOPT_POSTFIELDS     => json_encode($array),
            CURLOPT_HTTPHEADER     => [
                'content-type: application/json',
            ],
        ]);

        $response = curl_exec($curl);
        $err      = curl_error($curl);
        $httpcode = curl_getinfo($curl, CURLINFO_HTTP_CODE);

        curl_close($curl);

        LogRequest::log($startTime, $domain, 'POST', json_encode($array), json_decode($response), $httpcode, \App\Http\Controllers\WhatsAppController::class, 'sendWithThirdApi');

        if ($err) {
            // DON'T THROW EXCEPTION
            //throw new Exception("cURL Error #:" . $err);
            \Log::channel('whatsapp')->debug('(file ' . __FILE__ . ' line ' . __LINE__ . ') cURL Error for number ' . $number . ':' . $err . ' [' . json_encode($logDetail) . '] ');
            if ($chatMessage) {
                $chatMessage->error_status = \App\ChatMessage::ERROR_STATUS_ERROR;
                $chatMessage->error_info   = json_encode(['number' => $number, 'error' => $err]);
                $chatMessage->save();
            }

            return false;
        } else {
            // Log curl response

            $customerrequest_arr['CUSTOMREQUEST'] = 'POST';
            $message_arr1['message']              = $message;
            $file_arr1['file']                    = $file;

            $log_data_send = [
                'Message_Data'   => $message_arr1,
                'file_data'      => $file_arr1,
                'logDetail_data' => $logDetail,
            ];

            $str_log = 'Message :: ' . json_encode($message) . ' || File :: ' . $file . ' || Log Details :: ' . json_encode($logDetail);

            \Log::channel('chatapi')->debug('cUrl:' . $response . "\nMessage: " . $str_log);

            // Json decode response into result
            $result = json_decode($response, true);

            // throw new Exception("Something was wrong with message: " . $response);
            if (! is_array($result) || array_key_exists('sent', $result) && ! $result['sent']) {
                // DON'T THROW EXCEPTION
                //throw new Exception("Something was wrong with message: " . $response);
                \Log::channel('whatsapp')->debug('(file ' . __FILE__ . ' line ' . __LINE__ . ') Something was wrong with the message for number ' . $number . ': ' . $response . ' [' . json_encode($logDetail) . '] ');
                if ($chatMessage) {
                    $chatMessage->error_status = \App\ChatMessage::ERROR_STATUS_ERROR;
                    $chatMessage->error_info   = json_encode(['number' => $number, 'error' => $response]);
                    $chatMessage->save();
                }

                return false;
            } else {
                // Log successful send
                if ($chatMessage) {
                    $chatMessage->error_status = \App\ChatMessage::ERROR_STATUS_SUCCESS;
                    $chatMessage->save();
                }
                \Log::channel('whatsapp')->debug('(file ' . __FILE__ . ' line ' . __LINE__ . ') Message was sent to number ' . $number . ':' . $response . ' [' . json_encode($logDetail) . '] ');
            }
        }

        return $result;
    }

    private function modifyParamsWithMessage($params, $data)
    {
        if (filter_var($data['text'], FILTER_VALIDATE_URL)) {
            // you're good
            $path      = $data['text'];
            $paths     = explode('/', $path);
            $file      = $paths[count($paths) - 1];
            $extension = (isset($data['extension']) ? $data['extension'] : explode('.', $file)[1]);
            $fileName  = uniqid(true) . '.' . $extension;
            $contents  = file_get_contents($path);
            if (file_put_contents(implode(DIRECTORY_SEPARATOR, [\Config::get('apiwha.media_path'), $fileName]), $contents) == false) {
                return false;
            }
            $url                 = implode('/', [\Config::get('app.url'), 'apiwha', 'media', $fileName]);
            $params['media_url'] = $url;
            $params['message']   = '';

            return $params;
        }
        $params['message'] = $data['text'];

        return $params;
    }

    public function updatestatus(Request $request)
    {
        $message         = ChatMessage::find($request->get('id'));
        $message->status = $request->get('status');
        $message->save();

        if ($request->id && $request->status == 5) {
            ChatMessagesQuickData::updateOrCreate([
                'model'    => \App\Customer::class,
                'model_id' => $request->id,
            ], [
                'last_unread_message'    => '',
                'last_unread_message_at' => null,
                'last_unread_message_id' => null,
            ]);
        }

        return response('success');
    }

    public function fixMessageError(Request $request, $id)
    {
        $chat_message = ChatMessage::find($id);

        if ($customer = Customer::find($chat_message->customer_id)) {
            $customer->is_error_flagged = 0;
            $customer->save();

            $messages = ChatMessage::where('customer_id', $customer->id)->where('error_status', '!=', 0)->get();

            foreach ($messages as $message) {
                $message->error_status = 0;
                $message->save();
            }
        }

        return response('success');
    }

    public function resendMessage(Request $request, $id)
    {
        $chat_message = ChatMessage::find($id);
        if ($customer = Customer::find($chat_message->customer_id)) {
            $chat_message->update([
                'resent' => $chat_message->resent + 1,
            ]);

            return response()->json([
                'resent' => $chat_message->resent,
            ]);
        }

        if ($chat_message->erp_user != '' || $chat_message->contact_id != '') {
            $sender = User::find($chat_message->user_id);
            if ($chat_message->erp_user != '') {
                $receiver = User::find($chat_message->erp_user);
            } else {
                $receiver = Contact::find($chat_message->contact_id);
            }

            $phone           = $receiver->phone;
            $whatsapp_number = ($sender) ? $sender->whatsapp_number : null;
            $sending_message = $chat_message->message;

            if (preg_match_all("/Resent ([\d]+) times/i", $sending_message, $match)) {
                $sending_message = preg_replace("/Resent ([\d]+) times/i", 'Resent ' . ($chat_message->resent + 1) . ' times', $sending_message);
            } else {
                $sending_message = 'Resent ' . ($chat_message->resent + 1) . ' times. ' . $sending_message;
            }

            $params = [
                'user_id'           => $chat_message->user_id,
                'number'            => null,
                'task_id'           => $chat_message->task_id,
                'developer_task_id' => $chat_message->developer_task_id,
                'erp_user'          => $chat_message->erp_user,
                'contact_id'        => $chat_message->contact_id,
                'message'           => $sending_message,
                'resent'            => $chat_message->resent + 1,
                'approved'          => 1,
                'status'            => 2,
            ];

            $new_message = ChatMessage::create($params);

            if ($chat_message->hasMedia(config('constants.attach_image_tag'))) {
                foreach ($chat_message->getMedia(config('constants.attach_image_tag')) as $image) {
                    $new_message->attachMedia($image, config('constants.media_tags'));
                }
            }

            if ($task = Task::find($chat_message->task_id)) {
                if (count($task->users) > 0) {
                    if ($task->assign_from == Auth::id()) {
                        foreach ($task->users as $key => $user) {
                            if ($key != 0) {
                                //
                            }
                        }
                    } else {
                        foreach ($task->users as $key => $user) {
                            if ($key != 0) {
                                if ($user->id != Auth::id()) {
                                    //
                                }
                            }
                        }
                    }
                }
            }

            $chat_message->update([
                'resent' => $chat_message->resent + 1,
            ]);
        }

        if ($chat_message->vendor_id != '') {
            $vendor = \App\Vendor::find($chat_message->vendor_id);

            if ($vendor) {
                if ($chat_message->message != '') {
                    //
                }

                $chat_message->update([
                    'resent' => $chat_message->resent + 1,
                ]);
            }
        }

        if ($chat_message->supplier_id != '') {
            $supplier = Supplier::find($chat_message->supplier_id);

            if ($supplier) {
                if ($chat_message->additional_data != '') {
                    $additional_data_arr = json_decode($chat_message->additional_data);
                    $path                = $additional_data_arr->attachment[0];
                    $subject             = 'Product order';
                    $message             = 'Please check below product order request';
                    if ($path != '') {
                        $emailClass = (new PurchaseExport($path, $subject, $message))->build();

                        $email = Email::create([
                            'model_id'        => $supplier->id,
                            'model_type'      => Supplier::class,
                            'from'            => 'buying@amourint.com',
                            'to'              => $supplier->email,
                            'subject'         => $subject,
                            'message'         => $message,
                            'template'        => 'purchase-simple',
                            'additional_data' => json_encode(['attachment' => [$path]]),
                            'status'          => 're-send',
                            'is_draft'        => 0,
                        ]);

                        \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');
                    }
                }

                $chat_message->update([
                    'resent' => $chat_message->resent + 1,
                ]);
            }
        }

        return response()->json([
            'resent' => $chat_message->resent,
        ]);
    }

    public function createGroup($task_id, $group_id, $number, $message, $whatsapp_number)
    {
        $encodedText = $message;
        $startTime   = date('Y-m-d H:i:s', LARAVEL_START);

        if ($whatsapp_number == '919004780634') { // Indian
            $instanceId = '43281';
            $token      = 'yi841xjhrwyrwrc7';
        } elseif ($whatsapp_number == '971502609192') { // YM Dubai
            $instanceId = '62439';
            $token      = 'jdcqh3ladeuvwzp4';
        } else {
            if ($whatsapp_number == '971562744570') { // Solo 06
                $instanceId = '55202';
                $token      = '42ndn0qg5om26vzf';
            } else {
                if ($whatsapp_number == '971547763482') { // 04
                    $instanceId = '55211';
                    $token      = '3b92u5cbg215c718';
                } else {
                    $instanceId = '62439';
                    $token      = 'jdcqh3ladeuvwzp4';
                }
            }
        }

        if ($task_id != null) {
            $id = (string) $task_id;

            $array = [
                'groupName' => $id,
                'phones'    => $number,

            ];
            $link = 'group';
        } else {
            $id = (string) $group_id;

            $array = [
                'groupId'          => $id,
                'participantPhone' => $number,
            ];
            $link = 'addGroupParticipant';
        }

        $curl = curl_init();
        $url  = "https://api.chat-api.com/instance$instanceId/$link?token=$token";

        curl_setopt_array($curl, [
            CURLOPT_URL            => $url,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING       => '',
            CURLOPT_MAXREDIRS      => 10,
            CURLOPT_TIMEOUT        => 300,
            CURLOPT_HTTP_VERSION   => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST  => 'POST',
            CURLOPT_POSTFIELDS     => json_encode($array),
            CURLOPT_HTTPHEADER     => [
                'content-type: application/json',
                // "token: $wa_token"
            ],
        ]);

        $response = curl_exec($curl);
        $err      = curl_error($curl);
        $result   = json_decode($response, true);
        $httpcode = curl_getinfo($curl, CURLINFO_HTTP_CODE);

        curl_close($curl);

        LogRequest::log($startTime, $url, 'POST', json_encode($array), json_decode($response), $httpcode, \App\Http\Controllers\WhatsAppController::class, 'sendBulkNotification');
        if ($err) {
            // DON'T THROW EXCEPTION
            //throw new Exception("cURL Error #:" . $err);
            \Log::channel('whatsapp')->debug('(file ' . __FILE__ . ' line ' . __LINE__ . ') cURL Error for number ' . $number . ':' . $err);

            return false;
        } else {
            $result = json_decode($response, true);
            // throw new Exception("Something was wrong with message: " . $response);
            if (! is_array($result) || array_key_exists('sent', $result) && ! $result['sent']) {
                // DON'T THROW EXCEPTION
                //throw new Exception("Something was wrong with message: " . $response);
                \Log::channel('whatsapp')->debug('(file ' . __FILE__ . ' line ' . __LINE__ . ') Something was wrong with the message for number ' . $response);

                return false;
            } else {
                // Log successful send
                \Log::channel('whatsapp')->debug('(file ' . __FILE__ . ' line ' . __LINE__ . ') Message was sent to number ' . $response);
            }
        }

        return $result;
    }

    public function saveProductFromSupplierIncomingImages($id, $imageUrl)
    {
        //FInd Supplier
        $supplier = Supplier::find($id);

        //get sku
        $lastQuickSellProduct = Product::select('sku')->where('sku', 'LIKE', '%QUICKSELL' . date('yz') . '%')->orderBy('id', 'desc')->first();

        try {
            if ($lastQuickSellProduct) {
                $number = str_ireplace('QUICKSELL', '', $lastQuickSellProduct->sku) + 1;
            } else {
                $number = date('yz') . sprintf('%02d', 1);
            }
        } catch (Exception $e) {
            $number = 0;
        }

        $product                    = new Product;
        $product->name              = 'QUICKSELL';
        $product->sku               = 'QuickSell' . $number;
        $product->size              = '';
        $product->brand             = null;
        $product->color             = '';
        $product->location          = '';
        $product->category          = '';
        $product->supplier          = $supplier->supplier;
        $product->price             = 0;
        $product->price_inr_special = 0;
        $product->stock             = 1;
        $product->quick_product     = 1;
        $product->is_pending        = 0;
        $product->save();
        preg_match_all('#\bhttps?://[^,\s()<>]+(?:\([\w\d]+\)|([^,[:punct:]\s]|/))#', $imageUrl, $match);
        $imageUrl = $match[0][0];
        $jpg      = \Image::make($imageUrl)->encode('jpg');
        $filename = substr($imageUrl, strrpos($imageUrl, '/'));
        $filename = str_replace('/', '', $filename);
        $media    = MediaUploader::fromString($jpg)->useFilename($filename)->upload();
        $product->attachMedia($media, config('constants.media_tags'));

        return true;
    }

    public function delete(Request $request)
    {
        $messageId = $request->get('id', 0);

        if ($messageId) {
            $chatMessage = \App\ChatMessage::where('id', $messageId)->first();
            if ($chatMessage) {
                $chatMessage->delete();
                \App\SuggestedProductList::where('chat_message_id', $messageId)->delete();
            }
        }

        return response()->json(['code' => 200]);
    }

    public function autoCompleteMessages(Request $request)
    {
        $data = AutoCompleteMessage::where('message', 'like', '' . $request->keyword . '%')->pluck('message')->toArray();

        return response()->json(['data' => $data]);
    }

    public function sendemail($message, $model_id, $model_class, $toemail, $chat_id = 0, $subject = null)
    {
        $botReply = \App\ChatbotReply::where('chat_id', $message->id)->get();

        $from_address = config('env.MAIL_FROM_ADDRESS');
        $cc           = '';
        //$subject = null;
        $email_id = 0;
        $m        = \App\ChatMessage::where('id', $chat_id)->first();
        if ($m) {
            if ($m->from_email != '') {
                $from_address = $m->from_email;
            }

            if ($m->to_email != '') {
                $toemail = $m->to_email;
            }

            if ($m->cc_email != '') {
                $cc = $m->cc_email;
            }

            if ($m->email_id != '') {
                $email_id = $m->email_id;
            }
        }

        $message_body = $message->message;

        if ($email_id > 0) {
            $email = \App\Email::where('id', $message->email_id)->first();
            if ($email) {
                $subject = $email->subject;
                $toemail == $email->from;
            }
        }

        $email = \App\Email::create([
            'model_id'         => $model_id,
            'model_type'       => $model_class,
            'from'             => $from_address ?? '',
            'to'               => $toemail,
            'subject'          => $subject,
            'message'          => $message_body,
            'template'         => 'customer-simple',
            'additional_data'  => $model_id,
            'status'           => 'pre-send',
            'store_website_id' => null,
            'cc'               => $cc,
            'is_draft'         => 1,
        ]);

        \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');
    }

    public function webhookOfficial(Request $request)
    {
        $entries = $request['entry'];
        foreach ($entries as $entry) {
            foreach ($entry['changes'] as $change) {
                $businessAccount = WhatsappBusinessAccounts::where('business_phone_number_id', $change['value']['metadata']['phone_number_id'])->first();
                if (isset($change['messages'])) {
                    foreach ($change['messages'] as $message) {
                        $supplier = $this->findSupplierByNumber($message['from']);
                        $vendor   = $this->findVendorByNumber($message['from']);
                        $user     = $this->findUserByNumber($message['from']);
                        $dubbizle = $this->findDubbizleByNumber($message['from']);
                        $contact  = $this->findContactByNumber($message['from']);
                        $customer = $this->findCustomerByNumber($message['from']);
                        $params   = [
                            'unique_id'    => $message['id'],
                            'number'       => $message['from'],
                            'message_type' => $message['type'],
                            'message'      => isset($message['text']) ? $message['text']['body'] : '',
                            'user_id'      => $user != null ? $user->id : null,
                            'contact_id'   => $contact != null ? $contact->id : null,
                            'supplier_id'  => $supplier != null ? $supplier->id : null,
                            'vendor_id'    => $vendor != null ? $vendor->id : null,
                            'dubbizle_id'  => $dubbizle != null ? $dubbizle->id : null,
                            'customer_id'  => $customer != null ? $customer->id : null,
                            'account_id'   => $businessAccount->id,
                        ];
                        ChatMessage::create($params);
                    }
                }
                if (isset($change['statuses'])) {
                    foreach ($change['statuses'] as $status) {
                        $chatMessage = ChatMessage::where('unique_id', $status['id'])->first();
                        if ($chatMessage) {
                            if ($status['status'] === 'sent') {
                                $chatMessage->sent = true;
                                $chatMessage->save();
                            }
                            if ($status['status'] === 'delivered') {
                                $chatMessage->is_delivered = true;
                                $chatMessage->save();
                            }
                            if ($status['status'] === 'read') {
                                $chatMessage->is_read = true;
                                $chatMessage->save();
                            }
                        }
                    }
                }
            }
        }
    }

    public function webhookOfficialVerify(Request $request)
    {
        $verifyToken = 'w59YnmcB4w1tzfxVYlPP';
        $mode        = $request->get('hub.mode');
        $token       = $request->get('hub.verify_token');
        $challenge   = $request->get('hub.challenge');

        // Check if a token and mode were sent
        if ($mode && $token) {
            // Check the mode and token sent are correct
            if ($mode === 'subscribe' && $token === $verifyToken) {
                // Respond with 200 OK and challenge token from the request
                return response()->setStatusCode(200)->setContent($challenge)->send();
            } else {
                // Responds with '403 Forbidden' if verify tokens do not match
                return response()->setStatusCode(403);
            }
        }

        return response()->setStatusCode(403);
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/product_price/ProductPriceController.php 
Content: <?php

namespace App\Http\Controllers\product_price;

use App\Brand;
use App\Product;
use App\Setting;
use App\Category;
use App\Supplier;
use App\StoreWebsite;
use App\PriceOverride;
use App\ProductUpdateLog;
use App\SimplyDutyCountry;
use App\SimplyDutySegment;
use App\Jobs\PushToMagento;
use Illuminate\Http\Request;
use App\Loggers\LogListMagento;
use App\CategorySegmentDiscount;
use App\SimplyDutyCountryHistory;
use Illuminate\Support\Facades\DB;
use Illuminate\Container\Container;
use App\Http\Controllers\Controller;
use Illuminate\Pagination\Paginator;
use Illuminate\Support\Facades\Auth;
use Illuminate\Pagination\LengthAwarePaginator;

class ProductPriceController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request)
    {
        ini_set('memory_limit', -1);

        $categoryIds = Category::pluck('id')->toArray();
        $categories  = Category::whereNotIn('parent_id', $categoryIds)->where('parent_id', '>', 0)->select('id', 'title')->get()->toArray();

        $filter_data = $request->input();
        $skip        = empty($request->page) ? 0 : $request->page;

        $product_list = [];
        if (! empty($request->selectedId)) {
            $products = \App\StoreWebsite::where('store_websites.is_published', 1)
                ->crossJoin('products')
                ->crossJoin('simply_duty_countries')
                ->leftJoin('brands as b', function ($q) {
                    $q->on('b.id', 'products.brand');
                })
                ->leftJoin('categories as c', function ($q) {
                    $q->on('c.id', 'products.category');
                })
                ->leftJoin('category_segments as cs', function ($q) {
                    $q->on('c.category_segment_id', 'cs.id');
                })
                ->leftJoin('scraped_products as sp', function ($q) {
                    $q->on('sp.product_id', 'products.id');
                })
                ->Join('product_suppliers as psu', function ($q) {
                    $q->on('psu.product_id', 'products.id');
                })
                ->select(DB::raw('
                    products.id as pid, 
                    products.name as product_name,
                    b.name as brand_name,
                    b.id as brand_id,
                    cs.name as category_segment,
                    b.brand_segment as brand_segment,
                    c.title as category_name,
                    products.category,
                    products.supplier,
                    products.sku,
                    products.size,
                    products.color,
                    products.suggested_color,
                    products.composition,
                    products.size_eu,
                    products.stock,
                    psu.size_system,
                    status_id,
                    sub_status_id,
                    products.created_at,
                    products.id as pid,
                    simply_duty_countries.country_code as product_country_code,
                    simply_duty_countries.country_name as product_country_name,
                    store_websites.id as store_websites_id,
                    store_websites.website as product_website,
                    products.brand'
                ));
            $products = $products->whereNull('products.deleted_at');

            if (isset($filter_data['country_code'])) {
                $products = $products->where('simply_duty_countries.country_code', $filter_data['country_code']);
            }

            if (isset($filter_data['supplier']) && is_array($filter_data['supplier']) && $filter_data['supplier'][0] != null) {
                $suppliers_list = implode(',', $filter_data['supplier']);
                $products       = $products->whereRaw(\DB::raw("products.id IN (SELECT product_id FROM product_suppliers WHERE supplier_id IN ($suppliers_list))"));
            }

            if (isset($filter_data['brand_names']) && is_array($filter_data['brand_names']) && $filter_data['brand_names'][0] != null) {
                $products = $products->whereIn('brand_id', $filter_data['brand_names']);
            }

            if (isset($filter_data['websites']) && is_array($filter_data['websites']) && $filter_data['websites'][0] != null) {
                $products = $products->whereIn('store_websites.id', $filter_data['websites']);
            }

            if (isset($filter_data['term'])) {
                $term     = $filter_data['term'];
                $products = $products->where(function ($q) use ($term) {
                    $q->where('products.name', 'LIKE', "%$term%")
                        ->orWhere('products.sku', 'LIKE', "%$term%")
                        ->orWhere('c.title', 'LIKE', "%$term%")
                        ->orWhere('b.name', 'LIKE', "%$term%")
                        ->orWhere('products.id', 'LIKE', "%$term%");
                });
            }

            $products = $products->where('products.id', $request->selectedId);

            $products = $products->orderby('products.id', 'desc'); // FOR LATEST PRODUCT

            $products     = $products->skip($skip * 25)->limit(25)->get();
            $product_list = [];
            if (count($products)) {
                foreach ($products as $p) {
                    $product          = Product::find($p->pid);
                    $dutyPrice        = $product->getDuty($p->product_country_code);
                    $category_segment = $p->category_segment != null ? $p->category_segment : $p->brand_segment;
                    $price            = $product->getPrice($p->store_websites_id, $p->product_country_code, null, true, $dutyPrice, null, null, null, isset($product->suppliers_info) ? $product->suppliers_info[0]->price : 0, $category_segment);
                    $ivaPercentage    = \App\Product::IVA_PERCENTAGE;
                    $productPrice     = number_format($price['original_price'], 2, '.', '');
                    $product_list[]   = [
                        'storeWebsitesID'      => $p->store_websites_id,
                        'getPrice'             => $price,
                        'id'                   => $product->id,
                        'sku'                  => $product->sku,
                        'brand'                => isset($p->brand_name) ? $p->brand_name : '-',
                        'brand_id'             => isset($p->brand) ? $p->brand : '0',
                        'segment'              => $category_segment,
                        'website'              => $p->product_website,
                        'eur_price'            => $productPrice,
                        'seg_discount'         => (float) $price['segment_discount'],
                        'segment_discount_per' => (float) $price['segment_discount_per'],
                        'iva'                  => \App\Product::IVA_PERCENTAGE . '%',
                        'net_price'            => $productPrice - (float) $price['segment_discount'] - ($productPrice) * (\App\Product::IVA_PERCENTAGE) / 100,
                        'add_duty'             => $product->getDuty($p->product_country_code) . '%',
                        'add_profit'           => number_format($price['promotion'], 2, '.', ''),
                        'add_profit_per'       => (float) $price['promotion_per'],
                        'final_price'          => number_format($price['total'], 2, '.', ''),
                        'country_code'         => $p->product_country_code,
                        'country_name'         => $p->product_country_name,
                    ];
                }
            }
        }
        $countryGroups = SimplyDutyCountry::getSelectList();
        $cCodes        = $countryGroups;
        if (! empty($request->country_code)) {
            $cCodes = SimplyDutyCountry::where('country_code', $request->country_code)->pluck('country_name', 'country_code')->toArray(); //$request->country_code;
        }

        $suppliers     = [];
        $brands        = [];
        $websites      = StoreWebsite::where('is_published', '1')->get()->pluck('title', 'id')->toArray();
        $storeWebsites = StoreWebsite::select('title', 'id', 'website')->where('is_published', '1');

        $category_segments = \App\CategorySegment::where('status', 1)->get();

        if ($request->websites && ! empty($request->websites)) {
            $storeWebsites = $storeWebsites->whereIn('id', $request->websites);
        }
        $storeWebsites = $storeWebsites->get()->toArray();

        $selected_brands = null;
        if ($request->brand_names) {
            $selected_brands = Brand::select('id', 'name')->whereIn('id', $request->brand_names)->get();
        }

        $selected_suppliers = null;
        if ($request->supplier) {
            $selected_suppliers = Supplier::select('id', 'supplier')->whereIn('id', $request->supplier)->get();
        }

        $selected_websites = null;
        if ($request->websites) {
            $selected_websites = StoreWebsite::select('id', 'title')->whereIn('id', $request->websites)->get();
        }

        if ($request->ajax()) {
            $count = $request->count;
            $view  = view('product_price.index_ajax', compact('product_list', 'count', 'category_segments'))->render();

            return response()->json(['html' => $view, 'page' => $request->page, 'count' => $count]);
        }

        return view('product_price.index', compact('countryGroups', 'product_list', 'suppliers', 'websites', 'brands', 'selected_suppliers', 'selected_brands', 'selected_websites', 'category_segments', 'categories'));
    }

    public function store_website_product_prices(Request $request)
    {
        ini_set('memory_limit', -1);
        $filter_data = $request->input();
        $skip        = empty($request->page) ? 0 : $request->page;
        $products    = \App\StoreWebsiteProductPrice::join('products', 'store_website_product_prices.product_id', 'products.id')
            ->leftJoin('brands as b', function ($q) {
                $q->on('b.id', 'products.brand');
            })
            ->leftJoin('categories as c', function ($q) {
                $q->on('c.id', 'products.category');
            })
            ->leftJoin('category_segments as cs', function ($q) {
                $q->on('c.category_segment_id', 'cs.id');
            })
            ->leftJoin('scraped_products as sp', function ($q) {
                $q->on('sp.product_id', 'products.id');
            })
            ->leftJoin('product_suppliers as psu', function ($q) {
                $q->on('psu.product_id', 'products.id');
            })
            ->leftJoin('store_websites', 'store_websites.id', 'store_website_product_prices.store_website_id')
            ->leftJoin('websites', 'store_website_product_prices.web_store_id', 'websites.id')
            ->select(DB::raw('
                products.id as pid, 
                products.name as product_name,
                b.name as brand_name,
                b.id as brand_id,
                cs.name as category_segment,
                b.brand_segment as brand_segment,
                c.title as category_name,
                products.category,
                products.supplier,
                products.sku,
                products.size,
                products.color,
                products.suggested_color,
                products.composition,
                products.size_eu,
                products.stock,
                psu.size_system,
                status_id,
                sub_status_id,
                products.created_at,
                products.id as pid,
                store_websites.id as store_websites_id,
                store_websites.website as product_website,
                products.brand,
                store_website_product_prices.id as store_website_product_prices_id,
                store_website_product_prices.default_price,
                store_website_product_prices.segment_discount,
                store_website_product_prices.duty_price ,
                store_website_product_prices.override_price,
                store_website_product_prices.status,
                websites.name as countries'
            ));
        if (isset($filter_data['websites']) && is_array($filter_data['websites']) && $filter_data['websites'][0] != null) {
            $products = $products->whereIn('store_websites.id', $filter_data['websites']);
        }
        if (isset($filter_data['country_code'])) {
            $products = $products->where('websites.code', strtolower($filter_data['country_code']));
        }

        if (isset($filter_data['name'])) {
            $products = $products->where('products.sku', $filter_data['name']);
        }

        $products = $products->whereNull('products.deleted_at');

        $page = Paginator::resolveCurrentPage('page');

        $products = Container::getInstance()->makeWith(LengthAwarePaginator::class, [
            'items'       => $products->offset(($page - 1) * 20)->limit(20)->get(),
            'total'       => 5000000,
            'perPage'     => 20,
            'currentPage' => $page,
            'options'     => [
                'path'     => Paginator::resolveCurrentPath(),
                'pageName' => 'page',
            ],
        ]);

        $product_list = [];
        foreach ($products as $p) {
            if (count($products)) {
                $product          = Product::find($p->pid);
                $dutyPrice        = $product->getDuty($p->product_country_code);
                $category_segment = $p->category_segment != null ? $p->category_segment : $p->brand_segment;
                $price            = $product->getPrice($p->store_websites_id, $p->product_country_code, null, true, $dutyPrice, null, null, null, isset($product->suppliers_info[0]) ? $product->suppliers_info[0]->price : 0, $category_segment);
                $ivaPercentage    = \App\Product::IVA_PERCENTAGE;
                $productPrice     = number_format($price['original_price'], 2, '.', '');
                $product_list[]   = [
                    'storeWebsitesID'                 => $p->store_websites_id,
                    'getPrice'                        => $price,
                    'id'                              => $product->id,
                    'sku'                             => $product->sku,
                    'brand'                           => isset($p->brand_name) ? $p->brand_name : '-',
                    'brand_id'                        => isset($p->brand) ? $p->brand : '0',
                    'segment'                         => $category_segment,
                    'website'                         => $p->product_website,
                    'eur_price'                       => $productPrice,
                    'seg_discount'                    => (float) $price['segment_discount'],
                    'segment_discount_per'            => (float) $price['segment_discount_per'],
                    'iva'                             => \App\Product::IVA_PERCENTAGE . '%',
                    'net_price'                       => $productPrice - (float) $price['segment_discount'] - ($productPrice) * (\App\Product::IVA_PERCENTAGE) / 100,
                    'add_duty'                        => $product->getDuty($p->product_country_code) . '%',
                    'add_profit'                      => number_format($price['promotion'], 2, '.', ''),
                    'add_profit_per'                  => (float) $price['promotion_per'],
                    'final_price'                     => number_format($price['total'], 2, '.', ''),
                    'country_code'                    => $p->product_country_code,
                    'country_name'                    => $p->product_country_name,
                    'default_price'                   => $p->default_price,
                    'segment_discount'                => $p->segment_discount,
                    'duty_price'                      => $p->duty_price,
                    'override_price'                  => $p->override_price,
                    'store_website_product_prices_id' => $p->store_website_product_prices_id,
                    'status'                          => $p->status,
                    'default_duty'                    => $p->default_duty,
                    'countries'                       => $p->countries,

                ];
            }
        }
        $countryGroups = SimplyDutyCountry::getSelectList();
        $cCodes        = $countryGroups;
        if (! empty($request->country_code)) {
            $cCodes = SimplyDutyCountry::where('country_code', $request->country_code)->pluck('country_name', 'country_code')->toArray(); //$request->country_code;
        }

        $suppliers     = [];
        $brands        = [];
        $websites      = StoreWebsite::where('is_published', '1')->get()->pluck('title', 'id')->toArray();
        $storeWebsites = StoreWebsite::select('title', 'id', 'website')->where('is_published', '1');
        if ($request->websites && ! empty($request->websites)) {
            $storeWebsites = $storeWebsites->whereIn('id', $request->websites);
        }
        $storeWebsites = $storeWebsites->get()->toArray();

        $selected_brands = null;
        if ($request->brand_names) {
            $selected_brands = Brand::select('id', 'name')->whereIn('id', $request->brand_names)->get();
        }

        $selected_suppliers = null;
        if ($request->supplier) {
            $selected_suppliers = Supplier::select('id', 'supplier')->whereIn('id', $request->supplier)->get();
        }

        $selected_websites = null;
        if ($request->websites) {
            $selected_websites = StoreWebsite::select('id', 'title')->whereIn('id', $request->websites)->get();
        }
        $category_segments = \App\CategorySegment::where('status', 1)->get();

        if ($request->ajax()) {
            $count = $request->count;
            $view  = view('product_price.index_ajax', compact('product_list', 'count', 'category_segments'))->render();

            return response()->json(['html' => $view, 'page' => $request->page, 'count' => $count]);
        }

        return view('product_price.store-website-product-prices', compact('countryGroups', 'product_list', 'suppliers', 'websites', 'brands', 'selected_suppliers', 'selected_brands', 'selected_websites', 'category_segments'));
    }

    public function update_product(Request $request)
    {
        $product_array  = json_decode($request->product_array);
        $response_array = [];
        foreach ($product_array as $key => $p) {
            if ($request->route()->getName() == 'product.pricing.update.add_duty') {
                if ($p->row_id == $request->row_id) {
                    $duty               = SimplyDutyCountry::where('country_code', $p->country_code)->first();
                    $duty->default_duty = str_replace('%', '', $request->add_duty);
                    $duty->save();
                    $add_duty = str_replace('%', '', $request->add_duty);
                }
            } elseif ($request->route()->getName() == 'product.pricing.update.add_profit') {
                if ($p->row_id == $request->row_id) {
                    $ref_product      = Product::find($p->product_id);
                    $category_segment = @$ref_product->categories->categorySegmentId->name == null ? (@$ref_product->brands->brand_segment != null ? $ref_product->brands->brand_segment : null) : $ref_product->categories->categorySegmentId->name;
                    $result           = $ref_product->getPrice($p->storewebsitesid, $p->country_code, null, true, $p->add_duty, null, $request->add_profit, null, isset($ref_product->suppliers_info) ? $ref_product->suppliers_info[0]->price : 0, $category_segment);
                    if ($result['status'] == false) {
                        return response()->json(['status' => false, 'message' => $result['field']]);
                    }
                }
            } else {
                if ($p->row_id == $request->row_id) {
                    $ref_product      = Product::find($p->product_id);
                    $category_segment = @$ref_product->categories->categorySegmentId->name == null ? (@$ref_product->brands->brand_segment != null ? $ref_product->brands->brand_segment : null) : $ref_product->categories->categorySegmentId->name;
                    $ref_product->getPrice($p->storewebsitesid, $p->country_code, null, true, $p->add_duty, (int) str_replace('%', '', $request->seg_discount), null, null, isset($ref_product->suppliers_info) ? $ref_product->suppliers_info[0]->price : 0, $category_segment);
                }
            }

            $product                     = Product::find($p->product_id);
            $category_segment            = @$product->categories->categorySegmentId->name == null ? (@$product->brands->brand_segment != null ? $product->brands->brand_segment : null) : $product->categories->categorySegmentId->name;
            $price                       = $product->getPrice($p->storewebsitesid, $p->country_code, null, true, empty($add_duty) ? $p->add_duty : $add_duty, null, null, 'checked_add_profit', isset($product->suppliers_info) ? $product->suppliers_info[0]->price : 0, $category_segment);
            $arr['status']               = $price['status'];
            $arr['row_id']               = $p->row_id;
            $arr['seg_discount']         = (float) $price['segment_discount'];
            $arr['segment_discount_per'] = (float) $price['segment_discount_per'];
            $arr['add_profit']           = number_format($price['promotion'], 2, '.', '');
            $arr['add_profit_per']       = number_format($price['promotion_per'], 2, '.', '');
            $arr['price']                = number_format($price['total'], 2, '.', '');
            $arr['add_duty']             = empty($add_duty) ? $p->add_duty : $add_duty . '%';
            $response_array[]            = $arr;
        }
        DB::table('category_segment_discounts')->where('id', $request->seg_id)->update(['amount' => $request->seg_discount]);

        return response()->json(['data' => $response_array, 'status' => true]);
    }

    public function genericPricingAll($request)
    {
        $product_price = 100;
        $final_price1  = 100;
        $final_price2  = 100;
        $ids           = $request->all();

        $categoryIds = Category::pluck('id')->toArray();
        $categories  = Category::whereNotIn('parent_id', $categoryIds)
            ->where('parent_id', '>', 0)
            ->select('id', 'title')
            ->orderBy('title', 'asc')
            ->get()->toArray();

        $skip = empty($request->page) ? 0 : $request->page;

        ini_set('memory_limit', -1);
        $product_list = [];

        $countries = SimplyDutyCountry::leftJoin('simply_duty_segments', 'simply_duty_segments.id', '=', 'simply_duty_countries.segment_id')
            ->select('*', 'simply_duty_segments.segment as country_segment');

        if (isset($request->order) && isset($request->input)) {
            if ($request->input == 'csegment') {
                $countries = $countries->orderBy('country_code', $request->order);
            }
        }
        if ($request->country_segment != '') {
            $countries->where('simply_duty_segments.segment', $request->country_segment);
        }

        $countries = $countries->get()->toArray();

        $brands = \App\StoreWebsite::where('store_websites.is_published', 1)
            ->crossJoin('products')
            ->leftJoin('brands', 'brands.id', 'products.brand')
            ->Join('categories', 'categories.id', 'products.category')
            ->leftJoin('category_segments as cs', function ($q) {
                $q->on('categories.category_segment_id', 'cs.id');
            })
            ->whereNotNull('brands.name')
            ->select('brands.id', 'brands.name', 'brands.brand_segment', 'products.category as catId',
                'store_websites.id as store_websites_id', 'store_websites.website as product_website',
                'categories.title as cate_title', 'cs.name as country_segment', 'products.id as pid')
            ->groupBy('categories.id', 'store_websites.id', 'brands.brand_segment')
            ->having(DB::raw('count(*)'), '>=', 1);

        $i = 0;

        if (isset($request->order) && isset($request->input)) {
            if ($request->input == 'category') {
                $brands->orderBy('cate_title', $request->order);
            }

            if ($request->input == 'website') {
                $brands->orderBy('product_website', $request->order);
            }

            if ($request->input == 'bsegment') {
                $brands->orderBy('brands.brand_segment', $request->order);
            }

            if ($request->input == 'csegment') {
                $brands->orderBy('cs.name', $request->order);
            }
        }
        $numcount = 5000;
        $brands   = $brands
            ->skip($skip * Setting::get('pagination'))
            ->limit(Setting::get('pagination') ?? 10)
            ->get()->toArray();

        $countriesCount    = count($countries);
        $category_segments = \App\CategorySegment::where('status', 1)->get();
        if (count($countries) > 0) {
            foreach ($brands as $brand) {
                $country     = $countries[$i];
                $catSegDisc1 = $catSegDisc2 = 0;
                $final_price = $final_price1 = $final_price2 = $product_price;

                foreach ($category_segments as $key => $category_segment) {
                    $price                     = $final_price;
                    $category_segment_discount = \DB::table('category_segment_discounts')->where('brand_id', $brand['id'])->where('category_segment_id', $category_segment->id)->first();
                    if ($category_segment_discount != null) {
                        if ($category_segment_discount->amount != '' && $category_segment_discount->amount_type == 'percentage') {
                            if ($category_segment_discount->amount != '' || $category_segment_discount->amount != 0) {
                                $catDisc = ($price * $category_segment_discount->amount) / 100;
                                $price   = $price - $catDisc;
                            }
                        } elseif ($category_segment_discount->amount_type == 'amount') {
                            if ($category_segment_discount->amount != '' || $category_segment_discount->amount != 0) {
                                $price = $price - $category_segment_discount->amount;
                            }
                        }
                    }

                    if ($key == 0) {
                        $catSegDisc1  = $category_segment_discount;
                        $final_price1 = $price;
                    } elseif ($key == 1) {
                        $catSegDisc2  = $category_segment_discount;
                        $final_price2 = $price;
                    }
                }

                if (\App\Product::IVA_PERCENTAGE != 0) {
                    $IVA          = \App\Product::IVA_PERCENTAGE;
                    $lessIva      = ($final_price1 * $IVA) / 100;
                    $final_price1 = $final_price1 - $lessIva;

                    $lessIva      = ($final_price2 * $IVA) / 100;
                    $final_price2 = $final_price2 - $lessIva;
                }

                if ($country['default_duty'] != '' || $country['default_duty'] != 0) {
                    $dutyDisc     = ($final_price1 * $country['default_duty']) / 100;
                    $final_price1 = $final_price1 + $dutyDisc;

                    $dutyDisc     = ($final_price2 * $country['default_duty']) / 100;
                    $final_price2 = $final_price2 + $dutyDisc;
                }

                $product        = Product::find($brand['pid']);
                $product->price = 100;
                if ($product == null) {
                    continue;
                }
                $dutyPrice        = $product->getDuty($country['country_code']);
                $category_segment = $brand['brand_segment'];
                $price            = $product->getPrice($brand['store_websites_id'], $country['country_code'], null, true, $dutyPrice, null, null, null, 100, $category_segment);

                $cost1      = $final_price1;
                $cost2      = $final_price2;
                $profit     = 0;
                $profit_per = 0;
                if (isset($price['promotion'])) {
                    $profit = number_format($price['promotion'], 2, '.', '');
                }
                if (isset($price['promotion_per'])) {
                    $profit_per = $price['promotion_per'];
                }

                if ($profit) {
                    $profitCost   = ($final_price1 * $profit_per) / 100;
                    $final_price1 = $final_price1 + $profitCost;

                    $profitCost   = ($final_price2 * $profit_per) / 100;
                    $final_price2 = $final_price2 + $profitCost;
                }

                $country['dutySegment'] = isset($brand['country_segment']) ? $brand['country_segment'] : $brand['brand_segment']; //$country['country_code'];

                $categoryDetail = Category::where('id', $brand['catId'])->select('id', 'title')->first();

                $product_list[$categoryDetail->id . '_' . $brand['store_websites_id'] . '_' . $brand['brand_segment']] = [
                    'catId'                      => $categoryDetail ? $categoryDetail->id : '',
                    'categoryName'               => $categoryDetail ? $categoryDetail->title : '',
                    'product'                    => 'Product For Brand',
                    'brandId'                    => $brand['id'],
                    'brandName'                  => $brand['name'],
                    'brandSegment'               => $brand['brand_segment'],
                    'store_websites_id'          => $brand['store_websites_id'],
                    'product_website'            => $brand['product_website'],
                    'country'                    => $country,
                    'product_price'              => 100,
                    'less_IVA'                   => \App\Product::IVA_PERCENTAGE . '%',
                    'final_price1'               => number_format($final_price1, 2, '.', ''),
                    'add_profit'                 => number_format($profit, 2, '.', ''),
                    'add_profit_per'             => (float) $profit_per,
                    'final_price2'               => number_format($final_price2, 2, '.', ''),
                    'cost1'                      => $cost1,
                    'cost2'                      => $cost2,
                    'cate_segment_discount'      => isset($category_segment_discount->amount) ? $category_segment_discount->amount : 0,
                    'cate_segment_discount_type' => isset($category_segment_discount->amount_type) ? $category_segment_discount->amount_type : 0,
                ];

                if ($i < $countriesCount - 1) {
                    $i++;
                } else {
                    $i = 0;
                }

                $product_price = 100;
                $final_price1  = 100;
                $final_price2  = 100;
            }
        }

        return ['product_list' => $product_list, 'category_segments' => $category_segments, 'categories' => $categories, 'numcount' => $numcount];
    }

    public function genericPricing(Request $request)
    {
        $product_price    = 100;
        $final_price      = 100;
        $ids              = $request->all();
        $cats             = StoreWebsite::select('id', 'title')->get();
        $country_segments = SimplyDutySegment::pluck('segment')->toArray();

        $categoryIds = Category::pluck('id')->toArray();
        $categories  = Category::whereNotIn('parent_id', $categoryIds)->where('parent_id', '>', 0)->select('id', 'title')->orderBy('title', 'asc')->get()->toArray();

        $cat_id = isset($ids['id']) ? $ids['id'] : $categories[0]['id'];

        ini_set('memory_limit', -1);
        $product_list = [];

        $countries = SimplyDutyCountry::leftJoin('simply_duty_segments', 'simply_duty_segments.id', '=', 'simply_duty_countries.segment_id')
            ->select('*', 'simply_duty_segments.segment as country_segment');

        if (isset($request->order) && isset($request->input)) {
            if ($request->input == 'csegment') {
                $countries = $countries->orderBy('country_code', $request->order);
            }
        }
        if ($request->country_segment != '') {
            $countries->where('simply_duty_segments.segment', $request->country_segment);
        }
        $countries = $countries->get()->toArray();

        $categoryDetail = Category::where('id', $cat_id)->select('id', 'title')->first();

        $skip = empty($request->page) ? 0 : $request->page;

        $countriesCount    = count($countries);
        $category_segments = \App\CategorySegment::where('status', 1)->get();

        $numcount     = 10;
        $product_list = [];
        if (! empty($request->selectedId)) {
            $brands = \App\StoreWebsite::where('store_websites.is_published', 1)
                ->crossJoin('products')
                ->leftJoin('brands', 'brands.id', 'products.brand')
                ->Join('categories', 'categories.id', 'products.category')
                ->leftJoin('category_segments as cs', function ($q) {
                    $q->on('categories.category_segment_id', 'cs.id');
                })
                ->whereNotNull('brands.name')
                ->select('brands.id', 'brands.name', 'brands.brand_segment', 'products.category as catId',
                    'store_websites.id as store_websites_id', 'store_websites.website as product_website',
                    'categories.title as cate_title', 'cs.name as country_segment', 'products.id as pid')
                ->groupBy('categories.id', 'store_websites.id', 'brands.brand_segment')
                ->having(DB::raw('count(*)'), '>=', 1);

            if ($request->id != '') {
                $brands->where('products.category', $cat_id);
            }

            $brands = $brands->where('products.id', $request->selectedId);

            if ($request->brand_segment != '') {
                $brands->where('brands.brand_segment', $request->brand_segment);
            }

            if ($request->website != '') {
                $brands->where('store_websites.id', $request->website);
            }
            if (isset($request->order) && isset($request->input)) {
                if ($request->input == 'category') {
                    $brands->orderBy('cate_title', $request->order);
                }

                if ($request->input == 'website') {
                    $brands->orderBy('product_website', $request->order);
                }

                if ($request->input == 'bsegment') {
                    $brands->orderBy('brands.brand_segment', $request->order);
                }

                if ($request->input == 'csegment') {
                    $brands->orderBy('cs.name', $request->order);
                }
            }

            $brands = $brands
                ->skip($skip * Setting::get('pagination'))
                ->limit(Setting::get('pagination') ?? 10)
                ->get()->toArray();
            $i = 0;

            if ($countriesCount > 0) {
                foreach ($brands as $brand) {
                    $catSegDisc1  = $catSegDisc2 = 0;
                    $final_price1 = $final_price2 = $product_price;
                    $country      = $countries[$i];

                    foreach ($category_segments as $key => $category_segment) {
                        $price                     = $final_price;
                        $category_segment_discount = \DB::table('category_segment_discounts')->where('brand_id', $brand['id'])->where('category_segment_id', $category_segment->id)->first();
                        if ($category_segment_discount != null) {
                            if ($category_segment_discount->amount != '' && $category_segment_discount->amount_type == 'percentage') {
                                if ($category_segment_discount->amount != '' || $category_segment_discount->amount != 0) {
                                    $catDisc = ($price * $category_segment_discount->amount) / 100;
                                    $price   = $price - $catDisc;
                                }
                            } elseif ($category_segment_discount->amount_type == 'amount') {
                                if ($category_segment_discount->amount != '' || $category_segment_discount->amount != 0) {
                                    $price = $price - $category_segment_discount->amount;
                                }
                            }
                        }

                        if ($key == 0) {
                            $catSegDisc1  = $category_segment_discount;
                            $final_price1 = $price;
                        } elseif ($key == 1) {
                            $catSegDisc2  = $category_segment_discount;
                            $final_price2 = $price;
                        }
                    }

                    if (\App\Product::IVA_PERCENTAGE != 0) {
                        $IVA          = \App\Product::IVA_PERCENTAGE;
                        $lessIva      = ($final_price1 * $IVA) / 100;
                        $final_price1 = $final_price1 - $lessIva;

                        $lessIva      = ($final_price2 * $IVA) / 100;
                        $final_price2 = $final_price2 - $lessIva;
                    }

                    if ($country['default_duty'] != '' || $country['default_duty'] != 0) {
                        $dutyDisc     = ($final_price1 * $country['default_duty']) / 100;
                        $final_price1 = $final_price1 + $dutyDisc;

                        $dutyDisc     = ($final_price2 * $country['default_duty']) / 100;
                        $final_price2 = $final_price2 + $dutyDisc;
                    }

                    $country['dutySegment'] = isset($brand['country_segment']) ? $brand['country_segment'] : $brand['brand_segment'];
                    $product                = Product::find($brand['pid']);
                    $dutyPrice              = $product->getDuty($country['country_code']);
                    $category_segment       = isset($brand['country_segment']) ? $brand['country_segment'] : $brand['brand_segment'];
                    $price                  = $product->getPrice($brand['store_websites_id'], $country['country_code'], null, true, $dutyPrice, null, null, null, isset($product->suppliers_info[0]) ? $product->suppliers_info[0]->price : 0, $category_segment);

                    $cost1      = $final_price1;
                    $cost2      = $final_price2;
                    $profit     = 0;
                    $profit_per = 0;

                    if (isset($price['promotion'])) {
                        $profit = number_format($price['promotion'], 2, '.', '');
                    }
                    if (isset($price['promotion_per'])) {
                        $profit_per = $price['promotion_per'];
                    }

                    if ($profit) {
                        $profitCost   = ($final_price1 * $profit_per) / 100;
                        $final_price1 = $final_price1 + $profitCost;

                        $profitCost   = ($final_price2 * $profit_per) / 100;
                        $final_price2 = $final_price2 + $profitCost;
                    }

                    $product_list[$categoryDetail->id . '_' . $brand['store_websites_id'] . '_' . $brand['brand_segment']] = [
                        'catId'                      => $categoryDetail->id,
                        'categoryName'               => $categoryDetail->title,
                        'product'                    => 'Product For Brand',
                        'brandId'                    => $brand['id'],
                        'brandName'                  => $brand['name'],
                        'brandSegment'               => $brand['brand_segment'],
                        'store_websites_id'          => $brand['store_websites_id'],
                        'product_website'            => $brand['product_website'],
                        'country'                    => $country,
                        'product_price'              => 100,
                        'less_IVA'                   => \App\Product::IVA_PERCENTAGE . '%',
                        'cost1'                      => $cost1,
                        'cost2'                      => $cost2,
                        'final_price1'               => number_format($final_price1, 2, '.', ''),
                        'add_profit'                 => number_format($profit, 2, '.', ''),
                        'add_profit_per'             => (float) $profit_per,
                        'final_price2'               => number_format($final_price2, 2, '.', ''),
                        'cate_segment_discount'      => isset($category_segment_discount->amount) ? $category_segment_discount->amount : 0,
                        'cate_segment_discount_type' => isset($category_segment_discount->amount_type) ? $category_segment_discount->amount_type : 0,
                    ];

                    if ($i < $countriesCount - 1) {
                        $i++;
                    } else {
                        $i = 0;
                    }

                    $product_price = 100;
                    $final_price1  = 100;
                    $final_price2  = 100;
                }
            }
        }

        if ($request->ajax()) {
            $count = $request->count;
            $view  = view('product_price.generic_price_ajax', compact('product_list', 'category_segments'))->render();

            return response()->json(['html' => $view, 'page' => $request->page, 'count' => $count]);
        }

        return view('product_price.generic_price', compact('product_list', 'category_segments', 'country_segments', 'categories', 'cats', 'numcount'));
    }

    public function updateProduct(Request $request)
    {
        if (isset($request->segmentId1)) {
            $catSegDiscount = CategorySegmentDiscount::where(['category_segment_id' => $request->segmentId1, 'brand_id' => $request->brandId])->first();
            if ($request->segmentprice1 != null and $request->segmentprice1 > 0) {
                if ($catSegDiscount == null) {
                    CategorySegmentDiscount::create(['category_segment_id' => $request->segmentId1, 'amount' => $request->segmentprice1, 'brand_id' => $request->brandId]);
                } else {
                    $catSegDiscount->update(['amount' => $request->segmentprice1]);
                }
            }
        }

        if (isset($request->segmentId2)) {
            $catSegDiscount = CategorySegmentDiscount::where(['category_segment_id' => $request->segmentId2, 'brand_id' => $request->brandId])->first();
            if ($request->segmentprice2 != null and $request->segmentprice2 > 0) {
                if ($catSegDiscount == null) {
                    CategorySegmentDiscount::create(['category_segment_id' => $request->segmentId2, 'amount' => $request->segmentprice2, 'brand_id' => $request->brandId]);
                } else {
                    $catSegDiscount->update(['amount' => $request->segmentprice2]);
                }
            }
        }
        if (isset($request->default_duty)) {
            $duty               = SimplyDutyCountry::find($request->countryId);
            $duty->default_duty = $request->default_duty;

            $data = [
                'simply_duty_countries_id' => $duty->id,
                'old_segment'              => $duty->segment_id,
                'new_segment'              => $duty->segment_id,
                'old_duty'                 => $duty->default_duty,
                'new_duty'                 => $request->input('duty'),
                'updated_by'               => Auth::user()->id,

            ];
            $duty->status = 0;
            SimplyDutyCountryHistory::insert($data);
            $dutyPricesProducts = 0;
            if ($duty->save()) {
                $amount = $request->input('duty');
                $code   = $duty->country_code;
                $ps     = \App\StoreWebsiteProductPrice::select('store_website_product_prices.id', 'store_website_product_prices.duty_price',
                    'store_website_product_prices.product_id', 'store_website_product_prices.store_website_id', 'websites.code')
                    ->leftJoin('websites', 'store_website_product_prices.web_store_id', 'websites.id')
                    ->where('websites.code', strtolower($code))
                    ->get(); //dd($ps);
                if ($ps) {
                    foreach ($ps as $p) {
                        \App\StoreWebsiteProductPrice::where('id', $p->id)->update(['duty_price' => $amount, 'status' => 0]);
                        $note = 'Country Duty changed  from ' . $p->duty_price . ' To ' . $amount;
                        \App\StoreWebsiteProductPriceHistory::insert(['sw_product_prices_id' => $p->id, 'updated_by' => Auth::id(), 'notes' => $note, 'created_at' => date('Y-m-d H:i:s')]);
                    }
                }
                $dutyPricesProducts = count($ps);
            }

            if ($request->add_profit > 0) {
                $priceRecords       = null;
                $brand              = $request->brand_segment;
                $category           = $request->input('catId');
                $country            = $request->input('country_code');
                $priceModal         = \App\PriceOverride::where('store_website_id', $request->websiteId);
                $updated_add_profit = $request->add_profit;
                if (! empty($brand) && ! empty($category) && ! empty($country)) {
                    $priceRecords = $priceModal->where('country_code', $country)->where('brand_segment', $brand)->where('category_id', $category)->first();
                }

                if (! $priceRecords) {
                    $priceModal   = \App\PriceOverride::where('store_website_id', $request->websiteId);
                    $priceRecords = $priceModal->where(function ($q) use ($brand, $category, $country) {
                        $q->orWhere(function ($q) use ($brand, $category) {
                            $q->where('brand_segment', $brand)->where('category_id', $category);
                        })->orWhere(function ($q) use ($brand, $country) {
                            $q->where('brand_segment', $brand)->where('country_code', $country);
                        })->orWhere(function ($q) use ($country, $category) {
                            $q->where('country_code', $country)->where('category_id', $category);
                        });
                    })->first();
                }

                if (! $priceRecords) {
                    $priceModal   = \App\PriceOverride::where('store_website_id', $request->websiteId);
                    $priceRecords = $priceModal->where('brand_segment', $brand)->first();
                }

                if (! $priceRecords) {
                    $priceModal   = \App\PriceOverride::where('store_website_id', $request->websiteId);
                    $priceRecords = $priceModal->where('category_id', $category)->first();
                }

                if (! $priceRecords) {
                    $priceModal   = \App\PriceOverride::where('store_website_id', $request->websiteId);
                    $priceRecords = $priceModal->where('country_code', $country)->first();
                }
                $updated = 0;
                if ($priceRecords) {
                    if ($updated_add_profit and $priceRecords->type == 'PERCENTAGE') {
                        $updated_add_profit_row = \DB::table('price_overrides')->where('id', $priceRecords->id)->update(
                            [
                                'calculated' => $updated_add_profit >= 0 ? '+' : '-',
                                'value'      => $updated_add_profit,
                            ]
                        );
                        $updated = 1;
                    }
                }
                if ($updated == 0) {
                    PriceOverride::create(['store_website_id' => $request->websiteId, 'brand_id' => $request->input('brandId'), 'category_id' => $request->input('catId'),
                        'country_code'                        => $request->input('country_code'), 'type' => 'PERCENTAGE', 'calculated' => '+', 'value' => $request->add_profit, ]);
                }
            }
            $ps = \App\Product::select('products.id', 'store_website_product_prices.store_website_id')
                ->leftJoin('store_website_product_prices', 'store_website_product_prices.product_id', '=', 'products.id')
                ->where('store_website_id', $request->input('websiteId'))
                ->where(function ($query) use ($request) {
                    $query->where('brand', $request->input('brandId'))
                        ->orWhere('category', $request->input('catId'));
                })->select('products.id as product_id', 'products.name as product_name', 'store_website_product_prices.store_website_id')->groupBy('products.id')->get();

            foreach ($ps as $p) {
                ProductUpdateLog::create(['store_website_id' => $p->store_website_id, 'created_by' => \Auth::id(), 'product_id' => $p->product_id, 'log' => $p->product_name . ' updated.']);
            }
            foreach ($ps as $p) {
                $this->pushToMagento($p->product_id, $p->store_website_id);
            }
        }

        return ['status' => true, 'count' => count($ps) + $dutyPricesProducts];
    }

    public function updateProductPrice(Request $request)
    {
        if ($request->route()->getName() == 'updateDutyPrice') {
            $duty               = SimplyDutyCountry::find($request->countryId);
            $duty->default_duty = $request->dutyPrice;
            $duty->save();
        } elseif ($request->route()->getName() == 'updateSegmentPrice') {
            $catSegDiscount = CategorySegmentDiscount::where(['category_segment_id' => $request->segmentId, 'brand_id' => $request->brandId])->first();
            if ($catSegDiscount == null) {
                CategorySegmentDiscount::create(['category_segment_id' => $request->segmentId, 'amount' => $request->price, 'brand_id' => $request->brandId]);
            } else {
                $catSegDiscount->update(['amount' => $request->price]);
            }
        }

        return json_encode(['status' => true]);
    }

    public function approve(Request $request)
    {
        $ids = $request->ids;
        $ids = explode(',', $ids);
        for ($i = 0; $i < count($ids); $i++) {
            if ($ids[$i] > 0) {
                \App\StoreWebsiteProductPrice::where('id', $ids[$i])->update(['status' => 1]);
            }
        }

        return response()->json(['code' => 200, 'message' => 'Approved Successfully']);
    }

    public function storewebsiteproductpriceshistory(Request $request)
    {
        $id      = $request->id;
        $history = \App\StoreWebsiteProductPriceHistory::where('sw_product_prices_id', $id)->orderBy('created_at', 'desc')->get();
        $html    = "<table class='table table-bordered table-striped'> <thead><tr><th>Date</th><th>Notes</th></thead> <tbody>";
        foreach ($history as $h) {
            $html .= '<tr><td>' . $h->created_at . '</td>';
            $html .= '<td>' . $h->notes . '</td></tr>';
        }
        $html .= ' </tbody> </table>';

        echo $html;
    }

    public function update_store_website_product_prices($code, $amount)
    {
        $ps = \App\StoreWebsiteProductPrice::select('store_website_product_prices.id', 'store_website_product_prices.duty_price',
            'store_website_product_prices.product_id', 'store_website_product_prices.store_website_id', 'websites.code')
            ->leftJoin('websites', 'store_website_product_prices.web_store_id', 'websites.id')
            ->where('websites.code', strtolower($code))
            ->get();
        if ($ps) {
            foreach ($ps as $p) {
                \App\StoreWebsiteProductPrice::where('id', $p->id)->update(['duty_price' => $amount, 'status' => 0]);
                $note = 'Country Duty changed  from ' . $p->duty_price . ' To ' . $amount;
                $this->pushToMagento($p->product_id, $p->store_website_id);
                \App\StoreWebsiteProductPriceHistory::insert(['sw_product_prices_id' => $p->id, 'updated_by' => Auth::id(), 'notes' => $note, 'created_at' => date('Y-m-d H:i:s')]);
            }
        }
    }

    public function update_store_website_product_segment($code, $segmentDiscount)
    {
        $ps = \App\StoreWebsiteProductPrice::select('store_website_product_prices.id', 'store_website_product_prices.duty_price', 'websites.code')
            ->leftJoin('websites', 'store_website_product_prices.web_store_id', 'websites.id')
            ->where('websites.code', strtolower($code))
            ->get(); //dd($ps);
        if ($ps) {
            foreach ($ps as $p) {
                \App\StoreWebsiteProductPrice::where('id', $p->id)->update(['segment_discount' => $segmentDiscount, 'status' => 0, 'created_at' => date('Y-m-d H:i:s')]);
            }
        }
    }

    public function pushToMagento($productId, $websiteId)
    {
        $product = \App\Product::find($productId);

        if ($product) {
            $website = StoreWebsite::where('id', $websiteId)->first();
            if ($website == null) {
                \Log::channel('productUpdates')->info('Product started ' . $product->id . ' No website found');
                $msg = 'No website found for  Brand: ' . $product->brand . ' and Category: ' . $product->category;
                echo $msg;
                exit;
            } else {
                $i = 1;

                if ($website) {
                    // testing
                    \Log::channel('productUpdates')->info('Product started website found For website' . $website->website);
                    $log = LogListMagento::log($product->id, 'Start push to magento for product id ' . $product->id, 'info', $website->id);
                    //currently we have 3 queues assigned for this task.
                    if ($i > 3) {
                        $i = 1;
                    }
                    $log->queue = \App\Helpers::createQueueName($website->title);
                    $log->save();
                    PushToMagento::dispatch($product, $website, $log)->onQueue($log->queue);
                    $i++;
                }
            }
        }
    }

    public function productUpdateLogs(Request $request)
    {
        $productLogs = ProductUpdateLog::leftJoin('users', 'users.id', '=', 'product_update_logs.created_by')
            ->select('product_update_logs.*', 'users.name as product_updated_by')->orderBy('product_update_logs.id', 'desc')->paginate(20);

        if ($request->ajax()) {
            return view('logging.partials.product_update_logs', compact('productLogs'));
        }

        return view('logging.product_update_logs', compact('productLogs'));
    }

    public function store_website_product_skus(Request $request)
    {
        if (! empty($request['term'])) {
            $dataDropdown = Product::where('sku', 'LIKE', '%' . $request['term'] . '%')->pluck('sku', 'id')->toArray();
            echo json_encode($dataDropdown);
        }
    }

    public function getProductAutocomplete(Request $request)
    {
        $input = $_GET['term'];

        $products = [];
        if (! empty($input)) {
            $products = Product::where('id', 'like', '%' . $input . '%')->orWhere('sku', 'like', '%' . $input . '%')->pluck('sku', 'id');
        }

        return response()->json($products);
    }

    public function getProductGenericAutocomplete(Request $request)
    {
        $input = $_GET['term'];

        $products = [];
        if (! empty($input)) {
            $products = Product::where('id', 'like', '%' . $input . '%')->orWhere('sku', 'like', '%' . $input . '%')->pluck('sku', 'id');
        }

        return response()->json($products);
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/scrapperPhyhon.php 
Content: <?php

namespace App\Http\Controllers;

use App\User;
use Validator;
use App\BugType;
use App\Setting;
use App\Website;
use App\BugStatus;
use Carbon\Carbon;
use App\BugSeverity;
use App\scraperImags;
use App\StoreWebsite;
use App\WebsiteStore;
use Dompdf\Exception;
use GuzzleHttp\Client;
use App\BugEnvironment;
use App\SiteDevelopment;
use Illuminate\Http\Request;
use App\SiteDevelopmentCategory;
use Illuminate\Support\Facades\DB;

class scrapperPhyhon extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request)
    {
        $images = new scraperImags();
        $images = $images->selectRaw('count(scraper_imags.id) as total,scraper_imags.website_id,store_website , date(scraper_imags.created_at) as date_created_at');
        if ($request->store_website_id > 0) {
            $images = $images->where('store_website', $request->store_website_id);
        }
        if ($request->device != '') {
            $images = $images->where('device', $request->device);
        }

        $images = $images->groupBy('scraper_imags.website_id', 'store_website', DB::raw('date(scraper_imags.created_at)'));
        $images = $images->orderByRaw('scraper_imags.created_at DESC, store_website ASC, scraper_imags.website_id ASC');
        $images = $images->paginate(Setting::get('pagination'));

        foreach ($images as $image) {
            $Websites = new Website();
            $Websites = $Websites->selectRaw('website_store_views.name as lang,website_stores.name as store_name,website_stores.id as website_stores_id,website_store_views.id as website_store_views_id,websites.id as website_table_id,website_stores.is_default as website_stores_default,website_stores.is_flag as website_stores_flag');
            $Websites = $Websites->join('website_stores', 'websites.id', '=', 'website_stores.website_id');
            $Websites = $Websites->join('website_store_views', 'website_store_views.website_store_id', '=', 'website_stores.id')
                ->where('website_store_views.code', $image->website_id)->where('websites.store_website_id', $image->store_website)->first();
            if ($Websites) {
                $image->lang                   = $Websites->lang;
                $image->store_name             = $Websites->store_name;
                $image->website_stores_id      = $Websites->website_stores_id;
                $image->website_store_views_id = $Websites->website_store_views_id;
                $image->website_table_id       = $Websites->website_table_id;
                $image->website_stores_default = $Websites->website_stores_default;
                $image->website_stores_flag    = $Websites->website_stores_flag;
            }

            $desktop = scraperImags::selectRaw('count(id) as desktop')->where('website_id', $image->website_id)
                ->where('store_website', $image->store_website)->where('device', 'desktop')->whereRaw('date(created_at) = "' . $image->date_created_at . '"')
                ->groupBy('website_id', 'store_website', DB::raw('date(created_at)'))->first();

            $mobile = scraperImags::selectRaw('count(id) as mobile')->where('website_id', $image->website_id)
                ->where('store_website', $image->store_website)->where('device', 'mobile')->whereRaw('date(created_at) = "' . $image->date_created_at . '"')
                ->groupBy('website_id', 'store_website', DB::raw('date(created_at)'))->first();

            $tablet = scraperImags::selectRaw('count(id) as tablet')->where('website_id', $image->website_id)
                ->where('store_website', $image->store_website)->where('device', 'tablet')->whereRaw('date(created_at) = "' . $image->date_created_at . '"')
                ->groupBy('website_id', 'store_website', DB::raw('date(created_at)'))->first();

            $image->desktop = isset($desktop->desktop) ? $desktop->desktop : 0;
            $image->mobile  = isset($mobile->mobile) ? $mobile->mobile : 0;
            $image->tablet  = isset($tablet->tablet) ? $tablet->tablet : 0;
        }

        $query = $request->search;

        $allWebsites = Website::pluck('name', 'id');

        $storewebsite     = \App\StoreWebsite::pluck('title', 'id');
        $storewebsiteUrls = \App\StoreWebsite::pluck('website', 'id');

        $current_date = Carbon::now()->format('Y-m-d');

        $startDate = $current_date;
        $endDate   = $current_date;

        return view('scrapper-phyhon.list', compact('images', 'allWebsites', 'request', 'query', 'storewebsite', 'current_date', 'startDate', 'endDate', 'storewebsiteUrls'));
    }

    public function listImages(Request $request)
    {
        $store_id = $request->id;

        $oldDate    = null;
        $count      = 0;
        $images     = [];
        $website_id = 0;

        $categories = \App\SiteDevelopmentCategory::orderBy('title', 'asc')->get();
        $webStore   = \App\WebsiteStore::where('id', $store_id)->first();

        if ($webStore) {
            $list       = Website::where('id', $webStore->website_id)->first();
            $website_id = $list->id;

            $website_store_views = \App\WebsiteStoreView::where('website_store_id', $webStore->id)->first();

            if ($website_store_views) {
                $images = \App\scraperImags::where('store_website', $list->store_website_id)
                    ->where('website_id', $request->code); // this is language code. dont be confused with column name

                if (isset($request->startDate) && isset($request->endDate)) {
                    $images = $images->whereDate('created_at', '>=', date($request->startDate))
                        ->whereDate('created_at', '<=', date($request->endDate));
                } else {
                    //
                }

                if (isset($request->device) && ($request->device == 'mobile' || $request->device == 'tablet')) {
                    $images = $images->where('device', $request->device);
                } elseif ($request->device == 'desktop') {
                    $images = $images->orWhereNull('device')->whereNotIn('device', ['mobile', 'tablet']);
                }

                if (! empty($request->si_status)) {
                    if ($request->si_status == 1) {
                        $images = $images->where('si_status', 1);
                    } elseif ($request->si_status == 2) {
                        $images = $images->where('si_status', 2);
                    } elseif ($request->si_status == 3) {
                        $images = $images->where('si_status', 3);
                    } elseif ($request->si_status == 4) {
                        $images = $images->where('manually_approve_flag', 1);
                    } else {
                        $images = $images->where('si_status', 1);
                    }
                }

                $images = $images->paginate(Setting::get('pagination'));
            }
        }

        $allWebsites = Website::orderBy('name', 'ASC')->get();

        $allLanguages = Website::orderBy('name', 'ASC')->get();

        $startDate = $request->startDate;
        $endDate   = $request->endDate;
        if ($request->ajax()) {
            $this->listImagesApprove($request);
            $view_path = 'scrapper-phyhon.list-image-products_ajax';
        } else {
            $view_path = 'scrapper-phyhon.list-image-products';
        }

        $bugStatuses      = BugStatus::get();
        $bugEnvironments  = BugEnvironment::get();
        $bugSeveritys     = BugSeverity::get();
        $bugTypes         = BugType::get();
        $users            = User::get();
        $filterCategories = SiteDevelopmentCategory::orderBy('title')->pluck('title')->toArray();
        $filterWebsites   = StoreWebsite::orderBy('website')->get();

        return view($view_path, compact('images', 'website_id', 'allWebsites', 'categories', 'startDate', 'endDate', 'bugTypes', 'bugEnvironments', 'bugSeveritys', 'bugStatuses', 'filterCategories', 'users', 'filterWebsites'));
    }

    public function listImagesApprove($requestData)
    {
        $store_id = $requestData->id;

        $requestData->page = ($requestData->page - 1);

        $oldDate    = null;
        $count      = 0;
        $images     = [];
        $website_id = 0;

        $webStore = \App\WebsiteStore::where('id', $store_id)->first();

        if ($webStore) {
            $list       = Website::where('id', $webStore->website_id)->first();
            $website_id = $list->id;

            $website_store_views = \App\WebsiteStoreView::where('website_store_id', $webStore->id)->first();

            if ($website_store_views) {
                $images = \App\scraperImags::where('store_website', $list->store_website_id)
                    ->where('website_id', $requestData->code); // this is language code. dont be confused with column name

                if (isset($requestData->startDate) && isset($requestData->endDate)) {
                    $images = $images->whereDate('created_at', '>=', date($requestData->startDate))
                        ->whereDate('created_at', '<=', date($requestData->endDate));
                } else {
                    //
                }

                if (isset($requestData->device) && ($requestData->device == 'mobile' || $requestData->device == 'tablet')) {
                    $images = $images->where('device', $requestData->device);
                } elseif ($requestData->device == 'desktop') {
                    $images = $images->orWhereNull('device')->whereNotIn('device', ['mobile', 'tablet']);
                }

                if (! empty($requestData->si_status)) {
                    if ($requestData->si_status == 1) {
                        $images = $images->where('si_status', 1);
                    } elseif ($requestData->si_status == 2) {
                        $images = $images->where('si_status', 2);
                    } elseif ($requestData->si_status == 3) {
                        $images = $images->where('si_status', 3);
                    } elseif ($requestData->si_status == 4) {
                        $images = $images->where('manually_approve_flag', 1);
                    } else {
                        $images = $images->where('si_status', 1);
                    }
                }

                $images->update(['si_status' => 2]);

                $images = $images->paginate(Setting::get('pagination'));
            }
        }
    }

    public function setDefaultStore(int $website = 0, int $store = 0, $checked = 0)
    {
        if ($website && $store) {
            try {
                if ($checked) {
                    WebsiteStore::where('website_id', $website)->update(['is_default' => 0]);
                }

                $store = WebsiteStore::find($store);

                $store->is_default = $checked;

                $store->save();

                $response = ['status' => 1, 'message' => 'The store state is changed.'];
            } catch (Exception $e) {
                $response = ['status' => 0, 'message' => $e->getMessage()];
            }

            return $response;
        }
    }

    public function setFlagStore(int $website = 0, int $store = 0, $checked = 0)
    {
        if ($website && $store) {
            try {
                if ($checked) {
                    WebsiteStore::where('is_flag', $website)->update(['is_flag' => 0]);
                }

                $store = WebsiteStore::find($store);

                $store->is_flag = $checked;

                $store->save();

                $response = ['status' => 1, 'message' => 'Url Flagged state has changed.'];
            } catch (Exception $e) {
                $response = ['status' => 0, 'message' => $e->getMessage()];
            }

            return $response;
        }
    }

    public function websiteStoreList(int $website = 0)
    {
        try {
            if ($website) {
                $stores = WebsiteStore::where('website_id', $website)->select('name', 'id')->get();

                $response = ['status' => 1, 'list' => $stores];
            }
        } catch (Exception $e) {
            $response = ['status' => 0, 'message' => $e->getMessage()];
        }

        return $response;
    }

    public function storeLanguageList(int $store = 0)
    {
        try {
            if ($store) {
                $language = \App\WebsiteStoreView::where('website_store_id', $store)->select('name', 'code', 'id')->get();

                $response = ['status' => 1, 'list' => $language];
            }
        } catch (Exception $e) {
            $response = ['status' => 0, 'message' => $e->getMessage()];
        }

        return $response;
    }

    public function imageSave(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'country_code'  => 'required',
            'image'         => 'required|valid_base',
            'image_name'    => 'required',
            'store_website' => 'required|exists:store_websites,magento_url',
            'device'        => 'required|in:desktop,mobile,tablet',
        ]);

        if ($validator->fails()) {
            return response()->json([
                'code'    => 422,
                'message' => 'Invalid request',
                'error'   => $validator->errors(),
            ]);
        }
        $StoreWebsite = \App\StoreWebsite::where('magento_url', $request->store_website)->first();

        $coordinates = $request->coordinates;

        if (is_array($coordinates)) {
            $coordinates = implode(',', $request->coordinates);
        } else {
            $coordinates = implode(',', json_decode($request->coordinates, true));
        }

        // For Height Width Of Base64
        $binary = \base64_decode(\explode(',', $request->image)[0]);
        $data   = \getimagesizefromstring($binary);
        $width  = $data[0];
        $height = $data[1];

        if ($this->saveBase64Image($request->image_name, $request->image)) {
            $image_parts = explode('_', $request->image_name);
            $image_date  = $image_parts[2];

            $newImage = [
                'website_id'    => $request->country_code,
                'store_website' => $StoreWebsite->id ?? 0,
                'img_name'      => $request->image_name,
                'img_url'       => $request->image_name,
                'device'        => (isset($request->device) ? $request->device : 'desktop'),
                'coordinates'   => $coordinates,
                'height'        => $height,
                'width'         => $width,
                'url'           => $request->url,
                'scrap_date'    => $image_parts[2],
                'created_at'    => \Carbon\Carbon::now(),
                'updated_at'    => \Carbon\Carbon::now(),
            ];

            scraperImags::insert($newImage);

            return response()->json(['code' => 200, 'message' => 'Image successfully saved']);
        } else {
            return response()->json(['code' => 500, 'message' => 'Something went wrong!']);
        }
    }

    public function saveBase64Image($file_name, $base64Image)
    {
        try {
            $base64Image = trim($base64Image);
            $base64Image = str_replace('data:image/png;base64,', '', $base64Image);
            $base64Image = str_replace('data:image/jpg;base64,', '', $base64Image);
            $base64Image = str_replace('data:image/jpeg;base64,', '', $base64Image);
            $base64Image = str_replace('data:image/gif;base64,', '', $base64Image);
            $base64Image = str_replace(' ', '+', $base64Image);
            $imageData   = base64_decode($base64Image);

            // //Set image whole path here
            $filePath = public_path('scrappersImages') . '/' . $file_name;
            file_put_contents($filePath, $imageData);

            return true;
        } catch (\Throwable $th) {
            dd($th->getMessage());
            \Log::error('scrapper_images :: ' . $th->getMessage());

            return false;
        }
    }

    public function callScrapper(Request $request)
    {
        $client        = new Client();
        $res           = null;
        $err           = null;
        $store_website = \App\StoreWebsite::find($request->webName);
        $log_data      = ['user_id' => \Auth::id(), 'action' => $request->data_name, 'website' => $request->webName, 'device' => $request->type, 'created_at' => Carbon::now(), 'updated_at' => Carbon::now()];
        try {
            $api_host = config('env.PYTHON_SCRAPPER_API');

            $url  = $api_host . $request->data_name;
            $data = [
                'type' => $request->type,
                'name' => $store_website->title,
            ];
            if ($request->webName != null && $request->is_flag != null) {
                $flagUrls        = \App\scraperImags::where('store_website', $request->webName)->where('is_flaged_url', '1')->select('url')->get();
                $data['flagged'] = true;
                $count           = 1;
                $fUrl            = '';
                foreach ($flagUrls as $flagUrl) {
                    $fUrl .= $flagUrl['url'];
                    if ($count < count($flagUrls)) {
                        $fUrl .= ',';
                    }
                    $count++;
                }
                $data['urls'] = $fUrl;
            }
            $log_data['request'] = json_encode($data);
            $log_data['url']     = $url;

            $response = $client->post($url, [
                'json' => $data,
            ]);
            $res                  = $response->getBody()->getContents();
            $log_data['response'] = json_encode($res);
        } catch (\GuzzleHttp\Exception\RequestException $e) {
            $err                  = $e->getResponse()->getBody()->getContents();
            $log_data['response'] = json_encode($err);
        }
        \Log::info($log_data);
        DB::table('scrapper_python_action_logs')->insert($log_data);

        return response()->json(['message' => $res, 'err' => $err]);
    }

    public function imageRemarkStore(Request $request)
    {
        $store_website    = \App\Website::find($request->website_id);
        $cat_id           = $request->cat_id;
        $remark           = $request->remark;
        $site_development = SiteDevelopment::where('site_development_category_id', $cat_id)->where('website_id', $store_website->store_website_id)->orderBy('id', 'DESC');
        $sd               = $site_development->first();
        if ($site_development->count() === 0) {
            $sd                               = new SiteDevelopment;
            $sd->site_development_category_id = $cat_id;
            $sd->website_id                   = $store_website->store_website_id;
            $sd->save();
        }

        $store_development_remarks                       = new \App\StoreDevelopmentRemark;
        $store_development_remarks->remarks              = $remark;
        $store_development_remarks->store_development_id = $sd->id;
        $store_development_remarks->user_id              = \Auth::id();
        $store_development_remarks->save();

        return response()->json(['message' => 'Remark Saved Successfully', 'remark' => $store_development_remarks, 'username' => \Auth::user()->name]);
    }

    public function changeCatRemarkList(Request $request)
    {
        $store_website    = \App\Website::find($request->website_id);
        $site_development = SiteDevelopment::where('site_development_category_id', $request->remark)->where('website_id', $store_website->store_website_id)->get();
        $remarks          = [];
        if (count($site_development) > 0) {
            foreach ($site_development as $val) {
                $sd_remarks = \App\StoreDevelopmentRemark::join('users as usr', 'usr.id', 'store_development_remarks.user_id')
                    ->where('store_development_remarks.store_development_id', $val->id)
                    ->select('store_development_remarks.*', 'usr.name as username')
                    ->get()->toArray();
                array_push($remarks, $sd_remarks);
            }
        }

        return response()->json(['remarks' => $remarks]);
    }

    public function history(Request $request)
    {
        $all_data = \App\scraperImags::join('store_websites', 'store_websites.id', 'scraper_imags.store_website')
            ->select('store_websites.website', 'scraper_imags.device', 'scraper_imags.created_at AS created_date', \DB::raw('count(`scraper_imags`.`id`) as no_image'));

        if (isset($request->startDate) && isset($request->endDate)) {
            $all_data = $all_data->whereDate('scraper_imags.created_at', '>=', date($request->startDate))
                ->whereDate('scraper_imags.created_at', '<=', date($request->endDate));
        } else {
            $all_data = $all_data->whereDate('scraper_imags.created_at', Carbon::now()->format('Y-m-d'));
        }

        $all_data = $all_data->orderBy('no_image', 'DESC')->groupBy('store_websites.website', 'scraper_imags.device')
            ->get();

        return response()->json(['history' => $all_data]);
    }

    public function actionHistory(Request $request)
    {
        $logs = DB::table('scrapper_python_action_logs')
            ->leftJoin('users', 'users.id', '=', 'scrapper_python_action_logs.user_id')
            ->select(['scrapper_python_action_logs.*', 'users.name']);
        if (isset($request->startDate) && isset($request->endDate)) {
            $logs = $logs->whereDate('scrapper_python_action_logs.created_at', '>=', date($request->startDate))
                ->whereDate('scrapper_python_action_logs.created_at', '<=', date($request->endDate));
        } else {
            //
        }

        $logs = $logs->orderBy('id', 'DESC')->get();
        $html = view('scrapper-phyhon.action_history', compact('logs'))->render();

        return ['message' => $html, 'statusCode' => 200];
    }

    public function delete(Request $request)
    {
        $images = scraperImags::whereDate('created_at', '=', date($request->delete_date))->get();

        foreach ($images as $image) {
            if (empty($image->img_name)) {
                continue;
            }

            $imagePath = public_path('scrappersImages/' . $image->img_name);

            if (file_exists($imagePath) && ! is_dir($imagePath)) {
                unlink($imagePath);
            }

            $image->delete();
        }

        return ['message' => count($images) . ' Deleted Successfully.', 'statusCode' => 200];
    }

    public function imageUrlList(Request $request)
    {
        $flagUrl       = isset($request->flagUrl) ? $request->flagUrl : '';
        $storeWebsites = \App\StoreWebsite::get();
        if (isset($request->id)) {
            $store_id = $request->id;

            $urls = [];

            $webStore = \App\WebsiteStore::where('id', $store_id)->first();
            $list     = Website::where('id', $webStore->website_id)->first();
            if ($webStore) {
                $website_store_views = \App\WebsiteStoreView::where('website_store_id', $webStore->id)->first();

                if ($website_store_views) {
                    $urls = \App\scraperImags::join('store_websites', 'store_websites.id', '=', 'scraper_imags.store_website')
                        ->select('scraper_imags.*', 'store_websites.title as wtitle', 'store_websites.id as swid')
                        ->where('store_website', $list->store_website_id)
                        ->where('website_id', $request->code) // this is language code. dont be confused with column name
                        ->whereRaw('url != "" and url IS  NOT NULL');
                    if (isset($request->startDate) && isset($request->endDate)) {
                        $urls = $urls->whereDate('created_at', '>=', date($request->startDate))
                            ->whereDate('created_at', '<=', date($request->endDate));
                    } else {
                        //
                    }

                    if ($request->flt_website && $request->flt_website != null) {
                        $urls = $urls->where('store_website', $request->flt_website);
                    }
                    if ($request->scrapper_url && $request->scrapper_url != null) {
                        $urls->where('url', 'LIKE', '%' . $request->scrapper_url . '%');
                    }

                    $urls = $urls->paginate(Setting::get('pagination'));
                }
            }
        } else {
            $urls = DB::table('scraper_imags')->join('store_websites', 'store_websites.id', '=', 'scraper_imags.store_website')->select('scraper_imags.*', 'store_websites.title as wtitle', 'store_websites.id as swid')->whereRaw('url != "" and url IS  NOT NULL');
            if (! empty($flagUrl)) {
                $urls    = $urls->where('scraper_imags.id', $flagUrl);
                $flagUrl = '#' . $flagUrl;
            }
            if ($request->flt_website && $request->flt_website != null) {
                $urls = $urls->where('store_website', $request->flt_website);
            }

            if ($request->scrapper_url && $request->scrapper_url != null) {
                $urls->where('url', 'LIKE', '%' . $request->scrapper_url . '%');
            }
            $urls = $urls->paginate(Setting::get('pagination'));
        }

        return view('scrapper-phyhon.list_urls', compact('urls', 'flagUrl', 'storeWebsites'));
    }

    public function flagImageUrl($id)
    {
        $image                = \App\scraperImags::find($id);
        $image->is_flaged_url = ($image->is_flaged_url == 1) ? 0 : 1;
        $status               = ($image->is_flaged_url == 1) ? 'Flagged' : 'un-flagged';
        $image->save();

        return redirect()->back()
            ->with('success', "Url $status successfully");
    }

    public function rejectScrapperImage(Request $request)
    {
        $image                        = \App\scraperImags::find($request->id);
        $image->si_status             = $request->si_status;
        $image->manually_approve_flag = 0;
        $image->save();

        return redirect()->back()->with('success', 'Scrapper image has been successfully rejected.');
    }
}


File: /opt/lampp/htdocs/erp/app/Jobs/CommandExecution.php 
Content: <?php

namespace App\Jobs;

use Illuminate\Bus\Queueable;
use App\CommandExecutionHistory;
use Illuminate\Support\Facades\DB;
use Illuminate\Queue\SerializesModels;
use Symfony\Component\Process\Process;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Foundation\Bus\Dispatchable;

class CommandExecution implements ShouldQueue
{
    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;

    public $tries = 5;

    public $backoff = 5;

    public function __construct(protected $command_name, protected $manual_command_name, protected $store_user_id, protected $store_id)
    {
    }

    public function handle()
    {
        try {
            if ($this->manual_command_name != '') {
                dump($this->manual_command_name . ' : command is started...');
                $compare = Process::fromShellCommandline($this->manual_command_name, base_path());
            } else {
                dump($this->command_name . ' : command is started...');
                $compare = Process::fromShellCommandline('php artisan ' . $this->command_name, base_path());
            }

            $compare->setTimeout(7200);
            $compare->setIdleTimeout(7200);
            $compare->run();
            $match = $compare->getOutput();

            $command_answer = $match ?? 'Command ' . $this->command_name . ' Execution Complete.';
            $status         = 1;

            CommandExecutionHistory::where('id', $this->store_id)->update(['command_answer' => $command_answer, 'status' => $status]);

            $user_id = $this->store_user_id;
            $user    = DB::table('users')->where('id', $user_id)->first();

            if ($user->phone != '' && $user->whatsapp_number != '') {
                $message = 'Command ' . $this->command_name . ' Execution Complete.';
                app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($user->phone, $user->whatsapp_number, $message);
            }
            dump($this->command_name . ' : job has been completed...');

            return true;
        } catch (Exception $e) {
            \Log::info('Issue fom ' . $this->command_name . ' ' . $e->getMessage());
            throw new Exception($e->getMessage());

            return false;
        }
    }

    public function tags()
    {
        return [$this->command_name, $this->store_id];
    }

    public function failed()
    {
        $user_id = $this->store_user_id;
        $user    = DB::table('users')->where('id', $user_id)->first();

        if ($user->phone != '' && $user->whatsapp_number != '') {
            $message = 'Command ' . $this->command_name . ' Execution Failed.';
            app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($user->phone, $user->whatsapp_number, $message);
        }
        dump($this->command_name . ' : job has been failed...');

        return true;
    }
}


File: /opt/lampp/htdocs/erp/app/Jobs/CreateHashTags.php 
Content: <?php

namespace App\Jobs;

use App\Brand;
use App\HashTag;
use App\Category;
use Carbon\Carbon;
use Illuminate\Bus\Queueable;
use App\KeywordSearchVariants;
use Illuminate\Queue\SerializesModels;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Foundation\Bus\Dispatchable;

class CreateHashTags implements ShouldQueue
{
    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;

    /**
     * Create a new job instance.
     *
     * @param publicarray $data
     */
    public function __construct(public array $data)
    {
    }

    /**
     * @throws Exception
     */
    public function handle(): bool
    {
        $insert_data = [];
        try {
            self::putLog('Job start generategooglescraperkeywordsstart from erp ABC start time : ' . date('Y-m-d H:i:s'));
            switch ($this->data['type']) {
                case 'brand':

                    $brand_list                   = $this->data['data'];
                    $user_id                      = $this->data['user_id'];
                    $category_postfix_string_list = $this->data['category_postfix_string_list'];
                    if (count($brand_list) > 0) {
                        $processed_brand_id_array = [];

                        foreach ($brand_list as $id => $name) {
                            foreach ($category_postfix_string_list as $string) {
                                $generated_string = $name . ' ' . $string->combined_string;
                                $check_exist      = HashTag::where('hashtag', $generated_string)->count();
                                if ($check_exist > 0) {
                                    continue;
                                }
                                $hashtag               = new HashTag();
                                $hashtag->hashtag      = $generated_string;
                                $hashtag->platforms_id = 2;
                                $hashtag->rating       = 8;
                                $hashtag->created_at   = date('Y-m-d h:i:s');
                                $hashtag->updated_at   = date('Y-m-d h:i:s');
                                $hashtag->created_by   = $user_id;
                                $insert_data           = $hashtag->toArray();
                                if (isset($insert_data['hashtag'])) {
                                    \DB::table('hash_tags')->insert($insert_data);
                                    CreateKeywordScrapperQueue::dispatch(['keyword' => $generated_string])->onQueue('rungooglescrapperforkeywords')->delay(Carbon::now()->addMinutes(rand(1, 4)));
                                }
                            }

                            $processed_brand_id_array[] = $id;
                        }

                        Brand::updateStatusIsHashtagsGenerated($processed_brand_id_array);
                    }
                    break;

                case 'category':

                    $brandList           = $this->data['brand_list'];
                    $keywordVariantsList = $this->data['keyword_variants'];
                    $categoryList        = $this->data['data'];
                    $user_id             = $this->data['user_id'];

                    if (! empty($brandList)) {
                        $processed_category_id_array = [];
                        foreach ($categoryList as $category_id => $category) {
                            foreach ($brandList as $brand) {
                                foreach ($keywordVariantsList as $keywordVariant) {
                                    $generated_string = $brand . ' ' . $category . ' ' . $keywordVariant;
                                    $check_exist      = HashTag::where('hashtag', $generated_string)->count();
                                    if ($check_exist > 0) {
                                        continue;
                                    }
                                    $hashtag               = new HashTag();
                                    $hashtag->hashtag      = $generated_string;
                                    $hashtag->platforms_id = 2;
                                    $hashtag->rating       = 8;
                                    $hashtag->created_at   = date('Y-m-d h:i:s');
                                    $hashtag->updated_at   = date('Y-m-d h:i:s');
                                    $hashtag->created_by   = $user_id;
                                    $insert_data           = $hashtag->toArray();
                                    if (isset($insert_data['hashtag'])) {
                                        \DB::table('hash_tags')->insert($insert_data);
                                        CreateKeywordScrapperQueue::dispatch(['keyword' => $generated_string])->onQueue('rungooglescrapperforkeywords')->delay(Carbon::now()->addMinutes(rand(1, 4)));
                                    }
                                }
                            }
                            $processed_category_id_array[] = $category_id;
                        }
                        Category::updateStatusIsHashtagsGeneratedCategories($processed_category_id_array);
                    }

                    break;

                case 'keyword_variant':
                    $keywordVariants = $this->data['data'];
                    $brands          = $this->data['brand_list'];
                    $categories      = $this->data['category_list'];
                    $user_id         = $this->data['user_id'];
                    if (! empty($brands)) {
                        $processed_variant_id_array = [];
                        foreach ($keywordVariants as $keywordId => $keywordVariant) {
                            foreach ($brands as $brand) {
                                foreach ($categories as $category) {
                                    $generated_string = $brand . ' ' . $category['title'] . ' ' . $keywordVariant;
                                    $check_exist      = HashTag::where('hashtag', $generated_string)->count();
                                    if ($check_exist > 0) {
                                        continue;
                                    }
                                    $hashtag               = new HashTag();
                                    $hashtag->hashtag      = $generated_string;
                                    $hashtag->platforms_id = 2;
                                    $hashtag->rating       = 8;
                                    $hashtag->created_at   = date('Y-m-d h:i:s');
                                    $hashtag->updated_at   = date('Y-m-d h:i:s');
                                    $hashtag->created_by   = $user_id;
                                    $insert_data           = $hashtag->toArray();
                                    if (isset($insert_data['hashtag'])) {
                                        \DB::table('hash_tags')->insert($insert_data);
                                        CreateKeywordScrapperQueue::dispatch(['keyword' => $generated_string])->onQueue('rungooglescrapperforkeywords')->delay(Carbon::now()->addMinutes(rand(1, 4)));
                                    }
                                }
                            }
                            $processed_variant_id_array[] = $keywordId;
                        }
                        KeywordSearchVariants::updateStatusIsHashtagsGeneratedKeywordVariants($processed_variant_id_array);
                    }
                    break;

                default:
                    $msg = 'Something went wrong.';
            }

            self::putLog('Job start generategooglescraperkeywordsstart from erp end time : ' . date('Y-m-d H:i:s'));

            return true;
        } catch (Exception $e) {
            self::putLog('Job start generategooglescraperkeywords Exception  from erp start time : ' . date('Y-m-d H:i:s'));
            throw new Exception($e->getMessage());
        }
    }

    public static function putLog($message)
    {
        \Log::channel('daily')->info($message);

        return true;
    }
}


File: /opt/lampp/htdocs/erp/app/Jobs/SearchAttachedImagesNew.php 
Content: <?php

namespace App\Jobs;

use Auth;
use App\SuggestedProduct;
use App\SuggestedProductList;
use Illuminate\Bus\Queueable;
use Illuminate\Support\Facades\DB;
use App\Helpers\CompareImagesHelper;
use Illuminate\Queue\SerializesModels;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Foundation\Bus\Dispatchable;

class SearchAttachedImagesNew implements ShouldQueue
{
    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;

    protected $first_time;

    protected $is_matched;

    protected $suggested_product;

    public $tries = 5;

    public $backoff = 5;

    public function __construct(protected $id, protected $url, protected $req_data)
    {
        $this->first_time        = true;
        $this->is_matched        = false;
        $this->suggested_product = false;
    }

    public function handle()
    {
        try {
            set_time_limit(0);

            $log_comment  = 'searchAttachedImage : ';
            $id           = $this->id;
            $ref_file     = str_replace('|', '/', $this->url);
            $ref_file     = str_replace("'", '', $ref_file);
            $params       = $this->req_data;
            $customer_id  = false;
            $chat_message = false;
            if (isset($params['customer_id'])) {
                $customer_id               = $params['customer_id'];
                $log_params['customer_id'] = $customer_id;
            } else {
                $chat_message = \App\ChatMessage::where('id', $id)->first();
                if ($chat_message) {
                    $log_comment = $log_comment . 'Chat message found with id : ' . $chat_message->id . ', ';
                }
            }
            if (@file_get_contents($ref_file)) {
                $log_comment = $log_comment . 'File contents found for ' . $ref_file . ', ';

                $log_comment = $log_comment . 'Create image started for ' . $ref_file . ', ';
                $i1          = CompareImagesHelper::createImage($ref_file);
                $log_comment = $log_comment . 'Create image finished for ' . $ref_file . ', ';

                $log_comment = $log_comment . 'Resize image started for ' . $ref_file . ', ';
                $i1          = CompareImagesHelper::resizeImage($i1, $ref_file);
                $log_comment = $log_comment . 'Resize image finished for ' . $ref_file . ', ';

                $log_comment = $log_comment . 'Image filter started for ' . $ref_file . ', ';
                imagefilter($i1, IMG_FILTER_GRAYSCALE);
                $log_comment = $log_comment . 'Image filter finished for ' . $ref_file . ', ';

                $log_comment = $log_comment . 'Color mean value started for ' . $ref_file . ', ';
                $colorMean1  = CompareImagesHelper::colorMeanValue($i1);
                $log_comment = $log_comment . 'Color mean value finished for ' . $ref_file . ', ';

                $log_comment = $log_comment . 'Bits started for ' . $ref_file . ', ';
                $bits1       = CompareImagesHelper::bits($colorMean1);
                $log_comment = $log_comment . 'Bits finished for ' . $ref_file . ', ';

                $bits = implode($bits1);
                DB::table('media')->whereNotNull('bits')->where('bits', '!=', 0)->where('bits', '!=', 1)->where('directory', 'like', '%product/%')->orderBy('id')->chunk(1000, function ($medias) use ($bits, $chat_message, $customer_id, $log_comment) {
                    if ($medias) {
                        $log_comment = $log_comment . 'Medias found with count : ' . count($medias) . ', ';
                    }
                    foreach ($medias as $k => $m) {
                        $hammeringDistance = 0;
                        $m_bits            = $m->bits;
                        for ($a = 0; $a < 64; $a++) {
                            if ($bits[$a] != $m_bits[$a]) {
                                $hammeringDistance++;
                            }
                        }
                        if ($hammeringDistance < 10) {
                            $this->is_matched = true;
                            if ($this->first_time) {
                                $this->suggested_product = SuggestedProduct::create([
                                    'total'           => 0,
                                    'customer_id'     => $chat_message ? $chat_message->customer_id : $customer_id,
                                    'chat_message_id' => $chat_message ? $chat_message->id : null,
                                ]);
                                $this->first_time = false;
                                $log_comment      = $log_comment . 'Suggested product created with customer_id : ' . $chat_message ? $chat_message->customer_id : $customer_id . ' and chat_message_id : ' . $chat_message ? $chat_message->id : 0 . ', ';
                            }
                            $mediable = DB::table('mediables')->where('media_id', $m->id)->where('mediable_type', \App\Product::class)->first();
                            if ($mediable) {
                                $log_comment               = $log_comment . 'Mediables found for media_id : ' . $m->id . ', ';
                                $log_params['customer_id'] = $chat_message ? $chat_message->customer_id : $customer_id;
                                SuggestedProductList::create([
                                    'customer_id'           => $chat_message ? $chat_message->customer_id : $customer_id,
                                    'product_id'            => $mediable->mediable_id,
                                    'media_id'              => $m->id,
                                    'chat_message_id'       => $chat_message ? $chat_message->id : null,
                                    'suggested_products_id' => $this->suggested_product !== null ? $this->suggested_product->id : null,
                                ]);
                                $log_comment = $log_comment . 'Suggested product list created for customer_id : ' . $chat_message ? $chat_message->customer_id : $customer_id . ' and product_id : ' . $mediable->mediable_id . ', ';
                            }
                        }
                    }
                });
            }

            $user = Auth::user();
            if ($this->is_matched) {
                $log_comment = $log_comment . 'Image find process is completed, ';
                $msg         = 'Your image find process is completed.';
            } else {
                $log_comment = $log_comment . 'Image find process is completed, No results found, ';
                $msg         = 'Your image find process is completed, No results found';
            }

            $log_comment = $log_comment . 'Send with third party API initiated for number : ' . $user->phone . ', whatsapp number : ' . $user->whatsapp_number . ' and message : ' . $msg . ', ';
            app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($user->phone, $user->whatsapp_number, $msg);
            $log_comment = $log_comment . 'Send with third party API completed, ';

            $log_comment           = $log_comment . ' . ';
            $log_params['comment'] = $log_comment;

            if (! empty($log_params['comment']) && $log_params['comment'] != '') {
                $log_added = \App\SearchAttachedImagesLog::create($log_params);
            }
        } catch (Exception $e) {
            throw new Exception($e->getMessage());
        }
    }

    public function tags()
    {
        return ['search_images', $this->id];
    }
}


File: /opt/lampp/htdocs/erp/app/Jobs/SendMessageToCustomer.php 
Content: <?php

namespace App\Jobs;

use File;
use App\Product;
use App\Currency;
use App\Customer;
use Dompdf\Dompdf;
use App\ChatMessage;
use Plank\Mediable\Media;
use Illuminate\Http\Request;
use Illuminate\Bus\Queueable;
use App\Helpers\ProductHelper;
use Illuminate\Queue\SerializesModels;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Foundation\Bus\Dispatchable;
use Plank\Mediable\Facades\MediaUploader as MediaUploader;

class SendMessageToCustomer implements ShouldQueue
{
    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;

    protected $type;

    protected $params;

    public $tries = 5;

    public $backoff = 5;

    const SENDING_MEDIA_SIZE = 10;

    const MEDIA_PDF_CHUNKS = 50;

    /**
     * Create a new job instance.
     *
     * @param mixed          $data
     * @param null|protected $chatbotReply
     *
     * @return void
     */
    public function __construct($data, protected $chatbotReply = null)
    {
        // Set product
        $this->type   = isset($data['type']) ? $data['type'] : 'simple';
        $this->params = isset($data) ? $data : [];
    }

    /**
     * Execute the job.
     *
     * @return void
     */
    public function handle(Request $request)
    {
        try {
            // Set time limit
            set_time_limit(0);
            $medias      = [];
            $mediaImages = [];
            $params      = $this->params;
            $this->type  = 'by_product';
            $haveMedia   = false;

            // query section

            if ($this->type == 'by_product') {
                $mediaImages = ProductHelper::getImagesByProduct($params);
                if (! empty($mediaImages)) {
                    $haveMedia = true;
                    $medias    = Media::whereIn('id', $mediaImages)->get();
                }
            }

            // if we need to send by images id  direct then use this one
            if (! empty($params['images'])) {
                $ids       = is_array($params['images']) ? $params['images'] : json_decode($params['images']);
                $haveMedia = true;
                $medias    = Media::whereIn('id', $ids)->get();
            }

            if (isset($params['images']) && is_array($params['images'])) {
                $medias = Media::whereIn('id', $params['images'])->get();
            }
            // attach to the customer
            $customerIds = ! empty($params['customer_ids']) ? $params['customer_ids'] : explode(',', $params['customers_id']);

            // @todo since this message all are auto so no need to update cutomer last message to read
            $customers = Customer::whereIn('id', $customerIds)->get();

            //get the currencies for the customer
            $currencies = $customers->map(
                function ($customer) {
                    return $customer->currency;
                }
            )->filter(function ($currency) {
                return isset($currency);
            });

            $currencies = array_values($currencies->toArray());

            // Get the rates
            $ratesDb = Currency::whereIn('code', $currencies)->get();

            $rates = [];
            foreach ($ratesDb as $rate) {
                $rates[$rate->code] = $rate->rate;
            }
            //Base EURO currency
            $rates['EUR'] = 1;

            $insertParams = [
                'message'                => isset($params['message']) ? $params['message'] : null,
                'status'                 => isset($params['status']) ? $params['status'] : \App\ChatMessage::CHAT_AUTO_BROADCAST,
                'is_queue'               => isset($params['is_queue']) ? $params['is_queue'] : 0,
                'group_id'               => isset($params['group_id']) ? $params['group_id'] : null,
                'user_id'                => isset($params['user_id']) ? $params['user_id'] : null,
                'message_application_id' => isset($params['message_application_id']) ? $params['message_application_id'] : null,
                'number'                 => null,
                'is_chatbot'             => isset($params['is_chatbot']) ? $params['is_chatbot'] : 0,
            ];

            $allMediaIds = ($haveMedia) ? $medias->pluck('id')->toArray() : [];
            $mediable    = \DB::table('mediables')->whereIn('media_id', $allMediaIds)->where('mediable_type', \App\Product::class)->get();

            $availableMedia = [];
            $productIds     = [];
            if (! $mediable->isEmpty()) {
                foreach ($mediable as $media) {
                    $availableMedia[$media->media_id] = $media;
                    $productIds[]                     = $media->mediable_id;
                }
            }

            $products = Product::whereIn('id', $productIds)->get()->keyBy('id');

            // check first if the media needs to be handled by pdf then first create the images of it
            $allpdf         = [];
            $allMedia       = [];
            $translatedPdfs = [];
            if (! empty($medias)) {
                if ($medias->count() > self::SENDING_MEDIA_SIZE || (isset($params['send_pdf']) && $params['send_pdf'] == 1)) {
                    $chunkedMedia = $medias->chunk(self::MEDIA_PDF_CHUNKS);

                    foreach ($chunkedMedia as $key => $medias) {
                        foreach ($rates as $currency => $rate) {
                            $products = $products->map(function ($product) use ($rates, $currency) {
                                if (isset($rates[$currency])) {
                                    $product->price_inr_special *= $rates[$currency];
                                }

                                return $product;
                            });
                            $currencySymbol = 'EUR';
                            if (isset($rates[$currency])) {
                                $currencySymbol = $currency;
                            }

                            $pdfView = (string) view('pdf_views.images_customer', compact('medias', 'availableMedia', 'products', 'currencySymbol'));

                            // based on view create a pdf
                            $pdf = new Dompdf();
                            $pdf->setPaper([0, 0, 1000, 1000], 'portrait');
                            $pdf->loadHtml($pdfView);

                            if (! empty($params['pdf_file_name'])) {
                                $random = str_replace(' ', '-', $params['pdf_file_name'] . '-' . ($key + 1) . '-' . date('Y-m-d-H-i-s-') . rand());
                            } else {
                                $random = uniqid('sololuxury_', true);
                            }

                            $fileName = public_path() . '/' . $random . '.pdf';
                            $pdf->render();

                            File::put($fileName, $pdf->output());

                            $allpdf[]            = $fileName;
                            $media               = MediaUploader::fromSource($fileName)->toDirectory('chatmessage/0')->upload();
                            $allMedia[$fileName] = $media;

                            $translatedPdfs[$fileName][$currency] = $media;
                        }
                    }
                }
            }

            if (! $customers->isEmpty()) {
                foreach ($customers as $customer) {
                    $customerPreferredCurrency   = $customer->currency;
                    $insertParams['customer_id'] = $customer->id;
                    $chatMessage                 = ChatMessage::create($insertParams);
                    if ($chatMessage->status == ChatMessage::CHAT_AUTO_WATSON_REPLY) {
                        if ($this->chatbotReply) {
                            $chatbotReply             = $this->chatbotReply;
                            $chatbotReply->chat_id    = $chatMessage->id;
                            $chatbotReply->answer     = $chatMessage->message;
                            $chatbotReply->reply      = isset($params['chatbot_response']) ? json_encode($params['chatbot_response']) : null;
                            $chatbotReply->reply_from = 'watson';
                            $chatbotReply->save();
                        }
                    }

                    if (! empty($medias) && ! $medias->isEmpty()) {
                        if ($medias->count() > self::SENDING_MEDIA_SIZE || (isset($params['send_pdf']) && $params['send_pdf'] == 1)) {
                            // send pdf
                            if (! empty($allpdf)) {
                                foreach ($allpdf as $no => $file) {
                                    // if first file then send direct into queue and if then send after it

                                    $media = $allMedia[$file];

                                    // translated PDF logic starts -->

                                    if (isset($translatedPdfs) && isset($translatedPdfs[$fileName])) {
                                        // the translated PDF exits and hence check for customer currency
                                        if (isset($translatedPdfs[$fileName][$customerPreferredCurrency])) {
                                            // if customer preferred currency exist, use that
                                            $media = $translatedPdfs[$fileName][$customerPreferredCurrency];
                                        } elseif (isset($translatedPdfs[$fileName]['EUR'])) {
                                            //else if EURO exists
                                            $media = $translatedPdfs[$fileName]['EUR'];
                                        }
                                    }

                                    // <-- translated PDF logic ends

                                    if ($no == 0) {
                                        $chatMessage->attachMedia($media, config('constants.media_tags'));
                                    } else {
                                        // attach to customer so we can send later after approval
                                        $extradata             = $insertParams;
                                        $extradata['is_queue'] = 0;
                                        $extraChatMessage      = ChatMessage::create($extradata);
                                        $extraChatMessage->attachMedia($media, config('constants.media_tags'));
                                    }
                                }
                            }
                        } else {
                            foreach ($medias as $media) {
                                try {
                                    $chatMessage->attachMedia($media, config('constants.media_tags'));
                                } catch (Exception $e) {
                                    \Log::channel('customer')->error($e);
                                }
                            }
                        }
                    }

                    // chat message for approval
                    if ($chatMessage->status == ChatMessage::CHAT_MESSAGE_APPROVED) {
                        $myRequest = new Request();
                        $myRequest->setMethod('POST');
                        $myRequest->request->add(['messageId' => $chatMessage->id]);
                        app(\App\Http\Controllers\WhatsAppController::class)->approveMessage('customer', $myRequest);
                    }
                }
            }

            self::deletePdfFiles($allpdf);
        } catch (Exception $e) {
            throw new Exception($e->getMessage());
        }
    }

    public function tags()
    {
        return ['customer_message', $this->params['customer_ids']];
    }

    /**
     * delete all pdf files after we send to the customer
     *
     * @param mixed $files
     */
    public static function deletePdfFiles($files = [])
    {
        if (! empty($files)) {
            foreach ($files as $key => $file) {
                File::delete($file);
            }
        }
    }
}


File: /opt/lampp/htdocs/erp/app/KeywordSearchVariants.php 
Content: <?php

namespace App;

/**
 * @SWG\Definition(type="object", @SWG\Xml(name="User"))
 */

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;

class KeywordSearchVariants extends Model
{
    use HasFactory;

    public $fillable = [
        'keyword',
    ];

    public static function list()
    {
        return self::pluck('keyword', 'id')->toArray();
    }

    public static function updateStatusIsHashtagsGeneratedKeywordVariants($variant_id_array)
    {
        \DB::table('keyword_search_variants')->whereIn('id', $variant_id_array)->where('is_hashtag_generated', 0)->update(['is_hashtag_generated' => 1]);
    }
}


File: /opt/lampp/htdocs/erp/app/Listeners/UpdateCurrencyCashFlow.php 
Content: <?php

namespace App\Listeners;

use App\Events\CashFlowUpdated;

class UpdateCurrencyCashFlow
{
    /**
     * Create the event listener.
     *
     * @return void
     */
    public function __construct()
    {
        //
    }

    /**
     * Handle the event.
     *
     * @param object $event
     *
     * @return void
     */
    public function handle(CashFlowUpdated $event)
    {
        \Log::info('this action has been called');

        $cashflow = $event->cashflow;
        if ($cashflow->amount_eur <= 0) {
            \DB::table('cash_flows')->where('id', $cashflow->id)->update(['amount_eur' => \App\Currency::convert($cashflow->amount, 'EUR', $cashflow->currency)]);
        }

        if ($cashflow->monetary_account_id > 0 && ($cashflow->type == 'received' || $cashflow->type == 'paid')) {
            $user_id = ! empty(auth()->id) ? auth()->id : 6;
            $amount  = $cashflow->erp_amount;
            if ($cashflow->type == 'paid') {
                $amount = 0 - $cashflow->erp_amount;
            }

            $monetaryHistory = \App\MonetaryAccountHistory::where('model_id', $cashflow->id)->where('model_type', \App\CashFlow::class)->first();
            if ($monetaryHistory) {
                $monetaryHistory->update([
                    'note'                => $cashflow->description,
                    'model_id'            => $cashflow->id,
                    'model_type'          => \App\CashFlow::class,
                    'amount'              => $amount,
                    'monetary_account_id' => $cashflow->monetary_account_id,
                    'user_id'             => $user_id,
                ]);
            } else {
                \App\MonetaryAccountHistory::create([
                    'note'                => $cashflow->description,
                    'model_id'            => $cashflow->id,
                    'model_type'          => \App\CashFlow::class,
                    'amount'              => $amount,
                    'monetary_account_id' => $cashflow->monetary_account_id,
                    'user_id'             => $user_id,
                ]);
            }
        }
    }
}


File: /opt/lampp/htdocs/erp/app/Meetings/ZoomMeetings.php 
Content: <?php

/**
 * Class ZoomMeetings | app/Meetings/Meeting/ZoomMeetings.php
 * Zoom Meetings integration for video call purpose using LaravelZoom's REST API
 *
 * @filesource required php 7 as this file contains tokenizer extension which was not stable prior to this version
 *
 * @see https://github.com/saineshmamgain/laravel-zoom
 * @see ZoomMeetings
 *
 * @author   sololux <sololux@gmail.com>
 */

namespace App\Meetings;

use App\Vendor;
use App\Customer;
use App\Supplier;
use Illuminate\Database\Eloquent\Model;
use seo2websites\LaravelZoom\LaravelZoom;

/**
 * Class ZoomMeetings - active record
 *
 * A zoom class used to create meetings
 * This class is used to interact with zoom interface.
 */
class ZoomMeetings extends Model
{
    protected $fillable = ['meeting_id', 'meeting_topic', 'meeting_type', 'meeting_agenda', 'join_meeting_url', 'start_meeting_url', 'start_date_time', 'meeting_duration', 'host_zoom_id', 'zoom_recording', 'user_id', 'user_type', 'timezone'];

    /**
     * Create a scheduled and instant meeting with zoom based on the params send through form
     *
     * @param string $zoomKey
     * @param string $zoomSecret
     * @param array  $data
     *
     * @return array $meeting
     *
     * @Rest\Post("LaravelZoom")
     *
     * @uses LaravelZoom
     */
    public function createMeeting($zoomKey, $zoomSecret, $data)
    {
        $zoom  = new LaravelZoom($zoomKey, $zoomSecret);
        $time  = time() + 7200;
        $token = $zoom->getJWTToken($time);
        if ($token) {
            $meeting = $zoom->createScheduledMeeting($data['user_id'], $data['topic'], $data['startTime'], $data['duration'], $data['timezone'], '', '', $data['agenda'], [], $data['settings']);
            dd($meeting);

            return $meeting;
        } else {
            return false;
        }
    }

    public function getMeetings($zoomKey, $zoomSecret, $data)
    {
        $zoom       = new LaravelZoom($zoomKey, $zoomSecret);
        $meeting1   = $zoom->getJWTToken(time() + 7200);
        $meetingAll = $zoom->getMeetings($data['user_id'], $data['type'], 10);
        echo 'reach';
        print_r($meetingAll);
        exit;
    }

    /**
     * Getting future meetings
     *
     * @param string $type
     * @param carbon $date
     *
     * @return array $meeting
     *
     * @uses vendors
     * @uses customers
     * @uses suppliers
     */
    public function upcomingMeetings($type, $date)
    {
        switch ($type) {
            case 'vendor':
                $meetings = \DB::table('zoom_meetings')
                    ->where('zoom_meetings.user_type', '=', $type)
                    ->whereDate('zoom_meetings.start_date_time', '>=', $date)
                    ->join('vendors', 'zoom_meetings.user_id', '=', 'vendors.id')
                    ->select('zoom_meetings.*', 'vendors.name', 'vendors.phone', 'vendors.email', 'vendors.whatsapp_number')
                    ->orderBy('zoom_meetings.start_date_time', 'ASC')
                    ->get();

                return $meetings;
                break;
            case 'customer':
                $meetings = \DB::table('zoom_meetings')
                    ->where('zoom_meetings.user_type', '=', $type)
                    ->whereDate('zoom_meetings.start_date_time', '>=', $date)
                    ->join('customers', 'zoom_meetings.user_id', '=', 'customers.id')
                    ->select('zoom_meetings.*', 'customers.name', 'customers.phone', 'customers.email', 'customers.whatsapp_number')
                    ->orderBy('zoom_meetings.start_date_time', 'ASC')
                    ->get();

                return $meetings;
                break;
            case 'supplier':
                $meetings = \DB::table('zoom_meetings')
                    ->where('zoom_meetings.user_type', '=', $type)
                    ->whereDate('zoom_meetings.start_date_time', '>=', $date)
                    ->join('suppliers', 'zoom_meetings.user_id', '=', 'suppliers.id')
                    ->select('zoom_meetings.*', 'suppliers.supplier as name', 'suppliers.phone', 'suppliers.email', 'suppliers.whatsapp_number')
                    ->orderBy('zoom_meetings.start_date_time', 'ASC')
                    ->get();

                return $meetings;
                break;
            default:
                break;
        }
    }

    /**
     * Getting past meetings with recordings
     *
     * @param string $type
     * @param carbon $date
     *
     * @return array $meeting
     *
     * @uses vendors
     * @uses customers
     * @uses suppliers
     */
    public function pastMeetings($type, $date)
    {
        switch ($type) {
            case 'vendor':
                $meetings = \DB::table('zoom_meetings')
                    ->where('zoom_meetings.user_type', '=', $type)
                    ->whereDate('zoom_meetings.start_date_time', '<', $date)
                    ->join('vendors', 'zoom_meetings.user_id', '=', 'vendors.id')
                    ->select('zoom_meetings.*', 'vendors.name', 'vendors.phone', 'vendors.email', 'vendors.whatsapp_number')
                    ->orderBy('zoom_meetings.start_date_time', 'ASC')
                    ->get();

                return $meetings;
                break;
            case 'customer':
                $meetings = \DB::table('zoom_meetings')
                    ->where('zoom_meetings.user_type', '=', $type)
                    ->whereDate('zoom_meetings.start_date_time', '<', $date)
                    ->join('customers', 'zoom_meetings.user_id', '=', 'customers.id')
                    ->select('zoom_meetings.*', 'customers.name', 'customers.phone', 'customers.email', 'customers.whatsapp_number')
                    ->orderBy('zoom_meetings.start_date_time', 'ASC')
                    ->get();

                return $meetings;
                break;
            case 'supplier':
                $meetings = \DB::table('zoom_meetings')
                    ->where('zoom_meetings.user_type', '=', $type)
                    ->whereDate('zoom_meetings.start_date_time', '<', $date)
                    ->join('suppliers', 'zoom_meetings.user_id', '=', 'suppliers.id')
                    ->select('zoom_meetings.*', 'suppliers.supplier as name', 'suppliers.phone', 'suppliers.email', 'suppliers.whatsapp_number')
                    ->orderBy('zoom_meetings.start_date_time', 'ASC')
                    ->get();

                return $meetings;
                break;
            default:
                break;
        }
    }

    /**
     * Get meeting recordings based on meeting id
     *
     *
     * @Rest\Post("LaravelZoom")
     *
     * @uses LaravelZoom
     *
     * @param mixed $zoomKey
     * @param mixed $zoomSecret
     * @param mixed $date
     *
     * @return array $meeting
     */
    public function getRecordings($zoomKey, $zoomSecret, $date)
    {
        \Log::info('Get recording getRecordings ');
        $allMeetingRecords = ZoomMeetings::WhereNull('zoom_recording')->whereNotNull('meeting_id')->whereDate('start_date_time', '<', $date)->get();

        $zoom  = new LaravelZoom($zoomKey, $zoomSecret);
        $token = $zoom->getJWTToken(time() + 36000);
        \Log::info('Find recording-->' . count($allMeetingRecords));
        if (0 != count($allMeetingRecords)) {
            foreach ($allMeetingRecords as $meetings) {
                $meetingId = $meetings->meeting_id;
                \Log::info('Get Recording ' . json_encode($meetings));
                \Log::info('Get meetingId ' . $meetingId);
                $recordingAll = $zoom->getMeetingRecordings($meetingId);
                \Log::info(json_encode($recordingAll));
                if ($recordingAll) {
                    if ('200' == $recordingAll['status']) {
                        $recordingFiles = $recordingAll['body']['recording_files'];
                        \Log::info('recordingFiles -->' . json_encode($recordingFiles));
                        if ($recordingFiles) {
                            $folderPath = public_path() . '/zoom/0/' . $meetings->id;
                            \Log::info('folderPath -->' . $folderPath);
                            foreach ($recordingFiles as $recordings) {
                                if ('shared_screen_with_speaker_view' == $recordings['recording_type']) {
                                    \Log::info('shared_screen_with_speaker_view');
                                    $fileName  = $meetingId . '.mp4';
                                    $urlOfFile = $recordings['download_url'];
                                    $filePath  = $folderPath . '/' . $fileName;
                                    if (! file_exists($filePath)) {
                                        mkdir($folderPath, 0777, true);
                                    }
                                    copy($urlOfFile, $filePath);
                                    $meetings->zoom_recording = $fileName;
                                    $meetings->save();
                                } else {
                                    if ('audio_only' == $recordings['recording_type']) {
                                        $fileNameAudio = $meetingId . '-audio.mp4';
                                        if (! isset($filePath) || empty($filePath)) {
                                            $filePath = $folderPath . '/' . $fileNameAudio;
                                        }
                                        $filePathAudio  = $folderPath . '/' . $fileNameAudio;
                                        $urlOfAudioFile = $recordings['download_url'];
                                        if (! file_exists($filePath)) {
                                            mkdir($folderPath, 0777, true);
                                        }
                                        copy($urlOfAudioFile, $filePathAudio);
                                    } else {
                                        // Not saving any other files currently
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        return true;
    }

    /**
     * Delete meeting recordings based on meeting id
     *
     *
     * @Rest\Post("LaravelZoom")
     *
     * @uses LaravelZoom
     *
     * @param mixed $zoomKey
     * @param mixed $zoomSecret
     * @param mixed $date
     *
     * @return array $meeting
     */
    public function deleteRecordings($zoomKey, $zoomSecret, $date)
    {
        $allMeetingRecords = ZoomMeetings::where('is_deleted_from_zoom', '!=', 1)->whereNotNull('zoom_recording')->whereNotNull('meeting_id')->whereDate('start_date_time', '<', $date)->get();
        $zoom              = new LaravelZoom($zoomKey, $zoomSecret);
        $token             = $zoom->getJWTToken(time() + 36000);
        if (0 != count($allMeetingRecords)) {
            foreach ($allMeetingRecords as $meetings) {
                $meetingId     = $meetings->meeting_id;
                $folderPath    = public_path() . '/zoom/0/' . $meetings->id;
                $fileName      = $meetingId . '.mp4';
                $filePath      = $folderPath . '/' . $fileName;
                $fileNameAudio = $meetingId . '-audio.mp4';
                $filePathAudio = $folderPath . '/' . $fileNameAudio;
                if (file_exists($filePath) && file_exists($filePathAudio)) {
                    $recordingDelete = $zoom->deleteRecordings($meetingId);
                    if ($recordingDelete && '204' == $recordingDelete['status']) {
                        $meetings->is_deleted_from_zoom = 1;
                        $meetings->save();
                    }
                }
            }
        }
    }

    public function getUserDetails($user_id, $user_type)
    {
        switch ($user_type) {
            case 'vendor':
                $vendor = Vendor::find($user_id);

                return $vendor;
                break;
            case 'customer':
                $customer = Customer::find($user_id);

                return $customer;
                break;
            case 'supplier':
                $supplier = Supplier::find($user_id);

                return $supplier;
                break;
            default:
                break;
        }
    }

    public function saveRecordings($zoomKey, $zoomSecret, $date, $zoommeetingid, $zoomuserid)
    {
        \Log::info('Get recording getRecordings ');
        $allMeetingRecords = ZoomMeetings::WhereNull('zoom_recording')->whereNotNull('meeting_id')->whereDate('start_date_time', '<', $date)->get();

        $zoom  = new LaravelZoom($zoomKey, $zoomSecret);
        $token = $zoom->getJWTToken(time() + 36000);
        \Log::info('Find recording-->' . count($allMeetingRecords));
        $meetingId = $zoommeetingid;
        \Log::info('Get meetingId ' . $meetingId);
        $recordingAll = $zoom->getRecordings($zoomuserid, 10);
        \Log::info(json_encode($recordingAll));
        if ($recordingAll) {
            if ('200' == $recordingAll['status']) {
                if ($recordingAll) {
                    $folderPath  = public_path() . '/zoom/0/' . $meetingId;
                    $databsePath = '/zoom/0/' . $meetingId;
                    \Log::info('folderPath -->' . $folderPath);
                    foreach ($recordingAll['body']['meetings'] as $meetings) {
                        if ($meetings['id'] == $meetingId) {
                            $recordingFiles = $meetings['recording_files'];
                            \Log::info('recordingFiles -->' . json_encode($recordingFiles));
                            foreach ($meetings['recording_files'] as $recordings) {
                                $checkfile = ZoomMeetingDetails::where('download_url_id', $recordings['id'])->first();
                                if (! $checkfile) {
                                    if ('shared_screen_with_speaker_view' == $recordings['recording_type']) {
                                        \Log::info('shared_screen_with_speaker_view');
                                        $fileName  = $meetingId . '_' . time() . '.mp4';
                                        $urlOfFile = $recordings['download_url'];
                                        $filePath  = $folderPath . '/' . $fileName;
                                        if (! file_exists($filePath) && ! is_dir($folderPath)) {
                                            mkdir($folderPath, 0777, true);
                                        }
                                        $ch = curl_init($urlOfFile);
                                        curl_exec($ch);
                                        if (! curl_errno($ch)) {
                                            $info         = curl_getinfo($ch);
                                            $downloadLink = $info['redirect_url'];
                                        }
                                        curl_close($ch);

                                        if ($downloadLink) {
                                            copy($downloadLink, $filePath);
                                        }

                                        $zoom_meeting_details                  = new ZoomMeetingDetails();
                                        $zoom_meeting_details->file_path       = $databsePath . '/' . $fileName;
                                        $zoom_meeting_details->file_name       = $fileName;
                                        $zoom_meeting_details->download_url_id = $recordings['id'];
                                        $zoom_meeting_details->save();
                                    } else {
                                        if ('audio_only' == $recordings['recording_type']) {
                                            $fileNameAudio = $meetingId . '_' . time() . '-audio.mp4';
                                            if (! isset($filePath) || empty($filePath)) {
                                                $filePath = $folderPath . '/' . $fileNameAudio;
                                            }
                                            $filePathAudio  = $folderPath . '/' . $fileNameAudio;
                                            $urlOfAudioFile = $recordings['download_url'];
                                            if (! file_exists($filePath) && ! is_dir($folderPath)) {
                                                mkdir($folderPath, 0777, true);
                                            }
                                            $ch = curl_init($urlOfAudioFile);
                                            curl_exec($ch);
                                            if (! curl_errno($ch)) {
                                                $info         = curl_getinfo($ch);
                                                $downloadLink = $info['redirect_url'];
                                            }
                                            curl_close($ch);

                                            if ($downloadLink) {
                                                copy($downloadLink, $filePathAudio);
                                            }
                                            /*copy($urlOfAudioFile, $filePathAudio);*/
                                        } else {
                                            // Not saving any other files currently
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        return true;
    }
}


File: /opt/lampp/htdocs/erp/app/Notification.php 
Content: <?php

namespace App;

/**
 * @SWG\Definition(type="object", @SWG\Xml(name="User"))
 */
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Database\Eloquent\Model;

class Notification extends Model
{
    /**
     * @var string
     *
     * @SWG\Property(property="message",type="string")
     * @SWG\Property(property="role",type="string")

     * @SWG\Property(property="product_id",type="integer")
     * @SWG\Property(property="user_id",type="integer")
     * @SWG\Property(property="sent_to",type="integer")
     * @SWG\Property(property="sale_id",type="integer")
     * @SWG\Property(property="task_id",type="integer")
     * @SWG\Property(property="message_id",type="integer")
     * @SWG\Property(property="reminder",type="string")
     */
    protected $fillable = [
        'message',
        'role',
        'product_id',
        'user_id',
        'sent_to',
        'sale_id',
        'task_id',
        'message_id',
        'reminder',
    ];

    public static function getUserNotificationByRoles($limit = 10)
    {
        $notifications = DB::table('notifications as n')
                            ->select('n.message', 'n.isread', 'n.id', 'n.product_id', 'n.sale_id', 'p.sku', 'p.name as pname', 'u.name as uname', 'n.created_at')
                            ->whereIn('role', \Auth::user()->getRoleNames())
                            ->orWhere('sent_to', \Auth::id())
                            ->latest('n.created_at')
                            ->limit($limit)
                            ->leftJoin('products as p', 'n.product_id', '=', 'p.id')
                            ->leftJoin('users as u', 'n.user_id', '=', 'u.id')
                            ->get();

        return $notifications;
    }

    public static function getUserNotificationByRolesPaginate(Request $request)
    {
        $orderBy   = 'n.created_at';
        $direction = 'desc';

        if ($request->has('sort_by')) {
            if ($request->input('sort_by') == 'by_user') {
                $orderBy   = 'n.user_id';
                $direction = 'asc';
            }

            if ($request->input('sort_by') == 'by_task') {
                $orderBy   = 'n.role';
                $direction = 'asc';
            }
        }

        $notifications = DB::table('notifications as n')
                            ->select('n.message', 'n.isread', 'n.id', 'n.product_id', 'n.sale_id', 'p.sku', 'p.name as pname', 'u.name as uname', 'n.created_at')
                            ->whereIn('role', \Auth::user()->getRoleNames())
                            ->orWhere('sent_to', \Auth::id())
                            ->leftJoin('products as p', 'n.product_id', '=', 'p.id')
                            ->leftJoin('users as u', 'n.user_id', '=', 'u.id')
                            ->orderBy($orderBy, $direction)
                            ->paginate(20);

        return $notifications;
    }

    public function product()
    {
        return $this->belongsTo(\App\Product::class, 'product_id', 'id');
    }

    public function role()
    {
        return $this->belongsTo('Spatie\Permission\Models\Role', 'role', 'name');
    }

    public function user()
    {
        return $this->belongsTo(\App\User::class, 'user_id', 'id');
    }

    public function getAll()
    {
        return self::all();
    }
}


File: /opt/lampp/htdocs/erp/app/Product.php 
Content: <?php

namespace App;

/**
 * @SWG\Definition(type="object", @SWG\Xml(name="User"))
 */
use Validator;
use Plank\Mediable\Mediable;
use App\Helpers\StatusHelper;
use App\Helpers\ProductHelper;
use Illuminate\Support\Facades\DB;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\SoftDeletes;
use Plank\Mediable\Facades\MediaUploader as MediaUploader;

class Product extends Model
{
    const STOCK_STATUS = [
        1 => 'Active',
        2 => 'Reserved',
        3 => 'Damaged',
        4 => 'On Hold',
    ];

    const IVA_PERCENTAGE = 22;

    //  use LogsActivity;
    use Mediable;
    use SoftDeletes;

    const BAGS_CATEGORY_IDS = [11, 39, 50, 192, 210];

    /**
     * @var string
     *
     * @SWG\Property(property="name",type="string")
     * @SWG\Property(property="brand",type="string")
     * @SWG\Property(property="category",type="string")
     * @SWG\Property(property="short_description",type="string")
     * @SWG\Property(property="price",type="string")
     * @SWG\Property(property="sku",type="string")
     * @SWG\Property(property="has_mediables",type="string")
     * @SWG\Property(property="status_id",type="integer")
     * @SWG\Property(property="id",type="integer")
     * @SWG\Property(property="is_barcode_check",type="boolean")
     * @SWG\Property(property="size_eu",type="string")
     * @SWG\Property(property="supplier",type="string")
     * @SWG\Property(property="supplier_id",type="integer")
     * @SWG\Property(property="user_id",type="integer")
     * @SWG\Property(property="shopify_id",type="integer")
     * @SWG\Property(property="stock_status",type="string")
     * @SWG\Property(property="scrap_priority",type="string")
     * @SWG\Property(property="assigned_to",type="integer")
     * @SWG\Property(property="quick_product",type="string")
     * @SWG\Property(property="approved_by",type="integer")
     * @SWG\Property(property="supplier_link",type="string")
     * @SWG\Property(property="composition",type="string")
     * @SWG\Property(property="lmeasurement",type="string")
     * @SWG\Property(property="hmeasurement",type="string")
     * @SWG\Property(property="dmeasurement",type="string")
     * @SWG\Property(property="size",type="string")
     * @SWG\Property(property="color",type="string")
     * @SWG\Property(property="last_brand",type="string")
     */
    protected $fillable = [
        'name',
        'brand',
        'stock',
        'category',
        'short_description',
        'price',
        'price_eur_special',
        'price_eur_discounted',
        'price_inr',
        'price_inr_special',
        'price_inr_discounted',
        'price_special_offer',
        'status_id',
        'id',
        'sku',
        'is_barcode_check',
        'has_mediables',
        'size_eu',
        'supplier',
        'supplier_id',
        'stock_status',
        'shopify_id',
        'scrap_priority',
        'assigned_to',
        'quick_product',
        'approved_by',
        'supplier_link',
        'composition',
        'lmeasurement',
        'hmeasurement',
        'dmeasurement',
        'size',
        'color',
        'suggested_color',
        'last_brand',
        'sub_status_id',
        'price_usd',
        'price_usd_special',
        'is_cron_check',
    ];

    protected $appends = [];

    protected $communication = '';

    protected $image_url = '';

    public $images = [];

    public static function boot()
    {
        parent::boot();

        static::saved(function ($model) {
            $flag = 0;
            if ($model->hasMedia(config('constants.attach_image_tag'))) {
                $flag = 1;
            }
            if ($model->has_mediables != $flag) {
                \DB::table('products')->where('id', $model->id)->update(['has_mediables' => $flag]);
            }
        });

        static::updating(function ($product) {
            $newCatID = $product->category;
            $oldCatID = $product->getOriginal('category');

            $productData = ProductStatusHistory::where('product_id', $product->id)->get();

            if ($oldCatID != $newCatID && $newCatID > 1) {
                \DB::table('products')->where('id', $product->id)->update(['status_id' => StatusHelper::$autoCrop]);
                $data = [
                    'product_id'     => $product->id,
                    'old_status'     => $product->status_id,
                    'new_status'     => StatusHelper::$autoCrop,
                    'pending_status' => 0,
                    'created_at'     => date('Y-m-d H:i:s'),
                ];
                \App\ProductStatusHistory::addStatusToProduct($data);
            }

            $new_status_id = $product->status_id;
            $old_status_id = $product->getOriginal('status_id');
            if ($old_status_id != $new_status_id) {
                $data = [
                    'product_id'     => $product->id,
                    'old_status'     => $old_status_id,
                    'new_status'     => $new_status_id,
                    'pending_status' => 0,
                    'created_at'     => date('Y-m-d H:i:s'),
                ];
                \App\ProductStatusHistory::addStatusToProduct($data);
            }
        });

        static::created(function ($model) {
            $flag = 0;
            if ($model->hasMedia(config('constants.attach_image_tag'))) {
                $flag = 1;
            }
            if ($model->has_mediables != $flag) {
                \DB::table('products')->where('id', $model->id)->update(['has_mediables' => $flag]);
            }
            if ($model->status_id) {
                $data = [
                    'product_id'     => $model->id,
                    'old_status'     => $model->status_id,
                    'new_status'     => $model->status_id,
                    'pending_status' => 0,
                    'created_at'     => date('Y-m-d H:i:s'),
                ];
                \App\ProductStatusHistory::addStatusToProduct($data);
            }
        });
    }

    /**
     * Create new or update existing (scraped) product by JSON
     * This is only for Excel imports at the moment
     *
     * @param mixed $json
     * @param mixed $isExcel
     * @param mixed $nextExcelStatus
     *
     * @return bool|\Illuminate\Http\JsonResponse
     */
    public static function createProductByJson($json, $isExcel = 0, $nextExcelStatus = 2)
    {
        // Check for required values
        if (
            ! empty($json->title) &&
            ! empty($json->sku) &&
            ! empty($json->brand_id)
        ) {
            // Check for unique product
            $data['sku'] = ProductHelper::getSku($json->sku);
            $validator   = Validator::make($data, [
                'sku' => 'unique:products,sku',
            ]);

            // Get formatted prices
            $formattedPrices  = self::_getPriceArray($json);
            $formattedDetails = (new \App\Services\Products\ProductsCreator)->getGeneralDetails($json->properties, $json);

            $color = \App\ColorNamesReference::getProductColorFromObject($json);

            $composition = $formattedDetails['composition'];
            if (! empty($formattedDetails['composition'])) {
                $composition = \App\Compositions::getErpName($formattedDetails['composition']);
            }

            // If validator fails we have an existing product
            if ($validator->fails()) {
                // Get the product from the database
                try {
                    if ($json->product_id > 0) {
                        $product = Product::where('id', $json->product_id)->first();
                    } else {
                        $product = Product::where('sku', $data['sku'])->first();
                    }
                } catch (Exception $e) {
                    $product = Product::where('sku', $data['sku'])->first();
                }

                // Return false if no product is found
                if (! $product) {
                    return false;
                }

                // Update from scrape to manual images
                if (! $product->is_approved && ! $product->is_listing_rejected && $product->status_id == StatusHelper::$scrape && (int) $nextExcelStatus == StatusHelper::$unableToScrapeImages) {
                    $product->status_id = StatusHelper::$unableToScrapeImages;
                }

                // Update the name and description if the product is not approved and not rejected
                if (! $product->is_approved && ! $product->is_listing_rejected) {
                    $product->name              = ProductHelper::getRedactedText($json->title, 'name');
                    $product->short_description = ProductHelper::getRedactedText($json->description, 'short_description');
                }

                // Update color, composition and material used if the product is not approved
                if (! $product->is_approved) {
                    // Set color
                    $product->color = $color;
                    // Set composition
                    $product->composition = $composition;
                }

                //Check if its json
                if (isset($json->properties['size']) && is_array($json->properties['size'])) {
                    $json->properties['size'] = implode(',', $json->properties['size']);
                }

                // Add sizes to the product
                if (isset($json->properties['size']) && is_array($json->properties['size']) && count($json->properties['size']) > 0) {
                    // Implode the keys
                    $product->size = implode(',', array_values($json->properties['size']));

                    // Replace texts in sizes
                    $product->size = ProductHelper::getRedactedText($product->size, 'composition');
                } elseif (isset($json->properties['size']) && $json->properties['size'] != null) {
                    $product->size = $json->properties['size'];
                }

                // Set product values
                $product->lmeasurement         = isset($json->properties['lmeasurement']) && $json->properties['lmeasurement'] > 0 ? $json->properties['lmeasurement'] : null;
                $product->hmeasurement         = isset($json->properties['hmeasurement']) && $json->properties['hmeasurement'] > 0 ? $json->properties['hmeasurement'] : null;
                $product->dmeasurement         = isset($json->properties['dmeasurement']) && $json->properties['dmeasurement'] > 0 ? $json->properties['dmeasurement'] : null;
                $product->price                = $formattedPrices['price_eur'];
                $product->price_inr            = $formattedPrices['price_inr'];
                $product->price_inr_special    = $formattedPrices['price_inr_special'];
                $product->price_inr_discounted = $formattedPrices['price_inr_discounted'];
                $product->price_eur_special    = $formattedPrices['price_eur_special'];
                $product->price_eur_discounted = $formattedPrices['price_eur_discounted'];
                $product->is_scraped           = $isExcel == 1 ? 0 : 1;
                $product->save();

                if ($product) {
                    if ($isExcel == 1) {
                        if (! $product->hasMedia(\Config('constants.media_tags'))) {
                            foreach ($json->images as $image) {
                                if ($image != '') {
                                    try {
                                        $jpg = \Image::make($image)->encode('jpg');
                                    } catch (Exception $e) {
                                        $array         = explode('/', $image);
                                        $filename_path = end($array);
                                        $jpg           = \Image::make(public_path() . '/uploads/excel-import/' . $filename_path)->encode('jpg');
                                    }
                                    $filename = substr($image, strrpos($image, '/'));
                                    $filename = uniqid();
                                    $media    = MediaUploader::fromString($jpg)->toDirectory('/product/' . floor($product->id / 10000))->useFilename($filename)->upload();
                                    $product->attachMedia($media, config('constants.media_tags'));
                                }
                            }
                        }
                    }
                }

                $product->checkExternalScraperNeed();

                // Update the product status
                ProductStatus::updateStatus($product->id, 'UPDATED_EXISTING_PRODUCT_BY_JSON', 1);

                // Set on sale
                if ($json->is_sale) {
                    $product->is_on_sale = 1;
                    $product->save();
                }

                // Check for valid supplier and store details linked to supplier
                if ($dbSupplier = Supplier::select('suppliers.id')->leftJoin('scrapers as sc', 'sc.supplier_id', 'suppliers.id')->where(function ($query) use ($json) {
                    $query->where('supplier', '=', $json->website)->orWhere('sc.scraper_name', '=', $json->website);
                })->first()) {
                    if ($product) {
                        $product->suppliers()->syncWithoutDetaching([
                            $dbSupplier->supplier_id => [
                                'title'            => ProductHelper::getRedactedText($json->title, 'name'),
                                'description'      => ProductHelper::getRedactedText($json->description, 'short_description'),
                                'supplier_link'    => $json->url,
                                'stock'            => $json->stock,
                                'price'            => $formattedPrices['price_eur'],
                                'price_special'    => $formattedPrices['price_eur_special'],
                                'supplier_id'      => $dbSupplier->id,
                                'price_discounted' => $formattedPrices['price_eur_discounted'],
                                'size'             => $json->properties['size'] ?? null,
                                'color'            => $json->properties['color'],
                                'composition'      => ProductHelper::getRedactedText($json->properties['composition'], 'composition'),
                                'sku'              => $json->original_sku,
                            ],
                        ]);
                        $product->supplier_id = $dbSupplier->id;
                    }
                }

                // Set duplicate count to 0
                $duplicateCount = 0;

                // Set empty array to hold supplier prices
                $supplierPrices = [];

                // Loop over each supplier
                foreach ($product->suppliers_info as $info) {
                    if ($info->price != '') {
                        $supplierPrices[] = $info->price;
                    }
                }

                // Loop over supplierPrices to find duplicates
                foreach (array_count_values($supplierPrices) as $price => $count) {
                    $duplicateCount++;
                }

                if ($duplicateCount > 1) {
                    // Different price
                    $product->is_price_different = 1;
                } else {
                    // Same price
                    $product->is_price_different = 0;
                }

                // Add 1 to stock - TODO: We can calculate the real stock across all suppliers
                $product->stock += 1;
                $product->save();

                // Set parameters for scrap activity
                $params = [
                    'website'            => $json->website,
                    'scraped_product_id' => $product->id,
                    'status'             => 1,
                ];

                // Return
                //returning 1 for Product Updated
                return ['product_created' => 0, 'product_updated' => 1];
            } else {
                // Create new product
                $product = new Product;

                // Return false if product could not be created
                if ($product == null) {
                    return false;
                }

                // Set product values
                $product->status_id             = ($isExcel == 1 ? $nextExcelStatus : 3);
                $product->sku                   = $data['sku'];
                $product->supplier              = $json->website;
                $product->brand                 = $json->brand_id;
                $product->category              = $json->properties['category'] ?? 0;
                $product->name                  = ProductHelper::getRedactedText($json->title, 'name');
                $product->short_description     = ProductHelper::getRedactedText($json->description, 'short_description');
                $product->supplier_link         = $json->url;
                $product->stage                 = 3;
                $product->is_scraped            = $isExcel == 1 ? 0 : 1;
                $product->stock                 = 1;
                $product->is_without_image      = 1;
                $product->is_on_sale            = $json->is_sale ? 1 : 0;
                $product->composition           = $composition;
                $product->color                 = $color;
                $product->size                  = $json->properties['size'] ?? null;
                $product->lmeasurement          = isset($json->properties['lmeasurement']) && $json->properties['lmeasurement'] > 0 ? $json->properties['lmeasurement'] : null;
                $product->hmeasurement          = isset($json->properties['hmeasurement']) && $json->properties['hmeasurement'] > 0 ? $json->properties['hmeasurement'] : null;
                $product->dmeasurement          = isset($json->properties['dmeasurement']) && $json->properties['dmeasurement'] > 0 ? $json->properties['dmeasurement'] : null;
                $product->measurement_size_type = $json->properties['measurement_size_type'];
                $product->made_in               = $json->properties['made_in'] ?? null;
                $product->price                 = $formattedPrices['price_eur'];
                $product->price_eur_special     = $formattedPrices['price_eur_special'];
                $product->price_eur_discounted  = $formattedPrices['price_eur_discounted'];
                $product->price_inr             = $formattedPrices['price_inr'];
                $product->price_inr_special     = $formattedPrices['price_inr_special'];
                $product->price_inr_discounted  = $formattedPrices['price_inr_discounted'];

                // Try to save the product
                try {
                    $product->save();
                    $product->checkExternalScraperNeed();
                } catch (Exception $exception) {
                    $product->save();

                    return false;
                }

                if ($product) {
                    if ($isExcel == 1) {
                        if (! $product->hasMedia(\Config('constants.media_tags'))) {
                            foreach ($json->images as $image) {
                                if ($image != '') {
                                    try {
                                        $jpg = \Image::make($image)->encode('jpg');
                                    } catch (Exception $e) {
                                        $array         = explode('/', $image);
                                        $filename_path = end($array);
                                        $jpg           = \Image::make(public_path() . '/uploads/excel-import/' . $filename_path)->encode('jpg');
                                    }
                                    $filename = substr($image, strrpos($image, '/'));
                                    $filename = uniqid();
                                    $media    = MediaUploader::fromString($jpg)->toDirectory('/product/' . floor($product->id / 10000))->useFilename($filename)->upload();
                                    $product->attachMedia($media, config('constants.media_tags'));
                                }
                            }
                        }
                    }
                }

                // Update the product status
                ProductStatus::updateStatus($product->id, 'CREATED_NEW_PRODUCT_BY_JSON', 1);

                // Check for valid supplier and store details linked to supplier
                if ($dbSupplier = Supplier::select('suppliers.id')->leftJoin('scrapers as sc', 'sc.supplier_id', 'suppliers.id')->where(function ($query) use ($json) {
                    $query->where('supplier', '=', $json->website)->orWhere('sc.scraper_name', '=', $json->website);
                })->first()) {
                    if ($product) {
                        $product->suppliers()->syncWithoutDetaching([
                            $dbSupplier->supplier_id => [
                                'title'            => ProductHelper::getRedactedText($json->title, 'name'),
                                'description'      => ProductHelper::getRedactedText($json->description, 'short_description'),
                                'supplier_link'    => $json->url,
                                'stock'            => $json->stock,
                                'price'            => $formattedPrices['price_eur'],
                                'price_special'    => $formattedPrices['price_eur_special'],
                                'supplier_id'      => $dbSupplier->id,
                                'price_discounted' => $formattedPrices['price_eur_discounted'],
                                'size'             => $json->properties['size'] ?? null,
                                'color'            => $json->properties['color'],
                                'composition'      => ProductHelper::getRedactedText($json->properties['composition'], 'composition'),
                                'sku'              => $json->original_sku,
                            ],
                        ]);
                    }
                }

                // Return true Product Created
                return ['product_created' => 1, 'product_updated' => 0];
            }
        }

        // Return false by default
        return false;
    }

    private static function _getPriceArray($json)
    {
        // Get brand object by brand ID
        $brand = Brand::find($json->brand_id);

        if (strpos($json->price, ',') !== false) {
            if (strpos($json->price, '.') !== false) {
                if (strpos($json->price, ',') < strpos($json->price, '.')) {
                    $priceEur = str_replace(',', '', $json->price);
                } else {
                    $priceEur = str_replace(',', '|', $json->price);
                    $priceEur = str_replace('.', ',', $priceEur);
                    $priceEur = str_replace('|', '.', $priceEur);
                    $priceEur = str_replace(',', '', $priceEur);
                }
            } else {
                $priceEur = str_replace(',', '.', $json->price);
            }
        } else {
            $priceEur = $json->price;
        }

        // Get numbers and trim final price
        $priceEur = trim(preg_replace('/[^0-9\.]/i', '', $priceEur));

        //
        if (strpos($priceEur, '.') !== false) {
            // Explode price
            $exploded = explode('.', $priceEur);

            // Check if there are numbers after the dot
            if (strlen($exploded[1]) > 2) {
                if (count($exploded) > 2) {
                    $sliced = array_slice($exploded, 0, 2);
                } else {
                    $sliced = $exploded;
                }

                // Convert price to the lowest minor unit
                $priceEur = implode('', $sliced);
            }
        }

        // Set price to rounded finalPrice
        $priceEur = (strlen($priceEur) > 0 ? round($priceEur) : 1);

        // Check if the euro to rupee rate is set
        if (! empty($brand->euro_to_inr)) {
            $priceInr = $brand->euro_to_inr * $priceEur;
        } else {
            $priceInr = Setting::get('euro_to_inr') * $priceEur;
        }

        // Build price in INR and special price
        $priceInr = round($priceInr, -3);

        //Build Special Price In EUR
        if (! empty($priceEur) && ! empty($priceInr)) {
            $priceEurSpecial = $priceEur - ($priceEur * $brand->deduction_percentage) / 100;
            $priceInrSpecial = $priceInr - ($priceInr * $brand->deduction_percentage) / 100;
        } else {
            $priceEurSpecial = '';
            $priceInrSpecial = '';
        }

        // Product on sale?
        if ($json->is_sale == 1 && $brand->sales_discount > 0 && ! empty($priceEurSpecial)) {
            $priceEurDiscounted = $priceEurSpecial - ($priceEurSpecial * $brand->sales_discount) / 100;
            $priceInrDiscounted = $priceInrSpecial - ($priceInrSpecial * $brand->sales_discount) / 100;
        } else {
            $priceEurDiscounted = 0;
            $priceInrDiscounted = 0;
        }

        // Return prices
        return [
            'price_eur'            => $priceEur,
            'price_eur_special'    => $priceEurSpecial,
            'price_eur_discounted' => $priceEurDiscounted,
            'price_inr'            => $priceInr,
            'price_inr_special'    => $priceInrSpecial,
            'price_inr_discounted' => $priceInrDiscounted,
        ];
    }

    public function messages()
    {
        return $this->hasMany(\App\Message::class, 'moduleid')->where('moduletype', 'product')->latest()->first();
    }

    public function product_category()
    {
        return $this->belongsTo(\App\Category::class, 'category');
    }

    public function log_scraper_vs_ai()
    {
        return $this->hasMany(\App\LogScraperVsAi::class);
    }

    public function getCommunicationAttribute()
    {
        return $this->messages();
    }

    public function getImageurlAttribute()
    {
        return $this->getMedia(config('constants.media_tags'))->first() ? getMediaUrl($this->getMedia(config('constants.media_tags'))->first()) : '';
    }

    public function notifications()
    {
        return $this->hasMany(\App\Notification::class);
    }

    public function suppliers()
    {
        return $this->belongsToMany(\App\Supplier::class, 'product_suppliers', 'product_id', 'supplier_id');
    }

    public function suppliers_name()
    {
        return $this->belongsToMany(\App\Supplier::class, 'product_suppliers', 'product_id', 'supplier_id')->select('supplier', 'supplier_id', 'product_id');
    }

    public function suppliers_info()
    {
        return $this->hasMany(\App\ProductSupplier::class);
    }

    public function attribute_histories()
    {
        return $this->hasMany(\App\ProductUpdatedAttributeHistory::class, 'product_id', 'id')->groupBy('attribute_name');
    }

    public function private_views()
    {
        return $this->belongsToMany(\App\PrivateView::class, 'private_view_products', 'product_id', 'private_view_id');
    }

    public function suggestions()
    {
        return $this->belongsToMany(\App\SuggestedProduct::class, 'suggested_product_lists', 'product_id', 'suggested_products_id');
    }

    public function amends()
    {
        return $this->hasMany(CropAmends::class, 'product_id', 'id');
    }

    public function brands()
    {
        return $this->hasOne(\App\Brand::class, 'id', 'brand');
    }

    public function categories()
    {
        return $this->hasOne(\App\Category::class, 'id', 'category');
    }

    public function magentoLog()
    {
        return $this->hasOne(\App\Loggers\LogListMagento::class)->latest();
    }

    public function references()
    {
        return $this->hasMany(\App\ProductReference::class);
    }

    public static function getPendingProductsCount($roleType)
    {
        $stage    = new Stage();
        $stage_no = intval($stage->getID($roleType));

        return DB::table('products')
            ->where('stage', $stage_no - 1)
            ->where('isApproved', '!=', -1)
            ->whereNull('dnf')
            ->whereNull('deleted_at')
            ->count();
    }

    public function purchases()
    {
        return $this->belongsToMany(\App\Purchase::class, 'purchase_products', 'product_id', 'purchase_id');
    }

    public function sizes()
    {
        return $this->hasMany(ProductSizes::class);
    }

    public function orderproducts()
    {
        return $this->hasMany(\App\OrderProduct::class, 'product_id', 'id');
    }

    public function scraped_products()
    {
        return $this->hasOne(\App\ScrapedProducts::class, 'product_id', 'id');
    }

    public function many_scraped_products()
    {
        return $this->hasMany(\App\ScrapedProducts::class, 'sku', 'sku');
    }

    public function user()
    {
        return $this->belongsToMany(\App\User::class, 'user_products', 'product_id', 'user_id');
    }

    public function cropApprover()
    {
        return $this->belongsTo(User::class, 'crop_approved_by', 'id');
    }

    public function cropRejector()
    {
        return $this->belongsTo(User::class, 'crop_rejected_by', 'id');
    }

    public function approver()
    {
        return $this->belongsTo(User::class, 'approved_by', 'id');
    }

    public function rejector()
    {
        return $this->belongsTo(User::class, 'listing_rejected_by', 'id');
    }

    public function cropOrderer()
    {
        return $this->belongsTo(User::class, 'crop_ordered_by', 'id');
    }

    public function rejectedCropApprover()
    {
        return $this->hasOne(User::class, 'reject_approved_by', 'id');
    }

    public function activities()
    {
        return $this->hasMany(ListingHistory::class, 'product_id', 'id');
    }

    public function statuses()
    {
        return $this->hasMany(ProductStatus::class, 'product_id', 'id');
    }

    public function groups()
    {
        return $this->hasMany(ProductQuicksellGroup::class, 'product_id', 'id');
    }

    public function croppedImages()
    {
        return $this->hasMany(SiteCroppedImages::class, 'product_id', 'id');
    }

    public function mediables()
    {
        return $this->hasMany(Mediable::class, 'mediable_id', 'id');
    }

    public function attachImagesToProduct($arrImages = null)
    {
        // check media exist or
        $mediaRecords = false;
        if ($this->hasMedia(\Config('constants.media_original_tag'))) {
            foreach ($this->getMedia(\Config('constants.media_original_tag')) as $mRecord) {
                if (file_exists($mRecord->getAbsolutePath())) {
                    $mediaRecords = true;
                }
            }
        }

        if (! $mediaRecords || is_array($arrImages)) {
            // images given
            if (is_array($arrImages) && count($arrImages) > 0) {
                $scrapedProduct = true;
            } else {
                //getting image details from scraped Products
                $scrapedProduct = ScrapedProducts::where('sku', $this->sku)->orderBy('updated_at', 'desc')->first();
            }

            if ($scrapedProduct != null and $scrapedProduct != '') {
                //Looping through Product Images
                $countImageUpdated = 0;

                // Set arr images
                if (! is_array($arrImages)) {
                    $arrImages = $scrapedProduct->images;
                }

                foreach ($arrImages as $image) {
                    //check if image has http or https link
                    if (strpos($image, 'http') === false) {
                        continue;
                    }

                    try {
                        //generating image from image
                        //this was quick fix for redirect url issue
                        $redirect = \App\Helpers::findUltimateDestination($image, 2);
                        if ($redirect != null) {
                            $image = str_replace(' ', '%20', $redirect);
                        }
                        $jpg = \Image::make($image)->encode('jpg');
                    } catch (Exception $e) {
                        // if images are null
                        $jpg = null;
                        // need to define error update
                        if ($scrapedProduct && is_object($scrapedProduct)) {
                            $lastScraper = ScrapedProducts::where('sku', $this->sku)->latest()->first();
                            if ($lastScraper) {
                                $lastScraper->validation_result = $lastScraper->validation_result . PHP_EOL . '[error] ' . $e->getMessage() . ' One or more images has an invalid URL : ' . $image . PHP_EOL;
                                $lastScraper->save();
                            }
                        }
                    }
                    if ($jpg != null) {
                        $filename = substr($image, strrpos($image, '/'));
                        $filename = str_replace(['/', '.JPEG', '.JPG', '.jpeg', '.jpg', '.PNG', '.png'], '', urldecode($filename));

                        //save image to media
                        $media = MediaUploader::fromString($jpg)->toDirectory('/product/' . floor($this->id / 10000) . '/' . $this->id)->useFilename($filename)->onDuplicateIncrement()->upload();
                        $this->attachMedia($media, config('constants.media_original_tag'));
                        $countImageUpdated++;
                    }
                }
            }
        }
    }

    public function commonComposition($category, $composition)
    {
        $hscodeList = HsCodeGroupsCategoriesComposition::where('category_id', $category)->where('composition', $composition)->first();

        if ($hscodeList != null && $hscodeList != '') {
            $groupId = $hscodeList->hs_code_group_id;
            $group   = HsCodeGroup::find($groupId);
            if ($group != null && $group != '' && $group->composition != null) {
                return $group->composition;
            } else {
                $hscodeDetails = HsCode::find($group->hs_code_id);
                if ($hscodeDetails != null && $hscodeDetails != '') {
                    if ($hscodeDetails->correct_composition != null) {
                        return $hscodeDetails->correct_composition;
                    } else {
                        return $composition;
                    }
                } else {
                    return $composition;
                }
            }
        } else {
            return $composition;
        }
    }

    public function hsCode($category, $composition)
    {
        $hscodeList = HsCodeGroupsCategoriesComposition::where('category_id', $category)->where('composition', $composition)->first();

        if ($hscodeList != null && $hscodeList != '') {
            $groupId       = $hscodeList->hs_code_group_id;
            $group         = HsCodeGroup::find($groupId);
            $hscodeDetails = HsCode::find($group->hs_code_id);
            if ($hscodeDetails != null && $hscodeDetails != '') {
                if ($hscodeDetails->description != null) {
                    return $hscodeDetails->code;
                } else {
                    return false;
                }
            } else {
                return false;
            }
        } else {
            return false;
        }
    }

    public function isGroupExist($category, $composition, $parentCategory, $childCategory)
    {
        $composition = strip_tags($composition);
        $composition = str_replace(['&nbsp;', '/span>'], ' ', $composition);

        $hscodeList = HsCodeGroupsCategoriesComposition::where('category_id', $category)->where('composition', 'LIKE', '%' . $composition . '%')->first();

        if ($hscodeList != null && $hscodeList != '') {
            return false;
        } else {
            return true;
        }
    }

    public function websiteProducts()
    {
        return $this->hasMany(\App\WebsiteProduct::class, 'product_id', 'id');
    }

    public function publishedOn()
    {
        return array_keys($this->websiteProducts->pluck('product_id', 'store_website_id')->toArray());
    }

    /**
     * get product images from watson
     *
     * @param mixed $brands
     * @param mixed $category
     * @param mixed $existeProducts
     */
    public static function attachProductChat($brands = [], $category = [], $existeProducts = [])
    {
        return \App\Product::whereIn('brand', $brands)->whereIn('category', $category)
            ->whereNotIn('id', $existeProducts)
            ->join('mediables as m', function ($q) {
                $q->on('m.mediable_id', 'products.id')->where('m.mediable_type', \App\Product::class);
            })
            ->where('stock', '>', 0)
            ->orderBy('created_at', 'desc')
            ->limit(\App\Library\Watson\Action\SendProductImages::SENDING_LIMIT)
            ->get();
    }

    public function createProductPriceLog($order_id = '', $product_id = '', $stage = '', $oparetion = '', $product_price = '', $product_discount = '', $log = '', $product_total_price = '', $store_website_id = '', $customer_id = '')
    {
        return ProductPriceDiscountLog::create([
            'order_id'            => $order_id,
            'product_id'          => $product_id,
            'customer_id'         => $customer_id,
            'store_website_id'    => $store_website_id,
            'stage'               => $stage,
            'oparetion'           => $oparetion,
            'product_price'       => $product_price,
            'product_total_price' => $product_total_price,
            'product_discount'    => $product_discount,
            'log'                 => $log,
        ]);
    }

    /**
     * Get price calculation
     *
     * @param mixed      $websiteId
     * @param null|mixed $countryId
     * @param null|mixed $countryGroup
     * @param mixed      $isOvveride
     * @param mixed      $dutyPrice
     * @param null|mixed $updated_seg_discount
     * @param null|mixed $updated_add_profit
     * @param null|mixed $checked_add_profit
     * @param null|mixed $default_price
     * @param null|mixed $category_segment
     * @param null|mixed $order_id
     * @param null|mixed $product_id
     * @param null|mixed $customer_id
     *
     * @return float
     **/
    public function getPrice($websiteId, $countryId = null, $countryGroup = null, $isOvveride = false, $dutyPrice = 0, $updated_seg_discount = null, $updated_add_profit = null, $checked_add_profit = null, $default_price = null, $category_segment = null, $order_id = null, $product_id = null, $customer_id = null)
    {
        $website      = is_object($websiteId) ? $websiteId : \App\StoreWebsite::find($websiteId);
        $priceRecords = null;
        if (is_object($website)) {
            $this->createProductPriceLog($order_id, $product_id, 'Web site id is found', '', '', '', 'Website Record found.', '', $website->id, $customer_id);
        } else {
            $this->createProductPriceLog($order_id, $product_id, 'Web site found id not found', '', '', '', 'Web site found id not found', '', $websiteId->id, $customer_id);
        }

        $brandM        = @$this->brands;
        $productPrice  = $default_price != null ? $default_price : $this->price;
        $default_price = $default_price != null ? $default_price : $this->price;
        if (($productPrice || $default_price)) {
            $this->createProductPriceLog($order_id, $product_id, 'Product price', '', $productPrice, '0', 'productPrice : ' . $productPrice . '<br/> default_price : ' . $default_price, $default_price, $website->id, $customer_id);
        } else {
            $this->createProductPriceLog($order_id, $product_id, 'Product price not found', '', '', '', 'Product price not found', $default_price, $websiteId->id, $customer_id);
        }

        $brandID = 0;
        if (isset($brandM) && $brandM) {
            $brandID = $brandM->id;
        }
        $brandID = empty($brandID) ? $this->brand_id : $brandID;
        if (($brandID)) {
            $this->createProductPriceLog($order_id, $product_id, 'BrandID', '', $productPrice, '0', 'brandID : ' . $brandID . '<br/> Default Price : ' . $default_price, $default_price, $website->id, $customer_id);
        } else {
            $this->createProductPriceLog($order_id, $product_id, 'BrandID not found', '', '', '', 'BrandID not found', $default_price, $websiteId->id, $customer_id);
        }

        // category discount
        $segmentDiscount = 0;
        if (! empty($this->category)) {
            $catdiscount = \DB::table('categories')->join('category_segments as cs', 'cs.id', 'categories.category_segment_id')
                ->join('category_segment_discounts as csd', 'csd.category_segment_id', 'cs.id')
                ->where('categories.id', $this->category)
                ->where('csd.brand_id', $brandID)
                ->select('csd.*')
                ->first();

            if ($catdiscount) {
                if ($updated_seg_discount) {
                    if (($updated_seg_discount)) {
                        $this->createProductPriceLog($order_id, $product_id, 'category discount: updated_seg_discount', '', $productPrice, $updated_seg_discount, 'updated_seg_discount : ' . $updated_seg_discount . '<br> ==>' . json_encode($catdiscount), $default_price, $website->id, $customer_id);
                    }

                    $category_segment_discounts_row = \DB::table('category_segment_discounts')->where('id', $catdiscount->id)->update(['amount' => $updated_seg_discount]);
                    if ($category_segment_discounts_row) {
                        $catdiscount->amount = $updated_seg_discount;
                        if (($category_segment_discounts_row)) {
                            $this->createProductPriceLog($order_id, $product_id, 'category discount id : ' . $catdiscount->id . 'category_segment_discounts_row', '', $productPrice, $updated_seg_discount, json_encode($category_segment_discounts_row), $default_price, $website->id, $customer_id);
                        }
                    }
                }
                if ($catdiscount->amount_type == 'percentage') {
                    $percentage      = $catdiscount->amount;
                    $percentageA     = ($productPrice * $percentage) / 100;
                    $segmentDiscount = $percentageA;
                    $productPrice    = $productPrice - $percentageA;
                    if (($catdiscount->amount_type)) {
                        $this->createProductPriceLog($order_id, $product_id, 'category discount: amount_type is percentage', 'Product price: ' . $productPrice . ' * percentage : ' . $percentage . ' /100 ', $productPrice, $segmentDiscount, 'Product price Discount', $default_price, $website->id, $customer_id);
                    }
                } else {
                    $segmentDiscount = $catdiscount->amount;
                    $productPrice    = $productPrice - $catdiscount->amount;
                    if (($catdiscount->amount_type)) {
                        $this->createProductPriceLog($order_id, $product_id, 'category discount: amount_type not percentage', 'Product price: ' . $productPrice . ' - categoryDiscount : ' . $catdiscount->amount, $productPrice, $segmentDiscount, 'Product price - categoryDiscount', $default_price, $website->id, $customer_id);
                    }
                }
            }
        }
        $operation  = '';
        $logDetails = '';

        // add a product price duty
        if ($dutyPrice > 0) {
            $totalAmount  = $productPrice * $dutyPrice / 100;
            $productPrice = $productPrice + $totalAmount;
            $this->createProductPriceLog($order_id, $product_id, 'Add a product price duty', '(Product price: ' . $productPrice . ' * dutyPrice: ' . $dutyPrice . ' / 100) + Priduct total Amount : ' . $totalAmount, $productPrice, $totalAmount, 'Product price + product price duty', $default_price, $website->id, $customer_id);
        }

        if ($website) {
            $brand = $category_segment != null ? $category_segment : @$this->brands->brand_segment;

            $category = $this->category;
            $country  = $countryId;

            $this->createProductPriceLog($order_id, $product_id, 'Price Override before', $operation, $productPrice, $segmentDiscount, 'Website data is available Price Override before', $default_price, $website->id, $customer_id);
            $priceModal = \App\PriceOverride::where('store_website_id', $website->id);
            $this->createProductPriceLog($order_id, $product_id, 'Price Override after', $operation, $productPrice, $segmentDiscount, 'Website data is available Price Override before', $default_price, $website->id, $customer_id);
            $priceCModal = clone $priceModal;

            if (! empty($brand) && ! empty($category) && ! empty($country)) {
                $priceRecords = $priceModal->where('country_code', $country)->where('brand_segment', $brand)->where('category_id', $category)->first();
                $this->createProductPriceLog($order_id, $product_id, 'Price Record', $operation, $productPrice, $segmentDiscount, json_encode($priceRecords), $default_price, $website->id, $customer_id);
            }

            if (! $priceRecords) {
                $this->createProductPriceLog($order_id, $product_id, 'Price Override before', $operation, $productPrice, $segmentDiscount, 'Price Override before', $default_price, $website->id, $customer_id);
                $priceModal   = \App\PriceOverride::where('store_website_id', $website->id);
                $priceRecords = $priceModal->where(function ($q) use ($brand, $category, $country) {
                    $q->orWhere(function ($q) use ($brand, $category) {
                        $q->where('brand_segment', $brand)->where('category_id', $category);
                    })->orWhere(function ($q) use ($brand, $country) {
                        $q->where('brand_segment', $brand)->where('country_code', $country);
                    })->orWhere(function ($q) use ($country, $category) {
                        $q->where('country_code', $country)->where('category_id', $category);
                    });
                })->first();
                $this->createProductPriceLog($order_id, $product_id, 'Price Record by brand_segment or country_code', $operation, $productPrice, $segmentDiscount, json_encode($priceRecords), $default_price, $website->id, $customer_id);
            }

            if (! $priceRecords) {
                $this->createProductPriceLog($order_id, $product_id, 'Price Override before', $operation, $productPrice, $segmentDiscount, 'Price Override before', $default_price, $website->id, $customer_id);
                $priceModal   = \App\PriceOverride::where('store_website_id', $website->id);
                $priceRecords = $priceModal->where('brand_segment', $brand)->first();
                $this->createProductPriceLog($order_id, $product_id, 'Price Override after', $operation, $productPrice, $segmentDiscount, json_encode($priceRecords), $default_price, $website->id, $customer_id);
            }

            if (! $priceRecords) {
                $this->createProductPriceLog($order_id, $product_id, 'Price Override before', $operation, $productPrice, $segmentDiscount, 'Price Override before', $default_price, $website->id, $customer_id);
                $priceModal   = \App\PriceOverride::where('store_website_id', $website->id);
                $priceRecords = $priceModal->where('category_id', $category)->first();
                $this->createProductPriceLog($order_id, $product_id, 'Price Record by category_id', $operation, $productPrice, $segmentDiscount, json_encode($priceRecords), $default_price, $website->id, $customer_id);
            }

            if (! $priceRecords) {
                $this->createProductPriceLog($order_id, $product_id, 'Price Override before', $operation, $productPrice, $segmentDiscount, 'Price Override before', $default_price, $website->id, $customer_id);
                $priceModal   = \App\PriceOverride::where('store_website_id', $website->id);
                $priceRecords = $priceModal->where('country_code', $country)->first();
                $this->createProductPriceLog($order_id, $product_id, 'Price Record by country_code', $operation, $productPrice, $segmentDiscount, $logDetails, $default_price, $website->id, $customer_id);
            }

            if ($priceRecords) {
                if ($updated_add_profit) {
                    $value                  = $updated_add_profit >= 0 ? $updated_add_profit : $updated_add_profit * (-1);
                    $value                  = $priceRecords->type == 'PERCENTAGE' ? $updated_add_profit : $productPrice * $updated_add_profit / 100;
                    $updated_add_profit_row = \DB::table('price_overrides')->where('id', $priceRecords->id)->update(
                        [
                            'calculated' => $updated_add_profit >= 0 ? '+' : '-',
                            'value'      => $value,
                        ]
                    );
                    if ($updated_add_profit_row) {
                        $priceRecords->value = $updated_add_profit;
                    }
                    $this->createProductPriceLog($order_id, $product_id, 'Price Record by country_code', $operation, $productPrice, $segmentDiscount, json_encode($priceRecords), $default_price, $website->id, $customer_id);
                }
                if ($priceRecords->calculated == '+') {
                    if ($priceRecords->type == 'PERCENTAGE') {
                        $price              = ($productPrice * $priceRecords->value) / 100;
                        $last_product_total = $this->createProductPriceLog($order_id, $product_id, 'Price Record Type : PERCENTAGE', '(Product Price : ' . $productPrice . ' * Price Records: ' . $priceRecords->value . ') / 100', $productPrice, $price, 'productPrice * priceRecordsvalue / 100', $default_price, $website->id, $customer_id);

                        return ['status' => true, 'original_price' => $default_price, 'promotion_per' => $priceRecords->value, 'promotion' => $price, 'segment_discount' => $segmentDiscount, 'total' => $productPrice + $price, 'segment_discount_per' => isset($catdiscount) ? $catdiscount->amount : 0, 'last_log' => $last_product_total, 'before_iva_product_price' => 0];
                    } else {
                        $percentage         = ($priceRecords->value / $productPrice) * 100;
                        $last_product_total = $this->createProductPriceLog($order_id, $product_id, 'Price Record Type : PERCENTAGE', 'product Price: ' . $productPrice . ' / Price Records: ' . $priceRecords->value . ' * 100', $productPrice, $percentage, 'productPrice / priceRecordsvalue * 100', $default_price, $website->id, $customer_id);

                        return ['status' => true, 'original_price' => $default_price, 'promotion_per' => $percentage, 'promotion' => $priceRecords->value, 'segment_discount' => $segmentDiscount, 'total' => $productPrice + $priceRecords->value, 'segment_discount_per' => isset($catdiscount) ? $catdiscount->amount : 0, 'last_log' => $last_product_total, 'before_iva_product_price' => 0];
                    }
                }
                if ($priceRecords->calculated == '-') {
                    if ($priceRecords->type == 'PERCENTAGE') {
                        $price              = ($productPrice * $priceRecords->value) / 100;
                        $last_product_total = $this->createProductPriceLog($order_id, $product_id, 'Produc Price Records calculated - is PERCENTAGE', 'Product Price: ' . $productPrice . ' * Price Records: ' . $priceRecords->value . ' / 100', $productPrice, $price, 'productPrice * priceRecordsvalue / 100', $default_price, $website->id, $customer_id);

                        return ['status' => true, 'original_price' => $default_price, 'promotion_per' => -$priceRecords->value, 'promotion' => -$price, 'segment_discount' => $segmentDiscount, 'total' => $productPrice - $price, 'segment_discount_per' => isset($catdiscount) ? $catdiscount->amount : 0, 'last_log' => $last_product_total, 'before_iva_product_price' => 0];
                    } else {
                        $percentage         = ($priceRecords->value / $productPrice) * 100;
                        $last_product_total = $this->createProductPriceLog($order_id, $product_id, 'Produc Price Records calculated - not in PERCENTAGE ', 'Product Price: ' . $productPrice . ' / Price Records: ' . $priceRecords->value . '* 100', $productPrice, $percentage, 'productPrice / priceRecordsvalue * 100', $default_price, $website->id, $customer_id);

                        return ['status' => true, 'original_price' => $default_price, 'promotion_per' => -$percentage, 'promotion' => -$priceRecords->value, 'segment_discount' => $segmentDiscount, 'total' => $productPrice - $priceRecords->value, 'segment_discount_per' => isset($catdiscount) ? $catdiscount->amount : 0, 'last_log' => $last_product_total, 'before_iva_product_price' => 0];
                    }
                }
            } elseif ($updated_add_profit || ! empty($checked_add_profit)) {
                if (empty($brand)) {
                    $last_product_total = $this->createProductPriceLog($order_id, $product_id, 'Brand is empty', $operation, $productPrice, $segmentDiscount, 'segmentDiscount : ' . $segmentDiscount, $default_price, $website->id, $customer_id);

                    return ['status' => false, 'field' => 'brand', 'original_price' => $default_price, 'promotion_per' => 0, 'promotion' => 0, 'segment_discount' => $segmentDiscount, 'total' => $productPrice - 0, 'segment_discount_per' => isset($catdiscount) ? $catdiscount->amount : 0, 'last_log' => $last_product_total, 'before_iva_product_price' => 0];
                }
                if (empty($category)) {
                    $last_product_total = $this->createProductPriceLog($order_id, $product_id, 'Category is empty', $operation, $productPrice, $segmentDiscount, 'segmentDiscount : ' . $segmentDiscount, $default_price, $website->id, $customer_id);

                    return ['status' => false, 'field' => 'category', 'original_price' => $default_price, 'promotion_per' => 0, 'promotion' => 0, 'segment_discount' => $segmentDiscount, 'total' => $productPrice - 0, 'segment_discount_per' => isset($catdiscount) ? $catdiscount->amount : 0, 'last_log' => $last_product_total, 'before_iva_product_price' => 0];
                }
                if (empty($country)) {
                    $last_product_total = $this->createProductPriceLog($order_id, $product_id, 'country is empty', $operation, $productPrice, $segmentDiscount, 'segmentDiscount : ' . $segmentDiscount, $default_price, $website->id, $customer_id);

                    return ['status' => false, 'field' => 'country', 'original_price' => $default_price, 'promotion_per' => 0, 'promotion' => 0, 'segment_discount' => $segmentDiscount, 'total' => $productPrice - 0, 'segment_discount_per' => isset($catdiscount) ? $catdiscount->amount : 0, 'last_log' => $last_product_total, 'before_iva_product_price' => 0];
                }
                if (! empty($brand) && ! empty($category) && ! empty($country) && empty($checked_add_profit)) {
                    $newPriceRecords = PriceOverride::create([
                        'store_website_id' => $website->id,
                        'brand_segment'    => $brand,
                        'category_id'      => $category,
                        'type'             => 'PERCENTAGE',
                        'calculated'       => $updated_add_profit >= 0 ? '+' : '-',
                        'value'            => $updated_add_profit >= 0 ? $updated_add_profit : $updated_add_profit * (-1),
                        'country_code'     => $country,
                    ]);
                    $catDis             = isset($catdiscount) ? $catdiscount->amount : 0;
                    $last_product_total = $this->createProductPriceLog($order_id, $product_id, 'Brand,Category,Country, checked_add_profit is Not empty', $updated_add_profit, $productPrice, $newPriceRecords->value, 'promotion_per : ' . $newPriceRecords->value . (' <br/> total = ' . ($productPrice - $newPriceRecords->value)) . '<br/> Category Discount' . $catDis, $default_price, $website->id, $customer_id);

                    return ['status' => true, 'original_price' => $default_price, 'promotion_per' => $newPriceRecords->value, 'promotion' => $newPriceRecords->value, 'segment_discount' => $segmentDiscount, 'total' => $productPrice - $newPriceRecords->value, 'segment_discount_per' => isset($catdiscount) ? $catdiscount->amount : 0, 'last_log' => $last_product_total, 'before_iva_product_price' => 0];
                }
            }
        }
        $last_product_total = $this->createProductPriceLog($order_id, $product_id, 'original_price', '', $productPrice, $segmentDiscount, ' product original price ' . $default_price);

        return ['status'               => true, 'original_price' => $default_price, 'promotion_per' => '0.00', 'promotion' => '0.00', 'segment_discount' => $segmentDiscount, 'total' => $productPrice, 'segment_discount_per' => isset($catdiscount) ? $catdiscount->amount : 0, 'segment_discount_per' => isset($catdiscount) ? $catdiscount->amount : 0, 'last_log' => $last_product_total,
            'before_iva_product_price' => 0, //  $beforeIVAProductPrice
        ];
    }

    public function getDuty($countryCode, $withtype = false)
    {
        $countryCode = \App\SimplyDutyCountry::where('country_code', $countryCode)->first();

        if ($countryCode) {
            if ($countryCode->default_duty > 0) {
                return (float) $countryCode->default_duty;
            } else {
                $segment = \App\SimplyDutySegment::where('id', $countryCode->segment_id)->first();
                if ($segment) {
                    return (float) $segment->price;
                }
            }
        }

        return (float) '0.00';
    }

    public function storeWebsiteProductAttributes($storeId = 0)
    {
        return \App\StoreWebsiteProductAttribute::where('product_id', $this->id)->where('store_website_id', $storeId)->first();
    }

    public function checkExternalScraperNeed($fromscraper = false)
    {
        $parentcate = ($this->category > 0 && $this->categories) ? $this->categories->parent_id : null;

        // sets initial status pending for requestForExternalScraper in product status histroy
        $request_external_scraper_status_data = [
            'product_id'     => $this->id,
            'old_status'     => $this->status_id,
            'new_status'     => StatusHelper::$requestForExternalScraper,
            'pending_status' => 1,
            'created_at'     => date('Y-m-d H:i:s'),
        ];
        \App\ProductStatusHistory::addStatusToProduct($request_external_scraper_status_data);

        // sets initial status pending for unknownColor in product status histroy
        $unknown_color_status = [
            'product_id'     => $this->id,
            'old_status'     => $this->status_id,
            'new_status'     => StatusHelper::$unknownColor,
            'pending_status' => 1,
            'created_at'     => date('Y-m-d H:i:s'),
        ];
        \App\ProductStatusHistory::addStatusToProduct($unknown_color_status);

        // sets initial status pending for unknownComposition in product status histroy
        $unknown_composition_status = [
            'product_id'     => $this->id,
            'old_status'     => $this->status_id,
            'new_status'     => StatusHelper::$unknownComposition,
            'pending_status' => 1,
            'created_at'     => date('Y-m-d H:i:s'),
        ];
        \App\ProductStatusHistory::addStatusToProduct($unknown_composition_status);

        // sets initial status pending for unknownMeasurement in product status histroy
        $unknown_measurement_status = [
            'product_id'     => $this->id,
            'old_status'     => $this->status_id,
            'new_status'     => StatusHelper::$unknownMeasurement,
            'pending_status' => 1,
            'created_at'     => date('Y-m-d H:i:s'),
        ];
        \App\ProductStatusHistory::addStatusToProduct($unknown_measurement_status);

        // sets initial status pending for unknownMeasurement in product status histroy
        $unknown_size_status = [
            'product_id'     => $this->id,
            'old_status'     => $this->status_id,
            'new_status'     => StatusHelper::$unknownSize,
            'pending_status' => 1,
            'created_at'     => date('Y-m-d H:i:s'),
        ];
        \App\ProductStatusHistory::addStatusToProduct($unknown_size_status);

        if (empty($this->name)
            || $this->name == '..'
            || empty($this->short_description)
            || empty($this->price)
            || ! $this->hasMedia(\Config('constants.media_original_tag'))
        ) {
            $this->status_id = StatusHelper::$requestForExternalScraper;
            if (empty($this->name)) {
                $this->sub_status_id = StatusHelper::$unknownTitle;
            }

            if (empty($this->short_description)) {
                $this->sub_status_id = StatusHelper::$unknownDescription;
            }

            if (empty($this->price)) {
                $this->sub_status_id = StatusHelper::$unknownPrice;
            }

            $this->save();
        } elseif (empty($this->composition) || empty($this->color) || empty($this->category || $this->category < 1)) {
            if (empty($this->composition)) {
                $this->status_id     = StatusHelper::$requestForExternalScraper;
                $this->sub_status_id = StatusHelper::$unknownComposition;
            } elseif (empty($this->color)) {
                $this->status_id     = StatusHelper::$requestForExternalScraper;
                $this->sub_status_id = StatusHelper::$unknownColor;
            } else {
                $this->status_id     = StatusHelper::$requestForExternalScraper;
                $this->sub_status_id = StatusHelper::$unknownCategory;
            }

            $this->save();
        } elseif ((empty($this->lmeasurement) && empty($this->hmeasurement) && empty($this->dmeasurement)) && $this->categories && $this->categories->need_to_check_measurement) {
            $this->status_id     = StatusHelper::$unknownMeasurement;
            $this->sub_status_id = null;
            $this->save();
        } else {
            // check that product has how many description
            $descriptionCount = $this->suppliers_info->count();
            if ($descriptionCount <= 1 && (empty($this->brands->next_step) || $this->brands->next_step == StatusHelper::$requestForExternalScraper)) {
                $this->status_id     = StatusHelper::$requestForExternalScraper;
                $this->sub_status_id = StatusHelper::$unknownDescription;
                $this->save();
            }

            // if validation pass and status is still external scraper then remove and put for the auto crop
            if ($this->status_id == StatusHelper::$requestForExternalScraper) {
                if (empty($this->size_eu) && $this->categories->need_to_check_size) {
                    $this->status_id     = StatusHelper::$unknownSize;
                    $this->sub_status_id = null;
                    $this->save();
                } else {
                    $this->status_id     = StatusHelper::$autoCrop;
                    $this->sub_status_id = null;
                    $this->save();
                }
            }
        }

        // if status not request for external scraper then store it
        if ($this->status_id != StatusHelper::$requestForExternalScraper) {
            $this->sub_status_id = null;
            $this->save();
        }
    }

    public function landingPageProduct()
    {
        return $this->hasOne(\App\LandingPageProduct::class, 'product_id', 'id');
    }

    /**
     * This is using for ingoring the product for next step
     * like due to problem in crop we are not sending white product on approval
     */
    public function isNeedToIgnore()
    {
        if (strtolower($this->color) == 'white') {
            $this->status_id = \App\Helpers\StatusHelper::$manualCropping;
            $this->save();
        }
    }

    public function getStoreBrand($storeId)
    {
        $platformId = 0;

        $brand = $this->brands;
        if ($brand) {
            $storeWebsiteBrand = \App\StoreWebsiteBrand::where('brand_id', $brand->id)->where('store_website_id', $storeId)->first();
            if ($storeWebsiteBrand) {
                $platformId = $storeWebsiteBrand->magento_value;
            }
        }

        return $platformId;
    }

    public static function getProducts($filter_data = [], $skip = null)
    {
        $columns = [
            'products.id',
            'products.name as product_name',
            'b.name as brand_name',
            'b.id as brand_id',
            'cs.name as category_segment',
            'b.brand_segment as brand_segment',
            'c.title as category_name',
            'products.category',
            'products.supplier',
            'products.sku',
            'products.size',
            'products.color',
            'products.suggested_color',
            'products.composition',
            'products.size_eu',
            'products.stock',
            'psu.size_system',
            'status_id',
            'sub_status_id',
            'products.created_at',

            //'inventory_status_histories.date as history_date',
            \DB::raw('count(distinct psu.id) as total_product'),
            \DB::raw('IF(sp.discounted_percentage IS null, 00 , max(sp.discounted_percentage) ) discounted_percentage '),
        ];
        $query = \App\Product::with('many_scraped_products.brand')->leftJoin('brands as b', function ($q) {
            $q->on('b.id', 'products.brand');
        })
            ->leftJoin('categories as c', function ($q) {
                $q->on('c.id', 'products.category');
            })
            ->leftJoin('category_segments as cs', function ($q) {
                $q->on('c.category_segment_id', 'cs.id');
            })
            ->leftJoin('scraped_products as sp', function ($q) {
                $q->on('sp.product_id', 'products.id');
            })
            ->Join('product_suppliers as psu', function ($q) {
                $q->on('psu.product_id', 'products.id');
            });
        //  check filtering
        if (isset($filter_data['product_names'])) {
            $query = $query->whereIn('products.name', $filter_data['product_names']);
        }

        if (isset($filter_data['product_status'])) {
            $query = $query->whereIn('products.status_id', $filter_data['product_status']);
        }

        if (isset($filter_data['brand_names'])) {
            $query = $query->whereIn('brand', $filter_data['brand_names']);
        }

        if (isset($filter_data['product_categories'])) {
            $query = $query->whereIn('category', $filter_data['product_categories']);
        }

        if (isset($filter_data['in_stock'])) {
            if ($filter_data['in_stock'] == 1) {
                $query = $query->where('products.stock', '>', 0);
            } else {
                $query = $query->where('products.stock', '<=', 0);
            }
        }
        if (isset($filter_data['date'])) {
        }

        if (isset($filter_data['start_date']) && isset($filter_data['end_date'])) {
        }

        if (isset($filter_data['date'])) {
            $query = $query->whereDate('products.created_at', $filter_data['date']);
        }

        if (isset($filter_data['date'])) {
            $query = $query->whereDate('products.created_at', $filter_data['date']);
        }

        if (isset($filter_data['discounted_percentage_min'])) {
            $query = $query->where('products.discounted_percentage', '>=', $filter_data['discounted_percentage_min']);
        }

        if (isset($filter_data['discounted_percentage_max'])) {
            $query = $query->where('products.discounted_percentage', '<=', $filter_data['discounted_percentage_max']);
        }

        if (isset($filter_data['no_category']) && $filter_data['no_category'] == 'on') {
            $query = $query->where('products.category', '<=', 0);
        }

        if (isset($filter_data['no_size']) && $filter_data['no_size'] == 'on') {
            $query = $query->where('products.status_id', '=', \App\Helpers\StatusHelper::$unknownSize);
        }

        if (isset($filter_data['supplier']) && is_array($filter_data['supplier']) && $filter_data['supplier'][0] != null) {
            $suppliers_list = implode(',', $filter_data['supplier']);
            $query          = $query->whereRaw(\DB::raw("products.id IN (SELECT product_id FROM product_suppliers WHERE supplier_id IN ($suppliers_list))"));
        }

        if (isset($filter_data['term'])) {
            $term  = $filter_data['term'];
            $query = $query->where(function ($q) use ($term) {
                $q->where('products.name', 'LIKE', "%$term%")
                    ->orWhere('products.sku', 'LIKE', "%$term%")
                    ->orWhere('c.title', 'LIKE', "%$term%")
                    ->orWhere('b.name', 'LIKE', "%$term%")
                    ->orWhere('products.id', 'LIKE', "%$term%");
            });
        }

        if (isset($filter_data['supplier_count'])) {
            $query = $query->havingRaw('count(products.id) = ' . $filter_data['supplier_count']);
        }

        if ($skip !== null) {
            return $query->groupBy('products.id')->with('suppliers_info', 'productstatushistory')->orderBy('products.created_at', 'DESC')->skip($skip)->paginate(1, $columns);
        }

        return $query->groupBy('products.id')->with('suppliers_info', 'productstatushistory')->orderBy('products.created_at', 'DESC')->paginate(Setting::get('pagination'), $columns);
    }

    public static function getPruductsNames()
    {
        $columns = ['name'];
        $result  = [];

        $products_names = \App\Product::distinct('name')->get($columns);
        foreach ($products_names as $product_name) {
            $result[$product_name->name] = $product_name->name;
        }

        asort($result);

        return $result;
    }

    public static function getPruductsCategories()
    {
        $columns = ['category'];
        $result  = [];

        $products_categories = \App\Product::distinct('category')->get($columns);
        foreach ($products_categories as $product_category) {
            $result[$product_category->category] = $product_category->category;
        }

        asort($result);

        return $result;
    }

    public static function getPruductsSku()
    {
        $columns = ['sku'];
        $result  = [];

        $products_sku = \App\Product::distinct('sku')->get($columns);
        foreach ($products_sku as $product_sku) {
            $result[$product_sku->sku] = $product_sku->sku;
        }

        asort($result);

        return $result;
    }

    public function getStatusName()
    {
        return @\App\Helpers\StatusHelper::getStatus()[$this->status_id];
    }

    public static function getProductBySKU($sku)
    {
        return Product::where('sku', $sku)->first();
    }

    public function more_suppliers()
    {
        $more_suppliers = DB::select('SELECT sp.url as link,s.supplier as name
                            FROM `scraped_products` sp
                            JOIN scrapers sc on sc.scraper_name=sp.website
                            JOIN suppliers s ON s.id=sc.supplier_id
                            WHERE last_inventory_at > DATE_SUB(NOW(), INTERVAL sc.inventory_lifetime DAY) and sp.sku = :sku', ['sku' => $this->sku]);

        return $more_suppliers;
    }

    public function getWebsites()
    {
        $websites = ProductHelper::getStoreWebsiteName($this->id, $this);

        return \App\StoreWebsite::whereIn('id', $websites)->get();
    }

    public function expandCategory()
    {
        $cat  = [];
        $list = $this->categories;
        if ($list) {
            $cat[]  = $list->title;
            $parent = $list->parent;
            if ($parent) {
                $cat[]  = $parent->title;
                $parent = $parent->parent;
                if ($parent) {
                    $cat[]  = $parent->title;
                    $parent = $parent->parent;
                    if ($parent) {
                        $cat[] = $parent->title;
                    }
                }
            }
        }

        return implode(' >> ', $cat);
    }

    public function getRandomDescription()
    {
        $descriptions = $this->suppliers_info()->pluck('description')->toArray();

        return $descriptions;
    }

    public function setRandomDescription($website, $stock = 1)
    {
        $product     = $this;
        $description = $product->short_description;
        // assign description game wise
        // store random description from the website
        $storeWebsiteAttributes = $product->storeWebsiteProductAttributes($website->id);
        if ($storeWebsiteAttributes && ! empty($storeWebsiteAttributes->description)) {
            $description = $storeWebsiteAttributes->description;
        } else {
            $randomDescription = $product->getRandomDescription();
            if (! empty($randomDescription)) {
                $randomDescription[] = $product->short_description;
                $storeWebsitePA      = \App\StoreWebsiteProductAttribute::where('product_id', $product->id)->get();
                if (! $storeWebsitePA->isEmpty()) {
                    foreach ($storeWebsitePA as $swpa) {
                        foreach ($randomDescription as $des) {
                            if (strtolower($des) != strtolower($swpa->description)) {
                                $description = $des;
                            }
                        }
                    }
                } else {
                    shuffle($randomDescription);
                    $description = $randomDescription[0];
                }

                // if description is not empty
                if (! empty($description)) {
                    $storeWebsitePA                   = new \App\StoreWebsiteProductAttribute;
                    $storeWebsitePA->product_id       = $product->id;
                    $storeWebsitePA->price            = $product->price;
                    $storeWebsitePA->discount         = '0.00';
                    $storeWebsitePA->discount_type    = 'percentage';
                    $storeWebsitePA->stock            = $stock;
                    $storeWebsitePA->store_website_id = $website->id;
                    $storeWebsitePA->description      = $description;
                    $storeWebsitePA->save();
                }
            }
        }

        return $description;
    }

    public static function getIvaPrice($price)
    {
        $percentage  = self::IVA_PERCENTAGE;
        $percentageA = ($price * $percentage) / 100;

        return $price - $percentageA;
    }

    public function productstatushistory()
    {
        return $this->hasMany(\App\ProductStatusHistory::class, 'product_id');
    }

    public function checkPriceRange()
    {
        $get_brand_segment = $this->brands()->first();
        $get_category      = $this->category;

        if ($get_brand_segment != null && isset($get_brand_segment) && $get_brand_segment->brand_segment != '') {
            $getbrandpricerange = \App\BrandCategoryPriceRange::where(['category_id' => $get_category, 'brand_segment' => $get_brand_segment->brand_segment])->first();
            if ($getbrandpricerange != null) {
                if ($this->price != '' && $this->price >= $getbrandpricerange->min_price && $this->price <= $getbrandpricerange->max_price) {
                    return true;
                } else {
                    return false;
                }
            } else {
                return true;
            }
        } else {
            return true;
        }
    }

    public function useCommaKeywords()
    {
        return str_replace(' ', ',', $this->title);
    }

    public static function matchedCategories($categoies)
    {
        $category_children = [];

        foreach ($categoies as $category) {
            if ($category == 1) {
                continue;
            }
            $is_parent = Category::isParent($category);
            if ($is_parent) {
                $childs = Category::find($category)->childs()->get();
                foreach ($childs as $child) {
                    $is_parent = Category::isParent($child->id);
                    if ($is_parent) {
                        $children = Category::find($child->id)->childs()->get();
                        foreach ($children as $chili) {
                            array_push($category_children, $chili->id);
                        }
                    } else {
                        array_push($category_children, $child->id);
                    }
                }
            } else {
                array_push($category_children, $category);
            }
        }

        return $category_children;
    }

    public function getImages($tag)
    {
        $images = $this->getMedia(strtolower($tag));
        // Set i to 0
        $i = 0;
        // Loop over images
        $media_gallery_entries = [];
        foreach ($images as $image) {
            // Only run if the file exists
            if (file_exists($image->getAbsolutePath())) {
                // Set image type
                $types = $i ? [] : ['image', 'small_image', 'thumbnail'];
                $types = $i == 1 ? ['hover_image'] : $types;
                // Push image to Magento
                if ($i < 5) {
                    // Set file attributes
                    $media_gallery_entries[] = [
                        'media_type' => 'image',
                        'position'   => $i + 1,
                        'types'      => $types,
                        'disabled'   => false,
                        'content'    => [
                            'base64_encoded_data' => base64_encode(file_get_contents($image->getAbsolutePath())),
                            'type'                => mime_content_type($image->getAbsolutePath()),
                            'name'                => $image->getBasenameAttribute(),
                        ],
                    ];
                    // Log info
                    $i++;
                }
            }
        }

        return $media_gallery_entries;
    }

    public function getWebsiteSku()
    {
        return $this->sku . '-' . $this->color;
    }

    public function fetchMultipleSkuRecord()
    {
        $records = \App\ScrapedProducts::where('scraped_products.sku', $this->sku)->leftJoin('products as p', 'p.id', 'scraped_products.product_id')
        ->leftJoin('brands as b', 'b.id', 'scraped_products.brand_id')
        ->select(['scraped_products.*', 'p.supplier as product_supplier', 'b.name as brand_name'])
        ->get();

        return $records;
    }

    public function isCharity()
    {
        return CustomerCharity::where('product_id', $this->id)->first() ? true : false;
    }

    public function scopeStatus(Builder $query, int $status): void
    {
        $query->where('status_id', $status);
    }
}


File: /opt/lampp/htdocs/erp/app/Providers/ViewServiceProvider.php 
Content: <?php

namespace App\Providers;

use App\Sop;
use App\Task;
use App\User;
use App\Email;
use App\Vendor;
use App\TodoList;
use App\TodoStatus;
use App\Instruction;
use App\LiveChatUser;
use App\StoreWebsite;
use App\TodoCategory;
use App\DeveloperTask;
use App\CustomerLiveChat;
use App\PermissionRequest;
use App\LivechatincSetting;
use Illuminate\Http\Request;
use App\Models\MonitorServer;
use App\TimeDoctor\TimeDoctorLog;
use Illuminate\Support\Facades\View;
use Illuminate\Support\ServiceProvider;
use App\Meetings\ZoomMeetingParticipant;
use App\Models\DatabaseBackupMonitoring;

class ViewServiceProvider extends ServiceProvider
{
    /**
     * Register services.
     *
     * @return void
     */
    public function register()
    {
    }

    /**
     * Bootstrap services.
     *
     * @return void
     */
    public function boot(Request $request)
    {
        View::composer(['layouts.app'], function ($view) use ($request) {
            $auth_user  = $request->user();
            $route_name = request()->route()->getName();
            if ($auth_user) {
                $d_taskList      = DeveloperTask::select('id')->orderBy('id', 'desc')->pluck('id');
                $g_taskList      = Task::select('id')->orderBy('id', 'desc')->pluck('id');
                $status          = MonitorServer::where('status', 'off')->count();
                $logs            = TimeDoctorLog::query()->with(['user']);
                $dbBackupList    = DatabaseBackupMonitoring::where('is_resolved', 0)->count();
                $permissionCount = PermissionRequest::count();
                $description     = ZoomMeetingParticipant::whereNull('description')->count();
                $todoLists       = TodoList::where('user_id', $auth_user['id'])->where('status', 'Active')
                    ->orderByRaw('if(isnull(todo_lists.todo_date) >= curdate() , todo_lists.todo_date, todo_lists.created_at) desc')->with('category')->limit(10)->get();
                $statuses      = TodoStatus::all();
                $vendors       = Vendor::all();
                $liveChatUsers = LiveChatUser::where('user_id', $auth_user->id)->first();
                $key_ls        = LivechatincSetting::first();

                // Instruction counts
                $pending_instructions_count = Instruction::where('assigned_to', $auth_user->id)
                    ->whereNull('completed_at')
                    ->count();
                $completed_instructions_count = Instruction::where('assigned_to', $auth_user->id)
                    ->whereNotNull('completed_at')
                    ->count();

                // Task counts
                $pending_tasks_count = Task::where('is_statutory', 0)
                    ->where('assign_to', $auth_user->id)
                    ->whereNull('is_completed')
                    ->count();
                $completed_tasks_count = Task::where('is_statutory', 0)
                    ->where('assign_to', $auth_user->id)
                    ->whereNotNull('is_completed')
                    ->count();

                $chatIds = cache()->remember('CustomerLiveChat::with::customer::orderby::seen_asc', 60 * 60 * 24 * 1, function () {
                    return CustomerLiveChat::with('customer')->orderBy('seen', 'asc')
                        ->orderBy('status', 'desc')
                        ->get();
                });

                $newMessageCount = CustomerLiveChat::where('seen', 0)->count();

                $usersop = Sop::all();
                $users   = User::orderBy('name', 'ASC')->get();

                $userEmails = Email::where('seen', '0')
                    ->orderBy('created_at', 'desc')
                    ->latest()
                    ->take(20)
                    ->get();
                $websites       = StoreWebsite::get();
                $todoCategories = TodoCategory::get();
                $userLists      = $users->filter(fn ($user) => $user->is_active == 1);

                $storeWebsiteConnections = StoreWebsite::DB_CONNECTION;

                $isAdmin = $auth_user->isAdmin();

                $database_table_name = \DB::table('information_schema.TABLES')
                    ->where('table_schema', config('database.connections.mysql.database'))
                    ->get();
                $shell_list = shell_exec('bash ' . config('env.DEPLOYMENT_SCRIPTS_PATH') . '/webaccess-firewall.sh -f list');

                $view->with(
                    compact('d_taskList',
                        'g_taskList',
                        'status',
                        'logs',
                        'dbBackupList',
                        'permissionCount',
                        'description',
                        'todoLists',
                        'statuses',
                        'liveChatUsers',
                        'key_ls',
                        'pending_instructions_count',
                        'completed_instructions_count',
                        'pending_tasks_count',
                        'completed_tasks_count',
                        'chatIds',
                        'newMessageCount',
                        'usersop',
                        'users',
                        'userEmails',
                        'websites',
                        'todoCategories',
                        'userLists',
                        'storeWebsiteConnections',
                        'isAdmin',
                        'database_table_name',
                        'route_name',
                        'shell_list',
                        'vendors',
                    ));
            } else {
                $view->with('route_name', $route_name)
                    ->with('isAdmin', false);
            }
        });
    }
}


File: /opt/lampp/htdocs/erp/app/Providers/WhatsappConfigProvider.php 
Content: <?php

namespace App\Providers;

/**
 * This  provider is using for update the whatsapp number direct from database
 */

use Illuminate\Support\ServiceProvider;

class WhatsappConfigProvider extends ServiceProvider
{
    public static function getWhatsappConfigs()
    {
        try {
            $q = \DB::table('whatsapp_configs')->select([
                'number', 'instance_id', 'provider', 'token', 'is_customer_support', 'status', 'is_default', 'is_use_own',
            ])->where('instance_id', '!=', '')
                ->where('token', '!=', '')
                ->orderBy('is_default', 'DESC')
                ->get();
        } catch (\Illuminate\Database\QueryException $e) {
            $q = null;
        }

        return $q;
    }

    /**
     * Bootstrap services.
     *
     * @return void
     */
    public function boot()
    {
        // we have to check with try catch so we don't have issue while running migration
        try {
            $instance = self::getWhatsappConfigs();
            $default  = [];
            $others   = [];
            if (! empty($instance)) {
                foreach ($instance as $inst) {
                    $array = [
                        'number'          => $inst->number,
                        'instance_id'     => $inst->instance_id,
                        'token'           => $inst->token,
                        'customer_number' => ($inst->is_customer_support == 1) ? true : false,
                        'is_use_own'      => $inst->is_use_own,
                        'provider'        => $inst->provider,
                    ];
                    if ($inst->is_default == 1) {
                        $others[0] = $array;
                    }
                    $others[$inst->number] = $array;
                }
                // merge array to default instances and update the config file
                $nos = $others;
                if (! empty($nos)) {
                    config(['apiwha.instances' => $nos]);
                }
            }
        } catch (\Exeception $e) {
        }
    }

    /**
     * Register services.
     *
     * @return void
     */
    public function register()
    {
        //
    }
}


File: /opt/lampp/htdocs/erp/app/ResourceCategory.php 
Content: <?php

namespace App;

/**
 * @SWG\Definition(type="object", @SWG\Xml(name="User"))
 */
use Nestable\NestableTrait;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Auth;
use Illuminate\Database\Eloquent\Model;

class ResourceCategory extends Model
{
    /**
     * @var string
     *
     * @SWG\Property(property="product_id",type="integer")
     * @SWG\Property(property="title",type="string")
     */
    use NestableTrait;

    protected $parent = 'parent_id';

    public $fillable = ['title'];

    public function childs()
    {
        return $this->hasOne(__CLASS__, 'parent_id', 'id');
    }

    public function parent()
    {
        return $this->hasOne(\App\ResourceCategory::class, 'id', 'parent_id');
    }

    public static function isParent($id)
    {
        $child_count = DB::table('resource_categories as c')
                            ->where('parent_id', $id)
                  ->count();

        return $child_count ? true : false;
    }

    public static function create($input)
    {
        $resourceimg             = new ResourceCategory;
        $input['parent_id']      = $input['parent_id'] ?? 1;
        $resourceimg->parent_id  = ($input['parent_id'] == 1 ? 0 : $input['parent_id']);
        $resourceimg->title      = $input['title'];
        $resourceimg->is_active  = 'Y';
        $resourceimg->created_at = date('Y-m-d H:i:s');
        $resourceimg->updated_at = date('Y-m-d H:i:s');
        $resourceimg->created_by = Auth::user()->name;

        return $resourceimg->save();
    }

    public static function getCategories()
    {
        return ResourceCategory::where('parent_id', '=', 0)->get();
    }

    public static function getSubCategories()
    {
        return ResourceCategory::where('parent_id', '!=', 0)->get();
    }
}


File: /opt/lampp/htdocs/erp/app/Services/BulkCustomerMessage/KeywordsChecker.php 
Content: <?php

namespace App\Services\BulkCustomerMessage;

use App\ChatMessage;
use Illuminate\Support\Facades\DB;
use App\BulkCustomerRepliesKeyword;

class KeywordsChecker
{
    /**
     * @purpose This method gets the messages, and then checks if keywords is in that string or not...
     *
     * @param mixed $keywords
     * @param mixed $customers
     */
    public function assignCustomerAndKeyword($keywords, $customers): void
    {
        foreach ($customers as $customer) {
            $message = $this->getCustomerMessages($customer);

            if (! $message) {
                continue;
            }
            $this->makeKeywordEntryForCustomer($customer, $message, $keywords);
        }
    }

    /**
     * @purpose Checks if the message is in string, and creates keywords like that...
     *
     * @param mixed $customer
     * @param mixed $message
     * @param mixed $keywords
     */
    private function makeKeywordEntryForCustomer($customer, $message, $keywords): void
    {
        $dataToInsert = [];

        foreach ($keywords as $keyword) {
            $keywordValue = strtolower($keyword->value);
            if (stripos($message, $keywordValue) !== false) {
                $dataToInsert[] = ['keyword_id' => $keyword->id, 'customer_id' => $customer->id];
            }
        }

        if ($dataToInsert === []) {
            return;
        }

        DB::table('bulk_customer_replies_keyword_customer')->insert($dataToInsert);
        $customer->is_categorized_for_bulk_messages = 1;
        $customer->save();
    }

    /**
     * @purpose create customer and keyword relationship for new incoming messages...
     *
     * @param mixed $message
     * @param mixed $customer
     */
    public function assignCustomerAndKeywordForNewMessage($message, $customer): void
    {
        $keywords = BulkCustomerRepliesKeyword::all();
        $this->makeKeywordEntryForCustomer($customer, $message, $keywords);
    }

    /**
     * @purpose To return the latest 3 non-replied messages, this will ignore the auto-generated message...
     *
     * @param mixed $customer
     */
    private function getCustomerMessages($customer): string
    {
        $messageText = '';
        $messages    = ChatMessage::whereNotIn('status', [7, 8, 9, 10])->where('customer_id', $customer->id)->orderBy('id', 'DESC')->take(3)->get();

        foreach ($messages as $message) {
            if ($message->user_id) {
                break;
            }

            $messageText .= $message->message;
        }

        return $messageText;
    }
}


File: /opt/lampp/htdocs/erp/app/ShopifyHelper.php 
Content: <?php

namespace App;

/**
 * @SWG\Definition(type="object", @SWG\Xml(name="User"))
 */
use App\Helpers\OrderHelper;
use App\Loggers\LogListMagento;
use Illuminate\Support\Facades\DB;
use App\Services\Products\GraphqlService;
use App\Library\Shopify\Client as ShopifyClient;
use App\Http\Controllers\GoogleTranslateController;
use seo2websites\MagentoHelper\MagentoHelperv2 as MagentoHelper;

class ShopifyHelper
{
    public function __construct()
    {
    }

    public function pushProduct(Product $product, $website)
    {
        // Check for product and session
        if ($product === null) {
            return false;
        }

        $landingpageProduct = new LandingPageProduct;
        $productData        = $landingpageProduct->getShopifyPushData($product, $website);
        print_r($productData);
        exit;
        LogListMagento::log($product->id, 'Product started to push' . $product->id, 'info', $website->store_website_id, 'success');

        ProductPushErrorLog::log(null, $product->id, 'Product push data not found', 'error', $website->id);
        if ($productData == false) {
            return false;
        }

        $client = new ShopifyClient();

        $shopifyID = \App\StoreWebsiteProduct::where('store_website_id', $website->id)
        ->where('product_id', $product->id)
        ->first();

        if ($shopifyID) {
            $response = $client->updateProduct($shopifyID->platform_id, $productData, null, $website->id);
        } else {
            $response = $client->addProduct($productData, $website->id);
        }

        if (! empty($response->product)) {
            $storeWebsiteProduct = \App\StoreWebsiteProduct::updateOrCreate([
                'store_website_id' => $website->id,
                'product_id'       => $product->id,
            ], [
                'store_website_id' => $website->id,
                'product_id'       => $product->id,
                'platform_id'      => $response->product->id,
            ]);
            LogListMagento::log($product->id, 'success ' . $product->id, 'info', $website->id, 'success');
        } else {
            LogListMagento::log($product->id, 'error ' . $product->id, 'info', $website->id, 'error');
        }

        $errors = [];
        if (! empty($response->errors)) {
            foreach ((array) $response->errors as $key => $message) {
                if (is_array($message)) {
                    foreach ($message as $msg) {
                        $errors[] = ucwords($key) . ' ' . $msg;
                    }
                } else {
                    $errors[] = ucwords($key) . ' ' . $message;
                }
            }
        }

        if (! empty($errors)) {
            \Log::channel('productUpdates')->info(json_encode(['code' => 500, 'data' => $response, 'message' => implode('<br>', $errors)]));

            return false;
        }

        if (empty($response->product)) {
            \Log::channel('productUpdates')->info(json_encode(['code' => 500, 'data' => $response, 'message' => 'Response is missing']));

            return false;
        }

        GoogleTranslateController::translateProductDetails($product);
        GraphqlService::sendTranslationByGrapql($response->product->id, $product->id, $website->magento_url, $website->magento_password, $website);

        return true;
    }

    /**
     * Method to sync shopify orders to ERP orders. We'll receive shopify order though a webhook
     * Ref: https://shopify.dev/docs/admin-api/rest/reference/events/webhook?api[version]=2020-07
     *
     * @author Sukhwinder Singh
     *
     * @param [type] $store_id
     * @param [type] $order
     *
     * @return void
     */
    public static function syncShopifyOrders($store_id, $order)
    {
        //Checking in order table
        $shopify_order_id  = $order['id'];
        $checkIfOrderExist = StoreWebsiteOrder::where('platform_order_id', $shopify_order_id)->where('website_id', $store_id)->first();

        //Checking in Website Order Table
        if ($checkIfOrderExist) {
            return;
        }

        $balance_amount = 0;

        // Check for customer details out of order
        $firstName = isset($order['customer']) ? (isset($order['customer']['first_name']) ? $order['customer']['first_name'] : 'N/A') : 'N/A';
        $lastName  = isset($order['customer']) ? (isset($order['customer']['last_name']) ? $order['customer']['last_name'] : 'N/A') : 'N/A';

        $full_name      = $firstName . ' ' . $lastName;
        $customer_phone = isset($order['customer']) ? (isset($order['customer']['phone']) ? $order['customer']['phone'] : '') : '';

        $customer = Customer::where('email', $store_customer['email'])->where('store_website_id', $store_id)->first();

        // Create a customer if doesn't exists
        if (! $customer) {
            $customer = new Customer;
        }

        $customer->name             = $full_name;
        $customer->email            = $order['customer']['email'];
        $customer->address          = $order['billing_address']['address1'];
        $customer->city             = $order['billing_address']['city'];
        $customer->country          = $order['billing_address']['country'];
        $customer->pincode          = $order['billing_address']['zip'];
        $customer->phone            = $order['billing_address']['phone'];
        $customer->store_website_id = $store_id;
        $customer->save();

        $customer_id    = $customer->id;
        $order_status   = '';
        $payment_method = '';

        // For shopify payment method will always by shopify_payments
        $payment_method = 'shopify_payments';

        // check the processing method and convert it to generic method name used by ERP
        if ($order['financial_status'] == 'paid') {
            $order_status = OrderHelper::$purchaseComplete;
        } else {
            $order_status = OrderHelper::$pendingPurchase;
        }

        $id = \DB::table('orders')->insertGetId(
            [
                'customer_id'     => $customer_id,
                'order_id'        => $order['id'],
                'order_type'      => 'online',
                'order_status'    => $order_status,
                'order_status_id' => $order_status,
                'payment_mode'    => $payment_method,
                'order_date'      => $order['created_at'],
                'client_name'     => $full_name,
                'city'            => $order['billing_address']['city'],
                'advance_detail'  => 0,
                'contact_detail'  => $order['billing_address']['phone'],
                'balance_amount'  => $balance_amount,
                'created_at'      => $order['created_at'],
                'updated_at'      => $order['created_at'],
            ]);

        //create entry in table cash_flows
        \DB::table('cash_flows')->insert(
            [
                'cash_flow_able_id'   => $customer_id,
                'description'         => 'Order recieved full pre payment for orderid ' . $order['id'],
                'date'                => date('Y-m-d'),
                'amount'              => $balance_amount,
                'type'                => 'received',
                'cash_flow_able_type' => \App\Order::class,
                'status'              => $order_status,
                'order_status'        => $order_status,
                'expected'            => $balance_amount,
                'actual'              => $balance_amount,
            ]
        );

        $items = $order['line_items'];
        foreach ($items as $item) {
            if (round($item['price']) > 0) {
                $size = '';

                // We already have a helper function to get the product attributes
                $skuAndColor = MagentoHelper::getSkuAndColor($item['sku']);

                // Store products per order
                DB::table('order_products')->insert(
                    [
                        'order_id'      => $id,
                        'product_id'    => ! empty($skuAndColor['product_id']) ? $skuAndColor['product_id'] : null,
                        'sku'           => $skuAndColor['sku'],
                        'product_price' => round($item['price']),
                        'qty'           => round($item['quantity']),
                        'size'          => $size,
                        'color'         => $skuAndColor['color'],
                        'created_at'    => $order['created_at'],
                        'updated_at'    => $order['created_at'],
                    ]
                );
            }
        }
        $orderSaved = Order::find($id);

        //Store Order Id Website ID and Shopify ID

        $websiteOrder                    = new StoreWebsiteOrder();
        $websiteOrder->website_id        = $store_id;
        $websiteOrder->status_id         = $order_status;
        $websiteOrder->order_id          = $orderSaved->id;
        $websiteOrder->platform_order_id = $shopify_order_id;
        $websiteOrder->save();

        \Log::channel('productUpdates')->info('Saved order: ' . $orderSaved->id);
    }

    /**
     * Method to sync shopify customers to ERP customers. We'll receive shopify customer though a webhook
     * Ref: https://shopify.dev/docs/admin-api/rest/reference/events/webhook?api[version]=2020-07
     *
     * @author Sukhwinder Singh
     *
     * @param [type] $store_id
     * @param [type] $customer
     * @param mixed $store_customer
     *
     * @return void
     */
    public static function syncShopifyCustomers($store_id, $store_customer)
    {
        // Extract customer details from the payload
        $firstName = isset($store_customer) ? (isset($store_customer['first_name']) ? $store_customer['first_name'] : 'N/A') : 'N/A';
        $lastName  = isset($store_customer) ? (isset($store_customer['last_name']) ? $store_customer['last_name'] : 'N/A') : 'N/A';

        $full_name        = $firstName . ' ' . $lastName;
        $customer_phone   = isset($store_customer) ? (isset($store_customer['phone']) ? $store_customer['phone'] : '') : '';
        $customer_address = isset($store_customer['addresses']['address1']) ? (isset($store_customer['addresses']['address1']) ? $store_customer['phone'] : '') : '';
        $customer_city    = isset($store_customer['address1']) ? (isset($store_customer['address1']['city']) ? $store_customer['address1']['city'] : '') : '';
        $customer_country = isset($store_customer['address1']) ? (isset($store_customer['address1']['country']) ? $store_customer['address1']['country'] : '') : '';
        $customer_zip     = isset($store_customer['address1']) ? (isset($store_customer['address1']['zip']) ? $store_customer['address1']['zip'] : '') : '';
        $customer_phone   = isset($store_customer) ? (isset($store_customer['phone']) ? $store_customer['phone'] : '') : '';

        $customer = Customer::where('email', $store_customer['email'])->where('store_website_id', $store_id)->first();

        // Create a customer if doesn't exists
        if (! $customer) {
            $customer = new Customer;
        }

        $customer->name             = $full_name;
        $customer->email            = $store_customer['email'];
        $customer->address          = $customer_address;
        $customer->city             = $customer_city;
        $customer->country          = $customer_country;
        $customer->pincode          = $customer_zip;
        $customer->phone            = $customer_phone;
        $customer->store_website_id = $store_id;
        $customer->save();

        \Log::channel('customer')->info('Saved customer: ' . $customer->id);
    }

    public static function validateShopifyWebhook($data, $secret, $hmac_header)
    {
        return true; //hash_equals($hmac_header, $calculated_hmac);
    }
}


File: /opt/lampp/htdocs/erp/app/Task.php 
Content: <?php

namespace App;

/**
 * @SWG\Definition(type="object", @SWG\Xml(name="User"))
 */

use Auth;
use Exception;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Plank\Mediable\Mediable;
use App\Hubstaff\HubstaffMember;
use Illuminate\Support\Facades\DB;
use App\Models\TaskStartEndHistory;
use Illuminate\Database\Eloquent\Model;
use App\Models\Tasks\TaskDueDateHistoryLog;
use App\Models\Tasks\TaskHistoryForStartDate;
use Illuminate\Database\Eloquent\SoftDeletes;

class Task extends Model
{
    /**
     * @var string
     *
     * @SWG\Property(property="category",type="string")
     * @SWG\Property(property="task_details",type="string")
     * @SWG\Property(property="task_subject",type="string")
     * @SWG\Property(property="completion_date",type="datetime")
     * @SWG\Property(property="assign_from",type="datetime")
     * @SWG\Property(property="assign_to",type="datetime")
     * @SWG\Property(property="is_statutory",type="boolean")
     * @SWG\Property(property="sending_time",type="string")
     * @SWG\Property(property="recurring_type",type="string")
     * @SWG\Property(property="statutory_id",type="integer")
     * @SWG\Property(property="model_type",type="string")
     * @SWG\Property(property="model_id",type="integer")
     * @SWG\Property(property="general_category_id",type="integer")

     * @SWG\Property(property="cost",type="string")
     * @SWG\Property(property="is_milestone",type="boolean")
     * @SWG\Property(property="no_of_milestone",type="string")
     * @SWG\Property(property="milestone_completed",type="string")
     * @SWG\Property(property="customer_id",type="integer")
     * @SWG\Property(property="hubstaff_task_id",type="integer")
     * @SWG\Property(property="master_user_id",type="integer")
     * @SWG\Property(property="lead_hubstaff_task_id",type="integer")
     * @SWG\Property(property="due_date",type="datetime")
     * @SWG\Property(property="site_developement_id",type="integer")
     * @SWG\Property(property="priority_no",type="integer")
     */
    use SoftDeletes;

    use Mediable;

    protected $fillable = [
        'category',
        'task_details',
        'task_subject',
        'start_date',
        'completion_date',
        'assign_from',
        'assign_to',
        'is_statutory',
        'actual_start_date',
        'is_completed',
        'sending_time',
        'recurring_type',
        'statutory_id',
        'model_type',
        'model_id',
        'general_category_id',
        'cost',
        'is_milestone',
        'no_of_milestone',
        'milestone_completed',
        'customer_id',
        'hubstaff_task_id',
        'master_user_id',
        'lead_hubstaff_task_id',
        'due_date',
        'site_developement_id',
        'priority_no',
        'frequency',
        'message',
        'reminder_from',
        'reminder_last_reply',
        'last_send_reminder',
        'parent_task_id',
        'task_bug_ids',
        'last_date_time_reminder',
        'is_flow_task',
        'user_feedback_cat_id',
        'user_feedback_vendor_id',
        'parent_review_task_id',
        'time_doctor_task_id',
        'lead_time_doctor_task_id',
        'manually_assign',
        'slotTaskRemarks',
        'task_start',
        'm_start_date',
        'm_end_date',
    ];

    const TASK_TYPES = [
        'Developer Task',
        'Regular Task',
    ];

    const TASK_STATUS_FILTER = [
        'DONE'                  => 1,
        'DISCUSSING'            => 2,
        'IN_PROGRESS'           => 3,
        'ISSUE'                 => 4,
        'PLANNED'               => 5,
        'DISCUSS_WITH_LEAD'     => 6,
        'NOTE'                  => 7,
        'LEAD_RESPONSE_NEEDED'  => 8,
        'ERRORS_IN_TASK'        => 9,
        'IN_REVIEW'             => 10,
        'PRIORITY'              => 11,
        'PRIORITY_2'            => 12,
        'HIGH_PRIORITY'         => 13,
        'REVIEW_ESTIMATED_TIME' => 14,
        'USER_COMPLETE'         => 15,
        'USER_COMPLETE_2'       => 16,
        'USER_ESTIMATED'        => 17,
        'DECLINE'               => 18,
        'REOPEN'                => 19,
        'APPROVED'              => 20,
    ];

    const TASK_STATUS_DONE = 1;

    const TASK_STATUS_DISCUSSING = 2;

    const TASK_STATUS_IN_PROGRESS = 3;

    const TASK_STATUS_ISSUE = 4;

    const TASK_STATUS_PLANNED = 5;

    const TASK_STATUS_DISCUSS_WITH_LEAD = 6;

    const TASK_STATUS_NOTE = 7;

    const TASK_STATUS_LEAD_RESPONSE_NEEDED = 8;

    const TASK_STATUS_ERRORS_IN_TASK = 9;

    const TASK_STATUS_IN_REVIEW = 10;

    const TASK_STATUS_PRIORITY = 11;

    const TASK_STATUS_PRIORITY_2 = 12;

    const TASK_STATUS_HIGH_PRIORITY = 13;

    const TASK_STATUS_REVIEW_ESTIMATED_TIME = 14;

    const TASK_STATUS_USER_COMPLETE = 15;

    const TASK_STATUS_USER_COMPLETE_2 = 16;

    const TASK_STATUS_USER_ESTIMATED = 17;

    const TASK_STATUS_DECLINE = 18;

    const TASK_STATUS_REOPEN = 19;

    const TASK_STATUS_APPROVED = 20;

    public static function boot()
    {
        parent::boot();

        static::creating(function ($model) {
            try {
                // Check the assinged user in any team ?
                if ($model->assign_to > 0 && (empty($model->master_user_id) || empty($model->second_master_user_id))) {
                    $teamUser = \App\TeamUser::where('user_id', $model->assign_to)->first();
                    if ($teamUser) {
                        $team = $teamUser->team;
                        if ($team) {
                            $model->master_user_id = $team->user_id;

                            if (strlen($team->second_lead_id) > 0 && $team->second_lead_id > 0) {
                                $model->second_master_user_id = $team->second_lead_id;
                            }
                        }
                    } else {
                        $isTeamLeader = \App\Team::where('user_id', $model->assign_to)
                                ->orWhere('second_lead_id', $model->assign_to)->first();
                        if ($isTeamLeader) {
                            $model->master_user_id = $model->assign_to;
                        }
                    }
                }
            } catch(Exception $e) {
                //
            }
        });
    }

    public static function hasremark($id)
    {
        $task = Task::find($id);
        if (! empty($task->remark)) {
            return true;
        } else {
            return false;
        }
    }

    // getting remarks
    public static function getremarks($taskid)
    {
        $results = DB::select('select * from remarks where taskid = :taskid order by created_at DESC', ['taskid' => $taskid]);

        return json_decode(json_encode($results), true);
    }

    public function remarks()
    {
        return $this->hasMany(\App\Remark::class, 'taskid')->where('module_type', 'task')->latest();
    }

    public function notes()
    {
        return $this->hasMany(\App\Remark::class, 'taskid')->where('module_type', 'task-note')->latest();
    }

    public function users()
    {
        return $this->belongsToMany(\App\User::class, 'task_users', 'task_id', 'user_id')->where('type', \App\User::class);
    }

    public function assignedTo()
    {
        return $this->belongsTo(\App\User::class, 'assign_to', 'id');
    }

    public function contacts()
    {
        return $this->belongsToMany(\App\Contact::class, 'task_users', 'task_id', 'user_id')->where('type', \App\Contact::class);
    }

    public function whatsappgroup()
    {
        return $this->hasOne(WhatsAppGroup::class);
    }

    public function whatsappAll($needBroadCast = false)
    {
        if ($needBroadCast) {
            return $this->hasMany(\App\ChatMessage::class, 'task_id')->whereIn('status', ['7', '8', '9', '10'])->latest();
        }

        return $this->hasMany(\App\ChatMessage::class, 'task_id')->whereNotIn('status', ['7', '8', '9', '10'])->latest();
    }

    public function allMessages()
    {
        return $this->hasMany(ChatMessage::class, 'task_id', 'id')->orderBy('id', 'desc');
    }

    public function customer()
    {
        return $this->belongsTo(\App\Customer::class, 'customer_id', 'id');
    }

    public function timeSpent()
    {
        return $this->hasOne(
            \App\Hubstaff\HubstaffActivity::class,
            'task_id',
            'hubstaff_task_id'
        )
            ->selectRaw('task_id, SUM(tracked) as tracked')
            ->groupBy('task_id');
    }

    public function taskStatus()
    {
        return $this->hasOne(
            'App\taskStatus',
            'id',
            'status'
        );
    }

    public function taskStatusAlter()
    {
        return $this->hasOne(TaskStatus::class, 'id', 'status');
    }

    public function developerTasksHistory()
    {
        return $this->hasMany(DeveloperTaskHistory::class, 'developer_task_id')->orderByDesc('id', 'DESC');
    }

    public function taskHistoryForStartDate()
    {
        return $this->hasMany(TaskHistoryForStartDate::class, 'task_id')->orderByDesc('id', 'DESC');
    }

    public function taskDueDateHistoryLogs()
    {
        return $this->hasMany(TaskDueDateHistoryLog::class, 'task_id')->orderByDesc('id', 'DESC');
    }

    public function createTaskFromSortcuts($request)
    {
        $created        = 0;
        $message        = '';
        $assignedUserId = 0;

        if (isset($request['task_asssigned_from'])) {
            $data['assign_from'] = $request['task_asssigned_from'];
        } else {
            $data['assign_from'] = Auth::id();
        }

        $data['status'] = 3;
        $task           = 0;
        $taskType       = $request['task_type'];

        if (isset($request['parent_task_id'])) {
            $data['parent_task_id'] = $request['parent_task_id'];
        }

        if ($taskType == '4' || $taskType == '5' || $taskType == '6') {
        } else {
            if (isset($data['is_flow_task'])) {
                $data['is_flow_task'] = $data['is_flow_task'];
            } else {
                $data['is_flow_task'] = 1;
            }
            if ($request['task_asssigned_to']) {
                if (is_array($request['task_asssigned_to'])) {
                    $data['assign_to'] = $request['task_asssigned_to'];
                } else {
                    $data['assign_to'] = $request['task_asssigned_to'];
                }
            } else {
                $data['assign_to'] = $request['assign_to_contacts'];
            }
            //discussion task

            $data['is_statutory']         = $request['task_type'];
            $data['task_details']         = $request['task_detail'];
            $data['task_subject']         = $request['task_subject'];
            $data['customer_id']          = $request['customer_id'];
            $data['site_developement_id'] = $request['site_id'];
            $data['cost']                 = $request['cost'];
            if ($request['category_id'] != null) {
                $data['category'] = $request['category_id'];
            }
            $task           = Task::create($data);
            $created        = 1;
            $assignedUserId = $task->assign_to;
            if ($task->is_statutory != 1) {
                $message = '#' . $task->id . '. ' . $task->task_subject . '. ' . $task->task_details;
            } else {
                $message = $task->task_subject . '. ' . $task->task_details;
            }

            $params = [
                'number'   => null,
                'user_id'  => $data['assign_from'],
                'approved' => 1,
                'status'   => 2,
                'task_id'  => $task->id,
                'message'  => $message,
            ];

            if (count($task->users) > 0) {
                if ($task->assign_from == Auth::id()) {
                    foreach ($task->users as $key => $user) {
                        if ($key == 0) {
                            $params['erp_user'] = $user->id;
                        } else {
                            app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($user->phone, $user->whatsapp_number, $params['message']);
                        }
                    }
                } else {
                    foreach ($task->users as $key => $user) {
                        if ($key == 0) {
                            $params['erp_user'] = $task->assign_from;
                        } else {
                            if ($user->id != Auth::id()) {
                                app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($user->phone, $user->whatsapp_number, $params['message']);
                            }
                        }
                    }
                }
            }

            if (count($task->contacts) > 0) {
                foreach ($task->contacts as $key => $contact) {
                    if ($key == 0) {
                        $params['contact_id'] = $task->assign_to;
                    } else {
                        app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($contact->phone, null, $params['message']);
                    }
                }
            }

            $chat_message = ChatMessage::create($params);
            ChatMessagesQuickData::updateOrCreate([
                'model'    => \App\Task::class,
                'model_id' => $params['task_id'],
            ], [
                'last_communicated_message'    => @$params['message'],
                'last_communicated_message_at' => $chat_message->created_at,
                'last_communicated_message_id' => ($chat_message) ? $chat_message->id : null,
            ]);

            $myRequest = new Request();
            $myRequest->setMethod('POST');
            $myRequest->request->add(['messageId' => $chat_message->id]);
            app(\App\Http\Controllers\WhatsAppController::class)->approveMessage('task', $myRequest);
        }

        if ($created) {
            // $hubstaff_project_id = getenv('HUBSTAFF_BULK_IMPORT_PROJECT_ID');
            $hubstaff_project_id = config('env.HUBSTAFF_BULK_IMPORT_PROJECT_ID');

            $assignedUser = HubstaffMember::where('user_id', $assignedUserId)->first();

            $hubstaffUserId = null;
            $hubstaffTaskId = null;
            if ($assignedUser) {
                $hubstaffUserId = $assignedUser->hubstaff_user_id;
            }
            $taskSummery = substr($message, 0, 200);
            if ($hubstaffUserId) {
                $hubstaffTaskId = app(\App\Http\Controllers\TaskModuleController::class)->createHubstaffTask(
                    $taskSummery,
                    $hubstaffUserId,
                    $hubstaff_project_id
                );
            }

            if ($hubstaffTaskId) {
                $task->hubstaff_task_id = $hubstaffTaskId;
                $task->save();
            }
            if ($hubstaffTaskId) {
                $hubtask                      = new HubstaffTask();
                $hubtask->hubstaff_task_id    = $hubstaffTaskId;
                $hubtask->project_id          = $hubstaff_project_id;
                $hubtask->hubstaff_project_id = $hubstaff_project_id;
                $hubtask->summary             = $message;
                $hubtask->save();
            }
        }

        return $task;

        return response()->json(['code' => 200, 'data' => [], 'message' => 'Your quick task has been created!']);
    }

    public function site_development()
    {
        return $this->belongsTo(\App\SiteDevelopment::class, 'site_developement_id', 'id');
    }

    public function updateStartDate($new)
    {
        $old = $this->start_date;

        if (isset($this->due_date) && $this->due_date != '0000-00-00 00:00:00' && isset($new)) {
            $newStartDate = Carbon::parse($new);
            $estimateDate = Carbon::parse($this->due_date);
            if ($newStartDate->gte($estimateDate)) {
                throw new Exception('Estimate start date time must be less then Estimate end date time.');
            }
        }

        $count = TaskHistoryForStartDate::where('task_id', $this->id)->count();
        if ($count) {
            TaskHistoryForStartDate::historySave($this->id, $old, $new, 0);
        } else {
            TaskHistoryForStartDate::historySave($this->id, $old, $new, 1);
        }
        $this->start_date = $new;
        $this->save();
    }

    public function updateDueDate($new)
    {
        $old = $this->due_date;

        if (isset($this->start_date) && $this->start_date != '0000-00-00 00:00:00' && isset($new)) {
            $startDate       = Carbon::parse($this->start_date);
            $newEstimateDate = Carbon::parse($new);
            if ($newEstimateDate->lte($startDate)) {
                throw new Exception('Estimate end date time must be greater then Estimate start date time.');
            }
        }

        $count = TaskDueDateHistoryLog::where('task_id', $this->id)->count();
        if ($count) {
            TaskDueDateHistoryLog::historySave($this->id, $old, $new, 0);
        } else {
            TaskDueDateHistoryLog::historySave($this->id, $old, $new, 1);
        }
        $this->due_date = $new;
        $this->save();
    }

    public static function getMessagePrefix($obj)
    {
        return '#TASK-' . $obj->id . '-' . $obj->task_subject . ' => ';
    }

    /* Common function to get tasks filtered and for Task & Activity module */
    public static function getSearchedTasks($type, $request)
    {
        $term          = $request->term ?? '';
        $selected_user = $request->selected_user ?? '';
        $paginate      = 50;
        $page          = $request->get('page', 1);
        $offSet        = ($page * $paginate) - $paginate;

        $chatSubQuery = DB::table('chat_messages')
                    ->select(
                        'chat_messages.id as message_id',
                        'chat_messages.task_id',
                        'chat_messages.message',
                        'chat_messages.is_audio',
                        'chat_messages.status as message_status',
                        'chat_messages.sent as message_type',
                        'chat_messages.created_at as message_created_at',
                        'chat_messages.is_reminder as message_is_reminder',
                        'chat_messages.user_id as message_user_id'
                    )
                    ->join('chat_messages_quick_datas', 'chat_messages_quick_datas.last_communicated_message_id', '=', 'chat_messages.id')
                    ->whereNotIn('chat_messages.status', [7, 8, 9])
                    ->where('chat_messages_quick_datas.model', '=', \App\Task::class);

        $qb = self::select(
            'tasks.*',
            'assign_from_user.name as assign_from_username',
            'assign_to_user.name as assign_to_username',
            'message_id',
            'task_id',
            'message',
            'message_status',
            'message_type',
            'message_created_at',
            'message_is_reminder',
            'message_user_id'
        )
           ->leftJoinSub($chatSubQuery, 'chat_messages', function ($join) {
               $join->on('chat_messages.task_id', '=', 'tasks.id');
           })
           ->leftJoin('users as assign_from_user', 'tasks.assign_from', '=', 'assign_from_user.id')
           ->leftJoin('users as assign_to_user', 'tasks.assign_to', '=', 'assign_to_user.id')
           ->leftJoin('task_categories', 'tasks.category', '=', 'task_categories.id')
           ->leftJoin('users', 'tasks.assign_from', '=', 'users.id')
           ->whereNull('tasks.deleted_at')
           ->whereNotNull('tasks.id');

        if ($type != 'statutory_not_completed_list') {
            if ($request->get('is_statutory_query') != '' && $request->get('is_statutory_query') != null) {
                $qb->where('is_statutory', '=', $request->get('is_statutory_query'));
            } else {
                $qb->where('is_statutory', '!=', 3);
            }
        }

        if ($term != '') {
            $qb->where(function ($query) use ($term) {
                $query->where('tasks.id', 'LIKE', '%' . $term . '%')
                ->orWhere('task_categories.title', 'LIKE', '%' . $term . '%')
                ->orWhere('tasks.task_subject', 'LIKE', '%' . $term . '%')
                ->orWhere('tasks.task_details', 'LIKE', '%' . $term . '%')
                ->orWhere('assign_from_user.name', 'LIKE', '%' . $term . '%')
                ->orWhere('users.name', 'LIKE', '%' . $term . '%')
                ->orWhereIn('tasks.id', function ($subquery) use ($term) {
                    $subquery->select('task_id')
                    ->from('task_users')
                    ->whereIn('task_users.user_id', function ($sq2) use ($term) {
                        $sq2->select('id')
                        ->from('users')
                        ->where('name', 'LIKE', '%' . $term . '%');
                    });
                });
            });
        }

        if ($selected_user != '') {
            $qb->where('assign_to', $selected_user);
        }

        if ($request->sort_by == 1) {
            $qb->orderByDesc('tasks.created_at');
        } elseif ($request->sort_by == 2) {
            $qb->orderBy('tasks.created_at');
        }

        if ($type == 'pending') {
            $qb->where('is_statutory', '!=', 1);
            $qb->whereIn('tasks.status', TaskStatus::pluck('id')->toArray());

            if ($term != '') {
                $qb->where('tasks.id', '=', $term);
            }

            $qb->orderByDesc('tasks.is_flagged')
            ->orderByDesc('chat_messages.message_created_at')
            ->offset($offSet)
            ->limit($paginate);

            return $qb->get();
        } elseif (in_array($type, ['pending_list', 'completed_list', 'statutory_not_completed_list'])) {
            $qb->selectRaw('customers.name AS customer_name')
            ->leftJoin('customers', 'tasks.customer_id', '=', 'customers.id');

            if ($request->filter_status) {
                $qb->whereIn('tasks.status', $request->filter_status);
            } else {
                $qb->whereNotIn('tasks.status', [1]);
            }

            $userIdsString = $request->input('selected_user');
            $selectedUser  = $userIdsString;
            if ($userIdsString == '') {
                $userIdsString = [Auth::id()];
            }

            $searchMasterUserId = $userIdsString;
            if ($request->search_master_user_id != '') {
                $searchMasterUserId = $request->search_master_user_id;
            }

            $searchSecondMasterUserId = $userIdsString;
            if ($request->search_second_master_user_id != '') {
                $searchSecondMasterUserId = $request->search_second_master_user_id;
            }

            $qb->where(function ($query) use ($searchMasterUserId, $searchSecondMasterUserId, $userIdsString, $selectedUser) {
                if ($selectedUser == '') {
                    $query->whereIn('tasks.assign_from', $userIdsString);
                } else {
                    $query->whereIn('tasks.assign_to', $userIdsString);
                }

                $query
                ->orWhere('tasks.second_master_user_id', $searchSecondMasterUserId)
                ->orWhere('tasks.master_user_id', $searchMasterUserId)
                ->orWhereIn('tasks.id', function ($subquery) use ($userIdsString) {
                    $subquery->select('task_id')
                    ->from('task_users')
                    ->whereIn('task_users.user_id', function ($sq2) use ($userIdsString) {
                        $sq2->select('id')
                        ->from('users')
                        ->whereIn('user_id', $userIdsString)
                        ->where('type', 'LIKE', '%User%');
                    });
                });
            });

            if ($request->ajax() && ! $request->flag_filter) {
                $qb->where('tasks.is_flagged', 0);
            }

            if ($request->category != '' && $request->category != 1) {
                $qb->where('tasks.category', $request->category);
            }
            if ($type != 'statutory_not_completed_list') {
                $qb->where('is_statutory', '!=', 1);
            } elseif ($type == 'statutory_not_completed_list') {
                $qb->where('is_statutory', '=', 1);
                $qb->whereNull('is_verified');
            }
            if ($type === 'completed_list' || $type == 'statutory_not_completed_list') {
                if ($type == 'completed_list') {
                    $qb->whereNotNull('is_verified');
                }

                $qb->selectRaw('message_created_at as last_communicated_at');
                $qb->orderByDesc('last_communicated_at');
            } elseif ($type === 'pending_list') {
                if ($request->filter_by == 1) {
                    $qb->whereNull('is_completed');
                }
                if ($request->filter_by == 2) {
                    $qb->whereNotNull('is_completed');
                }
                if ($request->filter_by != 1) {
                    $qb->whereNull('is_verified');
                }

                $qb->orderByDesc('tasks.is_flagged');
                $qb->orderByDesc('message_created_at');
            }
            $qb->offset($offSet);
            $qb->limit($paginate);

            return $qb->get();
        }
    }

    public static function getDeveloperTasksHistory($id)
    {
        return self::with([
            'developerTasksHistory',
            'taskHistoryForStartDate',
            'taskDueDateHistoryLogs',
        ])->where('tasks.id', $id)->first();
    }

    public function taskStartEndHistories()
    {
        return $this->hasMany(TaskStartEndHistory::class, 'task_id', 'id');
    }

    public function developerTaskHistories()
    {
        return $this->hasMany(DeveloperTaskHistory::class, 'developer_task_id', 'id');
    }
}


File: /opt/lampp/htdocs/erp/app/Tickets.php 
Content: <?php

namespace App;

/**
 * @SWG\Definition(type="object", @SWG\Xml(name="User"))
 */

use App\Models\TicketsImages;
use Illuminate\Support\Facades\DB;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

class Tickets extends Model
{
    use SoftDeletes;

    /**
     * @var string
     *
     * @SWG\Property(property="tickets",type="string")
     * @SWG\Property(property="customer_id",type="integer")
     * @SWG\Property(property="ticket_id",type="integer")
     * @SWG\Property(property="subject",type="string")
     * @SWG\Property(property="message",type="string")
     * @SWG\Property(property="assigned_to",type="integer")
     * @SWG\Property(property="source_of_ticket",type="integer")
     * @SWG\Property(property="status_id",type="integer")
     * @SWG\Property(property="date",type="datetime")
     * @SWG\Property(property="name",type="string")
     * @SWG\Property(property="email",type="string")
     * @SWG\Property(property="phone_no",type="string")
     * @SWG\Property(property="type_of_inquiry",type="string")
     * @SWG\Property(property="order_no",type="string")
     * @SWG\Property(property="country",type="string")
     * @SWG\Property(property="last_name",type="string")
     * @SWG\Property(property="notify_on",type="string")
     * @SWG\Property(property="amount",type="float")
     * @SWG\Property(property="sku",type="string")
     */
    protected $table = 'tickets';

    protected $fillable = [
        'customer_id', 'ticket_id', 'subject', 'message', 'assigned_to', 'source_of_ticket', 'status_id', 'date', 'name', 'email', 'phone_no', 'order_no',
        'type_of_inquiry', 'country', 'last_name', 'notify_on', 'amount', 'sku', 'lang_code',
    ];

    public function getTicketList($params = [])
    {
        $selectArray[] = $this->table . '.*';
        $query         = DB::table($this->table);

        $query->select($selectArray);

        $record_per_page = (isset($params['record_per_page']) && $params['record_per_page'] != '' && $params['record_per_page'] > 0) ? $params['record_per_page'] : 10;

        return $query->paginate($record_per_page);
    }

    public function ticketStatus()
    {
        return $this->belongsTo(TicketStatuses::class, 'status_id', 'id');
    }

    public function whatsappAll($needBroadcast = false)
    {
        if ($needBroadcast) {
            return $this->hasMany(\App\ChatMessage::class, 'ticket_id')->where(function ($q) {
                $q->whereIn('status', ['7', '8', '9', '10'])->orWhere('group_id', '>', 0);
            })->latest();
        } else {
            return $this->hasMany(\App\ChatMessage::class, 'ticket_id')->latest();
        }
    }

    public function sendMessageToSite()
    {
        return $this->hasMany(\App\ChatMessage::class, 'ticket_id')->where('send_to_tickets', 1)->select(['id', 'message', 'created_at'])->latest();
    }

    public function customer()
    {
        return $this->hasOne(\App\Customer::class, 'id', 'customer_id');
    }

    public function user()
    {
        return $this->hasOne(\App\User::class, 'id', 'assigned_to');
    }

    public function getImages()
    {
        return TicketsImages::where('ticket_id', $this->getAttribute('id'))->get();
    }
}


File: /opt/lampp/htdocs/erp/app/Website.php 
Content: <?php

namespace App;

use Illuminate\Support\Facades\DB;
/**
 * @SWG\Definition(type="object", @SWG\Xml(name="User"))
 */
use Illuminate\Database\Eloquent\Model;

class Website extends Model
{
    /**
     * @var string
     *
     * @SWG\Property(property="name",type="string")
     * @SWG\Property(property="code",type="string")
     * @SWG\Property(property="sort_order",type="string")
     * @SWG\Property(property="platform_id",type="integer")
     * @SWG\Property(property="order_status_id",type="integer")
     * @SWG\Property(property="is_finished",type="boolean")
     */
    protected $fillable = [
        'name',
        'code',
        'sort_order',
        'platform_id',
        'store_website_id',
        'is_finished',
    ];

    public function stores()
    {
        return $this->hasMany(\App\WebsiteStore::class, 'website_id', 'id');
    }

    public function storesViews()
    {
        return $this->hasMany(\App\WebsiteStoreView::class, 'id', 'store_website_id');
    }

    public function storeWebsite()
    {
        return $this->hasOne(\App\StoreWebsite::class, 'id', 'store_website_id');
    }

    public function duty_of_country()
    {
        return $this->hasOne(\App\SimplyDutyCountry::class, 'country_code', 'code');
    }

    public function shipping_of_country($code)
    {
        $shipping_country = DB::table('store_websites_country_shipping')
        ->where('country_code', $code)
        ->first();

        return $shipping_country;
    }

    /**
     * Get all of the website's push logs.
     */
    public function websitePushLogs()
    {
        return $this->morphMany(WebsitePushLog::class, 'websitepushloggable');
    }

    public function getFullNameAttribute()
    {
        if (isset($this->storeWebsite)) {
            return $this->name . "({$this->storeWebsite->title})";
        }

        return $this->name;
    }
}
