File: /opt/lampp/htdocs/erp/app/Category.php 
Content: <?php

namespace App;

use Nestable\NestableTrait;
use App\Helpers\ProductHelper;
use Illuminate\Support\Facades\DB;
use Illuminate\Database\Eloquent\Model;
use seo2websites\MagentoHelper\MagentoHelper;
use Exception;

/**
 * @SWG\Definition(type="object", @SWG\Xml(name="User"))
 */
class Category extends Model
{
    const UNKNOWN_CATEGORIES = 143;

    const PUSH_TYPE = [
        '0' => 'Simple',
        '1' => 'Configurable',
    ];

    use NestableTrait;

    protected $parent = 'parent_id';

    protected static $categories_with_childs = null;

    /**
     * @var string
     *
     * @SWG\Property(property="id",type="integer")
     * @SWG\Property(property="title",type="string")
     * @SWG\Property(property="parent_id",type="integer")
     * @SWG\Property(property="status_after_autocrop",type="string")
     * @SWG\Property(property="magento_id",type="integer")
     * @SWG\Property(property="show_all_id",type="integer")
     */
    public $fillable = ['id', 'title', 'parent_id', 'status_after_autocrop', 'magento_id', 'show_all_id', 'need_to_check_measurement', 'need_to_check_size', 'ignore_category', 'push_type', 'category_segment_id', 'days_refund'];

    /**
     * Get the index name for the model.
     *
     * @return string
     */
    public function childs()
    {
        return $this->hasMany(__CLASS__, 'parent_id', 'id');
    }

    public function childsOrderByTitle()
    {
        return $this->hasMany(__CLASS__, 'parent_id', 'id')->orderBy('title');
    }

    public function childLevelSencond()
    {
        return $this->hasMany(__CLASS__, 'parent_id', 'id');
    }

    public function parent()
    {
        return $this->hasOne(\App\Category::class, 'id', 'parent_id');
    }

    public function parentC()
    {
        return $this->hasOne(\App\Category::class, 'id', 'parent_id');
    }

    public function parentM()
    {
        return $this->hasOne(\App\Category::class, 'id', 'parent_id');
    }

    public static function isParent($id)
    {
        $child_count = DB::table('categories as c')
            ->where('parent_id', $id)
            ->count();

        return $child_count ? true : false;
    }

    public static function website_name($name)
    {
        $name     = '"' . $name . '"';
        $products = \App\ScrapedProducts::where('properties', 'like', '%' . $name . '%')->select('website')->distinct()->get()->pluck('website')->toArray();
        $web_name = implode(', ', $products);

        return $web_name ? $web_name : '-';
    }

    public static function hasProducts($id)
    {
        $products_count = DB::table('products as p')
            ->where('category', $id)
            ->count();

        return $products_count ? true : false;
    }

    public function categorySegmentId()
    {
        return $this->hasOne(CategorySegment::class, 'id', 'category_segment_id');
    }

    public static function getCategoryIdByKeyword($keyword, $gender = null, $genderAlternative = null)
    {
        // Set gender
        if (empty($gender)) {
            $gender = $genderAlternative;
        }

        // Check database for result
        $dbResult = self::where('title', $keyword)->get();

        // No result? Try where like
        if ($dbResult->count() == 0) {
            $dbResult = self::where('references', 'like', '%' . $keyword . '%')->whereNotIn('id', [self::UNKNOWN_CATEGORIES, 1])->get();
            $matchIds = [];
            foreach ($dbResult as $db) {
                if ($db->references) {
                    $referenceArrays = explode(',', $db->references);
                    foreach ($referenceArrays as $referenceArray) {
                        //reference
                        $referenceArray = preg_replace('/\s+/', '', $referenceArray);
                        $referenceArray = preg_replace('/[^a-zA-Z0-9_ -]/s', '', $referenceArray);

                        //category
                        $input = $keyword;
                        $input = preg_replace('/\s+/', '', $input);
                        $input = preg_replace('/[^a-zA-Z0-9_ -]/s', '', $input);
                        similar_text(strtolower($input), strtolower($referenceArray), $percent);
                        if ($percent >= 80) {
                            $matchIds[] = $db->id;
                            break;
                        }
                    }
                }
            }
            $dbResult = self::whereIn('id', $matchIds)->get();
        }

        // Still no result
        if ($dbResult === null) {
            return 0;
        }

        // Just one result
        if ($dbResult->count() == 1) {
            // Check if the category has subcategories
            $dbSubResult = Category::where('parent_id', $dbResult->first()->id)->first();
            // No results?
            if ($dbSubResult == null) {
                // Return
                return $dbResult->first()->id;
            }
        }

        // Checking the result by gender only works if the gender is set
        if (empty($gender)) {
            return 0;
        }

        // Check results
        foreach ($dbResult as $result) {
            // Get parent Id
            $parentId = $result->parent_id;

            // Return 0 for a top category
            if ($parentId == 0) {
                return $result->id;
            }

            // Category directly under women? We don't want this - return 0
            if ($parentId == 2 && strtolower($gender) == 'women') {
                return 0;
            }

            // Category directly under men? We don't want this - return 0
            if ($parentId == 3 && strtolower($gender) == 'men') {
                return 0;
            }

            if ($parentId == 146 && strtolower($gender) == 'kids') {
                return 0;
            }

            // Other
            if ($parentId > 0) {
                // Store category ID
                $categoryId = $result->id;

                // Get parent
                $dbParentResult = Category::find($result->parent_id);

                // No result
                if ($dbParentResult->count() == 0) {
                    return 0;
                }

                // Return correct result for women
                if ($dbParentResult->parent_id == 2 && strtolower($gender) == 'women') {
                    return $categoryId;
                }

                // Return correct result for men
                if ($dbParentResult->parent_id == 3 && strtolower($gender) == 'men') {
                    return $categoryId;
                }

                // Return correct result for kids
                if ($dbParentResult->parent_id == 146 && strtolower($gender) == 'kids') {
                    return $categoryId;
                }
            }
        }
    }

    public static function getCategoryPathById($categoryId = '')
    {
        // If we don't have an ID, return an empty string
        if (empty($categoryId)) {
            return '';
        }

        // Set empty category path
        $categoryPath = '';

        // Get category from database
        $category = Category::find($categoryId);

        // Do we have data?
        if ($category !== null) {
            // Set initial title
            $categoryPath = $category->title;

            // Loop while we haven't reached the top category
            while ($category && $category->parent_id > 0) {
                // Get next category from database
                $category = Category::find($category->parent_id);

                // Update category path
                if ($category !== null) {
                    $categoryPath = $category->title . ' > ' . $categoryPath;
                }
            }
        }

        // Return category path
        return $categoryPath;
    }

    public static function getCategoryTreeMagento($id)
    {
        // Load new category model
        $category = new Category();

        // Create category instance
        $categoryInstance = $category->find($id);

        // Set empty category tree for holding categories
        $categoryTree = [];

        // Continue only if category is not null
        if ($categoryInstance !== null) {
            // Load initial category
            $categoryTree[] = $categoryInstance->magento_id;

            // Set parent ID
            $parentId = $categoryInstance->parent_id;

            // Loop until we found the top category
            while ($parentId != 0) {
                // find next category
                $categoryInstance = $category->find($parentId);

                // Add category to tree
                $categoryTree[] = $categoryInstance->magento_id;

                // Add additional category to tree
                if (! empty($categoryInstance->show_all_id)) {
                    $categoryTree[] = $categoryInstance->show_all_id;
                }

                // Set new parent ID
                $parentId = $categoryInstance->parent_id;
            }
        }

        // Return reverse array
        return array_reverse($categoryTree);
    }

    public static function getCategoryTreeMagentoWithPosition($id, $website, $needOrigin = false)
    {
        $categoryMulti = StoreWebsiteCategory::where('category_id', $id)->where('store_website_id', $website->id)->first();
        // Load new category model
        $category = new Category();

        // Create category instance
        $categoryInstance = $category->find($id);

        // Set empty category tree for holding categories
        $categoryTree = [];
        $topParent    = ProductHelper::getTopParent($id);

        // Continue only if category is not null
        if ($categoryInstance !== null && $categoryMulti) {
            // Load initial category
            if ($needOrigin) {
                $categoryTree[] = ['position' => 1, 'category_id' => $categoryMulti->remote_id, 'org_id' => $categoryMulti->category_id, 'topParent' => $topParent];
            } else {
                $categoryTree[] = ['position' => 1, 'category_id' => $categoryMulti->remote_id, 'topParent' => $topParent];
            }

            // Set parent ID
            $parentId = $categoryInstance->parent_id;

            // Loop until we found the top category
            while ($parentId != 0) {
                // find next category
                $categoryInstance = $category->find($parentId);

                $categoryMultiChild = StoreWebsiteCategory::where('category_id', $parentId)->where('store_website_id', $website->id)->first();
                if ($categoryMultiChild) {
                    if ($categoryInstance->parent_id == 0) {
                        if ($needOrigin) {
                            $categoryTree[] = ['position' => 2, 'category_id' => $categoryMultiChild->remote_id, 'org_id' => $categoryMultiChild->category_id];
                        } else {
                            $categoryTree[] = ['position' => 2, 'category_id' => $categoryMultiChild->remote_id];
                        }
                    } else {
                        if ($categoryInstance->parent_id == 0) {
                            if ($needOrigin) {
                                $categoryTree[] = ['position' => 3, 'category_id' => $categoryMultiChild->remote_id, 'org_id' => $categoryMultiChild->category_id];
                            } else {
                                $categoryTree[] = ['position' => 3, 'category_id' => $categoryMultiChild->remote_id];
                            }
                        } else {
                            if ($needOrigin) {
                                $categoryTree[] = ['position' => 4, 'category_id' => $categoryMultiChild->remote_id, 'org_id' => $categoryMultiChild->category_id];
                            } else {
                                $categoryTree[] = ['position' => 4, 'category_id' => $categoryMultiChild->remote_id];
                            }
                        }
                    }
                }

                // Set new parent ID
                $parentId = $categoryInstance->parent_id;
            }
        }

        // Return reverse array
        return array_reverse($categoryTree);
    }

    public static function getCroppingGridImageByCategoryId($categoryId)
    {
        $imagesForGrid = [
            'Shoes'                  => 'shoes_grid.png',
            'Backpacks'              => 'Backpack.png',
            'Bags'                   => 'Backpack.png',
            'Beach'                  => 'Backpack.png',
            'Travel'                 => 'Backpack.png',
            'Travel Bag'             => 'Backpack.png',
            'Travel Bags'            => 'Backpack.png',
            'Belt'                   => 'belt.png',
            'Belts'                  => 'belt.png',
            'Clothing'               => 'Clothing.png',
            'Skirts'                 => 'Clothing.png',
            'Pullovers'              => 'Clothing.png',
            'Shirt'                  => 'Clothing.png',
            'Dresses'                => 'Clothing.png',
            'Kaftan'                 => 'Clothing.png',
            'Tops'                   => 'Clothing.png',
            'Jumpers & Jump Suits'   => 'Clothing.png',
            'Pant'                   => 'Clothing.png',
            'Pants'                  => 'Clothing.png',
            'Dress'                  => 'Clothing.png',
            'Sweatshirt/s & Hoodies' => 'Clothing.png',
            'Shirts'                 => 'Clothing.png',
            'Denim'                  => 'Clothing.png',
            'Sweat Pants'            => 'Clothing.png',
            'T-Shirts'               => 'Clothing.png',
            'Sweater'                => 'Clothing.png',
            'Sweaters'               => 'Clothing.png',
            'Clothings'              => 'Clothing.png',
            'Coats & Jackets'        => 'Clothing.png',
            'Tie & Bow Ties'         => 'Bow.png',
            'Clutches'               => 'Clutch.png',
            'Clutches & Slings'      => 'Clutch.png',
            'Document Holder'        => 'Clutch.png',
            'Clutch Bags'            => 'Clutch.png',
            'Crossbody Bag'          => 'Clutch.png',
            'Wristlets'              => 'Clutch.png',
            'Crossbody Bags'         => 'Clutch.png',
            'Make-Up Bags'           => 'Clutch.png',
            'Belt Bag'               => 'Clutch.png',
            'Belt Bags'              => 'Clutch.png',
            'Hair Accessories'       => 'Hair_accessories.png',
            'Beanies & Caps'         => 'Hair_accessories.png',
            'Handbags'               => 'Handbag.png',
            'Duffle Bags'            => 'Handbag.png',
            'Laptop Bag'             => 'Handbag.png',
            'Bucket Bags'            => 'Handbag.png',
            'Laptop Bags'            => 'Handbag.png',
            'Jewelry'                => 'Jewellery.png',
            'Shoulder Bags'          => 'Shoulder_bag.png',
            'Sunglasses & Frames'    => 'Sunglasses.png',
            'Gloves'                 => 'Sunglasses.png', //need to be made for gloves
            'Tote Bags'              => 'Tote.png',
            'Wallet'                 => 'Wallet.png',
            'Wallets & Cardholder'   => 'Wallet.png',
            'Wallets & Cardholders'  => 'Wallet.png',
            'Key Pouches'            => 'Wallet.png',
            'Key Pouch'              => 'Wallet.png',
            'Coin Case / Purse'      => 'Wallet.png',
            'Shawls And Scarves'     => 'Shawl.png',
            'Shawls And Scarve'      => 'Shawl.png',
            'Scarves & Wraps'        => 'Shawl.png',
            'Key Rings & Chains'     => 'Keychains.png',
            'Key Rings & Chain'      => 'Keychains.png',
            'Watches'                => 'Keychains.png',
            'Watch'                  => 'Keychains.png',
        ];

        $category = Category::find($categoryId);
        if (isset($category->title)) {
            $catName = $category->title;

            if (array_key_exists($catName, $imagesForGrid)) {
                return $imagesForGrid[$catName];
            }

            if ($category->parent_id > 1) {
                $category = Category::find($category->parent_id);

                return $imagesForGrid[trim($category->title)] ?? '';
            }
        }

        return '';
    }

    public function suppliercategorycount()
    {
        return $this->hasOne(SupplierCategoryCount::class, 'category_id', 'id');
    }

    public static function list()
    {
        return self::pluck('title', 'id')->toArray();
    }

    public static function pushStoreWebsiteCategory($categories, $stores)
    {
        $notInclude = [1, 143, 144];

        $categories    = Category::query()->whereIn('id', $categories)->orderBy('parent_id', 'asc')->with('parent')->get();
        $storeWebsites = \App\StoreWebsite::whereIn('id', $stores)->where('api_token', '!=', '')->where('website_source', 'magento')->get();

        if (! $categories->isEmpty()) {
            foreach ($categories as $category) {
                if (! $storeWebsites->isEmpty()) {
                    foreach ($storeWebsites as $store) {
                        $swi = $store->id;
                        try {
                            if ($category->parent_id == 0) {
                                $case = 'single';
                            } elseif (! empty($category->parentM) && $category->parentM->parent_id == 0) {
                                $case = 'second';
                            } elseif (! empty($category->parentM) && ! empty($category->parentM->parentM) && $category->parentM->parentM->parent_id == 0) {
                                $case = 'third';
                            } elseif (! empty($category->parentM) && ! empty($category->parentM->parentM) && ! empty($category->parentM->parentM->parentM) && $category->parentM->parentM->parentM->parent_id == 0) {
                                $case = 'fourth';
                            }

                            if ($case == 'single') {
                                $data['id']       = $category->id;
                                $data['level']    = 1;
                                $data['name']     = ucwords($category->title);
                                $data['parentId'] = 0;
                                $parentId         = 0;

                                $categ        = MagentoHelper::createCategory($parentId, $data, $swi);
                                $checkIfExist = StoreWebsiteCategory::where('store_website_id', $swi)
                                ->where('category_id', $category->id)
                                ->where('remote_id', $categ)
                                ->first();
                                if (empty($checkIfExist)) {
                                    $storeWebsiteCategory                   = new StoreWebsiteCategory();
                                    $storeWebsiteCategory->category_id      = $category->id;
                                    $storeWebsiteCategory->store_website_id = $swi;
                                    $storeWebsiteCategory->remote_id        = $categ;
                                    $storeWebsiteCategory->save();
                                }
                            }

                            //if case second
                            if ($case == 'second') {
                                $parentCategory = StoreWebsiteCategory::where('store_website_id', $swi)
                                    ->where('category_id', $category->parentM->id)
                                    ->where('remote_id', '>', 0)
                                    ->first();
                                //if parent remote null then send to magento first
                                if (empty($parentCategory)) {
                                    $data['id']       = $category->parentM->id;
                                    $data['level']    = 1;
                                    $data['name']     = ucwords($category->parentM->title);
                                    $data['parentId'] = 0;
                                    $parentId         = 0;

                                    $parentCategoryDetails = MagentoHelper::createCategory($parentId, $data, $swi);

                                    if ($parentCategoryDetails) {
                                        $checkIfExist = StoreWebsiteCategory::where('store_website_id', $swi)
                                            ->where('category_id', $category->parentM->id)
                                            ->where('remote_id', $parentCategoryDetails)
                                            ->first();

                                        if (empty($checkIfExist)) {
                                            $storeWebsiteCategory                   = new StoreWebsiteCategory();
                                            $storeWebsiteCategory->category_id      = $category->parentM->id;
                                            $storeWebsiteCategory->store_website_id = $swi;
                                            $storeWebsiteCategory->remote_id        = $parentCategoryDetails;
                                            $storeWebsiteCategory->save();
                                        }
                                    }
                                    $parentRemoteId = $parentCategoryDetails;
                                } else {
                                    $parentRemoteId = $parentCategory->remote_id;
                                }

                                $data['id']       = $category->id;
                                $data['level']    = 2;
                                $data['name']     = ucwords($category->title);
                                $data['parentId'] = $parentRemoteId;

                                $categoryDetail = MagentoHelper::createCategory($parentRemoteId, $data, $swi);

                                if ($categoryDetail) {
                                    $checkIfExist = StoreWebsiteCategory::where('store_website_id', $swi)
                                        ->where('category_id', $category->id)
                                        ->where('remote_id', $categoryDetail)
                                        ->first();

                                    if (empty($checkIfExist)) {
                                        $storeWebsiteCategory                   = new StoreWebsiteCategory();
                                        $storeWebsiteCategory->category_id      = $category->id;
                                        $storeWebsiteCategory->store_website_id = $swi;
                                        $storeWebsiteCategory->remote_id        = $categoryDetail;
                                        $storeWebsiteCategory->save();
                                    }
                                }
                            }

                            //if case third
                            if ($case == 'third') {
                                //Find Parent
                                $parentCategory = StoreWebsiteCategory::where('store_website_id', $swi)->where('category_id', $category->id)->where('remote_id', '>', 0)->first();

                                //Check if parent had remote id
                                if (empty($parentCategory)) {
                                    //check for grandparent
                                    $grandCategory       = Category::find($category->parentM->id);
                                    $grandCategoryDetail = StoreWebsiteCategory::where('store_website_id', $swi)
                                        ->where('category_id', $grandCategory->parentM->id)
                                        ->where('remote_id', '>', 0)
                                        ->first();

                                    if (empty($grandCategoryDetail)) {
                                        $data['id']       = $grandCategory->parentM->id;
                                        $data['level']    = 1;
                                        $data['name']     = ucwords($grandCategory->parentM->title);
                                        $data['parentId'] = 0;
                                        $parentId         = 0;

                                        $grandCategoryDetails = MagentoHelper::createCategory($parentId, $data, $swi);

                                        if ($grandCategoryDetails) {
                                            $checkIfExist = StoreWebsiteCategory::where('store_website_id', $swi)
                                                ->where('category_id', $grandCategory->parentM->id)
                                                ->where('remote_id', $grandCategoryDetails)
                                                ->first();

                                            if (empty($checkIfExist)) {
                                                $storeWebsiteCategory                   = new StoreWebsiteCategory();
                                                $storeWebsiteCategory->category_id      = $grandCategory->parentM->id;
                                                $storeWebsiteCategory->store_website_id = $swi;
                                                $storeWebsiteCategory->remote_id        = $grandCategoryDetails;
                                                $storeWebsiteCategory->save();
                                            }
                                        }

                                        $grandRemoteId = $grandCategoryDetails;
                                    } else {
                                        $grandRemoteId = $grandCategoryDetail->remote_id;
                                    }
                                    //Search for child category

                                    $childCategoryE = StoreWebsiteCategory::where('store_website_id', $swi)
                                        ->where('category_id', $category->parentM->id)
                                        ->where('remote_id', '>', 0)
                                        ->first();

                                    if (! $childCategoryE) {
                                        $data['id']       = $category->parentM->id;
                                        $data['level']    = 2;
                                        $data['name']     = ucwords($category->parentM->title);
                                        $data['parentId'] = $grandRemoteId;
                                        $parentId         = $grandRemoteId;

                                        $childCategoryDetails = MagentoHelper::createCategory($parentId, $data, $swi);

                                        $checkIfExist = StoreWebsiteCategory::where('store_website_id', $swi)
                                            ->where('category_id', $category->parentM->id)
                                            ->where('remote_id', $childCategoryDetails)
                                            ->first();

                                        if (empty($checkIfExist)) {
                                            $storeWebsiteCategory                   = new StoreWebsiteCategory();
                                            $storeWebsiteCategory->category_id      = $category->parentM->id;
                                            $storeWebsiteCategory->store_website_id = $swi;
                                            $storeWebsiteCategory->remote_id        = $childCategoryDetails;
                                            $storeWebsiteCategory->save();
                                        }
                                    } else {
                                        $childCategoryDetails = $childCategoryE->remote_id;
                                    }

                                    $data['id']       = $category->id;
                                    $data['level']    = 3;
                                    $data['name']     = ucwords($category->title);
                                    $data['parentId'] = $childCategoryDetails;

                                    $categoryDetail = MagentoHelper::createCategory($childCategoryDetails, $data, $swi);
                                    if ($categoryDetail) {
                                        $checkIfExist = StoreWebsiteCategory::where('store_website_id', $swi)
                                            ->where('category_id', $category->id)
                                            ->where('remote_id', $categoryDetail)
                                            ->first();

                                        if (empty($checkIfExist)) {
                                            $storeWebsiteCategory                   = new StoreWebsiteCategory();
                                            $storeWebsiteCategory->category_id      = $category->id;
                                            $storeWebsiteCategory->store_website_id = $swi;
                                            $storeWebsiteCategory->remote_id        = $categoryDetail;
                                            $storeWebsiteCategory->save();
                                        }
                                    }
                                }
                            }

                            if ($case == 'fourth') {
                                //Find Parent
                                $main = StoreWebsiteCategory::where('store_website_id', $swi)->where('category_id', $category->id)->where('remote_id', '>', 0)->first();

                                //Check if parent had remote id
                                if (empty($main)) {
                                    //check for grandparent
                                    $first = $category->parentM->parentM->parentM->id;

                                    $storewebsiteFirst = StoreWebsiteCategory::where('store_website_id', $swi)
                                        ->where('category_id', $first)
                                        ->where('remote_id', '>', 0)
                                        ->first();

                                    if (empty($storewebsiteFirst)) {
                                        $firstModel = Category::find($first);

                                        $data['id']       = $firstModel->id;
                                        $data['level']    = 1;
                                        $data['name']     = ucwords($firstModel->title);
                                        $data['parentId'] = 0;
                                        $parentId         = 0;

                                        $grandGrandCategoryDetails = MagentoHelper::createCategory($parentId, $data, $swi);

                                        if ($grandGrandCategoryDetails) {
                                            $checkIfExist = StoreWebsiteCategory::where('store_website_id', $swi)
                                                ->where('category_id', $firstModel->id)
                                                ->where('remote_id', $grandGrandCategoryDetails)
                                                ->first();

                                            if (empty($checkIfExist)) {
                                                $storeWebsiteCategory                   = new StoreWebsiteCategory();
                                                $storeWebsiteCategory->category_id      = $firstModel->id;
                                                $storeWebsiteCategory->store_website_id = $swi;
                                                $storeWebsiteCategory->remote_id        = $grandGrandCategoryDetails;
                                                $storeWebsiteCategory->save();
                                            }
                                        }

                                        $grandGrandRemoteId = $grandGrandCategoryDetails;
                                    } else {
                                        $grandGrandRemoteId = $storewebsiteFirst->remote_id;
                                    }

                                    $grandCategory       = Category::find($category->parentM->id);
                                    $grandCategoryDetail = StoreWebsiteCategory::where('store_website_id', $swi)
                                        ->where('category_id', $grandCategory->parentM->id)
                                        ->where('remote_id', '>', 0)
                                        ->first();

                                    if (empty($grandCategoryDetail)) {
                                        $data['id']       = $grandCategory->parentM->id;
                                        $data['level']    = 2;
                                        $data['name']     = ucwords($grandCategory->parentM->title);
                                        $data['parentId'] = $grandGrandRemoteId;
                                        $parentId         = $grandGrandRemoteId;

                                        $grandCategoryDetails = MagentoHelper::createCategory($parentId, $data, $swi);

                                        if ($grandCategoryDetails) {
                                            $checkIfExist = StoreWebsiteCategory::where('store_website_id', $swi)
                                                ->where('category_id', $grandCategory->parentM->id)
                                                ->where('remote_id', $grandCategoryDetails)
                                                ->first();

                                            if (empty($checkIfExist)) {
                                                $storeWebsiteCategory                   = new StoreWebsiteCategory();
                                                $storeWebsiteCategory->category_id      = $grandCategory->parentM->id;
                                                $storeWebsiteCategory->store_website_id = $swi;
                                                $storeWebsiteCategory->remote_id        = $grandCategoryDetails;
                                                $storeWebsiteCategory->save();
                                            }
                                        }

                                        $grandRemoteId = $grandCategoryDetails;
                                    } else {
                                        $grandRemoteId = $grandCategoryDetail->remote_id;
                                    }
                                    //Search for child category

                                    $childCategoryE = StoreWebsiteCategory::where('store_website_id', $swi)
                                        ->where('category_id', $category->parentM->id)
                                        ->where('remote_id', '>', 0)
                                        ->first();

                                    if (! $childCategoryE) {
                                        $data['id']       = $category->parentM->id;
                                        $data['level']    = 3;
                                        $data['name']     = ucwords($category->parentM->title);
                                        $data['parentId'] = $grandRemoteId;
                                        $parentId         = $grandRemoteId;

                                        $childCategoryDetails = MagentoHelper::createCategory($parentId, $data, $swi);

                                        $checkIfExist = StoreWebsiteCategory::where('store_website_id', $swi)
                                            ->where('category_id', $category->parentM->id)
                                            ->where('remote_id', $childCategoryDetails)
                                            ->first();

                                        if (empty($checkIfExist)) {
                                            $storeWebsiteCategory                   = new StoreWebsiteCategory();
                                            $storeWebsiteCategory->category_id      = $category->parentM->id;
                                            $storeWebsiteCategory->store_website_id = $swi;
                                            $storeWebsiteCategory->remote_id        = $childCategoryDetails;
                                            $storeWebsiteCategory->save();
                                        }
                                    } else {
                                        $childCategoryDetails = $childCategoryE->remote_id;
                                    }

                                    $data['id']       = $category->id;
                                    $data['level']    = 4;
                                    $data['name']     = ucwords($category->title);
                                    $data['parentId'] = $childCategoryDetails;

                                    $categoryDetail = MagentoHelper::createCategory($childCategoryDetails, $data, $swi);
                                    if ($categoryDetail) {
                                        $checkIfExist = StoreWebsiteCategory::where('store_website_id', $swi)
                                            ->where('category_id', $category->id)
                                            ->where('remote_id', $categoryDetail)
                                            ->first();

                                        if (empty($checkIfExist)) {
                                            $storeWebsiteCategory                   = new StoreWebsiteCategory();
                                            $storeWebsiteCategory->category_id      = $category->id;
                                            $storeWebsiteCategory->store_website_id = $swi;
                                            $storeWebsiteCategory->remote_id        = $categoryDetail;
                                            $storeWebsiteCategory->save();
                                        }
                                    }
                                }
                            }
                        } catch (Exception $e) {
                            \Log::error($e);
                        }
                    }
                }
            }
        }
    }

    public static function ScrapedProducts($name)
    {
        $name = strtolower(str_replace('/', ',', $name));

        return \App\ScrapedProducts::where('categories', $name)->count();
    }

    public static function updateCategoryAuto($name)
    {
        $expression = explode('/', $name);
        $matched    = null;

        $liForMen   = ['MAN', 'MEN', 'UOMO', 'MALE'];
        $liForWoMen = ['WOMAN', 'WOMEN', 'DONNA', 'FEMALE'];
        $liForKids  = ['KIDS'];

        $mainCategory = false;

        if (! empty($expression)) {
            foreach ($expression as $exr) {
                foreach ($liForMen as $li) {
                    if (strtolower($li) == strtolower($exr)) {
                        $mainCategory = 3;
                    }
                }

                foreach ($liForWoMen as $li) {
                    if (strtolower($li) == strtolower($exr)) {
                        $mainCategory = 2;
                    }
                }

                foreach ($liForKids as $li) {
                    if (strtolower($li) == strtolower($exr)) {
                        $mainCategory = 146;
                    }
                }

                if (self::$categories_with_childs === null) {
                    self::$categories_with_childs = self::with('parentC.parentM')->get();
                }

                $category = [];

                foreach (self::$categories_with_childs as $index => $single_category) {
                    if (strtolower($single_category->title) == strtolower($exr)) {
                        $category[] = $single_category;
                    }
                }

                if (! empty($category)) {
                    $matched = $category;
                }
            }
        }

        // now check that last matched has more then three leavle
        if ($matched) {
            foreach ($matched as $match) {
                $levelone = $match->parentC;

                if ($levelone) {
                    $leveltwo = $levelone->parentM;
                    if ($leveltwo) {
                        if ($leveltwo->id == $mainCategory || $leveltwo->parent_id == $mainCategory) {
                            return $match;
                        }
                    // now as this is matched we can send this category to that it is matched
                    } else {
                        if ($levelone->id == $mainCategory || $levelone->parent_id == $mainCategory) {
                            return $match;
                        }
                    }
                } else {
                    if ($match->id == $mainCategory || $match->parent_id == $mainCategory) {
                        return $match;
                    }
                }
            }
        }

        return false;
    }

    public static function updateCategoryAutoSpace($name)
    {
        $categories   = \App\Category::where('id', '!=', 143)->get();
        $matchedWords = [];
        foreach ($categories as $cat) {
            if (strpos(strtolower($name), strtolower($cat->title)) !== false) {
                $matchedWords[$cat->id] = $cat->title;
            } else {
                $referencesWords = explode(',', $cat->references);
                foreach ($referencesWords as $referencesWord) {
                    if (! empty($referencesWord)) {
                        if (strpos(strtolower($name), strtolower($referencesWord)) !== false) {
                            $matchedWords[$cat->id] = $cat->title;
                        }
                    }
                }
            }
        }

        $latestMatch = $matchedWords;
        $liForMen    = ['MAN', 'MEN', 'UOMO', 'MALE'];
        $liForWoMen  = ['WOMAN', 'WOMEN', 'DONNA', 'FEMALE'];
        $liForKids   = ['KIDS'];

        $mainCategory = false;

        if (! empty($matchedWords)) {
            foreach ($matchedWords as $matchedWord) {
                foreach ($liForMen as $li) {
                    if (strtolower($li) == strtolower($matchedWord)) {
                        if (! $mainCategory) {
                            $mainCategory = 3;
                        }
                    }
                }

                foreach ($liForWoMen as $li) {
                    if (strtolower($li) == strtolower($matchedWord)) {
                        if (! $mainCategory) {
                            $mainCategory = 2;
                        }
                    }
                }

                foreach ($liForKids as $li) {
                    if (strtolower($li) == strtolower($matchedWord)) {
                        if (! $mainCategory) {
                            $mainCategory = 146;
                        }
                    }
                }
            }
        }

        $rv = array_reverse($matchedWords, true);

        if (! empty($rv)) {
            foreach ($rv as $key => $value) {
                $category = \App\Category::find($key);
                if ($category) {
                    $levelone = $category->parentM;
                    if ($levelone) {
                        $leveltwo = $levelone->parentM;
                        if ($leveltwo) {
                            if ($leveltwo->id == $mainCategory || $leveltwo->parent_id == $mainCategory) {
                                return $category;
                            }
                        // now as this is matched we can send this category to that it is matched
                        } else {
                            if ($levelone->id == $mainCategory || $levelone->parent_id == $mainCategory) {
                                return $category;
                            }
                        }
                    } else {
                        if ($category->id == $mainCategory || $category->parent_id == $mainCategory) {
                            return $category;
                        }
                    }
                }
            }
        }

        return false;
    }

    public function getSizeChart($websiteId = 0)
    {
        $sizeCharts = null;
        if ($this->id == 5) {
            if ($websiteId == 5) {
                $sizeCharts = 'https://erp.theluxuryunlimited.com/images/size-chart-images/AC/ac-men-shoes-size-chart.jpg';
            }
            if ($websiteId == 9) {
                $sizeCharts = 'https://erp.theluxuryunlimited.com/images/size-chart-images/BL/bl-men-shoes-size-chart.jpg';
            }
            if ($websiteId == 17) {
                $sizeCharts = 'https://erp.theluxuryunlimited.com/images/size-chart-images/VL/vl-men-shoes-size-chart.jpg';
            }
            if ($websiteId == 1) {
                $sizeCharts = 'https://erp.theluxuryunlimited.com/images/size-chart-images/SOLO/solo-men-shoes-size-chart.jpg';
            }
            if ($websiteId == 3) {
                $sizeCharts = 'https://erp.theluxuryunlimited.com/images/size-chart-images/SN/sn-men-shoes-size-chart.jpg';
            }
        }

        if ($this->id == 41) {
            if ($websiteId == 5) {
                $sizeCharts = 'https://erp.theluxuryunlimited.com/images/size-chart-images/AC/ac-women-shoes-size-chart.jpg';
            }
            if ($websiteId == 9) {
                $sizeCharts = 'https://erp.theluxuryunlimited.com/images/size-chart-images/BL/bl-women-shoes-size-chart.jpg';
            }
            if ($websiteId == 17) {
                $sizeCharts = 'https://erp.theluxuryunlimited.com/images/size-chart-images/VL/vl-women-shoes-size-chart.jpg';
            }
            if ($websiteId == 1) {
                $sizeCharts = 'https://erp.theluxuryunlimited.com/images/size-chart-images/SOLO/solo-women-shoes-size-chart.jpg';
            }
            if ($websiteId == 3) {
                $sizeCharts = 'https://erp.theluxuryunlimited.com/images/size-chart-images/SN/sn-women-shoes-size-chart.jpg';
            }
        }

        if ($this->id == 40) {
            if ($websiteId == 5) {
                $sizeCharts = 'https://erp.theluxuryunlimited.com/images/size-chart-images/AC/ac-womenswear-size-chart.jpg';
            }
            if ($websiteId == 9) {
                $sizeCharts = 'https://erp.theluxuryunlimited.com/images/size-chart-images/BL/bl-womenswear-size-chart.jpg';
            }
            if ($websiteId == 17) {
                $sizeCharts = 'https://erp.theluxuryunlimited.com/images/size-chart-images/VL/vl-womenswear-size-chart.jpg';
            }
            if ($websiteId == 1) {
                $sizeCharts = 'https://erp.theluxuryunlimited.com/images/size-chart-images/SOLO/solo-womenswear-size-chart.jpg';
            }
            if ($websiteId == 3) {
                $sizeCharts = 'https://erp.theluxuryunlimited.com/images/size-chart-images/SN/sn-womenswear-size-chart.jpg';
            }
        }

        if ($this->id == 12) {
            if ($websiteId == 5) {
                $sizeCharts = 'https://erp.theluxuryunlimited.com/images/size-chart-images/AC/ac-menswear-size-chart.jpg';
            }
            if ($websiteId == 9) {
                $sizeCharts = 'https://erp.theluxuryunlimited.com/images/size-chart-images/BL/bl-menswear-size-chart.jpg';
            }
            if ($websiteId == 17) {
                $sizeCharts = 'https://erp.theluxuryunlimited.com/images/size-chart-images/VL/vl-menswear-size-chart.jpg';
            }
            if ($websiteId == 1) {
                $sizeCharts = 'https://erp.theluxuryunlimited.com/images/size-chart-images/SOLO/solo-menswear-size-chart.jpg';
            }
            if ($websiteId == 3) {
                $sizeCharts = 'https://erp.theluxuryunlimited.com/images/size-chart-images/SN/sn-menswear-size-chart.jpg';
            }
        }

        if ($this->id == 180) {
            if ($websiteId == 5) {
                $sizeCharts = 'https://erp.theluxuryunlimited.com/images/size-chart-images/AC/ac-kids-size-chart.jpg';
            }
            if ($websiteId == 9) {
                $sizeCharts = 'https://erp.theluxuryunlimited.com/images/size-chart-images/BL/bl-kids-size-chart.jpg';
            }
            if ($websiteId == 17) {
                $sizeCharts = 'https://erp.theluxuryunlimited.com/images/size-chart-images/VL/vl-kids-size-chart.jpg';
            }
            if ($websiteId == 1) {
                $sizeCharts = 'https://erp.theluxuryunlimited.com/images/size-chart-images/SOLO/solo-kids-size-chart.jpg';
            }
            if ($websiteId == 3) {
                $sizeCharts = 'https://erp.theluxuryunlimited.com/images/size-chart-images/SN/sn-kids-size-chart.jpg';
            }
        }

        return $sizeCharts;
    }

    public function products()
    {
        return $this->hasMany(Product::class, 'category', 'id');
    }

    /**
     * Static Function for generate a keyword sting with category and its sub category
     * parent_id = 231 & 233 : 231 & 233 are ids of Root id called NEW and PREOWNED and we dont want t consider it in Sting
     * id = 1, 143, 144, 211, 241, 366, 372 <- these are some unwanted ids od category which we dont want to keep in generated string
     * ex: Select Category, Unknown Category, Ignore Category Reference, Ignore Category Reference,
     * Level in this query is taken for we wanted to go deep till 4 levels for category and sub category
     *
     * @param int $level
     */
    public static function getCategoryHierarchyString($level = 4): array
    {
        $query = 'WITH RECURSIVE category_path AS(
                        SELECT id, title, title AS generated_string, 1 AS level
                        FROM categories
                        WHERE parent_id IN (231, 233) AND id NOT IN (1, 143, 144, 211, 241, 366, 372)
                        UNION ALL
                    SELECT c.id, c.title, CONCAT(cp.generated_string, " ", c.title), cp.level + 1
                    FROM categories c
                    JOIN category_path cp ON  c.parent_id = cp.id
                    WHERE cp.level < ' . $level . ')
                    
                    SELECT CONCAT(cp.generated_string, " ", ksv.keyword) AS combined_string
                    FROM category_path cp
                    CROSS JOIN keyword_search_variants ksv
                    WHERE NOT EXISTS (
                          SELECT 1 FROM categories c2
                          WHERE c2.parent_id = cp.id
                        )';

        return DB::select($query);
    }

    public static function updateStatusIsHashtagsGeneratedCategories($category_id_arr)
    {
        \DB::table('categories')->whereIn('id', $category_id_arr)->where('is_hashtag_generated', 0)->update(['is_hashtag_generated' => 1]);
    }
}


File: /opt/lampp/htdocs/erp/app/Console/Commands/AddDatabaseHistoricalData.php 
Content: <?php

namespace App\Console\Commands;

use Carbon\Carbon;
use App\ChatMessage;
use App\CronJobReport;
use App\Helpers\LogHelper;
use Illuminate\Console\Command;
use App\DatabaseHistoricalRecord;
use Illuminate\Support\Facades\DB;
use App\DatabaseTableHistoricalRecord;

class AddDatabaseHistoricalData extends Command
{
    const MAX_REACH_LIMIT = 100;

    const MAX_REACH_TOTAL_LIMIT = 4096;

    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'database:historical-data';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Insert historical data';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        LogHelper::createCustomLogForCron($this->signature, ['message' => 'cron was started.']);
        try {
            LogHelper::createCustomLogForCron($this->signature, ['message' => 'Cron was started to run']);

            $report = CronJobReport::create([
                'signature'  => $this->signature,
                'start_time' => Carbon::now(),
            ]);
            LogHelper::createCustomLogForCron($this->signature, ['message' => 'report was added.']);

            // get the historical data and store into the new table
            $db = \DB::select('SELECT table_schema as "db_name",Round(Sum(data_length + index_length) / 1024 / 1024, 1) as "db_size"
                FROM information_schema.tables  where table_schema = "' . env('DB_DATABASE', 'solo') . '" GROUP  BY table_schema'
            );
            LogHelper::createCustomLogForCron($this->signature, ['message' => 'table schema query was finished.']);

            $lastDb = DatabaseHistoricalRecord::where('database_name', env('DB_DATABASE', 'solo'))->latest()->first();
            LogHelper::createCustomLogForCron($this->signature, ['message' => 'Database historical record query was finished.']);
            if (! empty($db)) {
                foreach ($db as $d) {
                    // check the last db size and current size and manage with it
                    LogHelper::createCustomLogForCron($this->signature, ['message' => 'Comparing the database name & size']);

                    if ($lastDb) {
                        if ($lastDb->database_name == $d->db_name) {
                            if (($d->db_size - $lastDb->size) >= self::MAX_REACH_LIMIT) {
                                \App\CronJob::insertLastError($this->signature,
                                    'Database is reached to the max limit : ' . self::MAX_REACH_LIMIT . ' MB'
                                );
                            } elseif ($d->db_size > self::MAX_REACH_TOTAL_LIMIT) {
                                \App\CronJob::insertLastError($this->signature,
                                    'Database is reached to the max total limit : ' . self::MAX_REACH_TOTAL_LIMIT . ' MB'
                                );
                            }
                        }
                    }

                    $database_recent_entry = DatabaseHistoricalRecord::create([
                        'database_name' => $d->db_name,
                        'size'          => $d->db_size,
                    ]);
                    LogHelper::createCustomLogForCron($this->signature, ['message' => 'Database historical record query was finished.']);
                    $db_table = \DB::select('SELECT TABLE_NAME as "db_table_name", Round(Sum(data_length + index_length) / 1024, 1) as "db_size" FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = "BASE TABLE" AND TABLE_SCHEMA="' . $d->db_name . '" GROUP  BY TABLE_NAME'
                    );
                    foreach ($db_table as $d_table) {
                        $databaseTableHistoricalRecord = DatabaseTableHistoricalRecord::where('database_name', $d_table->db_table_name)->where('database_id', $database_recent_entry->id)->orderBy('created_at', 'ASC')->first();
                        LogHelper::createCustomLogForCron($this->signature, ['message' => 'Database table historical record query was finished.']);
                        if ($databaseTableHistoricalRecord) {
                            $v1         = $databaseTableHistoricalRecord->size;
                            $v2         = $d_table->db_size;
                            $differance = (($v1 - $v2) / (($v1 + $v2) / 2)) * 100;
                            if ($differance > 10) {
                                $user_id                          = 6;
                                $message                          = $d->db_name . '.' . $d_table->db_table_name . ' Database table increased size more than 10%.';
                                $params                           = [];
                                $params['message']                = $message;
                                $params['erp_user']               = $user_id;
                                $params['user_id']                = $user_id;
                                $params['approved']               = 1;
                                $params['status']                 = 2;
                                $params['message_application_id'] = 10001;
                                $chat_message                     = ChatMessage::create($params);

                                LogHelper::createCustomLogForCron($this->signature, ['message' => 'Saved chat message record by ID:' . $chat_message->id]);

                                $requestData = new Request();
                                $requestData->setMethod('POST');
                                $requestData->request->add(['user_id' => $user_id, 'message' => $message, 'status' => 1]);
                                app(\App\Http\Controllers\WhatsAppController::class)->sendMessage($requestData, 'user');

                                LogHelper::createCustomLogForCron($this->signature, ['message' => 'Message sent successfully.']);
                            }
                        }
                        DatabaseTableHistoricalRecord::create([
                            'database_name' => $d_table->db_table_name,
                            'size'          => $d_table->db_size,
                            'database_id'   => $database_recent_entry->id,
                        ]);
                        LogHelper::createCustomLogForCron($this->signature, ['message' => 'Database table historical record query was finished.']);
                    }
                }
            }

            $report->update(['end_time' => Carbon::now()]);
            LogHelper::createCustomLogForCron($this->signature, ['message' => 'report endtime was updated.']);
        } catch (Exception $e) {
            LogHelper::createCustomLogForCron($this->signature, ['Exception' => $e->getTraceAsString(), 'message' => $e->getMessage()]);

            \App\CronJob::insertLastError($this->signature, $e->getMessage());
        }
    }
}


File: /opt/lampp/htdocs/erp/app/Console/Commands/AddDatabaseTableHistoricalData.php 
Content: <?php

namespace App\Console\Commands;

use Carbon\Carbon;
use App\CronJobReport;
use Illuminate\Console\Command;
use App\DatabaseHistoricalRecord;
use App\DatabaseTableHistoricalRecord;

class AddDatabaseTableHistoricalData extends Command
{
    const MAX_REACH_LIMIT = 100;

    const MAX_REACH_TOTAL_LIMIT = 4096;

    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'database:table-historical-data';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Insert historical data for tables';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        try {
            $report = CronJobReport::create([
                'signature'  => $this->signature,
                'start_time' => Carbon::now(),
            ]);

            // get the historical data and store into the new table
            $db = \DB::select('SELECT TABLE_NAME as "db_name", Round(Sum(data_length + index_length) / 1024, 1) as "db_size" FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = "BASE TABLE" AND TABLE_SCHEMA="' . env('DB_DATABASE', 'solo') . '" GROUP  BY TABLE_NAME'
            );

            $lastDb = DatabaseHistoricalRecord::where('database_name', env('DB_DATABASE', 'solo'))->latest()->first();

            if (! empty($db)) {
                foreach ($db as $d) {
                    DatabaseTableHistoricalRecord::create([
                        'database_name' => $d->db_name,
                        'size'          => $d->db_size,
                        'database_id'   => $lastDb->id,
                    ]);
                }
            }

            $report->update(['end_time' => Carbon::now()]);
        } catch (Exception $e) {
            \App\CronJob::insertLastError($this->signature, $e->getMessage());
        }
    }
}


File: /opt/lampp/htdocs/erp/app/Console/Commands/CacheMasterControl.php 
Content: <?php

namespace App\Console\Commands;

use Cache;
use App\Product;
use Carbon\Carbon;
use App\ReplyCategory;
use App\Helpers\StatusHelper;
use App\CroppedImageReference;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;

class CacheMasterControl extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'cache:master-control';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Load all master control variables into cache';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        try {
            $report = \App\CronJobReport::create([
                'signature'  => $this->signature,
                'start_time' => Carbon::now(),
            ]);

            // update cache for the cropped image references -- using in master control
            Cache::remember('cropped_image_references', 1800, function () {
                return CroppedImageReference::count();
            });

            // update pending crop references -- using in master control
            Cache::remember('pending_crop_reference', 1800, function () {
                return Product::where('status_id', StatusHelper::$autoCrop)->where('stock', '>=', 1)->count();
            });

            // update pending crop references -- using in master control
            Cache::remember('crop_reference_week_count', 1800, function () {
                return CroppedImageReference::where('created_at', '>=', \Carbon\Carbon::now()->subDays(7)->startOfDay())->count();
            });

            Cache::remember('cronLastErrors', 1800, function () {
                return \App\CronJob::join('cron_job_reports as cjr', 'cron_jobs.signature', 'cjr.signature')
                    ->where('cjr.start_time', '>', \DB::raw('NOW() - INTERVAL 24 HOUR'))->where('cron_jobs.last_status', 'error')->groupBy('cron_jobs.signature')->get();
            });

            // update crop reference daily count -- using in master control
            Cache::remember('crop_reference_daily_count', 1800, function () {
                return CroppedImageReference::whereDate('created_at', Carbon::today())->count();
            });

            // pending crop category -- using in master control
            Cache::remember('pending_crop_category', 1800, function () {
                return Product::where('status_id', StatusHelper::$attributeRejectCategory)->where('stock', '>=', 1)->count();
            });

            // status count -- using in master control
            Cache::remember('status_count', 1800, function () {
                return StatusHelper::getStatusCount();
            });

            // scraped product in stock -- using in master control
            Cache::remember('result_scraped_product_in_stock', 1800, function () {
                $sqlScrapedProductsInStock = "
                    SELECT
                        COUNT(DISTINCT(sp.sku)) as ttl
                    FROM
                        suppliers s
                    JOIN
                        scrapers sc
                    ON
                        s.id=sc.supplier_id
                    JOIN
                        scraped_products sp
                    ON
                        sp.website=sc.scraper_name
                    WHERE
                        s.supplier_status_id=1 AND
                        sp.validated=1 AND
                        sp.website!='internal_scraper' AND
                        sp.last_inventory_at > DATE_SUB(NOW(), INTERVAL sc.inventory_lifetime DAY)";

                return DB::select($sqlScrapedProductsInStock);
            });

            Cache::remember('reply_categories', 1800, function () {
                return $reply_categories = ReplyCategory::all();
            });

            Cache::remember('vendorReplier', 1800, function () {
                return $vendorReplier = \App\Reply::where('model', 'Vendor')->whereNull('deleted_at')->pluck('reply', 'id')->toArray();
            });

            Cache::remember('supplierReplier', 1800, function () {
                return $supplierReplier = \App\Reply::where('model', 'Supplier')->whereNull('deleted_at')->pluck('reply', 'id')->toArray();
            });

            Cache::remember('latestScrapRemarks', 1800, function () {
                return \DB::select(
                    '
                    select * 
                    from scrap_remarks as sr 
                    join ( select max(id) as id from scrap_remarks group by scraper_name) as max_s on sr.id =  max_s.id order by created_at desc'
                );
            });

            Cache::remember('todaytaskhistory', 1800, function () {
                $date = "'%" . date('Y-m-d') . "%'";

                return DB::select('SELECT users.name, developer_tasks.subject, developer_tasks.id as devtaskId,tasks.id as task_id,tasks.task_subject as task_subject,  hubstaff_activities.starts_at, SUM(tracked) as day_tracked 
                  FROM `users` 
                  JOIN hubstaff_members ON hubstaff_members.user_id=users.id 
                  JOIN hubstaff_activities ON hubstaff_members.hubstaff_user_id=hubstaff_activities.user_id 
                  LEFT JOIN developer_tasks ON hubstaff_activities.task_id=developer_tasks.hubstaff_task_id 
                  LEFT JOIN tasks ON hubstaff_activities.task_id=tasks.hubstaff_task_id 
                  WHERE ( (`hubstaff_activities`.`starts_at` LIKE ' . $date . ') AND (developer_tasks.id is NOT NULL or tasks.id is not null) and hubstaff_activities.task_id > 0)
                    GROUP by hubstaff_activities.task_id
                    order by day_tracked desc ');
            });

            Cache::remember('hubstafftrackingnotiification', 1800, function () {
                $yesterdayDate = Carbon::now()->subDays(1)->format('Y-m-d');

                $hubstaff_notifications = \App\Hubstaff\HubstaffActivityNotification::join('users as u', 'hubstaff_activity_notifications.user_id', 'u.id')->leftJoin('user_avaibilities as av', 'hubstaff_activity_notifications.user_id', 'av.user_id')
                    ->where('av.is_latest', 1)
                    ->whereDate('start_date', $yesterdayDate)
                    ->select([
                        'hubstaff_activity_notifications.*',
                        'u.name as user_name',
                        'av.minute as daily_working_hour',
                    ])
                    ->get()->toArray();

                return $hubstaff_notifications;
            });

            Cache::remember('hubstafftrackingnotiification', 1800, function () {
                $yesterdayDate = Carbon::now()->subDays(1)->format('Y-m-d');

                $hubstaff_notifications = \App\Hubstaff\HubstaffActivityNotification::join('users as u', 'hubstaff_activity_notifications.user_id', 'u.id')->leftJoin('user_avaibilities as av', 'hubstaff_activity_notifications.user_id', 'av.user_id')
                    ->where('av.is_latest', 1)
                    ->whereDate('start_date', $yesterdayDate)
                    ->select([
                        'hubstaff_activity_notifications.*',
                        'u.name as user_name',
                        'av.minute as daily_working_hour',
                    ])
                    ->get()->toArray();

                return $hubstaff_notifications;
            });

            $report->update(['end_time' => Carbon::now()]);
        } catch (Exception $e) {
            \App\CronJob::insertLastError($this->signature, $e->getMessage());
        }
    }
}


File: /opt/lampp/htdocs/erp/app/Console/Commands/ChatMessageEmail.php 
Content: <?php

namespace App\Console\Commands;

use Illuminate\Console\Command;

class ChatMessageEmail extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'email:copy-from-chat-message';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Email copy from chat messages';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        $sql     = "SELECT DISTINCT REGEXP_SUBSTR(`message`, '([a-zA-Z0-9._%+\-]+)@([a-zA-Z0-9.-]+)\.([a-zA-Z]{2,4})') AS Email,customer_id FROM `chat_messages` where customer_id >0  having Email is not null and Email != ''";
        $records = \DB::select($sql);
        $no      = 0;
        if (! empty($records)) {
            foreach ($records as $r) {
                $pattern = '/[a-z0-9_\-\+\.]+@[a-z0-9\-]+\.([a-z]{2,4})(?:\.[a-z]{2})?/i';
                preg_match_all($pattern, $r->Email, $matches);
                if (isset($matches[0][0]) && ! empty($matches[0][0])) {
                    $customer = \App\Customer::where('id', $r->customer_id)->first();
                    if ($customer) {
                        if (empty($customer->email)) {
                            $customer->email = strtolower($matches[0][0]);
                            $customer->save();
                            $no++;
                        }
                    }
                }
            }
        }

        echo $no . ' Customer has been updated with email from chat message';
    }
}


File: /opt/lampp/htdocs/erp/app/Console/Commands/CronScraperNotRunning.php 
Content: <?php

namespace App\Console\Commands;

use Carbon\Carbon;
use App\CronJobReport;
use App\Helpers\LogHelper;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;

class CronScraperNotRunning extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'scraper:not-running';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Send message to admin if scraper is not running.';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        return;
        // Create cron job report
        try {
            $report = CronJobReport::create([
                'signature'  => $this->signature,
                'start_time' => Carbon::now(),
            ]);

            // Get all suppliers
            $sql = '
            SELECT
                s.id,
                s.supplier,
                sp.scraper_name,
                MAX(ls.last_inventory_at) AS last_update,
                sp.scraper_name,
                sp.inventory_lifetime
            FROM
                suppliers s
            JOIN
                scrapers sp on sp.supplier_id = s.id
            LEFT JOIN
                scraped_products ls
            ON
                ls.website=sp.scraper_name
            WHERE
                s.supplier_status_id=1
            GROUP BY
                s.id
            HAVING
                last_update < DATE_SUB(NOW(), INTERVAL sp.inventory_lifetime DAY) OR
                last_update IS NULL
            ORDER BY
                s.supplier
        ';
            $allSuppliers = DB::select($sql);

            // Do we have results?
            if (count($allSuppliers) > 0) {
                // Loop over suppliers
                foreach ($allSuppliers as $supplier) {
                    // Create message
                    $message = '[' . date('d-m-Y H:i:s') . '] Scraper not running: ' . $supplier->supplier;

                    // Output debug message
                    dump('Scraper not running: ' . $supplier->supplier);

                    // Try to send message
                    try {
                        // Output debug message
                        dump('Sending message');

                        // Send message
                        app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi('34666805119', '971502609192', $message);
                        app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi('971569119192', '971502609192', $message);
                    } catch (Exception $e) {
                        // Output error
                        dump($e->getMessage());
                    }
                }
            }
        } catch(Exception $e) {
            LogHelper::createCustomLogForCron($this->signature, ['Exception' => $e->getTraceAsString(), 'message' => $e->getMessage()]);

            \App\CronJob::insertLastError($this->signature, $e->getMessage());
        }
    }
}


File: /opt/lampp/htdocs/erp/app/Console/Commands/FindTableQueries.php 
Content: <?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\File;

class FindTableQueries extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'find:table-queries';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Find all database queries using DB::table in the Laravel project';

    /**
     * Execute the console command.
     *
     * @return int
     */
    public function handle()
    {
        $queries = [];

        // Directory to search
        $directory = app_path(); // You can change this to your desired directory

        $this->traverseDirectory($directory, $queries);

        // Export queries to a file
        File::put(storage_path('table_queries1.txt'), implode("\n\n", $queries));

        $this->info('Queries using DB::table exported to table_queries.txt');
    }

    /**
     * Traverse the directory and search for queries using DB::table.
     *
     * @param string $directory
     * @param array $queries
     * @return void
     */
    private function traverseDirectory($directory, &$queries)
    {
        $files = File::allFiles($directory);

        foreach ($files as $file) {
            $contents = File::get($file->getPathname());

            // Search for queries using DB::table
            if (strpos($contents, 'DB::select') !== false) {
                // Log query
                $queries[] = "File: {$file->getPathname()} \nContent: {$contents}";
            }
        }
    }
}


File: /opt/lampp/htdocs/erp/app/Console/Commands/ImageBarcodeGenerator.php 
Content: <?php

namespace App\Console\Commands;

use File;
use Carbon\Carbon;
use App\BarcodeMedia;
use Illuminate\Console\Command;
use Plank\Mediable\Facades\MediaUploader as MediaUploader;

class ImageBarcodeGenerator extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'barcode-generator-product:run {product_id?}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Add Barcode into product';

    public $brands;

    public $product;

    const FONT_SIZE = 20;

    const EXTENSION_SUPPORT_TYPE = '"gif","jpg","jpeg","png"';

    const MEDIA_TYPE_TAG = '"gallery","original","untagged"';

    const LIMIT = 100;

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    public function getBrandName(\App\Product $product)
    {
        return isset($this->brands[$product->brand]) ? $this->brands[$product->brand] : '';
    }

    public function getSpecialPrice(\App\Product $product)
    {
        $special_price = (int) $product->price_special_offer > 0 ? (int) $product->price_special_offer : $product->price_inr_special;
        $special_price = ($special_price > 0) ? $special_price : '';

        return $special_price;
    }

    public function getAutoMessageString(\App\Product $product)
    {
        $auto_message = '';

        if ($product) {
            $brand_name    = $this->getBrandName($product);
            $special_price = $this->getSpecialPrice($product);
            $auto_message  = $brand_name . "\n" . $product->name . "\n" . $special_price;
        }

        return $auto_message;
    }

    public function setMediaFilename($media)
    {
        return md5($media->id) . '.' . $media->extension;
    }

    public function getMediaPathSave($key)
    {
        $path = public_path() . '/uploads/product-barcode/' . get_folder_number($key) . '/';
        File::isDirectory($path) or File::makeDirectory($path, 0777, true, true);

        return $path;
    }

    public function createImageFromMediaWithBarcode($media, $barcodeString, $message = '')
    {
        $fontSize = self::FONT_SIZE;

        $img = \IImage::make($media->getAbsolutePath());
        $img->insert(public_path($barcodeString), 'bottom-right', 10, 10);
        $img->text($message, 10, 10, function ($font) use ($fontSize) {
            $font->file(public_path('/fonts/Arial.ttf'));
            $font->size($fontSize);
            $font->valign('top'); //top, bottom or middle.
        });

        return $img;
    }

    public function insertImage()
    {
        $product = $this->product;

        $medias        = $product->getMedia(config('constants.attach_image_tag'));
        $auto_message  = $this->getAutoMessageString($product);
        $barcodeString = \DNS1D::getBarcodePNGPath($product->id, 'EAN13', 3, 77, [1, 1, 1], true);

        if (! $medias->isEmpty()) {
            foreach ($medias as $media) {
                // set path
                try {
                    $filename = pathinfo($media->filename, PATHINFO_FILENAME);

                    $img         = $this->createImageFromMediaWithBarcode($media, $barcodeString, $auto_message);
                    $filenameNew = $this->setMediaFilename($media);
                    $path        = $this->getMediaPathSave($product->id);

                    $img->save($path . $filenameNew);

                    $barcodeMedia = BarcodeMedia::updateOrCreate([
                        'media_id' => $media->id,
                        'type'     => 'product',
                        'type_id'  => $product->id,
                    ], [
                        'media_id' => $media->id,
                        'type'     => 'product',
                        'type_id'  => $product->id,
                        'name'     => $this->getBrandName($product) . '||' . $product->name,
                        'price'    => $this->getSpecialPrice($product),
                    ]);

                    $media = MediaUploader::fromSource($path . $filenameNew)
                        ->toDirectory('uploads/product-barcode/' . get_folder_number($product->id) . '/')
                        ->setOnDuplicateBehavior('replace')
                        ->upload();
                    $barcodeMedia->attachMedia($media, config('constants.media_barcode_tag'));
                } catch (Exception $e) {
                    \Log::channel('productUpdates')->info($e->getMessage() . ' || Product ' . $product->id . ' having issue in image barcode and image stored on : ' . $media->getAbsolutePath());
                }
            }
            // once prduct has been done then delete barcode string image
            File::delete(public_path($barcodeString));
        }
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        try {
            $report = \App\CronJobReport::create([
                'signature'  => $this->signature,
                'start_time' => Carbon::now(),
            ]);
            $productId = $this->argument('product_id');

            $file_types = [
                'gif',
                'jpg',
                'jpeg',
                'png',
                'pdf',
            ];

            $whereString  = 'where is_barcode_check is null and p.has_mediables = 1';
            $havingClause = 'having (total_image != total_barcode or total_barcode is null or bimage_name != bm_name or b_price > bm_price or b_price < bm_price)';
            if (! empty($productId) && $productId > 0) {
                $whereString  = ' where p.id = ' . $productId . ' and p.has_mediables = 1';
                $havingClause = '';
            }

            //join media as m on m.id = md.media_id and extension in ('.self::EXTENSION_SUPPORT_TYPE.')
            $query = 'select p.id, count(*) as total_image,count(bm.id) as total_barcode,p.stock,bm.name as bm_name ,bm.price as bm_price,concat(concat(b.name, "||"), p.name) COLLATE utf8mb4_unicode_ci as bimage_name,
        IF(p.price_special_offer > 0, p.price_special_offer , p.price_inr_special) as b_price
        from products as p
        left join brands as b on b.id = p.brand
        join mediables as md on md.mediable_id  = p.id and md.tag in (' . self::MEDIA_TYPE_TAG . ') and mediable_type like "App%Product"
        left join barcode_media as bm on bm.media_id = md.media_id and bm.type = "product"
        ' . $whereString . '
        group by p.id ' . $havingClause . ' order by p.stock,p.id desc limit ' . self::LIMIT;

            $productQuery = \DB::select($query);

            $productIds = [];

            if (! empty($productQuery)) {
                foreach ($productQuery as $res) {
                    $productIds[] = $res->id;
                }
            }

            // check all product ids exist
            if (! empty($productIds)) {
                $this->brands = \App\Brand::get()->pluck('name', 'id')->toArray();
                $products     = \App\Product::whereIn('id', $productIds)->get();
                if (! $products->isEmpty()) {
                    foreach ($products as $product) {
                        echo $product->id . ' Started at  ' . date('Y-m-d H:i:s') . PHP_EOL;
                        $this->product             = $product;
                        $image                     = $this->insertImage($product);
                        $product->is_barcode_check = 1;
                        $product->save();
                        echo $product->id . ' Ended at  ' . date('Y-m-d H:i:s') . PHP_EOL;
                    }
                }
                $report->update(['end_time' => Carbon::now()]);
            }
        } catch (Exception $e) {
            \App\CronJob::insertLastError($this->signature, $e->getMessage());
        }
    }
}


File: /opt/lampp/htdocs/erp/app/Console/Commands/Manual/CorrectProductPricing.php 
Content: <?php

namespace App\Console\Commands\Manual;

use App\Product;
use Carbon\Carbon;
use App\CronJobReport;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;

class CorrectProductPricing extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'product:correctPricing';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Correct the pricing in the product table based on the scraped pricing';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        try {
            $report = CronJobReport::create([
                'signature'  => $this->signature,
                'start_time' => Carbon::now(),
            ]);

            $sql = '
            SELECT
                p.id,
                p.sku,
                p.price*1 as price,
                MIN(sp.price_eur) AS sp_price_min,
                MAX(sp.price_eur) AS sp_price_max,
                GREATEST(p.price*1,MIN(sp.price_eur),MAX(sp.price_eur)) AS new_price
            FROM
                products p
            JOIN
                scraped_products sp
            ON
                p.id=sp.product_id
            WHERE
                discounted_price IS NOT NULL AND
                p.price!=sp.price_eur
            GROUP BY
                p.id
            HAVING
                MIN(sp.price_eur) > 0 AND
                MAX(sp.price_eur) > 0
            ORDER BY
                p.id
        ';
            $results = DB::select(DB::raw($sql));

            // Loop over result
            foreach ($results as $result) {
                // Get product to update
                $product = Product::find($result->id);

                // Log info and output info
                $info = 'Product ' . $product->id . ' with SKU ' . $product->sku . ' updated from EUR ' . $product->price . ' to EUR ' . $result->new_price;
                Log::channel('productUpdates')->info($info);
                dump($info);

                // Update the price
                $product->price = $result->new_price;
                $product->save();
            }

            $report->update(['end_time' => Carbon::now()]);
        } catch (Exception $e) {
            \App\CronJob::insertLastError($this->signature, $e->getMessage());
        }
    }
}


File: /opt/lampp/htdocs/erp/app/Console/Commands/Manual/ScraperMissingData.php 
Content: <?php

namespace App\Console\Commands\Manual;

use Carbon\Carbon;
use App\CronJobReport;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;

class ScraperMissingData extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'scraper:missing-data';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Get all products from log_scraper which are missing data';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        $report = CronJobReport::create([
            'signature'  => $this->signature,
            'start_time' => Carbon::now(),
        ]);
        // Get one product per supplier
        $sql = "
            SELECT
                MAX(id),
                website,
                url,
                sku,
                brand_id,
                category,
                title,
                description,
                properties,
                images,
                size_system,
                currency,
                price,
                discounted_price,
                is_sale
            FROM
                scraped_products
            WHERE
                validated=1 AND
                description LIKE '%shoe%'
            GROUP BY
                website
        ";
        $results = \DB::select(DB::raw($sql));

        if ($results !== null) {
            echo "website;SKU;URL;Brand;Gender;Category;Title;Description;Color;Sizes;Dimension;Images;Size System;Currency;Price;Discounted Price;Is Sale\n";
            foreach ($results as $result) {
                // Get properties
                $properties = ! empty($result->properties) ? unserialize($result->properties) : [];

                echo '"' . $result->website . '";' .
                    '"' . $result->sku . '";' .
                    '"' . $result->url . '";' .
                    '"' . $result->brand_id . '";' .
                    '"' . (isset($properties['gender']) ? $properties['gender'] : '') . '";' .
                    '"' . (! empty($properties['category']) && is_array($properties['category']) ? implode(',', $properties['category']) : '') . '";' .
                    '"' . $result->title . '";' .
                    '"' . str_replace('"', "'", $result->description) . '";' .
                    '"' . (! empty($properties['color']) ? $properties['color'] : '') . '";' .
                    '"' . (! empty($properties['sizes']) && is_array($properties['sizes']) ? implode('.', $properties['sizes']) : '') . '";' .
                    '"' . (! empty($properties['dimension']) && is_array($properties['dimension']) ? implode(',', $properties['dimension']) : '') . '";' .
                    '"' . (! empty($properties['images']) && is_array($properties['images']) ? implode(',', $properties['images']) : '') . '";' .
                    '"' . $result->size_system . '";' .
                    '"' . $result->currency . '";' .
                    $result->price . ';' .
                    $result->discounted_price . ';' .
                    $result->is_sale . ';' .
                    "\n";
            }
        }

        $report->update(['end_time' => Carbon::now()]);
    }
}


File: /opt/lampp/htdocs/erp/app/Console/Commands/Manual/WhatsappMoveToNew.php 
Content: <?php

namespace App\Console\Commands\Manual;

use App\Customer;
use Carbon\Carbon;
use App\CronJobReport;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;

class WhatsappMoveToNew extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'whatsapp:move-to-new';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Move all WhatsApp clients to a new number';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        try {
            $report = CronJobReport::create([
                'signature'  => $this->signature,
                'start_time' => Carbon::now(),
            ]);

            // Set variables
            $newNumber = '971545889192';
            $days      = 60;

            // Query to find all customers of $number
            $sql = '
            SELECT
                DISTINCT(customer_id)
            FROM
                chat_messages
            WHERE
                customer_id IN (
                    SELECT
                        c.id
                    FROM
                        customers c
                    WHERE
                        do_not_disturb=0 AND
                        is_blocked=0
                ) AND
                number IS NOT NULL AND
                created_at > DATE_SUB(NOW(), INTERVAL ' . $days . ' DAY)
        ';
            $rs = DB::select(DB::raw($sql));

            // Loop over customers
            if ($rs !== null) {
                foreach ($rs as $result) {
                    // Find customer
                    $customer                  = Customer::find($result->customer_id);
                    $customer->whatsapp_number = $newNumber;
                    $customer->save();

                    // Output customer information
                    echo $customer->id . ' ' . $customer->phone . "\n";
                }
            }

            $report->update(['end_time' => Carbon::now()]);
        } catch (Exception $e) {
            \App\CronJob::insertLastError($this->signature, $e->getMessage());
        }
    }
}


File: /opt/lampp/htdocs/erp/app/Console/Commands/SendActivitiesListing.php 
Content: <?php

namespace App\Console\Commands;

use App\Benchmark;
use Carbon\Carbon;
use App\CronJobReport;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Mail;
use App\Mails\Manual\ActivityListings;

class SendActivitiesListing extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'send:activity-listings';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Sends 2 users activity listings daily';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        try {
            $report = CronJobReport::create([
                'signature'  => $this->signature,
                'start_time' => Carbon::now(),
            ]);

            $start = Carbon::now()->format('Y-m-d 00:00:00');
            $end   = Carbon::now()->format('Y-m-d 23:59:00');

            $results = DB::select('
                  SELECT causer_id,subject_type,COUNT(*) AS total FROM
                    (SELECT DISTINCT activities.subject_id,activities.subject_type,activities.causer_id
                       FROM activities
                       WHERE activities.description = "create"
                       AND activities.causer_id IN (70,73)
                       AND activities.created_at BETWEEN ? AND ?)
                    AS SUBQUERY
                    GROUP BY subject_type,causer_id;
              ', [$start, $end]);

            $results2 = DB::select('
                  SELECT subject_type,COUNT(*) AS total FROM
                    (SELECT DISTINCT activities.subject_id,activities.subject_type
                       FROM activities
                       WHERE activities.description = "create"
                       AND activities.causer_id IN (70,73)
                       AND activities.created_at BETWEEN ? AND ?)
                    AS SUBQUERY
                    GROUP BY subject_type;
              ', [$start, $end]);

            $benchmark = Benchmark::whereBetween('for_date', [$start, $end])
                ->selectRaw('sum(selections) as selections,
                                           sum(searches) as searches,
                                           sum(attributes) as attributes,
                                           sum(supervisor) as supervisor,
                                           sum(imagecropper) as imagecropper,
                                           sum(lister) as lister,
                                           sum(approver) as approver,
                                           sum(inventory) as inventory')
                ->get()->toArray();

            $rows = [];

            foreach ($results as $result) {
                $rows[$result->causer_id]['selection']    = 0;
                $rows[$result->causer_id]['searcher']     = 0;
                $rows[$result->causer_id]['attribute']    = 0;
                $rows[$result->causer_id]['supervisor']   = 0;
                $rows[$result->causer_id]['imagecropper'] = 0;
                $rows[$result->causer_id]['lister']       = 0;
                $rows[$result->causer_id]['approver']     = 0;
                $rows[$result->causer_id]['inventory']    = 0;
                $rows[$result->causer_id]['sales']        = 0;
            }

            foreach ($results as $result) {
                $rows[$result->causer_id][$result->subject_type] = $result->total;
            }

            $total_data = [];

            $total_data['selection']    = 0;
            $total_data['searcher']     = 0;
            $total_data['attribute']    = 0;
            $total_data['supervisor']   = 0;
            $total_data['imagecropper'] = 0;
            $total_data['lister']       = 0;
            $total_data['approver']     = 0;
            $total_data['inventory']    = 0;
            $total_data['sales']        = 0;

            foreach ($results2 as $result) {
                $total_data[$result->subject_type] += $result->total;
            }

            $data['results']    = $rows;
            $data['total_data'] = $total_data;
            $data['benchmark']  = $benchmark[0];

            Mail::to('yogeshmordani@icloud.com')->send(new ActivityListings($data));

            $report->update(['end_time' => Carbon::now()]);
        } catch (Exception $e) {
            \App\CronJob::insertLastError($this->signature, $e->getMessage());
        }
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/ActivityConroller.php 
Content: <?php

namespace App\Http\Controllers;

use App\User;
use App\Product;
use App\Activity;
use App\Benchmark;
use Carbon\Carbon;
use App\LogScraperVsAi;
use App\ScrapedProducts;
use Illuminate\Http\Request;
use App\Helpers\StatusHelper;
use Illuminate\Support\Facades\DB;

class ActivityConroller extends Controller
{
    private $dataLabelDay = [
        '12:00 am',
        '1:00 am',
        '2:00 am',
        '3:00 am',
        '4:00 am',
        '5:00 am',
        '6:00 am',
        '7:00 am',
        '8:00 am',
        '9:00 am',
        '10:00 am',
        '11:00 am',
        '12:00 pm',
        '1:00 pm',
        '2:00 pm',
        '3:00 pm',
        '4:00 pm',
        '5:00 pm',
        '6:00 pm',
        '7:00 pm',
        '8:00 pm',
        '9:00 pm',
        '10:00 pm',
        '11:00 pm',
    ];

    private $dataLabelMonth = [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
    ];

    public function __construct()
    {
        $this->middleware('permission:view-activity', ['only' => ['index', 'store']]);
    }

    public function showActivity(Request $request)
    {
        // Set range start and range end
        $range_start = $request->input('range_start');
        $range_end   = $request->input('range_end');

        // Set empty AI activity
        $aiActivity = [];

        // Get total row count for products
        $aiActivity['total']       = 0;
        $aiActivity['total_range'] = 0;

        // Get ai activity
        $logScraperVsAi         = LogScraperVsAi::selectRaw('DISTINCT(product_id) AS product_id')->get();
        $aiActivity['ai']       = $logScraperVsAi->count();
        $logScraperVsAi         = LogScraperVsAi::selectRaw('DISTINCT(product_id) AS product_id')->whereBetween('created_at', [$range_start . ' 00:00', $range_end . ' 23:59'])->get();
        $aiActivity['ai_range'] = $logScraperVsAi->count();

        // Free up memory by unsetting unused variables
        unset($products);
        unset($logScraperVsAi);

        $allActivity = DB::table('listing_histories')->selectRaw('
	        SUM(case when action = "CROP_APPROVAL" then 1 Else 0 End) as crop_approved,
	        SUM(case when action = "CROP_APPROVAL_DENIED" then 1 Else 0 End) as crop_approval_denied,
	        SUM(case when action = "CROP_APPROVAL_CONFIRMATION" then 1 Else 0 End) as crop_approval_confirmation,
            SUM(case when action = "CROP_REJECTED"  then 1 Else 0 End) as crop_rejected,
            SUM(case when action = "CROP_SEQUENCED" then 1 Else 0 End) as crop_ordered,
            SUM(case when action = "LISTING_APPROVAL" then 1 Else 0 End) as attribute_approved,
            SUM(case when action = "LISTING_REJECTED" then 1 Else 0 End) as attribute_rejected,
            SUM(case when action = "MAGENTO_LISTED" then 1 Else 0 End) as magento_listed
	    ');

        $activity = DB::table('listing_histories')->selectRaw('
            user_id,
            SUM(case when action = "CROP_APPROVAL" then 1 Else 0 End) as crop_approved,
            SUM(case when action = "CROP_APPROVAL_DENIED" then 1 Else 0 End) as crop_approval_denied,
            SUM(case when action = "CROP_APPROVAL_CONFIRMATION" then 1 Else 0 End) as crop_approval_confirmation,
            SUM(case when action = "CROP_REJECTED"  then 1 Else 0 End) as crop_rejected,
            SUM(case when action = "CROP_SEQUENCED" then 1 Else 0 End) as crop_ordered,
            SUM(case when action = "LISTING_APPROVAL" then 1 Else 0 End) as attribute_approved,
            SUM(case when action = "LISTING_REJECTED" then 1 Else 0 End) as attribute_rejected,
            SUM(case when action = "MAGENTO_LISTED" then 1 Else 0 End) as magento_listed
        ')->whereNotNull('user_id');

        $ca = Product::where('is_image_processed', 1)
            ->where('is_crop_rejected', 0)
            ->where('is_crop_approved', 0)
            ->where('is_crop_being_verified', 0)
            ->whereDoesntHave('amends')->count();

        $productStats          = StatusHelper::getStatusCount();
        $productStatsDateRange = StatusHelper::getStatusCountByDateRange($range_start, $range_end);

        if (is_array($request->get('selected_user'))) {
            $activity = $activity->whereIn('user_id', $request->get('selected_user'));
        }

        $users         = $this->getUserArray();
        $selected_user = $request->input('selected_user');

        $scrapCount            = new ScrapedProducts();
        $inventoryCount        = new ScrapedProducts();
        $rejectedListingsCount = Product::where('is_listing_rejected', 1);

        // Get total number of scraped products
        $sqlScrapedProductsInStock = "
                SELECT
                    COUNT(DISTINCT(ls.sku)) as ttl
                FROM
                    suppliers s
                JOIN 
                    scrapers sc 
                ON 
                    s.id=sc.supplier_id    
                JOIN 
                    scraped_products ls 
                ON 
                    ls.website=sc.scraper_name
                WHERE
                    s.supplier_status_id=1 AND 
                    ls.validated=1 AND
                    ls.website!='internal_scraper' AND
                    ls.last_inventory_at > DATE_SUB(NOW(), INTERVAL sc.inventory_lifetime DAY) 
            ";
        $resultScrapedProductsInStock = DB::select($sqlScrapedProductsInStock);

        if ($range_start != '' && $range_end != '') {
            $activity = $activity->where(function ($query) use ($range_end, $range_start) {
                $query->whereBetween('created_at', [$range_start . ' 00:00', $range_end . ' 23:59']);
            });

            $allActivity           = $allActivity->whereBetween('created_at', [$range_start . ' 00:00', $range_end . ' 23:59']);
            $scrapCount            = $scrapCount->whereBetween('created_at', [$range_start . ' 00:00', $range_end . ' 23:59']);
            $inventoryCount        = $inventoryCount->whereBetween('last_inventory_at', [$range_start . ' 00:00', $range_end . ' 23:59']);
            $rejectedListingsCount = $rejectedListingsCount->whereBetween('listing_rejected_on', [$range_start . ' 00:00', $range_end . ' 23:59']);
        }

        if (! $range_start || ! $range_end) {
            $inventoryCount = $inventoryCount->whereRaw('TIMESTAMPDIFF(HOUR, last_inventory_at, NOW())<= 48');
            $scrapCount     = $scrapCount->where('created_at', 'LIKE', '%' . date('Y-m-d') . '%');
        }

        $scrapCount            = $scrapCount->count();
        $inventoryCount        = $inventoryCount->count();
        $rejectedListingsCount = $rejectedListingsCount->count();

        $allActivity = $allActivity->first();
        $userActions = $activity->groupBy('user_id')->get();

        $cropCountPerMinute = Product::whereRaw('TIMESTAMPDIFF(DAY, cropped_at, NOW()) IN (0,1)')->count();
        $cropCountPerMinute = round($cropCountPerMinute / 1440, 4);

        return view('activity.index', compact('resultScrapedProductsInStock', 'aiActivity', 'userActions', 'users', 'selected_user', 'range_end', 'range_start', 'allActivity', 'scrapCount', 'inventoryCount', 'rejectedListingsCount', 'productStats', 'productStatsDateRange', 'cropCountPerMinute'));
    }

    public function showGraph(Request $request)
    {
        $data['date_type'] = $request->input('date_type') ?? 'week';

        $data['week_range']  = $request->input('week_range') ?? date('Y-\WW');
        $data['month_range'] = $request->input('month_range') ?? date('Y-m');

        if ($data['date_type'] == 'week') {
            $weekRange = $this->getStartAndEndDateByWeek($data['week_range']);
            $start     = $weekRange['start_date'];
            $end       = $weekRange['end_date'];

            $workDoneResult = Activity::where('description', 'create')
                ->whereBetween('created_at', [$start, $end])
                ->select('activities.subject_id', 'activities.subject_type', 'activities.created_at', \DB::raw('WEEKDAY(created_at) as xaxis, count(*) as total'))
                ->groupByRaw('WEEKDAY(created_at)')
                ->get();

            $benchmarkResult = Benchmark::selectRaw('WEEKDAY(for_date) as day,
								sum(selections + searches + attributes + supervisor + imagecropper + lister + approver + inventory) as total')
                ->whereBetween('created_at', [$start, $end])
                ->groupByRaw('WEEKDAY(for_date)')
                ->get();

            $workDone = [];
            $dowMap   = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];

            foreach ($workDoneResult as $item) {
                $workDone[$dowMap[$item->xaxis]] = $item->total;
            }

            $benchmark = [];

            foreach ($benchmarkResult as $item) {
                $benchmark[$dowMap[$item->day]] = $item->total;
            }
        } else {
            $monthRange = $this->getStartAndEndDateByMonth($data['month_range']);
            $start      = $monthRange['start_date'];
            $end        = $monthRange['end_date'];

            $workDoneResult = Activity::where('description', 'create')
                ->whereBetween('created_at', [$start, $end])
                ->select('activities.subject_id', 'activities.subject_type', 'activities.created_at', \DB::raw('DAYOFMONTH(created_at) as xaxis ,COUNT(*) AS total'))
                ->groupByRaw('DAYOFMONTH(created_at)')
                ->get();

            $benchmarkResult = Benchmark::selectRaw('DAYOFMONTH(for_date) as day,
								sum(selections + searches + attributes + supervisor + imagecropper + lister + approver + inventory) as total')
                ->whereBetween('created_at', [$start, $end])
                ->groupByRaw('DAYOFMONTH(for_date)')
                ->get();

            foreach ($workDoneResult as $item) {
                $workDone[$item->xaxis] = $item->total;
            }

            foreach ($benchmarkResult as $item) {
                $benchmark[$item->day] = $item->total;
            }
        }

        $data['benchmark'] = $benchmark ?? [];
        $data['workDone']  = $workDone ?? [];

        return view('activity.graph', $data);
    }

    public function showUserGraph(Request $request)
    {
        $data['users']         = $this->getUserArray();
        $data['selected_user'] = $request->input('selected_user') ?? 3;

        $data['date_type'] = $request->input('date_type') ?? 'day';

        $data['day_range']   = $request->input('day_range') ?? date('Y-m-d');
        $data['month_range'] = $request->input('month_range') ?? date('Y-m');

        if ($data['date_type'] == 'day') {
            $start = $data['day_range'] . ' 00:00:00.000000';
            $end   = $data['day_range'] . ' 23:59:59.000000';

            $workDoneResult = DB::select('
									SELECT HOUR(created_at) as xaxis,subject_type ,COUNT(*) AS total FROM
								 		(SELECT DISTINCT activities.subject_id,activities.subject_type,activities.created_at
								  		 FROM activities
								  		 WHERE activities.description = "create"
								  		 AND activities.causer_id = ?
								  		 AND activities.created_at BETWEEN ? AND ?)
								    AS SUBQUERY
								   	GROUP BY HOUR(created_at),subject_type ORDER By xaxis;
							', [$data['selected_user'], $start, $end]);

            $workDone = [];

            foreach ($workDoneResult as $item) {
                $workDone[$item->subject_type][$item->xaxis] = $item->total;
            }

            foreach ($workDone as $subject_type => $subject_type_array) {
                for ($i = 0; $i <= 23; $i++) {
                    $workDone[$subject_type][$i] = $subject_type_array[$i] ?? 0;
                }
            }
        } else {
            $monthRange = $this->getStartAndEndDateByMonth($data['month_range']);
            $start      = $monthRange['start_date'];
            $end        = $monthRange['end_date'];

            $workDoneResult = DB::select('
									SELECT DAYOFMONTH(created_at) as xaxis,subject_type ,COUNT(*) AS total FROM
								 		(SELECT DISTINCT activities.subject_id,activities.subject_type,activities.created_at
								  		 FROM activities
								  		 WHERE activities.description = "create"
								  		 AND activities.causer_id = ?
								  		 AND activities.created_at BETWEEN ? AND ?)
								    AS SUBQUERY
								   	GROUP BY DAYOFMONTH(created_at),subject_type ORDER By xaxis;
							', [$data['selected_user'], $start, $end]);

            $workDone = [];

            foreach ($workDoneResult as $item) {
                $workDone[$item->subject_type][$item->xaxis] = $item->total;
            }

            foreach ($workDone as $subject_type => $subject_type_array) {
                for ($i = 1; $i <= 31; $i++) {
                    $workDone[$subject_type][$i] = $subject_type_array[$i] ?? 0;
                }
            }
        }

        $data['workDone']  = $workDone ?? [];
        $data['dataLabel'] = $data['date_type'] == 'day' ? $this->dataLabelDay : $this->dataLabelMonth;

        return view('activity.graph-user', $data);
    }

    public function getUserArray()
    {
        $users = User::all();

        $userArray = [];

        foreach ($users as $user) {
            $userArray[((string) $user->id)] = $user->name;
        }

        return $userArray;
    }

    public static function create($subject_id, $subject_type, $description)
    {
    }

    public function getStartAndEndDateByWeek($week_range)
    {
        $arr = explode('-', $week_range);

        $week = str_replace('W', '', $arr[1]);
        $year = $arr[0];

        $dateTime = new \DateTime();
        $dateTime->setISODate($year, $week);
        $result['start_date'] = $dateTime->format('Y-m-d') . ' 00:00:00.000000';
        $dateTime->modify('+6 days');
        $result['end_date'] = $dateTime->format('Y-m-d') . ' 23:59:59.000000';

        return $result;
    }

    public function getStartAndEndDateByMonth($month_range)
    {
        $arr = explode('-', $month_range);

        $year  = $arr[0];
        $month = $arr[1];

        $dateTime = new \DateTime();
        $dateTime->setDate($year, $month, 1);
        $result['start_date'] = $dateTime->format('Y-m-d') . ' 00:00:00.000000';
        $dateTime->modify('+1 month');
        $dateTime->modify('-1 days');
        $result['end_date'] = $dateTime->format('Y-m-d') . ' 23:59:59.000000';

        return $result;
    }

    public function recentActivities(Request $request)
    {
        $productStats = DB::table('productactivities')
            ->where('status_id', $request->type)
            ->whereDate('created_at', '>', Carbon::now()->subDays(10))
            ->orderBy('created_at', 'DESC')
            ->get();

        return $productStats;
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/BugTrackingController.php 
Content: <?php

namespace App\Http\Controllers;

use App\Task;
use App\User;
use Exception;
use App\BugType;
use App\TestCase;
use App\BugStatus;
use App\BugTracker;
use App\BugSeverity;
use App\ChatMessage;
use App\StoreWebsite;
use App\DeveloperTask;
use App\BugEnvironment;
use App\BugUserHistory;
use App\SiteDevelopment;
use App\BugStatusHistory;
use App\GoogleScreencast;
use App\BugTrackerHistory;
use Illuminate\Support\Str;
use Illuminate\Http\Request;
use App\BugSeveritiesHistory;
use App\Models\DataTableColumn;
use App\Github\GithubRepository;
use App\SiteDevelopmentCategory;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Auth;
use App\Jobs\UploadGoogleDriveScreencast;
use Illuminate\Support\Facades\Validator;

class BugTrackingController extends Controller
{
    public function index(Request $request)
    {
        $title = 'Bug Tracking';

        $bugStatuses      = BugStatus::get();
        $bugEnvironments  = BugEnvironment::get();
        $bugSeveritys     = BugSeverity::get();
        $bugTypes         = BugType::get();
        $users            = User::get();
        $filterCategories = SiteDevelopmentCategory::orderBy('title')->pluck('title')->toArray();
        $filterWebsites   = StoreWebsite::orderBy('website')->get();
        $permission_users = User::select('id', 'name', 'email', 'gmail')->whereNotNull('gmail')->get();

        $datatableModel = DataTableColumn::select('column_name')->where('user_id', auth()->user()->id)->where('section_name', 'bug-tracking')->first();

        $dynamicColumnsToShowbt = [];
        if (! empty($datatableModel->column_name)) {
            $hideColumns            = $datatableModel->column_name ?? '';
            $dynamicColumnsToShowbt = json_decode($hideColumns, true);
        }

        $githubRepositories = GithubRepository::all();

        return view(
            'bug-tracking.index', [
                'title'                  => $title,
                'bugTypes'               => $bugTypes,
                'bugEnvironments'        => $bugEnvironments,
                'bugSeveritys'           => $bugSeveritys,
                'bugStatuses'            => $bugStatuses,
                'filterCategories'       => $filterCategories,
                'users'                  => $users,
                'allUsers'               => $users,
                'filterWebsites'         => $filterWebsites,
                'permission_users'       => $permission_users,
                'dynamicColumnsToShowbt' => $dynamicColumnsToShowbt,
                'githubRepositories'     => $githubRepositories,
            ]
        );
    }

    public function records(Request $request)
    {
        if (Auth::user()->hasRole('Admin') || Auth::user()->hasRole('Lead Tester')) {
            if (request('sort') == '1') {
                $records = BugTracker::with(['chatlatest'])->Select('bug_trackers.*')->leftJoin('chat_messages', 'chat_messages.bug_id', '=', 'bug_trackers.id')->where('bug_id', '!=', '')->orderBy('chat_messages.created_at', 'desc');
            } else {
                $records = BugTracker::orderBy('id', 'desc');
            }
        } else {
            if (request('sort') == '1') {
                $records = BugTracker::with(['chatlatest'])->Select('bug_trackers.*')->leftJoin('chat_messages', 'chat_messages.bug_id', '=', 'bug_trackers.id')->where('bug_id', '!=', '')->where(
                    function ($query) {
                        $query->where('assign_to', Auth::user()->id);
                        $query->orWhere('created_by', Auth::user()->id);
                    }
                )->orderBy('chat_messages.created_at', 'desc');
            } else {
                $records = BugTracker::where(
                    function ($query) {
                        $query->where('assign_to', Auth::user()->id);
                        $query->orWhere('created_by', Auth::user()->id);
                    }
                )->orderBy('id', 'desc');
            }
        }

        if ($keyword = request('bug_id')) {
            $multiple_keyword = explode(',', $keyword);

            $records = $records->whereIn('id', $multiple_keyword);
        }

        if ($keyword = request('summary')) {
            $records = $records->where(
                function ($q) use ($keyword) {
                    $q->where('summary', 'LIKE', "%$keyword%");
                }
            );
        }
        if ($keyword = request('bug_type')) {
            $records = $records->WhereIn('bug_type_id', $keyword);
        }
        if ($keyword = request('bug_enviornment')) {
            $records = $records->WhereIn('bug_environment_id', $keyword);
        }
        if ($keyword = request('bug_severity')) {
            $records = $records->WhereIn('bug_severity_id', $keyword);
        }
        if ($keyword = request('created_by')) {
            $records = $records->WhereIn('created_by', $keyword);
        }
        if ($keyword = request('assign_to_user')) {
            $records = $records->WhereIn('assign_to', $keyword);
        }
        if ($keyword = request('bug_status')) {
            $records = $records->WhereIn('bug_status_id', $keyword);
        }
        if ($keyword = request('module_id')) {
            //$records = $records->WhereIn('module_id', 'LIKE', "%$keyword%");
            $records = $records->WhereIn('module_id', $keyword);
        }
        if ($keyword = request('step_to_reproduce')) {
            $records = $records->where(
                function ($q) use ($keyword) {
                    $q->where('step_to_reproduce', 'LIKE', "%$keyword%");
                }
            );
        }
        if ($keyword = request('website')) {
            $records = $records->where(
                function ($q) use ($keyword) {
                    foreach ($keyword as $search_val_web) {
                        $q->orWhereRaw("FIND_IN_SET({$search_val_web}, website)");
                    }
                }
            );
        }
        if ($keyword = request('date')) {
            $records = $records->where(
                function ($q) use ($keyword) {
                    $q->whereDate('created_at', $keyword);
                }
            );
        }

        $records_count = $records->count();
        $records       = $records->take(10)->get();

        $records = $records->map(
            function ($bug) {
                $bug->bug_type_id_val         = $bug->bug_type_id;
                $bug->website_id_val          = $bug->website;
                $bug->bug_type_id             = BugType::where('id', $bug->bug_type_id)->value('name');
                $bug->bug_environment_id      = BugEnvironment::where('id', $bug->bug_environment_id)->value('name');
                $bug->created_by              = User::where('id', $bug->created_by)->value('name');
                $bug->created_at_date         = \Carbon\Carbon::parse($bug->created_at)->format('d-m-Y');
                $bug->bug_color               = BugStatus::where('id', $bug->bug_status_id)->value('bug_color');
                $bug->bug_history             = BugTrackerHistory::where('bug_id', $bug->id)->get();
                $store_websites               = StoreWebsite::whereIn('id', explode(',', $bug->website))->pluck('title')->toArray();
                $bug->website                 = implode(' ,', $store_websites);
                $bug->summary_short           = Str::limit($bug->summary, 10, '..');
                $bug->step_to_reproduce_short = Str::limit($bug->step_to_reproduce, 60, '..');
                $bug->url_short               = Str::limit($bug->url, 5, '..');
                $last_chat_res                = ChatMessage::select('message')->where('bug_id', $bug->id)->orderBy('id', 'desc')->limit(1)->get()->toArray();
                $last_chat_message            = '';
                if (isset($last_chat_res[0]['message']) && $last_chat_res[0]['message'] != '') {
                    $last_chat_message = $last_chat_res[0]['message'];
                }
                $bug->last_chat_message_short = substr($last_chat_message, 0, 28);
                $bug->last_chat_message_long  = $last_chat_message;
                $bug->module_id               = str_replace("'", '', $bug->module_id);
                $bug->module_id               = str_replace('&nbsp;', ' ', $bug->module_id);

                return $bug;
            }
        );

        $datatableModel = DataTableColumn::select('column_name')->where('user_id', auth()->user()->id)->where('section_name', 'bug-tracking')->first();

        $dynamicColumnsToShowbt = [];
        if (! empty($datatableModel->column_name)) {
            $hideColumns            = $datatableModel->column_name ?? '';
            $dynamicColumnsToShowbt = json_decode($hideColumns, true);
        }

        return response()->json(
            [
                'code'                   => 200,
                'data'                   => $records,
                'dynamicColumnsToShowbt' => $dynamicColumnsToShowbt,
                'total'                  => $records_count,
            ]
        );
    }

    public function recordTrackingAjax(Request $request)
    {
        $title = 'Bug Tracking';

        $page = $_REQUEST['page'];

        $page = $page * 10;

        $bugStatuses      = BugStatus::get();
        $bugEnvironments  = BugEnvironment::get();
        $bugSeveritys     = BugSeverity::get();
        $bugTypes         = BugType::get();
        $users            = User::get();
        $filterCategories = SiteDevelopmentCategory::orderBy('title')->pluck('title')->toArray();
        $filterWebsites   = StoreWebsite::orderBy('website')->get();

        if (Auth::user()->hasRole('Admin') || Auth::user()->hasRole('Lead Tester')) {
            if (request('sort') == '1') {
                $records = BugTracker::with(['chatlatest'])->Select('bug_trackers.*')->leftJoin('chat_messages', 'chat_messages.bug_id', '=', 'bug_trackers.id')->where('bug_id', '!=', '')->orderBy('chat_messages.created_at', 'desc')->offset($page)->limit(10);
            } else {
                $records = BugTracker::orderBy('id', 'desc')->offset($page)->limit(10);
            }
        } else {
            if (request('sort') == '1') {
                $records = BugTracker::with(['chatlatest'])->Select('bug_trackers.*')->leftJoin('chat_messages', 'chat_messages.bug_id', '=', 'bug_trackers.id')->where('bug_id', '!=', '')->where(
                    function ($query) {
                        $query->where('assign_to', Auth::user()->id);
                        $query->orWhere('created_by', Auth::user()->id);
                    }
                )->orderBy('chat_messages.created_at', 'desc')->offset($page)->limit(10);
            } else {
                $records = BugTracker::where(
                    function ($query) {
                        $query->where('assign_to', Auth::user()->id);
                        $query->orWhere('created_by', Auth::user()->id);
                    }
                )->orderBy('id', 'desc')->offset($page)->limit(10);
            }
        }

        if ($keyword = request('bug_id')) {
            $records = $records->where('id', $keyword);
        }

        if ($keyword = request('summary')) {
            $records = $records->where(
                function ($q) use ($keyword) {
                    $q->where('summary', 'LIKE', "%$keyword%");
                }
            );
        }
        if ($keyword = request('bug_type')) {
            $records = $records->WhereIn('bug_type_id', $keyword);
        }
        if ($keyword = request('bug_enviornment')) {
            $records = $records->WhereIn('bug_environment_id', $keyword);
        }
        if ($keyword = request('bug_severity')) {
            $records = $records->WhereIn('bug_severity_id', $keyword);
        }
        if ($keyword = request('created_by')) {
            $records = $records->WhereIn('created_by', $keyword);
        }
        if ($keyword = request('assign_to_user')) {
            $records = $records->WhereIn('assign_to', $keyword);
        }
        if ($keyword = request('bug_status')) {
            $records = $records->WhereIn('bug_status_id', $keyword);
        }
        if ($keyword = request('module_id')) {
            // $records = $records->WhereIn('module_id', 'LIKE', "%$keyword%");
            $records = $records->WhereIn('module_id', $keyword);
        }
        if ($keyword = request('step_to_reproduce')) {
            $records = $records->where(
                function ($q) use ($keyword) {
                    $q->where('step_to_reproduce', 'LIKE', "%$keyword%");
                }
            );
        }
        if ($keyword = request('website')) {
            $records = $records->WhereIn('website', $keyword);
        }
        if ($keyword = request('date')) {
            $records = $records->where(
                function ($q) use ($keyword) {
                    $q->whereDate('created_at', $keyword);
                }
            );
        }
        $records = $records->get();

        $records = $records->map(
            function ($bug) {
                $bug->bug_type_id_val         = $bug->bug_type_id;
                $bug->website_id_val          = $bug->website;
                $bug->bug_type_id             = BugType::where('id', $bug->bug_type_id)->value('name');
                $bug->bug_environment_id      = BugEnvironment::where('id', $bug->bug_environment_id)->value('name');
                $bug->created_by              = User::where('id', $bug->created_by)->value('name');
                $bug->created_at_date         = \Carbon\Carbon::parse($bug->created_at)->format('d-m-Y');
                $bug->bug_color               = BugStatus::where('id', $bug->bug_status_id)->value('bug_color');
                $bug->bug_history             = BugTrackerHistory::where('bug_id', $bug->id)->get();
                $bug->website                 = StoreWebsite::where('id', $bug->website)->value('title');
                $bug->summary_short           = Str::limit($bug->summary, 10, '..');
                $bug->step_to_reproduce_short = Str::limit($bug->step_to_reproduce, 60, '..');
                $bug->url_short               = Str::limit($bug->url, 5, '..');
                $last_chat_res                = ChatMessage::select('message')->where('bug_id', $bug->id)->orderBy('id', 'desc')->limit(1)->get()->toArray();
                $last_chat_message            = '';
                if (isset($last_chat_res[0]['message']) && $last_chat_res[0]['message'] != '') {
                    $last_chat_message = $last_chat_res[0]['message'];
                }
                $bug->last_chat_message_short = substr($last_chat_message, 0, 28);
                $bug->last_chat_message_long  = $last_chat_message;
                $bug->module_id               = str_replace("'", '', $bug->module_id);
                $bug->module_id               = str_replace('&nbsp;', ' ', $bug->module_id);

                return $bug;
            }
        );

        $datatableModel = DataTableColumn::select('column_name')->where('user_id', auth()->user()->id)->where('section_name', 'bug-tracking')->first();

        $dynamicColumnsToShowbt = [];
        if (! empty($datatableModel->column_name)) {
            $hideColumns            = $datatableModel->column_name ?? '';
            $dynamicColumnsToShowbt = json_decode($hideColumns, true);
        }

        return view(
            'bug-tracking.index-ajax', [
                'title'                  => $title,
                'bugTypes'               => $bugTypes,
                'bugEnvironments'        => $bugEnvironments,
                'bugSeveritys'           => $bugSeveritys,
                'bugStatuses'            => $bugStatuses,
                'filterCategories'       => $filterCategories,
                'users'                  => $users,
                'allUsers'               => $users,
                'filterWebsites'         => $filterWebsites,
                'data'                   => $records,
                'dynamicColumnsToShowbt' => $dynamicColumnsToShowbt,
                'total'                  => count($records),
            ]
        );
    }

    public function columnVisbilityUpdate(Request $request)
    {
        $userCheck = DataTableColumn::where('user_id', auth()->user()->id)->where('section_name', 'bug-tracking')->first();

        if ($userCheck) {
            $column               = DataTableColumn::find($userCheck->id);
            $column->section_name = 'bug-tracking';
            $column->column_name  = json_encode($request->column_bt);
            $column->save();
        } else {
            $column               = new DataTableColumn();
            $column->section_name = 'bug-tracking';
            $column->column_name  = json_encode($request->column_bt);
            $column->user_id      = auth()->user()->id;
            $column->save();
        }

        return redirect()->back()->with('success', 'column visiblity Added Successfully!');
    }

    public function create()
    {
        $bugStatuses      = BugStatus::get();
        $bugEnvironments  = BugEnvironment::get();
        $bugSeveritys     = BugSeverity::get();
        $bugTypes         = BugType::get();
        $users            = User::get();
        $filterCategories = SiteDevelopmentCategory::orderBy('title')->pluck('title')->toArray();
        $filterWebsites   = StoreWebsite::orderBy('website')->pluck('website')->toArray();

        return view('bug-tracking.create', compact('bugStatuses', 'bugTypes', 'bugEnvironments', 'bugSeveritys', 'users', 'filterCategories', 'filterWebsites'));
    }

    public function edit($id)
    {
        $bugTracker       = BugTracker::findorFail($id);
        $bugStatuses      = BugStatus::get();
        $bugEnvironments  = BugEnvironment::get();
        $bugSeveritys     = BugSeverity::get();
        $bugTypes         = BugType::get();
        $users            = User::get();
        $filterCategories = SiteDevelopmentCategory::orderBy('title')->pluck('title')->toArray();
        $filterWebsites   = StoreWebsite::orderBy('website')->pluck('website')->toArray();
        $testCases        = [];
        if ($bugTracker->module_id) {
            $testCases = TestCase::where('module_id', $bugTracker->module_id)->select('id', 'name')->get();
        }
        if ($bugTracker) {
            return response()->json(
                [
                    'code'             => 200,
                    'data'             => $bugTracker,
                    'bugTypes'         => $bugTypes,
                    'bugEnvironments'  => $bugEnvironments,
                    'bugSeveritys'     => $bugSeveritys,
                    'bugStatuses'      => $bugStatuses,
                    'filterCategories' => $filterCategories,
                    'users'            => $users,
                    'filterWebsites'   => $filterWebsites,
                    'testCases'        => $testCases,
                ]
            );
        }

        return response()->json(
            [
                'code'  => 500,
                'error' => 'Wrong bug tracking id!',
            ]
        );
    }

    public function status(Request $request)
    {
        $status    = $request->all();
        $validator = Validator::make(
            $status, [
                'name' => 'required|string',
            ]
        );
        if ($validator->fails()) {
            return response()->json(
                [
                    'code'  => 500,
                    'error' => 'Name is required',
                ]
            );
        }
        $data    = $request->except('_token');
        $records = BugStatus::create($data);

        return response()->json(
            [
                'code' => 200,
                'data' => $records,
            ]
        );
    }

    public function statuscolor(Request $request)
    {
        $status_color = $request->all();
        $data         = $request->except('_token');
        foreach ($status_color['color_name'] as $key => $value) {
            $bugstatus            = BugStatus::find($key);
            $bugstatus->bug_color = $value;
            $bugstatus->save();
        }

        $records = $bugstatus;

        return response()->json(
            [
                'code' => 200,
                'data' => $records,
            ]
        );
    }

    public function environment(Request $request)
    {
        $environment = $request->all();
        $validator   = Validator::make(
            $environment, [
                'name' => 'required|string',
            ]
        );
        if ($validator->fails()) {
            return response()->json(
                [
                    'code'  => 500,
                    'error' => 'Name is required',
                ]
            );
        }
        $data    = $request->except('_token');
        $records = BugEnvironment::create($data);

        return response()->json(
            [
                'code' => 200,
                'data' => $records,
            ]
        );
    }

    public function type(Request $request)
    {
        $type      = $request->all();
        $validator = Validator::make(
            $type, [
                'name' => 'required|string',
            ]
        );
        if ($validator->fails()) {
            return response()->json(
                [
                    'code'  => 500,
                    'error' => 'Name is required',
                ]
            );
        }
        $data    = $request->except('_token');
        $records = BugType::create($data);

        return response()->json(
            [
                'code' => 200,
                'data' => $records,
            ]
        );
    }

    public function severity(Request $request)
    {
        $severity  = $request->all();
        $validator = Validator::make(
            $severity, [
                'name' => 'required|string',
            ]
        );
        if ($validator->fails()) {
            return response()->json(
                [
                    'code'  => 500,
                    'error' => 'Name is required',
                ]
            );
        }
        $data    = $request->except('_token');
        $records = BugSeverity::create($data);

        return response()->json(
            [
                'code' => 200,
                'data' => $records,
            ]
        );
    }

    public function store(Request $request)
    {
        $bug       = $request->all();
        $validator = Validator::make(
            $bug, [
                'summary'            => 'required|string',
                'step_to_reproduce'  => 'required|string',
                'bug_type_id'        => 'required|string',
                'bug_environment_id' => 'required|string',
                'assign_to'          => 'required|string',
                'bug_severity_id'    => 'required|string',
                'bug_status_id'      => 'required|string',
                'module_id'          => 'required|string',
                'remark'             => 'required|string',
                'website'            => 'required|array',

            ]
        );

        if ($validator->fails()) {
            $outputString = '';
            $messages     = $validator->errors()->getMessages();
            foreach ($messages as $k => $errr) {
                foreach ($errr as $er) {
                    $outputString .= "$k : " . $er . '<br>';
                }
            }

            return redirect()->back()->with('error', $outputString);
        }

        $id = $request->get('id', 0);

        $records = BugTracker::find($id);

        if (! $records) {
            $records = new BugTracker();
        }
        $bug['created_by']        = \Auth::user()->id;
        $bug['summary']           = str_replace("\n", '<br/>', $bug['summary']);
        $bug['step_to_reproduce'] = str_replace("\n", '<br/>', $bug['step_to_reproduce']);
        $bug['expected_result']   = str_replace("\n", '<br/>', $bug['expected_result']);
        $bug['website']           = implode(',', $request->website);
        $records->fill($bug);

        $records->save();
        $params = ChatMessage::create(
            [
                'user_id'         => \Auth::user()->id,
                'bug_id'          => $records->id,
                'sent_to_user_id' => ($records->assign_to != \Auth::user()->id) ? $records->assign_to : \Auth::user()->id,
                'approved'        => '1',
                'status'          => '2',
                'message'         => $records->remark,
            ]
        );
        $bug['bug_id']     = $records->id;
        $bug['updated_by'] = \Auth::user()->id;
        $userHistory       = [
            'bug_id'     => $records->id,
            'new_user'   => $request->assign_to,
            'updated_by' => \Auth::user()->id,
        ];
        $statusHistory = [
            'bug_id'     => $records->id,
            'new_status' => $request->assign_to,
            'updated_by' => \Auth::user()->id,
        ];

        BugUserHistory::create($userHistory);
        BugStatusHistory::create($statusHistory);

        $severity_his = [
            'assign_to'   => $request->assign_to,
            'severity_id' => $request->bug_severity_id,
            'bug_id'      => $records->id,
            'updated_by'  => \Auth::user()->id,
        ];
        BugSeveritiesHistory::create($severity_his);

        $bugTrackerHistory = BugTrackerHistory::create($bug);

        return redirect()->back();
    }

    public function destroy(BugTracker $bugTracker, Request $request)
    {
        try {
            $bug               = BugTracker::where('id', '=', $request->id)->delete();
            $bugTrackerHistory = BugTrackerHistory::where('bug_id', '=', $request->id)->delete();

            return response()->json(
                [
                    'code'    => 200,
                    'data'    => $bug,
                    'message' => 'Deleted successfully!!!',
                ]
            );
        } catch (Exception $e) {
            $msg = $e->getMessage();
            \Log::error('Bug Tracker Request Delete Error => ' . json_decode($e) . ' #id #' . $request->id ?? '');
            $this->BugErrorLog($request->id ?? '', 'Bug Tracker Request Delete Error', $msg, 'bug_tracker');

            return response()->json(
                [
                    'code'    => 500,
                    'message' => $msg,
                ]
            );
        }
    }

    public function update(Request $request)
    {
        $this->validate(
            $request, [
                'summary'            => 'required|string',
                'step_to_reproduce'  => 'required|string',
                'bug_type_id'        => 'required|string',
                'bug_environment_id' => 'required|string',
                'assign_to'          => 'required|string',
                'bug_severity_id'    => 'required|string',
                'bug_status_id'      => 'required|string',
                'module_id'          => 'required|string',
                'remark'             => 'required|string',
                'website'            => 'required|array',

            ]
        );

        $data = $request->except('_token', 'id');
        $bug  = BugTracker::where('id', $request->id)->first();

        $old_severity_id = $bug->bug_severity_id;

        $data['created_by']          = \Auth::user()->id;
        $bug['updated_by']           = \Auth::user()->id;
        $userHistory['old_user']     = $bug->assign_to;
        $statusHistory['old_status'] = $bug->bug_status_id;

        $params = ChatMessage::create(
            [
                'user_id'         => \Auth::user()->id,
                'bug_id'          => $bug->id,
                'sent_to_user_id' => ($request->assign_to != \Auth::user()->id) ? $request->assign_to : \Auth::user()->id,
                'approved'        => '1',
                'status'          => '2',
                'message'         => $request->remark,
            ]
        );
        $data['summary']           = str_replace("\n", '<br/>', $request->summary);
        $data['step_to_reproduce'] = str_replace("\n", '<br/>', $request->step_to_reproduce);

        $data['expected_result'] = str_replace("\n", '<br/>', $data['expected_result']);
        $data['website']         = implode(',', $request->website);

        if ($bug->test_case_id) {
            //
        }

        if ($bug->bug_status_id == '7') {
            $data['assign_to'] = $bug->created_by;
        }

        $bug->update($data);
        $data['bug_id'] = $request->id;
        BugTrackerHistory::create($data);
        $userHistory = [
            'bug_id'     => $request->id,
            'new_user'   => $request->assign_to,
            'updated_by' => \Auth::user()->id,
        ];
        $statusHistory = [
            'bug_id'     => $request->id,
            'new_status' => $request->bug_status_id,
            'updated_by' => \Auth::user()->id,
        ];
        BugUserHistory::create($userHistory);
        BugStatusHistory::create($statusHistory);

        $severity_his = [
            'assign_to'       => $request->assign_to,
            'old_severity_id' => $old_severity_id,
            'severity_id'     => $request->bug_severity_id,
            'bug_id'          => $request->id,
            'updated_by'      => \Auth::user()->id,
        ];
        BugSeveritiesHistory::create($severity_his);

        if ($request->bug_status_id == 3 || $request->bug_status_id == 7) {
            $Task = Task::where('task_bug_ids', $request->id)->first();
            if (count((array) $Task) > 0) {
                if ($request->bug_status_id == 3) {
                    $Task->status = 22;
                } elseif ($request->bug_status_id == 7) {
                    $Task->status = 15;
                }
                $Task->save();
            }
        }

        return redirect()->route('bug-tracking.index')->with('success', 'You have successfully updated a Bug Tracker!');
    }

    public function bugHistory($id)
    {
        $bugHistory = BugTrackerHistory::where('bug_id', $id)->get();
        $bugHistory = $bugHistory->map(
            function ($bug) {
                $bug_type_id = BugType::where('id', $bug->bug_type_id)->value('name');
                if (isset($bug_type_id) && $bug_type_id == 'null') {
                    $bug_type_id = '-';
                }
                $bug_environment_id = BugEnvironment::where('id', $bug->bug_environment_id)->value('name') . ' ' . $bug->bug_environment_ver;
                if (! isset($bug_environment_id)) {
                    $bug_environment_id = '-';
                }
                $assign_to = User::where('id', $bug->assign_to)->value('name');
                if (! isset($assign_to)) {
                    $assign_to = '-';
                }
                $updated_by = User::where('id', $bug->updated_by)->value('name');
                if (! isset($updated_by)) {
                    $updated_by = '-';
                }
                $bug_severity_id = BugSeverity::where('id', $bug->bug_severity_id)->value('name');
                if (! isset($bug_severity_id)) {
                    $bug_severity_id = '-';
                }
                $bug_status_id = BugStatus::where('id', $bug->bug_status_id)->value('name');
                if (! isset($bug_status_id)) {
                    $bug_status_id = '-';
                }
                $bug_history = BugTrackerHistory::where('bug_id', $bug->id)->get();
                if (! isset($bug_history)) {
                    $bug_history = '-';
                }

                $bug->bug_type_id        = $bug_type_id;
                $bug->bug_environment_id = $bug_environment_id;
                $bug->assign_to          = $assign_to;
                $bug->updated_by         = $updated_by;
                $bug->bug_severity_id    = $bug_severity_id;
                $bug->bug_status_id      = $bug_status_id;
                $bug->bug_history        = $bug_history;

                return $bug;
            }
        );

        return response()->json(
            [
                'code' => 200,
                'data' => $bugHistory,
            ]
        );
    }

    public function userHistory($id)
    {
        $bugUsers = BugUserHistory::where('bug_id', $id)->orderBy('id', 'desc')->get();
        $bugUsers = $bugUsers->map(
            function ($bug) {
                $bug->new_user        = User::where('id', $bug->new_user)->value('name');
                $bug->old_user        = User::where('id', $bug->old_user)->value('name');
                $bug->updated_by      = User::where('id', $bug->updated_by)->value('name');
                $bug->created_at_date = $bug->created_at;

                return $bug;
            }
        );

        return response()->json(
            [
                'code' => 200,
                'data' => $bugUsers,
            ]
        );
    }

    public function statusHistory($id)
    {
        $bugStatuses = BugStatusHistory::where('bug_id', $id)->orderBy('id', 'desc')->get();

        $bugStatuses = $bugStatuses->map(
            function ($bug) {
                $bug->new_status = BugStatus::where('id', $bug->new_status)->value('name');
                $bug->old_status = BugStatus::where('id', $bug->old_status)->value('name');
                $bug->updated_by = User::where('id', $bug->updated_by)->value('name');

                return $bug;
            }
        );

        return response()->json(
            [
                'code' => 200,
                'data' => $bugStatuses,
            ]
        );
    }

    public function severityHistory($id)
    {
        $bugStatuses = BugSeveritiesHistory::where('bug_id', $id)->orderBy('id', 'desc')->get();

        $bugStatuses = $bugStatuses->map(
            function ($bug) {
                $bug->old_severity_id = BugSeverity::where('id', $bug->old_severity_id)->value('name');
                $bug->assign_to       = User::where('id', $bug->assign_to)->value('name');
                $bug->severity_id     = BugSeverity::where('id', $bug->severity_id)->value('name');
                $bug->updated_by      = User::where('id', $bug->updated_by)->value('name');

                return $bug;
            }
        );

        return response()->json(
            [
                'code' => 200,
                'data' => $bugStatuses,
            ]
        );
    }

    public function changeBugType(Request $request)
    {
        $bugTracker = BugTracker::where('id', $request->id)->first();

        $bugTracker->bug_type_id = $request->bug_type;
        $bugTracker->save();

        $data = [
            'bug_type_id' => $bugTracker->bug_type_id,
            'bug_id'      => $bugTracker->id,
            'updated_by'  => \Auth::user()->id,
        ];

        BugTrackerHistory::create($data);

        return response()->json(
            [
                'code' => 200,
                'data' => $data,
            ]
        );
    }

    public function assignUser(Request $request)
    {
        $bugTracker = BugTracker::where('id', $request->id)->first();
        $record     = [
            'old_user'   => $bugTracker->assign_to,
            'new_user'   => $request->user_id,
            'bug_id'     => $bugTracker->id,
            'updated_by' => \Auth::user()->id,
        ];
        $bugTracker->assign_to = $request->user_id;
        $bugTracker->save();
        $data = [
            'assign_to'  => $bugTracker->assign_to,
            'bug_id'     => $bugTracker->id,
            'updated_by' => \Auth::user()->id,
        ];

        DB::table('tasks')->where('task_bug_ids', $request->id)->update(['assign_to' => $request->user_id]);

        BugTrackerHistory::create($data);
        BugUserHistory::create($record);

        return response()->json(
            [
                'code' => 200,
                'data' => $data,
            ]
        );
    }

    public function assignUserBulk(Request $request)
    {
        $data = [];
        if (count($request->id) > 0) {
            for ($i = 0; $i < count($request->id); $i++) {
                $chosen_bug_id = $request->id[$i];
                $bugTracker    = BugTracker::where('id', $chosen_bug_id)->first();
                $record        = [
                    'old_user'   => $bugTracker->assign_to,
                    'new_user'   => $request->user_id,
                    'bug_id'     => $bugTracker->id,
                    'updated_by' => \Auth::user()->id,
                ];
                $bugTracker->assign_to = $request->user_id;
                $bugTracker->save();

                Task::where('task_bug_ids', $chosen_bug_id)
                    ->update(['assign_to' => $request->user_id]);

                $data = [
                    'assign_to'  => $bugTracker->assign_to,
                    'bug_id'     => $bugTracker->id,
                    'updated_by' => \Auth::user()->id,
                ];
                BugTrackerHistory::create($data);
                BugUserHistory::create($record);
            }
        }

        return response()->json(
            [
                'code' => 200,
                'data' => $data,
            ]
        );
    }

    public function severityUser(Request $request)
    {
        $bugTracker                  = BugTracker::where('id', $request->id)->first();
        $old_severity_id             = $bugTracker->bug_severity_id;
        $bugTracker->bug_severity_id = $request->severity_id;
        if ($request->status_id == 8) {
            $created_by            = $bugTracker->created_by;
            $bugTracker->assign_to = $created_by;
        }

        $bugTracker->save();
        $data = [
            'bug_severity_id' => $bugTracker->bug_severity_id,
            'bug_id'          => $bugTracker->id,
            'updated_by'      => \Auth::user()->id,
        ];
        BugTrackerHistory::create($data);

        $record = [
            'assign_to'       => $bugTracker->assign_to,
            'old_severity_id' => $old_severity_id,
            'severity_id'     => $request->severity_id,
            'bug_id'          => $bugTracker->id,
            'updated_by'      => \Auth::user()->id,
        ];
        BugSeveritiesHistory::create($record);

        return response()->json(
            [
                'code' => 200,
                'data' => $data,
            ]
        );
    }

    public function severityUserBulk(Request $request)
    {
        if (count($request->id) > 0) {
            for ($i = 0; $i < count($request->id); $i++) {
                $chosen_bug_id               = $request->id[$i];
                $bugTracker                  = BugTracker::where('id', $chosen_bug_id)->first();
                $old_severity_id             = $bugTracker->bug_severity_id;
                $bugTracker->bug_severity_id = $request->severity_id;
                if ($request->status_id == 8) {
                    $created_by            = $bugTracker->created_by;
                    $bugTracker->assign_to = $created_by;
                }

                $bugTracker->save();
                $data = [
                    'bug_severity_id' => $bugTracker->bug_severity_id,
                    'bug_id'          => $bugTracker->id,
                    'updated_by'      => \Auth::user()->id,
                ];
                BugTrackerHistory::create($data);

                $record = [
                    'assign_to'       => $bugTracker->assign_to,
                    'old_severity_id' => $old_severity_id,
                    'severity_id'     => $request->severity_id,
                    'bug_id'          => $bugTracker->id,
                    'updated_by'      => \Auth::user()->id,
                ];
                BugSeveritiesHistory::create($record);
            }
        }

        return response()->json(
            [
                'code' => 200,
                'data' => $data,
            ]
        );
    }

    public function statusUser(Request $request)
    {
        $bugTracker = BugTracker::where('id', $request->id)->first();
        $record     = [
            'old_status' => $bugTracker->bug_status_id,
            'new_status' => $request->status_id,
            'bug_id'     => $bugTracker->id,
            'updated_by' => \Auth::user()->id,
        ];
        if ($request->status_id == 7) {
            $prev_created_by       = $bugTracker->created_by;
            $bugTracker->assign_to = $prev_created_by;
        }

        $bugTracker->bug_status_id = $request->status_id;
        $bugTracker->save();

        if ($request->status_id == 3 || $request->status_id == 7) {
            $Task = Task::where('task_bug_ids', $request->id)->first();
            if (count((array) $Task) > 0) {
                if ($request->status_id == 3) {
                    $Task->status = 22;
                } elseif ($request->status_id == 7) {
                    $Task->status = 15;
                }
                $Task->save();
            }
        }

        $data = [
            'bug_status_id' => $bugTracker->bug_status_id,
            'bug_id'        => $bugTracker->id,
            'updated_by'    => \Auth::user()->id,
        ];
        BugTrackerHistory::create($data);
        BugStatusHistory::create($record);

        return response()->json(
            [
                'code' => 200,
                'data' => $data,
            ]
        );
    }

    public function statusUserBulk(Request $request)
    {
        if (count($request->id) > 0) {
            for ($i = 0; $i < count($request->id); $i++) {
                $chosen_bug_id = $request->id[$i];
                $bugTracker    = BugTracker::where('id', $chosen_bug_id)->first();
                $record        = [
                    'old_status' => $bugTracker->bug_status_id,
                    'new_status' => $request->status_id,
                    'bug_id'     => $bugTracker->id,
                    'updated_by' => \Auth::user()->id,
                ];
                if ($request->status_id == 7) {
                    $prev_created_by       = $bugTracker->created_by;
                    $bugTracker->assign_to = $prev_created_by;
                }

                $bugTracker->bug_status_id = $request->status_id;
                $bugTracker->save();

                if ($request->status_id == 3 || $request->status_id == 7) {
                    $Task = Task::where('task_bug_ids', $chosen_bug_id)->first();
                    if (count((array) $Task) > 0) {
                        if ($request->status_id == 3) {
                            $Task->status = 22;
                        } elseif ($request->status_id == 7) {
                            $Task->status = 15;
                        }
                        $Task->save();
                    }
                }

                $data = [
                    'bug_status_id' => $bugTracker->bug_status_id,
                    'bug_id'        => $bugTracker->id,
                    'updated_by'    => \Auth::user()->id,
                ];
                BugTrackerHistory::create($data);
                BugStatusHistory::create($record);
            }
        }

        return response()->json(
            [
                'code' => 200,
                'data' => $data,
            ]
        );
    }

    public function sendMessage(Request $request)
    {
        $id   = $request->id;
        $user = Auth::user();
        $task = BugTracker::find($request->id);

        $taskdata = $request->message;

        $userid = Auth::id();

        if ($user) {
            $params = ChatMessage::create(
                [
                    'user_id'         => $userid,
                    'erp_user'        => $userid,
                    'bug_id'          => $task->id,
                    'sent_to_user_id' => ($task->assign_to != $user->id) ? $task->assign_to : $task->created_by,
                    'sent_to_user_id' => ($task->assign_to != $user->id) ? $task->assign_to : $task->created_by,
                    'approved'        => '1',
                    'status'          => '2',
                    'message'         => $taskdata,
                ]
            );

            if ($params) {
                return response()->json(
                    [
                        'code'    => 200,
                        'message' => 'Successfully Send File',
                    ]
                );
            }

            return response()->json(
                [
                    'message' => 'Something Was Wrong',
                ], 500
            );

            return response()->json(['message' => 'Sorry required fields is missing like id , userid'], 500);
        }
    }

    public function communicationData($id)
    {
        $messages = ChatMessage::where('bug_id', $id)->orderBy('id', 'desc')->get();
        $messages = $messages->map(
            function ($message) {
                $message->user_name = 'From ' . User::where('id', $message->user_id)->value('name') . ' to ' . User::where('id', $message->send_to_user_id)->value('name') . ' ' . \Carbon\Carbon::parse($message->created_at)->format('Y-m-d H:i A');

                return $message;
            }
        );

        return response()->json(
            [
                'code' => 200,
                'data' => $messages,
            ]
        );
    }

    public function checkbug(Request $request)
    {
        $bug_type_id = $request->bug_type_id;
        $bug_id      = $request->bug_id;
        $module_id   = $request->module_id;
        $website_id  = $request->website_id;
        $bug_tracker = \DB::table('tasks')->select('*')->whereRaw("find_in_set($bug_id,task_bug_ids)")->get();

        return response()->json(
            [
                'code' => 200,
                'data' => count($bug_tracker),
            ]
        );
    }

    public function getWebsiteList(Request $request)
    {
        $bug_type_id = $request->bug_type_id;
        $module_id   = $request->module_id;
        $website_id  = $request->website_id;
        $bug_tracker = BugTracker::where('bug_type_id', $bug_type_id)->where('module_id', $module_id)->whereIn(
            'bug_status_id', [
                '1',
                '2',
            ]
        )->get();
        $bug_list          = $bug_tracker->toArray();
        $bug_tracker_users = BugTracker::select('assign_to')->where('bug_type_id', $bug_type_id)->where('module_id', $module_id)->where('website', $website_id)->whereIn(
            'bug_status_id', [
                '3',
                '4',
                '5',
                '7',
                '8',
                '9',
                '10',
            ]
        )->groupBy('assign_to')->orderBy('id', 'desc')->limit(3)->get();

        $users_worked_array = [];
        if (count($bug_tracker_users) > 0) {
            for ($k = 0; $k < count($bug_tracker_users); $k++) {
                $users_worked_array[] = $bug_tracker_users[$k]->userassign->name;
            }
        }

        $bug_ids     = [];
        $website_ids = [];

        $bugs_html = '<table cellpadding="2" cellspacing="2" border="1" style="width:100%;font-size: 12px;"><tr><td style="text-align:center"><b>Action</b></td><td  style="text-align:center"><b>Bug Id</b></td  style="text-align:center"><td  style="text-align:center;"><b>Summary</b></td><td  style="text-align:center;"><b>Steps to Rep.</b></td><td  style="text-align:center;"><b>Screen / Video</b></td><td  style="text-align:center;"><b>Assign To</b></td><td  style="text-align:center;"><b>Module</b></td><td  style="text-align:center;"><b>Website</b></td></tr>';

        if (count($bug_list) > 0) {
            for ($i = 0; $i < count($bug_list); $i++) {
                $bug_ids[]     = $bug_list[$i]['id'];
                $website_ids[] = $bug_list[$i]['website'];
                $bug_id        = $bug_list[$i]['id'];
                $assign_to     = $bug_list[$i]['assign_to'];

                $summary     = Str::limit($bug_list[$i]['summary'], 20, '..');
                $summary_txt = str_replace("'", '', $bug_list[$i]['summary']);

                $module_id     = Str::limit($bug_list[$i]['module_id'], 20, '..');
                $module_id_txt = str_replace("'", '', $bug_list[$i]['module_id']);
                $module_id_txt = htmlentities($module_id_txt);

                $step_to_reproduce     = Str::limit($bug_list[$i]['step_to_reproduce'], 20, '..');
                $step_to_reproduce_txt = htmlentities($bug_list[$i]['step_to_reproduce']);
                $url                   = Str::limit($bug_list[$i]['url'], 15, '..');
                $userData              = User::where('id', $assign_to)->get()->toArray();
                $website               = StoreWebsite::where('id', $bug_list[$i]['website'])->value('title');

                $name = '-';
                if (count($userData) > 0 && isset($userData[0]['name'])) {
                    $name = $userData[0]['name'];
                }

                $bugs_html .= '<tr><td  style="text-align:center"><input style="height:13px;" type="checkbox" class="cls-checkbox-bugsids" name="chkBugId[]" value="' . $bug_id . '" id="name="chkBugId' . $bug_id . '" data-summary="' . htmlentities($summary_txt) . '"  /></td><td  style="text-align:center">' . $bug_id . '</td><td title="' . $summary_txt . '" data-toggle="tooltip">&nbsp;' . $summary . '</td><td title="' . $step_to_reproduce_txt . '" data-toggle="tooltip">&nbsp;' . $step_to_reproduce . '</td><td>&nbsp;' . $url . ' <button type="button" class="btn btn-copy-url btn-sm" data-id="' . $bug_list[$i]['url'] . '">
                <i class="fa fa-clone" aria-hidden="true"></i></button></td><td>&nbsp;' . $name . '</td><td  title="' . $module_id_txt . '" data-toggle="tooltip">&nbsp;' . $module_id . '</td><td  title="' . $website . '" data-toggle="tooltip">&nbsp;' . $website . '</td></tr>';
            }
        }

        $bugs_html .= '</table>';

        $website_ids_val = implode(',', $website_ids);

        $websiteData = StoreWebsite::whereIn('id', $website_ids)->get();

        $websiteCheckbox = '';
        foreach ($websiteData as $website) {
            $websiteCheckbox .= '<div class="col-4 py-1"><div style="float: left;height: auto;margin-right: 6px;"><input style="height:13px;" type="checkbox" name="website_name[' . $website->id . ']" value="' . $website->title . ' - ' . $request->cat_title . '"/></div> <div class=""  style="float: left;height: auto;margin-right: 6px;overflow-wrap: anywhere;width: 80%;">' . $website->website . '</div></div>';
        }

        $data['websiteCheckbox'] = $websiteCheckbox;
        $data['bug_ids']         = implode(',', $bug_ids);
        $data['bug_html']        = $bugs_html;

        $bugs_users_last = '-';
        if (count($users_worked_array) > 0) {
            $bugs_users_last = implode(', ', $users_worked_array);
        }
        $data['bug_users_worked'] = $bugs_users_last;

        return response()->json(
            [
                'code'    => 200,
                'data'    => $data,
                'message' => 'List of website!',
            ]
        );
    }

    public function taskCount($bug_id)
    {
        $model_site_development = SiteDevelopment::where('bug_id', $bug_id)->get()->toArray();

        $site_developement_id = 0;
        if (count($model_site_development) > 0) {
            $site_developement_id = $model_site_development[0]['id'];
        }

        $taskStatistics['Devtask'] = DeveloperTask::where('site_developement_id', $site_developement_id)->where('status', '!=', 'Done')->select();

        $query          = DeveloperTask::join('users', 'users.id', 'developer_tasks.assigned_to')->where('site_developement_id', $site_developement_id)->where('status', '!=', 'Done')->select('developer_tasks.id', 'developer_tasks.task as subject', 'developer_tasks.status', 'users.name as assigned_to_name');
        $query          = $query->addSelect(DB::raw("'Devtask' as task_type,'developer_task' as message_type"));
        $taskStatistics = $query->get();
        $othertask      = Task::where('site_developement_id', $site_developement_id)->whereNull('is_completed')->select();
        $query1         = Task::join('users', 'users.id', 'tasks.assign_to')->where(function ($qry) use ($site_developement_id, $bug_id) {
            if ($site_developement_id != null && $site_developement_id != '' && $site_developement_id != 0) {
                if ($bug_id != null && $bug_id != '') {
                    $qry->whereRaw('FIND_IN_SET(?,task_bug_ids)', $bug_id)->orwhere('site_developement_id', $site_developement_id);
                } else {
                    $qry->where('site_developement_id', $site_developement_id);
                }
            } elseif ($bug_id != null && $bug_id != '') {
                $qry->whereRaw('FIND_IN_SET(?,task_bug_ids)', $bug_id);
            } else {
                $qry->where('site_developement_id', $site_developement_id);
            }
        })->whereNull('is_completed')->select('tasks.id', 'tasks.task_subject as subject', 'tasks.assign_status', 'users.name as assigned_to_name');
        $query1              = $query1->addSelect(DB::raw("'Othertask' as task_type,'task' as message_type"));
        $othertaskStatistics = $query1->get();
        $merged              = $othertaskStatistics->merge($taskStatistics);

        return response()->json(
            [
                'code'           => 200,
                'taskStatistics' => $merged,
            ]
        );
    }

    public function website(Request $request)
    {
        $title = 'Bug Tracking Summary';

        $bug_tracker = DB::select(DB::raw("SELECT bug_trackers.website as website_id, store_websites.website as website, store_websites.title as title, count(bug_trackers.id) as bug_count, GROUP_CONCAT(concat(bug_trackers.id,'-',bug_trackers.bug_severity_id)) as bug_ids, GROUP_CONCAT(concat(bug_trackers.id,'-',bug_trackers.bug_status_id)) as bug_status_ids  FROM bug_trackers left join store_websites on bug_trackers.website = store_websites.id where bug_trackers.website>0  group by bug_trackers.website"));

        $arr = json_decode(json_encode($bug_tracker), true);

        if (count($arr) > 0) {
            for ($i = 0; $i < count($arr); $i++) {
                $bug_ids        = $arr[$i]['bug_ids'];
                $bug_ids_arrays = explode(',', $bug_ids);

                $bug_check_status_ids    = $arr[$i]['bug_status_ids'];
                $bug_check_status_arrays = explode(',', $bug_check_status_ids);

                $critical_array = [];
                $high_array     = [];
                $medium_array   = [];
                $low_array      = [];

                if (count($bug_ids_arrays) > 0) {
                    for ($j = 0; $j < count($bug_ids_arrays); $j++) {
                        $single_bug_array = explode('-', $bug_ids_arrays[$j]);

                        $single_bug_status_array = explode('-', $bug_check_status_arrays[$j]);

                        if (count($single_bug_array) == 2 && $single_bug_status_array[1] != '3') {
                            if ($single_bug_array[1] == '1') {
                                $critical_array[] = $single_bug_array[0];
                            } elseif ($single_bug_array[1] == '2') {
                                $high_array[] = $single_bug_array[0];
                            } elseif ($single_bug_array[1] == '3') {
                                $medium_array[] = $single_bug_array[0];
                            } elseif ($single_bug_array[1] == '4') {
                                $low_array[] = $single_bug_array[0];
                            }
                        }
                    }
                }

                $arr[$i]['critical'] = count($critical_array);
                $arr[$i]['high']     = count($high_array);
                $arr[$i]['medium']   = count($medium_array);
                $arr[$i]['low']      = count($low_array);

                // Status of bug ids starts

                $bug_status_ids        = $arr[$i]['bug_status_ids'];
                $bug_status_ids_arrays = explode(',', $bug_status_ids);

                $new_status_array             = [];
                $open_status_array            = [];
                $close_status_array           = [];
                $intest_status_array          = [];
                $bug_status_array             = [];
                $inprogress_status_array      = [];
                $completed_status_array       = [];
                $discussing_status_array      = [];
                $deployed_status_array        = [];
                $discusswithlead_status_array = [];
                $unresolved_status_array      = [];

                $arr[$i]['bug_ids'];

                if (count($bug_status_ids_arrays) > 0) {
                    for ($j = 0; $j < count($bug_status_ids_arrays); $j++) {
                        $single_bug_array = explode('-', $bug_status_ids_arrays[$j]);

                        if (count($single_bug_array) == 2) {
                            if ($single_bug_array[1] == '1') {
                                $new_status_array[] = $single_bug_array[0];
                            } elseif ($single_bug_array[1] == '2') {
                                $open_status_array[] = $single_bug_array[0];
                            } elseif ($single_bug_array[1] == '3') {
                                $close_status_array[] = $single_bug_array[0];
                            } elseif ($single_bug_array[1] == '4') {
                                $intest_status_array[] = $single_bug_array[0];
                            } elseif ($single_bug_array[1] == '5') {
                                $bug_status_array[] = $single_bug_array[0];
                            } elseif ($single_bug_array[1] == '6' || $single_bug_array[1] == '11') {
                                $inprogress_status_array[] = $single_bug_array[0];
                            } elseif ($single_bug_array[1] == '7') {
                                $completed_status_array[] = $single_bug_array[0];
                            } elseif ($single_bug_array[1] == '8') {
                                $discussing_status_array[] = $single_bug_array[0];
                            } elseif ($single_bug_array[1] == '9') {
                                $deployed_status_array[] = $single_bug_array[0];
                            } elseif ($single_bug_array[1] == '10') {
                                $discusswithlead_status_array[] = $single_bug_array[0];
                            } elseif ($single_bug_array[1] == '12') {
                                $unresolved_status_array[] = $single_bug_array[0];
                            }
                        }
                    }
                }

                $arr_status[$i]['new']             = count($new_status_array);
                $arr_status[$i]['open']            = count($open_status_array);
                $arr_status[$i]['close']           = count($close_status_array);
                $arr_status[$i]['intest']          = count($intest_status_array);
                $arr_status[$i]['bug']             = count($bug_status_array);
                $arr_status[$i]['inprogress']      = count($inprogress_status_array);
                $arr_status[$i]['completed']       = count($completed_status_array);
                $arr_status[$i]['discussing']      = count($discussing_status_array);
                $arr_status[$i]['deployed']        = count($deployed_status_array);
                $arr_status[$i]['discusswithlead'] = count($discusswithlead_status_array);
                $arr_status[$i]['unresolved']      = count($unresolved_status_array);

                // Status of bug ids ends
            }
        }

        return view(
            'bug-tracking.website', [
                'title'              => $title,
                'bug_tracker'        => $arr,
                'bug_status_tracker' => $arr_status,

            ]
        );
    }

    public function websiteHistory(Request $request)
    {
        $serverity_id = 0;
        $bug_id       = 0;
        $statusid     = 0;
        if ($request->servid) {
            $serverity_id = $request->servid;
        }
        if ($request->statusid) {
            $statusid = $request->statusid;
        }
        if ($request->type == 'severity') {
            $type = 'severity';
        } else {
            $type = 'status';
        }
        if ($request->id) {
            $bug_id = $request->id;
        }

        if ($type == 'severity') {
            $bugTracker = BugTracker::where('website', $bug_id)->where('bug_severity_id', $serverity_id)->where('bug_status_id', '!=', 3)->orderBy('id', 'desc')->get();
        } else {
            $bugTracker = BugTracker::where('website', $bug_id)->where('bug_status_id', $statusid)->orderBy('id', 'desc')->get();
        }

        $bugTracker = $bugTracker->map(
            function ($bug) {
                $bug->bug_type_id     = BugType::where('id', $bug->bug_type_id)->value('name');
                $bug->created_at_date = \Carbon\Carbon::parse($bug->created_at)->format('d-m-Y');
                $bug->summary_short   = Str::limit($bug->summary, 40, '..');
                $bug->bug_status_id   = BugStatus::where('id', $bug->bug_status_id)->value('name');
                $bug->assign_to       = User::where('id', $bug->assign_to)->value('name');
                $bug->bug_severity_id = BugSeverity::where('id', $bug->bug_severity_id)->value('name');

                return $bug;
            }
        );

        return response()->json(
            [
                'code' => 200,
                'data' => $bugTracker,
            ]
        );
    }

    public function changeModuleType(Request $request)
    {
        $bugTracker = BugTracker::where('id', $request->id)->first();

        $bugTracker->module_id = $request->module_id;
        $bugTracker->save();

        $data = [
            'module_id'  => $bugTracker->module_id,
            'bug_id'     => $bugTracker->id,
            'updated_by' => \Auth::user()->id,
        ];

        BugTrackerHistory::create($data);

        return response()->json(
            [
                'code' => 200,
                'data' => $data,
            ]
        );
    }

    /**
     * Upload a bug file to google drive
     */
    public function uploadFile(Request $request)
    {
        $request->validate([
            'file'               => 'required',
            'file_creation_date' => 'required',
            'remarks'            => 'sometimes',
            'bug_id'             => 'required',
            'file_read'          => 'sometimes',
            'file_write'         => 'sometimes',
        ]);

        $data = $request->all();
        try {
            foreach ($data['file'] as $file) {
                DB::transaction(function () use ($file, $data) {
                    $googleScreencast            = new GoogleScreencast();
                    $googleScreencast->file_name = $file->getClientOriginalName();
                    $googleScreencast->extension = $file->extension();
                    $googleScreencast->user_id   = Auth::id();

                    $googleScreencast->read               = '';
                    $googleScreencast->write              = '';
                    $googleScreencast->bug_id             = $data['bug_id'];
                    $googleScreencast->remarks            = $data['remarks'];
                    $googleScreencast->file_creation_date = $data['file_creation_date'];
                    $googleScreencast->save();
                    UploadGoogleDriveScreencast::dispatchNow($googleScreencast, $file, 'anyone');
                });
            }

            return back()->with('success', 'File is Uploaded to Google Drive.');
        } catch (Exception $e) {
            return back()->with('error', 'Something went wrong. Please try again');
        }
    }

    /**
     * get the list of bugs file
     */
    public function getBugFilesList(Request $request)
    {
        try {
            $result = [];
            if (isset($request->bug_id)) {
                $result = GoogleScreencast::where('bug_id', $request->bug_id)->orderBy('id', 'desc')->get();
                if (isset($result) && count($result) > 0) {
                    $result = $result->toArray();
                }

                return response()->json([
                    'data' => view('bug-tracking.google-drive-list', compact('result'))->render(),
                ]);
            }
        } catch (Exception $e) {
            return response()->json([
                'data' => view('bug-tracking.google-drive-list', ['result' => null])->render(),
            ]);
        }
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/CategoryController.php 
Content: <?php

namespace App\Http\Controllers;

use App\Brand;
use App\Setting;
use App\Category;
use App\CategorySegment;
use App\Jobs\CreateHashTags;
use Illuminate\Http\Request;
use App\KeywordSearchVariants;
use App\BrandCategoryPriceRange;
use App\ScrappedCategoryMapping;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\DB;
use Illuminate\Pagination\Paginator;
use App\CategoryCancellationPolicyLog;
use Illuminate\Support\Facades\Artisan;
use Illuminate\Pagination\LengthAwarePaginator;

class CategoryController extends Controller
{
    /**
     * Show the application dashboard.
     *
     * @return \Illuminate\Http\Response
     */
    public function manageCategory(Request $request)
    {
        $category_segments = CategorySegment::where('status', 1)->get()->pluck('name', 'id');

        $allCategories = Category::all();

        $selected_value = $request->filter;

        if (isset($request->filter)) {
            $categories = Category::with([
                'childsOrderByTitle' => function ($query) {
                    $query->with([
                        'childsOrderByTitle' => function ($query) {
                            $query->with([
                                'childsOrderByTitle' => function ($query) {
                                    $query->with('childsOrderByTitle'); // Add more levels as needed
                                },
                            ]);
                        },
                    ]);
                },
            ])->where('title', 'like', '%' . $request->filter . '%')->paginate(1);
            $final_cat = [];

            foreach ($categories as $key => $cat) {
                if ($cat->parentM) {
                    if ($cat->parentM->parentM) {
                        if ($cat->parentM->parentM->parentM) {
                            $final_cat[$cat->parentM->parentM->parentM->id] = $cat->parentM->parentM->parentM;
                        } else {
                            $final_cat[$cat->parentM->parentM->id] = $cat->parentM->parentM;
                        }
                    } else {
                        $final_cat[$cat->parentM->id] = $cat->parentM;
                    }
                } else {
                    $final_cat[$cat->id] = $cat;
                }
            }
            $categories = $final_cat;
        } else {
            $categories = Category::with([
                'childsOrderByTitle' => function ($query) {
                    $query->with([
                        'childsOrderByTitle' => function ($query) {
                            $query->with([
                                'childsOrderByTitle' => function ($query) {
                                    $query->with('childsOrderByTitle'); // Add more levels as needed
                                },
                            ]);
                        },
                    ]);
                },
            ])
                ->where('parent_id', 0)
                ->orderBy('title')
                ->paginate(1);
        }

        $old = $request->old('parent_id');

        $allCategoriesDropdown = Category::attr(['name' => 'parent_id', 'class' => 'form-control'])
            ->selected()
            ->renderAsDropdown();

        $allCategoriesDropdownEdit = Category::attr(['name' => 'edit_cat', 'class' => 'form-control'])
            ->selected($old ? $old : 1)
            ->renderAsDropdown();

        return view('category.treeview', compact('category_segments', 'categories', 'allCategories', 'allCategoriesDropdown', 'allCategoriesDropdownEdit', 'selected_value'))->with('i', (request()->input('page', 1) - 1) * 20);
    }

    public function logCategory(Request $request)
    {
        $result          = \App\LogRequest::where('api_name', 'catalogCategoryCreate');
        $logRequest      = $result->orderBy('created_at', 'DESC')->paginate(Setting::get('pagination'));
        $logRequestCount = \App\LogRequest::where('api_name', 'catalogCategoryCreate')->count();

        return view('category.log', compact('logRequest', 'logRequestCount'));
    }

    public function pushCategoryInLive()
    {
        // Run the Artisan command
        Artisan::call('store-website:push-category-in-live');

        // You can return a response if needed
        return response()->json(['message' => 'Command executed successfully']);
    }

    public function manageCategory11(Request $request)
    {
        $category_segments = CategorySegment::where('status', 1)->get()->pluck('name', 'id');
        $categories        = Category::where('parent_id', '=', 0)->withCount('childs')->get();
        $allCategories     = Category::pluck('title', 'id')->all();

        $old = $request->old('parent_id');

        $allCategoriesDropdown = Category::attr(['name' => 'parent_id', 'class' => 'form-control'])
            ->selected($old ? $old : 1)
            ->renderAsDropdown();

        $allCategoriesDropdownEdit = Category::attr(['name' => 'edit_cat', 'class' => 'form-control'])
            ->selected($old ? $old : 1)
            ->renderAsDropdown();

        return view('category.treeview-11', compact('category_segments', 'categories', 'allCategories', 'allCategoriesDropdown', 'allCategoriesDropdownEdit'));
    }

    /**
     * Show the application dashboard.
     *
     * @return \Illuminate\Http\Response
     */
    public function addCategory(Request $request)
    {
        $this->validate($request, [
            'title'       => 'required',
            'magento_id'  => 'required|numeric',
            'show_all_id' => 'numeric|nullable',
        ]);
        $input              = $request->all();
        $input['parent_id'] = empty($input['parent_id']) ? 0 : $input['parent_id'];

        Category::create($input);

        $this->generateHashTagKeywords();

        return back()->with('success', 'New Category added successfully.');
    }

    public function generateHashTagKeywords()
    {
        $brandList       = Brand::getAll();
        $keywordVariants = KeywordSearchVariants::list();

        /* Initialize queue for add hashtags */
        $categoryList = Category::where('is_hashtag_generated', 0)->pluck('title', 'id')->chunk(1000)->toArray();

        foreach ($categoryList as $chunk) {
            CreateHashTags::dispatch(['data' => $chunk, 'user_id' => \Auth::user()->id, 'brand_list' => $brandList, 'keyword_variants' => $keywordVariants, 'type' => 'category'])->onQueue('generategooglescraperkeywords');
        }
    }

    public function edit(Category $category, Request $request)
    {
        $data                        = [];
        $data['id']                  = $category->id;
        $data['title']               = $category->title;
        $data['magento_id']          = $category->magento_id;
        $data['show_all_id']         = $category->show_all_id;
        $data['category_segment_id'] = $category->category_segment_id;
        $data['category_segments']   = CategorySegment::where('status', 1)->get()->pluck('name', 'id');

        if ($request->method() === 'POST') {
            $this->validate($request, [
                'title'       => 'required',
                'magento_id'  => 'required|numeric',
                'show_all_id' => 'numeric|nullable',
            ]);

            $category->title       = $request->input('title');
            $category->magento_id  = $request->input('magento_id');
            $category->show_all_id = $request->input('show_all_id');
            if ($request->has('category_segment_id')) {
                $category->category_segment_id = $request->category_segment_id;
            }
            $category->save();

            return redirect()->route('category')
                ->with('success-remove', 'Category updated successfully');
        }

        return view('category.edit', $data);
    }

    public function remove(Request $request)
    {
        $category_instance = new Category();
        $category          = $category_instance->find($request->input('edit_cat'));

        if ($request->ajax()) {
            if (Category::isParent($category->id)) {
                return response()->json(['error-remove' => 'Can\'t delete Parent category. Please delete all the childs first']);
            }

            if (Category::hasProducts($category->id)) {
                return response()->json(['error-remove' => 'Can\'t delete category is associated with products. Please remove all the association first']);
            }

            if ($category->id == 1) {
                return response()->json(['error-remove' => 'Can\'t be delete']);
            }

            $title = $category->title;
            $category->delete();

            return response()->json(['success-remove' => $title . 'category Deleted']);
        }

        if (Category::isParent($category->id)) {
            return back()->with('error-remove', 'Can\'t delete Parent category. Please delete all the childs first');
        }

        if (Category::hasProducts($category->id)) {
            return back()->with('error-remove', 'Can\'t delete category is associated with products. Please remove all the association first');
        }

        if ($category->id == 1) {
            return back()->with('error-remove', 'Can\'t be delete');
        }

        $title = $category->title;
        $category->delete();

        return back()->with('success-remove', $title . 'Category Deleted');
    }

    public static function getCategoryTree($id)
    {
        $category          = new Category();
        $category_instance = $category->find($id);
        $categoryTree      = [];

        if ($category_instance == null) {
            return false;
        }

        $parent_id = $category_instance->parent_id;

        $categoryTree[] = $category_instance->title;

        while ($parent_id != 0) {
            $category_instance = $category->find($parent_id);
            $categoryTree[]    = $category_instance->title;
            $parent_id         = $category_instance->parent_id;
        }

        return array_reverse($categoryTree);
    }

    public static function brandMinMaxPricing()
    {
        // Get all data
        $results = \Illuminate\Support\Facades\DB::select('
            SELECT
                categories.title,
                categories.id as cat_id,
                ct.title as parent_name,
                ct.id as parent_id,
                MIN(price*1) AS minimumPrice,
                MAX(price*1) AS maximumPrice
            FROM
                products
            JOIN
                categories
            ON
                products.category=categories.id
            LEFT JOIN
                categories as ct
            ON
                categories.parent_id=ct.id    
            GROUP BY
                products.category
            ORDER BY
                categories.title
        ');

        // Get all form data
        $resultsBrandCategoryPriceRange = BrandCategoryPriceRange::all();

        // Create array with brand segments
        $brandSegments = ['A', 'B', 'C'];

        // Create empty array
        $formResults = [];

        // Loop over results
        foreach ($resultsBrandCategoryPriceRange as $result) {
            $formResults[$result->brand_segment][$result->category_id]['min'] = $result->min_price;
            $formResults[$result->brand_segment][$result->category_id]['max'] = $result->max_price;
        }

        return view('category.minmaxpricing', compact('results', 'brandSegments', 'formResults'));
    }

    public static function updateBrandMinMaxPricing(Request $request)
    {
        // Check minimum price first
        if ($request->ajax() && $request->type == 'min' && (int) $request->price > 0) {
            return BrandCategoryPriceRange::updateOrCreate(
                ['brand_segment' => $request->brand_segment, 'category_id' => $request->category_id],
                ['min_price' => $request->price]
            );
        }

        // Check minimum price first
        if ($request->ajax() && $request->type == 'max' && (int) $request->price > 0) {
            return BrandCategoryPriceRange::updateOrCreate(
                ['brand_segment' => $request->brand_segment, 'category_id' => $request->category_id],
                ['max_price' => $request->price]
            );
        }
    }

    public static function getCategoryTreeMagentoIds($id)
    {
        $category          = new Category();
        $category_instance = $category->find($id);
        $categoryTree      = [];

        $categoryTree[] = $category_instance->magento_id;
        $parent_id      = $category_instance->parent_id;

        while ($parent_id != 0) {
            $category_instance = $category->find($parent_id);
            $categoryTree[]    = $category_instance->magento_id;

            if (! empty($category_instance->show_all_id)) {
                $categoryTree[] = $category_instance->show_all_id;
            }

            $parent_id = $category_instance->parent_id;
        }

        return array_reverse($categoryTree);
    }

    public static function getCategoryIdByName($term)
    {
        $category = Category::where('title', '=', $term)->first();

        return $category ? $category->id : 0;
    }

    public function mapCategory()
    {
        $fillerCategories = Category::where('id', '>', 1)->where('parent_id', 0)->whereIn('id', [143, 144])->get();

        $categories = Category::where('id', '>', 1)->where('parent_id', 0)->whereNotIn('id', [143, 144])->get();

        $allStatus = ['' => 'N/A'] + \App\Helpers\StatusHelper::getStatus();

        $allCategoriesDropdown = Category::attr(['name' => 'new_cat_id', 'class' => 'form-control new-category-update', 'style' => 'width:100%'])->renderAsDropdown();

        return view('category.references', compact('fillerCategories', 'categories', 'allStatus', 'allCategoriesDropdown'));
    }

    public function saveReferences(Request $request)
    {
        $categories = $request->get('category');
        $info       = $request->get('info');

        if (! empty($info)) {
            foreach ($info as $catId => $reference) {
                [$catId, $reference]  = explode('#', $reference);
                $catId                = str_replace('cat_', '', $catId);
                $category             = Category::find($catId);
                $category->references = $reference;
                $category->save();
            }
        } else {
            foreach ($categories as $catId => $reference) {
                $catId                = str_replace('cat_', '', $catId);
                $category             = Category::find($catId);
                $category->references = implode(',', $reference);
                $category->save();
            }
        }

        return response()->json(['code' => 200]);

        return redirect()->back()->with('message', 'Category updated successfully!');
    }

    public function saveReference(Request $request)
    {
        $oldCatId = $request->get('old_cat_id');
        $newcatId = $request->get('new_cat_id');
        $catName  = strtolower($request->get('cat_name'));

        // assigned new category
        $newCategory = null;
        $oldCategory = null;

        // checking category id
        if (! empty($oldCatId) && ! empty($newcatId)) {
            $oldCategory = Category::find($oldCatId);
            if (! empty($oldCategory)) {
                $catArray = explode(',', $oldCategory->references);
                $catArray = array_map('strtolower', $catArray);

                // check matched array we got
                $findMe = array_search($catName, $catArray);
                if ($findMe !== false) {
                    unset($catArray[$findMe]);
                }

                // update new category
                $oldCategory->references = implode(',', array_unique(array_filter($catArray)));
                $oldCategory->save();
            }
            // update with new category id
            $newCategory = Category::find($newcatId);

            if ($newCategory) {
                $newCatArr               = explode(',', $newCategory->references);
                $newCatArr               = array_map('strtolower', $newCatArr);
                $newCatArr[]             = strtolower($catName);
                $newCategory->references = implode(',', array_unique(array_filter($newCatArr)));
                $newCategory->save();

                // once we have new category id then we need to update all product from that old category
                $products = \App\Product::where('category', $oldCatId)->select(['products.id', 'products.sku'])->get();
                if (! $products->isEmpty()) {
                    foreach ($products as $product) {
                        $scraped_products = $product->many_scraped_products;
                        if (! $scraped_products->isEmpty()) {
                            foreach ($scraped_products as $scraped_product) {
                                if (isset($scraped_product->properties['category'])) {
                                    if (is_array($scraped_product->properties['category'])) {
                                        $namesList = array_map('strtolower', $scraped_product->properties['category']);
                                        if (in_array(strtolower($catName), $namesList)) {
                                            $product->category = $newcatId;
                                            $product->save();
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        return response()->json(['code' => 200, 'data' => $newCategory]);
    }

    public function updateField(Request $request)
    {
        $id    = $request->get('id');
        $field = $request->get('_f');
        $value = $request->get('_v');

        $category = Category::where('id', $id)->first();
        if ($category) {
            $category->{$field} = $value;
            $category->save();

            return response()->json(['code' => 200]);
        }

        return response()->json(['code' => 500]);
    }

    public function saveForm(Request $request)
    {
        $id = $request->id;
        if ($id != null) {
            $category = \App\Category::find($id);
            if (! empty($category)) {
                $findChild = \App\Category::whereNull('simplyduty_code')->where('parent_id', $category->id)->get();
                if (! empty($findChild) && ! $findChild->isEmpty()) {
                    foreach ($findChild as $child) {
                        $child->simplyduty_code = $request->simplyduty_code;
                        $child->save();
                    }
                }
                $category->simplyduty_code = $request->simplyduty_code;
                $category->save();
            }
        }

        return response()->json(['code' => 200, 'message' => 'Success']);
    }

    public function usedProducts(Request $request)
    {
        $q = $request->q;

        if ($q) {
            // check the type and then
            $q        = str_replace('/', ',', $q);
            $products = \App\ScrapedProducts::where('categories', $q)->join('products as p', 'p.id', 'scraped_products.product_id')
                ->where('p.stock', '>', 0)->groupBy('website')
                ->select('scraped_products.*')
                ->orderBy('scraped_products.created_at', 'desc')
                ->get();

            $view = (string) view('compositions.preview-products', compact('products'));

            return response()->json(['code' => 200, 'html' => $view]);
        }

        return response()->json(['code' => 200, 'html' => '']);
    }

    public function affectedProduct(Request $request)
    {
        $old  = $request->old_cat_id;
        $from = $request->cat_name;
        $to   = $request->new_cat_id;

        if (! empty($from)) {
            // check the type and then
            $total = \App\ScrapedProducts::matchedCategory($from)->count();

            return response()->json(['code' => 200, 'total' => $total]);
        }
    }

    public function affectedProductNew(Request $request)
    {
        $old         = $request->old_cat_id;
        $from        = $request->cat_name;
        $to          = $request->new_cat_id;
        $wholeString = $request->wholeString;

        if (! empty($from)) {
            // check the type and then
            $total = \App\ScrapedProducts::matchedCategory($from)->count();

            $view = (string) view('category.partials.affected-products', compact('total', 'old', 'from', 'to', 'wholeString'));

            return response()->json(['code' => 200, 'html' => $view]);
        }
    }

    public function categoryCancellationPolicyLog($categoryId = '', $changeParentId = '', $dayType = '', $dayChange = '', $dayOld = '')
    {
        return CategoryCancellationPolicyLog::create(
            [
                'category_id'      => $categoryId,
                'change_parent_id' => $changeParentId,
                'day_type'         => $dayType,
                'day_change'       => $dayChange,
                'day_old'          => $dayOld,
                'status'           => '1',
            ]
        );
    }

    public function updateCancelationPolicy(Request $request, $id)
    {
        if ($request->days_cancelation) {
            \App\Category::where('id', $id)->update(['days_cancelation' => $request->days_cancelation]);
            $this->categoryCancellationPolicyLog($id, $id, 'days_cancelation', $request->days_cancelation, $request->day_old);
        }

        if ($request->days_refund) {
            $request->input('days_refund');
            \App\Category::where('id', $id)->update(['days_refund' => $request->days_refund]);
            $this->categoryCancellationPolicyLog($id, $id, 'days_refund', $request->days_refund, $request->day_old);
        }

        $sql = "select  id,
                    title,
                    parent_id
            from    (select * from categories
                    order by parent_id, id) categories,
                    (select @pv := '" . $id . "') initialisation
            where   find_in_set(parent_id, @pv) > 0
            and     length(@pv := concat(@pv, ',', id))";
        $results = \DB::select($sql);

        foreach ($results as $result) {
            if ($request->days_cancelation) {
                \App\Category::where('id', $result->id)->update(['days_cancelation' => $request->days_cancelation]);
                $this->categoryCancellationPolicyLog($result->id, $id, 'days_cancelation', $request->days_cancelation, $request->day_old);
            }

            if ($request->days_refund) {
                $request->input('days_refund');
                \App\Category::where('id', $result->id)->update(['days_refund' => $request->days_refund]);
                $this->categoryCancellationPolicyLog($result->id, $id, 'days_refund', $request->days_refund, $request->day_old);
            }
        }

        return response()->json(['success-remove' => 'Days Cancelation ' . $request->days_cancelation . ' updated successfully']);
    }

    public function getCategoryCancellationPolicyLog(Request $request)
    {
        $getCanPol = CategoryCancellationPolicyLog::where(
            [
                ['change_parent_id', '=', $request->category_id],
                ['day_type', '=', $request->day_type],

            ]
        )->get();
        if (! empty($getCanPol)) {
            return response()->json(['code' => 200, 'data' => $getCanPol]);
        } else {
            return response()->json(['code' => 500, 'message' => 'Can not found Log']);
        }
    }

    public function updateCategoryReference(Request $request)
    {
        $loggedUser = $request->user();

        if (! isset($request->wholeString)) {
            $request->merge(['wholeString' => $request->cat_name]);
        }

        $scrappedCategory = ScrappedCategoryMapping::find($request->old_cat_id);
        $selectedCategory = Category::find($request->new_cat_id);

        if ($request->with_product == 'yes') {
            \App\Jobs\UpdateProductCategoryFromErp::dispatch([
                'from'    => $scrappedCategory->cat_name,
                'to'      => $selectedCategory->id,
                'user_id' => $loggedUser->id,
            ])->onQueue('supplier_products');
        }

        \App\UserUpdatedAttributeHistory::create([
            'old_value'      => $scrappedCategory->id,
            'new_value'      => $selectedCategory->id,
            'attribute_name' => 'category',
            'attribute_id'   => $selectedCategory->id,
            'user_id'        => \Auth::user()->id,
        ]);

        \App\UserUpdatedAttributeHistory::create([
            'old_value'      => $scrappedCategory->id,
            'new_value'      => $selectedCategory->id,
            'attribute_name' => 'scraped-category',
            'attribute_id'   => $scrappedCategory->id,
            'user_id'        => \Auth::user()->id,
        ]);

        $scrappedCategory->update([
            'category_id' => $selectedCategory->id,
            'is_skip'     => 1,
        ]);

        return response()->json(['code' => 200, 'message' => 'Your request has been pushed successfully']);
    }

    public function updateMultipleCategoryReference(Request $request)
    {
        $loggedUser = $request->user();

        $selectedCategory = Category::find($request->to);

        foreach ($request->from as $f) {
            $scrappedCategory = json_decode($f);

            \App\Jobs\UpdateProductCategoryFromErp::dispatch([
                'from'    => $scrappedCategory->name,
                'to'      => $selectedCategory->id,
                'user_id' => $loggedUser->id,
            ])->onQueue('supplier_products');

            \App\UserUpdatedAttributeHistory::create([
                'old_value'      => $scrappedCategory->id,
                'new_value'      => $selectedCategory->id,
                'attribute_name' => 'category',
                'attribute_id'   => $selectedCategory->id,
                'user_id'        => $loggedUser->id,
            ]);

            \App\UserUpdatedAttributeHistory::create([
                'old_value'      => $scrappedCategory->id,
                'new_value'      => $selectedCategory->id,
                'attribute_name' => 'scraped-category',
                'attribute_id'   => $scrappedCategory->id,
                'user_id'        => $loggedUser->id,
            ]);

            ScrappedCategoryMapping::where('id', $scrappedCategory->id)->update([
                'category_id' => $selectedCategory->id,
                'is_skip'     => 1,
            ]);
        }

        return response()->json([
            'code'    => 200,
            'message' => 'Your request has been pushed successfully',
        ]);
    }

    public function newCategoryReferenceGroup(Request $request)
    {
        $categoryAll = Category::with('childs.childLevelSencond')
            ->where('title', 'NOT LIKE', '%Unknown Category%')
            ->where('magento_id', '!=', '0')
            ->get();

        $categoryArray = [];
        foreach ($categoryAll as $category) {
            $categoryArray[] = [$category->title];
            $childs          = $category->childs;
            foreach ($childs as $child) {
                $categoryArray[] = [$child->title];
                $grandChilds     = $child->childLevelSencond;
                if ($grandChilds != null) {
                    foreach ($grandChilds as $grandChild) {
                        $categoryArray[] = [$grandChild->title];
                    }
                }
            }
        }

        // Use array_map to extract the first element of each sub-array and convert to lowercase
        $categories = array_map(function ($subArray) {
            return strtolower($subArray[0]);
        }, $categoryArray);

        // Use array_unique to get unique values
        $uniqueCategories = array_unique($categories);

        // Convert unique values back to an array of arrays
        $categoryAll = array_map(function ($category) {
            return [ucwords($category)]; // Convert first letter to uppercase if needed
        }, $uniqueCategories);

        return view('category.new-reference-group', ['categoryAll' => $categoryAll]);
    }

    public function newCategoryReferenceGroupBy(Request $request, $name, $threshold)
    {
        $scrapped_category_mapping = ScrappedCategoryMapping::selectRaw('scrapped_category_mappings.*')
            ->leftJoin('scrapped_product_category_mappings', 'scrapped_category_mappings.id', '=', 'scrapped_product_category_mappings.category_mapping_id')
            ->groupBy('scrapped_category_mappings.id')
            ->groupBy('scrapped_category_mappings.name')
            ->get()->filter(function ($scrapped_category_mapping) use ($name, $threshold) {
                similar_text(strtolower($scrapped_category_mapping->name), strtolower($name), $percentage);

                return $percentage >= $threshold * 100;
            });

        $categoryAll = Category::with('childs.childLevelSencond')
            ->where('title', 'NOT LIKE', '%Unknown Category%')
            ->where('magento_id', '!=', '0')
            ->get();

        $categoryArray = [];
        foreach ($categoryAll as $category) {
            $categoryArray[] = ['id' => $category->id, 'value' => $category->title];
            $childs          = $category->childs;
            foreach ($childs as $child) {
                $categoryArray[] = ['id' => $child->id, 'value' => $category->title . ' > ' . $child->title];
                $grandChilds     = $child->childLevelSencond;
                if ($grandChilds != null) {
                    foreach ($grandChilds as $grandChild) {
                        $categoryArray[] = ['id' => $grandChild->id, 'value' => $category->title . ' > ' . $child->title . ' > ' . $grandChild->title];
                    }
                }
            }
        }

        $unKnownCategory = Category::where('title', 'LIKE', '%Unknown Category%')->first();

        return view('category.new-reference-group-listing', ['categories' => $scrapped_category_mapping, 'categoryAll' => $categoryArray, 'unKnownCategoryId' => $unKnownCategory->id]);
    }

    public function newCategoryReferenceIndex(Request $request)
    {
        $users           = [];
        $unKnownCategory = Category::where('title', 'LIKE', '%Unknown Category%')->first();

        $scrapped_category_mapping = ScrappedCategoryMapping::selectRaw('scrapped_category_mappings.*, COUNT(scrapped_product_category_mappings.category_mapping_id) as total_products')
            ->leftJoin('scrapped_product_category_mappings', 'scrapped_category_mappings.id', '=', 'scrapped_product_category_mappings.category_mapping_id')
            ->groupBy('scrapped_category_mappings.id')
            ->groupBy('scrapped_category_mappings.name')
            ->orderBy('total_products', 'DESC')
            ->orderBy('is_skip', 'ASC');

        if ($request->search) {
            $scrapped_category_mapping->where('name', 'LIKE', '%' . $request->search . '%');
        }

        if (isset($request->is_skipped)) {
            $scrapped_category_mapping->where('is_skip', $request->is_skipped);
        }
        if ($request->user_id != null) {
            $matchedArray = \App\UserUpdatedAttributeHistory::where([
                'attribute_name' => 'scraped-category',
                'user_id'        => $request->user_id,
            ])->pluck('attribute_id');
            $scrapped_category_mapping = $scrapped_category_mapping->whereIn('scrapped_category_mappings.id', $matchedArray);
            $users                     = \App\User::where('id', $request->user_id)->select(['id', 'name'])->first();
        }
        $scrapped_category_mapping = $scrapped_category_mapping->paginate(Setting::get('pagination'));

        $mappingCategory = $scrapped_category_mapping->toArray();

        $mappedProduct = DB::table('scrapped_product_category_mappings')
            ->select('category_mapping_id', 'scrapped_product_category_mappings.product_id', 'scraped_products.website')
            ->leftJoin('scraped_products', 'scraped_products.id', '=', 'scrapped_product_category_mappings.product_id')
            ->whereIn('category_mapping_id', array_column($mappingCategory['data'], 'id'))
            ->get()
            ->toArray();

        $mappedData = [];

        foreach ($mappedProduct as $productM) {
            $mappedData[$productM->category_mapping_id][] = $productM->website;
        }

        foreach ($scrapped_category_mapping as $index => $category) {
            $scrapped_category_mapping[$index]->total_products = isset($mappedData[$category->id]) ? count($mappedData[$category->id]) : 0;
            $scrapped_category_mapping[$index]->all_websites   = isset($mappedData[$category->id]) ? implode('<br>', array_unique($mappedData[$category->id])) : '-';
        }

        $categoryAll = Category::with('childs.childLevelSencond')
            ->where('title', 'NOT LIKE', '%Unknown Category%')
            ->where('magento_id', '!=', '0')
            ->get();

        $categoryArray = [];
        foreach ($categoryAll as $category) {
            $categoryArray[] = ['id' => $category->id, 'value' => $category->title];
            $childs          = $category->childs;
            foreach ($childs as $child) {
                $categoryArray[] = ['id' => $child->id, 'value' => $category->title . ' > ' . $child->title];
                $grandChilds     = $child->childLevelSencond;
                if ($grandChilds != null) {
                    foreach ($grandChilds as $grandChild) {
                        $categoryArray[] = ['id' => $grandChild->id, 'value' => $category->title . ' > ' . $child->title . ' > ' . $grandChild->title];
                    }
                }
            }
        }

        return view('category.new-reference', ['categoryAll' => $categoryArray, 'need_to_skip_status' => true, 'unKnownCategoryId' => $unKnownCategory->id, 'scrapped_category_mapping' => $scrapped_category_mapping, 'users' => $users]);
    }

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     *
     * @param mixed      $items
     * @param mixed      $perPage
     * @param null|mixed $page
     * @param mixed      $options
     */
    public function paginate($items, $perPage = 20, $page = null, $options = [])
    {
        $page = $page ?: (Paginator::resolveCurrentPage() ?: 1);

        $items = $items instanceof Collection ? $items : Collection::make($items);

        $items = $items->sortByDesc('cat_product_count');

        return new LengthAwarePaginator($items->forPage($page, $perPage), $items->count(), $perPage, $page, $options);
    }

    public function history(Request $request, $id)
    {
        $type    = $request->get('type', 'category');
        $records = \App\UserUpdatedAttributeHistory::where('attribute_id', $id)->where('attribute_name', $type)->latest()->get();

        return view('compositions.partials.show-update-history', compact('records'));
    }

    public function historyForScraper(Request $request, $id)
    {
        $type    = $request->get('type', 'category');
        $records = \App\UserUpdatedAttributeHistory::where('attribute_id', $id)->where('attribute_name', $type)->latest()->get();
        dd($records);

        return view('compositions.partials.show-update-history-scrapeed', compact('records'));
    }

    public function ScraperUserHistory(Request $request)
    {
        $type    = 'scraped-category';
        $records = \App\UserUpdatedAttributeHistory::where('attribute_id', $request->id)->where('attribute_name', $request->type)->latest()->get();

        return view('compositions.partials.show-update-history-scrapeed', compact('records'));
    }

    public function deleteUnused()
    {
        \Artisan::call('delete-categories:with-no-products');

        return redirect()->back()->with('success', 'Your request has been finished successfully!');
    }

    public function fixAutoSuggested(Request $request)
    {
        $scrapped_category_mapping = ScrappedCategoryMapping::select('id', 'name', 'category_id');

        if (! empty($request->show_auto_fix)) {
            $scrapped_category_mapping->whereNotNull('category_id')->where('is_auto_skip', 0);
        } else {
            $scrapped_category_mapping->whereNull('category_id');
        }
        $scrapped_category_mapping = $scrapped_category_mapping->paginate(Setting::get('pagination'));

        $links = [];

        if (! $scrapped_category_mapping->isEmpty()) {
            foreach ($scrapped_category_mapping as $k => $category) {
                $filter = \App\Category::updateCategoryAuto($category->name);

                if (isset($request->show_auto_fix) && $request->show_auto_fix) {
                    $links[] = [
                        'from_id' => $category->id,
                        'from'    => $category->name,
                        'to'      => $category->category_id,
                    ];
                } else {
                    $links[] = [
                        'from_id' => $category->id,
                        'from'    => $category->name,
                        'to'      => ($filter) ? $filter->id : null,
                    ];
                }
            }
        }
        $is_auto_fix = ! empty($request->show_auto_fix) ? true : false;
        $view        = (string) view('category.partials.preview-categories', compact('links', 'is_auto_fix'));

        return response()->json(['code' => 200, 'html' => $view]);
    }

    public function fixAutoSuggestedString(Request $request)
    {
        $loeggedUser = $request->user();

        $scrapped_category_mapping = ScrappedCategoryMapping::select('id', 'name')
            ->whereNull('category_id');

        if ($request->show_skipeed_btn_value == 'false') {
            $scrapped_category_mapping->whereNull('category_id');
        }

        $scrapped_category_mapping = $scrapped_category_mapping->get();
        $links                     = [];

        if (! $scrapped_category_mapping->isEmpty()) {
            foreach ($scrapped_category_mapping as $k => $category) {
                $filter = \App\Category::updateCategoryAuto($category->name);
                if ($filter) {
                    $links[$category->id] = ($filter) ? $filter->id : null;
                }
            }
        }

        $count = 0;
        if (! empty($links)) {
            foreach ($links as $scrappedCategoryId => $selectedCategoryId) {
                if ($selectedCategoryId != 1) {
                    $scrappedCategory = ScrappedCategoryMapping::find($scrappedCategoryId);
                    $selectedCategory = Category::find($selectedCategoryId);

                    \App\Jobs\UpdateProductCategoryFromErp::dispatch([
                        'from'    => $scrappedCategory->name,
                        'to'      => $selectedCategory->id,
                        'user_id' => $loeggedUser->id,
                    ])->onQueue('supplier_products');

                    \App\UserUpdatedAttributeHistory::create([
                        'old_value'      => $scrappedCategory->id,
                        'new_value'      => $selectedCategory->id,
                        'attribute_name' => 'category',
                        'attribute_id'   => $selectedCategory->id,
                        'user_id'        => $loeggedUser->id,
                    ]);

                    \App\UserUpdatedAttributeHistory::create([
                        'old_value'      => $scrappedCategory->id,
                        'new_value'      => $selectedCategory->id,
                        'attribute_name' => 'scraped-category',
                        'attribute_id'   => $scrappedCategory->id,
                        'user_id'        => $loeggedUser->id,
                    ]);

                    $isUpdtaed = $scrappedCategory->update([
                        'category_id' => $selectedCategory->id,
                        'is_skip'     => 1,
                        'is_auto_fix' => 1,
                    ]);
                    if ($isUpdtaed) {
                        $count++;
                    }
                } else {
                    ScrappedCategoryMapping::where('id', $scrappedCategoryId)->update(['is_skip' => 1]);
                }
            }
        }

        return response()->json(['code' => 200, 'count' => $count]);
    }

    public function saveCategoryReference(Request $request)
    {
        $loeggedUser = $request->user();

        $unKnownCategory = Category::where('title', 'LIKE', '%Unknown Category%')->first();

        $items = $request->updated_category;
        if (! empty($items)) {
            foreach ($items as $scrappedCategoryId => $selectedCategoryId) {
                if ($selectedCategoryId != 1) {
                    $scrappedCategory = ScrappedCategoryMapping::find($scrappedCategoryId);
                    $selectedCategory = Category::find($selectedCategoryId);

                    \App\Jobs\UpdateProductCategoryFromErp::dispatch([
                        'from'    => $scrappedCategory->name,
                        'to'      => $selectedCategory->id,
                        'user_id' => $loeggedUser->id,
                    ])->onQueue('supplier_products');

                    \App\UserUpdatedAttributeHistory::create([
                        'old_value'      => $scrappedCategory->id,
                        'new_value'      => $selectedCategory->id,
                        'attribute_name' => 'category',
                        'attribute_id'   => $selectedCategory->id,
                        'user_id'        => $loeggedUser->id,
                    ]);

                    \App\UserUpdatedAttributeHistory::create([
                        'old_value'      => $scrappedCategory->id,
                        'new_value'      => $selectedCategory->id,
                        'attribute_name' => 'scraped-category',
                        'attribute_id'   => $scrappedCategory->id,
                        'user_id'        => $loeggedUser->id,
                    ]);

                    $scrappedCategory->update([
                        'category_id'  => $selectedCategory->id,
                        'is_skip'      => 0,
                        'is_auto_skip' => ! empty($request->is_auto_fix) ? 1 : 0,
                    ]);
                } else {
                    ScrappedCategoryMapping::where('id', $scrappedCategoryId)->update(['is_skip' => 1]);
                }
            }
        }

        return response()->json(['code' => 200, 'message' => 'Category updated successfully']);
    }

    public function childCategory(Request $request)
    {
        $cat    = Category::with('childs')->find($request->subCat);
        $childs = $cat->childs;

        if ($childs) {
            return response()->json($childs);
        } else {
            return false;
        }
    }

    public function childEditCategory(Request $request)
    {
        $cat = Category::with(['childs.childLevelSencond', 'categorySegmentId'])->find($request->dataId);

        if ($cat) {
            return response()->json($cat);
        } else {
            return false;
        }
    }

    public function updateCategory(Request $request, $id)
    {
        $category = Category::findOrFail($id);

        if ($request->has('title')) {
            $category->title = $request->input('title');
            $category->save();

            return response()->json(['success-remove' => $category->title . ' updated successfully']);
        }

        if ($request->has('magento_id')) {
            $category->magento_id = $request->input('magento_id');
            $category->save();

            return response()->json(['success-remove' => 'Magneto id of ' . $category->title . ' updated successfully']);
        }

        if ($request->has('show_all_id')) {
            $category->show_all_id = $request->input('show_all_id');
            $category->save();

            return response()->json(['success-remove' => 'Show all id of ' . $category->title . ' updated successfully']);
        }
        if ($request->has('parent_id')) {
            $category->parent_id = $request->parent_id;
            $category->save();

            return response()->json(['success-remove' => 'Parent category ' . $category->title . ' updated successfully.Please refresh page']);
        }

        if ($request->has('category_segment_id')) {
            $category->category_segment_id = $request->category_segment_id;
            $category->save();

            return response()->json(['success-remove' => 'Category segment id of ' . $category->title . ' updated successfully']);
        }

        if ($request->has('simplyduty_code')) {
            $findChild = \App\Category::whereNull('simplyduty_code')->where('parent_id', $category->id)->get();
            if (! empty($findChild) && ! $findChild->isEmpty()) {
                foreach ($findChild as $child) {
                    $child->simplyduty_code = $request->simplyduty_code;
                    $child->save();
                }
            }
            $category->simplyduty_code = $request->simplyduty_code;
            $category->save();

            return response()->json(['success-remove' => 'SH code of ' . $category->title . ' updated successfully']);
        }

        if (isset($request->measurment)) {
            if ($request->has('need_to_check_measurement')) {
                $category->need_to_check_measurement = 1;
            } else {
                $category->need_to_check_measurement = 0;
            }
            $category->save();

            return response()->json(['success-remove' => 'Check measurement of ' . $category->title . ' updated successfully']);
        }

        if (isset($request->checkSize)) {
            if ($request->has('need_to_check_size')) {
                $category->need_to_check_size = 1;
            } else {
                $category->need_to_check_size = 0;
            }
            $category->save();

            return response()->json(['success-remove' => 'Check size of ' . $category->title . ' updated successfully']);
        }

        if (isset($request->checkSizeChart)) {
            if ($request->has('size_chart_needed')) {
                $category->size_chart_needed = 1;
            } else {
                $category->size_chart_needed = 0;
            }
            $category->save();

            return response()->json(['success-remove' => 'Check size chart of ' . $category->title . ' updated successfully']);
        }
    }

    public function updateMinMaxPriceDefault()
    {
        return abort(404);
        if (! auth()->user()->isAdmin()) {
        }

        $results = \Illuminate\Support\Facades\DB::select('
            SELECT
                categories.title,
                categories.id as cat_id,
                ct.title as parent_name,
                ct.id as parent_id,
                MIN(price*1) AS minimumPrice,
                MAX(price*1) AS maximumPrice
            FROM
                products
            JOIN
                categories
            ON
                products.category=categories.id
            LEFT JOIN
                categories as ct
            ON
                categories.parent_id=ct.id    
            GROUP BY
                products.category
            ORDER BY
                categories.title
        ');

        $brandSegments = ['A', 'B', 'C'];

        foreach ($brandSegments as $bs) {
            foreach ($results as $r) {
                $bsRange = BrandCategoryPriceRange::where('brand_segment', $bs)->where('category_id', $r->cat_id)->first();
                if (! $bsRange) {
                    BrandCategoryPriceRange::updateOrCreate(
                        ['brand_segment' => $bs, 'category_id' => $r->cat_id],
                        ['min_price' => 50, 'max_price' => 10000]
                    );
                } else {
                    $bsRange->min_price = 50;
                    $bsRange->max_price = 10000;
                    $bsRange->save();
                }
            }
        }

        echo 'script done';
    }

    public function changePushType(Request $request)
    {
        $category = \App\Category::find($request->category_id);
        if ($category) {
            $category->push_type = $request->value;
            $category->save();

            return response()->json(['code' => 200, 'message' => 'Updated successfully']);
        } else {
            return response()->json(['code' => 500, 'message' => 'Category not found']);
        }
    }

    /**
     * copy data from One category To Another.
     *
     * @return \Illuminate\Http\Response
     */
    public function storeCopyCategory(Request $request)
    {
        $sourceCategoryId = $request->sourceCategoryId;
        $targetCategoryId = $request->targetCategoryId;

        $categories = Category::where('parent_id', $sourceCategoryId)->orderBy('title')->get();

        $data = [];

        if ($categories) {
            foreach ($categories as $category) {
                $data['child'][$category->id] = $category->toArray();
                $insert_array                 = $category->toArray();
                $insert_array['parent_id']    = $targetCategoryId;
                $insert_array['magento_id']   = 0;
                unset($insert_array['id']);
                $pid                                   = Category::insertGetId($insert_array);
                $data['child'][$category->id]['child'] = $this->getChildData($category->id, $pid);
            }
        }

        return redirect()->route('category')
            ->with('success-remove', 'Data Copyied Successfully');
    }

    /**
     * find child data from parent.
     *
     * @param mixed $parentId
     * @param mixed $pid
     *
     * @return \Illuminate\Http\Response
     */
    public function getChildData($parentId, $pid)
    {
        $categories = Category::where('parent_id', $parentId)->orderBy('title')->get();
        $data       = [];
        if ($categories) {
            foreach ($categories as $category) {
                $data[$category->id]        = $category->toArray();
                $insert_array               = $category->toArray();
                $insert_array['parent_id']  = $pid;
                $insert_array['magento_id'] = 0;
                unset($insert_array['id']);
                $newpid                       = Category::insertGetId($insert_array);
                $data[$category->id]['child'] = $this->getChildData($category->id, $newpid);
            }
        }

        return $data;
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/CustomerCharityController.php 
Content: <?php

namespace App\Http\Controllers;

use DB;
use Auth;
use App\User;
use App\Brand;
use App\Product;
use App\Setting;
use App\Website;
use App\Category;
use App\StoreWebsite;
use App\WebsiteStore;
use App\CharityCountry;
use App\VendorCategory;
use App\CustomerCharity;
use Illuminate\Http\Request;
use App\Helpers\ProductHelper;
use App\CharityProductStoreWebsite;
use App\CustomerCharityWebsiteStore;
use Illuminate\Pagination\LengthAwarePaginator;

class CustomerCharityController extends Controller
{
    const DEFAULT_FOR = 2; //For Vendor

    public function index(Request $request)
    {
        $term         = $request->term ?? '';
        $sortByClause = '';
        $orderby      = 'DESC';

        if ($request->orderby == '') {
            $orderby = 'ASC';
        }
        if ($request->sortby == 'id') {
            $sortByClause = "id $orderby,";
        }
        $whereArchived = ' `deleted_at` IS NULL ';

        if ($request->get('with_archived') == 'on') {
            $whereArchived = '  `deleted_at` IS NOT NULL  ';
        }

        $isAdmin = Auth::user()->isAdmin();

        if ($isAdmin) {
            $permittedCategories = [];
        } else {
            $permittedCategories = Auth::user()->vendorCategoryPermission->pluck('id')->all() + [0];
        }
        //getting request
        if ($request->term || $request->name || $request->id || $request->category || $request->email || $request->phone ||
            $request->address || $request->email || $request->communication_history || $request->status != null || $request->updated_by != null
        ) {
            //Query Initiate
            if ($isAdmin) {
                $query = CustomerCharity::query();
            } else {
                $imp_permi = implode(',', $permittedCategories);
                if ($imp_permi != 0) {
                    $query = CustomerCharity::whereIn('category_id', $permittedCategories);
                } else {
                    $query = CustomerCharity::query();
                }
            }

            if (request('term') != null) {
                $query->where('name', 'LIKE', "%{$request->term}%");
            }

            //if Id is not null
            if (request('id') != null) {
                $query->where('id', request('id', 0));
            }

            //If name is not null
            if (request('name') != null) {
                $query->where('name', 'LIKE', '%' . request('name') . '%');
            }

            //if addess is not null
            if (request('address') != null) {
                $query->where('address', 'LIKE', '%' . request('address') . '%');
            }

            //if email is not null
            if (request('email') != null) {
                $query->where('email', 'LIKE', '%' . request('email') . '%');
            }

            //if phone is not null
            if (request('phone') != null) {
                $query->where('phone', 'LIKE', '%' . request('phone') . '%');
            }
            $status = request('status');
            if ($status != null && ! request('with_archived')) {
                $query = $query->where(function ($q) use ($status) {
                    $q->orWhere('status', $status);
                });
            }

            if (request('updated_by') != null && ! request('with_archived')) {
                $query = $query->where(function ($q) {
                    $q->orWhere('updated_by', request('updated_by'));
                });
            }

            //if category is not nyll
            if (request('category') != null) {
                $query->whereHas('category', function ($qu) {
                    $qu->where('category_id', '=', request('category'));
                });
            }
            //if email is not nyll
            if (request('email') != null) {
                $query->where('email', 'like', '%' . request('email') . '%');
            }
            if (request('communication_history') != null && ! request('with_archived')) {
                $communication_history = request('communication_history');
                $query->orWhereRaw("customer_charities.id in (select charity_id from chat_messages where charity_id is not null and message like '%" . $communication_history . "%')");
            }

            if ($request->with_archived != null && $request->with_archived != '') {
                $pagination = Setting::get('pagination');
                if (request()->get('select_all') == 'true') {
                    $pagination = $customer_charities->count();
                }

                $totalVendor        = $query->orderby('name', 'asc')->whereNotNull('deleted_at')->count();
                $customer_charities = $query->orderby('name', 'asc')->whereNotNull('deleted_at')->paginate($pagination);
            } else {
                $pagination = Setting::get('pagination');
                if (request()->get('select_all') == 'true') {
                    $pagination = $customer_charities->count();
                }
                $totalVendor        = $query->orderby('name', 'asc')->count();
                $customer_charities = $query->orderby('name', 'asc')->paginate($pagination);
            }
        } else {
            if ($isAdmin) {
                $permittedCategories = '';
            } else {
                if (empty($permittedCategories)) {
                    $permittedCategories = [0];
                }
                $permittedCategories_all = implode(',', $permittedCategories);
                if ($permittedCategories_all == 0) {
                    $permittedCategories = '';
                } else {
                    $permittedCategories = 'and customer_charities.category_id in (' . implode(',', $permittedCategories) . ')';
                }
            }

            $customer_charities = DB::select('
                SELECT customer_charities.id,customer_charities.product_id, customer_charities.frequency, customer_charities.is_blocked ,customer_charities.reminder_message, customer_charities.category_id, customer_charities.name, customer_charities.phone, customer_charities.email, customer_charities.address, customer_charities.social_handle, customer_charities.website, customer_charities.login, customer_charities.password, customer_charities.gst, customer_charities.account_name, customer_charities.account_iban, customer_charities.account_swift,
                customer_charities.frequency_of_payment,
                customer_charities.bank_name,
                customer_charities.bank_address,
                customer_charities.city,
                customer_charities.country,
                customer_charities.ifsc_code,
                customer_charities.remark,
                    customer_charities.created_at,customer_charities.updated_at,
                    customer_charities.updated_by,
                    customer_charities.reminder_from,
                    customer_charities.reminder_last_reply,
                    customer_charities.status,
                    customer_charities.store_website_id,
                    store_websites.title as store_websites_name,
                    0 as message_status
                    FROM customer_charities
                    LEFT JOIN store_websites on store_websites.id=customer_charities.store_website_id
                    WHERE (name LIKE "%' . $term . '%" OR
                    phone LIKE "%' . $term . '%" OR
                    email LIKE "%' . $term . '%" OR
                    address LIKE "%' . $term . '%" OR
                    social_handle LIKE "%' . $term . '%" OR
                    customer_charities.id IN (SELECT model_id FROM agents WHERE model_type LIKE "%Vendor%" AND (name LIKE "%' . $term . '%" OR phone LIKE "%' . $term . '%" OR email LIKE "%' . $term . '%"))) ' . $permittedCategories . '
                    ORDER BY ' . $sortByClause . ' created_at DESC;

            ');

            $totalVendor = count($customer_charities);

            $currentPage = LengthAwarePaginator::resolveCurrentPage();
            $perPage     = Setting::get('pagination');
            if (request()->get('select_all') == 'true') {
                $perPage     = count($customer_charities);
                $currentPage = 1;
            }

            if (! is_numeric($perPage)) {
                $perPage = 2;
            }
            $currentItems = array_slice($customer_charities, $perPage * ($currentPage - 1), $perPage);

            $customer_charities = new LengthAwarePaginator($currentItems, count($customer_charities), $perPage, $currentPage, [
                'path' => LengthAwarePaginator::resolveCurrentPath(),
            ]);
        }

        $vendor_categories = VendorCategory::all();

        $users = User::all();

        $replies = \App\Reply::where('model', 'Vendor')->whereNull('deleted_at')->pluck('reply', 'id')->toArray();

        $updatedProducts = CustomerCharity::join('users as u', 'u.id', 'customer_charities.updated_by')
            ->groupBy('customer_charities.updated_by')
            ->select([\DB::raw('count(u.id) as total_records'), 'u.name'])
            ->get();

        $storewebsite = StoreWebsite::all();

        $website1 = Website::all();

        return view('vendors.charity', [
            'vendors'           => $customer_charities,
            'vendor_categories' => $vendor_categories,
            'term'              => $term,
            'orderby'           => $orderby,
            'users'             => $users,
            'replies'           => $replies,
            'updatedProducts'   => $updatedProducts,
            'totalVendor'       => $totalVendor,
            'storewebsite'      => $storewebsite,
            'website1'          => $website1,

        ]);
    }

    public function store(Request $request, $id = null)
    {
        $this->validate($request, [
            'category_id'          => 'sometimes|nullable|numeric',
            'name'                 => 'required|string|max:255',
            'address'              => 'sometimes|nullable|string',
            'phone'                => 'required|nullable|numeric',
            'email'                => 'sometimes|nullable|email',
            'social_handle'        => 'sometimes|nullable',
            'website'              => 'sometimes|nullable',
            'login'                => 'sometimes|nullable',
            'password'             => 'sometimes|nullable',
            'gst'                  => 'sometimes|nullable|max:255',
            'account_name'         => 'sometimes|nullable|max:255',
            'account_iban'         => 'sometimes|nullable|max:255',
            'account_swift'        => 'sometimes|nullable|max:255',
            'frequency_of_payment' => 'sometimes|nullable|max:255',
            'bank_name'            => 'sometimes|nullable|max:255',
            'bank_address'         => 'sometimes|nullable|max:255',
            'city'                 => 'sometimes|nullable|max:255',
            'country'              => 'sometimes|nullable|max:255',
            'ifsc_code'            => 'sometimes|nullable|max:255',
            'remark'               => 'sometimes|nullable|max:255',
        ]);

        $data = $request->except(['_token', 'create_user']);
        if (empty($data['whatsapp_number'])) {
            //get default whatsapp number for vendor from whatsapp config
            $task_info = DB::table('whatsapp_configs')
                ->select('*')
                ->whereRaw('find_in_set(' . self::DEFAULT_FOR . ',default_for)')
                ->first();
            if (isset($task_info->number) && $task_info->number != null) {
                $data['whatsapp_number'] = $task_info->number;
            }
        }

        if (empty($data['default_phone'])) {
            $data['default_phone'] = $data['phone'];
        }

        if (! empty($source)) {
            $data['status'] = 0;
        }

        unset($data['websites']);
        unset($data['website_stores']);
        if ($id == null) {
            $charity                    = CustomerCharity::create($data);
            $charity_category           = Category::where('title', 'charity')->first();
            $charity_brand              = Brand::where('name', 'charity')->first();
            $product                    = new Product();
            $product->sku               = '';
            $product->status_id         = '115';
            $product->name              = $charity->name;
            $product->short_description = $charity->name;
            $product->brand             = $charity_brand->id;
            $product->category          = $charity_category->id;
            $product->price             = 1;
            $product->save();
            CustomerCharity::where('id', $charity->id)->update([
                'product_id' => $product->id,
            ]);
            Product::where('id', $product->id)->update(['sku' => 'charity_' . $product->id]);
        } else {
            CustomerCharity::where('id', $id)->update($data);
        }

        return redirect()->route('customer.charity')->withSuccess('You have successfully saved a charity!');
    }

    public function delete($id)
    {
        $customer_charity = CustomerCharity::find($id);
        $customer_charity->delete();

        return redirect()->route('customer.charity')->withSuccess('You have successfully deleted a charity');
    }

    public function charitySearch()
    {
        $term   = request()->get('q', null);
        $search = CustomerCharity::where('name', 'LIKE', '%' . $term . '%')
            ->get();

        return response()->json($search);
    }

    public function charityEmail()
    {
        $term   = request()->get('q', null);
        $search = CustomerCharity::where('email', 'LIKE', '%' . $term . '%')
            ->get();

        return response()->json($search);
    }

    public function charityPhoneNumber()
    {
        $term   = request()->get('q', null);
        $search = CustomerCharity::where('phone', 'LIKE', '%' . $term . '%')
            ->get();

        return response()->json($search);
    }

    public function charityWebsites($id)
    {
        $cc            = CustomerCharity::find($id);
        $websiteArrays = ProductHelper::getStoreWebsiteName($cc->product_id);
        if (count($websiteArrays)) {
            foreach ($websiteArrays as $websiteArray) {
                $website   = StoreWebsite::find($websiteArray);
                $webStores = Website::select('code', 'name')->where('store_website_id', $website->id)->get();
            }
        }
        foreach ($webStores as $w) {
            $c_raw    = CharityCountry::where('charity_id', $id)->where('country_code', $w->code)->first();
            $w->price = 1;
            if ($c_raw) {
                $w->price = $c_raw->price;
            }
        }

        return response()->json($webStores);
    }

    public function addCharityWebsites(Request $request, $id)
    {
        $countries = explode('&', $request->data);
        foreach ($countries as $c) {
            $cc  = explode('=', $c)[0];
            $val = explode('=', $c)[1];
            if ($val) {
                $c_raw = CharityCountry::where('charity_id', $id)->where('country_code', $cc)->first();
                if (! $c_raw) {
                    $c_raw               = new CharityCountry();
                    $c_raw->charity_id   = $id;
                    $c_raw->country_code = $cc;
                }
                $c_raw->price = $val;
                $c_raw->save();
            }
        }

        return response()->json('Charity Updated Successfully!');
    }

    public function savewebsite(Request $request)
    {
        $c    = CharityProductStoreWebsite::where('charity_id', $request->charity_id)->where('website_id', $request->website_id)->first();
        $data = [
            'charity_id' => $request->charity_id,
            'website_id' => $request->website_id,
            'price'      => $request->price,
        ];
        if ($c) {
            CharityProductStoreWebsite::where('charity_id', $request->charity_id)->where('website_id', $request->website_id)->update($data);
        } else {
            CharityProductStoreWebsite::insert($data);
        }

        return response()->json('Charity Website Updated Successfully!');
    }

    public function deletewebsite(Request $request)
    {
        CharityProductStoreWebsite::where('id', $request->id)->delete();

        return response()->json('Charity Website deleted Successfully!');
    }

    public function getwebsite(Request $request)
    {
        $charity_id = $request->charity_id;
        $charity    = CustomerCharity::where('id', $charity_id)->first();
        $website    = Website::where('store_website_id', $charity->store_website_id)->get();
        $Website    = CharityProductStoreWebsite::select('charity_product_store_websites.id', 'charity_product_store_websites.price', 'websites.name')->join('websites', 'charity_product_store_websites.website_id', 'websites.id')->where('charity_id', $charity_id)->get();
        $html       = '';
        foreach ($Website as $w) {
            $html .= '<tr><td>' . $w->name . '</td>';
            $html .= '<td>' . $w->price . '</td>';
            $html .= '<td><button onclick="delwebsite(' . $w->id . ')" type="button" class="btn btn-default">Delete</button></td></tr>';
        }

        echo $html = " <table class='table table-bordered' >
      <thead><tr><th>Website</th><th>Price</th></tr> </thead>
      <tbody>" . $html . '</tbody></table';
    }

    public function getCharityWebsiteStores($id)
    {
        $website_stores    = CustomerCharityWebsiteStore::with('websiteStore.website.storeWebsite')->where('customer_charity_id', $id)->get();
        $website_store_ids = $website_stores->pluck('website_store_id')->toArray();
        $website_ids       = WebsiteStore::whereIn('id', $website_store_ids)->pluck('website_id')->toArray();
        $store_website_ids = Website::whereIn('id', $website_ids)->pluck('store_website_id')->toArray();
        $website_ids       = Website::whereIn('store_website_id', $store_website_ids)->pluck('id')->toArray();
        $all_stores        = WebsiteStore::whereIn('website_id', $website_ids)->get();
        $all_websites      = StoreWebsite::get();

        return response()->json([
            'website_stores' => $website_stores,
            'all_stores'     => $all_stores,
            'all_websites'   => $all_websites,
        ]);
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/CustomerController.php 
Content: <?php

namespace App\Http\Controllers;

use Auth;
use App\User;
use App\Brand;
use App\Email;
use App\Order;
use App\Reply;
use App\ApiKey;
use App\Status;
use App\Helpers;
use App\Message;
use App\Product;
use App\Setting;
use App\Category;
use App\Customer;
use App\ErpLeads;
use App\Supplier;
use App\Complaint;
use App\CreditLog;
use Carbon\Carbon;
use Dompdf\Dompdf;
use App\ChatMessage;
use App\Instruction;
use App\EmailAddress;
use App\MessageQueue;
use App\StoreWebsite;
use App\CreditHistory;
use App\ReplyCategory;
use App\QuickSellGroup;
use App\TwilioPriority;
use App\SuggestedProduct;
use Illuminate\Support\Arr;
use App\CustomerAddressData;
use App\InstructionCategory;
use Illuminate\Http\Request;
use App\CommunicationHistory;
use App\ReadOnly\SoloNumbers;
use App\CustomerPriorityPoint;
use App\Imports\CustomerImport;
use App\Exports\CustomersExport;
use App\ReadOnly\PurchaseStatus;
use App\Mails\Manual\IssueCredit;
use App\StoreWebsiteTwilioNumber;
use Illuminate\Support\Facades\DB;
use App\CustomerPriorityRangePoint;
use App\Mails\Manual\CustomerEmail;
use App\Mails\Manual\AdvanceReceipt;
use Maatwebsite\Excel\Facades\Excel;
use App\Mails\Manual\RefundProcessed;
use App\OrderStatus as OrderStatuses;
use GuzzleHttp\Client as GuzzleClient;
use App\Mails\Manual\OrderConfirmation;
use Plank\Mediable\Media as PlunkMediable;
use Illuminate\Pagination\LengthAwarePaginator;

class CustomerController extends Controller
{
    const DEFAULT_FOR = 1; //For Customer

    /**
     * This function is use for getting data from the credit history data
     *
     * @param $id int
     *
     * @return $htlm
     */
    public function creditHistory($id)
    {
        $custHosData = CreditHistory::where('customer_id', $id)->get();
        $html        = '';
        foreach ($custHosData as $key => $val) {
            $html .= '<tr>';
            $html .= '<td>' . $val->id . '</td>';
            $html .= '<td>' . $val->used_credit . '</td>';
            $html .= '<td>' . $val->used_in . '</td>';
            $html .= '<td>' . $val->type . '</td>';
            $html .= '<td>' . date('d-m-Y', strtotime($val->created_at)) . '</td>';
            $html .= '</tr>';
        }
        if ($html) {
            return $html;
        } else {
            return 'No record found';
        }
    }

    /**
     * This function is use for getting data from the credit log data
     *
     * @param $id int
     *
     * @return $htlm
     */
    public function creditLog($id)
    {
        $custHosData = CreditLog::where('customer_id', $id)->get();
        $html        = '';
        foreach ($custHosData as $key => $val) {
            $html .= '<tr>';
            $html .= '<td>' . date('d-m-Y', strtotime($val->created_at)) . '</td>';
            $html .= '<td>' . $val->request . '</td>';
            $html .= '<td>' . $val->response . '</td>';
            $html .= '<td>' . $val->status . '</td>';
            $html .= '<td>' . $val->id . '</td>';
            $html .= '</tr>';
        }
        if ($html) {
            return $html;
        } else {
            return 'No record found';
        }
    }

    public function add_customer_address(Request $request)
    {
        $apply_job = CustomerAddressData::create([
            'customer_id'  => $request->customer_id,
            'entity_id'    => $request->entity_id,
            'parent_id'    => $request->parent_id,
            'address_type' => $request->address_type,
            'region'       => $request->region,
            'region_id'    => $request->region_id,
            'postcode'     => $request->postcode,
            'firstname'    => $request->firstname,
            'middlename'   => $request->middlename,
            'company'      => $request->company,
            'country_id'   => $request->country_id,
            'telephone'    => $request->telephone,
            'prefix'       => $request->prefix,
            'street'       => $request->street,
        ]);
        $apply_job->save();

        return $apply_job;
    }

    public function index(Request $request)
    {
        $complaints   = Complaint::whereNotNull('customer_id')->pluck('complaint', 'customer_id')->toArray();
        $instructions = Instruction::with('remarks')->orderBy('is_priority', 'DESC')->orderBy('created_at', 'DESC')->select(['id', 'instruction', 'customer_id', 'assigned_to', 'pending', 'completed_at', 'verified', 'is_priority', 'created_at'])->get()->groupBy('customer_id')->toArray();
        $orders       = Order::latest()->select(['id', 'customer_id', 'order_status', 'order_status_id', 'created_at'])->get()->groupBy('customer_id')->toArray();
        $order_stats  = DB::table('orders')->selectRaw('order_status, COUNT(*) as total')->whereNotNull('order_status')->groupBy('order_status')->get();

        $totalCount = 0;
        foreach ($order_stats as $order_stat) {
            $totalCount += $order_stat->total;
        }

        $orderStatus = [
            'order received',
            'follow up for advance',
            'prepaid',
            'proceed without advance',
            'pending purchase (advance received)',
            'purchase complete',
            'product shipped from italy',
            'product in stock',
            'product shipped to client',
            'delivered',
            'cancel',
            'refund to be processed',
            'refund credited',
        ];

        $finalOrderStats = [];
        foreach ($orderStatus as $status) {
            foreach ($order_stats as $order_stat) {
                if ($status == strtolower($order_stat->order_status)) {
                    $finalOrderStats[] = $order_stat;
                }
            }
        }

        foreach ($order_stats as $order_stat) {
            if (! in_array(strtolower($order_stat->order_status), $orderStatus)) {
                $finalOrderStats[] = $order_stat;
            }
        }

        $order_stats = $finalOrderStats;

        $finalOrderStats = [];
        foreach ($order_stats as $key => $order_stat) {
            $finalOrderStats[] = [$order_stat->order_status,
                $order_stat->total,
                ($order_stat->total / $totalCount) * 100,
                [
                    '#CCCCCC',
                    '#95a5a6',
                    '#b2b2b2',
                    '#999999',
                    '#2c3e50',
                    '#7f7f7f',
                    '#666666',
                    '#4c4c4c',
                    '#323232',
                    '#191919',
                    '#000000',
                    '#414a4c',
                    '#353839',
                    '#232b2b',
                    '#34495e',
                    '#7f8c8d',
                ][$key],

            ];
        }

        $order_stats = $finalOrderStats;

        $results          = $this->getCustomersIndex($request);
        $term             = $request->input('term');
        $reply_categories = ReplyCategory::all();
        $api_keys         = ApiKey::select('number')->get();

        $type = $request->type ?? '';

        $orderby = 'desc';
        if ($request->orderby == '') {
            $orderby = 'asc';
        }

        $customers_all  = Customer::all();
        $customer_names = Customer::select(['name'])->get()->toArray();

        $category_suggestion = Category::attr(['name' => 'category[]', 'class' => 'form-control select-multiple', 'multiple' => 'multiple'])
            ->renderAsDropdown();

        $brands = Brand::all()->toArray();

        foreach ($customer_names as $name) {
            $search_suggestions[] = $name['name'];
        }

        $users_array = Helpers::getUserArray(User::all());

        $last_set_id = MessageQueue::max('group_id');

        $queues_total_count = MessageQueue::where('status', '!=', 1)->where('group_id', $last_set_id)->count();
        $queues_sent_count  = MessageQueue::where('sent', 1)->where('status', '!=', 1)->where('group_id', $last_set_id)->count();

        $start_time = $request->range_start ? "$request->range_start 00:00" : Carbon::now()->subDay();
        $end_time   = $request->range_end ? "$request->range_end 23:59" : Carbon::now()->subDay();

        $allCustomers = $results[0]->pluck('id')->toArray();

        // Get all sent broadcasts from the past month
        $sbQuery = DB::select("select MIN(group_id) AS minGroup, MAX(group_id) AS maxGroup from message_queues where sent = 1 and created_at>'" . date('Y-m-d H:i:s', strtotime('1 month ago')) . "'");

        // Add broadcasts to array
        $broadcasts = [];
        if ($sbQuery !== null) {
            // Get min and max
            $minBroadcast = $sbQuery[0]->minGroup;
            $maxBroadcast = $sbQuery[0]->maxGroup;

            // Deduct 2 from min
            $minBroadcast = $minBroadcast - 2;

            for ($i = $minBroadcast; $i <= $maxBroadcast; $i++) {
                $broadcasts[] = $i;
            }
        }

        $shoe_size_group = Customer::selectRaw('shoe_size, count(id) as counts')
            ->whereNotNull('shoe_size')
            ->groupBy('shoe_size')
            ->pluck('counts', 'shoe_size');

        $clothing_size_group = Customer::selectRaw('clothing_size, count(id) as counts')
            ->whereNotNull('clothing_size')
            ->groupBy('clothing_size')
            ->pluck('counts', 'clothing_size');

        $groups        = QuickSellGroup::select('id', 'name', 'group')->orderby('name', 'asc')->get();
        $storeWebsites = \App\StoreWebsite::all()->pluck('website', 'id')->toArray();
        $solo_numbers  = (new SoloNumbers)->all();

        return view('customers.index', [
            'storeWebsites'       => $storeWebsites,
            'solo_numbers'        => $solo_numbers,
            'customers'           => $results[0],
            'customers_all'       => $customers_all,
            'customer_ids_list'   => json_encode($results[1]),
            'users_array'         => $users_array,
            'instructions'        => $instructions,
            'term'                => $term,
            'orderby'             => $orderby,
            'type'                => $type,
            'queues_total_count'  => $queues_total_count,
            'queues_sent_count'   => $queues_sent_count,
            'search_suggestions'  => $search_suggestions,
            'reply_categories'    => $reply_categories,
            'orders'              => $orders,
            'api_keys'            => $api_keys,
            'category_suggestion' => $category_suggestion,
            'brands'              => $brands,
            'start_time'          => $start_time,
            'end_time'            => $end_time,
            'leads_data'          => $results[2],
            'order_stats'         => $order_stats,
            'complaints'          => $complaints,
            'shoe_size_group'     => $shoe_size_group,
            'clothing_size_group' => $clothing_size_group,
            'broadcasts'          => $broadcasts,
            'groups'              => $groups,
        ]);
    }

    public function getCustomersIndex(Request $request)
    {
        // Set search term
        $term = $request->term;
        // Set delivery status
        $delivery_status = [
            'Follow up for advance',
            'Proceed without Advance',
            'Advance received',
            'Cancel',
            'Prepaid',
            'Product Shiped form Italy',
            'In Transist from Italy',
            'Product shiped to Client',
            'Delivered',
        ];

        // Set empty clauses for later usage
        $orderWhereClause  = '';
        $searchWhereClause = '';
        $filterWhereClause = '';
        $leadsWhereClause  = '';

        if (! empty($term)) {
            $searchWhereClause = " AND (customers.name LIKE '%$term%' OR customers.phone LIKE '%$term%' OR customers.instahandler LIKE '%$term%')";
            $orderWhereClause  = "WHERE orders.order_id LIKE '%$term%'";
        }

        if ($request->get('shoe_size')) {
            $searchWhereClause .= " AND customers.shoe_size = '" . $request->get('shoe_size') . "'";
        }

        if ($request->get('clothing_size')) {
            $searchWhereClause .= " AND customers.clothing_size = '" . $request->get('clothing_size') . "'";
        }

        if ($request->get('shoe_size_group')) {
            $searchWhereClause .= " AND customers.shoe_size = '" . $request->get('shoe_size_group') . "'";
        }

        if ($request->get('clothing_size_group')) {
            $searchWhereClause .= " AND customers.clothing_size = '" . $request->get('clothing_size_group') . "'";
        }

        if ($request->get('customer_id')) {
            $searchWhereClause .= " AND customers.id LIKE '%" . $request->get('customer_id') . "%'";
        }

        if ($request->get('customer_name')) {
            $searchWhereClause .= " AND customers.name LIKE '%" . $request->get('customer_name') . "%'";
        }

        $orderby = 'DESC';

        if ($request->input('orderby')) {
            $orderby = 'ASC';
        }
        $sortby = 'communication';

        $sortBys = [
            'name'          => 'name',
            'email'         => 'email',
            'phone'         => 'phone',
            'instagram'     => 'instahandler',
            'lead_created'  => 'lead_created',
            'order_created' => 'order_created',
            'rating'        => 'rating',
            'communication' => 'communication',
        ];

        if (isset($sortBys[$request->input('sortby')])) {
            $sortby = $sortBys[$request->input('sortby')];
        }

        $start_time = $request->range_start ? "$request->range_start 00:00" : '';
        $end_time   = $request->range_end ? "$request->range_end 23:59" : '';

        if ($start_time != '' && $end_time != '') {
            $filterWhereClause = " AND last_communicated_at BETWEEN '" . $start_time . "' AND '" . $end_time . "'";
        }

        if ($request->type == 'unread' || $request->type == 'unapproved') {
            $join               = 'RIGHT';
            $type               = $request->type == 'unread' ? 0 : ($request->type == 'unapproved' ? 1 : 0);
            $orderByClause      = " ORDER BY is_flagged DESC, message_status ASC, last_communicated_at $orderby";
            $filterWhereClause  = " AND chat_messages.status = $type";
            $messageWhereClause = ' WHERE chat_messages.status != 7 AND chat_messages.status != 8 AND chat_messages.status != 9 AND chat_messages.status != 10';

            if ($start_time != '' && $end_time != '') {
                $filterWhereClause = " AND (last_communicated_at BETWEEN '" . $start_time . "' AND '" . $end_time . "') AND message_status = $type";
            }
        } else {
            if (
                strtolower($request->get('type')) === 'advance received' ||
                strtolower($request->get('type')) === 'cancel' ||
                strtolower($request->get('type')) === 'delivered' ||
                strtolower($request->get('type')) === 'follow up for advance' ||
                strtolower($request->get('type')) === 'high priority' ||
                strtolower($request->get('type')) === 'in transist from italy' ||
                strtolower($request->get('type')) === 'prepaid' ||
                strtolower($request->get('type')) === 'proceed without advance' ||
                strtolower($request->get('type')) === 'product shiped form italy' ||
                strtolower($request->get('type')) === 'product shiped to client' ||
                strtolower($request->get('type')) === 'refund credited' ||
                strtolower($request->get('type')) === 'refund dispatched' ||
                strtolower($request->get('type')) === 'refund to be processed'
            ) {
                $join               = 'LEFT';
                $orderByClause      = " ORDER BY is_flagged DESC, last_communicated_at $orderby";
                $messageWhereClause = ' WHERE chat_messages.status != 7 AND chat_messages.status != 8 AND chat_messages.status != 9';
                if ($orderWhereClause) {
                    $orderWhereClause .= ' AND ';
                } else {
                    $orderWhereClause = ' WHERE ';
                }
                $orderWhereClause .= 'orders.order_status = "' . $request->get('type') . '"';
                $filterWhereClause = ' AND order_status = "' . $request->get('type') . '"';
            } else {
                if (strtolower($request->type) != 'new' && strtolower($request->type) != 'delivery' && strtolower($request->type) != 'refund to be processed' && strtolower($request->type) != '') {
                    $join               = 'LEFT';
                    $orderByClause      = " ORDER BY is_flagged DESC, last_communicated_at $orderby";
                    $messageWhereClause = ' WHERE chat_messages.status != 7 AND chat_messages.status != 8 AND chat_messages.status != 9';

                    if ($request->type == '0') {
                        $leadsWhereClause = ' AND lead_status IS NULL';
                    } else {
                        $leadsWhereClause = " AND lead_status = $request->type";
                    }
                } else {
                    if ($sortby === 'communication') {
                        $join               = 'LEFT';
                        $orderByClause      = " ORDER BY is_flagged DESC, last_communicated_at $orderby";
                        $messageWhereClause = ' WHERE chat_messages.status != 7 AND chat_messages.status != 8 AND chat_messages.status != 9';
                    }
                }
            }
        }

        $assignedWhereClause = '';
        if (Auth::user()->hasRole('Customer Care')) {
            $user_id             = Auth::id();
            $assignedWhereClause = " AND id IN (SELECT customer_id FROM user_customers WHERE user_id = $user_id)";
        }

        if (! $orderByClause) {
            $orderByClause = ' ORDER BY instruction_completed_at DESC';
        } else {
            $orderByClause .= ', instruction_completed_at DESC';
        }

        $sql = '
            SELECT
                customers.id,
                customers.email,
                customers.frequency,
                customers.reminder_message,
                customers.name,
                customers.phone,
                customers.is_blocked,
                customers.is_flagged,
                customers.is_error_flagged,
                customers.is_priority,
                customers.instruction_completed_at,
                customers.whatsapp_number,
                customers.do_not_disturb,
                chat_messages.*,
                chat_messages.status AS message_status,
                chat_messages.number,
                twilio_active_numbers.phone_number as phone_number,
                orders.*,
                order_products.*,
                leads.*
            FROM
                customers
            LEFT JOIN
                (
                    SELECT
                        chat_messages.id AS message_id,
                        chat_messages.customer_id,
                        chat_messages.number,
                        chat_messages.message,
                        chat_messages.sent AS message_type,
                        chat_messages.status,
                        chat_messages.created_at,
                        chat_messages.created_at AS last_communicated_at
                    FROM
                        chat_messages
                    ' . $messageWhereClause . '
                ) AS chat_messages
            ON
                customers.id=chat_messages.customer_id AND
                chat_messages.message_id=(
                    SELECT
                        MAX(id)
                    FROM
                        chat_messages
                    ' . $messageWhereClause . (! empty($messageWhereClause) ? ' AND ' : '') . '
                        chat_messages.customer_id=customers.id
                    GROUP BY
                        chat_messages.customer_id
                )
            LEFT JOIN
                (
                    SELECT
                        MAX(orders.id) as order_id,
                        orders.customer_id,
                        MAX(orders.created_at) as order_created,
                        orders.order_status as order_status
                    FROM
                        orders
                    ' . $orderWhereClause . '
                    GROUP BY
                        customer_id
                ) as orders
            ON
                customers.id=orders.customer_id
            LEFT JOIN
                (
                    SELECT
                        order_products.order_id as purchase_order_id,
                        order_products.purchase_status
                    FROM
                        order_products
                    GROUP BY
                        purchase_order_id
                ) as order_products
            ON
                orders.order_id=order_products.purchase_order_id
            LEFT JOIN
                (
                    SELECT
                        MAX(id) as lead_id,
                        leads.customer_id,
                        leads.rating as lead_rating,
                        MAX(leads.created_at) as lead_created,
                        leads.status as lead_status
                    FROM
                        leads
                    GROUP BY
                        customer_id
                ) AS leads
            ON
                customers.id = leads.customer_id
            LEFT JOIN store_website_twilio_numbers
            ON
                store_website_twilio_numbers.store_website_id = customers.store_website_id
            LEFT JOIN twilio_active_numbers
            On
                twilio_active_numbers.id = store_website_twilio_numbers.twilio_active_number_id
            WHERE
                customers.deleted_at IS NULL AND
                customers.id IS NOT NULL
            ' . $searchWhereClause . '
            ' . $filterWhereClause . '
            ' . $leadsWhereClause . '
            ' . $assignedWhereClause . '
            ' . $orderByClause . '
        ';
        $customers = DB::select($sql);

        echo '<!-- ';
        echo $sql;
        echo '-->';

        $oldSql = '
            SELECT
              *
            FROM
            (
                SELECT
                    customers.id,
                    customers.frequency,
                    customers.reminder_message,
                    customers.name,
                    customers.phone,
                    customers.is_blocked,
                    customers.is_flagged,
                    customers.is_error_flagged,
                    customers.is_priority,
                    customers.deleted_at,
                    customers.instruction_completed_at,
                    order_status,
                    purchase_status,
                    (
                    SELECT
                            mm5.status
                        FROM
                            leads mm5
                        WHERE
                            mm5.id=lead_id
                    ) AS lead_status,
                    lead_id,
                    (
                    SELECT
                            mm3.id
                        FROM
                            chat_messages mm3
                        WHERE
                            mm3.id=message_id
                    ) AS message_id,
                    (
                    SELECT
                            mm1.message
                        FROM
                            chat_messages mm1
                        WHERE mm1.id=message_id
                    ) as message,
                    (
                    SELECT
                            mm2.status
                        FROM
                            chat_messages mm2
                        WHERE
                            mm2.id = message_id
                    ) AS message_status,
                    (
                    SELECT
                            mm4.sent
                        FROM
                            chat_messages mm4
                        WHERE
                            mm4.id = message_id
                    ) AS message_type,
                    (
                    SELECT
                            mm2.created_at
                        FROM
                            chat_messages mm2
                        WHERE
                            mm2.id = message_id
                    ) as last_communicated_at
                FROM
                    (
                        SELECT
                            *
                        FROM
                            customers
                        LEFT JOIN
                            (
                                SELECT
                                    MAX(id) as lead_id,
                                    leads.customer_id as lcid,
                                    leads.rating as lead_rating,
                                    MAX(leads.created_at) as lead_created,
                                    leads.status as lead_status
                                FROM
                                    leads
                                GROUP BY
                                    customer_id
                            ) AS leads
                        ON
                            customers.id = leads.lcid
                        LEFT JOIN
                            (
                                SELECT
                                    MAX(id) as order_id,
                                    orders.customer_id as ocid,
                                    MAX(orders.created_at) as order_created,
                                    orders.order_status as order_status
                                FROM
                                    orders ' . $orderWhereClause . '
                                GROUP BY
                                    customer_id
                            ) as orders
                        ON
                            customers.id = orders.ocid
                        LEFT JOIN
                            (
                                SELECT
                                    order_products.order_id as purchase_order_id,
                                    order_products.purchase_status
                                FROM
                                    order_products
                                GROUP BY
                                    purchase_order_id
                            ) as order_products
                        ON
                            orders.order_id = order_products.purchase_order_id
                        ' . $join . ' JOIN
                            (
                                SELECT
                                    MAX(id) as message_id,
                                    customer_id,
                                    message,
                                    MAX(created_at) as message_created_At
                                FROM
                                    chat_messages ' . $messageWhereClause . '
                                GROUP BY
                                    customer_id
                                ORDER BY
                                    chat_messages.created_at ' . $orderby . '
                            ) AS chat_messages
                        ON
                            customers.id = chat_messages.customer_id
                    ) AS customers
                WHERE
                    deleted_at IS NULL
                ) AND (
                    id IS NOT NULL
                )
                ' . $searchWhereClause . '
          ) AS customers
          ' . $filterWhereClause . $leadsWhereClause .
            $assignedWhereClause .
            $orderByClause;

        $leads_data = DB::select('
                      SELECT COUNT(*) AS total,
                      (SELECT mm1.status FROM leads mm1 WHERE mm1.id = lead_id) as lead_final_status
                       FROM customers

                      LEFT JOIN (
                        SELECT MAX(id) as lead_id, leads.customer_id as lcid, leads.rating as lead_rating, MAX(leads.created_at) as lead_created, leads.status as lead_status
                        FROM leads
                        GROUP BY customer_id
                      ) AS leads
                      ON customers.id = leads.lcid

                      WHERE (deleted_at IS NULL) AND (id IS NOT NULL)
                      GROUP BY lead_final_status;
  							');

        $ids_list = [];

        foreach ($customers as $customer) {
            if ($customer->id != null) {
                $ids_list[] = $customer->id;
            }
        }

        $currentPage  = LengthAwarePaginator::resolveCurrentPage();
        $perPage      = empty(Setting::get('pagination')) ? 25 : Setting::get('pagination');
        $currentItems = array_slice($customers, $perPage * ($currentPage - 1), $perPage);
        $customers    = new LengthAwarePaginator($currentItems, count($customers), $perPage, $currentPage, [
            'path' => LengthAwarePaginator::resolveCurrentPath(),
        ]);

        return [$customers, $ids_list, $leads_data];
    }

    public function customerstest(Request $request)
    {
        $instructions = Instruction::with('remarks')->orderBy('is_priority', 'DESC')->orderBy('created_at', 'DESC')->select(['id', 'instruction', 'customer_id', 'assigned_to', 'pending', 'completed_at', 'verified', 'is_priority', 'created_at'])->get()->groupBy('customer_id')->toArray();
        $orders       = Order::latest()->select(['id', 'customer_id', 'order_status', 'created_at'])->get()->groupBy('customer_id')->toArray();

        $term             = $request->input('term');
        $reply_categories = ReplyCategory::all();
        $api_keys         = ApiKey::select('number')->get();

        $orderby = 'desc';
        if ($request->orderby == '') {
            $orderby = 'asc';
        }

        $customers_all  = Customer::all();
        $customer_names = Customer::select(['name'])->get()->toArray();

        $category_suggestion = Category::attr(['name' => 'category[]', 'class' => 'form-control select-multiple', 'multiple' => 'multiple'])
            ->renderAsDropdown();

        $brands = Brand::all()->toArray();

        foreach ($customer_names as $name) {
            $search_suggestions[] = $name['name'];
        }

        $users_array = Helpers::getUserArray(User::all());

        $last_set_id = MessageQueue::max('group_id');

        $queues_total_count = MessageQueue::where('status', '!=', 1)->where('group_id', $last_set_id)->count();
        $queues_sent_count  = MessageQueue::where('sent', 1)->where('status', '!=', 1)->where('group_id', $last_set_id)->count();

        $term            = $request->input('term');
        $delivery_status = [
            'Follow up for advance',
            'Proceed without Advance',
            'Advance received',
            'Cancel',
            'Prepaid',
            'Product Shiped form Italy',
            'In Transist from Italy',
            'Product shiped to Client',
            'Delivered',
        ];

        $orderWhereClause  = '';
        $searchWhereClause = '';
        $filterWhereClause = '';

        if (! empty($term)) {
            $searchWhereClause = " AND (customers.name LIKE '%$term%' OR customers.phone LIKE '%$term%' OR customers.instahandler LIKE '%$term%')";
            $orderWhereClause  = "WHERE orders.order_id LIKE '%$term%'";
        }

        $orderby = 'DESC';

        if ($request->input('orderby')) {
            $orderby = 'ASC';
        }

        $sortby = 'communication';

        $sortBys = [
            'name'          => 'name',
            'email'         => 'email',
            'phone'         => 'phone',
            'instagram'     => 'instahandler',
            'lead_created'  => 'lead_created',
            'order_created' => 'order_created',
            'rating'        => 'rating',
            'communication' => 'communication',
        ];

        if (isset($sortBys[$request->input('sortby')])) {
            $sortby = $sortBys[$request->input('sortby')];
        }

        $start_time = $request->input('range_start') ?? '';
        $end_time   = $request->input('range_end') ?? '';

        if ($start_time != '' && $end_time != '') {
            $filterWhereClause = " WHERE last_communicated_at BETWEEN '" . $start_time . "' AND '" . $end_time . "'";
        }

        if ($request->type == 'unread' || $request->type == 'unapproved') {
            $join              = 'RIGHT';
            $type              = $request->type == 'unread' ? 0 : ($request->type == 'unapproved' ? 1 : 0);
            $orderByClause     = " ORDER BY is_flagged DESC, message_status ASC, `last_communicated_at` $orderby";
            $filterWhereClause = " WHERE message_status = $type";

            if ($start_time != '' && $end_time != '') {
                $filterWhereClause = " WHERE (last_communicated_at BETWEEN '" . $start_time . "' AND '" . $end_time . "') AND message_status = $type";
            }
        } else {
            if ($sortby === 'communication') {
                $join          = 'LEFT';
                $orderByClause = " ORDER BY is_flagged DESC, last_communicated_at $orderby";
            }
        }

        $new_customers = DB::select('
  									SELECT * FROM
                    (SELECT customers.id, customers.name, customers.phone, customers.is_blocked, customers.is_flagged, customers.is_error_flagged, customers.is_priority, customers.deleted_at,
                    lead_id, lead_status, lead_created, lead_rating,
                    order_id, order_status, order_created, purchase_status,
                    (SELECT mm3.id FROM chat_messages mm3 WHERE mm3.id = message_id) AS message_id,
                    (SELECT mm1.message FROM chat_messages mm1 WHERE mm1.id = message_id) as message,
                    (SELECT mm2.status FROM chat_messages mm2 WHERE mm2.id = message_id) AS message_status,
                    (SELECT mm4.sent FROM chat_messages mm4 WHERE mm4.id = message_id) AS message_type,
                    (SELECT mm2.created_at FROM chat_messages mm2 WHERE mm2.id = message_id) as last_communicated_at

                    FROM (
                      SELECT * FROM customers

                      LEFT JOIN (
                        SELECT MAX(id) as lead_id, leads.customer_id as lcid, leads.rating as lead_rating, MAX(leads.created_at) as lead_created, leads.status as lead_status
                        FROM leads
                        GROUP BY customer_id
                      ) AS leads
                      ON customers.id = leads.lcid

                      LEFT JOIN
                        (SELECT MAX(id) as order_id, orders.customer_id as ocid, MAX(orders.created_at) as order_created, orders.order_status as order_status FROM orders ' . $orderWhereClause . ' GROUP BY customer_id) as orders
                          LEFT JOIN (SELECT order_products.order_id as purchase_order_id, order_products.purchase_status FROM order_products) as order_products
                          ON orders.order_id = order_products.purchase_order_id

                      ' . $join . ' JOIN (SELECT MAX(id) as message_id, customer_id, message, MAX(created_at) as message_created_At FROM chat_messages GROUP BY customer_id ORDER BY created_at DESC) AS chat_messages
                      ON customers.id = chat_messages.customer_id


                    ) AS customers
                    WHERE (deleted_at IS NULL)
                    ' . $searchWhereClause . '
                    ' . $orderByClause . '
                  ) AS customers
                  ' . $filterWhereClause . ';
  							');

        $ids_list = [];
        foreach ($new_customers as $customer) {
            $ids_list[] = $customer->id;
        }

        $currentPage  = LengthAwarePaginator::resolveCurrentPage();
        $perPage      = Setting::get('pagination');
        $currentItems = array_slice($new_customers, $perPage * ($currentPage - 1), $perPage);

        $new_customers = new LengthAwarePaginator($currentItems, count($new_customers), $perPage, $currentPage, [
            'path' => LengthAwarePaginator::resolveCurrentPath(),
        ]);

        dd([
            'customers'           => $new_customers,
            'customers_all'       => $customers_all,
            'customer_ids_list'   => json_encode($ids_list),
            'users_array'         => $users_array,
            'instructions'        => $instructions,
            'term'                => $term,
            'orderby'             => $orderby,
            'type'                => $type,
            'queues_total_count'  => $queues_total_count,
            'queues_sent_count'   => $queues_sent_count,
            'search_suggestions'  => $search_suggestions,
            'reply_categories'    => $reply_categories,
            'orders'              => $orders,
            'api_keys'            => $api_keys,
            'category_suggestion' => $category_suggestion,
            'brands'              => $brands,
        ]);

        return view('customers.index', [
            'customers'           => $new_customers,
            'customers_all'       => $customers_all,
            'customer_ids_list'   => json_encode($ids_list),
            'users_array'         => $users_array,
            'instructions'        => $instructions,
            'term'                => $term,
            'orderby'             => $orderby,
            'type'                => $type,
            'queues_total_count'  => $queues_total_count,
            'queues_sent_count'   => $queues_sent_count,
            'search_suggestions'  => $search_suggestions,
            'reply_categories'    => $reply_categories,
            'orders'              => $orders,
            'api_keys'            => $api_keys,
            'category_suggestion' => $category_suggestion,
            'brands'              => $brands,
        ]);
    }

    public function search(Request $request)
    {
        $keyword  = $request->get('keyword');
        $messages = ChatMessage::where('message', 'LIKE', "%$keyword%")->where('customer_id', '>', 0)->groupBy('customer_id')->with('customer')->select(DB::raw('MAX(id) as message_id, customer_id, message'))->get()->map(function ($item) {
            return [
                'customer_id'   => $item->customer_id,
                'customer_name' => $item->customer->name,
                'message_id'    => $item->message_id,
                'message'       => $item->message,
            ];
        });

        return response()->json($messages);
    }

    public function loadMoreMessages(Request $request)
    {
        $limit = request()->get('limit', 3);

        $customer = Customer::find($request->customer_id);

        $chat_messages = $customer->whatsapps_all()->where('message', '!=', '')->skip(1)->take($limit)->get();

        $messages = [];

        foreach ($chat_messages as $chat_message) {
            $messages[] = $chat_message->message;
        }

        return response()->json([
            'messages' => $messages,
        ]);
    }

    public function sendAdvanceLink(Request $request, $id)
    {
        $customer = Customer::find($id);

        $options = [
            'trace'              => true,
            'connection_timeout' => 120,
            'wsdl_cache'         => WSDL_CACHE_NONE,
        ];

        $proxy     = new \SoapClient(config('magentoapi.url'), $options);
        $sessionId = $proxy->login(config('magentoapi.user'), config('magentoapi.password'));

        $errors = 0;

        $productData = [
            'price'         => $request->price_inr,
            'special_price' => $request->price_special,
        ];

        try {
            $result = $proxy->catalogProductUpdate($sessionId, 'QUICKADVANCEPAYMENT', $productData);

            $params = [
                'customer_id' => $customer->id,
                'number'      => null,
                'message'     => 'https://www.sololuxury.co.in/advance-payment-product.html',
                'user_id'     => Auth::id(),
                'approve'     => 0,
                'status'      => 1,
            ];

            ChatMessage::create($params);

            return response('success');
        } catch (Exception $e) {
            $errors++;

            return response($e->getMessage());
        }
    }

    public function initiateFollowup(Request $request, $id)
    {
        CommunicationHistory::create([
            'model_id'   => $id,
            'model_type' => Customer::class,
            'type'       => 'initiate-followup',
            'method'     => 'whatsapp',
        ]);

        return redirect()->route('customer.show', $id)->with('success', 'You have successfully initiated follow up sequence!');
    }

    public function stopFollowup(Request $request, $id)
    {
        $histories = CommunicationHistory::where('model_id', $id)->where('model_type', Customer::class)->where('type', 'initiate-followup')->where('is_stopped', 0)->get();

        foreach ($histories as $history) {
            $history->is_stopped = 1;
            $history->save();
        }

        return redirect()->route('customer.show', $id)->with('success', 'You have successfully stopped follow up sequence!');
    }

    public function export()
    {
        $customers = Customer::select(['name', 'phone'])->get()->toArray();

        return Excel::download(new CustomersExport($customers), 'customers.xlsx');
    }

    public function block(Request $request)
    {
        $customer = Customer::find($request->customer_id);

        if ($customer->is_blocked == 0) {
            $customer->is_blocked = 1;
        } else {
            $customer->is_blocked = 0;
        }

        $customer->save();

        return response()->json(['is_blocked' => $customer->is_blocked]);
    }

    public function flag(Request $request)
    {
        $customer = Customer::find($request->customer_id);

        if ($customer->is_flagged == 0) {
            $customer->is_flagged = 1;
        } else {
            $customer->is_flagged = 0;
        }

        $customer->save();

        return response()->json(['is_flagged' => $customer->is_flagged]);
    }

    public function addInWhatsappList(Request $request)
    {
        $customer = Customer::find($request->customer_id);

        if ($customer->in_w_list == 0) {
            $customer->in_w_list = 1;
        } else {
            $customer->in_w_list = 0;
        }

        $customer->save();

        return response()->json(['in_w_list' => $customer->in_w_list]);
    }

    public function prioritize(Request $request)
    {
        $customer = Customer::find($request->customer_id);

        if ($customer->is_priority == 0) {
            $customer->is_priority = 1;
        } else {
            $customer->is_priority = 0;
        }

        $customer->save();

        return response()->json(['is_priority' => $customer->is_priority]);
    }

    public function sendInstock(Request $request)
    {
        $customer = Customer::find($request->customer_id);

        $products = Product::where('supplier', 'In-stock')->latest()->get();

        $params = [
            'customer_id' => $customer->id,
            'number'      => null,
            'user_id'     => Auth::id(),
            'message'     => 'In Stock Products',
            'status'      => 1,
        ];

        $chat_message = ChatMessage::create($params);

        foreach ($products as $product) {
            $chat_message->attachMedia($product->getMedia(config('constants.media_tags'))->first(), config('constants.media_tags'));
        }

        return response('success');
    }

    public function load(Request $request)
    {
        $first_customer  = Customer::find($request->first_customer);
        $second_customer = Customer::find($request->second_customer);

        return response()->json([
            'first_customer'  => $first_customer,
            'second_customer' => $second_customer,
        ]);
    }

    public function merge(Request $request)
    {
        $this->validate($request, [
            'name'         => 'required|min:3|max:255',
            'email'        => 'required_without_all:phone,instahandler|nullable|email',
            'phone'        => 'required_without_all:email,instahandler|nullable|numeric|regex:/^[91]{2}/|digits:12|unique:customers,phone,' . $request->first_customer_id,
            'instahandler' => 'required_without_all:email,phone|nullable|min:3|max:255',
            'rating'       => 'required|numeric',
            'address'      => 'sometimes|nullable|min:3|max:255',
            'city'         => 'sometimes|nullable|min:3|max:255',
            'country'      => 'sometimes|nullable|min:3|max:255',
            'pincode'      => 'sometimes|nullable|max:6',
        ]);

        $first_customer = Customer::find($request->first_customer_id);

        $first_customer->name            = $request->name;
        $first_customer->email           = $request->email;
        $first_customer->phone           = $request->phone;
        $first_customer->whatsapp_number = $request->whatsapp_number;
        $first_customer->instahandler    = $request->instahandler;
        $first_customer->rating          = $request->rating;
        $first_customer->address         = $request->address;
        $first_customer->city            = $request->city;
        $first_customer->country         = $request->country;
        $first_customer->pincode         = $request->pincode;

        $first_customer->save();

        $chat_messages = ChatMessage::where('customer_id', $request->second_customer_id)->get();

        foreach ($chat_messages as $chat) {
            $chat->customer_id = $first_customer->id;
            $chat->save();
        }

        $messages = Message::where('customer_id', $request->second_customer_id)->get();

        foreach ($messages as $message) {
            $message->customer_id = $first_customer->id;
            $message->save();
        }

        $leads = ErpLeads::where('customer_id', $request->second_customer_id)->get();

        foreach ($leads as $lead) {
            $lead->customer_id = $first_customer->id;
            $lead->save();
        }

        $orders = Order::where('customer_id', $request->second_customer_id)->get();

        foreach ($orders as $order) {
            $order->customer_id = $first_customer->id;
            $order->save();
        }

        $instructions = Instruction::where('customer_id', $request->second_customer_id)->get();

        foreach ($instructions as $instruction) {
            $instruction->customer_id = $first_customer->id;
            $instruction->save();
        }

        $second_customer = Customer::find($request->second_customer_id);
        $second_customer->delete();

        return redirect()->route('customer.index');
    }

    public function import(Request $request)
    {
        $this->validate($request, [
            'file' => 'required|mimes:xls,xlsx',
        ]);

        (new CustomerImport)->queue($request->file('file'));

        return redirect()->back()->with('success', 'Customers are being imported in the background');
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        $solo_numbers = (new SoloNumbers)->all();

        return view('customers.create', [
            'solo_numbers' => $solo_numbers,
        ]);
    }

    /**
     * Store a newly created resource in storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $this->validate($request, [
            'name'         => 'required|min:3|max:255',
            'email'        => 'required_without_all:phone,instahandler|nullable|email',
            'phone'        => 'required_without_all:email,instahandler|nullable|numeric|digits:12|unique:customers',
            'instahandler' => 'required_without_all:email,phone|nullable|min:3|max:255',
            'rating'       => 'required|numeric',
            'address'      => 'sometimes|nullable|min:3|max:255',
            'city'         => 'sometimes|nullable|min:3|max:255',
            'country'      => 'sometimes|nullable|min:2|max:255',
            'pincode'      => 'sometimes|nullable|max:6',
        ]);

        $customer                   = new Customer;
        $customer->store_website_id = ! empty($request->store_website_id) ? $request->store_website_id : '';
        $customer->name             = $request->name;
        $customer->email            = $request->email;
        $customer->phone            = $request->phone;
        if (empty($request->whatsapp_number)) {
            //get default whatsapp number for vendor from whatsapp config
            $task_info = DB::table('whatsapp_configs')
                ->select('*')
                ->whereRaw('find_in_set(' . self::DEFAULT_FOR . ',default_for)')
                ->first();

            $data['whatsapp_number'] = $task_info->number;
        }

        $customer->whatsapp_number = $request->whatsapp_number;
        $customer->instahandler    = $request->instahandler;
        $customer->rating          = $request->rating;
        $customer->address         = $request->address;
        $customer->city            = $request->city;
        $customer->country         = $request->country;
        $customer->pincode         = $request->pincode;

        $customer->save();

        return redirect()->back()->with('success', 'You have successfully added new customer!');
    }

    public function addNote($id, Request $request)
    {
        $customer = Customer::findOrFail($id);
        $notes    = $customer->notes;
        if (! is_array($notes)) {
            $notes = [];
        }

        $notes[]         = $request->get('note');
        $customer->notes = $notes;
        $customer->save();

        return response()->json([
            'status' => 'success',
        ]);
    }

    /**
     * Display the specified resource.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        $customer               = Customer::with(['call_recordings', 'orders', 'leads', 'facebookMessages'])->where('id', $id)->first();
        $customers              = Customer::select(['id', 'name', 'email', 'phone', 'instahandler'])->get();
        $emails                 = [];
        $lead_status            = (new status)->all();
        $users_array            = Helpers::getUserArray(User::all());
        $brands                 = Brand::all()->toArray();
        $reply_categories       = ReplyCategory::all();
        $instruction_categories = InstructionCategory::all();
        $instruction_replies    = Reply::where('model', 'Instruction')->get();
        $order_status_report    = OrderStatuses::all();
        $purchase_status        = (new PurchaseStatus)->all();
        $solo_numbers           = (new SoloNumbers)->all();
        $api_keys               = ApiKey::select(['number'])->get();
        $broadcastsNumbers      = collect(\DB::select('select number from whatsapp_configs where is_customer_support = 0'))->pluck('number', 'number')->toArray();
        $suppliers              = Supplier::select(['id', 'supplier'])
            ->whereRaw('suppliers.id IN (SELECT product_suppliers.supplier_id FROM product_suppliers)')->get();
        $category_suggestion = Category::attr(['name' => 'category[]', 'class' => 'form-control select-multiple', 'multiple' => 'multiple'])
            ->renderAsDropdown();

        $facebookMessages = null;
        if (@$customer->facebook_id) {
            $facebookMessages = $customer->facebookMessages()->get();
        }

        return view('customers.show', [
            'customer'               => $customer,
            'customers'              => $customers,
            'lead_status'            => $lead_status,
            'brands'                 => $brands,
            'users_array'            => $users_array,
            'reply_categories'       => $reply_categories,
            'instruction_categories' => $instruction_categories,
            'instruction_replies'    => $instruction_replies,
            'order_status_report'    => $order_status_report,
            'purchase_status'        => $purchase_status,
            'solo_numbers'           => $solo_numbers,
            'api_keys'               => $api_keys,
            'emails'                 => $emails,
            'category_suggestion'    => $category_suggestion,
            'suppliers'              => $suppliers,
            'facebookMessages'       => $facebookMessages,
            'broadcastsNumbers'      => $broadcastsNumbers,
        ]);
    }

    public function exportCommunication($id)
    {
        $messages = ChatMessage::where('customer_id', $id)->orderBy('created_at', 'DESC')->get();

        $html = view('customers.chat_export', compact('messages'));

        $pdf = new Dompdf();
        $pdf->loadHtml($html);
        $pdf->render();
        $pdf->stream('orders.pdf');
    }

    public function postShow(Request $request, $id)
    {
        $customer          = Customer::with(['call_recordings', 'orders', 'leads', 'facebookMessages'])->where('id', $id)->first();
        $storeActiveNumber = StoreWebsiteTwilioNumber::select('twilio_active_numbers.account_sid as a_sid', 'twilio_active_numbers.phone_number as phone_number')
            ->join('twilio_active_numbers', 'twilio_active_numbers.id', '=', 'store_website_twilio_numbers.twilio_active_number_id')
            ->where('store_website_twilio_numbers.store_website_id', $customer->store_website_id)
            ->first(); // Get store website active number assigned with customer
        $customers = Customer::select(['id', 'name', 'email', 'phone', 'instahandler'])->get();

        $searchedMessages = null;
        if ($request->get('sm')) {
            $searchedMessages = ChatMessage::where('customer_id', $id)->where('message', 'LIKE', '%' . $request->get('sm') . '%')->get();
        }

        $customer_ids = json_decode($request->customer_ids ?? '[0]');
        $key          = array_search($id, $customer_ids);

        if ($key != 0) {
            $previous_customer_id = $customer_ids[$key - 1];
        } else {
            $previous_customer_id = 0;
        }

        if ($key == (count($customer_ids) - 1)) {
            $next_customer_id = 0;
        } else {
            $next_customer_id = $customer_ids[$key + 1];
        }

        $emails                 = [];
        $lead_status            = (new status)->all();
        $users_array            = Helpers::getUserArray(User::all());
        $brands                 = Brand::all()->toArray();
        $reply_categories       = ReplyCategory::orderby('id', 'DESC')->get();
        $instruction_categories = InstructionCategory::all();
        $instruction_replies    = Reply::where('model', 'Instruction')->get();
        $order_status_report    = OrderStatuses::all();
        $purchase_status        = (new PurchaseStatus)->all();
        $solo_numbers           = (new SoloNumbers)->all();
        $api_keys               = ApiKey::select(['number'])->get();
        $suppliers              = Supplier::select(['id', 'supplier'])->get();
        $broadcastsNumbers      = collect(\DB::select('select number from whatsapp_configs where is_customer_support = 0'))->pluck('number', 'number')->toArray();
        $category_suggestion    = Category::attr(['name' => 'category[]', 'class' => 'form-control select-multiple', 'multiple' => 'multiple'])
            ->renderAsDropdown();

        $facebookMessages = null;
        if ($customer->facebook_id) {
            $facebookMessages = $customer->facebookMessages()->get();
        }

        return view('customers.show', [
            'customer_ids'           => json_encode($customer_ids),
            'previous_customer_id'   => $previous_customer_id,
            'next_customer_id'       => $next_customer_id,
            'customer'               => $customer,
            'customers'              => $customers,
            'lead_status'            => $lead_status,
            'brands'                 => $brands,
            'users_array'            => $users_array,
            'reply_categories'       => $reply_categories,
            'instruction_categories' => $instruction_categories,
            'instruction_replies'    => $instruction_replies,
            'order_status_report'    => $order_status_report,
            'purchase_status'        => $purchase_status,
            'solo_numbers'           => $solo_numbers,
            'api_keys'               => $api_keys,
            'emails'                 => $emails,
            'category_suggestion'    => $category_suggestion,
            'suppliers'              => $suppliers,
            'facebookMessages'       => $facebookMessages,
            'searchedMessages'       => $searchedMessages,
            'broadcastsNumbers'      => $broadcastsNumbers,
            'storeActiveNumber'      => $storeActiveNumber,
        ]);
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function emailInbox(Request $request)
    {
        $inbox = 'to';
        if ($request->type != 'inbox') {
            $inbox = 'from';
        }

        $customer = Customer::find($request->customer_id);

        $emails = Email::select()->where($inbox, $customer->email)->get();

        $count = count($emails);
        foreach ($emails as $key => $email) {
            $emails_array[$count + $key]['id']      = $email->id;
            $emails_array[$count + $key]['subject'] = $email->subject;
            $emails_array[$count + $key]['type']    = $email->type;
            $emails_array[$count + $key]['message'] = $email->message;
            $emails_array[$count + $key]['date']    = $email->created_at;
        }
        $emails_array = array_values(Arr::sort($emails_array, function ($value) {
            return $value['date'];
        }));
        $emails_array = array_reverse($emails_array);

        $currentPage  = LengthAwarePaginator::resolveCurrentPage();
        $perPage      = 5;
        $currentItems = array_slice($emails_array, $perPage * ($currentPage - 1), $perPage);
        $emails       = new LengthAwarePaginator($currentItems, count($emails_array), $perPage, $currentPage, ['path' => LengthAwarePaginator::resolveCurrentPath()]);
        $view         = view('customers.email', [
            'emails' => $emails,
            'type'   => $request->type,
        ])->render();

        return response()->json(['emails' => $view]);
    }

    public function emailFetch(Request $request)
    {
        $email   = Email::find($request->id);
        $content = $email->message;

        if ($email->template == 'customer-simple') {
            $content = (new CustomerEmail($email->subject, $email->message, $email->from))->render();
        } else {
            if ($email->template == 'refund-processed') {
                $details = json_decode($email->additional_data, true);

                $content = (new RefundProcessed($details['order_id'], $details['product_names']))->render();
            } else {
                if ($email->template == 'order-confirmation') {
                    $order = Order::find($email->additional_data);

                    $content = (new OrderConfirmation($order))->render();
                } else {
                    if ($email->template == 'advance-receipt') {
                        $order = Order::find($email->additional_data);

                        $content = (new AdvanceReceipt($order))->render();
                    } else {
                        if ($email->template == 'issue-credit') {
                            $customer = Customer::find($email->model_id);

                            $content = (new IssueCredit($customer))->render();
                        } else {
                            $content = 'No Template';
                        }
                    }
                }
            }
        }

        return response()->json(['email' => $content]);
    }

    public function emailSend(Request $request)
    {
        $this->validate($request, [
            'subject' => 'required|min:3|max:255',
            'message' => 'required',
        ]);

        $customer = Customer::find($request->customer_id);

        //Store ID Email
        $emailAddressDetails = EmailAddress::select()->where(['store_website_id' => $customer->store_website_id])->first();

        if ($request->order_id != '') {
            $order_data = json_encode(['order_id' => $request->order_id]);
        }

        $emailClass = (new CustomerEmail($request->subject, $request->message, $emailAddressDetails->from_address))->build();

        $email = Email::create([
            'model_id'         => $customer->id,
            'model_type'       => Customer::class,
            'from'             => $emailAddressDetails->from_address,
            'to'               => $customer->email,
            'subject'          => $request->subject,
            'message'          => $emailClass->render(),
            'template'         => 'customer-simple',
            'additional_data'  => isset($order_data) ? $order_data : '',
            'status'           => 'pre-send',
            'store_website_id' => null,
        ]);
       
        \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');

        return redirect()->route('customer.show', $customer->id)->withSuccess('You have successfully sent an email!');
    }

    public function edit($id)
    {
        $customer     = Customer::find($id);
        $solo_numbers = (new SoloNumbers)->all();

        return view('customers.edit', [
            'customer'     => $customer,
            'solo_numbers' => $solo_numbers,
        ]);
    }

    public function updateReminder(Request $request)
    {
        $customer                      = Customer::find($request->get('customer_id'));
        $customer->frequency           = $request->get('frequency');
        $customer->reminder_message    = $request->get('message');
        $customer->reminder_from       = $request->get('reminder_from', '0000-00-00 00:00');
        $customer->reminder_last_reply = $request->get('reminder_last_reply', 0);
        $customer->save();

        return response()->json([
            'success',
        ]);
    }

    /**
     * Update the specified resource in storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        $customer = Customer::find($id);

        $this->validate($request, [
            'name'          => 'required|min:3|max:255',
            'email'         => 'required_without_all:phone,instahandler|nullable|email',
            'phone'         => 'required_without_all:email,instahandler|nullable|unique:customers,phone,' . $id,
            'instahandler'  => 'required_without_all:email,phone|nullable|min:3|max:255',
            'rating'        => 'required|numeric',
            'address'       => 'sometimes|nullable|min:3|max:255',
            'city'          => 'sometimes|nullable|min:3|max:255',
            'country'       => 'sometimes|nullable|min:2|max:255',
            'pincode'       => 'sometimes|nullable|max:6',
            'shoe_size'     => 'sometimes|nullable',
            'clothing_size' => 'sometimes|nullable',
            'gender'        => 'sometimes|nullable|string',
            'credit'        => 'sometimes|nullable|numeric',
        ]);

        $customer->name  = $request->name;
        $customer->email = $request->email;
        $customer->phone = $request->phone;
        if ($request->get('whatsapp_number', false)) {
            $customer->whatsapp_number = $request->whatsapp_number;
        }
        $customer->instahandler   = $request->instahandler;
        $customer->rating         = $request->rating;
        $customer->do_not_disturb = $request->do_not_disturb == 'on' ? 1 : 0;
        $customer->is_blocked     = $request->is_blocked == 'on' ? 1 : 0;
        $customer->address        = $request->address;
        $customer->city           = $request->city;
        $customer->country        = $request->country;
        $customer->pincode        = $request->pincode;
        $customer->credit         = $request->credit;
        $customer->shoe_size      = $request->shoe_size;
        $customer->clothing_size  = $request->clothing_size;
        $customer->gender         = $request->gender;

        $customer->save();

        if ($request->do_not_disturb == 'on') {
            \Log::channel('customerDnd')->debug('(Customer ID ' . $customer->id . ' line ' . $customer->name . ' ' . $customer->number . ': Added To DND');
            MessageQueue::where('customer_id', $customer->id)->delete();
        }

        return redirect()->route('customer.show', $id)->with('success', 'You have successfully updated the customer!');
    }

    public function updateNumber(Request $request, $id)
    {
        $customer = Customer::find($id);

        $customer->whatsapp_number = $request->whatsapp_number;
        $customer->save();

        return response('success');
    }

    public function updateDnd(Request $request, $id)
    {
        $customer = Customer::find($id);

        if ($customer->do_not_disturb == 1) {
            $customer->do_not_disturb = 0;
        } else {
            $customer->do_not_disturb = 1;
        }

        $customer->save();

        if ($request->do_not_disturb == 1) {
            \Log::channel('customerDnd')->debug('(Customer ID ' . $customer->id . ' line ' . $customer->name . ' ' . $customer->number . ': Added To DND');
            MessageQueue::where('customer_id', $customer->id)->delete();
        }

        return response()->json([
            'do_not_disturb' => $customer->do_not_disturb,
        ]);
    }

    public function updatePhone(Request $request, $id)
    {
        $this->validate($request, [
            'phone' => 'required|numeric|unique:customers,phone',
        ]);

        $customer = Customer::find($id);

        $customer->phone = $request->phone;
        $customer->save();

        return response('success');
    }

    public function issueCredit(Request $request)
    {
        $customer = Customer::find($request->customer_id);

        $emailClass = (new \App\Mails\Manual\SendIssueCredit($customer))->build();

        $email = Email::create([
            'model_id'        => $customer->id,
            'model_type'      => Customer::class,
            'from'            => $emailClass->fromMailer,
            'to'              => $customer->email,
            'subject'         => $emailClass->subject,
            'message'         => $emailClass->render(),
            'template'        => 'issue-credit',
            'additional_data' => '',
            'status'          => 'pre-send',
        ]);
       
        \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');

        $message     = "Dear $customer->name, this is to confirm that an amount of Rs. $customer->credit - is credited with us against your previous order. You can use this credit note for reference on your next purchase. Thanks & Regards, Solo Luxury Team";
        $requestData = new Request();
        $requestData->setMethod('POST');
        $requestData->request->add(['customer_id' => $customer->id, 'message' => $message]);

        app(\App\Http\Controllers\WhatsAppController::class)->sendMessage($requestData, 'customer');

        CommunicationHistory::create([
            'model_id'   => $customer->id,
            'model_type' => Customer::class,
            'type'       => 'issue-credit',
            'method'     => 'whatsapp',
        ]);
    }

    public function sendSuggestion(Request $request)
    {
        $customer = Customer::find($request->customer_id);
        $params   = [
            'customer_id' => $customer->id,
            'number'      => $request->number,
            'brands'      => '',
            'categories'  => '',
            'size'        => '',
            'supplier'    => '',
        ];

        if ($request->brand[0] != null) {
            $products = Product::whereIn('brand', $request->brand);

            $params['brands'] = json_encode($request->brand);
        }

        if ($request->category[0] != null && $request->category[0] != 1) {
            $categorySel      = $request->category;
            $category         = \App\Category::whereIn('parent_id', $categorySel)->get()->pluck('id')->toArray();
            $categorySelected = array_merge($categorySel, $category);
            if ($request->brand[0] != null) {
                $products = $products->whereIn('category', $categorySelected);
            } else {
                $products = Product::whereIn('category', $categorySelected);
            }

            $params['categories'] = json_encode($request->category);
        }

        if ($request->size[0] != null) {
            if ($request->brand[0] != null || ($request->category[0] != 1 && $request->category[0] != null)) {
                $products = $products->where(function ($query) use ($request) {
                    foreach ($request->size as $size) {
                        $query->orWhere('size', 'LIKE', "%$size%");
                    }

                    return $query;
                });
            } else {
                $products = Product::where(function ($query) use ($request) {
                    foreach ($request->size as $size) {
                        $query->orWhere('size', 'LIKE', "%$size%");
                    }

                    return $query;
                });
            }

            $params['size'] = json_encode($request->size);
        }

        if ($request->supplier[0] != null) {
            if ($request->brand[0] != null || ($request->category[0] != 1 && $request->category[0] != null) || $request->size[0] != null) {
                $products = $products->join('product_suppliers as ps', 'ps.sku', 'products.sku');
                $products = $products->whereIn('ps.supplier_id', $request->supplier);
                $products = $products->groupBy('products.id');
            } else {
                $products = $products->join('product_suppliers as ps', 'ps.sku', 'products.sku');
                $products = $products->whereIn('ps.supplier_id', $request->supplier);
                $products = $products->groupBy('products.id');
            }

            $params['supplier'] = json_encode($request->supplier);
        }

        if ($request->brand[0] == null && ($request->category[0] == 1 || $request->category[0] == null) && $request->size[0] == null && $request->supplier[0] == null) {
            $products = (new Product)->newQuery();
        }

        $price = explode(',', $request->get('price'));

        $products = $products->whereBetween('price_inr_special', [$price[0], $price[1]]);

        $products = $products->where('category', '!=', 1)->select(['products.*'])->latest()->take($request->number)->get();

        if ($customer->suggestion) {
            $suggestion = SuggestedProduct::find($customer->suggestion->id);
            $suggestion->update($params);
        } else {
            $suggestion = SuggestedProduct::create($params);
        }

        if (count($products) > 0) {
            $params = [
                'number'      => null,
                'user_id'     => Auth::id(),
                'approved'    => 0,
                'status'      => 1,
                'message'     => 'Suggested images',
                'customer_id' => $customer->id,
            ];

            $count = 0;

            foreach ($products as $product) {
                if (! $product->suggestions->contains($suggestion->id)) {
                    if ($image = $product->getMedia(config('constants.attach_image_tag'))->first()) {
                        if ($count == 0) {
                            $params['status']            = ChatMessage::CHAT_SUGGESTED_IMAGES;
                            $chat_message                = ChatMessage::create($params);
                            $suggestion->chat_message_id = $chat_message->id;
                            $suggestion->save();
                        }

                        $chat_message->attachMedia($image->getKey(), config('constants.media_tags'));
                        $count++;
                    }

                    $product->suggestions()->attach($suggestion->id);
                }
            }
        }

        if ($request->ajax()) {
            return response()->json(['code' => 200, 'data' => [], 'message' => 'Your records has been update successfully']);
        }

        return redirect()->route('customer.show', $customer->id)->withSuccess('You have successfully created suggested message');
    }

    public function sendScraped(Request $request)
    {
        $customer = Customer::find($request->customer_id);
        $products = new Product;
        if ($request->brand[0] != null) {
            $products = $products->whereIn('brand', $request->brand);
        }

        if ($request->category[0] != null && $request->category[0] != 1) {
            $products = $products->whereIn('category', $request->category);
        }
        $total_images = $request->total_images;
        if (! $total_images) {
            $total_images = 20;
        }
        $products = $products->where('is_scraped', 1)->where('is_without_image', 0)->where('category', '!=', 1)->orderBy(DB::raw('products.created_at'), 'DESC')->take($total_images)->get();
        if (count($products) > 0) {
            $params = [
                'number'      => null,
                'user_id'     => Auth::id(),
                'approved'    => 0,
                'status'      => 1,
                'message'     => 'Suggested images',
                'customer_id' => $customer->id,
            ];

            $count = 0;

            foreach ($products as $product) {
                if ($image = $product->getMedia(config('constants.media_tags'))->first()) {
                    if ($count == 0) {
                        $chat_message = ChatMessage::create($params);
                    }

                    $chat_message->attachMedia($image->getKey(), config('constants.media_tags'));
                    $count++;
                }
            }
        }

        if ($request->ajax()) {
            return response('success');
        }

        return redirect()->route('customer.show', $customer->id)->withSuccess('You have successfully created suggested message');
    }

    public function attachAll(Request $request)
    {
        $data       = [];
        $term       = $request->input('term');
        $roletype   = $request->input('roletype');
        $model_type = $request->input('model_type');

        $data['term']     = $term;
        $data['roletype'] = $roletype;

        $doSelection = $request->input('doSelection');

        if (! empty($doSelection)) {
            $data['doSelection'] = true;
            $data['model_id']    = $request->input('model_id');
            $data['model_type']  = $request->input('model_type');

            $data['selected_products'] = ProductController::getSelectedProducts($data['model_type'], $data['model_id']);
        }

        if ($request->brand[0] != null) {
            $productQuery = (new Product())->newQuery()
                ->latest()->whereIn('brand', $request->brand);
        }

        if ($request->color[0] != null) {
            if ($request->brand[0] != null) {
                $productQuery = $productQuery->whereIn('color', $request->color);
            } else {
                $productQuery = (new Product())->newQuery()
                    ->latest()->whereIn('color', $request->color);
            }
        }

        if ($request->category[0] != null && $request->category[0] != 1) {
            $category_children = [];

            foreach ($request->category as $category) {
                $is_parent = Category::isParent($category);

                if ($is_parent) {
                    $childs = Category::find($category)->childs()->get();

                    foreach ($childs as $child) {
                        $is_parent = Category::isParent($child->id);

                        if ($is_parent) {
                            $children = Category::find($child->id)->childs()->get();

                            foreach ($children as $chili) {
                                array_push($category_children, $chili->id);
                            }
                        } else {
                            array_push($category_children, $child->id);
                        }
                    }
                } else {
                    array_push($category_children, $category);
                }
            }

            if ($request->brand[0] != null || $request->color[0] != null) {
                $productQuery = $productQuery->whereIn('category', $category_children);
            } else {
                $productQuery = (new Product())->newQuery()
                    ->latest()->whereIn('category', $category_children);
            }
        }

        if ($request->price != null) {
            $exploded = explode(',', $request->price);
            $min      = $exploded[0];
            $max      = $exploded[1];

            if ($min != '0' || $max != '400000') {
                if ($request->brand[0] != null || $request->color[0] != null || ($request->category[0] != null && $request->category[0] != 1)) {
                    $productQuery = $productQuery->whereBetween('price_inr_special', [$min, $max]);
                } else {
                    $productQuery = (new Product())->newQuery()
                        ->latest()->whereBetween('price_inr_special', [$min, $max]);
                }
            }
        }

        if ($request->supplier[0] != null) {
            $suppliers_list = implode(',', $request->supplier);

            if ($request->brand[0] != null || $request->color[0] != null || ($request->category[0] != null && $request->category[0] != 1) || $request->price != '0,400000') {
                $productQuery = $productQuery->with('Suppliers')->whereRaw("products.id in (SELECT product_id FROM product_suppliers WHERE supplier_id IN ($suppliers_list))");
            } else {
                $productQuery = (new Product())->newQuery()->with('Suppliers')
                    ->latest()->whereRaw("products.id IN (SELECT product_id FROM product_suppliers WHERE supplier_id IN ($suppliers_list))");
            }
        }

        if (trim($request->size) != '') {
            if ($request->brand[0] != null || $request->color[0] != null || ($request->category[0] != null && $request->category[0] != 1) || $request->price != '0,400000' || $request->supplier[0] != null) {
                $productQuery = $productQuery->whereNotNull('size')->where('size', 'LIKE', "%$request->size%");
            } else {
                $productQuery = (new Product())->newQuery()
                    ->latest()->whereNotNull('size')->where('size', 'LIKE', "%$request->size%");
            }
        }

        if ($request->location[0] != null) {
            if ($request->brand[0] != null || $request->color[0] != null || ($request->category[0] != null && $request->category[0] != 1) || $request->price != '0,400000' || $request->supplier[0] != null || trim($request->size) != '') {
                $productQuery = $productQuery->whereIn('location', $request->location);
            } else {
                $productQuery = (new Product())->newQuery()
                    ->latest()->whereIn('location', $request->location);
            }

            $data['location'] = $request->location[0];
        }

        if ($request->type[0] != null) {
            if ($request->brand[0] != null || $request->color[0] != null || ($request->category[0] != null && $request->category[0] != 1) || $request->price != '0,400000' || $request->supplier[0] != null || trim($request->size) != '' || $request->location[0] != null) {
                if (count($request->type) > 1) {
                    $productQuery = $productQuery->where('is_scraped', 1)->orWhere('status', 2);
                } else {
                    if ($request->type[0] == 'scraped') {
                        $productQuery = $productQuery->where('is_scraped', 1);
                    } elseif ($request->type[0] == 'imported') {
                        $productQuery = $productQuery->where('status', 2);
                    } else {
                        $productQuery = $productQuery->where('isUploaded', 1);
                    }
                }
            } else {
                if (count($request->type) > 1) {
                    $productQuery = (new Product())->newQuery()
                        ->latest()->where('is_scraped', 1)->orWhere('status', 2);
                } else {
                    if ($request->type[0] == 'scraped') {
                        $productQuery = (new Product())->newQuery()
                            ->latest()->where('is_scraped', 1);
                    } elseif ($request->type[0] == 'imported') {
                        $productQuery = (new Product())->newQuery()
                            ->latest()->where('status', 2);
                    } else {
                        $productQuery = (new Product())->newQuery()
                            ->latest()->where('isUploaded', 1);
                    }
                }
            }

            $data['type'] = $request->type[0];
        }

        if ($request->date != '') {
            if ($request->brand[0] != null || $request->color[0] != null || ($request->category[0] != null && $request->category[0] != 1) || $request->price != '0,400000' || $request->supplier[0] != null || trim($request->size) != '' || $request->location[0] != null || $request->type[0] != null) {
                if ($request->type[0] != null && $request->type[0] == 'uploaded') {
                    $productQuery = $productQuery->where('is_uploaded_date', 'LIKE', "%$request->date%");
                } else {
                    $productQuery = $productQuery->where('created_at', 'LIKE', "%$request->date%");
                }
            } else {
                $productQuery = (new Product())->newQuery()
                    ->latest()->where('created_at', 'LIKE', "%$request->date%");
            }
        }

        if ($request->quick_product === 'true') {
            $productQuery = (new Product())->newQuery()
                ->latest()->where('quick_product', 1);
        }

        if (trim($term) != '') {
            $productQuery = (new Product())->newQuery()
                ->latest()
                ->orWhere('sku', 'LIKE', "%$term%")
                ->orWhere('id', 'LIKE', "%$term%");

            if ($term == -1) {
                $productQuery = $productQuery->orWhere('isApproved', -1);
            }

            if (Brand::where('name', 'LIKE', "%$term%")->first()) {
                $brand_id     = Brand::where('name', 'LIKE', "%$term%")->first()->id;
                $productQuery = $productQuery->orWhere('brand', 'LIKE', "%$brand_id%");
            }

            if ($category = Category::where('title', 'LIKE', "%$term%")->first()) {
                $category_id  = $category = Category::where('title', 'LIKE', "%$term%")->first()->id;
                $productQuery = $productQuery->orWhere('category', CategoryController::getCategoryIdByName($term));
            }

            if (! empty($stage->getIDCaseInsensitive($term))) {
                $productQuery = $productQuery->orWhere('stage', $stage->getIDCaseInsensitive($term));
            }

            if (! (\Auth::user()->hasRole(['Admin', 'Supervisors']))) {
                $productQuery = $productQuery->where('stage', '>=', $stage->get($roletype));
            }

            if ($roletype != 'Selection' && $roletype != 'Searcher') {
                $productQuery = $productQuery->whereNull('dnf');
            }
        } else {
            if ($request->brand[0] == null && $request->color[0] == null && ($request->category[0] == null || $request->category[0] == 1) && $request->price == '0,400000' && $request->supplier[0] == null && trim($request->size) == '' && $request->date == '' && $request->type == null && $request->location[0] == null) {
                $productQuery = (new Product())->newQuery()->latest();
            }
        }

        if ($request->ids[0] != null) {
            $productQuery = (new Product())->newQuery()
                ->latest()->whereIn('id', $request->ids);
        }

        $data['products'] = $productQuery->select(['id', 'sku', 'size', 'price_inr_special', 'brand', 'supplier', 'isApproved', 'stage', 'status', 'is_scraped', 'created_at'])->get();

        $params = [
            'user_id'     => Auth::id(),
            'number'      => null,
            'status'      => 1,
            'customer_id' => $request->customer_id,
        ];

        $chat_message = ChatMessage::create($params);

        $mediaList = [];

        foreach ($data['products'] as $product) {
            if ($product->hasMedia(config('constants.media_tags'))) {
                $mediaList[] = $product->getMedia(config('constants.media_tags'));
            }
        }

        foreach (array_unique($mediaList) as $list) {
            try {
                $chat_message->attachMedia($list, config('constants.media_tags'));
            } catch (Exception $e) {
            }
        }

        return redirect()->route('customer.show', $request->customer_id);
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        $customer = Customer::find($id);

        if (count($customer->leads) > 0 || count($customer->orders) > 0) {
            return redirect()->route('customer.index')->with('warning', 'You have related leads or orders to this customer');
        }

        $customer->delete();

        return redirect()->route('customer.index')->with('success', 'You have successfully deleted a customer');
    }

    /**
     * using for creating file and save into the on given folder path
     */
    public function testImage()
    {
        $path     = request()->get('path');
        $text     = request()->get('text');
        $color    = request()->get('color', 'FFF');
        $fontSize = request()->get('size', 42);

        $img = \IImage::make(public_path($path));
        // use callback to define details
        $img->text($text, 5, 50, function ($font) use ($fontSize, $color) {
            $font->file(public_path('fonts/Arial.ttf'));
            $font->size($fontSize);
            $font->color('#' . $color);
            $font->align('top');
        });

        return $img->response();
    }

    public function broadcast()
    {
        $customerId = request()->get('customer_id', 0);

        $pendingBroadcast = \App\MessageQueue::where('customer_id', $customerId)
            ->where('sent', 0)->orderBy('group_id', 'asc')->groupBy('group_id')->select('group_id as id')->get()->toArray();
        // last two
        $lastBroadcast = \App\MessageQueue::where('customer_id', $customerId)
            ->where('sent', 1)->orderBy('group_id', 'desc')->groupBy('group_id')->limit(2)->select('group_id as id')->get()->toArray();

        $allRequest = array_merge($pendingBroadcast, $lastBroadcast);

        if (! empty($allRequest)) {
            usort($allRequest, function ($a, $b) {
                $a = $a['id'];
                $b = $b['id'];

                if ($a == $b) {
                    return 0;
                }

                return ($a < $b) ? -1 : 1;
            });
        }

        return response()->json(['code' => 1, 'data' => $allRequest]);
    }

    public function broadcastSendPrice()
    {
        $broadcastId     = request()->get('broadcast_id', 0);
        $customerId      = request()->get('customer_id', 0);
        $productsToBeRun = explode(',', request()->get('product_to_be_run', ''));

        $products = [];
        if (! empty(array_filter($productsToBeRun))) {
            foreach ($productsToBeRun as $prd) {
                if (is_numeric($prd)) {
                    $products[] = $prd;
                }
            }
        }

        $customer = Customer::where('id', $customerId)->first();

        if ($customer && $customer->do_not_disturb == 0) {
            $this->dispatchBroadSendPrice($customer, array_unique($products));
        }

        return response()->json(['code' => 1, 'message' => 'Broadcast run successfully']);
    }

    public function dispatchBroadSendPrice($customer, $product_ids, $dimention = false)
    {
        if (! empty($customer) && is_numeric($customer->phone)) {
            \Log::info('Customer with phone found for customer id : ' . $customer->id . ' and product ids ' . json_encode($product_ids));
            if (! empty(array_filter($product_ids))) {
                foreach ($product_ids as $pid) {
                    $product = \App\Product::where('id', $pid)->first();

                    $quick_lead = ErpLeads::create([
                        'customer_id'      => $customer->id,
                        'lead_status_id'   => 3,
                        'store_website_id' => 15,
                        'product_id'       => $pid,
                        'brand_id'         => $product ? $product->brand : null,
                        'category_id'      => $product ? $product->category : null,
                        'brand_segment'    => $product && $product->brands ? $product->brands->brand_segment : null,
                        'color'            => $customer->color,
                        'size'             => $customer->size,
                        'type'             => 'dispatch-send-price',
                        'created_at'       => Carbon::now(),
                    ]);
                }

                $requestData = new Request();
                $requestData->setMethod('POST');
                if ($dimention) {
                    $requestData->request->add(['customer_id' => $customer->id, 'dimension' => true, 'lead_id' => $quick_lead->id, 'selected_product' => $product_ids]);
                } else {
                    $requestData->request->add(['customer_id' => $customer->id, 'lead_id' => $quick_lead->id, 'selected_product' => $product_ids]);
                }

                $res = app(\App\Http\Controllers\LeadsController::class)->sendPrices($requestData, new GuzzleClient);

                return true;
            }

            return false;
        }
    }

    public function broadcastDetails()
    {
        $broadcastId = request()->get('broadcast_id', 0);
        $customerId  = request()->get('customer_id', 0);

        $messages = \App\MessageQueue::where('group_id', $broadcastId)->where('customer_id', $customerId)->get();

        $response = [];

        if (! $messages->isEmpty()) {
            foreach ($messages as $message) {
                $response[] = $message->getImagesWithProducts();
            }
        }

        return response()->json(['code' => 1, 'data' => $response]);
    }

    /**
     * Change in whatsapp no
     */
    public function changeWhatsappNo()
    {
        $customerId = request()->get('customer_id', 0);
        $whatsappNo = request()->get('number', null);
        $type       = request()->get('type', 'whatsapp_number');

        if ($customerId > 0) {
            // find the record from customer table
            $customer = \App\Customer::where('id', $customerId)->first();

            if ($customer) {
                // assing nummbers
                $oldNumber = $customer->whatsapp_number;
                if ($type == 'broadcast_number') {
                    $customer->broadcast_number = $whatsappNo;
                } else {
                    $customer->whatsapp_number = $whatsappNo;
                }

                if ($customer->save()) {
                    if ($type == 'whatsapp_number') {
                        // update into whatsapp history table
                        $wHistory             = new \App\HistoryWhatsappNumber;
                        $wHistory->date_time  = date('Y-m-d H:i:s');
                        $wHistory->object     = \App\Customer::class;
                        $wHistory->object_id  = $customerId;
                        $wHistory->old_number = $oldNumber;
                        $wHistory->new_number = $whatsappNo;
                        $wHistory->save();
                    }
                }
            }
        }

        return response()->json(['code' => 1, 'message' => 'Number updated successfully']);
    }

    public function sendContactDetails()
    {
        $userID     = request()->get('user_id', 0);
        $customerID = request()->get('customer_id', 0);

        $user     = \App\User::where('id', $userID)->first();
        $customer = \App\Customer::where('id', $customerID)->first();

        // if found customer and  user
        if ($user && $customer) {
            $data = [
                'Customer details:',
                "$customer->name",
                "$customer->phone",
                "$customer->email",
                "$customer->address",
                "$customer->city",
                "$customer->country",
                "$customer->pincode",
            ];

            $messageData = implode("\n", $data);

            $params['erp_user'] = $user->id;
            $params['approved'] = 1;
            $params['message']  = $messageData;
            $params['status']   = 2;

            app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($user->phone, $user->whatsapp_number, $messageData);

            $chat_message = \App\ChatMessage::create($params);
        }

        return response()->json(['code' => 1, 'message' => 'done']);
    }

    public function addReplyCategory(Request $request)
    {
        $this->validate($request, [
            'name' => 'required|string',
        ]);

        $category       = new ReplyCategory;
        $category->name = $request->name;
        if (! empty($request->quickCategoryId)) {
            $category->parent_id = $request->quickCategoryId;
        }
        $category->save();

        return response()->json(['code' => 1, 'data' => $category]);
    }

    public function destroyReplyCategory(Request $request)
    {
        $this->validate($request, [
            'id' => 'required',
        ]);

        Reply::where('category_id', $request->get('id'))->delete();
        ReplyCategory::where('id', $request->get('id'))->delete();

        return response()->json(['code' => 1, 'message' => 'Deleted successfully']);
    }

    public function downloadContactDetails()
    {
        $userID     = request()->get('user_id', 0);
        $customerID = request()->get('customer_id', 0);

        $user     = \App\User::where('id', $userID)->first();
        $customer = \App\Customer::where('id', $customerID)->first();

        // if found customer and  user
        if ($user && $customer) {
            // load the view for pdf and after that load that into dompdf instance, and then stream (download) the pdf
            $html = view('customers.customer_pdf', compact('customer'));

            $pdf = new Dompdf();
            $pdf->loadHtml($html);
            $pdf->render();
            $pdf->stream('orders.pdf');
        }
    }

    public function downloadContactDetailsPdf($id)
    {
        $customerID = request()->get('id', 0);

        $customer = \App\Customer::where('id', $id)->first();

        // if found customer and  user
        if ($customer) {
            // load the view for pdf and after that load that into dompdf instance, and then stream (download) the pdf
            $html = view('customers.customer_pdf', compact('customer'));

            $pdf = new Dompdf();
            $pdf->loadHtml($html);
            $pdf->render();
            $pdf->stream($id . '-label.pdf');
        }
    }

    public function languageTranslate(Request $request)
    {
        if ($request->language == '') {
            $language = 'en';
        } else {
            $language = $request->language;
        }

        $customer           = Customer::find($request->id);
        $customer->language = $language;
        $customer->save();

        return response()->json(['success' => 'Customer language updated'], 200);
    }

    public function getLanguage(Request $request)
    {
        $customerDetails = Customer::find($request->id);

        return response()->json(['data' => $customerDetails]);
    }

    public function updateField(Request $request)
    {
        $field = $request->get('field');
        $value = $request->get('value');

        $customerId = $request->get('customer_id');

        if (! empty($customerId)) {
            $customer = \App\Customer::find($customerId);
            if (! empty($customer)) {
                $customer->{$field} = $value;
                $customer->save();
            }

            return response()->json(['code' => 200, 'data' => [], 'message' => $field . ' updated successfully']);
        }

        return response()->json(['code' => 200, 'data' => [], 'message' => 'Sorry , no customer found']);
    }

    public function createKyc(Request $request)
    {
        $customer_id = $request->get('customer_id');
        $media_id    = $request->get('media_id');

        if (empty($customer_id)) {
            return response()->json(['code' => 500, 'message' => 'Customer id is required']);
        }

        if (empty($media_id)) {
            return response()->json(['code' => 500, 'message' => 'Media id is required']);
        }

        $media = PlunkMediable::find($media_id);
        if (! empty($media)) {
            $kycDoc              = new \App\CustomerKycDocument;
            $kycDoc->customer_id = $customer_id;
            $kycDoc->url         = getMediaUrl($media);
            $kycDoc->path        = $media->getAbsolutePath();
            $kycDoc->type        = 1;
            $kycDoc->save();

            return response()->json(['code' => 200, 'data' => [], 'message' => 'Kyc document added successfully']);
        }

        return response()->json(['code' => 500, 'message' => 'Ooops, something went wrong']);
    }

    public function quickcustomer(Request $request)
    {
        $results       = $this->getCustomersIndex($request);
        $nextActionArr = DB::table('customer_next_actions')->get();
        $type          = @$request->type;

        return view('customers.quickcustomer', ['customers' => $results[0], 'nextActionArr' => $nextActionArr, 'type' => $type]);
    }

    //START - Purpose : Add Customer Data - DEVTASK-19932
    public function add_customer_data(Request $request)
    {
        if ($request->email) {
            $email   = $request->email;
            $website = $request->website;

            $website_data = StoreWebsite::where('website', $website)->first();

            if ($website_data) {
                $website_id = $website_data->id;
            } else {
                $website_id = '';
            }

            if ($email != '' && $website_id != '') {
                $find_customer = Customer::where('email', $email)->where('store_website_id', $website_id)->first();

                if ($find_customer) {
                    foreach ($request->post() as $key => $value) {
                        if ($value['entity_id'] != '') {
                            $check_record = CustomerAddressData::where('customer_id', $find_customer->id)->where('entity_id', $value['entity_id'])->first();
                        }

                        if ($check_record) {
                            if (isset($value['is_deleted']) && $value['is_deleted'] == 1) {
                                CustomerAddressData::where('customer_id', $find_customer->id)
                                    ->where('entity_id', $value['entity_id'])
                                    ->delete();
                            } else {
                                CustomerAddressData::where('customer_id', $find_customer->id)
                                    ->where('entity_id', $value['entity_id'])
                                    ->update(
                                        [
                                            'parent_id'    => ($value['parent_id'] ?? ''),
                                            'address_type' => ($value['address_type'] ?? ''),
                                            'region'       => ($value['region'] ?? ''),
                                            'region_id'    => ($value['region_id'] ?? ''),
                                            'postcode'     => ($value['postcode'] ?? ''),
                                            'firstname'    => ($value['firstname'] ?? ''),
                                            'middlename'   => ($value['middlename'] ?? ''),
                                            'company'      => ($value['company'] ?? ''),
                                            'country_id'   => ($value['country_id'] ?? ''),
                                            'telephone'    => ($value['telephone'] ?? ''),
                                            'prefix'       => ($value['prefix'] ?? ''),
                                            'street'       => ($value['street'] ?? ''),
                                            'updated_at'   => \Carbon\Carbon::now(),
                                        ]
                                    );
                            }
                        } else {
                            $params[] = [
                                'customer_id'  => $find_customer->id,
                                'entity_id'    => ($value['entity_id'] ?? ''),
                                'parent_id'    => ($value['parent_id'] ?? ''),
                                'address_type' => ($value['address_type'] ?? ''),
                                'region'       => ($value['region'] ?? ''),
                                'region_id'    => ($value['region_id'] ?? ''),
                                'postcode'     => ($value['postcode'] ?? ''),
                                'firstname'    => ($value['firstname'] ?? ''),
                                'middlename'   => ($value['middlename'] ?? ''),
                                'company'      => ($value['company'] ?? ''),
                                'country_id'   => ($value['country_id'] ?? ''),
                                'telephone'    => ($value['telephone'] ?? ''),
                                'prefix'       => ($value['prefix'] ?? ''),
                                'street'       => ($value['street'] ?? ''),
                                'created_at'   => \Carbon\Carbon::now(),
                                'updated_at'   => \Carbon\Carbon::now(),

                            ];
                        }
                    }

                    if (! empty($params)) {
                        CustomerAddressData::insert($params);
                    }

                    return response()->json(['code' => 200]);
                } else {
                    return response()->json(['code' => 404, 'message' => 'Not Exist!']);
                }
            } else {
                return response()->json(['code' => 404, 'message' => 'Website Not Found!']);
            }
        }
    }

    //END - DEVTASK-19932

    public function customerinfo(Request $request)
    {
        $customer = Customer::leftjoin('store_websites as sw', 'sw.id', 'customers.store_website_id')->where('customers.id', $request->customer_id)->select('customers.*', 'sw.website')->first();

        return response()->json(['status' => 200, 'data' => $customer]);
    }

    public function fetchCreditBalance(Request $request)
    {
        $platform_id   = $request->platform_id;
        $website       = $request->website;
        $store_website = StoreWebsite::where('website', 'like', $website)->first();
        if ($store_website) {
            $store_website_id = $store_website->id;
            $customer         = Customer::where('store_website_id', $store_website_id)->where('platform_id', $platform_id)->first();
            if ($customer) {
                $message = $this->generate_erp_response('credit_fetch.success', $store_website_id, $default = 'Credit Fetched Successfully', request('lang_code'));

                return response()->json(['message' => $message, 'code' => 200, 'status' => 'success', 'data' => ['credit_balance' => $customer->credit, 'currency' => $customer->currency]]);
            } else {
                $message = $this->generate_erp_response('credit_fetch.customer.failed', $store_website_id, $default = 'Customer not found', request('lang_code'));

                return response()->json(['message' => $message, 'code' => 500, 'status' => 'failed']);
            }
        } else {
            $message = $this->generate_erp_response('credit_fetch.website.failed', $store_website_id, $default = 'Website not found', request('lang_code'));

            return response()->json(['message' => $message, 'code' => 500, 'status' => 'failed']);
        }
    }

    public function deductCredit(Request $request)
    {
        $platform_id = $request->platform_id;
        $website     = $request->website;
        $balance     = $request->amount;

        $store_website = StoreWebsite::where('website', 'like', $website)->first();
        if ($store_website) {
            $store_website_id = $store_website->id;
        } else {
            $message = $this->generate_erp_response('credit_deduct.website.failed', $store_website_id, $default = 'Website Not found', request('lang_code'));

            return response()->json(['message' => $message, 'code' => 500, 'status' => 'failure']);
        }
        $customer = Customer::where('store_website_id', $store_website->id)->where('platform_id', $platform_id)->first();
        if ($customer) {
            $customer_id = $customer->id;
            $totalCredit = $customer->credit;
            if ($customer->credit > $balance) {
                $calc_credit      = $customer->credit - $balance;
                $customer->credit = $calc_credit;

                \App\CreditHistory::create(
                    [
                        'customer_id' => $customer_id,
                        'model_id'    => $customer_id,
                        'model_type'  => Customer::class,
                        'used_credit' => (float) $totalCredit - $calc_credit,
                        'used_in'     => 'MANUAL',
                        'type'        => 'MINUS',
                    ]
                );
                $customer->save();
                $message = $this->generate_erp_response('credit_deduct.success', $store_website_id, $default = 'Credit deducted successfully', request('lang_code'));

                return response()->json(['message' => $message, 'code' => 200, 'status' => 'success']);
            } else {
                $toAdd   = $balance - $customer->credit;
                $message = $this->generate_erp_response('credit_deduct.insufficient_balance', $store_website_id, $default = 'You do not have sufficient credits, Please add ' . $toAdd . ' to proceed.', request('lang_code'));

                return response()->json(['message' => $message, 'code' => 500, 'status' => 'failure']);
            }
        } else {
            $message = $this->generate_erp_response('credit_deduct.customer.failed', $store_website_id, $default = 'Customer not found.', request('lang_code'));

            return response()->json(['message' => $message, 'code' => 500, 'status' => 'failure']);
        }
    }

    public function storeCredit(Request $request)
    {
        $customers_all = Customer::leftjoin('store_websites', 'customers.store_website_id', 'store_websites.id')
            ->leftjoin('credit_history', 'customers.id', 'credit_history.customer_id');
        $customers_all->select('customers.*', 'store_websites.title', \DB::raw('( select created_at from credit_history where credit_history.customer_id = customers.id ORDER BY id DESC LIMIT 0,1) as date'));
        $customers_all->latest('date')->groupBy('customers.id')->orderBy('date', 'desc');

        if ($request->name != '') {
            $customers_all->where('name', 'Like', '%' . $request->name . '%');
        }

        if ($request->email != '') {
            $customers_all->where('email', 'Like', '%' . $request->email . '%');
        }

        if ($request->phone != '') {
            $customers_all->where('phone', 'Like', '%' . $request->phone . '%');
        }

        if ($request->store_website != '') {
            $customers_all->where('store_website_id', $request->store_website);
        }
        $customers     = $customers_all->get();
        $customers_all = $customers_all->paginate(Setting::get('pagination'));
        $store_website = StoreWebsite::all();
        $users         = Customer::get();
        if ($request->ajax()) {
            return view('livechat.store_credit_ajax', [
                'customers_all' => $customers_all,
                'store_website' => $store_website,
                'customers'     => $customers,
                'users'         => $users,
            ]);
        } else {
            return view('livechat.store_credit', [
                'customers_all' => $customers_all,
                'store_website' => $store_website,
                'customers'     => $customers,
                'users'         => $users,
            ]);
        }
    }

    public function getWebsiteCustomers(Request $request)
    {
        $storeWebsiteId = $request->store_website_id;

        $customerQuery = Customer::query();

        if ($storeWebsiteId == 'Others') {
            $customerQuery = $customerQuery->whereNull('store_website_id')->orWhere('store_website_id', '');
        } else {
            $customerQuery = $customerQuery->where('store_website_id', $storeWebsiteId);
        }

        $customers = $customerQuery->get();

        return $customers;
    }

    public function creditEmailLog(Request $request)
    {
        $creditEmailLog = \App\CreditEmailLog::where('customer_id', $request->cust_id)->get();

        if (count($creditEmailLog) > 0) {
            $html = '';
            foreach ($creditEmailLog as $log) {
                $html .= '<tr>';
                $html .= '<td>' . $log->id . '</td>';
                $html .= '<td>' . $log->from_email . '</td>';
                $html .= '<td>' . $log->to_email . '</td>';
                $html .= '<td>' . $log->created_at . '</td>';
                $html .= '</tr>';
            }

            return response()->json(['msg' => 'Listed successfully', 'code' => 200, 'data' => $html]);
        } else {
            return response()->json(['msg' => 'Record not found', 'code' => 500, 'data' => '']);
        }
    }

    public function accounts(Request $request)
    {
        $customers_all = Customer::where('store_website_id', '>', 0);
        $customers_all->select('customers.*', 'store_websites.title');
        $customers_all->join('store_websites', 'store_websites.id', 'customers.store_website_id');

        if ($request->from_date != '' && $request->from_date != '') {
            $customers_all->whereBetween('customers.created_at', [$request->from_date, $request->to_date]);
        }

        if ($request->name != '') {
            $customers_all->whereIn('name', $request->name);
        }

        if ($request->email != '') {
            $customers_all->whereIn('email', $request->email);
        }

        if ($request->phone != '') {
            $customers_all->whereIn('phone', $request->phone);
        }

        if ($request->store_website != '') {
            $customers_all->whereIn('store_website_id', $request->store_website);
        }

        $customers_all->orderBy('created_at', 'desc');
        $total           = $customers_all->count();
        $customers_all   = $customers_all->paginate(Setting::get('pagination'));
        $store_website   = StoreWebsite::all();
        $customers_name  = Customer::select('name')->distinct()->where('store_website_id', '>', 0)->get();
        $customers_phone = Customer::select('phone')->distinct()->where('store_website_id', '>', 0)->get();
        $customers_email = Customer::select('email')->distinct()->where('store_website_id', '>', 0)->get();

        if ($request->ajax()) {
            return view('customers.account_ajax', [
                'customers_all' => $customers_all,

            ]);
        } else {
            return view('customers.account', [
                'customers_all'   => $customers_all,
                'total'           => $total,
                'store_website'   => $store_website,
                'customers_name'  => $customers_name,
                'customers_phone' => $customers_phone,
                'customers_email' => $customers_email,

            ]);
        }
    }

    public function customerUpdate(Request $request)
    {
        $input = $request->input();
        unset($input['_token']);
        $details = Customer::where('id', $input['customer_id'])->select('id as customer_id', 'name', 'email', 'phone', 'address', 'city', 'country', 'pincode')->first()->toArray();
        \App\CustomerDetailHistory::create($details);
        $customerId = $input['customer_id'];
        unset($input['customer_id']);
        Customer::where('id', $customerId)->update($input);

        return response()->json(['message' => 'Details updated', 'code' => 200, 'status' => 'success']);
    }

    public function customerUpdateHistory($customerId)
    {
        $history = \App\CustomerDetailHistory::where('customer_id', $customerId)->get();
        $records = '';
        foreach ($history as $c) {
            $records .= '<tr>
              <td>' . $c->id . '</td>
              <td>' . $c->name . '</td>
              <td>' . $c->email . '</td>
              <td>' . $c->phone . '</td>
              <td>' . $c->address . '</td>
              <td>' . $c->city . '</td>
              <td>' . $c->pincode . '</td>
              <td>' . $c->country . '</td> </tr>';
        }

        return response()->json(['records' => $records, 'code' => 200, 'status' => 'success']);
    }

    public function addCredit(Request $request)
    {
        $platform_id   = $request->platform_id;
        $website       = $request->website;
        $credit        = $request->amount;
        $store_website = StoreWebsite::where('website', 'like', $website)->first();
        if ($store_website) {
            $store_website_id = $store_website->id;
        } else {
            $message = $this->generate_erp_response('credit_add.website.failed', $store_website_id, $default = 'Website Not found', request('lang_code'));

            return response()->json(['message' => $message, 'code' => 500, 'status' => 'failure']);
        }
        $customer = Customer::where('store_website_id', $store_website->id)->where('platform_id', $platform_id)->first();
        if ($customer) {
            $customer_id = $customer->id;
            $totalCredit = $customer->credit;
            if ($credit > 0) {
                $calc_credit      = $customer->credit + $credit;
                $customer->credit = $calc_credit;

                \App\CreditHistory::create(
                    [
                        'customer_id' => $customer_id,
                        'model_id'    => $customer_id,
                        'model_type'  => Customer::class,
                        'used_credit' => (float) $credit,
                        'used_in'     => 'MANUAL',
                        'type'        => 'PLUS',
                    ]
                );
                $customer->save();
            }
            $message = $this->generate_erp_response('credit_add.success', $store_website_id, $default = 'Credit added successfully', request('lang_code'));

            return response()->json(['message' => $message, 'code' => 200, 'status' => 'success']);
        } else {
            $message = $this->generate_erp_response('credit_add.customer.failed', $store_website_id, $default = 'Customer not found.', request('lang_code'));

            return response()->json(['message' => $message, 'code' => 500, 'status' => 'failure']);
        }
    }

    /**
     * This function is use for get all proirity data
     *
     * @param [int] $id
     *
     * @return Jsonresponse
     */
    public function customerPriorityPoints(Request $request)
    {
        $custPriority = CustomerPriorityPoint::leftjoin('store_websites', 'store_websites.id', 'customer_priority_points.store_website_id')->get(
            ['customer_priority_points.store_website_id',
                'customer_priority_points.website_base_priority',
                'customer_priority_points.lead_points',
                'customer_priority_points.order_points',
                'customer_priority_points.refund_points',
                'customer_priority_points.ticket_points',
                'customer_priority_points.return_points',
                'store_websites.website', ]);

        $storeWebsite = StoreWebsite::all();

        return view('customers.customer_priority_point', compact('storeWebsite', 'custPriority'));
    }

    /**
     * This function is use for get proirity data
     *
     * @param [int] $id
     * @param mixed $webSiteId
     *
     * @return Jsonresponse
     */
    public function getCustomerPriorityPoints($webSiteId)
    {
        try {
            $custPriority = CustomerPriorityPoint::where('store_website_id', $webSiteId)->get();
            if ($custPriority) {
                return response()->json(['code' => 200, 'data' => compact('custPriority'), 'message' => 'Priority listed successfully']);
            }

            return response()->json(['code' => 500, 'data' => [], 'message' => 'Sorry there is no Website exist']);
        } catch (Exception $exception) {
            return response()->json(['code' => 500, 'data' => [], 'message' => $exception->getMessage()]);
        }
    }

    /**
     * This function is use for save proirity data
     *
     * @return Jsonresponse
     */
    public function addCustomerPriorityPoints(Request $request)
    {
        $custPri = CustomerPriorityPoint::updateOrCreate([
            'store_website_id' => $request->get('store_website_id'),
        ],
            [
                'website_base_priority' => $request->get('website_base_priority'),
                'store_website_id'      => $request->get('store_website_id'),
                'lead_points'           => $request->get('lead_points'),
                'refund_points'         => $request->get('refund_points'),
                'order_points'          => $request->get('order_points'),
                'ticket_points'         => $request->get('ticket_points'),
                'return_points'         => $request->get('return_points'),
            ]);

        return response()->json(['message' => 'Record added successfully', 'code' => 200, 'data' => $custPri, 'status' => 'success']);
    }

    /**
     * This function is use for get all proirity Range data
     *
     * @param [int] $id
     *
     * @return Jsonresponse
     */
    public function getCustomerPriorityRangePoints(Request $request)
    {
        $custRangePoint = CustomerPriorityRangePoint::leftjoin('store_websites', 'store_websites.id', 'customer_priority_range_points.store_website_id')
            ->leftjoin('twilio_priorities', 'twilio_priorities.id', 'customer_priority_range_points.twilio_priority_id')
            ->where('customer_priority_range_points.deleted_at', '=', null)
            ->get(
                ['customer_priority_range_points.id',
                    'customer_priority_range_points.store_website_id',
                    'customer_priority_range_points.twilio_priority_id',
                    'customer_priority_range_points.min_point',
                    'customer_priority_range_points.max_point',
                    'customer_priority_range_points.range_name',
                    'customer_priority_range_points.created_at',
                    'store_websites.website',
                    'twilio_priorities.priority_name', ]);

        $storeWebsite = StoreWebsite::all();

        return view('customers.customer_priority_range_point', compact('storeWebsite', 'custRangePoint'));
    }

    /**
     * This function is use for get all proirity Range data
     *
     * @param [int] $id
     *
     * @return Jsonresponse
     */
    public function getSelectCustomerPriorityRangePoints(Request $request, $id)
    {
        $custRangePoint = CustomerPriorityRangePoint::select(['customer_priority_range_points.id',
            'customer_priority_range_points.store_website_id',
            'customer_priority_range_points.twilio_priority_id',
            'customer_priority_range_points.min_point',
            'customer_priority_range_points.max_point',
            'customer_priority_range_points.created_at',
            'store_websites.website',
            'twilio_priorities.priority_name', ])->
        leftjoin('store_websites', 'store_websites.id', 'customer_priority_range_points.store_website_id')
            ->leftjoin('twilio_priorities', 'twilio_priorities.id', 'customer_priority_range_points.twilio_priority_id')
            ->where('customer_priority_range_points.deleted_at', '=', null)
            ->where('customer_priority_range_points.id', $id)
            ->first();

        $storeWebsite   = StoreWebsite::all();
        $twilioPriority = TwilioPriority::where('account_id', function ($query) use ($custRangePoint) {
            $query->select('twilio_credentials_id')
                ->from('store_website_twilio_numbers')
                ->where('store_website_twilio_numbers.store_website_id', $custRangePoint->store_website_id);
        })->get();
        $twilioPriority = $twilioPriority->toArray();

        return response()->json(['message' => 'Record Listed successfully', 'code' => 200, 'data' => compact('custRangePoint', 'storeWebsite', 'twilioPriority'), 'status' => 'success']);
    }

    /**
     * This function is use for get all proirity Range data
     *
     * @param [int] $id
     *
     * @return Jsonresponse
     */
    public function selectCustomerPriorityRangePoints(Request $request, $id)
    {
        $twilioPriority = TwilioPriority::where('account_id', function ($query) use ($id) {
            $query->select('twilio_credentials_id')
                ->from('store_website_twilio_numbers')
                ->where('store_website_id', $id);
        })->get();

        return response()->json(['message' => 'Record Listed successfully', 'code' => 200, 'data' => $twilioPriority->toArray(), 'status' => 'success']);
    }

    /**
     * This function is use for save proirity range data
     *
     * @return Jsonresponse
     */
    public function addCustomerPriorityRangePoints(Request $request)
    {
        $custPri = CustomerPriorityRangePoint::updateOrCreate([
            'twilio_priority_id' => $request->get('twilio_priority_id'),
            'store_website_id'   => $request->get('store_website_id'),
        ],
            [
                'twilio_priority_id' => $request->get('twilio_priority_id'),
                'store_website_id'   => $request->get('store_website_id'),
                'min_point'          => $request->get('min_point'),
                'max_point'          => $request->get('max_point'),
                'deleted_at'         => null,
            ]);

        return response()->json(['message' => 'Record added successfully', 'code' => 200, 'data' => $custPri, 'status' => 'success']);
    }

    /**
     * This function is use for save proirity range delete data
     *
     * @return Jsonresponse
     */
    public function deleteCustomerPriorityRangePoints(Request $request)
    {
        $custPri = CustomerPriorityRangePoint::where('id', '=', $request->id)->update([
            'deleted_at' => date('Y-m-d H:i:s'),
        ]);

        return redirect()->back()->withSuccess('You have successfully Deleted');
    }

    public function customerName(request $request)
    {
        $id          = $request->input('id');
        $name        = Customer::where('id', $id)->value('name');
        $htmlContent = '<tr><td>' . $name . '</td></tr>';

        return $htmlContent;
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/DBQueryController.php 
Content: <?php

namespace App\Http\Controllers;

use DB;
use Auth;
use App\Setting;
use Illuminate\Http\Request;
use App\Jobs\CommandExecution;
use App\CommandExecutionHistory;

class DBQueryController extends Controller
{
    public function index()
    {
        $user        = Auth::user();
        $tables      = DB::select('show tables');
        $table_array = [];
        foreach ($tables as $tab) {
            $table_array[] = array_values((array) $tab)[0];
        }

        //START - Purpose : Get Command List - DEVTASK-19941
        $command_list_arr = [];
        $i                = 0;
        foreach (\Artisan::all() as $key => $command) {
            $command_list_arr[$i]['Name']        = $command->getName();
            $command_list_arr[$i]['Description'] = $command->getDescription();
            $i++;
        }

        //END - DEVTASK-19941

        return view('admin-menu.database-menu.db-query.index', compact('table_array', 'user', 'command_list_arr'));
    }

    //START - Purpose : Exicute Command - DEVTASK-19941
    public function command_execution(Request $request)
    {
        try {
            $manual_command_name = '';
            $command_name        = '';

            if ($request->manual_command_name != '') {
                $manual_command_name = $request->manual_command_name;

                $params = [
                    'command_name' => $manual_command_name,
                    'user_id'      => Auth::id(),
                    'status'       => 0,
                ];
            } else {
                $command_name = $request->command_name;

                $params = [
                    'command_name' => $command_name,
                    'user_id'      => Auth::id(),
                    'status'       => 0,
                ];
            }

            $store = CommandExecutionHistory::create($params);

            $store_user_id = $store->user_id;
            $store_id      = $store->id;

            CommandExecution::dispatch($command_name, $manual_command_name, $store_user_id, $store_id)->onQueue('command_execution');

            return response()->json(['code' => 200, 'data' => $match]);
        } catch (Exception $e) {
        }
    }

    public function command_execution_history(Request $request)
    {
        try {
            $command_history = CommandExecutionHistory::join('users', 'command_execution_historys.user_id', 'users.id')
                ->orderBy('id', 'DESC')
                ->select('command_execution_historys.*', 'users.name as user_name')
                ->paginate(Setting::get('pagination'));

            return view('admin-menu.database-menu.db-query.command_history', compact('command_history', 'request'));
        } catch (Exception $e) {
        }
    }

    public function ReportDownload(Request $request)
    {
        $file_path = storage_path($request->file);

        return response()->download($file_path);
    }

    //END - DEVTASK-19941

    public function columns(Request $request)
    {
        $column_array = [];
        $columns      = DB::select('DESCRIBE ' . array_keys($request->all())[0] . ';');
        foreach ($columns as $col) {
            $column_array[] = $col;
        }

        return response()->json([
            'status' => true,
            'data'   => $column_array,
        ]);
    }

    public function confirm(Request $request)
    {
        $sql_query = 'UPDATE ' . $request->table_name . ' SET ';

        $data              = $request->all();
        $where_query_exist = 0;
        foreach ($data as $key => $val) {
            if (strpos($key, 'update_') !== false && in_array(str_replace('update_', '', $key), $request->columns)) {
                $sql_query .= str_replace('update_', '', $key) . ' = "' . $val . '", ';
            }
        }
        $sql_query .= ' WHERE ';
        $sql_query = str_replace(',  WHERE', ' WHERE', $sql_query);
        foreach ($data as $key => $val) {
            if (strpos($key, 'where_') !== false && $val !== null) {
                $key = str_replace('where_', '', $key);
                $sql_query .= $where_query_exist ? ' AND ' : '';
                $sql_query .= $key . ' ' . $request->criteriaColumnOperators["'" . $key . "'"] . ' "' . $val . '"';
                $where_query_exist = 1;
            }
        }
        ! $where_query_exist ? $sql_query .= ' = 1 ;' : $sql_query .= ' ;';

        return response()->json([
            'status' => true,
            'sql'    => $sql_query,
            'data'   => $request->all(),
        ]);
    }

    public function deleteConfirm(Request $request)
    {
        $sql_query = 'DELETE from ' . $request->table_name;

        $data              = $request->all();
        $where_query_exist = 0;
        $sql_query .= ' WHERE ';
        $sql_query = str_replace(',  WHERE', ' WHERE', $sql_query);
        foreach ($data as $key => $val) {
            if (strpos($key, 'where_') !== false && $val !== null) {
                $key = str_replace('where_', '', $key);
                $sql_query .= $where_query_exist ? ' AND ' : '';
                $sql_query .= $key . ' ' . $request->criteriaColumnOperators["'" . $key . "'"] . ' "' . $val . '"';
                $where_query_exist = 1;
            }
        }
        ! $where_query_exist ? $sql_query .= '1 ;' : $sql_query .= ' ;';

        return response()->json([
            'status' => true,
            'sql'    => $sql_query,
            'data'   => $request->all(),
        ]);
    }

    public function update(Request $request)
    {
        try {
            $sql = DB::select($request->sql);
        } catch (Exception $e) {
            $error = $e;
        }

        return response()->json([
            'status' => isset($error) ? false : true,
            'error'  => $error ?? '',
        ]);
    }

    public function delete(Request $request)
    {
        try {
            $sql = DB::select($request->sql);
        } catch (Exception $e) {
            $error = $e;
        }

        return response()->json([
            'status' => isset($error) ? false : true,
            'error'  => $error ?? '',
        ]);
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/DatabaseController.php 
Content: <?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\DatabaseExportCommandLog;
use App\DatabaseHistoricalRecord;

class DatabaseController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request)
    {
        $databaseHis = DatabaseHistoricalRecord::latest();

        $customRange = $request->get('customrange');

        if (! empty($customRange)) {
            $range = explode(' - ', $customRange);
            if (! empty($range[0])) {
                $startDate = $range[0];
            }
            if (! empty($range[1])) {
                $endDate = $range[1];
            }
        }

        if (! empty($startDate)) {
            $databaseHis = $databaseHis->whereDate('created_at', '>=', $startDate);
        }

        if (! empty($endDate)) {
            $databaseHis = $databaseHis->whereDate('created_at', '<=', $endDate);
        }

        $databaseHis = $databaseHis->paginate(20);

        $page = $databaseHis->currentPage();

        if ($request->ajax()) {
            $tml = (string) view('database.partial.list', compact('databaseHis', 'page'));

            return response()->json(['code' => 200, 'tpl' => $tml, 'page' => $page]);
        }

        return view('database.index', compact('databaseHis', 'page'));
    }

    public function states(Request $request)
    {
        return view('database.states');
    }

    public function processList()
    {
        return response()->json(['code' => 200, 'records' => \DB::select('show processlist')]);
    }

    public function processKill(Request $request)
    {
        $id = $request->get('id');

        return response()->json(['code' => 200, 'records' => \DB::statement("KILL $id")]);
    }

    public function export(Request $request)
    {
        $dbName = env('DB_DATABASE');
        \Log::info('Database name:' . $dbName);
        $dumpName = str_replace(' ', '_', $dbName) . '_schema.sql';
        \Log::info('Dump name:' . $dumpName);
        //$cmd = 'mysqldump -h erpdb -u erplive -p  --no-data '.$dbName.' > '.$dumpName;
        $cmd = 'mysqldump --user=' . env('DB_USERNAME') . ' --password=\'' . env('DB_PASSWORD') . '\' --host=' . env('DB_HOST') . ' --no-data ' . $dbName . '  > ' . $dumpName;
        \Log::info('Executing:' . $cmd);

        // NEW Logic START
        // Command and arguments
        $descriptors = [
            0 => ['pipe', 'r'], // stdin
            1 => ['pipe', 'w'], // stdout
            2 => ['pipe', 'w'], // stderr
        ];

        // Execute the command
        $process = proc_open($cmd, $descriptors, $pipes);

        if (is_resource($process)) {
            // Close stdin since we don't need it
            fclose($pipes[0]);

            // Capture stdout and stderr
            $stdout = stream_get_contents($pipes[1]);
            $stderr = stream_get_contents($pipes[2]);

            // Close all pipes
            fclose($pipes[1]);
            fclose($pipes[2]);

            // Get the exit status
            $return_var = proc_close($process);

            if ($return_var === 0) {
                $commandLog           = new DatabaseExportCommandLog();
                $commandLog->user_id  = \Auth::user()->id;
                $commandLog->command  = $cmd;
                $commandLog->response = 'Database exported successfully';
                $commandLog->save();

                chmod($dumpName, 0755);
                header('Content-Type: application/octet-stream');
                header('Content-Transfer-Encoding: Binary');
                header('Content-disposition: attachment; filename=erp_live_schema.sql');
                $dumpUrl = env('APP_URL') . '/' . $dumpName;

                return response()->json(['code' => 200, 'data' => $dumpUrl, 'message' => 'Database exported successfully']);
            } else {
                $errorMessage = "Error exporting database. Exit status: $return_var\nOutput:\n" . $stderr;

                $commandLog           = new DatabaseExportCommandLog();
                $commandLog->user_id  = \Auth::user()->id;
                $commandLog->command  = $cmd;
                $commandLog->response = $errorMessage;
                $commandLog->save();

                return response()->json(['code' => 500, 'message' => 'Database export failed, Please check the logs']);
            }
        } else {
            // Handle the case where proc_open failed to execute the command
            return response()->json(['code' => 500, 'message' => 'Error exporting database']);
        }
    }

    public function commandLogs(Request $request)
    {
        $perPage = 10;

        $histories = DatabaseExportCommandLog::with(['user'])->latest()->paginate($perPage);

        $html = view('database.partial.command-logs-modal-html')->with('histories', $histories)->render();

        return response()->json(['code' => 200, 'data' => $histories, 'html' => $html, 'message' => 'Content render']);
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/DevelopmentController.php 
Content: <?php

namespace App\Http\Controllers;

use Auth;
use View;
use App\Task;
use App\Team;
use App\User;
use Response;
use App\Issue;
use Exception;
use App\Helpers;
use App\Setting;
use App\UserRate;
use App\TaskTypes;
use Carbon\Carbon;
use App\TaskStatus;
use App\ChatMessage;
use App\ErpPriority;
use App\TaskMessage;
use App\TasksHistory;
use App\DeveloperCost;
use App\DeveloperTask;
use App\ReplyCategory;
use GuzzleHttp\Client;
use App\LogChatMessage;
use App\PaymentReceipt;
use App\TaskAttachment;
use App\UserAvaibility;
use App\DeveloperModule;
use App\HubstaffHistory;
use App\TaskUserHistory;
use App\DeveloperComment;
use App\GoogleScreencast;
use App\PushNotification;
use App\MeetingAndOtherTime;
use Illuminate\Http\Request;
use App\DeveloperTaskComment;
use App\DeveloperTaskHistory;
use App\Helpers\HubstaffTrait;
use App\Helpers\MessageHelper;
use App\Hubstaff\HubstaffTask;
use App\Models\ScrapperValues;
use GuzzleHttp\RequestOptions;
use App\Models\DataTableColumn;
use App\Github\GithubRepository;
use App\Hubstaff\HubstaffMember;
use App\Hubstaff\HubstaffProject;
use Illuminate\Http\JsonResponse;
use App\Github\GithubOrganization;
use Illuminate\Support\Facades\DB;
use Maatwebsite\Excel\Facades\Excel;
use App\DeveoperTaskPullRequestMerge;
use App\Models\ScrapperValuesHistory;
use App\TimeDoctor\TimeDoctorAccount;
use Illuminate\Support\Facades\Cache;
use App\Exports\DeveloperTaskExcelExport;
use App\Jobs\UploadGoogleDriveScreencast;
use GuzzleHttp\Exception\ClientException;
use Illuminate\Database\Eloquent\Builder;
use App\Library\TimeDoctor\Src\Timedoctor;
use App\Models\DeveloperTaskStartEndHistory;
use App\Models\DeveloperTaskStatusChecklist;
use App\Models\ScrapperValuesRemarksHistory;
use App\Models\DeveloperTaskStatusChecklistRemarks;
use Plank\Mediable\Facades\MediaUploader as MediaUploader;
use App\Models\DeveloperTasks\DeveloperTasksHistoryApprovals;

class DevelopmentController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    use HubstaffTrait;

    private $githubClient;

    public function __construct()
    {
        $this->githubClient = new Client([
            'auth' => [config('env.GITHUB_USERNAME'), config('env.GITHUB_TOKEN')],
        ]);
        $this->init(config('env.HUBSTAFF_SEED_PERSONAL_TOKEN'));
    }

    private function connectGithubClient($userName, $token)
    {
        $githubClientObj = new Client([
            'auth' => [$userName, $token],
        ]);

        return $githubClientObj;
    }

    public function taskListByUserId(Request $request)
    {
        $user_id = $request->get('user_id', 0);
        $issues  = DeveloperTask::select('developer_tasks.id', 'developer_tasks.module_id', 'developer_tasks.subject', 'developer_tasks.task', 'developer_tasks.created_by')
            ->leftJoin('erp_priorities', function ($query) use ($user_id) {
                $query->on('erp_priorities.model_id', '=', 'developer_tasks.id');
                $query->where('erp_priorities.model_type', '=', DeveloperTask::class);
                $query->where('erp_priorities.user_id', $user_id);
            })
            ->where('status', '!=', 'Done');
        // if admin the can assign new task
        if (auth()->user()->isAdmin()) {
            $issues = $issues->whereIn('developer_tasks.id', $request->get('selected_issue', []));
        } else {
            $issues = $issues->whereNotNull('erp_priorities.id');
        }
        $issues = $issues->orderBy('erp_priorities.id')->get();
        foreach ($issues as &$value) {
            $value->module     = $value->developerModule->name;
            $value->created_by = User::where('id', $value->created_by)->value('name');
        }
        unset($value);

        return response()->json($issues);
    }

    public function setTaskPriority(Request $request)
    {
        $priority = $request->get('priority', null);
        $user_id  = $request->get('user_id', 0);
        //delete old priority
        ErpPriority::where('user_id', $user_id)->where('model_type', '=', DeveloperTask::class)->delete();

        if (! empty($priority)) {
            foreach ((array) $priority as $model_id) {
                ErpPriority::create([
                    'model_id'   => $model_id,
                    'model_type' => DeveloperTask::class,
                    'user_id'    => $user_id,
                ]);
            }
            $developerTask = DeveloperTask::select('developer_tasks.id', 'developer_tasks.module_id', 'developer_tasks.subject', 'developer_tasks.task', 'developer_tasks.created_by')
                ->join('erp_priorities', function ($query) use ($user_id) {
                    $query->on('erp_priorities.model_id', '=', 'developer_tasks.id');
                    $query->where('erp_priorities.model_type', '=', DeveloperTask::class);
                    $query->where('erp_priorities.user_id', '=', $user_id);
                })
                ->where('is_resolved', '0')
                ->orderBy('erp_priorities.id')
                ->get();
            $message = '';
            $i       = 1;
            foreach ($developerTask as $value) {
                $message .= $i . ' : #Task-' . $value->id . '-' . $value->subject . "\n";
                $i++;
            }
            if (! empty($message)) {
                $requestData = new Request();
                $requestData->setMethod('POST');
                $params            = [];
                $params['user_id'] = $request->get('user_id', 0);

                $string = '';
                if (! empty($request->get('global_remarkes', null))) {
                    $string .= $request->get('global_remarkes') . "\n";
                }
                $string .= "Task Priority is : \n" . $message;

                $params['message'] = $string;
                $params['status']  = 2;
                $requestData->request->add($params);
                app(\App\Http\Controllers\WhatsAppController::class)->sendMessage($requestData, 'priority');
            }
        }

        return response()->json([
            'status' => 'success',
        ]);
    }

    public function index(Request $request)
    {
        // Set required data
        $user  = $request->user ?? Auth::id();
        $start = $request->range_start ? "$request->range_start 00:00" : '2018-01-01 00:00';
        $end   = $request->range_end ? "$request->range_end 23:59" : Carbon::now()->endOfWeek();
        $id    = null;
        // Set initial variables
        $progressTasks  = new DeveloperTask();
        $plannedTasks   = new DeveloperTask();
        $completedTasks = new DeveloperTask();
        // For non-admins get tasks assigned to the user
        if (! Auth::user()->hasRole('Admin')) {
            $progressTasks  = DeveloperTask::where('user_id', Auth::id());
            $plannedTasks   = DeveloperTask::where('user_id', Auth::id());
            $completedTasks = DeveloperTask::where('user_id', Auth::id());
        }
        // Get tasks for specific user if you are admin
        if (Auth::user()->hasRole('Admin') && (int) $request->user > 0) {
            $progressTasks  = DeveloperTask::where('user_id', $user);
            $plannedTasks   = DeveloperTask::where('user_id', $user);
            $completedTasks = DeveloperTask::where('user_id', $user);
        }
        // Filter by date/
        if ($request->get('range_start') != '') {
            $progressTasks  = $progressTasks->whereBetween('created_at', [$start, $end]);
            $plannedTasks   = $plannedTasks->whereBetween('created_at', [$start, $end]);
            $completedTasks = $completedTasks->whereBetween('created_at', [$start, $end]);
        }
        // Filter by ID
        if ($request->get('id')) {
            $progressTasks = $progressTasks->where(function ($query) use ($request) {
                $id = $request->get('id');
                $query->where('id', $id)->orWhere('subject', 'LIKE', "%$id%");
            });
            $plannedTasks = $plannedTasks->where(function ($query) use ($request) {
                $id = $request->get('id');
                $query->where('id', $id)->orWhere('subject', 'LIKE', "%$id%");
            });
            $completedTasks = $completedTasks->where(function ($query) use ($request) {
                $id = $request->get('id');
                $query->where('id', $id)->orWhere('subject', 'LIKE', "%$id%");
            });
        }
        // Get all data with user and messages
        $plannedTasks   = $plannedTasks->where('status', 'Planned')->orderBy('created_at')->with(['user', 'messages', 'timeSpent'])->get();
        $completedTasks = $completedTasks->where('status', 'Done')->orderBy('created_at')->with(['user', 'messages', 'timeSpent'])->get();
        $progressTasks  = $progressTasks->where('status', 'In Progress')->orderBy('created_at')->with(['user', 'messages', 'timeSpent'])->get();

        // Get all modules
        $modules = DeveloperModule::all();
        // Get all developers
        $users = Helpers::getUserArray(User::role('Developer')->get());
        // Get all task types
        $tasksTypes = TaskTypes::all();
        // Create empty array for module names
        $moduleNames = [];
        // Loop over all modules and store them
        foreach ($modules as $module) {
            $moduleNames[$module->id] = $module->name;
        }
        $times = [];

        return view('development.index', [
            'times'          => $times,
            'users'          => $users,
            'modules'        => $modules,
            'user'           => $user,
            'start'          => $start,
            'end'            => $end,
            'moduleNames'    => $moduleNames,
            'completedTasks' => $completedTasks,
            'plannedTasks'   => $plannedTasks,
            'progressTasks'  => $progressTasks,
            'tasksTypes'     => $tasksTypes,
            'title'          => 'Dev',
        ]);
    }

    public function moveTaskToProgress(Request $request)
    {
        $task                = DeveloperTask::find($request->get('task_id'));
        $date                = $request->get('date');
        $task->status        = 'In Progress';
        $hour                = $request->get('hour') ?? '00';
        $minutes             = $request->get('mimutes') ?? '00';
        $task->estimate_time = $date . ' ' . "$hour:$minutes:00 ";
        $task->start_time    = Carbon::now()->toDateTimeString();
        $task->save();

        return response()->json([
            'status' => 'success',
        ]);
    }

    public function completeTask(Request $request)
    {
        $task           = DeveloperTask::find($request->get('task_id'));
        $task->status   = 'Done';
        $task->end_time = Carbon::now()->toDateTimeString();
        $task->save();

        return response()->json([
            'status' => 'success',
        ]);
    }

    public function relistTask(Request $request)
    {
        $task                = DeveloperTask::find($request->get('task_id'));
        $task->status        = 'Planned';
        $task->end_time      = null;
        $task->start_time    = null;
        $task->estimate_time = null;
        $task->save();

        return response()->json([
            'status' => 'success',
        ]);
    }

    public function updateAssignee(Request $request)
    {
        $task = DeveloperTask::find($request->get('task_id'));

        $old_assignee  = $task->user_id;
        $task->user_id = $request->get('user_id');
        $task->save();
        $task_history               = new TasksHistory;
        $task_history->date_time    = date('Y-m-d H:i:s');
        $task_history->task_id      = $request->get('task_id');
        $task_history->user_id      = Auth::id();
        $task_history->old_assignee = $old_assignee;
        $task_history->new_assignee = $request->get('user_id');
        $task_history->save();

        return response()->json([
            'success',
        ]);
    }

    public function issueTaskIndex(Request $request)
    {
        $type           = $request->tasktype ? $request->tasktype : 'all';
        $users          = User::orderBy('name')->pluck('name', 'id');
        $usersForExport = [];

        if (Auth::user()->hasRole('Admin')) {
            $usersForExport = User::select('name', 'id')->get();
        } else {
            $usersForExport = User::select('name', 'id')->where('id', '=', Auth::user()->id)->get();
        }
        $auth_user = auth()->user();
        $title     = 'Task List';

        $issues = DeveloperTask::with([
            'timeSpent',
            'developerTaskHistory',
            'assignedUser',
            'masterUser',
            'timeSpent',
            'leadtimeSpent',
            'testertimeSpent',
            'messages.taskUser',
            'messages.user',
            'dthWithMinuteEstimate',
            'tester',
        ]);

        $issues->when($type == 'issue', fn ($q) => $q->where('task_type_id', '3'));
        $issues->when(! empty($request->estimate_date), function (Builder $query) use ($request) {
            $estimate_date = date('Y-m-d', strtotime($request->estimate_date));

            return $query->where('estimate_date', $estimate_date);
        });

        $issues->when($type == 'devtask', fn ($q) => $q->where('task_type_id', '1'));
        $issues->when((int) $request->get('submitted_by') > 0, fn (Builder $query) => $query->where('developer_tasks.created_by', $request->get('submitted_by')));
        $issues->when((int) $request->get('responsible_user') > 0, fn (Builder $query) => $query->where('developer_tasks.responsible_user_id', $request->get('responsible_user')));
        $issues->when((int) $request->get('corrected_by') > 0, fn (Builder $query) => $query->where('developer_tasks.user_id', $request->get('corrected_by')));
        $issues->when((int) $request->get('assigned_to') > 0, fn (Builder $query) => $query->where('developer_tasks.assigned_to', $request->get('assigned_to')));
        $issues->when((int) $request->get('master_user_id') > 0, fn (Builder $query) => $query->where('developer_tasks.master_user_id', $request->get('master_user_id')));
        $issues->when((int) $request->get('team_lead_id') > 0, fn (Builder $query) => $query->where('developer_tasks.team_lead_id', $request->get('team_lead_id')));
        $issues->when((int) $request->get('tester_id') > 0, fn ($q) => $q->where('developer_tasks.tester_id', $request->get('tester_id')));
        $issues->when($request->get('module'), fn ($q) => $q->where('module_id', $request->get('module')));
        $issues->when(! empty($request->get('task_status', [])), fn ($q) => $q->whereIn('developer_tasks.status', $request->get('task_status')));
        $issues->when(! empty($request->get('repo_id')), fn ($q) => $q->where('developer_tasks.repository_id', $request->get('repo_id')));

        if (isset($request->is_estimated)) {
            if ($request->get('is_estimated') == 'null') {
                $issues = $issues->notEstimated();
            }
            if ($request->get('is_estimated') == 'not_approved') {
                $issues = $issues->adminNotApproved();
            }
        }

        $whereCondition = '';
        if ($request->get('subject') != '') {
            $whereCondition = ' and message like  "%' . $request->get('subject') . '%"';
            $issues         = $issues->where(function (Builder $query) use ($request) {
                $query->whereLike(['developer_tasks.id', 'developer_tasks.subject', 'developer_tasks.task', 'chat_messages.message'], $request->get('subject'));
            });
        }
        $issues = $issues->leftJoin(
            DB::raw('(SELECT MAX(id) as  max_id, issue_id, message
            FROM `chat_messages` where issue_id > 0
             ' . $whereCondition . ' GROUP BY issue_id )
             m_max'), 'm_max.issue_id', '=', 'developer_tasks.id');

        $issues = $issues->leftJoin('chat_messages', 'chat_messages.id', '=', 'm_max.max_id');

        $issues->when($request->get('last_communicated', 'off') == 'on', fn ($q) => $q->orderBy('chat_messages.id', 'desc'));

        $issues = $issues->select('developer_tasks.*',
            'chat_messages.message',
            'chat_messages.is_audio',
            'chat_messages.user_id AS message_user_id',
            'chat_messages.is_reminder AS message_is_reminder',
            'chat_messages.status as message_status',
            'chat_messages.sent_to_user_id'
        );

        // Set variables with modules and users
        $modules = Cache::remember('DeveloperModule::orderBy::name', 60 * 60 * 24 * 1, function () {
            return DeveloperModule::orderBy('name')->get();
        });

        $statusList = Cache::remember('task_status_select_name', 60 * 60 * 24 * 7, function () {
            return TaskStatus::select('name')->pluck('name', 'name')->toArray();
        });

        if (! auth()->user()->isReviwerLikeAdmin()) {
            $issues = $issues->where(function ($query) use ($auth_user) {
                $query->where('developer_tasks.assigned_to', $auth_user->id)
                    ->orWhere('developer_tasks.master_user_id', $auth_user->id)
                    ->orWhere('developer_tasks.tester_id', $auth_user->id)
                    ->orWhere('developer_tasks.team_lead_id', $auth_user->id);
            });
        }

        $plannedTasks = DeveloperTask::where('developer_tasks.status', 'Planned')
            ->groupBy('developer_tasks.assigned_to')
            ->select([\DB::raw('count(developer_tasks.id) as total_product'), 'developer_tasks.assigned_to'])
            ->pluck('total_product', 'assigned_to')->toArray();

        $inProgressTasks = DeveloperTask::where('developer_tasks.status', 'In Progress')
            ->groupBy('developer_tasks.assigned_to')
            ->select([\DB::raw('count(developer_tasks.id) as total_product'), 'developer_tasks.assigned_to'])
            ->pluck('total_product', 'assigned_to')->toArray();

        $usersCount   = array_values(array_filter(array_keys($plannedTasks)));
        $userModel    = empty($usersCount) ? [] : $users->whereIn('id', $usersCount)->pluck('name', 'id')->toArray();
        $countPlanned = [];
        if (! empty($issuesGroups) && ! empty($userModel)) {
            foreach ($issuesGroups as $key => $count) {
                $countPlanned[] = [
                    'id'    => $key,
                    'name'  => ! empty($userModel[$key]) ? $userModel[$key] : 'N/A',
                    'count' => $count,
                ];
            }
        }

        // category filter start count
        $countInProgress = [];
        $usersCount      = array_values(array_filter(array_keys($inProgressTasks)));
        $userModel       = empty($usersCount) ? [] : $users->whereIn('id', $usersCount)->pluck('name', 'id')->toArray();
        if (! empty($issuesGroups) && ! empty($userModel)) {
            foreach ($issuesGroups as $key => $count) {
                $countInProgress[] = [
                    'id'    => $key,
                    'name'  => ! empty($userModel[$key]) ? $userModel[$key] : 'N/A',
                    'count' => $count,
                ];
            }
        }

        // Sort
        if ($request->order == 'priority') {
            $issues = $issues->orderBy('developer_tasks.created_at', 'DESC');
        } elseif ($request->order == 'latest_task_first') {
            $issues = $issues->orderBy('developer_tasks.id', 'DESC');
        } else {
            $issues = $issues->orderBy('chat_messages.id', 'desc');
        }

        if ($request->download == 2) {
            $issues    = $issues->get();
            $tasks_csv = [];
            foreach ($issues as $value) {
                $task_csv                  = [];
                $task_csv['ID']            = $value->id;
                $task_csv['Subject']       = $value->subject;
                $task_csv['Communication'] = $value->message;
                $task_csv['Developer']     = ($value->assignedUser) ? $value->assignedUser->name : 'Unassigned';
                $tasks_csv[]               = $task_csv;
            }
            $this->outputCsv('downaload-task-summaries.csv', $tasks_csv);
        } else {
            $issues = $issues->paginate(50);
        }

        $priority = ErpPriority::where('model_type', '=', DeveloperTask::class)->pluck('model_id')->toArray();

        $respositories = Cache::remember('GithubRepository::all()', 60 * 60 * 24 * 7, function () {
            return GithubRepository::all();
        });

        $checkList      = [];
        $checkListArray = DeveloperTaskStatusChecklist::select('id', 'name', 'task_status')->get()->toArray();
        foreach ($checkListArray as $list) {
            $checkList[$list['task_status']][] = $list;
        }

        $datatableModel = DataTableColumn::select('column_name', 'user_id', 'section_name')->where('user_id', auth()->user()->id)->where('section_name', 'development-list')->first();

        $dynamicColumnsToShowDl = [];
        if (! empty($datatableModel->column_name)) {
            $hideColumns            = $datatableModel->column_name ?? '';
            $dynamicColumnsToShowDl = json_decode($hideColumns, true);
        }

        if (request()->ajax()) {
            return view('development.partials.load-more', compact('issues', 'users', 'modules', 'request', 'title', 'type', 'countPlanned', 'countInProgress', 'statusList', 'priority', 'dynamicColumnsToShowDl'));
        }

        $reply_categories = ReplyCategory::select('id', 'name')
            ->with('approval_leads', 'sub_categories')
            ->where('parent_id', 0)
            ->where('id', 44)
            ->orderby('name', 'ASC')->get();

        return view('development.issue', [
            'issues'                 => $issues,
            'users'                  => $users,
            'checkList'              => $checkList,
            'modules'                => $modules,
            'request'                => $request,
            'title'                  => $title,
            'type'                   => $type,
            'priority'               => $priority,
            'countPlanned'           => $countPlanned,
            'countInProgress'        => $countInProgress,
            'statusList'             => $statusList,
            'respositories'          => $respositories,
            'dynamicColumnsToShowDl' => $dynamicColumnsToShowDl,
            'reply_categories'       => $reply_categories,
            'usersForExport'         => $usersForExport,
        ]);
    }

    public function dlColumnVisbilityUpdate(Request $request)
    {
        $userCheck = DataTableColumn::where('user_id', auth()->user()->id)->where('section_name', 'development-list')->first();

        if ($userCheck) {
            $column               = DataTableColumn::find($userCheck->id);
            $column->section_name = 'development-list';
            $column->column_name  = json_encode($request->column_dl);
            $column->save();
        } else {
            $column               = new DataTableColumn();
            $column->section_name = 'development-list';
            $column->column_name  = json_encode($request->column_dl);
            $column->user_id      = auth()->user()->id;
            $column->save();
        }

        return redirect()->back()->with('success', 'column visiblity Added Successfully!');
    }

    public function dsColumnVisbilityUpdate(Request $request)
    {
        $userCheck = DataTableColumn::where('user_id', auth()->user()->id)->where('section_name', 'development-summarylist')->first();

        if ($userCheck) {
            $column               = DataTableColumn::find($userCheck->id);
            $column->section_name = 'development-summarylist';
            $column->column_name  = json_encode($request->column_ds);
            $column->save();
        } else {
            $column               = new DataTableColumn();
            $column->section_name = 'development-summarylist';
            $column->column_name  = json_encode($request->column_ds);
            $column->user_id      = auth()->user()->id;
            $column->save();
        }

        return redirect()->back()->with('success', 'column visiblity Added Successfully!');
    }

    public function scrappingTaskIndex(Request $request)
    {
        $inputs = $request->input();
        $users  = User::query();

        $issues = DeveloperTask::with('assignedUser');
        $issues = $issues->where('developer_tasks.task_type_id', '1')->whereNotNull('scraper_id')->where('scraper_id', '<>', 0);

        $issues = $issues->select('developer_tasks.*');

        if (! auth()->user()->isReviwerLikeAdmin()) {
            $issues = $issues->where(function ($query) {
                $query->where('developer_tasks.assigned_to', auth()->user()->id)
                    ->orWhere('developer_tasks.master_user_id', auth()->user()->id)
                    ->orWhere('developer_tasks.tester_id', auth()->user()->id)
                    ->orWhere('developer_tasks.team_lead_id', auth()->user()->id);
            });
        }

        if (@$inputs['module']) {
            $issues->where('module_id', $inputs['module']);
        }

        if (@$inputs['subject']) {
            $issues->where('subject', 'like', '%' . $inputs['subject'] . '%');
        }

        if (@$inputs['task']) {
            $issues->where('task', 'like', '%' . $inputs['task'] . '%');
        }

        if (@$inputs['user_id']) {
            $issues->where('assigned_to', $inputs['user_id']);
            $users = User::where('id', $request->user_id)->select(['id', 'name'])->first();
        }

        if (@$inputs['status']) {
            $issues->where('status', $inputs['status']);
        }

        $issues = $issues->orderBy('id', 'desc')->groupBy('developer_tasks.id');
        $issues = $issues->paginate(50);

        $modules = DeveloperModule::all()->pluck('name', 'id');

        return view('development.scrapper', [
            'issues'  => $issues,
            'modules' => $modules,
            'inputs'  => $inputs,
            'title'   => 'Scrapping Issues List',
            'users'   => $users,

        ]);
    }

    public function loadAllTasks(Request $request)
    {
        $dataTaskType = $request->dataTaskType;
        switch ($dataTaskType) {
            case 'devtask':
                return $this->loadAllDevTasks($request);
                break;
            case 'task':
                return $this->loadAllNormalTasks($request);
                break;
        }
    }

    private function loadAllDevTasks($request)
    {
        $issuesQuery = DeveloperTask::with(['assignedUser'])
            ->with(['taskStartEndHistories' => function ($query) {
                $query->select('task_id',
                    \DB::raw('SUM(TIMESTAMPDIFF(MINUTE, start_date, end_date)) as tracked_time'),
                    \DB::raw('MIN(start_date) as first_start_date'),
                    \DB::raw('MAX(end_date) as last_end_date'),
                )
                ->orderBy('created_at', 'DESC')
                ->groupBy('task_id');
            }])
            ->with(['developerTaskHistories' => function ($query) {
                $query->select('developer_task_id', \DB::raw('SUM(new_value) as approved_time'))
                ->where('is_approved', 1)
                ->orderBy('created_at', 'DESC')
                ->groupBy('developer_task_id');
            }])
            ->orderBy('id', 'DESC');

        if ($request->startDate && $request->endDate) {
            $issuesQuery = $issuesQuery->whereBetween('developer_tasks.created_at', [$request->startDate, $request->endDate]);
        }

        if ($request->startDateTracked && $request->endDateTracked) {
            $issuesQuery = $issuesQuery->whereBetween('developer_tasks.m_start_date', [$request->startDateTracked, $request->endDateTracked]);
        }

        if ($request->assigned_to) {
            $issuesQuery = $issuesQuery->where('developer_tasks.assigned_to', $request->assigned_to);
        }

        return $issuesQuery;
    }

    private function loadAllNormalTasks($request)
    {
        $issuesQuery = Task::with(['assignedTo', 'taskStatusAlter'])
            ->with(['taskStartEndHistories' => function ($query) {
                $query->select('task_id',
                    \DB::raw('SUM(TIMESTAMPDIFF(MINUTE, start_date, end_date)) as tracked_time'),
                    \DB::raw('MIN(start_date) as first_start_date'),
                    \DB::raw('MAX(end_date) as last_end_date'),
                )
                    ->orderBy('created_at', 'DESC')
                    ->groupBy('task_id');
            }])
            ->with(['developerTaskHistories' => function ($query) {
                $query->select('developer_task_id', \DB::raw('SUM(new_value) as approved_time'))
                    ->where('is_approved', 1)
                    ->orderBy('created_at', 'DESC')
                    ->groupBy('developer_task_id');
            }])
            ->orderBy('id', 'DESC');

        if ($request->startDate && $request->endDate) {
            $issuesQuery = $issuesQuery->whereBetween('tasks.created_at', [$request->startDate, $request->endDate]);
        }

        if ($request->startDateTracked && $request->endDateTracked) {
            $issuesQuery = $issuesQuery->whereBetween('tasks.m_start_date', [$request->startDateTracked, $request->endDateTracked]);
        }

        if ($request->assigned_to) {
            $issuesQuery = $issuesQuery->where('tasks.assign_to', $request->assigned_to);
        }

        return $issuesQuery;
    }

    public function getTasksCsvNeededFormat($issues)
    {
        $tasks_csv = [];

        $users  = User::query()->pluck('name', 'id');
        foreach ($issues as $value) {
            // dd($value);
            $task_csv                  = [];
            $task_csv['id']            = $value->id;
            $task_csv['Subject']       = $value->subject ?? $value->task_subject;
            $task_csv['Assigned To']   = ((! empty($users[$value->assigned_to]) || ! empty($users[$value->assign_to])) ?
                                            ($users[$value->assigned_to] ?? $users[$value->assign_to]) :
                                            'Unassigned');
            $task_csv['Approved Time'] = (isset($value->developerTaskHistories->first()->approved_time) && ! empty($value->developerTaskHistories->first()->approved_time)) ?
                                            $value->developerTaskHistories->first()->approved_time : 0;
            $task_csv['Status']        = ((isset($value->taskStatusAlter) && ! empty($value->taskStatusAlter)) ? $value->taskStatusAlter->name : ((is_string($value->status)) ? $value->status : '-'));

            $startTime                 = Carbon::parse($value->start_time);
            $endTime                   = Carbon::parse($value->end_time);
            $task_csv['Tracked Time']  = ((isset($value->taskStartEndHistories->first()->tracked_time) && ! empty($value->taskStartEndHistories->first()->tracked_time)) ?
                                            $value->taskStartEndHistories->first()->tracked_time : 0);
            $task_csv['Tracking Start'] = ((isset($value->taskStartEndHistories->first()->first_start_date) && ! empty($value->taskStartEndHistories->first()->first_start_date)) ?
                                            $value->taskStartEndHistories->first()->first_start_date : '-');
            $task_csv['Tracking End'] = ((isset($value->taskStartEndHistories->first()->last_end_date) && ! empty($value->taskStartEndHistories->first()->last_end_date)) ?
                                            $value->taskStartEndHistories->first()->last_end_date : '-');
            $task_csv['Difference']    = ($task_csv['Tracked Time'] - $task_csv['Approved Time'] > 0 ? $task_csv['Tracked Time'] - $task_csv['Approved Time'] : '+' . abs($task_csv['Tracked Time'] - $task_csv['Approved Time'])) ?? 0;
            array_push($tasks_csv, $task_csv);
        }

        return $tasks_csv;
    }

    public function viewAllTasks(Request $request)
    {
        $issues    = $this->loadAllTasks($request)->paginate(10);
        $tasks_csv = $this->getTasksCsvNeededFormat($issues);

        if ($request->ajax()) {
            return view('development.ajax.all-tasks-ajax', [
                'issues'    => $issues,
                'tasks_csv' => $tasks_csv,
                'startDate' => $request->get('startDate', null),
                'endDate'   => $request->get('endDate', null),
            ]);
        }

        return view('development.all-tasks', [
            'issues'    => $issues,
            'tasks_csv' => $tasks_csv,
            'startDate' => $request->get('startDate', null),
            'endDate'   => $request->get('endDate', null),
        ]);
    }

    public function exportTask(Request $request)
    {
        $issues    = $this->loadAllTasks($request)->get();
        $tasks_csv = $this->getTasksCsvNeededFormat($issues);

        return $this->outputCsv('download-task-summaries.csv', $tasks_csv);
    }

    public function exportExcel(Request $request)
    {
        return Excel::download(new DeveloperTaskExcelExport($request), 'tasks.xlsx');
    }

    private function outputCsv($fileName, $assocDataArray)
    {
        header('Pragma: public');
        header('Expires: 0');
        header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
        header('Cache-Control: private', false);
        header('Content-Type: text/csv; charset=utf-8');
        header('Content-Disposition: attachment;filename=' . $fileName);
        $fp = fopen('php://output', 'w');
        if (isset($assocDataArray['0'])) {
            fputcsv($fp, array_keys($assocDataArray['0']));
            foreach ($assocDataArray as $values) {
                fputcsv($fp, $values);
            }
        }
        fclose($fp);
        exit();
    }

    public function summaryList(Request $request)
    {
        // Load issues
        $type = $request->tasktype ? $request->tasktype : 'all';

        $title = 'Task List';

        $issues = DeveloperTask::with('timeSpent');
        if ($type == 'issue') {
            $issues = $issues->where('developer_tasks.task_type_id', '3');
        }
        if ($type == 'devtask') {
            $issues = $issues->where('developer_tasks.task_type_id', '1');
        }
        if ((int) $request->get('submitted_by') > 0) {
            $issues = $issues->where('developer_tasks.created_by', $request->get('submitted_by'));
        }
        if ((int) $request->get('responsible_user') > 0) {
            $issues = $issues->where('developer_tasks.responsible_user_id', $request->get('responsible_user'));
        }

        if ((int) $request->get('corrected_by') > 0) {
            $issues = $issues->where('developer_tasks.user_id', $request->get('corrected_by'));
        }

        if ((int) $request->get('assigned_to') > 0) {
            $issues = $issues->whereIn('developer_tasks.assigned_to', $request->get('assigned_to'));
        }
        if ((int) $request->get('lead') > 0) {
            $issues = $issues->whereIn('developer_tasks.master_user_id', $request->get('lead'));
        }
        if ($request->get('module')) {
            $issues = $issues->where('developer_tasks.module_id', $request->get('module'));
        }
        if (! empty($request->get('task_status', []))) {
            $issues = $issues->whereIn('developer_tasks.status', $request->get('task_status'));
        } else {
            $issues = $issues->where('developer_tasks.status', 'In Progress');
        }

        if (! empty($request->get('module_id', []))) {
            $issues = $issues->whereIn('developer_tasks.module_id', $request->get('module_id'));
        }

        $whereCondition = '';
        if ($request->get('subject') != '') {
            $subject = explode(',', $request->get('subject'));
            foreach ($subject as $termSubject) {
                $whereCondition .= ' and message like  "%' . $request->get('subject') . '%"';
            }
            $issues = $issues->where(function ($query) use ($subject) {
                $query->whereIn('developer_tasks.id', $subject)
                    ->orWhere(function ($query) use ($subject) {
                        foreach ($subject as $termSubject) {
                            $query->orWhere('subject', 'like', "%$termSubject%")->orWhere('task', 'like', "%$termSubject%")->orWhere('chat_messages.message', 'LIKE', "%$termSubject%");
                        }
                    });
            });
        }

        $issues = $issues->leftJoin(DB::raw('(SELECT MAX(id) as  max_id, issue_id, message   FROM `chat_messages` where issue_id > 0 ' . $whereCondition . ' GROUP BY issue_id ) m_max'), 'm_max.issue_id', '=', 'developer_tasks.id');
        $issues = $issues->leftJoin('chat_messages', 'chat_messages.id', '=', 'm_max.max_id');

        if ($request->get('last_communicated', 'off') == 'on') {
            $issues = $issues->orderBy('chat_messages.id', 'desc');
        }
        if ($request->get('unread_messages', 'off') == 'unread') {
            $issues = $issues->where('chat_messages.sent_to_user_id', Auth::user()->id);
        }

        $issues = $issues->select('developer_tasks.*', 'chat_messages.message', 'chat_messages.sent_to_user_id');

        // Set variables with modules and users
        $modules = DeveloperModule::orderBy('name')->get();

        $users = Helpers::getUserArray(User::orderBy('name')->get());

        $statusList = \DB::table('task_statuses')->select('name')->orderBy('name')->pluck('name', 'name')->toArray();

        $statusList = array_merge([
            '' => 'Select Status',
        ], $statusList);

        if (! auth()->user()->isReviwerLikeAdmin()) {
            $issues = $issues->where(function ($query) {
                $query->where('developer_tasks.assigned_to', auth()->user()->id)
                    ->orWhere('developer_tasks.master_user_id', auth()->user()->id);
            });
        }

        // category filter start count
        $issuesGroups = clone $issues;
        $issuesGroups = $issuesGroups->where('developer_tasks.status', 'Planned')->groupBy('developer_tasks.assigned_to')->select([\DB::raw('count(developer_tasks.id) as total_product'), 'developer_tasks.assigned_to'])->pluck('total_product', 'assigned_to')->toArray();
        $userIds      = array_values(array_filter(array_keys($issuesGroups)));
        $userModel    = User::whereIn('id', $userIds)->pluck('name', 'id')->toArray();

        $countPlanned = [];
        if (! empty($issuesGroups) && ! empty($userModel)) {
            foreach ($issuesGroups as $key => $count) {
                $countPlanned[] = [
                    'id'    => $key,
                    'name'  => ! empty($userModel[$key]) ? $userModel[$key] : 'N/A',
                    'count' => $count,
                ];
            }
        }
        // category filter start count
        $issuesGroups = clone $issues;
        $issuesGroups = $issuesGroups->where('developer_tasks.status', 'In Progress')->groupBy('developer_tasks.assigned_to')->select([\DB::raw('count(developer_tasks.id) as total_product'), 'developer_tasks.assigned_to'])->pluck('total_product', 'assigned_to')->toArray();
        $userIds      = array_values(array_filter(array_keys($issuesGroups)));

        $userModel       = User::whereIn('id', $userIds)->pluck('name', 'id')->toArray();
        $countInProgress = [];
        if (! empty($issuesGroups) && ! empty($userModel)) {
            foreach ($issuesGroups as $key => $count) {
                $countInProgress[] = [
                    'id'    => $key,
                    'name'  => ! empty($userModel[$key]) ? $userModel[$key] : 'N/A',
                    'count' => $count,
                ];
            }
        }

        // Sort
        if ($request->order == 'priority') {
            $issues = $issues->orderBy('priority', 'ASC')->orderBy('created_at', 'DESC')->with('communications');
        } elseif ($request->order == 'latest_task_first') {
            $issues = $issues->orderBy('developer_tasks.id', 'DESC');
        } else {
            $issues = $issues->orderBy('chat_messages.id', 'desc');
        }

        $issues = $issues->with('communications');

        $issues   = $issues->paginate(Setting::get('pagination'));
        $priority = ErpPriority::where('model_type', '=', DeveloperTask::class)->pluck('model_id')->toArray();

        //Get all searchable user list
        $userslist = null;
        if ((int) $request->get('assigned_to') > 0) {
            $userslist = User::whereIn('id', $request->get('assigned_to'))->get();
        }

        $time_doctor_projects = \App\TimeDoctor\TimeDoctorProject::select('time_doctor_project_id', 'time_doctor_project_name')->get()->toArray();

        $datatableModel = DataTableColumn::select('column_name')->where('user_id', auth()->user()->id)->where('section_name', 'development-summarylist')->first();

        $dynamicColumnsToShowDs = [];
        if (! empty($datatableModel->column_name)) {
            $hideColumns            = $datatableModel->column_name ?? '';
            $dynamicColumnsToShowDs = json_decode($hideColumns, true);
        }

        $reply_categories = ReplyCategory::select('id', 'name')
            ->with('approval_leads', 'sub_categories')
            ->where('parent_id', 0)
            ->where('id', 44)
            ->orderby('name', 'ASC')->get();

        if (request()->ajax()) {
            return view('development.partials.summarydatas', [
                'issues'                 => $issues,
                'users'                  => $users,
                'modules'                => $modules,
                'request'                => $request,
                'title'                  => $title,
                'type'                   => $type,
                'priority'               => $priority,
                'countPlanned'           => $countPlanned,
                'countInProgress'        => $countInProgress,
                'statusList'             => $statusList,
                'userslist'              => $userslist,
                'dynamicColumnsToShowDs' => $dynamicColumnsToShowDs,
                'reply_categories'       => $reply_categories,
            ]);
        }

        return view('development.summarylist', [
            'issues'                 => $issues,
            'users'                  => $users,
            'modules'                => $modules,
            'request'                => $request,
            'title'                  => $title,
            'type'                   => $type,
            'priority'               => $priority,
            'countPlanned'           => $countPlanned,
            'countInProgress'        => $countInProgress,
            'statusList'             => $statusList,
            'userslist'              => $userslist,
            'time_doctor_projects'   => $time_doctor_projects,
            'dynamicColumnsToShowDs' => $dynamicColumnsToShowDs,
            'reply_categories'       => $reply_categories,
        ]);
    }

    public function summaryListDev(Request $request)
    {
        // Load issues
        $type = $request->tasktype ? $request->tasktype : 'all';

        $title = 'Task List';

        $issues = DeveloperTask::with('timeSpent');
        if ($type == 'issue') {
            $issues = $issues->where('developer_tasks.task_type_id', '3');
        }
        if ($type == 'devtask') {
            $issues = $issues->where('developer_tasks.task_type_id', '1');
        }
        if ((int) $request->get('submitted_by') > 0) {
            $issues = $issues->where('developer_tasks.created_by', $request->get('submitted_by'));
        }
        if ((int) $request->get('responsible_user') > 0) {
            $issues = $issues->where('developer_tasks.responsible_user_id', $request->get('responsible_user'));
        }

        if ((int) $request->get('corrected_by') > 0) {
            $issues = $issues->where('developer_tasks.user_id', $request->get('corrected_by'));
        }

        if ((int) $request->get('assigned_to') > 0) {
            $issues = $issues->whereIn('developer_tasks.assigned_to', $request->get('assigned_to'));
        }
        if ((int) $request->get('lead') > 0) {
            $issues = $issues->whereIn('developer_tasks.master_user_id', $request->get('lead'));
        }
        if ($request->get('module')) {
            $issues = $issues->where('developer_tasks.module_id', $request->get('module'));
        }
        if (! empty($request->get('task_status', []))) {
            $issues = $issues->whereIn('developer_tasks.status', $request->get('task_status'));
        } else {
            $issues = $issues->where('developer_tasks.status', 'In Progress');
        }

        $whereCondition = '';
        if ($request->get('subject') != '') {
            $subject = explode(',', $request->get('subject'));
            foreach ($subject as $termSubject) {
                $whereCondition .= ' and message like  "%' . $request->get('subject') . '%"';
            }
            $issues = $issues->where(function ($query) use ($subject) {
                $query->whereIn('developer_tasks.id', $subject)
                    ->orWhere(function ($query) use ($subject) {
                        foreach ($subject as $termSubject) {
                            $query->orWhere('subject', 'like', "%$termSubject%")->orWhere('task', 'like', "%$termSubject%")->orWhere('chat_messages.message', 'LIKE', "%$termSubject%");
                        }
                    });
            });
        }

        $issues = $issues->leftJoin(DB::raw('(SELECT MAX(id) as  max_id, issue_id, message   FROM `chat_messages` where issue_id > 0 ' . $whereCondition . ' GROUP BY issue_id ) m_max'), 'm_max.issue_id', '=', 'developer_tasks.id');
        $issues = $issues->leftJoin('chat_messages', 'chat_messages.id', '=', 'm_max.max_id');

        if ($request->get('last_communicated', 'off') == 'on') {
            $issues = $issues->orderBy('chat_messages.id', 'desc');
        }
        if ($request->get('unread_messages', 'off') == 'unread') {
            $issues = $issues->where('chat_messages.sent_to_user_id', Auth::user()->id);
        }

        $issues = $issues->select('developer_tasks.*', 'chat_messages.message', 'chat_messages.sent_to_user_id');

        // Set variables with modules and users
        $modules = DeveloperModule::orderBy('name')->get();

        $users = Helpers::getUserArray(User::orderBy('name')->get());

        $statusList = \DB::table('task_statuses')->select('name')->orderBy('name')->pluck('name', 'name')->toArray();

        $statusList = array_merge([
            '' => 'Select Status',
        ], $statusList);

        if (! auth()->user()->isReviwerLikeAdmin()) {
            $issues = $issues->where(function ($query) {
                $query->where('developer_tasks.assigned_to', auth()->user()->id)
                    ->orWhere('developer_tasks.master_user_id', auth()->user()->id);
            });
        }

        // category filter start count
        $issuesGroups = clone $issues;
        $issuesGroups = $issuesGroups->where('developer_tasks.status', 'Planned')->groupBy('developer_tasks.assigned_to')->select([\DB::raw('count(developer_tasks.id) as total_product'), 'developer_tasks.assigned_to'])->pluck('total_product', 'assigned_to')->toArray();
        $userIds      = array_values(array_filter(array_keys($issuesGroups)));
        $userModel    = User::whereIn('id', $userIds)->pluck('name', 'id')->toArray();

        $countPlanned = [];
        if (! empty($issuesGroups) && ! empty($userModel)) {
            foreach ($issuesGroups as $key => $count) {
                $countPlanned[] = [
                    'id'    => $key,
                    'name'  => ! empty($userModel[$key]) ? $userModel[$key] : 'N/A',
                    'count' => $count,
                ];
            }
        }
        // category filter start count
        $issuesGroups = clone $issues;
        $issuesGroups = $issuesGroups->where('developer_tasks.status', 'In Progress')->groupBy('developer_tasks.assigned_to')->select([\DB::raw('count(developer_tasks.id) as total_product'), 'developer_tasks.assigned_to'])->pluck('total_product', 'assigned_to')->toArray();
        $userIds      = array_values(array_filter(array_keys($issuesGroups)));

        $userModel       = User::whereIn('id', $userIds)->pluck('name', 'id')->toArray();
        $countInProgress = [];
        if (! empty($issuesGroups) && ! empty($userModel)) {
            foreach ($issuesGroups as $key => $count) {
                $countInProgress[] = [
                    'id'    => $key,
                    'name'  => ! empty($userModel[$key]) ? $userModel[$key] : 'N/A',
                    'count' => $count,
                ];
            }
        }

        // Sort
        if ($request->order == 'priority') {
            $issues = $issues->orderBy('priority', 'ASC')->orderBy('created_at', 'DESC')->with('communications');
        } elseif ($request->order == 'latest_task_first') {
            $issues = $issues->orderBy('developer_tasks.id', 'DESC');
        } else {
            $issues = $issues->orderBy('chat_messages.id', 'desc');
        }

        $issues = $issues->with('communications');

        $issues   = $issues->paginate(Setting::get('pagination'));
        $priority = ErpPriority::where('model_type', '=', DeveloperTask::class)->pluck('model_id')->toArray();

        //Get all searchable user list
        $userslist = null;
        if ((int) $request->get('assigned_to') > 0) {
            $userslist = User::whereIn('id', $request->get('assigned_to'))->get();
        }

        $time_doctor_projects = \App\TimeDoctor\TimeDoctorProject::select('time_doctor_project_id', 'time_doctor_project_name')->get()->toArray();

        $reply_categories = ReplyCategory::select('id', 'name')
            ->with('approval_leads', 'sub_categories')
            ->where('parent_id', 0)
            ->where('id', 44)
            ->orderby('name', 'ASC')->get();
        if (request()->ajax()) {
            return view('development.partials.summarydatas', [
                'issues'           => $issues,
                'users'            => $users,
                'modules'          => $modules,
                'request'          => $request,
                'title'            => $title,
                'type'             => $type,
                'priority'         => $priority,
                'countPlanned'     => $countPlanned,
                'countInProgress'  => $countInProgress,
                'statusList'       => $statusList,
                'userslist'        => $userslist,
                'reply_categories' => $reply_categories,
            ]);
        }

        return view('development.summarylistdev', [
            'issues'               => $issues,
            'users'                => $users,
            'modules'              => $modules,
            'request'              => $request,
            'title'                => $title,
            'type'                 => $type,
            'priority'             => $priority,
            'countPlanned'         => $countPlanned,
            'countInProgress'      => $countInProgress,
            'statusList'           => $statusList,
            'userslist'            => $userslist,
            'time_doctor_projects' => $time_doctor_projects,
            'reply_categories'     => $reply_categories,
        ]);
    }

    public function searchDevTask(Request $request)
    {
        $id = $request->id;

        $type = $request->tasktype ? $request->tasktype : 'all';

        $title = 'Task List';

        $issues = DeveloperTask::with('timeSpent');

        $whereCondition = '';
        if ($request->get('subject') != '') {
            $whereCondition = ' and message like  "%' . $request->get('subject') . '%"';
            $issues         = $issues->where(function ($query) use ($request) {
                $subject = $request->get('subject');
                $task_id = explode(',', $subject);
                if (count($task_id) == 1) {
                    $query->where('developer_tasks.id', 'LIKE', "%$subject%")->orWhere('subject', 'LIKE', "%$subject%")->orWhere('task', 'LIKE', "%$subject%")
                        ->orwhere('chat_messages.message', 'LIKE', "%$subject%");
                } else {
                    $query->whereIn('developer_tasks.id', $task_id)->orWhere('subject', 'LIKE', "%$subject%")->orWhere('task', 'LIKE', "%$subject%")
                        ->orwhere('chat_messages.message', 'LIKE', "%$subject%");
                }
            });
        }

        if ($request->input('selected_user') != '') {
            $userid = $request->input('selected_user');
            $issues = $issues->where('developer_tasks.assigned_to', $userid);
        }

        $issues = $issues->leftJoin(DB::raw('(SELECT MAX(id) as  max_id, issue_id, message   FROM `chat_messages` where issue_id > 0 ' . $whereCondition . ' GROUP BY issue_id ) m_max'), 'm_max.issue_id', '=', 'developer_tasks.id');
        $issues = $issues->leftJoin('chat_messages', 'chat_messages.id', '=', 'm_max.max_id');
        if ($request->get('last_communicated', 'off') == 'on') {
            $issues = $issues->orderBy('chat_messages.id', 'desc');
        }
        if ($request->get('unread_messages', 'off') == 'unread') {
            $issues = $issues->where('chat_messages.sent_to_user_id', Auth::user()->id);
        }
        $issues = $issues->select('developer_tasks.*', 'chat_messages.message', 'chat_messages.sent_to_user_id');
        // Set variables with modules and users
        $modules    = DeveloperModule::orderBy('name')->get();
        $users      = Helpers::getUserArray(User::orderBy('name')->get());
        $statusList = \DB::table('task_statuses')->select('name')->orderBy('name')->pluck('name', 'name')->toArray();
        $statusList = array_merge([
            '' => 'Select Status',
        ], $statusList);

        // Hide resolved
        if (! auth()->user()->isReviwerLikeAdmin()) {
            $issues = $issues->where(function ($query) {
                $query->where('developer_tasks.assigned_to', auth()->user()->id)
                    ->orWhere('developer_tasks.master_user_id', auth()->user()->id);
            });
        }

        // category filter start count
        $issuesGroups = clone $issues;
        $issuesGroups = $issuesGroups->where('developer_tasks.status', 'Planned')->groupBy('developer_tasks.assigned_to')->select([\DB::raw('count(developer_tasks.id) as total_product'), 'developer_tasks.assigned_to'])->pluck('total_product', 'assigned_to')->toArray();
        $userIds      = array_values(array_filter(array_keys($issuesGroups)));
        $userModel    = User::whereIn('id', $userIds)->pluck('name', 'id')->toArray();

        $countPlanned = [];
        if (! empty($issuesGroups) && ! empty($userModel)) {
            foreach ($issuesGroups as $key => $count) {
                $countPlanned[] = [
                    'id'    => $key,
                    'name'  => ! empty($userModel[$key]) ? $userModel[$key] : 'N/A',
                    'count' => $count,
                ];
            }
        }
        // category filter start count
        $issuesGroups = clone $issues;
        $issuesGroups = $issuesGroups->where('developer_tasks.status', 'In Progress')->groupBy('developer_tasks.assigned_to')->select([\DB::raw('count(developer_tasks.id) as total_product'), 'developer_tasks.assigned_to'])->pluck('total_product', 'assigned_to')->toArray();
        $userIds      = array_values(array_filter(array_keys($issuesGroups)));

        $userModel       = User::whereIn('id', $userIds)->pluck('name', 'id')->toArray();
        $countInProgress = [];
        if (! empty($issuesGroups) && ! empty($userModel)) {
            foreach ($issuesGroups as $key => $count) {
                $countInProgress[] = [
                    'id'    => $key,
                    'name'  => ! empty($userModel[$key]) ? $userModel[$key] : 'N/A',
                    'count' => $count,
                ];
            }
        }

        // Sort
        if ($request->order == 'priority') {
            $issues = $issues->orderBy('priority', 'ASC')->orderBy('created_at', 'DESC')->with('communications');
        } elseif ($request->order == 'latest_task_first') {
            $issues = $issues->orderBy('developer_tasks.id', 'DESC');
        } else {
            $issues = $issues->orderBy('chat_messages.id', 'desc');
        }

        $issues = $issues->with('communications');

        $issues   = $issues->paginate(Setting::get('pagination'));
        $priority = ErpPriority::where('model_type', '=', DeveloperTask::class)->pluck('model_id')->toArray();

        return view('development.partials.menu-summarydata', [
            'issues'          => $issues,
            'users'           => $users,
            'modules'         => $modules,
            'request'         => $request,
            'title'           => $title,
            'type'            => $type,
            'priority'        => $priority,
            'countPlanned'    => $countPlanned,
            'countInProgress' => $countInProgress,
            'statusList'      => $statusList,
            // 'languages' => $languages
        ]);
    }

    public function statuscolor(Request $request)
    {
        $status_color = $request->all();
        $data         = $request->except('_token');
        foreach ($status_color['color_name'] as $key => $value) {
            $bugstatus             = TaskStatus::find($key);
            $bugstatus->task_color = $value;
            $bugstatus->save();
        }

        return redirect()->back()->with('success', 'The status color updated successfully.');
    }

    public function automaticTasks(Request $request)
    {
        $users = Helpers::getUserArray(User::orderBy('name')->get());
        $title = 'Automatic Task List';

        $task = Task::leftJoin('site_developments', 'site_developments.id', 'tasks.site_developement_id')
            ->leftJoin('store_websites', 'store_websites.id', 'site_developments.website_id')
            ->with('timeSpent')->where('is_flow_task', '1');

        $devCheckboxs = $request->get('devCheckboxs');
        $dev          = [];

        if (isset($request->term) && ! empty($request->term)) {
            $task = $task->where(function ($query) use ($request) {
                $term = $request->get('term');
                $query->where('tasks.id', 'LIKE', "%$term%")
                    ->orWhere('store_websites.website', 'LIKE', "%$term%")
                    ->orWhere('tasks.parent_task_id', 'LIKE', "%$term%")
                    ->orWhere('tasks.task_subject', 'LIKE', "%$term%")
                    ->orWhere('tasks.task_details', 'LIKE', "%$term%")
                    ->orwhere('chat_messages.message', 'LIKE', "%$term%");
            });
        }

        if (isset($request->assigned_to) && ! empty($request->assigned_to)) {
            $task = $task->where('tasks.assign_to', $request->assigned_to);
        }

        if (isset($request->task_status) && ! empty($request->task_status)) {
            $task = $task->where('tasks.status', $request->task_status);
        }

        $task = $task->leftJoin(DB::raw('(SELECT MAX(id) as  max_id, task_id, message  FROM `chat_messages` where task_id > 0 GROUP BY task_id ) m_max'), 'm_max.task_id', '=', 'tasks.id');
        $task = $task->leftJoin('chat_messages', 'chat_messages.id', '=', 'm_max.max_id');
        $task = $task->select('tasks.*', 'chat_messages.message', 'store_websites.website', 'store_websites.title as website_title');

        if ($devCheckboxs) {
            $count = 1;
            foreach ($request->get('devCheckboxs') as $devCheckbox) {
                if ($count == 1) {
                    $task = $task->where('tasks.assign_to', $devCheckbox);
                } else {
                    $task = $task->orWhere('tasks.assign_to', $devCheckbox);
                }
                $count++;
                $dev[$devCheckbox] = 1;
            }
        }

        if (! auth()->user()->isReviwerLikeAdmin()) {
            if (count($dev) == 0) {
                $task = $task->where(function ($query) {
                    $query->where('tasks.assign_to', auth()->user()->id)
                        ->orWhere('tasks.master_user_id', auth()->user()->id);
                });
            }
        }

        $tasks = $task->paginate(50);

        $task_statuses = TaskStatus::all();

        if ($request->ajax()) {
            return response()->json([
                'tbody' => view('task-module.partials.flagsummarydata', compact('users', 'request', 'title', 'task_statuses', 'tasks', 'dev'))->with('i', ($request->input('page', 1) - 1) * 5)->render(),
                'links' => (string) $tasks->render(),
                'count' => $tasks->total(),
            ], 200);
        }

        return view('task-module.automatictask', [
            'users'         => $users,
            'request'       => $request,
            'title'         => $title,
            'task_statuses' => $task_statuses,
            'tasks'         => $tasks,
            'dev'           => $dev,
            'count'         => $tasks->total(),
        ]);
    }

    public function flagtask(Request $request)
    {
        $users      = Helpers::getUserArray(User::orderBy('name')->get());
        $statusList = \DB::table('task_statuses')->select('name')->orderBy('name')->pluck('name', 'name')->toArray();

        $isTeamLeader                  = \App\Team::where('user_id', auth()->user()->id)->first();
        $model_team                    = \DB::table('teams')->where('user_id', auth()->user()->id)->get()->toArray();
        $team_members_array[]          = auth()->user()->id;
        $team_id_array                 = [];
        $team_members_array_unique_ids = '';
        if (count($model_team) > 0) {
            for ($k = 0; $k < count($model_team); $k++) {
                $team_id_array[] = $model_team[$k]->id;
            }
            $team_ids         = implode(',', $team_id_array);
            $model_user_model = \DB::table('team_user')->whereIn('team_id', $team_id_array)->get()->toArray();
            for ($m = 0; $m < count($model_user_model); $m++) {
                $team_members_array[] = $model_user_model[$m]->user_id;
            }
        }

        $team_members_array_unique     = array_unique($team_members_array);
        $team_members_array_unique_ids = implode(',', $team_members_array_unique);

        $task_statuses   = TaskStatus::all();
        $taskStatusArray = $task_statuses->pluck('id', 'name')->toArray();
        $modules         = DeveloperModule::orderBy('name')->get();

        $type = $request->tasktype ? $request->tasktype : 'all';

        $title = 'Flag Task List';

        $issues = DeveloperTask::with(['timeSpent', 'leadtimeSpent', 'testertimeSpent', 'assignedUser', 'taskStatus']); // ->where('is_flagged', '1')
        $issues->whereNotIn('developer_tasks.status', [DeveloperTask::DEV_TASK_STATUS_DONE, DeveloperTask::DEV_TASK_STATUS_IN_REVIEW]);
        $issues->whereRaw('developer_tasks.assigned_to IN (SELECT id FROM users WHERE is_task_planned = 1)');

        $task = Task::with(['timeSpent', 'taskStatus']); // ->where('is_flagged', '1')
        $task->whereNotIn('tasks.status', [
            Task::TASK_STATUS_DONE,
            Task::TASK_STATUS_USER_COMPLETE,
            Task::TASK_STATUS_USER_COMPLETE_2,
        ]);
        $task->whereRaw('tasks.assign_to IN (SELECT id FROM users WHERE is_task_planned = 1)');

        if (Auth::user()->hasRole('Admin')) {
            $task->whereRaw('tasks.assign_to IN (SELECT id FROM users WHERE is_task_planned = 1)');
        } elseif ($isTeamLeader) {
            $task->whereRaw('tasks.assign_to IN (SELECT id FROM users WHERE is_task_planned = 1 AND id IN (' . $team_members_array_unique_ids . '))');
        } else {
            $login_user_id = auth()->user()->id;
            $task->whereRaw('tasks.assign_to IN (SELECT id FROM users WHERE is_task_planned = 1 AND id IN (' . $login_user_id . '))');
        }

        if ($type == 'issue') {
            $issues = $issues->where('developer_tasks.task_type_id', '3');
        }

        if ($type == 'devtask') {
            $issues = $issues->where('developer_tasks.task_type_id', '1');
        }
        if ((int) $request->get('submitted_by') > 0) {
            $issues = $issues->where('developer_tasks.created_by', $request->get('submitted_by'));
        }
        if ((int) $request->get('responsible_user') > 0) {
            $issues = $issues->where('developer_tasks.responsible_user_id', $request->get('responsible_user'));
        }

        if ((int) $request->get('corrected_by') > 0) {
            $issues = $issues->where('developer_tasks.user_id', $request->get('corrected_by'));
            $task   = $task->where('tasks.assign_from', $request->get('corrected_by'));
        }

        if ($s = request('assigned_to')) {
            if ($s[0] != '') {
                $issues = $issues->whereIn('developer_tasks.assigned_to', $s);
                $task   = $task->whereIn('tasks.assign_to', $s);
            }
        }
        if ((int) $request->get('empty_estimated_time') > 0) {
            $issues = $issues->where('developer_tasks.estimate_time', null);
            $issues = $issues->where('developer_tasks.estimate_date', null);
            $task   = $task->where('tasks.approximate', 0);
            $task   = $task->where('tasks.due_date', null);
        }
        if ((int) $request->get('time_is_overdue') > 0) {
            $issues = $issues->where('developer_tasks.estimate_date', '>', date('Y-m-d'))->where('developer_tasks.status', '!=', 'Done');

            $task = $task->where('tasks.due_date', '>', date('Y-m-d'))->where('tasks.status', '!=', 3);
        }
        if ($s = request('module_id', [])) {
            if ($s[0] != '') {
                $issues = $issues->whereIn('developer_tasks.module_id', $s);
            }
        }
        if (! empty($request->get('task_status', []))) {
            $issues = $issues->whereIn('developer_tasks.status', $request->get('task_status'));

            $requestStatusArray = [];
            foreach ($request->get('task_status') as $key => $status) {
                $requestStatusArray[] = $taskStatusArray[$status];
            }

            $task = $task->whereIn('tasks.status', $requestStatusArray);
        }
        $whereCondition = $whereTaskCondition = '';
        if ($request->get('subject') != '') {
            $whereCondition = ' and message like  "%' . $request->get('subject') . '%"';
            $issues         = $issues->where(function ($query) use ($request) {
                $subject = $request->get('subject');
                $query->where('developer_tasks.id', 'LIKE', "%$subject%")->orWhere('subject', 'LIKE', "%$subject%")->orWhere('task', 'LIKE', "%$subject%")
                    ->orwhere('chat_messages.message', 'LIKE', "%$subject%");
            });

            $whereTaskCondition = ' and message like  "%' . $request->get('subject') . '%"';
            $task               = $task->where(function ($query) use ($request) {
                $subject = $request->get('subject');
                $query->where('tasks.id', 'LIKE', "%$subject%")->orWhere('task_subject', 'LIKE', "%$subject%")->orWhere('task_details', 'LIKE', "%$subject%")
                    ->orwhere('chat_messages.message', 'LIKE', "%$subject%");
            });
        }

        $issues = $issues->leftJoin(DB::raw('(SELECT MAX(id) as  max_id, issue_id, message  FROM `chat_messages` where issue_id > 0 ' . $whereCondition . ' GROUP BY issue_id ) m_max'), 'm_max.issue_id', '=', 'developer_tasks.id');
        $issues = $issues->leftJoin('chat_messages', 'chat_messages.id', '=', 'm_max.max_id');

        if ($request->get('last_communicated', 'off') == 'on') {
            $issues = $issues->orderBy('chat_messages.id', 'desc');
        }

        $issues = $issues->select('developer_tasks.*', 'chat_messages.message');

        $task = $task->leftJoin(DB::raw('(SELECT MAX(id) as  max_id, task_id, message  FROM `chat_messages` where task_id > 0 ' . $whereTaskCondition . ' GROUP BY task_id ) m_max'), 'm_max.task_id', '=', 'tasks.id');
        $task = $task->leftJoin('chat_messages', 'chat_messages.id', '=', 'm_max.max_id');
        $task = $task->select('tasks.*', 'chat_messages.message');

        if ($isTeamLeader && ! Auth::user()->hasRole('Admin')) {
            $issues = $issues->where(function ($query) {
                $query->where('developer_tasks.assigned_to', auth()->user()->id)
                    ->orWhere('developer_tasks.master_user_id', auth()->user()->id);
            });
            $task = $task->where(function ($query) use ($team_members_array_unique) {
                $query->whereIn('tasks.assign_to', $team_members_array_unique)
                    ->orWhere('tasks.master_user_id', auth()->user()->id);
            });
        } elseif (! auth()->user()->isReviwerLikeAdmin()) {
            $issues = $issues->where(function ($query) {
                $query->where('developer_tasks.assigned_to', auth()->user()->id)
                    ->orWhere('developer_tasks.master_user_id', auth()->user()->id);
            });
            $task = $task->where(function ($query) {
                $query->where('tasks.assign_to', auth()->user()->id)
                    ->orWhere('tasks.master_user_id', auth()->user()->id);
            });
        }

        if ($request->delivery_date && $request->delivery_date != '') {
            $delivery_date = Carbon::parse($request->delivery_date)->toDateString();
            $issues->whereDate('due_date', $delivery_date);
            $task->whereDate('due_date', $delivery_date);
        }

        // Sort
        if ($request->order == 'priority') {
            $issues = $issues->orderBy('priority', 'ASC')->orderBy('created_at', 'DESC');
            $task   = $task->orderBy('priority_no', 'ASC')->orderBy('created_at', 'DESC');
        } elseif ($request->order == 'latest_task_first') {
            $issues = $issues->orderBy('developer_tasks.id', 'DESC');
            $task   = $task->orderBy('tasks.id', 'DESC');
        } elseif ($request->order == 'oldest_first') {
            $issues = $issues->orderBy('developer_tasks.id', 'ASC');
            $task   = $task->orderBy('tasks.id', 'ASC');
        } else {
            $issues = $issues->orderBy('chat_messages.id', 'desc');
            $task   = $task->orderBy('chat_messages.id', 'desc');
        }

        $paginateLimit = Setting::get('pagination') ?: 15;

        $issues = $issues->paginate($paginateLimit);

        $tasks = $task->paginate($paginateLimit);

        $priority = ErpPriority::where('model_type', '=', DeveloperTask::class)->pluck('model_id')->toArray();
        if ($request->ajax()) {
            $data               = '';
            $isReviwerLikeAdmin = auth()->user()->isReviwerLikeAdmin();
            $userID             = Auth::user()->id;
            foreach ($issues as $key => $issue) {
                if ($isReviwerLikeAdmin) {
                    $data .= view('development.partials.flagsummarydata', compact('issue', 'users', 'statusList', 'task_statuses'));
                } elseif ($issue->created_by == $userID || $issue->master_user_id == $userID || $issue->assigned_to == $userID) {
                    $data .= view('development.partials.flagdeveloper-row-view', compact('issue', 'users', 'statusList', 'task_statuses'));
                }
            }
            foreach ($tasks as $key => $issue) {
                if ($isReviwerLikeAdmin) {
                    $data .= view('task-module.partials.flagsummarydata2', compact('issue', 'users', 'statusList', 'task_statuses'));
                } elseif ($issue->created_by == $userID || $issue->master_user_id == $userID || $issue->assigned_to == $userID) {
                    $data .= view('task-module.partials.flagdeveloper-row-view', compact('issue', 'users', 'statusList', 'task_statuses'));
                }
            }

            return $data;
        }

        $taskMessage = TaskMessage::where('message_type', 'date_time_reminder_message')->first();

        return view('development.flagtask', [
            'issues'      => $issues,
            'users'       => $users,
            'modules'     => $modules,
            'request'     => $request,
            'title'       => $title,
            'type'        => $type,
            'priority'    => $priority,
            'tasks'       => $tasks,
            'taskMessage' => $taskMessage,
            // 'countPlanned' => $countPlanned,
            //'countInProgress' => $countInProgress,
            'statusList' => $statusList,
            // 'languages' => $languages,
            'task_statuses' => $task_statuses,
            'isTeamLeader'  => $isTeamLeader,
        ]);
    }

    public function gettasktimemessage(request $request)
    {
        $id           = $request->input('id');
        $html         = '';
        $chatmessages = ChatMessage::where('task_id', $id)->where('task_time_reminder', 1)->orwhere('developer_task_id', $id)->get();
        $i            = 1;
        if (count($chatmessages) > 0) {
            foreach ($chatmessages as $history) {
                $html .= '<tr>';
                $html .= '<td>' . $i . '</td>';
                $html .= '<td>' . $history->message . '</td>';
                $html .= '<td>' . $history->created_at . '</td>';
                $html .= '</tr>';

                $i++;
            }

            return response()->json(['html' => $html, 'success' => true], 200);
        } else {
            $html .= '<tr>';
            $html .= '<td></td>';
            $html .= '<td></td>';
            $html .= '<td></td>';
            $html .= '</tr>';
        }

        return response()->json(['html' => $html, 'success' => true], 200);
    }

    public function getlogtasktimemessage(request $request)
    {
        $id           = $request->input('id');
        $html         = '';
        $chatmessages = LogChatMessage::where('task_id', $id)->where('task_time_reminder', 1)->get();
        $i            = 1;
        if (count($chatmessages) > 0) {
            foreach ($chatmessages as $history) {
                $html .= '<tr>';
                $html .= '<td>' . $i . '</td>';
                $html .= '<td>' . $history->log_case_id . '</td>';
                $html .= '<td>' . $history->message . '</td>';
                $html .= '<td>' . $history->log_msg . '</td>';
                $html .= '<td>' . $history->created_at . '</td>';
                $html .= '</tr>';

                $i++;
            }

            return response()->json(['html' => $html, 'success' => true], 200);
        } else {
            $html .= '<tr>';
            $html .= '<td></td>';
            $html .= '<td></td>';
            $html .= '<td></td>';
            $html .= '<td></td>';
            $html .= '<td></td>';
            $html .= '</tr>';
        }

        return response()->json(['html' => $html, 'success' => true], 200);
    }

    public function saveTaskMessage(Request $request)
    {
        $input = $request->input();
        TaskMessage::updateOrCreate(['id' => $input['id']], $input);

        return response()->json([
            'success',
        ]);
    }

    public function saveTaskTimeMessage(Request $request)
    {
        $est_time_message['message']          = $request->est_time_message;
        $est_date_message['message']          = $request->est_date_message;
        $overdue_time_date_message['message'] = $request->overdue_time_date_message;

        TaskMessage::updateOrCreate(['message_type' => 'est_time_message', 'frequency' => $request->frequency], $est_time_message);
        TaskMessage::updateOrCreate(['message_type' => 'est_date_message', 'frequency' => $request->frequency], $est_date_message);
        TaskMessage::updateOrCreate(['message_type' => 'overdue_time_date_message', 'frequency' => $request->frequency], $overdue_time_date_message);

        return response()->json(['success']);
    }

    public function summaryList1(Request $request)
    {
        $modules = DeveloperModule::all();
        print_r($modules);

        $statusList = \DB::table('task_statuses')->select('name')->pluck('name', 'name')->toArray();

        $statusList = array_merge([
            '' => 'Select Status',
        ], $statusList);

        return view('development.summarylist', compact('modules', 'statusList'));
    }

    public function issueIndex(Request $request)
    {
        $issues = new Issue;

        if ((int) $request->get('submitted_by') > 0) {
            $issues = $issues->where('submitted_by', $request->get('submitted_by'));
        }
        if ((int) $request->get('responsible_user') > 0) {
            $issues = $issues->where('responsible_user_id', $request->get('responsible_user'));
        }
        if ((int) $request->get('assigned_to') > 0) {
            $issues = $issues->where('assigned_to', $request->get('assigned_to'));
        }
        if ((int) $request->get('corrected_by') > 0) {
            $issues = $issues->where('user_id', $request->get('corrected_by'));
        }
        if ($request->get('module')) {
            $issues = $issues->where('module', $request->get('module'));
        }
        if ($request->get('subject') != '') {
            $issues = $issues->where(function ($query) use ($request) {
                $subject = $request->get('subject');
                $query->where('id', 'LIKE', "%$subject%")->orWhere('subject', 'LIKE', "%$subject%");
            });
        }
        $modules = DeveloperModule::all();
        $users   = Helpers::getUserArray(User::all());
        // Hide resolved
        if ((int) $request->show_resolved !== 1) {
            $issues = $issues->where('is_resolved', 0);
        }
        // Sort
        if ($request->order == 'create') {
            $issues = $issues->orderBy('created_at', 'DESC')->with('communications')->get();
        } else {
            $issues = $issues->orderBy('priority', 'ASC')->orderBy('created_at', 'DESC')->with('communications')->get();
        }
        $priority = ErpPriority::where('model_type', '=', Issue::class)->pluck('model_id')->toArray();

        return view('development.issue', [
            'issues'   => $issues,
            'users'    => $users,
            'modules'  => $modules,
            'request'  => $request,
            'title'    => 'Issue',
            'priority' => $priority,
        ]);
    }

    public function listByUserId(Request $request)
    {
        $user_id        = $request->get('user_id', 0);
        $selected_issue = $request->get('selected_issue', []);
        $issues         = DeveloperTask::select('developer_tasks.*')
            ->leftJoin('erp_priorities', function ($query) use ($user_id) {
                $query->on('erp_priorities.model_id', '=', 'developer_tasks.id');
                $query->where('erp_priorities.model_type', '=', DeveloperTask::class);
                $query->where('erp_priorities.user_id', $user_id);
            })
            ->where('status', '!=', 'Done');
        if (auth()->user()->isAdmin()) {
            $issues = $issues->where(function ($q) use ($selected_issue, $user_id) {
                $user_id = is_null($user_id) ? 0 : $user_id;
                if ($user_id != 0) {
                    $q->where('developer_tasks.assigned_to', $user_id)
                        ->orWhere('developer_tasks.master_user_id', $user_id)
                        ->orWhere('developer_tasks.team_lead_id', $user_id)
                        ->orWhere('developer_tasks.tester_id', $user_id);
                }
                $q->whereIn('developer_tasks.id', $selected_issue)->orWhere('erp_priorities.user_id', $user_id);
            });
        } else {
            $issues = $issues->whereNotNull('erp_priorities.id');
        }

        $issues = $issues->orderBy('erp_priorities.id')->get();
        foreach ($issues as &$value) {
            $value->module     = $value->developerModule->name;
            $value->created_by = User::where('id', $value->created_by)->value('name');
        }
        unset($value);
        $viewData = view('development.partials.taskpriority', compact('issues'))->render();

        return response()->json([
            'html' => $viewData,

        ], 200);
    }

    public function setPriority(Request $request)
    {
        $priority = $request->get('priority', null);
        $user_id  = $request->get('user_id', 0);
        //delete old priority
        ErpPriority::where('user_id', $user_id)->where('model_type', '=', DeveloperTask::class)->delete();

        if (! empty($priority)) {
            foreach ((array) $priority as $model_id) {
                ErpPriority::create([
                    'model_id'   => $model_id,
                    'model_type' => DeveloperTask::class,
                    'user_id'    => $user_id,
                ]);
            }

            $issues = DeveloperTask::select('developer_tasks.id', 'developer_tasks.module_id', 'developer_tasks.subject', 'developer_tasks.task', 'developer_tasks.created_by', 'developer_tasks.task_type_id')
                ->join('erp_priorities', function ($query) use ($user_id) {
                    $query->on('erp_priorities.model_id', '=', 'developer_tasks.id');
                    $query->where('erp_priorities.model_type', '=', DeveloperTask::class);
                    $query->where('erp_priorities.user_id', '=', $user_id);
                })
                ->where('is_resolved', '0')
                ->orderBy('erp_priorities.id')
                ->get();
            $message = '';
            $i       = 1;
            foreach ($issues as $value) {
                $mode = ($value->task_type_id == 3) ? '#ISSUE-' : '#TASK-';
                $message .= $i . ' : ' . $mode . $value->id . '-' . $value->subject . "\n";
                $i++;
            }
            if (! empty($message)) {
                $requestData = new Request();
                $requestData->setMethod('POST');
                $params            = [];
                $params['user_id'] = $request->get('user_id', 0);

                $string = '';
                if (! empty($request->get('global_remarkes', null))) {
                    $string .= $request->get('global_remarkes') . "\n";
                }
                $string .= "Issue Priority is : \n" . $message;

                $params['message'] = $string;
                $params['status']  = 2;
                $requestData->request->add($params);
                app(\App\Http\Controllers\WhatsAppController::class)->sendMessage($requestData, 'priority');
            }
        }

        return response()->json([
            'status' => 'success',
        ]);
    }

    public function issueCreate()
    {
        return view('development.issue-create');
    }

    private function createHubstaffTask(string $taskSummary, ?int $hubstaffUserId, int $projectId, bool $shouldRetry = true)
    {
        $tokens     = $this->getTokens();
        $url        = 'https://api.hubstaff.com/v2/projects/' . $projectId . '/tasks';
        $httpClient = new Client();
        try {
            $body = [
                'summary' => $taskSummary,
            ];

            if ($hubstaffUserId) {
                $body['assignee_id'] = $hubstaffUserId;
            } else {
                $body['assignee_id'] = config('env.HUBSTAFF_DEFAULT_ASSIGNEE_ID');
            }

            $response = $httpClient->post(
                $url,
                [
                    RequestOptions::HEADERS => [
                        'Authorization' => 'Bearer ' . $tokens->access_token,
                        'Content-Type'  => 'application/json',
                    ],

                    RequestOptions::BODY => json_encode($body),
                ]
            );
            $parsedResponse = json_decode($response->getBody()->getContents());

            return $parsedResponse->task->id;
        } catch (ClientException $e) {
            if ($e->getCode() == 401) {
                $this->refreshTokens();
                if ($shouldRetry) {
                    return $this->createHubstaffTask(
                        $taskSummary,
                        $hubstaffUserId,
                        $projectId,
                        false
                    );
                }
            }
        }

        return false;
    }

    public function timeDoctorActions($type, $task, $projectId, $accountId, $assignTo)
    {
        $project_data                                 = [];
        $project_data['time_doctor_project']          = $projectId;
        $project_data['time_doctor_task_name']        = $task['subject'] ?? '';
        $project_data['time_doctor_task_description'] = $task['task'] ?? '';

        if ($type == 'DEVTASK') {
            $message   = '#DEVTASK-' . $task->id . ' => ' . $task->subject;
            $projectId = '#DEVTASK-' . $task->id;
        } elseif ($type == 'TASK') {
            $message   = '#TASK-' . $task->id . ' => ' . $task->task_subject . '. ' . $task->task_details;
            $projectId = '#TASK-' . $task->id;
        } else {
            return false;
        }

        $assignUsersData = TimeDoctorAccount::find($accountId);
        $timedoctor      = Timedoctor::getInstance();
        $companyId       = $assignUsersData->company_id;
        $accessToken     = $assignUsersData->auth_token;

        if (config('app.env') === 'production') {
            $timeDoctorTaskId       = '';
            $timeDoctorTaskResponse = $timedoctor->createGeneralTask($companyId, $accessToken, $project_data, $task->id, $type);
            if (! empty($timeDoctorTaskResponse['data'])) {
                $timeDoctorTaskId = $timeDoctorTaskResponse['data']['id'];
            }

            if ($timeDoctorTaskId && $timeDoctorTaskId != '') {
                $task->time_doctor_task_id = $timeDoctorTaskId;
                $task->save();
                $time_doctor_task                         = new \App\TimeDoctor\TimeDoctorTask();
                $time_doctor_task->time_doctor_task_id    = $timeDoctorTaskId;
                $time_doctor_task->project_id             = $projectId;
                $time_doctor_task->time_doctor_project_id = $projectId;
                $time_doctor_task->summery                = $message;
                $time_doctor_task->save();
            }

            return $timeDoctorTaskResponse;
        } else {
            return false;
        }
    }

    /**
     * return branch name or false
     *
     * @param mixed $repositoryId
     * @param mixed $taskId
     * @param mixed $taskTitle
     * @param mixed $branchName
     */
    private function createBranchOnGithub($repositoryId, $taskId, $taskTitle, $branchName = 'master')
    {
        $newBranchName = 'DEVTASK-' . $taskId;

        $githubRepository = GithubRepository::find($repositoryId);
        $organization     = $githubRepository->organization;

        if (empty($organization)) {
            return false;
        }

        $githubClientObj = $this->connectGithubClient($organization->username, $organization->token);

        // get the master branch SHA
        $url = 'https://api.github.com/repositories/' . $repositoryId . '/branches/' . $branchName;
        try {
            $response  = $githubClientObj->get($url);
            $masterSha = json_decode($response->getBody()->getContents())->commit->sha;
        } catch (Exception $e) {
            return false;
        }

        // create a branch
        $url = 'https://api.github.com/repositories/' . $repositoryId . '/git/refs';
        try {
            $this->githubClient->post(
                $url,
                [
                    RequestOptions::BODY => json_encode([
                        'ref' => 'refs/heads/' . $newBranchName,
                        'sha' => $masterSha,
                    ]),
                ]
            );

            return $newBranchName;
        } catch (Exception $e) {
            if ($e instanceof ClientException && $e->getResponse()->getStatusCode() == 422) {
                // branch already exists
                return $newBranchName;
            }

            return false;
        }
    }

    /**
     * Store a newly created resource in storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $this->validate($request, [
            'subject'       => 'sometimes|nullable|string',
            'task'          => 'required|string|min:3',
            'status'        => 'required',
            'repository_id' => 'required',
            'module_id'     => 'required',
        ]);

        $data                     = $request->except('_token');
        $data['hubstaff_project'] = config('env.HUBSTAFF_BULK_IMPORT_PROJECT_ID');
        $data['user_id']          = request('user_id', loginId());
        $data['created_by']       = Auth::id();
        $data['priority']         = 0;
        $data['hubstaff_task_id'] = 0;
        $data['repository_id']    = request('repository_id');

        $slotAvailable = $this->userSchedulesLoadData($request->get('assigned_to'));

        if (! empty($slotAvailable)) {
            $data['status']        = 'Planned';
            $data['start_date']    = $slotAvailable['st'];
            $data['estimate_date'] = $slotAvailable['en'];
        }

        $task = $this->developerTaskCreate($data);

        if (request('need_review_task')) {
            $data['parent_review_task_id'] = $task->id;
            $reviewTask                    = $this->developerTaskCreate($data);
        }
        if ($request->ajax()) {
            return response()->json(['task' => $task]);
        }

        return redirect(url('development/summarylist'))->with('success', 'You have successfully added task!');
    }

    public function developerTaskCreate($data)
    {
        $loggedUser = request()->user();

        $data['created_by'] = loginId();

        if ($data['parent_review_task_id'] ?? 0) {
            $data['subject'] = $data['subject'] . ' - #REVIEW_TASK';
            $data['task']    = $data['task'] . ' - #REVIEW_TASK';
        }
        $task = DeveloperTask::create($data);

        // Check the assinged user in any team ?
        if ($task->assigned_to > 0 && empty($task->team_lead_id)) {
            $teamUser = \App\TeamUser::where('user_id', $task->assigned_to)->first();
            if ($teamUser) {
                $team = $teamUser->team;
                if ($team) {
                    if (strlen($team->user_id) > 0 && $team->user_id > 0) {
                        $task->team_lead_id = $team->user_id;
                        $task->save();
                    } elseif (strlen($team->second_lead_id) > 0 && $team->second_lead_id > 0) {
                        $task->team_lead_id = $team->second_lead_id;
                        $task->save();
                    }
                }
            } else {
                $isTeamLeader = \App\Team::where('user_id', $task->assigned_to)
                    ->orWhere('second_lead_id', $task->assigned_to)->first();

                if ($isTeamLeader) {
                    $task->team_lead_id = $task->assigned_to;
                    $task->save();
                }
            }
        }

        // CREATE GITHUB REPOSITORY BRANCH
        $newBranchName = $this->createBranchOnGithub(
            $task->repository_id,
            $task->id,
            $task->subject
        );

        // UPDATE TASK WITH BRANCH NAME
        if ($newBranchName) {
            $task->github_branch_name = $newBranchName;
            $task->save();
        }

        // SEND MESSAGE
        if (is_string($newBranchName)) {
            $message = $task->task . PHP_EOL . 'A new branch ' . $newBranchName . " has been created. Please pull the current code and run 'git checkout " . $newBranchName . "' to work in that branch.";
        } else {
            $message = $task->task;
        }
        $requestData = new Request();
        $requestData->setMethod('POST');
        $requestData->request->add(['issue_id' => $task->id, 'message' => $message, 'status' => 1]);
        app(\App\Http\Controllers\WhatsAppController::class)->sendMessage($requestData, 'issue');

        MessageHelper::sendEmailOrWebhookNotification([
            $task->user_id,
            $task->assigned_to,
            $task->master_user_id,
            $task->responsible_user_id,
            $task->team_lead_id,
            $task->tester_id,
        ], ' [ ' . $loggedUser->name . ' ] - ' . $message);

        $hubstaff_project_id = config('env.HUBSTAFF_BULK_IMPORT_PROJECT_ID') ?: 0;

        $hubstaffUserId = null;
        if ($assignedUser = HubstaffMember::where('user_id', $task->assigned_to)->first()) {
            $hubstaffUserId = $assignedUser->hubstaff_user_id;
        }

        $summary = substr($task->task, 0, 200);
        if ($data['task_type_id'] == 1) {
            $taskSummery = '#DEVTASK-' . $task->id . ' => ' . $summary;
        } else {
            $taskSummery = '#TASK-' . $task->id . ' => ' . $summary;
        }

        if (isset($data['task_for']) && $data['task_for'] == 'time_doctor') {
            $this->timeDoctorActions('DEVTASK', $task, $data['time_doctor_project'], $data['time_doctor_account'], $data['assigned_to']);
        } else {
            $hubstaffTaskId = '';
            if (env('PRODUCTION', true)) {
                $hubstaffTaskId = $this->createHubstaffTask(
                    $taskSummery,
                    $hubstaffUserId,
                    $hubstaff_project_id
                );
            } else {
                $hubstaff_project_id = '#TASK-3';
                $hubstaffUserId      = 406; //for local system
                $hubstaffTaskId      = 34543; //for local system
            }

            if ($hubstaffTaskId) {
                $task->hubstaff_task_id = $hubstaffTaskId;
                $task->save();

                $task                      = new HubstaffTask();
                $task->hubstaff_task_id    = $hubstaffTaskId;
                $task->project_id          = $hubstaff_project_id;
                $task->hubstaff_project_id = $hubstaff_project_id;
                $task->summary             = $task->task;
                $task->save();
            }
        }

        return $task;
    }

    public function issueStore(Request $request)
    {
        $this->validate($request, [
            'priority' => 'required|integer',
            'issue'    => 'required|min:3',
        ]);
        $data   = $request->except('_token');
        $module = $request->get('module');

        if ($request->response == 1) {
            $reference = md5(strtolower($request->reference));
            //Check if reference exist
            $existReference = DeveloperTask::where('reference', $reference)->first();
            if ($existReference != null || $existReference != '') {
                return redirect()->back()->withErrors(['Issue Already Created!']);
            }
        }

        if (! isset($reference)) {
            $reference = null;
        }

        if (is_string($module)) {
            $module = DeveloperModule::where('name', 'like', $module)->first();
        } else {
            $module = DeveloperModule::find($module);
        }

        if (! $module) {
            $module       = new DeveloperModule();
            $module->name = $request->get('module');
            $module->save();
            $data['module'] = $module->id;
        }
        $userId                    = Auth::id();
        $userId                    = ! empty($userId) ? $userId : $request->get('assigned_to', 0);
        $task                      = new DeveloperTask;
        $task->priority            = $request->input('priority');
        $task->subject             = $request->input('subject');
        $task->task                = $request->input('issue');
        $task->responsible_user_id = 0;
        $task->assigned_to         = $request->get('assigned_to', 0);
        $task->module_id           = $module->id;
        $task->user_id             = 0;
        $task->assigned_by         = $userId;
        $task->created_by          = $userId;
        $task->reference           = $reference;
        $task->status              = $request->get('status', 'Issue');
        $task->task_type_id        = $request->get('task_type_id', 3);
        $task->scraper_id          = $request->input('scraper_id', null);
        $task->brand_id            = $request->input('brand_id', null);
        $task->save();

        $repo = GithubRepository::where('name', 'erp')->first();

        if ($repo) {
            $this->createBranchOnGithub($repo->id, $task->id, $task->subject);
        }

        if ($request->hasfile('images')) {
            foreach ($request->file('images') as $image) {
                $media = MediaUploader::fromSource($image)
                    ->toDirectory('issue/' . floor($task->id / config('constants.image_per_folder')))
                    ->upload();
                $task->attachMedia($media, config('constants.media_tags'));
            }
        }
        $requestData = new Request();
        $requestData->setMethod('POST');
        $requestData->request->add(['issue_id' => $task->id, 'message' => $request->input('issue'), 'status' => 1]);
        app(\App\Http\Controllers\WhatsAppController::class)->sendMessage($requestData, 'issue');

        return redirect()->back()->with('success', 'You have successfully submitted an issue!');
    }

    public function moduleStore(Request $request)
    {
        $this->validate($request, [
            'name' => 'required|min:1|unique:developer_modules,name,NULL,id,deleted_at,NULL',
        ]);
        $data = $request->except('_token');
        DeveloperModule::create($data);

        return redirect()->back()->with('success', 'You have successfully submitted an issue!');
    }

    public function statusStore(Request $request)
    {
        $this->validate($request, [
            'name' => 'required|string',
        ]);
        $data = $request->except('_token');
        TaskStatus::create($data);

        return redirect()->back()->with('success', 'You have successfully created a status!');
    }

    public function commentStore(Request $request)
    {
        $this->validate($request, [
            'message' => 'required|string|min:3',
        ]);
        $data            = $request->except('_token');
        $data['user_id'] = Auth::id();

        DeveloperComment::create($data);

        return redirect()->back()->with('success', 'You have successfully wrote a comment!');
    }

    public function costStore(Request $request)
    {
        $this->validate($request, [
            'amount'    => 'required|numeric',
            'paid_date' => 'required',
        ]);
        $data = $request->except('_token');
        DeveloperCost::create($data);

        return redirect()->back()->with('success', 'You have successfully added payment!');
    }

    public function awaitingResponse(Request $request, $id)
    {
        $comment         = DeveloperComment::find($id);
        $comment->status = 1;
        $comment->save();

        return response('success');
    }

    public function issueAssign(Request $request, $id)
    {
        $this->validate($request, [
            'user_id' => 'required|integer',
        ]);
        $issue          = Issue::find($id);
        $task           = new DeveloperTask;
        $task->priority = $issue->priority;
        $task->task     = $issue->issue;
        $task->user_id  = $request->user_id;
        $task->status   = 'Planned';
        $task->save();
        foreach ($issue->getMedia(config('constants.media_tags')) as $image) {
            $task->attachMedia($image, config('constants.media_tags'));
        }
        $issue->user_id = $request->user_id;
        $issue->save();
        $issue->delete();

        return redirect()->back()->with('success', 'You have successfully assigned the issue!');
    }

    public function moduleAssign(Request $request, $id)
    {
        $this->validate($request, [
            'user_id' => 'required|integer',
        ]);
        $module          = DeveloperTask::find($id);
        $module->user_id = $request->user_id;
        $module->module  = 0;
        $module->save();

        return redirect()->route('development.index')->with('success', 'You have successfully assigned the module!');
    }

    /**
     * Update the specified resource in storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        $this->validate($request, [
            'priority' => 'required|integer',
            'task'     => 'required|string|min:3',
            'cost'     => 'sometimes||nullable|integer',
            'status'   => 'required',
        ]);
        $data            = $request->except('_token');
        $data['user_id'] = $request->user_id ? $request->user_id : Auth::id();

        $task = DeveloperTask::find($id);
        $task->update($data);
        if ($request->hasfile('images')) {
            foreach ($request->file('images') as $image) {
                $media = MediaUploader::fromSource($image)
                    ->toDirectory('developertask/' . floor($task->id / config('constants.image_per_folder')))
                    ->upload();
                $task->attachMedia($media, config('constants.media_tags'));
            }
        }

        return redirect()->route('development.index')->with('success', 'You have successfully updated task!');
    }

    public function updateCost(Request $request, $id)
    {
        $task = DeveloperTask::find($id);
        if ($task->user_id == Auth::id()) {
            $task->cost = $request->cost;
            $task->save();
        }

        return response('success');
    }

    public function updateStatus(Request $request, $id)
    {
        $task         = DeveloperTask::find($id);
        $task->status = $request->status;
        if ($request->status == 'In Progress') {
            $task->start_time = Carbon::now();
        }
        if ($request->status == 'Done') {
            $task->end_time = Carbon::now();
        }
        $task->save();

        return response('success');
    }

    public function updateTask(Request $request, $id)
    {
        $task       = DeveloperTask::find($id);
        $task->task = $request->task;
        $task->save();

        return response('success');
    }

    public function updatePriority(Request $request, $id)
    {
        $task           = DeveloperTask::find($id);
        $task->priority = $request->priority;
        $task->save();

        return response()->json([
            'priority' => $task->priority,
        ]);
    }

    public function verify(Request $request, $id)
    {
        $task            = DeveloperTask::find($id);
        $task->completed = 1;
        $task->save();
        $notifications = PushNotification::where('model_type', \App\DeveloperTask::class)->where('model_id', $task->id)->where('isread', 0)->get();
        foreach ($notifications as $notification) {
            $notification->isread = 1;
            $notification->save();
        }
        if ($request->ajax()) {
            return response('success');
        }

        return redirect()->route('development.index')->with('success', 'You have successfully verified the task!');
    }

    public function verifyView(Request $request)
    {
        $task = DeveloperTask::find($request->id);
        PushNotification::where('model_type', \App\DeveloperTask::class)->where('model_id', $request->id)->delete();
        if ($request->tab) {
            return redirect(url("/development#task_$request->id"));
        } else {
            return redirect(url("/development?user=$request->user#task_$task->id"));
        }
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function destroy(Request $request, $id)
    {
        $task = DeveloperTask::find($id);
        $task->development_details()->delete();
        $task->delete();
        if ($request->ajax()) {
            return response('success');
        }

        return redirect()->route('development.index')->with('success', 'You have successfully archived the task!');
    }

    public function issueDestroy($id)
    {
        DeveloperTask::find($id)->delete();

        return redirect()->route('development.issue.index')->with('success', 'You have successfully archived the issue!');
    }

    public function moduleDestroy($id)
    {
        $module = DeveloperModule::find($id);
        foreach ($module->tasks as $task) {
            $task->module_id = '';
            $task->save();
        }
        $module->delete();

        return redirect()->route('development.index')->with('success', 'You have successfully archived the module!');
    }

    public function assignUser(Request $request)
    {
        $issue = DeveloperTask::find($request->get('issue_id'));

        $slotAvailable = $this->userSchedulesLoadData($request->get('assigned_to'));

        if (! empty($slotAvailable)) {
            $issue->status        = 'Planned';
            $issue->start_date    = $slotAvailable['st'];
            $issue->estimate_date = $slotAvailable['en'];
        }

        $user = User::find($request->get('assigned_to'));

        if (! $user) {
            return response()->json([
                'status' => 'success', 'message' => 'user not found',
            ], 500);
        }

        $hubstaff_project_id = config('env.HUBSTAFF_BULK_IMPORT_PROJECT_ID');

        $assignedUser = HubstaffMember::where('user_id', $request->get('assigned_to'))->first();

        $hubstaffUserId = null;
        if ($assignedUser) {
            $hubstaffUserId = $assignedUser->hubstaff_user_id;
        }

        $summary = substr($issue->task, 0, 200);
        if ($issue->task_type_id == 1) {
            $taskSummery = '#DEVTASK-' . $issue->id . ' => ' . $summary;
        } else {
            $taskSummery = '#TASK-' . $issue->id . ' => ' . $summary;
        }
        if ($hubstaffUserId) {
            $hubstaffTaskId = $this->createHubstaffTask(
                $taskSummery,
                $hubstaffUserId,
                $hubstaff_project_id
            );
            if ($hubstaffTaskId) {
                $issue->hubstaff_task_id = $hubstaffTaskId;
                $issue->save();

                $task                      = new HubstaffTask();
                $task->hubstaff_task_id    = $hubstaffTaskId;
                $task->project_id          = $hubstaff_project_id;
                $task->hubstaff_project_id = $hubstaff_project_id;
                $task->summary             = $taskSummery;
                $task->save();
            }
        }

        $old_id = $issue->assigned_to;
        if (! $old_id) {
            $old_id = 0;
        }
        $issue->assigned_to = $request->get('assigned_to');
        $issue->save();

        $taskUser             = new TaskUserHistory;
        $taskUser->model      = \App\DeveloperTask::class;
        $taskUser->model_id   = $issue->id;
        $taskUser->old_id     = $old_id;
        $taskUser->new_id     = $request->get('assigned_to');
        $taskUser->user_type  = 'developer';
        $taskUser->updated_by = Auth::user()->name;
        $taskUser->save();

        return response()->json([
            'status' => 'success',
        ]);
    }

    public function userSchedulesLoadData($user_id)
    {
        $isPrint = ! request()->ajax();

        $stDate = $start_date = date('Y-m-d');
        $enDate = $start_date = date('Y-m-d', strtotime(' + 30 days'));
        if ($stDate && $enDate) {
            $filterDates    = dateRangeArr($stDate, $enDate);
            $filterDatesNew = [];
            foreach ($filterDates as $row) {
                $filterDatesNew[$row['date']] = $row;
            }

            $q = User::query();
            $q->leftJoin('user_avaibilities as ua', 'ua.user_id', '=', 'users.id');
            $q->where('users.is_task_planned', 1);
            $q->where('ua.is_latest', 1);
            if (! isAdmin()) {
                $q->where('users.id', loginId());
            }

            $q->where('users.id', $user_id);

            if (request('is_active')) {
                $q->where('users.is_active', request('is_active') == 1 ? 1 : 0);
            }
            $q->select([
                'users.id',
                'users.name',
                \DB::raw('ua.id AS uaId'),
                \DB::raw('ua.date AS uaDays'),
                \DB::raw('ua.from AS uaFrom'),
                \DB::raw('ua.to AS uaTo'),
                \DB::raw('ua.start_time AS uaStTime'),
                \DB::raw('ua.end_time AS uaEnTime'),
                \DB::raw('ua.lunch_time AS uaLunchTime'),
                \DB::raw('ua.lunch_time_from AS lunch_time_from'),
                \DB::raw('ua.lunch_time_to AS lunch_time_to'),
            ]);
            $users = $q->get();
            $count = $users->count();

            if ($count) {
                $filterDatesOnly = array_column($filterDates, 'date');

                $userIds = [];

                // Prepare user's data
                $userArr = [];
                foreach ($users as $single) {
                    $userIds[] = $single->id;
                    if ($single->uaId) {
                        $single->uaStTime    = date('H:i:00', strtotime($single->uaStTime));
                        $single->uaEnTime    = date('H:i:00', strtotime($single->uaEnTime));
                        $single->uaLunchTime = $single->uaLunchTime ? date('H:i:00', strtotime($single->uaLunchTime)) : '';

                        $single->uaDays = $single->uaDays ? explode(',', str_replace(' ', '', $single->uaDays)) : [];
                        $availableDates = UserAvaibility::getAvailableDates($single->uaFrom, $single->uaTo, $single->uaDays, $filterDatesOnly);
                        $availableSlots = UserAvaibility::dateWiseHourlySlotsV2($availableDates, $single->uaStTime, $single->uaEnTime, $single->uaLunchTime, $single);

                        $userArr[] = [
                            'id'             => $single->id,
                            'name'           => $single->name,
                            'uaLunchTime'    => $single->uaLunchTime ? substr($single->uaLunchTime, 0, 5) : '',
                            'uaId'           => $single->uaId,
                            'uaDays'         => $single->uaDays,
                            'availableDays'  => $single->uaDays,
                            'availableDates' => $availableDates,
                            'availableSlots' => $availableSlots,
                        ];
                    } else {
                        $userArr[] = [
                            'id'             => $single->id,
                            'name'           => $single->name,
                            'uaLunchTime'    => null,
                            'uaId'           => null,
                            'uaDays'         => [],
                            'availableDays'  => [],
                            'availableDates' => [],
                            'availableSlots' => [],
                        ];
                    }
                }

                // Get Tasks & Developer Tasks -- Arrange with End time & Mins
                $tasksArr = [];
                if ($userIds) {
                    $tasksInProgress = $this->typeWiseTasks('IN_PROGRESS', [
                        'userIds' => $userIds,
                    ]);
                    $tasksPlanned = $this->typeWiseTasks('PLANNED', [
                        'userIds' => $userIds,
                    ]);

                    if ($tasksInProgress) {
                        foreach ($tasksInProgress as $task) {
                            $task->st_date = date('Y-m-d H:i:00', strtotime($task->st_date));

                            if (! isset($task->en_date)) {
                                $task->en_date = date('Y-m-d H:i:00', strtotime($task->st_date . ' + ' . $task->est_minutes . 'minutes'));
                            }

                            $tasksArr[$task->assigned_to][$task->status2][] = [
                                'id'              => $task->id,
                                'typeId'          => $task->type . '-' . $task->id,
                                'stDate'          => $task->st_date,
                                'enDate'          => $task->en_date,
                                'status'          => $task->status,
                                'status2'         => $task->status2,
                                'mins'            => $task->est_minutes,
                                'manually_assign' => $task->manually_assign,
                            ];
                        }
                    }
                    if ($tasksPlanned) {
                        foreach ($tasksPlanned as $task) {
                            $task->est_minutes                              = 20;
                            $task->st_date                                  = $task->st_date ?: date('Y-m-d H:i:00');
                            $task->en_date                                  = date('Y-m-d H:i:00', strtotime($task->st_date . ' + ' . $task->est_minutes . 'minutes'));
                            $tasksArr[$task->assigned_to][$task->status2][] = [
                                'id'              => $task->id,
                                'typeId'          => $task->type . '-' . $task->id,
                                'stDate'          => $task->st_date,
                                'enDate'          => $task->en_date,
                                'status'          => $task->status,
                                'status2'         => $task->status2,
                                'mins'            => $task->est_minutes,
                                'manually_assign' => $task->manually_assign,
                            ];
                        }
                    }
                }
                if ($isPrint) {
                    _p($tasksArr);
                }

                // Arrange tasks on users slots
                foreach ($userArr as $k1 => $user) {
                    $userTasksArr = isset($tasksArr[$user['id']]) && count($tasksArr[$user['id']]) ? $tasksArr[$user['id']] : [];
                    if ($user['uaId'] && isset($user['availableSlots']) && count($user['availableSlots'])) {
                        foreach ($user['availableSlots'] as $date => $slots) {
                            foreach ($slots as $k2 => $slot) {
                                if ($slot['type'] == 'AVL' || $slot['slot_type'] == 'AVL') {
                                    $res = $this->slotIncreaseAndShift($slot, $userTasksArr);

                                    $slot['taskIds']   = $res['taskIds'] ?? [];
                                    $slot['userTasks'] = $res['userTasks'] ?? [];
                                }
                                $slots[$k2] = $slot;
                            }

                            $user['availableSlots'][$date] = $slots;
                        }
                    }
                    $userArr[$k1] = $user;
                }

                if ($isPrint) {
                    _p($userArr);
                }

                // Arange for datatable
                foreach ($userArr as $user) {
                    if ($user['uaId'] && isset($user['availableSlots']) && count($user['availableSlots'])) {
                        foreach ($user['availableSlots'] as $date => $slots) {
                            foreach ($slots as $slot) {
                                if (in_array($slot['type'], ['AVL', 'SMALL-LUNCH', 'LUNCH-START', 'LUNCH-END']) && $slot['slot_type'] != 'PAST') {
                                    $ut_array         = [];
                                    $ut_arrayManually = [];

                                    if (! empty($slot['userTasks'])) {
                                        foreach ($slot['userTasks'] as $ut) {
                                            if ($ut['manually_assign'] == 1) {
                                                $ut_arrayManually[] = $ut['typeId'];
                                            } else {
                                                $ut_array[] = $ut['typeId'];
                                            }
                                        }
                                    } else {
                                        if ($slot['type'] == 'AVL') {
                                            return $slot;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    public function typeWiseTasks($type, $wh = [])
    {
        $userIds         = $wh['userIds'] ?? [0];
        $taskStatuses    = [0];
        $devTaskStatuses = ['none'];

        if ($type == 'IN_PROGRESS') {
            $taskStatuses = [
                Task::TASK_STATUS_IN_PROGRESS,
            ];
            $devTaskStatuses = [
                DeveloperTask::DEV_TASK_STATUS_IN_PROGRESS,
            ];
        } elseif ($type == 'PLANNED') {
            $taskStatuses = [
                Task::TASK_STATUS_PLANNED,
            ];
            $devTaskStatuses = [
                DeveloperTask::DEV_TASK_STATUS_PLANNED,
            ];
        }

        // start_date IS NOT NULL AND approximate > 0
        // start_date IS NOT NULL AND estimate_minutes > 0

        $sql = "SELECT
            listdata.*
            FROM (
            (
                SELECT 
                    id, 
                    'T' AS type, 
                    assign_to AS assigned_to, 
                    manually_assign, 
                    task_subject AS title, 
                    start_date AS st_date, 
                    due_date AS en_date, 
                    COALESCE(approximate, 0) AS est_minutes, 
                    status,
                    (
                        CASE
                            WHEN status = '" . Task::TASK_STATUS_IN_PROGRESS . "' THEN 'IN_PROGRESS'
                            WHEN status = '" . Task::TASK_STATUS_PLANNED . "' THEN 'PLANNED'
                        END
                    ) AS status2
                FROM 
                    tasks 
                WHERE 
                1
                AND (
                    ( status = '" . Task::TASK_STATUS_IN_PROGRESS . "' AND start_date IS NOT NULL )
                    OR 
                    ( status != '" . Task::TASK_STATUS_IN_PROGRESS . "' )
                )
                AND deleted_at IS NULL
                AND assign_to IN (" . implode(',', $userIds) . ") 
                AND status IN ('" . implode("','", $taskStatuses) . "') 
            )
            UNION
            (
                SELECT 
                    id, 
                    'DT' AS type, 
                    assigned_to AS assigned_to, 
                    manually_assign, 
                    subject AS title, 
                    start_date AS st_date, 
                    estimate_date AS en_date, 
                    COALESCE(estimate_minutes, 0) AS est_minutes, 
                    status,
                    (
                        CASE
                            WHEN status = '" . DeveloperTask::DEV_TASK_STATUS_IN_PROGRESS . "' THEN 'IN_PROGRESS'
                            WHEN status = '" . DeveloperTask::DEV_TASK_STATUS_PLANNED . "' THEN 'PLANNED'
                        END
                    ) AS status2
                FROM developer_tasks
                WHERE 1
                AND (
                    ( status = '" . DeveloperTask::DEV_TASK_STATUS_IN_PROGRESS . "' AND start_date IS NOT NULL )
                    OR 
                    ( status != '" . DeveloperTask::DEV_TASK_STATUS_IN_PROGRESS . "' )
                )
                AND deleted_at IS NULL
                AND assigned_to IN (" . implode(',', $userIds) . ")
                AND status IN ('" . implode("','", $devTaskStatuses) . "')
            )
        ) AS listdata
        ORDER BY listdata.st_date ASC";

        $tasks = \DB::select($sql, []);

        return $tasks;
    }

    public function slotIncreaseAndShift($slot, $tasks)
    {
        // IN_PROGRESS, PLANNED

        $taskIds   = [];
        $userTasks = [];

        if ($tasks) {
            if ($list = ($tasks['IN_PROGRESS'] ?? [])) {
                foreach ($list as $k => $task) {
                    $SlotStart = Carbon::parse($slot['st']);
                    $SlotEnd   = Carbon::parse($slot['en']);
                    $TaskStart = Carbon::parse($task['stDate']);
                    $TaskEnd   = Carbon::parse($task['enDate']);

                    if (
                        ($TaskStart->gte($SlotStart) && $TaskStart->lte($SlotEnd)) ||
                        ($TaskEnd->gte($SlotStart) && $TaskEnd->lte($SlotEnd))
                    ) {
                        $userTasks[] = $task;
                    } elseif ($TaskStart->lte($SlotStart) && $TaskEnd->gte($SlotEnd)) {
                        $userTasks[] = $task;
                    }
                }
                $list                 = array_values($list);
                $tasks['IN_PROGRESS'] = $list;
            }

            if ($list = ($tasks['PLANNED'] ?? [])) {
                foreach ($list as $k => $task) {
                    $SlotStart = Carbon::parse($slot['st']);
                    $SlotEnd   = Carbon::parse($slot['en']);
                    $TaskStart = Carbon::parse($task['stDate']);
                    $TaskEnd   = Carbon::parse($task['enDate']);

                    if (
                        ($TaskStart->gte($SlotStart) && $TaskStart->lte($SlotEnd)) ||
                        ($TaskEnd->gte($SlotStart) && $TaskEnd->lte($SlotEnd))
                    ) {
                        $userTasks[] = $task;
                    } elseif ($TaskStart->lte($SlotStart) && $TaskEnd->gte($SlotEnd)) {
                        $userTasks[] = $task;
                    }
                }
                $list             = array_values($list);
                $tasks['PLANNED'] = $list;
            }
        }

        return [
            'taskIds'   => $taskIds ?? [],
            'userTasks' => $userTasks ?? [],
        ];
    }

    public function assignMasterUser(Request $request)
    {
        $masterUserId = $request->get('master_user_id');
        $issue        = DeveloperTask::find($request->get('issue_id'));

        $old_hubstaff_id = $issue->lead_hubstaff_task_id;

        $user = User::find($masterUserId);

        if (! $user) {
            return response()->json([
                'status' => 'success', 'message' => 'user not found',
            ], 500);
        }
        $old_id = $issue->master_user_id;
        if (! $old_id) {
            $old_id = 0;
        }
        $issue->master_user_id = $masterUserId;

        $issue->save();

        $hubstaff_project_id = config('env.HUBSTAFF_BULK_IMPORT_PROJECT_ID');

        $assignedUser   = HubstaffMember::where('user_id', $masterUserId)->first();
        $hubstaffUserId = null;

        if ($assignedUser) {
            $hubstaffUserId = $assignedUser->hubstaff_user_id;
        }

        $summary = substr($issue->task, 0, 200);
        if ($issue->task_type_id == 1) {
            $taskSummery = '#DEVTASK-' . $issue->id . ' => ' . $summary;
        } else {
            $taskSummery = '#TASK-' . $issue->id . ' => ' . $summary;
        }
        if ($hubstaffUserId) {
            $hubstaffTaskId = $this->createHubstaffTask(
                $taskSummery,
                $hubstaffUserId,
                $hubstaff_project_id
            );

            if ($hubstaffTaskId) {
                $issue->lead_hubstaff_task_id = $hubstaffTaskId;
                $issue->save();

                $task                      = new HubstaffTask();
                $task->hubstaff_task_id    = $hubstaffTaskId;
                $task->project_id          = $hubstaff_project_id;
                $task->hubstaff_project_id = $hubstaff_project_id;
                $task->summary             = $taskSummery;
                $task->save();
            }
        }

        $taskUser                               = new TaskUserHistory;
        $taskUser->model                        = \App\DeveloperTask::class;
        $taskUser->model_id                     = $issue->id;
        $taskUser->old_id                       = $old_id;
        $taskUser->new_id                       = $masterUserId;
        $taskUser->user_type                    = 'leaddeveloper';
        $taskUser->master_user_hubstaff_task_id = $old_hubstaff_id;
        $taskUser->updated_by                   = Auth::user()->name;
        $taskUser->save();

        return response()->json([
            'status' => 'success',
        ]);
    }

    public function assignTeamlead(Request $request)
    {
        $team_lead_id = $request->get('team_lead_id');
        $issue        = DeveloperTask::find($request->get('issue_id'));

        $user = User::find($team_lead_id);

        if (! $user) {
            return response()->json([
                'status' => 'success', 'message' => 'user not found',
            ], 500);
        }

        $isMember = $user->teams()->first();
        if ($isMember) {
            return response()->json([
                'message' => 'This user is already a team member',
            ], 500);
        } else {
            $isLeader = Team::where('user_id', $team_lead_id)->first();
            if (! $isLeader) {
                $team          = new Team;
                $team->name    = $request->name;
                $team->user_id = $team_lead_id;
                $team->save();
            }
            $issue->team_lead_id = $team_lead_id;
            $issue->save();
        }

        return response()->json([
            'status' => 'success',
        ], 200);
    }

    public function assignTester(Request $request)
    {
        $tester_id = $request->get('tester_id');
        $issue     = DeveloperTask::find($request->get('issue_id'));

        $user = User::find($tester_id);

        if (! $user) {
            return response()->json([
                'status' => 'success', 'message' => 'user not found',
            ], 500);
        }
        $old_id = $issue->tester_id;
        if (! $old_id) {
            $old_id = 0;
        }
        $issue->tester_id = $tester_id;
        $issue->save();

        $hubstaff_project_id = config('env.HUBSTAFF_BULK_IMPORT_PROJECT_ID');

        $assignedUser = HubstaffMember::where('user_id', $tester_id)->first();

        $hubstaffUserId = null;
        if ($assignedUser) {
            $hubstaffUserId = $assignedUser->hubstaff_user_id;
        }

        $summary = substr($issue->task, 0, 200);
        if ($issue->task_type_id == 1) {
            $taskSummery = '#DEVTASK-' . $issue->id . ' => ' . $summary;
        } else {
            $taskSummery = '#TASK-' . $issue->id . ' => ' . $summary;
        }
        if ($hubstaffUserId) {
            $hubstaffTaskId = $this->createHubstaffTask(
                $taskSummery,
                $hubstaffUserId,
                $hubstaff_project_id
            );
            if ($hubstaffTaskId) {
                $issue->tester_hubstaff_task_id = $hubstaffTaskId;
                $issue->save();

                $task                      = new HubstaffTask();
                $task->hubstaff_task_id    = $hubstaffTaskId;
                $task->project_id          = $hubstaff_project_id;
                $task->hubstaff_project_id = $hubstaff_project_id;
                $task->summary             = $taskSummery;
                $task->save();
            }
        }

        $taskUser             = new TaskUserHistory;
        $taskUser->model      = \App\DeveloperTask::class;
        $taskUser->model_id   = $issue->id;
        $taskUser->old_id     = $old_id;
        $taskUser->new_id     = $tester_id;
        $taskUser->user_type  = 'tester';
        $taskUser->updated_by = Auth::user()->name;
        $taskUser->save();

        return response()->json([
            'status' => 'success',
        ]);
    }

    public function assignResponsibleUser(Request $request)
    {
        $issue                      = DeveloperTask::find($request->get('issue_id'));
        $issue->assigned_by         = \Auth::id();
        $issue->responsible_user_id = $request->get('responsible_user_id');
        $issue->save();

        return response()->json([
            'status' => 'success',
        ]);
    }

    public function saveMilestone(Request $request)
    {
        $issue = DeveloperTask::find($request->get('issue_id'));
        if (! $issue->is_milestone) {
            return;
        }
        $total = $request->total;
        if ($issue->milestone_completed) {
            if ($total <= $issue->milestone_completed) {
                return response()->json([
                    'message' => 'Milestone no can\'t be reduced',
                ], 500);
            }
        }

        if ($total > $issue->no_of_milestone) {
            return response()->json([
                'message' => 'Estimated milestone exceeded',
            ], 500);
        }
        if (! $issue->cost || $issue->cost == '') {
            return response()->json([
                'message' => 'Please provide cost first',
            ], 500);
        }

        $newCompleted    = $total - $issue->milestone_completed;
        $individualPrice = $issue->cost / $issue->no_of_milestone;
        $totalCost       = $individualPrice * $newCompleted;

        $issue->milestone_completed = $total;
        $issue->save();
        $payment_receipt                    = new PaymentReceipt;
        $payment_receipt->date              = date('Y-m-d');
        $payment_receipt->worked_minutes    = $issue->estimate_minutes;
        $payment_receipt->rate_estimated    = $totalCost;
        $payment_receipt->status            = 'Pending';
        $payment_receipt->developer_task_id = $issue->id;
        $payment_receipt->user_id           = $issue->assigned_to;
        $payment_receipt->save();

        return response()->json([
            'status' => 'success',
        ]);
    }

    public function resolveIssue(Request $request)
    {
        $issue = DeveloperTask::find($request->get('issue_id'));
        if ($issue->is_resolved == 1) {
            return response()->json([
                'message' => 'DONE Status can not change further.',
            ], 500);
        }
        if (strtolower($request->get('is_resolved')) == 'done') {
            if (Auth::user()->isAdmin()) {
                $is_team       = 0;
                $old_status    = $issue->status;
                $issue->status = $request->get('is_resolved');
                $assigned_to   = User::find($issue->assigned_to);
                if (! $assigned_to) {
                    return response()->json([
                        'message' => 'Please assign the task.',
                    ], 500);
                }
                $team_user = \DB::table('team_user')->where('user_id', $issue->assigned_to)->first();
                if ($team_user) {
                    $team_lead = \DB::table('teams')->where('id', $team_user->team_id)->first();
                    if ($team_lead) {
                        $dev_task_user = User::find($team_lead->user_id);
                        $is_team       = 1;
                    }
                }
                if (empty($dev_task_user)) {
                    $dev_task_user = $assigned_to;
                }
                if ($dev_task_user && $dev_task_user->fixed_price_user_or_job == 0) {
                    return response()->json([
                        'message' => 'Please provide salary payment method for ' . $dev_task_user->name . ' .',
                    ], 500);
                }
                if ($dev_task_user && $dev_task_user->fixed_price_user_or_job == 1) {
                    $userRate = UserRate::getRateForUser($dev_task_user->id);
                    // Fixed price task.
                    if ($issue->cost == null) {
                        return response()->json([
                            'message' => 'Please provide cost for fixed price task.',
                        ], 500);
                    }

                    if (! $issue->is_milestone) {
                        $payment_receipt                    = new PaymentReceipt;
                        $payment_receipt->date              = date('Y-m-d');
                        $payment_receipt->worked_minutes    = $issue->estimate_minutes;
                        $payment_receipt->rate_estimated    = $issue->cost;
                        $payment_receipt->status            = 'Pending';
                        $payment_receipt->currency          = ($userRate->currency ?? 'USD');
                        $payment_receipt->developer_task_id = $issue->id;
                        $payment_receipt->user_id           = $dev_task_user->id;
                        $payment_receipt->by_command        = 3;
                        $payment_receipt->save();
                    }
                } elseif ($dev_task_user && $dev_task_user->fixed_price_user_or_job == 2) {
                    $userRate = UserRate::getRateForUser($dev_task_user->id);

                    if ($userRate && $userRate->hourly_rate !== null) {
                        if ($issue->estimate_minutes) {
                            if ($issue->ApprovedDeveloperTaskHistory) {
                                $rate_estimated = ($issue->estimate_minutes) * ($userRate->hourly_rate) / 60;
                            } else {
                                return response()->json([
                                    'message' => 'Estimated time is not approved.',
                                ], 500);
                            }
                        } else {
                            return response()->json([
                                'message' => 'Estimated time is not exist.',
                            ], 500);
                        }
                    } else {
                        return response()->json([
                            'message' => 'Please provide hourly rate for ' . $dev_task_user->name . ' .',
                        ], 500);
                    }
                    $payment_receipt                    = new PaymentReceipt;
                    $payment_receipt->date              = date('Y-m-d');
                    $payment_receipt->worked_minutes    = $issue->estimate_minutes;
                    $payment_receipt->rate_estimated    = $rate_estimated;
                    $payment_receipt->status            = 'Pending';
                    $payment_receipt->currency          = ($userRate->currency ?? 'USD');
                    $payment_receipt->developer_task_id = $issue->id;
                    $payment_receipt->user_id           = $dev_task_user->id;
                    $payment_receipt->by_command        = 2;
                    $payment_receipt->save();
                }
                $issue->responsible_user_id = $issue->assigned_to;
                $issue->is_resolved         = 1;
                $issue->save();

                DeveloperTaskHistory::create([
                    'developer_task_id' => $issue->id,
                    'model'             => \App\DeveloperTask::class,
                    'attribute'         => 'task_status',
                    'old_value'         => $old_status,
                    'new_value'         => $request->is_resolved,
                    'user_id'           => Auth::id(),
                ]);
            } else {
                return response()->json([
                    'message' => 'Only admin can change status to DONE.',
                ], 500);
            }
        } else {
            $old_status = $issue->status;

            DeveloperTaskHistory::create([
                'developer_task_id' => $issue->id,
                'model'             => \App\DeveloperTask::class,
                'attribute'         => 'task_status',
                'old_value'         => $old_status,
                'new_value'         => $request->is_resolved,
                'user_id'           => Auth::id(),
            ]);

            $issue->status = $request->get('is_resolved');

            if ($issue->status == DeveloperTask::DEV_TASK_STATUS_IN_PROGRESS) {
                if ($issue->actual_start_date == null || $issue->actual_start_date == '0000-00-00 00:00:00') {
                    $issue->actual_start_date = date('Y-m-d H:i:s');
                }
            }
            if ($issue->status == DeveloperTask::DEV_TASK_STATUS_DONE) {
                $issue->actual_end_date = date('Y-m-d H:i:s');
            }
            if ($issue->status == DeveloperTask::DEV_TASK_STATUS_USER_COMPLETE) {
                if (isset($request->checklist)) {
                    $statusMsg = 'Status has been updated : From ' . $old_status . ' To ' . DeveloperTask::DEV_TASK_STATUS_USER_COMPLETE . "\n";
                    $msg       = '';
                    foreach ($request->checklist as $key => $list) {
                        $checkList = DeveloperTaskStatusChecklist::find($key);
                        if (! empty($checkList)) {
                            DeveloperTaskStatusChecklistRemarks::create([
                                'user_id'                            => Auth::id(),
                                'task_id'                            => $issue->id,
                                'developer_task_status_checklist_id' => $key,
                                'remark'                             => $list,
                            ]);
                            $msg .= $checkList['name'] . ' => ' . $list . "\n";
                        }
                    }

                    $message = ! empty($msg) ? $statusMsg . $msg : '';

                    if (! empty($message)) {
                        ChatMessage::create([
                            'user_id'           => Auth::user()->id,
                            'developer_task_id' => $issue->id,
                            'sent_to_user_id'   => $issue->user_id,
                            'message'           => $message,
                            'status'            => 2,
                            'approved'          => 1,
                        ]);
                    }
                }
            }

            $issue->save();
        }

        return response()->json([
            'status' => 'success',
        ]);
    }

    public function saveEstimateTime(Request $request)
    {
        $issue = DeveloperTaskHistory::where(['developer_task_id' => $request->get('issue_id'), 'attribute' => 'estimation_minute', 'user_id' => Auth::user()->id])->orderBy('id', 'DESC')->first();
        if ($issue->count() > 0) {
            $task_history                    = new DeveloperTaskHistory;
            $task_history->developer_task_id = $request->get('issue_id');
            $task_history->attribute         = 'estimation_minute';
            $task_history->old_value         = $issue->new_value;
            $task_history->new_value         = $request->get('estimate_time');
            $task_history->user_id           = Auth::user()->id();
            $task_history->developer_task_id = $request->name;
            $task_history->model             = \App\DeveloperTask::class;
            $result                          = $task_history->save();
        } else {
            $task_history                    = new DeveloperTaskHistory;
            $task_history->developer_task_id = $request->get('issue_id');
            $task_history->attribute         = 'estimation_minute';
            $task_history->old_value         = 0;
            $task_history->new_value         = $request->get('estimate_time');
            $task_history->user_id           = Auth::user()->id();
            $task_history->developer_task_id = $request->name;
            $task_history->model             = \App\DeveloperTask::class;
            $result                          = $task_history->save();
        }

        return response()->json([
            'status' => 'success', 'result' => $result,
        ]);
    }

    public function approveTimeHistory(Request $request)
    {
        if (Auth::user()->isAdmin) {
            if (! $request->approve_time || $request->approve_time == '' || ! $request->developer_task_id || $request->developer_task_id == '') {
                return response()->json([
                    'message' => 'Select one time first',
                ], 500);
            }
            DeveloperTaskHistory::where('developer_task_id', $request->developer_task_id)->where('attribute', 'estimation_minute')->where('model', \App\DeveloperTask::class)->update(['is_approved' => 0]);
            $history              = DeveloperTaskHistory::find($request->approve_time);
            $history->is_approved = 1;
            $history->save();

            if ($history) {
                if ($history->old_value == null) {
                    $old_val = '';
                } else {
                    $old_val = $history->old_value;
                }

                $param = [
                    'developer_task_id' => $history->developer_task_id,
                    'old_value'         => $old_val,
                    'new_value'         => $history->new_value,
                    'user_id'           => \Auth::id(),
                ];
                $add_history = HubstaffHistory::create($param);
            }

            $task         = DeveloperTask::find($request->developer_task_id);
            $task->status = DeveloperTask::DEV_TASK_STATUS_APPROVED;
            $task->save();

            $time = $history->new_value !== null ? $history->new_value : $history->old_value;
            $msg  = 'TIME APPROVED FOR TASK ' . '#DEVTASK-' . $task->id . '-' . $task->subject . ' - ' . $time . ' MINS';

            $user        = User::find($request->user_id);
            $admin       = Auth::user();
            $master_user = User::find($task->master_user_id);
            $team_lead   = User::find($task->team_lead_id);
            $tester      = User::find($task->tester_id);

            if ($user) {
                if ($admin->phone) {
                    $chat = ChatMessage::create([
                        'number'            => $admin->phone,
                        'user_id'           => $user->id,
                        'customer_id'       => $user->id,
                        'message'           => $msg,
                        'status'            => 0,
                        'developer_task_id' => $request->developer_task_id,
                    ]);
                } elseif ($user->phone) {
                    $chat = ChatMessage::create([
                        'number'            => $user->phone,
                        'user_id'           => $user->id,
                        'customer_id'       => $user->id,
                        'message'           => $msg,
                        'status'            => 0,
                        'developer_task_id' => $request->developer_task_id,
                    ]);
                } elseif ($master_user && $master_user->phone) {
                    $chat = ChatMessage::create([
                        'number'            => $master_user->phone,
                        'user_id'           => $user->id,
                        'customer_id'       => $user->id,
                        'message'           => $msg,
                        'status'            => 0,
                        'developer_task_id' => $request->developer_task_id,
                    ]);
                } elseif ($team_lead && $team_lead->phone) {
                    $chat = ChatMessage::create([
                        'number'            => $team_lead->phone,
                        'user_id'           => $user->id,
                        'customer_id'       => $user->id,
                        'message'           => $msg,
                        'status'            => 0,
                        'developer_task_id' => $request->developer_task_id,
                    ]);
                } elseif ($tester && $tester->phone) {
                    $chat = ChatMessage::create([
                        'number'            => $tester->phone,
                        'user_id'           => $user->id,
                        'customer_id'       => $user->id,
                        'message'           => $msg,
                        'status'            => 0,
                        'developer_task_id' => $request->developer_task_id,
                    ]);
                }
                if (isset($chat)) {
                    if ($admin->phone) {
                        app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($admin->phone, $admin->whatsapp_number, $msg, false, $chat->id);
                    }
                    if ($user->phone) {
                        app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($user->phone, $user->whatsapp_number, $msg, false, $chat->id);
                    }
                    if ($master_user && $master_user->phone) {
                        app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($master_user->phone, $master_user->whatsapp_number, $msg, false, $chat->id);
                    }
                    if ($team_lead && $team_lead->phone) {
                        app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($team_lead->phone, $team_lead->whatsapp_number, $msg, false, $chat->id);
                    }
                    if ($tester && $tester->phone) {
                        app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($tester->phone, $tester->whatsapp_number, $msg, false, $chat->id);
                    }
                }
            }
        } else {
            return response()->json([
                'message' => 'Only admin can approve',
            ], 500);
        }
    }

    public function sendRemindMessage(Request $request)
    {
        $user = User::find($request->user_id);
        if ($user) {
            $receiver_user_phone = $user->phone;
            if ($receiver_user_phone) {
                $task = DeveloperTask::find($request->id);
                $msg  = 'PLS ADD ESTIMATED TIME FOR TASK  ' . '#DEVTASK-' . $task->id . '-' . $task->subject;
                $chat = ChatMessage::create([
                    'number'            => $receiver_user_phone,
                    'user_id'           => $user->id,
                    'customer_id'       => $user->id,
                    'message'           => $msg,
                    'status'            => 0,
                    'developer_task_id' => $request->id,
                ]);

                app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($receiver_user_phone, $user->whatsapp_number, $msg, false, $chat->id);

                MessageHelper::sendEmailOrWebhookNotification([$task->assigned_to, $task->team_lead_id, $task->tester_id], $msg);
            }
        }

        return response()->json([
            'message' => 'Remind message sent successfully',
        ]);
    }

    public function sendReviseMessage(Request $request)
    {
        $user = User::find($request->user_id);
        if ($user) {
            $receiver_user_phone = $user->phone;
            if ($receiver_user_phone) {
                $task = DeveloperTask::find($request->id);
                $msg  = 'TIME NOT APPROVED REVISE THE ESTIMATED TIME FOR TASK ' . '#DEVTASK-' . $task->id . '-' . $task->subject;
                $chat = ChatMessage::create([
                    'number'            => $receiver_user_phone,
                    'user_id'           => $user->id,
                    'customer_id'       => $user->id,
                    'message'           => $msg,
                    'status'            => 0,
                    'developer_task_id' => $request->id,
                ]);
                app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($receiver_user_phone, $user->whatsapp_number, $msg, false, $chat->id);

                MessageHelper::sendEmailOrWebhookNotification([$task->assigned_to, $task->team_lead_id, $task->tester_id], $msg);
            }
        }

        return response()->json([
            'message' => 'Revise message sent successfully',
        ]);
    }

    public function savePriorityNo(Request $request)
    {
        $issue = DeveloperTask::find($request->get('issue_id'));

        if ($issue) {
            $issue->priority_no = $request->get('priority');
            $issue->save();
        }

        return response()->json(['status' => 'success']);
    }

    public function updateValues(Request $request)
    {
        $task  = DeveloperTask::find($request->get('id'));
        $type  = $request->get('type');
        $value = $request->get('value');
        if ($type == 'start_date') {
            $task->start_date = $request->get('value');
        } else {
            if ($type == 'end_date') {
                $task->end_date = $request->get('value');
            } else {
                if ($type == 'estimate_date') {
                    $task->estimate_date = $request->get('value');
                } else {
                    if ($type == 'cost') {
                        $task->cost = $request->get('value');
                    } else {
                        if ($type == 'module') {
                            $task->module_id = $request->get('value');
                        }
                    }
                }
            }
        }
        $task->save();

        return response()->json([
            'status' => 'success',
        ]);
    }

    public function overview(Request $request)
    {
        // Get status
        $status = $request->get('status');
        if (empty($status)) {
            $status = 'In Progress';
        }
        $task_type = 1;
        $taskTypes = TaskTypes::all();
        $users     = Helpers::getUsersByRoleName('Developer');
        if (! empty($request->get('task_type'))) {
            $task_type = $request->get('task_type');
        }
        if (! empty($request->get('task_status'))) {
            $status = $request->get('task_status');
        }
        if (! empty($request->get('task_type')) && ! empty($request->get('task_status'))) {
            $status    = $request->get('task_status');
            $task_type = $request->get('task_type');
        }

        return view('development.overview', [
            'taskTypes' => $taskTypes,
            'users'     => $users,
            'status'    => $status,
            'task_type' => $task_type,
        ]);
    }

    public function taskDetail($taskId)
    {
        // Get tasks
        $task = DeveloperTask::where('developer_tasks.id', $taskId)
            ->select('developer_tasks.*', 'task_types.name as task_type', 'users.name as username', 'u.name as reporter')
            ->leftjoin('task_types', 'task_types.id', '=', 'developer_tasks.task_type_id')
            ->leftjoin('users', 'users.id', '=', 'developer_tasks.user_id')
            ->leftjoin('users AS u', 'u.id', '=', 'developer_tasks.created_by')
            ->first();
        // Get subtasks
        $subtasks = DeveloperTask::where('developer_tasks.parent_id', $taskId)->get();
        // Get comments
        $comments = DeveloperTaskComment::where('task_id', $taskId)
            ->join('users', 'users.id', '=', 'developer_task_comments.user_id')
            ->get();
        //Get Attachments
        $attachments = TaskAttachment::where('task_id', $taskId)->get();
        $developers  = Helpers::getUserArray(User::role('Developer')->get());
        // Return view
        return view('development.task_detail', [
            'task'        => $task,
            'subtasks'    => $subtasks,
            'comments'    => $comments,
            'developers'  => $developers,
            'attachments' => $attachments,
        ]);
    }

    public function taskComment(Request $request)
    {
        $response = [];
        $this->validate($request, [
            'comment' => 'required|string|min:1',
        ]);
        $data            = $request->except('_token');
        $data['user_id'] = Auth::id();

        $created = DeveloperTaskComment::create($data);
        if ($created) {
            $response['status'] = 'ok';
            $response['msg']    = 'Comment stored successfully';
            echo json_encode($response);
        } else {
            $response['status'] = 'error';
            $response['msg']    = 'Error';
        }
    }

    public function changeTaskStatus(Request $request)
    {
        if (! empty($request->input('task_id'))) {
            $task         = DeveloperTask::find($request->input('task_id'));
            $task->status = $request->input('status');
            $task->save();

            return response()->json(['success']);
        }
    }

    public function makeDirectory($path, $mode = 0777, $recursive = false, $force = false)
    {
        if ($force) {
            return @mkdir($path, $mode, $recursive);
        } else {
            return mkdir($path, $mode, $recursive);
        }
    }

    public function uploadAttachDocuments(Request $request)
    {
        $task_id = $request->input('task_id');
        $task    = DeveloperTask::find($task_id);
        if ($request->hasfile('attached_document')) {
            foreach ($request->file('attached_document') as $image) {
                $name   = time() . '_' . $image->getClientOriginalName();
                $new_id = floor($task_id / 1000);

                $dirname = public_path() . '/uploads/developer-task/' . $new_id;
                if (file_exists($dirname)) {
                    $dirname2 = public_path() . '/uploads/developer-task/' . $new_id . '/' . $task_id;
                    if (file_exists($dirname2) == false) {
                        mkdir($dirname2, 0777);
                    }
                } else {
                    mkdir($dirname, 0777);
                }
                $media = MediaUploader::fromSource($image)->toDirectory("developer-task/$new_id/$task_id")->upload();
                $task->attachMedia($media, config('constants.media_tags'));
            }
        }
        if (! empty($request->file('attached_document'))) {
            foreach ($request->file('attached_document') as $file) {
                $name = time() . '_' . $file->getClientOriginalName();
                $file->move(public_path('images/task_files/'), $name);
                $task_attachment          = new TaskAttachment;
                $task_attachment->task_id = $task_id;
                $task_attachment->name    = $name;
                $task_attachment->save();
            }

            return redirect(url("/development/task-detail/$task_id"));
        } else {
            return redirect(url("/development/task-detail/$task_id"));
        }
    }

    public function downloadFile(Request $request)
    {
        $file_name = $request->input('file_name');
        $file      = public_path() . '/images/task_files/' . $file_name;
        $ext       = substr($file_name, strrpos($file_name, '.') + 1);
        $headers   = [];
        if ($ext == 'pdf') {
            $headers = [
                'Content-Type: application/pdf',
            ];
        }

        return Response::download($file, $file_name, $headers);
    }

    public function openNewTaskPopup(Request $request)
    {
        $status = 'ok';
        // Get all developers
        if (config('app.env')) {
            $userlst = User::role('Developer')->orderby('name', 'asc')->get(); // Production
        } else {
            $userlst = User::orderby('name', 'asc')->get(); // Local system
        }
        $users = Helpers::getUserArray($userlst);
        // Get all task types
        $tasksTypes  = TaskTypes::all();
        $moduleNames = [];

        // Get all modules
        $modules = DeveloperModule::orderBy('name')->get();

        // Loop over all modules and store them
        foreach ($modules as $module) {
            $moduleNames[$module->id] = $module->name;
        }

        // this is the ID for erp
        $defaultRepositoryId = 231925646;

        $githubOrganizations = GithubOrganization::get();

        $statusList = \DB::table('task_statuses')
            ->orderBy('name')
            ->select('name')
            ->pluck('name', 'name')
            ->toArray();

        $statusList = array_merge([
            '' => 'Select Status',
        ], $statusList);

        //Get hubstaff projects
        $projects = HubstaffProject::all();

        $html = View::make('development.ajax.add_new_task', compact('users', 'tasksTypes', 'modules', 'moduleNames', 'githubOrganizations', 'defaultRepositoryId', 'projects', 'statusList'))->render();

        return json_encode(compact('html', 'status'));
    }

    public function saveLanguage(Request $request)
    {
        $language = $request->get('language');

        if (! empty(trim($language))) {
            if (! is_numeric($language)) {
                $languageModal = \App\DeveloperLanguage::updateOrCreate(
                    ['name' => $language],
                    ['name' => $language]
                );
            }

            $issue           = DeveloperTask::find($request->get('issue_id'));
            $issue->language = isset($languageModal->id) ? $languageModal->id : $language;
            $issue->save();
        }

        return response()->json([
            'status' => 'success',
        ]);
    }

    public function uploadDocument(Request $request)
    {
        $id      = $request->get('developer_task_id', 0);
        $subject = $request->get('subject', null);

        $loggedUser = $request->user();

        if ($id > 0 && ! empty($subject)) {
            $devTask = DeveloperTask::find($id);

            if (! empty($devTask)) {
                $devDocuments = new \App\DeveloperTaskDocument;
                $devDocuments->fill(request()->all());
                $devDocuments->created_by = \Auth::id();
                $devDocuments->save();

                if ($request->hasfile('files')) {
                    foreach ($request->file('files') as $files) {
                        $media = MediaUploader::fromSource($files)
                            ->toDirectory('developertask/' . floor($devTask->id / config('constants.image_per_folder')))
                            ->upload();
                        $devDocuments->attachMedia($media, config('constants.media_tags'));
                    }

                    $message = '[ ' . $loggedUser->name . ' ] - #DEVTASK-' . $devTask->id . ' - ' . $devTask->subject . " \n\n" . 'New attchment(s) called ' . $subject . ' has been added. Please check and give your comment or fix it if any issue.';

                    MessageHelper::sendEmailOrWebhookNotification([$devTask->assigned_to, $devTask->team_lead_id, $devTask->tester_id], $message);
                }

                return response()->json(['code' => 200, 'success' => 'Done!']);
            }

            return response()->json(['code' => 500, 'error' => 'Oops, There is no record in database']);
        } else {
            return response()->json(['code' => 500, 'error' => 'Oops, Please fillup required fields']);
        }
    }

    public function getDocument(Request $request)
    {
        $id = $request->get('id', 0);

        if ($id > 0) {
            $devDocuments = \App\DeveloperTaskDocument::where('developer_task_id', $id)->latest()->get();

            $html = view('development.ajax.document-list', compact('devDocuments'))->render();

            return response()->json(['code' => 200, 'data' => $html]);
        } else {
            return response()->json(['code' => 500, 'error' => 'Oops, id is required field']);
        }
    }

    /**
     * changeModule on  development/list/devtask
     *
     * @ajax Request
     *
     * @return \Illuminate\Http\Response
     */
    public function changeModule(Request $request)
    {
        if ($request->ajax()) {
            $task_module = DeveloperTask::find($request->get('issue_id'));
            if ($task_module) {
                $task_module->module_id = $request->get('module_id');
                if ($task_module->save()) {
                    $message = ['message' => 'success', 'status' => '200'];
                } else {
                    $message = ['message' => 'Error', 'status' => '400'];
                }
            } else {
                $message = ['message' => 'Error', 'status' => '400'];
            }
        } else {
            $message = ['message' => 'Error', 'status' => '400'];
        }

        return response()->json($message);
    }

    public function getTimeHistory(Request $request)
    {
        $users = User::get();

        $id          = $request->id;
        $task_module = DeveloperTaskHistory::join('users', 'users.id', 'developer_tasks_history.user_id')
            ->where('developer_task_id', $id)
            ->where('model', \App\DeveloperTask::class)
            ->where('attribute', 'estimation_minute')
            ->select('developer_tasks_history.*', 'users.name')
            ->orderBy('id', 'DESC')
            ->get();

        if ($task_module) {
            return $task_module;
        }

        return 'error';
    }

    public function getTimeHistoryApproved(Request $request)
    {
        $users = User::get();

        $id = $request->id;

        $task_module = HubstaffHistory::join('users', 'users.id', 'hubstaff_historys.user_id')->where('developer_task_id', $id)->select('hubstaff_historys.*', 'users.name')->get();

        if ($task_module) {
            return $task_module;
        }

        return 'error';
    }

    public function getStatusHistory(Request $request)
    {
        $id   = $request->id;
        $type = \App\DeveloperTask::class;
        if (isset($request->type) && $request->type == 'task') {
            $type = \App\Task::class;
        }
        $task_module = DeveloperTaskHistory::join('users', 'users.id', 'developer_tasks_history.user_id')->where('developer_task_id', $id)->where('model', $type)->where('attribute', 'task_status')->select('developer_tasks_history.*', 'users.name')->get();
        if ($task_module) {
            return $task_module;
        }

        return 'error';
    }

    public function getTrackedHistory(Request $request)
    {
        $id   = $request->id;
        $type = $request->type;
        if ($type == 'lead') {
            $task_histories = DB::select(DB::raw('SELECT hubstaff_activities.task_id,cast(hubstaff_activities.starts_at as date) as starts_at,sum(hubstaff_activities.tracked) as total_tracked,developer_tasks.master_user_id,users.name FROM `hubstaff_activities`  join developer_tasks on developer_tasks.lead_hubstaff_task_id = hubstaff_activities.task_id join users on users.id = developer_tasks.master_user_id where developer_tasks.id = ' . $id . ' group by task_id,starts_at'));
        } elseif ($type == 'tester') {
            $task_histories = DB::select(DB::raw('SELECT hubstaff_activities.task_id,cast(hubstaff_activities.starts_at as date) as starts_at,sum(hubstaff_activities.tracked) as total_tracked,developer_tasks.tester_id,users.name FROM `hubstaff_activities`  join developer_tasks on developer_tasks.tester_hubstaff_task_id = hubstaff_activities.task_id join users on users.id = developer_tasks.tester_id where developer_tasks.id = ' . $id . ' group by task_id,starts_at'));
        } else {
            $task_histories = DB::select(DB::raw('SELECT hubstaff_activities.task_id,cast(hubstaff_activities.starts_at as date) as starts_at,sum(hubstaff_activities.tracked) as total_tracked,developer_tasks.assigned_to,users.name FROM `hubstaff_activities`  join developer_tasks on developer_tasks.hubstaff_task_id = hubstaff_activities.task_id join users on users.id = developer_tasks.assigned_to where developer_tasks.id = ' . $id . ' group by task_id,starts_at'));
        }

        return response()->json(['histories' => $task_histories]);
    }

    public function createHubstaffManualTask(Request $request)
    {
        $task = DeveloperTask::find($request->id);
        if ($task) {
            if ($request->task_for == 'hubstaff') {
                if ($request->type == 'developer') {
                    $user_id = $task->assigned_to;
                } elseif ($request->type == 'tester') {
                    $user_id = $task->tester_id;
                } else {
                    $user_id = $task->master_user_id;
                }
                $hubstaff_project_id = config('env.HUBSTAFF_BULK_IMPORT_PROJECT_ID');

                $assignedUser = HubstaffMember::where('user_id', $user_id)->first();

                $hubstaffUserId = null;
                if ($assignedUser) {
                    $hubstaffUserId = $assignedUser->hubstaff_user_id;
                }
                $taskSummery = '#DEVTASK-' . $task->id . ' => ' . $task->subject;
                if ($hubstaffUserId) {
                    $hubstaffTaskId = $this->createHubstaffTask(
                        $taskSummery,
                        $hubstaffUserId,
                        $hubstaff_project_id
                    );
                } else {
                    return response()->json([
                        'message' => 'Hubstaff member not found',
                    ], 500);
                }
                if ($hubstaffTaskId) {
                    if ($request->type == 'developer') {
                        $task->hubstaff_task_id = $hubstaffTaskId;
                    } elseif ($request->type == 'tester') {
                        $task->tester_hubstaff_task_id = $hubstaffTaskId;
                    } else {
                        $task->lead_hubstaff_task_id = $hubstaffTaskId;
                    }
                    $task->save();
                } else {
                    return response()->json([
                        'message' => 'Hubstaff task not created',
                    ], 500);
                }
                if ($hubstaffTaskId) {
                    $task                      = new HubstaffTask();
                    $task->hubstaff_task_id    = $hubstaffTaskId;
                    $task->project_id          = $hubstaff_project_id;
                    $task->hubstaff_project_id = $hubstaff_project_id;
                    $task->summary             = $taskSummery;
                    $task->save();
                }
            } else {
                $timeDoctorTaskResponse = $this->timeDoctorActions('DEVTASK', $task, $request->time_doctor_project, $request->time_doctor_account, $request->assigned_to);
                $errorMessages          = config('constants.TIME_DOCTOR_API_RESPONSE_MESSAGE');
                if (! $timeDoctorTaskResponse) {
                    return response()->json(['message' => 'Unable to create task'], 500);
                }
                if ($timeDoctorTaskResponse['code'] != '200') {
                    $message = match ($timeDoctorTaskResponse['code']) {
                        '401' => $errorMessages['401'],
                        '403' => $errorMessages['403'],
                        '409' => $errorMessages['409'],
                        '422' => $errorMessages['422'],
                        '500', '404' => $errorMessages['404'],
                        default => 'Time doctor task created successfully',
                    };

                    return response()->json([
                        'message' => $message,
                    ], $timeDoctorTaskResponse['code']);
                } else {
                    return response()->json([
                        'message' => 'Successful',
                    ]);
                }
            }

            return response()->json([
                'message' => 'Successful',
            ]);
        } else {
            return response()->json([
                'message' => 'Task not found',
            ], 500);
        }
    }

    public function deleteBulkTasks(Request $request)
    {
        if (count($request->selected_tasks) > 0) {
            foreach ($request->selected_tasks as $t) {
                DeveloperTask::where('id', $t)->delete();
            }
        }

        return response()->json(['message' => 'Successful']);
    }

    public function getMeetingTimings(Request $request)
    {
        $query = MeetingAndOtherTime::join('users', 'users.id', 'meeting_and_other_times.user_id')->where('model', \App\DeveloperTask::class)->where('model_id', $request->issue_id);
        $issue = DeveloperTask::find($request->issue_id);
        if ($request->type == 'admin') {
            $query = $query;
        } elseif ($request->type == 'developer') {
            $query = $query->where('user_id', $issue->assigned_to);
        } elseif ($request->type == 'lead') {
            $query = $query->where('user_id', $issue->master_user_id);
        } elseif ($request->type == 'tester') {
            $query = $query->where('user_id', $issue->tester_id);
        } else {
            return response()->json(['message' => 'Unauthorized access'], 500);
        }
        if ($request->timing_type && $request->timing_type != '') {
            $query = $query->where('type', $request->timing_type);
        }

        $timings = $query->select('meeting_and_other_times.*', 'users.name')->get();

        $developerTime = MeetingAndOtherTime::where('model', \App\DeveloperTask::class)->where('model_id', $request->issue_id)->where('user_id', $issue->assigned_to)->where('approve', 1)->sum('time');

        $master_devTime = MeetingAndOtherTime::where('model', \App\DeveloperTask::class)->where('model_id', $request->issue_id)->where('user_id', $issue->master_user_id)->where('approve', 1)->sum('time');

        $testerTime = MeetingAndOtherTime::where('model', \App\DeveloperTask::class)->where('model_id', $request->issue_id)->where('user_id', $issue->tester_id)->where('approve', 1)->sum('time');

        return response()->json(['timings' => $timings, 'issue_id' => $request->issue_id, 'developerTime' => $developerTime, 'master_devTime' => $master_devTime, 'testerTime' => $testerTime], 200);
    }

    public function storeMeetingTime(Request $request)
    {
        if (! $request->task_id || $request->task_id == '' || ! $request->time || $request->time == '' || ! $request->user_type || $request->user_type == '' || ! $request->timing_type || $request->timing_type == '') {
            return response()->json(['message' => 'Incomplete data'], 500);
        }
        $query = MeetingAndOtherTime::where('model', \App\DeveloperTask::class)->where('model_id', $request->task_id)->where('type', $request->timing_type);
        $issue = DeveloperTask::find($request->task_id);
        if ($request->user_type == 'developer') {
            $query   = $query->where('user_id', $issue->assigned_to);
            $user_id = $issue->assigned_to;
        } elseif ($request->user_type == 'lead') {
            $query   = $query->where('user_id', $issue->master_user_id);
            $user_id = $issue->master_user_id;
        } elseif ($request->user_type == 'tester') {
            $query   = $query->where('user_id', $issue->tester_id);
            $user_id = $issue->tester_id;
        } else {
            return response()->json(['message' => 'Unauthorized access'], 500);
        }
        $time     = $query->orderBy('id', 'desc')->first();
        $oldValue = 0;
        if ($time) {
            $oldValue = $time->time;
        }
        $time             = new MeetingAndOtherTime;
        $time->model      = \App\DeveloperTask::class;
        $time->model_id   = $request->task_id;
        $time->user_id    = $user_id;
        $time->time       = $request->time;
        $time->old_time   = $oldValue;
        $time->type       = $request->timing_type;
        $time->note       = $request->note;
        $time->updated_by = Auth::user()->name;
        $time->save();

        return response()->json(['message' => 'Successful'], 200);
    }

    public function approveMeetingHistory($task_id, Request $request)
    {
        if (Auth::user()->isAdmin) {
            if (! $request->approve_time || $request->approve_time == '') {
                return response()->json([
                    'message' => 'Select one time first',
                ], 500);
            }
            $time = MeetingAndOtherTime::find($request->approve_time);

            MeetingAndOtherTime::where('model', \App\DeveloperTask::class)->where('model_id', $time->model_id)->where('type', $time->type)->where('user_id', $time->user_id)->update(['approve' => 0]);
            $time->approve = 1;
            $time->save();

            return response()->json([
                'message' => 'Success',
            ], 200);
        }
    }

    public function getUserHistory(Request $request)
    {
        $users = TaskUserHistory::where('model', \App\DeveloperTask::class)->where('model_id', $request->id)->get();
        foreach ($users as $u) {
            $old_name = null;
            $new_name = null;
            if ($u->old_id) {
                $old_name = User::find($u->old_id)->name;
            }
            if ($u->new_id) {
                $new_name = User::find($u->new_id)->name;
            }
            $u->new_name = $new_name;
            $u->old_name = $old_name;
        }

        return response()->json([
            'users' => $users,
        ], 200);
    }

    public function getPullHistory(Request $request)
    {
        $pullrequests = DeveoperTaskPullRequestMerge::where('task_id', $request->id)->get();
        foreach ($pullrequests as $u) {
            $u->user_id = User::find($u->user_id)->name;
        }

        return response()->json([
            'pullrequests' => $pullrequests,
        ], 200);
    }

    public function getLeadTimeHistory(Request $request)
    {
        $id          = $request->id;
        $task_module = DeveloperTaskHistory::join('users', 'users.id', 'developer_tasks_history.user_id')->where('developer_task_id', $id)->where('attribute', 'lead_estimation_minute')->select('developer_tasks_history.*', 'users.name')->get();
        if ($task_module) {
            return $task_module;
        }

        return 'error';
    }

    public function updateDevelopmentReminder(Request $request)
    {
        // this is the changes related to developer task
        $task                      = DeveloperTask::find($request->get('development_id'));
        $task->frequency           = $request->get('frequency');
        $task->reminder_message    = $request->get('message');
        $task->reminder_from       = $request->get('reminder_from', '0000-00-00 00:00');
        $task->reminder_last_reply = $request->get('reminder_last_reply', 0);
        $task->last_send_reminder  = date('Y-m-d H:i:s');
        $task->save();

        $message = $request->get('message');
        if (optional($task->assignedUser)->phone) {
            $requestData = new Request();
            $requestData->setMethod('POST');
            $requestData->request->add(['issue_id' => $task->id, 'message' => $message, 'status' => 1]);
            app(\App\Http\Controllers\WhatsAppController::class)->sendMessage($requestData, 'issue');
        }

        return response()->json([
            'success',
        ]);
    }

    public function changeUser(Request $request)
    {
        $title  = 'Change User';
        $user   = $request->user;
        $issues = DeveloperTask::with('timeSpent', 'developerTaskHistory', 'assignedUser', 'masterUser', 'timeSpent', 'leadtimeSpent', 'testertimeSpent', 'messages.taskUser', 'messages.user', 'tester');

        if (Auth::user()->hasRole('Admin') && isset($user) && (int) count($request->user) > 0) {
            $issues = $issues->whereIn('assigned_to', $user);
        }

        $issues = $issues->where('developer_tasks.task_type_id', '1')->whereNotNull('scraper_id');
        $usrlst = User::orderBy('name')->get();
        $users  = Helpers::getUserArray($usrlst);
        $issues = $issues->select('developer_tasks.*');
        $issues = $issues->paginate(20);

        return view('development.change_user', [
            'users'   => $users,
            'user'    => (@$user) ? implode(',', $user) : '',
            'userIds' => (@$user) ? @$user : [],
            'title'   => $title,
            'issues'  => $issues,
        ]);
    }

    public function changeUserStore(Request $request)
    {
        if ($request->assign_user_id) {
            $final = [];
            $tasks = \App\DeveloperTask::select()->whereIn('id', explode(',', $request->task_ids))->whereIn('assigned_to', explode(',', $request->assign_user_id))->where('status', 'In Progress')->where('task_type_id', '1')->where('scraper_id', '>', 0)->get();
            if ($tasks) {
                foreach ($tasks as $_task) {
                    $data['priority']            = $_task->priority;
                    $data['subject']             = $_task->subject;
                    $data['task']                = $_task->task;
                    $data['responsible_user_id'] = $_task->responsible_user_id;
                    $data['assigned_to']         = $request->change_user_id;
                    $data['module_id']           = $_task->module_id;
                    $data['user_id']             = $_task->user_id;
                    $data['assigned_by']         = $_task->assigned_by;
                    $data['created_by']          = $_task->created_by;
                    $data['reference']           = $_task->reference;
                    $data['status']              = $_task->status;
                    $data['task_type_id']        = $_task->task_type_id;
                    $data['scraper_id']          = $_task->scraper_id;
                    $data['brand_id']            = $_task->brand_id;
                    $data['parent_id']           = $_task->parent_id;
                    $data['hubstaff_task_id']    = $_task->hubstaff_task_id;
                    $data['estimate_date']       = $_task->estimate_date;
                    $final[]                     = $data;
                }
            }

            $insert = \App\DeveloperTask::insert($final);

            return redirect()->back()->with('success', 'You have successfully change user for the task!');
        }

        return redirect()->back();
    }

    public function getDateHistory(Request $request)
    {
        $id   = $request->id;
        $type = \App\DeveloperTask::class;
        if (isset($request->type) && $request->type == 'task') {
            $type = \App\Task::class;
        }
        $task_module = DeveloperTaskHistory::query()
            ->join('users', 'users.id', 'developer_tasks_history.user_id')
            ->where('developer_task_id', $id)
            ->where('model', $type)
            ->where('attribute', 'estimate_date')
            ->select('developer_tasks_history.*', 'users.name')
            ->orderBy('developer_tasks_history.id', 'DESC')
            ->get();
        if ($task_module) {
            return $task_module;
        }

        return 'error';
    }

    public function taskGet()
    {
        try {
            $errors = reqValidate(request()->all(), [
                'id' => 'required',
            ], []);
            if ($errors) {
                return respJson(400, $errors[0]);
            }

            $single = DeveloperTask::find(request('id'));
            if (! $single) {
                return respJson(404, 'No task found.');
            }

            return respJson(200, '', [
                'data' => $single,
                'user' => $single->assignedUser ?? null,
            ]);
        } catch (\Throwable $th) {
            return respException($th);
        }
    }

    public function actionStartDateUpdate()
    {
        if ($new = request('value')) {
            try {
                if ($single = DeveloperTask::find(request('id'))) {
                    $params['message']           = 'Estimated Start Datetime: ' . $new;
                    $params['user_id']           = Auth::user()->id;
                    $params['developer_task_id'] = $single->id;
                    $params['approved']          = 1;
                    $params['status']            = 2;
                    $params['sent_to_user_id']   = $single->user_id;
                    ChatMessage::create($params);
                    $single->estimate_date = request('estimatedEndDateTime'); // Assign for validation purpose in below function.
                    $single->updateStartDate($new);

                    return respJson(200, 'Successfully updated.');
                }
            } catch (Exception $e) {
                return respJson(404, $e->getMessage());
            }

            return respJson(404, 'No task found.');
        }

        return respJson(400, 'Start date is required.');
    }

    public function saveEstimateDate(Request $request)
    {
        if ($new = request('value')) {
            try {
                if ($single = DeveloperTask::find(request('id'))) {
                    $params['message']           = 'Estimated Start Datetime: ' . $new;
                    $params['user_id']           = Auth::user()->id;
                    $params['developer_task_id'] = $single->id;
                    $params['approved']          = 1;
                    $params['status']            = 2;
                    $params['sent_to_user_id']   = $single->user_id;
                    ChatMessage::create($params);
                    $single->updateEstimateDate($new);

                    return respJson(200, 'Successfully updated.');
                }
            } catch (Exception $e) {
                return respJson(404, $e->getMessage());
            }

            return respJson(404, 'No task found.');
        }

        return respJson(400, 'Estimate date is required.');
    }

    public function saveEstimateDueDate(Request $request)
    {
        if ($new = request('value')) {
            if ($single = DeveloperTask::find(request('id'))) {
                $params['message']           = 'Estimated End Datetime: ' . $new;
                $params['user_id']           = Auth::user()->id;
                $params['developer_task_id'] = $single->id;
                $params['approved']          = 1;
                $params['status']            = 2;
                $params['sent_to_user_id']   = $single->user_id;
                ChatMessage::create($params);
                $single->updateEstimateDueDate($new);

                return respJson(200, 'Successfully updated.');
            }

            return respJson(404, 'No task found.');
        }

        return respJson(400, 'Due date is required.');
    }

    public function saveAmount(Request $request)
    {
        if ($new = request('value')) {
            if ($single = DeveloperTask::find(request('id'))) {
                $old = $single->cost;

                $single->cost = $new;
                $single->save();
                $params['message']           = 'New Cost: ' . $new;
                $params['user_id']           = Auth::user()->id;
                $params['developer_task_id'] = $single->id;
                $params['approved']          = 1;
                $params['status']            = 2;
                $params['sent_to_user_id']   = $single->user_id;
                ChatMessage::create($params);
                DeveloperTaskHistory::create([
                    'developer_task_id' => $single->id,
                    'model'             => \App\DeveloperTask::class,
                    'attribute'         => 'cost',
                    'old_value'         => $old,
                    'new_value'         => $new,
                    'user_id'           => loginId(),
                ]);

                return respJson(200, 'Successfully updated.');
            }

            return respJson(404, 'No task found.');
        }

        return respJson(400, 'Cost is required.');
    }

    public function saveEstimateMinutes(Request $request)
    {
        $new    = request('estimate_minutes');
        $remark = request('remark');

        if ($issue = DeveloperTask::find(request('issue_id'))) {
            $old           = $issue->estimate_minutes;
            $start_date    = $issue->start_date;
            $estimate_date = $issue->estimate_date;

            $issue->estimate_minutes = $new;
            $issue->start_date       = $start_date;
            $issue->estimate_date    = $estimate_date;

            $issue->status = DeveloperTask::DEV_TASK_STATUS_USER_ESTIMATED;
            $issue->save();
            $params['message']           = 'Estimated Time: ' . $new . ' Mins, Remark:' . $remark;
            $params['user_id']           = Auth::user()->id;
            $params['developer_task_id'] = $issue->id;
            $params['approved']          = 1;
            $params['status']            = 2;
            $params['sent_to_user_id']   = $issue->user_id;
            ChatMessage::create($params);

            DeveloperTaskHistory::create([
                'developer_task_id' => $issue->id,
                'model'             => \App\DeveloperTask::class,
                'attribute'         => 'estimation_minute',
                'old_value'         => $old,
                'new_value'         => $new,
                'remark'            => $remark ?: null,
                'user_id'           => loginId(),
            ]);

            if (Auth::user()->isAdmin()) {
                $user = User::find($issue->user_id);
                $msg  = 'TIME ESTIMATED BY ADMIN FOR TASK ' . '#DEVTASK-' . $issue->id . '-' . $issue->subject . ' ' . $new . ' MINS';
            } else {
                $user = User::find($issue->master_user_id);
                $msg  = 'TIME ESTIMATED BY USER FOR TASK ' . '#DEVTASK-' . $issue->id . '-' . $issue->subject . ' ' . $new . ' MINS';
            }

            if ($user) {
                $receiver_user_phone = $user->phone;
                if ($receiver_user_phone) {
                    $chat = ChatMessage::create([
                        'number'            => $receiver_user_phone,
                        'user_id'           => $user->id,
                        'customer_id'       => $user->id,
                        'message'           => $msg,
                        'status'            => 0,
                        'developer_task_id' => $issue->id,
                    ]);
                    app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($receiver_user_phone, $user->whatsapp_number, $msg, false, $chat->id);
                    MessageHelper::sendEmailOrWebhookNotification([$issue->assigned_to, $issue->team_lead_id, $issue->tester_id], $msg);
                }
            }

            return respJson(200, 'Successfully updated.');
        }

        return respJson(404, 'Record not found.');
    }

    public function saveLeadEstimateTime(Request $request)
    {
        $issue = DeveloperTask::find(request('issue_id'));

        DeveloperTaskHistory::create([
            'developer_task_id' => $issue->id,
            'model'             => \App\DeveloperTask::class,
            'attribute'         => 'lead_estimation_minute',
            'old_value'         => $issue->lead_estimate_time,
            'new_value'         => request('lead_estimate_time'),
            'remark'            => request('remark') ?: null,
            'user_id'           => loginId(),
        ]);
        $issue->lead_estimate_time = request('lead_estimate_time');
        $issue->save();

        return respJson(200, 'Successfully updated.');
    }

    public function approveLeadTimeHistory(Request $request)
    {
        if (isAdmin()) {
            if (
                ! $request->approve_time
                || $request->approve_time == ''
                || ! $request->lead_developer_task_id
                || $request->lead_developer_task_id == ''
            ) {
                return respJson(400, 'Select one time first.');
            }

            DeveloperTaskHistory::where('developer_task_id', $request->lead_developer_task_id)
                ->where('attribute', 'estimation_minute')
                ->update(['is_approved' => 0]);

            $history              = DeveloperTaskHistory::find($request->approve_time);
            $history->is_approved = 1;
            $history->save();

            return respJson(200, 'Successfully updated.');
        }

        return respJson(403, 'Only admin can approve.');
    }

    public function historySimpleData($key, $id)
    {
        $list = DeveloperTaskHistory::with('user')
            ->where('model', \App\DeveloperTask::class)
            ->where('attribute', $key)
            ->where('developer_task_id', $id)->orderBy('id', 'DESC')->get();

        $html   = [];
        $html[] = '<table class="table table-bordered">';

        $needApprovals = ['start_date', 'estimate_date'];

        if (in_array($key, $needApprovals)) {
            $html[] = '<thead>
            <tr>
                <th width="5%">#</th>
                <th width="5%">ID</th>
                <th width="30%">Update By</th>
                <th width="20%" style="word-break: break-all;">Old Value</th>
                <th width="20%" style="word-break: break-all;">New Value</th>
                <th width="20%">Created at</th>
            </tr>
        </thead>';
        } else {
            $html[] = '<thead>
            <tr>
                <th width="10%">ID</th>
                <th width="30%">Update By</th>
                <th width="20%" style="word-break: break-all;">Old Value</th>
                <th width="20%" style="word-break: break-all;">New Value</th>
                <th width="20%">Created at</th>
            </tr>
        </thead>';
        }

        if ($list->count()) {
            foreach ($list as $single) {
                if (in_array($key, $needApprovals)) {
                    $html[] = '<tr>
                        <td><input type="radio" name="radio_for_approve" value="' . $single->id . '" ' . ($single->is_approved ? 'checked' : '') . ' style="height:auto;" /></td>
                        <td>' . $single->id . '</td>
                        <td>' . ($single->user ? $single->user->name : '-') . '</td>
                        <td>' . $single->old_value . '</td>
                        <td>' . $single->new_value . '</td>
                        <td>' . $single->created_at . '</td>
                    </tr>';
                } else {
                    $html[] = '<tr>
                        <td>' . $single->id . '</td>
                        <td>' . ($single->user ? $single->user->name : '-') . '</td>
                        <td>' . $single->old_value . '</td>
                        <td>' . $single->new_value . '</td>
                        <td>' . $single->created_at . '</td>
                    </tr>';
                }
            }
        } else {
            if (in_array($key, $needApprovals)) {
                $html[] = '<tr>
                    <td colspan="6">No records found.</td>
                </tr>';
            } else {
                $html[] = '<tr>
                    <td colspan="5">No records found.</td>
                </tr>';
            }
        }
        $html[] = '</table>';

        return respJson(200, '', ['data' => implode('', $html)]);
    }

    public function historyStartDate()
    {
        return $this->historySimpleData('start_date', request('id'));
    }

    public function historyEstimateDate()
    {
        return $this->historySimpleData('estimate_date', request('id'));
    }

    public function historyCost()
    {
        return $this->historySimpleData('cost', request('id'));
    }

    public function historyApproveSubmit()
    {
        $id   = request('radio_for_approve');
        $type = request('type');
        if ($type == 'start_date' || $type == 'estimate_date') {
            DeveloperTaskHistory::approved($id, $type);
        }

        return respJson(200, 'Approved successfully.');
    }

    public function historyApproveList()
    {
        $type   = request('type');
        $taskId = request('id');
        if ($type == 'start_date' || $type == 'estimate_date') {
            $q = DeveloperTasksHistoryApprovals::from('developer_tasks_history_approvals as t1');
            $q->with(['approvedBy']);
            $q->leftJoin('developer_tasks_history as t2', function ($join) {
                $join->on('t1.parent_id', '=', 't2.id');
            });
            $q->where('t2.model', \App\DeveloperTask::class);
            $q->where('t2.attribute', $type);
            $q->where('t2.developer_task_id', $taskId);
            $q->select([
                't1.*',
                't2.new_value AS value',
            ]);
            $q->orderBy('id', 'DESC');
            $list = $q->get();
        }

        $html   = [];
        $html[] = '<table class="table table-bordered">';
        $html[] = '<thead>
            <tr>
                <th width="15%">Parent ID</th>
                <th width="30%">Update By</th>
                <th width="30%" style="word-break: break-all;">Approved Value</th>
                <th width="25%">Created at</th>
            </tr>
        </thead>';
        if (isset($list) && $list->count()) {
            foreach ($list as $single) {
                $html[] = '<tr>
                    <td>' . $single->parent_id . '</td>
                    <td>' . ($single->approvedByName() ?: '-') . '</td>
                    <td>' . $single->value . '</td>
                    <td>' . $single->created_at . '</td>
                </tr>';
            }
        } else {
            $html[] = '<tr>
                <td colspan="4">No records found.</td>
            </tr>';
        }
        $html[] = '</table>';

        return respJson(200, '', ['data' => implode('', $html)]);
    }

    /**
     * function to show the user wise development task's statuses counts.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function developmentTaskSummary(Request $request)
    {
        $getTaskStatus      = TaskStatus::orderBy('name', 'asc')->groupBy('name')->get();
        $getTaskStatusIds   = TaskStatus::select(DB::raw('group_concat(name) as name'))->first();
        $arrTaskStatusNames = explode(',', $getTaskStatusIds['name']);

        $userListWithStatuesCnt = User::select('developer_tasks.id', 'developer_tasks.user_id', 'users.id as userid', 'users.name', 'developer_tasks.status', DB::raw('(SELECT developer_tasks.created_at from developer_tasks where developer_tasks.user_id = users.id order by developer_tasks.created_at DESC limit 1) AS created_date'), 'users.name', DB::raw('count(developer_tasks.id) statusCnt'));
        $userListWithStatuesCnt = $userListWithStatuesCnt->join('developer_tasks', 'developer_tasks.user_id', 'users.id')->where('users.is_task_planned', 1);

        // Code for filter
        //Get all searchable user list
        $userslist       = $statuslist = null;
        $filterUserIds   = $request->get('users_filter');
        $filterStatusIds = $request->get('status_filter');

        //Get all searchable status list
        if ((int) $filterUserIds > 0 && (int) $filterStatusIds > 0) {
            $searchableStatus       = TaskStatus::WhereIn('id', $filterStatusIds)->get();
            $userListWithStatuesCnt = $userListWithStatuesCnt->WhereIn('developer_tasks.user_id', $filterUserIds)->where(function ($query) use ($searchableStatus) {
                foreach ($searchableStatus as $searchTerm) {
                    $query->orWhere('developer_tasks.status', 'like', "%$searchTerm->name%");
                }
            });
            $statuslist = TaskStatus::WhereIn('id', $filterStatusIds)->get();
            $userslist  = User::whereIn('id', $filterUserIds)->get();
        } elseif ((int) $filterUserIds > 0) {
            $userListWithStatuesCnt = $userListWithStatuesCnt->WhereIn('users.id', $filterUserIds);
            $userslist              = User::whereIn('id', $request->get('users_filter'))->get();
        } elseif ((int) $filterStatusIds > 0) {
            $searchableStatus       = TaskStatus::WhereIn('id', $filterStatusIds)->get();
            $userListWithStatuesCnt = $userListWithStatuesCnt->where(function ($query) use ($searchableStatus) {
                foreach ($searchableStatus as $searchTerm) {
                    $query->orWhere('developer_tasks.status', 'like', "%$searchTerm->name%");
                }
            });
            $statuslist = TaskStatus::WhereIn('id', $filterStatusIds)->get();
        }

        $userListWithStatuesCnt = $userListWithStatuesCnt->groupBy('users.id', 'developer_tasks.user_id', 'developer_tasks.status')
            ->orderBy('created_date', 'desc')->orderBy('developer_tasks.status', 'asc')
            ->get();

        $arrStatusCount = [];
        $arrUserNameId  = [];
        foreach ($userListWithStatuesCnt as $key => $value) {
            $status                                    = $value['status'];
            $arrStatusCount[$value['userid']][$status] = $value['statusCnt'];
            $arrUserNameId[$value['userid']]['name']   = $value['name'];
            $arrUserNameId[$value['userid']]['userid'] = $value['userid'];
            foreach ($arrTaskStatusNames as $key => $arrTaskStatusNamevalue) {
                if (! array_key_exists($arrTaskStatusNamevalue, $arrStatusCount[$value['userid']])) {
                    $arrStatusCount[$value['userid']][$arrTaskStatusNamevalue] = 0;
                }
            }
            isset($arrStatusCount[$value['userid']]) ? ksort($arrStatusCount[$value['userid']]) : '';
        }

        return view('development.devtasksummary', compact('userListWithStatuesCnt', 'getTaskStatus', 'arrUserNameId', 'arrStatusCount', 'userslist', 'statuslist'));
    }

    /**
     * function to show all the task list based on specific status and user
     *
     * @return JsonResponse
     */
    public function developmentTaskList(Request $request)
    {
        $taskDetails = DeveloperTask::where('status', $request->taskStatusId)->where('user_id', $request->userId)->get();

        return response()->json(['data' => $taskDetails]);
    }

    /**
     * Function to get user's name - it's use for lazy loading of users data
     *
     * @return JsonResponse
     */
    public function usersList(Request $request)
    {
        $users = User::orderBy('name');
        if (! empty($request->q)) {
            $users->where(function ($q) use ($request) {
                $q->where('name', 'LIKE', '%' . $request->q . '%');
            });
        }
        $users                        = $users->paginate(30);
        $result['total_count']        = $users->total();
        $result['incomplete_results'] = $users->nextPageUrl() !== null;

        foreach ($users as $user) {
            $result['items'][] = [
                'id'   => $user->id,
                'text' => $user->name,
            ];
        }

        return response()->json($result);
    }

    /**
     * Upload a task file to google drive
     */
    public function uploadFile(Request $request)
    {
        $request->validate([
            'file'               => 'required',
            'file_creation_date' => 'required',
            'remarks'            => 'sometimes',
            'task_id'            => 'required',
            'file_read'          => 'sometimes',
            'file_write'         => 'sometimes',
        ]);

        $data = $request->all();

        try {
            foreach ($data['file'] as $file) {
                DB::transaction(function () use ($file, $data) {
                    $googleScreencast            = new GoogleScreencast();
                    $googleScreencast->file_name = $file->getClientOriginalName();
                    $googleScreencast->extension = $file->extension();
                    $googleScreencast->user_id   = Auth::id();

                    $googleScreencast->read  = '';
                    $googleScreencast->write = '';

                    if ($data['task_type'] == 'DEVTASK') {
                        $googleScreencast->developer_task_id = $data['task_id'];
                    } elseif ($data['task_type'] == 'TASK') {
                        $googleScreencast->belongable_id   = $data['task_id'];
                        $googleScreencast->belongable_type = Task::class;
                    }

                    $googleScreencast->remarks            = $data['remarks'];
                    $googleScreencast->file_creation_date = $data['file_creation_date'];

                    $googleScreencast->save();
                    UploadGoogleDriveScreencast::dispatchNow($googleScreencast, $file);
                });
            }

            return back()->with('success', 'File is Uploaded to Google Drive.');
        } catch (Exception $e) {
            return back()->with('error', 'Something went wrong. Please try again');
        }
    }

    /**
     * This function will return a list of files which are uploaded under uicheck class
     */
    public function getUploadedFilesList(Request $request)
    {
        try {
            $result = [];
            if (isset($request->task_id) && isset($request->task_type)) {
                if ($request->task_type == 'DEVTASK') {
                    $result = GoogleScreencast::where('developer_task_id', $request->task_id)->orderBy('id', 'desc')->get();
                } elseif ($request->task_type == 'TASK') {
                    $result = GoogleScreencast::where('belongable_type', Task::class)->where('belongable_id', $request->task_id)->orderBy('id', 'desc')->get();
                } else {
                    throw new Exception('Something went wrong.');
                }

                if (isset($result) && count($result) > 0) {
                    $result = $result->toArray();
                }

                return response()->json([
                    'data' => view('development.partials.google-drive-list', compact('result'))->render(),
                ]);
            } else {
                throw new Exception('Task not found');
            }
        } catch (Exception $e) {
            return response()->json([
                'data' => view('development.partials.google-drive-list', ['result' => null])->render(),
            ]);
        }
    }

    /**
     * Show the hostory for task an dev task
     */
    public function showTaskEstimateTime(Request $request)
    {
        try {
            $developerTaskID = DeveloperTaskHistory::where([
                'model'     => DeveloperTask::class,
                'attribute' => 'estimation_minute',
            ])->orderBy('id', 'desc')->limit(10)->groupBy('developer_task_id')->select('developer_task_id', DB::raw('max(id) as id'))->get()->pluck('id')->toArray();

            $developerTaskHistory = DeveloperTaskHistory::join('developer_tasks', 'developer_tasks.id', 'developer_tasks_history.developer_task_id')
                ->whereIn('developer_tasks_history.id', $developerTaskID)
                ->where(function ($query) use ($request) {
                    if (isset($request->task_id)) {
                        if (str_contains($request->task_id, 'DEVTASK')) {
                            $query = $query->where('developer_tasks.id', trim($request->task_id, 'DEVTASK-'));
                        }
                    }

                    return $query;
                })
                ->select('developer_tasks.*', 'developer_tasks_history.*', 'developer_tasks.id as task_id')->get();

            $t_developerTaskID = DeveloperTaskHistory::where([
                'model'     => Task::class,
                'attribute' => 'estimation_minute',
            ])->orderBy('id', 'desc')->limit(10)->groupBy('developer_task_id')->select('developer_task_id', DB::raw('max(id) as id'))->get()->pluck('id')->toArray();

            $t_developerTaskHistory = DeveloperTaskHistory::join('tasks', 'tasks.id', 'developer_tasks_history.developer_task_id')
                ->whereIn('developer_tasks_history.id', $t_developerTaskID)
                ->where(function ($query) use ($request) {
                    if (isset($request->task_id)) {
                        if (! str_contains($request->task_id, 'DEVTASK')) {
                            $query = $query->where('tasks.id', trim($request->task_id, 'TASK-'));
                        }
                    }

                    return $query;
                })
                ->select('tasks.*', 'developer_tasks_history.*', 'tasks.id as task_id')->get();

            if (isset($request->task_id)) {
                if (str_contains($request->task_id, 'DEVTASK')) {
                    $t_developerTaskHistory = [];
                }
                if (! str_contains($request->task_id, 'DEVTASK')) {
                    $developerTaskHistory = [];
                }
            }

            return view('development.partials.estimate-list', compact('developerTaskHistory', 't_developerTaskHistory'));
        } catch (Exception $e) {
            dd($e);

            return '';
        }
    }

    public function showTaskEstimateTimeAlert(Request $request)
    {
        try {
            $developerTaskID = DeveloperTaskHistory::where([
                'model'     => DeveloperTask::class,
                'attribute' => 'estimation_minute',
            ])->orderBy('id', 'desc')->limit(10)->groupBy('developer_task_id')->select('developer_task_id', DB::raw('max(id) as id'))->get()->pluck('id')->toArray();

            $developerTaskHistory = DeveloperTaskHistory::join('developer_tasks', 'developer_tasks.id', 'developer_tasks_history.developer_task_id')
                ->whereIn('developer_tasks_history.id', $developerTaskID)
                ->where(function ($query) use ($request) {
                    if (isset($request->task_id)) {
                        if (str_contains($request->task_id, 'DEVTASK')) {
                            $query = $query->where('developer_tasks.id', trim($request->task_id, 'DEVTASK-'));
                        }
                    }

                    return $query;
                })
                ->where('developer_tasks_history.is_approved', 0)
                ->select('developer_tasks.*', 'developer_tasks_history.*', 'developer_tasks.id as task_id')->count();

            $t_developerTaskID = DeveloperTaskHistory::where([
                'model'     => Task::class,
                'attribute' => 'estimation_minute',
            ])->orderBy('id', 'desc')->limit(10)->groupBy('developer_task_id')->select('developer_task_id', DB::raw('max(id) as id'))->get()->pluck('id')->toArray();

            $t_developerTaskHistory = DeveloperTaskHistory::join('tasks', 'tasks.id', 'developer_tasks_history.developer_task_id')
                ->whereIn('developer_tasks_history.id', $t_developerTaskID)
                ->where(function ($query) use ($request) {
                    if (isset($request->task_id)) {
                        if (! str_contains($request->task_id, 'DEVTASK')) {
                            $query = $query->where('tasks.id', trim($request->task_id, 'TASK-'));
                        }
                    }

                    return $query;
                })
                ->where('developer_tasks_history.is_approved', 0)
                ->select('tasks.*', 'developer_tasks_history.*', 'tasks.id as task_id')->count();

            $totalUnApproved = $developerTaskHistory + $t_developerTaskHistory;

            return response()->json([
                'code'  => 200,
                'count' => $totalUnApproved,
            ]);
        } catch (Exception $e) {
            dd($e);

            return '';
        }
    }

    public function addScrapper(Request $request)
    {
        try {
            $this->validate(
                $request, [
                    'task_id'         => 'required',
                    'task_type'       => 'required',
                    'scrapper_values' => 'required',
                ]
            );

            $returnData = [];
            if (! empty($returnData)) {
                return response()->json(
                    [
                        'code'    => 500,
                        'data'    => [],
                        'message' => implode('</br> ', $returnData) . "</br> above key's value is missing on your json data!",
                    ]
                );
            }

            $column                  = new ScrapperValues();
            $column->task_id         = $request->task_id;
            $column->task_type       = $request->task_type;
            $column->scrapper_values = $request->scrapper_values;
            $column->added_by        = auth()->user()->id;
            $column->save();

            \App\Models\ScrapperLogs::create([
                'scrapper_id' => $column->id,
                'task_id'     => $request->task_id,
                'task_type'   => $request->task_type,
                'log'         => 'Scrapper Added',
                'created_by'  => auth()->user()->id,
            ]);

            return response()->json(
                [
                    'code'    => 200,
                    'data'    => [],
                    'message' => 'Your scrapper value has been added!',
                ]
            );
        } catch (Exception $e) {
            return response()->json(
                [
                    'code'    => 500,
                    'message' => $e->getMessage(),
                ]
            );
        }
    }

    public function getScrapperLogsByTaskId($id)
    {
        $data = \App\Models\ScrapperLogs::with('user')->where('task_id', $id)->get();

        return response()->json(['code' => 200, 'data' => $data]);
    }

    public function taskScrapper($task_id)
    {
        $ScrapperValues = ScrapperValues::where('task_id', $task_id)->orderBy('id', 'DESC')->first();

        $ScrapperValuesHistory        = [];
        $ScrapperValuesRemarksHistory = [];
        $returnData                   = [];
        $id                           = 0;
        if (! empty($ScrapperValues)) {
            $jsonString = $ScrapperValues['scrapper_values'];
            $phpArray   = json_decode($jsonString, true);
            if (! empty($phpArray)) {
                if (! empty($phpArray)) {
                    $ScrapperValuesHistory        = ScrapperValuesHistory::where('task_id', $task_id)->get();
                    $ScrapperValuesRemarksHistory = ScrapperValuesRemarksHistory::where('task_id', $task_id)->get();

                    foreach ($phpArray as $key_json => $value_json) {
                        $returnData[$key_json] = $value_json;
                    }
                }
            }

            $id = $ScrapperValues->id;
        }

        return response()->json(['code' => 200, 'values' => $returnData, 'task_id' => $task_id, 'ScrapperValuesHistory' => $ScrapperValuesHistory, 'ScrapperValuesRemarksHistory' => $ScrapperValuesRemarksHistory, 'id' => $id]);
    }

    // Added function to get scrapper by scrapper id on listing page DEVTASK-24690
    public function viewScrapper($id)
    {
        $ScrapperValues = ScrapperValues::where('id', $id)->first();

        $task_id                      = $ScrapperValues->task_id;
        $ScrapperValuesHistory        = [];
        $ScrapperValuesRemarksHistory = [];
        $returnData                   = [];
        $id                           = 0;
        if (! empty($ScrapperValues)) {
            $jsonString = $ScrapperValues['scrapper_values'];
            $phpArray   = json_decode($jsonString, true);
            if (! empty($phpArray)) {
                if (! empty($phpArray)) {
                    $ScrapperValuesHistory        = ScrapperValuesHistory::where('task_id', $task_id)->get();
                    $ScrapperValuesRemarksHistory = ScrapperValuesRemarksHistory::where('task_id', $task_id)->get();

                    foreach ($phpArray as $key_json => $value_json) {
                        $returnData[$key_json] = $value_json;
                    }
                }
            }

            $id = $ScrapperValues->id;
        }

        return response()->json(['code' => 200, 'values' => $returnData, 'task_id' => $task_id, 'ScrapperValuesHistory' => $ScrapperValuesHistory, 'ScrapperValuesRemarksHistory' => $ScrapperValuesRemarksHistory, 'id' => $id]);
    }

    public function UpdateScrapper(Request $request)
    {
        $this->validate($request, [
            'task_id'     => 'required',
            'column_name' => 'required',
            'status'      => 'required',
        ]);

        $input               = $request->all();
        $input['updated_by'] = auth()->user()->id;

        ScrapperValuesHistory::updateOrCreate(
            ['task_id' => $request->task_id, 'column_name' => $request->column_name], $input
        );

        if ($request->status == 'Unapprove') {
            if (! empty($request->remarks)) {
                ScrapperValuesRemarksHistory::updateOrCreate(
                    ['task_id' => $request->task_id, 'column_name' => $request->column_name], $input
                );
            }

            $task         = DeveloperTask::find($request->task_id);
            $task->status = 'Scrapper Data Unapproved';
            $task->save();
        } else {
            $task         = DeveloperTask::find($request->task_id);
            $task->status = 'Scrapper Data Approved';
            $task->save();
        }

        return response()->json(
            [
                'code'    => 200,
                'data'    => [],
                'message' => 'Your scrapper status has been updated!',
            ]
        );
    }

    public function UpdateScrapperRemarks(Request $request)
    {
        $this->validate($request, [
            'task_id'     => 'required',
            'column_name' => 'required',
            'remarks'     => 'required',
        ]);

        $input               = $request->all();
        $input['updated_by'] = auth()->user()->id;

        ScrapperValuesRemarksHistory::updateOrCreate(
            ['task_id' => $request->task_id, 'column_name' => $request->column_name], $input
        );

        return response()->json(
            [
                'code'    => 200,
                'data'    => [],
                'message' => 'Your scrapper status has been updated!',
            ]
        );
    }

    public function devScrappingTaskIndex(Request $request)
    {
        $title = 'Scrapper Verification Data';

        $inputs = $request->input();

        $records = ScrapperValues::with('tasks');

        $keywords = request('keywords');
        if (! empty($keywords)) {
            $records = $records->where(function ($q) use ($keywords) {
                $q->where('scrapper_values', 'LIKE', "%$keywords%")
                    ->orWhere('task_id', 'LIKE', "%$keywords%");
            });
        }

        $records = $records->select('task_id', 'scrapper_values.scrapper_values', 'scrapper_values.created_at', DB::raw('MAX(id) AS max_id')) // Select only necessary columns and use an alias for MAX(id)
        ->groupBy('task_id')
            ->orderBy('max_id', 'DESC') // Order by the alias of MAX(id)
            ->paginate(50);

        $datatableModel = DataTableColumn::select('column_name')->where('user_id', auth()->user()->id)->where('section_name', 'development-scrapper-listing')->first();

        $dynamicColumnsToShowscrapper = [];
        if (! empty($datatableModel->column_name)) {
            $hideColumns                  = $datatableModel->column_name ?? '';
            $dynamicColumnsToShowscrapper = json_decode($hideColumns, true);
        }

        return view('development.scrapperlist', [
            'records'                      => $records,
            'inputs'                       => $inputs,
            'dynamicColumnsToShowscrapper' => $dynamicColumnsToShowscrapper,
        ]);
    }

    public function scrapperColumnVisbilityUpdate(Request $request)
    {
        $userCheck = DataTableColumn::where('user_id', auth()->user()->id)->where('section_name', 'development-scrapper-listing')->first();

        if ($userCheck) {
            $column               = DataTableColumn::find($userCheck->id);
            $column->section_name = 'development-scrapper-listing';
            $column->column_name  = json_encode($request->column_scrapper);
            $column->save();
        } else {
            $column               = new DataTableColumn();
            $column->section_name = 'development-scrapper-listing';
            $column->column_name  = json_encode($request->column_scrapper);
            $column->user_id      = auth()->user()->id;
            $column->save();
        }

        return redirect()->back()->with('success', 'column visiblity Added Successfully!');
    }

    public function developmentScrapperData($id)
    {
        $ScrapperValues = ScrapperValues::findorFail($id);

        $properties = [];
        $jsonString = $ScrapperValues['scrapper_values'];
        $phpArray   = json_decode($jsonString, true);
        if (! empty($phpArray)) {
            foreach ($phpArray as $key_json => $value_json) {
                if ($key_json == 'properties') {
                    $properties[] = $value_json;
                }
            }
        }

        $html = '';
        if (! empty($properties)) {
            $html = '<table class="table table-bordered table-striped">
                    <tbody class="text-center task_queue_list">';
            foreach ($properties as $key => $value) {
                $keys = array_keys($value);

                if (! empty($keys)) {
                    foreach ($keys as $key_k => $value_k) {
                        $html .= '<tr>';
                        $html .= '<th>' . ucwords(str_replace('_', ' ', $value_k)) . '</th>';

                        if (gettype($value[$value_k]) == 'array') {
                            $html .= '<td>' . implode(', ', $value[$value_k]) . '</td>';
                        } else {
                            $html .= '<td>' . $value[$value_k] . '</td>';
                        }
                        $html .= '</tr>';
                    }
                }
            }

            $html .= '</tbody>';
            $html .= '</table>';
        }

        return response()->json([
            'status'  => true,
            'html'    => $html,
            'message' => 'Data get successfully',
        ], 200);
    }

    public function developmentScrapperImagesData($id)
    {
        $ScrapperValues = ScrapperValues::findorFail($id);

        $images     = [];
        $jsonString = $ScrapperValues['scrapper_values'];
        $phpArray   = json_decode($jsonString, true);
        if (! empty($phpArray)) {
            foreach ($phpArray as $key_json => $value_json) {
                if ($key_json == 'images') {
                    $images[] = $value_json;
                }
            }
        }

        $html = '';
        if (! empty($images)) {
            $html = '<div class="row">
                    <div class="col-lg-12">';
            foreach ($images as $key => $value) {
                if (! empty($value)) {
                    foreach ($value as $key_k => $value_k) {
                        $html .= '<div class="col-lg-1">';
                        $html .= '<img src="' . $value_k . '">';
                        $html .= '</div>';
                    }
                }
            }

            $html .= '</div>';
            $html .= '</div>';
        }

        return response()->json([
            'status'  => true,
            'html'    => $html,
            'message' => 'Data get successfully',
        ], 200);
    }

    public function developmentGetScrapperData(Request $request)
    {
        $ScrapperValuesHistory = ScrapperValuesHistory::where('task_id', $request->task_id)->where('column_name', $request->column_name)->first();

        $ScrapperValuesRemarksHistory = [];
        if (! empty($ScrapperValuesHistory)) {
            if ($ScrapperValuesHistory['status'] == 'Unapprove') {
                $ScrapperValuesRemarksHistory = ScrapperValuesRemarksHistory::where('task_id', $request->task_id)->where('column_name', $request->column_name)->first();
            }
        }

        return response()->json([
            'status'                       => true,
            'ScrapperValuesHistory'        => $ScrapperValuesHistory,
            'ScrapperValuesRemarksHistory' => $ScrapperValuesRemarksHistory,
            'message'                      => 'Data get successfully',
        ], 200);
    }

    public function devScrappingTaskHistoryIndex(Request $request)
    {
        $ScrapperValues = ScrapperValues::where('task_id', $request->task_id)->where('id', '!=', $request->id)->orderBy('id', 'DESC')->get();
        $returnData     = [];
        if (! empty($ScrapperValues)) {
            foreach ($ScrapperValues as $key => $value) {
                $jsonString = $value['scrapper_values'];
                $phpArray   = json_decode($jsonString, true);
                if (! empty($phpArray)) {
                    foreach ($phpArray as $key_json => $value_json) {
                        $returnData[$key][$key_json] = $value_json;
                    }
                }
            }
        }

        return response()->json(['code' => 200, 'values' => $returnData, 'task_id' => $request->task_id]);
    }

    public function devScrappingTaskHistory($id)
    {
        $title = 'Scrapper Verification Data';

        $recordsSingle = ScrapperValues::where('id', $id)->first();

        $records = ScrapperValues::with('tasks')->where('task_id', $recordsSingle['task_id'])->orderBy('id', 'DESC');

        $keywords = request('keywords');
        if (! empty($keywords)) {
            $records = $records->where(function ($q) use ($keywords) {
                $q->where('scrapper_values', 'LIKE', "%$keywords%")
                    ->orWhere('task_id', 'LIKE', "%$keywords%");
            });
        }
        $records = $records->paginate(50);

        $datatableModel = DataTableColumn::select('column_name')->where('user_id', auth()->user()->id)->where('section_name', 'development-scrapper-listing')->first();

        $dynamicColumnsToShowscrapper = [];
        if (! empty($datatableModel->column_name)) {
            $hideColumns                  = $datatableModel->column_name ?? '';
            $dynamicColumnsToShowscrapper = json_decode($hideColumns, true);
        }

        return view('development.scrapperlisthistroy', [
            'records'                      => $records,
            'dynamicColumnsToShowscrapper' => $dynamicColumnsToShowscrapper,
        ]);
    }

    public function developmentUpdateAllScrapperStatusData(Request $request)
    {
        $recordsScrapper = ScrapperValues::where('id', $request->scrapper_id)->first();

        if (! empty($recordsScrapper)) {
            if ($request->type == 1) {
                $jsonString = $recordsScrapper['scrapper_values'];
                $phpArray   = json_decode($jsonString, true);
                if (! empty($phpArray)) {
                    foreach ($phpArray as $key_json => $value_json) {
                        if ($key_json == 'properties') {
                            if (! empty($value_json)) {
                                foreach ($value_json as $key => $value) {
                                    $ScrapperValuesHistory = ScrapperValuesHistory::where('column_name', $key)->where('task_id', $recordsScrapper['task_id'])->first();

                                    if (empty($ScrapperValuesHistory)) {
                                        $ScrapperValuesHistoryNew              = new ScrapperValuesHistory;
                                        $ScrapperValuesHistoryNew->status      = 'Approve';
                                        $ScrapperValuesHistoryNew->column_name = $key;
                                        $ScrapperValuesHistoryNew->updated_by  = auth()->user()->id;
                                        $ScrapperValuesHistoryNew->task_id     = $recordsScrapper['task_id'];
                                        $ScrapperValuesHistoryNew->save();
                                    } else {
                                        $ScrapperValuesHistory->status     = 'Approve';
                                        $ScrapperValuesHistory->updated_by = auth()->user()->id;
                                        $ScrapperValuesHistory->save();
                                    }

                                    ScrapperValuesRemarksHistory::where('column_name', $key)->where('task_id', $recordsScrapper['task_id'])->delete();
                                }
                            }
                        } else {
                            $ScrapperValuesHistory = ScrapperValuesHistory::where('column_name', $key_json)->where('task_id', $recordsScrapper['task_id'])->first();

                            if (empty($ScrapperValuesHistory)) {
                                $ScrapperValuesHistoryNew              = new ScrapperValuesHistory;
                                $ScrapperValuesHistoryNew->status      = 'Approve';
                                $ScrapperValuesHistoryNew->column_name = $key_json;
                                $ScrapperValuesHistoryNew->updated_by  = auth()->user()->id;
                                $ScrapperValuesHistoryNew->task_id     = $recordsScrapper['task_id'];
                                $ScrapperValuesHistoryNew->save();
                            } else {
                                $ScrapperValuesHistory->status     = 'Approve';
                                $ScrapperValuesHistory->updated_by = auth()->user()->id;
                                $ScrapperValuesHistory->save();
                            }

                            ScrapperValuesRemarksHistory::where('column_name', $key_json)->where('task_id', $recordsScrapper['task_id'])->delete();
                        }
                    }

                    $task         = DeveloperTask::find($recordsScrapper['task_id']);
                    $task->status = 'Scrapper Data Approved';
                    $task->save();
                }

                return response()->json([
                    'status'  => true,
                    'message' => 'Scrapper values status updated.',
                ], 200);
            } else {
                ScrapperValuesHistory::where('task_id', $recordsScrapper['task_id'])->delete();
                ScrapperValuesRemarksHistory::where('task_id', $recordsScrapper['task_id'])->delete();

                return response()->json([
                    'status'  => true,
                    'message' => 'Scrapper values status updated.',
                ], 200);
            }
        }

        return response()->json([
            'status'  => true,
            'message' => 'Scrapper values status updated.',
        ], 200);
    }

    public function startTimeHistory(Request $request)
    {
        $task = DeveloperTask::find($request->developer_task_id);

        if ($request->task_type == 1) {
            $input['m_start_date'] = Carbon::now();
            $input['task_start']   = 1;
            $input['status']       = 'In Progress';

            $history             = new DeveloperTaskStartEndHistory();
            $history->user_id    = auth()->user()->id;
            $history->task_id    = $request->developer_task_id;
            $history->start_date = Carbon::now();
            $history->save();
        } elseif ($request->task_type == 2) {
            $input['m_end_date'] = Carbon::now();
            $input['task_start'] = 2;

            $history = DeveloperTaskStartEndHistory::where('task_id', $request->developer_task_id)->orderBy('id', 'DESC')->first();

            if (! empty($history)) {
                $history->end_date = Carbon::now();
                $history->save();
            }
        }

        $task->update($input);

        return response()->json(['msg' => 'success']);
    }

    public function getTimeHistoryStartEnd(Request $request)
    {
        $id = $request->id;

        $task_histories = DeveloperTaskStartEndHistory::where('task_id', $id)->orderBy('id', 'DESC')->get();

        return response()->json(['histories' => $task_histories]);
    }

    public function scrapperMonitoring(Request $request)
    {
        $tasks = DeveloperTask::select('id')->orderBy('id', 'desc')->get();
        $users = \App\User::role('Developer')->select('id', 'name')->get();

        $data = \App\Models\ScrapperMonitoring::with([
            'user',
            'task' => function ($query) {
                $query->with(['developerTaskHistories' => function ($innerQuery) {
                    $innerQuery->orderByDesc('created_at');
                }]);
            },
        ])
        ->when(($request->has('scrapper_name') && $request->scrapper_name != ''), function ($query) use ($request) {
            $query->where('scrapper_name', 'LIKE', '%' . $request->scrapper_name . '%');
        })
        ->when(($request->has('task_id') && $request->task_id != ''), function ($query) use ($request) {
            $query->where('task_id', $request->task_id);
        })
        ->when(($request->has('user_id') && $request->user_id != ''), function ($query) use ($request) {
            $query->where('user_id', $request->user_id);
        })
        ->when(($request->has('need_proxy') && $request->need_proxy != ''), function ($query) use ($request) {
            $query->where('need_proxy', $request->need_proxy);
        })
        ->when(($request->has('aws_moved') && $request->aws_moved != ''), function ($query) use ($request) {
            $query->where('move_to_aws', $request->aws_moved);
        })
        ->orderByDesc('created_at')
        ->paginate(10);
        if (request()->ajax()) {
            return view('development.scrapper.partials.table-data', compact('data'));
        }

        $inputsData = $request->all();

        return view('development.scrapper.monitoring', compact('tasks', 'users', 'data', 'inputsData'));
    }

    public function storeScrapperMonitoring(\App\Http\Requests\ScrapperMonitoringCreateRequest $request)
    {
        try {
            $validatedData = $request->validated();
            if (! auth()->user()->isAdmin()) {
                $validatedData['user_id'] = auth()->user()->id;
            }

            \App\Models\ScrapperMonitoring::create($validatedData);

            return response()->json([
                'code'     => 200,
                'status'   => 'success',
                'message'  => 'Record created successfully',
            ]);
        } catch (\Throwable $th) {
            return response()->json([
                'code'     => 400,
                'status'   => 'error',
                'message'  => $th->getMessage(),
            ]);
        }
    }

    // Add this function to handle common column visibilty feature. DEVTASK-24789
    public function globalColumnVisbilityUpdate(Request $request)
    {
        $userCheck = DataTableColumn::where('user_id', auth()->user()->id)->where('section_name', $request->section_name)->first();

        if ($userCheck) {
            $column               = DataTableColumn::find($userCheck->id);
            $column->section_name = $request->section_name;
            $column->column_name  = json_encode($request->column_scrapper);
            $column->save();
        } else {
            $column               = new DataTableColumn();
            $column->section_name = $request->section_name;
            $column->column_name  = json_encode($request->column_scrapper);
            $column->user_id      = auth()->user()->id;
            $column->save();
        }

        return redirect()->back()->with('success', 'column visiblity Added Successfully!');
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/DubbizleController.php 
Content: <?php

namespace App\Http\Controllers;

use Auth;
use App\User;
use App\Helpers;
use App\Dubbizle;
use Carbon\Carbon;
use App\ChatMessage;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;

class DubbizleController extends Controller
{
    public function updateReminder(Request $request)
    {
        $supplier                   = Dubbizle::find($request->get('dubbizle_id'));
        $supplier->frequency        = $request->get('frequency');
        $supplier->reminder_message = $request->get('message');
        $supplier->save();

        return response()->json([
            'success',
        ]);
    }

    public function index()
    {
        $posts = DB::select('
                    SELECT *,
     							 (SELECT mm3.id FROM chat_messages mm3 WHERE mm3.id = message_id) AS message_id,
                    (SELECT mm1.message FROM chat_messages mm1 WHERE mm1.id = message_id) as message,
                    (SELECT mm2.status FROM chat_messages mm2 WHERE mm2.id = message_id) AS message_status,
                    (SELECT mm4.sent FROM chat_messages mm4 WHERE mm4.id = message_id) AS message_type,
                    (SELECT mm2.created_at FROM chat_messages mm2 WHERE mm2.id = message_id) as last_communicated_at

                    FROM (
                      SELECT * FROM dubbizles

                      LEFT JOIN (SELECT MAX(id) as message_id, dubbizle_id, message, MAX(created_at) as message_created_At FROM chat_messages WHERE chat_messages.status != 7 AND chat_messages.status != 8 AND chat_messages.status != 9 GROUP BY dubbizle_id ORDER BY chat_messages.created_at DESC) AS chat_messages
                      ON dubbizles.id = chat_messages.dubbizle_id

                    ) AS dubbizles
                    WHERE id IS NOT NULL
                    ORDER BY last_communicated_at DESC;
     						');

        $keywords = Dubbizle::select('keywords')->get()->groupBy('keywords');

        return view('dubbizle', [
            'posts'    => $posts,
            'keywords' => $keywords,
        ]);
    }

    public function show($id)
    {
        $dubbizle    = Dubbizle::find($id);
        $users_array = Helpers::getUserArray(User::all());

        return view('dubbizle-show', [
            'dubbizle'    => $dubbizle,
            'users_array' => $users_array,
        ]);
    }

    public function bulkWhatsapp(Request $request)
    {
        $this->validate($request, [
            'group'   => 'required|string',
            'message' => 'required|string',
        ]);

        $params = [
            'user_id'  => Auth::id(),
            'number'   => null,
            'message'  => $request->message,
            'approved' => 0,
            'status'   => 1,
        ];

        $dubbizles = Dubbizle::where('keywords', $request->group)->get();

        foreach ($dubbizles as $dubbizle) {
            $params['dubbizle_id'] = $dubbizle->id;

            $chat_message = ChatMessage::create($params);

            app(\App\Http\Controllers\WhatsAppController::class)->sendWithNewApi($dubbizle->phone_number, '919152731483', $params['message'], null, $chat_message->id);

            $chat_message->update([
                'approved'   => 1,
                'status'     => 2,
                'created_at' => Carbon::now(),
            ]);
        }

        return redirect('/scrap/dubbizle')->withSuccess('You have successfully sent bulk whatsapp messages');
    }

    public function edit($id)
    {
        $d = Dubbizle::findOrFail($id);

        return view('dubbizle-edit', compact('d'));
    }

    public function update($id, Request $request)
    {
        $d = Dubbizle::findOrFail($id);

        $d->url          = $request->get('url');
        $d->phone_number = $request->get('phone_number');
        $d->keywords     = $request->get('keywords');
        $d->post_date    = $request->get('post_date');
        $d->requirements = $request->get('requirements');
        $d->body         = $request->get('body');
        $d->phone_number = $request->get('phone_number');
        $d->save();

        return redirect()->back()->with('success', 'Record updated successfully!');
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/HubstaffActivitiesController.php 
Content: <?php

namespace App\Http\Controllers;

use DB;
use Auth;
use App\Task;
use App\Team;
use App\User;
use App\Payment;
use App\UserRate;
use Carbon\Carbon;
use App\DeveloperTask;
use App\PayentMailData;
use App\PaymentReceipt;
use Illuminate\Http\Request;
use App\DeveloperTaskHistory;
use App\Helpers\HubstaffTrait;
use App\HubstaffTaskEfficiency;
use App\Hubstaff\HubstaffMember;
use App\Hubstaff\HubstaffActivity;
use App\Hubstaff\HubstaffTaskNotes;
use App\Mails\Manual\DocumentEmail;
use Illuminate\Support\Facades\Log;
use Maatwebsite\Excel\Facades\Excel;
use App\Exports\HubstaffActivityReport;
use App\Hubstaff\HubstaffActivitySummary;
use Illuminate\Support\Facades\Validator;
use App\Loggers\HubstuffCommandLogMessage;
use App\Exports\HubstaffNotificationReport;
use App\HubstaffActivityByPaymentFrequency;

class HubstaffActivitiesController extends Controller
{
    use HubstaffTrait;

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        $title = 'Hubstaff Activities';

        return view('hubstaff.activities.index', compact('title'));
    }

    public function notification()
    {
        $title = 'Hubstaff Notification';

        $users = User::orderBy('name')->get();

        return view('hubstaff.activities.notification.index', compact('title', 'users'));
    }

    public function notificationRecords(Request $request)
    {
        $records = \App\Hubstaff\HubstaffActivityNotification::join('users as u', 'hubstaff_activity_notifications.user_id', 'u.id');

        $records->leftJoin('user_avaibilities as av', 'hubstaff_activity_notifications.user_id', 'av.user_id');
        $records->where('av.is_latest', 1);

        $keyword = request('keyword');
        if (! empty($keyword)) {
            $records = $records->where(function ($q) use ($keyword) {
                $q->where('u.name', 'LIKE', "%$keyword%");
            });
        }

        if (! empty($request->user_id)) {
            $records = $records->where('hubstaff_activity_notifications.user_id', $request->user_id);
        }

        if ($request->start_date != null) {
            $records = $records->whereDate('start_date', '>=', $request->start_date . ' 00:00:00');
        }

        if ($request->end_date != null) {
            $records = $records->whereDate('start_date', '<=', $request->end_date . ' 23:59:59');
        }

        $records = $records->select([
            'hubstaff_activity_notifications.*',
            'u.name as user_name',
            'av.minute as daily_working_hour',
            'u.name as total_working_hour',
        ])
            ->orderBy('total_track', 'desc')->get();

        $recordsArr = [];

        $totalUserTrack          = 0;
        $display_user_total_hour = 0;

        foreach ($records as $row) {
            $totalUserTrack = $totalUserTrack + $row->total_track;

            $dwork = $row->daily_working_hour ? number_format($row->daily_working_hour, 2, '.', '') : 0;

            $thours   = floor($row->total_track / 3600);
            $tminutes = floor(($row->total_track / 60) % 60);
            $twork    = $thours . ':' . sprintf('%02d', $tminutes);

            $difference = (($row->daily_working_hour * 60 * 60) - $row->total_track);

            $sing = '';
            if ($difference > 0) {
                $sign = '-';
            } elseif ($difference < 0) {
                $sign = '+';
            } else {
                $sign = '';
            }
            $admin = null;
            if (\Auth::user()->hasRole('Admin')) {
                $admin = 1;
            }

            $hours   = floor(abs($difference) / 3600);
            $minutes = sprintf('%02d', floor((abs($difference) / 60) % 60));

            $latest_message = \App\ChatMessage::where('user_id', $row->user_id)->where('hubstuff_activity_user_id', '!=', null)->orderBy('id', 'DESC')->first();
            $latest_msg     = null;
            if ($latest_message) {
                $latest_msg = $latest_message->message;
                if (strlen($latest_message->message) > 20) {
                    $latest_msg = substr($latest_message->message, 0, 20) . '...';
                }
            }
            $recordsArr[] = [

                'id'                 => $row->id,
                'user_name'          => $row->user_name,
                'user_id'            => $row->user_id,
                'start_date'         => Carbon::parse($row->start_date)->format('Y-m-d'),
                'daily_working_hour' => $dwork,
                'total_working_hour' => $twork,
                'different'          => $sign . $hours . ':' . $minutes,
                'min_percentage'     => $row->min_percentage,
                'actual_percentage'  => $row->actual_percentage,
                'reason'             => $row->reason,
                'status'             => $row->status,
                'is_admin'           => $admin,
                'is_hod_crm'         => 'user',
                'latest_message'     => $latest_msg,

            ];
        }

        if ($request->user_id) {
            $hrs                     = floor($totalUserTrack / 3600);
            $mnts                    = floor(($totalUserTrack / 60) % 60);
            $display_user_total_hour = $hrs . ':' . sprintf('%02d', $mnts);
        }

        return response()->json([
            'code'    => 200,
            'data'    => $recordsArr,
            'total'   => count($records),
            'user_id' => $request->get('user_id') ?? 0,
            'sum'     => $display_user_total_hour,
        ]);
    }

    public function downloadNotification(Request $request)
    {
        $records = \App\Hubstaff\HubstaffActivityNotification::join('users as u', 'hubstaff_activity_notifications.user_id', 'u.id');

        $records->leftJoin('user_avaibilities as av', 'hubstaff_activity_notifications.user_id', 'av.user_id');
        $records->where('av.is_latest', 1);

        $keyword = request('keyword');
        if (! empty($keyword)) {
            $records = $records->where(function ($q) use ($keyword) {
                $q->where('u.name', 'LIKE', "%$keyword%");
            });
        }

        if (! empty($request->user_id)) {
            $records = $records->where('hubstaff_activity_notifications.user_id', $request->user_id);
        }

        if ($request->start_date != null) {
            $records = $records->whereDate('start_date', '>=', $request->start_date . ' 00:00:00');
        }

        if ($request->end_date != null) {
            $records = $records->whereDate('start_date', '<=', $request->end_date . ' 23:59:59');
        }

        $records = $records->select([
            'hubstaff_activity_notifications.*',
            'u.name as user_name',
            'av.minute as daily_working_hour',
            'u.name as total_working_hour',
        ])
            ->latest()->get();

        $recordsArr = [];
        foreach ($records as $row) {
            $dwork = $row->daily_working_hour ? number_format($row->daily_working_hour, 2, '.', '') : 0;

            $thours   = floor($row->total_track / 3600);
            $tminutes = floor(($row->total_track / 60) % 60);
            $twork    = $thours . ':' . sprintf('%02d', $tminutes);

            $difference = (($row->daily_working_hour * 60 * 60) - $row->total_track);

            $sing = '';
            if ($difference > 0) {
                $sign = '-';
            } elseif ($difference < 0) {
                $sign = '+';
            } else {
                $sign = '';
            }

            $hours   = floor(abs($difference) / 3600);
            $minutes = sprintf('%02d', floor((abs($difference) / 60) % 60));

            $recordsArr[] = [
                'user_name'          => $row->user_name,
                'start_date'         => Carbon::parse($row->start_date)->format('Y-m-d'),
                'daily_working_hour' => $dwork,
                'total_working_hour' => $twork,
                'different'          => $sign . $hours . ':' . $minutes,
                'min_percentage'     => $row->min_percentage,
                'actual_percentage'  => $row->actual_percentage,
                'reason'             => $row->reason,
                'status'             => $row->status,

            ];
        }

        $filename = 'Report-' . request('start_date') . '-To-' . request('end_date') . '.csv';

        return Excel::download(new HubstaffNotificationReport($recordsArr), $filename);
    }

    public function notificationReasonSave(Request $request)
    {
        if ($request->id != null) {
            $hnotification = \App\Hubstaff\HubstaffActivityNotification::find($request->id);
            if ($hnotification != null) {
                $hnotification->reason = $request->reason;
                $hnotification->save();

                return response()->json(['code' => 200, 'data' => [], 'message' => 'Added succesfully']);
            }
        }

        return response()->json(['code' => 500, 'data' => [], 'message' => 'Requested id is not in database']);
    }

    public function changeStatus(Request $request)
    {
        if (! auth()->user()->isAdmin()) {
            return response()->json(['code' => 500, 'data' => [], 'message' => 'only admin can change status.']);
        }
        if ($request->id != null) {
            $hnotification = \App\Hubstaff\HubstaffActivityNotification::find($request->id);
            if ($hnotification != null) {
                $hnotification->status = $request->status;
                $hnotification->save();

                return response()->json(['code' => 200, 'data' => [], 'message' => 'changed succesfully']);
            }
        }

        return response()->json(['code' => 500, 'data' => [], 'message' => 'Requested id is not in database']);
    }

    public function HubstaffActivityCommandExecution(Request $request)
    {
        $start_date = $request->startDate ? $request->startDate : date('Y-m-d', strtotime('-1 days'));
        $end_date   = $request->endDate ? $request->endDate : date('Y-m-d', strtotime('-1 days'));
        $userid     = $request->user_id;

        $users = User::where('id', $userid)->get();
        $today = Carbon::now()->toDateTimeString();

        foreach ($users as $key => $user) {
            $user_id = $user->id;

            $data['email'] = $user->email;
            $data['title'] = 'Hubstuff Activities Report';

            $tasks = PaymentReceipt::with('chat_messages', 'user')->where('user_id', $user_id)->whereDate('date', '>=', $start_date)->whereDate('date', '<=', $end_date)->get();

            foreach ($tasks as $task) {
                $task->user;

                $totalPaid = Payment::where('payment_receipt_id', $task->id)->sum('amount');
                if ($totalPaid) {
                    $task->paid_amount = number_format($totalPaid, 2);
                    $task->balance     = $task->rate_estimated - $totalPaid;
                    $task->balance     = number_format($task->balance, 2);
                } else {
                    $task->paid_amount = 0;
                    $task->balance     = $task->rate_estimated;
                    $task->balance     = number_format($task->balance, 2);
                }
                if ($task->task_id) {
                    $task->taskdetails      = Task::find($task->task_id);
                    $task->estimate_minutes = 0;
                    if ($task->taskdetails) {
                        $task->details = $task->taskdetails->task_details;
                        if ($task->worked_minutes == null) {
                            $task->estimate_minutes = $task->taskdetails->approximate;
                        } else {
                            $task->estimate_minutes = $task->worked_minutes;
                        }
                    }
                } elseif ($task->developer_task_id) {
                    $task->taskdetails      = DeveloperTask::find($task->developer_task_id);
                    $task->estimate_minutes = 0;
                    if ($task->taskdetails) {
                        $task->details = $task->taskdetails->task;
                        if ($task->worked_minutes == null) {
                            $task->estimate_minutes = $task->taskdetails->estimate_minutes;
                        } else {
                            $task->estimate_minutes = $task->worked_minutes;
                        }
                    }
                } else {
                    $task->details          = $task->remarks;
                    $task->estimate_minutes = $task->worked_minutes;
                }
            }

            $activityUsers = collect([]);

            foreach ($tasks as $task) {
                $a['date']    = $task->date;
                $a['details'] = $task->details;

                if ($task->task_id) {
                    $category = 'Task #' . $task->task_id;
                } elseif ($task->developer_task_id) {
                    $category = 'Devtask #' . $task->developer_task_id;
                } else {
                    $category = 'Manual';
                }

                $a['category']    = $category;
                $a['time_spent']  = $task->estimate_minutes;
                $a['amount']      = $task->rate_estimated;
                $a['currency']    = $task->currency;
                $a['amount_paid'] = $task->paid_amount;
                $a['balance']     = $task->balance;
                $activityUsers->push($a);
            }

            $total_amount      = 0;
            $total_amount_paid = 0;
            $total_balance     = 0;
            foreach ($activityUsers as $key => $value) {
                $total_amount += $value['amount'] ?? 0;
                $total_amount_paid += $value['amount_paid'] ?? 0;
                $total_balance += $value['balance'] ?? 0;
            }

            $path      = '';
            $file_data = $this->downloadExcelReport($activityUsers);
            $path      = $file_data;

            $today        = Carbon::now()->toDateTimeString();
            $payment_date = Carbon::createFromFormat('Y-m-d H:s:i', $today);
            $storage_path = $path;

            PayentMailData::create([
                'user_id'           => $user_id,
                'start_date'        => $start_date,
                'end_date'          => $end_date,
                'file_path'         => $storage_path,
                'total_amount'      => round($total_amount, 2),
                'total_amount_paid' => round($total_amount_paid, 2),
                'total_balance'     => round($total_balance, 2),
                'payment_date'      => $payment_date,
                'command_execution' => 'Manually',
            ]);

            $file_paths[] = $path;

            $emailClass = (new DocumentEmail('Hubstuff Activities Report', 'Hubstaff Payment Activity', $file_paths))->build();

            $email = \App\Email::create([
                'model_id'        => $user_id,
                'model_type'      => \App\User::class,
                'from'            => $emailClass->fromMailer,
                'to'              => $user->email,
                'subject'         => $emailClass->subject,
                'message'         => $emailClass->render(),
                'template'        => 'customer-simple',
                'additional_data' => json_encode(['attachment' => $file_paths]),
                'status'          => 'pre-send',
                'is_draft'        => 1,
                'cc'              => null,
                'bcc'             => null,
            ]);

            \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');
        }

        return response()->json(['code' => 200, 'message' => 'Command Execution Success']);
    }

    public function getActivityUsers(Request $request, $params = null, $where = null)
    {
        if ($params !== null) {
            $params = $params->request->all();

            $request->activity_command  = $params['activity_command'];
            $request->user_id           = $params['user_id'];
            $request->user              = $params['user'];
            $request->developer_task_id = $params['developer_task_id'];
            $request->task_id           = $params['task_id'];
            $request->task_status       = $params['task_status'];
            $request->start_date        = $params['start_date'];
            $request->end_date          = $params['end_date'];
            $request->status            = $params['status'];
            $request->submit            = $params['submit'];
            $request->response_type     = $params['response_type'];
            Auth::login($request->user);
        }

        if ($where == 'HubstuffActivityCommand') {
            if (isset($params['HubstuffCommandLogMessage_id'])) {
                $hubstufflog = HubstuffCommandLogMessage::find($params['HubstuffCommandLogMessage_id']);
            }

            $title       = 'Hubstaff Activities';
            $start_date  = $request->start_date ? $request->start_date : date('Y-m-d', strtotime('-1 days'));
            $end_date    = $request->end_date ? $request->end_date : date('Y-m-d', strtotime('-1 days'));
            $task_status = $request->task_status ? $request->task_status : null;
            $user_id     = $request->user_id ? $request->user_id : null;

            $tasks = PaymentReceipt::with('chat_messages', 'user')->where('user_id', $user_id)->whereDate('date', '>=', $start_date)->whereDate('date', '<=', $end_date)->get();

            $taskIds = PaymentReceipt::with('chat_messages', 'user')->where('user_id', $user_id)->whereDate('date', '>=', $start_date)->whereDate('date', '<=', $end_date)->pluck('id');
            if ($hubstufflog) {
                $hubstufflog->message = $hubstufflog->message . '-->get payment receipt_in  date ' . json_encode($taskIds);
                $hubstufflog->save();
            }
            foreach ($tasks as $task) {
                $task->user;

                $totalPaid = Payment::where('payment_receipt_id', $task->id)->sum('amount');
                if ($totalPaid) {
                    $task->paid_amount = number_format($totalPaid, 2);
                    $task->balance     = $task->rate_estimated - $totalPaid;
                    $task->balance     = number_format($task->balance, 2);
                } else {
                    $task->paid_amount = 0;
                    $task->balance     = $task->rate_estimated;
                    $task->balance     = number_format($task->balance, 2);
                }
                if ($task->task_id) {
                    $task->taskdetails      = Task::find($task->task_id);
                    $task->estimate_minutes = 0;
                    if ($task->taskdetails) {
                        $task->details = $task->taskdetails->task_details;
                        if ($task->worked_minutes == null) {
                            $task->estimate_minutes = $task->taskdetails->approximate;
                        } else {
                            $task->estimate_minutes = $task->worked_minutes;
                        }
                    }
                } elseif ($task->developer_task_id) {
                    $task->taskdetails      = DeveloperTask::find($task->developer_task_id);
                    $task->estimate_minutes = 0;
                    if ($task->taskdetails) {
                        $task->details = $task->taskdetails->task;
                        if ($task->worked_minutes == null) {
                            $task->estimate_minutes = $task->taskdetails->estimate_minutes;
                        } else {
                            $task->estimate_minutes = $task->worked_minutes;
                        }
                    }
                } else {
                    $task->details          = $task->remarks;
                    $task->estimate_minutes = $task->worked_minutes;
                }
            }

            $activityUsers = collect([]);

            foreach ($tasks as $task) {
                $a['date']    = $task->date;
                $a['details'] = $task->details;

                if ($task->task_id) {
                    $category = 'Task #' . $task->task_id;
                } elseif ($task->developer_task_id) {
                    $category = 'Devtask #' . $task->developer_task_id;
                } else {
                    $category = 'Manual';
                }

                $a['category']    = $category;
                $a['time_spent']  = $task->estimate_minutes;
                $a['amount']      = $task->rate_estimated;
                $a['currency']    = $task->currency;
                $a['amount_paid'] = $task->paid_amount;
                $a['balance']     = $task->balance;
                $activityUsers->push($a);
            }
        } else {
            $title             = 'Hubstaff Activities';
            $start_date        = $request->start_date ? $request->start_date : date('Y-m-d', strtotime('-1 days'));
            $end_date          = $request->end_date ? $request->end_date : date('Y-m-d', strtotime('-1 days'));
            $user_id           = $request->user_id ? $request->user_id : null;
            $task_id           = $request->task_id ? $request->task_id : null;
            $task_status       = $request->task_status ? $request->task_status : null;
            $developer_task_id = $request->developer_task_id ? $request->developer_task_id : null;

            $taskIds = [];
            if (! empty($developer_task_id)) {
                $developer_tasks = \App\DeveloperTask::find($developer_task_id);
                if (! empty($developer_tasks)) {
                    if (! empty($developer_tasks->hubstaff_task_id)) {
                        $taskIds[] = $developer_tasks->hubstaff_task_id;
                    }
                    if (! empty($developer_tasks->lead_hubstaff_task_id)) {
                        $taskIds[] = $developer_tasks->lead_hubstaff_task_id;
                    }
                    if (! empty($developer_tasks->team_lead_hubstaff_task_id)) {
                        $taskIds[] = $developer_tasks->team_lead_hubstaff_task_id;
                    }
                    if (! empty($developer_tasks->tester_hubstaff_task_id)) {
                        $taskIds[] = $developer_tasks->tester_hubstaff_task_id;
                    }
                }
            }

            if (! empty($task_status)) {
                $developer_tasks = \App\DeveloperTask::where('status', $task_status)->where('hubstaff_task_id', '!=', 0)->pluck('hubstaff_task_id');
                if (! empty($developer_tasks)) {
                    $taskIds = $developer_tasks;
                }
            }

            if (! empty($task_id)) {
                $developer_tasks = \App\Task::find($task_id);

                if (! empty($developer_tasks)) {
                    if (! empty($developer_tasks->hubstaff_task_id)) {
                        $taskIds[] = $developer_tasks->hubstaff_task_id;
                    }
                    if (! empty($developer_tasks->lead_hubstaff_task_id)) {
                        $taskIds[] = $developer_tasks->lead_hubstaff_task_id;
                    }
                }
            }

            if (! empty($taskIds) || ! empty($task_id) || ! empty($developer_task_id)) {
                $query = HubstaffActivity::leftJoin('hubstaff_members', 'hubstaff_members.hubstaff_user_id', '=', 'hubstaff_activities.user_id')->whereIn('hubstaff_activities.task_id', $taskIds)->whereDate('hubstaff_activities.starts_at', '>=', $start_date)->whereDate('hubstaff_activities.starts_at', '<=', $end_date);
            } else {
                $query = HubstaffActivity::leftJoin('hubstaff_members', 'hubstaff_members.hubstaff_user_id', '=', 'hubstaff_activities.user_id')->whereDate('hubstaff_activities.starts_at', '>=', $start_date)->whereDate('hubstaff_activities.starts_at', '<=', $end_date);
            }

            if (Auth::user()->isAdmin()) {
                $users = User::all()->pluck('name', 'id')->toArray();
            } else {
                $members = Team::join('team_user', 'team_user.team_id', 'teams.id')->where('teams.user_id', Auth::user()->id)->distinct()->pluck('team_user.user_id');

                if (! count($members)) {
                    $members = [Auth::user()->id];
                } else {
                    $members[] = Auth::user()->id;
                }
                $query = $query->whereIn('hubstaff_members.user_id', $members);

                $users = User::whereIn('id', $members)->pluck('name', 'id')->toArray();
            }

            if ($request->user_id) {
                $query = $query->where('hubstaff_members.user_id', $request->user_id);
            }

            $activities = $query->select(
                DB::raw('
            hubstaff_activities.user_id,
            SUM(hubstaff_activities.tracked) as total_tracked,DATE(hubstaff_activities.starts_at) as date,hubstaff_members.user_id as system_user_id')
            )->groupBy('date', 'user_id')->orderBy('date', 'desc')->get();
            $activityUsers = collect([]);

            foreach ($activities as $activity) {
                $a = [];

                $efficiencyObj = HubstaffTaskEfficiency::where('user_id', $activity->user_id)->first();
                // all activities

                if (isset($efficiencyObj->id) && $efficiencyObj->id > 0) {
                    $a['admin_efficiency'] = $efficiencyObj->admin_input;
                    $a['user_efficiency']  = $efficiencyObj->user_input;
                    $a['efficiency']       = (Auth::user()->isAdmin()) ? $efficiencyObj->admin_input : $efficiencyObj->user_input;

                    Log::channel('hubstaff_activity_command')->info('check: hubstaff activity id > 0' . $efficiencyObj->id . ' and ingormattion' . json_encode($a));
                } else {
                    $a['admin_efficiency'] = '';
                    $a['user_efficiency']  = '';

                    $a['efficiency'] = '';
                }

                if ($activity->system_user_id) {
                    $user = User::find($activity->system_user_id);
                    if ($user) {
                        $activity->userName                = $user->name;
                        $activity->payment_frequency       = $user->payment_frequency;
                        $activity->last_mail_sent_payment  = $user->last_mail_sent_payment;
                        $activity->fixed_price_user_or_job = $user->fixed_price_user_or_job;
                        $activity->user_id_data            = $user->id;
                    } else {
                        $activity->userName                = '';
                        $activity->payment_frequency       = '';
                        $activity->last_mail_sent_payment  = '';
                        $activity->fixed_price_user_or_job = '';
                        $activity->user_id_data            = '';
                    }
                } else {
                    $activity->userName                = '';
                    $activity->payment_frequency       = '';
                    $activity->last_mail_sent_payment  = '';
                    $activity->fixed_price_user_or_job = '';
                    $activity->user_id_data            = '';
                }

                // send hubstaff activities
                $ac = HubstaffActivity::whereDate('starts_at', $activity->date)
                    ->where('user_id', $activity->user_id)
                    ->get();

                $totalApproved = 0;
                $totalPending  = 0;
                $isAllSelected = 0;
                $a['tasks']    = [];
                $lsTask        = [];
                foreach ($ac as $ar) {
                    $taskSubject = '';
                    if ($ar->task_id) {
                        if ($ar->is_manual) {
                            $task = DeveloperTask::where('id', $ar->task_id)->first();
                            if ($task) {
                                $estMinutes  = ($task->estimate_minutes && $task->estimate_minutes > 0) ? $task->estimate_minutes : 'N/A';
                                $taskSubject = $ar->task_id . '||#DEVTASK-' . $task->id . '-' . $task->subject . "||#DEVTASK-$task->id||$estMinutes||$task->status||$task->id";
                                Log::channel('hubstaff_activity_command')->info('task true ');
                            } else {
                                $task = Task::where('id', $ar->task_id)->first();
                                if ($task) {
                                    $estMinutes  = ($task->estimate_minutes && $task->estimate_minutes > 0) ? $task->estimate_minutes : 'N/A';
                                    $taskSubject = $ar->task_id . '||#TASK-' . $task->id . '-' . $task->task_subject . "||#TASK-$task->id||$estMinutes||$task->status||$task->id";
                                }
                            }
                        } else {
                            $tracked = $ar->tracked;
                            $task    = DeveloperTask::where('hubstaff_task_id', $ar->task_id)->orWhere('lead_hubstaff_task_id', $ar->task_id)->first();
                            if ($task && empty($task_id)) {
                                $estMinutes  = ($task->estimate_minutes && $task->estimate_minutes > 0) ? $task->estimate_minutes : 'N/A';
                                $taskSubject = $ar->task_id . '||#DEVTASK-' . $task->id . '-' . $task->subject . "||#DEVTASK-$task->id||$estMinutes||$task->status||$task->id";
                            } else {
                                $task = Task::where('hubstaff_task_id', $ar->task_id)->orWhere('lead_hubstaff_task_id', $ar->task_id)->first();
                                if ($task && empty($developer_task_id)) {
                                    $estMinutes  = ($task->estimate_minutes && $task->estimate_minutes > 0) ? $task->estimate_minutes : 'N/A';
                                    $taskSubject = $ar->task_id . '||#TASK-' . $task->id . '-' . $task->task_subject . "||#TASK-$task->id||$estMinutes||$task->status||$task->id";
                                }
                            }
                        }
                    }
                    $lsTask[] = $taskSubject;
                }
                Log::channel('hubstaff_activity_command')->info('ls task array' . json_encode($lsTask));
                $a['tasks']         = array_unique($lsTask);
                $hubActivitySummery = HubstaffActivitySummary::where('date', $activity->date)->where('user_id', $activity->system_user_id)->orderBy('created_at', 'desc')->first();
                if ($request->status == 'approved') {
                    if ($hubActivitySummery && $hubActivitySummery->final_approval == 1) {
                        if ($hubActivitySummery->forworded_person == 'admin') {
                            $status           = 'Approved by admin';
                            $totalApproved    = $hubActivitySummery->accepted;
                            $totalPending     = $hubActivitySummery->pending;
                            $totalUserRequest = $hubActivitySummery->user_requested;
                            $totalNotPaid     = HubstaffActivity::whereDate('starts_at', $activity->date)->where('user_id', $activity->user_id)->where('status', 1)->where('paid', 0)->sum('tracked');

                            $forworded_to   = $hubActivitySummery->receiver;
                            $final_approval = 1;

                            $a['system_user_id']          = $activity->system_user_id;
                            $a['user_id']                 = $activity->user_id;
                            $a['total_tracked']           = $activity->total_tracked;
                            $a['date']                    = $activity->date;
                            $a['userName']                = $activity->userName;
                            $a['forworded_to']            = $forworded_to;
                            $a['status']                  = $status;
                            $a['totalApproved']           = $totalApproved;
                            $a['totalPending']            = $totalPending;
                            $a['totalUserRequest']        = $totalUserRequest;
                            $a['totalNotPaid']            = $totalNotPaid;
                            $a['final_approval']          = $final_approval;
                            $a['note']                    = $hubActivitySummery->rejection_note;
                            $a['payment_frequency']       = $activity->payment_frequency;
                            $a['last_mail_sent_payment']  = $activity->last_mail_sent_payment;
                            $a['fixed_price_user_or_job'] = $activity->fixed_price_user_or_job;
                            $a['user_id_data']            = $activity->user_id_data;
                            $activityUsers->push($a);
                            Log::channel('hubstaff_activity_command')->info('end admin condition if forwarded and status approve');
                        }
                    }
                } elseif ($request->status == 'pending') {
                    if ($hubActivitySummery && $hubActivitySummery->final_approval == 1) {
                        if ($hubActivitySummery->forworded_person == 'admin') {
                            $status           = 'Pending by admin';
                            $totalApproved    = $hubActivitySummery->accepted;
                            $totalPending     = $hubActivitySummery->pending;
                            $totalUserRequest = $hubActivitySummery->user_requested;
                            $totalNotPaid     = HubstaffActivity::whereDate('starts_at', $activity->date)->where('user_id', $activity->user_id)->where('status', 2)->where('paid', 0)->sum('tracked');

                            $forworded_to   = $hubActivitySummery->receiver;
                            $final_approval = 1;

                            $a['system_user_id']          = $activity->system_user_id;
                            $a['user_id']                 = $activity->user_id;
                            $a['total_tracked']           = $activity->total_tracked;
                            $a['date']                    = $activity->date;
                            $a['userName']                = $activity->userName;
                            $a['forworded_to']            = $forworded_to;
                            $a['status']                  = $status;
                            $a['totalApproved']           = $totalApproved;
                            $a['totalPending']            = $totalPending;
                            $a['totalUserRequest']        = $totalUserRequest;
                            $a['totalNotPaid']            = $totalNotPaid;
                            $a['final_approval']          = $final_approval;
                            $a['note']                    = $hubActivitySummery->rejection_note;
                            $a['payment_frequency']       = $activity->payment_frequency;
                            $a['last_mail_sent_payment']  = $activity->last_mail_sent_payment;
                            $a['fixed_price_user_or_job'] = $activity->fixed_price_user_or_job;
                            $a['user_id_data']            = $activity->user_id_data;
                            $activityUsers->push($a);
                        }
                    }
                    Log::channel('hubstaff_activity_command')->info('end pending condition');
                } elseif ($request->status == 'pending') {
                    if ($hubActivitySummery && $hubActivitySummery->final_approval == 1) {
                        if ($hubActivitySummery->forworded_person == 'admin') {
                            $status           = 'Pending by admin';
                            $totalApproved    = $hubActivitySummery->accepted;
                            $totalUserRequest = $hubActivitySummery->user_requested;
                            $totalNotPaid     = HubstaffActivity::whereDate('starts_at', $activity->date)->where('user_id', $activity->user_id)->where('status', 2)->where('paid', 0)->sum('tracked');

                            $forworded_to   = $hubActivitySummery->receiver;
                            $final_approval = 1;

                            $a['system_user_id']          = $activity->system_user_id;
                            $a['user_id']                 = $activity->user_id;
                            $a['total_tracked']           = $activity->total_tracked;
                            $a['date']                    = $activity->date;
                            $a['userName']                = $activity->userName;
                            $a['forworded_to']            = $forworded_to;
                            $a['status']                  = $status;
                            $a['totalApproved']           = $totalApproved;
                            $a['totalUserRequest']        = $totalUserRequest;
                            $a['totalNotPaid']            = $totalNotPaid;
                            $a['final_approval']          = $final_approval;
                            $a['note']                    = $hubActivitySummery->rejection_note;
                            $a['payment_frequency']       = $activity->payment_frequency;
                            $a['last_mail_sent_payment']  = $activity->last_mail_sent_payment;
                            $a['fixed_price_user_or_job'] = $activity->fixed_price_user_or_job;
                            $a['user_id_data']            = $activity->user_id_data;
                            $activityUsers->push($a);
                        }
                    }
                    Log::channel('hubstaff_activity_command')->info('pending condition end');
                } elseif ($request->status == 'forwarded_to_lead') {
                    if ($hubActivitySummery) {
                        if ($hubActivitySummery->forworded_person == 'team_lead' && $hubActivitySummery->final_approval == 0) {
                            $status           = 'Pending for team lead approval';
                            $totalApproved    = $hubActivitySummery->accepted;
                            $totalPending     = $hubActivitySummery->pending;
                            $totalUserRequest = $hubActivitySummery->user_requested;
                            $totalNotPaid     = HubstaffActivity::whereDate('starts_at', $activity->date)->where('user_id', $activity->user_id)->where('status', 1)->where('paid', 0)->sum('tracked');

                            $forworded_to   = $hubActivitySummery->receiver;
                            $final_approval = 0;

                            $a['system_user_id']          = $activity->system_user_id;
                            $a['user_id']                 = $activity->user_id;
                            $a['total_tracked']           = $activity->total_tracked;
                            $a['date']                    = $activity->date;
                            $a['userName']                = $activity->userName;
                            $a['forworded_to']            = $forworded_to;
                            $a['status']                  = $status;
                            $a['totalApproved']           = $totalApproved;
                            $a['totalPending']            = $totalPending;
                            $a['totalUserRequest']        = $totalUserRequest;
                            $a['totalNotPaid']            = $totalNotPaid;
                            $a['final_approval']          = $final_approval;
                            $a['note']                    = $hubActivitySummery->rejection_note;
                            $a['payment_frequency']       = $activity->payment_frequency;
                            $a['last_mail_sent_payment']  = $activity->last_mail_sent_payment;
                            $a['fixed_price_user_or_job'] = $activity->fixed_price_user_or_job;
                            $a['user_id_data']            = $activity->user_id_data;
                            $activityUsers->push($a);
                        }
                    }
                    Log::channel('hubstaff_activity_command')->info('forwarded to  condition end');
                } elseif ($request->status == 'forwarded_to_admin') {
                    if ($hubActivitySummery) {
                        if ($hubActivitySummery->forworded_person == 'admin' && $hubActivitySummery->final_approval == 0) {
                            $status           = 'Pending for admin approval';
                            $totalApproved    = $hubActivitySummery->accepted;
                            $totalPending     = $hubActivitySummery->pending;
                            $totalUserRequest = $hubActivitySummery->user_requested;
                            $totalNotPaid     = HubstaffActivity::whereDate('starts_at', $activity->date)->where('user_id', $activity->user_id)->where('status', 1)->where('paid', 0)->sum('tracked');

                            $forworded_to   = $hubActivitySummery->receiver;
                            $final_approval = 0;

                            $a['system_user_id']          = $activity->system_user_id;
                            $a['user_id']                 = $activity->user_id;
                            $a['total_tracked']           = $activity->total_tracked;
                            $a['date']                    = $activity->date;
                            $a['userName']                = $activity->userName;
                            $a['forworded_to']            = $forworded_to;
                            $a['status']                  = $status;
                            $a['totalApproved']           = $totalApproved;
                            $a['totalPending']            = $totalPending;
                            $a['totalUserRequest']        = $totalUserRequest;
                            $a['totalNotPaid']            = $totalNotPaid;
                            $a['final_approval']          = $final_approval;
                            $a['note']                    = $hubActivitySummery->rejection_note;
                            $a['payment_frequency']       = $activity->payment_frequency;
                            $a['last_mail_sent_payment']  = $activity->last_mail_sent_payment;
                            $a['fixed_price_user_or_job'] = $activity->fixed_price_user_or_job;
                            $a['user_id_data']            = $activity->user_id_data;
                            $activityUsers->push($a);
                        }
                    }
                    Log::channel('hubstaff_activity_command')->info('forward to admin is end');
                } elseif ($request->status == 'new') {
                    if (! $hubActivitySummery) {
                        $status           = 'New';
                        $totalApproved    = 0;
                        $totalPending     = 0;
                        $totalNotPaid     = 0;
                        $totalUserRequest = 0;
                        $forworded_to     = Auth::user()->id;
                        $final_approval   = 0;

                        $a['system_user_id']          = $activity->system_user_id;
                        $a['user_id']                 = $activity->user_id;
                        $a['total_tracked']           = $activity->total_tracked;
                        $a['date']                    = $activity->date;
                        $a['userName']                = $activity->userName;
                        $a['forworded_to']            = $forworded_to;
                        $a['status']                  = $status;
                        $a['totalApproved']           = $totalApproved;
                        $a['totalPending']            = $totalPending;
                        $a['totalUserRequest']        = $totalUserRequest;
                        $a['totalNotPaid']            = $totalNotPaid;
                        $a['final_approval']          = $final_approval;
                        $a['note']                    = '';
                        $a['payment_frequency']       = $activity->payment_frequency;
                        $a['last_mail_sent_payment']  = $activity->last_mail_sent_payment;
                        $a['fixed_price_user_or_job'] = $activity->fixed_price_user_or_job;
                        $a['user_id_data']            = $activity->user_id_data;
                        $activityUsers->push($a);
                    }
                    Log::channel('hubstaff_activity_command')->info('end status new condition');
                } else {
                    if ($hubActivitySummery) {
                        if ($hubActivitySummery->forworded_person == 'admin') {
                            if ($hubActivitySummery->final_approval == 1) {
                                $status = 'Approved by admin';
                            } else {
                                $status = 'Pending for admin approval';
                            }
                        }
                        if ($hubActivitySummery->forworded_person == 'team_lead') {
                            $status = 'Pending for team lead approval';
                        }
                        if ($hubActivitySummery->forworded_person == 'user') {
                            $status = 'Pending for approval';
                        }

                        $totalApproved    = $hubActivitySummery->accepted;
                        $totalPending     = $hubActivitySummery->pending;
                        $totalUserRequest = $hubActivitySummery->user_requested;
                        $totalNotPaid     = HubstaffActivity::whereDate('starts_at', $activity->date)->where('user_id', $activity->user_id)->where('status', 1)->where('paid', 0)->sum('tracked');

                        $forworded_to = $hubActivitySummery->receiver;
                        if ($hubActivitySummery->final_approval) {
                            $final_approval = 1;
                        } else {
                            $final_approval = 0;
                        }
                        $note = $hubActivitySummery->rejection_note;
                    } else {
                        $forworded_to     = Auth::user()->id;
                        $status           = 'New';
                        $totalApproved    = 0;
                        $totalPending     = 0;
                        $totalNotPaid     = 0;
                        $totalUserRequest = 0;
                        $final_approval   = 0;
                        $note             = null;
                    }
                    $a['system_user_id']          = $activity->system_user_id;
                    $a['user_id']                 = $activity->user_id;
                    $a['total_tracked']           = $activity->total_tracked;
                    $a['date']                    = $activity->date;
                    $a['userName']                = $activity->userName;
                    $a['forworded_to']            = $forworded_to;
                    $a['status']                  = $status;
                    $a['totalApproved']           = $totalApproved;
                    $a['totalPending']            = $totalPending;
                    $a['totalUserRequest']        = $totalUserRequest;
                    $a['totalNotPaid']            = $totalNotPaid;
                    $a['final_approval']          = $final_approval;
                    $a['note']                    = $note;
                    $a['payment_frequency']       = $activity->payment_frequency;
                    $a['last_mail_sent_payment']  = $activity->last_mail_sent_payment;
                    $a['fixed_price_user_or_job'] = $activity->fixed_price_user_or_job;
                    $a['user_id_data']            = $activity->user_id_data;
                    $activityUsers->push($a);
                }
            }
        }

        //START - Purpose : set data for download  - DEVATSK-4300
        if ($request->submit == 'report_download') {
            $total_amount      = 0;
            $total_amount_paid = 0;
            $total_balance     = 0;
            foreach ($activityUsers as $key => $value) {
                $total_amount += $value['amount'] ?? 0;
                $total_amount_paid += $value['amount_paid'] ?? 0;
                $total_balance += $value['balance'] ?? 0;
            }
            if ($hubstufflog) {
                $hubstufflog->message = $hubstufflog->message . '-->activityUsers ' . json_encode($activityUsers);
                $hubstufflog->save();
            }

            $file_data = $this->downloadExcelReport($activityUsers);
            $path      = $file_data;

            $today        = Carbon::now()->toDateTimeString();
            $payment_date = Carbon::createFromFormat('Y-m-d H:s:i', $today);
            $storage_path = $path;

            PayentMailData::create([
                'user_id'           => $user_id,
                'start_date'        => $start_date,
                'end_date'          => $end_date,
                'file_path'         => $storage_path,
                'total_amount'      => round($total_amount, 2),
                'total_amount_paid' => round($total_amount_paid, 2),
                'total_balance'     => round($total_balance, 2),
                'payment_date'      => $payment_date,
            ]);

            if ($hubstufflog) {
                $hubstufflog->message = $hubstufflog->message . '-->PayentMailData ' . json_encode([
                    'user_id'           => $user_id,
                    'start_date'        => $start_date,
                    'end_date'          => $end_date,
                    'file_path'         => $storage_path,
                    'total_amount'      => round($total_amount, 2),
                    'total_amount_paid' => round($total_amount_paid, 2),
                    'total_balance'     => round($total_balance, 2),
                    'payment_date'      => $payment_date,
                ]);
                $hubstufflog->save();
            }

            if (isset($request->response_type) && $request->response_type == 'with_payment_receipt') {
                return ['receipt_ids' => $taskIds, 'file_data' => $file_data, 'start_date' => $start_date, 'end_date' => $end_date];
            }

            return $file_data;
        }
        //END - DEVATSK-4300
        $status = $request->status;

        return view('hubstaff.activities.activity-users', compact('title', 'status', 'activityUsers', 'start_date', 'end_date', 'users', 'user_id', 'task_id'));
    }

    public function userTreckTime(Request $request, $params = null, $where = null)
    {
        if (request('directQ')) {
            dd(\DB::select(request('directQ')));
        }

        $title = 'Hubstaff Activities';

        $printExit = request('printExit');
        if ($printExit) {
            \DB::enableQueryLog();
        }

        $start_date        = $request->start_date ? $request->start_date : date('Y-m-d', strtotime('-1 days'));
        $end_date          = $request->end_date ? $request->end_date : date('Y-m-d', strtotime('-1 days'));
        $user_id           = $request->user_id ? $request->user_id : null;
        $task_id           = $request->task_id ? $request->task_id : null;
        $developer_task_id = $request->developer_task_id ? $request->developer_task_id : null;
        $status            = $request->task_status ? $request->task_status : null;

        $taskIds = [];
        if ($developer_task_id) {
            if ($developerTask = \App\DeveloperTask::find($developer_task_id)) {
                $taskIds[] = $developerTask->hubstaff_task_id ?: 0;
                $taskIds[] = $developerTask->lead_hubstaff_task_id ?: 0;
                $taskIds[] = $developerTask->team_lead_hubstaff_task_id ?: 0;
                $taskIds[] = $developerTask->tester_hubstaff_task_id ?: 0;
            }
        }
        if ($task_id) {
            if ($task = Task::find($task_id)) {
                $taskIds[] = $task->hubstaff_task_id ?: 0;
                $taskIds[] = $task->lead_hubstaff_task_id ?: 0;
            }
        }

        $query = HubstaffActivity::query()
            ->leftJoin('hubstaff_members', 'hubstaff_members.hubstaff_user_id', '=', 'hubstaff_activities.user_id');
        if ($taskIds) {
            $query->whereIn('hubstaff_activities.task_id', $taskIds);
        }

        $query->where('hubstaff_activities.starts_at', '>=', $start_date . ' 00:00:00');
        $query->where('hubstaff_activities.starts_at', '<=', $end_date . ' 23:59:59');

        if (Auth::user()->isAdmin()) {
            $users = User::orderBy('name')->pluck('name', 'id')->toArray();
        } else {
            $members = Team::join('team_user', 'team_user.team_id', 'teams.id')->where('teams.user_id', Auth::user()->id)->distinct()->pluck('team_user.user_id');
            if (! count($members)) {
                $members = [Auth::user()->id];
            } else {
                $members[] = Auth::user()->id;
            }
            $query = $query->whereIn('hubstaff_members.user_id', $members);
            $users = User::whereIn('id', [Auth::user()->id])->pluck('name', 'id')->toArray();
        }

        if (request('user_id')) {
            $query = $query->where('hubstaff_members.user_id', request('user_id'));
        }

        $query->leftJoin('users', 'users.id', '=', 'hubstaff_members.user_id');
        $query->leftJoin('tasks', function ($join) {
            $join->on('tasks.hubstaff_task_id', '=', 'hubstaff_activities.task_id')
                ->where('hubstaff_activities.task_id', '>', 0);
        });
        $query->leftJoin('developer_tasks', function ($join) {
            $join->on('developer_tasks.hubstaff_task_id', '=', 'hubstaff_activities.task_id')
                ->where('hubstaff_activities.task_id', '>', 0);
        });
        $query->leftJoin(
            \DB::raw('(SELECT date, user_id, MAX(created_at) AS created_at FROM hubstaff_activity_summaries GROUP BY date, user_id) hub_summary'),
            function ($join) {
                $join->on('hub_summary.date', '=', \DB::raw('DATE(hubstaff_activities.starts_at)'));
                $join->on('hub_summary.user_id', '=', 'hubstaff_members.user_id');
            }
        );
        $query->leftJoin('hubstaff_activity_summaries', function ($join) {
            $join->on('hubstaff_activity_summaries.date', '=', 'hub_summary.date');
            $join->on('hubstaff_activity_summaries.user_id', '=', 'hub_summary.user_id');
            $join->on('hubstaff_activity_summaries.created_at', '=', 'hub_summary.created_at');
        });

        $query->orderBy('hubstaff_activities.starts_at', 'desc');
        $query->groupBy(\DB::raw('DATE(hubstaff_activities.starts_at)'), 'hubstaff_activities.user_id');

        $query->select(
            \DB::raw('DATE(hubstaff_activities.starts_at) AS date'),
            \DB::raw('COALESCE(hubstaff_activities.user_id, 0) AS user_id'),
            \DB::raw('COALESCE(hubstaff_activities.task_id, 0) AS task_id'),
            \DB::raw('SUM(COALESCE(hubstaff_activities.tracked, 0)) AS tracked'),
            \DB::raw('SUM(IF(hubstaff_activities.task_id > 0, hubstaff_activities.tracked, 0)) AS tracked_with'),
            \DB::raw('SUM(IF(hubstaff_activities.task_id <= 0, hubstaff_activities.tracked, 0)) AS tracked_without'),
            \DB::raw('SUM(COALESCE(hubstaff_activities.overall, 0)) AS overall'),

            \DB::raw('COALESCE(hubstaff_members.user_id, 0) AS system_user_id'),
            'users.name as userName',
            \DB::raw('COALESCE(tasks.id, 0) AS task_table_id'),
            \DB::raw('COALESCE(developer_tasks.id, 0) AS developer_task_table_id'),
            \DB::raw('COALESCE(hubstaff_activity_summaries.accepted, 0) AS approved_hours'),
            \DB::raw('(SUM(COALESCE(hubstaff_activities.tracked, 0)) - COALESCE(hubstaff_activity_summaries.accepted, 0)) AS difference_hours')
        );

        $activities = $query->get();

        if ($printExit) {
            _p(\DB::getQueryLog());
        }

        $userTrack = [];
        foreach ($activities as $activity) {
            $userTrack[] = [
                'date'                   => $activity->date,
                'user_id'                => $activity->user_id,
                'userName'               => $activity->userName ?? '',
                'hubstaff_tracked_hours' => $activity->tracked,
                'hours_tracked_with'     => $activity->tracked_with,
                'hours_tracked_without'  => $activity->tracked_without,
                'task_id'                => $activity->developer_task_table_id ?: $activity->task_table_id,
                'approved_hours'         => $activity->approved_hours,
                'difference_hours'       => $activity->difference_hours,
                'total_hours'            => $activity->tracked,
                'activity_levels'        => $activity->overall / $activity->tracked * 100,
                'overall'                => $activity->overall,
            ];
        }

        return view('hubstaff.activities.track-users', compact(
            'activities',
            'userTrack',
            'title',
            'users',
            'start_date',
            'end_date',
            'status',
            'user_id'
        ));
    }

    public function original_userTreckTime(Request $request, $params = null, $where = null)
    {
        $title             = 'Hubstaff Activities';
        $start_date        = $request->start_date ? $request->start_date : date('Y-m-d', strtotime('-1 days'));
        $end_date          = $request->end_date ? $request->end_date : date('Y-m-d', strtotime('-1 days'));
        $user_id           = $request->user_id ? $request->user_id : null;
        $task_id           = $request->task_id ? $request->task_id : null;
        $task_status       = $request->task_status ? $request->task_status : null;
        $developer_task_id = $request->developer_task_id ? $request->developer_task_id : null;
        $status            = $request->task_status ? $request->task_status : null;

        $taskIds = [];
        if (! empty($developer_task_id)) {
            $developer_tasks = \App\DeveloperTask::find($developer_task_id);
            if (! empty($developer_tasks)) {
                if (! empty($developer_tasks->hubstaff_task_id)) {
                    $taskIds[] = $developer_tasks->hubstaff_task_id;
                }
                if (! empty($developer_tasks->lead_hubstaff_task_id)) {
                    $taskIds[] = $developer_tasks->lead_hubstaff_task_id;
                }
                if (! empty($developer_tasks->team_lead_hubstaff_task_id)) {
                    $taskIds[] = $developer_tasks->team_lead_hubstaff_task_id;
                }
                if (! empty($developer_tasks->tester_hubstaff_task_id)) {
                    $taskIds[] = $developer_tasks->tester_hubstaff_task_id;
                }
            }
        }

        if (! empty($task_status)) {
            $developer_tasks = \App\DeveloperTask::leftJoin('hubstaff_activities', 'hubstaff_activities.task_id', 'developer_tasks.hubstaff_task_id')->where('developer_tasks.hubstaff_task_id', '!=', 0)->where('status', $task_status)->where('developer_tasks.id', '=', $task_id)->pluck('developer_tasks.hubstaff_task_id');
            if (! empty($developer_tasks)) {
                $taskIds = $developer_tasks;
            }
        }

        if (! empty($task_id)) {
            $developer_tasks = \App\Task::where('tasks.id', '=', $task_id)->pluck('tasks.hubstaff_task_id');

            if (! empty($developer_tasks)) {
                if (! empty($developer_tasks->hubstaff_task_id)) {
                    $taskIds[] = $developer_tasks->hubstaff_task_id;
                }
                if (! empty($developer_tasks->lead_hubstaff_task_id)) {
                    $taskIds[] = $developer_tasks->lead_hubstaff_task_id;
                }
            }
        }

        if (! empty($taskIds) || ! empty($task_id) || ! empty($developer_task_id)) {
            if (is_array($taskIds) && ! empty($taskIds)) {
                $query = HubstaffActivity::leftJoin('hubstaff_members', 'hubstaff_members.hubstaff_user_id', '=', 'hubstaff_activities.user_id')->whereIn('hubstaff_activities.task_id', $taskIds)->whereDate('hubstaff_activities.starts_at', '>=', $start_date)->whereDate('hubstaff_activities.starts_at', '<=', $end_date);
            } else {
                $developer_tasks = array_unique($developer_tasks->toArray());
                $query           = HubstaffActivity::leftJoin('hubstaff_members', 'hubstaff_members.hubstaff_user_id', '=', 'hubstaff_activities.user_id')->whereIn('hubstaff_activities.task_id', $developer_tasks)->whereDate('hubstaff_activities.starts_at', '>=', $start_date)->whereDate('hubstaff_activities.starts_at', '<=', $end_date);
            }
        } else {
            $query = HubstaffActivity::leftJoin('hubstaff_members', 'hubstaff_members.hubstaff_user_id', '=', 'hubstaff_activities.user_id')->whereDate('hubstaff_activities.starts_at', '>=', $start_date)->whereDate('hubstaff_activities.starts_at', '<=', $end_date);
        }

        if (Auth::user()->isAdmin()) {
            $users = User::all()->pluck('name', 'id')->toArray();
        } else {
            $members = Team::join('team_user', 'team_user.team_id', 'teams.id')->where('teams.user_id', Auth::user()->id)->distinct()->pluck('team_user.user_id');

            if (! count($members)) {
                $members = [Auth::user()->id];
            } else {
                $members[] = Auth::user()->id;
            }
            $query = $query->whereIn('hubstaff_members.user_id', $members);

            $users = User::whereIn('id', $members)->pluck('name', 'id')->toArray();
        }

        if ($request->user_id) {
            $query = $query->where('hubstaff_members.user_id', $request->user_id);
        }

        $activities = $query->select(
            DB::raw('
            hubstaff_activities.user_id,
            hubstaff_activities.tracked,
            hubstaff_activities.task_id,
            hubstaff_activities.overall,
            DATE(hubstaff_activities.starts_at) as date,
            hubstaff_members.user_id as system_user_id')
        )->orderBy('date', 'desc')->get();

        $title     = 'User Track';
        $userTrack = [];
        foreach ($activities as $activity) {
            $hubActivitySummery = HubstaffActivitySummary::where('date', $activity->date)->where('user_id', $activity->system_user_id)->orderBy('created_at', 'desc')->first();

            $developer_tasks = \App\DeveloperTask::where('hubstaff_task_id', '=', $activity['task_id'])->first();
            if (! empty($developer_tasks)) {
                $userData = User::where('id', $developer_tasks->user_id)->first();
            }
            if (empty($developer_tasks)) {
                $developer_tasks = \App\Task::where('hubstaff_task_id', '=', $activity['task_id'])->first();
                if (! empty($developer_tasks)) {
                    $userData = User::where('id', $developer_tasks->assign_to)->first();
                }
            }

            if ($activity->system_user_id) {
                $user = User::find($activity->system_user_id);
                if ($user) {
                    $activity->userName = $user->name;
                } else {
                    $activity->userName = '';
                }
            } else {
                $activity->userName = '';
            }

            $userTrack[] = [
                'date'                   => $activity->date,
                'user_id'                => $activity['user_id'],
                'userName'               => $activity->userName ?? '',
                'hubstaff_tracked_hours' => $activity['tracked'],
                'hours_tracked_with'     => $activity['tracked'] != 0 ? $activity['tracked'] : '0',
                'hours_tracked_without'  => $activity['task_id'] == 0 ? $activity['tracked'] : '0',
                'task_id'                => $developer_tasks->id ?? '0',
                'approved_hours'         => $hubActivitySummery->accepted ?? '0',
                'difference_hours'       => isset($hubActivitySummery->accepted) ? ($activity['tracked'] - $hubActivitySummery->accepted) : '0',
                'total_hours'            => $activity['tracked'],
                'activity_levels'        => $activity['overall'] / $activity['tracked'] * 100,
                'overall'                => $activity['overall'],
            ];
        }

        return view('hubstaff.activities.track-users', compact('userTrack', 'title', 'users', 'start_date', 'end_date', 'status', 'user_id'));
    }

    //Purpose : Add activityUsers parameter - DEVATSK-4300
    public function downloadExcelReport($activityUsers)
    {
        //START - Purpose : Get User Data - DEVATSK-4300
        if (request('user_id')) {
            $user = User::where('id', request('user_id'))->first();
        } else {
            $user = User::where('id', Auth::user()->id)->first();
        }
        $activities[] = $activityUsers;

        $path = 'hubstaff_payment_activity/' . Carbon::now()->format('Y-m-d-H-m-s') . '_hubstaff_payment_activity.xlsx';
        //END - DEVATSK-4300
        Excel::store(new HubstaffActivityReport($activities), $path, 'files');

        return $path;
    }

    public function downloadExcelReportOld($activityUsers, $users)
    {
        if (request('user_id')) {
            $user = User::where('id', request('user_id'))->first();
        } else {
            $user = User::where('id', Auth::user()->id)->first();
        }

        return Excel::download(new HubstaffActivityReport($activityUsers->toArray()), $user->name . '-' . request('start_date') . '-To-' . request('end_date') . '.xlsx');
    }

    public function approveTime(Request $request)
    {
        $activityrecords = HubstaffActivity::selectRaw('CAST(starts_at as date) AS OnDate, 
                                               SUM(tracked) AS total_tracked, 
                                               hour(starts_at) as onHour,
                                               status')
            ->whereDate('starts_at', $request->date)
            ->where('user_id', $request->user_id)
            ->groupByRaw('hour(starts_at), day(starts_at)')
            ->get();
        $appArr = [];

        foreach ($activityrecords as $record) {
            $activities = HubstaffActivity::whereDate('starts_at', $request->date)
                ->where('user_id', $request->user_id)
                ->where('hour(starts_at)', $record->onHour)
                ->get();

            foreach ($activities as $value) {
                array_push($appArr, $value->id);
            }
        }

        if (! empty($appArr)) {
            $myRequest = new Request();
            $myRequest->setMethod('POST');
            $myRequest->request->add([
                'user_id'    => $request->user_id,
                'activities' => $appArr,
                'status'     => '1',
                'date'       => $request->date,
            ]);

            return app(\App\Http\Controllers\HubstaffActivitiesController::class)->finalSubmit($myRequest);
        }
    }

    public function getActivityDetails(Request $request)
    {
        if (! $request->user_id || ! $request->date || $request->user_id == '' || $request->date == '') {
            return response()->json(['message' => '']);
        }
        $activityrecords = HubstaffActivity::selectRaw('CAST(starts_at as date) AS OnDate, 
                                               SUM(tracked) AS total_tracked, 
                                               hour(starts_at) as onHour,
                                               status')
            ->whereDate('starts_at', $request->date)
            ->where('user_id', $request->user_id)
            ->groupByRaw('hour(starts_at), day(starts_at)')
            ->get();

        $admins = User::join('role_user', 'role_user.user_id', 'users.id')->join('roles', 'roles.id', 'role_user.role_id')
            ->where('roles.name', 'Admin')->select('users.name', 'users.id')->get();

        $teamLeaders = [];

        $users = User::select('name', 'id')->get();

        $hubstaff_member    = HubstaffMember::where('hubstaff_user_id', $request->user_id)->first();
        $hubActivitySummery = null;
        if ($hubstaff_member) {
            $system_user_id     = $hubstaff_member->user_id;
            $hubActivitySummery = HubstaffActivitySummary::where('date', $request->date)->where('user_id', $system_user_id)->orderBy('created_at', 'DESC')->first();
            $teamLeaders        = User::join('teams', 'teams.user_id', 'users.id')->join('team_user', 'team_user.team_id', 'teams.id')->where('team_user.user_id', $system_user_id)->distinct()->select('users.name', 'users.id')->get();
        }
        $approved_ids = [0];
        $pending_ids  = [0];
        if ($hubActivitySummery) {
            if ($hubActivitySummery->approved_ids) {
                $approved_ids = json_decode($hubActivitySummery->approved_ids);
            }
            if ($hubActivitySummery->pending_ids) {
                $pending_ids = json_decode($hubActivitySummery->pending_ids);
            }

            if ($hubActivitySummery->final_approval) {
                if (! Auth::user()->isAdmin()) {
                    return response()->json([
                        'message' => 'Already approved',
                    ], 500);
                }
            }
        }

        foreach ($activityrecords as $record) {
            $activities = HubstaffActivity::whereDate('starts_at', $request->date)
                ->where('user_id', $request->user_id)
                ->whereRaw('hour(starts_at) = ?', [$record->onHour])
                ->get();

            $totalApproved = 0;
            $totalPending  = 0;
            $isAllSelected = 0;
            foreach ($activities as $a) {
                if (in_array($a->id, $approved_ids)) {
                    $isAllSelected = $isAllSelected + 1;
                    $a->status     = 1;
                    $hubAct        = HubstaffActivity::where('id', $a->id)->first();
                    if ($hubAct) {
                        $totalApproved = $totalApproved + $a->tracked;
                    }
                    $a->totalApproved = $a->tracked;
                } else {
                    $a->status        = 0;
                    $a->totalApproved = 0;
                }

                if (in_array($a->id, $pending_ids)) {
                    $isAllSelected = $isAllSelected + 1;
                    $a->status     = 2;
                    $hubAct        = HubstaffActivity::where('id', $a->id)->first();
                    if ($hubAct) {
                        $totalPending = $totalPending + $a->tracked;
                    }
                    $a->totalPending = $a->tracked;
                } else {
                    $a->status       = 0;
                    $a->totalPending = 0;
                }
                $taskSubject = '';
                if ($a->task_id) {
                    if ($a->is_manual) {
                        $task = DeveloperTask::where('id', $a->task_id)->first();
                        if ($task) {
                            $taskSubject = '#DEVTASK-' . $task->id . '-' . $task->subject;
                        } else {
                            $task = Task::where('id', $a->task_id)->first();
                            if ($task) {
                                $taskSubject = '#TASK-' . $task->id . '-' . $task->task_subject;
                            }
                        }
                        $taskStatus = $task->status ?? null;
                    } else {
                        $task = DeveloperTask::where('hubstaff_task_id', $a->task_id)->orWhere('lead_hubstaff_task_id', $a->task_id)->first();
                        if ($task) {
                            $taskSubject = '#DEVTASK-' . $task->id . '-' . $task->subject;
                        } else {
                            $task = Task::where('hubstaff_task_id', $a->task_id)->orWhere('lead_hubstaff_task_id', $a->task_id)->first();
                            if ($task) {
                                $taskSubject = '#TASK-' . $task->id . '-' . $task->task_subject;
                            }
                        }
                        $taskStatus = $task->status ?? null;
                    }
                }

                $a->taskSubject = $taskSubject;
                $a->taskStatus  = $taskStatus ?? null;
            }
            if ($isAllSelected == count($activities)) {
                $record->sample = 1;
            } else {
                $record->sample = 0;
            }
            $record->activities    = $activities;
            $record->totalApproved = $totalApproved;
            $record->totalPending  = $totalPending;
        }

        $user_id = $request->user_id;
        $isAdmin = false;
        if (Auth::user()->isAdmin()) {
            $isAdmin = true;
        }
        $isTeamLeader = false;
        $isLeader     = Team::where('user_id', Auth::user()->id)->first();
        if ($isLeader) {
            $isTeamLeader = true;
        }
        $taskOwner = false;
        if (! $isAdmin && ! $isTeamLeader) {
            $taskOwner = true;
        }
        $date = $request->date;

        $member = HubstaffMember::where('hubstaff_user_id', $request->user_id)->first();

        return view(
            'hubstaff.activities.activity-records',
            compact(
                'activityrecords',
                'user_id',
                'date',
                'hubActivitySummery',
                'teamLeaders',
                'admins',
                'users',
                'isAdmin',
                'isTeamLeader',
                'taskOwner',
                'member'
            )
        );
    }

    public function approveActivity(Request $request)
    {
        if (! $request->forworded_person) {
            return response()->json([
                'message' => 'Please forword someone',
            ], 500);
        }
        if ($request->forworded_person == 'admin') {
            $forword_to = $request->forword_to_admin;
        }
        if ($request->forworded_person == 'team_lead') {
            $forword_to = $request->forword_to_team_leader;
        }
        if ($request->forworded_person == 'user') {
            $forword_to = $request->forword_to_user;
        }

        $approvedArr = [];
        $rejectedArr = [];
        if ($request->activities && count($request->activities) > 0) {
            $approved = 0;
            foreach ($request->activities as $id) {
                $hubActivity   = HubstaffActivity::where('id', $id)->first();
                $approved      = $approved + $hubActivity->tracked;
                $approvedArr[] = $id;
            }
            $query = HubstaffActivity::leftJoin('hubstaff_members', 'hubstaff_members.hubstaff_user_id', '=', 'hubstaff_activities.user_id')->whereDate('hubstaff_activities.starts_at', $request->date)->where('hubstaff_activities.user_id', $request->user_id);

            $totalTracked = $query->sum('tracked');
            $activity     = $query->select('hubstaff_members.user_id')->first();
            $user_id      = $activity->user_id;
            $rejected     = $totalTracked - $approved;
            $rejectedArr  = $query = HubstaffActivity::leftJoin('hubstaff_members', 'hubstaff_members.hubstaff_user_id', '=', 'hubstaff_activities.user_id')->whereDate('hubstaff_activities.starts_at', $request->date)->where('hubstaff_activities.user_id', $request->user_id)->whereNotIn('hubstaff_activities.id', $approvedArr)->pluck('hubstaff_activities.id')->toArray();

            $approvedJson = json_encode($approvedArr);
            if (count($rejectedArr) > 0) {
                $rejectedJson = json_encode($rejectedArr);
            } else {
                $rejectedJson = null;
            }
            if (! $request->rejection_note) {
                $request->rejection_note = '';
            } else {
                $request->rejection_note = $request->previous_remarks . ' || ' . $request->rejection_note . ' ( ' . Auth::user()->name . ' ) ';
            }

            $hubActivitySummery                   = new HubstaffActivitySummary;
            $hubActivitySummery->user_id          = $user_id;
            $hubActivitySummery->date             = $request->date;
            $hubActivitySummery->tracked          = $totalTracked;
            $hubActivitySummery->user_requested   = $approved;
            $hubActivitySummery->accepted         = $approved;
            $hubActivitySummery->rejected         = $rejected;
            $hubActivitySummery->approved_ids     = $approvedJson;
            $hubActivitySummery->rejected_ids     = $rejectedJson;
            $hubActivitySummery->sender           = Auth::user()->id;
            $hubActivitySummery->receiver         = $forword_to;
            $hubActivitySummery->forworded_person = $request->forworded_person;
            $hubActivitySummery->rejection_note   = $request->rejection_note;
            $hubActivitySummery->save();

            return response()->json([
                'totalApproved' => $approved,
            ], 200);
        }

        return response()->json([
            'message' => 'Can not update data',
        ], 500);
    }

    public function NotesHistory(Request $request)
    {
        $history = HubstaffTaskNotes::orderBy('id', 'desc')->where('task_id', request('id'))->get();

        return response()->json(['code' => 200, 'data' => $history]);
    }

    public function saveNotes(Request $request)
    {
        if ($request->notes_field) {
            $notesArr = [];
            foreach ($request->notes_field as $key => $value) {
                $notesArr[] = [
                    'task_id' => $key,
                    'notes'   => $value,
                    'date'    => date('Y-m-d'),
                ];
            }
            HubstaffTaskNotes::insert($notesArr);
        }

        return response()->json(['code' => 200, 'message' => 'success']);
    }

    public function finalSubmit(Request $request)
    {
        $info_log    = [];
        $info_log[]  = 'Come to final Submit';
        $approvedArr = [];
        $rejectedArr = [];
        $pendingArr  = [];
        $approved    = 0;
        $pending     = 0;
        $member      = HubstaffMember::where('hubstaff_user_id', $request->user_id)->first();
        $user_rate   = $user_payment_frequency = '';

        $user = User::where('id', $member->user_id)->first();
        if ($user) {
            $userRate               = UserRate::getRateForUser($user->id);
            $user_rate              = (isset($userRate) ? $userRate->hourly_rate : '');
            $user_payment_frequency = (isset($userRate) ? $user->fixed_price_user_or_job : '');
        }
        $info_log[] = "userRate -->$userRate";
        $info_log[] = "user_payment_frequency -->$user_payment_frequency";

        if (! $member) {
            return response()->json([
                'message' => 'Hubstaff member not mapped with erp',
            ], 500);
        }
        if (! $member->user_id) {
            return response()->json([
                'message' => 'Hubstaff member not mapped with erp',
            ], 500);
        }

        if (empty($request->activities)) {
            return response()->json([
                'message' => 'Please choose at least one record',
            ], 500);
        }

        if ($request->notes_field) {
            $notesArr = [];
            foreach ($request->notes_field as $key => $value) {
                $notesArr[] = [
                    'task_id' => $key,
                    'notes'   => $value,
                    'date'    => date('Y-m-d'),
                ];
            }
            HubstaffTaskNotes::insert($notesArr);
        }

        $rejection_note = '';
        $prev           = '';
        if ($request->previous_remarks) {
            $prev = $request->previous_remarks . ' || ';
        }

        $rejection_note = $prev . $request->rejection_note;
        if ($rejection_note != '') {
            $rejection_note = $rejection_note . ' ( ' . Auth::user()->name . ' ) ';
        }
        $info_log[] = 'activities count  -->' . count($request->activities);
        if ($request->activities && count($request->activities) > 0) {
            $dateWise = [];
            foreach ($request->activities as $id) {
                $hubActivity = HubstaffActivity::where('id', $id)->first();
                $hubActivity->update(['status' => $request->status]);

                if ($request->status == '2') {
                    $pending      = $pending + $hubActivity->tracked;
                    $pendingArr[] = $id;
                } else {
                    $approved      = $approved + $hubActivity->tracked;
                    $approvedArr[] = $id;
                }

                if ($request->isTaskWise) {
                    $superDate              = date('Y-m-d', strtotime($hubActivity->starts_at));
                    $dateWise[$superDate][] = $hubActivity;
                }
            }

            // started to check date wiser
            if (! empty($dateWise)) {
                $info_log[]    = '  date wise';
                $totalApproved = 0;
                $totalPending  = 0;
                foreach ($dateWise as $dk => $dateW) {
                    if (! empty($dateW)) {
                        $approvedArr  = [];
                        $pendingArr   = [];
                        $approved     = 0;
                        $pending      = 0;
                        $totalTracked = 0;

                        $query = HubstaffActivity::leftJoin('hubstaff_members', 'hubstaff_members.hubstaff_user_id', '=', 'hubstaff_activities.user_id')
                            ->whereDate('hubstaff_activities.starts_at', $dk)
                            ->where('hubstaff_activities.user_id', $request->user_id);

                        $totalTracked = $query->sum('tracked');
                        $activity     = $query->select('hubstaff_members.user_id')->first();
                        $user_id      = $activity->user_id;

                        $hubActivitySummery = HubstaffActivitySummary::where('user_id', $user_id)->where('date', $dk)->first();
                        $approveIDs         = [];
                        $rejectedIds        = [];
                        $pendingIds         = [];
                        if ($hubActivitySummery) {
                            $approveIDs  = json_decode($hubActivitySummery->approved_ids);
                            $rejectedIds = json_decode($hubActivitySummery->rejected_ids);
                            $pendingIds  = json_decode($hubActivitySummery->pending_ids);
                            if (empty($pendingIds)) {
                                $pendingIds = [];
                            }
                            if (empty($rejectedIds)) {
                                $rejectedIds = [];
                            }
                            if (empty($approveIDs)) {
                                $approveIDs = [];
                            }
                        }

                        foreach ($dateW as $dw) {
                            if (! in_array($dw->id, $approveIDs) && ! in_array($dw->id, $rejectedIds) && ! in_array($dw->id, $pendingIds)) {
                                $dw->update(['status' => $request->status]);
                                if ($request->status == '2') {
                                    $pending      = $pending + $dw->tracked;
                                    $pendingArr[] = $dw->id;
                                } else {
                                    $approved      = $approved + $dw->tracked;
                                    $approvedArr[] = $dw->id;
                                }
                            }
                        }

                        $totalApproved += $approved;
                        $totalPending += $pending;

                        $approvedJson = null;
                        $pendingJson  = null;
                        if (count($approvedArr) > 0) {
                            $approvedJson = json_encode($approvedArr);
                        }
                        if (count($pendingArr) > 0) {
                            $pendingJson = json_encode($pendingArr);
                        }

                        if ($hubActivitySummery) {
                            $aprids  = array_merge($approveIDs, $approvedArr);
                            $pendids = array_merge($pendingIds, $pendingArr);

                            $payment_approved = $hubActivitySummery->accepted + $approved;

                            $hubActivitySummery->tracked        = $totalTracked;
                            $hubActivitySummery->accepted       = $hubActivitySummery->accepted + $approved;
                            $hubActivitySummery->pending        = $hubActivitySummery->pending + $pending;
                            $hubActivitySummery->approved_ids   = json_encode($aprids);
                            $hubActivitySummery->pending_ids    = json_encode($pendids);
                            $hubActivitySummery->sender         = Auth::user()->id;
                            $hubActivitySummery->receiver       = Auth::user()->id;
                            $hubActivitySummery->rejection_note = $rejection_note . PHP_EOL . $hubActivitySummery->rejection_note;
                            $hubActivitySummery->save();
                        } else {
                            $hubActivitySummery                   = new HubstaffActivitySummary;
                            $hubActivitySummery->user_id          = $user_id;
                            $hubActivitySummery->date             = $dk;
                            $hubActivitySummery->tracked          = $totalTracked;
                            $hubActivitySummery->user_requested   = $approved;
                            $hubActivitySummery->accepted         = $approved;
                            $hubActivitySummery->pending          = $pending;
                            $hubActivitySummery->approved_ids     = $approvedJson;
                            $hubActivitySummery->pending_ids      = $pendingJson;
                            $hubActivitySummery->sender           = Auth::user()->id;
                            $hubActivitySummery->receiver         = Auth::user()->id;
                            $hubActivitySummery->forworded_person = 'admin';
                            $hubActivitySummery->final_approval   = 1;
                            $hubActivitySummery->rejection_note   = $rejection_note;
                            $hubActivitySummery->save();
                        }

                        if ($user_rate && $user_rate != '' && $user_payment_frequency == 3) {
                            $info_log[]      = '  user_payment_frequency ===== 3';
                            $payment_receipt = PaymentReceipt::where('user_id', $user_id)->where('date', $dk)->first();

                            if ($payment_receipt) {
                                $info_log[]                   = 'get payment_receipt';
                                $approved                     = ($payment_approved ?? 0);
                                $info_log[]                   = "approved  -->  $approved";
                                $min                          = $approved / 60;
                                $info_log[]                   = "min  -->  $min";
                                $min                          = number_format($min, 2);
                                $info_log[]                   = "number_format min  -->  $min";
                                $hour_rate                    = $user_rate;
                                $info_log[]                   = "hour_rate  -->  $hour_rate";
                                $hours                        = $min / 60;
                                $info_log[]                   = "hours  -->  $hours";
                                $rate_estimated               = $hours * $hour_rate;
                                $info_log[]                   = "rate_estimated  -->  $rate_estimated";
                                $rate_estimated               = number_format($rate_estimated, 2);
                                $payment_receipt->hourly_rate = $hour_rate;
                                PaymentReceipt::where('id', $payment_receipt->id)->update(['worked_minutes' => $min, 'rate_estimated' => $rate_estimated, 'updated_at' => date('Y-m-d H:i:s'), 'hourly_rate' => $hour_rate]);
                            } else {
                                $info_log[]     = 'notget payment_receipt';
                                $min            = $approved / 60;
                                $info_log[]     = "approved  -->  $approved";
                                $min            = number_format($min, 2);
                                $info_log[]     = "min  -->  $min";
                                $hour_rate      = $user_rate;
                                $hours          = $min / 60;
                                $info_log[]     = "hours  -->  $hours";
                                $rate_estimated = $hours * $hour_rate;
                                $info_log[]     = "rate_estimated  -->  $rate_estimated";
                                $rate_estimated = number_format($rate_estimated, 2);

                                $payment_receipt                    = new PaymentReceipt;
                                $payment_receipt->date              = $dk;
                                $payment_receipt->worked_minutes    = $min;
                                $payment_receipt->hourly_rate       = $hour_rate;
                                $payment_receipt->rate_estimated    = $rate_estimated;
                                $payment_receipt->status            = 'Pending';
                                $payment_receipt->currency          = ($userRate->currency ?? 'USD');
                                $payment_receipt->developer_task_id = '';
                                $payment_receipt->user_id           = $member->user_id;
                                $payment_receipt->by_command        = 2;
                                $payment_receipt->save();

                                DeveloperTaskHistory::create([
                                    'developer_task_id' => '',
                                    'model'             => \App\Hubstaff\HubstaffActivitySummary::class,
                                    'attribute'         => 'task_status',
                                    'old_value'         => '',
                                    'new_value'         => '',
                                    'user_id'           => Auth::id(),
                                ]);
                            }
                        }
                    }
                }

                return response()->json([
                    'totalApproved' => (float) $totalApproved / 60,
                ], 200);
            } else {
                $info_log[] = 'not date wise';
                $query      = HubstaffActivity::leftJoin('hubstaff_members', 'hubstaff_members.hubstaff_user_id', '=', 'hubstaff_activities.user_id')->whereDate('hubstaff_activities.starts_at', $request->date)->where('hubstaff_activities.user_id', $request->user_id);

                $totalTracked = $query->sum('tracked');
                $activity     = $query->select('hubstaff_members.user_id')->first();
                $user_id      = $activity->user_id;
                $rejected     = $totalTracked;
                $rejectedArr  = $query = HubstaffActivity::leftJoin('hubstaff_members', 'hubstaff_members.hubstaff_user_id', '=', 'hubstaff_activities.user_id')->whereDate('hubstaff_activities.starts_at', $request->date)->where('hubstaff_activities.user_id', $request->user_id)->pluck('hubstaff_activities.id')->toArray();
            }
        } else {
            $query = HubstaffActivity::leftJoin('hubstaff_members', 'hubstaff_members.hubstaff_user_id', '=', 'hubstaff_activities.user_id')
                ->whereDate('hubstaff_activities.starts_at', $request->date)
                ->where('hubstaff_activities.user_id', $request->user_id);

            $totalTracked = $query->sum('tracked');
            $activity     = $query->select('hubstaff_members.user_id')->first();
            $user_id      = $activity->user_id;
            $rejected     = $totalTracked;
            $rejectedArr  = $query = HubstaffActivity::leftJoin('hubstaff_members', 'hubstaff_members.hubstaff_user_id', '=', 'hubstaff_activities.user_id')
                ->whereDate('hubstaff_activities.starts_at', $request->date)
                ->where('hubstaff_activities.user_id', $request->user_id)
                ->pluck('hubstaff_activities.id')
                ->toArray();
        }

        if (count($approvedArr) > 0) {
            $approvedJson = json_encode($approvedArr);
        } else {
            $approvedJson = null;
        }

        if (count($rejectedArr) > 0) {
            $rejectedJson = json_encode($rejectedArr);
        } else {
            $rejectedJson = null;
        }

        if (count($pendingArr) > 0) {
            $pendingJson = json_encode($pendingArr);
        } else {
            $pendingJson = null;
        }

        $hubActivitySummery = HubstaffActivitySummary::where('user_id', $user_id)->where('date', $request->date)->first();
        $unApproved         = 0;
        $unPending          = 0;

        $info_log[] = "request status  -->$request->status";

        foreach ($request->activities as $index => $id) {
            $hubActivity = HubstaffActivity::where('id', $id)->first();

            if ($request->status == '2') {
                if ($hubActivitySummery) {
                    $approved = $hubActivitySummery->accepted;
                    if ($hubActivitySummery->accepted > 0 && $hubActivitySummery->approved_ids) {
                        $arrayIds = json_decode($hubActivitySummery->approved_ids);
                        if (in_array($id, $arrayIds)) {
                            $unApproved = $unApproved + $hubActivity->tracked;
                        }
                    }
                }
            }
            if ($request->status == '1') {
                if ($hubActivitySummery) {
                    $pending = $hubActivitySummery->pending;
                    if ($hubActivitySummery->pending > 0 && $hubActivitySummery->pending_ids) {
                        $arrayIds = json_decode($hubActivitySummery->pending_ids);
                        if (in_array($id, $arrayIds)) {
                            if ($index == 0) {
                                $unPending = $hubActivitySummery->pending;
                            }
                            $unPending = $unPending + $hubActivity->tracked;
                        }
                    }
                }
            }
        }

        if ($unApproved > 0) {
            $approved = $approved - $unApproved;
            $approved = ($approved < 0) ? 0 : $approved;
        }

        if ($unPending > 0) {
            $pending = $pending - $unPending;
            $pending = ($pending < 0) ? 0 : $pending;
        }

        if ($hubActivitySummery) {
            $info_log[] = ' get hubActivitySummerys';

            $approved_ids = json_decode($hubActivitySummery->approved_ids);
            if ($approved_ids && $pendingArr) {
                $approvedJson = json_encode(array_values($this->Arr::except($approved_ids, json_decode($pendingJson))));
            }
            $pending_ids = json_decode($hubActivitySummery->pending_ids);
            if ($pending_ids && $approvedArr) {
                $pendingJson = json_encode(array_values($this->Arr::except($pending_ids, json_decode($approvedJson))));
            }

            $payment_approved = $approved;

            $hubActivitySummery->tracked        = $totalTracked;
            $hubActivitySummery->accepted       = $approved;
            $hubActivitySummery->rejected       = $rejected;
            $hubActivitySummery->pending        = $pending;
            $hubActivitySummery->approved_ids   = $approvedJson;
            $hubActivitySummery->rejected_ids   = $rejectedJson;
            $hubActivitySummery->pending_ids    = $pendingJson;
            $hubActivitySummery->sender         = Auth::user()->id;
            $hubActivitySummery->receiver       = Auth::user()->id;
            $hubActivitySummery->rejection_note = $rejection_note;
            $hubActivitySummery->save();
        } else {
            $hubActivitySummery                   = new HubstaffActivitySummary;
            $hubActivitySummery->user_id          = $user_id;
            $hubActivitySummery->date             = $request->date;
            $hubActivitySummery->tracked          = $totalTracked;
            $hubActivitySummery->user_requested   = $approved;
            $hubActivitySummery->accepted         = $approved;
            $hubActivitySummery->rejected         = $rejected;
            $hubActivitySummery->pending          = $pending;
            $hubActivitySummery->approved_ids     = $approvedJson;
            $hubActivitySummery->rejected_ids     = $rejectedJson;
            $hubActivitySummery->pending_ids      = $pendingJson;
            $hubActivitySummery->sender           = Auth::user()->id;
            $hubActivitySummery->receiver         = Auth::user()->id;
            $hubActivitySummery->forworded_person = 'admin';
            $hubActivitySummery->final_approval   = 1;
            $hubActivitySummery->rejection_note   = $rejection_note;
            $hubActivitySummery->save();
        }

        if ($user_rate && $user_rate != '' && $user_payment_frequency == 3) {
            $info_log[]      = ' get user_payment_frequency =3 for payment receipt';
            $payment_receipt = PaymentReceipt::where('user_id', $user_id)->where('date', $request->date)->first();

            if ($payment_receipt) {
                $info_log[]     = ' get payment_receipt' . $payment_receipt->id;
                $approved       = ($payment_approved ?? 0);
                $min            = $approved / 60;
                $info_log[]     = ' approved = ' . $approved;
                $info_log[]     = ' min = ' . $min;
                $min            = number_format($min, 2);
                $info_log[]     = '  num formate min = ' . $min;
                $hour_rate      = $user_rate;
                $info_log[]     = '  hour_rate = ' . $hour_rate;
                $hours          = $min / 60;
                $info_log[]     = '  hours = ' . $hours;
                $rate_estimated = $hours * $hour_rate;
                $info_log[]     = '  rate_estimated = ' . $rate_estimated;
                $rate_estimated = number_format($rate_estimated, 2);
                $info_log[]     = 'num formated  rate_estimated = ' . $rate_estimated;

                PaymentReceipt::where('id', $payment_receipt->id)->update(['worked_minutes' => $min, 'rate_estimated' => $rate_estimated, 'updated_at' => date('Y-m-d H:i:s'), 'hourly_rate' => $hour_rate]);
            } else {
                $min        = $approved / 60;
                $info_log[] = ' min = ' . $min;
                $min        = number_format($min, 2);
                $info_log[] = '  num formate min = ' . $min;
                $info_log[] = ' approved = ' . $approved;

                $hour_rate                          = $user_rate;
                $info_log[]                         = '  hour_rate = ' . $hour_rate;
                $hours                              = $min / 60;
                $info_log[]                         = '  hours = ' . $hours;
                $rate_estimated                     = $hours * $hour_rate;
                $info_log[]                         = '  rate_estimated = ' . $rate_estimated;
                $rate_estimated                     = number_format($rate_estimated, 2);
                $info_log[]                         = 'num formated  rate_estimated = ' . $rate_estimated;
                $payment_receipt                    = new PaymentReceipt;
                $payment_receipt->date              = $request->date;
                $payment_receipt->worked_minutes    = $min;
                $payment_receipt->rate_estimated    = $rate_estimated;
                $payment_receipt->status            = 'Pending';
                $payment_receipt->currency          = ($userRate->currency ?? 'USD');
                $payment_receipt->developer_task_id = '';
                $payment_receipt->user_id           = $member->user_id;
                $payment_receipt->hourly_rate       = $hour_rate;

                $payment_receipt->by_command = 2;
                $payment_receipt->save();

                DeveloperTaskHistory::create([
                    'developer_task_id' => '',
                    'model'             => \App\Hubstaff\HubstaffActivitySummary::class,
                    'attribute'         => 'task_status',
                    'old_value'         => '',
                    'new_value'         => '',
                    'user_id'           => Auth::id(),
                ]);
            }
        }

        \Log::info($info_log);
        $requestData = new Request();
        $requestData->setMethod('POST');
        $min     = $approved / 60;
        $min     = number_format($min, 2);
        $message = 'Hi, your time for ' . $request->date . ' has been approved. Total approved time is ' . $min . ' minutes.';
        $requestData->request->add(['summery_id' => $hubActivitySummery->id, 'message' => $message, 'status' => 1]);
        app(\App\Http\Controllers\WhatsAppController::class)->sendMessage($requestData, 'time_approval');

        return response()->json([
            'totalApproved' => $approved,
        ], 200);

        return response()->json([
            'message' => 'Can not update data',
        ], 500);
    }

    public function approvedPendingPayments(Request $request)
    {
        $title      = 'Approved pending payments';
        $start_date = $request->start_date ? $request->start_date : date('Y-m-d');
        $end_date   = $request->end_date ? $request->end_date : date('Y-m-d');
        $user_id    = $request->user_id ? $request->user_id : null;
        if ($user_id) {
            $activityUsers = DB::select(DB::raw('select system_user_id, sum(tracked) as total_tracked,starts_at from (select a.* from (SELECT hubstaff_activities.id,hubstaff_activities.user_id,cast(hubstaff_activities.starts_at as date) as starts_at,hubstaff_activities.status,hubstaff_activities.paid,hubstaff_members.user_id as system_user_id,hubstaff_activities.tracked FROM `hubstaff_activities` left outer join hubstaff_members on hubstaff_members.hubstaff_user_id = hubstaff_activities.user_id where hubstaff_activities.status = 1 and hubstaff_activities.paid = 0 and hubstaff_members.user_id = ' . $user_id . ') as a left outer join payment_receipts on a.system_user_id = payment_receipts.user_id where a.starts_at <= payment_receipts.date) as b group by starts_at,system_user_id'));
        } else {
            $activityUsers = DB::select(DB::raw('select system_user_id, sum(tracked) as total_tracked,starts_at from (select a.* from (SELECT hubstaff_activities.id,hubstaff_activities.user_id,cast(hubstaff_activities.starts_at as date) as starts_at,hubstaff_activities.status,hubstaff_activities.paid,hubstaff_members.user_id as system_user_id,hubstaff_activities.tracked FROM `hubstaff_activities` left outer join hubstaff_members on hubstaff_members.hubstaff_user_id = hubstaff_activities.user_id where hubstaff_activities.status = 1 and hubstaff_activities.paid = 0) as a left outer join payment_receipts on a.system_user_id = payment_receipts.user_id where a.starts_at <= payment_receipts.date) as b group by starts_at,system_user_id'));
        }

        foreach ($activityUsers as $activity) {
            $user              = User::find($activity->system_user_id);
            $latestRatesOnDate = UserRate::latestRatesOnDate($activity->starts_at, $user->id);
            if ($activity->total_tracked > 0 && $latestRatesOnDate && $latestRatesOnDate->hourly_rate > 0) {
                $total            = ($activity->total_tracked / 60) / 60 * $latestRatesOnDate->hourly_rate;
                $activity->amount = number_format($total, 2);
            } else {
                $activity->amount = 0;
            }
            $activity->userName = $user->name;
        }
        $users = User::all()->pluck('name', 'id')->toArray();

        return view('hubstaff.activities.approved-pending-payments', compact('title', 'activityUsers', 'start_date', 'end_date', 'users', 'user_id'));
    }

    public function submitPaymentRequest(Request $request)
    {
        $this->validate($request, [
            'amount'    => 'required',
            'user_id'   => 'required',
            'starts_at' => 'required',
        ]);

        $payment_receipt                 = new PaymentReceipt;
        $payment_receipt->date           = date('Y-m-d');
        $payment_receipt->rate_estimated = $request->amount;
        $payment_receipt->status         = 'Pending';
        $payment_receipt->user_id        = $request->user_id;
        $payment_receipt->remarks        = $request->note;
        $payment_receipt->save();

        $hubstaff_user_id = HubstaffMember::where('user_id', $request->user_id)->first()->hubstaff_user_id;

        HubstaffActivity::whereDate('starts_at', $request->starts_at)->where('user_id', $hubstaff_user_id)->where('status', 1)->where('paid', 0)->update(['paid' => 1]);

        return redirect()->back()->with('success', 'Successfully submitted');
    }

    public function submitManualRecords(Request $request)
    {
        if ($request->starts_at && $request->starts_at != '' && $request->total_time > 0 && $request->task_id > 0) {
            $member = HubstaffMember::where('user_id', Auth::user()->id)->first();
            if ($member) {
                $firstId = HubstaffActivity::orderBy('id', 'asc')->first();
                if ($firstId) {
                    $previd = $firstId->id - 1;
                } else {
                    $previd = 1;
                }

                if (! $request->user_notes) {
                    $request->user_notes = '';
                }
                $activity             = new HubstaffActivity;
                $activity->id         = $previd;
                $activity->task_id    = $request->task_id;
                $activity->user_id    = $member->hubstaff_user_id;
                $activity->starts_at  = $request->starts_at;
                $activity->tracked    = $request->total_time * 60;
                $activity->keyboard   = 0;
                $activity->mouse      = 0;
                $activity->overall    = 0;
                $activity->status     = 0;
                $activity->is_manual  = 1;
                $activity->user_notes = $request->user_notes;
                $activity->save();

                return response()->json(['message' => 'Successful'], 200);
            }

            return response()->json(['message' => 'Hubstaff member not found'], 500);
        } else {
            return response()->json(['message' => 'Fill all the data first'], 500);
        }
    }

    public function fetchActivitiesFromHubstaff(Request $request)
    {
        if (! $request->hub_staff_start_date || $request->hub_staff_start_date == '' || ! $request->hub_staff_end_date || $request->hub_staff_end_date == '') {
            return response()->json(['message' => 'Select date'], 500);
        }

        $starts_at = $request->hub_staff_start_date;
        $ends_at   = $request->hub_staff_end_date;
        $userID    = $request->get('fetch_user_id', Auth::user()->id);
        $member    = $hubstaff_user_id = HubstaffMember::where('user_id', $userID)->first();

        if ($member) {
            $hubstaff_user_id = $member->hubstaff_user_id;
        } else {
            return response()->json(['message' => 'Hubstaff member not found'], 500);
        }
        $timeReceived = 0;
        try {
            $this->init(getenv('HUBSTAFF_SEED_PERSONAL_TOKEN'));

            $now = time();

            $startString = $starts_at;
            $endString   = $ends_at;
            $userIds     = $hubstaff_user_id;
            $userIds     = explode(',', $userIds);
            $userIds     = array_filter($userIds);

            $start = strtotime($startString . ' 00:00:00' . ' UTC');
            $now   = strtotime($endString . ' 23:59:59' . ' UTC');

            $diff    = $now - $start;
            $dayDiff = round($diff / 86400);
            if ($dayDiff > 7) {
                return response()->json(['message' => 'Can not fetch activities more then week'], 500);
            }

            $activities = $this->getActivitiesBetween(gmdate('c', $start), gmdate('c', $now), 0, [], $userIds);
            if ($activities == false) {
                return response()->json(['message' => 'Can not fetch activities as no activities found'], 500);
            }
            if (! empty($activities)) {
                foreach ($activities as $id => $data) {
                    HubstaffActivity::updateOrCreate(
                        ['id' => $id],
                        [
                            'user_id'   => $data['user_id'],
                            'task_id'   => is_null($data['task_id']) ? 0 : $data['task_id'],
                            'starts_at' => $data['starts_at'],
                            'tracked'   => $data['tracked'],
                            'keyboard'  => $data['keyboard'],
                            'mouse'     => $data['mouse'],
                            'overall'   => $data['overall'],
                        ]
                    );
                    $timeReceived += $data['tracked'];
                }
            }
        } catch (Exception $e) {
            return response()->json(['message' => $e->getMessage()], 500);
        }

        $timeReceived = number_format(($timeReceived / 60), 2, '.', '');

        return response()->json(['message' => 'Fetched activities total time : ' . $timeReceived], 200);
    }

    /*
     * process to Add Efficiency
     *
     *@params Request $request
     *@return
     */
    public function AddEfficiency(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'efficiency' => 'required',
            'user_id'    => 'required',
            'type'       => 'required',
            'date'       => 'required',
            'hour'       => 'required',
        ]);
        if ($validator->fails()) {
            return response()->json(['message' => $validator->messages()->first()], 500);
        } else {
            $admin_input = null;
            $user_input  = null;
            if ($request->type == 'admin') {
                $admin_input = $request->efficiency;
            } else {
                $user_input = $request->efficiency;
            }
            $insert_array = [
                'user_id'     => $request->user_id,
                'admin_input' => $admin_input,
                'user_input'  => $user_input,
                'date'        => $request->date,
                'time'        => $request->hour,
            ];

            $userObj = HubstaffTaskEfficiency::where('user_id', $request->user_id)->where('date', $request->date)->where('time', $request->hour)->first();
            if ($userObj) {
                if ($request->type == 'admin') {
                    $user_input = $userObj->user_input;
                } else {
                    $admin_input = $userObj->admin_input;
                }
                $userObj->update(['admin_input' => $admin_input, 'user_input' => $user_input]);
            } else {
                HubstaffTaskEfficiency::create($insert_array);
            }
        }

        return response()->json(['message' => 'Successful'], 200);
    }

    public function taskActivity(Request $request)
    {
        $task_id = $request->task_id;
        $user_id = $request->user_id;

        // check the task created date
        $task = \App\DeveloperTask::where(function ($q) use ($task_id) {
            $q->orWhere('hubstaff_task_id', $task_id)->orWhere('lead_hubstaff_task_id', $task_id)->orWhere('team_lead_hubstaff_task_id', $task_id)->orWhere('tester_hubstaff_task_id', $task_id);
        })->first();

        if (! $task) {
            $task = \App\Task::where(function ($q) use ($task_id) {
                $q->orWhere('hubstaff_task_id', $task_id)->orWhere('lead_hubstaff_task_id', $task_id);
            })->first();
        }

        $date = ($task) ? $task->created_at : date('1998-02-02');

        $activityrecords = HubstaffActivity::selectRaw('CAST(starts_at as date) AS OnDate,
                                                SUM(tracked) AS total_tracked, 
                                                hour(starts_at) as onHour, 
                                                status')
            ->where('task_id', $task_id)
            ->where('user_id', $user_id)
            ->groupByRaw('hour(starts_at), day(starts_at)')
            ->orderByDesc('OnDate')
            ->get();

        $admins = User::join('role_user', 'role_user.user_id', 'users.id')->join('roles', 'roles.id', 'role_user.role_id')
            ->where('roles.name', 'Admin')->select('users.name', 'users.id')->get();

        $teamLeaders = [];

        $users = User::select('name', 'id')->get();

        $hubstaff_member    = HubstaffMember::where('hubstaff_user_id', $user_id)->first();
        $hubActivitySummery = null;
        if ($hubstaff_member) {
            $system_user_id     = $hubstaff_member->user_id;
            $hubActivitySummery = HubstaffActivitySummary::whereDate('date', '>=', $date)->where('user_id', $system_user_id)->orderBy('created_at', 'DESC')->get();
            $teamLeaders        = User::join('teams', 'teams.user_id', 'users.id')->join('team_user', 'team_user.team_id', 'teams.id')->where('team_user.user_id', $system_user_id)->distinct()->select('users.name', 'users.id')->get();
        }

        $approved_ids = [0];
        $pending_ids  = [0];
        if ($hubActivitySummery) {
            if (! $hubActivitySummery->isEmpty()) {
                foreach ($hubActivitySummery as $hubA) {
                    if (isset($hubA->approved_ids)) {
                        $approved_idsArr = json_decode($hubA->approved_ids);
                        if (! empty($approved_idsArr) && is_array($approved_idsArr)) {
                            $approved_ids = array_merge($approved_ids, $approved_idsArr);
                        }
                    }
                    if ($hubA->pending_ids) {
                        $pending_ids = json_decode($hubA->pending_ids);
                    }
                }
            }
        }

        foreach ($activityrecords as $record) {
            $activities = HubstaffActivity::where('task_id', $task_id)
                ->whereDate('starts_at', $record->OnDate)
                ->where('user_id', $user_id)
                ->where('hour(starts_at)', $record->onHour)
                ->get();

            $totalApproved = 0;
            $isAllSelected = 0;
            $totalPending  = 0;

            foreach ($activities as $a) {
                if (in_array($a->id, $approved_ids)) {
                    $isAllSelected = $isAllSelected + 1;
                    $a->status     = 1;

                    $hubAct = HubstaffActivity::where('id', $a->id)->first();
                    if ($hubAct) {
                        $totalApproved = $totalApproved + $a->tracked;
                    }

                    $a->totalApproved = $a->tracked;
                } else {
                    $a->status        = 0;
                    $a->totalApproved = 0;
                }

                if (in_array($a->id, $pending_ids)) {
                    $isAllSelected = $isAllSelected + 1;
                    $a->status     = 2;
                    $hubAct        = HubstaffActivity::where('id', $a->id)->first();
                    if ($hubAct) {
                        $totalPending = $totalPending + $a->tracked;
                    }
                    $a->totalPending = $a->tracked;
                } else {
                    $a->status       = 0;
                    $a->totalPending = 0;
                }

                $taskSubject = '';
                if ($a->task_id) {
                    if ($a->is_manual) {
                        $task = DeveloperTask::where('id', $a->task_id)->first();
                        if ($task) {
                            $taskSubject = '#DEVTASK-' . $task->id . '-' . $task->subject;
                        } else {
                            $task = Task::where('id', $a->task_id)->first();
                            if ($task) {
                                $taskSubject = '#TASK-' . $task->id . '-' . $task->task_subject;
                            }
                        }
                        $taskStatus = $task->status ?? null;
                    } else {
                        $task = DeveloperTask::where('hubstaff_task_id', $a->task_id)->orWhere('lead_hubstaff_task_id', $a->task_id)->first();
                        if ($task) {
                            $taskSubject = '#DEVTASK-' . $task->id . '-' . $task->subject;
                        } else {
                            $task = Task::where('hubstaff_task_id', $a->task_id)->orWhere('lead_hubstaff_task_id', $a->task_id)->first();
                            if ($task) {
                                $taskSubject = '#TASK-' . $task->id . '-' . $task->task_subject;
                            }
                        }
                        $taskStatus = $task->status ?? null;
                    }
                }

                $a->taskSubject = $taskSubject;
                $a->taskStatus  = $taskStatus ?? null;
            }
            if ($isAllSelected == count($activities)) {
                $record->sample = 1;
            } else {
                $record->sample = 0;
            }
            $record->activities    = $activities;
            $record->totalApproved = $totalApproved;
            $record->totalPending  = $totalPending;
        }
        $user_id = $request->user_id;
        $isAdmin = false;
        if (Auth::user()->isAdmin()) {
            $isAdmin = true;
        }
        $isTeamLeader = false;
        $isLeader     = Team::where('user_id', Auth::user()->id)->first();
        if ($isLeader) {
            $isTeamLeader = true;
        }
        $taskOwner = false;
        if (! $isAdmin && ! $isTeamLeader) {
            $taskOwner = true;
        }

        $member     = HubstaffMember::where('hubstaff_user_id', $request->user_id)->first();
        $isTaskWise = true;

        return view('hubstaff.activities.activity-records', compact('activityrecords', 'user_id', 'date', 'hubActivitySummery', 'teamLeaders', 'admins', 'users', 'isAdmin', 'isTeamLeader', 'taskOwner', 'member', 'isTaskWise'));
    }

    public function activityReport(Request $request)
    {
        $user_id  = $request->user_id;
        $activity = HubstaffActivityByPaymentFrequency::where('user_id', $user_id)->get();

        return response()->json(['status' => true, 'data' => $activity]);
    }

    public function activityReportDownload(Request $request)
    {
        $file_path = storage_path($request->file);

        return response()->download($file_path);
    }

    public function HubstaffPaymentReportDownload(Request $request)
    {
        $file_path = storage_path('app/files') . '/' . $request->file;

        return response()->download($file_path);
    }

    public function activityPaymentData(Request $request)
    {
        $get_data = PayentMailData::where('user_id', $request->user_id)->get();

        return response()->json(['status' => true, 'data' => $get_data]);
    }

    public function addtocashflow(Request $request)
    {
        $id             = $request->id;
        $PayentMailData = \App\PayentMailData::where('id', $id)->first();

        $receipt_id = \App\PaymentReceipt::insertGetId([
            'user_id'            => $PayentMailData->user_id,
            'date'               => $PayentMailData->payment_date,
            'billing_start_date' => $PayentMailData->start_date,
            'billing_end_date'   => $PayentMailData->end_date,
            'payment'            => round($PayentMailData->total_amount_paid, 2),
            'billing_due_date'   => $PayentMailData->payment_date,

        ]);

        return response()->json(['code' => 200, 'data' => [], 'message' => 'cashflow added succesfully']);
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/LearningModuleController.php 
Content: <?php

namespace App\Http\Controllers;

use App\Task;
use App\User;
use App\Remark;
use App\Contact;
use App\Helpers;
use App\Setting;
use App\Learning;
use App\TaskStatus;
use App\ChatMessage;
use App\SatutoryTask;
use App\DeveloperTask;
use App\WhatsAppGroup;
use GuzzleHttp\Client;
use App\DocumentRemark;
use App\LearningModule;
use App\PaymentReceipt;
use App\ScheduledMessage;
use App\WhatsAppGroupNumber;
use Illuminate\Http\Request;
use App\DeveloperTaskHistory;
use App\ChatMessagesQuickData;
use App\Helpers\HubstaffTrait;
use App\Hubstaff\HubstaffTask;
use App\LearningStatusHistory;
use GuzzleHttp\RequestOptions;
use App\LearningDueDateHistory;
use App\Hubstaff\HubstaffMember;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Auth;
use GuzzleHttp\Exception\ClientException;
use Plank\Mediable\Facades\MediaUploader as MediaUploader;

class LearningModuleController extends Controller
{
    use HubstaffTrait;

    public function __construct()
    {
        $this->init(config('env.HUBSTAFF_SEED_PERSONAL_TOKEN'));
    }

    public function index(Request $request)
    {
        if ($request->input('selected_user') == '') {
            $userid    = Auth::id();
            $userquery = ' AND (assign_from = ' . $userid . ' OR  master_user_id = ' . $userid . ' OR  id IN (SELECT task_id FROM task_users WHERE user_id = ' . $userid . ' AND type LIKE "%User%")) ';
        } else {
            $userid    = $request->input('selected_user');
            $userquery = ' AND (master_user_id = ' . $userid . ' OR  id IN (SELECT task_id FROM task_users WHERE user_id = ' . $userid . ' AND type LIKE "%User%")) ';
        }

        if (! $request->input('type') || $request->input('type') == '') {
            $type = 'pending';
        } else {
            $type = $request->input('type');
        }
        $activeCategories = LearningModule::where('is_active', 1)->pluck('id')->all();

        $categoryWhereClause = '';
        $category            = '';
        $request->category   = $request->category ? $request->category : 1;
        if ($request->category != '') {
            if ($request->category != 1) {
                $categoryWhereClause = "AND category = $request->category";
                $category            = $request->category;
            } else {
                $category_condition = implode(',', $activeCategories);
                if ($category_condition != '' || $category_condition != null) {
                    $category_condition  = '( ' . $category_condition . ' )';
                    $categoryWhereClause = 'AND category in ' . $category_condition;
                } else {
                    $categoryWhereClause = '';
                }
            }
        }

        $term              = $request->term ?? '';
        $searchWhereClause = '';

        if ($request->term != '') {
            $searchWhereClause = ' AND (id LIKE "%' . $term . '%" OR category IN (SELECT id FROM task_categories WHERE title LIKE "%' . $term . '%") OR task_subject LIKE "%' . $term . '%" OR task_details LIKE "%' . $term . '%" OR assign_from IN (SELECT id FROM users WHERE name LIKE "%' . $term . '%") OR id IN (SELECT task_id FROM task_users WHERE user_id IN (SELECT id FROM users WHERE name LIKE "%' . $term . '%")))';
        }
        $orderByClause = ' ORDER BY';
        if ($request->sort_by == 1) {
            $orderByClause .= ' learnings.created_at desc,';
        } elseif ($request->sort_by == 2) {
            $orderByClause .= ' learnings.created_at asc,';
        }
        $data['task'] = [];

        $search_term_suggestions                 = [];
        $search_suggestions                      = [];
        $assign_from_arr                         = [0];
        $special_task_arr                        = [0];
        $assign_to_arr                           = [0];
        $data['task']['pending']                 = [];
        $data['task']['statutory_not_completed'] = [];
        $data['task']['completed']               = [];
        if ($type == 'pending') {
            $paginate = 50;
            $page     = $request->get('page', 1);
            $offSet   = ($page * $paginate) - $paginate;

            $orderByClause .= ' is_flagged DESC, message_created_at DESC';
            $isCompleteWhereClose = ' AND is_verified IS NULL ';

            if (! Auth::user()->isAdmin()) {
                $isCompleteWhereClose = ' AND is_verified IS NULL ';
            }
            if ($request->filter_by == 1) {
                $isCompleteWhereClose = ' AND is_completed IS NULL ';
            }
            if ($request->filter_by == 2) {
                $isCompleteWhereClose = ' AND is_completed IS NOT NULL AND is_verified IS NULL ';
            }

            $data['task']['pending'] = DB::select('
			SELECT learnings.*

			FROM (
			  SELECT * FROM learnings
			  LEFT JOIN (
				  SELECT 
				  chat_messages.id as message_id, 
				  chat_messages.task_id, 
				  chat_messages.message, 
				  chat_messages.status as message_status, 
				  chat_messages.sent as message_type, 
				  chat_messages.created_at as message_created_at, 
				  chat_messages.is_reminder AS message_is_reminder,
				  chat_messages.user_id AS message_user_id
				  FROM chat_messages join chat_messages_quick_datas on chat_messages_quick_datas.last_communicated_message_id = chat_messages.id WHERE chat_messages.status not in(7,8,9) and chat_messages_quick_datas.model="App\\Task"
			  ) as chat_messages  ON chat_messages.task_id = learnings.id
			) AS learnings
			WHERE (id IS NOT NULL) AND is_statutory != 1 ' . $isCompleteWhereClose . $userquery . $categoryWhereClause . $searchWhereClause . $orderByClause . ' limit ' . $paginate . ' offset ' . $offSet . '; ');

            foreach ($data['task']['pending'] as $task) {
                array_push($assign_to_arr, $task->assign_to);
                array_push($assign_from_arr, $task->assign_from);
                array_push($special_task_arr, $task->id);
            }

            $user_ids_from = array_unique($assign_from_arr);
            $user_ids_to   = array_unique($assign_to_arr);

            foreach ($data['task']['pending'] as $task) {
                $search_suggestions[] = '#' . $task->id . ' ' . $task->task_subject . ' ' . $task->task_details;
                $from_exist           = in_array($task->assign_from, $user_ids_from);
                if ($from_exist) {
                    $from_user = User::find($task->assign_from);
                    if ($from_user) {
                        $search_term_suggestions[] = $from_user->name;
                    }
                }

                $to_exist = in_array($task->assign_to, $user_ids_to);
                if ($to_exist) {
                    $to_user = User::find($task->assign_to);
                    if ($to_user) {
                        $search_term_suggestions[] = $to_user->name;
                    }
                }
                $search_term_suggestions[] = "$task->id";
                $search_term_suggestions[] = $task->task_subject;
                $search_term_suggestions[] = $task->task_details;
            }
        } elseif ($type == 'completed') {
            $paginate = 50;
            $page     = $request->get('page', 1);
            $offSet   = ($page * $paginate) - $paginate;
            $orderByClause .= ' last_communicated_at DESC';
            $data['task']['completed'] = DB::select('
                SELECT *,
 				message_id,
                message,
                message_status,
                message_type,
                message_created_At as last_communicated_at
                FROM (
                  SELECT * FROM learnings
                 LEFT JOIN (
					SELECT 
					chat_messages.id as message_id, 
					chat_messages.task_id, 
					chat_messages.message, 
					chat_messages.status as message_status, 
					chat_messages.sent as message_type, 
					chat_messages.created_at as message_created_at, 
					chat_messages.is_reminder AS message_is_reminder,
					chat_messages.user_id AS message_user_id
					FROM chat_messages join chat_messages_quick_datas on chat_messages_quick_datas.last_communicated_message_id = chat_messages.id WHERE chat_messages.status not in(7,8,9) and chat_messages_quick_datas.model="App\\\\Task"
                 ) AS chat_messages ON chat_messages.task_id = learnings.id
                ) AS learnings
                WHERE (id IS NOT NULL) AND is_statutory != 1 AND is_verified IS NOT NULL ' . $userquery . $categoryWhereClause . $searchWhereClause . $orderByClause . ' limit ' . $paginate . ' offset ' . $offSet . ';');

            foreach ($data['task']['completed'] as $task) {
                array_push($assign_to_arr, $task->assign_to);
                array_push($assign_from_arr, $task->assign_from);
                array_push($special_task_arr, $task->id);
            }

            $user_ids_from = array_unique($assign_from_arr);
            $user_ids_to   = array_unique($assign_to_arr);

            foreach ($data['task']['completed'] as $task) {
                $search_suggestions[] = '#' . $task->id . ' ' . $task->task_subject . ' ' . $task->task_details;
                $from_exist           = in_array($task->assign_from, $user_ids_from);
                if ($from_exist) {
                    $from_user = User::find($task->assign_from);
                    if ($from_user) {
                        $search_term_suggestions[] = $from_user->name;
                    }
                }

                $to_exist = in_array($task->assign_to, $user_ids_to);
                if ($to_exist) {
                    $to_user = User::find($task->assign_to);
                    if ($to_user) {
                        $search_term_suggestions[] = $to_user->name;
                    }
                }
                $search_term_suggestions[] = "$task->id";
                $search_term_suggestions[] = $task->task_subject;
                $search_term_suggestions[] = $task->task_details;
            }
        } elseif ($type == 'statutory_not_completed') {
            $paginate = 50;
            $page     = $request->get('page', 1);
            $offSet   = ($page * $paginate) - $paginate;
            $orderByClause .= ' last_communicated_at DESC';
            $data['task']['statutory_not_completed'] = DB::select('
	               SELECT *,
				   message_id,
	               message,
	               message_status,
	               message_type,
	               message_created_At as last_communicated_at

	               FROM (
	                 SELECT * FROM learnings
	                 LEFT JOIN (
							SELECT 
							chat_messages.id as message_id, 
							chat_messages.task_id, 
							chat_messages.message, 
							chat_messages.status as message_status, 
							chat_messages.sent as message_type, 
							chat_messages.created_at as message_created_at, 
							chat_messages.is_reminder AS message_is_reminder,
							chat_messages.user_id AS message_user_id
							FROM chat_messages join chat_messages_quick_datas on chat_messages_quick_datas.last_communicated_message_id = chat_messages.id WHERE chat_messages.status not in(7,8,9) and chat_messages_quick_datas.model="App\\\\Task"
	                 ) AS chat_messages ON chat_messages.task_id = learnings.id

	               ) AS learnings
				   WHERE (id IS NOT NULL) AND is_statutory = 1 AND is_verified IS NULL ' . $userquery . $categoryWhereClause . $orderByClause . ' limit ' . $paginate . ' offset ' . $offSet . ';');

            foreach ($data['task']['statutory_not_completed'] as $task) {
                array_push($assign_to_arr, $task->assign_to);
                array_push($assign_from_arr, $task->assign_from);
                array_push($special_task_arr, $task->id);
            }

            $user_ids_from = array_unique($assign_from_arr);
            $user_ids_to   = array_unique($assign_to_arr);

            foreach ($data['task']['statutory_not_completed'] as $task) {
                $search_suggestions[] = '#' . $task->id . ' ' . $task->task_subject . ' ' . $task->task_details;
                $from_exist           = in_array($task->assign_from, $user_ids_from);
                if ($from_exist) {
                    $from_user = User::find($task->assign_from);
                    if ($from_user) {
                        $search_term_suggestions[] = $from_user->name;
                    }
                }

                $to_exist = in_array($task->assign_to, $user_ids_to);
                if ($to_exist) {
                    $to_user = User::find($task->assign_to);
                    if ($to_user) {
                        $search_term_suggestions[] = $to_user->name;
                    }
                }
                $search_term_suggestions[] = "$task->id";
                $search_term_suggestions[] = $task->task_subject;
                $search_term_suggestions[] = $task->task_details;
            }
        } else {
            //
        }

        $subjectList = Learning::select('learning_subject')->distinct()->pluck('learning_subject');

        $users                       = User::oldest()->get()->toArray();
        $data['users']               = $users;
        $data['daily_activity_date'] = $request->daily_activity_date ? $request->daily_activity_date : date('Y-m-d');

        //My code start
        $selected_user            = $request->input('selected_user');
        $users                    = Helpers::getUserArray(User::orderby('name')->get());
        $task_categories          = LearningModule::where('parent_id', 0)->get();
        $learning_module_dropdown = nestable(LearningModule::where('is_approved', 1)->where('parent_id', 0)->get()->toArray())->attr(['name' => 'learning_module', 'class' => 'form-control input-sm parent-module'])
            ->selected($request->category)
            ->renderAsDropdown();

        $learning_submodule_dropdown = LearningModule::where('is_approved', 1)->where('parent_id', '1')->get();

        $categories = [];
        foreach (LearningModule::all() as $category) {
            $categories[$category->id] = $category->title;
        }
        if (! empty($selected_user) && ! Helpers::getadminorsupervisor()) {
            return response()->json(['user not allowed'], 405);
        }
        //My code end
        $tasks_view = [];
        $priority   = \App\ErpPriority::where('model_type', '=', Learning::class)->pluck('model_id')->toArray();

        $openTask = \App\Learning::join('users as u', 'u.id', 'learnings.assign_to')
            ->whereNull('learnings.is_completed')
            ->groupBy('learnings.assign_to')
            ->select(\DB::raw('count(u.id) as total'), 'u.name as person')
            ->pluck('total', 'person');

        if ($request->is_statutory_query == 3) {
            $title = 'Discussion learnings';
        } else {
            $title = 'Learning & Activity';
        }

        $task_statuses = TaskStatus::all();

        if ($request->ajax()) {
            if ($type == 'pending') {
                return view('learning-module.partials.pending-row-ajax', compact('data', 'users', 'selected_user', 'category', 'term', 'search_suggestions', 'search_term_suggestions', 'tasks_view', 'categories', 'task_categories', 'task_categories_dropdown', 'priority', 'openTask', 'type', 'title', 'task_statuses'));
            } elseif ($type == 'statutory_not_completed') {
                return view('learning-module.partials.statutory-row-ajax', compact('data', 'users', 'selected_user', 'category', 'term', 'search_suggestions', 'search_term_suggestions', 'tasks_view', 'categories', 'task_categories', 'task_categories_dropdown', 'priority', 'openTask', 'type', 'title', 'task_statuses'));
            } elseif ($type == 'completed') {
                return view('learning-module.partials.completed-row-ajax', compact('data', 'users', 'selected_user', 'category', 'term', 'search_suggestions', 'search_term_suggestions', 'tasks_view', 'categories', 'task_categories', 'task_categories_dropdown', 'priority', 'openTask', 'type', 'title', 'task_statuses'));
            } else {
                return view('learning-module.partials.pending-row-ajax', compact('data', 'users', 'selected_user', 'category', 'term', 'search_suggestions', 'search_term_suggestions', 'tasks_view', 'categories', 'task_categories', 'task_categories_dropdown', 'priority', 'openTask', 'type', 'title', 'task_statuses'));
            }
        }

        if ($request->is_statutory_query == 3) {
            return view('learning-module.discussion-tasks', compact('data', 'users', 'selected_user', 'category', 'term', 'search_suggestions', 'search_term_suggestions', 'tasks_view', 'categories', 'task_categories', 'learning_module_dropdown', 'learning_submodule_dropdown', 'priority', 'openTask', 'type', 'title', 'task_statuses'));
        } else {
            $statusList = \DB::table('task_statuses')->orderBy('name', 'asc')->pluck('name', 'id')->toArray();

            $learningsListing = Learning::query();

            if (! empty($request->get('user_id'))) {
                $learningsListing->where('learning_user', $request->get('user_id'));
            }

            if (! empty($request->get('subject'))) {
                $subject = $request->get('subject');
                $learningsListing->where('learning_subject', 'LIKE', "%$subject%");
            }

            if (! empty($request->get('task_status'))) {
                $learningsListing->whereIn('learning_status', $request->get('task_status'));
            }

            if (! empty($request->get('overduedate'))) {
                $learningsListing->whereDate('learning_duedate', '<', $request->get('overduedate'));
            }

            if (! empty($request->get('module'))) {
                $learningsListing->where('learning_module', $request->get('module'));
            }

            if (! empty($request->get('submodule'))) {
                $learningsListing->where('learning_submodule', $request->get('submodule'));
            }

            $learningsListing = $learningsListing->latest()->get();

            $last_record_learning = Learning::with('learningUser')->latest()->first();

            return view('learning-module.show', compact('data', 'users', 'selected_user', 'category', 'term', 'search_suggestions', 'search_term_suggestions', 'tasks_view', 'categories', 'task_categories', 'learning_module_dropdown', 'learning_submodule_dropdown', 'priority', 'openTask', 'type', 'title', 'task_statuses', 'learningsListing', 'statusList', 'subjectList', 'last_record_learning'));
        }
    }

    public function updateCost(Request $request)
    {
        $task = Learning::find($request->task_id);

        if (Auth::user()->isAdmin()) {
            $task->cost = $request->cost;
            $task->save();

            return response()->json(['msg' => 'success']);
        } else {
            return response()->json(['msg' => 'Not authorized user to update'], 500);
        }
    }

    public function saveMilestone(Request $request)
    {
        $task = Learning::find($request->task_id);
        if (! $task->is_milestone) {
            return;
        }
        $total = $request->total;
        if ($task->milestone_completed) {
            if ($total <= $task->milestone_completed) {
                return response()->json([
                    'message' => 'Milestone no can\'t be reduced',
                ], 500);
            }
        }

        if ($total > $task->no_of_milestone) {
            return response()->json([
                'message' => 'Estimated milestone exceeded',
            ], 500);
        }
        if (! $task->cost || $task->cost == '') {
            return response()->json([
                'message' => 'Please provide cost first',
            ], 500);
        }

        $newCompleted    = $total - $task->milestone_completed;
        $individualPrice = $task->cost / $task->no_of_milestone;
        $totalCost       = $individualPrice * $newCompleted;

        $task->milestone_completed = $total;
        $task->save();
        $payment_receipt                 = new PaymentReceipt;
        $payment_receipt->date           = date('Y-m-d');
        $payment_receipt->worked_minutes = $task->approximate;
        $payment_receipt->rate_estimated = $totalCost;
        $payment_receipt->status         = 'Pending';
        $payment_receipt->task_id        = $task->id;
        $payment_receipt->user_id        = $task->assign_to;
        $payment_receipt->save();

        return response()->json([
            'status' => 'success',
        ]);
    }

    public function updateApproximate(Request $request)
    {
        $task = Learning::find($request->task_id);

        if (Auth::user()->id == $task->assign_to || Auth::user()->isAdmin()) {
            if ($task && $request->approximate) {
                DeveloperTaskHistory::create([
                    'developer_task_id' => $task->id,
                    'model'             => \App\Task::class,
                    'attribute'         => 'estimation_minute',
                    'old_value'         => $task->approximate,
                    'new_value'         => $request->approximate,
                    'user_id'           => auth()->id(),
                ]);
            }

            $task->approximate = $request->approximate;
            $task->save();

            return response()->json(['msg' => 'success']);
        } else {
            return response()->json(['msg' => 'Unauthorized access'], 500);
        }
    }

    public function updatePriorityNo(Request $request)
    {
        $task = Learning::find($request->task_id);

        if (Auth::user()->id == $task->assign_to || Auth::user()->isAdmin()) {
            $task->priority_no = $request->priority;
            $task->save();

            return response()->json(['msg' => 'success']);
        } else {
            return response()->json(['msg' => 'Unauthorized access'], 500);
        }
    }

    public function learningListByUserId(Request $request)
    {
        $user_id        = $request->get('user_id', 0);
        $selected_issue = $request->get('selected_issue', []);

        $issues = Learning::select('learnings.id', 'learnings.task_subject', 'learnings.task_details', 'learnings.assign_from')
            ->leftJoin('erp_priorities', function ($query) {
                $query->on('erp_priorities.model_id', '=', 'learnings.id');
                $query->where('erp_priorities.model_type', '=', Learning::class);
            })->whereNull('is_verified');

        if (auth()->user()->isAdmin()) {
            $issues = $issues->where(function ($q) use ($selected_issue, $user_id) {
                $user_id = is_null($user_id) ? 0 : $user_id;
                $q->whereIn('learnings.id', $selected_issue)->orWhere('erp_priorities.user_id', $user_id);
            });
        } else {
            $issues = $issues->whereNotNull('erp_priorities.id');
        }

        $issues = $issues->groupBy('learnings.id')->orderBy('erp_priorities.id')->get();

        foreach ($issues as &$value) {
            $value->created_by = User::where('id', $value->assign_from)->value('name');
        }
        unset($value);

        return response()->json($issues);
    }

    public function setTaskPriority(Request $request)
    {
        $priority = $request->get('priority', null);
        $user_id  = $request->get('user_id', 0);

        //delete old priority
        \App\ErpPriority::where('user_id', $user_id)->where('model_type', '=', Learning::class)->delete();

        if (! empty($priority)) {
            foreach ((array) $priority as $model_id) {
                \App\ErpPriority::create([
                    'model_id'   => $model_id,
                    'model_type' => Learning::class,
                    'user_id'    => $user_id,
                ]);
            }

            $developerTask = Learning::select('learnings.id', 'learnings.task_subject', 'learnings.task_details', 'learnings.assign_from')
                ->join('erp_priorities', function ($query) use ($user_id) {
                    $user_id = is_null($user_id) ? 0 : $user_id;
                    $query->on('erp_priorities.model_id', '=', 'learnings.id');
                    $query->where('erp_priorities.model_type', '=', Learning::class);
                    $query->where('user_id', $user_id);
                })
                ->whereNull('is_verified')
                ->orderBy('erp_priorities.id')
                ->get();

            $message = '';
            $i       = 1;

            foreach ($developerTask as $value) {
                $message .= $i . ' : #Task-' . $value->id . '-' . $value->task_subject . "\n";
                $i++;
            }

            if (! empty($message)) {
                $requestData = new Request();
                $requestData->setMethod('POST');
                $params            = [];
                $params['user_id'] = $user_id;

                $string = '';

                if (! empty($request->get('global_remarkes', null))) {
                    $string .= $request->get('global_remarkes') . "\n";
                }

                $string .= "Task Priority is : \n" . $message;

                $params['message'] = $string;
                $params['status']  = 2;
                $requestData->request->add($params);
                app(\App\Http\Controllers\WhatsAppController::class)->sendMessage($requestData, 'priority');
            }
        }

        return response()->json([
            'status' => 'success',
        ]);
    }

    public function store(Request $request)
    {
        dd('We are not using this function anymore, If you reach here, that means that we have to change this.');
        $this->validate($request, [
            'task_subject' => 'required',
            'task_details' => 'required',
            'assign_to'    => 'required_without:assign_to_contacts',
        ]);
        $data                = $request->except('_token');
        $data['assign_from'] = Auth::id();

        if ($request->task_type == 'quick_task') {
            $data['is_statutory'] = 0;
            $data['category']     = 6;
            $data['model_type']   = $request->model_type;
            $data['model_id']     = $request->model_id;
        }

        if ($request->task_type == 'note-task') {
            $main_task = Learning::find($request->task_id);
        } else {
            if ($request->assign_to) {
                $data['assign_to'] = $request->assign_to[0];
            } else {
                $data['assign_to'] = $request->assign_to_contacts[0];
            }
        }

        $task = Learning::create($data);

        if ($request->is_statutory == 3) {
            foreach ($request->note as $note) {
                if ($note != null) {
                    Remark::create([
                        'taskid'      => $task->id,
                        'remark'      => $note,
                        'module_type' => 'task-note',
                    ]);
                }
            }
        }

        if ($request->task_type != 'note-task') {
            if ($request->assign_to) {
                foreach ($request->assign_to as $user_id) {
                    $task->users()->attach([$user_id => ['type' => User::class]]);
                }
            }

            if ($request->assign_to_contacts) {
                foreach ($request->assign_to_contacts as $contact_id) {
                    $task->users()->attach([$contact_id => ['type' => Contact::class]]);
                }
            }
        }

        if ($task->is_statutory != 1) {
            $message = '#' . $task->id . '. ' . $task->task_subject . '. ' . $task->task_details;
        } else {
            $message = $task->task_subject . '. ' . $task->task_details;
        }

        $params = [
            'number'   => null,
            'user_id'  => Auth::id(),
            'approved' => 1,
            'status'   => 2,
            'task_id'  => $task->id,
            'message'  => $message,
        ];
        if (count($task->users) > 0) {
            if ($task->assign_from == Auth::id()) {
                foreach ($task->users as $key => $user) {
                    if ($key == 0) {
                        $params['erp_user'] = $user->id;
                    } else {
                        app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($user->phone, $user->whatsapp_number, $params['message']);
                    }
                }
            } else {
                foreach ($task->users as $key => $user) {
                    if ($key == 0) {
                        $params['erp_user'] = $task->assign_from;
                    } else {
                        if ($user->id != Auth::id()) {
                            app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($user->phone, $user->whatsapp_number, $params['message']);
                        }
                    }
                }
            }
        }

        if (count($task->contacts) > 0) {
            foreach ($task->contacts as $key => $contact) {
                if ($key == 0) {
                    $params['contact_id'] = $task->assign_to;
                } else {
                    app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($contact->phone, null, $params['message']);
                }
            }
        }

        $chat_message = ChatMessage::create($params);
        ChatMessagesQuickData::updateOrCreate([
            'model'    => \App\Learning::class,
            'model_id' => $params['task_id'],
        ], [
            'last_communicated_message'    => @$params['message'],
            'last_communicated_message_at' => $chat_message->created_at,
            'last_communicated_message_id' => ($chat_message) ? $chat_message->id : null,
        ]);

        $myRequest = new Request();
        $myRequest->setMethod('POST');
        $myRequest->request->add(['messageId' => $chat_message->id]);

        app(\App\Http\Controllers\WhatsAppController::class)->approveMessage('task', $myRequest);

        $hubstaff_project_id = config('env.HUBSTAFF_BULK_IMPORT_PROJECT_ID');

        $assignedUser = HubstaffMember::where('user_id', $request->input('assign_to'))->first();

        $hubstaffUserId = null;
        if ($assignedUser) {
            $hubstaffUserId = $assignedUser->hubstaff_user_id;
        }
        $taskSummery = substr($message, 0, 200);

        $hubstaffTaskId = $this->createHubstaffTask(
            $taskSummery,
            $hubstaffUserId,
            $hubstaff_project_id
        );

        if ($hubstaffTaskId) {
            $task->hubstaff_task_id = $hubstaffTaskId;
            $task->save();
        }
        if ($hubstaffUserId) {
            $task                      = new HubstaffTask();
            $task->hubstaff_task_id    = $hubstaffTaskId;
            $task->project_id          = $hubstaff_project_id;
            $task->hubstaff_project_id = $hubstaff_project_id;
            $task->summary             = $message;
            $task->save();
        }

        $task_statuses = TaskStatus::all();

        if ($request->ajax()) {
            $hasRender = request('has_render', false);

            if (! empty($hasRender)) {
                $users    = Helpers::getUserArray(User::all());
                $priority = \App\ErpPriority::where('model_type', '=', Learning::class)->pluck('model_id')->toArray();

                if ($task->is_statutory == 1) {
                    $mode = 'learning-module.partials.statutory-row';
                } elseif ($task->is_statutory == 3) {
                    $mode = 'learning-module.partials.discussion-pending-raw';
                } else {
                    $mode = 'learning-module.partials.pending-row';
                }

                $view = (string) view($mode, compact('task', 'priority', 'users', 'task_statuses'));

                return response()->json(['code' => 200, 'statutory' => $task->is_statutory, 'raw' => $view]);
            }

            return response('success');
        }

        return redirect()->back()->with('success', 'Task created successfully.');
    }

    private function createHubstaffTask(string $taskSummary, ?int $hubstaffUserId, int $projectId, bool $shouldRetry = true)
    {
        $tokens = $this->getTokens();

        $url = 'https://api.hubstaff.com/v2/projects/' . $projectId . '/learnings';

        $httpClient = new Client();
        try {
            $body = [
                'summary' => $taskSummary,
            ];

            if ($hubstaffUserId) {
                $body['assignee_id'] = $hubstaffUserId;
            } else {
                $body['assignee_id'] = config('env.HUBSTAFF_DEFAULT_ASSIGNEE_ID');
            }

            $response = $httpClient->post(
                $url,
                [
                    RequestOptions::HEADERS => [
                        'Authorization' => 'Bearer ' . $tokens->access_token,
                        'Content-Type'  => 'application/json',
                    ],

                    RequestOptions::BODY => json_encode($body),
                ]
            );
            $parsedResponse = json_decode($response->getBody()->getContents());

            return $parsedResponse->task->id;
        } catch (ClientException $e) {
            if ($e->getCode() == 401) {
                $this->refreshTokens();
                if ($shouldRetry) {
                    return $this->createHubstaffTask(
                        $taskSummary,
                        $hubstaffUserId,
                        $projectId,
                        false
                    );
                } else {
                }
            }
        }

        return false;
    }

    public function flag(Request $request)
    {
        $task = Learning::find($request->task_id);

        if ($task->is_flagged == 0) {
            $task->is_flagged = 1;
        } else {
            $task->is_flagged = 0;
        }

        $task->save();

        return response()->json(['is_flagged' => $task->is_flagged]);
    }

    public function remarkFlag(Request $request)
    {
        $remark = Remark::find($request->remark_id);

        if ($remark->is_flagged == 0) {
            $remark->is_flagged = 1;
        } else {
            $remark->is_flagged = 0;
        }

        $remark->save();

        return response()->json(['is_flagged' => $remark->is_flagged]);
    }

    public function plan(Request $request, $id)
    {
        $task                      = Learning::find($id);
        $task->time_slot           = $request->time_slot;
        $task->planned_at          = $request->planned_at;
        $task->general_category_id = $request->get('general_category_id', null);
        $task->save();

        return response()->json([
            'task' => $task,
        ]);
    }

    public function loadView(Request $request)
    {
        $tasks = Learning::whereIn('id', $request->selected_tasks)->get();
        $users = Helpers::getUserArray(User::all());
        $view  = view('learning-module.partials.learning-view', [
            'tasks_view' => $tasks,
            'users'      => $users,
        ])->render();

        return response()->json([
            'view' => $view,
        ]);
    }

    public function assignMessages(Request $request)
    {
        $messages_ids = json_decode($request->selected_messages, true);

        foreach ($messages_ids as $message_id) {
            $message          = ChatMessage::find($message_id);
            $message->task_id = $request->task_id;
            $message->save();
        }

        return redirect()->back()->withSuccess('You have successfully assign messages');
    }

    public function messageReminder(Request $request)
    {
        $this->validate($request, [
            'message_id'    => 'required|numeric',
            'reminder_date' => 'required',
        ]);

        $message = ChatMessage::find($request->message_id);

        $additional_params = [
            'user_id'    => $message->user_id,
            'task_id'    => $message->task_id,
            'erp_user'   => $message->erp_user,
            'contact_id' => $message->contact_id,
        ];

        $params = [
            'user_id'      => Auth::id(),
            'message'      => 'Reminder - ' . $message->message,
            'type'         => 'task',
            'data'         => json_encode($additional_params),
            'sending_time' => $request->reminder_date,
        ];

        ScheduledMessage::create($params);

        return redirect()->back()->withSuccess('You have successfully set a reminder!');
    }

    public function convertTask(Request $request, $id)
    {
        $task = Learning::find($id);

        $task->is_statutory = 3;
        $task->save();

        return response('success', 200);
    }

    public function updateSubject(Request $request, $id)
    {
        $task               = Learning::find($id);
        $task->task_subject = $request->subject;
        $task->save();

        return response('success', 200);
    }

    public function addNote(Request $request, $id)
    {
        Remark::create([
            'taskid'      => $id,
            'remark'      => $request->note,
            'module_type' => 'task-note',
        ]);

        return response('success', 200);
    }

    public function addSubnote(Request $request, $id)
    {
        $remark = Remark::create([
            'taskid'      => $id,
            'remark'      => $request->note,
            'module_type' => 'task-note-subnote',
        ]);

        $id = $remark->id;

        return response(['success' => $id], 200);
    }

    public function updateCategory(Request $request, $id)
    {
        $task           = Learning::find($id);
        $task->category = $request->category;
        $task->save();

        return response('success', 200);
    }

    public function show($id)
    {
        $task         = Learning::find($id);
        $chatMessages = ChatMessage::where('task_id', $id)->get();
        if ((! $task->users->contains(Auth::id()) && $task->is_private == 1) || ($task->assign_from != Auth::id() && $task->contacts()->count() > 0) || (! $task->users->contains(Auth::id()) && $task->assign_from != Auth::id() && Auth::id() != 6)) {
            return redirect()->back()->withErrors('This Learning is private!');
        }

        $users       = User::all();
        $users_array = Helpers::getUserArray(User::all());
        $categories  = LearningModule::attr(['title' => 'category', 'class' => 'form-control input-sm', 'placeholder' => 'Select a Category', 'id' => 'task_category'])
            ->selected($task->category)
            ->renderAsDropdown();

        if (request()->has('keyword')) {
            $taskNotes = $task->notes()->orderBy('is_flagged')->where('is_hide', 0)->where('remark', 'like', '%' . request()->keyword . '%')->paginate(20);
        } else {
            $taskNotes = $task->notes()->orderBy('is_flagged')->where('is_hide', 0)->paginate(20);
        }

        $hiddenRemarks = $task->notes()->where('is_hide', 1)->get();

        return view('learning-module.learning-show', [
            'task'          => $task,
            'users'         => $users,
            'users_array'   => $users_array,
            'categories'    => $categories,
            'taskNotes'     => $taskNotes,
            'hiddenRemarks' => $hiddenRemarks,
            'chatMessages'  => $chatMessages,
        ]);
    }

    public function update(Request $request, $id)
    {
        $this->validate($request, [
            'assign_to.*'  => 'required_without:assign_to_contacts',
            'sending_time' => 'sometimes|nullable|date',
        ]);

        $task = Learning::find($id);
        $task->users()->detach();
        $task->contacts()->detach();

        if ($request->assign_to) {
            foreach ($request->assign_to as $user_id) {
                $task->users()->attach([$user_id => ['type' => User::class]]);
            }

            $task->assign_to = $request->assign_to[0];
        }

        if ($request->assign_to_contacts) {
            foreach ($request->assign_to_contacts as $contact_id) {
                $task->users()->attach([$contact_id => ['type' => Contact::class]]);
            }

            $task->assign_to = $request->assign_to_contacts[0];
        }

        if ($request->sending_time) {
            $task->sending_time = $request->sending_time;
        }

        $task->save();

        return redirect()->route('task.show', $id)->withSuccess('You have successfully reassigned users!');
    }

    public function makePrivate(Request $request, $id)
    {
        $task = Learning::find($id);

        if ($task->is_private == 1) {
            $task->is_private = 0;
        } else {
            $task->is_private = 1;
        }

        $task->save();

        return response()->json([
            'task' => $task,
        ]);
    }

    public function isWatched(Request $request, $id)
    {
        $task = Learning::find($id);

        if ($task->is_watched == 1) {
            $task->is_watched = 0;
        } else {
            $task->is_watched = 1;
        }

        $task->save();

        return response()->json([
            'task' => $task,
        ]);
    }

    public function complete(Request $request, $taskid)
    {
        $task = Learning::find($taskid);
        if ($request->type == 'complete') {
            if (is_null($task->is_completed)) {
                $task->is_completed = date('Y-m-d H:i:s');
            } elseif (is_null($task->is_verified)) {
                if ($task->assignedTo) {
                    if ($task->assignedTo->fixed_price_user_or_job == 1) {
                        // Fixed price task.
                        if ($task->cost == null) {
                            if ($request->ajax()) {
                                return response()->json([
                                    'message' => 'Please provide cost for fixed price task.',
                                ], 500);
                            }

                            return redirect()->back()
                                ->with('error', 'Please provide cost for fixed price task.');
                        }
                        if (! $task->is_milestone) {
                            $payment_receipt                 = new PaymentReceipt;
                            $payment_receipt->date           = date('Y-m-d');
                            $payment_receipt->worked_minutes = $task->approximate;
                            $payment_receipt->rate_estimated = $task->cost;
                            $payment_receipt->status         = 'Pending';
                            $payment_receipt->task_id        = $task->id;
                            $payment_receipt->user_id        = $task->assign_to;
                            $payment_receipt->save();
                        }
                    }
                }
                $task->is_verified = date('Y-m-d H:i:s');
            }
        } elseif ($request->type == 'clear') {
            $task->is_completed = null;
            $task->is_verified  = null;
        }
        $task->save();

        if ($request->ajax()) {
            return response()->json([
                'task' => $task,
            ]);
        }

        return redirect()->back()
            ->with('success', 'Task marked as completed.');
    }

    public function start(Request $request, $taskid)
    {
        $task = Learning::find($taskid);

        $task->actual_start_date = date('Y-m-d H:i:s');
        $task->save();

        if ($request->ajax()) {
            return response()->json([
                'task' => $task,
            ]);
        }

        return redirect()->back()->with('success', 'Task started.');
    }

    public function statutoryComplete($taskid)
    {
        $task                  = SatutoryTask::find($taskid);
        $task->completion_date = date('Y-m-d H:i:s');

        if ($task->assign_to == Auth::id()) {
            $task->save();
        }

        $message = 'Statutory Task Completed: ' . $task->task_details;

        return redirect()->back()
            ->with('success', 'Statutory Task marked as completed.');
    }

    public function addRemark(Request $request)
    {
        $remark     = $request->input('remark');
        $id         = $request->input('id');
        $created_at = date('Y-m-d H:i:s');
        $update_at  = date('Y-m-d H:i:s');
        if ($request->module_type == 'document') {
            $remark_entry = DocumentRemark::create([
                'document_id' => $id,
                'remark'      => $remark,
                'module_type' => $request->module_type,
                'user_name'   => $request->user_name ? $request->user_name : Auth::user()->name,
            ]);
        } else {
            $remark_entry = Remark::create([
                'taskid'      => $id,
                'remark'      => $remark,
                'module_type' => $request->module_type,
                'user_name'   => $request->user_name ? $request->user_name : Auth::user()->name,
            ]);
        }

        if ($request->module_type == 'task-discussion') {
            //
        }

        return response()->json(['remark' => $remark], 200);
    }

    public function list(Request $request)
    {
        $pending_tasks   = Learning::where('is_statutory', 0)->whereNull('is_completed')->where('assign_from', Auth::id());
        $completed_tasks = Learning::where('is_statutory', 0)->whereNotNull('is_completed')->where('assign_from', Auth::id());

        if (is_array($request->user) && $request->user[0] != null) {
            $pending_tasks   = $pending_tasks->whereIn('assign_to', $request->user);
            $completed_tasks = $completed_tasks->whereIn('assign_to', $request->user);
        }

        if ($request->date != null) {
            $pending_tasks   = $pending_tasks->where('created_at', 'LIKE', "%$request->date%");
            $completed_tasks = $completed_tasks->where('created_at', 'LIKE', "%$request->date%");
        }

        $pending_tasks   = $pending_tasks->oldest()->paginate(Setting::get('pagination'));
        $completed_tasks = $completed_tasks->orderBy('is_completed', 'DESC')->paginate(Setting::get('pagination'), ['*'], 'completed-page');

        $users = Helpers::getUserArray(User::all());
        $user  = $request->user ?? [];
        $date  = $request->date ?? '';

        return view('learning-module.list', [
            'pending_tasks'   => $pending_tasks,
            'completed_tasks' => $completed_tasks,
            'users'           => $users,
            'user'            => $user,
            'date'            => $date,
        ]);
    }

    public function getremark(Request $request)
    {
        $id = $request->input('id');

        $task = Learning::find($id);

        echo $task->remark;
    }

    public function deleteTask(Request $request)
    {
        $id   = $request->input('id');
        $task = Learning::find($id);

        if ($task) {
            $task->remark = $request->input('comment');
            $task->save();

            $task->delete();
        }

        if ($request->ajax()) {
            return response()->json(['code' => 200]);
        }
    }

    public function archiveTask($id)
    {
        $task = Learning::find($id);

        $task->delete();

        if ($request->ajax()) {
            return response('success');
        }

        return redirect('/');
    }

    public function archiveTaskRemark($id)
    {
        $task            = Remark::find($id);
        $remark          = $task->remark;
        $task->delete_at = now();
        $task->update();

        return response(['success' => $remark], 200);
    }

    public function deleteStatutoryTask(Request $request)
    {
        $id   = $request->input('id');
        $task = SatutoryTask::find($id);
        $task->delete();

        return redirect()->back();
    }

    public function exportTask(Request $request)
    {
        $users = $request->input('selected_user');
        $from  = $request->input('range_start') . ' 00:00:00.000000';
        $to    = $request->input('range_end') . ' 23:59:59.000000';

        $tasks = (new Task())->newQuery()->withTrashed()->whereBetween('created_at', [$from, $to])->where('assign_from', '!=', 0)->where('assign_to', '!=', 0);

        if (! empty($users)) {
            $tasks = $tasks->whereIn('assign_to', $users);
        }

        $tasks_list = $tasks->get()->toArray();
        $tasks_csv  = [];
        $userList   = Helpers::getUserArray(User::all());

        for ($i = 0; $i < count($tasks_list); $i++) {
            $task_csv                    = [];
            $task_csv['id']              = $tasks_list[$i]['id'];
            $task_csv['SrNo']            = $i + 1;
            $task_csv['assign_from']     = $userList[$tasks_list[$i]['assign_from']];
            $task_csv['assign_to']       = $userList[$tasks_list[$i]['assign_to']];
            $task_csv['type']            = $tasks_list[$i]['is_statutory'] == 1 ? 'Statutory' : 'Other';
            $task_csv['task_subject']    = $tasks_list[$i]['task_subject'];
            $task_csv['task_details']    = $tasks_list[$i]['task_details'];
            $task_csv['completion_date'] = $tasks_list[$i]['completion_date'];
            $task_csv['remark']          = $tasks_list[$i]['remark'];
            $task_csv['completed_on']    = $tasks_list[$i]['is_completed'];
            $task_csv['created_on']      = $tasks_list[$i]['created_at'];

            array_push($tasks_csv, $task_csv);
        }

        return view('learning-module.export')->withTasks($tasks_csv);
    }

    public function outputCsv($fileName, $assocDataArray)
    {
        header('Pragma: public');
        header('Expires: 0');
        header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
        header('Cache-Control: private', false);
        header('Content-Type: text/csv');
        header('Content-Disposition: attachment;filename=' . $fileName);
        if (isset($assocDataArray['0'])) {
            $fp = fopen('php://output', 'w');
            fputcsv($fp, array_keys($assocDataArray['0']));
            foreach ($assocDataArray as $values) {
                fputcsv($fp, $values);
            }
            fclose($fp);
        }
    }

    public static function getClasses($task)
    {
        $classes = ' ';
        $classes .= ' ' . ((empty($task) && $task->assign_from == Auth::user()->id) ? 'mytask' : '') . ' ';
        $classes .= ' ' . ((empty($task) && time() > strtotime($task->completion_date . ' 23:59:59')) ? 'isOverdue' : '') . ' ';

        $task_status = empty($task) ? Helpers::statusClass($task->assign_status) : '';

        $classes .= $task_status;

        return $classes;
    }

    public function recurringTask()
    {
        $statutory_tasks = SatutoryTask::all()->toArray();

        foreach ($statutory_tasks as $statutory_task) {
            switch ($statutory_task['recurring_type']) {
                case 'EveryDay':
                    self::createTasksFromSatutary($statutory_task);
                    break;

                case 'EveryWeek':
                    if ($statutory_task['recurring_day'] == date('D')) {
                        self::createTasksFromSatutary($statutory_task);
                    }
                    break;

                case 'EveryMonth':
                    if ($statutory_task['recurring_day'] == date('d')) {
                        self::createTasksFromSatutary($statutory_task);
                    }
                    break;

                case 'EveryYear':
                    $dayNdate = date('d-n', strtotime($statutory_task['recurring_day']));
                    if ($dayNdate == date('d-n')) {
                        self::createTasksFromSatutary($statutory_task);
                    }
                    break;
            }
        }
    }

    public static function createTasksFromSatutary($statutory_task)
    {
        $statutory_task['is_statutory'] = 1;
        $statutory_task['statutory_id'] = $statutory_task['id'];
        $task                           = Learning::create($statutory_task);
    }

    public function getTaskRemark(Request $request)
    {
        $id = $request->input('id');

        if (is_null($request->module_type)) {
            $remark = \App\Learning::getremarks($id);
        } else {
            $remark = Remark::where('module_type', $request->module_type)->where('taskid', $id)->get();
        }

        return response()->json($remark, 200);
    }

    public function addWhatsAppGroup(Request $request)
    {
        $whatsapp_number = '971562744570';
        $task            = Learning::findorfail($request->id);

        // Yogesh Sir Number
        $admin_number  = User::findorfail(6);
        $assigned_from = Helpers::getUserArray(User::where('id', $task->assign_from)->get());
        $assigned_to   = Helpers::getUserArray(User::where('id', $task->assign_to)->get());
        $task_id       = $task->id;

        //Check if task id is present in Whats App Group
        $group = WhatsAppGroup::where('task_id', $task_id)->first();

        if ($group == null) {
            //First Create Group Using Admin id
            $phone  = $admin_number->phone;
            $result = app(\App\Http\Controllers\WhatsAppController::class)->createGroup($task_id, '', $phone, '', $whatsapp_number);
            if (isset($result['chatId']) && $result['chatId'] != null) {
                $task_id = $task_id;
                $chatId  = $result['chatId'];
                //Create Group
                $group           = new WhatsAppGroup;
                $group->task_id  = $task_id;
                $group->group_id = $chatId;
                $group->save();
                //Save Whats App Group With Reference To Group ID
                $group_number           = new WhatsAppGroupNumber;
                $group_number->group_id = $group->id;
                $group_number->user_id  = $admin_number->id;
                $group_number->save();
                //Chat Message
                $params['task_id']  = $task_id;
                $params['group_id'] = $group->id;
                ChatMessage::create($params);
            } else {
                $group           = new WhatsAppGroup;
                $group->task_id  = $task_id;
                $group->group_id = null;
                $group->save();

                $group_number           = new WhatsAppGroupNumber;
                $group_number->group_id = $group->id;
                $group_number->user_id  = $admin_number->id;
                $group_number->save();

                $params['task_id']      = $task_id;
                $params['group_id']     = $group->id;
                $params['error_status'] = 1;
                ChatMessage::create($params);
            }
        }

        //iF assigned from is different from Yogesh Sir
        if ($admin_number->id != array_keys($assigned_from)[0]) {
            $request->request->add(['group_id' => $group->id, 'user_id' => array_keys($assigned_from), 'task_id' => $task->id, 'whatsapp_number' => $whatsapp_number]);

            $this->addGroupParticipant(request());
        }

        //Add Assigned To Into Whats App Group
        if (array_keys($assigned_to)[0] != null) {
            $request->request->add(['group_id' => $group->id, 'user_id' => array_keys($assigned_to), 'task_id' => $task->id, 'whatsapp_number' => $whatsapp_number]);

            $this->addGroupParticipant(request());
        }

        return response()->json(['group_id' => $group->id]);
    }

    public function addGroupParticipant(Request $request)
    {
        $whatsapp_number = '971562744570';
        //Now Add Participant In the Group

        foreach ($request->user_id as $key => $value) {
            $check = WhatsAppGroupNumber::where('group_id', $request->group_id)->where('user_id', $value)->first();
            if ($check == null) {
                $user   = User::findorfail($value);
                $group  = WhatsAppGroup::where('task_id', $request->task_id)->first();
                $phone  = $user->phone;
                $result = app(\App\Http\Controllers\WhatsAppController::class)->createGroup('', $group->group_id, $phone, '', $whatsapp_number);
                if (isset($result['add']) && $result['add'] != null) {
                    $task_id = $request->task_id;

                    $group_number           = new WhatsAppGroupNumber;
                    $group_number->group_id = $request->group_id;
                    $group_number->user_id  = $user->id;
                    $group_number->save();
                    $params['user_id']  = $user->id;
                    $params['task_id']  = $task_id;
                    $params['group_id'] = $request->group_id;
                    ChatMessage::create($params);
                } else {
                    $task_id = $request->task_id;

                    $group_number           = new WhatsAppGroupNumber;
                    $group_number->group_id = $request->group_id;
                    $group_number->user_id  = $user->id;
                    $group_number->save();
                    $params['user_id']      = $user->id;
                    $params['task_id']      = $task_id;
                    $params['group_id']     = $request->group_id;
                    $params['error_status'] = 1;
                    ChatMessage::create($params);
                }
            }
        }

        return redirect()->back()->with('message', 'Participants Added To Group');
    }

    public function getDetails(Request $request)
    {
        $task = \App\Learning::where('id', $request->get('task_id', 0))->first();

        if ($task) {
            return response()->json(['code' => 200, 'data' => $task]);
        }

        return response()->json(['code' => 500, 'message' => 'Sorry, no task found']);
    }

    public function saveNotes(Request $request)
    {
        $task = \App\Learning::where('id', $request->get('task_id', 0))->first();

        if ($task) {
            if ($task->is_statutory == 3) {
                foreach ($request->note as $note) {
                    if ($note != null) {
                        Remark::create([
                            'taskid'      => $task->id,
                            'remark'      => $note,
                            'module_type' => 'task-note',
                        ]);
                    }
                }
            }

            return response()->json(['code' => 200, 'data' => $task, 'message' => 'Note added!']);
        }

        return response()->json(['code' => 500, 'message' => 'Sorry, no task found']);
    }

    public function createLearningFromSortcut(Request $request)
    {
        $created        = 0;
        $message        = '';
        $assignedUserId = 0;
        $data           = $request->except('_token');

        Learning::create([
            'learning_user'       => $request->learning_user,
            'learning_vendor'     => $request->learning_vendor,
            'learning_subject'    => $request->learning_subject,
            'learning_module'     => $request->learning_module,
            'learning_submodule'  => $request->learning_submodule,
            'learning_assignment' => $request->learning_assignment,
            'learning_duedate'    => $request->learning_duedate,
            'learning_status'     => $request->learning_status,
        ]);

        $created = 1;

        return redirect()->route('learning.index');
    }

    public function getDiscussionSubjects()
    {
        $discussion_subjects = Learning::where('is_statutory', 3)->where('is_verified', null)->pluck('task_subject', 'id')->toArray();

        return response()->json(['code' => 200, 'discussion_subjects' => $discussion_subjects]);
    }

    /***
     * Delete task note
     */
    public function deleteTaskNote(Request $request)
    {
        $task = Remark::whereId($request->note_id)->delete();
        session()->flash('success', 'Deleted successfully.');

        return response(['success' => 'Deleted'], 200);
    }

    /**
     * Hide task note from list
     */
    public function hideTaskRemark(Request $request)
    {
        $task = Remark::whereId($request->note_id)->update(['is_hide' => 1]);
        session()->flash('success', 'Hide successfully.');

        return response(['success' => 'Hidden'], 200);
    }

    public function assignMasterUser(Request $request)
    {
        $masterUserId = $request->get('master_user_id');
        $issue        = Learning::find($request->get('issue_id'));

        $user = User::find($masterUserId);

        if (! $user) {
            return response()->json([
                'status' => 'success', 'message' => 'user not found',
            ], 500);
        }

        $issue->master_user_id = $masterUserId;

        $issue->save();

        $hubstaff_project_id = config('env.HUBSTAFF_BULK_IMPORT_PROJECT_ID');

        $assignedUser = HubstaffMember::where('user_id', $masterUserId)->first();

        $hubstaffUserId = null;
        if ($assignedUser) {
            $hubstaffUserId = $assignedUser->hubstaff_user_id;
        }
        $message = '#' . $issue->id . '. ' . $issue->task_subject . '. ' . $issue->task_details;
        $summary = substr($message, 0, 200);

        $hubstaffTaskId = $this->createHubstaffTask(
            $summary,
            $hubstaffUserId,
            $hubstaff_project_id
        );
        if ($hubstaffTaskId) {
            $issue->lead_hubstaff_task_id = $hubstaffTaskId;
            $issue->save();
        }
        if ($hubstaffTaskId) {
            $task                      = new HubstaffTask();
            $task->hubstaff_task_id    = $hubstaffTaskId;
            $task->project_id          = $hubstaff_project_id;
            $task->hubstaff_project_id = $hubstaff_project_id;
            $task->summary             = $message;
            $task->save();
        }

        return response()->json([
            'status' => 'success',
        ]);
    }

    public function uploadDocuments(Request $request)
    {
        $path = storage_path('tmp/uploads');

        if (! file_exists($path)) {
            mkdir($path, 0777, true);
        }

        $file = $request->file('file');

        $name = uniqid() . '_' . trim($file->getClientOriginalName());

        $file->move($path, $name);

        return response()->json([
            'name'          => $name,
            'original_name' => $file->getClientOriginalName(),
        ]);
    }

    public function saveDocuments(Request $request)
    {
        if (! $request->learning_id || $request->learning_id == '') {
            return response()->json(['code' => 500, 'data' => [], 'message' => 'Select one learning']);
        }
        $documents = $request->input('document', []);
        $learning  = Learning::find($request->learning_id);
        if (! empty($documents)) {
            $count = 0;
            foreach ($request->input('document', []) as $file) {
                $path  = storage_path('tmp/uploads/' . $file);
                $media = MediaUploader::fromSource($path)
                    ->toDirectory('learning-files/' . floor($learning->id / config('constants.image_per_folder')))
                    ->upload();
                $learning->attachMedia($media, config('constants.media_tags'));
                $count++;
            }

            return response()->json(['code' => 200, 'data' => [], 'message' => 'Done!']);
        } else {
            return response()->json(['code' => 500, 'data' => [], 'message' => 'No documents for upload']);
        }
    }

    public function previewTaskImage($id)
    {
        $task    = Learning::find($id);
        $records = [];
        if ($task) {
            $userList = User::pluck('name', 'id')->all();
            if ($task->hasMedia(config('constants.attach_image_tag'))) {
                foreach ($task->getMedia(config('constants.attach_image_tag')) as $media) {
                    $imageExtensions = ['jpg', 'jpeg', 'gif', 'png', 'bmp', 'svg', 'svgz', 'cgm', 'djv', 'djvu', 'ico', 'ief', 'jpe', 'pbm', 'pgm', 'pnm', 'ppm', 'ras', 'rgb', 'tif', 'tiff', 'wbmp', 'xbm', 'xpm', 'xwd'];
                    $explodeImage    = explode('.', getMediaUrl($media));
                    $extension       = end($explodeImage);

                    if (in_array($extension, $imageExtensions)) {
                        $isImage = true;
                    } else {
                        $isImage = false;
                    }
                    $records[] = [
                        'id'         => $media->id,
                        'url'        => getMediaUrl($media),
                        'task_id'    => $task->id,
                        'isImage'    => $isImage,
                        'userList'   => $userList,
                        'created_at' => $media->created_at,
                    ];
                }
            }
        }

        $records = array_reverse($records);
        $title   = 'Preview images';

        return view('learning-module.partials.preview-task-images', compact('title', 'records'));
    }

    public function approveTimeHistory(Request $request)
    {
        if (Auth::user()->isAdmin) {
            if (! $request->approve_time || $request->approve_time == '' || ! $request->developer_task_id || $request->developer_task_id == '') {
                return response()->json([
                    'message' => 'Select one time first',
                ], 500);
            }
            DeveloperTaskHistory::where('developer_task_id', $request->developer_task_id)->where('attribute', 'estimation_minute')->where('model', \App\Task::class)->update(['is_approved' => 0]);
            $history              = DeveloperTaskHistory::find($request->approve_time);
            $history->is_approved = 1;
            $history->save();

            return response()->json([
                'message' => 'Success',
            ], 200);
        }

        return response()->json([
            'message' => 'Only admin can approve',
        ], 500);
    }

    public function getTrackedHistory(Request $request)
    {
        $id   = $request->id;
        $type = $request->type;
        if ($type == 'lead') {
            $task_histories = DB::select(DB::raw('SELECT hubstaff_activities.task_id,cast(hubstaff_activities.starts_at as date) as starts_at_date,sum(hubstaff_activities.tracked) as total_tracked,learnings.master_user_id,users.name FROM `hubstaff_activities`  join learnings on learnings.lead_hubstaff_task_id = hubstaff_activities.task_id join users on users.id = learnings.master_user_id where learnings.id = ' . $id . ' group by starts_at_date'));
        } else {
            $task_histories = DB::select(DB::raw('SELECT hubstaff_activities.task_id,cast(hubstaff_activities.starts_at as date) as starts_at_date,sum(hubstaff_activities.tracked) as total_tracked,learnings.assign_to,users.name FROM `hubstaff_activities`  join learnings on learnings.hubstaff_task_id = hubstaff_activities.task_id join users on users.id = learnings.assign_to where learnings.id = ' . $id . ' group by starts_at_date'));
        }

        return response()->json(['histories' => $task_histories]);
    }

    public function updateTaskDueDate(Request $request)
    {
        if ($request->type == 'TASK') {
            $task = Learning::find($request->task_id);
            if ($request->date) {
                $task->update(['due_date' => $request->date]);
            }
        } else {
            if ($request->date) {
                DeveloperTask::where('id', $request->task_id)
                    ->update(['due_date' => $request->date]);
            }
        }

        return response()->json([
            'message' => 'Successfully updated',
        ], 200);
    }

    public function createHubstaffManualTask(Request $request)
    {
        $task = Learning::find($request->id);
        if ($task) {
            if ($request->type == 'developer') {
                $user_id = $task->assign_to;
            } else {
                $user_id = $task->master_user_id;
            }
            $hubstaff_project_id = config('env.HUBSTAFF_BULK_IMPORT_PROJECT_ID');

            $assignedUser = HubstaffMember::where('user_id', $user_id)->first();

            $hubstaffUserId = null;
            if ($assignedUser) {
                $hubstaffUserId = $assignedUser->hubstaff_user_id;
            }
            $taskSummery = '#' . $task->id . '. ' . $task->task_subject;
            if ($hubstaffUserId) {
                $hubstaffTaskId = $this->createHubstaffTask(
                    $taskSummery,
                    $hubstaffUserId,
                    $hubstaff_project_id
                );
            } else {
                return response()->json([
                    'message' => 'Hubstaff member not found',
                ], 500);
            }
            if ($hubstaffTaskId) {
                if ($request->type == 'developer') {
                    $task->hubstaff_task_id = $hubstaffTaskId;
                } else {
                    $task->lead_hubstaff_task_id = $hubstaffTaskId;
                }
                $task->save();
            } else {
                return response()->json([
                    'message' => 'Hubstaff task not created',
                ], 500);
            }
            if ($hubstaffTaskId) {
                $task                      = new HubstaffTask();
                $task->hubstaff_task_id    = $hubstaffTaskId;
                $task->project_id          = $hubstaff_project_id;
                $task->hubstaff_project_id = $hubstaff_project_id;
                $task->summary             = $taskSummery;
                $task->save();
            }

            return response()->json([
                'message' => 'Successful',
            ], 200);
        } else {
            return response()->json([
                'message' => 'Task not found',
            ], 500);
        }
    }

    public function getTaskCategories()
    {
        $categories = LearningModule::where('is_approved', 1)->get();

        return view('learning-module.partials.all-task-category', compact('categories'));
    }

    public function completeBulkTasks(Request $request)
    {
        if (count($request->selected_tasks) > 0) {
            foreach ($request->selected_tasks as $t) {
                $task               = Learning::find($t);
                $task->is_completed = date('Y-m-d H:i:s');
                $task->is_verified  = date('Y-m-d H:i:s');
                if ($task->assignedTo) {
                    if ($task->assignedTo->fixed_price_user_or_job == 1) {
                        // Fixed price task.
                        continue;
                    }
                }
                $task->save();
            }
        }

        return response()->json(['message' => 'Successful']);
    }

    public function deleteBulkTasks(Request $request)
    {
        if (count($request->selected_tasks) > 0) {
            foreach ($request->selected_tasks as $t) {
                $task = Learning::where('id', $t)->delete();
            }
        }

        return response()->json(['message' => 'Successful']);
    }

    public function getTimeHistory(Request $request)
    {
        $id          = $request->id;
        $task_module = DeveloperTaskHistory::join('users', 'users.id', 'developer_tasks_history.user_id')->where('developer_task_id', $id)->where('model', \App\Task::class)->where('attribute', 'estimation_minute')->select('developer_tasks_history.*', 'users.name')->get();
        if ($task_module) {
            return $task_module;
        }

        return 'error';
    }

    public function sendDocument(Request $request)
    {
        if ($request->id != null && $request->user_id != null) {
            $media = \Plank\Mediable\Media::find($request->id);
            $user  = \App\User::find($request->user_id);
            if ($user) {
                if ($media) {
                    \App\ChatMessage::sendWithChatApi(
                        $user->phone,
                        null,
                        'Please find attached file',
                        getMediaUrl($media)
                    );

                    return response()->json(['message' => 'Document send succesfully'], 200);
                }
            } else {
                return response()->json(['message' => 'User  not available'], 500);
            }
        }

        return response()->json(['message' => 'Sorry required fields is missing like id , userid'], 500);
    }

    /* update task status
     */

    public function updateStatus(Request $request)
    {
        try {
            $task = Learning::find($request->task_id);

            $task->status = $request->status;

            $task->save();

            return response()->json([
                'status' => 'success', 'message' => 'The task status updated.',
            ], 200);
        } catch (Exception $e) {
            return response()->json([
                'status' => 'error', 'message' => 'The task status not updated.',
            ], 500);
        }
    }

    /* create new task status */

    public function createStatus(Request $request)
    {
        $this->validate($request, ['task_status' => 'required']);

        try {
            TaskStatus::create(['name' => $request->task_status]);

            return redirect()->back()->with('success', 'The task status created successfully.');
        } catch (Exception $e) {
            return redirect()->back()->with('error', $e->getMessage());
        }
    }

    public function learningModuleUpdate(Request $request)
    {
        $id       = $request->id;
        $learning = Learning::find($id);
        if ($request->user_id) {
            $learning->learning_user = $request->user_id;
            $learning->save();

            return response()->json(['message' => 'User Updated Successfully']);
        }

        if ($request->provider_id) {
            $learning->learning_vendor = $request->provider_id;
            $learning->save();

            return response()->json(['message' => 'provider Updated Successfully']);
        }

        if ($request->subject) {
            $learning->learning_subject = $request->subject;
            $learning->save();

            return response()->json(['message' => 'Subject Updated Successfully']);
        }

        if ($request->module_id) {
            $learning->learning_module    = $request->module_id;
            $learning->learning_submodule = null;
            $learning->save();
            $submodule = LearningModule::where('parent_id', $learning->learning_module)->get();

            return response()->json(['message' => 'Module Updated Successfully', 'learning_id' => $learning->id, 'submodule' => $submodule]);
        }

        if ($request->submodule_id) {
            $learning->learning_submodule = $request->submodule_id;
            $learning->save();

            return response()->json(['message' => 'Submodule Updated Successfully']);
        }

        if ($request->assignment) {
            $learning->learning_assignment = $request->assignment;
            $learning->save();

            return response()->json(['message' => 'Assignment Updated Successfully']);
        }

        if ($request->status_id) {
            LearningStatusHistory::create([
                'learning_id' => $learning->id,
                'old_status'  => $learning->learning_status ?? 0,
                'new_status'  => $request->status_id,
                'update_by'   => $request->user()->id,
            ]);

            $learning->learning_status = $request->status_id;
            $learning->save();
            $s = TaskStatus::where('name', 'completed')->first();
            if ($s) {
                if ($s->id == $request->status_id) {
                    $payment_receipt                 = new PaymentReceipt;
                    $payment_receipt->date           = date('Y-m-d');
                    $payment_receipt->worked_minutes = 0;
                    $payment_receipt->rate_estimated = $learning->cost;
                    $payment_receipt->status         = 'Pending';
                    $payment_receipt->task_id        = $learning->id;
                    $payment_receipt->user_id        = $learning->assign_to;
                    $payment_receipt->save();
                }
            }

            return response()->json(['message' => 'Status Updated Successfully']);
        }
    }

    public function getStatusHistory(Request $request)
    {
        $learningid = $request->learningid;

        $records = LearningStatusHistory::with('oldstatus', 'newstatus', 'user')
            ->where('learning_id', $learningid)
            ->latest()
            ->get();

        if ($records) {
            $response = [];
            foreach ($records as $row) {
                $response[] = [
                    'created_date' => $row->created_at->format('Y-m-d'),
                    'old_status'   => optional($row->oldstatus)->name ?? '-',
                    'new_status'   => optional($row->newstatus)->name ?? '-',
                    'update_by'    => $row->user->name,
                ];
            }

            return $response;
        }

        return 'error';
    }

    public function saveDueDateUpdate(Request $request)
    {
        $learning = Learning::find($request->get('learningid'));
        $due_date = date('Y-m-d', strtotime($request->due_date));
        if ($learning && $request->due_date) {
            LearningDueDateHistory::create([
                'learning_id' => $learning->id,
                'old_duedate' => $learning->learning_duedate ?? 0,
                'new_duedate' => $due_date,
                'update_by'   => $request->user()->id,
            ]);
        }

        $learning->learning_duedate = $due_date;
        $learning->save();

        return response()->json([
            'status' => 'success',
        ]);
    }

    public function getDueDateHistory(Request $request)
    {
        $learningid = $request->learningid;

        $records = LearningDueDateHistory::with('user')
            ->where('learning_id', $learningid)
            ->latest()
            ->get();

        if ($records) {
            $response = [];
            foreach ($records as $row) {
                $response[] = [
                    'created_date' => $row->created_at->format('Y-m-d'),
                    'old_duedate'  => $row->old_duedate ?? '-',
                    'new_duedate'  => $row->new_duedate ?? '-',
                    'update_by'    => $row->user->name,
                ];
            }

            return $response;
        }

        return 'error';
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/MasterDevTaskController.php 
Content: <?php

namespace App\Http\Controllers;

use App\Scraper;
use App\MemoryUsage;
use App\ScraperProcess;
use Illuminate\Http\Request;
use App\Library\Github\GithubClient;
use Laravel\Horizon\Contracts\JobRepository;

class MasterDevTaskController extends Controller
{
    public function index(Request $request)
    {
        $enddate   = date('Y-m-d 23:59:59');
        $startdate = date('Y-m-d 00:00:00', strtotime('-7 day', strtotime($enddate)));

        $productErrors = \App\ProductPushErrorLog::latest('count')->groupBy('message')->select(\DB::raw('*,COUNT(message) AS count'));
        $productErrors->whereDate('created_at', '>=', $startdate)->whereDate('created_at', '<=', $enddate);
        $productErrors->where('response_status', '!=', 'success');
        $productErrors = $productErrors->get();

        $memory_use = MemoryUsage::whereDate('created_at', now()->format('Y-m-d'))
            ->orderBy('used', 'desc')
            ->first();

        $currentSize = \DB::table('database_historical_records')->orderBy('created_at', 'desc')->first();
        $sizeBefore  = null;
        if (! empty($currentSize)) {
            $sizeBefore = \DB::table('database_historical_records')
                ->whereRaw(\DB::raw("DATE(created_at) = DATE('" . $currentSize->created_at . "' - INTERVAL 1 DAY)"))
                ->first();
        }

        $topFiveTables = \App\DatabaseTableHistoricalRecord::whereDate('created_at', date('Y-m-d'))->groupBy('database_name')->orderBy('size', 'desc')->limit(5)->get();
        // find the open branches
        $repoArr    = [];
        $github     = new GithubClient;
        $repository = $github->getRepository();

        if (! empty($repository)) {
            foreach ($repository as $i => $repo) {
                $repoId              = $repo->full_name;
                $pulls               = $github->getPulls($repoId, 'q=is%3Aopen+is%3Apr');
                $repoArr[$i]['name'] = $repoId;
                if (! empty($pulls)) {
                    foreach ($pulls as $pull) {
                        $repoArr[$i]['pulls'][] = [
                            'title' => $pull->title,
                            'no'    => $pull->number,
                            'url'   => $pull->html_url,
                            'user'  => $pull->user->login,
                        ];
                    }
                }
            }
        }
        $cronjobReports = null;

        $cronjobReports = \App\CronJob::join('cron_job_reports as cjr', 'cron_jobs.signature', 'cjr.signature')
            ->where('cjr.start_time', '>', \DB::raw('NOW() - INTERVAL 24 HOUR'))
            ->where('cron_jobs.last_status', 'error')
            ->groupBy('cron_jobs.signature')
            ->get();

        $scraper1hrsReports = null;
        $scraper1hrsReports = \App\CroppedImageReference::where('created_at', '>=', \DB::raw('DATE_SUB(NOW(),INTERVAL 1 HOUR)'))->select(
            [\DB::raw('count(*) as cnt')]
        )->first();
        $scraper24hrsReports = null;
        $scraper24hrsReports = \App\CroppedImageReference::where('created_at', '>=', \DB::raw('DATE_SUB(NOW(),INTERVAL 24 HOUR)'))->select(
            [\DB::raw('count(*) as cnt')]
        )->first();

        $last3HrsMsg  = null;
        $last24HrsMsg = null;

        $last3HrsMsg = \DB::table('chat_messages')->where('created_at', '>=', \DB::raw('DATE_SUB(NOW(),INTERVAL 3 HOUR)'))->select(
            [\DB::raw('count(*) as cnt')]
        )->first();

        $last24HrsMsg = \DB::table('chat_messages')->where('created_at', '>=', \DB::raw('DATE_SUB(NOW(),INTERVAL 24 HOUR)'))->select(
            [\DB::raw('count(*) as cnt')]
        )->first();

        $threehours      = strtotime(date('Y-m-d H:i:s', strtotime('-3 hours')));
        $twentyfourhours = strtotime(date('Y-m-d H:i:s', strtotime('-24 hours')));

        $last3HrsJobs = \DB::table('jobs')->where('created_at', '>=', $threehours)->select(
            [\DB::raw('count(*) as cnt')]
        )->first();

        $last24HrsJobs = \DB::table('jobs')->whereDate('created_at', '>=', $twentyfourhours)->select(
            [\DB::raw('count(*) as cnt')]
        )->first();

        // Get scrape data
        $sql = '
            SELECT
                s.id,
                s.supplier,
                COUNT(ls.id) AS total,
                SUM(IF(ls.validated=0,1,0)) AS failed,
                SUM(IF(ls.validated=1,1,0)) AS validated,
                SUM(IF(ls.validation_result LIKE "%[error]%",1,0)) AS errors
            FROM
                suppliers s
            JOIN
                scrapers sc
            ON 
                sc.supplier_id = s.id    
            JOIN
                scraped_products ls 
            ON  
                sc.scraper_name=ls.website
            WHERE
                ls.website != "internal_scraper" AND
                ls.last_inventory_at > DATE_SUB(NOW(), INTERVAL sc.inventory_lifetime DAY)
            ORDER BY
                sc.scraper_priority desc
        ';
        $scrapeData = \DB::select($sql);

        //DB Image size management#3118
        $projectDirectorySql = 'select * FROM `project_file_managers` where size > notification_at or display_dev_master = 1';

        $projectDirectoryData = \DB::select($projectDirectorySql);

        $logRequest = \App\LogRequest::where('status_code', '!=', 200)->whereDate('created_at', date('Y-m-d'))->groupBy('status_code')->select(['status_code', \DB::raw('count(*) as total_error')])->get();

        $failedJobs = app(JobRepository::class)->getFailed();

        $scraper_proc = [];

        $scraper_process = ScraperProcess::where('scraper_name', '!=', '')->orderBy('started_at', 'DESC')->get()->unique('scraper_id');
        foreach ($scraper_process as $key => $sp) {
            $to            = \Carbon\Carbon::createFromFormat('Y-m-d H:s:i', $sp->started_at);
            $from          = \Carbon\Carbon::now();
            $diff_in_hours = $to->diffInMinutes($from);
            if ($diff_in_hours > 1440) {
                array_push($scraper_proc, $sp);
            }
        }
        $scrapers = Scraper::where('scraper_name', '!=', '')->whereNotIn('id', $scraper_process->pluck('scraper_id'))->get();

        return view('master-dev-task.index', compact(
            'currentSize', 'sizeBefore', 'repoArr', 'cronjobReports', 'last3HrsMsg', 'last24HrsMsg', 'scrapeData', 'scraper1hrsReports', 'scraper24hrsReports', 'projectDirectoryData', 'last3HrsJobs', 'last24HrsJobs', 'topFiveTables', 'memory_use', 'logRequest', 'failedJobs', 'scraper_process', 'scrapers', 'productErrors'));
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/NewProductInventoryController.php 
Content: <?php

namespace App\Http\Controllers;

use App\Stage;
use App\Product;
use App\Category;
use App\UpteamLog;
use App\ColorReference;
use Illuminate\Http\Request;
use App\Library\Product\ProductSearch;
use App\Services\Scrap\GoogleImageScraper;

class NewProductInventoryController extends Controller
{
    public function __construct(private GoogleImageScraper $googleImageScraper)
    {
    }

    public function index(Stage $stage)
    {
        $category_selection = Category::attr(['name' => 'category[]', 'class' => 'form-control'])->selected(request('category'))->renderAsDropdown();
        $suppliersDropList  = \Illuminate\Support\Facades\DB::select('SELECT id, supplier FROM suppliers INNER JOIN (
                                    SELECT supplier_id FROM product_suppliers GROUP BY supplier_id
                                    ) as product_suppliers
                                ON suppliers.id = product_suppliers.supplier_id');

        $suppliersDropList = collect($suppliersDropList)->pluck('supplier', 'id')->toArray();
        $scrapperDropList  = \Illuminate\Support\Facades\DB::select('SELECT id, scraper_name FROM scrapers INNER JOIN (
            SELECT supplier_id FROM product_suppliers GROUP BY supplier_id
            ) as product_suppliers
        ON scrapers.supplier_id = product_suppliers.supplier_id');

        $scrapperDropList = collect($scrapperDropList)->pluck('scraper_name', 'id')->toArray();
        $typeList         = [
            'scraped'  => 'Scraped',
            'imported' => 'Imported',
            'uploaded' => 'Uploaded',
        ];

        $params = request()->all();

        $products = (new ProductSearch($params))
            ->getQuery()->with('scraped_products')->paginate(24);
        $productCount = (new ProductSearch($params))->getQuery()->count();
        $items        = [];
        foreach ($products->items() as $product) {
            $date               = date('Y-m-d', strtotime($product->created_at));
            $referencesCategory = '';
            $referencesColor    = '';
            if (isset($product->scraped_products)) {
                // starting to see that howmany category we going to update
                if (isset($product->scraped_products->properties) && isset($product->scraped_products->properties['category']) != null) {
                    $category = $product->scraped_products->properties['category'];
                    if (is_array($category)) {
                        $referencesCategory = implode(' > ', $category);
                    }
                }

                if (isset($product->scraped_products->properties) && isset($product->scraped_products->properties['color']) != null) {
                    $referencesColor = $product->scraped_products->properties['color'];
                }
            }
            $product->reference_category = $referencesCategory;
            $product->reference_color    = $referencesColor;

            $supplier_list = '';
            foreach ($product->suppliers as $key => $supplier) {
                $supplier_list .= $supplier->supplier;
            }

            $product->supplier_list = $supplier_list;

            if (isset($items[$date])) {
                $items[$date][] = $product;
            } else {
                $items[$date] = [$product];
            }
        }
        // move to the function
        $categoryAll = Category::with('childs.childLevelSencond')
            ->where('title', 'NOT LIKE', '%Unknown Category%')
            ->where('magento_id', '!=', '0')
            ->get();

        $categoryArray = [];
        foreach ($categoryAll as $category) {
            $categoryArray[] = ['id' => $category->id, 'value' => $category->title];
            $childs          = $category->childs;
            foreach ($childs as $child) {
                $categoryArray[] = ['id' => $child->id, 'value' => $category->title . ' > ' . $child->title];
                $grandChilds     = $child->childLevelSencond;
                if ($grandChilds != null) {
                    foreach ($grandChilds as $grandChild) {
                        $categoryArray[] = ['id' => $grandChild->id, 'value' => $category->title . ' > ' . $child->title . ' > ' . $grandChild->title];
                    }
                }
            }
        }
        $categoryArray = collect($categoryArray)->pluck('value', 'id')->toArray();
        $sampleColors  = ColorReference::select('erp_color')->groupBy('erp_color')->get()->pluck('erp_color', 'erp_color')->toArray();
        if (request()->ajax()) {
            return view('product-inventory.partials.load-more', compact('products', 'productCount', 'items', 'categoryArray', 'sampleColors', 'scrapperDropList'));
        }

        return view('product-inventory.index', compact('category_selection', 'productCount', 'suppliersDropList', 'typeList', 'products', 'items', 'categoryArray', 'sampleColors', 'scrapperDropList'));
    }

    public function autoSuggestSku(Request $request)
    {
        $term = $request->input('term');

        // Adjusted the 'like' clause to match terms that start with the provided input
        $autosuggestions = Product::where('sku', 'like', $term . '%')->paginate(10)->pluck('sku');

        return response()->json($autosuggestions);
    }

    public function upteamLogs(Request $request)
    {
        if (($request->upteam_log && $request->upteam_log != null) && ($request->from_date != '' && $request->to_date != '')) {
            $logs = UpteamLog::where('log_description', 'LIKE', '%' . $request->upteam_log . '%')->whereBetween('created_at', [$request->from_date, $request->to_date])->orderBy('id', 'desc')->paginate(30);
        } elseif ($request->upteam_log && $request->upteam_log != '') {
            $logs = UpteamLog::where('log_description', 'LIKE', '%' . $request->upteam_log . '%')->orderBy('id', 'desc')->paginate(30);
        } elseif ($request->from_date != '' && $request->to_date != '') {
            $logs = UpteamLog::whereBetween('created_at', [$request->from_date, $request->to_date])->orderBy('id', 'desc')->paginate(30);
        } else {
            $logs = UpteamLog::orderBy('id', 'desc')->paginate(30);
        }

        return view('product-inventory.upteam_logs', compact('logs'));
    }

    public function pushInStore(Request $request)
    {
        if (! empty($request->product_ids)) {
            if (is_array($request->product_ids)) {
                foreach ($request->product_ids as $productId) {
                    $product = \App\Product::find($productId);
                    if ($product) {
                        // check status if not cropped then send to the cropper first
                        if ($product->status_id != \App\Helpers\StatusHelper::$finalApproval) {
                            $product->scrap_priority = 1;
                        } else {
                            $product->scrap_priority = 0;
                        }
                        // save product
                        $product->save();
                        \App\LandingPageProduct::updateOrCreate(
                            ['product_id' => $productId],
                            ['product_id' => $productId, 'name' => $product->name, 'description' => $product->description, 'price' => $product->price]
                        );
                    }
                }

                return response()->json(['code' => 200, 'data' => [], 'message' => 'Product updated Successfully']);
            }
        }

        return response()->json(['code' => 200, 'data' => [], 'message' => 'No product ids found']);
    }

    public function fetchImgGoogle(Request $request)
    {
        if (empty($request->get('name'))) {
            return back()->with('error', 'Product name is required');
        }

        $q  = $request->get('name');
        $id = $request->get('id');

        $googleData = $this->googleImageScraper->scrapGoogleImages($q, 'lifestyle', 10);

        if ($googleData) {
            $requestData = new Request();
            $requestData->setMethod('POST');
            $requestData->request->add([
                'data'       => $googleData,
                'product_id' => $id,
            ]);
            app(\App\Http\Controllers\ScrapController::class)->downloadImages($requestData);

            return back()->with('message', 'Images has been saved on lifestyle grid');
        }

        return back()->with('error', 'No any images found on google');
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/OrderController.php 
Content: <?php

namespace App\Http\Controllers;

use Auth;
use Cache;
use Session;
use Storage;
use App\Task;
use App\User;
use App\Email;
use App\Order;
use App\Reply;
use App\Refund;
use SoapClient;
use App\Comment;
use App\Helpers;
use App\Invoice;
use App\Message;
use App\Product;
use App\Setting;
use App\Waybill;
use App\Category;
use App\Customer;
use App\AutoReply;
use Carbon\Carbon;
use Dompdf\Dompdf;
use App\CallHistory;
use App\ChatMessage;
use App\OrderReport;
use App\OrderStatus;
use App\TwilioAgent;
use App\EmailAddress;
use App\OrderProduct;
use App\StatusChange;
use App\StoreWebsite;
use App\CallRecording;
use App\CreditHistory;
use App\OrderErrorLog;
use App\ReplyCategory;
use App\StatusMapping;
use App\CallBusyMessage;
use App\DeliveryApproval;
use App\Mail\ViewInvoice;
use App\Mail\OrderInvoice;
use App\StoreMasterStatus;
use App\StoreWebsiteOrder;
use App\TwilioDequeueCall;
use App\OrderStatusHistory;
use App\Store_order_status;
use App\TwilioActiveNumber;
use Illuminate\Support\Arr;
use App\Events\OrderUpdated;
use App\Helpers\OrderHelper;
use App\MailinglistTemplate;
use App\Models\InvoiceLater;
use Illuminate\Http\Request;
use App\CommunicationHistory;
use App\Mail\OrderStatusMail;
use App\OrderCustomerAddress;
use App\OrderMagentoErrorLog;
use App\PurchaseProductOrder;
use App\CallBusyMessageStatus;
use App\waybillTrackHistories;
use App\Models\DataTableColumn;
use App\EmailCommonExceptionLog;
use App\OrderEmailSendJourneyLog;
use App\StoreWebsiteTwilioNumber;
use App\StoreOrderStatusesHistory;
use App\Library\DHL\GetRateRequest;
use App\MailinglistTemplateCategory;
use App\Mails\Manual\AdvanceReceipt;
use Illuminate\Support\Facades\Mail;
use App\Mails\Manual\RefundProcessed;
use App\OrderStatus as OrderStatuses;
use App\Mails\Manual\AdvanceReceiptPDF;
use App\Mails\Manual\OrderConfirmation;
use App\Jobs\UpdateOrderStatusMessageTpl;
use App\Library\DHL\TrackShipmentRequest;
use Illuminate\Database\Eloquent\Builder;
use App\Library\DHL\CreateShipmentRequest;
use Illuminate\Pagination\LengthAwarePaginator;
use seo2websites\MagentoHelper\MagentoHelperv2;
use App\Models\OrderStatusMagentoRequestResponseLog;
use Plank\Mediable\Facades\MediaUploader as MediaUploader;

class OrderController extends Controller
{
    /**
     * @param Request $request
     *                         Generate the PDf for the orders list page
     */
    public function downloadOrderInPdf(Request $request)
    {
        $term         = $request->input('term');
        $order_status = $request->status ?? [''];
        $date         = $request->date ?? '';

        if ($request->input('orderby') == '') {
            $orderby = 'DESC';
        } else {
            $orderby = 'ASC';
        }

        switch ($request->input('sortby')) {
            case 'type':
                $sortby = 'order_type';
                break;
            case 'date':
                $sortby = 'order_date';
                break;
            case 'order_handler':
                $sortby = 'sales_person';
                break;
            case 'client_name':
                $sortby = 'client_name';
                break;
            case 'status':
                $sortby = 'order_status_id';
                break;
            case 'advance':
                $sortby = 'advance_detail';
                break;
            case 'balance':
                $sortby = 'balance_amount';
                break;
            case 'action':
                $sortby = 'action';
                break;
            case 'due':
                $sortby = 'due';
                break;
            case 'communication':
                $sortby = 'communication';
                break;
            default:
                $sortby = 'order_date';
        }

        // Create query
        $orders = (new Order())->newQuery()->with('customer');

        if (empty($term)) {
            $orders = $orders;
        } else {
            // AN order should have customer, if term is filled
            $orders = $orders->whereHas('customer', function ($query) use ($term) {
                return $query->where('name', 'LIKE', "%$term%");
            })
                ->orWhere('order_id', 'like', '%' . $term . '%')
                ->orWhere('order_type', $term)
                ->orWhere('sales_person', Helpers::getUserIdByName($term))
                ->orWhere('received_by', Helpers::getUserIdByName($term))
                ->orWhere('client_name', 'like', '%' . $term . '%')
                ->orWhere('city', 'like', '%' . $term . '%')
                ->orWhere('order_status_id', (new \App\ReadOnly\OrderStatus())->getIDCaseInsensitive($term));
        }

        if ($order_status[0] != '') {
            $orders = $orders->whereIn('order_status_id', $order_status);
        }

        if ($date != '') {
            $orders = $orders->where('order_date', $date);
        }

        $users             = Helpers::getUserArray(User::all());
        $order_status_list = (new OrderStatus)->all();

        // also sort by communication action and due
        if ($sortby != 'communication' && $sortby != 'action' && $sortby != 'due') {
            $orders = $orders->orderBy('is_priority', 'DESC')->orderBy($sortby, $orderby);
        } else {
            $orders = $orders->orderBy('is_priority', 'DESC')->orderBy('created_at', 'DESC');
        }

        $orders_array = $orders->paginate(500);

        // load the view for pdf and after that load that into dompdf instance, and then stream (download) the pdf
        $html = view('orders.index_pdf', compact('orders_array', 'users', 'term', 'orderby', 'order_status_list', 'order_status', 'date'));
        $pdf  = new Dompdf();
        $pdf->loadHtml($html);
        $pdf->render();
        $pdf->stream('orders.pdf');
    }

    public function downloadOrderMailPdf(Request $request)
    {
        if (! empty($request->email_id)) {
            $email = Email::where('id', $request->email_id)->first();
        } else {
            $order = Order::where('id', $request->order_id)->first();
            $email = Email::where('model_id', $order->id)->where('model_type', \App\Order::class)->orderBy('id', 'desc')->first();
        }

        if ($email) {
            $content = $email->message;
        } else {
            $content = 'No Email found';
        }

        // load the view for pdf and after that load that into dompdf instance, and then stream (download) the pdf
        $html       = view('orders.order_mail', compact('content'));
        $pdf        = new Dompdf();
        $paper_size = [0, 0, 700, 1080];
        $pdf->set_paper($paper_size);
        $pdf->loadHtml($html->render());
        $pdf->render();
        $pdf->stream('orderMail.pdf');
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request)
    {
        $term                    = $request->input('term');
        $advance_detail          = $request->input('advance_detail');
        $balance_amount          = $request->input('balance_amount');
        $order_status            = $request->status ?? [''];
        $date                    = $request->date ?? '';
        $estimated_delivery_date = $request->estimated_delivery_date ?? '';
        $brandList               = \App\Brand::all()->pluck('name', 'id')->toArray();
        $brandIds                = array_filter($request->get('brand_id', []));
        $registerSiteList        = StoreWebsite::pluck('website', 'id')->toArray();
        $fromdatadefault         = [
            'street'       => config('dhl.shipper.street'),
            'city'         => config('dhl.shipper.city'),
            'postal_code'  => config('dhl.shipper.postal_code'),
            'country_code' => config('dhl.shipper.country_code'),
            'person_name'  => config('dhl.shipper.person_name'),
            'company_name' => config('dhl.shipper.company_name'),
            'phone'        => config('dhl.shipper.phone'),
        ];
        if ($request->input('orderby') == '') {
            $orderby = 'DESC';
        } else {
            $orderby = 'ASC';
        }

        switch ($request->input('sortby')) {
            case 'type':
                $sortby = 'order_type';
                break;
            case 'date':
                $sortby = 'order_date';
                break;
            case 'estdeldate':
                $sortby = 'estimated_delivery_date';
                break;
            case 'order_handler':
                $sortby = 'sales_person';
                break;
            case 'client_name':
                $sortby = 'client_name';
                break;
            case 'status':
                $sortby = 'order_status_id';
                break;
            case 'advance':
                $sortby = 'advance_detail';
                break;
            case 'balance':
                $sortby = 'balance_amount';
                break;
            case 'action':
                $sortby = 'action';
                break;
            case 'due':
                $sortby = 'due';
                break;
            case 'communication':
                $sortby = 'communication';
                break;
            default:
                $sortby = 'order_date';
        }

        $orders = (new Order())->newQuery()->with('customer')->leftJoin('store_website_orders as swo', 'swo.order_id', 'orders.id');

        if (empty($term)) {
            $orders = $orders;
        } else {
            $orders = $orders->whereHas('customer', function ($query) use ($term) {
                return $query->where('name', 'LIKE', '%' . $term . '%')
                    ->orWhere('id', 'LIKE', '%' . $term . '%')
                    ->orWhere('email', 'LIKE', '%' . $term . '%');
            })
                ->orWhere('orders.order_id', 'like', '%' . $term . '%')
                ->orWhere('order_type', $term)
                ->orWhere('sales_person', Helpers::getUserIdByName($term))
                ->orWhere('received_by', Helpers::getUserIdByName($term))
                ->orWhere('orders.city', 'like', '%' . $term . '%')
                ->orWhere('order_status_id', (new \App\ReadOnly\OrderStatus())->getIDCaseInsensitive($term))
                ->Where('client_name', 'like', $term);
        }

        if ($order_status[0] != '') {
            $orders = $orders->whereIn('order_status_id', $order_status);
        }

        if ($date != '') {
            $orders = $orders->where('order_date', $date);
        }

        if ($estimated_delivery_date != '') {
            $orders = $orders->where('estimated_delivery_date', $estimated_delivery_date);
        }

        if ($store_site = $request->store_website_id) {
            $orders = $orders->whereIn('swo.website_id', $store_site);
        }

        if ($advance_detail != '') {
            $orders = $orders->where('advance_detail', '<=', $advance_detail);
        }

        if ($balance_amount != '') {
            $orders = $orders->where('balance_amount', '<=', $balance_amount);
        }

        $statusFilterList = clone $orders;

        $orders = $orders->leftJoin('order_products as op', 'op.order_id', 'orders.id')
            ->leftJoin('customers as cs', 'cs.id', 'orders.customer_id')
            ->leftJoin('products as p', 'p.id', 'op.product_id')
            ->leftJoin('brands as b', 'b.id', 'p.brand');

        if (! empty($brandIds)) {
            $orders = $orders->whereIn('p.brand', $brandIds);
        }

        $orders = $orders->groupBy('orders.order_id');

        $orders = $orders->select(['orders.*', 'cs.email as cust_email', \DB::raw('group_concat(b.name) as brand_name_list'), 'swo.website_id']);

        $users             = Helpers::getUserArray(User::all());
        $order_status_list = OrderHelper::getStatus();

        if ($sortby != 'communication' && $sortby != 'action' && $sortby != 'due') {
            $orders = $orders->orderBy('is_priority', 'DESC')->orderBy($sortby, $orderby);
        } else {
            $orders = $orders->orderBy('is_priority', 'DESC')->orderBy('created_at', 'DESC');
        }

        $statusFilterList = $statusFilterList->leftJoin('order_statuses as os', 'os.id', 'orders.order_status_id')
            ->where('order_status', '!=', '')->groupBy('order_status')->select(\DB::raw('count(*) as total'), 'os.status as order_status', 'swo.website_id')->get()->toArray();

        $totalOrders  = count($orders->get());
        $orders_array = $orders->paginate(10);

        $quickreply = Reply::where('model', 'Order')->get();

        $duty_shipping = [];
        foreach ($orders_array as $key => $order) {
            $duty_shipping[$order->id]['id'] = $order->id;

            $website_code_data = $order->duty_tax;
            if ($website_code_data != null) {
                $product_qty = count($order->order_product);

                $code = $website_code_data->website_code->code;

                $duty_countries     = $website_code_data->website_code->duty_of_country;
                $shipping_countries = $website_code_data->website_code->shipping_of_country($code);

                $duty_amount     = ($duty_countries->default_duty * $product_qty);
                $shipping_amount = ($shipping_countries->price * $product_qty);

                $duty_shipping[$order->id]['shipping'] = $duty_amount;
                $duty_shipping[$order->id]['duty']     = $shipping_amount;
            } else {
                $duty_shipping[$order->id]['shipping'] = 0;
                $duty_shipping[$order->id]['duty']     = 0;
            }
        }
        $orderStatusList = OrderStatus::all();

        $store_site = $request->store_website_id;

        $datatableModel = DataTableColumn::select('column_name')->where('user_id', auth()->user()->id)->where('section_name', 'orders-listing')->first();

        $dynamicColumnsToShowPostman = [];
        if (! empty($datatableModel->column_name)) {
            $hideColumns                 = $datatableModel->column_name ?? '';
            $dynamicColumnsToShowPostman = json_decode($hideColumns, true);
        }

        return view('orders.index', compact('orders_array', 'users', 'term', 'orderby', 'order_status_list', 'order_status', 'date', 'statusFilterList', 'brandList', 'registerSiteList', 'store_site', 'totalOrders', 'quickreply', 'fromdatadefault', 'duty_shipping', 'orderStatusList', 'dynamicColumnsToShowPostman', 'estimated_delivery_date', 'advance_detail', 'balance_amount'));
    }

    public function orderPreviewSentMails(Request $request)
    {
        $id    = $request->id;
        $lists = Email::where('model_id', $id)->orderBy('id', 'DESC')->get();

        return response()->json(['code' => 200, 'data' => $lists]);
    }

    public function charity_order(Request $request)
    {
        $term             = $request->input('term');
        $order_status     = $request->status ?? [''];
        $date             = $request->date ?? '';
        $brandList        = \App\Brand::all()->pluck('name', 'id')->toArray();
        $brandIds         = array_filter($request->get('brand_id', []));
        $registerSiteList = StoreWebsite::pluck('website', 'id')->toArray();
        $fromdatadefault  = [
            'street'       => config('dhl.shipper.street'),
            'city'         => config('dhl.shipper.city'),
            'postal_code'  => config('dhl.shipper.postal_code'),
            'country_code' => config('dhl.shipper.country_code'),
            'person_name'  => config('dhl.shipper.person_name'),
            'company_name' => config('dhl.shipper.company_name'),
            'phone'        => config('dhl.shipper.phone'),
        ];
        if ($request->input('orderby') == '') {
            $orderby = 'DESC';
        } else {
            $orderby = 'ASC';
        }

        switch ($request->input('sortby')) {
            case 'type':
                $sortby = 'order_type';
                break;
            case 'date':
                $sortby = 'order_date';
                break;
            case 'estdeldate':
                $sortby = 'estimated_delivery_date';
                break;
            case 'order_handler':
                $sortby = 'sales_person';
                break;
            case 'client_name':
                $sortby = 'client_name';
                break;
            case 'status':
                $sortby = 'order_status_id';
                break;
            case 'advance':
                $sortby = 'advance_detail';
                break;
            case 'balance':
                $sortby = 'balance_amount';
                break;
            case 'action':
                $sortby = 'action';
                break;
            case 'due':
                $sortby = 'due';
                break;
            case 'communication':
                $sortby = 'communication';
                break;
            default:
                $sortby = 'order_date';
        }

        $orders = (new Order())->newQuery()->with('customer')->leftJoin('store_website_orders as swo', 'swo.order_id', 'orders.id');
        if (empty($term)) {
            $orders = $orders;
        } else {
            $orders = $orders->whereHas('customer', function ($query) use ($term) {
                return $query->where('name', 'LIKE', '%' . $term . '%')
                    ->orWhere('id', 'LIKE', '%' . $term . '%')
                    ->orWhere('email', 'LIKE', '%' . $term . '%');
            })
                ->orWhere('orders.order_id', 'like', '%' . $term . '%')
                ->orWhere('order_type', $term)
                ->orWhere('sales_person', Helpers::getUserIdByName($term))
                ->orWhere('received_by', Helpers::getUserIdByName($term))
                ->orWhere('client_name', 'like', '%' . $term . '%')
                ->orWhere('orders.city', 'like', '%' . $term . '%')
                ->orWhere('order_status_id', (new \App\ReadOnly\OrderStatus())->getIDCaseInsensitive($term));
        }
        if ($order_status[0] != '') {
            $orders = $orders->whereIn('order_status_id', $order_status);
        }

        if ($date != '') {
            $orders = $orders->where('order_date', $date);
        }

        if ($store_site = $request->store_website_id) {
            $orders = $orders->where('swo.website_id', $store_site);
        }

        $statusFilterList = clone $orders;

        $orders = $orders->leftJoin('order_products as op', 'op.order_id', 'orders.id')
            ->leftJoin('customers as cs', 'cs.id', 'orders.customer_id')
            ->leftJoin('products as p', 'p.id', 'op.product_id')
            ->join('customer_charities', 'customer_charities.product_id', 'p.id')
            ->leftJoin('brands as b', 'b.id', 'p.brand');

        if (! empty($brandIds)) {
            $orders = $orders->whereIn('p.brand', $brandIds);
        }

        $orders = $orders->groupBy('orders.id');
        $orders = $orders->select(['orders.*', 'cs.email as cust_email', \DB::raw('group_concat(b.name) as brand_name_list'), 'swo.website_id']);

        $users             = Helpers::getUserArray(User::all());
        $order_status_list = OrderHelper::getStatus();

        if ($sortby != 'communication' && $sortby != 'action' && $sortby != 'due') {
            $orders = $orders->orderBy('is_priority', 'DESC')->orderBy($sortby, $orderby);
        } else {
            $orders = $orders->orderBy('is_priority', 'DESC')->orderBy('created_at', 'DESC');
        }

        $statusFilterList = $statusFilterList->leftJoin('order_statuses as os', 'os.id', 'orders.order_status_id')
            ->where('order_status', '!=', '')->groupBy('order_status')->select(\DB::raw('count(*) as total'), 'os.status as order_status', 'swo.website_id')->get()->toArray();
        $totalOrders  = count($orders->get());
        $orders_array = $orders->paginate(10);

        $quickreply = Reply::where('model', 'Order')->get();

        $duty_shipping = [];
        foreach ($orders_array as $key => $order) {
            $duty_shipping[$order->id]['id'] = $order->id;

            $website_code_data = $order->duty_tax;
            if ($website_code_data != null) {
                $product_qty = count($order->order_product);

                $code = $website_code_data->website_code->code;

                $duty_countries     = $website_code_data->website_code->duty_of_country;
                $shipping_countries = $website_code_data->website_code->shipping_of_country($code);

                $duty_amount     = ($duty_countries->default_duty * $product_qty);
                $shipping_amount = ($shipping_countries->price * $product_qty);

                $duty_shipping[$order->id]['shipping'] = $duty_amount;
                $duty_shipping[$order->id]['duty']     = $shipping_amount;
            } else {
                $duty_shipping[$order->id]['shipping'] = 0;
                $duty_shipping[$order->id]['duty']     = 0;
            }
        }
        $orderStatusList = OrderStatus::all();

        return view('orders.charity_order', compact('orders_array', 'users', 'term', 'orderby', 'order_status_list', 'order_status', 'date', 'statusFilterList', 'brandList', 'registerSiteList', 'store_site', 'totalOrders', 'quickreply', 'fromdatadefault', 'duty_shipping', 'orderStatusList'));
    }

    public function addProduct(Request $request)
    {
        $this->createProduct($request);
        $productArr = [
            'sku'           => request('sku'),
            'product_price' => request('price'),
            'color'         => request('color'),
            'order_id'      => request('order_id'),
            'qty'           => request('qty'),
            'size'          => request('size'),
        ];
        OrderProduct::insert($productArr);

        return response()->json(['code' => 200, 'message' => 'Product added successfully']);
    }

    public function products(Request $request)
    {
        $term = $request->input('term');

        if ($request->input('orderby') == '') {
            $orderby = 'desc';
        } else {
            $orderby = 'asc';
        }

        switch ($request->input('sortby')) {
            case 'supplier':
                $sortby = 'supplier';
                break;
            case 'customer':
                $sortby = 'client_name';
                break;
            case 'customer_price':
                $sortby = 'price';
                break;
            case 'date':
                $sortby = 'created_at';
                break;
            case 'delivery_date':
                $sortby = 'date_of_delivery';
                break;
            case 'updated_date':
                $sortby = 'estimated_delivery_date';
                break;
            case 'status':
                $sortby = 'order_status_id';
                break;
            case 'communication':
                $sortby = 'communication';
                break;
            default:
                $sortby = 'id';
        }

        if (empty($term)) {
            $products = OrderProduct::with(['Product' => function ($query) {
                $query->with('Purchases');
            }, 'Order'])->get()->toArray();
        } else {
            $products = OrderProduct::whereHas('Product', function ($query) use ($term) {
                $query->where('supplier', 'like', '%' . $term . '%');
            })
                ->with(['Product', 'Order'])->orWhere('product_price', 'LIKE', "%$term%")
                ->orWhereHas('Order', function ($query) use ($term) {
                    $query->where('date_of_delivery', 'LIKE', "%$term%")
                        ->orWhere('estimated_delivery_date', 'LIKE', "%$term%")
                        ->orWhere('order_status', 'LIKE', "%$term%");
                })->get()->toArray();
        }

        $brand    = $request->input('brand');
        $supplier = $request->input('supplier');

        if ($sortby == 'supplier') {
            if ($orderby == 'asc') {
                $products = array_values(Arr::sort($products, function ($value) {
                    return $value['product']['supplier'];
                }));

                $products = array_reverse($products);
            } else {
                $products = array_values(Arr::sort($products, function ($value) {
                    return $value['product']['supplier'];
                }));
            }
        }

        if ($sortby == 'client_name') {
            if ($orderby == 'asc') {
                $products = array_values(Arr::sort($products, function ($value) {
                    if ($value['order']) {
                        return $value['order']['client_name'];
                    }

                    return '';
                }));

                $products = array_reverse($products);
            } else {
                $products = array_values(Arr::sort($products, function ($value) {
                    if ($value['order']) {
                        return $value['order']['client_name'];
                    }

                    return '';
                }));
            }
        }

        if ($sortby == 'price') {
            if ($orderby == 'asc') {
                $products = array_values(Arr::sort($products, function ($value) {
                    return $value['product_price'];
                }));

                $products = array_reverse($products);
            } else {
                $products = array_values(Arr::sort($products, function ($value) {
                    return $value['product_price'];
                }));
            }
        }

        if ($sortby == 'created_at') {
            if ($orderby == 'asc') {
                $products = array_values(Arr::sort($products, function ($value) {
                    if ($value['order']) {
                        return $value['order']['created_at'];
                    }

                    return '1999-01-01 00:00:00';
                }));

                $products = array_reverse($products);
            } else {
                $products = array_values(Arr::sort($products, function ($value) {
                    if ($value['order']) {
                        return $value['order']['created_at'];
                    }

                    return '1999-01-01 00:00:00';
                }));
            }
        }

        if ($sortby == 'date_of_delivery') {
            if ($orderby == 'asc') {
                $products = array_values(Arr::sort($products, function ($value) {
                    if ($value['order']) {
                        return $value['order']['date_of_delivery'];
                    }

                    return '1999-01-01 00:00:00';
                }));

                $products = array_reverse($products);
            } else {
                $products = array_values(Arr::sort($products, function ($value) {
                    if ($value['order']) {
                        return $value['order']['date_of_delivery'];
                    }

                    return '1999-01-01 00:00:00';
                }));
            }
        }

        if ($sortby == 'estimated_delivery_date') {
            if ($orderby == 'asc') {
                $products = array_values(Arr::sort($products, function ($value) {
                    if ($value['order']) {
                        return $value['order']['estimated_delivery_date'];
                    }

                    return '1999-01-01 00:00:00';
                }));

                $products = array_reverse($products);
            } else {
                $products = array_values(Arr::sort($products, function ($value) {
                    if ($value['order']) {
                        return $value['order']['estimated_delivery_date'];
                    }

                    return '1999-01-01 00:00:00';
                }));
            }
        }

        if ($sortby == 'order_status') {
            if ($orderby == 'asc') {
                $products = array_values(Arr::sort($products, function ($value) {
                    if ($value['order']) {
                        return $value['order']['order_status'];
                    }

                    return '';
                }));

                $products = array_reverse($products);
            } else {
                $products = array_values(Arr::sort($products, function ($value) {
                    if ($value['order']) {
                        return $value['order']['order_status'];
                    }

                    return '';
                }));
            }
        }

        if ($sortby == 'communication') {
            if ($orderby == 'asc') {
                $products = array_values(Arr::sort($products, function ($value) {
                    return $value['communication']['created_at'];
                }));

                $products = array_reverse($products);
            } else {
                $products = array_values(Arr::sort($products, function ($value) {
                    return $value['communication']['created_at'];
                }));
            }
        }

        $currentPage  = LengthAwarePaginator::resolveCurrentPage();
        $perPage      = 10;
        $currentItems = array_slice($products, $perPage * ($currentPage - 1), $perPage);

        $products = new LengthAwarePaginator($currentItems, count($products), $perPage, $currentPage, [
            'path' => LengthAwarePaginator::resolveCurrentPath(),
        ]);

        return view('orders.products', compact('products', 'term', 'orderby', 'brand', 'supplier'));
    }

    public function getCustomerAddress(Request $request)
    {
        $address = OrderCustomerAddress::where('order_id', $request->order_id)->get();

        return response()->json(['code' => 200, 'data' => $address]);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        $defaultSelected = [];
        $key             = request()->get('key', false);

        if (! empty($key)) {
            $defaultData = session($key);
            if (! empty($defaultData)) {
                $defaultSelected = $defaultData;
            }
        }

        $order = new Order();

        $data = [];
        foreach ($order->getFillable() as $item) {
            $data[$item] = '';
        }

        $expiresAt = Carbon::now()->addMinutes(10);

        $last       = Order::withTrashed()->latest()->first();
        $last_order = ($last) ? $last->id + 1 : 1;

        Cache::put('user-order-' . Auth::id(), $last_order, $expiresAt);
        Cache::put('last-order', $last_order, $expiresAt);

        if (! empty($defaultSelected['selected_product'])) {
            foreach ($defaultSelected['selected_product'] as $product) {
                self::attachProduct($last_order, $product);
            }
        }

        $data['id']             = $last_order;
        $data['sales_persons']  = Helpers::getUsersArrayByRole('Sales');
        $data['modify']         = 0;
        $data['order_products'] = $this->getOrderProductsWithProductData($data['id']);

        $customer_suggestions = [];
        $customers            = (new Customer())->newQuery()->latest()->select('name')->get()->toArray();

        foreach ($customers as $customer) {
            array_push($customer_suggestions, $customer['name']);
        }

        $data['customers'] = Customer::all();

        $data['customer_suggestions'] = $customer_suggestions;
        $data['defaultSelected']      = $defaultSelected;
        $data['key']                  = $key;

        return view('orders.form', $data);
    }

    public function searchProduct(Request $request)
    {
        $exist = Product::where('sku', request('sku'))->first();
        if (! empty($exist)) {
            return response()->json(['code' => 200, 'data' => $exist, 'message' => 'Product added successfully']);
        }

        return response()->json(['code' => 500, 'message' => 'Product not found']);
    }

    public function createProduct(Request $request)
    {
        $productArr = [
            'sku'           => request('sku'),
            'price'         => request('price'),
            'size'          => request('size'),
            'name'          => request('name'),
            'stock'         => 1,
            'quick_product' => 1,
        ];
        $exist = Product::where('sku', request('sku'))->first();
        if (empty($exist)) {
            Product::insert($productArr);

            return response()->json(['code' => 200, 'message' => 'Product added successfully']);
        }

        return response()->json(['code' => 500, 'message' => 'Product already exist']);
    }

    /**
     * Store a newly created resource in storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $this->validate($request, [
            'customer_id'    => 'required',
            'advance_detail' => 'numeric|nullable',
            'balance_amount' => 'numeric|nullable',
        ]);

        $data            = $request->all();
        $sessionKey      = $request->get('key', '');
        $data['user_id'] = Auth::id();
        $oPrefix         = ($request->input('order_type') == 'offline') ? 'OFF-' . date('Ym') : 'ONN-' . date('Ym');
        $statement       = \DB::select("SHOW TABLE STATUS LIKE 'orders'");
        $nextId          = 0;
        if (! empty($statement)) {
            $nextId = $statement[0]->Auto_increment;
        }

        $data['order_id'] = $oPrefix . '-' . $nextId;

        if (empty($request->input('order_date'))) {
            $data['order_date'] = date('Y-m-d');
        }
        if (! empty($request->website_address)) {
            $data['website_address_id'] = $request->website_address;
        }
        $customer = Customer::find($request->customer_id);

        $data['client_name']    = $customer->name;
        $data['contact_detail'] = $customer->phone;
        if ($request->hdn_order_mail_status == '1') {
            $data['auto_emailed'] = 1;
        } else {
            $data['auto_emailed'] = 0;
        }

        if (isset($data['date_of_delivery'])) {
            $data['estimated_delivery_date'] = $data['date_of_delivery'];
        }

        $currency                    = $request->get('currency', 'INR');
        $data['store_currency_code'] = $currency;

        $order = Order::create($data);

        $customerShippingAddress = [
            'address_type' => 'shipping',
            'city'         => $customer->city,
            'country_id'   => $customer->country,
            'email'        => $customer->email,
            'firstname'    => $customer->name,
            'postcode'     => $customer->pincode,
            'street'       => $customer->address,
            'order_id'     => $order->id,
        ];
        OrderCustomerAddress::insert($customerShippingAddress);

        $currency = $request->get('currency', 'INR');

        if (! empty($request->input('order_products'))) {
            foreach ($request->input('order_products') as $key => $order_product_data) {
                $order_product = OrderProduct::findOrFail($key);
                if ($order_product->order_id != $order->id) {
                    $nw_order_product = new OrderProduct;
                    foreach ($order_product->getAttributes() as $k => $attr) {
                        if (! in_array($k, ['id', 'created_at', 'updated_at'])) {
                            $nw_order_product->{$k} = $attr;
                        }
                    }

                    foreach ($order_product_data as $k => $v) {
                        $nw_order_product->{$k} = $v;
                    }

                    $nw_order_product->currency  = $currency;
                    $nw_order_product->eur_price = \App\Currency::convert($order_product->product_price, 'EUR', $currency);
                    $nw_order_product->order_id  = $order->id;
                    $nw_order_product->save();
                } else {
                    if ($order_product) {
                        $order_product->currency  = $currency;
                        $order_product->eur_price = \App\Currency::convert($order_product->product_price, 'EUR', $currency);
                        $order_product->save();
                    }
                }
            }
        }

        $totalAmount = 0;
        foreach (OrderProduct::where('order_id', $order->id)->get() as $order_product) {
            $totalAmount += $order_product->product_price;
        }

        $order->balance_amount = ($totalAmount - $order->advance_detail);
        $order->save();

        $store_order_website             = new StoreWebsiteOrder();
        $store_order_website->website_id = 15;
        $store_order_website->status_id  = $order->order_status_id;
        $store_order_website->order_id   = $order->id;
        $store_order_website->save();

        $store_website_product_price = [];

        foreach (OrderProduct::where('order_id', $order->id)->get() as $order_product) {
            $store_website_product_price['product_id'] = $order_product->product_id;

            $address = \App\OrderCustomerAddress::where('order_id', $order->id)->where('address_type', 'shipping')->first();

            $product  = \App\Product::find($order_product->product_id);
            $getPrice = $product->getPrice($customer->store_website_id, 'IN', '', '', '', '', '', '', '', '', $order->id, $order_product->product_id);
            $getDuty  = $product->getDuty($address->country_id);

            $store_website_product_price['default_price']    = $getPrice['original_price'];
            $store_website_product_price['duty_price']       = (float) $getDuty['duty'];
            $store_website_product_price['segment_discount'] = (float) $getPrice['segment_discount'];
            $store_website_product_price['override_price']   = $getPrice['total'];
            $store_website_product_price['status']           = 1;
            $store_website_product_price['store_website_id'] = 15;
        }

        \App\StoreWebsiteProductPrice::insert($store_website_product_price);

        if ($customer->credit > 0) {
            $balance_amount = $order->balance_amount;
            $totalCredit    = $customer->credit;
            if (($order->balance_amount - $customer->credit) < 0) {
                $left_credit = ($order->balance_amount - $customer->credit) * -1;
                $order->advance_detail += $order->balance_amount;
                $balance_amount   = 0;
                $customer->credit = $left_credit;
            } else {
                $balance_amount -= $customer->credit;
                $order->advance_detail += $customer->credit;
                $customer->credit = 0;
            }

            $order->balance_amount = $balance_amount;
            $order->order_id       = $oPrefix . '-' . $order->id;
            $order->save();
            $customer->save();

            if ($order->id) {
                CreditHistory::create(
                    [
                        'customer_id' => $request->customer_id,
                        'model_id'    => $order->id,
                        'model_type'  => Order::class,
                        'used_credit' => (float) $totalCredit - $customer->credit,
                        'used_in'     => 'ORDER',
                        'type'        => 'MINUS',
                    ]
                );
            }
        }

        $expiresAt  = Carbon::now()->addMinutes(10);
        $last_order = $order->id + 1;
        Cache::put('user-order-' . Auth::id(), $last_order, $expiresAt);

        if ($request->convert_order == 'convert_order') {
            if (! empty($request->selected_product)) {
                foreach ($request->selected_product as $product) {
                    self::attachProduct($order->id, $product);
                }
            }
        }

        if ($order->order_status_id == OrderHelper::$proceedWithOutAdvance && $order->order_type == 'online') {
            $product_names = '';
            foreach (OrderProduct::where('order_id', $order->id)->get() as $order_product) {
                $product_names .= $order_product->product ? $order_product->product->name . ', ' : '';
            }

            $delivery_time = $order->estimated_delivery_date ? Carbon::parse($order->estimated_delivery_date)->format('d \of\ F') : Carbon::parse($order->order_date)->addDays(15)->format('d \of\ F');

            $auto_reply = AutoReply::where('type', 'auto-reply')->where('keyword', 'cod-online-confirmation')->first();

            $auto_message = preg_replace('/{product_names}/i', $product_names, $auto_reply->reply);
            $auto_message = preg_replace('/{delivery_time}/i', $delivery_time, $auto_message);

            $followup_message = AutoReply::where('type', 'auto-reply')->where('keyword', 'cod-online-followup')->first()->reply;

            $requestData  = new Request();
            $requestData2 = new Request();
            $requestData->setMethod('POST');
            $requestData2->setMethod('POST');
            $requestData->request->add(['customer_id' => $order->customer->id, 'message' => $auto_message, 'status' => 1]);
            $requestData2->request->add(['customer_id' => $order->customer->id, 'message' => $followup_message, 'status' => 1]);

            app(\App\Http\Controllers\WhatsAppController::class)->sendMessage($requestData, 'customer');
            app(\App\Http\Controllers\WhatsAppController::class)->sendMessage($requestData2, 'customer');

            CommunicationHistory::create([
                'model_id'   => $order->id,
                'model_type' => Order::class,
                'type'       => 'initial-advance',
                'method'     => 'whatsapp',
            ]);
        } elseif ($order->order_status_id == OrderHelper::$prepaid) {
            $auto_message = AutoReply::where('type', 'auto-reply')->where('keyword', 'prepaid-order-confirmation')->first()->reply;
            $requestData  = new Request();
            $requestData->setMethod('POST');
            $requestData->request->add(['customer_id' => $order->customer->id, 'message' => $auto_message, 'status' => 1]);

            app(\App\Http\Controllers\WhatsAppController::class)->sendMessage($requestData, 'customer');

            CommunicationHistory::create([
                'model_id'   => $order->id,
                'model_type' => Order::class,
                'type'       => 'online-confirmation',
                'method'     => 'whatsapp',
            ]);
        } elseif ($order->order_status_id == OrderHelper::$refundToBeProcessed) {
            $refund = Refund::where('order_id', $order->id)->first();

            if (! $refund) {
                Refund::create([
                    'customer_id'     => $order->customer->id,
                    'order_id'        => $order->id,
                    'type'            => 'Cash',
                    'date_of_request' => Carbon::now(),
                    'date_of_issue'   => Carbon::now()->addDays(10),
                ]);
            }

            if ($order->payment_mode == 'paytm') {
                if ($order->customer) {
                    $all_amount = 0;

                    if ($order->order_product) {
                        foreach ($order->order_product as $order_product) {
                            $all_amount += $order_product->product_price;
                        }
                    }

                    $order->customer->credit += $all_amount;
                    $order->customer->save();
                }
            } elseif ($order->payment_mode != 'paytm' || $order->advance_detail > 0) {
                if ($order->customer) {
                    $order->customer->credit += $order->advance_detail;
                    $order->customer->save();
                }
            }
        }

        // if ($order->auto_emailed == 0) {
        if (! $order->is_sent_offline_confirmation()) {
            if ($order->order_type == 'offline') {
            }
        }

        if ($request->hdn_order_mail_status == '1') {
            $id_order_inc = $order->id;
            if (! $order->is_sent_offline_confirmation()) {
                if ($order->order_type == 'offline') {
                    if (! empty($order->customer) && ! empty($order->customer->email)) {
                        $emailClass = (new OrderConfirmation($order))->build();

                        $email = Email::create([
                            'model_id'        => $order->id,
                            'model_type'      => Order::class,
                            'from'            => $emailClass->fromMailer,
                            'to'              => $order->customer->email,
                            'subject'         => $emailClass->subject,
                            'message'         => $emailClass->render(),
                            'template'        => 'order-confirmation',
                            'additional_data' => $order->id,
                            'status'          => 'pre-send',
                            'is_draft'        => 1,
                        ]);

                        \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');
                    }
                }
            }
        }

        // sending order message to the customer
        UpdateOrderStatusMessageTpl::dispatch($order->id)->onQueue('customer_message');

        if ($request->ajax()) {
            return response()->json(['code' => 200, 'order' => $order]);
        }

        if ($request->get('return_url_back')) {
            return back()->with('message', 'Order created successfully');
        }

        if (! empty($sessionKey)) {
            $defaultData = session($sessionKey);
            if (! empty($defaultData) && ! empty($defaultData['redirect_back'])) {
                return redirect($defaultData['redirect_back'])->with('message', 'Order created successfully');
            }
        }

        return redirect()->route('order.index')
            ->with('message', 'Order created successfully');
    }

    /**
     * Display the specified resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function show(Order $order)
    {
        $data                   = $order->toArray();
        $data['sales_persons']  = Helpers::getUsersArrayByRole('Sales');
        $data['order_products'] = $this->getOrderProductsWithProductData($order->id);
        $data['comments']       = Comment::with('user')->where('subject_id', $order->id)
            ->where('subject_type', '=', Order::class)->get();
        $data['users']       = User::all()->toArray();
        $messages            = Message::all()->where('moduleid', '=', $data['id'])->where('moduletype', '=', 'order')->sortByDesc('created_at')->take(10)->toArray();
        $data['messages']    = $messages;
        $data['total_price'] = $this->getTotalOrderPrice($order);

        $order_statuses              = (new OrderStatus)->all();
        $data['order_statuses']      = $order_statuses;
        $data['tasks']               = Task::where('model_type', 'order')->where('model_id', $order->id)->get()->toArray();
        $data['order_recordings']    = CallRecording::where('order_id', '=', $data['order_id'])->get()->toArray();
        $data['order_status_report'] = OrderStatuses::all();
        if ($order->customer) {
            $data['order_reports'] = OrderReport::where('order_id', $order->customer->id)->get();
        }

        $data['users_array']       = Helpers::getUserArray(User::all());
        $data['has_customer']      = $order->customer ? $order->customer->id : false;
        $data['customer']          = $order->customer;
        $data['reply_categories']  = ReplyCategory::all();
        $data['delivery_approval'] = $order->delivery_approval;
        $data['waybill']           = $order->waybill;
        $data['waybills']          = $order->waybills;
        $data['customerAddress']   = $order->orderCustomerAddress;
        $data['shipping_address']  = $order->shippingAddress();
        $data['billing_address']   = $order->billingAddress();
        $data['order']             = $order;

        return view('orders.show', $data);
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function edit(Order $order)
    {
        $data                   = $order->toArray();
        $data['modify']         = 1;
        $data['sales_persons']  = Helpers::getUsersArrayByRole('Sales');
        $data['order_products'] = $this->getOrderProductsWithProductData($order->id);

        return view('orders.form', $data);
    }

    /**
     * Update the specified resource in storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, Order $order)
    {
        if ($request->type != 'customer') {
            $this->validate($request, [
                'advance_detail' => 'numeric|nullable',
                'balance_amount' => 'numeric|nullable',
                'contact_detail' => 'sometimes|nullable|numeric',
            ]);
        }

        if (! empty($request->input('order_products'))) {
            foreach ($request->input('order_products') as $key => $order_product_data) {
                $order_product = OrderProduct::findOrFail($key);

                if (isset($order_product_data['purchase_status']) && $order_product_data['purchase_status'] != $order_product->purchase_status) {
                    StatusChange::create([
                        'model_id'    => $order_product->id,
                        'model_type'  => OrderProduct::class,
                        'user_id'     => Auth::id(),
                        'from_status' => $order_product->purchase_status,
                        'to_status'   => $order_product_data['purchase_status'],
                    ]);
                }

                $order_product->update($order_product_data);
            }
        }

        if ($request->status != $order->order_status) {
            StatusChange::create([
                'model_id'    => $order->id,
                'model_type'  => Order::class,
                'user_id'     => Auth::id(),
                'from_status' => $order->order_status,
                'to_status'   => $request->status,
            ]);
        }

        $data                 = $request->except(['_token', '_method', 'status', 'purchase_status']);
        $data['order_status'] = $request->status;
        $data['is_priority']  = $request->is_priority == 'on' ? 1 : 0;
        $order->update($data);

        $this->calculateBalanceAmount($order);
        $order = Order::find($order->id);

        if ($customer = Customer::find($order->customer_id)) {
            if ($customer->credit > 0) {
                $balance_amount = $order->balance_amount;

                if (($order->balance_amount - $customer->credit) < 0) {
                    $left_credit = ($order->balance_amount - $customer->credit) * -1;
                    $order->advance_detail += $order->balance_amount;
                    $balance_amount   = 0;
                    $customer->credit = $left_credit;
                } else {
                    $balance_amount -= $customer->credit;
                    $order->advance_detail += $customer->credit;
                    $customer->credit = 0;
                }

                $order->balance_amount = $balance_amount;
                $order->save();
                $customer->save();

                if ($order->id) {
                    CreditHistory::create(
                        [
                            'customer_id' => $request->customer_id,
                            'model_id'    => $order->id,
                            'model_type'  => Order::class,
                            'used_credit' => $customer->credit,
                            'used_in'     => 'ORDER',
                            'type'        => 'MINUS',
                        ]
                    );
                }
            }
        }

        if (! $order->is_sent_initial_advance() && $order->order_status_id == OrderHelper::$proceedWithOutAdvance && $order->order_type == 'online') {
            $product_names = '';
            foreach (OrderProduct::where('order_id', $order->id)->get() as $order_product) {
                $product_names .= $order_product->product ? $order_product->product->name . ', ' : '';
            }

            $delivery_time = $order->estimated_delivery_date ? Carbon::parse($order->estimated_delivery_date)->format('d \of\ F') : Carbon::parse($order->order_date)->addDays(15)->format('d \of\ F');

            $auto_reply = AutoReply::where('type', 'auto-reply')->where('keyword', 'cod-online-confirmation')->first();

            $auto_message = preg_replace('/{product_names}/i', $product_names, $auto_reply->reply);
            $auto_message = preg_replace('/{delivery_time}/i', $delivery_time, $auto_message);

            $followup_message = AutoReply::where('type', 'auto-reply')->where('keyword', 'cod-online-followup')->first()->reply;

            $requestData  = new Request();
            $requestData2 = new Request();
            $requestData->setMethod('POST');
            $requestData2->setMethod('POST');
            $requestData->request->add(['customer_id' => $order->customer->id, 'message' => $auto_message, 'status' => 1]);
            $requestData2->request->add(['customer_id' => $order->customer->id, 'message' => $followup_message, 'status' => 1]);

            app(\App\Http\Controllers\WhatsAppController::class)->sendMessage($requestData, 'customer');
            app(\App\Http\Controllers\WhatsAppController::class)->sendMessage($requestData2, 'customer');

            CommunicationHistory::create([
                'model_id'   => $order->id,
                'model_type' => Order::class,
                'type'       => 'initial-advance',
                'method'     => 'whatsapp',
            ]);
        } elseif (! $order->is_sent_online_confirmation() && $order->order_status_id == \App\Helpers\OrderHelper::$prepaid) {
            $auto_message = AutoReply::where('type', 'auto-reply')->where('keyword', 'prepaid-order-confirmation')->first()->reply;
            $requestData  = new Request();
            $requestData->setMethod('POST');
            $requestData->request->add(['customer_id' => $order->customer->id, 'message' => $auto_message, 'status' => 2]);

            app(\App\Http\Controllers\WhatsAppController::class)->sendMessage($requestData, 'customer');

            CommunicationHistory::create([
                'model_id'   => $order->id,
                'model_type' => Order::class,
                'type'       => 'online-confirmation',
                'method'     => 'whatsapp',
            ]);
        }

        if ($request->hdn_order_mail_status == '1') {
            $id_order_inc = $order->id;
            $order_new    = Order::find($id_order_inc);
            if (! $order_new->is_sent_offline_confirmation()) {
                if ($order_new->order_type == 'offline') {
                    if (! empty($order_new->customer) && ! empty($order_new->customer->email)) {
                        //Mail::to($order_new->customer->email)->send(new OrderConfirmation($order_new));
                        $emailClass = (new OrderConfirmation($order_new))->build();

                        $emailObject = Email::create([
                            'model_id'        => $order_new->id,
                            'model_type'      => Order::class,
                            'from'            => $emailClass->fromMailer,
                            'to'              => $order_new->customer->email,
                            'subject'         => $emailClass->subject,
                            'message'         => $emailClass->render(),
                            'template'        => 'order-confirmation',
                            'additional_data' => $order_new->id,
                            'status'          => 'pre-send',
                            'is_draft'        => 1,
                        ]);

                        \App\Jobs\SendEmail::dispatch($emailObject)->onQueue('send_email');
                    }
                }
            }
        }

        if ($order->order_status_id == \App\Helpers\OrderHelper::$refundToBeProcessed) {
            if ($order->payment_mode == 'paytm') {
                if ($order->customer) {
                    $all_amount = 0;

                    if ($order->order_product) {
                        foreach ($order->order_product as $order_product) {
                            $all_amount += $order_product->product_price;
                        }
                    }

                    $order->customer->credit += $all_amount;
                    $order->customer->save();
                }
            } elseif ($order->payment_mode != 'paytm' || $order->advance_detail > 0) {
                if ($order->customer) {
                    $order->customer->credit += $order->advance_detail;
                    $order->customer->save();
                }
            }
            $refund = Refund::where('order_id', $order->id)->first();

            if (! $refund) {
                Refund::create([
                    'customer_id'     => $order->customer->id,
                    'order_id'        => $order->id,
                    'type'            => 'Cash',
                    'date_of_request' => Carbon::now(),
                    'date_of_issue'   => Carbon::now()->addDays(10),
                ]);
            }
        }

        if ($order->order_status == \App\Helpers\OrderHelper::$delivered) {
            if ($order->order_product) {
                foreach ($order->order_product as $order_product) {
                    if ($order_product->product) {
                        if ($order_product->product->supplier == 'In-stock') {
                            $order_product->product->supplier = '';
                            $order_product->product->save();
                        }
                    }
                }
            }

            if (! $order->is_sent_order_delivered()) {
                $message     = AutoReply::where('type', 'auto-reply')->where('keyword', 'order-delivery-confirmation')->first()->reply;
                $requestData = new Request();
                $requestData->setMethod('POST');
                $requestData->request->add(['customer_id' => $order->customer_id, 'message' => $message, 'status' => 2]);

                app(\App\Http\Controllers\WhatsAppController::class)->sendMessage($requestData, 'customer');

                CommunicationHistory::create([
                    'model_id'   => $order->id,
                    'model_type' => Order::class,
                    'type'       => 'order-delivered',
                    'method'     => 'whatsapp',
                ]);
            }
            event(new OrderUpdated($order));
            $order->delete();

            if ($request->type != 'customer') {
                return redirect()->route('order.index')->with('success', 'Order was updated and archived successfully!');
            } else {
                return back()->with('success', 'Order was updated and archived successfully!');
            }
        }
        event(new OrderUpdated($order));

        return back()->with('message', 'Order updated successfully');
    }

    public function printAdvanceReceipt($id)
    {
        $order = Order::find($id);

        return (new AdvanceReceiptPDF($order))->render();
        $view = (new AdvanceReceiptPDF($order))->render();

        $pdf = new Dompdf;
        $pdf->loadHtml($view);
        $pdf->render();
        $pdf->stream();
    }

    public function emailAdvanceReceipt($id)
    {
        $order = Order::find($id);

        if (true) {
            if ($order->order_status == \App\Helpers\OrderHelper::$advanceRecieved) {
                $from_email = \App\Helpers::getFromEmail($order->customer->id);
                $emailClass = (new AdvanceReceipt($order))->build();

                $storeWebsiteOrder = $order->storeWebsiteOrder;
                $email             = Email::create([
                    'model_id'         => $order->customer->id,
                    'model_type'       => Customer::class,
                    'from'             => $from_email,
                    'to'               => $order->customer->email,
                    'subject'          => $emailClass->subject,
                    'message'          => $emailClass->render(),
                    'template'         => 'advance-receipt',
                    'additional_data'  => $order->id,
                    'status'           => 'pre-send',
                    'store_website_id' => ($storeWebsiteOrder) ? $storeWebsiteOrder->store_website_id : null,
                ]);

                \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');
            }
        }

        return redirect()->back()->withSuccess('Advance Receipt was successfully emailed!');
    }

    public function sendConfirmation($id)
    {
        $order = Order::find($id);

        if (! $order->is_sent_offline_confirmation()) {
            if ($order->order_type == 'offline') {
                $emailClass = (new OrderConfirmation($order))->build();

                $storeWebsiteOrder = $order->storeWebsiteOrder;
                $email             = Email::create([
                    'model_id'         => $order->customer->id,
                    'model_type'       => Customer::class,
                    'from'             => $emailClass->fromMailer,
                    'to'               => $order->customer->email,
                    'subject'          => $emailClass->subject,
                    'message'          => $emailClass->render(),
                    'template'         => 'order-confirmation',
                    'additional_data'  => $order->id,
                    'status'           => 'pre-send',
                    'store_website_id' => ($storeWebsiteOrder) ? $storeWebsiteOrder->store_website_id : null,
                ]);

                \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');
            }
        }

        return redirect()->back()->withSuccess('You have successfully sent confirmation email!');
    }

    public function generateInvoice($id)
    {
        $order     = Order::find($id);
        $consignor = [
            'name'    => Setting::get('consignor_name'),
            'address' => Setting::get('consignor_address'),
            'city'    => Setting::get('consignor_city'),
            'country' => Setting::get('consignor_country'),
            'phone'   => Setting::get('consignor_phone'),
        ];

        $view = view('emails.orders.invoice-pdf', [
            'order'     => $order,
            'consignor' => $consignor,
        ])->render();

        $pdf = new Dompdf;
        $pdf->loadHtml($view);
        $pdf->render();
        $pdf->stream();
    }

    public function uploadForApproval(Request $request, $id)
    {
        $this->validate($request, [
            'images' => 'required',
        ]);

        $delivery_approval = Order::find($id)->delivery_approval;

        if ($request->hasfile('images')) {
            foreach ($request->file('images') as $image) {
                $media = MediaUploader::fromSource($image)
                    ->toDirectory('order/' . floor($delivery_approval->id / config('constants.image_per_folder')))
                    ->upload();
                $delivery_approval->attachMedia($media, config('constants.media_tags'));
            }
        }

        return redirect()->back()->with('success', 'You have successfully uploaded delivery images for approval!');
    }

    public function deliveryApprove(Request $request, $id)
    {
        $delivery_approval = DeliveryApproval::find($id);

        $delivery_approval->approved = 1;

        $delivery_approval->save();

        return redirect()->back()->with('success', 'You have successfully approved delivery!');
    }

    public function downloadPackageSlip($id)
    {
        $waybill = Waybill::find($id);

        return Storage::disk('files')->download('waybills/' . $waybill->package_slip);
    }

    public function refundAnswer(Request $request, $id)
    {
        $order = Order::find($id);

        $order->refund_answer      = $request->answer;
        $order->refund_answer_date = Carbon::now();

        $order->save();

        return response('success');
    }

    public function sendSuggestion(Request $request, $id)
    {
        $params = [
            'number'  => null,
            'status'  => 1, // message status for auto messaging
            'user_id' => 6,
        ];

        $order = Order::with(['Order_Product' => function ($query) {
            $query->with('Product');
        }])->where('id', $id)->first();

        if (count($order->order_product) > 0) {
            $order_products_count = count($order->order_product);
            $limit                = 20 < $order_products_count ? 1 : (int) round(20 / $order_products_count);

            foreach ($order->order_product as $order_product) {
                $brand    = (int) $order_product->product->brand;
                $category = (int) $order_product->product->category;

                if ($category != 0 && $category != 1 && $category != 2 && $category != 3) {
                    $is_parent         = Category::isParent($category);
                    $category_children = [];

                    if ($is_parent) {
                        $children = Category::find($category)->childs()->get();

                        foreach ($children as $child) {
                            array_push($category_children, $child->id);
                        }
                    } else {
                        $children = Category::find($category)->parent->childs;

                        foreach ($children as $child) {
                            array_push($category_children, $child->id);
                        }

                        if (($key = array_search($category, $category_children)) !== false) {
                            unset($category_children[$key]);
                        }
                    }
                }

                if ($brand && $category != 1) {
                    $products = Product::where('brand', $brand)->whereIn('category', $category_children)->latest()->take($limit)->get();
                } elseif ($brand) {
                    $products = Product::where('brand', $brand)->latest()->take($limit)->get();
                } elseif ($category != 1) {
                    $products = Product::where('category', $category)->latest()->take($limit)->get();
                }

                if (count($products) > 0) {
                    $params['customer_id'] = $order->customer_id;

                    $chat_message = ChatMessage::create($params);

                    foreach ($products as $product) {
                        $chat_message->attachMedia($product->getMedia(config('constants.media_tags'))->first(), config('constants.media_tags'));
                    }
                }
            }
        }

        $order->refund_answer      = 'yes';
        $order->refund_answer_date = Carbon::now();
        $order->save();

        return redirect()->back()->withSuccess('You have successfully sent suggestions!');
    }

    public function sendDelivery(Request $request)
    {
        $params = [
            'number'   => null,
            'user_id'  => Auth::id() ?? 6,
            'approved' => 0,
            'status'   => 1,
        ];

        $auto_reply = AutoReply::where('type', 'auto-reply')->where('keyword', 'product-delivery-times')->first();

        $exploded = explode('[', $auto_reply->reply);

        $customer         = Customer::find($request->customer_id);
        $message          = $exploded[0];
        $express_shipping = '';
        $normal_shipping  = '';
        $in_stock         = 0;
        $normal_products  = 0;

        foreach ($request->selected_product as $key => $product_id) {
            $product = Product::find($product_id);

            if ($product->supplier == 'In-stock') {
                $express_shipping .= $in_stock == 0 ? $product->name : ", $product->name";
                $in_stock++;
            } else {
                $normal_shipping .= $normal_products == 0 ? $product->name : ", $product->name";
                $normal_products++;
            }
        }

        $second_explode = explode(']', $exploded[1]);
        $shipping_times = explode('/', $second_explode[0]);

        if ($in_stock >= 1) {
            $express_shipping .= $shipping_times[0];
        }

        if ($normal_products >= 1) {
            $normal_shipping .= $shipping_times[1];
        }

        $message .= $express_shipping . $normal_shipping . $second_explode[1];

        $params['customer_id'] = $customer->id;
        $params['message']     = $message;

        $chat_message = ChatMessage::create($params);

        $histories = CommunicationHistory::where('model_id', $customer->id)->where('model_type', Customer::class)->where('type', 'initiate-followup')->where('is_stopped', 0)->get();

        foreach ($histories as $history) {
            $history->is_stopped = 1;
            $history->save();
        }

        CommunicationHistory::create([
            'model_id'   => $customer->id,
            'model_type' => Customer::class,
            'type'       => 'initiate-followup',
            'method'     => 'whatsapp',
        ]);

        return response('success');
    }

    public function updateStatus(Request $request, $id)
    {
        $order = Order::find($id);

        StatusChange::create([
            'model_id'    => $order->id,
            'model_type'  => Order::class,
            'user_id'     => Auth::id(),
            'from_status' => $order->order_status,
            'to_status'   => $request->status,
        ]);

        $order->order_status = $request->status;
        $order->save();

        if (! $order->is_sent_initial_advance() && $order->order_status == OrderHelper::$proceedWithOutAdvance && $order->order_type == 'online') {
            $product_names = '';
            foreach (OrderProduct::where('order_id', $order->id)->get() as $order_product) {
                $product_names .= $order_product->product ? $order_product->product->name . ', ' : '';
            }

            $delivery_time = $order->estimated_delivery_date ? Carbon::parse($order->estimated_delivery_date)->format('d \of\ F') : Carbon::parse($order->order_date)->addDays(15)->format('d \of\ F');

            $auto_reply = AutoReply::where('type', 'auto-reply')->where('keyword', 'cod-online-confirmation')->first();

            $auto_message = preg_replace('/{product_names}/i', $product_names, $auto_reply->reply);
            $auto_message = preg_replace('/{delivery_time}/i', $delivery_time, $auto_message);

            $followup_message = AutoReply::where('type', 'auto-reply')->where('keyword', 'cod-online-followup')->first()->reply;
            $requestData      = new Request();
            $requestData2     = new Request();
            $requestData->setMethod('POST');
            $requestData2->setMethod('POST');
            $requestData->request->add(['customer_id' => $order->customer->id, 'message' => $auto_message, 'status' => 2]);
            $requestData2->request->add(['customer_id' => $order->customer->id, 'message' => $followup_message, 'status' => 2]);

            app(\App\Http\Controllers\WhatsAppController::class)->sendMessage($requestData, 'customer');
            app(\App\Http\Controllers\WhatsAppController::class)->sendMessage($requestData2, 'customer');

            CommunicationHistory::create([
                'model_id'   => $order->id,
                'model_type' => Order::class,
                'type'       => 'initial-advance',
                'method'     => 'whatsapp',
            ]);
        } elseif (! $order->is_sent_online_confirmation() && $order->order_status == \App\Helpers\OrderHelper::$prepaid) {
            $auto_message = AutoReply::where('type', 'auto-reply')->where('keyword', 'prepaid-order-confirmation')->first()->reply;
            $requestData  = new Request();
            $requestData->setMethod('POST');
            $requestData->request->add(['customer_id' => $order->customer->id, 'message' => $auto_message, 'status' => 2]);

            app(\App\Http\Controllers\WhatsAppController::class)->sendMessage($requestData, 'customer');

            CommunicationHistory::create([
                'model_id'   => $order->id,
                'model_type' => Order::class,
                'type'       => 'online-confirmation',
                'method'     => 'whatsapp',
            ]);
        }

        if ($order->order_status == \App\Helpers\OrderHelper::$refundToBeProcessed) {
            $refund = Refund::where('order_id', $order->id)->first();

            if (! $refund) {
                Refund::create([
                    'customer_id'     => $order->customer->id,
                    'order_id'        => $order->id,
                    'type'            => 'Cash',
                    'date_of_request' => Carbon::now(),
                    'date_of_issue'   => Carbon::now()->addDays(10),
                ]);
            }

            if ($order->payment_mode == 'paytm') {
                if ($order->customer) {
                    $all_amount = 0;

                    if ($order->order_product) {
                        foreach ($order->order_product as $order_product) {
                            $all_amount += $order_product->product_price;
                        }
                    }

                    $order->customer->credit += $all_amount;
                    $order->customer->save();
                }
            } elseif ($order->payment_mode != 'paytm' || $order->advance_detail > 0) {
                if ($order->customer) {
                    $order->customer->credit += $order->advance_detail;
                    $order->customer->save();
                }
            }
        }

        if ($order->order_status == \App\Helpers\OrderHelper::$delivered) {
            if ($order->order_product) {
                foreach ($order->order_product as $order_product) {
                    if ($order_product->product) {
                        if ($order_product->product->supplier == 'In-stock') {
                            $order_product->product->supplier = '';
                            $order_product->product->save();
                        }
                    }
                }
            }

            if (! $order->is_sent_order_delivered()) {
                $message     = AutoReply::where('type', 'auto-reply')->where('keyword', 'order-delivery-confirmation')->first()->reply;
                $requestData = new Request();
                $requestData->setMethod('POST');
                $requestData->request->add(['customer_id' => $order->customer_id, 'message' => $message, 'status' => 2]);

                app(\App\Http\Controllers\WhatsAppController::class)->sendMessage($requestData, 'customer');

                CommunicationHistory::create([
                    'model_id'   => $order->id,
                    'model_type' => Order::class,
                    'type'       => 'order-delivered',
                    'method'     => 'whatsapp',
                ]);
            }
        }
    }

    public function sendRefund(Request $request, $id)
    {
        $order = Order::find($id);

        if (! $order->is_sent_refund_initiated()) {
            $product_names = '';
            foreach (OrderProduct::where('order_id', $order->id)->get() as $order_product) {
                $product_names .= $order_product->product ? $order_product->product->name . ', ' : '';
            }

            $auto_reply = AutoReply::where('type', 'auto-reply')->where('keyword', 'order-refund')->first();

            $auto_message = preg_replace('/{order_id}/i', $order->order_id, $auto_reply->reply);
            $auto_message = preg_replace('/{product_names}/i', $product_names, $auto_message);

            $requestData = new Request();
            $requestData->setMethod('POST');
            $requestData->request->add(['customer_id' => $order->customer->id, 'message' => $auto_message, 'status' => 2]);

            app(\App\Http\Controllers\WhatsAppController::class)->sendMessage($requestData, 'customer');

            CommunicationHistory::create([
                'model_id'   => $order->id,
                'model_type' => Order::class,
                'type'       => 'refund-initiated',
                'method'     => 'whatsapp',
            ]);

            $from_email = \App\Helpers::getFromEmail($order->customer->id);
            $emailClass = (new RefundProcessed($order->order_id, $product_names))->build();

            $storeWebsiteOrder = $order->storeWebsiteOrder;
            $email             = Email::create([
                'model_id'         => $order->id,
                'model_type'       => Order::class,
                'from'             => $from_email,
                'to'               => $order->customer->email,
                'subject'          => $emailClass->subject,
                'message'          => $emailClass->render(),
                'template'         => 'refund-initiated',
                'additional_data'  => $order->id,
                'status'           => 'pre-send',
                'store_website_id' => ($storeWebsiteOrder) ? $storeWebsiteOrder->store_website_id : null,
            ]);

            \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');
        }

        return response('success');
    }

    public function generateAWB(Request $request)
    {
        $options = [
            'trace'        => 1,
            'style'        => SOAP_DOCUMENT,
            'use'          => SOAP_LITERAL,
            'soap_version' => SOAP_1_2,
        ];

        $soap = new SoapClient('https://netconnect.bluedart.com/Ver1.8/ShippingAPI/Waybill/WayBillGeneration.svc?wsdl', $options);

        $soap->__setLocation('https://netconnect.bluedart.com/Ver1.8/ShippingAPI/Waybill/WayBillGeneration.svc');

        $soap->sendRequest  = true;
        $soap->printRequest = false;
        $soap->formatXML    = true;

        $actionHeader = new \SoapHeader('https://www.w3.org/5005/08/addressing', 'Action', 'https://tempuri.org/IWayBillGeneration/GenerateWayBill', true);

        $soap->__setSoapHeaders($actionHeader);

        $order = Order::find($request->order_id);

        $order->customer->name    = $request->customer_name;
        $order->customer->address = $request->customer_address1;
        $order->customer->city    = $request->customer_address2;
        $order->customer->pincode = $request->customer_pincode;

        $order->customer->save();

        $pickup_datetime = explode(' ', $request->pickup_time);
        $pickup_date     = $pickup_datetime[0];
        $pickup_time     = str_replace(':', '', $pickup_datetime[1]);

        $total_price = 0;

        foreach ($order->order_product as $product) {
            $total_price += $product->product_price;
        }

        $piece_count = $order->order_product()->count();

        $actual_weight = $request->box_width * $request->box_length * $request->box_height / 5000;

        $params = [
            'Request' => [
                'Consignee' => [
                    'ConsigneeAddress1' => $order->customer->address,
                    'ConsigneeAddress2' => $order->customer->city,
                    'ConsigneeMobile'   => $order->customer->phone,
                    'ConsigneeName'     => $order->customer->name,
                    'ConsigneePincode'  => $order->customer->pincode,
                ],
                'Services' => [
                    'ActualWeight'      => $actual_weight,
                    'CreditReferenceNo' => $order->id,
                    'PickupDate'        => $pickup_date,
                    'PickupTime'        => $pickup_time,
                    'PieceCount'        => $piece_count,
                    'DeclaredValue'     => 500,
                    'ProductCode'       => 'D',
                    'ProductType'       => 'Dutiables',
                    'Dimensions'        => [
                        'Dimension' => [
                            'Breadth' => $request->box_width,
                            'Count'   => $piece_count,
                            'Height'  => $request->box_height,
                            'Length'  => $request->box_length,
                        ],
                    ],
                ],
                'Shipper' => [
                    'CustomerAddress1' => '807, Hubtown Viva, Western Express Highway, Shankarwadi, Andheri East',
                    'CustomerAddress2' => 'Mumbai',
                    'CustomerCode'     => '382500',
                    'CustomerMobile'   => '022-62363488',
                    'CustomerName'     => 'Solo Luxury',
                    'CustomerPincode'  => '400060',
                    'IsToPayCustomer'  => '',
                    'OriginArea'       => 'BOM',
                ],
            ],
            'Profile' => [
                'Api_type'   => 'S',
                'LicenceKey' => env('BLUEDART_LICENSE_KEY'),
                'LoginID'    => env('BLUEDART_LOGIN_ID'),
                'Version'    => '1.3', ],
        ];

        $result = $soap->__soapCall('GenerateWayBill', [$params])->GenerateWayBillResult;

        if ($result->IsError) {
            if (is_array($result->Status->WayBillGenerationStatus)) {
                $error = '';
                foreach ($result->Status->WayBillGenerationStatus as $error_object) {
                    $error .= $error_object->StatusInformation . '. ';
                }
            } else {
                $error = $result->Status->WayBillGenerationStatus->StatusInformation;
            }

            return redirect()->back()->with('error', "$error");
        } else {
            Storage::disk('files')->put('waybills/' . $order->id . '_package_slip.pdf', $result->AWBPrintContent);

            $waybill                = new Waybill;
            $waybill->order_id      = $order->id;
            $waybill->awb           = $result->AWBNo;
            $waybill->box_width     = $request->box_width;
            $waybill->box_height    = $request->box_height;
            $waybill->box_length    = $request->box_length;
            $waybill->actual_weight = $actual_weight;
            $waybill->package_slip  = $order->id . '_package_slip.pdf';
            $waybill->pickup_date   = $request->pickup_time;
            $waybill->save();
        }

        return redirect()->back()->with('success', 'You have successfully generated AWB!');
    }

    public function calculateBalanceAmount(Order $order)
    {
        $order_instance = Order::where('id', $order->id)->with('order_product')->get()->first();

        $balance_amt = 0;

        foreach ($order_instance->order_product as $order_product) {
            $balance_amt += $order_product->product_price * $order_product->qty;
        }

        if (! empty($order_instance->advance_detail)) {
            $balance_amt -= $order_instance->advance_detail;
        }

        $order->update([
            'balance_amount' => $balance_amt,
        ]);
    }

    public function getTotalOrderPrice($order_instance)
    {
        $balance_amt = 0;

        foreach ($order_instance->order_product as $order_product) {
            $balance_amt += $order_product->product_price * $order_product->qty;
        }

        return $balance_amt;
    }

    /**
     * Remove the specified resource from storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function destroy(Order $order)
    {
        $order->delete();

        return redirect('order')->with('success', 'Order has been archived');
    }

    public function permanentDelete(Order $order)
    {
        $order_products = OrderProduct::where('order_id', '=', $order->id);

        $order_products->delete();
        $comments = Comment::where('subject_id', $order->id)->where('subject_type', Order::class);
        $comments->delete();

        $order->forceDelete();

        return redirect('order')->with('success', 'Order has been  deleted');
    }

    public function deleteOrderProduct(OrderProduct $order_product)
    {
        $key = request('key');
        if (! empty($key)) {
            $defaultData = session($key);
            if (! empty($defaultData['selected_product'])) {
                $postProducts = [];
                foreach ($defaultData['selected_product'] as $product) {
                    if ($product != $order_product->product_id) {
                        $postProducts = $product;
                    }
                }
                $defaultData['selected_product'] = $postProducts;
                session([$key => $defaultData]);
            }
        }
        $order_product->delete();

        return redirect()->back()->with('message', 'Product Detached');
    }

    public static function attachProduct($model_id, $product_id)
    {
        $product = Product::where('id', '=', $product_id)->get()->first();

        $order_product = OrderProduct::where('order_id', $model_id)->where('product_id', $product_id)->first();
        $order         = Order::find($model_id);
        $size          = '';

        if ($order && $order->customer && ($order->customer->shoe_size != '' || $order->customer->clothing_size != '')) {
            if ($product->category != 1) {
                if ($product->product_category->title != 'Clothing' || $product->product_category->title != 'Shoes') {
                    if ($product->product_category->parent && ($product->product_category->parent->title == 'Clothing' || $product->product_category->parent->title == 'Shoes')) {
                        if ($product->product_category->parent->title == 'Clothing') {
                            $size = $order->customer->clothing_size;
                        } else {
                            $size = $order->customer->shoe_size;
                        }
                    }
                } else {
                    if ($product->product_category->title == 'Clothing') {
                        $size = $order->customer->clothing_size;
                    } else {
                        $size = $order->customer->shoe_size;
                    }
                }
            }
        }

        if (empty($order_product)) {
            $product = OrderProduct::create([
                'order_id'      => $model_id,
                'product_id'    => $product->id,
                'sku'           => $product->sku,
                'product_price' => $product->price_special_offer != '' ? $product->price_special_offer : $product->price_inr_special,
                'color'         => $product->color,
                'size'          => $size,
            ]);

            $action = 'Attached';
        } else {
            $action = 'Attached';
        }

        return $action;
    }

    public function generateNextOrderId()
    {
        $previous = Order::withTrashed()->latest()->where('order_type', '=', 'Offline')->first(['order_id']);

        if (! empty($previous)) {
            $temp = explode('-', $previous);

            return 'OFF-' . (intval($temp[1]) + 1);
        }

        return 'OFF-1000001';
    }

    public function getOrderProductsWithProductData($order_id)
    {
        $orderProducts = OrderProduct::where('order_id', '=', $order_id)->get()->toArray();

        foreach ($orderProducts as $key => $value) {
            if (! empty($orderProducts[$key]['color'])) {
                $temp = Product::where('id', '=', $orderProducts[$key]['product_id'])
                    ->where('color', $orderProducts[$key]['color'])
                    ->get()->first();
            } else {
                $temp = Product::where('id', '=', $orderProducts[$key]['product_id'])
                    ->get()->first();
            }

            if (! empty($temp)) {
                $orderProducts[$key]['product']          = $temp;
                $orderProducts[$key]['product']['image'] = $temp->getMedia(config('constants.media_tags'))->first() ? getMediaUrl($temp->getMedia(config('constants.media_tags'))->first()) : '';
            }
        }

        return $orderProducts;
    }

    public function callManagement(Request $request)
    {
        $reservedCalls = \App\TwilioCallWaiting::with('storeWebsite')->leftJoin('customers as c', 'c.phone', \DB::raw('REPLACE(twilio_call_waitings.from, "+", "")'))->orderBy('twilio_call_waitings.created_at', 'desc')
            ->select(['twilio_call_waitings.*', 'c.name', 'c.email'])->get();

        return view('orders.call_management', compact('reservedCalls'));
    }

    public function getCurrentCallNumber()
    {
        $getnumber = TwilioDequeueCall::where('agent_id', Auth::id())->first();

        return response()->json([
            'number' => $getnumber->caller,
        ]);
    }

    public function getCurrentCallInformation()
    {
        try {
            $getnumber = TwilioDequeueCall::where('agent_id', Auth::id())->first();
            $agent     = TwilioAgent::where('user_id', Auth::id())->first();

            $users = \App\Customer::select('id')->where('phone', str_replace('+', '', $getnumber->caller))->get()->toArray();

            $allleads = [];
            $orders   = (new \App\Order())->newQuery()->with('customer')->leftJoin('store_website_orders as swo', 'swo.order_id', 'orders.id')
                ->leftJoin('order_products as op', 'op.order_id', 'orders.id')
                ->leftJoin('products as p', 'p.id', 'op.product_id')
                ->leftJoin('brands as b', 'b.id', 'p.brand')->groupBy('orders.id')
                ->where('orders.store_id', $agent->store_website_id)
                ->whereIn('customer_id', $users)
                ->select(['orders.*', \DB::raw('group_concat(b.name) as brand_name_list'), 'swo.website_id'])->orderBy('created_at', 'desc')->limit(5)->get();
            $allleads[] = $this->getLeadsInformation($users);
            if ($orders->count()) {
                foreach ($orders as &$value) {
                    $value->storeWebsite    = $value->storeWebsiteOrder ? ($value->storeWebsiteOrder->storeWebsite ?? 'N/A') : 'N/A';
                    $value->order_date      = Carbon::parse($value->order_date)->format('d-m-y');
                    $totalBrands            = explode(',', $value->brand_name_list);
                    $value->brand_name_list = (count($totalBrands) > 1) ? 'Multi' : $value->brand_name_list;
                    $value->status          = \App\Helpers\OrderHelper::getStatusNameById($value->order_status_id);
                }
            }

            return response()->json([
                'all_leads' => $allleads,
                'orders'    => $orders,
            ]);
        } catch (Exception $e) {
            return response()->json([
                'message' => $e->getMessage(),
            ], 500);
        }
    }

    private function getLeadsInformation($ids)
    {
        $source = \App\ErpLeads::leftJoin('products', 'products.id', '=', 'erp_leads.product_id')
            ->leftJoin('customers as c', 'c.id', 'erp_leads.customer_id')
            ->leftJoin('erp_lead_status as els', 'els.id', 'erp_leads.lead_status_id')
            ->leftJoin('categories as cat', 'cat.id', 'erp_leads.category_id')
            ->leftJoin('brands as br', 'br.id', 'erp_leads.brand_id')
            ->whereIn('erp_leads.customer_id', $ids)
            ->orderBy('erp_leads.id', 'desc')
            ->select(['erp_leads.*', 'products.name as product_name', 'cat.title as cat_title', 'br.name as brand_name', 'els.name as status_name', 'c.name as customer_name', 'c.id as customer_id']);

        $total  = $source->count();
        $source = $source->latest()->limit(5)->get();

        foreach ($source as $key => $value) {
            $source[$key]->media_url = null;
            $media                   = $value->getMedia(config('constants.media_tags'))->first();
            if ($media) {
                $source[$key]->media_url = getMediaUrl($media);
            }

            if (empty($source[$key]->media_url) && $value->product_id) {
                $product = \App\Product::find($value->product_id);
                $media   = $product->getMedia(config('constants.media_tags'))->first();
                if ($media) {
                    $source[$key]->media_url = getMediaUrl($media);
                }
            }
        }

        return $source;
    }

    public function missedCalls(Request $request)
    {
        $callBusyMessages = CallBusyMessage::with(['status' => function ($q) {
            return $q->select('id', 'name', 'label');
        }])
            ->leftjoin('call_recordings as cr', 'cr.twilio_call_sid', 'call_busy_messages.caller_sid')
            ->leftjoin('twilio_call_data as tcd', 'tcd.call_sid', 'call_busy_messages.caller_sid')
            ->select('call_busy_messages.*', 'cr.recording_url as recording_urls', 'tcd.aget_user_id', 'tcd.from', 'tcd.to', 'tcd.call_data')
            ->groupby('call_busy_messages.caller_sid')
            ->orderBy('call_busy_messages.id', 'DESC');

        if (! empty($request->filterStatus)) {
            $callBusyMessages->where('call_busy_message_statuses_id', $request->filterStatus);
        }

        if (! empty($request->filterWebsite)) {
            $callBusyMessages->whereHas('customer.storeWebsite', function (Builder $query) use ($request) {
                $query->where('id', $request->filterWebsite);
            });
        }

        $callBusyMessages_pagination = $callBusyMessages->paginate(Setting::get('pagination'));
        $callBusyMessages            = $callBusyMessages->paginate(Setting::get('pagination'))->toArray();

        foreach ($callBusyMessages['data'] as $key => $value) {
            $storeId      = null;
            $activeNumber = TwilioActiveNumber::where('phone_number', '+' . trim($value['to'], '+'))->first();
            if ($activeNumber) {
                $storeId = StoreWebsiteTwilioNumber::where('twilio_active_number_id', $activeNumber->id)->first();
            }

            if (is_numeric($value['twilio_call_sid'])) {
                $formatted_phone = str_replace('+', '', $value['twilio_call_sid']);
                if (! empty($storeId->store_website_id)) {
                    $customer_array = Customer::with('storeWebsite', 'orders')->where('phone', $formatted_phone)->where('store_website_id', $storeId->store_website_id)->get()->toArray();
                }

                if ($value['aget_user_id'] != '') {
                    $user_data  = User::where('id', $value['aget_user_id'])->first();
                    $agent_name = $user_data->name;
                } else {
                    $agent_name = '';
                }

                if (! empty($customer_array)) {
                    $callBusyMessages['data'][$key]['customerid']       = $customer_array[0]['id'];
                    $callBusyMessages['data'][$key]['customer_name']    = $customer_array[0]['name'];
                    $callBusyMessages['data'][$key]['store_website_id'] = $customer_array[0]['store_website_id'];

                    $callBusyMessages['data'][$key]['agent']     = $agent_name;
                    $callBusyMessages['data'][$key]['from']      = $value['from'];
                    $callBusyMessages['data'][$key]['to']        = $value['to'];
                    $callBusyMessages['data'][$key]['call_data'] = $value['call_data'];

                    if (isset($customer_array[0]['store_website']) && count($customer_array[0]['store_website'])) {
                        $callBusyMessages['data'][$key]['store_website_name'] = $customer_array[0]['store_website']['title'];
                    }

                    if (! empty($customer_array[0]['lead'])) {
                        $callBusyMessages['data'][$key]['lead_id'] = $customer_array[0]['lead']['id'];
                    }
                }
            }
        }

        $storeWebsite    = StoreWebsite::pluck('title', 'id');
        $selectedStatus  = $request->filterStatus;
        $selectedWebsite = $request->filterWebsite;
        $allStatuses     = CallBusyMessageStatus::get();

        $reservedCalls = \App\TwilioCallWaiting::leftJoin('customers as c', 'c.phone', \DB::raw('REPLACE(twilio_call_waitings.from, "+", "")'))->orderBy('twilio_call_waitings.created_at', 'desc')
            ->select(['twilio_call_waitings.*', 'c.name', 'c.email'])->get();

        return view('orders.missed_call', compact('callBusyMessages', 'allStatuses', 'storeWebsite', 'selectedStatus', 'selectedWebsite', 'callBusyMessages_pagination', 'reservedCalls'));
    }

    public function getOrdersFromMissedCalls(Request $request)
    {
        $callBusyMessages = CallBusyMessage::findOrFail($request->id);

        $formatted_phone = str_replace('+91', '', $callBusyMessages->twilio_call_sid);

        $customer_array = Customer::with('orders')->where('phone', 'LIKE', "%$formatted_phone%")->first();

        return response()->json($customer_array->orders);
    }

    public function callsHistory(Request $request)
    {
        $calls        = CallHistory::latest();
        $storeWebId   = $request->get('storewebsite_filter');
        $customerIds  = $request->get('customer_filter');
        $status       = $request->get('status_filter');
        $customer_num = $request->get('phone_number') ? $request->get('phone_number') : '';
        $storeWebsite = $customer = $callHistoryStatus = [];
        if ((int) $storeWebId > 0) {
            $calls        = $calls->whereIn('store_website_id', $storeWebId);
            $storeWebsite = StoreWebsite::whereIn('id', $storeWebId)->orderBy('website')->get();
        }
        if ((int) $customerIds > 0) {
            $calls    = $calls->whereIn('customer_id', $customerIds);
            $customer = Customer::orWhereIn('id', $customerIds)->orderBy('name')->get();
        }
        if ((int) $status > 0) {
            $calls = $calls->where(function ($query) use ($status) {
                foreach ($status as $term) {
                    $query->orWhere('status', 'like', "%$term%");
                }
            });
            $callHistoryStatus = CallHistory::where(function ($query) use ($status) {
                foreach ($status as $term) {
                    $query->orWhere('status', 'like', "%$term%");
                }
            })->groupBy('status')->get();
        }

        if (isset($request->phone_number)) {
            $phoneNumber   = explode(',', $request->phone_number);
            $phone         = explode(',', $request->phone_number);
            $customerPhone = Customer::select(\DB::raw('group_concat(id) as customer_ids'))->where(function ($query) use ($phone) {
                foreach ($phone as $term) {
                    $query->orWhere('phone', 'like', "%$term%");
                }
            })->first();
            if (! empty($customerPhone->customer_ids)) {
                $customer_ids = explode(',', $customerPhone->customer_ids);
                $calls        = $calls->whereIn('customer_id', $customer_ids);
            }
        }
        $calls = $calls->paginate(Setting::get('pagination'));

        return view('orders.call_history', [
            'calls'             => $calls,
            'customer'          => $customer,
            'storeWebsite'      => $storeWebsite,
            'callHistoryStatus' => $callHistoryStatus,
            'customer_num'      => $customer_num,
        ]);
    }

    public function createProductOnMagento(Request $request, $id)
    {
        $order               = Order::find($id);
        $total_special_price = 0;

        foreach ($order->order_product as $order_product) {
            $total_special_price += $order_product->product_price;

            if ($order_product->product->category != 1) {
                $category      = Category::find($order_product->product->category);
                $url_structure = [];
                $category_id   = $category->magento_id;

                if ($category->parent) {
                    $parent           = $category->parent;
                    $url_structure[0] = $parent->title;
                    $category_id      = $parent->magento_id;

                    if ($parent->parent) {
                        $second_parent    = $parent->parent;
                        $url_structure[0] = $second_parent->title;
                        $url_structure[1] = $parent->title;
                    }
                }
            }
        }

        dd($url_structure, $category_id);

        $options = [
            'trace'              => true,
            'connection_timeout' => 120,
            'wsdl_cache'         => WSDL_CACHE_NONE,
        ];

        $proxy     = new \SoapClient(config('magentoapi.url'), $options);
        $sessionId = $proxy->login(config('magentoapi.user'), config('magentoapi.password'));

        /**
         * Configurable product
         */
        $productData = [
            'categories'        => $category_id,
            'name'              => 'Test Product from ERP',
            'description'       => '<p></p>',
            'short_description' => 'Short Test Description from ERP',
            'website_ids'       => [1],
            // Id or code of website
            'status' => 1,
            // 1 = Enabled, 2 = Disabled
            'visibility' => 1,
            // 1 = Not visible, 2 = Catalog, 3 = Search, 4 = Catalog/Search
            'tax_class_id' => 2,
            // Default VAT
            'weight'     => 0,
            'stock_data' => [
                'use_config_manage_stock' => 1,
                'manage_stock'            => 1,
            ],
            'price' => $total_special_price,
            // Same price than configurable product, no price change
            'special_price'   => '',
            'associated_skus' => '',
            // Simple products to associate
            'configurable_attributes' => [155],
        ];
        // Creation of configurable product
        $result      = $proxy->catalogProductCreate($sessionId, 'configurable', 14, "CUSTOMPRO$order->id", $productData);
        $product_url = "https://www.sololuxury.co.in/$url_structure[0]/$url_structure[1]/show-all/test-product-from-erp-$result.html";
        dd($product_url, $result);

        return $result;
    }

    /**
     * This function is use for Create Order email send journey log
     *
     * @param mixed $order_id
     * @param mixed $steps
     * @param mixed $modelType
     * @param mixed $sendType
     * @param mixed $seen
     * @param mixed $from
     * @param mixed $to
     * @param mixed $subject
     * @param mixed $message
     * @param mixed $template
     * @param mixed $errorMsg
     * @param mixed $storeWebsiteId
     *
     * @return created data
     */
    public function createEmailSendJourneyLog($order_id = '', $steps = '', $modelType = '', $sendType = '', $seen = '0', $from = '', $to = '', $subject = '', $message = '', $template = '', $errorMsg = '', $storeWebsiteId = '')
    {
        return OrderEmailSendJourneyLog::create(
            [
                'order_id'         => $order_id,
                'steps'            => $steps,
                'model_type'       => $modelType,
                'send_type'        => $sendType,
                'seen'             => $seen,
                'from_email'       => $from,
                'to_email'         => $to,
                'subject'          => $subject,
                'message'          => $message,
                'template'         => $template,
                'error_msg'        => $errorMsg,
                'store_website_id' => $storeWebsiteId,
            ]
        );
    }

    public function statusChange(Request $request)
    {
        $id          = $request->get('id');
        $status      = $request->get('status');
        $message     = $request->get('message');
        $sendmessage = $request->get('sendmessage');
        $order_via   = $request->order_via ?: [];
        if (! empty($id) && ! empty($status)) {
            $order   = \App\Order::where('id', $id)->first();
            $statuss = OrderStatus::where('id', $status)->first();
            if ($order) {
                $old_status             = $order->order_status_id;
                $order->order_status    = $statuss->status;
                $order->order_status_id = $status;
                $order->save();

                $history             = new OrderStatusHistory;
                $history->order_id   = $order->id;
                $history->old_status = $old_status;
                $history->new_status = $status;
                $history->user_id    = Auth::user()->id;
                $history->save();

                if (in_array('email', $order_via)) {
                    if (isset($request->sendmessage) && $request->sendmessage == '1') {
                        //Sending Mail on changing of order status
                        try {
                            $from_mail_address = $request->from_mail;
                            $to_mail_address   = $request->to_mail;
                            // send order canellation email
                            if (strtolower($statuss->status) == 'cancel') {
                                $emailClass = (new \App\Mails\Manual\OrderCancellationMail($order))->build();

                                if ($from_mail_address != '') {
                                    $emailClass->fromMailer = $from_mail_address;
                                }
                                if ($to_mail_address != '') {
                                    $order->customer->email = $to_mail_address;
                                }

                                $storeWebsiteOrder = $order->storeWebsiteOrder;
                                $email             = Email::create([
                                    'model_id'   => $order->id,
                                    'model_type' => Order::class,
                                    'from'       => $emailClass->fromMailer,
                                    'to'         => $order->customer->email,
                                    'subject'    => $emailClass->subject,
                                    'message'    => $request->message,
                                    // 'message'          => $emailClass->render(),
                                    'template'         => 'order-cancellation-update',
                                    'additional_data'  => $order->id,
                                    'status'           => 'pre-send',
                                    'store_website_id' => (isset($storeWebsiteOrder)) ? $storeWebsiteOrder->store_website_id : null,
                                    'is_draft'         => 0,
                                ]);

                                \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');
                                $this->createEmailSendJourneyLog($id, 'Email type via Order update status with ' . $statuss->status, Order::class, 'outgoing', '0', $emailClass->fromMailer, $order->customer->email, $emailClass->subject, $request->message, '', '', $storeWebsiteOrder->website_id);
                            } else {
                                $emailClass = (new \App\Mails\Manual\OrderStatusChangeMail($order))->build();
                                if ($from_mail_address != '') {
                                    $emailClass->fromMailer = $from_mail_address;
                                }
                                if ($to_mail_address != '') {
                                    $order->customer->email = $to_mail_address;
                                }

                                $storeWebsiteOrder = $order->storeWebsiteOrder;
                                $email             = Email::create([
                                    'model_id'        => $order->id,
                                    'model_type'      => Order::class,
                                    'from'            => $emailClass->fromMailer,
                                    'to'              => $order->customer->email,
                                    'subject'         => $emailClass->subject,
                                    'message'         => $request->custom_email_content,
                                    'template'        => 'order-status-update',
                                    'additional_data' => $order->id,
                                    'status'          => 'pre-send',
                                    'is_draft'        => 0,
                                ]);

                                \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');
                                $this->createEmailSendJourneyLog($id, 'Email type via Order update status with ' . $statuss->status, Order::class, 'outgoing', '0', $emailClass->fromMailer, $order->customer->email, $emailClass->subject, $request->message, '', '', $storeWebsiteOrder->website_id);
                            }
                        } catch (Exception $e) {
                            $this->createEmailCommonExceptionLog($order->id, $e->getMessage(), 'email');
                            $this->createEmailSendJourneyLog($id, 'Email type via Error', Order::class, 'outgoing', '0', $from_mail_address, $to_mail_address, $emailClass->subject, $request->message, '', $e->getMessage(), $order->storeWebsiteOrder);
                            \Log::info('Sending mail issue at the ordercontroller #2215 ->' . $e->getMessage());
                        }
                    } else {
                        $emailClass = (new \App\Mails\Manual\OrderStatusChangeMail($order))->build();

                        $storeWebsiteOrder = $order->storeWebsiteOrder;
                        $email             = Email::create([
                            'model_id'         => $order->id,
                            'model_type'       => Order::class,
                            'from'             => $emailClass->fromMailer,
                            'to'               => $order->customer->email,
                            'subject'          => $emailClass->subject,
                            'template'         => 'order-status-update',
                            'additional_data'  => $order->id,
                            'status'           => 'pre-send',
                            'store_website_id' => ($storeWebsiteOrder) ? $storeWebsiteOrder->store_website_id : null,
                            'is_draft'         => 0,
                        ]);

                        \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');
                        $this->createEmailSendJourneyLog($id, 'Order update status with ' . $statuss->status, Order::class, 'outgoing', '0', $emailClass->fromMailer, $order->customer->email, $emailClass->subject, $request->message, '', '', $storeWebsiteOrder->website_id);
                    }
                }

                if (in_array('sms', $order_via)) {
                    if (isset($request->sendmessage) && $request->sendmessage == '1') {
                        if (isset($order->storeWebsiteOrder)) {
                            $website = \App\Website::where('id', $order->storeWebsiteOrder->website_id)->first();

                            $receiverNumber = $order->contact_detail;
                            \App\Jobs\TwilioSmsJob::dispatch($receiverNumber, $request->message, $website->store_website_id, $order->id);
                            $this->createEmailSendJourneyLog($id, 'Email type IVA SMS Order update status with ' . $statuss->status, Order::class, 'outgoing', '0', $emailClass->fromMailer, $order->customer->email, $emailClass->subject, 'Phone : ' . $receiverNumber . ' <br/> ' . $request->message, '', '', $website->website_id);
                        }
                    }
                }
            }
            //Sending Mail on changing of order status
            if (isset($request->sendmessage) && $request->sendmessage == '1') {
                //sending order message to the customer
                UpdateOrderStatusMessageTpl::dispatch($order->id, request('message', null))->onQueue('customer_message');
            }
            $storeWebsiteOrder = StoreWebsiteOrder::where('order_id', $order->id)->first();
            if ($storeWebsiteOrder) {
                $website = StoreWebsite::find($storeWebsiteOrder->website_id);
                if ($website) {
                    $store_order_status = Store_order_status::where('order_status_id', $status)->where('store_website_id', $storeWebsiteOrder->website_id)->first();
                    if ($store_order_status) {
                        $magento_status = StoreMasterStatus::find($store_order_status->store_master_status_id);
                        if ($magento_status) {
                            $magentoHelper = new MagentoHelperv2;
                            $result        = $magentoHelper->changeOrderStatus($order, $website, $magento_status->value, '', '');
                            $this->createEmailSendJourneyLog($id, 'Magento Order update status with ' . $statuss->status, Order::class, 'outgoing', '0', $request->from_mail, $request->to_mail, 'Magento replay', $request->message, '', '', $storeWebsiteOrder->website_id);
                            /**
                             *check if response has error
                             */
                            $response = $result->getData();
                            if (isset($response) && isset($response->status) && $response->status == false) {
                                $this->createOrderMagentoErrorLog($order->id, $response->error);
                                $this->createEmailSendJourneyLog($id, 'Magento Error', Order::class, 'outgoing', '0', $request->from_mail, $request->to_mail, 'Magento Error', $response->error, '', '', $storeWebsiteOrder->website_id);

                                return response()->json($response->error, 400);
                            }
                        } else {
                            $this->createOrderMagentoErrorLog($order->id, 'Store MasterStatus Not Present');
                            $this->createEmailSendJourneyLog($id, 'Magento Error', Order::class, 'outgoing', '0', $request->from_mail, $request->to_mail, 'Magento Error Store MasterStatus Not Present', '', '', '', $storeWebsiteOrder->website_id);

                            return response()->json('Store MasterStatus Not Present', 400);
                        }
                    } else {
                        $this->createOrderMagentoErrorLog($order->id, 'Store Order Status Not Present');
                        $this->createEmailSendJourneyLog($id, 'Magento Error', Order::class, 'outgoing', '0', $request->from_mail, $request->to_mail, 'Magento Error Store Order Status Not Present', '', '', '', $storeWebsiteOrder->website_id);

                        return response()->json('Store Order Status Not Present', 400);
                    }
                } else {
                    $this->createOrderMagentoErrorLog($order->id, 'Website Order Not Present');
                    $this->createEmailSendJourneyLog($id, 'Magento Error', Order::class, 'outgoing', '0', $request->from_mail, $request->to_mail, 'Magento Error Store Website Order Not Present', '', '', '', '');

                    return response()->json('Website Order Not Present', 400);
                }
                $storeWebsiteOrder->update(['order_id', $status]);
            } else {
                $this->createOrderMagentoErrorLog($order->id, 'Store Website Order Not Present');
                $this->createEmailSendJourneyLog($id, 'Magento Error', Order::class, 'outgoing', '0', $request->from_mail, $request->to_mail, 'Magento Error Store Website Order Not Present', '', '', '', '');

                return response()->json('Store Website Order Not Present', 400);
            }
        }

        return response()->json('Success', 200);
    }

    /**
     * This function is use for List Order Exception Error Log
     *
     * @param Request $request Request
     *
     * @return view;
     */
    public function getOrderEmailSendJourneyLog(Request $request)
    {
        try {
            $logs = new OrderEmailSendJourneyLog();

            $from_email = $request->get('from_email');
            $to_email   = $request->get('to_email');
            $keyword    = $request->get('keyword');

            if ($from_email) {
                $logs = $logs->where('from_email', $from_email);
            }

            if ($to_email) {
                $logs = $logs->where('to_email', $to_email);
            }

            if (! empty($keyword)) {
                $logs = $logs->where(function ($q) use ($keyword) {
                    $q->orWhere('subject', 'LIKE', '%' . $keyword . '%')
                        ->orWhere('order_id', 'LIKE', '%' . $keyword . '%')
                        ->orWhere('steps', 'LIKE', '%' . $keyword . '%');
                });
            }

            $logs = $logs->get();

            $orderJourney = $logs->groupBy('order_id')->map(function ($group) {
                return $group->last();
            });

            // Group the logs by order_id
            $groupedLogs = $logs->groupBy('order_id')->map(function ($item) {
                // Within each order_id group, further group the logs by steps starting with "<Step Names>"
                $groupedSteps = $item->groupBy(function ($log) {
                    if (strpos($log->steps, 'Status Change') === 0) {
                        return 'Status Change';
                    }
                    if (strpos($log->steps, 'Email type via Order update status') === 0) {
                        return 'Email type via Order update status';
                    }
                    if (strpos($log->steps, 'Email type via Error') === 0) {
                        return 'Email type via Error';
                    }
                    if (strpos($log->steps, 'Email type IVA SMS Order update status') === 0) {
                        return 'Email type IVA SMS Order update status';
                    }
                    if (strpos($log->steps, 'Magento Order update status') === 0) {
                        return 'Magento Order update status';
                    }
                    if (strpos($log->steps, 'Magento Error') === 0) {
                        return 'Magento Error';
                    }
                    // For items that do not start with '<Step Names>', return the original steps
                    return $log->steps;
                });

                // Sort the logs within each steps group by 'created_at' in descending order
                return $groupedSteps->map(function ($logs) {
                    return $logs->sortByDesc('created_at');
                });
            });

            $allLogs = OrderEmailSendJourneyLog::all();

            $groupByOrders = $allLogs->reject(function ($log) {
                return empty($log->order_id);
            })->groupBy('order_id')->keys()->toArray();

            $groupByFromEmail = $allLogs->reject(function ($log) {
                return empty($log->from_email);
            })->groupBy('from_email')->keys()->toArray();

            $groupByToEmail = $allLogs->reject(function ($log) {
                return empty($log->to_email);
            })->groupBy('to_email')->keys()->toArray();

            if (count($orderJourney) > 0) {
                return view('orders.email_send_journey', compact('orderJourney', 'groupedLogs', 'groupByOrders', 'groupByFromEmail', 'groupByToEmail'));
            } else {
                return redirect()->back()->with('error', 'Record not found');
            }
        } catch (Exception $e) {
            return redirect()->back()->with('error', $e->getMessage());
        }
    }

    public function getOrderEmailSendJourneyStepLog(Request $request)
    {
        $stepName = $request->input('step_name');
        $orderId  = $request->input('order_id');

        // Fetch the step history data from the database using the $stepName and $orderId
        $stepHistoryData = OrderEmailSendJourneyLog::where('steps', 'LIKE', '%' . $stepName . '%')
            ->where('order_id', $orderId)
            ->orderBy('created_at', 'desc')
            ->get();

        // Return the step history data in a Blade view (step_history_modal_content.blade.php)
        return view('orders.email_send_journey_step_history_modal_content', compact('stepHistoryData'));
    }

    /**
     * This function is used to list the Order Status Journey
     *
     * @param Request $request Request
     *
     * @return view;
     */
    public function getOrderStatusJourney(Request $request)
    {
        $orders          = Order::paginate(25);
        $orderStatusList = OrderHelper::getStatus();

        if ($request->ajax()) {
            return response()->json([
                'tbody' => view('orders.partials.order-status', compact('orders', 'orderStatusList'))->render(),
            ], 200);
        }

        return view('orders.order-status-journey', compact('orders', 'orderStatusList'));
    }

    /**
     * This function is used to list the Order Journey
     *
     * @param Request $request Request
     *
     * @return view;
     */
    public function getOrderJourney(Request $request)
    {
        $filter_order        = $request->input('filter_order');
        $filer_customer_list = $request->filer_customer_list ?? '';

        $orders = Order::with('order_product', 'order_product.order_product_details', 'customer');

        if ($filter_order != '') {
            $orders = $orders->where('order.order_id', $filter_order);
        }

        if ($filer_customer_list != '') {
            $orders = $orders->whereHas('customer', function ($query) use ($filer_customer_list) {
                $query->whereIn('customers.id', $filer_customer_list);
            });
        }
        $orders = $orders->latest('id')->paginate(25);

        $orderStatusList = OrderStatus::pluck('status', 'id')->all();

        $datatableModel = DataTableColumn::select('column_name')->where('user_id', auth()->user()->id)->where('section_name', 'get-order-journey')->first();

        $dynamicColumnsToShowoj = [];
        if (! empty($datatableModel->column_name)) {
            $hideColumns            = $datatableModel->column_name ?? '';
            $dynamicColumnsToShowoj = json_decode($hideColumns, true);
        }

        if ($request->ajax()) {
            return response()->json([
                'tbody' => view('orders.partials.order-journey', compact('orders', 'orderStatusList', 'dynamicColumnsToShowoj'))->render(),
            ], 200);
        }

        $customer_list = Customer::pluck('name', 'id');

        return view('orders.order-journey', compact('orders', 'orderStatusList', 'dynamicColumnsToShowoj', 'customer_list'));
    }

    public function columnVisbilityUpdate(Request $request)
    {
        $userCheck = DataTableColumn::where('user_id', auth()->user()->id)->where('section_name', 'get-order-journey')->first();

        if ($userCheck) {
            $column               = DataTableColumn::find($userCheck->id);
            $column->section_name = 'get-order-journey';
            $column->column_name  = json_encode($request->column_oj);
            $column->save();
        } else {
            $column               = new DataTableColumn();
            $column->section_name = 'get-order-journey';
            $column->column_name  = json_encode($request->column_oj);
            $column->user_id      = auth()->user()->id;
            $column->save();
        }

        return redirect()->back()->with('success', 'column visiblity Added Successfully!');
    }

    public function getOrderProductsList(Request $request)
    {
        $order = Order::where('id', $request->id)->first();

        $productsIds = [];
        if (! empty($order->order_product)) {
            foreach ($order->order_product as $key => $value) {
                $productsIds[] = $value->product_id;
            }
        }

        $datas = Product::select('name')->whereIn('id', $productsIds)->get();

        return response()->json([
            'status'      => true,
            'data'        => $datas,
            'message'     => 'History get successfully',
            'status_name' => 'success',
        ], 200);
    }

    /**
     * This function is use for List Order Exception Error Log
     *
     * @param Request $request Request
     *
     * @return JsonReponse;
     */
    public function getOrderExceptionErrorLog(Request $request)
    {
        try {
            $orderError = EmailCommonExceptionLog::where('order_id', $request->order_id)->get();

            if (count($orderError) > 0) {
                return response()->json(['code' => 200, 'data' => $orderError]);
            } else {
                return response()->json(['code' => 500, 'message' => 'Could not find any error Log']);
            }
        } catch (Exception $e) {
            return response()->json(['code' => 500, 'message' => $e->getMessage()]);
        }
    }

    /**
     * This function is use for List Order Exception Error Log
     *
     * @param Request $request Request
     *
     * @return JsonReponse;
     */
    public function getOrderEmailSendLog(Request $request)
    {
        try {
            $orderError = Email::where('model_id', $request->order_id)->get();

            if (count($orderError) > 0) {
                return response()->json(['code' => 200, 'data' => $orderError]);
            } else {
                return response()->json(['code' => 500, 'message' => 'Could not find any error Log']);
            }
        } catch (Exception $e) {
            return response()->json(['code' => 500, 'message' => $e->getMessage()]);
        }
    }

    /**
     * This function is use for List Order SMS send Log
     *
     * @param Request $request Request
     * @param mixed   $id
     *
     * @return JsonReponse;
     */
    public function getOrderSmsSendLog($id)
    {
        try {
            $smsSendLogs = ChatMessage::where('order_id', $id)->latest()->get();

            if (count($smsSendLogs) > 0) {
                return response()->json(['code' => 200, 'data' => $smsSendLogs]);
            } else {
                return response()->json(['code' => 500, 'message' => 'Could not find any Log']);
            }
        } catch (Exception $e) {
            return response()->json(['code' => 500, 'message' => $e->getMessage()]);
        }
    }

    /**
     * This function user for create email commaon  error list
     *
     * @param $order (INT),
     * @param $logMsg (string)
     * @param mixed $order_id
     * @param mixed $type
     *
     * @return void
     */
    public function createEmailCommonExceptionLog($order_id = '', $logMsg = '', $type = '')
    {
        try {
            EmailCommonExceptionLog::create([
                'order_id'        => $order_id,
                'exception_error' => $logMsg,
                'type'            => $type,
            ]);
        } catch (Exception $e) {
            EmailCommonExceptionLog::create([
                'order_id' => $order_id,
                'log_msg'  => $e->getMessage(),
                'type'     => $type,
            ]);
        }
    }

    /**
     * This function user for get magent to order error list
     *
     * @param $order (INT),
     * @param $logMsg (string)
     *
     * @return void
     */
    public function getOrderMagentoErrorLogList(Request $request)
    {
        try {
            $getOrderList = OrderMagentoErrorLog::where('order_id', $request->order_id)->get();
            $html         = '';
            foreach ($getOrderList as $getOrder) {
                $html .= '<tr>';
                $html .= '<td>' . $getOrder->id . '</td>';
                $html .= '<td>' . $getOrder->log_msg . '</td>';
                $html .= '<td>' . $getOrder->created_at . '</td>';
                $html .= '</tr>';
            }

            return response()->json(['code' => 200, 'data' => $html, 'message' => 'Log Listed successfully']);
        } catch (Exception $e) {
            return response()->json(['code' => 500, 'data' => [], 'message' => 'Sorry , there is no matching order log']);
        }
    }

    /**
     * This function user for get  order payuload list
     *
     * @param $order (INT),
     * @param $logMsg (string)
     *
     * @return void
     */
    public function getOrderPayloadList(Request $request)
    {
        try {
            $getOrderList = Order::where('id', $request->order_id)->get();
            $html         = '';
            foreach ($getOrderList as $getOrder) {
                $html .= '<tr>';
                $html .= '<td>' . $getOrder->id . '</td>';
                $html .= '<td>' . $getOrder->order_id . '</td>';
                $html .= '<td>' . $getOrder->payload . '</td>';
                $html .= '<td>' . $getOrder->created_at . '</td>';
                $html .= '</tr>';
            }

            return response()->json(['code' => 200, 'data' => $html, 'message' => 'Payload Listed successfully']);
        } catch (Exception $e) {
            return response()->json(['code' => 500, 'data' => [], 'message' => $e->getMessage()]);
        }
    }

    /**
     * This function user for create magent to order error list
     *
     * @param $order (INT),
     * @param $logMsg (string)
     * @param mixed $order_id
     *
     * @return void
     */
    public function createOrderMagentoErrorLog($order_id, $logMsg)
    {
        try {
            OrderMagentoErrorLog::create([
                'order_id' => $order_id,
                'log_msg'  => $logMsg,
            ]);
        } catch (Exception $e) {
            OrderMagentoErrorLog::create([
                'order_id' => $order_id,
                'log_msg'  => $e->getMessage(),
            ]);
        }
    }

    public function sendInvoice(Request $request, $id)
    {
        $order = \App\Order::where('id', $id)->first();

        if ($order) {
            $data['order']    = $order;
            $data['customer'] = $order->customer;

            if ($order->customer) {
                Mail::to($order->customer->email)->send(new OrderInvoice($data));

                return response()->json(['code' => 200, 'data' => [], 'message' => 'Email sent successfully']);
            }
        }

        return response()->json(['code' => 500, 'data' => [], 'message' => 'Sorry , there is no matching order found']);
    }

    public function sendOrderEmail(Request $request, $id)
    {
        $order = Order::find($id);
        if (! $order->is_sent_offline_confirmation()) {
            if ($order->order_type == 'offline') {
                $emailClass = (new OrderConfirmation($order))->build();

                $storeWebsiteOrder = $order->storeWebsiteOrder;
                $email             = Email::create([
                    'model_id'         => $order->id,
                    'model_type'       => Order::class,
                    'from'             => $emailClass->fromMailer,
                    'to'               => $order->customer->email,
                    'subject'          => 'New Order # ' . $order->order_id,
                    'message'          => $emailClass->render(),
                    'template'         => 'order-confirmation',
                    'additional_data'  => $order->id,
                    'status'           => 'pre-send',
                    'store_website_id' => ($storeWebsiteOrder) ? $storeWebsiteOrder->store_website_id : null,
                    'is_draft'         => 0,
                ]);

                \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');
            }
        }

        return response()->json(['code' => 200, 'data' => [], 'message' => 'You have successfully sent confirmation email!']);
    }

    public function previewInvoice(Request $request, $id)
    {
        $order = \App\Order::where('id', $id)->first();
        if ($order) {
            $data['order']    = $order;
            $data['customer'] = $order->customer;
            if ($order->customer) {
                $invoice = new OrderInvoice($data);

                return $invoice->preview();
            }
        }

        return abort('404');
    }

    public function viewInvoice($id)
    {
        $invoice = Invoice::where('id', $id)->first();
        if ($invoice) {
            $data['invoice']      = $invoice;
            $data['orders']       = $invoice->orders;
            $data['buyerDetails'] = $invoice->orders[0]->customer;
            if ($invoice->orders) {
                $viewInvoice = new ViewInvoice($data);

                return $viewInvoice->preview();
            }
        }

        return abort('404');
    }

    //TODO downloadInvoice - added by jammer
    public function downloadInvoice(Request $request, $id)
    {
        $invoice = Invoice::with('orders.duty_tax')->where('id', $id)->first();
        if ($invoice) {
            $data['invoice']      = $invoice;
            $data['orders']       = $invoice->orders;
            $data['buyerDetails'] = $invoice->orders[0]->customer;
            if ($invoice->orders) {
                $viewInvoice = new ViewInvoice($data);

                return $viewInvoice->download();
            }
        }

        return abort('404');
    }

    public function generateRateRequet(Request $request)
    {
        $params  = $request->all();
        $rateReq = new GetRateRequest('soap');
        $rateReq->setRateEstimates('Y');
        $rateReq->setDetailedBreakDown('Y');
        $rateReq->setShipper([
            'city'         => $request->get('from_customer_city'),
            'postal_code'  => $request->get('from_customer_pincode'),
            'country_code' => $request->get('from_customer_country'),
            'person_name'  => $request->get('from_customer_name'),
            'company_name' => $request->get('from_company_name'),
            'phone'        => $request->get('from_customer_phone'),
        ]);
        $rateReq->setRecipient([
            'city'         => $request->get('customer_city'),
            'postal_code'  => $request->get('customer_pincode'),
            'country_code' => $request->get('customer_country', 'IN'),
            'person_name'  => $request->get('customer_name'),
            'company_name' => $request->get('company_name', ''),
            'phone'        => $request->get('customer_phone'),
        ]);

        $rateReq->setShippingTime(gmdate("Y-m-d\TH:i:s-05:00", strtotime($request->get('pickup_time'))));
        $rateReq->setDeclaredValue($request->get('amount'));
        $rateReq->setDeclaredValueCurrencyCode($request->get('currency'));
        $rateReq->setPackages([
            [
                'weight' => $request->get('actual_weight'),
                'length' => $request->get('box_length'),
                'width'  => $request->get('box_width'),
                'height' => $request->get('box_height'),
            ],
        ]);

        $response = $rateReq->call();
        if (! $response->hasError()) {
            $charges = $response->getChargesBreakDown();

            return response()->json(['code' => 200, 'data' => $charges]);
        } else {
            return response()->json(['code' => 500, 'data' => [], 'message' => ($response->getErrorMessage()) ? implode('<br>', $response->getErrorMessage()) : 'Rate request not generated']);
        }
    }

    public function generateAWBDHL(Request $request)
    {
        $params = $request->all();
        $this->validate($request, [
            'pickup_time'                        => 'required',
            'currency'                           => 'required',
            'box_length'                         => 'required',
            'box_width'                          => 'required',
            'box_height'                         => 'required',
            'notes'                              => 'required',
            'customer_name'                      => 'required',
            'customer_city'                      => 'required',
            'customer_country'                   => 'required',
            'customer_phone'                     => 'required',
            'customer_address1'                  => 'required|max:45',
            'customer_pincode'                   => 'required',
            'items'                              => 'required',
            'items.*.name'                       => 'required',
            'items.*.qty'                        => 'required|numeric',
            'items.*.unit_price'                 => 'required',
            'items.*.net_weight'                 => 'required',
            'items.*.gross_weight'               => 'required',
            'items.*.manufacturing_country_code' => 'required',
            'items.*.hs_code'                    => 'required',
            'description'                        => 'required',
        ]);

        // find order and customer
        $order = Order::find($request->order_id);

        if (! empty($order)) {
            $order->customer->name    = $request->customer_name;
            $order->customer->address = $request->customer_address1;
            $order->customer->city    = $request->customer_address2;
            $order->customer->pincode = $request->customer_pincode;
            $order->customer->save();
        }

        $rateReq = new CreateShipmentRequest('soap');
        $rateReq->setShipper([
            'street'       => $request->get('from_customer_address1'),
            'city'         => $request->get('from_customer_city'),
            'postal_code'  => $request->get('from_customer_pincode'),
            'country_code' => $request->get('from_customer_country'),
            'person_name'  => $request->get('from_customer_name'),
            'company_name' => $request->get('from_company_name'),
            'phone'        => $request->get('from_customer_phone'),
        ]);

        $rateReq->setRecipient([
            'street'       => $request->get('customer_address1'),
            'city'         => $request->get('customer_city'),
            'postal_code'  => $request->get('customer_pincode'),
            'country_code' => $request->get('customer_country', 'IN'),
            'person_name'  => $request->get('customer_name'),
            'company_name' => $request->get('customer_name'),
            'phone'        => $request->get('customer_phone'),
            'email'        => $request->get('customer_email'),
        ]);

        $rateReq->setShippingTime(gmdate("Y-m-d\TH:i:s", strtotime($request->get('pickup_time'))) . ' GMT+04:00');

        $declaredValue = 0;
        if (! empty($request->items)) {
            foreach ($request->items as $key => $itm) {
                $qty = is_numeric($itm['qty']) ? $itm['qty'] : 1;
                $declaredValue += $itm['unit_price'] * $qty;
            }
        }

        $rateReq->setDeclaredValue($declaredValue);
        $rateReq->setDescription($request->description);
        if ($request->duty_mode != null) {
            $rateReq->setPaymentInfo($request->duty_mode);
        }
        $rateReq->setPackages([
            [
                'weight' => (float) $request->get('actual_weight'),
                'length' => $request->get('box_length'),
                'width'  => $request->get('box_width'),
                'height' => $request->get('box_height'),
                'note'   => $request->get('notes'),
            ],
        ]);

        $phone = ! empty($request->get('customer_phone')) ? $request->get('customer_phone') : $order->customer->phone;
        $rateReq->setMobile($phone);
        $invoiceNumber = ($order) ? $order->order_id . '-' . date('Y-m-d-h-i-s') : 'OFFLINE' . '-' . date('Y-m-d-h-i-s');
        $rateReq->setInvoiceNumber($invoiceNumber);
        $rateReq->setPaperLess(true);
        $rateReq->setItems($request->items);

        $response = $rateReq->call();

        if ($response->hasError()) {
            $message               = $response->getErrorMessage();
            $isPaperLessTradeIssue = false;

            if (! empty($message)) {
                foreach ($message as $m) {
                    $pos = strpos($m, "'WY' is not available between this origin and destination");
                    if ($pos !== false) {
                        $isPaperLessTradeIssue = true;
                    }
                }
            }
            // set paperless trade fix
            if ($isPaperLessTradeIssue) {
                $rateReq->setPaperLess(0);
                $response = $rateReq->call(true);
            }
        }

        if (! $response->hasError()) {
            $receipt = $response->getReceipt();
            if (! empty($receipt) && ! empty($receipt['label_format'])) {
                if (strtolower($receipt['label_format']) == 'pdf') {
                    Storage::disk('files')->put('waybills/' . $receipt['tracking_number'] . '_package_slip.pdf', $bin = base64_decode($receipt['label_image'], true));

                    $waybill                = new Waybill;
                    $waybill->order_id      = ($order) ? $order->id : null;
                    $waybill->awb           = $receipt['tracking_number'];
                    $waybill->box_width     = $request->box_width;
                    $waybill->box_height    = $request->box_height;
                    $waybill->box_length    = $request->box_length;
                    $waybill->actual_weight = (float) $request->get('actual_weight');
                    $waybill->package_slip  = $receipt['tracking_number'] . '_package_slip.pdf';
                    $waybill->pickup_date   = $request->pickup_time;
                    //newly added
                    $waybill->from_customer_id        = ($order) ? $order->customer_id : null;
                    $waybill->from_customer_name      = $request->from_customer_name;
                    $waybill->from_city               = $request->from_customer_city;
                    $waybill->from_country_code       = $request->from_customer_country;
                    $waybill->from_customer_phone     = $request->from_customer_phone;
                    $waybill->from_customer_address_1 = $request->from_customer_address1;
                    $waybill->from_customer_address_2 = $request->from_customer_address2;
                    $waybill->from_customer_pincode   = $request->from_customer_pincode;
                    $waybill->from_company_name       = $request->from_company_name;
                    $waybill->to_customer_id          = null;
                    $waybill->to_customer_name        = $request->customer_name;
                    $waybill->to_city                 = $request->customer_city;
                    $waybill->to_country_code         = $request->customer_country;
                    $waybill->to_customer_phone       = $request->customer_phone;
                    $waybill->to_customer_address_1   = $request->customer_address1;
                    $waybill->to_customer_address_2   = $request->customer_address2;
                    $waybill->to_customer_pincode     = $request->customer_pincode;
                    $waybill->to_company_name         = $request->company_name;
                    $waybill->save();
                }

                return response()->json(['code' => 200, 'data' => [], 'message' => 'Receipt Created successfully']);
            }
        } else {
            return response()->json(['code' => 500, 'data' => [], 'message' => ($response->getErrorMessage()) ? implode('<br>', $response->getErrorMessage()) : 'Receipt not created']);
        }

        return response()->json(['code' => 500, 'data' => [], 'message' => 'Something went wrong can not create receipt']);
    }

    public function trackPackageSlip(Request $request)
    {
        $awb     = $request->get('awb');
        $wayBill = Waybill::where('awb', $awb)->first();
        if (! empty($wayBill)) {
            // check from the awb
            $trackShipment = new TrackShipmentRequest;
            $trackShipment->setAwbNumbers([$awb]);
            $results  = $trackShipment->call();
            $response = $results->getResponse();
            $view     = (string) view('partials.dhl.tracking', compact('response'));

            return response()->json(['code' => 200, '_h' => $view, 'awb' => $awb]);
        }

        return response()->json(['code' => 200, '_h' => 'No records found']);
    }

    public function viewAllInvoices(Request $request)
    {
        $invoices = Invoice::with('orders.order_product', 'orders.customer')->orderBy('id', 'desc');
        if (! empty($request->invoice_date)) {
            $invoices = $invoices->whereDate('invoice_date', '>=', $request->invoice_date);
        }
        if (! empty($request->invoice_to_date)) {
            $invoices = $invoices->whereDate('invoice_date', '<=', $request->invoice_to_date);
        }

        if (! empty($request->invoice_number)) {
            $invoices = $invoices->whereIn('invoice_number', $request->invoice_number);
        }

        if (! empty($request->customer_id)) {
            $invoices = $invoices->WhereHas('orders.customer', function ($query) use ($request) {
                $query->whereIn('customer_id', $request['customer_id']);
            });
        }

        if (! empty($request->store_website_id)) {
            $invoices = $invoices->WhereHas('orders.customer', function ($query) use ($request) {
                $query->whereIn('store_website_id', $request['store_website_id']);
            });
        }
        $invoices = $invoices->paginate(30);

        $invoice_array = $invoices->toArray();
        $invoice_id    = array_column($invoice_array['data'], 'id');

        $orders_array = Order::whereIn('invoice_id', $invoice_id)->get();

        $duty_shipping = [];
        foreach ($orders_array as $key => $order) {
            $duty_shipping[$order->id]['id'] = $order->id;

            $website_code_data = $order->duty_tax;
            if ($website_code_data != null) {
                $product_qty = count($order->order_product);

                $code = $website_code_data->website_code->code;

                $duty_countries     = $website_code_data->website_code->duty_of_country;
                $shipping_countries = $website_code_data->website_code->shipping_of_country($code);

                $duty_amount     = ($duty_countries->default_duty * $product_qty);
                $shipping_amount = ($shipping_countries->price * $product_qty);

                $duty_shipping[$order->invoice_id]['shipping'] = $duty_amount;
                $duty_shipping[$order->invoice_id]['duty']     = $shipping_amount;
            } else {
                $duty_shipping[$order->invoice_id]['shipping'] = 0;
                $duty_shipping[$order->invoice_id]['duty']     = 0;
            }
        }

        $invoiceNumber = Invoice::orderBy('id', 'desc')->select('id', 'invoice_number')->get();
        $customerName  = Customer::select('id', 'name')->orderBy('id', 'desc')->groupBy('name')->get();
        $websiteName   = StoreWebsite::select('id', 'website')->orderBy('id', 'desc')->groupBy('website')->get();

        return view('orders.invoices.index', compact('invoices', 'duty_shipping', 'invoiceNumber', 'customerName', 'websiteName'));
    }

    public function saveLaterCreate(Request $request)
    {
        $invoice  = Invoice::with('orders.duty_tax')->where('id', $request->invoiceId)->first();
        $invoices = Invoice::with('orders.order_product', 'orders.customer')->where('id', $request->invoiceId)->orderBy('id', 'desc')->get();
        if ($invoice) {
            $data['invoice']      = $invoice;
            $data['orders']       = $invoice->orders;
            $data['buyerDetails'] = $invoice->orders[0]->customer;
            $data['savePDF']      = true;
            if ($invoice->orders) {
                $viewInvoice             = new ViewInvoice($data);
                $file                    = $viewInvoice->download();
                $invoice                 = new InvoiceLater();
                $invoice->invoice_id     = $request->invoiceId;
                $invoice->invoice_number = $request->invoiceNumber;
                $invoice->file_name      = $file;
                $invoice->created_at     = date('Y-m-d H:i:s');
                $invoice->updated_at     = date('Y-m-d H:i:s');
                $invoice->save();
            }
        }
    }

    public function saveLaterList(Request $request)
    {
        $autoDeleteDays = config('constants.PRINT_LATER_AUTO_DELETE_DAYS');
        InvoiceLater::where('created_at', '<', Carbon::now()->subDays($autoDeleteDays))->delete();
        $invoiceList = new InvoiceLater();
        if ($request->has('from_date') && ! empty($request->from_date)) {
            $invoiceList = $invoiceList->where('created_at', '>=', $request->from_date . ' 00:00:00');
        }
        if ($request->has('to_date') && ! empty($request->to_date)) {
            $invoiceList = $invoiceList->where('created_at', '<=', $request->to_date . ' 23:59:59');
        }
        $invoiceList = $invoiceList->paginate(20);
        $ids         = $invoiceList->pluck('invoice_id')->toArray();
        $invoices    = Invoice::with('orders.order_product', 'orders.customer')->whereIn('id', $ids)->get();

        if ($request->has('invoice_num') && ! empty($request->invoice_num)) {
            $invoices = $invoices->WhereIn('invoice_number', $request->invoice_num);
        }

        if ($request->has('customer_name') && ! empty($request->customer_name)) {
            $customerNames = $request->customer_name;
            $invoices      = $invoices->filter(function ($invoice) use ($customerNames) {
                return $invoice->orders->contains(function ($order) use ($customerNames) {
                    return $order->customer && in_array($order->customer->name, $customerNames);
                });
            });
        }

        $invoice_array = $invoices->toArray();

        $invoice_id   = array_column($invoice_array, 'id');
        $orders_array = Order::whereIn('invoice_id', $invoice_id)->get();

        $duty_shipping = [];
        foreach ($orders_array as $key => $order) {
            $website_code_data = $order->duty_tax;
            if ($website_code_data != null) {
                $product_qty        = count($order->order_product);
                $code               = $website_code_data->website_code->code;
                $duty_countries     = $website_code_data->website_code->duty_of_country;
                $shipping_countries = $website_code_data->website_code->shipping_of_country($code);
                $duty_amount        = ($duty_countries->default_duty * $product_qty);
                $shipping_amount    = ($shipping_countries->price * $product_qty);
            }
        }
        $invoiceNumber = Invoice::orderBy('id', 'desc')->select('id', 'invoice_number')->groupBy('invoice_number')->get();
        $customerName  = Customer::select('id', 'name')->orderBy('id', 'desc')->groupBy('name')->get();
        $websiteName   = StoreWebsite::select('id', 'website')->orderBy('id', 'desc')->groupBy('website')->get();

        return view('orders.invoices.saveLaterInvoice', compact('invoiceList', 'invoices', 'duty_shipping', 'invoiceNumber', 'customerName', 'websiteName'));
    }

    public function ViewsaveLaterList(Request $request, $id)
    {
        $invoice = InvoiceLater::where('invoice_id', $id)->first();
        if (! empty($invoice)) {
            return \Response::make(file_get_contents(base_path() . '/public/pdf/' . $invoice->file_name), 200, [
                'content-type' => 'application/pdf',
            ]);
        }
    }

    public function addInvoice($id)
    {
        $firstOrder = Order::find($id);
        if ($firstOrder->customer) {
            if ($firstOrder->customer->country) {
                $prefix = substr($firstOrder->customer->country, 0, 3);
            } else {
                $prefix = 'Lux';
            }
        } else {
            $prefix = 'Lux';
        }
        $lastInvoice = Invoice::where('invoice_number', 'like', $prefix . '%')->orderBy('id', 'desc')->first();
        if ($lastInvoice) {
            $inoicePieces      = explode('-', $lastInvoice->invoice_number);
            $nextInvoiceNumber = $inoicePieces[1] + 1;
        } else {
            $nextInvoiceNumber = '1001';
        }
        $invoice_number = $prefix . '-' . $nextInvoiceNumber;
        $more_orders    = Order::where('customer_id', $firstOrder->customer_id)->where('invoice_id', null)->get();

        return view('orders.invoices.add', compact('firstOrder', 'invoice_number', 'more_orders'));
    }

    public function submitInvoice(Request $request)
    {
        if (! $request->invoice_number) {
            return redirect()->back()->with('error', 'Invoice number is mandatory');
        }
        if (! $request->first_order_id) {
            return redirect()->back()->with('error', 'Invalid approach');
        }
        $firstOrder = Order::where('invoice_id', null)->where('id', $request->first_order_id)->first();
        if (! $firstOrder) {
            return redirect()->back()->with('error', 'This order is already associated with an invoice');
        }

        $customerShippingAddress = [
            'address_type' => 'shipping',
            'city'         => $firstOrder->customer->city,
            'country_id'   => $firstOrder->customer->country,
            'email'        => $firstOrder->customer->email,
            'firstname'    => $firstOrder->customer->name,
            'postcode'     => $firstOrder->customer->pincode,
            'street'       => $firstOrder->customer->address,
            'order_id'     => $request->first_order_id,
        ];
        OrderCustomerAddress::insert($customerShippingAddress);

        $invoice                 = new Invoice;
        $invoice->invoice_number = $request->invoice_number;
        $invoice->invoice_date   = $request->invoice_date;
        $invoice->save();
        $firstOrder->update(['invoice_id' => $invoice->id]);
        if ($request->order_ids && count($request->order_ids) > 0) {
            $orders = Order::whereIn('id', $request->order_ids)->get();
            foreach ($orders as $order) {
                if ($order->id != $request->first_order_id) {
                    $order->update(['invoice_id' => $invoice->id]);
                }
            }
        }

        return redirect()->action([\App\Http\Controllers\OrderController::class, 'viewAllInvoices']);
    }

    //TODO::Update Invoice Address
    public function updateCustomerInvoiceAddress(Request $request)
    {
        Customer::where('id', $request->codex)->update([
            'country' => $request->country,
            'pincode' => $request->pincode,
            'city'    => $request->city,
            'address' => $request->address,
        ]);

        Session::flash('actSuccess', 'Address updated successfully!');

        return redirect()->back();
    }

    public function editInvoice($id)
    {
        $invoice     = Invoice::where('id', $id)->first();
        $order       = Order::where('invoice_id', $invoice['id'])->first();
        $more_orders = Order::where('customer_id', $order['customer_id'])->where(function ($query) use ($id) {
            $query->where('invoice_id', $id)
                ->orWhere('invoice_id', null);
        })->get();

        return view('orders.invoices.edit', compact('invoice', 'more_orders'));
    }

    //TODO::Working Invoice without existing order
    public function createInvoiceWithoutOrderNumber()
    {
        return view('orders.invoices.invoice-without-existing-order');
    }

    public function submitEdit(Request $request)
    {
        $invoice = Invoice::find($request->id);
        if (! $request->invoice_date || $request->invoice_date == '') {
            return redirect()->back()->with('error', 'Invalid approach');
        }
        $invoice->update(['invoice_date' => $request->invoice_date]);
        Order::where('invoice_id', $request->id)->update(['invoice_id' => null]);
        if ($request->order_ids && count($request->order_ids) > 0) {
            $orders = Order::whereIn('id', $request->order_ids)->get();
            foreach ($orders as $order) {
                $order->update(['invoice_id' => $invoice->id]);
            }
        }

        return redirect()->action([\App\Http\Controllers\OrderController::class, 'viewAllInvoices']);
    }

    /**
     * This function is use to get invoice customer email address.
     *
     * @param int $id
     *
     * @return array
     */
    public function getInvoiceCustomerEmail(Request $request, $id)
    {
        $invoice = Invoice::where('id', $id)->first();

        return [
            'email' => $invoice->orders[0]->customer->email,
            'id'    => $id,
        ];
    }

    /**
     * This function is use to Email invoice to customer
     *
     * @param int $id
     *
     * @return JsonResponse
     */
    public function mailInvoice(Request $request, $id)
    {
        try {
            $invoice = Invoice::where('id', $id)->first();
            if ($invoice) {
                $data['invoice'] = $invoice;
                $data['orders']  = $invoice->orders;
                if ($invoice->orders) {
                    Mail::to($invoice->orders[0]->customer->email)->send(new ViewInvoice($data));

                    return response()->json(['code' => 200, 'data' => [], 'message' => 'Email sent successfully']);
                }
            } else {
                Invoice::where('id', $id)->update(['invoice_error_log' => 'Sorry , there is no matching order found']);

                return response()->json(['code' => 500, 'data' => [], 'message' => 'Sorry , there is no matching order found']);
            }
        } catch (Exception $e) {
            \Log::info('Sending mail issue at the ordercontroller invoice log->' . $e->getMessage());
            Invoice::where('id', $id)->update(['invoice_error_log' => $e->getMessage()]);

            return response()->json(['code' => 500, 'data' => [], 'message' => $e->getMessage()]);
        }
    }

    public function mailInvoiceMultiSelect(Request $request, $index = '')
    {
        try {
            $invoices = Invoice::whereIn('id', $request->invoice_id)->get();
            foreach ($invoices as $invoice) {
                if ($invoice) {
                    $data['invoice'] = $invoice;
                    $data['orders']  = $invoice->orders;
                    if ($invoice->orders) {
                        Mail::to($invoice->orders[0]->customer->email)->send(new ViewInvoice($data));
                    }
                } else {
                    Invoice::where('id', $invoice->id)->update(['invoice_error_log' => 'Sorry , there is no matching order found']);
                }
            }

            return response()->json(['code' => 200, 'data' => [], 'message' => 'Email sent successfully']);
        } catch (Exception $e) {
            \Log::info('Sending mail issue at the ordercontroller invoice log->' . $e->getMessage());

            return response()->json(['code' => 500, 'data' => [], 'message' => $e->getMessage()]);
        }
    }

    public function GetInvoiceOrderUsers(Request $request)
    {
        try {
            $customerName = Customer::select('id', 'name')->where('name', 'LIKE', '%' . $request->searchTerm . '%')->orderBy('id', 'desc')->groupBy('name')->get();
            $data         = [];
            foreach ($customerName as $key => $value) {
                $data[] = ['id' => $value['id'], 'text' => $value['name']];
            }
            echo json_encode($data);
        } catch (Exception $e) {
            \Log::info('Having issue at the ordercontroller invoice log->' . $e->getMessage());

            return response()->json(['code' => 500, 'data' => [], 'message' => $e->getMessage()]);
        }
    }

    public function viewAllStatuses(Request $request)
    {
        $request->order_status_id ? $erp_status = $request->order_status_id :
            $erp_status                         = null;
        $store                                  = null;
        $query                                  = Store_order_status::query();
        if ($request->order_status_id) {
            $query      = $query->where('order_status_id', $request->order_status_id);
            $erp_status = $request->order_status_id;
        }
        if ($request->store_website_id) {
            $query = $query->where('store_website_id', $request->store_website_id);
            $store = $request->store_website_id;
        }
        $store_order_statuses = $query->paginate(20);
        $order_statuses       = OrderStatus::all();
        $store_website        = StoreWebsite::all();

        return view('orders.statuses.index', compact('store_order_statuses', 'order_statuses', 'store_website', 'erp_status', 'store'));
    }

    public function viewFetchStatus()
    {
        $store_website = StoreWebsite::all();

        return view('orders.statuses.fetch-order-status', compact('store_website'));
    }

    public function fetchStatus(Request $request)
    {
        $website       = StoreWebsite::find($request->store_website_id);
        $magentoHelper = new MagentoHelperv2;
        $result        = $magentoHelper->fetchOrderStatus($website);
        if ($result) {
            if ($result->status() == 200) {
                $statuses = json_decode($result->getContent());

                foreach ($statuses as $status) {
                    StoreMasterStatus::updateOrCreate([
                        'store_website_id' => $request->store_website_id,
                        'value'            => $status->value,
                    ], [
                        'label' => $status->label,
                    ]);
                }
                $this->store_order_status_history_create($request, $result, $request->store_website_id);
            } else {
                return redirect()->back()->with('error', $result->getContent());
            }
        } else {
            return redirect()->back()->with('error', 'Could not fetch the statuses');
        }

        return redirect()->back()->with('success', 'Status successfully updated');
    }

    public function viewCreateStatus()
    {
        $order_statuses        = OrderStatus::all();
        $store_website         = StoreWebsite::all();
        $store_master_statuses = StoreMasterStatus::all();

        return view('orders.statuses.create', compact('order_statuses', 'store_website', 'store_master_statuses'));
    }

    public function createStatus(Request $request)
    {
        $this->validate($request, [
            'order_status_id'        => 'required',
            'store_website_id'       => 'required',
            'store_master_status_id' => 'required',
        ]);
        $input   = $request->except('_token');
        $isExist = Store_order_status::where('order_status_id', $request->order_status_id)->where('store_website_id', $request->store_website_id)->where('store_master_status_id', $request->store_master_status_id)->first();
        if (! $isExist) {
            Store_order_status::create($input);

            $this->store_order_status_history_create($request, '', '');

            return redirect()->back();
        } else {
            return redirect()->back()->with('warning', 'Already exists');
        }
    }

    public function viewEdit($id)
    {
        $store_order_status    = Store_order_status::find($id);
        $order_statuses        = OrderStatus::all();
        $store_website         = StoreWebsite::all();
        $store_master_statuses = StoreMasterStatus::where('store_website_id', $store_order_status->store_website_id)->get();

        return view('orders.statuses.edit', compact('store_order_status', 'order_statuses', 'store_website', 'store_master_statuses'));
    }

    public function editStatus($id, Request $request)
    {
        $this->validate($request, [
            'order_status_id'        => 'required',
            'store_website_id'       => 'required',
            'store_master_status_id' => 'required',
        ]);
        $input   = $request->except('_token');
        $isExist = Store_order_status::where('order_status_id', $request->order_status_id)->where('store_website_id', $request->store_website_id)->where('store_master_status_id', $request->store_master_status_id)->first();

        if (! $isExist) {
            $this->store_order_status_history_update($request, '', $id);
            $store_order_status = Store_order_status::find($id);
            $store_order_status->update($input);

            return redirect()->back();
        } else {
            return redirect()->back()->with('warning', 'Already exists');
        }
    }

    public function fetchMasterStatus($id)
    {
        $store_master_statuses = StoreMasterStatus::where('store_website_id', $id)->get();

        return $store_master_statuses;
    }

    public function deleteBulkOrders(Request $request)
    {
        foreach ($request->ids as $id) {
            Order::where('id', $id)->delete();
        }

        return response()->json(['message' => 'Order has been archived']);
    }

    public function updateCustomer(Request $request)
    {
        if ($request->update_type == 1) {
            $ids = explode(',', $request->selected_orders);
            foreach ($ids as $id) {
                $order = \App\Order::where('id', $id)->first();
                if ($order && $request->customer_message && $request->customer_message != '') {
                    UpdateOrderStatusMessageTpl::dispatch($order->id, $request->customer_message)->onQueue('customer_message');
                }
            }
        } else {
            $ids = explode(',', $request->selected_orders);
            foreach ($ids as $id) {
                if (! empty($id) && $request->order_status) {
                    $order   = \App\Order::where('id', $id)->first();
                    $statuss = OrderStatus::where('id', $request->order_status)->first();
                    if ($order) {
                        $order->order_status    = $statuss->status;
                        $order->order_status_id = $request->order_status;
                        $order->save();

                        // this code is duplicate we need to fix it
                        //Sending Mail on changing of order status
                        $mailingListCategory = MailinglistTemplateCategory::where('title', 'Order Status Change')->first();
                        if ($mailingListCategory) {
                            if ($order->storeWebsiteOrder) {
                                $templateData = MailinglistTemplate::where('category_id', $mailingListCategory->id)->where('store_website_id', $order->storeWebsiteOrder->website_id)->first();
                            } else {
                                $templateData = MailinglistTemplate::where('name', 'Order Status Change')->first();
                            }
                            // @todo put the function to send mail from specific store emails
                            if ($templateData) {
                                $arrToReplace = ['{FIRST_NAME}', '{ORDER_STATUS}'];
                                $valToReplace = [$order->customer->name, $statuss->status];
                                $bodyText     = str_replace($arrToReplace, $valToReplace, $templateData->static_template);

                                $storeEmailAddress = EmailAddress::where('store_website_id', $order->customer->store_website_id)->first();
                                if ($storeEmailAddress) {
                                    $emailData['subject']         = $templateData->subject;
                                    $emailData['static_template'] = $bodyText;
                                    $emailData['from']            = $storeEmailAddress->from_address;

                                    $emailClass = (new OrderStatusMail($emailData))->build();

                                    $storeWebsiteOrder = $order->storeWebsiteOrder;
                                    $email             = Email::create([
                                        'model_id'         => $order->customer->id,
                                        'model_type'       => Customer::class,
                                        'from'             => $storeEmailAddress->from_address,
                                        'to'               => $order->customer->email,
                                        'subject'          => $emailClass->subject,
                                        'message'          => $emailClass->render(),
                                        'template'         => 'order-status-update',
                                        'additional_data'  => $order->id,
                                        'status'           => 'pre-send',
                                        'store_website_id' => ($storeWebsiteOrder) ? $storeWebsiteOrder->store_website_id : null,
                                    ]);

                                    \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');
                                }
                            }
                        }
                        // this code is duplicate we need to fix it

                        UpdateOrderStatusMessageTpl::dispatch($order->id, $request->customer_message)->onQueue('customer_message');

                        $storeWebsiteOrder = StoreWebsiteOrder::where('order_id', $order->id)->first();
                        if ($storeWebsiteOrder) {
                            $website = StoreWebsite::find($storeWebsiteOrder->website_id);
                            if ($website) {
                                $store_order_status = Store_order_status::where('order_status_id', $request->order_status)->where('store_website_id', $storeWebsiteOrder->website_id)->first();
                                if ($store_order_status) {
                                    $magento_status = StoreMasterStatus::find($store_order_status->store_master_status_id);
                                    if ($magento_status) {
                                        $magentoHelper = new MagentoHelperv2;
                                        $result        = $magentoHelper->changeOrderStatus($order, $website, $magento_status->value, '', '');
                                    }
                                }
                            }
                            $storeWebsiteOrder->update(['order_id', $request->order_status]);
                        }
                    }
                }
            }
        }

        return response()->json(['message' => 'Successful'], 200);
    }

    public function searchOrderForInvoice(Request $request)
    {
        $term   = $request->q;
        $orders = Order::leftJoin('customers', 'customers.id', 'orders.customer_id')
            ->where('orders.invoice_id', null)
            ->where(function ($q) use ($term) {
                $q->where('orders.order_id', 'like', '%' . $term . '%')
                    ->orWhere('orders.order_type', $term)
                    ->orWhere('orders.sales_person', Helpers::getUserIdByName($term))
                    ->orWhere('orders.received_by', Helpers::getUserIdByName($term))
                    ->orWhere('orders.client_name', 'like', '%' . $term . '%')
                    ->orWhere('customers.city', 'like', '%' . $term . '%')
                    ->orWhere('customers.name', 'like', '%' . $term . '%')
                    ->orWhere('customers.id', 'like', '%' . $term . '%')
                    ->orWhere('customers.phone', 'like', '%' . $term . '%');
            })
            ->select('orders.*', 'customers.name', 'customers.phone')
            ->get();

        return $orders;
    }

    //TODO::Get customerList
    public function getCustomers(Request $request)
    {
        if ($request->ajax()) {
            $term = $request->q;
            try {
                $customer = Customer::where('name', 'like', '%' . $term . '%')->take(100)->get();

                return $customer;
            } catch (Exception $ex) {
                //later put exception block message here
            }
        }
    }

    //TODO::Get companyList
    public function getCompany(Request $request)
    {
        if ($request->ajax()) {
            try {
                $term          = $request->q;
                $storeWebsites = \App\StoreWebsite::where('website_address', 'like', '%' . $term . '%')->take(100)->get();

                return $storeWebsites;
            } catch (Exception $ex) {
                //later put exception block message here
            }
        }
    }

    public function getSearchedProducts(Request $request)
    {
        $term = $request->q;
        try {
            $product = Product::where('name', 'like', '%' . $term . '%')->orWhere('short_description', 'like', '%' . $term . '%')->take(100)->get();

            return $product;
        } catch (Exception $ex) {
            //later put exception block message here
        }
    }

    public function updateDelDate(request $request)
    {
        $orderid                                  = $request->input('orderid');
        $newdeldate                               = $request->input('newdeldate');
        $fieldname                                = $request->input('fieldname');
        $oldOrderDelData                          = \App\Order::where('id', $orderid);
        $oldOrderDelDate                          = $oldOrderDelData->pluck('estimated_delivery_date');
        $oldOrderDelDate                          = (isset($oldOrderDelDate[0]) && $oldOrderDelDate[0] != '') ? $oldOrderDelDate[0] : '';
        $userId                                   = Auth::id();
        $estimated_delivery_histories             = new \App\EstimatedDeliveryHistory;
        $estimated_delivery_histories->order_id   = $orderid;
        $estimated_delivery_histories->field      = $fieldname;
        $estimated_delivery_histories->updated_by = $userId;
        $estimated_delivery_histories->old_value  = $oldOrderDelDate;
        $estimated_delivery_histories->new_value  = $newdeldate;
        $order_via                                = $request->order_via;

        if ($estimated_delivery_histories->save()) {
            $oldOrderDelData->update(['estimated_delivery_date' => $newdeldate]);
            $order = \App\Order::where('id', $orderid)->first();

            if (in_array('email', $order_via)) {
                $emailClass        = (new \App\Mails\Manual\OrderDeliveryDateChangeMail($order))->build();
                $storeWebsiteOrder = $order->storeWebsiteOrder;
                $email             = Email::create([
                    'model_id'         => $order->id,
                    'model_type'       => Order::class,
                    'from'             => $emailClass->fromMailer,
                    'to'               => $order->customer->email,
                    'subject'          => $emailClass->subject,
                    'message'          => $emailClass->render(),
                    'template'         => 'order-status-update',
                    'additional_data'  => $order->id,
                    'status'           => 'pre-send',
                    'store_website_id' => ($storeWebsiteOrder) ? $storeWebsiteOrder->store_website_id : null,
                    'is_draft'         => 0,
                ]);
                \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');
            }
            $message = 'Order delivery date has been changed to ' . $newdeldate;
            if (in_array('sms', $order_via)) {
                if (isset($order->storeWebsiteOrder)) {
                    $receiverNumber = $order->contact_detail;
                    if ($storeWebsiteOrder->store_website_id) {
                        \App\Jobs\TwilioSmsJob::dispatch($receiverNumber, $message, $storeWebsiteOrder->store_website_id);
                    }
                }
            }

            UpdateOrderStatusMessageTpl::dispatch($order->id, $message)->onQueue('customer_message');

            return response()->json(['code' => 200, 'data' => [], 'message' => 'Delivery Date Updated Successfully']);
        }

        return response()->json(['code' => 500, 'data' => [], 'message' => 'Something went wrong']);
    }

    public function viewEstDelDateHistory(request $request)
    {
        $orderid                      = $request->input('order_id');
        $estimated_delivery_histories = \App\EstimatedDeliveryHistory::select('estimated_delivery_histories.*', 'users.name')
            ->where('order_id', $orderid)
            ->where('estimated_delivery_histories.field', 'estimated_delivery_date')
            ->leftJoin('users', 'users.id', 'estimated_delivery_histories.updated_by')
            ->orderByDesc('estimated_delivery_histories.created_at')
            ->get();
        $html = view('partials.modals.estimated-delivery-date-histories')->with('estimated_delivery_histories', $estimated_delivery_histories)->render();

        return response()->json(['code' => 200, 'html' => $html, 'message' => 'Something went wrong']);
    }

    /**
     * @SWG\Get(
     *   path="/customer/order-details",
     *   tags={"Customer"},
     *   summary="Get customer order details",
     *   operationId="get-customer-order-details",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *   @SWG\Response(response=406, description="not acceptable"),
     *   @SWG\Response(response=500, description="internal server error"),
     *
     *      @SWG\Parameter(
     *          name="mytest",
     *          in="path",
     *          required=true,
     *          type="string"
     *      ),
     * )
     */
    public function customerOrderDetails(Request $request)
    {
        $token     = $request->token;
        $email     = $request->email;
        $order_no  = $request->order_no;
        $store_url = $request->website;

        $token = $request->bearerToken();
        if ((! $email || trim($email) == '') && empty($order_no)) {
            $message = $this->generate_erp_response('customer.order.failed', 0, $default = 'Email is absent in your request', request('lang_code'));

            return response()->json(['message' => $message, 'status' => 400]);
        }

        if ((! $order_no || trim($order_no) == '') && empty($email)) {
            $message = $this->generate_erp_response('customer.order.failed.reference_no_absent', 0, $default = 'Order reference no is absent in your request', request('lang_code'));

            return response()->json(['message' => $message, 'status' => 400]);
        }

        if (! $store_url || trim($store_url) == '') {
            $message = $this->generate_erp_response('customer.order.failed.store_url_absent', 0, $default = 'Store Url is absent in your request', request('lang_code'));

            return response()->json(['message' => $message, 'status' => 400]);
        }
        $store_website = StoreWebsite::where('website', 'like', $store_url)->first();
        if (! $store_website) {
            $message = $this->generate_erp_response('customer.order.failed.store_not_found', 0, $default = 'Store not found with this url', request('lang_code'));

            return response()->json(['message' => $message, 'status' => 404]);
        }
        if ($store_website->api_token != $token) {
            $message = $this->generate_erp_response('customer.order.failed.token_missing', $store_website->id, $default = 'Token mismatched', request('lang_code'));

            return response()->json(['message' => $message, 'status' => 401]);
        }

        if (! empty($email)) {
            $customer = Customer::where('email', $email)->where('store_website_id', $store_website->id)->first();
            if (! $customer) {
                return response()->json(['message' => 'Customer not found in this store for the requested email', 'status' => 404]);
            }
            $orders = Order::join('store_website_orders', 'orders.id', 'store_website_orders.order_id')
                ->where('orders.customer_id', $customer->id)
                ->where('store_website_orders.website_id', $store_website->id)
                ->select('orders.*')
                ->orderBy('created_at', 'desc')
                ->get();
        } else {
            $orders = Order::join('store_website_orders', 'orders.id', 'store_website_orders.order_id')
                ->where('store_website_orders.website_id', $store_website->id)
                ->where('store_website_orders.platform_order_id', $order_no)
                ->select('orders.*')
                ->orderBy('created_at', 'desc')
                ->get();
        }

        if (count($orders) == 0) {
            $message = $this->generate_erp_response('customer.order.failed.no_order_found', $store_website->id, $default = 'No orders found against this customer', request('lang_code'));

            return response()->json(['message' => $message, 'status' => 200]);
        }
        foreach ($orders as $order) {
            $histories = OrderStatusHistory::join('order_statuses', 'order_statuses.id', 'order_status_histories.new_status')
                ->where('order_status_histories.order_id', $order->id)
                ->select(['order_statuses.*', 'order_status_histories.created_at as created_at_time'])
                ->orderBy('order_status_histories.created_at', 'asc')
                ->get();
            $return_histories = [];
            if (count($histories) > 0) {
                foreach ($histories->toArray() as $h) {
                    $return_histories[] = [
                        'status'     => $h['status'],
                        'created_at' => $h['created_at_time'],
                    ];
                }
            }
            $waybill_history = waybillTrackHistories::join('waybills', 'waybills.id', 'waybill_track_histories.waybill_id')
                ->where('waybills.order_id', $order->id)
                ->select(['waybill_track_histories.*', 'waybill_track_histories.created_at  as created_at_time'])
                ->orderBy('waybill_track_histories.created_at', 'asc')
                ->get();

            if (count($waybill_history) > 0) {
                foreach ($waybill_history->toArray() as $h) {
                    $return_histories[] = [
                        'status'     => $h['comment'],
                        'created_at' => $h['created_at_time'],
                    ];
                }
            }

            if (! empty($return_histories)) {
                usort($return_histories, function ($a, $b) {
                    return strtotime($a['created_at']) - strtotime($b['created_at']);
                });
            }

            $order->status_histories = array_reverse($return_histories);
        }
        $orders  = $orders->toArray();
        $message = $this->generate_erp_response('customer.order.success', $store_website->id, $default = 'Orders Fetched successfully', request('lang_code'));

        return response()->json(['message' => $message, 'status' => 200, 'data' => $orders]);
    }

    public function addNewReply(request $request)
    {
        if ($request->reply) {
            $replyData                = [];
            $html                     = '';
            $replyData['reply']       = $request->reply;
            $replyData['model']       = 'Order';
            $replyData['category_id'] = 1;
            $success                  = Reply::create($replyData);
            if ($success) {
                $replies = Reply::where('model', 'Order')->get();
                if ($replies) {
                    $html .= "<option value=''>Select Order Status</option>";
                    foreach ($replies as $reply) {
                        $html .= '<option value="' . $reply->id . '">' . $reply->reply . '</option>';
                    }
                }

                return response()->json(['message' => 'reply added successfully', 'html' => $html, 'status' => 200]);
            }

            return response()->json(['message' => 'unable to add reply', 'status' => 500]);
        }

        return response()->json(['message' => 'please enter a reply', 'status' => 400]);
    }

    public function testEmail(Request $request)
    {
        Mail::raw('Hi, welcome user!', function ($message) {
            $message->to('webreak.pravin@gmail.com')->subject('Welcome Message');
        });

        exit;

        $order = \App\Order::find(2032);

        $emailClass = (new OrderConfirmation($order))->build();

        $email = \App\Email::create([
            'model_id'        => $order->id,
            'model_type'      => \App\Order::class,
            'from'            => $emailClass->fromMailer,
            'to'              => $order->customer->email,
            'subject'         => $emailClass->subject,
            'message'         => $emailClass->render(),
            'template'        => 'order-confirmation',
            'additional_data' => $order->id,
            'status'          => 'pre-send',
            'is_draft'        => 1,
        ]);

        \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');

        return response()->json(['message' => 'unable to add reply', 'status' => 500]);
    }

    public function statusChangeTemplate(Request $request)
    {
        $statusModal = \App\OrderStatus::where('id', $request->order_status_id)->first();
        $order       = \App\Order::where('id', $request->order_id)->first();
        $template    = \App\Order::ORDER_STATUS_TEMPLATE;
        if ($statusModal) {
            if (! empty($statusModal->message_text_tpl)) {
                $template = $statusModal->message_text_tpl;
            }
        }

        $template = str_replace(['#{order_id}', '#{order_status}'], [$order->order_id, $statusModal->status], $template);
        $from     = '';
        $preview  = '';
        if (strtolower($statusModal->status) == 'cancel') {
            $emailClass        = (new \App\Mails\Manual\OrderCancellationMail($order))->build();
            $storeWebsiteOrder = $order->storeWebsiteOrder;
            if ($emailClass != null) {
                $preview = $emailClass->render();
            }
            if ($storeWebsiteOrder) {
                $emailAddress = \App\EmailAddress::where('store_website_id', $storeWebsiteOrder->website_id)->first();
                if ($emailAddress) {
                    $from         = $emailAddress->from_address;
                    $fromTemplate = "<input type='email' required id='email_from_mail' class='form-control' name='from_mail' value='" . $from . "' >";
                } else {
                    $emailAddresses = \App\EmailAddress::pluck('from_address', 'id')->toArray();
                    $fromTemplate   = "<select class='form-control' id='email_from_mail' name='from_mail'>";
                    foreach ($emailAddresses as $emailAddress) {
                        $fromTemplate .= '<option>' . $emailAddress . '</option>';
                    }
                    $fromTemplate .= '</select>';
                }
            }
            $preview = "<table>
                    <tr>
                       <td>To</td><td>
                       <input type='email' required id='email_to_mail' class='form-control' name='to_mail' value='" . $order->customer->email . "' >
                       </td></tr><tr>
                       <td>From </td> <td>
                       $fromTemplate
                       </td></tr><tr>
                       <td>Preview </td> <td><textarea name='editableFile' rows='10' id='customEmailContent' >" . $preview . '</textarea></td>
                    </tr>
            </table>';
            $this->createEmailSendJourneyLog($order->id, 'Status Change to ' . $statusModal->status, \App\Order::class, 'outgoing', '0', $from, '', 'Order # ' . $order->id . ' Status has been changed', $preview, $template, '', $storeWebsiteOrder->website_id);
        } else {
            $emailClass = (new \App\Mails\Manual\OrderStatusChangeMail($order))->build();
            if ($emailClass != null) {
                $preview = $emailClass->render();
            }
            $storeWebsiteOrder = $order->storeWebsiteOrder;
            if ($storeWebsiteOrder) {
                $emailAddress = \App\EmailAddress::where('store_website_id', $storeWebsiteOrder->website_id)->first();
                if ($emailAddress) {
                    $from         = $emailAddress->from_address;
                    $fromTemplate = "<input type='email' required id='email_from_mail' class='form-control' name='from_mail' value='" . $from . "' >";
                } else {
                    $emailAddresses = \App\EmailAddress::pluck('from_address', 'id')->toArray();
                    $fromTemplate   = "<select class='form-control' id='email_from_mail' name='from_mail'>";
                    foreach ($emailAddresses as $emailAddress) {
                        $fromTemplate .= '<option>' . $emailAddress . '</option>';
                    }
                    $fromTemplate .= '</select>';
                }
            }
            $preview = "<table>
                    <tr>
                       <td>To</td><td>
                       <input type='email' required id='email_to_mail' class='form-control' name='to_mail' value='" . $order->customer->email . "' >
                       </td></tr><tr>
                       <td>From </td> <td>
                       $fromTemplate
                       </td></tr><tr>
                       <td>Preview </td> <td><textarea name='editableFile' rows='10' id='customEmailContent' >" . $preview . '</textarea></td>
                    </tr>
            </table>';
            $this->createEmailSendJourneyLog($order->id, 'Status Change to ' . $statusModal->status, \App\Order::class, 'outgoing', '0', $from, '', 'Order # ' . $order->id . ' Status has been changed', $preview, $template, '', $storeWebsiteOrder);
        }

        return response()->json(['code' => 200, 'template' => $template, 'preview' => $preview]);
    }

    public function prodctStatusChangeTemplate(Request $request)
    {
        $statusModal = \App\OrderStatus::where('id', $request->order_status_id)->first();
        $order       = \App\Order::where('id', $request->order_id)->first();
        $template    = \App\Order::ORDER_STATUS_TEMPLATE;
        if ($statusModal) {
            if (! empty($statusModal->message_text_tpl)) {
                $template = $statusModal->message_text_tpl;
            }
        }

        $template = str_replace(['#{order_id}', '#{order_status}'], [$order->order_id, $statusModal->status], $template);
        $from     = config('env.MAIL_FROM_ADDRESS');
        $preview  = '';
        if (strtolower($statusModal->status) == 'cancel') {
            $emailClass        = (new \App\Mails\Manual\OrderCancellationMail($order))->build();
            $storeWebsiteOrder = $order->storeWebsiteOrder;
            if ($emailClass != null) {
                $preview = $emailClass->render();
            }
            if ($storeWebsiteOrder) {
                $emailAddress = \App\EmailAddress::where('store_website_id', $storeWebsiteOrder->website_id)->first();
                if ($emailAddress) {
                    $from = $emailAddress->from_address;
                }
            }
            $preview = "<table>
                    <tr>
                       <td>To</td><td>
                       <input type='email' required id='email_to_mail' class='form-control' name='to_mail' value='" . $order->customer->email . "' >
                       </td></tr><tr>
                       <td>From </td> <td>
                       <input type='email' required id='email_from_mail' class='form-control' name='from_mail' value='" . $from . "' >
                       </td></tr><tr>
                       <td>Preview </td> <td><textarea name='editableFileproduct' rows='10' id='editableFileproduct1' >" . $preview . '</textarea></td>
                    </tr>
            </table>';
            $this->createEmailSendJourneyLog($order->id, 'Status Change to ' . $statusModal->status, \App\Order::class, 'outgoing', '0', $from, '', 'Order # ' . $order->id . ' Status has been changed', $preview, $template, '', $storeWebsiteOrder->website_id);
        } else {
            $emailClass = (new \App\Mails\Manual\OrderStatusChangeMail($order))->build();
            if ($emailClass != null) {
                $preview = $emailClass->render();
            }
            $storeWebsiteOrder = $order->storeWebsiteOrder;
            if ($storeWebsiteOrder) {
                $emailAddress = \App\EmailAddress::where('store_website_id', $storeWebsiteOrder->website_id)->first();
                if ($emailAddress) {
                    $from = $emailAddress->from_address;
                }
            }
            $preview = "<table>
                    <tr>
                       <td>To</td><td>
                       <input type='email' required id='email_to_mail' class='form-control' name='to_mail' value='" . $order->customer->email . "' >
                       </td></tr><tr>
                       <td>From </td> <td>
                       <input type='email' required id='email_from_mail' class='form-control' name='from_mail' value='" . $from . "' >
                       </td></tr><tr>
                       <td>Preview </td> <td><textarea name='editableFileproduct' rows='10' id='editableFileproduct1' >" . $preview . '</textarea></td>
                    </tr>
            </table>';
            $this->createEmailSendJourneyLog($order->id, 'Status Change to ' . $statusModal->status, \App\Order::class, 'outgoing', '0', $from, '', 'Order # ' . $order->id . ' Status has been changed', $preview, $template, '', $storeWebsiteOrder);
        }

        return response()->json(['code' => 200, 'template' => $template, 'preview' => $preview]);
    }

    public function productItemStatusChange(Request $request)
    {
        $id                    = $request->get('id');
        $order_product_item_id = $request->order_product_item_id;
        $status                = $request->get('status');
        $order_status_id       = $request->get('order_status_id');
        $message               = $request->get('message');
        $sendmessage           = $request->get('sendmessage');
        $order_via             = $request->order_via;
        if (! empty($id) && ! empty($status)) {
            $order         = \App\Order::where('id', $id)->first();
            $order_product = \App\OrderProduct::where('id', $order_product_item_id)->first();
            $statuss       = OrderStatus::where('id', $status)->first();
            $order_statuss = OrderStatus::where('id', $order_status_id)->first();

            $order_statuss_name = 'Status not assigned';
            if (! empty($order_statuss)) {
                $order_statuss_name = $order_statuss->status;
            }
            if ($order) {
                $order_product->delivery_status = $request->status;
                if ($request->status == '10') {
                    $order_product->delivery_date = date('Y-m-d H:s:i');
                } else {
                    $order_product->delivery_date = '';
                }
                $order_product->save();
                if (in_array('email', $order_via)) {
                    if (isset($request->sendmessage) && $request->sendmessage == '1') {
                        //Sending Mail on changing of order status
                        try {
                            $from_mail_address = $request->from_mail;
                            $to_mail_address   = $request->to_mail;
                            // send order canellation email
                            if (strtolower($statuss->status) == 'cancel') {
                                $emailClass = (new \App\Mails\Manual\OrderCancellationMail($order))->build();

                                if ($from_mail_address != '') {
                                    $emailClass->fromMailer = $from_mail_address;
                                }
                                if ($to_mail_address != '') {
                                    $order->customer->email = $to_mail_address;
                                }

                                $storeWebsiteOrder = $order->storeWebsiteOrder;
                                $email             = Email::create([
                                    'model_id'   => $order->id,
                                    'model_type' => Order::class,
                                    'from'       => $emailClass->fromMailer,
                                    'to'         => $order->customer->email,
                                    'subject'    => $emailClass->subject,
                                    'message'    => $request->message,
                                    // 'message'          => $emailClass->render(),
                                    'template'         => 'order-cancellation-update',
                                    'additional_data'  => $order->id,
                                    'status'           => 'pre-send',
                                    'store_website_id' => (isset($storeWebsiteOrder)) ? $storeWebsiteOrder->store_website_id : null,
                                    'is_draft'         => 0,
                                ]);

                                \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');
                                $this->createEmailSendJourneyLog($id, 'Email type via Order update status with ' . $statuss->status, Order::class, 'outgoing', '0', $emailClass->fromMailer, $order->customer->email, $emailClass->subject, $request->message, '', '', $storeWebsiteOrder->website_id);
                            } else {
                                $emailClass = (new \App\Mails\Manual\OrderStatusChangeMail($order))->build();
                                if ($from_mail_address != '') {
                                    $emailClass->fromMailer = $from_mail_address;
                                }
                                if ($to_mail_address != '') {
                                    $order->customer->email = $to_mail_address;
                                }

                                $storeWebsiteOrder = $order->storeWebsiteOrder;
                                $email             = Email::create([
                                    'model_id'   => $order->id,
                                    'model_type' => Order::class,
                                    'from'       => $emailClass->fromMailer,
                                    'to'         => $order->customer->email,
                                    'subject'    => $emailClass->subject,
                                    'message'    => $request->custom_email_content,
                                    // 'message'          => $emailClass->render(),
                                    'template'        => 'order-status-update',
                                    'additional_data' => $order->id,
                                    'status'          => 'pre-send',
                                    'is_draft'        => 0,
                                ]);

                                \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');
                                $this->createEmailSendJourneyLog($id, 'Email type via Order update status with ' . $statuss->status, Order::class, 'outgoing', '0', $emailClass->fromMailer, $order->customer->email, $emailClass->subject, $request->message, '', '', $storeWebsiteOrder->website_id);
                            }
                        } catch (Exception $e) {
                            $this->createEmailCommonExceptionLog($order->id, $e->getMessage(), 'email');
                            $this->createEmailSendJourneyLog($id, 'Email type via Error', Order::class, 'outgoing', '0', $from_mail_address, $to_mail_address, $emailClass->subject, $request->message, '', $e->getMessage(), $order->storeWebsiteOrder);
                            \Log::info('Sending mail issue at the ordercontroller #2215 ->' . $e->getMessage());
                        }
                    } else {
                        $emailClass = (new \App\Mails\Manual\OrderStatusChangeMail($order))->build();

                        $storeWebsiteOrder = $order->storeWebsiteOrder;
                        $email             = Email::create([
                            'model_id'         => $order->id,
                            'model_type'       => Order::class,
                            'from'             => $emailClass->fromMailer,
                            'to'               => $order->customer->email,
                            'subject'          => $emailClass->subject,
                            'template'         => 'order-status-update',
                            'additional_data'  => $order->id,
                            'status'           => 'pre-send',
                            'store_website_id' => ($storeWebsiteOrder) ? $storeWebsiteOrder->store_website_id : null,
                            'is_draft'         => 0,
                        ]);

                        \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');
                        $this->createEmailSendJourneyLog($id, 'Order update status with ' . $statuss->status, Order::class, 'outgoing', '0', $emailClass->fromMailer, $order->customer->email, $emailClass->subject, $request->message, '', '', $storeWebsiteOrder->website_id);
                    }
                }

                if (in_array('sms', $order_via)) {
                    if (isset($request->sendmessage) && $request->sendmessage == '1') {
                        if (isset($order->storeWebsiteOrder)) {
                            $website = \App\Website::where('id', $order->storeWebsiteOrder->website_id)->first();

                            $receiverNumber = $order->contact_detail;
                            \App\Jobs\TwilioSmsJob::dispatch($receiverNumber, $request->message, $website->store_website_id, $order->id);
                            $this->createEmailSendJourneyLog($id, 'Email type IVA SMS Order update status with ' . $statuss->status, Order::class, 'outgoing', '0', $emailClass->fromMailer, $order->customer->email, $emailClass->subject, 'Phone : ' . $receiverNumber . ' <br/> ' . $request->message, '', '', $website->website_id);
                        }
                    }
                }
            }

            //Sending Mail on changing of order status
            if (isset($request->sendmessage) && $request->sendmessage == '1') {
                //sending order message to the customer
                UpdateOrderStatusMessageTpl::dispatch($order->id, request('message', null))->onQueue('customer_message');
            }
            $storeWebsiteOrder = StoreWebsiteOrder::where('order_id', $order->id)->first();
            if ($storeWebsiteOrder) {
                $website = StoreWebsite::find($storeWebsiteOrder->website_id);
                if ($website) {
                    $store_order_status = Store_order_status::where('order_status_id', $status)->where('store_website_id', $storeWebsiteOrder->website_id)->first();
                    if ($store_order_status) {
                        $magento_status = StoreMasterStatus::find($store_order_status->store_master_status_id);
                        if ($magento_status) {
                            $magentoHelper = new MagentoHelperv2;
                            $result        = $magentoHelper->changeOrderStatus($order, $website, $magento_status->value, $order_product, $order_statuss_name);
                            $this->createEmailSendJourneyLog($id, 'Magento Order Product Item update status with ' . $statuss->status, Order::class, 'outgoing', '0', $request->from_mail, $request->to_mail, 'Magento replay', $request->message, '', '', $storeWebsiteOrder->website_id);
                            /**
                             *check if response has error
                             */
                            $response = $result->getData();
                            if (isset($response) && isset($response->status) && $response->status == false) {
                                $this->createOrderMagentoErrorLog($order->id, $response->error);
                                $this->createEmailSendJourneyLog($id, 'Magento Error', Order::class, 'outgoing', '0', $request->from_mail, $request->to_mail, 'Magento Error', $response->error, '', '', $storeWebsiteOrder->website_id);

                                return response()->json($response->error, 400);
                            }
                        } else {
                            $this->createOrderMagentoErrorLog($order->id, 'Store MasterStatus Not Present');
                            $this->createEmailSendJourneyLog($id, 'Magento Error', Order::class, 'outgoing', '0', $request->from_mail, $request->to_mail, 'Magento Error Store MasterStatus Not Present', '', '', '', $storeWebsiteOrder->website_id);

                            return response()->json('Store MasterStatus Not Present', 400);
                        }
                    } else {
                        $this->createOrderMagentoErrorLog($order->id, 'Store Order Status Not Present');
                        $this->createEmailSendJourneyLog($id, 'Magento Error', Order::class, 'outgoing', '0', $request->from_mail, $request->to_mail, 'Magento Error Store Order Status Not Present', '', '', '', $storeWebsiteOrder->website_id);

                        return response()->json('Store Order Status Not Present', 400);
                    }
                } else {
                    $this->createOrderMagentoErrorLog($order->id, 'Website Order Not Present');
                    $this->createEmailSendJourneyLog($id, 'Magento Error', Order::class, 'outgoing', '0', $request->from_mail, $request->to_mail, 'Magento Error Store Website Order Not Present', '', '', '', '');

                    return response()->json('Website Order Not Present', 400);
                }
                $storeWebsiteOrder->update(['order_id', $status]);
            } else {
                $this->createOrderMagentoErrorLog($order->id, 'Store Website Order Not Present');
                $this->createEmailSendJourneyLog($id, 'Magento Error', Order::class, 'outgoing', '0', $request->from_mail, $request->to_mail, 'Magento Error Store Website Order Not Present', '', '', '', '');

                return response()->json('Store Website Order Not Present', 400);
            }
        }

        return response()->json('Success', 200);
    }

    public function orderProductStatusChange(Request $request)
    {
        try {
            // Get order product
            $orderProduct = OrderProduct::FindOrFail($request->orderProductId);

            if ($orderProduct) {
                // Get status from request
                $orderProductStatusId = $request->orderProductStatusId;

                // Update the order product status in order products table.
                $orderProduct->order_product_status_id = $orderProductStatusId;
                $orderProduct->save();

                // Find mapped purchase status
                $mappedStatus = StatusMapping::where('order_status_id', $orderProductStatusId)->first();
                if ($mappedStatus) {
                    $purchaseStatusId = $mappedStatus->purchase_status_id;
                    if ($purchaseStatusId) {
                        $purchaseProductOrders = PurchaseProductOrder::whereRaw('json_contains(order_products_order_id, \'["' . $request->orderProductId . '"]\')')->pluck('id')->toArray();
                        if ($purchaseProductOrders) {
                            PurchaseProductOrder::whereIn('id', $purchaseProductOrders)->update(['purchase_status_id' => $purchaseStatusId]);
                        }
                    }
                }

                return response()->json(['messages' => 'Order Product Status Updated Successfully', 'code' => 200]);
            }
        } catch (Exception $e) {
            return response()->json(['message' => 'Order product not found!'], 404);
        }
    }

    public function getInvoiceDetails(Request $request, $invoiceId)
    {
        $invoice = \App\Invoice::find($invoiceId);

        return view('orders.invoices.partials.edit-invoice-modal', compact('invoice'));
    }

    public function updateDetails(Request $request, $invoiceId)
    {
        $items = $request->order;

        if (! empty($items)) {
            foreach ($items as $k => $item) {
                $order   = \App\Order::find($k);
                $address = \App\OrderCustomerAddress::where('order_id', $k)->where('address_type', 'shipping')->first();
                if (! $address) {
                    $address               = new \App\OrderCustomerAddress;
                    $address->order_id     = $k;
                    $address->address_type = 'shipping';
                    if ($order) {
                        $customer = $order->customer;
                        if ($customer) {
                            $address->customer_id    = $customer->id;
                            $address->email          = $customer->email;
                            @[$firstname, $lastname] = explode(' ', $customer->name);
                            $address->firstname      = isset($firstname) ? $firstname : '';
                            $address->lastname       = isset($lastname) ? $lastname : '';
                            $address->telephone      = $customer->phone;
                        }
                    }
                }
                $address->city       = $item['city'];
                $address->country_id = $item['country_id'];
                $address->street     = $item['street'];
                $address->postcode   = $item['postcode'];
                $address->save();
            }
        }

        $orderproducts = $request->order_product;

        if (! empty($orderproducts)) {
            foreach ($orderproducts as $k => $op) {
                $orderP = \App\OrderProduct::find($k);
                if ($orderP) {
                    $orderP->fill($op);
                    $orderP->save();
                }
            }
        }

        return response()->json(['code' => 200, 'data' => [], 'message' => 'Invoice updated successfully']);
    }

    public function addStatus(Request $request)
    {
        $label = preg_replace('/[^A-Za-z0-9-]+/', '-', $request->name);

        $newStatus = CallBusyMessageStatus::create([
            'label' => $label,
            'name'  => $request->name,
        ]);

        return response()->json(['data' => $newStatus, 'message' => $newStatus->name . ' status added successfully.']);
    }

    public function storeStatus(Request $request, $id)
    {
        $callBusyMessage                                = CallBusyMessage::find($id);
        $callBusyMessage->call_busy_message_statuses_id = $request->select_id;
        $callBusyMessage->save();

        return response()->json(['message' => ' Status updated successfuly.']);
    }

    public function sendWhatappMessageOrEmail(Request $request)
    {
        $newValue = [];
        parse_str($request->formData, $newValue);

        $defaultWhatapp = $task_info = \DB::table('whatsapp_configs')
            ->select('*')
            ->whereRaw('find_in_set(' . CustomerController::DEFAULT_FOR . ',default_for)')
            ->first();
        $defaultNo = $defaultWhatapp->number;

        $newArr         = $request->except(['_token', 'formData']);
        $addRequestData = array_merge($newValue, $newArr);

        if (empty($addRequestData['message'])) {
            return response()->json(['error' => 'Please type message']);
        }

        if (empty($addRequestData['whatsapp']) && empty($addRequestData['email'])) {
            return response()->json(['error' => 'Please select atleast one checkbox']);
        }

        $customer                = null;
        $shouldSaveInChatMessage = false;

        if ($addRequestData['customerId'] && ! empty($addRequestData['whatsapp'])) {
            $customer = Customer::find($addRequestData['customerId']);

            if (! empty($customer) && ! empty($customer->phone) && ! empty($customer->whatsapp_number)) {
                app(\App\Http\Controllers\WhatsAppController::class)->sendWithWhatsApp($customer->phone, $customer->whatsapp_number, $addRequestData['message']);
                $shouldSaveInChatMessage = true;
            }
        } elseif (! $addRequestData['customerId'] && ! empty($addRequestData['whatsapp'])) {
            $formatted_phone = str_replace('+91', '', $addRequestData['fullNumber']);
            $sendTo          = str_replace('+', '', $addRequestData['fullNumber']);
            $sendFrom        = $defaultNo;
            if (! empty($addRequestData['whatsapp']) && ! empty($sendTo) && ! empty($sendFrom)) {
                app(\App\Http\Controllers\WhatsAppController::class)->sendWithWhatsApp($sendTo, $sendFrom, $addRequestData['message']);
                $shouldSaveInChatMessage = true;
            }
        }

        if ($addRequestData['customerId'] && ! empty($addRequestData['email'])) {
            $customer = Customer::find($addRequestData['customerId']);

            $subject = 'Ordered miss-called';

            if (! empty($customer) && ! empty($customer->email) && ! empty($addRequestData['message'])) {
                // dump('send customer email final');
                $from = config('env.MAIL_FROM_ADDRESS');
                // Check from address exist for customer's store website
                $emailAddress = EmailAddress::where('store_website_id', $customer->store_website_id)->first();
                if ($emailAddress) {
                    $from = $emailAddress->from_address;
                }

                $email = Email::create([
                    'model_id'        => $customer->id,
                    'model_type'      => Customer::class,
                    'from'            => $from,
                    'to'              => $customer->email,
                    'subject'         => $subject,
                    'message'         => $addRequestData['message'],
                    'template'        => 'customer-simple',
                    'additional_data' => '',
                    'status'          => 'pre-send',
                    'is_draft'        => 0,
                ]);

                \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');

                $shouldSaveInChatMessage = true;
            }
        }

        if ($shouldSaveInChatMessage) {
            $params = [
                'customer_id' => $customer->id,
                'number'      => $customer->phone,
                'message'     => $addRequestData['message'],
                'user_id'     => Auth::id(),
                'approved'    => 0,
                'status'      => 1,
            ];

            ChatMessage::create($params);

            return response()->json(['message' => 'Message send successfully']);
        }
    }

    /**
     * This function is use for create Order log
     *
     * @param type [array] inputArray
     * @param Request $request Request
     * @param mixed   $logType
     * @param mixed   $log
     *
     * @return void;
     */
    public function createOrderLog(Request $request, $logType = '', $log = '')
    {
        try {
            OrderErrorLog::create([
                'order_id'   => $request->order_id ?? '',
                'event_type' => $logType,
                'log'        => $log,
            ]);
        } catch (Exception $e) {
            OrderErrorLog::create(['order_id' => $request->order_id ?? '', 'log' => $e->getMessage(), 'event_type' => $logType]);
        }
    }

    /**
     * This function is use for Payment History
     *
     * @param Request $request Request
     *
     * @return JsonReponse;
     */
    public function paymentHistory(Request $request)
    {
        $order_id    = $request->input('order_id');
        $html        = '';
        $paymentData = \App\CashFlow::where('cash_flow_able_id', $order_id)
            ->where('cash_flow_able_type', \App\Order::class)
            ->where('type', 'paid')
            ->orderBy('date', 'DESC')
            ->get();
        $i = 1;
        if (count($paymentData) > 0) {
            foreach ($paymentData as $history) {
                $html .= '<tr>';
                $html .= '<td>' . $history->id . '</td>';
                $html .= '<td>' . $history->amount . '</td>';
                $html .= '<td>' . $history->date . '</td>';
                $html .= '<td>' . $history->description . '</td>';
                $html .= '</tr>';

                $i++;
            }

            return response()->json(['html' => $html, 'success' => true], 200);
        } else {
            $html .= '<tr>';
            $html .= '<td colspan="4">No Record found</td>';
            $html .= '</tr>';
            $this->createOrderLog($request, 'Payment History', 'No Record found');
        }

        return response()->json(['html' => $html, 'success' => true], 200);
    }

    /**
     * This function is use for cancel Transaction
     *
     * @param Request $request Request
     *
     * @return JsonReponse;
     */
    public function cancelTransaction(Request $request)
    {
        $order_id          = $request->get('order_id');
        $order             = \App\Order::where('id', $order_id)->first();
        $storeWebsiteOrder = StoreWebsiteOrder::where('order_id', $order_id)->first();
        if ($storeWebsiteOrder) {
            $website = StoreWebsite::find($storeWebsiteOrder->website_id);

            if ($website) {
                $magentoHelper = new MagentoHelperv2;
                $result        = $magentoHelper->cancelTransaction($order, $website);
                $this->createOrderLog($request, 'Cancel Transaction from Magento request', $result);

                return response()->json(['message' => $result, 'success' => true], 200);
            }
        } else {
            $this->createOrderLog($request, 'Cancel Transaction', 'Store Website Orders not found');

            return response()->json(['message' => 'Store Website Orders not found', 'order_id' => $order_id, 'success' => false], 500);
        }
    }

    /**
     * This function is use for List Order log
     *
     * @param Request $request Request
     *
     * @return JsonReponse;
     */
    public function getOrderErrorLog(Request $request)
    {
        try {
            $orderError = OrderErrorLog::where('order_id', $request->order_id)->get();

            if (count($orderError) > 0) {
                return response()->json(['code' => 200, 'data' => $orderError]);
            } else {
                return response()->json(['code' => 500, 'message' => 'Could not find any data']);
            }
        } catch (Exception $e) {
            $orderError = OrderErrorLog::where('order_id', $request->order_id)->get();

            return response()->json(['code' => 500, 'message' => $e->getMessage()]);
        }
    }

    public function syncTransaction(Request $request)
    {
        $order_id       = $request->get('order_id');
        $transaction_id = $request->get('transaction_id');
        $order          = Order::where('order_id', $order_id)->first();
        $message        = 'Issue in order';
        $success        = false;
        if ($order) {
            $order->transaction_id = $transaction_id;
            $order->save();
            $message = 'Transaction id updated successfully';
            $success = true;
        }
        $this->createOrderLog($request, 'Sync Transaction', $message);

        return response()->json(['message' => $message, 'success' => $success], 200);
    }

    public function returnStatus(Request $request)
    {
        try {
            $order_id      = $request->get('id');
            $return_status = $request->get('status');
            if ($return_status) {
                $return_name = 'true';
            } else {
                $return_name = 'false';
            }
            $order   = Order::where('id', $order_id)->first();
            $message = 'Return Order status updated with ' . $return_name;
            $success = false;
            if ($order) {
                $order->order_return_request = $return_status;
                $order->save();
                $message = 'Return Order updated successfully with ' . $return_name;
                $success = true;
            }

            return response()->json(['message' => $message, 'success' => $success, 'code' => 200], 200);
        } catch (Exception $e) {
            return response()->json(['code' => 500, 'message' => $e->getMessage()]);
        }
    }

    public function store_order_status_history_create($request, $response, $store_website_id)
    {
        if (isset($response) && $response != '') {
            $response = json_encode($response);
        }
        $storeHistory = [
            'request'          => json_encode($request->all()),
            'response'         => $response,
            'store_website_id' => $store_website_id,
            'updated_by'       => \Auth::user()->id,
            'action_type'      => 'Fetch Store Status',
        ];
        StoreOrderStatusesHistory::create($storeHistory);
    }

    public function store_order_status_history_update($request, $response, $id)
    {
        $store_order_status = Store_order_status::find($id);
        if (isset($response) && $response != '') {
            $response = json_encode($response);
        }
        $storeHistory = [
            'request'                    => json_encode($request->all()),
            'response'                   => $response,
            'store_order_statuses_id'    => $id,
            'old_order_status_id'        => $store_order_status->order_status_id,
            'old_store_website_id'       => $store_order_status->store_website_id,
            'old_status'                 => $store_order_status->status,
            'old_store_master_status_id' => $store_order_status->store_master_status_id,

            'new_order_status_id'        => $request->order_status_id,
            'new_store_website_id'       => $request->store_website_id,
            'new_status'                 => $request->status,
            'new_store_master_status_id' => $request->store_master_status_id,

            'updated_by'  => \Auth::user()->id,
            'action_type' => 'Edit',
        ];

        StoreOrderStatusesHistory::create($storeHistory);
    }

    public function statusHistory()
    {
        $id = $_REQUEST['id'];

        $statusHistorySite = StoreOrderStatusesHistory::where('store_order_statuses_id', $id)->get();

        $store_website_id = 0;
        if (isset($statusHistorySite[0]->new_store_website_id) && $statusHistorySite[0]->new_store_website_id > 0) {
            $store_website_id = $statusHistorySite[0]->new_store_website_id;
        }

        $statusHistory = StoreOrderStatusesHistory::where('store_order_statuses_id', $id)->orWhere('store_website_id', $store_website_id)->get();

        $statusHistory = $statusHistory->map(function ($status) {
            $status->request                    = $status->request;
            $status->response                   = $status->response;
            $status->request_detail             = $status->request;
            $status->response_detail            = $status->response;
            $status->old_order_status_id        = OrderStatus::where('id', $status->old_order_status_id)->value('status');
            $status->old_store_website_id       = StoreWebsite::where('id', $status->old_store_website_id)->value('website');
            $status->old_store_master_status_id = StoreMasterStatus::where('id', $status->old_store_master_status_id)->value('label');

            $status->new_order_status_id        = OrderStatus::where('id', $status->new_order_status_id)->value('status');
            $status->new_store_website_id       = StoreWebsite::where('id', $status->new_store_website_id)->value('website');
            $status->new_store_master_status_id = StoreMasterStatus::where('id', $status->new_store_master_status_id)->value('label');

            return $status;
        });

        return response()->json(['code' => 200, 'data' => $statusHistory]);
    }

    public function customerList(Request $request)
    {
        $customer = Customer::where('name', '!=', '')->orderBy('name');
        if (! empty($request->q)) {
            $customer->where(function ($q) use ($request) {
                $q->where('name', 'LIKE', '%' . $request->q . '%');
            });
        }
        $customer                     = $customer->paginate(30);
        $result['total_count']        = $customer->total();
        $result['incomplete_results'] = $customer->nextPageUrl() !== null;

        foreach ($customer as $customer) {
            $result['items'][] = [
                'id'   => $customer->id,
                'text' => $customer->name,
            ];
        }

        return response()->json($result);
    }

    public function callhistoryStatusList(Request $request)
    {
        $callhistory = CallHistory::groupBy('status');
        if (! empty($request->q)) {
            $callhistory->where(function ($q) use ($request) {
                $q->where('name', 'LIKE', '%' . $request->q . '%');
            });
        }
        $callhistory                  = $callhistory->paginate(30);
        $result['total_count']        = $callhistory->total();
        $result['incomplete_results'] = $callhistory->nextPageUrl() !== null;

        foreach ($callhistory as $callhistory) {
            $result['items'][] = [
                'id'   => $callhistory->status,
                'text' => $callhistory->status,
            ];
        }

        return response()->json($result);
    }

    public function storeWebsiteList(Request $request)
    {
        $storewebsite = StoreWebsite::orderBy('website');
        if (! empty($request->q)) {
            $storewebsite->where(function ($q) use ($request) {
                $q->where('name', 'LIKE', '%' . $request->q . '%');
            });
        }
        $storewebsite                 = $storewebsite->paginate(30);
        $result['total_count']        = $storewebsite->total();
        $result['incomplete_results'] = $storewebsite->nextPageUrl() !== null;

        foreach ($storewebsite as $storewebsite) {
            $result['items'][] = [
                'id'   => $storewebsite->id,
                'text' => $storewebsite->website,
            ];
        }

        return response()->json($result);
    }

    public function getInvoiceCustomerEmailSelected(Request $request)
    {
        $ids      = explode(',', $request->ids);
        $emails   = [];
        $invoices = Invoice::whereIn('id', $ids)->get();
        foreach ($invoices as $invoice) {
            $emails[] = ['email' => $invoice->orders[0]->customer->email, 'id' => $invoice->id];
        }

        return $emails;
    }

    public function orderStatusColorCode(Request $request)
    {
        $perPage = 10;

        $orderStatus = OrderStatus::latest()
            ->paginate($perPage);

        $html = view('orders.order-status-modal-html')->with('orderStatus', $orderStatus)->render();

        return response()->json(['code' => 200, 'data' => $orderStatus, 'html' => $html, 'message' => 'Content render']);
    }

    public function orderStatusColorCodeUpdate(Request $request)
    {
        $orderstatus        = OrderStatus::find($request->orderId);
        $orderstatus->color = $request->colorValue;
        $orderstatus->save();

        return response()->json(['code' => 200, 'orderstatus' => $orderstatus, 'message' => 'Color Code has been Updated Succeesfully!']);
    }

    public function ordersColumnVisbilityUpdate(Request $request)
    {
        $userCheck = DataTableColumn::where('user_id', auth()->user()->id)->where('section_name', 'orders-listing')->first();

        if ($userCheck) {
            $column               = DataTableColumn::find($userCheck->id);
            $column->section_name = 'orders-listing';
            $column->column_name  = json_encode($request->column_orders);
            $column->save();
        } else {
            $column               = new DataTableColumn();
            $column->section_name = 'orders-listing';
            $column->column_name  = json_encode($request->column_orders);
            $column->user_id      = auth()->user()->id;
            $column->save();
        }

        return redirect()->back()->with('success', 'column visiblity Added Successfully!');
    }

    public function orderChangeStatusHistory(Request $request)
    {
        $order_id         = $request->order_id;
        $order_product_id = $request->product_item_id;

        $datas = OrderStatusMagentoRequestResponseLog::with('user', 'order')
            ->where('order_id', $order_id)
            ->where('order_product_id', $order_product_id)
            ->orderBy('created_at', 'DESC')
            ->get();

        return response()->json([
            'status'      => true,
            'data'        => $datas,
            'message'     => 'History get successfully',
            'status_name' => 'success',
        ], 200);
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/ProductController.php 
Content: <?php

namespace App\Http\Controllers;

use Auth;
use App\Sop;
use App\Sale;
use App\Task;
use App\User;
use App\Brand;
use App\Order;
use App\Sizes;
use App\Stage;
use App\Stock;
use App\Colors;
use App\HsCode;
use App\Product;
use App\Setting;
use App\Category;
use App\ErpLeads;
use App\Language;
use App\Supplier;
use Carbon\Carbon;
use App\LogRequest;
use App\ChatMessage;
use App\HsCodeGroup;
use App\UserProduct;
use App\OrderProduct;
use App\scraperImags;
use App\StoreWebsite;
use Dompdf\Exception;
use App\HsCodeSetting;
use App\ColorReference;
use App\ListingHistory;
use App\RejectedImages;
use App\ProductSupplier;
use App\ScrapedProducts;
use Plank\Mediable\Media;
use App\DescriptionChange;
use App\SimplyDutyCountry;
use App\SiteCroppedImages;
use App\Jobs\PushToMagento;
use App\Loggers\LogScraper;
use App\SimplyDutyCategory;
use App\CropImageGetRequest;
use App\Helpers\QueryHelper;
use App\Product_translation;
use App\ProductPushErrorLog;
use App\ProductSuggestedLog;
use App\TranslationLanguage;
use App\UserProductFeedback;
use Illuminate\Http\Request;
use App\Helpers\StatusHelper;
use App\CroppedImageReference;
use App\Helpers\ProductHelper;
use App\Loggers\LogListMagento;
use App\MessagingGroupCustomer;
use App\Models\DataTableColumn;
use App\PushToMagentoCondition;
use App\Jobs\PushProductOnlyJob;
use App\ProductTranslationHistory;
use Illuminate\Support\Facades\DB;
use App\Jobs\TestPushProductOnlyJob;
use App\CropImageHttpRequestResponse;
use App\Jobs\Flow2PushProductOnlyJob;
use Illuminate\Support\Facades\Queue;
use Qoraiche\MailEclipse\MailEclipse;
use Illuminate\Support\Facades\Redirect;
use App\Models\ProductListingFinalStatus;
use App\HsCodeGroupsCategoriesComposition;
use App\Jobs\Flow2ConditionCheckProductOnly;
use App\Jobs\ImageApprovalPushProductOnlyJob;
use seo2websites\MagentoHelper\MagentoHelper;
use Illuminate\Pagination\LengthAwarePaginator;
use App\Http\Requests\Products\ProductTranslationRequest;
use Plank\Mediable\Facades\MediaUploader as MediaUploader;

class ProductController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function __construct()
    {
        $this->middleware('permission:product-list', ['only' => ['show']]);
        $this->middleware('permission:product-lister', ['only' => ['listing']]);
        $this->middleware('permission:product-lister', ['only' => ['listing']]);
        $this->middleware('permission:product-create', ['only' => ['create', 'store']]);
        $this->middleware('permission:product-edit', ['only' => ['edit', 'update']]);

        $this->middleware('permission:product-delete', ['only' => ['destroy']]);
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request)
    {
        if ($request->archived == 'true') {
            $products = Product::onlyTrashed()->latest()->select(['id', 'sku', 'name']);
        } else {
            $products = Product::latest()->select(['id', 'sku', 'name']);
        }
        $term     = $request->term;
        $archived = $request->archived;

        if (! empty($term)) {
            $products = $products->where(function ($query) use ($term) {
                return $query
                    ->orWhere('id', 'like', '%' . $term . '%')
                    ->orWhere('name', 'like', '%' . $term . '%')
                    ->orWhere('sku', 'like', '%' . $term . '%');
            });
        }

        $products    = $products->paginate(Setting::get('pagination'));
        $websiteList = \App\Helpers\ProductHelper::storeWebsite();

        return view('products.index', compact('products', 'term', 'archived', 'websiteList'))
            ->with('i', (request()->input('page', 1) - 1) * 10);
    }

    public function customerReviews(Request $request)
    {
        $reviews = \App\CustomerReview::with('storeWebsite')->latest();
        $email   = '';
        $name    = '';
        $store   = '';
        if (! empty($request->email)) {
            $email = $request->email;
            $reviews->where('email', 'LIKE', '%' . $request->email . '%');
        }
        if (! empty($request->name)) {
            $name = $request->name;
            $reviews->where('name', 'LIKE', '%' . $request->name . '%');
        }
        if (! empty($request->store)) {
            $store = $request->store;
            $reviews->whereHas('storeWebsite', function ($q) use ($request) {
                $q->where('website', 'LIKE', '%' . $request->store . '%');
            });
        }

        $reviews = $reviews->paginate(15);

        return view('products.reviews', compact('reviews', 'email', 'name', 'store'));
    }

    public function deleteReview(Request $request)
    {
        $reviewID = $request->id;
        $delete   = \App\CustomerReview::where('id', $request->id)->delete();

        return response()->json(['code' => 200, 'message' => 'Review deleted successfully']);
    }

    public function approveReview(Request $request)
    {
        ini_set('memory_limit', '-1');

        $data  = ['platform_id' => $request->platform_id, 'status' => 1];
        $data  = json_encode($data);
        $url   = $request->base_url . '/testimonial/index/statusupdate';
        $token = $request->token;

        $ch = curl_init($url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
        curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: application/json', 'accept: application/json', 'Authorization: Bearer ' . $token]);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
        $result = curl_exec($ch);
        $err    = curl_error($ch);
        \Log::channel('approveReview')->info(json_encode([$url, $token, $data, $result, 'approveReview']));
        $response = json_decode($result);

        if ($response) {
            $update = \App\CustomerReview::where(['platform_id' => $request->platform_id])->update(['status' => 1, 'push' => 1]);
        }

        \Log::info(print_r([$url, $token, $data, $result], true));
    }

    public function approvedListing(Request $request, $pageType = '')
    {
        if (! Setting::has('auto_push_product')) {
            $auto_push_product = Setting::add('auto_push_product', 0, 'int');
        } else {
            $auto_push_product = Setting::get('auto_push_product');
        }
        $cropped                = $request->cropped;
        $colors                 = (new Colors)->all();
        $categories             = Category::with('parent')->get();
        $category_tree          = [];
        $categories_array       = [];
        $categories_paths_array = [];
        $siteCroppedImages      = [];
        $brands                 = Brand::getAll();
        $storeWebsites          = StoreWebsite::get();

        $suppliers = DB::select('
                SELECT id, supplier
                FROM suppliers

                INNER JOIN (
                    SELECT supplier_id FROM product_suppliers GROUP BY supplier_id
                    ) as product_suppliers
                ON suppliers.id = product_suppliers.supplier_id
        ');

        foreach ($categories as $category) {
            $categoryPath = $category->title;

            if ($category->parent_id != 0) {
                $parent = $category->parent;

                if ($parent !== null) {
                    $categoryPath = $parent->title . ' > ' . $categoryPath;
                }

                if ($parent->parent_id != 0) {
                    if (! isset($category_tree[$parent->parent_id])) {
                        $category_tree[$parent->parent_id] = [];
                    }
                    $category_tree[$parent->parent_id][$parent->id] = $category->id;
                } else {
                    $category_tree[$parent->id][$category->id] = $category->id;
                }
            }

            $categories_array[$category->id]       = $category->parent_id;
            $categories_paths_array[$category->id] = $categoryPath;
        }
        if (auth()->user()->isReviwerLikeAdmin('final_listing')) {
            $newProducts = Product::query()->with('categories.parent', 'cropApprover', 'cropOrderer', 'approver', 'log_scraper_vs_ai', 'croppedImages', 'brands', 'landingPageProduct');
        } else {
            $newProducts = Product::query()->with('categories.parent', 'cropApprover', 'cropOrderer', 'approver', 'log_scraper_vs_ai', 'croppedImages', 'brands', 'landingPageProduct')->where('assigned_to', auth()->user()->id);
        }

        if ($request->get('status_id') != null) {
            $statusList  = is_array($request->get('status_id')) ? $request->get('status_id') : [$request->get('status_id')];
            $newProducts = $newProducts->whereIn('status_id', $statusList); //dd($newProducts->limit(10)->get());
        } else {
            if ($request->get('submit_for_approval') == 'on') {
                $newProducts = $newProducts->where('status_id', StatusHelper::$submitForApproval);
            } else {
                $newProducts = $newProducts->where('status_id', StatusHelper::$finalApproval);
            }
        }
        // Run through query helper
        $term              = $request->input('term');
        $brand             = '';
        $category          = '';
        $color             = '';
        $supplier          = [];
        $type              = '';
        $assigned_to_users = '';

        if (is_array($request->brand) && $request->brand[0] != null) {
            $newProducts = $newProducts->whereIn('brand', $request->get('brand'));
        }

        if (is_array($request->color) && $request->color[0] != null) {
            $newProducts = $newProducts->whereIn('color', $request->get('color'));
        }
        if (is_array($request->category) && $request->category[0] != null && $request->category[0] != 1) {
            $category_children = [];

            foreach ($request->category as $category) {
                $is_parent = Category::isParent($category);

                if ($is_parent) {
                    $childs = Category::find($category)->childs()->get();

                    foreach ($childs as $child) {
                        $is_parent = Category::isParent($child->id);

                        if ($is_parent) {
                            $children = Category::find($child->id)->childs()->get();

                            foreach ($children as $chili) {
                                array_push($category_children, $chili->id);
                            }
                        } else {
                            array_push($category_children, $child->id);
                        }
                    }
                } else {
                    array_push($category_children, $category);
                }
            }

            $newProducts = $newProducts->whereIn('products.category', $category_children);
            $category    = $request->category[0];
        }
        if ($request->type != '') {
            if ($request->type == 'Not Listed') {
                $newProducts = $newProducts->where('isFinal', 0)->where('isUploaded', 0);
            } else {
                if ($request->type == 'Listed') {
                    $newProducts = $newProducts->where('isUploaded', 1);
                } else {
                    if ($request->type == 'Approved') {
                        $newProducts = $newProducts->where('is_approved', 1);
                    } else {
                        if ($request->type == 'Image Cropped') {
                            $newProducts = $newProducts->where('is_image_processed', 1);
                        }
                    }
                }
            }

            $type = $request->get('type');
        }

        if ($request->crop_status == 'Not Matched') {
            $newProducts = $newProducts->whereDoesntHave('croppedImages');
        }
        if ($request->crop_status == 'Matched') {
            $newProducts = $newProducts->whereHas('croppedImages');
        }

        if (trim($term) != '') {
            $newProducts->where(function ($query) use ($term) {
                $query->where('products.short_description', 'LIKE', '%' . $term . '%')
                    ->orWhere('products.color', 'LIKE', '%' . $term . '%')
                    ->orWhere('products.name', 'LIKE', '%' . $term . '%')
                    ->orWhere('products.sku', 'LIKE', '%' . $term . '%')
                    ->orWhere('products.id', 'LIKE', '%' . $term . '%')
                    ->orWhereHas('brands', function ($q) use ($term) {
                        $q->where('name', 'LIKE', '%' . $term . '%');
                    })
                    ->orWhereHas('product_category', function ($q) use ($term) {
                        $q->where('title', 'LIKE', '%' . $term . '%');
                    });
            });
        }

        if ($request->get('user_id') > 0 && $request->get('submit_for_image_approval') == 'on') {
            $newProducts = $newProducts->Join('log_list_magentos as llm', function ($join) {
                $join->on('llm.product_id', 'products.id');
            });
            $newProducts = $newProducts->where('llm.user_id', $request->get('user_id'));
            $newProducts = $newProducts->addSelect('llm.user_id as last_approve_user');
        }
        if ($request->get('user_id') > 0 && $request->get('rejected_image_approval') == 'on') {
            $newProducts = $newProducts->leftJoin('rejected_images as ri', function ($join) use ($request) {
                $join->on('ri.product_id', 'products.id');

                $join->where('ri.user_id', $request->get('user_id'));
            });
            $newProducts = $newProducts->addSelect('rejected_images.user_id as rejected_user_id', 'rejected_images.created_at as rejected_date');
        }
        if ($request->get('user_id') > 0 && $request->get('rejected_image_approval') != 'on' && $request->get('submit_for_image_approval') != 'on') {
            $newProducts = $newProducts->where('approved_by', $request->get('user_id'));
        }

        $selected_categories = $request->category ? $request->category : [1];
        $category_array      = Category::renderAsArray();
        $users               = User::all();
        $newProducts         = $newProducts->leftJoin('product_verifying_users as pvu', function ($join) {
            $join->on('pvu.product_id', 'products.id');
            $join->where('pvu.user_id', '!=', auth()->user()->id);
        });

        if ($request->without_title != null) {
            $newProducts = $newProducts->where('products.name', '');
        }

        if ($request->without_size != null) {
            $newProducts = $newProducts->where('products.size', '');
        }

        if ($request->without_composition != null) {
            $newProducts = $newProducts->where('products.composition', '');
        }

        if ($request->without_stock != null) {
            $newProducts = $newProducts->where('products.stock', 0);
        }

        if (! auth()->user()->isAdmin()) {
            //
        }
        $newProducts = $newProducts->where('isUploaded', 0);

        if ($request->crop_start_date != null && $request->crop_end_date != null) {
            $startDate   = $request->crop_start_date;
            $endDate     = $request->crop_end_date;
            $newProducts = $newProducts->leftJoin('cropped_image_references as cri', function ($join) use ($startDate, $endDate) {
                $join->on('cri.product_id', 'products.id');
                $join->whereDate('cri.created_at', '>=', $startDate)->whereDate('cri.created_at', '<=', $endDate);
            });

            $newProducts = $newProducts->whereNotNull('cri.product_id');
            $newProducts = $newProducts->groupBy('products.id');
        }

        if ($request->store_website_id > 0) {
            $storeWebsiteID = $request->store_website_id;
            $newProducts    = $newProducts->join('store_website_categories as swc', function ($join) use ($storeWebsiteID) {
                $join->on('swc.category_id', 'products.category');
                $join->where('swc.store_website_id', $storeWebsiteID)->where('swc.remote_id', '>', 0);
            });

            $newProducts = $newProducts->join('store_website_brands as swb', function ($join) use ($storeWebsiteID) {
                $join->on('swb.brand_id', 'products.brand');
                $join->where('swb.store_website_id', $storeWebsiteID)->where('swb.magento_value', '>', 0);
            });

            $newProducts = $newProducts->groupBy('products.id');
        }

        $newProducts = $newProducts->select(['products.*'])->paginate(10);

        if (! auth()->user()->isAdmin()) {
            if (! $newProducts->isEmpty()) {
                $i = 1;
                foreach ($newProducts as $product) {
                    $productVerify = \App\ProductVerifyingUser::firstOrNew([
                        'product_id' => $product->id,
                    ]);
                    $productVerify->product_id = $product->id;
                    $productVerify->user_id    = auth()->user()->id;
                    $productVerify->save();
                    $i++;
                    // if more then 15 records then break
                    if ($i > 25) {
                        break;
                    }
                }
            }
        }

        // checking here for the product which is cropped

        if (count($newProducts) > 0) {
            $productIds = $newProducts->pluck('id')->toArray();

            $siteCroppedImages = \App\SiteCroppedImages::select('product_id', DB::raw('group_concat(site_cropped_images.website_id) as website_ids'))->whereIn('product_id', $productIds)->groupBy('product_id')->pluck('website_ids', 'product_id')->toArray();
        }

        $datatableModel = DataTableColumn::select('column_name')->where('user_id', auth()->user()->id)->where('section_name', 'products-listing-final')->first();

        $dynamicColumnsToShowPlf = [];
        if (! empty($datatableModel->column_name)) {
            $hideColumns             = $datatableModel->column_name ?? '';
            $dynamicColumnsToShowPlf = json_decode($hideColumns, true);
        }

        $statusProductsListingFinal = ProductListingFinalStatus::all();

        if ($request->ajax()) {
            // view path for images
            $viewpath = ($pageType == 'images') ? 'products.final_listing_image_ajax' : 'products.final_listing_ajax';

            return view($viewpath, [
                'users_list'                 => $users->pluck('name', 'id'),
                'products'                   => $newProducts,
                'products_count'             => $newProducts->total(),
                'colors'                     => $colors,
                'brands'                     => $brands,
                'suppliers'                  => $suppliers,
                'categories'                 => $categories,
                'category_tree'              => $category_tree,
                'categories_array'           => $categories_array,
                'term'                       => $term,
                'brand'                      => $brand,
                'category'                   => $category,
                'color'                      => $color,
                'supplier'                   => $supplier,
                'type'                       => $type,
                'users'                      => $users,
                'assigned_to_users'          => $assigned_to_users,
                'cropped'                    => $cropped,
                'category_array'             => $category_array,
                'selected_categories'        => $selected_categories,
                'store_websites'             => $storeWebsites,
                'type'                       => $pageType,
                'auto_push_product'          => $auto_push_product,
                'user_id'                    => ($request->get('user_id') > 0) ? $request->get('user_id') : '',
                'request'                    => $request->all(),
                'categories_paths_array'     => $categories_paths_array,
                'siteCroppedImages'          => $siteCroppedImages,
                'dynamicColumnsToShowPlf'    => $dynamicColumnsToShowPlf,
                'statusProductsListingFinal' => $statusProductsListingFinal,
            ]);
        }

        $viewpath = 'products.final_listing';

        return view($viewpath, [
            'users_list'       => $users->pluck('name', 'id'),
            'products'         => $newProducts,
            'products_count'   => $newProducts->total(),
            'colors'           => $colors,
            'brands'           => $brands,
            'suppliers'        => $suppliers,
            'categories'       => $categories,
            'category_tree'    => $category_tree,
            'categories_array' => $categories_array,
            'user_id'          => ($request->get('user_id') > 0) ? $request->get('user_id') : '',
            // 'category_selection' => $category_selection,
            // 'category_search'    => $category_search,
            'term'              => $term,
            'brand'             => $brand,
            'category'          => $category,
            'color'             => $color,
            'supplier'          => $supplier,
            'type'              => $type,
            'users'             => $users,
            'assigned_to_users' => $assigned_to_users,
            'cropped'           => $cropped,
            //            'left_for_users'  => $left_for_users,
            'category_array'      => $category_array,
            'selected_categories' => $selected_categories,
            'store_websites'      => $storeWebsites,
            'pageType'            => $pageType,
            'auto_push_product'   => $auto_push_product,
            //'store_website_count' => StoreWebsite::count(),
            'categories_paths_array'     => $categories_paths_array,
            'siteCroppedImages'          => $siteCroppedImages,
            'dynamicColumnsToShowPlf'    => $dynamicColumnsToShowPlf,
            'statusProductsListingFinal' => $statusProductsListingFinal,
        ]);
    }

    public function plfColumnVisbilityUpdate(Request $request)
    {
        $userCheck = DataTableColumn::where('user_id', auth()->user()->id)->where('section_name', 'products-listing-final')->first();

        if ($userCheck) {
            $column               = DataTableColumn::find($userCheck->id);
            $column->section_name = 'products-listing-final';
            $column->column_name  = json_encode($request->column_plf);
            $column->save();
        } else {
            $column               = new DataTableColumn();
            $column->section_name = 'products-listing-final';
            $column->column_name  = json_encode($request->column_plf);
            $column->user_id      = auth()->user()->id;
            $column->save();
        }

        return redirect()->back()->with('success', 'column visiblity Added Successfully!');
    }

    public function statuscolor(Request $request)
    {
        $status_color = $request->all();
        $data         = $request->except('_token');
        foreach ($status_color['color_name'] as $key => $value) {
            $bugstatus               = ProductListingFinalStatus::find($key);
            $bugstatus->status_color = $value;
            $bugstatus->save();
        }

        return redirect()->back()->with('success', 'The status color updated successfully.');
    }

    public function getFinalApporvalImages(Request $request)
    {
        $cropped          = $request->cropped;
        $colors           = (new Colors)->all();
        $categories       = Category::all();
        $category_tree    = [];
        $categories_array = [];
        $brands           = Brand::getAll();

        $suppliers = DB::select('
                SELECT id, supplier
                FROM suppliers

                INNER JOIN (
                    SELECT supplier_id FROM product_suppliers GROUP BY supplier_id
                    ) as product_suppliers
                ON suppliers.id = product_suppliers.supplier_id
        ');

        foreach (Category::all() as $category) {
            if ($category->parent_id != 0) {
                $parent = $category->parent;
                if ($parent->parent_id != 0) {
                    if (! isset($category_tree[$parent->parent_id])) {
                        $category_tree[$parent->parent_id] = [];
                    }
                    $category_tree[$parent->parent_id][$parent->id] = $category->id;
                } else {
                    $category_tree[$parent->id][$category->id] = $category->id;
                }
            }

            $categories_array[$category->id] = $category->parent_id;
        }

        if (auth()->user()->isReviwerLikeAdmin('final_listing')) {
            $newProducts = Product::query();
        } else {
            $newProducts = Product::query()->where('assigned_to', auth()->user()->id);
        }

        if ($request->get('status_id') != null) {
            $statusList  = is_array($request->get('status_id')) ? $request->get('status_id') : [$request->get('status_id')];
            $newProducts = $newProducts->whereIn('status_id', $statusList);
        } else {
            if ($request->get('submit_for_approval') == 'on') {
                $newProducts = $newProducts->where('status_id', StatusHelper::$submitForApproval);
            } else {
                $newProducts = $newProducts->where('status_id', StatusHelper::$finalApproval);
            }
        }

        // Run through query helper
        $newProducts       = QueryHelper::approvedListingOrder($newProducts);
        $term              = $request->input('term');
        $brand             = '';
        $category          = '';
        $color             = '';
        $supplier          = [];
        $type              = '';
        $assigned_to_users = '';

        if (is_array($request->brand) && $request->brand[0] != null) {
            $newProducts = $newProducts->whereIn('brand', $request->get('brand'));
        }

        if (is_array($request->color) && $request->color[0] != null) {
            $newProducts = $newProducts->whereIn('color', $request->get('color'));
        }
        if (is_array($request->category) && $request->category[0] != null && $request->category[0] != 1) {
            $category_children = [];

            foreach ($request->category as $category) {
                $is_parent = Category::isParent($category);

                if ($is_parent) {
                    $childs = Category::find($category)->childs()->get();

                    foreach ($childs as $child) {
                        $is_parent = Category::isParent($child->id);

                        if ($is_parent) {
                            $children = Category::find($child->id)->childs()->get();

                            foreach ($children as $chili) {
                                array_push($category_children, $chili->id);
                            }
                        } else {
                            array_push($category_children, $child->id);
                        }
                    }
                } else {
                    array_push($category_children, $category);
                }
            }

            $newProducts = $newProducts->whereIn('category', $category_children);
            $category    = $request->category[0];
        }
        if ($request->type != '') {
            if ($request->type == 'Not Listed') {
                $newProducts = $newProducts->where('isFinal', 0)->where('isUploaded', 0);
            } else {
                if ($request->type == 'Listed') {
                    $newProducts = $newProducts->where('isUploaded', 1);
                } else {
                    if ($request->type == 'Approved') {
                        $newProducts = $newProducts->where('is_approved', 1);
                    } else {
                        if ($request->type == 'Image Cropped') {
                            $newProducts = $newProducts->where('is_image_processed', 1);
                        }
                    }
                }
            }

            $type = $request->get('type');
        }

        if ($request->crop_status == 'Not Matched') {
            $newProducts = $newProducts->whereDoesntHave('croppedImages');
        }
        if ($request->crop_status == 'Matched') {
            $newProducts = $newProducts->whereHas('croppedImages');
        }

        if (trim($term) != '') {
            $newProducts->where(function ($query) use ($term) {
                $query->where('short_description', 'LIKE', '%' . $term . '%')
                    ->orWhere('color', 'LIKE', '%' . $term . '%')
                    ->orWhere('name', 'LIKE', '%' . $term . '%')
                    ->orWhere('products.sku', 'LIKE', '%' . $term . '%')
                    ->orWhere('products.id', 'LIKE', '%' . $term . '%')
                    ->orWhereHas('brands', function ($q) use ($term) {
                        $q->where('name', 'LIKE', '%' . $term . '%');
                    })
                    ->orWhereHas('product_category', function ($q) use ($term) {
                        $q->where('title', 'LIKE', '%' . $term . '%');
                    });
            });
        }

        if ($request->get('user_id') > 0) {
            if ($request->get('submit_for_image_approval') == 'on') {
                $newProducts = $newProducts->leftJoin('log_list_magentos as llm', function ($join) use ($request) {
                    $join->on('llm.product_id', 'products.id')
                        ->on('llm.id', '=', DB::raw('(SELECT max(id) from log_list_magentos WHERE log_list_magentos.project_id = projects.id)'));
                    $join->where('llm.user_id', $request->get('user_id'));
                });
            } else {
                $newProducts = $newProducts->where('approved_by', $request->get('user_id'));
            }
        }

        $selected_categories = $request->category ? $request->category : [1];
        $category_array      = Category::renderAsArray();
        $users               = User::all();

        $newProducts = $newProducts->leftJoin('product_verifying_users as pvu', function ($join) {
            $join->on('pvu.product_id', 'products.id');
            $join->where('pvu.user_id', '!=', auth()->user()->id);
        });

        if ($request->without_title != null) {
            $newProducts = $newProducts->where('products.name', '');
        }

        if ($request->without_size != null) {
            $newProducts = $newProducts->where('products.size', '');
        }

        if ($request->without_composition != null) {
            $newProducts = $newProducts->where('products.composition', '');
        }

        if (! auth()->user()->isAdmin()) {
            $newProducts = $newProducts->whereNull('pvu.product_id');
        }

        $newProducts = $newProducts->select(['products.*'])->paginate(20);
        if (! auth()->user()->isAdmin()) {
            if (! $newProducts->isEmpty()) {
                $i = 1;
                foreach ($newProducts as $product) {
                    $productVerify = \App\ProductVerifyingUser::firstOrNew([
                        'product_id' => $product->id,
                    ]);
                    $productVerify->product_id = $product->id;
                    $productVerify->user_id    = auth()->user()->id;
                    $productVerify->save();
                    $i++;
                    // if more then 15 records then break
                    if ($i > 25) {
                        break;
                    }
                }
            }
        }
        if (! Setting::has('auto_push_product')) {
            $auto_push_product = Setting::add('auto_push_product', 0, 'int');
        } else {
            $auto_push_product = Setting::get('auto_push_product');
        }
        if ($request->ajax()) {
            return view('products.final_listing_ajax', [
                'products'            => $newProducts,
                'products_count'      => $newProducts->total(),
                'colors'              => $colors,
                'brands'              => $brands,
                'suppliers'           => $suppliers,
                'categories'          => $categories,
                'category_tree'       => $category_tree,
                'categories_array'    => $categories_array,
                'term'                => $term,
                'brand'               => $brand,
                'category'            => $category,
                'color'               => $color,
                'supplier'            => $supplier,
                'type'                => $type,
                'users'               => $users,
                'assigned_to_users'   => $assigned_to_users,
                'cropped'             => $cropped,
                'category_array'      => $category_array,
                'selected_categories' => $selected_categories,
                'store_websites'      => StoreWebsite::all(),
                'auto_push_product'   => $auto_push_product,
            ]);
        }

        return view('products.final_approval_images', [
            'products'         => $newProducts,
            'products_count'   => $newProducts->total(),
            'colors'           => $colors,
            'brands'           => $brands,
            'suppliers'        => $suppliers,
            'categories'       => $categories,
            'category_tree'    => $category_tree,
            'categories_array' => $categories_array,
            // 'category_selection' => $category_selection,
            // 'category_search'    => $category_search,
            'term'              => $term,
            'brand'             => $brand,
            'category'          => $category,
            'color'             => $color,
            'supplier'          => $supplier,
            'type'              => $type,
            'users'             => $users,
            'assigned_to_users' => $assigned_to_users,
            'cropped'           => $cropped,
            //            'left_for_users'  => $left_for_users,
            'category_array'      => $category_array,
            'selected_categories' => $selected_categories,
            'store_websites'      => StoreWebsite::all(),
            'auto_push_product'   => $auto_push_product,
            //'store_website_count' => StoreWebsite::count(),
        ]);
    }

    public function approvedListingCropConfirmation(Request $request)
    {
        $colors           = (new Colors)->all();
        $categories       = Category::all();
        $category_tree    = [];
        $categories_array = [];
        $brands           = Brand::getAll();

        $suppliers = DB::select('
                SELECT id, supplier
                FROM suppliers

                INNER JOIN (
                    SELECT supplier_id FROM product_suppliers GROUP BY supplier_id
                    ) as product_suppliers
                ON suppliers.id = product_suppliers.supplier_id
        ');

        foreach (Category::all() as $category) {
            if ($category->parent_id != 0) {
                $parent = $category->parent;
                if ($parent->parent_id != 0) {
                    $category_tree[$parent->parent_id][$parent->id][$category->id];
                } else {
                    $category_tree[$parent->id][$category->id] = $category->id;
                }
            }

            $categories_array[$category->id] = $category->parent_id;
        }

        // Prioritize suppliers
        $newProducts = Product::where('status_id', StatusHelper::$cropApprovalConfirmation)->where('stock', '!=', 0);

        $newProducts = QueryHelper::approvedListingOrder($newProducts);

        $term              = $request->input('term');
        $brand             = '';
        $category          = '';
        $color             = '';
        $supplier          = [];
        $type              = '';
        $assigned_to_users = '';

        if ($request->brand[0] != null) {
            $newProducts = $newProducts->whereIn('brand', $request->get('brand'));
        }

        if ($request->color[0] != null) {
            $newProducts = $newProducts->whereIn('color', $request->get('color'));
        }
        if ($request->category[0] != null && $request->category[0] != 1) {
            $category_children = [];

            foreach ($request->category as $category) {
                $is_parent = Category::isParent($category);

                if ($is_parent) {
                    $childs = Category::find($category)->childs()->get();

                    foreach ($childs as $child) {
                        $is_parent = Category::isParent($child->id);

                        if ($is_parent) {
                            $children = Category::find($child->id)->childs()->get();

                            foreach ($children as $chili) {
                                array_push($category_children, $chili->id);
                            }
                        } else {
                            array_push($category_children, $child->id);
                        }
                    }
                } else {
                    array_push($category_children, $category);
                }
            }

            $newProducts = $newProducts->whereIn('category', $category_children);
            $category    = $request->category[0];
        }
        if ($request->type != '') {
            if ($request->type == 'Not Listed') {
                $newProducts = $newProducts->where('isFinal', 0)->where('isUploaded', 0);
            } else {
                if ($request->type == 'Listed') {
                    $newProducts = $newProducts->where('isUploaded', 1);
                } else {
                    if ($request->type == 'Approved') {
                        $newProducts = $newProducts->where('is_approved', 1);
                    } else {
                        if ($request->type == 'Image Cropped') {
                            $newProducts = $newProducts->where('is_image_processed', 1);
                        }
                    }
                }
            }

            $type = $request->get('type');
        }
        //
        if (trim($term) != '') {
            $newProducts = $newProducts->where(function ($query) use ($term) {
                $query->where('id', 'LIKE', "%$term%")->orWhere('sku', 'LIKE', "%$term%");
            });
        }

        if ($request->get('user_id') > 0) {
            $newProducts = $newProducts->where('approved_by', $request->get('user_id'));
        }

        $selected_categories = $request->category ? $request->category : [1];
        $category_array      = Category::renderAsArray();
        $users               = User::all();

        $newProducts = QueryHelper::approvedListingOrder($newProducts);

        $newProducts = $newProducts->with(['media', 'brands', 'log_scraper_vs_ai'])->paginate(50);

        return view('products.final_crop_confirmation', [
            'products'         => $newProducts,
            'products_count'   => $newProducts->total(),
            'colors'           => $colors,
            'brands'           => $brands,
            'suppliers'        => $suppliers,
            'categories'       => $categories,
            'category_tree'    => $category_tree,
            'categories_array' => $categories_array,
            // 'category_selection' => $category_selection,
            // 'category_search'    => $category_search,
            'term'              => $term,
            'brand'             => $brand,
            'category'          => $category,
            'color'             => $color,
            'supplier'          => $supplier,
            'type'              => $type,
            'users'             => $users,
            'assigned_to_users' => $assigned_to_users,
            //            'cropped' => $cropped,
            //            'left_for_users'  => $left_for_users,
            'category_array'      => $category_array,
            'selected_categories' => $selected_categories,
        ]);
    }

    public function approvedMagento(Request $request)
    {
        // Get queue count
        $queueSize = Queue::size('listMagento');

        $colors           = (new Colors)->all();
        $categories       = Category::all();
        $category_tree    = [];
        $categories_array = [];
        $brands           = Brand::getAll();

        $suppliers = DB::select('
                SELECT id, supplier
                FROM suppliers

                INNER JOIN (
                    SELECT supplier_id FROM product_suppliers GROUP BY supplier_id
                    ) as product_suppliers
                ON suppliers.id = product_suppliers.supplier_id
        ');

        foreach (Category::all() as $category) {
            if ($category->parent_id != 0) {
                $parent = $category->parent;
                if ($parent->parent_id != 0) {
                    if (isset($category_tree[$parent->parent_id]) && isset($category_tree[$parent->parent_id][$parent->id])) {
                        @$category_tree[$parent->parent_id][$parent->id][$category->id];
                    }
                } else {
                    @$category_tree[$parent->id][$category->id] = $category->id;
                }
            }

            $categories_array[$category->id] = $category->parent_id;
        }

        $newProducts = Product::where('isUploaded', 1)->orderBy('listing_approved_at', 'DESC');

        $term              = $request->input('term');
        $brand             = '';
        $category          = '';
        $color             = '';
        $supplier          = [];
        $type              = '';
        $assigned_to_users = '';

        if (isset($request->brand[0]) && $request->brand[0] != null) {
            $newProducts = $newProducts->whereIn('brand', $request->get('brand'));
        }

        if (isset($request->color[0]) && $request->color[0] != null) {
            $newProducts = $newProducts->whereIn('color', $request->get('color'));
        }
        if (isset($request->category) && $request->category[0] != null && $request->category[0] != 1) {
            $category_children = [];

            foreach ($request->category as $category) {
                $is_parent = Category::isParent($category);

                if ($is_parent) {
                    $childs = Category::find($category)->childs()->get();

                    foreach ($childs as $child) {
                        $is_parent = Category::isParent($child->id);

                        if ($is_parent) {
                            $children = Category::find($child->id)->childs()->get();

                            foreach ($children as $chili) {
                                array_push($category_children, $chili->id);
                            }
                        } else {
                            array_push($category_children, $child->id);
                        }
                    }
                } else {
                    array_push($category_children, $category);
                }
            }

            $newProducts = $newProducts->whereIn('category', $category_children);
            $category    = $request->category[0];
        }
        if ($request->type != '') {
            if ($request->type == 'Not Listed') {
                $newProducts = $newProducts->where('isFinal', 0)->where('isUploaded', 0);
            } else {
                if ($request->type == 'Listed') {
                    $newProducts = $newProducts->where('isUploaded', 1);
                } else {
                    if ($request->type == 'Approved') {
                        $newProducts = $newProducts->where('is_approved', 1);
                    } else {
                        if ($request->type == 'Image Cropped') {
                            $newProducts = $newProducts->where('is_image_processed', 1);
                        }
                    }
                }
            }

            $type = $request->get('type');
        }
        if (trim($term) != '') {
            $newProducts = $newProducts->where(function ($query) use ($term) {
                $query->where('id', 'LIKE', "%$term%")->orWhere('sku', 'LIKE', "%$term%");
            });
        }

        if ($request->get('user_id') > 0) {
            $newProducts = $newProducts->where('approved_by', $request->get('user_id'));
        }

        $selected_categories = $request->category ? $request->category : [1];
        $category_array      = Category::renderAsArray();
        $users               = User::all();

        $newProducts = $newProducts->with(['media', 'brands'])->paginate(50);

        return view('products.in_magento', [
            'products'         => $newProducts,
            'products_count'   => $newProducts->total(),
            'colors'           => $colors,
            'brands'           => $brands,
            'suppliers'        => $suppliers,
            'categories'       => $categories,
            'category_tree'    => $category_tree,
            'categories_array' => $categories_array,
            // 'category_selection' => $category_selection,
            // 'category_search'    => $category_search,
            'term'              => $term,
            'brand'             => $brand,
            'category'          => $category,
            'color'             => $color,
            'supplier'          => $supplier,
            'type'              => $type,
            'users'             => $users,
            'assigned_to_users' => $assigned_to_users,
            //            'cropped' => $cropped,
            //            'left_for_users'  => $left_for_users,
            'category_array'      => $category_array,
            'selected_categories' => $selected_categories,
            'queueSize'           => $queueSize,
        ]);
    }

    public function showListigByUsers(Request $request)
    {
        $whereFirst = '';
        if ($request->get('date')) {
            $whereFirst = ' AND DATE(created_at) = "' . $request->get('date') . '"';
        }
        $users = UserProduct::groupBy(['user_id'])
            ->select(DB::raw('
            user_id,
            COUNT(product_id) as total_assigned,
            (SELECT COUNT(DISTINCT(listing_histories.product_id)) FROM listing_histories WHERE listing_histories.user_id = user_products.user_id AND action IN ("LISTING_APPROVAL", "LISTING_REJECTED") ' . $whereFirst . ') as total_acted'));

        if ($request->get('date')) {
            $users = $users->whereRaw('DATE(created_at) = "' . $request->get('date') . '"');
        }

        $users = $users->with('user')->get();

        return view('products.assigned_products', compact('users'));
    }

    public function listing(Request $request, Stage $stage)
    {
        $colors           = (new Colors)->all();
        $categories       = Category::all();
        $category_tree    = [];
        $categories_array = [];
        $brands           = Brand::getAll();

        $suppliers = DB::select('
                SELECT id, supplier
                FROM suppliers

                INNER JOIN (
                    SELECT supplier_id FROM product_suppliers GROUP BY supplier_id
                    ) as product_suppliers
                ON suppliers.id = product_suppliers.supplier_id
        ');

        foreach (Category::all() as $category) {
            if ($category->parent_id != 0) {
                $parent = $category->parent;
                if ($parent->parent_id != 0) {
                    in_array($category->id, $category_tree[$parent->parent_id] ?? []);
                } else {
                    $category_tree[$parent->id][$category->id] = $category->id;
                }
            }

            $categories_array[$category->id] = $category->parent_id;
        }

        $term              = $request->input('term');
        $brand             = '';
        $category          = '';
        $color             = '';
        $supplier          = [];
        $type              = '';
        $assigned_to_users = '';

        $brandWhereClause    = '';
        $colorWhereClause    = '';
        $categoryWhereClause = '';
        $supplierWhereClause = '';
        $typeWhereClause     = '';
        $termWhereClause     = '';
        $croppedWhereClause  = '';
        $stockWhereClause    = ' AND stock >= 1';

        $userWhereClause = '';
        if (is_array($request->brand) && $request->brand[0] != null) {
            $brands_list = implode(',', $request->brand);

            $brand            = $request->brand[0];
            $brandWhereClause = " AND brand IN ($brands_list)";
        }

        if (is_array($request->color) && $request->color[0] != null) {
            $colors_list = implode(',', $request->color);

            $color            = $request->color[0];
            $colorWhereClause = " AND color IN ($colors_list)";
        }
        if (is_array($request->category) && $request->category[0] != null && $request->category[0] != 1) {
            $category_children = [];

            foreach ($request->category as $category) {
                $is_parent = Category::isParent($category);

                if ($is_parent) {
                    $childs = Category::find($category)->childs()->get();

                    foreach ($childs as $child) {
                        $is_parent = Category::isParent($child->id);

                        if ($is_parent) {
                            $children = Category::find($child->id)->childs()->get();

                            foreach ($children as $chili) {
                                array_push($category_children, $chili->id);
                            }
                        } else {
                            array_push($category_children, $child->id);
                        }
                    }
                } else {
                    array_push($category_children, $category);
                }
            }

            $category_list = implode(',', $category_children);

            $category            = $request->category[0];
            $categoryWhereClause = " AND category IN ($category_list)";
        }
        if (is_array($request->supplier) && $request->supplier[0] != null) {
            $suppliers_list      = implode(',', $request->supplier);
            $supplier            = $request->supplier;
            $supplierWhereClause = " AND products.id IN (SELECT product_id FROM product_suppliers WHERE supplier_id IN ($suppliers_list))";
        }
        if ($request->type != '') {
            if ($request->type == 'Not Listed') {
                $typeWhereClause = ' AND isFinal = 0 AND isUploaded = 0';
            } else {
                if ($request->type == 'Listed') {
                    $typeWhereClause = ' AND isUploaded = 1';
                } else {
                    if ($request->type == 'Approved') {
                        $typeWhereClause = ' AND is_approved = 1 AND last_imagecropper IS NULL';
                    } else {
                        if ($request->type == 'Image Cropped') {
                            $typeWhereClause = ' AND is_approved = 1 AND last_imagecropper IS NOT NULL';
                        }
                    }
                }
            }

            $type = $request->type;
        }
        if (trim($term) != '') {
            $termWhereClause = ' AND (sku LIKE "%' . $term . '%" OR id LIKE "%' . $term . '%")';
        }

        $cropped = $request->cropped == 'on' ? 'on' : '';
        if ($request->get('cropped') == 'on') {
            $croppedWhereClause = ' AND is_crop_approved = 1';
        }

        if ($request->users == 'on') {
            $users_products = User::role('Products Lister')->pluck('id');
            $users          = [];
            foreach ($users_products as $user) {
                $users[] = $user;
            }
            $users_list = implode(',', $users);

            $userWhereClause   = " AND products.id IN (SELECT product_id FROM user_products WHERE user_id IN ($users_list))";
            $stockWhereClause  = '';
            $assigned_to_users = 'on';
        }

        $left_for_users = '';
        if ($request->left_products == 'on') {
            $userWhereClause  = ' AND products.id NOT IN (SELECT product_id FROM user_products)';
            $stockWhereClause = ' AND stock >= 1 AND is_crop_approved = 1 AND is_crop_ordered = 1 AND is_image_processed = 1 AND isUploaded = 0 AND isFinal = 0';
            $left_for_users   = 'on';
        }

        $messages = UserProductFeedback::where('action', 'LISTING_APPROVAL_REJECTED')->where('user_id', Auth::id())->with('product')->get();

        if (Auth::user()->hasRole('Products Lister')) {
            $sql = '
                                            SELECT *, user_products.user_id as product_user_id,
                                            (SELECT mm1.created_at FROM remarks mm1 WHERE mm1.id = remark_id) AS remark_created_at
                                            FROM products

                                            LEFT JOIN (
                                                SELECT user_id, product_id FROM user_products
                                                ) as user_products
                                            ON products.id = user_products.product_id

                                            LEFT JOIN (
                                                SELECT MAX(id) AS remark_id, taskid FROM remarks WHERE module_type = "productlistings" GROUP BY taskid
                                                ) AS remarks
                                            ON products.id = remarks.taskid

                                            WHERE stock>=1 AND is_approved = 0 AND is_listing_rejected = 0 AND is_crop_approved = 1 AND is_crop_ordered = 1 ' . $brandWhereClause . $colorWhereClause . $categoryWhereClause . $supplierWhereClause . $typeWhereClause . $termWhereClause . $croppedWhereClause . $stockWhereClause . ' AND id IN (SELECT product_id FROM user_products WHERE user_id = ' . Auth::id() . ')
                                             AND id NOT IN (SELECT product_id FROM product_suppliers WHERE supplier_id = 60)
                                            ORDER BY listing_approved_at DESC, category, is_crop_ordered DESC, remark_created_at DESC, created_at DESC
                ';
        } else {
            $sql = '
                SELECT *, user_products.user_id as product_user_id,
                (SELECT mm1.created_at FROM remarks mm1 WHERE mm1.id = remark_id) AS remark_created_at
                FROM products

                LEFT JOIN (
                    SELECT user_id, product_id FROM user_products
                    ) as user_products
                ON products.id = user_products.product_id

                LEFT JOIN (
                    SELECT MAX(id) AS remark_id, taskid FROM remarks WHERE module_type = "productlistings" GROUP BY taskid
                    ) AS remarks
                ON products.id = remarks.taskid
                WHERE stock>=1 AND is_approved = 0 AND is_listing_rejected = 0  AND is_crop_approved = 1 AND is_crop_ordered = 1  ' . $stockWhereClause . $brandWhereClause . $colorWhereClause . $categoryWhereClause . $supplierWhereClause . $typeWhereClause . $termWhereClause . $croppedWhereClause . $userWhereClause . '
                ORDER BY listing_approved_at DESC, category, is_crop_ordered DESC, remark_created_at DESC, products.updated_at DESC
                ';
        }
        $new_products = DB::select($sql);

        $products_count = count($new_products);
        $currentPage    = LengthAwarePaginator::resolveCurrentPage();
        $perPage        = Setting::get('pagination');
        $currentItems   = array_slice($new_products, $perPage * ($currentPage - 1), $perPage);

        $new_products = new LengthAwarePaginator($currentItems, count($new_products), $perPage, $currentPage, [
            'path' => LengthAwarePaginator::resolveCurrentPath(),
        ]);

        $selected_categories = $request->category ? $request->category : [1];

        $category_array = Category::renderAsArray();

        $userStats             = [];
        $userStats['approved'] = ListingHistory::where('action', 'LISTING_APPROVAL')->where('user_id', Auth::user()->id)->count();
        $userStats['rejected'] = ListingHistory::where('action', 'LISTING_REJECTED')->where('user_id', Auth::user()->id)->count();

        return view('products.listing', [
            'products'            => $new_products,
            'products_count'      => $products_count,
            'colors'              => $colors,
            'brands'              => $brands,
            'suppliers'           => $suppliers,
            'categories'          => $categories,
            'category_tree'       => $category_tree,
            'categories_array'    => $categories_array,
            'term'                => $term,
            'brand'               => $brand,
            'category'            => $category,
            'color'               => $color,
            'supplier'            => $supplier,
            'type'                => $type,
            'assigned_to_users'   => $assigned_to_users,
            'cropped'             => $cropped,
            'left_for_users'      => $left_for_users,
            'category_array'      => $category_array,
            'selected_categories' => $selected_categories,
            'messages'            => $messages,
            'userStatus'          => $userStats,
        ]);
    }

    public function magentoConditionsCheck(Request $request)
    {
        if ($request->ajax()) {
            $query     = $request->get('fieldname');
            $fieldName = $request->get('filedname');
            $value     = $request->get('value');

            $products = Product::query();

            $products = $products->where(function ($query) {
                $query->where('status_id', StatusHelper::$productConditionsChecked);
            });

            $products = $products->where('is_conditions_checked', 1);
            $products = $products->leftJoin('product_verifying_users as pvu', function ($join) {
                $join->on('pvu.product_id', 'products.id');
                $join->where('pvu.user_id', '!=', auth()->user()->id);
            });

            $products = $products->join('log_list_magentos as LLM', 'products.id', '=', 'LLM.product_id');
            $products = $products->leftJoin('store_websites as SW', 'LLM.store_website_id', '=', 'SW.id');
            $products = $products->leftJoin('categories as c', 'c.id', '=', 'products.category');

            $products = $products->leftJoin('status as s', function ($join) {
                $join->on('products.status_id', 's.id');
            });

            if ($request->get('id') != '') {
                $products = $products->where('products.id', $request->get('id'));
            }
            if ($request->get('name') != '') {
                $products = $products->where('products.name', $request->get('name'));
            }
            if ($request->get('title') != '') {
                $products = $products->where('SW.title', $request->get('title'));
            }
            if ($request->get('color') != '') {
                $products = $products->where('products.color', $request->get('color'));
            }
            if ($request->get('compositon') != '') {
                $products = $products->where('products.composition', $request->get('compositon'));
            }
            if ($request->get('status') != '') {
                $products = $products->where('products.status', $request->get('status'));
            }
            if ($request->get('price') != '') {
                $products = $products->where('products.price_usd', $request->get('price'));
                $products = $products->orWhere('products.price_usd_special', $request->get('price'));
            }

            $products = $products->where('isUploaded', 0);

            if (isset($fieldName)) {
                if ($fieldName === 'title') {
                    $products = $products->where("SW.$fieldName", 'LIKE', "%$value%");
                }
                if ($fieldName === 'category') {
                    $products = $products->where("categories.$fieldName", 'LIKE', "%$value%");
                } else {
                    $products = $products->where("products.$fieldName", 'LIKE', "%$value%");
                }
            }
            $products         = $products->orderBy('llm_id', 'desc');
            $products         = $products->select(['products.*', 's.name as product_status', 'LLM.id as llm_id', 'LLM.message as llm_message', 'SW.title as sw_title', 'SW.id as sw_id']);
            $products         = $products->paginate(20);
            $productsCount    = $products->total();
            $imageCropperRole = auth()->user()->hasRole('ImageCropers');
            $categoryArray    = Category::renderAsArray();
            $colors           = (new Colors)->all();
            if (! Setting::has('auto_push_product')) {
                $auto_push_product = Setting::add('auto_push_product', 0, 'int');
            } else {
                $auto_push_product = Setting::get('auto_push_product');
            }
            $users = User::all();

            $view                    = (string) view('products.magento_conditions_check.list', compact('products', 'imageCropperRole', 'categoryArray', 'colors', 'auto_push_product', 'users', 'productsCount'));
            $return['view']          = $view;
            $return['productsCount'] = $productsCount;

            return response()->json(['status' => 200, 'data' => $return]);
        } else {
            return view('products.magento_conditions_check.index');
        }
    }

    public function autocompleteForFilter(Request $request)
    {
        $query  = $request->get('fieldname');
        $search = $request->get('filedname');
        $value  = $request->get('value');

        if (auth()->user()->isReviwerLikeAdmin('final_listing')) {
            $products = Product::query();
        } else {
            $products = Product::query()->where('assigned_to', auth()->user()->id);
        }
        $products = $products->where(function ($query) {
            $query->where('status_id', StatusHelper::$finalApproval);
            $query->orWhere('status_id', StatusHelper::$productConditionsChecked);
        });

        $products = $products->where('is_conditions_checked', 1);
        $products = $products->where('is_push_attempted', 0);

        $products = $products->join('log_list_magentos as LLM', 'products.id', '=', 'LLM.product_id');
        $products = $products->leftJoin('store_websites as SW', 'LLM.store_website_id', '=', 'SW.id');
        $products = $products->leftJoin('categories as c', 'c.id', '=', 'products.category');

        $products = $products->leftJoin('status as s', function ($join) {
            $join->on('products.status_id', 's.id');
        });

        $products = $products->where('isUploaded', 0);
        $products = $products->orderBy('llm_id', 'desc');
        $products = $products->select(['products.*', 's.name as product_status', 'LLM.id as llm_id', 'LLM.message as llm_message', 'SW.title as sw_title', 'c.title as category_title']);

        if ($search == 'title') {
            $products = $products->where("SW.$search", 'LIKE', "%$value%");
        }
        if ($search == 'category') {
            $products = $products->where('c.title', 'LIKE', "%$value%");
        } else {
            $products = $products->where("products.$search", 'LIKE', "%$value%");
        }

        $products         = $products->groupBy('LLM.product_id', 'LLM.store_website_id');
        $productsCount    = count($products->get());
        $products         = $products->select(['products.*', 'LLM.id as llm_id', 'LLM.message as llm_message', 'SW.id as sw_id', 'SW.title as sw_title'])->get()->toArray();
        $imageCropperRole = auth()->user()->hasRole('ImageCropers');
        $categoryArray    = Category::renderAsArray();
        $colors           = (new Colors)->all();
        if (! Setting::has('auto_push_product')) {
            $auto_push_product = Setting::add('auto_push_product', 0, 'int');
        } else {
            $auto_push_product = Setting::get('auto_push_product');
        }

        return response()->json(['status' => 200, 'data' => array_unique(array_column($products, $search))]);
    }

    public function magentoPushStatusForMagentoCheck(Request $request)
    {
        if ($request->ajax()) {
            $value  = $request->get('value');
            $search = $request->get('fieldname');

            $products = Product::query();
            $products = $products->where(function ($query) {
                $query->where('status_id', StatusHelper::$pushToMagento);
                $query->orWhere('status_id', StatusHelper::$inMagento);
            });
            $products = $products->where('is_push_attempted', 1);
            $products = $products->leftJoin('product_verifying_users as pvu', function ($join) {
                $join->on('pvu.product_id', 'products.id');
                $join->where('pvu.user_id', '!=', auth()->user()->id);
            });

            $products = $products->leftJoin('status as s', function ($join) {
                $join->on('products.status_id', 's.id');
            });

            $products = $products->where('isUploaded', 1);
            $products = $products->leftJoin('categories as c', 'c.id', '=', 'products.category');

            if ($request->get('id') != '') {
                $products = $products->where('products.id', $request->get('id'));
            }
            if ($request->get('name') != '') {
                $products = $products->where('products.name', $request->get('name'));
            }
            if ($request->get('title') != '') {
                $products = $products->where('products.name', $request->get('title'));
            }
            if ($request->get('color') != '') {
                $products = $products->where('products.color', $request->get('color'));
            }
            if ($request->get('composition') != '') {
                $composition = $request->get('compositon');
                $products    = $products->where('products.composition', 'LIKE', "%$composition%");
            }
            if ($request->get('status') != '') {
                $products = $products->where('products.status', $request->get('status'));
            }
            if ($request->get('price') != '') {
                $products = $products->where('products.price_usd', $request->get('price'));
                $products = $products->orWhere('products.price_usd_special', $request->get('price'));
                $products = $products->orWhere('products.price', $request->get('price'));
            }

            if (isset($search)) {
                if ($search === 'title' || $search === 'name') {
                    $products = $products->where('products.name', 'LIKE', "%$value%");
                }
                if ($search === 'category') {
                    $products = $products->where('categories.title', 'LIKE', "%$value%");
                } else {
                    $products = $products->where("products.$search", 'LIKE', "%$value%");
                }
            }

            $products         = $products->select(['products.*', 's.name as product_status'])->paginate(10);
            $productsCount    = $products->total();
            $imageCropperRole = auth()->user()->hasRole('ImageCropers');
            $categoryArray    = Category::renderAsArray();
            $colors           = (new Colors)->all();
            if (! Setting::has('auto_push_product')) {
                $auto_push_product = Setting::add('auto_push_product', 0, 'int');
            } else {
                $auto_push_product = Setting::get('auto_push_product');
            }
            $users = User::all();

            return view('products.magento_push_status.list', compact('products', 'imageCropperRole', 'categoryArray', 'colors', 'auto_push_product', 'users', 'productsCount'));
        } else {
            return view('products.magento_push_status.index');
        }
    }

    public function autocompleteSearchPushStatus(Request $request)
    {
        if (auth()->user()->isReviwerLikeAdmin('final_listing')) {
            $products = Product::query();
        } else {
            $products = Product::query()->where('assigned_to', auth()->user()->id);
        }
        $search   = $request->get('filedname');
        $products = $products->where(function ($query) {
            $query->where('status_id', StatusHelper::$pushToMagento);
            $query->orWhere('status_id', StatusHelper::$inMagento);
        });
        $products = $products->where('is_conditions_checked', 1);
        $products = $products->where('is_push_attempted', 1);

        $products = $products->join('log_list_magentos as LLM', 'products.id', '=', 'LLM.product_id');
        $products = $products->leftJoin('store_websites as SW', 'LLM.store_website_id', '=', 'SW.id');

        $products    = $products->where('isUploaded', 0);
        $products    = $products->leftJoin('categories as c', 'c.id', '=', 'products.category');
        $searchValue = $request->get('search_value');

        if (isset($search)) {
            if ($search === 'title' || $search === 'name') {
                $products = $products->where('products.name', 'LIKE', "%$searchValue%");
            }
            if ($search === 'category') {
                $products = $products->where('c.title', 'LIKE', "%$searchValue%");
            } else {
                $products = $products->where("products.$search", 'LIKE', "%$searchValue%");
            }
        }

        $products         = $products->select(['products.*', 's.name as product_status']);
        $products         = $products->get()->toArray();
        $imageCropperRole = auth()->user()->hasRole('ImageCropers');
        $categoryArray    = Category::renderAsArray();
        $colors           = (new Colors)->all();

        if (! Setting::has('auto_push_product')) {
            $auto_push_product = Setting::add('auto_push_product', 0, 'int');
        } else {
            $auto_push_product = Setting::get('auto_push_product');
        }

        return response()->json(['status' => 200, 'data' => array_unique(array_column($products, $search))]);
    }

    public function magentoConditionsCheckLogs($pId, $swId)
    {
        $logs = ProductPushErrorLog::where('product_id', '=', $pId)->where('store_website_id', '=', $swId)->orderBy('id', 'desc')->get();

        return response()->json(['code' => 200, 'data' => $logs]);
    }

    public function getLogListMagentoDetail($llm_id)
    {
        $logs = LogListMagento::where('id', $llm_id)->first();
        if (isset($logs) && ! empty($logs)) {
            return response()->json(['code' => 200, 'data' => $logs]);
        } else {
            return response()->json(['code' => 500, 'data' => [], 'msg' => 'Log details not found.']);
        }
    }

    /**
     * Display the specified resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function show(Product $product, Sizes $sizes)
    {
        $data = [];

        $data['dnf']               = $product->dnf;
        $data['id']                = $product->id;
        $data['name']              = $product->name;
        $data['short_description'] = $product->short_description;
        $data['activities']        = $product->activities;
        $data['scraped']           = $product->scraped_products;

        $data['measurement_size_type'] = $product->measurement_size_type;
        $data['lmeasurement']          = $product->lmeasurement;
        $data['hmeasurement']          = $product->hmeasurement;
        $data['dmeasurement']          = $product->dmeasurement;

        $data['size']        = $product->size;
        $data['size_value']  = $product->size_value;
        $data['sizes_array'] = $sizes->all();

        $data['composition']       = $product->composition;
        $data['sku']               = $product->sku;
        $data['made_in']           = $product->made_in;
        $data['brand']             = $product->brand;
        $data['color']             = $product->color;
        $data['price']             = $product->price;
        $data['status']            = $product->status_id;
        $data['euro_to_inr']       = $product->euro_to_inr;
        $data['price_inr']         = $product->price_inr;
        $data['price_inr_special'] = $product->price_inr_special;

        $data['isApproved']    = $product->isApproved;
        $data['rejected_note'] = $product->rejected_note;
        $data['isUploaded']    = $product->isUploaded;
        $data['isFinal']       = $product->isFinal;
        $data['stock']         = $product->stock;
        $data['reason']        = $product->rejected_note;

        $data['product_link']     = $product->product_link;
        $data['supplier']         = $product->supplier;
        $data['supplier_link']    = $product->supplier_link;
        $data['description_link'] = $product->description_link;
        $data['location']         = $product->location;

        $data['suppliers']      = '';
        $data['more_suppliers'] = [];

        foreach ($product->suppliers as $key => $supplier) {
            if ($key == 0) {
                $data['suppliers'] .= $supplier->supplier;
            } else {
                $data['suppliers'] .= ", $supplier->supplier";
            }
        }

        $data['more_suppliers'] = DB::select('SELECT sp.url as link,s.supplier as name
                            FROM `scraped_products` sp
                            JOIN scrapers sc on sc.scraper_name=sp.website
                            JOIN suppliers s ON s.id=sc.supplier_id
                            WHERE last_inventory_at > DATE_SUB(NOW(), INTERVAL sc.inventory_lifetime DAY) and sp.sku = :sku', ['sku' => $product->sku]);

        $data['images'] = $product->getMedia(config('constants.media_tags'));

        $data['categories'] = $product->category ? CategoryController::getCategoryTree($product->category) : '';

        $data['has_reference'] = ScrapedProducts::where('sku', $product->sku)->first() ? true : false;

        $data['product'] = $product;

        return view('partials.show', $data);
    }

    public function bulkUpdate(Request $request)
    {
        $selected_products = json_decode($request->selected_products, true);
        $category          = $request->category[0];

        foreach ($selected_products as $id) {
            $product           = Product::find($id);
            $product->category = $category;
            $product->save();

            $lh             = new ListingHistory();
            $lh->user_id    = Auth::user()->id;
            $lh->product_id = $id;
            $lh->content    = ['Category updated', $category];
            $lh->save();
        }

        return redirect()->back()->withSuccess('You have successfully bulk updated products!');
    }

    public function updateName(Request $request, $id)
    {
        $product       = Product::find($id);
        $product->name = $request->name;
        $product->save();

        $lh             = new ListingHistory();
        $lh->user_id    = Auth::user()->id;
        $lh->product_id = $id;
        $lh->content    = ['Name updated', $request->get('name')];
        $lh->save();

        return response('success');
    }

    public function updateDescription(Request $request, $id)
    {
        $product                    = Product::find($id);
        $product->short_description = $request->description;
        $product->save();

        $lh             = new ListingHistory();
        $lh->user_id    = Auth::user()->id;
        $lh->product_id = $id;
        $lh->content    = ['Description updated', $request->get('description')];
        $lh->save();

        return response('success');
    }

    public function updateComposition(Request $request, $id)
    {
        $product              = Product::find($id);
        $product->composition = $request->composition;
        $product->save();

        $lh             = new ListingHistory();
        $lh->user_id    = Auth::user()->id;
        $lh->product_id = $id;
        $lh->content    = ['Composition updated', $request->get('composition')];
        $lh->save();

        return response('success');
    }

    public function updateColor(Request $request, $id)
    {
        $product = Product::find($id);

        if ($product) {
            $productColHis             = new \App\ProductColorHistory;
            $productColHis->user_id    = \Auth::user()->id;
            $productColHis->color      = $request->color;
            $productColHis->old_color  = $product->color;
            $productColHis->product_id = $product->id;
            $productColHis->save();
        }

        $originalColor  = $product->color;
        $product->color = $request->color;
        $product->save();

        \App\ProductStatus::pushRecord($product->id, 'MANUAL_COLOR');

        $lh             = new ListingHistory();
        $lh->user_id    = Auth::user()->id;
        $lh->product_id = $id;
        $lh->content    = ['Color updated', $request->get('color')];
        $lh->save();

        if (! $originalColor) {
            return response('success');
        }

        $color = (new Colors)->getID($originalColor);
        if ($color) {
            return response('success');
        }

        $colorReference = ColorReference::where('original_color', $originalColor)->first();
        if ($colorReference) {
            return response('success');
        }

        $colorReference                 = new ColorReference();
        $colorReference->original_color = $originalColor;
        $colorReference->brand_id       = $product->brand;
        $colorReference->erp_color      = $request->get('color');
        $colorReference->save();

        return response('success');
    }

    public function updateCategory(Request $request, $id)
    {
        $product = Product::find($id);

        if ($product) {
            $productCatHis                  = new \App\ProductCategoryHistory;
            $productCatHis->user_id         = \Auth::user()->id;
            $productCatHis->category_id     = $request->category;
            $productCatHis->old_category_id = $product->category;
            $productCatHis->product_id      = $product->id;
            $productCatHis->save();

            \App\ProductStatus::pushRecord($product->id, 'MANUAL_CATEGORY');
        }
        $product->category = $request->category;
        $product->save();
        $lh             = new ListingHistory();
        $lh->user_id    = Auth::user()->id;
        $lh->product_id = $id;
        $lh->content    = ['Category updated', $request->get('category')];
        $lh->save();

        return response('success');
    }

    public function updateSize(Request $request, $id)
    {
        $product               = Product::find($id);
        $product->size         = is_array($request->size) && count($request->size) > 0 ? implode(',', $request->size) : '';
        $product->lmeasurement = $request->lmeasurement;
        $product->hmeasurement = $request->hmeasurement;
        $product->dmeasurement = $request->dmeasurement;
        $product->save();

        $lh             = new ListingHistory();
        $lh->user_id    = Auth::user()->id;
        $lh->product_id = $id;
        $lh->content    = ['Sizes updated', $request->get('lmeasurement') . ' X ' . $request->get('hmeasurement') . ' X ' . $request->get('dmeasurement')];
        $lh->save();

        return response('success');
    }

    public function updatePrice(Request $request, $id)
    {
        $product        = Product::find($id);
        $product->price = $request->price;

        if (! empty($product->brand)) {
            $product->price_inr         = $this->euroToInr($product->price, $product->brand);
            $product->price_inr_special = $this->calculateSpecialDiscount($product->price_inr_special, $product->brand);
        }

        $product->save();

        $l             = new ListingHistory();
        $l->user_id    = Auth::user()->id;
        $l->product_id = $id;
        $l->content    = ['Price updated', $product->price];

        return response()->json([
            'price_inr'         => $product->price_inr,
            'price_inr_special' => $product->price_inr_special,
        ]);
    }

    public function quickDownload($id)
    {
        $product = Product::find($id);

        $products_array = [];

        if ($product->hasMedia(config('constants.media_tags'))) {
            foreach ($product->getMedia(config('constants.media_tags')) as $image) {
                $path = public_path('uploads') . '/' . $image->filename . '.' . $image->extension;
                array_push($products_array, $path);
            }
        }

        return response()->download(public_path("$product->sku.zip"))->deleteFileAfterSend();
    }

    public function quickUpload(Request $request, $id)
    {
        $product   = Product::find($id);
        $image_url = '';

        if ($request->hasFile('images')) {
            $product->detachMediaTags(config('constants.media_tags'));

            foreach ($request->file('images') as $key => $image) {
                $media = MediaUploader::fromSource($image)
                    ->toDirectory('product/' . floor($product->id / config('constants.image_per_folder')))
                    ->upload();
                $product->attachMedia($media, config('constants.media_tags'));

                if ($key == 0) {
                    $image_url = getMediaUrl($media);
                }
            }

            $product->last_imagecropper = Auth::id();
            $product->save();
        }

        return response()->json([
            'image_url'         => $image_url,
            'last_imagecropper' => $product->last_imagecropper,
        ]);
    }

    public function calculateSpecialDiscount($price, $brand)
    {
        $dis_per   = BrandController::getDeductionPercentage($brand);
        $dis_price = $price - ($price * $dis_per) / 100;

        return round($dis_price, -3);
    }

    public function euroToInr($price, $brand)
    {
        $euro_to_inr = BrandController::getEuroToInr($brand);

        if (! empty($euro_to_inr)) {
            $inr = $euro_to_inr * $price;
        } else {
            $inr = Setting::get('euro_to_inr') * $price;
        }

        return round($inr, -3);
    }

    public function listMagento(Request $request, $id)
    {
        try {
            // code...
            // Get product by ID
            $product = Product::find($id);
            ImageApprovalPushProductOnlyJob::dispatch($product)->onQueue('imageapprovalpushproductonly');

            return response()->json([
                'result' => 'queuedForDispatch',
                'status' => 'listed',
            ]);
        } catch (Exception $e) {
            $msg = $e->getMessage();

            $logId = LogListMagento::log($id, $msg, 'info');
            ProductPushErrorLog::log('', $id, $msg, 'php', $logId->store_website_id, '', '', $logId->id);
            $this->updateLogUserId($logId);
            // Return error response by default
            return response()->json([
                'result' => 'productNotFound',
                'status' => 'error',
            ]);
        }
    }

    public function pushProductTest(Request $request)
    {
        try {
            $products = ProductHelper::getProducts(StatusHelper::$finalApproval, 1);
            $product  = $products->first();
            TestPushProductOnlyJob::dispatchSync($product);

            return Redirect::Back()->with('success', 'Push product test initiated for this product #' . $product->id . '. You can check the logs on <a href="' . route('list.magento.logging') . '">Log List Magento</a> page.');
        } catch (Exception $e) {
            $msg = $e->getMessage();

            $logId = LogListMagento::log($product->id, $msg, 'info');
            ProductPushErrorLog::log('', $product->id, $msg, 'php', $logId->store_website_id, '', '', $logId->id);
            $this->updateLogUserId($logId);

            return Redirect::Back()->with('error', 'Push product test failed for this product #' . $product->id . '. You can check the logs on <a href="' . route('list.magento.logging') . '">Log List Magento</a> page.');
        }
    }

    public function multilistMagento(Request $request)
    {
        $data = $request->data;

        foreach ($data as $key => $id) {
            try {
                //code...
                // Get product by ID
                $mode    = $request->get('mode', 'product-push');
                $product = Product::find($id);
                //check for hscode
                $hsCode = $product->hsCode($product->category, $product->composition);
                $hsCode = true;
                // If we have a product, push it to Magento
                if ($product !== null) {
                    // Dispatch the job to the queue
                    $category = $product->category;
                    $brand    = $product->brand;
                    //website search
                    $websiteArrays = ProductHelper::getStoreWebsiteName($product->id);
                    if (count($websiteArrays) == 0) {
                        \Log::info('Product started ' . $product->id . ' No website found');
                        $msg   = 'No website found for  Brand: ' . $product->brand . ' and Category: ' . $product->category;
                        $logId = LogListMagento::log($product->id, 'No website found ' . $product->id, 'info');
                        ProductPushErrorLog::log('', $product->id, $msg, 'error', $logId->store_website_id, '', '', $logId->id);
                        $this->updateLogUserId($logId);
                    } else {
                        $i = 1;
                        foreach ($websiteArrays as $websiteArray) {
                            $website = StoreWebsite::find($websiteArray);
                            if ($website) {
                                \Log::info('Product started website found For website' . $website->website);
                                $log = LogListMagento::log($product->id, 'Start push to magento for product id ' . $product->id, 'info', $website->id, 'waiting');
                                //currently we have 3 queues assigned for this task.
                                $log->sync_status = 'waiting';
                                $log->queue       = \App\Helpers::createQueueName($website->title);
                                $log->save();
                                PushToMagento::dispatch($product, $website, $log, $mode)->onQueue($log->queue);
                                $i++;
                            }
                        }
                    }

                    // Update the product, so it doesn't show up in final listing
                    $product->isUploaded = 1;
                    $product->save();
                    // Return response
                    return response()->json([
                        'result' => 'queuedForDispatch',
                        'status' => 'listed',
                    ]);
                }
            } catch (Exception $e) {
                //throw $th;
                $msg = $e->getMessage();

                $logId = LogListMagento::log($id, $msg, 'info');
                ProductPushErrorLog::log('', $id, $msg, 'php', $logId->store_website_id, '', '', $logId->id);
                $this->updateLogUserId($logId);
            }
        }

        return response()->json([
            'result' => 'queuedForDispatch',
            'status' => 'listed',
        ]);
    }

    public function updateLogUserId($logId)
    {
        $updateLogUser = LogListMagento::find($logId->id);
        if ($updateLogUser) {
            $updateLogUser->user_id = Auth::id();
            $updateLogUser->save();
        }
    }

    public function unlistMagento(Request $request, $id)
    {
        $product       = Product::find($id);
        $magentoHelper = new MagentoHelper;
        $result        = $magentoHelper->magentoUnlistProduct($product);

        return response()->json([
            'result' => $result,
            'status' => 'unlisted',
        ]);
    }

    public function approveMagento(Request $request, $id)
    {
        $product       = Product::find($id);
        $magentoHelper = new MagentoHelper;
        $result        = $magentoHelper->magentoUpdateStatus($product);

        return response()->json([
            'result' => $result,
            'status' => 'approved',
        ]);
    }

    public function updateMagento(Request $request, $id)
    {
        $product       = Product::find($id);
        $magentoHelper = new MagentoHelper;
        $result        = $magentoHelper->magentoProductUpdate($product);

        return response()->json([
            'result' => $result[1],
            'status' => 'updated',
        ]);
    }

    public function updateMagentoProduct(Request $request)
    {
        $product = Product::find($request->update_product_id);

        //////      Update Local Product    //////
        $product->name                  = $request->name;
        $product->price                 = $request->price;
        $product->price_eur_special     = $request->price_eur_special;
        $product->price_eur_discounted  = $request->price_eur_discounted;
        $product->price_inr             = $request->price_inr;
        $product->price_inr_special     = $request->price_inr_special;
        $product->price_inr_discounted  = $request->price_inr_discounted;
        $product->measurement_size_type = $request->measurement_size_type;
        $product->lmeasurement          = $request->lmeasurement;
        $product->hmeasurement          = $request->hmeasurement;
        $product->dmeasurement          = $request->dmeasurement;
        $product->composition           = $request->composition;
        $product->size                  = $request->size;
        $product->short_description     = $request->short_description;
        $product->made_in               = $request->made_in;
        $product->brand                 = $request->brand;
        $product->category              = $request->category;
        $product->supplier              = $request->supplier;
        $product->supplier_link         = $request->supplier_link;
        $product->product_link          = $request->product_link;
        $product->updated_at            = time();

        if ($product->update()) {
            if ($product->status_id == 12) {
                ///////     Update Magento Product  //////
                $options = [
                    'trace'              => true,
                    'connection_timeout' => 120,
                    'wsdl_cache'         => WSDL_CACHE_NONE,
                ];

                $proxy     = new \SoapClient(config('magentoapi.url'), $options);
                $sessionId = $proxy->login(config('magentoapi.user'), config('magentoapi.password'));

                $sku = $product->sku . $product->color;
                try {
                    $magento_product = json_decode(json_encode($proxy->catalogProductInfo($sessionId, $sku)), true);
                    if ($magento_product) {
                        if (! empty($product->size)) {
                            $associated_skus = [];
                            $new_variations  = 0;
                            $sizes_array     = explode(',', $product->size);
                            $categories      = CategoryController::getCategoryTreeMagentoIds($product->category);

                            //////      Add new Variations  //////
                            foreach ($sizes_array as $key2 => $size) {
                                $error_message = '';

                                try {
                                    $simple_product = json_decode(json_encode($proxy->catalogProductInfo($sessionId, $sku . '-' . $size)), true);
                                } catch (Exception $e) {
                                    $error_message = $e->getMessage();
                                }

                                if ($error_message == 'Product not exists.') {
                                    // CREATE VARIATION
                                    $productData = [
                                        'categories'        => $categories,
                                        'name'              => $product->name,
                                        'description'       => '<p></p>',
                                        'short_description' => $product->short_description,
                                        'website_ids'       => [1],
                                        // Id or code of website
                                        'status' => $magento_product['status'],
                                        // 1 = Enabled, 2 = Disabled
                                        'visibility' => 1,
                                        // 1 = Not visible, 2 = Catalog, 3 = Search, 4 = Catalog/Search
                                        'tax_class_id' => 2,
                                        // Default VAT
                                        'weight'     => 0,
                                        'stock_data' => [
                                            'use_config_manage_stock' => 1,
                                            'manage_stock'            => 1,
                                        ],
                                        'price' => $product->price_eur_special,
                                        // Same price than configurable product, no price change
                                        'special_price'         => $product->price_eur_discounted,
                                        'additional_attributes' => [
                                            'single_data' => [
                                                ['key' => 'msrp', 'value' => $product->price],
                                                ['key' => 'composition', 'value' => $product->composition],
                                                ['key' => 'color', 'value' => $product->color],
                                                ['key' => 'sizes', 'value' => $size],
                                                ['key' => 'country_of_manufacture', 'value' => $product->made_in],
                                                ['key' => 'brands', 'value' => BrandController::getBrandName($product->brand)],
                                            ],
                                        ],
                                    ];
                                    // Creation of product simple
                                    $result         = $proxy->catalogProductCreate($sessionId, 'simple', 14, $sku . '-' . $size, $productData);
                                    $new_variations = 1;
                                } else {
                                    // SIMPLE PRODUCT EXISTS
                                    $status = $simple_product['status'];
                                    // 1 = Enabled, 2 = Disabled
                                }
                                $associated_skus[] = $sku . '-' . $size;
                            }

                            if ($new_variations == 1) {
                                // IF THERE WAS NEW VARIATION CREATED, UPDATED THE MAIN PRODUCT
                                /**
                                 * Configurable product
                                 */
                                $productData = [
                                    'associated_skus' => $associated_skus,
                                ];
                                // Creation of configurable product
                                $result = $proxy->catalogProductUpdate($sessionId, $sku, $productData);
                            }
                            $messages = 'Product updated successfully';

                            return Redirect::Back()
                                ->with('success', $messages);
                        } else {
                            $messages[] = 'Sorry! No sizes found for magento update';

                            return Redirect::Back()
                                ->withErrors($messages);
                        }
                    } else {
                        $messages[] = 'Sorry! Product not found in magento';

                        return Redirect::Back()
                            ->withErrors($messages);
                    }
                } catch (Exception $e) {
                    $messages[] = $e->getMessage();

                    return Redirect::Back()
                        ->withErrors($messages);
                }
            } else {
                $messages = 'Product updated successfuly';

                return Redirect::Back()
                    ->with('success', $messages);
            }
        } else {
            $messages[] = 'Sorry! Please try again';

            return Redirect::Back()
                ->withErrors($messages);
        }

        return Redirect::Back();
    }

    public function approveProduct(Request $request, $id = null)
    {
        if ($id !== null) {
            $product = Product::find($id);

            $product->is_approved         = 1;
            $product->approved_by         = Auth::user()->id;
            $product->listing_approved_at = Carbon::now()->toDateTimeString();
            $product->save();

            $l             = new ListingHistory();
            $l->user_id    = Auth::user()->id;
            $l->product_id = $product->id;
            $l->action     = 'LISTING_APPROVAL';
            $l->content    = ['action' => 'LISTING_APPROVAL', 'message' => 'Listing approved!'];
            $l->save();

            // once product approved the remove from the edititing list
            $productVUser = \App\ProductVerifyingUser::where('product_id', $id)->first();
            if ($productVUser) {
                $productVUser->delete();
            }

            ActivityConroller::create($product->id, 'productlister', 'create');
        } else {
            $ids      = $request->ids;
            $products = Product::whereIn('id', explode(',', $ids))->get();
            foreach ($products as $product) {
                $product->is_approved         = 1;
                $product->approved_by         = Auth::user()->id;
                $product->listing_approved_at = Carbon::now()->toDateTimeString();
                $product->save();

                $l             = new ListingHistory();
                $l->user_id    = Auth::user()->id;
                $l->product_id = $product->id;
                $l->action     = 'LISTING_APPROVAL';
                $l->content    = ['action' => 'LISTING_APPROVAL', 'message' => 'Listing approved!'];
                $l->save();

                // once product approved the remove from the edititing list
                $productVUser = \App\ProductVerifyingUser::where('product_id', $id)->first();
                if ($productVUser) {
                    $productVUser->delete();
                }
            }

            // once product approved the remove from the edititing list
            $productVUser = \App\ProductVerifyingUser::where('product_id', $id)->first();
            if ($productVUser) {
                $productVUser->delete();
            }

            ActivityConroller::create($product->id, 'productlister', 'create');
        }

        return response()->json([
            'result'  => true,
            'status'  => 'is_approved',
            'success' => 'Products Approved successfully',
        ]);
    }

    public function submitForApproval(Request $request, $id)
    {
        $product         = Product::find($id);
        $product->status = StatusHelper::$submitForApproval;
        $product->save();

        $l             = new ListingHistory();
        $l->user_id    = Auth::user()->id;
        $l->product_id = $product->id;
        $l->action     = 'SUBMIT_FOR_APPROVAL';
        $l->content    = ['action' => 'SUBMIT_FOR_APPROVAL', 'message' => 'User has submitted for approval!'];
        $l->save();

        return response()->json([
            'result' => true,
            'status' => 'submit_for_approval',
        ]);
    }

    public function archive($id)
    {
        $product = Product::find($id);
        $product->delete();

        return redirect()->back()
            ->with('success', 'Product archived successfully');
    }

    public function restore($id)
    {
        $product = Product::withTrashed()->find($id);
        $product->restore();

        return redirect()->back()
            ->with('success', 'Product restored successfully');
    }

    public function destroy($id)
    {
        $product = Product::find($id);
        $product->forceDelete();

        return redirect()->back()
            ->with('success', 'Product deleted successfully');
    }

    public function originalCategory($id)
    {
        $product            = Product::find($id);
        $referencesCategory = '';

        if (isset($product->scraped_products)) {
            // starting to see that howmany category we going to update
            if (isset($product->scraped_products->properties) && isset($product->scraped_products->properties['category']) != null) {
                $category = $product->scraped_products->properties['category'];
                if (is_array($category)) {
                    $referencesCategory = implode(' > ', $category);
                }
            }

            $scrapedProductSkuArray = [];

            if (! empty($referencesCategory)) {
                $productSupplier = $product->supplier;
                $supplier        = Supplier::where('supplier', $productSupplier)->first();
                if ($supplier && $supplier->scraper) {
                    $scrapedProducts = ScrapedProducts::where('website', $supplier->scraper->scraper_name)->get();
                    foreach ($scrapedProducts as $scrapedProduct) {
                        $products = $scrapedProduct->properties['category'];
                        if (is_array($products)) {
                            $list = implode(' > ', $products);
                            if (strtolower($referencesCategory) == strtolower($list)) {
                                $scrapedProductSkuArray[] = $scrapedProduct->sku;
                            }
                        }
                    }
                }
            }

            if (isset($product->scraped_products->properties) && isset($product->scraped_products->properties['category']) != null) {
                return response()->json(['success', $referencesCategory, count($scrapedProductSkuArray)]);
            } else {
                return response()->json(['message', 'Category Is Not Present']);
            }
        } else {
            return response()->json(['message', 'Category Is Not Present']);
        }
    }

    public function changeAllCategoryForAllSupplierProducts(Request $request, $id)
    {
        \App\Jobs\UpdateScrapedCategory::dispatch([
            'product_id'  => $id,
            'category_id' => $request->category,
            'user_id'     => Auth::user()->id,
        ])->onQueue('supplier_products');

        return response()->json(['success', 'Product category has been sent for the update']);
    }

    public function attachProducts($model_type, $model_id, $type, $customer_id, Request $request)
    {
        $roletype = $request->input('roletype') ?? 'Sale';
        $products = Product::where('stock', '>=', 1)
            ->select(['id', 'sku', 'size', 'price_inr_special', 'brand', 'isApproved', 'stage', 'created_at'])
            ->orderBy('created_at', 'DESC')
            ->paginate(Setting::get('pagination'));

        $doSelection = true;
        $customer_id = $customer_id ?? null;

        if ($type == 'images') {
            $attachImages = true;
        } else {
            $attachImages = false;
        }

        if ($model_type == 'broadcast-images') {
            $attachImages = true;
            $doSelection  = false;
        }

        if (Order::find($model_id)) {
            $selected_products = self::getSelectedProducts($model_type, $model_id);
        } else {
            $selected_products = [];
        }

        $category_selection = Category::attr(['name' => 'category[]', 'class' => 'form-control'])
            ->selected(1)
            ->renderAsDropdown();

        return view('partials.grid', compact('products', 'roletype', 'model_id', 'selected_products', 'doSelection', 'model_type', 'category_selection', 'attachImages', 'customer_id'));
    }

    public function attachImages(Request $request, $model_type, $model_id = null, $status = null, $assigned_user = null)
    {
        if ($model_type == 'customer') {
            $customerId = $model_id;
        } else {
            $customerId = null;
        }
        $roletype = $request->input('roletype') ?? 'Sale';
        $term     = $request->input('term');
        if ($request->total_images) {
            $perPageLimit = $request->total_images;
        } else {
            $perPageLimit = $request->get('per_page');
        }

        if (Order::find($model_id)) {
            $selected_products = self::getSelectedProducts($model_type, $model_id);
        } else {
            $selected_products = [];
        }
        if (empty($perPageLimit)) {
            $perPageLimit = Setting::get('pagination');
        }

        $sourceOfSearch = $request->get('source_of_search', 'na');

        $products = (new Product())->newQuery()->latest();
        $products->where('has_mediables', 1);

        if (isset($request->brand[0])) {
            if ($request->brand[0] != null) {
                $products = $products->whereIn('brand', $request->brand);
            }
        }

        if (isset($request->color[0])) {
            if ($request->color[0] != null) {
                $products = $products->whereIn('color', $request->color);
            }
        }

        if (isset($request->category[0])) {
            if ($request->category[0] != null && $request->category[0] != 1) {
                $category_children = [];

                foreach ($request->category as $category) {
                    $is_parent = Category::isParent($category);

                    if ($is_parent) {
                        $childs = Category::find($category)->childs()->get();

                        foreach ($childs as $child) {
                            $is_parent = Category::isParent($child->id);

                            if ($is_parent) {
                                $children = Category::find($child->id)->childs()->get();

                                foreach ($children as $chili) {
                                    array_push($category_children, $chili->id);
                                }
                            } else {
                                array_push($category_children, $child->id);
                            }
                        }
                    } else {
                        array_push($category_children, $category);
                    }
                }

                $products = $products->whereIn('category', $category_children);
            }
        }

        if ($request->price_min != null && $request->price_min != 0) {
            $products = $products->where('price_inr_special', '>=', $request->price_min);
        }

        if ($request->price_max != null) {
            $products = $products->where('price_inr_special', '<=', $request->price_max);
        }

        if ($request->discounted_percentage_min != null && $request->discounted_percentage_min != 0) {
            $products = $products->where('discounted_percentage', '>=', $request->discounted_percentage_min);
        }

        if ($request->discounted_percentage_max != null) {
            $products = $products->where('discounted_percentage', '<=', $request->discounted_percentage_max);
        }

        if (isset($request->supplier[0])) {
            if ($request->supplier[0] != null) {
                $suppliers_list = implode(',', $request->supplier);

                $products = $products->whereRaw("products.id in (SELECT product_id FROM product_suppliers WHERE supplier_id IN ($suppliers_list))");
            }
        }

        if (trim($request->size) != '') {
            $products = $products->whereNotNull('size')->where(function ($query) use ($request) {
                $query->where('size', $request->size)->orWhere('size', 'LIKE', "%$request->size,")->orWhere('size', 'LIKE', "%,$request->size,%");
            });
        }

        if (isset($request->location[0])) {
            if ($request->location[0] != null) {
                $products = $products->whereIn('location', $request->location);
            }
        }

        if (isset($request->type[0])) {
            if ($request->type[0] != null && is_array($request->type)) {
                if (count($request->type) > 1) {
                    $products = $products->where(function ($query) {
                        $query->where('is_scraped', 1)->orWhere('status', 2);
                    });
                } else {
                    if ($request->type[0] == 'scraped') {
                        $products = $products->where('is_scraped', 1);
                    } elseif ($request->type[0] == 'imported') {
                        $products = $products->where('status', 2);
                    } else {
                        $products = $products->where('isUploaded', 1);
                    }
                }
            }
        }

        if ($request->date != '') {
            if (isset($products)) {
                if ($request->type[0] != null && $request->type[0] == 'uploaded') {
                    $products = $products->where('is_uploaded_date', 'LIKE', "%$request->date%");
                } else {
                    $products = $products->where('created_at', 'LIKE', "%$request->date%");
                }
            }
        }

        if (trim($term) != '') {
            $products = $products->where(function ($query) use ($term) {
                $query->where('sku', 'LIKE', "%$term%")
                    ->orWhere('id', 'LIKE', "%$term%")
                    ->orWhere('name', 'LIKE', "%$term%")
                    ->orWhere('short_description', 'LIKE', "%$term%");
                if ($term == -1) {
                    $query = $query->orWhere('isApproved', -1);
                }

                $brand_id = \App\Brand::where('name', 'LIKE', "%$term%")->value('id');
                if ($brand_id) {
                    $query = $query->orWhere('brand', 'LIKE', "%$brand_id%");
                }

                $category_id = $category = Category::where('title', 'LIKE', "%$term%")->value('id');
                if ($category_id) {
                    $query = $query->orWhere('category', $category_id);
                }
            });
            if ($roletype != 'Selection' && $roletype != 'Searcher') {
                $products = $products->whereNull('dnf');
            }
        }

        if (isset($request->ids[0])) {
            if ($request->ids[0] != null) {
                $products = $products->whereIn('id', $request->ids);
            }
        }

        $selected_categories = $request->category ? $request->category : 1;

        if ($request->quick_product === 'true') {
            $products = $products->where('quick_product', 1);
        }

        // assing product to varaible so can use as per condition for join table media
        if ($request->quick_product !== 'true') {
            $products = $products->whereRaw("(stock > 0 OR (supplier ='In-Stock'))");
        }

        if ($request->drafted_product == 'on') {
            $products = $products->whereRaw('quick_product = 1');
        }

        // if source is attach_media for search then check product has image exist or not
        if ($request->get('unsupported', null) != '') {
            $products = $products->join('mediables', function ($query) {
                $query->on('mediables.mediable_id', 'products.id')->where('mediable_type', \App\Product::class);
            });

            $mediaIds = \DB::table('media')->where('aggregate_type', 'image')->join('mediables', function ($query) {
                $query->on('mediables.media_id', 'media.id')->where('mediables.mediable_type', \App\Product::class);
            })->whereNotIn('extension', config('constants.gd_supported_files'))->select('id')->pluck('id')->toArray();

            $products = $products->whereIn('mediables.media_id', $mediaIds);
            $products = $products->groupBy('products.id');
        }

        if (! empty($request->quick_sell_groups) && is_array($request->quick_sell_groups)) {
            $products = $products->whereRaw('(id in (select product_id from product_quicksell_groups where quicksell_group_id in (' . implode(',', $request->quick_sell_groups) . ') ))');
        }

        // brand filter count start
        $brandGroups = clone $products;
        $brandGroups = $brandGroups->groupBy('brand')->select([\DB::raw('count(id) as total_product'), 'brand'])->pluck('total_product', 'brand')->toArray();
        $brandIds    = array_values(array_filter(array_keys($brandGroups)));

        $brandsModel = \App\Brand::whereIn('id', $brandIds)->pluck('name', 'id')->toArray();

        $countBrands = [];
        if (! empty($brandGroups) && ! empty($brandsModel)) {
            foreach ($brandGroups as $key => $count) {
                $countBrands[] = [
                    'id'    => $key,
                    'name'  => ! empty($brandsModel[$key]) ? $brandsModel[$key] : 'N/A',
                    'count' => $count,
                ];
            }
        }
        if ($request->category) {
            try {
                $filtered_category = $request->category;
            } catch (Exception $e) {
                $filtered_category = [1];
            }
        } else {
            $filtered_category = [1];
        }

        $category_selection = Category::attr(['name' => 'category[]', 'class' => 'form-control select-multiple-cat-list input-lg select-multiple', 'multiple' => true, 'data-placeholder' => 'Select Category..'])
            ->selected($filtered_category)
            ->renderAsDropdown();

        // category filter start count
        $categoryGroups = clone $products;
        $categoryGroups = $categoryGroups->groupBy('category')->select([\DB::raw('count(id) as total_product'), 'category'])->pluck('total_product', 'category')->toArray();
        $categoryIds    = array_values(array_filter(array_keys($categoryGroups)));

        $categoryModel = \DB::table('categories')->whereIn('id', $categoryIds)->pluck('title', 'id')->toArray();
        $countCategory = [];
        if (! empty($categoryGroups) && ! empty($categoryModel)) {
            foreach ($categoryGroups as $key => $count) {
                $countCategory[] = [
                    'id'    => $key,
                    'name'  => ! empty($categoryModel[$key]) ? $categoryModel[$key] : 'N/A',
                    'count' => $count,
                ];
            }
        }

        // suppliers filter start count/
        $suppliersGroups = clone $products;
        $all_product_ids = $suppliersGroups->pluck('id')->toArray();
        $countSuppliers  = [];
        if (! empty($all_product_ids)) {
            $suppliersGroups = \App\Product::leftJoin('product_suppliers', 'product_id', '=', 'products.id')
                ->where('products.id', $all_product_ids)
                ->groupBy('product_suppliers.supplier_id')
                ->select([\DB::raw('count(products.id) as total_product'), 'product_suppliers.supplier_id'])
                ->pluck('total_product', 'supplier_id')
                ->toArray();
            $suppliersIds   = array_values(array_filter(array_keys($suppliersGroups)));
            $suppliersModel = \App\Supplier::whereIn('id', $suppliersIds)->pluck('supplier', 'id')->toArray();

            if (! empty($suppliersGroups)) {
                foreach ($suppliersGroups as $key => $count) {
                    $countSuppliers[] = [
                        'id'    => $key,
                        'name'  => ! empty($suppliersModel[$key]) ? $suppliersModel[$key] : 'N/A',
                        'count' => $count,
                    ];
                }
            }
        }

        // select fields..
        $products = $products->select(['products.id', 'name', 'short_description', 'color', 'sku', 'products.category', 'products.size', 'price_eur_special', 'price_inr_special', 'supplier', 'purchase_status', 'products.created_at']);

        if ($request->get('is_on_sale') == 'on') {
            $products = $products->where('is_on_sale', 1);
        }

        if ($request->has('limit')) {
            $perPageLimit = ($request->get('limit') == 'all') ? $products->get()->count() : $request->get('limit');
        }

        $categoryAll = Category::with('childs.childLevelSencond')->where('parent_id', 0)->get();

        foreach ($categoryAll as $category) {
            $categoryArray[] = ['id' => $category->id, 'value' => $category->title];
            foreach ($category->childs as $child) {
                $categoryArray[] = ['id' => $child->id, 'value' => $category->title . ' ' . $child->title];
                if ($child->childLevelSencond != null) {
                    foreach ($child->childLevelSencond as $grandChild) {
                        $categoryArray[] = ['id' => $grandChild->id, 'value' => $category->title . ' ' . $child->title . ' ' . $grandChild->title];
                    }
                }
            }
        }

        if ($request->total_images) {
            $products = $products->limit($request->total_images)->get();
            $products = new LengthAwarePaginator($products, count($products), $request->total_images, 1, [
                'path' => LengthAwarePaginator::resolveCurrentPath(),
            ]);
        } else {
            $products = $products->paginate($perPageLimit);
        }

        $brand           = $request->brand;
        $products_count  = $products->total();
        $all_product_ids = [];
        $from            = request('from', '');
        if ($request->submit_type == 'send-to-approval') {
            $products_ids_cloned = clone $products;
            $product_ids         = $products_ids_cloned->pluck('id');
            $inserted            = 0;
            if (count($product_ids) > 0 && $customerId) {
                $json_brands                    = json_encode($request->brand);
                $json_categories                = json_encode($request->category);
                $json_supplier                  = json_encode($request->supplier);
                $json_color                     = json_encode($request->color);
                $json_location                  = json_encode($request->location);
                $size                           = $request->size;
                $suggestedProducts              = new \App\SuggestedProduct;
                $suggestedProducts->customer_id = $customerId;
                if ($json_brands != 'null' && $json_brands != '') {
                    $suggestedProducts->brands = $json_brands;
                }
                if ($json_categories != 'null' && $json_categories != '') {
                    $suggestedProducts->categories = $json_categories;
                }
                if ($json_color != 'null' && $json_color != '') {
                    $suggestedProducts->color = $json_color;
                }
                if ($json_supplier != 'null' && $json_supplier != '') {
                    $suggestedProducts->supplier = $json_supplier;
                }
                if ($json_location != 'null' && $json_location != '') {
                    $suggestedProducts->location = $json_location;
                }
                $suggestedProducts->size  = $size;
                $suggestedProducts->total = $perPageLimit;
                $suggestedProducts->save();
                $suggestedProductId = $suggestedProducts->id;

                $data_to_insert = [];
                foreach ($product_ids as $id) {
                    $exists = \App\SuggestedProductList::where('customer_id', $customerId)->where('product_id', $id)->where('date', date('Y-m-d'))->first();
                    if (! $exists) {
                        $pr = Product::find($id);
                        if ($pr->hasMedia(config('constants.attach_image_tag'))) {
                            $data_to_insert[] = [
                                'suggested_products_id' => $suggestedProductId,
                                'customer_id'           => $customerId,
                                'product_id'            => $id,
                                'date'                  => date('Y-m-d'),
                            ];
                        }
                        $category_brand_count = ErpLeads::where('category_id', $pr->category)->where('brand_id', $pr->brand)->count();
                        if ($category_brand_count === 0) {
                            $erp_lead                   = new ErpLeads;
                            $erp_lead->lead_status_id   = 1;
                            $erp_lead->customer_id      = $customerId;
                            $erp_lead->product_id       = $id;
                            $erp_lead->store_website_id = 15;
                            $erp_lead->category_id      = $pr->category;
                            $erp_lead->brand_id         = $pr->brand;
                            $erp_lead->type             = 'attach-images-for-product';
                            $erp_lead->min_price        = ! empty($request->price_min) ? $request->price_min : 0;
                            $erp_lead->max_price        = ! empty($request->price_max) ? $request->price_max : 0;
                            $erp_lead->save();
                        }
                    }
                }
                $inserted = count($data_to_insert);
                if ($inserted > 0) {
                    \App\SuggestedProductList::insert($data_to_insert);
                }
            }

            //
            if ($request->need_to_send_message == 1) {
                \App\ChatMessage::create([
                    'message'     => "Total product found '" . count($product_ids) . "' for the keyword message : {$request->keyword_matched}",
                    'customer_id' => $model_id,
                    'status'      => 2,
                    'approved'    => 1,
                ]);

                return ['total_product' => count($product_ids)];
            }
            $msg = $inserted . ' Products attached successfully';

            return response()->json(['code' => 200, 'message' => $msg]);
        }

        $mailEclipseTpl = mailEclipse::getTemplates()->where('template_dynamic', false);
        $rViewMail      = [];
        if (! empty($mailEclipseTpl)) {
            foreach ($mailEclipseTpl as $mTpl) {
                $rViewMail[$mTpl->template_slug] = $mTpl->template_name . ' [' . $mTpl->template_description . ']';
            }
        }

        if ($request->ajax()) {
            $html = view('partials.image-load', [
                'products'          => $products,
                'all_product_ids'   => $all_product_ids,
                'selected_products' => $request->selected_products ? json_decode($request->selected_products) : [],
                'model_type'        => $model_type,
                'countBrands'       => $countBrands,
                'countCategory'     => $countCategory,
                'countSuppliers'    => $countSuppliers,
                'customerId'        => $customerId,
                'categoryArray'     => $categoryArray,
                'rViewMail'         => $rViewMail,
            ])->render();

            if (! empty($from) && $from == 'attach-image') {
                return $html;
            }

            return response()->json(['html' => $html, 'products_count' => $products_count]);
        }

        $message_body = $request->message ? $request->message : '';
        $sending_time = $request->sending_time ?? '';

        $locations = \App\ProductLocation::pluck('name', 'name');
        $suppliers = Supplier::select(['id', 'supplier'])->whereIn('id', DB::table('product_suppliers')->selectRaw('DISTINCT(`supplier_id`) as suppliers')->pluck('suppliers')->toArray())->get();

        $quick_sell_groups = \App\QuickSellGroup::select('id', 'name')->orderBy('id', 'desc')->get();

        return view('partials.image-grid', compact(
            'products',
            'products_count',
            'roletype',
            'model_id',
            'selected_products',
            'model_type',
            'status',
            'assigned_user',
            'category_selection',
            'brand',
            'filtered_category',
            'message_body',
            'sending_time',
            'locations',
            'suppliers',
            'all_product_ids',
            'quick_sell_groups',
            'countBrands',
            'countCategory',
            'countSuppliers',
            'customerId',
            // 'categoryArray',
            'term',
            'rViewMail'
        ));
    }

    public function attachProductToModel($model_type, $model_id, $product_id)
    {
        switch ($model_type) {
            case 'order':
                $action = OrderController::attachProduct($model_id, $product_id);

                break;

            case 'sale':
                $action = SaleController::attachProduct($model_id, $product_id);
                break;
            case 'stock':
                $stock   = Stock::find($model_id);
                $product = Product::find($product_id);

                $stock->products()->attach($product);
                $action = 'Attached';
                break;
        }

        return ['msg' => 'success', 'action' => $action];
    }

    public static function getSelectedProducts($model_type, $model_id)
    {
        $selected_products = [];

        switch ($model_type) {
            case 'order':
                $order = Order::find($model_id);
                if (! empty($order)) {
                    $selected_products = $order->order_product()->with('product')->get()->pluck('product.id')->toArray();
                }
                break;

            case 'sale':
                $sale = Sale::find($model_id);
                if (! empty($sale)) {
                    $selected_products = json_decode($sale->selected_product, true) ?? [];
                }
                break;

            default:
                $selected_products = [];
        }

        return $selected_products;
    }

    public function store(Request $request)
    {
        $this->validate($request, [
            'sku' => 'required|unique:products',
        ]);

        $product = new Product;

        $product->name     = $request->name;
        $product->sku      = $request->sku;
        $size              = ! is_array($request->size) ? [$request->size] : $request->size;
        $product->size     = implode(',', $size);
        $product->brand    = $request->brand;
        $product->color    = $request->color;
        $product->supplier = $request->supplier;
        $product->location = $request->location;
        $product->category = $request->category ?? 1;
        if ($request->price) {
            $product->price = $request->price;
        }
        if ($request->price_inr_special) {
            $product->price_inr_special = $request->price_inr_special;
        }
        $product->stock = 1;

        $brand = Brand::find($request->brand);

        if ($request->price) {
            if (isset($request->brand) && ! empty($brand->euro_to_inr)) {
                $product->price_inr = $brand->euro_to_inr * $product->price;
            } else {
                $product->price_inr = Setting::get('euro_to_inr') * $product->price;
            }

            $deduction_percentage       = $brand && $brand->deduction_percentage ? $brand->deduction_percentage : 1;
            $product->price_inr         = round($product->price_inr, -3);
            $product->price_inr_special = $product->price_inr - ($product->price_inr * $deduction_percentage) / 100;

            $product->price_inr_special = round($product->price_inr_special, -3);
        } elseif ($request->price_inr_special) {
            if (isset($request->brand) && ! empty($brand->euro_to_inr)) {
                $product->price = $request->price_inr_special / $brand->euro_to_inr;
            } else {
                $product->price = $request->price_inr_special / Setting::get('euro_to_inr');
            }
            $product->price_inr = $request->price_inr_special;
        }

        $product->save();

        if ($request->supplier == 'In-stock') {
            $product->suppliers()->attach(11); // In-stock ID
        }

        if ($request->hasFile('image')) {
            $product->detachMediaTags(config('constants.media_tags'));
            $media = MediaUploader::fromSource($request->get('is_image_url') ? $request->get('image') : $request->file('image'))
                ->toDirectory('product/' . floor($product->id / config('constants.image_per_folder')) . '/' . $product->id)
                ->upload();
            $product->attachMedia($media, config('constants.media_tags'));
        }

        $product_image = $product->getMedia(config('constants.media_tags'))->first() ? getMediaUrl($product->getMedia(config('constants.media_tags'))->first()) : '';

        if ($request->order_id) {
            $order_product = new OrderProduct;

            $order_product->order_id      = $request->order_id;
            $order_product->sku           = $request->sku;
            $order_product->product_price = $product->price_inr_special;
            $order_product->size          = $request->size;
            $order_product->color         = $request->color;
            $order_product->qty           = $request->quantity;
            $order_product->product_id    = $product->id;
            $order_product->save();

            return response(['product' => $product, 'order' => $order_product, 'quantity' => $request->quantity, 'product_image' => $product_image]);
        } elseif ($request->stock_id) {
            $stock = Stock::find($request->stock_id);
            $stock->products()->attach($product);

            return response(['product' => $product, 'product_image' => $product_image]);
        }

        if ($request->ajax()) {
            return response()->json(['msg' => 'success']);
        }

        return redirect()->back()->with('success', 'You have successfully uploaded product!');
    }

    /**
     * @SWG\Get(
     *   path="/crop",
     *   tags={"Scraper"},
     *   summary="Return images array where the product status = auto crop",
     *   operationId="scraper-get-product-img",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *   @SWG\Response(response=406, description="not acceptable"),
     *   @SWG\Response(response=500, description="internal server error"),
     *
     *      @SWG\Parameter(
     *          name="product_id",
     *          in="path",
     *          required=false,
     *          type="string"
     *      ),
     *      @SWG\Parameter(
     *          name="supplier_id",
     *          in="path",
     *          required=false,
     *          type="string"
     *      ),
     * )
     */
    public function giveImage(Request $request)
    {
        \Log::info('crop_image_start_time: ' . date('Y-m-d H:i:s'));
        $productId  = request('product_id', null);
        $supplierId = request('supplier_id', null);
        if ($productId != null) {
            $product = Product::where('id', $productId)->first();
            if ($product) {
                //set initial pending status for isBeingCropped
                $scrap_status_data = [
                    'product_id'     => $product->id,
                    'old_status'     => $product->status_id,
                    'new_status'     => StatusHelper::$isBeingCropped,
                    'pending_status' => 1,
                    'created_at'     => date('Y-m-d H:i:s'),
                ];
                \App\ProductStatusHistory::addStatusToProduct($scrap_status_data);

                //set initial pending status for pending products with category(attributeRejectCategory)
                $scrap_status_data = [
                    'product_id'     => $product->id,
                    'old_status'     => $product->status_id,
                    'new_status'     => StatusHelper::$attributeRejectCategory,
                    'pending_status' => 1,
                    'created_at'     => date('Y-m-d H:i:s'),
                ];
                \App\ProductStatusHistory::addStatusToProduct($scrap_status_data);
            }
            \Log::info('product_start_time_if_block: ' . date('Y-m-d H:i:s'));
            $product = Product::where('id', $productId)->where('category', '>', 3)->first();
            \Log::info('product_end_time_if_block: ' . date('Y-m-d H:i:s'));
        } elseif ($supplierId != null) {
            \Log::info('product_supplier_start_time: ' . date('Y-m-d H:i:s'));
            $product = Product::join('product_suppliers as ps', 'ps.product_id', 'products.id')
                ->where('ps.supplier_id', $supplierId)
                ->where('products.status_id', StatusHelper::$autoCrop)
                ->where('products.category', '>', 3)
                ->where('products.stock', '>=', 1)
                ->orderBy('products.scrap_priority', 'DESC')
                ->select('products.*')
                ->first();
            \Log::info('product_supplier_end_time: ' . date('Y-m-d H:i:s'));
        } else {
            \Log::info('product_image_start_time_else_block: ' . date('Y-m-d H:i:s'));
            // Get next product
            $product = Product::select('id', 'status_id', 'category', 'lmeasurement', 'hmeasurement', 'dmeasurement')->where('products.status_id', StatusHelper::$autoCrop)
                ->where('products.category', '>', 3)
                ->where('products.stock', '>=', 1)
                ->orderBy('products.scrap_priority', 'DESC');
            // Prioritize suppliers
            $prioritizeSuppliers = "CASE WHEN brand IN (4,13,15,18,20,21,24,25,27,30,32,144,145) AND category IN (11,39,5,41,14,42,60,17,31,63) AND products.supplier IN ('G & B Negozionline', 'Tory Burch', 'Wise Boutique', 'Biffi Boutique (S.P.A.)', 'MARIA STORE', 'Lino Ricci Lei', 'Al Duca d\'Aosta', 'Tiziana Fausti', 'Leam') THEN 0 ELSE 1 END";
            $product             = $product->orderByRaw($prioritizeSuppliers);
            // Show on sale products first
            $product = $product->orderBy('is_on_sale', 'DESC');
            // Show latest approvals first
            $product = $product->orderBy('listing_approved_at', 'DESC');

            $product = $product->with('suppliers_info:id,product_id,supplier_id', 'suppliers_info.supplier:id,priority')->whereHas('suppliers_info', function ($query) {
                $query->select('id', 'product_id', 'supplier_id');
                $query->whereHas('supplier', function ($query) {
                    $query->select('id')->where('priority', '!=', null);
                });
            })
                ->whereHasMedia('original')
                ->first();
            if (! empty($product)) {
                $product->priority = isset($product->suppliers_info->first()->supplier->priority) ? $product->suppliers_info->first()->supplier->priority : 5;
            }
            \Log::info('product_image_end_time_else_block: ' . date('Y-m-d H:i:s'));

            unset($product->priority);
        }

        if (! $product) {
            // Return JSON
            return response()->json([
                'status' => 'no_product',
            ]);
        }

        $debug = request('debug', false);
        if (empty($debug)) {
            $product->status_id = StatusHelper::$isBeingCropped;
            $product->save();
        }

        \Log::info('mediables_start_time: ' . date('Y-m-d H:i:s'));
        $mediables = DB::table('mediables')->select('media_id')->where('mediable_id', $product->id)->where('mediable_type', \App\Product::class)->where('tag', 'original')->get();
        \Log::info('mediables_end_time: ' . date('Y-m-d H:i:s'));
        //deleting old images
        \Log::info('old_image_start_time: ' . date('Y-m-d H:i:s'));
        $oldImages = DB::table('mediables')->select('media_id')->where('mediable_id', $product->id)->where('mediable_type', \App\Product::class)->where('tag', '!=', 'original')->get();
        \Log::info('old_image_end_time: ' . date('Y-m-d H:i:s'));
        //old scraped products
        if ($oldImages) {
            foreach ($oldImages as $img) {
                $media = Media::where('id', $img->media_id)->first();
                if ($media) {
                    $image_path = $media->getAbsolutePath();
                    if (\File::exists($image_path)) {
                        \File::delete($image_path);
                    }
                    $media->delete();
                }
            }
        }

        foreach ($mediables as $mediable) {
            $mediableArray[] = $mediable->media_id;
        }

        if (! isset($mediableArray)) {
            return response()->json([
                'status' => 'no_product',
            ]);
        }

        \Log::info('media_start_time: ' . date('Y-m-d H:i:s'));
        $images = Media::select('id', 'filename', 'extension', 'mime_type', 'disk', 'directory')->whereIn('id', $mediableArray)->get();

        foreach ($images as $image) {
            $output['media_id'] = $image->id;
            $image->setAttribute('pivot', $output);
        }
        \Log::info('media_end_time: ' . date('Y-m-d H:i:s'));

        // Get category
        $category = $product->product_category;

        // Get other information related to category
        $cat    = $category->title;
        $parent = '';
        $child  = '';
        try {
            if ($cat != 'Select Category') {
                if ($category->isParent($category->id)) {
                    $parent = $cat;
                    $child  = $cat;
                } else {
                    $parent = $category->parent()->first()->title;
                    $child  = $cat;
                }
            }
        } catch (\ErrorException $e) {
            //
        }

        \Log::info('website_array_start_time: ' . date('Y-m-d H:i:s'));
        //Getting Website Color
        $websiteArrays = ProductHelper::getStoreWebsiteNameByTag($product->id);
        if (count($websiteArrays) == 0) {
            $colors = [];
        } else {
            foreach ($websiteArrays as $websiteArray) {
                $website = $websiteArray;
                if ($website) {
                    $isCropped = SiteCroppedImages::where('website_id', $websiteArray->id)
                        ->where('product_id', $product->id)->exists();
                    if (! $isCropped) {
                        [$r, $g, $b] = sscanf($website->cropper_color, '#%02x%02x%02x');
                        if (! empty($r) && ! empty($g) && ! empty($b)) {
                            $hexcode  = '(' . $r . ',' . $g . ',' . $b . ')';
                            $colors[] = [
                                'code'              => $hexcode,
                                'color'             => $website->cropper_color_name,
                                'size'              => $website->cropping_size,
                                'store'             => $website->title,
                                'logo_color'        => $website->logo_color,
                                'logo_border_color' => $website->logo_border_color,
                                'text_color'        => $website->text_color,
                                'border_color'      => ['color' => $website->border_color, 'thickness' => $website->border_thickness],
                            ];
                        }
                    }
                }
            }
        }
        \Log::info('website_array_end_time: ' . date('Y-m-d H:i:s'));
        if (! isset($colors)) {
            $colors = [];
        }
        if ($parent == null && $parent == '') {
            // Set new status
            $product->status_id = StatusHelper::$attributeRejectCategory;
            $product->save();

            \Log::info('crop_image_end_time: ' . date('Y-m-d H:i:s'));
            // Return JSON
            return response()->json([
                'status' => 'no_product',
            ]);
        } else {
            // Set new status
            $debug = request('debug', false);
            if (empty($debug)) {
                $product->status_id = StatusHelper::$isBeingCropped;
                $product->save();
            }

            $category_text = '';
            if ($child == 'Unknown Category') {
                $category_text = $parent;
            } else {
                $category_text = $parent . ' ' . $child;
            }
            $res = [
                'product_id'    => $product->id,
                'image_urls'    => $images,
                'l_measurement' => $product->lmeasurement,
                'h_measurement' => $product->hmeasurement,
                'd_measurement' => $product->dmeasurement,
                'category'      => $category_text,
                'colors'        => $colors,
            ];

            $http = CropImageGetRequest::create([
                'product_id' => $product->id,
                'request'    => json_encode($request->all()),
                'response'   => json_encode($res),
            ]);

            $res['token'] = $http->id;

            \Log::info('crop_image_end_time: ' . date('Y-m-d H:i:s'));
            // Return product
            return response()->json($res);
        }
    }

    /**
     * @SWG\Post(
     *   path="/link/image-crop",
     *   tags={"Crop"},
     *   summary="Save cropped image for product",
     *   operationId="crop-save-product-img",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *   @SWG\Response(response=406, description="not acceptable"),
     *   @SWG\Response(response=500, description="internal server error"),
     *
     *      @SWG\Parameter(
     *          name="product_id",
     *          in="path",
     *          required=true,
     *          type="string"
     *      ),
     *      @SWG\Parameter(
     *          name="file",
     *          in="formData",
     *          required=true,
     *          type="file"
     *      ),
     *      @SWG\Parameter(
     *          name="color",
     *          in="formData",
     *          required=true,
     *          type="string"
     *      ),
     *      @SWG\Parameter(
     *          name="media_id",
     *          in="formData",
     *          required=true,
     *          type="string"
     *      ),
     *      @SWG\Parameter(
     *          name="filename",
     *          in="formData",
     *          required=true,
     *          type="string"
     *      ),
     *      @SWG\Parameter(
     *          name="time",
     *          in="formData",
     *          required=true,
     *          type="string"
     *      ),
     * )
     */
    public function saveImage(Request $request)
    {
        $req = $request->all();

        $req['file'] = $request->file;

        $httpHistory = CropImageHttpRequestResponse::create([
            'crop_image_get_request_id' => $request->token,
            'request'                   => json_encode($req),
        ]);
        try {
            // Find the product or fail
            $product = Product::find($request->get('product_id'));

            if (! $product) {
                $res = [
                    'status'  => 'error',
                    'message' => 'Unknown product with ID:' . $request->get('product_id'),
                ];

                $httpHistory->update(['response' => json_encode($res)]);

                return response()->json($res);
            }

            //sets initial status pending for finalApproval in product status histroy
            $data = [
                'product_id'     => $product->id,
                'old_status'     => $product->status_id,
                'new_status'     => StatusHelper::$finalApproval,
                'pending_status' => 1,
                'created_at'     => date('Y-m-d H:i:s'),
            ];
            \App\ProductStatusHistory::addStatusToProduct($data);

            // Check if we have a file
            if ($request->hasFile('file')) {
                $image = $request->file('file');

                //Get the last image of the product.
                $allMediaIds = [];
                $pMedia      = $product->getMedia(config('constants.media_original_tag'));
                if (! $pMedia->isEmpty()) {
                    foreach ($pMedia as $m) {
                        $allMediaIds[] = $m->id;
                    }
                }

                $productMediacount = count($allMediaIds);

                $media = MediaUploader::fromSource($image)
                    ->useFilename('CROPPED_' . time() . '_' . rand(555, 455545))
                    ->toDirectory('product/' . floor($product->id / config('constants.image_per_folder')) . '/' . $product->id)
                    ->upload();
                $colorName = null;
                if ($request->get('color')) {
                    $colorCode = str_replace(['(', ')'], '', $request->get('color'));
                    $rgbarr    = explode(',', $colorCode, 3);
                    $hex       = sprintf('#%02x%02x%02x', $rgbarr[0], $rgbarr[1], $rgbarr[2]);
                    $colorName = $hex;
                    $tag       = 'gallery_' . $hex;

                    // check the store website count is existed with the total image
                    $storeWebCount = $product->getMedia($tag)->count();
                    if ($productMediacount <= $storeWebCount) {
                        $store_website_detail = StoreWebsite::where('cropper_color', 'LIKE', '%' . $request->get('color'))->first();
                        if ($store_website_detail !== null) {
                            $store_websites = StoreWebsite::where('tag_id', $store_website_detail->tag_id)->get();
                            foreach ($store_websites as $sw_key => $sw_data) {
                                if (isset($req['store']) && $req['store'] == $sw_data->title) {
                                    $exist = SiteCroppedImages::where('website_id', $sw_data->id)
                                        ->where('product_id', $product->id)->exists();
                                    if (! $exist) {
                                        SiteCroppedImages::create([
                                            'website_id' => $sw_data->id,
                                            'product_id' => $product->id,
                                        ]);
                                    }
                                }
                            }
                        }
                    }
                } else {
                    $tag = config('constants.media_gallery_tag');
                }

                $product->attachMedia($media, $tag);
                $product->crop_count = $product->crop_count + 1;
                $product->save();

                $imageReference                      = new CroppedImageReference();
                $imageReference->original_media_id   = $request->get('media_id');
                $imageReference->new_media_id        = $media->id;
                $imageReference->original_media_name = $request->get('filename');
                $imageReference->new_media_name      = $media->filename . '.' . $media->extension;
                $imageReference->speed               = $request->get('time');
                $imageReference->product_id          = $product->id;
                $imageReference->color               = $colorName;
                $imageReference->instance_id         = $request->get('instance_id');
                $imageReference->save();

                $httpHistory->update(['cropped_image_reference_id' => $imageReference->id]);

                //CHeck number of products in Crop Reference Grid
                $cropCount = CroppedImageReference::where('product_id', $product->id)
                    ->whereIn('original_media_id', $allMediaIds)
                    ->count();

                //check website count using Product
                $websiteArrays = ProductHelper::getStoreWebsiteName($product->id);

                if (count($websiteArrays) == 0) {
                    $multi = 1;
                } else {
                    $multi = count($websiteArrays);
                }

                $totalM = $productMediacount;

                $productMediacount = ($productMediacount * $multi);

                if ($productMediacount <= $cropCount) {
                    $product->cropped_at = Carbon::now()->toDateTimeString();
                    //check final approval
                    if ($product->checkPriceRange()) {
                        $product->status_id = StatusHelper::$finalApproval;
                    } else {
                        $product->status_id = StatusHelper::$priceCheck;
                    }

                    $product->scrap_priority = 0;
                    $product->save();
                } else {
                    $product->cropped_at = Carbon::now()->toDateTimeString();
                    $product->save();
                }

                // get the status as per crop
                if ($product->category > 0) {
                    $category = \App\Category::find($product->category);
                    if (! empty($category) && $category->status_after_autocrop > 0) {
                        \App\Helpers\StatusHelper::updateStatus($product, $category->status_after_autocrop);
                    }
                }
            } else {
                $product->status_id = StatusHelper::$cropSkipped;
                $product->save();
            }

            $res = [
                'status' => 'success',
            ];

            $httpHistory->update(['response' => json_encode($res)]);

            return response()->json($res);
        } catch (Exception $e) {
            $res = [
                'status'  => 'error',
                'message' => $e->getMessage(),
                'line_no' => $e->getLine(),
                'file'    => $e->getFile(),
            ];

            $httpHistory->update(['response' => json_encode($res)]);

            return response()->json($res);
        }
    }

    public function rejectedListingStatistics()
    {
        $products = DB::table('products')->where('is_listing_rejected', 1)->groupBy(['listing_remark', 'supplier'])->selectRaw('COUNT(*) as total_count, supplier, listing_remark')->orderBy('total_count', 'DESC')->get();

        return view('products.rejected_stats', compact('products'));
    }

    public function addListingRemarkToProduct(Request $request)
    {
        $productId = $request->get('product_id');
        $remark    = $request->get('remark');

        $product = Product::find($productId);
        if ($product) {
            $product->listing_remark      = $remark;
            $product->is_listing_rejected = $request->get('rejected');
            $product->listing_rejected_by = Auth::user()->id;
            $product->is_approved         = 0;
            $product->listing_rejected_on = date('Y-m-d');
            $product->save();
        }

        if ($request->get('senior') && $product) {
            $s                 = new UserProductFeedback();
            $s->user_id        = $product->approved_by;
            $s->senior_user_id = Auth::user()->id;
            $s->action         = 'LISTING_APPROVAL_REJECTED';
            $s->content        = ['action' => 'LISTING_APPROVAL_REJECTED', 'previous_action' => 'LISTING_APPROVAL', 'current_action' => 'LISTING_REJECTED', 'message' => 'Your listing has been rejected because of : ' . $remark];
            $s->message        = "Your listing approval has been discarded by the Admin because of this issue: $remark. Please make sure you check these details before approving any future product.";
            $s->product_id     = $product->id;
            $s->save();
        }

        if ($request->get('rejected') && $product) {
            $l             = new ListingHistory();
            $l->action     = 'LISTING_REJECTED';
            $l->content    = ['action' => 'LISTING_REJECTED', 'page' => 'LISTING'];
            $l->user_id    = Auth::user()->id;
            $l->product_id = $product->id;
            $l->save();
        }

        return response()->json([
            'status' => 'success',
        ]);
    }

    public function showAutoRejectedProducts()
    {
        $totalRemaining = Product::where('stock', '>=', 1)->where('is_listing_rejected_automatically', 1)->count();
        $totalDone      = Product::where('stock', '>=', 1)->where('was_auto_rejected', 1)->count();

        return view('products.auto_rejected_stats', compact('totalDone', 'totalRemaining'));
    }

    public function affiliateProducts(Request $request)
    {
        $colors        = (new Colors)->all();
        $category_tree = [];
        $brands        = Brand::all();
        $brand         = null;
        $price         = null;
        $color         = [];
        $products      = Product::where('is_without_image', 0);

        if ($request->get('sku')) {
            $products = $products->where(function ($query) use ($request) {
                $sku = $request->get('sku');
                $query->where('sku', $sku)
                    ->orWhere('name', 'LIKE', "%$sku%")
                    ->orWhere('short_description', 'LIKE', "%$sku%");
            });
        }

        foreach (Category::all() as $category) {
            if ($category->parent_id != 0) {
                $parent = $category->parent;
                if ($parent->parent_id != 0) {
                    $category_tree[$parent->parent_id][$parent->id][$category->id];
                } else {
                    $category_tree[$parent->id][$category->id] = $category->id;
                }
            }

            $categories_array[$category->id] = $category->parent_id;
        }

        if ($request->get('brand') > 0) {
            $brand    = $request->get('brand');
            $products = $products->where('brand', $brand);
        }

        $selected_categories = $request->get('category') ?: [1];
        if ($request->get('category')[0] != null && $request->get('category')[0] != 1) {
            $category_children = [];

            foreach ($request->get('category') as $category) {
                $is_parent = Category::isParent($category);

                if ($is_parent) {
                    $childs = Category::find($category)->childs()->get();

                    foreach ($childs as $child) {
                        $is_parent = Category::isParent($child->id);

                        if ($is_parent) {
                            $children = Category::find($child->id)->childs()->get();

                            foreach ($children as $chili) {
                                array_push($category_children, $chili->id);
                            }
                        } else {
                            array_push($category_children, $child->id);
                        }
                    }
                } else {
                    array_push($category_children, $category);
                }
            }

            $products = $products->whereIn('category', $category_children);
        }

        if ($request->color[0] != null) {
            $products = $products->whereIn('color', $request->color);
            $color    = $request->color;
        }

        if ($request->get('price')[0] !== null) {
            $price    = $request->get('price');
            $price    = explode(',', $price);
            $products = $products->whereBetween('price_inr_special', [$price[0], $price[1]]);
        }

        $category_array = Category::renderAsArray();

        $products = $products->paginate(20);

        $c = $color;

        return view('products.affiliate', compact('products', 'request', 'brands', 'categories_array', 'category_array', 'selected_categories', 'brand', 'colors', 'c', 'price'));
    }

    public function showRejectedListedProducts(Request $request)
    {
        $products            = new Product;
        $products            = $products->where('stock', '>=', 1);
        $reason              = '';
        $supplier            = [];
        $selected_categories = [];

        if ($request->get('reason') !== '') {
            $reason   = $request->get('reason');
            $products = $products->where('listing_remark', 'LIKE', "%$reason%");
        }

        if ($request->get('date') !== '') {
            $date     = $request->get('date');
            $products = $products->where('listing_rejected_on', 'LIKE', "%$date%");
        }

        if ($request->get('id') !== '') {
            $id       = $request->get('id');
            $products = $products->where('id', $id)->orWhere('sku', 'LIKE', "%$id%");
        }

        if ($request->get('user_id') > 0) {
            $products = $products->where('listing_rejected_by', $request->get('user_id'));
        }

        if ($request->get('type') === 'accepted') {
            $products = $products->where('is_listing_rejected', 0)->where('listing_remark', '!=', '');
        } else {
            $products = $products->where('is_listing_rejected', 1);
        }

        $suppliers = DB::select('
                SELECT id, supplier
                FROM suppliers

                INNER JOIN (
                    SELECT supplier_id FROM product_suppliers GROUP BY supplier_id
                    ) as product_suppliers
                ON suppliers.id = product_suppliers.supplier_id
        ');

        if ($request->supplier[0] != null) {
            $supplier = $request->get('supplier');
            $products = $products->whereIn('id', DB::table('product_suppliers')->whereIn('supplier_id', $supplier)->pluck('product_id'));
        }

        if ($request->category[0] != null && $request->category[0] != 1) {
            $category_children = [];
            foreach ($request->category as $category) {
                $is_parent = Category::isParent($category);

                if ($is_parent) {
                    $childs = Category::find($category)->childs()->get();

                    foreach ($childs as $child) {
                        $is_parent = Category::isParent($child->id);

                        if ($is_parent) {
                            $children = Category::find($child->id)->childs()->get();

                            foreach ($children as $chili) {
                                array_push($category_children, $chili->id);
                            }
                        } else {
                            array_push($category_children, $child->id);
                        }
                    }
                } else {
                    array_push($category_children, $category);
                }
            }
            $products            = $products->whereIn('category', $category_children);
            $selected_categories = [$request->get('category')[0]];
        }
        $users = User::all();

        $category_array = Category::renderAsArray();

        $products = $products->with('log_scraper_vs_ai')->where('stock', '>=', 1)->where('is_listing_rejected', 1)->orderBy('listing_rejected_on', 'DESC')->orderBy('updated_at', 'DESC')->paginate(25);

        $rejectedListingSummary = DB::table('products')->where('stock', '>=', 1)->selectRaw('DISTINCT(listing_remark) as remark, COUNT(listing_remark) as issue_count')->where('is_listing_rejected', 1)->groupBy('listing_remark')->orderBy('issue_count', 'DESC')->get();

        return view('products.rejected_listings', compact('products', 'reason', 'category_array', 'selected_categories', 'suppliers', 'supplier', 'request', 'users', 'rejectedListingSummary'));
    }

    public function updateProductListingStats(Request $request)
    {
        $product = Product::find($request->get('product_id'));
        if ($product) {
            $product->is_corrected        = $request->get('is_corrected');
            $product->is_script_corrected = $request->get('is_script_corrected');
            $product->save();
        }

        return response()->json([
            'status' => 'success',
        ]);
    }

    public function deleteOutOfStockProducts()
    {
        $product = Product::where('stock', 0)->delete();

        return redirect()->back()->with('success', 'Productsssss deleted successfully');
    }

    public function deleteProduct(Request $request)
    {
        if ($request->has('product_id')) {
            $product = Product::find($request->get('product_id'));

            if ($product) {
                $product->forceDelete();
            }
        } else {
            $ids             = $request->ids;
            $delete_products = Product::whereIn('id', explode(',', $ids))->get();
            foreach ($delete_products as $delete_product) {
                $delete_product->deleted_at = date('Y-m-d H:i:s');
                $delete_product->save();
            }
        }

        return response()->json([
            'status'  => 'Products Deleted successfully',
            'success' => 'Products Deleted successfully',
        ]);
    }

    public function relistProduct(Request $request)
    {
        $product = Product::find($request->get('product_id'));

        if ($product) {
            $product->is_listing_rejected = $request->get('rejected');
            $product->save();
        }

        return response()->json([
            'status' => 'success',
        ]);
    }

    public function productMultiDescription(Request $request)
    {
        $products = \App\ScrapedProducts::selectRaw('scraped_products.sku, COUNT(*) as count, scraped_products.product_id')
            ->where('scraped_products.sku', '!=', '')
            ->groupBy('scraped_products.sku')
            ->orderByDesc('count')
            ->paginate(25);

        return view('products.multidescription', compact('products'));
    }

    public function productMultiDescriptionCheck(Request $request)
    {
        $sku          = $request->input('sku');
        $productCount = Product::where('sku', $sku)->count();

        return response()->json(['result' => $productCount]);
    }

    public function productMultiDescriptionSku(Request $request)
    {
        $sku      = $request->id;
        $products = \App\ScrapedProducts::selectRaw('scraped_products.id as sid, scraped_products.sort_order as sort_order, scraped_products.description, scraped_products.brand_id, scraped_products.website as website, products.name as pname, brands.name as bname')
            ->join('products', 'scraped_products.product_id', '=', 'products.id')
            ->join('brands', 'scraped_products.brand_id', '=', 'brands.id')
            ->where('scraped_products.sku', $sku)
            ->get();

        return view('products.skumultidescription', compact('products', 'sku'));
    }

    public function productMultiDescriptionUpdate(Request $request)
    {
        $updates   = $request->productData;
        $sku       = $request->sku;
        $condition = $request->condition;
        foreach ($updates as $update) {
            $productId = $update['id'];
            $sortOrder = $update['value'];
            \App\ScrapedProducts::where('id', $productId)->where('sku', $sku)->update(['sort_order' => $sortOrder]);
            if ($condition == 1 && $sortOrder == 1) {
                $getdescription = \App\ScrapedProducts::where('id', $productId)->where('sku', $sku)->first();
                Product::where('sku', $sku)->update(['short_description' => $getdescription->description]);
            }
        }

        return response()->json(['message' => 'Sort orders updated successfully']);
    }

    public function productSizeLog(Request $request)
    {
        $query = ProductSupplier::with('supplier', 'product')
            ->where(function ($query) {
                $query->whereNotNull('size')->orWhere('size', '!=', '');
            });

        if ($request->has('product_id') && $request->filled('product_id')) {
            $query->where('product_id', $request->input('product_id'));
        }

        if ($request->supplier) {
            $query->whereIn('product_suppliers.supplier_id', $request->supplier); // Specify the table for the column 'supplier_id'
        }

        if ($request->has('sku') && $request->filled('sku')) {
            $query->whereHas('product', function ($query) use ($request) {
                $query->where('sku', $request->input('sku'));
            });
        }

        // // Add the groupBy clause here
        $supplier       = Supplier::select('id', 'supplier')->get();
        $products_count = $query->count();
        $products       = $query->paginate(50);

        return view('products.size', compact('products', 'products_count', 'request', 'supplier'));
    }

    public function productDescriptionHistory(Request $request)
    {
        $id = $request->id;

        $query = LogScraper::where('sku', $id)
            ->leftJoin('brands as b', 'b.id', 'log_scraper.brand')
            ->leftJoin('categories as c', 'c.id', 'log_scraper.category')
            ->select([
                'log_scraper.*',
                'b.name as brand_name',
                'c.title as category_name']);
        $products = $query->orderBy('updated_at', 'DESC')->get();

        return view('products.partials.history', compact('products'));
    }

    public function productDescription(Request $request)
    {
        $query = ProductSupplier::with('supplier', 'product')
            ->select(['product_suppliers.*', 'scrapers.id as scraper_id', 'scrapers.last_started_at as last_started_at'])
            ->join('scrapers', 'scrapers.supplier_id', 'product_suppliers.supplier_id');
        if ($request->get('product_id') != '') {
            $products = $query->where('product_id', $request->get('product_id'));
        }
        if ($request->get('sku') != '') {
            $products = $query->whereHas('product', function ($query) use ($request) {
                $query->where('sku', $request->get('sku'));
            });
        }

        $supplier = Supplier::select('id', 'supplier')->get();

        if ($request->supplier) {
            $query->whereIn('product_suppliers.supplier_id', $request->supplier); // Specify the table for the column 'supplier_id'
        }
        if ($request->colors) {
            $query->whereIn('product_suppliers.color', $request->colors); // Specify the table for the column 'supplier_id'
        }
        if ($request->sizeSystem) {
            $query->whereIn('product_suppliers.size_system', $request->sizeSystem); // Specify the table for the column 'supplier_id'
        }
        if ($request->product_title) {
            $products = $query->where('title', 'LIKE', '%' . $request->product_title . '%');
        }
        if ($request->product_description) {
            $products = $query->where('description', 'LIKE', '%' . $request->product_description . '%');
        }
        if ($request->product_color) {
            $products = $query->where('color', 'LIKE', '%' . $request->product_color . '%');
        }
        if ($request->product_size) {
            $products = $query->where('size', 'LIKE', '%' . $request->product_size . '%');
        }
        if ($request->product_composition) {
            $products = $query->where('composition', 'LIKE', '%' . $request->product_composition . '%');
        }
        if ($request->product_size_system) {
            $products = $query->where('size_system', 'LIKE', '%' . $request->product_size_system . '%');
        }
        if ($request->product_price) {
            $products = $query->where('price', 'LIKE', '%' . $request->product_price . '%');
        }
        if ($request->product_discount) {
            $products = $query->where('price_discounted', 'LIKE', '%' . $request->product_discount . '%');
        }

        $products_count = $query->count();
        $products       = $query->orderBy('product_id', 'DESC')->paginate(50);

        return view('products.description', compact('products', 'products_count', 'request', 'supplier'));
    }

    public function productDescriptionUpdate(Request $request)
    {
        $ids  = $request->ids;
        $from = $request->from;
        $to   = $request->to;
        DescriptionChange::create([
            'keyword'      => $from,
            'replace_with' => $to,
        ]);
        foreach ($ids as $id) {
            $prod              = ProductSupplier::where('product_id', $id)->first();
            $description       = str_replace($from, $to, $prod->description);
            $prod->description = $description;
            $prod->save();
        }

        return response()->json([
            'code'    => 200,
            'message' => 'Your request has been update successfully',
        ]);
    }

    public function productScrapLog(Request $request)
    {
        $products = Product::orderBy('updated_at', 'DESC');

        if ($request->get('product_id') != '') {
            $products = $products->where('id', $request->get('product_id'));
        }
        if ($request->get('sku') != '') {
            $products = $products->where('sku', $request->get('sku'));
        }
        if ($request->get('select_date') != '') {
            $date = $request->get('select_date');
        } else {
            $date = date('Y-m-d');
        }
        $statusarray = [];
        if ($request->get('status') != '') {
            $statusarray = [$request->get('status')];
        } else {
            $statusarray = [2, 4, 9, 15, 20, 33, 35, 36, 38, 39, 40];
        }

        $products_count = $products->count();

        $products = $products->paginate(50);

        $products->getCollection()->transform(function ($getproduct) {
            $getproduct->total_count = $getproduct->productstatushistory->count();
            $history_log             = [];
            $productstatushistory    = $getproduct->productstatushistory->toArray();
            foreach ($productstatushistory as $key => $history) {
                $history['created_at']               = Carbon::parse($history['created_at'])->format('H:i');
                $history_log[$history['new_status']] = $history;
            }
            $getproduct->alllog_status = $history_log;

            return $getproduct;
        });

        $status = \App\Helpers\StatusHelper::getStatus();

        $datatableModel = DataTableColumn::select('column_name')->where('user_id', auth()->user()->id)->where('section_name', 'products-status-history')->first();

        $dynamicColumnsToShowp = [];
        if (! empty($datatableModel->column_name)) {
            $hideColumns           = $datatableModel->column_name ?? '';
            $dynamicColumnsToShowp = json_decode($hideColumns, true);
        }

        return view('products.statuslog', compact('products', 'request', 'status', 'products_count', 'request', 'dynamicColumnsToShowp'));
    }

    public function columnVisbilityUpdate(Request $request)
    {
        $userCheck = DataTableColumn::where('user_id', auth()->user()->id)->where('section_name', 'products-status-history')->first();

        if ($userCheck) {
            $column               = DataTableColumn::find($userCheck->id);
            $column->section_name = 'products-status-history';
            $column->column_name  = json_encode($request->column_p);
            $column->save();
        } else {
            $column               = new DataTableColumn();
            $column->section_name = 'products-status-history';
            $column->column_name  = json_encode($request->column_p);
            $column->user_id      = auth()->user()->id;
            $column->save();
        }

        return redirect()->back()->with('success', 'column visiblity Added Successfully!');
    }

    public function productStats(Request $request)
    {
        $products = Product::orderBy('updated_at', 'DESC');

        if ($request->get('status') != '') {
            $status   = $request->get('status') == 'approved' ? 1 : 0;
            $products = $products->where('is_approved', $status);
        }
        if ($request->has('user_id') >= 1) {
            $products = $products->where(function ($query) use ($request) {
                $query->where('approved_by', $request->get('user_id'))
                    ->orWhere('crop_approved_by', $request->get('user_id'))
                    ->orWhere('listing_rejected_by', $request->get('user_id'))
                    ->orWhere('crop_rejected_by', $request->get('user_id'))
                    ->orWhere('crop_ordered_by', $request->get('user_id'));
            });
        }
        $sku = '';

        if ($request->get('sku') != '') {
            $sku      = $request->get('sku');
            $products = $products->where('sku', 'LIKE', "%$sku%");
        }

        if ($request->get('range_start') != '') {
            $products = $products->where(function ($query) use ($request) {
                $query->where('crop_approved_at', '>=', $request->get('range_start'))
                    ->orWhere('listing_approved_at', '>=', $request->get('range_start'))
                    ->orWhere('listing_rejected_on', '>=', $request->get('range_start'))
                    ->orWhere('crop_ordered_at', '>=', $request->get('range_start'))
                    ->orWhere('crop_rejected_at', '>=', $request->get('range_start'));
            });
        }
        if ($request->get('range_end') != '') {
            $products = $products->where(function ($query) use ($request) {
                $query->where('crop_approved_at', '<=', $request->get('range_end'))
                    ->orWhere('listing_approved_at', '<=', $request->get('range_end'))
                    ->orWhere('listing_rejected_on', '<=', $request->get('range_end'))
                    ->orWhere('crop_ordered_at', '<=', $request->get('range_end'))
                    ->orWhere('crop_rejected_at', '<=', $request->get('range_end'));
            });
        }

        $products = $products->paginate(50);
        $users    = User::all();

        return view('products.stats', compact('products', 'sku', 'users', 'request'));
    }

    public function showSOP(Request $request)
    {
        $sopType = $request->get('type');
        $sop     = Sop::where('name', $sopType)->first();

        if (! $sop) {
            $sop          = new Sop();
            $sop->name    = $request->name;
            $sop->content = $request->content;

            $sop->save();
        }

        return view('products.sop', compact('sop'));
    }

    public function getSupplierScrappingInfo(Request $request)
    {
        return View('scrap.supplier-info');
    }

    public function deleteImage()
    {
        $productId = request('product_id', 0);
        $mediaId   = request('media_id', 0);
        $mediaType = request('media_type', 'gallery');

        $cond = Db::table('mediables')->where([
            'media_id'    => $mediaId,
            'mediable_id' => $productId,
            //"tag" => $mediaType,
            'mediable_type' => \App\Product::class,
        ])->delete();

        if ($cond) {
            return response()->json(['code' => 1, 'data' => []]);
        }

        return response()->json(['code' => 0, 'data' => [], 'message' => 'No media found']);
    }

    public function sendMessageSelectedCustomer(Request $request)
    {
        $params            = request()->all();
        $params['user_id'] = \Auth::id();
        $params['status']  = \App\ChatMessage::CHAT_AUTO_BROADCAST;

        $token = request('customer_token', '');

        if (! empty($token)) {
            $customerIds = json_decode(session($token));
            if (empty($customerIds)) {
                $customerIds = [];
            }
        }
        // if customer is not available then choose what it is before
        if (empty($customerIds)) {
            $customerIds = $request->get('customers_id', '');
            $customerIds = explode(',', $customerIds);
        }

        $params['customer_ids'] = $customerIds;

        $groupId            = \DB::table('chat_messages')->max('group_id');
        $params['group_id'] = ($groupId > 0) ? $groupId + 1 : 1;
        $params['is_queue'] = request('is_queue', 0);

        \App\Jobs\SendMessageToCustomer::dispatch($params)->onQueue('customer_message');

        if ($request->ajax()) {
            return response()->json(['msg' => 'success']);
        } else {
            return response()->json(['msg' => 'error']);
        }

        if ($request->get('return_url')) {
            return redirect('/' . $request->get('return_url'));
        }

        return redirect('/erp-leads');
    }

    public function assignGroupSelectedCustomer(Request $request)
    {
        $customerIDs = explode(',', $request->get('customers_id'));
        if (! empty($customerIDs)) {
            foreach ($customerIDs as $cid) {
                $customerExist = MessagingGroupCustomer::where(['message_group_id' => $request->sms_group_id, 'customer_id' => $cid])->first();
                if ($customerExist == null) {
                    MessagingGroupCustomer::create(['message_group_id' => $request->sms_group_id, 'customer_id' => $cid]);
                }
            }
        }

        return response()->json(['msg' => 'success']);
    }

    public function createGroupSelectedCustomer(Request $request)
    {
        $params            = request()->all();
        $params['user_id'] = \Auth::id();

        $token = request('customer_token', '');

        if (! empty($token)) {
            $customerIds = json_decode(session($token));
            if (empty($customerIds)) {
                $customerIds = [];
            }
        }
        // if customer is not available then choose what it is before
        if (empty($customerIds)) {
            $customerIds = $request->get('customers_id', '');
            $customerIds = explode(',', $customerIds);
        }

        $params['customer_ids'] = $customerIds;

        $data = \App\MessagingGroup::create([
            'name'             => $request->name,
            'store_website_id' => $request->store_website_id,
            'service_id'       => $request->service_id,
        ]);

        $customers = \App\Customer::whereIn('id', $params['customer_ids'])->update(['store_website_id' => $params['store_website_id']]);

        if ($customers) {
            return response()->json(['msg' => 'success']);
        } else {
            return response()->json(['msg' => 'error']);
        }

        if ($request->get('return_url')) {
            return redirect('/' . $request->get('return_url'));
        }

        return redirect('/erp-leads');
    }

    /**
     * This function is use for create suggested product log
     *
     * @param type [array] inputArray
     * @param Request $request  Request
     * @param mixed   $log
     * @param mixed   $type
     * @param mixed   $parentId
     *
     * @return void;
     */
    public function createSuggestedProductLog($log = '', $type = '', $parentId = '')
    {
        try {
            $prod = ProductSuggestedLog::create([
                'parent_id' => $parentId,
                'log'       => $log,
                'type'      => $type,
            ]);
        } catch (Exception $e) {
            $prod = ProductSuggestedLog::create(['parent_id' => $parentId, 'log' => $e->getMessage(), 'type' => 'not catch']);
        }
    }

    public function queueCustomerAttachImages(Request $request)
    {
        $prodSugId = isset($request->hidden_suggestedproductid) ? $request->hidden_suggestedproductid : '';
        try {
            // This condition is use for send now no whatsapp
            if ($request->is_queue == 2) {
                return $this->sendNowCustomerAttachImages($request);
            } else {
                $data['_token']          = $request->_token;
                $data['send_pdf']        = $request->send_pdf;
                $data['pdf_file_name']   = ! empty($request->pdf_file_name) ? $request->pdf_file_name : '';
                $data['images']          = $request->images;
                $data['image']           = $request->image;
                $data['screenshot_path'] = $request->screenshot_path;
                $data['message']         = $request->message;
                $data['customer_id']     = $request->customer_id;
                $data['status']          = $request->status;
                $data['type']            = $request->type;
                \App\Jobs\AttachImagesSend::dispatch($data)->onQueue('customer_message');

                $json = request()->get('json', false);

                if ($json) {
                    $this->createSuggestedProductLog('Message Send later Queue', 'Send later Queue', $prodSugId);

                    return response()->json(['code' => 200, 'message' => 'Message Send later Queue']);
                }
                if ($request->get('return_url')) {
                    return redirect($request->get('return_url'));
                }

                return redirect()->route('customer.post.show', $prodSugId)->withSuccess('Message Send For Queue');
            }
        } catch (Exception $e) {
            $prod = ProductSuggestedLog::create(['parent_id' => $prodSugId, 'log' => $e->getMessage(), 'type' => 'not catch']);
        }
    }

    /**
     * This function is use for send now image on whatsapp
     *
     * @return type JsonResponse
     */
    public function sendNowCustomerAttachImages(Request $request)
    {
        $prodSugId = isset($request->hidden_suggestedproductid) ? $request->hidden_suggestedproductid : '';
        try {
            $requestData = new Request();
            $requestData->setMethod('POST');
            $requestData->request->add([
                '_token'          => $request->_token,
                'send_pdf'        => $request->send_pdf,
                'pdf_file_name'   => $request->pdf_file_name,
                'images'          => $request->images,
                'image'           => $request->image,
                'screenshot_path' => $request->screenshot_path,
                'message'         => $request->message,
                'customer_id'     => $request->customer_id,
                'status'          => $request->status,
                'type'            => $request->type,
            ]);
            app(\App\Http\Controllers\WhatsAppController::class)->sendMessage($requestData, 'customer');

            $json = request()->get('json', false);
            if ($json) {
                $this->createSuggestedProductLog('Message Send Now on whatsapp', 'Send Now', $prodSugId);

                return response()->json(['code' => 200, 'message' => 'Message Send Now on whatsapp']);
            }
            if ($request->get('return_url')) {
                return redirect($request->get('return_url'));
            }

            return redirect()->route('customer.post.show', $prodSugId)->withSuccess('Message Send Now on whatsapp');
        } catch (Exception $e) {
            $prod = ProductSuggestedLog::create(['parent_id' => $prodSugId, 'log' => $e->getMessage(), 'type' => 'not catch']);
        }
    }

    public function cropImage(Request $request)
    {
        $id               = $request->id;
        $img              = $request->img;
        $style            = $request->style;
        $style            = explode(' ', $style);
        $name             = str_replace(['scale(', ')'], '', $style[4]);
        $newHeight        = (($name * 3.333333) * 1000);
        [$width, $height] = getimagesize($img);
        $thumb            = imagecreatetruecolor($newHeight, $newHeight);
        try {
            $source = imagecreatefromjpeg($img);
        } catch (Exception $e) {
            $source = imagecreatefrompng($img);
        }

        // Resize
        imagecopyresized($thumb, $source, 0, 0, 0, 0, $newHeight, $newHeight, $width, $height);

        $thumbWidth  = imagesx($thumb);
        $thumbHeight = imagesy($thumb);

        $canvasImage = imagecreatetruecolor(1000, 1000); // Creates a black image

        // Fill it with white (optional)
        $gray = imagecolorallocate($canvasImage, 227, 227, 227);
        imagefill($canvasImage, 0, 0, $gray);

        imagecopy($canvasImage, $thumb, (1000 - $thumbWidth) / 2, (1000 - $thumbHeight) / 2, 0, 0, $thumbWidth, $thumbHeight);
        $url  = config('env.APP_URL');
        $path = str_replace($url, '', $img);

        imagejpeg($canvasImage, public_path() . '/' . $path);
        $product = Product::find($id);

        return response()->json(['success' => 'success', 200]);
    }

    public function hsCodeIndex(Request $request)
    {
        if ($request->category || $request->keyword) {
            $products = Product::select('composition', 'category')->where('composition', 'LIKE', '%' . request('keyword') . '%')->where('category', $request->category[0])->groupBy('composition')->get();

            foreach ($products as $product) {
                if ($product->category != null) {
                    $categoryTree = CategoryController::getCategoryTree($product->category);
                    if (is_array($categoryTree)) {
                        $childCategory = implode(' > ', $categoryTree);
                    }

                    $cat            = Category::findOrFail($request->category[0]);
                    $parentCategory = $cat->title;

                    if ($product->composition != null) {
                        if ($request->group == 'on') {
                            $composition    = strip_tags($product->composition);
                            $compositions[] = str_replace(['&nbsp;', '/span>'], ' ', $composition);
                        } else {
                            if ($product->isGroupExist($product->category, $product->composition, $parentCategory, $childCategory)) {
                                $composition    = strip_tags($product->composition);
                                $compositions[] = str_replace(['&nbsp;', '/span>'], ' ', $composition);
                            }
                        }
                    }
                }
            }
            if (! isset($compositions)) {
                $compositions   = [];
                $childCategory  = '';
                $parentCategory = '';
            }
            $keyword       = $request->keyword;
            $groupSelected = $request->group;
        } else {
            $keyword        = '';
            $compositions   = [];
            $childCategory  = '';
            $parentCategory = '';
            $groupSelected  = '';
        }
        $selected_categories = $request->category ? $request->category : 1;

        $category_selection = Category::attr(['name' => 'category[]', 'class' => 'form-control select-multiple2', 'id' => 'category_value'])
            ->selected($selected_categories)
            ->renderAsDropdown();
        $hscodes              = SimplyDutyCategory::all();
        $categories           = Category::all();
        $groups               = HsCodeGroup::all();
        $cate                 = HsCodeGroupsCategoriesComposition::groupBy('category_id')->pluck('category_id')->toArray();
        $pendingCategory      = Category::all()->except($cate);
        $pendingCategoryCount = $pendingCategory->count();
        $setting              = HsCodeSetting::first();
        $countries            = SimplyDutyCountry::all();

        return view('products.hscode', compact('keyword', 'compositions', 'childCategory', 'parentCategory', 'category_selection', 'hscodes', 'categories', 'groups', 'groupSelected', 'pendingCategoryCount', 'setting', 'countries'));
    }

    public function saveGroupHsCode(Request $request)
    {
        $name         = $request->name;
        $compositions = $request->compositions;
        $key          = HsCodeSetting::first();
        if ($key == null) {
            return response()->json(['Please Update the Hscode Setting']);
        }
        $api                = $key->key;
        $fromCountry        = $key->from_country;
        $destinationCountry = $key->destination_country;
        if ($api == null || $fromCountry == null || $destinationCountry == null) {
            return response()->json(['Please Update the Hscode Setting']);
        }
        $category   = Category::select('id', 'title')->where('id', $request->category)->first();
        $categoryId = $category->id;

        if ($request->composition) {
            $hscodeSearchString = str_replace(['&gt;', '>'], '', $name . ' ' . $category->title . ' ' . $request->composition);
        } else {
            $hscodeSearchString = str_replace(['&gt;', '>'], '', $name);
        }

        $hscode = HsCode::where('description', $hscodeSearchString)->first();

        if ($hscode != null) {
            return response()->json(['error' => 'HsCode Already exist']);
        }

        $hscodeSearchString = urlencode($hscodeSearchString);

        $searchString = 'https://www.api.simplyduty.com/api/classification/get-hscode?APIKey=' . $api . '&fullDescription=' . $hscodeSearchString . '&originCountry=' . $fromCountry . '&destinationCountry=' . $destinationCountry . '&getduty=false';
        $startTime    = date('Y-m-d H:i:s', LARAVEL_START);
        $ch           = curl_init();

        // set url
        curl_setopt($ch, CURLOPT_URL, $searchString);

        //return the transfer as a string
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);

        // $output contains the output string
        $output   = curl_exec($ch);
        $httpcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        LogRequest::log($startTime, $searchString, 'POST', json_encode([]), json_decode($output), $httpcode, \App\Http\Controllers\ProductController::class, 'saveGroupHsCode');

        // close curl resource to free up system resources
        curl_close($ch);

        $categories = json_decode($output);

        if (! isset($categories->HSCode)) {
            return response()->json(['error' => 'Something is wrong with the API. Please check the balance.']);
        } else {
            if ($categories->HSCode != null) {
                $hscode              = new HsCode();
                $hscode->code        = $categories->HSCode;
                $hscode->description = urldecode($hscodeSearchString);
                $hscode->save();

                if ($request->existing_group != null) {
                    $group = HsCodeGroup::find($request->existing_group);
                } else {
                    $group              = new HsCodeGroup();
                    $group->hs_code_id  = $hscode->id;
                    $group->name        = $name . ' > ' . $category->title;
                    $group->composition = $request->composition;
                    $group->save();
                }

                $id = $group->id;
                if ($request->compositions) {
                    foreach ($compositions as $composition) {
                        $comp                   = new HsCodeGroupsCategoriesComposition();
                        $comp->hs_code_group_id = $id;
                        $comp->category_id      = $categoryId;
                        $comp->composition      = $composition;
                        $comp->save();
                    }
                }
            }
        }

        return response()->json(['Hscode Generated successfully'], 200);
    }

    public function editGroup(Request $request)
    {
        $group              = HsCodeGroup::find($request->id);
        $group->hs_code_id  = $request->hscode;
        $group->name        = $request->name;
        $group->composition = $request->composition;
        $group->save();

        return response()->json(['success' => 'success'], 200);
    }

    public function productTranslation(Request $request)
    {
        $term        = $request->term;
        $language    = $request->language;
        $is_rejected = $request->input('is_rejected', '0');
        $query       = new Product_translation();
        if (! empty($term)) {
            $query = $query->where(function ($q) use ($request) {
                $q->where('title', 'LIKE', '%' . $request->term . '%')
                    ->orWhere('description', 'LIKE', '%' . $request->term . '%');
            });
        }
        if (! empty($language)) {
            $query = $query->where(function ($q) use ($request) {
                $q->Where('locale', 'LIKE', '%' . $request->language . '%');
            });
        }

        if ($request->has('is_rejected')) {
            $query = $query->where(function ($q) use ($is_rejected) {
                $q->Where('is_rejected', $is_rejected);
            });
        }

        $product_translations = $query->orderBy('product_id', 'desc')->paginate(10)->appends(request()->except(['page'])); //catch 2

        $product_translation_history = ProductTranslationHistory::get();

        $languages = TranslationLanguage::get();

        $all_languages = Language::get();

        if ($request->ajax()) {
            return response()->json([
                'tbody' => view('products.translations.product-search', compact('product_translations', 'term', 'language', 'is_rejected'))->with('i', ($request->input('page', 1) - 1) * 5)->render(),
                'links' => (string) $product_translations->render(),
            ], 200);
        }

        return view('products.translations.product-list', compact('product_translations', 'term', 'language', 'languages', 'all_languages', 'product_translation_history'))
            ->with('i', ($request->input('page', 1) - 1) * 5);
    }

    public function translationLanguage(ProductTranslationRequest $request)
    {
        $this->validate($request, [
            'locale' => 'sometimes|nullable|string|max:255',
            'code'   => 'required',
        ]);

        $data = $request->except('_token');
        Language::create($data);

        return response()->json([
            'message' => 'Successfully updated the data',
        ]);
    }

    public function productTranslationRejection(Request $request)
    {
        $product_translation              = Product_translation::find($request->product_translation_id);
        $product_translation->is_rejected = $request->value;
        $product_translation->save();
        $product_translation_history                         = new ProductTranslationHistory;
        $product_translation_history->is_rejected            = $request->value;
        $product_translation_history->user_id                = Auth::user()->id;
        $product_translation_history->product_translation_id = $request->product_translation_id;
        $product_translation_history->save();

        return response()->json([
            'message' => 'Rejected Successfully',
            'value'   => $request->value,
        ]);
    }

    public function viewProductTranslation($id)
    {
        $locales             = Product_translation::groupBy('locale')->pluck('locale');
        $languages           = Language::get();
        $sites               = StoreWebsite::get();
        $product_translation = Product_translation::find($id);

        return view('products.translations.view-or-edit', [
            'product_translation' => $product_translation,
            'locales'             => $locales,
            'sites'               => $sites,
            'languages'           => $languages,
        ]);
    }

    public function getProductTranslationDetails($id, $locale)
    {
        $product_translation = Product_translation::where('product_id', $id)->where('locale', $locale)->first();

        return response()->json([
            'product_translation' => $product_translation,
        ]);
    }

    public function editProductTranslation($id, Request $request)
    {
        Product_translation::where('id', $id)->update(['locale' => $request->language, 'title' => $request->title, 'description' => $request->description, 'site_id' => $request->site_id]);
        ProductTranslationHistory::insert([
            'user_id'                => Auth::user()->id,
            'product_translation_id' => $id,
            'locale'                 => $request->language,
            'title'                  => $request->title,
            'description'            => $request->description,
        ]);

        return response()->json([
            'message' => 'Successfully updated the data',
        ]);
    }

    public function published(Request $request)
    {
        $id      = $request->get('id');
        $website = $request->get('website', []);

        \App\WebsiteProduct::where('product_id', $id)->delete();

        if (! empty($website)) {
            foreach ($website as $web) {
                $website                   = new \App\WebsiteProduct;
                $website->product_id       = $id;
                $website->store_website_id = $web;
                $website->save();
            }
        }

        return response()->json(['code' => 200]);
    }

    public function originalColor($id)
    {
        $product         = Product::find($id);
        $referencesColor = '';
        if (isset($product->scraped_products)) {
            // starting to see that howmany color we going to update
            if (isset($product->scraped_products->properties) && isset($product->scraped_products->properties['colors']) != null) {
                $color = $product->scraped_products->properties['colors'];
                if (is_array($color)) {
                    $referencesColor = implode(' > ', $color);
                } else {
                    $referencesColor = $color;
                }
            }

            // starting to see that howmany color we going to update
            if (isset($product->scraped_products->properties) && isset($product->scraped_products->properties['color']) != null) {
                $color = $product->scraped_products->properties['color'];
                if (is_array($color)) {
                    $referencesColor = implode(' > ', $color);
                } else {
                    $referencesColor = $color;
                }
            }

            $scrapedProductSkuArray = [];

            if (! empty($referencesColor)) {
                $productSupplier = $product->supplier;
                $supplier        = Supplier::where('supplier', $productSupplier)->first();
                if ($supplier && $supplier->scraper) {
                    $scrapedProducts = ScrapedProducts::where('website', $supplier->scraper->scraper_name)->get();
                    foreach ($scrapedProducts as $scrapedProduct) {
                        if (isset($scrapedProduct->properties['color'])) {
                            $products = $scrapedProduct->properties['color'];
                            if (! empty($products)) {
                                $scrapedProductSkuArray[] = $scrapedProduct->sku;
                            }
                        }

                        if (isset($scrapedProduct->properties['colors'])) {
                            $products = $scrapedProduct->properties['colors'];
                            if (! empty($products)) {
                                $scrapedProductSkuArray[] = $scrapedProduct->sku;
                            }
                        }
                    }
                }
            }

            if (isset($product->scraped_products->properties) && isset($product->scraped_products->properties['colors']) != null) {
                return response()->json(['success', $referencesColor, count($scrapedProductSkuArray)]);
            } else {
                return response()->json(['message', 'Color Is Not Present']);
            }
        } else {
            return response()->json(['message', 'Color Is Not Present']);
        }
    }

    public function changeAllColorForAllSupplierProducts(Request $request, $id)
    {
        \App\Jobs\UpdateScrapedColor::dispatch([
            'product_id' => $id,
            'color'      => $request->color,
            'user_id'    => \Auth::user()->id,
        ])->onQueue('supplier_products');

        return response()->json(['success', 'Product color has been sent for the update']);
    }

    public function storeWebsiteDescription(Request $request)
    {
        $websites = $request->store_wesites;
        if (is_array($websites) && $request->product_id != null && $request->description != null) {
            foreach ($websites as $website) {
                $storeWebsitePA = \App\StoreWebsiteProductAttribute::where('product_id', $request->product_id)->where('store_website_id', $website)->first();
                if (! $storeWebsitePA) {
                    $storeWebsitePA                   = new \App\StoreWebsiteProductAttribute;
                    $storeWebsitePA->product_id       = $request->product_id;
                    $storeWebsitePA->store_website_id = $website;
                }
                $storeWebsitePA->store_website_id = $website;
                $storeWebsitePA->description      = $request->description;
                $storeWebsitePA->save();

                return response()->json(['code' => 200, 'data' => [], 'message' => 'Store website description stored successfully']);
            }
        }

        return response()->json(['code' => 500, 'data' => [], 'message' => 'Required field is missing']);
    }

    public function changeAutoPushValue(Request $request)
    {
        if (Setting::get('auto_push_product') == 0) {
            $val = 1;
        } else {
            $val = 0;
        }
        $settings = Setting::set('auto_push_product', $val, 'int');

        return response()->json(['code' => 200, 'data' => $settings, 'message' => 'Status changed']);
    }

    public function pushProduct(Request $request)
    {
        $limit = $request->get('no_of_product', config('constants.no_of_product'));
        // Mode($mode) defines the whether it's a condition check or product push.
        $mode     = $request->get('mode', config('constants.mode'));
        $products = ProductHelper::getProducts(StatusHelper::$finalApproval, $limit);
        \Log::info('Product push star time: ' . date('Y-m-d H:i:s'));
        $no_of_product = count($products);
        foreach ($products as $key => $product) {
            $details                  = [];
            $details['product_index'] = ($key) + 1;
            $details['no_of_product'] = $no_of_product;

            PushProductOnlyJob::dispatch($product, $details)->onQueue('pushproductonly');
        }
        \Log::info('Product push end time: ' . date('Y-m-d H:i:s'));

        if ($mode == 'conditions-check') {
            return response()->json(['code' => 200, 'message' => 'Conditions checked completed successfully!']);
        } elseif ($mode == 'product-push') {
            return response()->json(['code' => 200, 'message' => 'Push product successfully!']);
        }
    }

    public function processProductsConditionsCheck(Request $request)
    {
        $limit = $request->get('no_of_product', config('constants.no_of_product'));
        // Mode($mode) defines the whether it's a condition check or product push.
        $mode = $request->get('mode', config('constants.mode'));
        // Gets all products with final approval status
        $products = ProductHelper::getProducts(StatusHelper::$finalApproval, $limit);

        $no_of_product = count($products);
        foreach ($products as $key => $product) {
            $details                  = [];
            $details['product_index'] = ($key) + 1;
            $details['no_of_product'] = $no_of_product;
            Flow2ConditionCheckProductOnly::dispatch($product, $details)->onQueue('conditioncheckonly');
        }

        if ($mode == 'conditions-check') {
            return response()->json(['code' => 200, 'message' => 'Conditions checked completed successfully!']);
        } elseif ($mode == 'product-push') {
            return response()->json(['code' => 200, 'message' => 'Push product successfully!']);
        }
    }

    /**
     * @return \Illuminate\Http\JsonResponse
     */
    public function pushProductsToMagento(Request $request)
    {
        $mode     = 'product-push';
        $limit    = $request->get('no_of_product', config('constants.no_of_product'));
        $products = ProductHelper::getProducts(StatusHelper::$productConditionsChecked, $limit);
        if ($products->count() == 0) {
            return response()->json(['code' => 500, 'message' => 'No products found!']);
        }

        $no_of_product = count($products);
        foreach ($products as $key => $product) {
            $details                  = [];
            $details['product_index'] = ($key) + 1;
            $details['no_of_product'] = $no_of_product;

            Flow2PushProductOnlyJob::dispatch($product, $details)->onQueue('pushproductflow2only');
        }

        return response()->json(['code' => 200, 'message' => 'Product pushed to magento successfully!']);
    }

    public function pushToMagentoConditions(Request $request)
    {
        $drConditions = PushToMagentoCondition::all();
        if (($request->condition && $request->condition != null) && ($request->magento_description && $request->magento_description != null)) {
            $conditions = PushToMagentoCondition::where('condition', $request->condition)->where('description', 'LIKE', '%' . $request->magento_description . '%')->get();
        } elseif ($request->magento_description && $request->magento_description != null) {
            $conditions = PushToMagentoCondition::where('description', 'LIKE', '%' . $request->magento_description . '%')->get();
        } elseif ($request->condition && $request->condition != null) {
            $conditions = PushToMagentoCondition::where('condition', $request->condition)->get();
        } else {
            $conditions = PushToMagentoCondition::all();
        }

        return view('products.conditions', compact('conditions', 'drConditions'));
    }

    public function updateConditionStatus(Request $request)
    {
        $input = $request->input();
        PushToMagentoCondition::where('id', $input['id'])->update(['status' => $input['status']]);

        return 'Status Updated';
    }

    public function updateConditionUpteamStatus(Request $request)
    {
        $input = $request->input();
        PushToMagentoCondition::where('id', $input['id'])->update(['upteam_status' => $input['upteam_status']]);

        return 'Upteam Status Updated';
    }

    public function getPreListProducts()
    {
        $newProducts = Product::where('status_id', StatusHelper::$finalApproval);
        $newProducts = QueryHelper::approvedListingOrderFinalApproval($newProducts, true);

        $newProducts = $newProducts->where('isUploaded', 0);

        $newProducts = $newProducts->select(DB::raw('products.brand,products.category,products.assigned_to,count(*) as total'))
            ->groupBy('products.brand', 'products.category', 'products.assigned_to')->paginate(50);
        foreach ($newProducts as $product) {
            if ($product->brand) {
                $brand = Brand::find($product->brand);
                if ($brand) {
                    $product->brandName = $brand->name;
                } else {
                    $product->brandName = '';
                }
            } else {
                $product->brandName = '';
            }
            if ($product->category) {
                $category = Category::find($product->category);
                if ($category) {
                    $product->categoryName = $category->title;
                } else {
                    $product->categoryName = '';
                }
            } else {
                $product->categoryName = '';
            }
            if ($product->assigned_to) {
                $product->assignTo = User::find($product->assigned_to)->name;
            } else {
                $product->assignTo = '';
            }
        }
        $users = User::all()->pluck('name', 'id')->toArray();

        return view('products.assign-products', compact('newProducts', 'users'));
    }

    public function assignProduct(Request $request)
    {
        $category    = $request->category;
        $brand       = $request->brand;
        $assigned_to = $request->assigned_to;
        if (! $assigned_to) {
            return response()->json(['message' => 'Select one user'], 500);
        }
        $products = Product::where('products.status_id', StatusHelper::$finalApproval)->where('products.category', $category)->where('products.brand', $brand);

        $products = QueryHelper::approvedListingOrderFinalApproval($products, true);
        $products = $products->where('products.isUploaded', 0);
        $products = $products->select('products.*')->get();

        foreach ($products as $product) {
            $product->update(['assigned_to' => $assigned_to]);
        }

        $data['assign_from']  = Auth::id();
        $data['is_statutory'] = 2;
        $data['task_details'] = 'Final Approval Assignment';
        $data['task_subject'] = 'Final Approval Assignment';
        $data['assign_to']    = $assigned_to;

        $task = Task::create($data);
        if (! empty($task)) {
            $task->users()->attach([$data['assign_to'] => ['type' => User::class]]);
        }

        if ($task->is_statutory != 1) {
            $message = '#' . $task->id . '. ' . $task->task_subject . '. ' . $task->task_details;
        } else {
            $message = $task->task_subject . '. ' . $task->task_details;
        }

        $params = [
            'number'   => null,
            'user_id'  => Auth::id(),
            'approved' => 1,
            'status'   => 2,
            'task_id'  => $task->id,
            'message'  => $message,
        ];
        $user               = User::find($assigned_to);
        $params['erp_user'] = $assigned_to;
        app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($user->phone, $user->whatsapp_number, $params['message']);

        $chat_message = ChatMessage::create($params);

        $myRequest = new Request();
        $myRequest->setMethod('POST');
        $myRequest->request->add(['messageId' => $chat_message->id]);
        app(\App\Http\Controllers\WhatsAppController::class)->approveMessage('task', $myRequest);

        $username = $user->name;

        return response()->json(['message' => 'Successful', 'user' => $username]);
    }

    public function assignProductNoWise(Request $request)
    {
        $no_of_product_assign = $request->get('no_of_product_assign', 0);
        $assigned_to          = $request->assigned_to;
        if (! $assigned_to) {
            return redirect()->back()->withErrors('Select one user');
        }
        $products = Product::where('products.status_id', StatusHelper::$finalApproval);

        $products = QueryHelper::approvedListingOrderFinalApproval($products, true);
        $products = $products->where('products.isUploaded', 0);

        if ($no_of_product_assign > 0) {
            $products = $products->limit($no_of_product_assign);
        } else {
            $products = $products->limit(0);
        }

        $products = $products->select('products.*')->get();

        foreach ($products as $product) {
            $product->update(['assigned_to' => $assigned_to]);
        }

        $data['assign_from']  = Auth::id();
        $data['is_statutory'] = 2;
        $data['task_details'] = 'Final Approval Assignment';
        $data['task_subject'] = 'Final Approval Assignment';
        $data['assign_to']    = $assigned_to;

        $task = Task::create($data);
        if (! empty($task)) {
            $task->users()->attach([$data['assign_to'] => ['type' => User::class]]);
        }

        if ($task->is_statutory != 1) {
            $message = '#' . $task->id . '. ' . $task->task_subject . '. ' . $task->task_details;
        } else {
            $message = $task->task_subject . '. ' . $task->task_details;
        }

        $params = [
            'number'   => null,
            'user_id'  => Auth::id(),
            'approved' => 1,
            'status'   => 2,
            'task_id'  => $task->id,
            'message'  => $message,
        ];

        $user               = User::find($assigned_to);
        $params['erp_user'] = $assigned_to;
        app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($user->phone, $user->whatsapp_number, $params['message']);

        $chat_message = ChatMessage::create($params);

        $myRequest = new Request();
        $myRequest->setMethod('POST');
        $myRequest->request->add(['messageId' => $chat_message->id]);
        app(\App\Http\Controllers\WhatsAppController::class)->approveMessage('task', $myRequest);

        $username = $user->name;

        return redirect()->back()->withSuccess('Product assigned to person successfully');
    }

    public function draftedProducts(Request $request)
    {
        \Log::info('action started');
        $products = Product::where('quick_product', 1)
            ->leftJoin('brands as b', 'b.id', 'products.brand')
            ->leftJoin('categories as c', 'c.id', 'products.category')
            ->select([
                'products.id',
                'products.name as product_name',
                'b.name as brand_name',
                'c.title as category_name',
                'products.supplier',
                'products.status_id',
                'products.created_at',
                'products.supplier_link',
                'products.composition',
                'products.size',
                'products.lmeasurement',
                'products.hmeasurement',
                'products.dmeasurement',
                'products.color',
            ]);

        if ($request->category != null && $request->category != 1) {
            $products = $products->where('products.category', $request->category);
        }

        if ($request->brand_id != null) {
            $products = $products->where('products.brand', $request->brand_id);
        }

        if ($request->supplier_id != null) {
            $products = $products->where('products.supplier', $request->supplier_id);
        }

        if ($request->status_id != null) {
            $products = $products->where('products.status_id', $request->status_id);
        }

        $products = $products->orderby('products.created_at', 'desc')->paginate()->appends(request()->except(['page']));

        \Log::info('Page Displayed here');

        return view('drafted-supplier-product.index', compact('products'));
    }

    public function editDraftedProduct(Request $request)
    {
        $product = Product::where('id', $request->id)->first();

        return view('drafted-supplier-product.edit-modal', ['product' => $product]);
    }

    public function deleteDraftedProducts(Request $request)
    {
        $productIds = $request->products;
        if (! empty($productIds)) {
            $products = \App\Product::whereIn('id', $productIds)->get();
            if (! $products->isEmpty()) {
                foreach ($products as $product) {
                    $product->delete();
                }
            }
        }

        return response()->json(['code' => 200, 'data' => [], 'message' => 'Successfully deleted!']);
    }

    public function editDraftedProducts(Request $request)
    {
        $draftedProduct = Product::where('id', $request->id)->first();

        if ($draftedProduct) {
            $draftedProduct->fill($request->all());
            $draftedProduct->save();

            return response()->json(['code' => 200, 'data' => $draftedProduct, 'message' => 'Successfully edited!']);
        }

        return response()->json(['code' => 500, 'error' => 'Wrong row id!']);
    }

    public function updateApprovedBy(Request $request, $product_id)
    {
        $product = Product::find($product_id);

        if ($product) {
            $product->update([
                'is_approved' => 1,
                'approved_by' => $request->user_id,
            ]);
        }

        return response()->json([
            'code' => 200,
        ]);
    }

    public function createTemplate(Request $request)
    {
        $this->validate($request, [
            'template_no'      => 'required',
            'product_media_id' => 'required',
            'background'       => 'required',
            'text'             => 'required',
        ]);

        $product_media_id           = explode(',', $request->product_media_id);
        $template                   = new \App\ProductTemplate;
        $template->template_no      = $request->template_no;
        $template->text             = $request->text;
        $template->background_color = $request->background;
        $template->template_status  = 'python';

        if ($template->save()) {
            if (! empty($request->get('product_media_id')) && is_array($request->get('product_media_id'))) {
                foreach ($request->get('product_media_id') as $mediaid) {
                    $media = Media::find($mediaid);
                    $template->attachMedia($media, ['template-image-attach']);
                    $template->save();
                    $imagesArray[] = getMediaUrl($media);
                }
            }

            return redirect()->back()->with('success', 'Template has been created successfully');
        }

        return redirect()->back()->with('error', 'Something went wrong, Please try again!');
    }

    /**
     * This funcrtion is use for delete product suggested
     *
     * @param mixed $ids
     *
     * @return JsonResponse
     */
    public function deleteSuggestedProduct(Request $request, $ids = '')
    {
        try {
            $idArr   = explode(',', $request->ids);
            $sugProd = \App\SuggestedProduct::whereIn('id', $idArr)->delete();
            if ($sugProd != 0) {
                return response()->json(['code' => 200, 'message' => 'Successfully Deleted']);
            }

            return response()->json(['code' => 500, 'message' => 'Please select any record']);
        } catch (Exception $e) {
            return response()->json(['code' => 500, 'message' => $e->getMessage()]);
        }
    }

    /**
     * This funcrtion is use for get product suggested log
     *
     * @return JsonResponse
     */
    public function getSuggestedProductLog(Request $request)
    {
        try {
            $sugProd = ProductSuggestedLog::where('parent_id', $request->id)->get();
            if ($sugProd->toArray()) {
                $html = '';
                foreach ($sugProd as $sugProdData) {
                    $html .= '<tr>';
                    $html .= '<td>' . $sugProdData->id . '</td>';
                    $html .= '<td>' . $sugProdData->log . '</td>';
                    $html .= '</tr>';
                }

                return response()->json(['code' => 200, 'data' => $html, 'message' => 'Log listed Successfully']);
            }

            return response()->json(['code' => 500, 'message' => 'Log not found']);
        } catch (Exception $e) {
            return response()->json(['code' => 500, 'message' => $e->getMessage()]);
        }
    }

    public function attachedImageGrid($model_type, $model_id, $status, $assigned_user, Request $request)
    {
        $model_type = 'customer';
        if ($model_type == 'customer') {
            $customerId = $model_id;
        } else {
            $customerId = null;
        }
        if ($request->customer_id) {
            $explode = explode('/', $request->customer_id);
            if (count($explode) > 1) {
                $customerId = $explode[1];
            }
        }

        if ($request->category) {
            try {
                $filtered_category = $request->category;
            } catch (Exception $e) {
                $filtered_category = [];
            }
        } else {
            $filtered_category = [];
        }
        $category_selection = Category::attr(['name' => 'category[]', 'class' => 'form-control select-multiple-cat-list input-lg select-multiple', 'multiple' => true, 'data-placeholder' => 'Select Category..'])
            ->selected($filtered_category)
            ->renderAsDropdown();

        //\DB::enableQueryLog();
        $roletype = $request->input('roletype') ?? 'Sale';
        $term     = $request->input('term');
        if ($request->total_images) {
            $perPageLimit = $request->total_images;
        } else {
            $perPageLimit = $request->get('per_page');
        }

        if (empty($perPageLimit)) {
            $perPageLimit = Setting::get('pagination');
        }
        $suggestedProducts = \App\SuggestedProduct::with('customer')->leftJoin('suggested_product_lists as spl', 'spl.suggested_products_id', 'suggested_products.id');
        $suggestedProducts = $suggestedProducts->leftJoin('products as p', 'spl.product_id', 'p.id');
        $suggestedProducts = $suggestedProducts->leftJoin('customers as c', 'c.id', 'suggested_products.customer_id');
        if ($customerId) {
            $suggestedProducts = $suggestedProducts->where('suggested_products.customer_id', $customerId);
        }

        if ($request->category != null) {
            $suggestedProducts = $suggestedProducts->whereIn('p.category', $request->category);
        }

        if ($request->brand != null) {
            $suggestedProducts = $suggestedProducts->whereIn('p.brand', $request->brand);
        }

        if ($request->platform != null) {
            $suggestedProducts = $suggestedProducts->where('suggested_products.platform', $request->platform);
        }

        if (! empty($term)) {
            $suggestedProducts = $suggestedProducts->where(function ($q) use ($term) {
                $q->orWhere('p.sku', 'LIKE', '%' . $term . '%')->orWhere('p.id', 'LIKE', '%' . $term . '%');
            });
        }

        $loggedInUser        = auth()->user();
        $isInCustomerService = $loggedInUser->isInCustomerService();
        if ($isInCustomerService) {
            $suggestedProducts = $suggestedProducts->where('c.user_id', $loggedInUser->id);
        }

        // $perPageLimit
        $suggestedProducts = $suggestedProducts->select(DB::raw('suggested_products.*, max(suggested_products.created_at) as created_at'))->orderBy('suggested_products.created_at', 'DESC')->groupBy('suggested_products.id')->paginate($perPageLimit);

        foreach ($suggestedProducts as $suggestion) {
            $last_attached = \App\SuggestedProductList::where('suggested_products_id', $suggestion->id)->orderBy('date', 'desc')->first();
            if ($last_attached) {
                $suggestion->last_attached = $last_attached->date;
            } else {
                $suggestion->last_attached = $suggestion->created_at;
            }
            $brandIds = \App\SuggestedProductList::join('products', 'suggested_product_lists.product_id', 'products.id')->where('suggested_product_lists.customer_id', $suggestion->customer_id)->where('suggested_products_id', $suggestion->id)->groupBy('products.brand')->pluck('products.brand');
            if (count($brandIds) > 0) {
                $suggestion->brdNames = Brand::whereIn('id', $brandIds)->get();
            } else {
                $suggestion->brdNames = [];
            }

            $catIds = \App\SuggestedProductList::join('products', 'suggested_product_lists.product_id', 'products.id')->where('suggested_product_lists.customer_id', $suggestion->customer_id)->where('suggested_products_id', $suggestion->id)->groupBy('products.category')->pluck('products.category');
            if (count($catIds) > 0) {
                $suggestion->catNames = Category::whereIn('id', $catIds)->get();
            } else {
                $suggestion->catNames = [];
            }
        }

        $templateArr = \App\Template::all();

        $all_product_ids   = [];
        $model_type        = 'customer';
        $countBrands       = 0;
        $countCategory     = 0;
        $countSuppliers    = 0;
        $categoryArray     = [];
        $from              = '';
        $products_count    = 0;
        $selected_products = [];
        $brand             = $request->brand;
        if ($request->ajax()) {
            $html = view('partials.attached-image-load', [
                'suggestedProducts' => $suggestedProducts,
                'all_product_ids'   => $all_product_ids,
                'brand'             => $brand,
                'selected_products' => $request->selected_products ? json_decode($request->selected_products) : [],
                'model_type'        => $model_type,
                'countBrands'       => $countBrands,
                'countCategory'     => $countCategory,
                'countSuppliers'    => $countSuppliers,
                'customerId'        => $customerId,
                'categoryArray'     => $categoryArray,
            ])->render();
            if (! empty($from) && $from == 'attach-image') {
                return $html;
            }

            $selected_products = $request->selected_products ? json_decode($request->selected_products) : [];

            return view('partials.attached-image-load', compact(
                'suggestedProducts', 'all_product_ids', 'brand', 'selected_products', 'model_type', 'countBrands', 'countCategory', 'countSuppliers', 'customerId', 'categoryArray'));
        }

        $message_body = $request->message ? $request->message : '';
        $sending_time = $request->sending_time ?? '';

        $locations = \App\ProductLocation::pluck('name', 'name');
        $suppliers = Supplier::select(['id', 'supplier'])->whereIn('id', DB::table('product_suppliers')->selectRaw('DISTINCT(`supplier_id`) as suppliers')->pluck('suppliers')->toArray())->get();

        $quick_sell_groups = \App\QuickSellGroup::select('id', 'name')->orderBy('id', 'desc')->get();
        $customers         = \App\Customer::pluck('name', 'id');

        return view('partials.attached-image-grid', compact(
            'suggestedProducts', 'templateArr', 'products_count', 'roletype', 'model_id', 'selected_products', 'model_type', 'status', 'assigned_user', 'category_selection', 'brand', 'filtered_category', 'message_body', 'sending_time', 'locations', 'suppliers', 'all_product_ids', 'quick_sell_groups', 'countBrands', 'countCategory', 'countSuppliers', 'customerId', 'categoryArray', 'term', 'customers'
        ));
    }

    public function crop_rejected_status(Request $request)
    {
        if ($request->status == 'reject') {
            $lastPriorityScrap = Product::orderBy('scrap_priority', 'desc')->first();
            if ($lastPriorityScrap) {
                if ($lastPriorityScrap->scrap_priority) {
                    $lastPriority = $lastPriorityScrap->scrap_priority + 1;
                } else {
                    $lastPriority = 1;
                }
            } else {
                $lastPriority = 1;
            }

            Product::where('id', $request->product_id)->update(['status_id' => StatusHelper::$autoCrop, 'scrap_priority' => $lastPriority]);
            SiteCroppedImages::where('product_id', $request->product_id)->where('website_id', $request->site_id)->delete();
        }
        RejectedImages::updateOrCreate(
            ['website_id' => $request->site_id, 'product_id' => $request->product_id, 'user_id' => auth()->user()->id],
            ['status' => $request->status == 'approve' ? 1 : 0]
        );

        return response()->json(['code' => 200, 'message' => 'Successfully rejected']);
    }

    public function all_crop_rejected_status(Request $request)
    {
        if ($request->status == 'reject') {
            $lastPriorityScrap = Product::orderBy('scrap_priority', 'desc')->first();
            if ($lastPriorityScrap) {
                if ($lastPriorityScrap->scrap_priority) {
                    $lastPriority = $lastPriorityScrap->scrap_priority + 1;
                } else {
                    $lastPriority = 1;
                }
            } else {
                $lastPriority = 1;
            }
            $sites = SiteCroppedImages::where('product_id', $request->product_id)->get();
            foreach ($sites as $site) {
                RejectedImages::updateOrCreate(
                    ['website_id' => $site->website_id, 'product_id' => $request->product_id, 'user_id' => auth()->user()->id],
                    ['status' => $request->status == 'approve' ? 1 : 0]
                );
            }

            Product::where('id', $request->product_id)->update(['status_id' => StatusHelper::$autoCrop, 'scrap_priority' => $lastPriority]);
            SiteCroppedImages::where('product_id', $request->product_id)->delete();
        }

        return response()->json(['code' => 200, 'message' => 'Successfully rejected']);
    }

    public function attachMoreProducts($suggested_products_id)
    {
        $lastSuggestion = \App\SuggestedProduct::where('id', $suggested_products_id)->orderBy('created_at', 'desc')->first();
        $customerId     = $lastSuggestion->customer_id;
        $brands         = [];
        $categories     = [];
        $term           = '';
        $limit          = 10;
        if ($lastSuggestion) {
            if ($lastSuggestion->brands) {
                $brands = json_decode($lastSuggestion->brands);
            }
            if ($lastSuggestion->categories) {
                $categories = json_decode($lastSuggestion->categories);
            }
            $term  = $lastSuggestion->keyword;
            $limit = $lastSuggestion->total;
        }
        $remove_ids = \App\SuggestedProductList::where('suggested_products_id', $suggested_products_id)->pluck('product_id as id');

        $products = (new Product())->newQuery()->latest();

        if (count($brands) > 0) {
            $products = $products->whereIn('brand', $brands);
        }

        if (count($categories) > 0) {
            $category_children = [];

            foreach ($categories as $category) {
                $is_parent = Category::isParent($category);

                if ($is_parent) {
                    $childs = Category::find($category)->childs()->get();

                    foreach ($childs as $child) {
                        $is_parent = Category::isParent($child->id);

                        if ($is_parent) {
                            $children = Category::find($child->id)->childs()->get();

                            foreach ($children as $chili) {
                                array_push($category_children, $chili->id);
                            }
                        } else {
                            array_push($category_children, $child->id);
                        }
                    }

                    array_push($category_children, $category);
                } else {
                    array_push($category_children, $category);
                }
            }

            $products = $products->whereIn('category', $category_children);
        }

        if (trim($term) != '') {
            $products = $products->where(function ($query) use ($term) {
                $query->where('sku', 'LIKE', "%$term%")
                    ->orWhere('id', 'LIKE', "%$term%")
                    ->orWhere('name', 'LIKE', "%$term%")
                    ->orWhere('short_description', 'LIKE', "%$term%");
                if ($term == -1) {
                    $query = $query->orWhere('isApproved', -1);
                }

                $brand_id = \App\Brand::where('name', 'LIKE', "%$term%")->value('id');
                if ($brand_id) {
                    $query = $query->orWhere('brand', 'LIKE', "%$brand_id%");
                }

                $category_id = $category = Category::where('title', 'LIKE', "%$term%")->value('id');
                if ($category_id) {
                    $query = $query->orWhere('category', $category_id);
                }
            });
        }
        if (count($remove_ids) > 0) {
            $products = $products->whereNotIn('products.id', $remove_ids);
        }

        // select fields..
        $products = $products->select(['products.id', 'name', 'short_description', 'color', 'sku', 'products.category', 'products.size', 'price_eur_special', 'price_inr_special', 'supplier', 'purchase_status', 'products.created_at']);

        $products = $products->paginate($limit);

        if (count($products) > 0) {
            $data_to_insert = [];
            foreach ($products as $product) {
                $exists = \App\SuggestedProductList::where('suggested_products_id', $suggested_products_id)->where('customer_id', $customerId)->where('product_id', $product->id)->where('date', date('Y-m-d'))->first();
                if (! $exists) {
                    $pr = Product::find($product->id);
                    if ($pr->hasMedia(config('constants.attach_image_tag'))) {
                        $data_to_insert[] = [
                            'suggested_products_id' => $suggested_products_id,
                            'customer_id'           => $customerId,
                            'product_id'            => $product->id,
                            'date'                  => date('Y-m-d'),
                        ];
                    }
                }
            }
            if (count($data_to_insert) > 0) {
                \App\SuggestedProductList::insert($data_to_insert);
            }
        }
        $url = '/attached-images-grid/customer?customer_id=' . $customerId;

        return response()->json(['message' => 'Successfull', 'url' => $url, 'code' => 200]);
    }

    public function suggestedProducts($model_type, $model_id, $status, $assigned_user, Request $request)
    {
        $model_type = 'customer';
        $customerId = null;
        if ($request->customer_id) {
            $explode = explode('/', $request->customer_id);
            if (count($explode) > 1) {
                $customerId = $explode[1];
            }
        }
        $roletype = $request->input('roletype') ?? 'Sale';
        $term     = $request->input('term');
        if ($request->total_images) {
            $perPageLimit = $request->total_images;
        } else {
            $perPageLimit = $request->get('per_page');
        }
        if (empty($perPageLimit)) {
            $perPageLimit = Setting::get('pagination');
        }
        $suggestedProducts = \App\SuggestedProduct::join('suggested_product_lists', 'suggested_products.customer_id', 'suggested_product_lists.customer_id')->where('suggested_product_lists.chat_message_id', '!=', null);
        if ($customerId) {
            $suggestedProducts = $suggestedProducts->where('suggested_products.customer_id', $customerId);
        }

        $suggestedProducts = $suggestedProducts->select(DB::raw('suggested_products.*, suggested_products.created_at as created_at'))->orderBy('created_at', 'DESC')->groupBy('suggested_products.id')->paginate($perPageLimit);

        foreach ($suggestedProducts as $suggestion) {
            $suggestion->last_attached = \App\SuggestedProduct::where('customer_id', $suggestion->customer_id)->orderBy('created_at', 'desc')->first()->created_at;

            $brandIds = \App\SuggestedProductList::join('products', 'suggested_product_lists.product_id', 'products.id')->where('suggested_product_lists.customer_id', $suggestion->customer_id)->where('suggested_products_id', $suggestion->id)->groupBy('products.brand')->pluck('products.brand');
            if (count($brandIds) > 0) {
                $suggestion->brdNames = Brand::whereIn('id', $brandIds)->get();
            } else {
                $suggestion->brdNames = [];
            }

            $catIds = \App\SuggestedProductList::join('products', 'suggested_product_lists.product_id', 'products.id')->where('suggested_product_lists.customer_id', $suggestion->customer_id)->where('suggested_products_id', $suggestion->id)->groupBy('products.category')->pluck('products.category');
            if (count($catIds) > 0) {
                $suggestion->catNames = Category::whereIn('id', $catIds)->get();
            } else {
                $suggestion->catNames = [];
            }
        }

        if ($request->category) {
            try {
                $filtered_category = $request->category;
            } catch (Exception $e) {
                $filtered_category = [1];
            }
        } else {
            $filtered_category = [1];
        }

        $category_selection = Category::attr(['name' => 'category[]', 'class' => 'form-control select-multiple-cat-list input-lg select-multiple', 'multiple' => true, 'data-placeholder' => 'Select Category..'])
            ->selected($filtered_category)
            ->renderAsDropdown();

        $all_product_ids   = [];
        $model_type        = 'customer';
        $countBrands       = 0;
        $countCategory     = 0;
        $countSuppliers    = 0;
        $categoryArray     = [];
        $from              = '';
        $products_count    = 0;
        $selected_products = [];
        $brand             = $request->brand;
        if ($request->ajax()) {
            $html = view('partials.suggested-image-load', [
                'suggestedProducts' => $suggestedProducts,
                'all_product_ids'   => $all_product_ids,
                'selected_products' => $request->selected_products ? json_decode($request->selected_products) : [],
                'model_type'        => $model_type,
                'countBrands'       => $countBrands,
                'countCategory'     => $countCategory,
                'countSuppliers'    => $countSuppliers,
                'customerId'        => $customerId,
                'categoryArray'     => $categoryArray,
                'brand'             => $brand,
            ])->render();

            if (! empty($from) && $from == 'attach-image') {
                return $html;
            }

            $selected_products = $request->selected_products ? json_decode($request->selected_products) : [];

            return view('partials.suggested-image-load', compact(
                'suggestedProducts', 'all_product_ids', 'selected_products', 'model_type', 'countBrands', 'countCategory', 'countSuppliers', 'customerId', 'categoryArray', 'brand'
            ));
        }

        $message_body = $request->message ? $request->message : '';
        $sending_time = $request->sending_time ?? '';

        $locations = \App\ProductLocation::pluck('name', 'name');
        $suppliers = Supplier::select(['id', 'supplier'])->whereIn('id', DB::table('product_suppliers')->selectRaw('DISTINCT(`supplier_id`) as suppliers')->pluck('suppliers')->toArray())->get();

        $quick_sell_groups = \App\QuickSellGroup::select('id', 'name')->orderBy('id', 'desc')->get();

        $customers = \App\Customer::pluck('name', 'id');

        return view('partials.suggested-image-grid', compact(
            'suggestedProducts', 'products_count', 'roletype', 'model_id', 'selected_products', 'model_type', 'status', 'assigned_user', 'category_selection', 'brand', 'filtered_category', 'message_body', 'sending_time', 'locations', 'suppliers', 'all_product_ids', 'quick_sell_groups', 'countBrands', 'countCategory', 'countSuppliers', 'customerId', 'categoryArray', 'term', 'customers'
        ));
    }

    public function removeProducts($suggested_products_id, Request $request)
    {
        $products = json_decode($request->products, true);
        foreach ($products as $product_list_id) {
            $suggested = \App\SuggestedProductList::find($product_list_id);
            if ($suggested) {
                if ($suggested->chat_message_id) {
                    $suggested->remove_attachment = 1;
                    $suggested->save();
                } else {
                    $suggested->delete();
                }
            }
        }
        $remains = \App\SuggestedProductList::where('suggested_products_id', $suggested_products_id)->count();
        if (! $remains) {
            \App\SuggestedProduct::where('id', $suggested_products_id)->delete();
        }

        return response()->json(['code' => 200, 'message' => 'Successfull']);
    }

    public function removeSingleProduct($customer_id, Request $request)
    {
        $suggested = \App\SuggestedProductList::find($request->product_id);
        if ($suggested) {
            if ($suggested->chat_message_id) {
                $suggested->remove_attachment = 1;
                $suggested->save();
            } else {
                $suggested->delete();

                $remains = \App\SuggestedProductList::where('customer_id', $customer_id)->count();
                if (! $remains) {
                    \App\SuggestedProduct::where('customer_id', $customer_id)->delete();
                }
            }
        }

        return response()->json(['code' => 200, 'message' => 'Successfull']);
    }

    public function forwardProducts(Request $request)
    {
        $customerId = 0;
        if ($request->customer_id) {
            $explode = explode('/', $request->customer_id);
            if (count($explode) > 1) {
                $customerId = $explode[1];
            }
        }

        $forward_suggestedproductid = $request->forward_suggestedproductid;

        if (! $customerId) {
            $msg = ' Customer not found';

            return response()->json(['code' => 500, 'message' => $msg]);
        }

        $suggestedProducts = false;
        if ($forward_suggestedproductid) {
            $suggestedProducts = \App\SuggestedProduct::where('customer_id', $customerId)->where('id', $forward_suggestedproductid)->orderBy('created_at', 'desc')->first();
        }

        $products = json_decode($request->products, true);
        $total    = count($products);

        if ($suggestedProducts) {
            $suggestedProducts->touch();
            $new_suggestedproductid = $suggestedProducts->id;
        } else {
            $suggestedProducts              = new \App\SuggestedProduct;
            $suggestedProducts->customer_id = $customerId;
            $suggestedProducts->total       = $total;
            $suggestedProducts->save();
            $new_suggestedproductid = $suggestedProducts->id;
        }

        $listIds        = json_decode($request->products, true);
        $data_to_insert = [];
        $inserted       = 0;

        if (! empty($listIds) && is_array($listIds)) {
            foreach ($listIds as $listedImage) {
                $productList  = \App\SuggestedProductList::find($listedImage);
                $product      = Product::find($productList->product_id);
                $imageDetails = $product->getMedia(config('constants.attach_image_tag'))->first();
                $image_key    = $imageDetails->getKey();
                $media        = Media::find($image_key);
                if ($media) {
                    $mediable = \App\Mediables::where('media_id', $media->id)->where('mediable_type', \App\Product::class)->first();
                    if ($mediable) {
                        $exists = \App\SuggestedProductList::where('suggested_products_id', $new_suggestedproductid)->where('customer_id', $customerId)->where('product_id', $mediable->mediable_id)->where('date', date('Y-m-d'))->first();
                        if (! $exists) {
                            $pr = Product::find($mediable->mediable_id);
                            if ($pr->hasMedia(config('constants.attach_image_tag'))) {
                                $data_to_insert[] = [
                                    'suggested_products_id' => $new_suggestedproductid,
                                    'customer_id'           => $customerId,
                                    'product_id'            => $mediable->mediable_id,
                                    'date'                  => date('Y-m-d'),
                                ];
                            }
                        }
                    }
                }
            }

            $inserted = count($data_to_insert);
            if ($inserted > 0) {
                \App\SuggestedProductList::insert($data_to_insert);
            }

            if ($request->type == 'forward') {
                $data['_token']          = $request->_token;
                $data['send_pdf']        = 0;
                $data['pdf_file_name']   = '';
                $data['images']          = $request->products;
                $data['image']           = null;
                $data['screenshot_path'] = null;
                $data['message']         = null;
                $data['customer_id']     = $customerId;
                $data['status']          = 2;
                $data['type']            = 'customer-attach';
                \App\Jobs\AttachImagesSend::dispatch($data)->onQueue('customer_message');
            }
        }
        $msg = $inserted . ' Products added successfully';

        return response()->json(['code' => 200, 'message' => $msg]);
    }

    public function resendProducts($suggestedproductid, Request $request)
    {
        $suggestedProducts = \App\SuggestedProduct::where('id', $suggestedproductid)->orderBy('created_at', 'desc')->first();
        $customer_id       = $suggestedProducts->customer_id;
        $products          = json_decode($request->products, true);
        $suggestedProducts->touch();

        $data['_token']          = $request->_token;
        $data['send_pdf']        = 0;
        $data['pdf_file_name']   = '';
        $data['images']          = $request->products;
        $data['image']           = null;
        $data['screenshot_path'] = null;
        $data['message']         = null;
        $data['customer_id']     = $customer_id;
        $data['status']          = 2;
        $data['type']            = 'customer-attach';
        \App\Jobs\AttachImagesSend::dispatch($data)->onQueue('customer_message');
        $msg = ' Images Resend successfully';

        return response()->json(['code' => 200, 'message' => $msg]);
    }

    public function getCustomerProducts($type, $suggested_products_id, $customer_id, Request $request)
    {
        $term = null;
        //$suggested_products_id=3;
        $suggestedProductsLists = \App\SuggestedProductList::with('getMedia')->where('suggested_products_id', $suggested_products_id)->where('customer_id', $customer_id)->where('remove_attachment', 0)
            ->orderBy('date', 'desc')->whereNotNull('media_id')->get();

        if ($type == 'attach') {
            $productsLists = \App\SuggestedProductList::where('suggested_products_id', $suggested_products_id)->where('customer_id', $customer_id)->whereNull('media_id')->where('remove_attachment', 0)
                ->select('suggested_product_lists.*')->orderBy('date', 'desc')->get()->unique('date');
        } else {
            $productsLists = \App\SuggestedProductList::where('customer_id', $customer_id)->whereNull('media_id')->where('chat_message_id', '!=', null)
                ->select('suggested_product_lists.*')->orderBy('date', 'desc')->get()->unique('date');
        }
        $customer = \App\Customer::find($customer_id);

        foreach ($productsLists as $suggestion) {
            if ($type == 'attach') {
                $products = \App\SuggestedProductList::join('products', 'suggested_product_lists.product_id', 'products.id')
                    ->where('suggested_product_lists.customer_id', $customer_id)
                    ->where('suggested_product_lists.suggested_products_id', $suggested_products_id)
                    ->where('remove_attachment', 0)
                    ->where('suggested_product_lists.date', $suggestion->date);
            } else {
                $products = \App\SuggestedProductList::join('products', 'suggested_product_lists.product_id', 'products.id')
                    ->where('suggested_product_lists.customer_id', $customer_id)
                    ->where('suggested_product_lists.suggested_products_id', $suggested_products_id)
                    ->where('chat_message_id', '!=', null)
                    ->where('suggested_product_lists.date', $suggestion->date);
            }

            if (isset($request->brand[0])) {
                if ($request->brand[0] != null) {
                    $products = $products->whereIn('products.brand', $request->brand);
                }
            }

            if (isset($request->category[0])) {
                if ($request->category[0] != null && $request->category[0] != 1) {
                    $category_children = [];

                    foreach ($request->category as $category) {
                        $is_parent = Category::isParent($category);

                        if ($is_parent) {
                            $childs = Category::find($category)->childs()->get();

                            foreach ($childs as $child) {
                                $is_parent = Category::isParent($child->id);

                                if ($is_parent) {
                                    $children = Category::find($child->id)->childs()->get();

                                    foreach ($children as $chili) {
                                        array_push($category_children, $chili->id);
                                    }
                                } else {
                                    array_push($category_children, $child->id);
                                }
                            }
                        } else {
                            array_push($category_children, $category);
                        }
                    }
                    $products = $products->whereIn('category', $category_children);
                }
            }

            if (trim($term) != '') {
                $products = $products->where(function ($query) use ($term) {
                    $query->where('sku', 'LIKE', "%$term%")
                        ->orWhere('products.id', 'LIKE', "%$term%")
                        ->orWhere('name', 'LIKE', "%$term%")
                        ->orWhere('short_description', 'LIKE', "%$term%");
                    if ($term == -1) {
                        $query = $query->orWhere('isApproved', -1);
                    }

                    $brand_id = \App\Brand::where('name', 'LIKE', "%$term%")->value('id');
                    if ($brand_id) {
                        $query = $query->orWhere('brand', 'LIKE', "%$brand_id%");
                    }

                    $category_id = $category = Category::where('title', 'LIKE', "%$term%")->value('id');
                    if ($category_id) {
                        $query = $query->orWhere('category', $category_id);
                    }
                });
            }
            $suggestion->products = $products->select('products.*', 'suggested_product_lists.created_at as sort', 'suggested_product_lists.id as suggested_product_list_id')->orderBy('sort')->get();
        }
        $selected_products = [];
        $model_type        = 'customer';
        if ($type == 'attach') {
            return view('partials.attached-image-products', compact('productsLists', 'customer_id', 'selected_products', 'model_type', 'suggested_products_id', 'customer', 'suggestedProductsLists'));
        } else {
            return view('partials.suggested-image-products', compact('productsLists', 'customer_id', 'selected_products', 'model_type', 'suggested_products_id', 'customer', 'suggestedProductsLists'));
        }
    }

    public function addDraftProductsToQuickSell(Request $request)
    {
        $post = $request->all();

        $group = \App\QuickSellGroup::orderBy('id', 'desc')->first();
        if ($group != null) {
            $group_create        = new \App\QuickSellGroup();
            $incrementId         = ($group->group + 1);
            $group_create->group = $incrementId;
            $group_create->name  = $post['groupName'];
            $group_create->save();
            $group_id = $group_create->group;
        } else {
            $group        = new \App\QuickSellGroup();
            $group->group = 1;
            $group->name  = $post['groupName'];
            $group->save();
            $group_id = $group->group;
        }
        foreach ($request->products as $id) {
            $group                     = new \App\ProductQuicksellGroup();
            $group->product_id         = $id;
            $group->quicksell_group_id = $group_id;
            $group->save();
        }
        $msg = 'Products are added into group successfully';

        return response()->json(['code' => 200, 'message' => $msg]);
    }

    public function test(Request $request)
    {
        $product = Product::where('id', $request->productid)->first();
        if ($product !== null) {
            $image = $product->getMedia(config('constants.attach_image_tag'))->first();
            $data  = [
                'title'       => $product->name,
                'url'         => getMediaUrl($image),
                'amount'      => $product->price,
                'description' => $product->short_description,
            ];
        } else {
            $data = [
                'status' => false,

            ];
        }

        return response()->json($data);
    }

    public function add_product_def_cust($product_id, Request $request)
    {
        $product = Product::find($product_id);

        $def_cust_id = config('env.DEFAULT_CUST_ID');

        $customers = \App\Customer::find($def_cust_id);

        $statement = \DB::select("SHOW TABLE STATUS LIKE 'orders'");
        $nextId    = 0;
        if (! empty($statement)) {
            $nextId = $statement[0]->Auto_increment;
        }

        $order_id = 'OFF-' . date('Ym') . '-' . $nextId;

        $order_data = [
            'customer_id' => $def_cust_id,
            'order_id'    => $order_id,
            'order_date'  => date('Y-m-d'),
            'client_name' => $customers->name,
        ];
        $order = Order::create($order_data);

        $order_id = $order->id;

        $orderproduct_data = [
            'order_id'      => $order_id,
            'sku'           => $product->sku,
            'product_id'    => $product->id,
            'product_price' => $product->price,
        ];

        $order_products = OrderProduct::create($orderproduct_data);

        return response()->json(['code' => 200, 'message' => 'Purchase Products Added successfully']);
    }

    public function sendLeadPrice(Request $request)
    {
        if (empty($request->customer_id) && empty($request->product_id)) {
            return response()->json(['code' => 500, 'message' => 'Please check product id and customer id exist']);
        }

        $customer = \App\Customer::find($request->customer_id);

        if ($customer && ! empty($request->product_id)) {
            app(\App\Http\Controllers\CustomerController::class)->dispatchBroadSendPrice($customer, array_unique([$request->product_id]), true);
        }

        return response()->json(['code' => 200, 'data' => [], 'message' => 'Lead price created']);
    }

    public function getWebsites(Request $request)
    {
        $productId = $request->get('product_id');
        if ($productId > 0) {
            $websites     = \App\Helpers\ProductHelper::getStoreWebsiteName($productId);
            $websitesList = \App\StoreWebsite::whereIn('id', $websites)->get();
            if (! $websitesList->isEmpty()) {
                return response()->json(['code' => 200, 'data' => $websitesList]);
            } else {
                return response()->json(['code' => 200, 'data' => []]);
            }
        } else {
            return response()->json(['code' => 200, 'data' => []]);
        }
    }

    public function getTranslationProduct(Request $request, $id)
    {
        $translation = \App\Product_translation::where('product_id', $id)->get();

        return view('products.partials.translation-product', compact('translation'));
    }

    public function changeimageorder(Request $request)
    {
        if (! empty($request->mid) && ! empty($request->pid) && ! empty($request->val)) {
            \App\Mediables::where('mediable_type', \App\Product::class)->where('mediable_id', $request->pid)->where('media_id', $request->mid)->update(['order' => $request->val]);

            return response()->json(['code' => 200, 'data' => [], 'message' => 'order update successfully']);
        } else {
            return response()->json(['code' => 0, 'data' => [], 'message' => 'error']);
        }
    }

    public function pushproductlist(Request $request)
    {
        $products = \App\StoreWebsiteProduct::join('products', 'store_website_products.product_id', 'products.id');
        $products->join('store_websites', 'store_website_products.store_website_id', 'store_websites.id');
        $products->leftJoin('categories', 'products.category', 'categories.id');
        $products->leftJoin('brands', 'products.brand', 'brands.id');
        $products->select('store_website_products.*', 'products.name as product_name', 'store_websites.title as store_website_name', 'store_websites.magento_url as store_website_url', 'categories.title as category', 'brands.name as brand');
        if ($request->website != '') {
            $products->where('store_website_id', $request->website);
        }
        if ($request->category != '') {
            $products->where('products.category', $request->category);
        }
        if ($request->brand != '') {
            $products->where('products.brand', $request->brand);
        }
        $products->orderBy('created_at', 'desc');
        $products     = $products->paginate(Setting::get('pagination'));
        $websiteList  = \App\StoreWebsite::get();
        $categoryList = \App\Category::all();
        $brandList    = \App\Brand::get();

        return view('products.pushproductlist', compact('products', 'categoryList', 'brandList', 'websiteList'))
            ->with('i', (request()->input('page', 1) - 1) * 10);
    }

    public function changeCategory(Request $request)
    {
        $product = \App\Product::find($request->get('product_id'));
        if ($product) {
            $product->category = $request->category_id;
            $product->save();

            return response()->json(['code' => 200, 'message' => 'category updated successfully']);
        } else {
            return response()->json(['code' => 500, 'message' => 'category is unable to update']);
        }
    }

    public function approvedScrapperImages(Request $request, $pageType = '')
    {
        $all_store_websites = StoreWebsite::where('website_source', 'magento')->pluck('title', 'id')->toArray();

        $images = new scraperImags();
        if (! empty($request->store_website_id)) {
            $images = $images->whereIn('store_website', $request->store_website_id);
        }

        $checking = 0;
        if (! empty($request->si_status)) {
            if ($request->si_status == 1) {
                $images = $images->where('si_status', 1);
            } elseif ($request->si_status == 2) {
                $images = $images->where('si_status', 2);
            } elseif ($request->si_status == 3) {
                $images = $images->where('si_status', 3);
            } elseif ($request->si_status == 4) {
                $images = $images->where('manually_approve_flag', 1);
            } else {
                $images   = $images->where('si_status', 1);
                $checking = 1;
            }
        } else {
            $images   = $images->where('si_status', 1);
            $checking = 1;
        }

        if (! empty($request->url)) {
            $images = $images->where(function ($query) use ($term) {
                return $query->orWhere('url', 'like', '%' . $term . '%');
            });
        }
        $images = $images->orderBy('id', 'DESC');
        $images = $images->paginate(60);

        if ($request->ajax()) {
            if ($checking == 1) {
                if (! empty($images[0]->id)) {
                    \App\scraperImags::where('id', '>', $images[0]->id)->where('si_status', 1)->where('manually_approve_flag', 0)->update(['si_status' => 2]);
                }
            }

            $viewpath = 'products.scrapper_listing_image_ajax';

            return view($viewpath, [
                'checking'       => $checking,
                'products'       => $images,
                'products_count' => $images->total(),
            ]);
        }

        $viewpath = 'products.scrapper_listing';

        return view($viewpath, [
            'checking'           => $checking,
            'products'           => $images,
            'all_store_websites' => $all_store_websites,
            'products_count'     => $images->total(),
        ]);
    }

    public function getProductSupplierList(Request $request)
    {
        $datas = Product::with('suppliers_name')->select('id', 'supplier')->where('id', $request->product_id)->first();

        $suppliers = [];
        $supplier  = '';
        if (! empty($datas)) {
            if (! empty($datas['suppliers_name'])) {
                $suppliers = $datas['suppliers_name'];
            }

            if (! empty($datas['supplier'])) {
                $supplier = $datas['supplier'];
            }
        }

        return response()->json([
            'status'      => true,
            'data'        => $suppliers,
            'supplier'    => $supplier,
            'message'     => 'History get successfully',
            'status_name' => 'success',
        ], 200);
    }

    public function approvedScrapperImagesCompare(Request $request, $pageType = '', $id = '')
    {
        if (! empty($id)) {
            $image = scraperImags::find($id);

            if (! empty($image)) {
                $images = new scraperImags();
                $images = $images->where('url', $image->url);

                $images = $images->orderBy('id', 'DESC');
                $images = $images->paginate(60);

                if ($request->ajax()) {
                    $viewpath = 'products.scrapper_listing_image_ajax_compare';

                    return view($viewpath, [
                        'products'       => $images,
                        'products_count' => $images->total(),
                    ]);
                }

                $viewpath = 'products.scrapper_listing_compare';

                return view($viewpath, [
                    'products'       => $images,
                    'products_count' => $images->total(),
                ]);
            }
        }
    }

    public function truncateScrapperImagesMedia(Request $request)
    {
        $scrapperImages = scraperImags::pluck('img_url');

        if (! empty($scrapperImages)) {
            foreach ($scrapperImages as $key => $value) {
                $path = public_path() . '/scrappersImages/';
                if (file_exists($path . $value)) {
                    unlink($path . $value);
                }
            }
        }

        DB::statement('TRUNCATE TABLE scraper_imags');

        return response()->json([
            'status'      => true,
            'message'     => ' Your selected batabase tables has been truncate successfully',
            'status_name' => 'success',
        ], 200);
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/ProductCropperController.php 
Content: <?php

namespace App\Http\Controllers;

use App\User;
use App\Image;
use App\Sizes;
use App\Stage;
use App\Product;
use App\Setting;
use App\Category;
use Carbon\Carbon;
use App\CropAmends;
use App\ProductStatus;
use App\ListingHistory;
use Plank\Mediable\Media;
use App\Helpers\QueryHelper;
use App\UserProductFeedback;
use Illuminate\Http\Request;
use App\Helpers\StatusHelper;
use App\CroppedImageReference;
use Illuminate\Support\Facades\DB;
use Illuminate\Contracts\Auth\Guard;
use Illuminate\Support\Facades\Auth;
use Plank\Mediable\Facades\MediaUploader as MediaUploader;

class ProductCropperController extends Controller
{
    public function __construct()
    {
        $this->middleware('auth');
    }

    public function index(Stage $stage)
    {
        $products = Product::latest()
            ->where('stock', '>=', 1)
            ->where('stage', '>=', $stage->get('Supervisor'))
            ->whereNull('dnf')
            ->withMedia(config('constants.media_tags'))
            ->select(['id', 'sku', 'size', 'price_inr_special', 'brand', 'supplier', 'isApproved', 'stage', 'status', 'is_scraped', 'created_at'])
            ->paginate(Setting::get('pagination'));

        $roletype = 'ImageCropper';

        $category_selection = Category::attr(['name' => 'category[]', 'class' => 'form-control select-multiple'])
            ->selected(1)
            ->renderAsDropdown();

        return view('partials.grid', compact('products', 'roletype', 'category_selection'))
            ->with('i', (request()->input('page', 1) - 1) * 10);
    }

    public function edit(Sizes $sizes, Product $productimagecropper)
    {
        if ($productimagecropper->isUploaded == 1) {
            return redirect(route('products.show', $productimagecropper->id));
        }

        $data = [];

        $data['dnf']               = $productimagecropper->dnf;
        $data['id']                = $productimagecropper->id;
        $data['name']              = $productimagecropper->name;
        $data['short_description'] = $productimagecropper->short_description;
        $data['sku']               = $productimagecropper->sku;
        $data['description_link']  = $productimagecropper->description_link;
        $data['location']          = $productimagecropper->location;
        $data['product_link']      = $productimagecropper->product_link;

        $data['measurement_size_type'] = $productimagecropper->measurement_size_type;
        $data['lmeasurement']          = $productimagecropper->lmeasurement;
        $data['hmeasurement']          = $productimagecropper->hmeasurement;
        $data['dmeasurement']          = $productimagecropper->dmeasurement;

        $data['size_value']  = $productimagecropper->size_value;
        $data['sizes_array'] = $sizes->all();

        $data['size'] = $productimagecropper->size;

        $data['composition'] = $productimagecropper->composition;
        $data['made_in']     = $productimagecropper->made_in;
        $data['brand']       = $productimagecropper->brand;
        $data['color']       = $productimagecropper->color;
        $data['price']       = $productimagecropper->price;

        $data['isApproved']    = $productimagecropper->isApproved;
        $data['isUploaded']    = $productimagecropper->isUploaded;
        $data['isFinal']       = $productimagecropper->isFinal;
        $data['rejected_note'] = $productimagecropper->rejected_note;

        $data['images'] = $productimagecropper->getMedia(config('constants.media_tags'));

        $data['category'] = Category::attr(['name' => 'category', 'class' => 'form-control', 'disabled' => 'disabled'])
            ->selected($productimagecropper->category)
            ->renderAsDropdown();

        return view('imagecropper.edit', $data);
    }

    public function update(Request $request, Guard $auth, Product $productimagecropper, Stage $stage)
    {
        $productimagecropper->stage = $stage->get('ImageCropper');

        $validations = [];

        //:-( ahead
        $check_image = 0;
        $images      = $productimagecropper->getMedia(config('constants.media_tags'));
        $images_no   = count($images);

        for ($i = 0; $i < 5; $i++) {
            if ($request->input('oldImage' . $i) != 0) {
                $validations['image.' . $i] = 'mimes:jpeg,bmp,png,jpg';

                if (empty($request->file('image.' . $i))) {
                    $check_image++;
                }
            }
        }

        $messages = [];
        if ($check_image == $images_no) {
            $validations['image']       = 'required';
            $messages['image.required'] = 'Atleast on image is required. Last image can not be removed';
        }
        //:-( over

        $this->validate($request, $validations);

        self::replaceImages($request, $productimagecropper);

        $productimagecropper->last_imagecropper = Auth::id();
        $productimagecropper->save();

        NotificaitonContoller::store('has searched', ['Listers'], $productimagecropper->id);
        ActivityConroller::create($productimagecropper->id, 'imagecropper', 'create');

        return redirect()->route('productimagecropper.index')
            ->with('success', 'ImageCropper updated successfully.');
    }

    public function replaceImages($request, $productattribute)
    {
        $delete_array = [];
        for ($i = 0; $i < 5; $i++) {
            if ($request->input('oldImage' . $i) != 0) {
                $delete_array[] = $request->input('oldImage' . $i);
            }

            if (! empty($request->file('image.' . $i))) {
                $media = MediaUploader::fromSource($request->file('image.' . $i))
                    ->toDirectory('product/' . floor($productattribute->id / config('constants.image_per_folder')))
                    ->upload();
                $productattribute->attachMedia($media, config('constants.media_tags'));
            }
        }

        $results = Media::whereIn('id', $delete_array)->get();
        $results->each(function ($media) {
            Image::trashImage($media->basename);
            $media->delete();
        });
    }

    public static function rejectedProductCountByUser()
    {
        return Product::where('last_imagecropper', Auth::id())
            ->where('isApproved', -1)
            ->count();
    }

    public function getListOfImagesToBeVerified(Request $request)
    {
        $products = Product::where('status_id', StatusHelper::$cropApproval);
        $products = QueryHelper::approvedListingOrder($products);
        $products = $products->paginate(24);

        $totalApproved  = 0;
        $totalRejected  = 0;
        $totalSequenced = 0;

        if ($request->get('date') != '') {
            $date = $request->get('date');

            if (Auth::user()->hasRole('Crop Approval')) {
                $stats = UserProductFeedback::where('user_id')->whereIn('action', [
                    'CROP_APPROVAL_REJECTED',
                    'CROP_SEQUENCED_REJECTED',
                ])->get();
                $totalApproved  = Product::where('crop_approved_by', Auth::id())->where('crop_approved_at', 'LIKE', "%$date%")->count();
                $totalRejected  = Product::where('crop_rejected_by', Auth::id())->where('crop_rejected_at', 'LIKE', "%$date%")->count();
                $totalSequenced = Product::where('crop_rejected_by', Auth::id())->where('crop_rejected_at', 'LIKE', "%$date%")->count();
            } else {
                $stats = DB::table('products')
                    ->selectRaw('SUM(is_image_processed) as cropped, COUNT(*) AS total, SUM(is_crop_approved) as approved, SUM(is_crop_rejected) AS rejected')
                    ->where('is_scraped', 1)
                    ->where('is_without_image', 0)
                    ->where('stock', '>=', (int) $request->stock)
                    ->first();
            }
        } else {
            if (Auth::user()->hasRole('Crop Approval')) {
                $stats = UserProductFeedback::where('user_id')->whereIn('action', [
                    'CROP_APPROVAL_REJECTED',
                    'CROP_SEQUENCED_REJECTED',
                ])->get();

                $totalApproved = Product::where('crop_approved_by', Auth::id());
                $totalApproved = QueryHelper::approvedListingOrder($totalApproved);
                $totalApproved = $totalApproved->count();

                $totalRejected = Product::where('crop_rejected_by', Auth::id());
                $totalRejected = QueryHelper::approvedListingOrder($totalRejected);
                $totalRejected = $totalRejected->count();

                $totalSequenced = Product::where('crop_rejected_by', Auth::id());
                $totalSequenced = QueryHelper::approvedListingOrder($totalSequenced);
                $totalSequenced = $totalSequenced->count();
            } else {
                $stats           = new \stdClass();
                $stats->cropped  = StatusHelper::getCroppedCount();
                $stats->total    = StatusHelper::getTotalProductsScraped();
                $stats->approved = StatusHelper::getCropApprovedCount();
                $stats->rejected = StatusHelper::getCropRejectedCount();
            }
        }

        $rejectedCrops = Product::where('crop_rejected_by', Auth::user()->id)->where('is_crop_approved', 0)->where('is_crop_rejected', 0)->where('stock', '>=', 1)->paginate(20);

        return view('products.crop_list', compact('products', 'stats', 'totalRejected', 'totalSequenced', 'totalApproved', 'rejectedCrops'));
    }

    public function showImageToBeVerified($id, Request $request)
    {
        $product                         = Product::find($id);
        $product->is_crop_being_verified = 1;
        $product->save();

        $secondProduct = Product::where('is_image_processed', 1)
            ->where('id', '!=', $id)
            ->where('is_crop_rejected', 0)
            ->where('is_crop_approved', 0)
            ->whereRaw('id NOT IN (SELECT product_id FROM crop_amends)')
            ->where('is_crop_being_verified', 0)
            ->orderBy('is_on_sale', 'DESC')
            ->first();

        $q = '';
        if ($request->get('rejected') === 'yes') {
            $q = 'rejected=yes';
        }

        $category = $product->category;
        $img      = Category::getCroppingGridImageByCategoryId($category);

        $category_array = Category::renderAsArray();

        return view('products.crop', compact('q', 'product', 'secondProduct', 'img', 'category', 'category_array'));
    }

    public function getApprovedImages(Request $request)
    {
        // Add check for out of stock
        $stock = $request->stock === 0 ? 0 : 1;

        // Get products which are crop approved
        $products = Product::where('status_id', StatusHelper::$cropSequencing)
            ->where('stock', '>=', $stock);

        // Limit to one user if this is requested
        if ($request->get('user_id') > 0) {
            $products = $products->where('crop_approved_by', $request->get('user_id'));
        }

        // Get images with cropApprover
        $products = $products->with('cropApprover')->paginate(25);

        // Get all users for dropdown
        $users = User::all();

        // Get requested user
        $userId = $request->get('user_id');

        return view('products.approved_crop_list', compact('products', 'users', 'userId'));
    }

    public function ammendCrop($id, Request $request, Stage $stage)
    {
        $this->validate($request, [
            'size' => 'required',
        ]);

        $sizes    = $request->get('size');
        $padding  = $request->get('padding');
        $mediaIds = $request->get('mediaIds');

        foreach ($sizes as $key => $size) {
            if ($size != 'ok') {
                $rec = new CropAmends();
                //update mediaId
                $cropRefrence = CroppedImageReference::where('new_media_id', $mediaIds[$key])->first();
                if (! $cropRefrence) {
                    continue;
                }
                $rec->file_url   = getMediaUrl($cropRefrence->media);
                $rec->settings   = ['size' => $size, 'padding' => $padding[$key] ?? 96, 'media_id' => $cropRefrence->original_media_id];
                $rec->product_id = $id;
                $rec->save();

                Media::where('id', $mediaIds[$key])->delete();
            }
        }

        $secondProduct = Product::where('status_id', '=', StatusHelper::$cropApproval)
            ->where('id', '!=', $id)
            ->whereNotIn('id', DB::table('crop_amends')->pluck('product_id')->toArray())
            ->first();

        return redirect()->action([\App\Http\Controllers\ProductCropperController::class, 'showImageToBeVerified'], $secondProduct->id)->with('message', 'Cropping approved successfully!');
    }

    /**
     * @SWG\Get(
     *   path="/crop/amends",
     *   tags={"Crop"},
     *   summary="Get Crop amends",
     *   operationId="crop-get-crop-amends",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *   @SWG\Response(response=406, description="not acceptable"),
     *   @SWG\Response(response=500, description="internal server error"),
     * )
     */
    public function giveAmends()
    {
        $amend = CropAmends::where('status', 1)->first();

        return response()->json($amend);
    }

    /**
     * @SWG\Post(
     *   path="/crop/amends",
     *   tags={"Crop"},
     *   summary="Save Crop amends",
     *   operationId="crop-save-crop-amends",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *   @SWG\Response(response=406, description="not acceptable"),
     *   @SWG\Response(response=500, description="internal server error"),
     *
     *      @SWG\Parameter(
     *          name="file",
     *          in="formData",
     *          required=true,
     *          type="file"
     *      ),
     *      @SWG\Parameter(
     *          name="product_id",
     *          in="formData",
     *          required=true,
     *          type="string"
     *      ),
     *      @SWG\Parameter(
     *          name="media_id",
     *          in="formData",
     *          required=true,
     *          type="integer"
     *      ),
     *      @SWG\Parameter(
     *          name="amend_id",
     *          in="formData",
     *          required=true,
     *          type="integer"
     *      ),
     * )
     */
    public function saveAmends(Request $request)
    {
        $this->validate($request, [
            'file'       => 'required',
            'product_id' => 'required',
            'media_id'   => 'required',
            'amend_id'   => 'required',
        ]);

        $product                         = Product::findOrFail($request->get('product_id'));
        $product->is_crop_being_verified = 0;

        if ($request->hasFile('file')) {
            $image = $request->file('file');
            $media = MediaUploader::fromSource($image)
                ->toDirectory('product/' . floor($product->id / config('constants.image_per_folder')))
                ->upload();
            $product->attachMedia($media, config('constants.media_tags'));
        }

        $amend = CropAmends::findOrFail($request->get('amend_id'));
        $amend->delete();

        return response()->json([
            'status' => 'success',
        ]);
    }

    public function approveCrop($id, Request $request)
    {
        $product                   = Product::findOrFail($id);
        $product->status_id        = StatusHelper::$cropSequencing;
        $product->is_crop_approved = 1;
        $product->crop_approved_by = Auth::user()->id;
        $product->crop_approved_at = Carbon::now()->toDateTimeString();
        $product->is_crop_rejected = 0;
        $product->save();

        $e             = new ListingHistory();
        $e->user_id    = Auth::user()->id;
        $e->product_id = $product->id;
        $e->content    = ['action' => 'CROP_APPROVAL', 'page' => 'Approved Listing Page'];
        $e->action     = 'CROP_APPROVAL';
        $e->save();

        $secondProduct = null;

        if ($request->get('rejected') === 'yes') {
            $secondProduct = Product::where('crop_rejected_by', Auth::user()->id)->where('is_crop_approved', 0)->where('is_crop_rejected', 0)->first();
        }

        if (! $secondProduct) {
            $secondProduct = Product::where('is_image_processed', 1)
                ->where('id', '!=', $id)
                ->where('is_crop_rejected', 0)
                ->where('is_crop_approved', 0)
                ->where('is_crop_being_verified', 0)
                ->whereNotIn('id', DB::table('crop_amends')->pluck('product_id')->toArray())
                ->orderBy('is_on_sale', 'DESC')
                ->where(function ($q) {
                    $q->where('size', '!=', '')
                        ->orWhere(function ($qq) {
                            $qq->where('lmeasurement', '!=', '')
                                ->where('hmeasurement', '!=', '')
                                ->where('dmeasurement', '!=', '');
                        });
                })
                ->first();
        }

        if (! $secondProduct) {
            $secondProduct = Product::where('status_id', StatusHelper::$cropApproval);
            $secondProduct = QueryHelper::approvedListingOrder($secondProduct);
            $secondProduct = $secondProduct->first();
        }

        if (! $secondProduct || ! isset($secondProduct->id)) {
            return redirect()->action([\App\Http\Controllers\ProductCropperController::class, 'getListOfImagesToBeVerified']);
        } else {
            return redirect()->action([\App\Http\Controllers\ProductCropperController::class, 'showImageToBeVerified'], $secondProduct->id)->with('message', 'Cropping approved successfully!');
        }
    }

    public function cropApprovalConfirmation($id, Request $request)
    {
        // Get product
        $product = Product::findOrFail($id);

        // Insert crop approval confirmation
        ListingHistory::createNewListing(Auth::id(), $product->id, "[ 'action' => 'CROP_APPROVAL_CONFIRMATION', 'page' => 'Approved Listing Page' ]", 'CROP_APPROVAL_CONFIRMATION');

        // Add new status
        ProductStatus::updateStatus($product->id, 'CROP_APPROVAL_CONFIRMATION', 1);

        if ($product) {
            //sets initial status pending for finalApproval in product status histroy
            $data = [
                'product_id'     => $product->id,
                'old_status'     => $product->status_id,
                'new_status'     => StatusHelper::$finalApproval,
                'pending_status' => 1,
                'created_at'     => date('Y-m-d H:i:s'),
            ];
            \App\ProductStatusHistory::addStatusToProduct($data);
        }

        // Set new status
        //check final approval
        if ($product->checkPriceRange()) {
            $product->status_id = StatusHelper::$finalApproval;
        } else {
            $product->status_id = StatusHelper::$priceCheck;
        }
        //$product->status_id = StatusHelper::$finalApproval;
        $product->save();

        return 'ok';
    }

    public function rejectCrop($id, Stage $stage, Request $request)
    {
        // Get product
        $product = Product::findOrFail($id);

        if ($product->status_id == StatusHelper::$cropRejected) {
            if ($request->ajax()) {
                return response()->json(['sucesss'], 200);
            }
        }

        if ($product->status_id == StatusHelper::$manualImageUpload) {
            if ($request->ajax()) {
                return response()->json(['sucesss'], 200);
            }
        }

        // Get last image cropper
        $lastImageCropper = $product->crop_approved_by;

        // Update product to status rejected
        if ($request->get('remark') == 'Image incorrect') {
            $product->status_id = StatusHelper::$manualImageUpload;
        } else {
            $product->status_id = StatusHelper::$cropRejected;
        }

        $product->is_crop_rejected       = 1;
        $product->crop_remark            = $request->get('remark');
        $product->crop_rejected_by       = Auth::user()->id;
        $product->is_approved            = 0;
        $product->is_crop_approved       = 0;
        $product->is_crop_ordered        = 0;
        $product->is_crop_being_verified = 0;
        $product->crop_rejected_at       = Carbon::now()->toDateTimeString();
        $product->save();

        // Log crop approval denied
        if ((int) $lastImageCropper > 0) {
            $e             = new ListingHistory();
            $e->user_id    = $lastImageCropper;
            $e->product_id = $product->id;
            $e->content    = ['action' => 'CROP_APPROVAL_DENIED', 'page' => 'Approved Listing Page'];
            $e->action     = 'CROP_APPROVAL_DENIED';
            $e->save();
        }

        // Log crop rejected
        $e             = new ListingHistory();
        $e->user_id    = Auth::user()->id;
        $e->product_id = $product->id;
        $e->content    = ['action' => 'CROP_REJECTED', 'page' => 'Approved Listing Page'];
        $e->action     = 'CROP_REJECTED';
        $e->save();

        if ($request->get('senior') && $product) {
            $s                 = new UserProductFeedback();
            $s->user_id        = $product->crop_approved_by;
            $s->senior_user_id = Auth::user()->id;
            $s->action         = 'CROP_APPROVAL_REJECTED';
            $s->content        = ['action' => 'CROP_APPROVAL_REJECTED', 'previous_action' => 'CROP_APPROVAL', 'current_action' => 'CROP_REJECTED', 'message' => 'Your cropping approval has been rejected.'];
            $s->message        = 'Your cropping approval has been rejected. The reason was: ' . $request->get('remark');
            $s->product_id     = $product->id;
            $s->save();
        }

        if ($request->isXmlHttpRequest()) {
            return response()->json([
                'status' => 'success',
            ]);
        }

        $secondProduct = null;

        if ($request->get('rejected') === 'yes') {
            $secondProduct = Product::where('crop_rejected_by', Auth::user()->id)->where('is_crop_approved', 0)->where('is_crop_rejected', 0)->first();
        }

        if (! $secondProduct) {
            $secondProduct = Product::where('status_id', StatusHelper::$cropApproval);
            $secondProduct = QueryHelper::approvedListingOrder($secondProduct);
            $secondProduct = $secondProduct->first();
        }

        if (! $secondProduct) {
            return redirect()->action([\App\Http\Controllers\ProductCropperController::class, 'getListOfImagesToBeVerified']);
        }

        return redirect()->action([\App\Http\Controllers\ProductCropperController::class, 'showImageToBeVerified'], $secondProduct->id)->with('message', 'Cropping rejected!');
    }

    public function crop_issue_page(Request $request)
    {
    }

    public function showRejectedCrops(Request $request)
    {
        $products            = Product::where('is_crop_rejected', 1);
        $reason              = '';
        $supplier            = [];
        $selected_categories = [];

        if ($request->get('reason') !== '') {
            $reason   = $request->get('reason');
            $products = $products->where('stock', '>=', 1)->where(function ($query) use ($reason) {
                $query = $query->where('crop_remark', 'LIKE', "%$reason%")
                    ->orWhere('id', 'LIKE', "%$reason%")
                    ->orWhere('sku', 'LIKE', "%$reason%");
            });
        }

        if ($request->get('user_id')) {
            $products = $products->where('crop_rejected_by', $request->get('user_id'));
        }

        $suppliers = DB::select('
				SELECT id, supplier
				FROM suppliers

				INNER JOIN (
					SELECT supplier_id FROM product_suppliers GROUP BY supplier_id
					) as product_suppliers
				ON suppliers.id = product_suppliers.supplier_id
		');

        if ($request->supplier[0] != null) {
            $supplier = $request->get('supplier');
            $products = $products->whereIn('id', DB::table('product_suppliers')->whereIn('supplier_id', $supplier)->pluck('product_id'));
        }

        $users = User::all();

        if ($request->category[0] != null && $request->category[0] != 1) {
            $category_children = [];
            foreach ($request->category as $category) {
                $is_parent = Category::isParent($category);

                if ($is_parent) {
                    $childs = Category::find($category)->childs()->get();

                    foreach ($childs as $child) {
                        $is_parent = Category::isParent($child->id);

                        if ($is_parent) {
                            $children = Category::find($child->id)->childs()->get();

                            foreach ($children as $chili) {
                                array_push($category_children, $chili->id);
                            }
                        } else {
                            array_push($category_children, $child->id);
                        }
                    }
                } else {
                    array_push($category_children, $category);
                }
            }
            $products            = $products->whereIn('category', $category_children);
            $selected_categories = [$request->get('category')[0]];
        }

        if (! empty($request->brand)) {
            $products = $products->whereIn('brand', $request->brand);
        }

        if (! empty($request->color)) {
            $products = $products->whereIn('color', $request->color);
        }

        if (! empty($request->size)) {
            $products = $products->whereNotNull('size')->where(function ($query) use ($request) {
                $query->where('size', $request->size)->orWhere('size', 'LIKE', "%$request->size,")->orWhere('size', 'LIKE', "%,$request->size,%");
            });
        }

        if (! empty($request->location)) {
            $products = $products->whereIn('location', $request->location);
        }

        $products = $products->orderBy('updated_at', 'DESC')->paginate(24);

        $category_array = \App\Category::attr(['name' => 'category[]', 'class' => 'form-control select2', 'placeholder' => 'Select Category'])->selected(request()->get('category', 1))->renderAsDropdown();

        return view('products.rejected_crop_list', compact('products', 'suppliers', 'supplier', 'reason', 'selected_categories', 'category_array', 'users'));
    }

    public function cropIssuesPage()
    {
        $issues = DB::table('products')->selectRaw('DISTINCT(crop_remark) as remark, COUNT(crop_remark) as issue_count')->where('stock', '>=', 1)->where('is_crop_rejected', 1)->groupBy('crop_remark')->orderBy('issue_count', 'DESC')->get();

        return view('products.crop_issue_summary', compact('issues'));
    }

    public function showRejectedImageToBeverified($id)
    {
        $product       = Product::find($id);
        $secondProduct = Product::where('id', '!=', $id)->where('is_crop_rejected', 1)->first();

        $category = $product->category;
        $img      = Category::getCroppingGridImageByCategoryId($category);

        $medias             = $product->getMedia(config('constants.media_tags'));
        $originalMediaCount = 0;

        foreach ($medias as $media) {
            if (stripos(strtoupper($media->filename), 'CROPPED') === false) {
                $originalMediaCount++;
            }
        }

        return view('products.rejected_crop', compact('product', 'secondProduct', 'img', 'originalMediaCount'));
    }

    public function approveRejectedImage(Request $request)
    {
    }

    public function downloadImagesForProducts($id, $type)
    {
        $product = Product::findOrFail($id);

        $medias   = $product->getMedia(config('constants.media_tags'));
        $zip_file = md5(time()) . '.zip';
        $zip      = new \ZipArchive();
        $zip->open($zip_file, \ZipArchive::CREATE);
        foreach ($medias as $key => $media) {
            $fileName = $media->getAbsolutePath();
            if ($type === 'cropped' && stripos(strtoupper($media->filename), 'CROPPED') !== false) {
                $zip->addFile($fileName, $media->filename . '.' . $media->extension);
            }
            if ($type === 'original' && stripos(strtoupper($media->filename), 'CROPPED') === false) {
                $zip->addFile($fileName, $media->filename . '.' . $media->extension);
            }
        }

        $zip->close();

        return response()->download($zip_file);
    }

    public function approveRejectedCropped($id, Request $request)
    {
        $product = Product::find($id);

        $action = 'MARK_NOT_CROPPED';
        if ($request->get('action') == 'uncropped') {
            $product->status_id = 4;
            $product->save();
        } else {
            if ($request->get('action') == 'approved') {
                $product->status_id        = 6;
                $product->crop_approved_by = Auth::id();
                $product->crop_approved_at = Carbon::now()->toDateTimeString();
                $product->save();
                $action = 'CROP_APPROVAL';
            } else {
                if ($request->get('action') == 'manual') {
                    $product->status_id = 21;
                    $product->save();
                    $action = 'SENT_FOR_MANUAL_CROPPING';
                } else {
                    if ($request->get('unreject')) {
                        $product->status_id = 5;
                        $product->save();
                        $action = 'RESENT_FOR_APPROVAL';
                    }
                }
            }
        }

        $l             = new ListingHistory();
        $l->action     = $action;
        $l->content    = ['action' => $action, 'message' => ''];
        $l->user_id    = Auth::user()->id;
        $l->product_id = $product->id;
        $l->save();

        $secondProduct = Product::where('id', '!=', $id)->where('status_id', StatusHelper::$cropRejected)->first();

        return redirect()->action([\App\Http\Controllers\ProductCropperController::class, 'showRejectedImageToBeverified'], $secondProduct->id)->with('message', 'Rejected image approved and has been moved to approval grid.');
    }

    public function updateCroppedImages(Request $request)
    {
        dd($request->all());
    }

    public function giveImagesToBeAmended()
    {
        $image = CropAmends::where('status', 1)->first();

        return response()->json($image);
    }

    public function showCropOrderRejectedList()
    {
        $products = Product::where('is_order_rejected', 1)->orderBy('updated_at', 'DESC')->paginate(24);
    }

    public function showCropVerifiedForOrdering()
    {
        // Set initial product
        $product = Product::where('status_id', StatusHelper::$cropSequencing);

        // Add queryhelper
        $product = QueryHelper::approvedListingOrder($product);

        // Get first
        $product = $product->first();

        // No products found
        if ($product == null) {
            exit('No products found');
        }

        // Get total number of products awaiting for sequencing
        $total = Product::where('status_id', StatusHelper::$cropSequencing)->count();

        // Update the status so this product will not show up
        $product->status_id = StatusHelper::$isBeingSequenced;
        $product->save();

        // Set count of crops ordered by the current logged in user
        $count = Product::where('crop_ordered_by', Auth::id())->count();

        // Return view
        return view('products.sequence', compact('product', 'total', 'count'));
    }

    public function skipSequence($id, Request $request)
    {
        // Find product or fail
        $product = Product::findOrFail($id);

        // Check if the product is being sequenced
        if ($product->status_id != StatusHelper::$isBeingSequenced) {
            // Check for ajax
            if ($request->isXmlHttpRequest()) {
                return response()->json([
                    'status' => 'failed',
                ], 400);
            } else {
                // Redirect
                return redirect()->action([\App\Http\Controllers\ProductCropperController::class, 'showCropVerifiedForOrdering']);
            }
        }

        $product->status_id        = StatusHelper::$cropSkipped;
        $product->crop_rejected_at = Carbon::now()->toDateTimeString();
        $product->crop_rejected_by = $request->isXmlHttpRequest() ? 109 : Auth::id();
        $product->save();

        // Store listing history
        $listingHistory             = new ListingHistory();
        $listingHistory->action     = 'SKIP_SEQUENCE';
        $listingHistory->product_id = $product->id;
        $listingHistory->user_id    = Auth::user()->id;
        $listingHistory->content    = ['action' => 'SKIP_SEQUENCE', 'page' => 'Sequence Approver'];
        $listingHistory->save();

        // Return JSON if the request is ajax
        if ($request->isXmlHttpRequest()) {
            return response()->json([
                'status' => 'success',
            ]);
        }

        // Redirect
        return redirect()->action([\App\Http\Controllers\ProductCropperController::class, 'showCropVerifiedForOrdering']);
    }

    public function rejectSequence($id, Request $request)
    {
        $product                    = Product::findOrFail($id);
        $product->is_crop_ordered   = 0;
        $product->is_order_rejected = 1;
        $product->is_approved       = 0;
        $product->save();

        $l             = new ListingHistory();
        $l->action     = 'REJECT_SEQUENCE';
        $l->product_id = $product->id;
        $l->user_id    = Auth::user()->id;
        $l->content    = ['action' => 'REJECT_SEQUENCE', 'page' => 'Approved Listing'];
        $l->save();

        if ($request->get('senior') && $product) {
            $s                 = new UserProductFeedback();
            $s->user_id        = $product->crop_ordered_by;
            $s->senior_user_id = Auth::user()->id;
            $s->action         = 'CROP_SEQUENCED_REJECTED';
            $s->content        = ['action' => 'CROP_SEQUENCED_REJECTED', 'previous_action' => 'CROP_SEQUENCED', 'current_action' => 'CROP_SEQUENCED_REJECTED', 'message' => 'Your sequencing has been rejected.'];
            $s->message        = 'Your crop sequence was not proper. Please check for this one';
            $s->product_id     = $product->id;
            $s->save();
        }

        return response()->json([
            'status' => 'success',
        ]);
    }

    public function saveSequence($id, Request $request)
    {
        // Find product or fail
        $product = Product::findOrFail($id);

        // Is this product currently being sequenced
        if ($product->status_id != StatusHelper::$isBeingSequenced) {
            // Redirect
            return redirect()->action([\App\Http\Controllers\ProductCropperController::class, 'showCropVerifiedForOrdering']);
        }

        $medias = $request->get('images');
        foreach ($medias as $mediaId => $order) {
            if ($order !== null) {
                DB::table('mediables')->where('media_id', $mediaId)->where('mediable_type', \App\Product::class)->update([
                    'order' => $order,
                ]);
            } else {
                DB::table('mediables')->where('media_id', $mediaId)->where('mediable_type', \App\Product::class)->delete();
                DB::table('media')->where('id', $mediaId)->delete();
            }
        }

        // Update product
        $product->status_id       = StatusHelper::$imageEnhancement;
        $product->crop_ordered_by = Auth::user()->id;
        $product->crop_ordered_at = Carbon::now()->toDateTimeString();
        $product->save();

        $listingHistory             = new ListingHistory();
        $listingHistory->action     = 'CROP_SEQUENCED';
        $listingHistory->user_id    = Auth::user()->id;
        $listingHistory->product_id = $product->id;
        $listingHistory->content    = ['action' => 'CROP_SEQUENCED', 'page' => 'Crop Sequencer'];
        $listingHistory->save();

        return redirect()->action([\App\Http\Controllers\ProductCropperController::class, 'showCropVerifiedForOrdering'])->with('message', 'Previous image ordered successfully!');
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/PurchaseController.php 
Content: <?php

namespace App\Http\Controllers;

use Auth;
use Storage;
use App\File;
use App\Task;
use App\User;
use App\Agent;
use App\Brand;
use App\Email;
use App\Order;
use App\Reply;
use App\Remark;
use App\Comment;
use App\Helpers;
use App\Message;
use App\Product;
use App\Setting;
use App\Category;
use App\Customer;
use App\Purchase;
use App\Supplier;
use Carbon\Carbon;
use Dompdf\Dompdf;
use App\ChatMessage;
use App\PrivateView;
use App\OrderProduct;
use App\StatusChange;
use App\ReplyCategory;
use App\LogExcelImport;
use App\PurchaseDiscount;
use App\Mail\PurchaseEmail;
use Illuminate\Support\Arr;
use Illuminate\Http\Request;
use App\CommunicationHistory;
use App\ReadOnly\SupplierList;
use App\Exports\PurchasesExport;
use App\ReadOnly\PurchaseStatus;
use App\Events\ProformaConfirmed;
use App\Mails\Manual\ForwardEmail;
use App\Mails\Manual\ReplyToEmail;
use Illuminate\Support\Facades\DB;
use Webklex\PHPIMAP\ClientManager;
use App\Mails\Manual\PurchaseExport;
use Illuminate\Support\Facades\Mail;
use Maatwebsite\Excel\Facades\Excel;
use Illuminate\Support\Facades\Validator;
use App\ReadOnly\OrderStatus as OrderStatus;
use Illuminate\Pagination\LengthAwarePaginator;
use Plank\Mediable\Facades\MediaUploader as MediaUploader;

class PurchaseController extends Controller
{
    public function index(Request $request)
    {
        $term = $request->input('term');

        if ($request->input('orderby') == '') {
            $orderby = 'DESC';
        } else {
            $orderby = 'ASC';
        }

        switch ($request->input('sortby')) {
            case 'date':
                $sortby = 'created_at';
                break;
            case 'purchase_handler':
                $sortby = 'purchase_handler';
                break;
            case 'supplier':
                $sortby = 'supplier';
                break;
            case 'status':
                $sortby = 'status';
                break;
            case 'communication':
                $sortby = 'communication';
                break;
            default:
                $sortby = 'created_at';
        }

        $purchases = (new Purchase())->newQuery()->with([
            'orderProducts' => function ($query) {
                $query->with([
                    'Order' => function ($q) {
                        $q->with('customer');
                    },
                ]);
                $query->with(['Product']);
            },
            'Products' => function ($query) {
                $query->with([
                    'orderproducts' => function ($quer) {
                        $quer->with([
                            'Order' => function ($q) {
                                $q->with('customer');
                            },
                        ]);
                    },
                ]);
            },
            'purchase_supplier',
        ]);

        if (! empty($term)) {
            $purchases = $purchases
                ->orWhere('id', 'like', '%' . $term . '%')
                ->orWhere('purchase_handler', Helpers::getUserIdByName($term))
                ->orWhere('supplier', 'like', '%' . $term . '%')
                ->orWhere('status', 'like', '%' . $term . '%')
                ->orWhereHas('Products', function ($query) use ($term) {
                    $query->where('sku', 'LIKE', "%$term%");
                });
        }

        if ($sortby != 'communication') {
            $purchases = $purchases->orderBy($sortby, $orderby);
        }

        $users = Helpers::getUserArray(User::all());

        $purchases_array = $purchases->select(['id', 'purchase_handler', 'supplier', 'supplier_id', 'status', 'created_at'])->get()->toArray();

        $currentPage  = LengthAwarePaginator::resolveCurrentPage();
        $perPage      = 10;
        $currentItems = array_slice($purchases_array, $perPage * ($currentPage - 1), $perPage);

        $purchases_array = new LengthAwarePaginator($currentItems, count($purchases_array), $perPage, $currentPage, [
            'path' => LengthAwarePaginator::resolveCurrentPath(),
        ]);

        $purchase_data = [
            '0' => 0,
            '1' => 0,
            '2' => 0,
            '3' => 0,
            '4' => 0,
        ];
        $purchase_products = Product::with('orderproducts')->whereHas('purchases')->get();

        foreach ($purchase_products as $product) {
            if (count($product->orderproducts) > 0) {
                if ($product->orderproducts[0]->purchase_status != 'In Transit from Italy to Dubai' && $product->orderproducts[0]->purchase_status != 'Shipment Received in Dubai' && $product->orderproducts[0]->purchase_status != 'Shipment in Transit from Dubai to India' && $product->orderproducts[0]->purchase_status != 'Shipment Received in India') {
                    $purchase_data['0'] += 1;
                }

                if ($product->orderproducts[0]->purchase_status == 'In Transit from Italy to Dubai') {
                    $purchase_data['1'] += 1;
                }

                if ($product->orderproducts[0]->purchase_status == 'Shipment Received in Dubai') {
                    $purchase_data['2'] += 1;
                }

                if ($product->orderproducts[0]->purchase_status == 'Shipment in Transit from Dubai to India') {
                    $purchase_data['3'] += 1;
                }

                if ($product->orderproducts[0]->purchase_status == 'Shipment Received in India') {
                    $purchase_data['4'] += 1;
                }
            } else {
                $purchase_data['0'] += 1;
            }
        }

        $suppliers    = Supplier::select(['id', 'supplier'])->get();
        $agents       = Agent::where('model_type', \App\Supplier::class)->get();
        $agents_array = [];

        foreach ($agents as $agent) {
            $agents_array[$agent->model_id][$agent->id] = $agent->name . ' - ' . $agent->email;
        }

        if ($request->ajax()) {
            $html = view('purchase.purchase-item', ['purchases_array' => $purchases_array, 'orderby' => $orderby, 'users' => $users])->render();

            return response()->json(['html' => $html]);
        }

        return view('purchase.index', compact('purchases_array', 'term', 'orderby', 'users', 'suppliers', 'agents_array', 'purchase_data'));
    }

    public function purchaseGrid(Request $request, $page = null)
    {
        $purchases = Db::select('select p.sku,p.id,pp.order_product_id from purchase_products as pp join products as p on p.id = pp.product_id');

        $not_include_products = [];
        $includedPurchases    = [];
        foreach ((array) $purchases as $product) {
            if ($product->order_product_id > 0) {
                $not_include_products[] = $product->order_product_id;
                $includedPurchases[]    = $product->id;
            }
        }

        $skuNeed = Db::select('select p.id from order_products as op join products as p on p.id = op.product_id left join purchase_products as pp on pp.order_product_id = op.id  where pp.order_product_id is null group by op.sku');
        $skuNeed = collect($skuNeed)->pluck('id')->toArray();

        $ignoreSku  = array_diff($includedPurchases, $skuNeed);
        $customerId = request()->get('customer_id', 0);

        if ($request->status[0] != null && $request->supplier[0] == null && $request->brand[0] == null) {
            $status      = $request->status;
            $status_list = implode("','", $request->status ?? []);
            $orders      = OrderProduct::join('orders as o', 'o.id', 'order_products.order_id')
                ->join('products as p', 'p.id', 'order_products.product_id')
                ->whereIn('o.order_status', $status)
                ->where('qty', '>=', 1);

            if ($customerId > 0) {
                $orders = $orders->where('o.customer_id', $customerId);
            }

            $orders = $orders->select(['order_products.sku', 'p.id'])->get();
        }
        $status_list = implode("','", $request->status ?? []);

        if ($request->supplier[0] != null) {
            $supplier      = $request->supplier[0];
            $supplier_list = implode(',', $request->supplier);

            if ($request->status[0] != null) {
                $status_list = implode("','", $request->status);

                $orders = OrderProduct::select(['order_products.sku', 'order_products.order_id', 'p.id'])->join('orders as o', 'o.id', 'order_products.order_id')
                    ->join('products as p', 'p.id', 'order_products.product_id')
                    ->join('product_suppliers as ps', 'ps.product_id', 'p.id')
                    ->whereIn('o.order_status', $request->status)
                    ->whereIn('ps.supplier_id', $request->supplier)->where('qty', '>=', 1);
                if ($customerId > 0) {
                    $orders = $orders->where('o.customer_id', $customerId);
                }

                $orders = $orders->get();
            } else {
                $orders = OrderProduct::select(['order_products.sku', 'order_products.order_id', 'p.id'])->join('orders as o', 'o.id', 'order_products.order_id');
                if ($page == 'canceled-refunded') {
                    $orders = $orders->whereIn('o.order_status_id', [\App\Helpers\OrderHelper::$cancel, \App\Helpers\OrderHelper::$refundToBeProcessed]);
                } elseif ($page == 'ordered') {
                } elseif ($page == 'delivered') {
                    $orders = $orders->whereIn('o.order_status_id', [\App\Helpers\OrderHelper::$delivered]);
                } elseif ($page == 'non_ordered') {
                    $orders = $orders->whereNotIn('o.order_status_id', [
                        \App\Helpers\OrderHelper::$followUpForAdvance,
                        \App\Helpers\OrderHelper::$proceedWithOutAdvance,
                        \App\Helpers\OrderHelper::$advanceRecieved,
                        \App\Helpers\OrderHelper::$prepaid,
                    ]);
                } else {
                    $orders = $orders->whereIn('o.order_status_id', [
                        \App\Helpers\OrderHelper::$followUpForAdvance,
                        \App\Helpers\OrderHelper::$proceedWithOutAdvance,
                        \App\Helpers\OrderHelper::$advanceRecieved,
                        \App\Helpers\OrderHelper::$prepaid,
                    ]);
                }
                $orders = $orders->join('products as p', 'p.id', 'order_products.product_id')->join('product_suppliers as ps', 'ps.product_id', 'p.id')->whereIn('ps.supplier_id', $request->supplier)
                    ->where('qty', '>=', 1);
                if ($customerId > 0) {
                    $orders = $orders->where('o.customer_id', $customerId);
                }

                $orders = $orders->get();
            }
        }

        if ($request->brand[0] != null) {
            $brand = $request->brand[0];

            if ($request->status[0] != null || $request->supplier[0] != null) {
                $orders = OrderProduct::select(['order_products.sku', 'order_products.order_id', 'p.id'])
                    ->join('orders as o', 'o.id', 'order_products.order_id')
                    ->join('products as p', 'p.sku', 'order_products.sku');
                if ($request->status[0] != null) {
                    $orders = $orders->whereIn('o.order_status', $request->status);
                }
                $orders = $orders->where('brand', $brand)->where('qty', '>=', 1);
                if ($customerId > 0) {
                    $orders = $orders->where('o.customer_id', $customerId);
                }

                $orders = $orders->get();
            } else {
                $orders = OrderProduct::select(['order_products.sku', 'order_products.order_id', 'p.id'])->join('orders as o', 'o.id', 'order_products.order_id');
                if ($page == 'canceled-refunded') {
                    $orders = $orders->whereIn('o.order_status_id', [
                        \App\Helpers\OrderHelper::$cancel,
                        \App\Helpers\OrderHelper::$refundToBeProcessed,
                    ]);
                } elseif ($page == 'ordered') {
                } elseif ($page == 'delivered') {
                    $orders = $orders->whereIn('o.order_status_id', [
                        \App\Helpers\OrderHelper::$delivered,
                    ]);
                } elseif ($page == 'non_ordered') {
                    $orders = $orders->whereNotIn('o.order_status_id', [
                        \App\Helpers\OrderHelper::$followUpForAdvance,
                        \App\Helpers\OrderHelper::$proceedWithOutAdvance,
                        \App\Helpers\OrderHelper::$advanceRecieved,
                        \App\Helpers\OrderHelper::$prepaid,
                    ]);
                } else {
                    $orders = $orders->whereIn('o.order_status_id', [
                        \App\Helpers\OrderHelper::$followUpForAdvance,
                        \App\Helpers\OrderHelper::$proceedWithOutAdvance,
                        \App\Helpers\OrderHelper::$advanceRecieved,
                        \App\Helpers\OrderHelper::$prepaid,
                    ]);
                }

                $orders = $orders->join('products as p', 'p.id', 'order_products.product_id')->where('brand', $brand)->where('qty', '>=', 1);
                if ($customerId > 0) {
                    $orders = $orders->where('o.customer_id', $customerId);
                }

                $orders = $orders->get();
            }
        }

        if (! empty($request->order_id)) {
            $orders = OrderProduct::select(['order_products.sku', 'order_products.order_id', 'p.id'])
                ->join('orders as o', 'o.id', 'order_products.order_id')
                ->join('products as p', 'p.id', 'order_products.product_id');
            if ($page == 'canceled-refunded') {
                $orders = $orders->whereIn('o.order_status_id', [
                    \App\Helpers\OrderHelper::$cancel,
                    \App\Helpers\OrderHelper::$refundToBeProcessed,
                ]);
            } elseif ($page == 'ordered') {
            } elseif ($page == 'delivered') {
                $orders = $orders->whereIn('o.order_status_id', [
                    \App\Helpers\OrderHelper::$delivered,
                ]);
            } elseif ($page == 'non_ordered') {
                $orders = $orders->whereNotIn('o.order_status_id', [
                    \App\Helpers\OrderHelper::$followUpForAdvance,
                    \App\Helpers\OrderHelper::$proceedWithOutAdvance,
                    \App\Helpers\OrderHelper::$advanceRecieved,
                    \App\Helpers\OrderHelper::$prepaid,
                ]);
            } else {
                $orders = $orders->whereIn('o.order_status_id', [
                    \App\Helpers\OrderHelper::$followUpForAdvance,
                    \App\Helpers\OrderHelper::$proceedWithOutAdvance,
                    \App\Helpers\OrderHelper::$advanceRecieved,
                    \App\Helpers\OrderHelper::$prepaid,
                ]);
            }

            $orders = $orders->where('qty', '>=', 1)->where('o.id', '=', $request->order_id)->get();
        }

        if ($request->status[0] == null && $request->supplier[0] == null && $request->brand[0] == null && empty($request->order_id)) {
            $orders = OrderProduct::select(['order_products.sku', 'order_products.order_id', 'p.id'])
                ->join('orders as o', 'o.id', 'order_products.order_id')
                ->join('products as p', 'p.id', 'order_products.product_id');
            if ($page == 'canceled-refunded') {
                $orders = $orders->whereIn('o.order_status_id', [
                    \App\Helpers\OrderHelper::$cancel,
                    \App\Helpers\OrderHelper::$refundToBeProcessed,
                ]);
            } elseif ($page == 'ordered') {
            } elseif ($page == 'delivered') {
                $orders = $orders->whereIn('o.order_status_id', [
                    \App\Helpers\OrderHelper::$delivered,
                ]);
            } elseif ($page == 'non_ordered') {
                $orders = $orders->whereNotIn('o.order_status_id', [
                    \App\Helpers\OrderHelper::$followUpForAdvance,
                    \App\Helpers\OrderHelper::$proceedWithOutAdvance,
                    \App\Helpers\OrderHelper::$advanceRecieved,
                    \App\Helpers\OrderHelper::$prepaid,
                ]);
            } else {
                $orders = $orders->whereIn('o.order_status_id', [
                    \App\Helpers\OrderHelper::$followUpForAdvance,
                    \App\Helpers\OrderHelper::$proceedWithOutAdvance,
                    \App\Helpers\OrderHelper::$advanceRecieved,
                    \App\Helpers\OrderHelper::$prepaid,
                ]);
            }

            $orders = $orders->where('qty', '>=', 1);
            if ($customerId > 0) {
                $orders = $orders->where('o.customer_id', $customerId);
            }

            $orders = $orders->get();
        }

        $new_orders     = [];
        $includedOrders = [];
        foreach ($orders as $order) {
            array_push($new_orders, $order['id']);
            array_push($includedOrders, $order['order_id']);
        }

        $color    = $request->get('color');
        $size     = $request->get('size');
        $products = Product::with([
            'orderproducts' => function ($query) use ($page, $not_include_products, $includedOrders, $color, $size) {
                if ($page != 'ordered') {
                    $query->whereNotIn('id', $not_include_products);
                }
                $query->with([
                    'order' => function ($q) use ($includedOrders) {
                        $q->with('customer');
                        $q->whereIn('id', array_unique($includedOrders));
                    },
                ]);

                if (! empty($color) && is_array($color)) {
                    $query = $query->whereIn('color', $color);
                }

                if (! empty($size)) {
                    $query = $query->where('size', $size);
                }
            },
            'purchases',
            'suppliers',
            'brands',
        ])->whereIn('id', $new_orders);

        if ($page == 'ordered') {
            $products = $products->whereHas('purchases', function ($query) {
                $query->where('status', 'Ordered');
            });
        } else {
            $products = $products->whereNotIn('id', $ignoreSku);
        }

        $term         = $request->input('term');
        $status       = isset($status) ? $status : '';
        $supplier     = isset($supplier) ? $supplier : '';
        $brand        = isset($brand) ? $brand : '';
        $order_status = (new OrderStatus)->all();

        foreach ($order_status as $key => $value) {
            if (! $page) {
                if (! in_array($key, ['Follow up for advance', 'Proceed without Advance', 'Advance received', 'Prepaid'])) {
                    unset($order_status[$key]);
                }
            } else {
                if ($page == 'non_ordered') {
                    if (in_array($key, ['Follow up for advance', 'Proceed without Advance', 'Advance received', 'Prepaid'])) {
                        unset($order_status[$key]);
                    }
                }
            }
        }

        $supplier_list = (new SupplierList)->all();

        $suppliers = DB::select('
          SELECT s.id, s.supplier
          FROM suppliers as s
          JOIN product_suppliers as ps on ps.supplier_id = s.id
          where
          ps.stock >= 1
          GROUP BY supplier_id');

        $suppliers_array = [];
        foreach ($suppliers as $supp) {
            $suppliers_array[$supp->id] = $supp->supplier;
        }

        if (! empty($term)) {
            $products = $products->where(function ($query) use ($term) {
                return $query
                    ->orWhere('name', 'like', '%' . $term . '%')
                    ->orWhere('short_description', 'like', '%' . $term . '%')
                    ->orWhere('sku', 'like', '%' . $term . '%')
                    ->orWhere('supplier', 'like', '%' . $term . '%');
            });
        }

        if ($request->category_id != null && $request->category_id != 1) {
            $category_children = [];

            $is_parent = Category::isParent($request->category_id);

            if ($is_parent) {
                $childs = Category::find($request->category_id)->childs()->get();

                foreach ($childs as $child) {
                    $is_parent = Category::isParent($child->id);

                    if ($is_parent) {
                        $children = Category::find($child->id)->childs()->get();

                        foreach ($children as $chili) {
                            array_push($category_children, $chili->id);
                        }
                    } else {
                        array_push($category_children, $child->id);
                    }
                }
            } else {
                array_push($category_children, $request->category_id);
            }

            $products = $products->whereIn('category', $category_children);
        }

        $new_products = [];
        $products     = $products->select(['id', 'sku', 'supplier', 'brand', 'category', 'price', 'price_inr'])->get()->sortBy('supplier');
        $count        = 0;
        $productIds   = [];
        foreach ($products as $key => $product) {
            $supplier_list   = '';
            $single_supplier = '';

            $customer_names = '';
            $customers      = [];
            $orderCount     = 0;
            $sizeArr        = [];
            foreach ($product->orderproducts as $key => $order_product) {
                if ($order_product->order && $order_product->order->customer) {
                    $customers[] = $order_product->order->customer;
                }

                if (! empty($order_product->order)) {
                    $orderCount++;
                    if (! empty($order_product->size)) {
                        $sizeArr[] = $order_product->size;
                    }
                }
            }

            if (! $orderCount) {
                continue;
            }

            $supplier_msg = DB::table('purchase_product_supplier')
                ->select('suppliers.id', 'suppliers.supplier', 'chat_messages.id as chat_messages_id', 'chat_messages.message', 'chat_messages.created_at')
                ->leftJoin('suppliers', 'suppliers.id', '=', 'purchase_product_supplier.supplier_id')
                ->leftJoin('chat_messages', 'chat_messages.id', '=', 'purchase_product_supplier.chat_message_id')
                ->where('purchase_product_supplier.product_id', '=', $product->id)
                ->orderBy('chat_messages.created_at', 'DESC')
                ->get();

            $supplier_msg_data = [];
            foreach ($supplier_msg as $key => $value) {
                $supplier_msg_data[$value->id]['supplier'] = $value->supplier;

                if (! isset($data[$value->id]['chat_messages'])) {
                    $supplier_msg_data[$value->id]['chat_messages'] = [];
                }

                if (! empty($value->chat_messages_id)) {
                    $supplier_msg_data[$value->id]['chat_messages'][] = [
                        'message'    => $value->message,
                        'created_at' => $value->created_at,
                    ];
                }
            }
            $productIds[] = $product->id;

            $new_products[$count]['id']              = $product->id;
            $new_products[$count]['sku']             = $product->sku;
            $new_products[$count]['price']           = $product->price;
            $new_products[$count]['price_inr']       = $product->price_inr;
            $new_products[$count]['supplier']        = $product->supplier;
            $new_products[$count]['supplier_list']   = $supplier_list;
            $new_products[$count]['single_supplier'] = $single_supplier;
            $new_products[$count]['brand']           = $product->brands ? $product->brands->name : 'No Brand';
            $new_products[$count]['brand_id']        = $product->brands ? $product->brands->id : '';
            $new_products[$count]['category']        = $product->category;
            $new_products[$count]['image']           = $product->getMedia(config('constants.media_tags'))->first() ? getMediaUrl($product->getMedia(config('constants.media_tags'))->first()) : '';
            $new_products[$count]['abs_img_url']     = $product->getMedia(config('constants.media_tags'))->first() ? $product->getMedia(config('constants.media_tags'))->first()->getAbsolutePath() : '';
            $new_products[$count]['customer_id']     = ! empty($product->orderproducts->first()->order) ? (! empty($product->orderproducts->first()->order->customer) ? $product->orderproducts->first()->order->customer->id : 'No Customer') : 'No Order';
            $new_products[$count]['customers']       = $customers;
            $new_products[$count]['customer_names']  = '';
            $new_products[$count]['order_products']  = $product->orderproducts;
            $new_products[$count]['order_price']     = ! empty($product->orderproducts->first()->product_price) ? $product->orderproducts->first()->product_price : 0;
            $new_products[$count]['order_date']      = ! empty($product->orderproducts->first()->order) ? $product->orderproducts->first()->order->order_date : 'No Order';
            $new_products[$count]['order_advance']   = ! empty($product->orderproducts->first()->order) ? $product->orderproducts->first()->order->advance_detail : 'No Order';
            $new_products[$count]['supplier_msg']    = $supplier_msg_data;
            $new_products[$count]['size']            = implode(',', array_unique($sizeArr));

            $count++;
        }

        $new_products = array_values(Arr::sort($new_products, function ($value) {
            return $value['order_date'];
        }));

        $new_products = array_reverse($new_products);

        $suppliers_all  = [];
        $suppliersQuery = DB::select('SELECT sp.id FROM `scraped_products` sp
            join scrapers sc on sc.scraper_name =  sp.website
            JOIN suppliers s ON s.id=sc.supplier_id 
            inner join order_products op on op.product_id = sp.product_id where last_inventory_at > DATE_SUB(NOW(), INTERVAL sc.inventory_lifetime DAY)');
        $cnt = count($suppliersQuery);

        if ($cnt > 0 && ! empty($productIds)) {
            $suppliers_all = DB::select('SELECT id, supplier, product_id
          FROM suppliers
          INNER JOIN (
            SELECT supplier_id FROM product_suppliers GROUP BY supplier_id
            ) as product_suppliers
          ON suppliers.id = product_suppliers.supplier_id
          LEFT JOIN purchase_product_supplier on purchase_product_supplier.supplier_id =suppliers.id and product_id in ( :product_id )', ['product_id' => implode(',', $productIds)]);
        }
        $activSuppliers = DB::select('SELECT 
                                        suppliers.id, 
                                        supplier,
                                        "" as product_id
                                    FROM 
                                        suppliers
                                    WHERE
                                        suppliers.status=1 and  deleted_at is null');
        if ($request->get('in_pdf') === 'on') {
            set_time_limit(0);

            $html = view('purchase.purchase-grid-pdf')->with([
                'products'        => $new_products,
                'order_status'    => $order_status,
                'supplier_list'   => $supplier_list,
                'suppliers_array' => $suppliers_array,
                'suppliers_all'   => $suppliers_all,
                'term'            => $term,
                'status'          => $status,
                'supplier'        => $supplier,
                'brand'           => $brand,
                'page'            => $page,
            ]);

            $pdf = new Dompdf();
            $pdf->loadHtml($html);
            $pdf->render();
            $pdf->stream('orders.pdf');

            return;
        }

        $currentPage  = LengthAwarePaginator::resolveCurrentPage();
        $perPage      = Setting::get('pagination');
        $currentItems = array_slice($new_products, $perPage * ($currentPage - 1), $perPage);

        $totalSku     = count($new_products);
        $new_products = new LengthAwarePaginator($currentItems, count($new_products), $perPage, $currentPage, [
            'path' => LengthAwarePaginator::resolveCurrentPath(),
        ]);

        $category_selection = \App\Category::attr(['name' => 'category[]', 'class' => 'form-control select-multiple2'])->selected(1)->renderAsDropdown();
        $categoryFilter     = \App\Category::attr(['name' => 'category_id', 'class' => 'form-control select-multiple2'])->selected(request()->get('category_id', 1))->renderAsDropdown();

        $suppliers = Supplier::select(['id', 'supplier'])->whereIn('id', DB::table('product_suppliers')->selectRaw('DISTINCT(`supplier_id`) as suppliers')->pluck('suppliers')->toArray())->get();

        return view('purchase.purchase-grid')->with([
            'products'           => $new_products,
            'order_status'       => $order_status,
            'supplier_list'      => $supplier_list,
            'suppliers_array'    => $suppliers_array,
            'suppliers_all'      => $suppliers_all,
            'term'               => $term,
            'status'             => $status,
            'supplier'           => $supplier,
            'brand'              => $brand,
            'page'               => $page,
            'category_selection' => $category_selection,
            'activSuppliers'     => $activSuppliers,
            'categoryFilter'     => $categoryFilter,
            'suppliers'          => $suppliers,
            'totalSku'           => $totalSku,
        ]);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }

    public function export(Request $request)
    {
        $selected_purchases = json_decode($request->selected_purchases);

        foreach ($selected_purchases as $purchase_id) {
            $purchase         = Purchase::find($purchase_id);
            $purchase->status = 'Request Sent to Supplier';
            $purchase->save();
        }

        $path = 'purchase_exports/' . Carbon::now()->format('Y-m-d-H-m-s') . '_purchases_export.xlsx';

        Excel::store(new PurchasesExport($selected_purchases), $path, 'files');

        return Storage::disk('files')->download($path);
    }

    public function sendExport(Request $request)
    {
        $path     = 'purchase_exports/' . Carbon::now()->format('Y-m-d-H-m-s') . '_purchases_export.xlsx';
        $filename = Carbon::now()->format('Y-m-d-H-m-s') . '_purchases_export.xlsx';

        if ($request->hasFile('file')) {
            $file = $request->file('file');
            $file->storeAs('purchase_exports', $filename, 'files');
        }

        $first_agent_email = '';
        $cc_agents_emails  = [];
        foreach ($request->agent_id as $key => $agent_id) {
            $agent = Agent::find($agent_id);

            if ($key == 0) {
                $first_agent_email = $agent->email;
            } else {
                $cc_agents_emails[] = $agent->email;
            }
        }

        $emailClass = (new PurchaseExport($path, $request->subject, $request->message))->build();
        $from_email = \App\Helpers::getFromEmail();
        $email      = Email::create([
            'model_id'        => $request->supplier_id,
            'model_type'      => Supplier::class,
            'from'            => $from_email,
            'to'              => $first_agent_email,
            'subject'         => $request->subject,
            'message'         => $request->message,
            'template'        => 'purchase-simple',
            'additional_data' => json_encode(['attachment' => $path]),
            'status'          => 'pre-send',
        ]);

        \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');

        return redirect()->back()->withSuccess('You have successfully sent an email!');
    }

    public function downloadFile(Request $request, $id)
    {
        $file = File::find($id);

        return Storage::disk('files')->download('files/' . $file->filename);
    }

    public function downloadAttachments(Request $request)
    {
        return Storage::disk('files')->download($request->path);
    }

    public function merge(Request $request)
    {
        $selected_purchases = json_decode($request->selected_purchases);

        foreach ($selected_purchases as $key => $purchase_id) {
            if ($key == 0) {
                $main_purchase = Purchase::find($purchase_id);
            } else {
                $merging_purchase = Purchase::find($purchase_id);

                if ($main_purchase->transaction_amount == '' || $main_purchase->shipment_cost == '') {
                    $main_purchase->transaction_id     = $merging_purchase->transaction_id;
                    $main_purchase->transaction_date   = $merging_purchase->transaction_date;
                    $main_purchase->transaction_amount = $merging_purchase->transaction_amount;
                    $main_purchase->bill_number        = $merging_purchase->bill_number;
                    $main_purchase->shipper            = $merging_purchase->shipper;
                    $main_purchase->shipment_status    = $merging_purchase->shipment_status;
                    $main_purchase->shipment_cost      = $merging_purchase->shipment_cost;
                    $main_purchase->save();
                }

                foreach ($merging_purchase->purchaseProducts as $product) {
                    $purchaseProducts                   = new \App\PurchaseProduct;
                    $purchaseProducts->purchase_id      = $main_purchase->id;
                    $purchaseProducts->product_id       = $product->product_id;
                    $purchaseProducts->order_product_id = $product->order_product_id;
                    $purchaseProducts->save();
                }

                $merging_purchase->products()->detach();

                $remarks = Remark::where('taskid', $merging_purchase->id)->where('module_type', 'purchase-product-remark')->get();

                foreach ($remarks as $remark) {
                    $remark->taskid = $main_purchase->id;
                    $remark->save();
                }

                $purchase_discounts = PurchaseDiscount::where('purchase_id', $merging_purchase->id)->get();

                foreach ($purchase_discounts as $discount) {
                    $discount->purchase_id = $main_purchase->id;
                    $discount->save();
                }

                $merging_purchase->delete();
            }
        }

        return redirect()->route('purchase.index')->with('success', 'You have successfully merged purchases');
    }

    public function assignBatch(Request $request, $id)
    {
        $purchase = Purchase::find($id);

        if ($purchase->products) {
            foreach ($purchase->products as $product) {
                if ($product->orderproducts) {
                    foreach ($product->orderproducts as $order_product) {
                        $order_product->purchase_id  = $id;
                        $order_product->batch_number = '';
                        $order_product->save();
                    }
                }
            }
        }

        return redirect()->route('purchase.show', $id)->withSuccess('You have successfully assigned a batch number!');
    }

    public function assignSplitBatch(Request $request, $id)
    {
        $max_batch_number = OrderProduct::where('purchase_id', $id)->latest('batch_number')->first();

        if ($max_batch_number) {
            foreach (json_decode($request->order_products) as $order_product_id) {
                $order_product               = OrderProduct::find($order_product_id);
                $order_product->purchase_id  = $id;
                $order_product->batch_number = (int) $max_batch_number->batch_number + 1;
                $order_product->save();
            }
        } else {
            foreach (json_decode($request->order_products) as $order_product_id) {
                $order_product               = OrderProduct::find($order_product_id);
                $order_product->purchase_id  = $id;
                $order_product->batch_number = 1;
                $order_product->save();
            }
        }

        return redirect()->route('purchase.show', $id)->withSuccess('You have successfully assigned a batch number!');
    }

    public function calendar()
    {
        $purchases      = Purchase::whereNotNull('shipment_date')->get();
        $order_products = OrderProduct::whereNotNull('shipment_date')->get();
        $purchase_data  = [];

        foreach ($order_products as $order_product) {
            if ($order_product->order && $order_product->order->customer) {
                $purchase_data[] = [
                    'customer_id'       => $order_product->order->customer->id,
                    'order_product_id'  => $order_product->id,
                    'customer_name'     => $order_product->order->customer->name,
                    'customer_city'     => $order_product->order->customer->city,
                    'shipment_date'     => $order_product->shipment_date,
                    'product_name'      => $order_product->product->name,
                    'reschedule_count'  => $order_product->reschedule_count,
                    'is_order_priority' => $order_product->order->is_priority,
                ];
            }
        }

        return view('purchase.calendar', [
            'purchase_data' => $purchase_data,
        ]);
    }

    /**
     * Store a newly created resource in storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $this->validate($request, [
            'purchase_handler' => 'required',
            'order_products'   => 'required',
        ]);

        $supllierWise         = [];
        $postOP               = json_decode($request->order_products, true);
        $supplierWiseProducts = [];

        if (! empty($postOP)) {
            foreach ($postOP as $post) {
                @[$opId, $supplierId]                = explode('#', $post);
                $supplierId                          = ! empty($supplierId) ? $supplierId : 0;
                $supplierWiseProducts[$supplierId][] = $opId;
            }
        }

        if (! empty($supplierWiseProducts)) {
            foreach ($supplierWiseProducts as $productList) {
                // assing purchase supllier wise
                $purchase                   = new Purchase;
                $purchase->purchase_handler = $request->purchase_handler;
                $purchase->supplier_id      = $request->supplier_id;
                $purchase->status           = 'Pending Purchase';

                // now store the order products
                if ($purchase->save()) {
                    // find all order products
                    $orderProducts = \App\OrderProduct::whereIn('id', $productList)->get();

                    if (! $orderProducts->isEmpty()) {
                        foreach ($orderProducts as $orderProduct) {
                            \App\PurchaseProduct::insert([
                                'purchase_id'      => $purchase->id,
                                'product_id'       => $orderProduct->product->id,
                                'order_product_id' => $orderProduct->id,
                            ]);

                            $orderProduct->purchase_status = 'Pending Purchase';
                            $orderProduct->save();
                        }
                    }
                    // storing in product end
                }
            }
        }

        return redirect()->route('purchase.index');
    }

    public function updateDelivery(Request $request, $id)
    {
        $order_product                = OrderProduct::find($id);
        $old_shipment_date            = $order_product->shipment_date;
        $order_product->shipment_date = $request->shipment_date;
        $order_product->reschedule_count += 1;
        $order_product->save();

        if (! $order_product->is_delivery_date_changed()) {
            // Customer Message
            $params = [
                'number'   => null,
                'user_id'  => Auth::id(),
                'approved' => 0,
                'status'   => 1,
            ];

            if ($order_product->private_view) {
                $delivery_date         = Carbon::parse($order_product->shipment_date)->format('d \of\ F');
                $product_name          = $order_product->product->name;
                $params['customer_id'] = $order_product->private_view->customer_id;
                $params['message']     = "Your product $product_name delivery time has been rescheduled. It will be delivered on $delivery_date";

                $chat_message = ChatMessage::create($params);
            }

            CommunicationHistory::create([
                'model_id'   => $order_product->id,
                'model_type' => OrderProduct::class,
                'type'       => 'order-delivery-date-changed',
                'method'     => 'whatsapp',
            ]);
        }

        return response('success', 200);
    }

    /**
     * Display the specified resource.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        $purchase         = Purchase::find($id);
        $data['emails']   = [];
        $data['comments'] = Comment::with('user')->where('subject_id', $purchase->id)
            ->where('subject_type', '=', Order::class)->get();
        $data['users']              = User::all()->toArray();
        $messages                   = Message::all()->where('moduleid', $purchase->id)->where('moduletype', '=', 'purchase')->sortByDesc('created_at')->take(10)->toArray();
        $data['messages']           = $messages;
        $data['tasks']              = Task::where('model_type', 'purchase')->where('model_id', $purchase->id)->get()->toArray();
        $data['approval_replies']   = Reply::where('model', 'Approval Purchase')->get();
        $data['internal_replies']   = Reply::where('model', 'Internal Purchase')->get();
        $data['purchase_status']    = (new PurchaseStatus)->all();
        $data['reply_categories']   = ReplyCategory::all();
        $data['suppliers']          = Supplier::all();
        $data['purchase_discounts'] = PurchaseDiscount::where('purchase_id', $id)->where('type', 'product')->latest()->take(3)->get()->groupBy([
            function ($query) {
                return Carbon::parse($query->created_at)->format('Y-m-d H:i:s');
            },
            'product_id',
        ]);

        $data['purchase_discounts_rest'] = PurchaseDiscount::where('purchase_id', $id)->where('type', 'product')->latest()->skip(3)->take(30)->get()->groupBy([
            function ($query) {
                return Carbon::parse($query->created_at)->format('Y-m-d H:i:s');
            },
            'product_id',
        ]);

        $data['agents_array'] = [];
        $agents               = Agent::all();

        foreach ($agents as $agent) {
            $data['agents_array'][$agent->model_id][$agent->id] = $agent->name . ' - ' . $agent->email;
        }

        return view('purchase.show', $data)->withOrder($purchase);
    }

    public function productShow($id)
    {
        $product = Product::find($id);

        $data['users']            = User::all()->toArray();
        $messages                 = Message::all()->where('moduleid', $product->id)->where('moduletype', '=', 'product')->sortByDesc('created_at')->take(10)->toArray();
        $data['messages']         = $messages;
        $data['approval_replies'] = Reply::where('model', 'Approval Purchase')->get();
        $data['internal_replies'] = Reply::where('model', 'Internal Purchase')->get();
        $data['order_details']    = OrderProduct::where('sku', $product->sku)->get(['order_id', 'size']);

        return view('purchase.product-show', $data)->withProduct($product);
    }

    public function productReplace(Request $request)
    {
        $old_product = Product::find($request->moduleid);
        $new_product = Product::find(json_decode($request->images)[0]);

        foreach ($old_product->purchases as $purchase) {
            $purchase->products()->detach($old_product);
            $purchase->products()->attach($new_product);
        }

        foreach ($old_product->orderproducts as $order_product) {
            $new_order                  = new OrderProduct;
            $new_order->order_id        = $order_product->order_id;
            $new_order->sku             = $new_product->sku;
            $new_order->product_id      = $new_product->id;
            $new_order->product_price   = $new_product->price_inr_special;
            $new_order->size            = $order_product->size;
            $new_order->color           = $order_product->color;
            $new_order->purchase_status = 'Pending Purchase';
            $new_order->save();

            $order_product->purchase_status = 'Replaced';
            $order_product->save();
        }

        PurchaseDiscount::where('product_id', $old_product->id)->delete();

        return redirect()->route('purchase.index')->with('success', 'You have successfully replaced product!');
    }

    public function productRemove(Request $request, $id)
    {
        $product  = Product::find($id);
        $purchase = Purchase::find($request->purchase_id);

        $purchase->products()->detach($product);

        PurchaseDiscount::where('product_id', $id)->delete();

        return redirect()->route('purchase.show', $request->purchase_id)->with('success', 'You have successfully removed product!');
    }

    public function productCreateReplace(Request $request)
    {
        $this->validate($request, [
            'sku' => 'required|unique:products',
        ]);

        $product = new Product;

        $product->name     = $request->name;
        $product->sku      = $request->sku;
        $product->size     = $request->size;
        $product->brand    = $request->brand;
        $product->color    = $request->color;
        $product->supplier = $request->supplier;
        $product->price    = $request->price;

        $brand = Brand::find($request->brand);

        if ($request->price) {
            if (isset($request->brand) && ! empty($brand->euro_to_inr)) {
                $product->price_inr = $brand->euro_to_inr * $product->price;
            } else {
                $product->price_inr = Setting::get('euro_to_inr') * $product->price;
            }

            $product->price_inr         = round($product->price_inr, -3);
            $product->price_inr_special = $product->price_inr - ($product->price_inr * $brand->deduction_percentage) / 100;

            $product->price_inr_special = round($product->price_inr_special, -3);
        }

        $product->save();

        $product->detachMediaTags(config('constants.media_tags'));
        $media = MediaUploader::fromSource($request->file('image'))
            ->toDirectory('product/' . floor($product->id / config('constants.image_per_folder')))
            ->upload();
        $product->attachMedia($media, config('constants.media_tags'));

        $old_product = Product::find($request->product_id);

        foreach ($old_product->purchases as $purchase) {
            $purchase->products()->detach($old_product);
            $purchase->products()->attach($product);
        }

        foreach ($old_product->orderproducts as $order_product) {
            $new_order                  = new OrderProduct;
            $new_order->order_id        = $order_product->order_id;
            $new_order->sku             = $product->sku;
            $new_order->product_price   = $product->price_inr_special;
            $new_order->size            = $order_product->size;
            $new_order->color           = $order_product->color;
            $new_order->purchase_status = 'Pending Purchase';
            $new_order->save();

            $order_product->purchase_status = 'Replaced';
            $order_product->save();
        }

        PurchaseDiscount::where('product_id', $old_product->id)->delete();

        return redirect()->back()->with('success', 'You have successfully created and replaced product!');
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        //
    }

    public function updateStatus(Request $request, $id)
    {
        $purchase = Purchase::find($id);

        StatusChange::create([
            'model_id'    => $purchase->id,
            'model_type'  => Purchase::class,
            'user_id'     => Auth::id(),
            'from_status' => $purchase->status,
            'to_status'   => $request->status,
        ]);

        $purchase->status = $request->status;
        $purchase->save();

        if ($request->status == 'Shipment Received in Dubai') {
            $product_names = '';

            if ($purchase->products) {
                foreach ($purchase->products as $product) {
                    $supplier = Supplier::where('supplier', 'In-stock')->first();

                    $product->supplier = 'In-stock';
                    $product->location = 'Dubai';
                    $product->save();

                    $product->suppliers()->syncWithoutDetaching($supplier);

                    $product_names .= "$product->name, ";
                }
            }

            if (! $purchase->is_sent_in_dubai()) {
                // Making task for Yogesh
                $data = [
                    'task_subject' => 'Shipment to India',
                    'task_details' => "Please arrange shipment for India - ID $purchase->id",
                    'is_statutory' => 0,
                    'assign_from'  => Auth::id(),
                    'assign_to'    => 6,
                    'category'     => 12,
                ];

                $task = Task::create($data);

                $task->users()->attach([6 => ['type' => User::class]]);

                // Message to Carier
                $params = [
                    'number'   => null,
                    'user_id'  => Auth::id(),
                    'message'  => "These pcs: $product_names are available for shipment to India - confirm if urgency needed to drop for faster transit",
                    'approved' => 0,
                    'status'   => 1,
                ];

                $chat_message = ChatMessage::create($params);

                $whatsapp_number = Auth::user()->whatsapp_number != '' ? Auth::user()->whatsapp_number : null;

                $stock_coordinators = User::role('Stock Coordinator')->get();

                foreach ($stock_coordinators as $coordinator) {
                    $params['erp_user'] = $coordinator->id;
                    $chat_message       = ChatMessage::create($params);

                    $whatsapp_number = $coordinator->whatsapp_number != '' ? $coordinator->whatsapp_number : null;

                    app(\App\Http\Controllers\WhatsAppController::class)->sendWithNewApi($coordinator->phone, $whatsapp_number, $params['message'], null, $chat_message->id);

                    $chat_message->update([
                        'approved' => 1,
                        'status'   => 2,
                    ]);
                }

                CommunicationHistory::create([
                    'model_id'   => $purchase->id,
                    'model_type' => Purchase::class,
                    'type'       => 'purchase-in-dubai',
                    'method'     => 'whatsapp',
                ]);
            }
        }

        $product_information = '';
        $letters_array       = [
            '1' => 'A',
            '2' => 'B',
            '3' => 'C',
            '4' => 'D',
            '5' => 'E',
            '6' => 'F',
            '7' => 'G',
        ];

        if ($request->status == 'Shipment in Transit from Dubai to India') {
            if (! $purchase->is_sent_dubai_to_india()) {
                $product_names = '';

                if ($purchase->products) {
                    foreach ($purchase->products as $key => $product) {
                        $product_names .= "$product->name - ";

                        if ($key == 0) {
                            $product_information .= "$product->name - Size $product->size - $product->color";
                        } else {
                            $product_information .= ", $product->name - Size $product->size - $product->color";
                        }

                        if ($product->orderproducts) {
                            foreach ($product->orderproducts as $order_product) {
                                $batch_number = $order_product->purchase_id . (array_key_exists($order_product->batch_number, $letters_array) ? $letters_array[$order_product->batch_number] : '');
                                $product_names .= "#$batch_number, ";

                                if ($order_product->order && $order_product->order->customer) {
                                    $product_information .= $order_product->order->customer->address . ', ' . $order_product->order->customer->pincode . ', ' . $order_product->order->customer->city . '; ';
                                }
                            }
                        }
                    }
                }

                // Message to Stock Coordinator
                $params = [
                    'number'   => null,
                    'user_id'  => Auth::id(),
                    'message'  => "These pcs: $product_names are expected to arrive in India - x + 2 days -pls. coordinate and arrange collection",
                    'approved' => 0,
                    'status'   => 1,
                ];

                $stock_coordinators = User::role('Stock Coordinator')->get();

                foreach ($stock_coordinators as $coordinator) {
                    $params['erp_user'] = $coordinator->id;
                    $chat_message       = ChatMessage::create($params);

                    $whatsapp_number = $coordinator->whatsapp_number != '' ? $coordinator->whatsapp_number : null;

                    app(\App\Http\Controllers\WhatsAppController::class)->sendWithNewApi($coordinator->phone, $whatsapp_number, $params['message'], null, $chat_message->id);

                    $chat_message->update([
                        'approved' => 1,
                        'status'   => 2,
                    ]);
                }

                // Message to Delivery Coordinator
                $params = [
                    'number'   => null,
                    'user_id'  => Auth::id(),
                    'message'  => "This: $product_information are expected to arrive in India - x + 2 days to you. - for delivery to the follow customers pls. coordinate",
                    'approved' => 0,
                    'status'   => 1,
                ];

                $coordinators = User::role('Delivery Coordinator')->get();

                foreach ($coordinators as $coordinator) {
                    $params['erp_user'] = $coordinator->id;
                    $chat_message       = ChatMessage::create($params);

                    $whatsapp_number = $coordinator->whatsapp_number != '' ? $coordinator->whatsapp_number : null;

                    app(\App\Http\Controllers\WhatsAppController::class)->sendWithNewApi($coordinator->phone, $whatsapp_number, $params['message'], null, $chat_message->id);

                    $chat_message->update([
                        'approved' => 1,
                        'status'   => 2,
                    ]);
                }

                CommunicationHistory::create([
                    'model_id'   => $purchase->id,
                    'model_type' => Purchase::class,
                    'type'       => 'purchase-dubai-to-india',
                    'method'     => 'whatsapp',
                ]);
            }
        }

        if ($request->status == 'Shipment Received in India') {
            if ($purchase->products && ! $purchase->is_sent_in_mumbai()) {
                foreach ($purchase->products as $product) {
                    $supplier = Supplier::where('supplier', 'In-stock')->first();

                    $product->location = 'Mumbai';
                    $product->save();

                    $product->suppliers()->syncWithoutDetaching($supplier);

                    if ($product->orderproducts) {
                        $params = [
                            'number'   => null,
                            'user_id'  => Auth::id(),
                            'approved' => 0,
                            'status'   => 1,
                            'message'  => 'Your Order is received in India',
                        ];

                        foreach ($product->orderproducts as $order_product) {
                            if ($order_product->order && $order_product->order->customer) {
                                $params['customer_id'] = $order_product->order->customer->id;

                                ChatMessage::create($params);

                                // Creating inventory for Aliya
                                $private_view              = new PrivateView;
                                $private_view->customer_id = $order_product->order->customer->id;
                                $private_view->date        = Carbon::now()->addDays(3);
                                $private_view->save();

                                $private_view->products()->attach($product);
                            }
                        }
                    }
                }

                CommunicationHistory::create([
                    'model_id'   => $purchase->id,
                    'model_type' => Purchase::class,
                    'type'       => 'purchase-in-mumbai',
                    'method'     => 'whatsapp',
                ]);

                // Message to Aliya about time ?
                $params = [
                    'number'   => null,
                    'user_id'  => Auth::id(),
                    'message'  => 'Orders are in India, please coordinate',
                    'approved' => 0,
                    'status'   => 1,
                ];

                $coordinators = User::role('Delivery Coordinator')->get();

                foreach ($coordinators as $coordinator) {
                    $params['erp_user'] = $coordinator->id;
                    $chat_message       = ChatMessage::create($params);

                    $whatsapp_number = $coordinator->whatsapp_number != '' ? $coordinator->whatsapp_number : null;

                    app(\App\Http\Controllers\WhatsAppController::class)->sendWithNewApi($coordinator->phone, $whatsapp_number, $params['message'], null, $chat_message->id);

                    $chat_message->update([
                        'approved' => 1,
                        'status'   => 2,
                    ]);
                }

                // Message to Stock Holder
                $params = [
                    'number'   => null,
                    'user_id'  => Auth::id(),
                    'message'  => 'Confirm Aliyas time if it is ok to hand over the products',
                    'approved' => 0,
                    'status'   => 1,
                ];

                $stock_coordinators = User::role('Stock Coordinator')->get();

                foreach ($stock_coordinators as $coordinator) {
                    $params['erp_user'] = $coordinator->id;
                    $chat_message       = ChatMessage::create($params);

                    $whatsapp_number = $coordinator->whatsapp_number != '' ? $coordinator->whatsapp_number : null;

                    app(\App\Http\Controllers\WhatsAppController::class)->sendWithNewApi($coordinator->phone, $whatsapp_number, $params['message'], null, $chat_message->id);

                    $chat_message->update([
                        'approved' => 1,
                        'status'   => 2,
                    ]);
                }
            }
        }

        foreach ($purchase->products as $product) {
            foreach ($product->orderproducts as $order_product) {
                if ($request->status != $order_product->purchase_status) {
                    StatusChange::create([
                        'model_id'    => $order_product->id,
                        'model_type'  => OrderProduct::class,
                        'user_id'     => Auth::id(),
                        'from_status' => $order_product->purchase_status,
                        'to_status'   => $request->status,
                    ]);
                }

                $order_product->purchase_status = $request->status;
                $order_product->save();
            }

            $product->purchase_status = $purchase->status;
            $product->save();
        }

        return response($purchase->status);
    }

    public function updateProductStatus(Request $request, $id)
    {
        $product                  = Product::find($request->product_id);
        $product->purchase_status = $request->status;
        $product->save();

        $params = [
            'number'   => null,
            'user_id'  => Auth::id(),
            'approved' => 0,
            'status'   => 1,
            'message'  => 'Your Product is not available with the Supplier. Please choose alternative',
        ];

        foreach ($product->purchases as $purchase) {
            if ($purchase->id == $id) {
                foreach ($purchase->products as $related_product) {
                    if ($related_product->id == $product->id) {
                        foreach ($product->orderproducts as $order_product) {
                            if ($order_product->order) {
                                $params['customer_id'] = $order_product->order->customer->id;

                                ChatMessage::create($params);
                            }
                        }
                    }
                }
            }
        }

        return response('success');
    }

    public function updatePercentage(Request $request, $id)
    {
        foreach ($request->percentages as $percentage) {
            $product             = Product::find($percentage[0]);
            $product->percentage = $percentage[1];
            $product->save();

            PurchaseDiscount::create([
                'purchase_id' => $request->purchase_id,
                'product_id'  => $percentage[0],
                'percentage'  => $percentage[1],
                'amount'      => $request->amount,
                'type'        => $request->type,
            ]);
        }

        $purchase         = Purchase::find($request->purchase_id);
        $purchase->status = 'Price under Negotiation';
        $purchase->save();

        return response('success');
    }

    public function saveBill(Request $request, $id)
    {
        $purchase                     = Purchase::find($id);
        $purchase->supplier_id        = $request->supplier;
        $purchase->agent_id           = $request->agent_id;
        $purchase->transaction_id     = $request->transaction_id;
        $purchase->transaction_date   = $request->transaction_date;
        $purchase->transaction_amount = $request->transaction_amount;
        $purchase->bill_number        = $request->bill_number;
        $purchase->shipper            = $request->shipper;
        $purchase->shipment_cost      = $request->shipment_cost;
        $purchase->shipment_date      = $request->shipment_date;
        $purchase->shipment_status    = $request->shipment_status;
        $purchase->supplier_phone     = $request->supplier_phone;
        $purchase->whatsapp_number    = $request->whatsapp_number;

        if ($request->bill_number != '') {
            $purchase->status = 'AWB Details Received';
        }

        if ($request->transaction_date != '') {
            if (! $purchase->is_sent_awb_actions()) {
                // Task to Sushil
                $data = [
                    'task_subject' => 'Purchase Delivery',
                    'task_details' => "Please Follow up with Purchase Delivery - ID $purchase->id",
                    'is_statutory' => 0,
                    'assign_from'  => Auth::id(),
                    'assign_to'    => 7,
                    'category'     => 12,
                ];

                $task = Task::create($data);

                $task->users()->attach([7 => ['type' => User::class]]);

                // Message to Yogesh
                $params = [
                    'number'   => null,
                    'user_id'  => Auth::id(),
                    'approved' => 1,
                    'status'   => 2,
                    'erp_user' => 6,
                    'message'  => "Products from Purchase ID $purchase->id are in transit",
                ];

                $chat_message = ChatMessage::create($params);
                $yogesh       = User::find(6);

                // Customer Message
                $params = [
                    'number'   => null,
                    'user_id'  => Auth::id(),
                    'approved' => 0,
                    'status'   => 1,
                ];

                $delivery_information = '';
                foreach ($purchase->products as $product) {
                    if ($product->orderproducts) {
                        foreach ($product->orderproducts as $order_product) {
                            // Update Order Product Details
                            $order_product->shipment_date = Carbon::parse($request->transaction_date)->addDays(12);
                            $order_product->save();

                            if ($order_product->order && $order_product->order->customer) {
                                $shipment_days         = Carbon::parse($order_product->shipment_date)->diffInDays(Carbon::now());
                                $params['customer_id'] = $order_product->order->customer->id;
                                $params['message']     = "Your product $product->name has been shipped from our Italy office and is expected to be delivered to you in $shipment_days days - account for weekend and holiday";

                                $chat_message = ChatMessage::create($params);

                                // Aliya message details
                                $customer_city = $order_product->order->customer->city;
                                $customer_name = $order_product->order->customer->name;
                                $delivery_information .= "$customer_city - $product->name for $customer_name; ";

                                // Creating inventory for Aliya
                                $private_view                   = new PrivateView;
                                $private_view->customer_id      = $order_product->order->customer->id;
                                $private_view->order_product_id = $order_product->id;
                                $private_view->date             = Carbon::parse($order_product->shipment_date)->addDays(10);
                                $private_view->save();

                                $private_view->products()->attach($product);
                            }
                        }
                    }
                }

                // throw new Exception($delivery_information);

                $params = [
                    'number'   => null,
                    'user_id'  => Auth::id(),
                    'message'  => "These are the shipments that need to be delivered in the next 12 days and please ensure office boys are allocated and all travel bookings are made $delivery_information",
                    'approved' => 0,
                    'status'   => 1,
                ];

                $coordinators = User::role('Delivery Coordinator')->get();

                foreach ($coordinators as $coordinator) {
                    $params['erp_user'] = $coordinator->id;
                    $chat_message       = ChatMessage::create($params);

                    $whatsapp_number = $coordinator->whatsapp_number != '' ? $coordinator->whatsapp_number : null;

                    // throw new Exception($coordinator->id);

                    app(\App\Http\Controllers\WhatsAppController::class)->sendWithNewApi($coordinator->phone, $whatsapp_number, $params['message'], null, $chat_message->id);

                    $chat_message->update([
                        'approved' => 1,
                        'status'   => 2,
                    ]);
                }

                CommunicationHistory::create([
                    'model_id'   => $id,
                    'model_type' => Purchase::class,
                    'type'       => 'purchase-awb-generated',
                    'method'     => 'whatsapp',
                ]);
            }
        }

        $purchase->save();

        if ($request->hasFile('files')) {
            foreach ($request->file('files') as $file) {
                $original_name = $file->getClientOriginalName();
                $filename      = pathinfo($original_name, PATHINFO_FILENAME);
                $extension     = $file->getClientOriginalExtension();

                $full_name = $filename . '.' . $extension;

                $file->storeAs('files', $full_name, 'files');

                $new_file             = new File;
                $new_file->filename   = $full_name;
                $new_file->model_id   = $id;
                $new_file->model_type = Purchase::class;
                $new_file->save();
            }
        }

        return response()->json(['data' => $request->all()]);
    }

    public function confirmProforma(Request $request, $id)
    {
        $purchase     = Purchase::find($id);
        $matched      = 0;
        $total_amount = 0;
        foreach ($request->proformas as $data) {
            $product          = Product::find($data[0]);
            $discounted_price = round(($product->price - ($product->price * $product->percentage / 100)) / 1.22);
            $proforma         = $data[1];
            $total_amount += $proforma;
            if (($proforma - $discounted_price) < 10) {
                $matched++;
            }
        }
        if ($matched == count($request->proformas)) {
            $purchase->proforma_confirmed = 1;
            $purchase->proforma_id        = $request->proforma_id;
            $purchase->proforma_date      = $request->proforma_date;

            $purchase->status = 'Price Confirmed - Payment in Process';
            $purchase->save();
            event(new ProformaConfirmed($purchase, $total_amount));
        }

        return response()->json([
            'proforma_confirmed' => $purchase->proforma_confirmed,
        ]);
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        $purchase = Purchase::find($id);

        $purchase->delete();

        return redirect()->route('purchase.index')->with('success', 'Purchase has been archived');
    }

    public function permanentDelete($id)
    {
        $purchase = Purchase::find($id);

        $purchase->products()->detach();
        $purchase->forceDelete();

        return redirect()->route('purchase.index')->with('success', 'Purchase has been deleted');
    }

    public function getOrderProductsWithProductData($order_id)
    {
        $orderProducts = OrderProduct::where('order_id', '=', $order_id)->get()->toArray();
        $temp          = [];
        foreach ($orderProducts as $key => $value) {
            if (! empty($orderProducts[$key]['color'])) {
                $temp = Product::where('sku', '=', $orderProducts[$key]['sku'])
                    ->where('color', $orderProducts[$key]['color'])->whereNotNull('supplier_link')
                    ->get()->first();
            } else {
                $temp = Product::where('sku', '=', $orderProducts[$key]['sku'])->whereNotNull('supplier_link')
                    ->get()->first();
            }

            if (! empty($temp)) {
                $orderProducts[$key]['product']          = $temp;
                $orderProducts[$key]['product']['image'] = $temp->getMedia(config('constants.media_tags'))->first() ? getMediaUrl($temp->getMedia(config('constants.media_tags'))->first()) : '';
            }
        }

        return $temp;
    }

    // EMAIL INBOX

    public function emailInbox(Request $request)
    {
        try {
            $cm   = new ClientManager();
            $imap = $cm->make([
                'host'          => env('IMAP_HOST_PURCHASE'),
                'port'          => env('IMAP_PORT_PURCHASE'),
                'encryption'    => env('IMAP_ENCRYPTION_PURCHASE'),
                'validate_cert' => env('IMAP_VALIDATE_CERT_PURCHASE'),
                'username'      => env('IMAP_USERNAME_PURCHASE'),
                'password'      => env('IMAP_PASSWORD_PURCHASE'),
                'protocol'      => env('IMAP_PROTOCOL_PURCHASE'),
            ]);

            $imap->connect();
            if ($request->supplier_id) {
                $supplier = Supplier::find($request->supplier_id);

                if ($request->type == 'inbox') {
                    $inbox_name = 'INBOX';
                    $direction  = 'from';
                    $type       = 'incoming';
                } else {
                    $inbox_name = 'INBOX.Sent';
                    $direction  = 'to';
                    $type       = 'outgoing';
                }

                $inbox = $imap->getFolder($inbox_name);

                $latest_email = Email::where('type', $type)->where('model_id', $supplier->id)->where(function ($query) {
                    $query->where('model_type', \App\Supplier::class)->orWhere('model_type', \App\Purchase::class);
                })->latest()->first();

                $latest_email_date = $latest_email
                    ? Carbon::parse($latest_email->created_at)
                    : Carbon::parse('1990-01-01');

                $supplierAgentsCount = $supplier->agents()->count();

                if ($supplierAgentsCount == 0) {
                    $emails = $inbox->messages()->where($direction, $supplier->email)->since(Carbon::parse($latest_email_date)->format('Y-m-d H:i:s'));
                    $emails = $emails->leaveUnread()->get();
                    $this->createEmailsForEmailInbox($supplier, $type, $latest_email_date, $emails);
                } else {
                    if ($supplierAgentsCount == 1) {
                        $emails = $inbox->messages()->where($direction, $supplier->agents[0]->email)->since(Carbon::parse($latest_email_date)->format('Y-m-d H:i:s'));
                        $emails = $emails->leaveUnread()->get();

                        $this->createEmailsForEmailInbox($supplier, $type, $latest_email_date, $emails);
                    } else {
                        foreach ($supplier->agents as $key => $agent) {
                            if ($key == 0) {
                                $emails = $inbox->messages()->where($direction, $agent->email)->where([
                                    ['SINCE', $latest_email_date->format('d M y H:i')],
                                ]);
                                $emails = $emails->leaveUnread()->get();
                                $this->createEmailsForEmailInbox($supplier, $type, $latest_email_date, $emails);
                            } else {
                                $additional = $inbox->messages()->where($direction, $agent->email)->since(Carbon::parse($latest_email_date)->format('Y-m-d H:i:s'));
                                $additional = $additional->leaveUnread()->get();
                                $this->createEmailsForEmailInbox($supplier, $type, $latest_email_date, $additional);
                            }
                        }
                    }
                }

                $db_emails = $supplier->emails()->with('model')->where('type', $type)->get();

                $emails_array = [];
                $count        = 0;
                foreach ($db_emails as $key2 => $email) {
                    $dateCreated = $email->created_at->format('D, d M Y');
                    $timeCreated = $email->created_at->format('H:i');
                    $userName    = null;
                    if ($email->model instanceof Supplier) {
                        $userName = $email->model->supplier;
                    } elseif ($email->model instanceof Customer) {
                        $userName = $email->model->name;
                    }
                    if ($email->model_type == \App\Supplier::class) {
                        $array = is_array(json_decode($email->additional_data, true)) ? json_decode($email->additional_data, true) : [];

                        if (array_key_exists('attachment', $array)) {
                            $attachment = json_decode($email->additional_data, true)['attachment'];
                            if (is_array($attachment)) {
                                foreach ($attachment as $attach) {
                                    $filename = explode('/', $attach);
                                    $filename = explode('.', end($filename));
                                    if (end($filename) == 'xlsx' || end($filename) == 'xls') {
                                        $log = LogExcelImport::where('supplier_email', $supplier->email)->where('filename', $filename[0])->first();
                                        if ($log != null) {
                                            if ($log->status == 1) {
                                                $alert[] = 'Excel import process';
                                            } elseif ($log->status == 2) {
                                                $alert[] = 'Excel import created';
                                            } elseif ($log->status == 0) {
                                                $alert[] = 'Excel import error';
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (! isset($alert)) {
                        $alert = [];
                    }
                    $emails_array[$count + $key2]['id']        = $email->id;
                    $emails_array[$count + $key2]['subject']   = $email->subject;
                    $emails_array[$count + $key2]['seen']      = $email->seen;
                    $emails_array[$count + $key2]['type']      = $email->type;
                    $emails_array[$count + $key2]['date']      = $email->created_at;
                    $emails_array[$count + $key2]['from']      = $email->from;
                    $emails_array[$count + $key2]['to']        = $email->to;
                    $emails_array[$count + $key2]['message']   = $email->message;
                    $emails_array[$count + $key2]['cc']        = $email->cc;
                    $emails_array[$count + $key2]['bcc']       = $email->bcc;
                    $emails_array[$count + $key2]['alert']     = $alert;
                    $emails_array[$count + $key2]['replyInfo'] = "On {
                $dateCreated} at {
                $timeCreated}, $userName <{
                $email->from}> wrote:";
                    $emails_array[$count + $key2]['dateCreated'] = $dateCreated;
                    $emails_array[$count + $key2]['timeCreated'] = $timeCreated;
                }

                $emails_array = array_values(Arr::sort($emails_array, function ($value) {
                    return $value['date'];
                }));

                $emails_array = array_reverse($emails_array);

                $perPage      = 10;
                $currentPage  = LengthAwarePaginator::resolveCurrentPage();
                $currentItems = array_slice($emails_array, $perPage * ($currentPage - 1), $perPage);
                $emails       = new LengthAwarePaginator($currentItems, count($emails_array), $perPage, $currentPage);

                $view = view('purchase.partials.email', ['emails' => $emails, 'type' => $request->type])->render();

                return response()->json(['emails' => $view]);
            } else {
                return response()->json(['message' => 'Something went wrong!'], 422);
            }
        } catch (Exception $e) {
            return response()->json(['message' => 'Something went wrong!'], 422);
        }
    }

    private function createEmailsForEmailInbox($supplier, $type, $latest_email_date, $emails)
    {
        foreach ($emails as $email) {
            $content = $email->hasHTMLBody() ? $email->getHTMLBody() : $email->getTextBody();

            if ($email->getDate()->format('Y-m-d H:i:s') > $latest_email_date->format('Y-m-d H:i:s')) {
                $attachments_array = [];
                $attachments       = $email->getAttachments();

                $attachments->each(function ($attachment) use (&$attachments_array) {
                    file_put_contents(storage_path('app/files/email-attachments/' . $attachment->name), $attachment->content);
                    $path                = 'email-attachments/' . $attachment->name;
                    $attachments_array[] = $path;
                });

                $params = [
                    'model_id'        => $supplier->id,
                    'model_type'      => Supplier::class,
                    'type'            => $type,
                    'seen'            => $email->getFlags()['seen'],
                    'from'            => $email->getFrom()[0]->mail,
                    'to'              => array_key_exists(0, $email->getTo()) ? $email->getTo()[0]->mail : $email->getReplyTo()[0]->mail,
                    'subject'         => $email->getSubject(),
                    'message'         => $content,
                    'template'        => 'customer-simple',
                    'additional_data' => json_encode(['attachment' => $attachments_array]),
                    'created_at'      => $email->getDate(),
                ];

                Email::create($params);
            }
        }
    }

    public function emailFetch(Request $request)
    {
        $imap = new Client([
            'host'          => env('IMAP_HOST_PURCHASE'),
            'port'          => env('IMAP_PORT_PURCHASE'),
            'encryption'    => env('IMAP_ENCRYPTION_PURCHASE'),
            'validate_cert' => env('IMAP_VALIDATE_CERT_PURCHASE'),
            'username'      => env('IMAP_USERNAME_PURCHASE'),
            'password'      => env('IMAP_PASSWORD_PURCHASE'),
            'protocol'      => env('IMAP_PROTOCOL_PURCHASE'),
        ]);

        $imap->connect();

        if ($request->type == 'inbox') {
            $inbox = $imap->getFolder('INBOX');
        } else {
            $inbox = $imap->getFolder('INBOX.Sent');
            $inbox->query();
        }

        if ($request->email_type == 'server') {
            $email = $inbox->getMessage($uid = $request->uid, null, null, true, true, true);
            if ($email->hasHTMLBody()) {
                $content = $email->getHTMLBody();
            } else {
                $content = $email->getTextBody();
            }

            $attachments_array = [];
            $attachments       = $email->getAttachments();

            $attachments->each(function ($attachment) use (&$content) {
                file_put_contents(storage_path('app/files/email-attachments/' . $attachment->name), $attachment->content);
                $path = 'email-attachments/' . $attachment->name;
                $content .= " <form action='" . route('purchase.download.attachments') . "' method='GET'><input type='hidden' name='path' value='" . $path . "' /><button type='submit' class='btn-link'>Attachment</button></form>";
            });
        } else {
            $email       = Email::find($request->uid);
            $email->seen = 1;
            $email->save();

            $to_email = $email->to;
            $array    = is_array(json_decode($email->additional_data, true)) ? json_decode($email->additional_data, true) : [];

            if (array_key_exists('attachment', $array)) {
                $attachment = json_decode($email->additional_data, true)['attachment'];
                if (is_array($attachment)) {
                    $content = $email->message;
                    foreach ($attachment as $attach) {
                        if ($email->model_type == \App\Supplier::class) {
                            $supplier = Supplier::find($email->model_id);
                            if ($supplier != null) {
                                $filename = explode('/', $attach);
                                $filename = explode('.', end($filename));
                                if (end($filename) == 'xlsx' || end($filename) == 'xls') {
                                    $log = LogExcelImport::where('supplier_email', $supplier->email)->where('filename', $filename[0])->first();
                                    if ($log != null) {
                                        if ($log->status == 1) {
                                            $alert = 'Excel import process';
                                        } elseif ($log->status == 2) {
                                            $alert = 'Excel import created';
                                        } else {
                                            $alert = 'Excel import error';
                                        }
                                    }
                                }
                            }
                        }
                        if (! isset($alert)) {
                            $alert = '';
                        }
                        $content .= " <form action='" . route('purchase.download.attachments') . "' method='GET'><input type='hidden' name='path' value='" . $attach . "' /><button type='submit' class='btn-link'>Attachment</button>
                        <button type='button' class='btn-secondary' onclick='processExcel(" . $email->id . ")' id='email" . $email->id . "' data-attached='" . $attach . "' >" . $alert . '</button></form>';
                    }
                } else {
                    $content = "$email->message <form action='" . route('purchase.download.attachments') . "' method='GET'><input type='hidden' name='path' value='" . $attachment . "' /><button type='submit' class='btn-link'>Attachment</button></form>";
                }
            } else {
                $content = $email->message;
            }
        }

        return response()->json([
            'email'    => $content,
            'to_email' => isset($to_email) ? $to_email : '',
        ]);
    }

    public function emailSend(Request $request)
    {
        $this->validate($request, [
            'subject' => 'required|min:3|max:255',
            'message' => 'required',
            'email.*' => 'required|email',
            'cc.*'    => 'nullable|email',
            'bcc.*'   => 'nullable|email',
        ]);

        $supplier = Supplier::find($request->supplier_id);

        if ($supplier->default_email != '' || $supplier->email != '') {
            $file_paths = [];

            if ($request->hasFile('file')) {
                foreach ($request->file('file') as $file) {
                    $filename = $file->getClientOriginalName();

                    $file->storeAs('documents', $filename, 'files');

                    $file_paths[] = "documents/$filename";
                }
            }

            $cc     = $bcc = [];
            $emails = $request->email;

            if ($request->has('cc')) {
                $cc = array_values(array_filter($request->cc));
            }
            if ($request->has('bcc')) {
                $bcc = array_values(array_filter($request->bcc));
            }

            if (is_array($emails) && ! empty($emails)) {
                $to = array_shift($emails);
                $cc = array_merge($emails, $cc);

                $mail = Mail::to($to);

                if ($cc) {
                    $mail->cc($cc);
                }
                if ($bcc) {
                    $mail->bcc($bcc);
                }

                $mail->send(new PurchaseEmail($request->subject, $request->message, $file_paths));
            } else {
                return redirect()->back()->withErrors('Please select an email');
            }
            $from_email = \App\Helpers::getFromEmail();
            $params     = [
                'model_id'        => $supplier->id,
                'model_type'      => Supplier::class,
                'from'            => $from_email,
                'to'              => $request->email[0],
                'seen'            => 1,
                'subject'         => $request->subject,
                'message'         => $request->message,
                'template'        => 'customer-simple',
                'additional_data' => json_encode(['attachment' => $file_paths]),
                'cc'              => $cc ?: null,
                'bcc'             => $bcc ?: null,
            ];

            Email::create($params);

            return redirect()->route('supplier.show', $supplier->id)->withSuccess('You have successfully sent an email!');
        }

        return redirect()->route('supplier.show', $supplier->id)->withError('Please add an email first');
    }

    public function emailResend(Request $request)
    {
        $this->validate($request, [
            'purchase_id' => 'required|numeric',
            'email_id'    => 'required|numeric',
            'recipient'   => 'required|email',
        ]);

        $attachment = [];
        $purchase   = Purchase::find($request->purchase_id);

        $imap = new Client([
            'host'          => env('IMAP_HOST_PURCHASE'),
            'port'          => env('IMAP_PORT_PURCHASE'),
            'encryption'    => env('IMAP_ENCRYPTION_PURCHASE'),
            'validate_cert' => env('IMAP_VALIDATE_CERT_PURCHASE'),
            'username'      => env('IMAP_USERNAME_PURCHASE'),
            'password'      => env('IMAP_PASSWORD_PURCHASE'),
            'protocol'      => env('IMAP_PROTOCOL_PURCHASE'),
        ]);

        $imap->connect();

        if ($request->type == 'inbox') {
            $inbox = $imap->getFolder('INBOX');
        } else {
            $inbox = $imap->getFolder('INBOX.Sent');
            $inbox->query();
        }

        if ($request->email_type == 'server') {
            $email = $inbox->getMessage($uid = $request->email_id, null, null, true, true, true);

            if ($email->hasHTMLBody()) {
                $content = $email->getHTMLBody();
            } else {
                $content = $email->getTextBody();
            }

            Mail::to($request->recipient)->send(new PurchaseEmail($email->getSubject(), $content, $attachment));
            $from_email = \App\Helpers::getFromEmail();
            $params     = [
                'model_id'        => $purchase->id,
                'model_type'      => Purchase::class,
                'from'            => $from_email,
                'to'              => $request->recipient,
                'subject'         => 'Resent: ' . $email->getSubject(),
                'message'         => $content,
                'template'        => 'customer-simple',
                'additional_data' => json_encode(['attachment' => $attachment]),
            ];
        } else {
            $email = Email::find($request->email_id);

            $array = is_array(json_decode($email->additional_data, true)) ? json_decode($email->additional_data, true) : [];

            if (array_key_exists('attachment', $array)) {
                $temp = json_decode($email->additional_data, true)['attachment'];
            }

            if (! is_array($temp)) {
                $attachment[] = $temp;
            } else {
                $attachment = $temp;
            }

            Mail::to($request->recipient)->send(new PurchaseEmail($email->subject, $email->message, $attachment));
            $from_email = \App\Helpers::getFromEmail();
            $params     = [
                'model_id'        => $purchase->id,
                'model_type'      => Purchase::class,
                'from'            => $from_email,
                'to'              => $request->recipient,
                'subject'         => "Resent: $email->subject",
                'message'         => $email->message,
                'template'        => 'customer-simple',
                'additional_data' => json_encode(['attachment' => $attachment]),
            ];
        }

        Email::create($params);

        return redirect()->route('purchase.show', $purchase->id)->withSuccess('You have successfully resent an email!');
    }

    public function emailReply(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'message' => 'required',
        ]);

        if ($validator->fails()) {
            return response()->json(['success' => false, 'errors' => $validator->errors()->all()]);
        }

        $emailToReply = Email::findOrFail($request->reply_email_id);
        Mail::send(new ReplyToEmail($emailToReply, $request->message));

        return response()->json(['success' => true, 'message' => 'Email has been successfully sent.']);
    }

    public function emailForward(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'to.0' => 'required|email',
            'to.*' => 'nullable|email',
        ]);

        if ($validator->fails()) {
            return response()->json(['success' => false, 'errors' => $validator->errors()->all()]);
        }

        $forwardEmail = Email::findOrFail($request->forward_email_id);
        $forwardTo    = array_filter($request->to);

        foreach ($forwardTo as $to) {
            Mail::to($to)->send(new ForwardEmail($forwardEmail, $request->message));
        }

        return response()->json(['success' => true, 'message' => 'Email has been successfully sent.']);
    }

    public function sendmsgsupplier(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'supplier_id' => 'required',
            'message'     => 'required',
        ]);
        $supplier_id = json_decode($request->input('supplier_id'));

        $id = $request->input('id');

        $suppliers_all = DB::table('suppliers')
            ->select('id', 'phone', 'whatsapp_number', 'supplier')
            ->whereIn('id', $supplier_id)
            ->get();
        if (count($suppliers_all) > 0) {
            // Get product
            $media   = '';
            $product = Product::find($id);
            if ($product && $product->hasMedia(config('constants.media_tags'))) {
                $media = getMediaUrl($product->getMedia(config('constants.media_tags'))->first());
            }

            $sku  = isset($product->sku) ? $product->sku : '';
            $size = ! empty($request->get('size')) ? ' size ' . $request->get('size') : '';

            foreach ($suppliers_all as $supplier) {
                if ($supplier->phone != '') {
                    $message = $request->input('message') . ' (' . $sku . ')' . $size;

                    try {
                        dump('Sending message');

                        app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($supplier->phone, $supplier->whatsapp_number, $message, isset($media) && ! empty($media) ? $media : null);

                        $params = [
                            'number'      => $supplier->phone,
                            'user_id'     => Auth::id(),
                            'supplier_id' => $supplier->id,
                            'message'     => $message,
                            'approved'    => 0,
                            'status'      => 1,
                        ];

                        $chat_message = ChatMessage::create($params);

                        $values = ['product_id' => $id, 'supplier_id' => $supplier->id, 'chat_message_id' => $chat_message->id];
                        DB::table('purchase_product_supplier')->insert($values);
                    } catch (Exception $e) {
                        dump($e->getMessage());
                    }
                }
            }
        }
    }

    public function getMsgSupplier(Request $request)
    {
        $productId = $request->get('product_id', 0);
        $suppliers = $request->get('suppliers', []);

        $suppliers = DB::table('purchase_product_supplier')
            ->select('suppliers.id', 'suppliers.supplier', 'chat_messages.id as chat_messages_id', 'chat_messages.message', 'chat_messages.created_at')
            ->leftJoin('suppliers', 'suppliers.id', '=', 'purchase_product_supplier.supplier_id')
            ->leftJoin('chat_messages', 'chat_messages.id', '=', 'purchase_product_supplier.chat_message_id')
            ->where('purchase_product_supplier.product_id', '=', $productId)
            ->orderBy('chat_messages.created_at', 'DESC')
            ->get();
        $data = [];
        foreach ($suppliers as $key => $value) {
            $data[$value->id]['supplier'] = $value->supplier;

            if (! isset($data[$value->id]['chat_messages'])) {
                $data[$value->id]['chat_messages'] = [];
            }

            if (! empty($value->chat_messages_id)) {
                $data[$value->id]['chat_messages'][] = [
                    'message'    => $value->message,
                    'created_at' => $value->created_at,
                ];
            }
        }

        return response()->json($data);
    }

    public function sendEmailBulk(Request $request)
    {
        $this->validate($request, [
            'subject' => 'required|min:3|max:255',
            'message' => 'required',
            'cc.*'    => 'nullable|email',
            'bcc.*'   => 'nullable|email',
        ]);

        if ($request->suppliers) {
            $suppliers = Supplier::whereIn('id', $request->suppliers)->where(function ($query) {
                $query->whereNotNull('default_email')->orWhereNotNull('email');
            })->get();
        } else {
            if ($request->not_received != 'on' && $request->received != 'on') {
                return redirect()->route('purchase.index')->withErrors(['Please select either suppliers or option']);
            }
        }

        if ($request->not_received == 'on') {
            $suppliers = Supplier::doesnthave('emails')->where(function ($query) {
                $query->whereNotNull('default_email')->orWhereNotNull('email');
            })->get();
        }

        if ($request->received == 'on') {
            $suppliers = Supplier::whereDoesntHave('emails', function ($query) {
                $query->where('type', 'incoming');
            })->where(function ($query) {
                $query->whereNotNull('default_email')->orWhereNotNull('email');
            })->where('has_error', 0)->get();
        }

        $file_paths = [];

        if ($request->hasFile('file')) {
            foreach ($request->file('file') as $file) {
                $filename = $file->getClientOriginalName();

                $file->storeAs('documents', $filename, 'files');

                $file_paths[] = "documents/$filename";
            }
        }

        $cc = $bcc = [];
        if ($request->has('cc')) {
            $cc = array_values(array_filter($request->cc));
        }
        if ($request->has('bcc')) {
            $bcc = array_values(array_filter($request->bcc));
        }

        foreach ($suppliers as $supplier) {
            $mail = Mail::to($supplier->default_email ?? $supplier->email);

            if ($cc) {
                $mail->cc($cc);
            }
            if ($bcc) {
                $mail->bcc($bcc);
            }

            $mail->send(new PurchaseEmail($request->subject, $request->message, $file_paths));
            $from_email = \App\Helpers::getFromEmail();
            $params     = [
                'model_id'        => $supplier->id,
                'model_type'      => Supplier::class,
                'from'            => $from_email,
                'seen'            => 1,
                'to'              => $supplier->default_email ?? $supplier->email,
                'subject'         => $request->subject,
                'message'         => $request->message,
                'template'        => 'customer-simple',
                'additional_data' => json_encode(['attachment' => $file_paths]),
                'cc'              => $cc ?: null,
                'bcc'             => $bcc ?: null,
            ];

            Email::create($params);
        }

        return redirect()->route('purchase.index')->withSuccess('You have successfully sent emails in bulk!');
    }

    /**
     * Start to sync the products with order product id
     */
    public function syncOrderProductId()
    {
        $recordsOldUpdate = Db::select('
        select pp.id,pp.purchase_id, pp.product_id
        from purchase_products as pp join products as p on p.id = pp.product_id
        left join order_products as op on op.sku = p.sku
        where pp.order_product_id != op.id');

        if (! empty($recordsOldUpdate)) {
            foreach ($recordsOldUpdate as $records) {
                // start
                \App\PurchaseProduct::where('id', $records['id'])->update(['order_product_id' => $records['order_product_id']]);
            }
        }
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/ReplyController.php 
Content: <?php

namespace App\Http\Controllers;

use App\User;
use App\Reply;
use App\Setting;
use App\ReplyCategory;
use App\WatsonAccount;
use App\ChatbotQuestion;
use App\Models\ReplyLog;
use App\StoreWebsitePage;
use App\TranslateReplies;
use App\ReplyUpdateHistory;
use Illuminate\Http\Request;
use App\ChatbotQuestionReply;
use App\ReplyTranslatorStatus;
use App\ChatbotQuestionExample;
use Illuminate\Support\Facades\DB;
use App\Jobs\ProcessTranslateReply;
use function GuzzleHttp\json_encode;
use Illuminate\Support\Facades\Auth;
use App\Models\QuickRepliesPermissions;
use App\Models\RepliesTranslatorHistory;

class ReplyController extends Controller
{
    public function index(Request $request)
    {
        $reply_categories = ReplyCategory::where('parent_id', 0)->orderBy('name', 'ASC')->get();

        $replies = Reply::with('category', 'category.parent');

        if (! empty($request->keyword)) {
            $replies->where('reply', 'LIKE', '%' . $request->keyword . '%');
        }

        $replysubcategories = [];
        if (! empty($request->sub_category_id)) {
            $replies->where('category_id', $request->sub_category_id);
        } elseif (! empty($request->category_id)) {
            $allIds = ReplyCategory::whereIn('id', $request->category_id)
                ->orWhereIn('parent_id', $request->category_id)
                ->pluck('id')
                ->toArray();

            $replies->whereIn('category_id', $allIds);
        }

        if (is_array($request->category_id)) {
            $replysubcategories = ReplyCategory::whereIn('parent_id', $request->category_id)->get();
        } else {
            $replysubcategories = ReplyCategory::where('parent_id', $request->category_id)->get();
        }

        $replies->orderBy('replies.id', 'DESC');

        $replies = $replies->paginate(Setting::get('pagination'));

        $reply_main_categories = ReplyCategory::where('parent_id', 0)->get();

        return view('reply.index', compact('replies', 'reply_categories', 'reply_main_categories', 'replysubcategories'))
            ->with('i', (request()->input('page', 1) - 1) * 10);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        $data['reply']            = '';
        $data['model']            = '';
        $data['category_id']      = '';
        $data['modify']           = 0;
        $data['reply_categories'] = ReplyCategory::all();

        return view('reply.form', $data);
    }

    /**
     * Store a newly created resource in storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request, Reply $reply)
    {
        $this->validate($request, [
            'reply'       => 'required|string',
            'category_id' => 'required|numeric',
            'model'       => 'required',
        ]);

        $data = $request->except('_token', '_method');

        if (! empty($request->sub_category_id) && $request->sub_category_id != 'undefined') {
            $data['category_id'] = $data['sub_category_id'];
        }
        $data['reply'] = trim($data['reply']);
        $createdReply  = $reply->create($data);

        if ($request->ajax()) {
            if (isset($request->type) && $request->type === 'with-extra-attributes') {
                return response()->json(['reply' => trim($createdReply->reply), 'id' => $createdReply->id]);
            }

            return response()->json(trim($request->reply));
        }

        return redirect()->route('reply.index')->with('success', 'Quick Reply added successfully');
    }

    public function categorySetDefault(Request $request)
    {
        if ($request->has('model') && $request->has('cat_id')) {
            $model         = $request->model;
            $cat_id        = $request->cat_id;
            $ReplyCategory = \App\ReplyCategory::find($cat_id);
            if ($ReplyCategory) {
                $ReplyCategory->default_for = $model;
                $ReplyCategory->save();

                return response()->json(['success' => true, 'message' => 'Category Assignments Successfully']);
            }

            return response()->json(['success' => false, 'message' => 'The Reply Category data was not found']);
        }

        return response()->json(['success' => false, 'message' => 'The requested data was not found']);
    }

    public function categoryStore(Request $request)
    {
        $this->validate($request, [
            'name' => 'required|string',
        ]);

        $category       = new ReplyCategory;
        $category->name = $request->name;
        $category->save();

        return redirect()->route('reply.index')->with('success', 'You have successfully created category');
    }

    public function subcategoryStore(Request $request)
    {
        $this->validate($request, [
            'name'      => 'required|string',
            'parent_id' => 'required',
        ]);

        $category            = new ReplyCategory;
        $category->name      = $request->name;
        $category->parent_id = $request->parent_id;
        $category->save();

        return redirect()->route('reply.index')->with('success', 'You have successfully created sub category');
    }

    /**
     * Display the specified resource.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function edit(Reply $reply)
    {
        $data                     = $reply->toArray();
        $data['modify']           = 1;
        $data['reply_categories'] = ReplyCategory::all();

        return view('reply.form', $data);
    }

    public function editReply(Request $request)
    {
        $id         = $request->get('id', 0);
        $ReplyNotes = \App\Reply::where('id', $id)->first();
        if ($ReplyNotes) {
            $reply_categories = ReplyCategory::where('parent_id', 0)->get();

            $reply_sub_categories = ReplyCategory::where('parent_id', $request->c_id)->get();

            $category_id     = $request->c_id;
            $sub_category_id = $request->sc_id;

            return view('reply.edit', compact('ReplyNotes', 'reply_categories', 'category_id', 'sub_category_id', 'reply_sub_categories'));
        }

        return 'Quick Reply Not Found';
    }

    public function getSubcategories(Request $request)
    {
        if (is_array($request->category_id)) {
            $subcategories = ReplyCategory::whereIn('parent_id', $request->category_id)->pluck('name', 'id');
        } else {
            $subcategories = ReplyCategory::where('parent_id', $request->category_id)->pluck('name', 'id');
        }

        return response()->json($subcategories);
    }

    /**
     * Update the specified resource in storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, Reply $reply)
    {
        $this->validate($request, [
            'reply' => 'required|string',
            'model' => 'required',
        ]);

        $data = $request->except('_token', '_method');

        $reply->is_pushed = 0;
        $reply->update($data);

        (new \App\Models\ReplyLog)->addToLog($reply->id, 'System updated FAQ', 'Updated');

        return redirect()->route('reply.index')->with('success', 'Quick Reply updated successfully');
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function destroy(Reply $reply, Request $request)
    {
        $reply->delete();
        if ($request->ajax()) {
            return response()->json(['message' => 'Deleted successfully']);
        }

        return redirect()->route('reply.index')->with('success', 'Quick Reply Deleted successfully');
    }

    public function removepermissions(Request $request)
    {
        if ($request->type == 'remove_permission') {
            $edit_data = QuickRepliesPermissions::where('user_id', $request->user_permission_id)->whereNotIn('lang_id', $request->edit_lang_name)->where('action', 'edit')->get();
            $view_data = QuickRepliesPermissions::where('user_id', $request->user_permission_id)->whereNotIn('lang_id', $request->view_lang_name)->where('action', 'view')->get();

            foreach ($edit_data as $edit_lang) {
                $edit_lang->delete();
            }

            foreach ($view_data as $view_lang) {
                $view_lang->delete();
            }

            return redirect()->back()->with('success', 'Remove Permission successfully');
        } else {
            $checkExists = QuickRepliesPermissions::where('user_id', $request->id)->get();
            $edit_lang   = [];
            $view_lang   = [];
            foreach ($checkExists as $checkExist) {
                if ($checkExist->action == 'edit') {
                    $edit_lang[] = $checkExist->lang_id;
                }
                if ($checkExist->action == 'view') {
                    $view_lang[] = $checkExist->lang_id;
                }
            }

            $data = [
                'edit_lang' => $edit_lang,
                'view_lang' => $view_lang,
                'status'    => '200',
            ];

            return $data;
        }
    }

    public function chatBotQuestion(Request $request)
    {
        $this->validate($request, [
            'intent_name'  => 'required',
            'intent_reply' => 'required',
            'question'     => 'required',
        ]);

        $ChatbotQuestion = null;
        $example         = ChatbotQuestionExample::where('question', $request->question)->first();
        if ($example) {
            return response()->json(['message' => 'User intent is already available']);
        }

        if (is_numeric($request->intent_name)) {
            $ChatbotQuestion = ChatbotQuestion::where('id', $request->intent_name)->first();
        } else {
            if ($request->intent_name != '') {
                $ChatbotQuestion = ChatbotQuestion::create([
                    'value' => str_replace(' ', '_', preg_replace('/\s+/', ' ', $request->intent_name)),
                ]);
            }
        }
        $ChatbotQuestion->suggested_reply     = $request->intent_reply;
        $ChatbotQuestion->category_id         = $request->intent_category_id;
        $ChatbotQuestion->keyword_or_question = 'intent';
        $ChatbotQuestion->is_active           = 1;
        $ChatbotQuestion->erp_or_watson       = 'erp';
        $ChatbotQuestion->auto_approve        = 1;
        $ChatbotQuestion->save();

        $ex                      = new ChatbotQuestionExample;
        $ex->question            = $request->question;
        $ex->chatbot_question_id = $ChatbotQuestion->id;
        $ex->save();

        $wotson_account_website_ids = WatsonAccount::get()->pluck('store_website_id')->toArray();

        $data_to_insert = [];

        foreach ($wotson_account_website_ids as $id_) {
            $data_to_insert[] = [
                'chatbot_question_id' => $ChatbotQuestion->id,
                'store_website_id'    => $id_,
                'suggested_reply'     => $request->intent_reply,
            ];
        }

        ChatbotQuestionReply::insert($data_to_insert);
        Reply::where('id', $request->intent_reply_id)->delete();

        return response()->json(['message' => 'Successfully created', 'code' => 200]);
    }

    public function replyList(Request $request)
    {
        $storeWebsite     = $request->get('store_website_id');
        $keyword          = $request->get('keyword');
        $parent_category  = $request->get('parent_category_ids') ? $request->get('parent_category_ids') : [];
        $category_ids     = $request->get('category_ids') ? $request->get('category_ids') : [];
        $sub_category_ids = $request->get('sub_category_ids') ? $request->get('sub_category_ids') : [];

        $categoryChildNode = [];
        if ($parent_category) {
            $parentNode = ReplyCategory::select(\DB::raw('group_concat(id) as ids'))->whereIn('id', $parent_category)->where('parent_id', '=', 0)->first();
            if ($parentNode) {
                $subCatChild       = ReplyCategory::whereIn('parent_id', explode(',', $parentNode->ids))->get()->pluck('id')->toArray();
                $categoryChildNode = ReplyCategory::whereIn('parent_id', $subCatChild)->get()->pluck('id')->toArray();
            }
        }

        $replies = \App\ReplyCategory::join('replies', 'reply_categories.id', 'replies.category_id')
            ->leftJoin('store_websites as sw', 'sw.id', 'replies.store_website_id')
            ->where('model', 'Store Website')
            ->select(['replies.*', 'sw.website', 'reply_categories.intent_id', 'reply_categories.name as category_name', 'reply_categories.parent_id', 'reply_categories.id as reply_cat_id']);

        if ($storeWebsite > 0) {
            $replies = $replies->where('replies.store_website_id', $storeWebsite);
        }

        if (! empty($keyword)) {
            $replies = $replies->where(function ($q) use ($keyword) {
                $q->orWhere('reply_categories.name', 'LIKE', '%' . $keyword . '%')->orWhere('replies.reply', 'LIKE', '%' . $keyword . '%');
            });
        }
        if (! empty($parent_category)) {
            if ($categoryChildNode) {
                $replies = $replies->where(function ($q) use ($categoryChildNode) {
                    $q->orWhereIn('reply_categories.id', $categoryChildNode);
                });
            } else {
                $replies = $replies->where(function ($q) use ($parent_category) {
                    $q->orWhereIn('reply_categories.id', $parent_category)->where('reply_categories.parent_id', '=', 0);
                });
            }
        }

        if (! empty($category_ids)) {
            $replies = $replies->where(function ($q) use ($category_ids) {
                $q->orWhereIn('reply_categories.parent_id', $category_ids)->where('reply_categories.parent_id', '!=', 0);
            });
        }

        if (! empty($sub_category_ids)) {
            $replies = $replies->where(function ($q) use ($sub_category_ids) {
                $q->orWhereIn('reply_categories.id', $sub_category_ids)->where('reply_categories.parent_id', '!=', 0);
            });
        }

        $replies = $replies->paginate(25);
        foreach ($replies as $key => $value) {
            $subCat                          = explode('>', $value->parentList());
            $replies[$key]['parent_first']   = isset($subCat[0]) ? $subCat[0] : '';
            $replies[$key]['parent_secound'] = isset($subCat[1]) ? $subCat[1] : '';
        }

        $parentCategory = $allSubCategory = [];
        $parentCategory = ReplyCategory::where('parent_id', 0)->get();
        $allSubCategory = ReplyCategory::where('parent_id', '!=', 0)->get();
        $category       = $subCategory = [];
        foreach ($allSubCategory as $key => $value) {
            $categoryList = ReplyCategory::where('id', $value->parent_id)->first();
            if ($categoryList->parent_id == 0) {
                $category[$value->id] = $value->name;
            } else {
                $subCategory[$value->id] = $value->name;
            }
        }

        return view('reply.list', compact('replies', 'parentCategory', 'category', 'subCategory', 'parent_category', 'category_ids', 'sub_category_ids'));
    }

    public function replyListDelete(Request $request)
    {
        $id     = $request->get('id');
        $record = \App\ReplyCategory::find($id);

        if ($record) {
            $replies = $record->replies;
            if (! $replies->isEmpty()) {
                foreach ($replies as $re) {
                    $re->delete();
                }
            }
            $record->delete();
        }

        return response()->json(['code' => 200, 'data' => [], 'message' => 'Record deleted successfully']);
    }

    public function replyUpdate(Request $request)
    {
        $id    = $request->get('id');
        $reply = \App\Reply::find($id);

        $replies                          = Reply::where('id', $id)->first();
        $ReplyUpdateHistory               = new ReplyUpdateHistory;
        $ReplyUpdateHistory->last_message = $replies->reply;
        $ReplyUpdateHistory->reply_id     = $replies->id;
        $ReplyUpdateHistory->user_id      = Auth::id();
        $ReplyUpdateHistory->save();

        if ($reply) {
            $reply->reply            = $request->reply;
            $reply->pushed_to_watson = 0;
            $reply->save();

            $replyCategory = \App\ReplyCategory::find($reply->category_id);

            $replyCategories = $replyCategory->parentList();
            $cats            = explode('>', str_replace(' ', '', $replyCategories));
            if (isset($cats[0]) and $cats[0] == 'FAQ') {
                $faqCat = \App\ReplyCategory::where('name', 'FAQ')->pluck('id')->first();
                if ($faqCat != null) {
                    $faqToPush  = '<div class="cls_shipping_panelmain">';
                    $topParents = \App\ReplyCategory::where('parent_id', $faqCat)->get();
                    foreach ($topParents as $topParent) {
                        $faqToPush .= '<div class="cls_shipping_panelsub">
                        <div id="shopPlaceOrder" class="accordion_head" role="tab">
                            <h4 class="panel-title"><a role="button" href="javascript:;" class="cls_abtn"> ' . $topParent['name'] . ' </a><span class="plusminus">-</span></h4>
                        </div> <div class="accordion_body" style="display: block;">';
                        $questions = \App\ReplyCategory::where('parent_id', $topParent['id'])->get();
                        foreach ($questions as $question) {
                            $answer = Reply::where('category_id', $question['id'])->first();
                            if ($answer != null) {
                                $faqToPush .= '<p class="md-paragraph"><strong>' . $question['name'] . '</strong></p>
                                    <p class="md-paragraph"> ' . $answer['reply'] . ' </p>';
                            }
                        }
                        $faqToPush .= '</div></div>';
                    }
                    $faqToPush .= '</div>';
                    $faqPage = StoreWebsitePage::where(['store_website_id' => $reply->store_website_id, 'url_key' => 'faqs'])->first();
                    if ($faqPage == null) {
                        echo 'if';
                        $a = StoreWebsitePage::create(['title' => 'faqs', 'content' => $faqToPush, 'store_website_id' => $reply->store_website_id, 'url_key' => 'faqs', 'is_pushed' => 0]);
                    } else {
                        echo 'else';
                        $a = StoreWebsitePage::where('id', $faqPage->id)->update(['content' => $faqToPush, 'is_pushed' => 0]);
                    }
                }
            }
        }

        return redirect()->back()->with('success', 'Quick Reply Updated successfully');
    }

    public function getReplyedHistory(Request $request)
    {
        $id              = $request->id;
        $reply_histories = DB::select(DB::raw('SELECT reply_update_histories.id,reply_update_histories.reply_id,reply_update_histories.user_id,reply_update_histories.last_message,reply_update_histories.created_at,users.name FROM `reply_update_histories` JOIN `users` ON users.id = reply_update_histories.user_id where reply_update_histories.reply_id = ' . $id));

        return response()->json(['histories' => $reply_histories]);
    }

    public function replyTranslate(Request $request)
    {
        $id                 = $request->reply_id;
        $is_flagged_request = $request->is_flagged;

        if ($is_flagged_request == '1') {
            $is_flagged = 0;
        } else {
            $is_flagged = 1;
        }

        if ($is_flagged == '1') {
            $record = \App\Reply::find($id);
            if ($record) {
                ProcessTranslateReply::dispatch($record, \Auth::id())->onQueue('replytranslation');

                $record->is_flagged = 1;
                $record->save();

                return response()->json(['code' => 200, 'data' => [], 'message' => 'Replies Set For Translatation']);
            }

            return response()->json(['code' => 400, 'data' => [], 'message' => 'There is a problem while translating']);
        } else {
            $res_rec             = \App\Reply::find($id);
            $res_rec->is_flagged = 0;
            $res_rec->save();

            return response()->json(['code' => 200, 'data' => [], 'message' => 'Translation off successfully']);
        }
    }

    public function replyTranslateList(Request $request)
    {
        $storeWebsite = $request->get('store_website_id');
        $language     = $request->get('lang');
        $keyword      = $request->get('keyword');
        $status       = $request->get('status');

        $lang           = [];
        $original_text  = [];
        $ids            = [];
        $translate_text = [];

        $StatusResults = \App\TranslateReplies::select('translate_to', 'status', DB::raw('COUNT(*) as count'))->groupBy('translate_to', 'status')->orderby('translate_to', 'ASC')->get();

        $StatusArray = [];
        if (! empty($StatusResults)) {
            foreach ($StatusResults as $key => $value) {
                $StatusArray[$value->translate_to]['language'] = $value->translate_to;

                if ($value->status == 'approved') {
                    $StatusArray[$value->translate_to]['approve'] = $value->count;
                }

                if ($value->status == 'rejected') {
                    $StatusArray[$value->translate_to]['rejected'] = $value->count;
                }

                if ($value->status == 'new') {
                    $StatusArray[$value->translate_to]['new'] = $value->count;
                }

                if ($value->status === null) {
                    $StatusArray[$value->translate_to]['uncheck'] = $value->count;
                }
            }
        }

        $getLangs = \App\TranslateReplies::distinct('translate_to')->pluck('translate_to');

        if ($storeWebsite > 0 && ! empty($language)) {
            $replies = \App\TranslateReplies::join('replies', 'translate_replies.replies_id', 'replies.id')
                ->leftJoin('store_websites as sw', 'sw.id', 'replies.store_website_id')
                ->leftJoin('reply_categories', 'reply_categories.id', 'replies.category_id')
                ->where('model', 'Store Website')->where('replies.is_flagged', '1')
                ->select(['replies.*', 'translate_replies.status', 'translate_replies.replies_id as replies_id', 'replies.reply as original_text', 'sw.website', 'reply_categories.intent_id', 'reply_categories.name as category_name', 'reply_categories.parent_id', 'reply_categories.id as reply_cat_id', 'translate_replies.id as id', 'translate_replies.translate_from', 'translate_replies.translate_to', 'translate_replies.translate_text', 'translate_replies.created_at', 'translate_replies.updated_at']);

            $replies = $replies->where('replies.store_website_id', $storeWebsite);

            if (! empty($keyword)) {
                $replies = $replies->where(function ($q) use ($keyword) {
                    $q->orWhere('reply_categories.name', 'LIKE', '%' . $keyword . '%')->orWhere('replies.reply', 'LIKE', '%' . $keyword . '%');
                });
            }

            $replies = $replies->where('translate_replies.translate_to', $language);

            if (! empty($status)) {
                $replies = $replies->where(function ($q) use ($status) {
                    $q->orWhere('translate_replies.status', 'LIKE', $status);
                });
            }

            $replies = $replies->get();

            foreach ($replies as $replie) {
                if (! in_array($replie->replies_id, $ids)) {
                    $ids[] = $replie->replies_id;

                    $translate_text[$replie->replies_id]['id']             = $replie->id;
                    $translate_text[$replie->replies_id]['website']        = $replie->website;
                    $translate_text[$replie->replies_id]['category_name']  = $replie->category_name;
                    $translate_text[$replie->replies_id]['translate_from'] = $replie->translate_from;
                    $translate_text[$replie->replies_id]['original_text']  = $replie->original_text;

                    $translate_text[$replie->replies_id]['transalates'][$replie->translate_to]['translate_text']         = $replie->translate_text;
                    $translate_text[$replie->replies_id]['transalates'][$replie->translate_to]['translate_lang']         = $replie->translate_to;
                    $translate_text[$replie->replies_id]['transalates'][$replie->translate_to]['translate_id']           = $replie->id;
                    $translate_text[$replie->replies_id]['transalates'][$replie->translate_to]['translate_status']       = $replie->status;
                    $translate_text[$replie->replies_id]['transalates'][$replie->translate_to]['translate_status_color'] = $replie->status_color;

                    $translate_text[$replie->replies_id]['created_at'] = $replie->created_at;
                    $translate_text[$replie->replies_id]['updated_at'] = $replie->updated_at;
                } else {
                    $translate_text[$replie->replies_id]['transalates'][$replie->translate_to]['translate_text']         = $replie->translate_text;
                    $translate_text[$replie->replies_id]['transalates'][$replie->translate_to]['translate_lang']         = $replie->translate_to;
                    $translate_text[$replie->replies_id]['transalates'][$replie->translate_to]['translate_id']           = $replie->id;
                    $translate_text[$replie->replies_id]['transalates'][$replie->translate_to]['translate_status']       = $replie->status;
                    $translate_text[$replie->replies_id]['transalates'][$replie->translate_to]['translate_status_color'] = $replie->status_color;
                }

                if (! in_array($replie->translate_to, $lang)) {
                    $lang[$replie->id] = $replie['translate_to'];
                }
            }
        }

        $itemsPerPage = 25; // Define the number of items per page
        $currentPage  = $request->input('page', 1);
        $offset       = ($currentPage - 1) * $itemsPerPage;

        // Paginate the JSON-encoded data manually
        $totalItems = count($translate_text);

        // Calculate the total number of pages
        $totalPages = ceil($totalItems / $itemsPerPage);

        // Extract the data for the current page
        $paginatedTranslateText = array_slice($translate_text, $offset, $itemsPerPage, true);

        // Convert the paginated data back to JSON
        $replies = json_encode($paginatedTranslateText);

        $replyTranslatorStatuses = ReplyTranslatorStatus::all();

        return view('reply.translate-list', compact('replies', 'lang', 'replyTranslatorStatuses', 'getLangs', 'totalItems', 'itemsPerPage', 'currentPage', 'totalPages', 'StatusArray'))->with('i', ($request->input('page', 1) - 1) * 25);
    }

    public function quickRepliesPermissions(Request $request)
    {
        if ($request->ajax()) {
            $data        = $request->only('user_id', 'lang_id', 'action');
            $checkExists = QuickRepliesPermissions::where('user_id', $data['user_id'])->where('lang_id', $data['lang_id'])->where('action', $data['action'])->first();

            if ($checkExists) {
                return response()->json(['status' => 412]);
            }

            QuickRepliesPermissions::insert($data);
            $data = QuickRepliesPermissions::where('user_id', \Auth::user()->id)->get();

            return response()->json(['status' => 200]);
        }
    }

    public function replyTranslateUpdate(Request $request)
    {
        $record    = TranslateReplies::find($request->record_id);
        $oldRecord = $request->lang_id;
        if ($record) {
            $record->updated_by_user_id = ! empty($request->update_by_user_id) ? $request->update_by_user_id : '';
            $record->translate_text     = ! empty($request->update_record) ? $request->update_record : '';
            $record->status             = 'new';
            $record->update();

            $historyData                         = [];
            $historyData['translate_replies_id'] = $record->id;
            $historyData['updated_by_user_id']   = $record->updated_by_user_id;
            $historyData['translate_text']       = $request->update_record;
            $historyData['status']               = 'new';
            $historyData['lang']                 = $oldRecord;
            $historyData['created_at']           = \Carbon\Carbon::now();
            RepliesTranslatorHistory::insert($historyData);

            return redirect()->back()->with(['success' => 'Successfully Updated']);
        } else {
            return redirect()->back()->withErrors('Something Wrong');
        }
    }

    public function replyTranslatehistory(Request $request)
    {
        $key      = $request->key;
        $language = $request->language;
        if ($request->type == 'all_view') {
            $history = RepliesTranslatorHistory::whereRaw('status is not null')->get();
        } else {
            $history = RepliesTranslatorHistory::where([
                'translate_replies_id' => $request->id,
                'lang'                 => $language,
            ])->whereRaw('status is not null')->get();
        }
        if (count($history) > 0) {
            foreach ($history as $key => $historyData) {
                $history[$key]['updater']  = User::where('id', $historyData['updated_by_user_id'])->pluck('name')->first();
                $history[$key]['approver'] = User::where('id', $historyData['approved_by_user_id'])->pluck('name')->first();
            }
        }
        $html = '';
        foreach ($history as $key => $value) {
            $ar = ($value->lang == 'ar') ? $value->translate_text : '';
            $en = ($value->lang == 'en') ? $value->translate_text : '';
            $zh = ($value->lang == 'zh-CN') ? $value->translate_text : '';
            $ja = ($value->lang == 'ja') ? $value->translate_text : '';
            $ko = ($value->lang == 'ko') ? $value->translate_text : '';
            $ur = ($value->lang == 'ur') ? $value->translate_text : '';
            $ru = ($value->lang == 'ru') ? $value->translate_text : '';
            $it = ($value->lang == 'it') ? $value->translate_text : '';
            $fr = ($value->lang == 'fr') ? $value->translate_text : '';
            $es = ($value->lang == 'es') ? $value->translate_text : '';
            $nl = ($value->lang == 'nl') ? $value->translate_text : '';
            $de = ($value->lang == 'de') ? $value->translate_text : '';

            $html .= '<tr><td>' . $value->id . '</td>';
            $html .= '<td>' . $value->lang . '</td>';
            $html .= '<td>' . $value->translate_text . '</td>';
            $html .= '<td>' . $value->status . '</td>';
            $html .= '<td>' . $value->updater . '</td>';
            $html .= '<td>' . $value->approver . '</td>';
            $html .= '<td>' . $value->created_at . '</td>';
            $html .= '</tr>';
        }

        return response()->json(['status' => 200, 'data' => $html]);
    }

    public function approvedByAdmin(Request $request)
    {
        $record                        = TranslateReplies::where('id', $request->id)->first();
        $record['status']              = $request->status;
        $record['approved_by_user_id'] = \Auth::user()->id;
        $record->update();

        $record_history                        = RepliesTranslatorHistory::where('translate_replies_id', $request->id)->where('lang', $request->lang)->orderBy('id', 'desc')->first();
        $record_history['status']              = $request->status;
        $record_history['approved_by_user_id'] = \Auth::user()->id;
        $record_history->update();

        return response()->json(['status' => 200]);
    }

    public function show_logs(Request $request, ReplyLog $ReplyLog)
    {
        $data = $request->all();

        $data         = $ReplyLog->where('reply_id', $data['id'])->orderby('created_at', 'desc')->paginate(20);
        $paginateHtml = $data->links()->render();

        return response()->json(['code' => 200, 'paginate' => $paginateHtml, 'data' => $data, 'message' => 'Logs found']);
    }

    public function replyLogList(Request $request)
    {
        $replyLogs = new  ReplyLog();

        $replyLogs = $replyLogs->latest()->paginate(\App\Setting::get('pagination', 25));

        return view('reply.log-reply', compact('replyLogs'));
    }

    public function replyMulitiple(Request $request)
    {
        $replyIds = $request->input('reply_ids');

        $replyIdsArray = explode(',', $replyIds);

        foreach ($replyIdsArray as $replyId) {
            $replyLog = Reply::find($replyId);
            if ($replyLog) {
                $replyLog->is_flagged = 1;
                $replyLog->save();
            }
        }

        return response()->json(['message' => 'Flag Added successfully']);
    }

    public function statusColor(Request $request)
    {
        $statusColor = $request->all();
        $data        = $request->except('_token');
        foreach ($statusColor['color_name'] as $key => $value) {
            $cronStatus        = ReplyTranslatorStatus::find($key);
            $cronStatus->color = $value;
            $cronStatus->save();
        }

        return redirect()->back()->with('success', 'The status color updated successfully.');
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/ScrapController.php 
Content: <?php

namespace App\Http\Controllers;

use Storage;
use App\User;
use App\Brand;
use App\Image;
use Validator;
use App\Helpers;
use App\Product;
use App\Scraper;
use App\Setting;
use App\Supplier;
use Carbon\Carbon;
use App\LogRequest;
use App\ScrapApiLog;
use App\ScrapCounts;
use App\ScrapeQueues;
use App\StoreWebsite;
use App\ScraperResult;
use App\ScraperMapping;
use App\ScrapedProducts;
use App\Loggers\LogScraper;
use App\ScrapRequestHistory;
use Illuminate\Http\Request;
use App\Helpers\StatusHelper;
use App\Helpers\ProductHelper;
use App\Imports\ProductsImport;
use App\Loggers\ScrapPythonLog;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use App\Models\ScrapedProductsLinks;
use Maatwebsite\Excel\Facades\Excel;
use App\Services\Scrap\PinterestScraper;
use PhpOffice\PhpSpreadsheet\Reader\Xls;
use PhpOffice\PhpSpreadsheet\Reader\Xlsx;
use App\Services\Products\ProductsCreator;
use App\Services\Scrap\GoogleImageScraper;
use App\Models\ScrapedProductsLinksHistory;
use App\Services\Products\GnbProductsCreator;
use Illuminate\Pagination\LengthAwarePaginator;
use Plank\Mediable\Facades\MediaUploader as MediaUploader;

class ScrapController extends Controller
{
    public function __construct(private GoogleImageScraper $googleImageScraper, private PinterestScraper $pinterestScraper, private GnbProductsCreator $gnbCreator)
    {
    }

    public function index()
    {
        return view('scrap.index');
    }

    public function scrapGoogleImages(Request $request)
    {
        $this->validate($request, [
            'query' => 'required',
            'noi'   => 'required',
        ]);

        $q    = $request->get('query');
        $noi  = $request->get('noi');
        $chip = $request->get('chip');

        $pinterestData = [];
        $googleData    = [];

        if ($request->get('pinterest') === 'on') {
            $pinterestData = $this->pinterestScraper->scrapPinterestImages($q, $chip, $noi);
            if (! is_array($pinterestData)) {
                // Pinterest data is also coming from google
                return redirect()->back()->with('error', 'HTML element is changed in Google.');
            }
        }

        if ($request->get('google') === 'on') {
            $googleData = $this->googleImageScraper->scrapGoogleImages($q, $chip, $noi);
            if (! is_array($googleData)) {
                return redirect()->back()->with('error', 'HTML element is changed in Google.');
            }
        }

        return view('scrap.extracted_images', compact('googleData', 'pinterestData'));
    }

    public function activity()
    {
        $date = Carbon::now()->subDays(7)->format('Y-m-d');

        $links_count = DB::select('
									SELECT site_name, created_at, COUNT(*) as total FROM
								 		(SELECT scrap_entries.site_name, DATE_FORMAT(scrap_entries.created_at, "%Y-%m-%d") as created_at
								  		 FROM scrap_entries
								  		 WHERE scrap_entries.created_at > ?)
								    AS SUBQUERY
								   	GROUP BY created_at, site_name;
							', [$date]);

        $scraped_count = DB::select('
									SELECT website, created_at, COUNT(*) as total FROM
								 		(SELECT scraped_products.website, DATE_FORMAT(scraped_products.created_at, "%Y-%m-%d") as created_at
								  		 FROM scraped_products
								  		 WHERE scraped_products.created_at > ?)
								    AS SUBQUERY
								   	GROUP BY created_at, website;
							', [$date]);

        $products_count = DB::select('
									SELECT website, created_at, COUNT(*) as total FROM
								 		(SELECT scraped_products.website, scraped_products.sku, DATE_FORMAT(scraped_products.created_at, "%Y-%m-%d") as created_at
								  		 FROM scraped_products

                       RIGHT JOIN (
                         SELECT products.sku FROM products
                       ) AS products
                       ON scraped_products.sku = products.sku

								  		 WHERE scraped_products.created_at > ?
                       )

								    AS SUBQUERY
								   	GROUP BY created_at, website;
							', [$date]);

        $activity_data = DB::select('
									SELECT website, status, created_at, COUNT(*) as total FROM
								 		(SELECT scrap_activities.website, scrap_activities.status, DATE_FORMAT(scrap_activities.created_at, "%Y-%m-%d") as created_at
								  		 FROM scrap_activities
								  		 WHERE scrap_activities.created_at > ?)
								    AS SUBQUERY
								   	GROUP BY created_at, website, status;
							', [$date]);

        $data = [];

        $link_entries = ScrapCounts::where('created_at', '>', $date)->orderBy('created_at', 'DESC')->get();

        foreach ($links_count as $item) {
            if ($item->site_name == 'GNB') {
                $item->site_name = 'G&B';
            }

            $data[$item->created_at][$item->site_name]['links'] = $item->total;
        }

        foreach ($scraped_count as $item) {
            $data[$item->created_at][$item->website]['scraped'] = $item->total;
        }

        foreach ($products_count as $item) {
            $data[$item->created_at][$item->website]['created'] = $item->total;
        }

        foreach ($activity_data as $item) {
            $data[$item->created_at][$item->website][$item->status] = $item->total;
        }

        ksort($data);
        $data = array_reverse($data);

        $currentPage  = LengthAwarePaginator::resolveCurrentPage();
        $perPage      = 24;
        $currentItems = array_slice($data, $perPage * ($currentPage - 1), $perPage);

        $data = new LengthAwarePaginator($currentItems, count($data), $perPage, $currentPage, [
            'path' => LengthAwarePaginator::resolveCurrentPath(),
        ]);

        return view('scrap.activity', [
            'data'         => $data,
            'link_entries' => $link_entries,
        ]);
    }

    public function downloadImages(Request $request)
    {
        $this->validate($request, [
            'data' => 'required|array',
        ]);
        $data       = $request->get('data');
        $product_id = $request->get('product_id');

        $images = [];

        foreach ($data as $key => $datum) {
            try {
                $imgData = file_get_contents($datum);

                $fileName = md5(time() . microtime()) . '.png';
                Storage::disk('s3')->put('social-media/' . $fileName, $imgData);
                $i           = new Image();
                $i->filename = $fileName;
                if (! empty($product_id)) {
                    $i->product_id = $product_id;
                }
                $i->save();

                $images[] = $fileName;

                $StoreWebsite = StoreWebsite::where('id', 18)->first();
                if ($StoreWebsite) {
                    $media = MediaUploader::fromSource($datum)->toDirectory('product-template-images')->upload();
                    $StoreWebsite->attachMedia($media, ['website-image-attach']);
                }
            } catch (Exception $exception) {
                \Log::error('Image save :: ' . $exception->getMessage());
                dd($exception->getMessage());

                continue;
            }
        }

        $downloaded = true;

        return view('scrap.extracted_images', compact('images', 'downloaded'));
    }

    /**
     * @SWG\Post(
     *   path="/scrap-products/add",
     *   tags={"Scrape​r"},
     *   summary="Add Product from scraper to erp",
     *   operationId="scrape​r-post-product",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *   @SWG\Response(response=406, description="not acceptable"),
     *   @SWG\Response(response=500, description="internal server error"),
     *
     *      @SWG\Parameter(
     *          name="sku",
     *          in="formData",
     *          required=true,
     *          type="string"
     *      ),
     *      @SWG\Parameter(
     *          name="url",
     *          in="formData",
     *          required=true,
     *          type="string"
     *      ),
     *      @SWG\Parameter(
     *          name="images",
     *          in="formData",
     *          required=true,
     *          type="array",
     *
     *           @SWG\Items(
     *              type="string",
     *           ),
     *      ),
     *
     *      @SWG\Parameter(
     *          name="properties",
     *          in="formData",
     *          required=true,
     *          type="array",
     *
     *          @SWG\Items(
     *             type="string",
     *           ),
     *      ),
     *
     *      @SWG\Parameter(
     *          name="website",
     *          in="formData",
     *          required=true,
     *          type="string"
     *      ),
     *      @SWG\Parameter(
     *          name="price",
     *          in="formData",
     *          required=true,
     *          type="string"
     *      ),
     *      @SWG\Parameter(
     *          name="brand",
     *          in="formData",
     *          required=true,
     *          type="string"
     *      ),
     * )
     */
    public function syncProductsFromNodeApp(Request $request)
    {
        // Update request data with common mistakes
        $request = ProductHelper::fixCommonMistakesInRequest($request);

        // Log before validating
        $errorLog = LogScraper::LogScrapeValidationUsingRequest($request);

        // Return error
        if (! empty($errorLog['error'])) {
            return response()->json([
                'error' => $errorLog['error'],
            ]);
        }

        // Validate input
        $validator = Validator::make($request->all(), [
            'sku'        => 'required',
            'url'        => 'required',
            'images'     => 'required|array',
            'properties' => 'required',
            'website'    => 'required',
            'price'      => 'required',
            'brand'      => 'required',
        ]);

        if ($validator->fails()) {
            return response()->json(['code' => 500, 'error' => $validator->errors()]);
        }

        // Get SKU
        $sku = ProductHelper::getSku($request->get('sku'));

        // Get brand
        $brand = Brand::where('name', $request->get('brand'))->first();

        // No brand found?
        if (! $brand) {
            // Check for reference
            $brand = Brand::where('references', 'LIKE', '%' . $request->get('brand') . '%')->first();

            if (! $brand) {
                // if brand is not then create a brand
                $brand = Brand::create([
                    'name' => $request->get('brand'),
                ]);
            }
        }

        // fix property array
        $requestedProperties = $request->get('properties');
        if (! empty($requestedProperties)) {
            foreach ($requestedProperties as $key => &$value) {
                if ($key == 'category') {
                    $requestedProperties[$key] = ! is_array($value) ? [$value] : $value;
                }
            }
        }
        $request->request->add(['properties' => $requestedProperties]);

        $categoryForScrapedProducts    = '';
        $colorForScrapedProducts       = '';
        $compositionForScrapedProducts = '';

        // remove categories if it is matching with sku
        $propertiesExt = $request->get('properties');
        if (isset($propertiesExt['category'])) {
            if (is_array($propertiesExt['category'])) {
                $categories = array_map('strtolower', $propertiesExt['category']);
                $strsku     = strtolower($sku);

                if (in_array($strsku, $categories)) {
                    $index = array_search($strsku, $categories);
                    unset($categories[$index]);
                }
                //category for scrapper
                if (is_array($categories)) {
                    $categoryForScrapedProducts = implode(',', $categories);
                } else {
                    $categoryForScrapedProducts = $categories;
                }

                $propertiesExt['category'] = $categories;
            } else {
                $propertiesExt['category'] = '';
            }
        }

        //color for scraperProducts for
        if (isset($propertiesExt['color'])) {
            if (is_array($propertiesExt['color'])) {
                $colorForScrapedProducts = implode(',', $propertiesExt['color']);
            } else {
                $colorForScrapedProducts = $propertiesExt['color'];
            }
        }

        //compostion for scraped Products
        if (isset($propertiesExt['material_used'])) {
            if (is_array($propertiesExt['material_used'])) {
                $compositionForScrapedProducts = implode(',', $propertiesExt['material_used']);
            } else {
                $compositionForScrapedProducts = $propertiesExt['material_used'];
            }
        }

        // Get this product from scraped products
        $scrapedProduct = ScrapedProducts::where('sku', $sku)->where('website', $request->get('website'))->first();
        $images         = $request->get('images') ?? [];
        $scPrice        = (float) $request->get('price');

        try {
            if (strlen($scPrice) > 4 && strlen($scPrice) < 6) {
                $scPrice = substr($scPrice, 0, 3);
                $scPrice = $scPrice . '.00';
            } elseif (strlen($scPrice) > 5 && strlen($scPrice) < 7) {
                $scPrice = substr($scPrice, 0, 4);
                $scPrice = $scPrice . '.00';
            }
        } catch (Exception $e) {
            \Log::info('Having problem with this price' . $scPrice . ' and get message is ' . $e->getMessage());
        }

        if (is_numeric($scPrice)) {
            $scPrice = ceil($scPrice / 10) * 10;
        }

        if ($scrapedProduct) {
            // Set values for existing scraped product
            $scrapedProduct->images      = $images;
            $scrapedProduct->url         = $request->get('url');
            $scrapedProduct->properties  = $propertiesExt;
            $scrapedProduct->is_sale     = $request->get('is_sale') ?? 0;
            $scrapedProduct->title       = ProductHelper::getRedactedText($request->get('title'), 'name');
            $scrapedProduct->description = ProductHelper::getRedactedText($request->get('description'), 'short_description');
            $scrapedProduct->brand_id    = $brand->id;
            $scrapedProduct->currency    = $request->get('currency');
            $scrapedProduct->price       = (float) $scPrice;
            if ($request->get('currency') == 'EUR') {
                $scrapedProduct->price_eur = (float) $scPrice;
            }
            $scrapedProduct->discounted_price      = $request->get('discounted_price');
            $scrapedProduct->discounted_percentage = (float) $request->get('discounted_percentage', 0.00);
            $scrapedProduct->original_sku          = trim($request->get('sku'));
            $scrapedProduct->last_inventory_at     = Carbon::now()->toDateTimeString();
            $scrapedProduct->validated             = empty($errorLog['error']) ? 1 : 0;
            $scrapedProduct->validation_result     = $errorLog['error'] . $errorLog['warning'];
            $scrapedProduct->category              = isset($request->properties['category']) ? serialize($request->properties['category']) : null;
            $scrapedProduct->categories            = $categoryForScrapedProducts;
            $scrapedProduct->color                 = $colorForScrapedProducts;
            $scrapedProduct->composition           = $compositionForScrapedProducts;
            $scrapedProduct->material_used         = $compositionForScrapedProducts;
            $scrapedProduct->supplier_id           = isset($requestedProperties['supplier']) ? $requestedProperties['supplier'] : null;
            $scrapedProduct->country               = isset($requestedProperties['country']) ? $requestedProperties['country'] : null;
            $scrapedProduct->size                  = (isset($requestedProperties['sizes']) && is_array($requestedProperties['sizes'])) ? implode(',', $requestedProperties['sizes']) : null;
            if ($request->get('size_system') != '') {
                $scrapedProduct->size_system = $request->get('size_system');
            }
            $scrapedProduct->save();
            $scrapedProduct->touch();
        } else {
            // Create new scraped product
            $scrapedProduct = new ScrapedProducts();

            $scrapedProduct->images                = $images;
            $scrapedProduct->sku                   = $sku;
            $scrapedProduct->original_sku          = trim($request->get('sku'));
            $scrapedProduct->discounted_price      = $request->get('discounted_price');
            $scrapedProduct->is_sale               = $request->get('is_sale') ?? 0;
            $scrapedProduct->has_sku               = 1;
            $scrapedProduct->url                   = $request->get('url');
            $scrapedProduct->title                 = ProductHelper::getRedactedText($request->get('title') ?? 'N/A', 'name');
            $scrapedProduct->description           = ProductHelper::getRedactedText($request->get('description'), 'short_description');
            $scrapedProduct->properties            = $propertiesExt;
            $scrapedProduct->currency              = ProductHelper::getCurrency($request->get('currency'));
            $scrapedProduct->price                 = (float) $scPrice;
            $scrapedProduct->discounted_percentage = (float) $request->get('discounted_percentage', 0.00);
            if ($request->get('currency') == 'EUR') {
                $scrapedProduct->price_eur = (float) $scPrice;
            }
            $scrapedProduct->last_inventory_at = Carbon::now()->toDateTimeString();
            $scrapedProduct->website           = $request->get('website');
            $scrapedProduct->brand_id          = $brand->id;
            $scrapedProduct->category          = isset($request->properties['category']) ? serialize($request->properties['category']) : null;
            $scrapedProduct->validated         = empty($errorLog) ? 1 : 0;
            $scrapedProduct->validation_result = $errorLog['error'] . $errorLog['warning'];
            //adding new fields
            $scrapedProduct->categories    = $categoryForScrapedProducts;
            $scrapedProduct->color         = $colorForScrapedProducts;
            $scrapedProduct->composition   = $compositionForScrapedProducts;
            $scrapedProduct->material_used = $compositionForScrapedProducts;
            $scrapedProduct->supplier_id   = isset($requestedProperties['supplier']) ? $requestedProperties['supplier'] : null;
            $scrapedProduct->country       = isset($requestedProperties['country']) ? $requestedProperties['country'] : null;
            $scrapedProduct->size          = (isset($requestedProperties['sizes']) && is_array($requestedProperties['sizes'])) ? implode(',', $requestedProperties['sizes']) : null;
            if ($request->get('size_system') != '') {
                $scrapedProduct->size_system = $request->get('size_system');
            }
            $scrapedProduct->save();
        }

        $scrap_details = Scraper::where(['scraper_name' => $request->get('website')])->first();
        $this->saveScrapperRequest($scrap_details, $errorLog);

        // Create or update product
        $scrapedProductUpdate = ScrapedProducts::where('sku', $sku)
            ->whereNotNull('description') // Filter out rows where description is null
            ->orderBy('sort_order') // Order by sort_order
            ->first();
        app(ProductsCreator::class)->createProduct($scrapedProductUpdate);

        // Return response
        return response()->json([
            'status' => 'Added items successfully!',
        ]);
    }

    public function storeUnknownSizes(Request $request)
    {
        $statusId = \App\Helpers\StatusHelper::$unknownSize;
        $products = Product::where('status_id', $statusId)->select('id', 'size', 'supplier_id')->get();
        foreach ($products as $product) {
            $size_system  = ScrapedProducts::where('product_id', $product->id)->pluck('size_system')->first();
            $systemSizeId = \App\SystemSize::where('name', $size_system)->pluck('id')->first();
            $sizes        = explode(',', $product['size']);
            foreach ($sizes as $size) {
                $erp_sizeFound = \App\SizeAndErpSize::where(['size' => $size])->first();
                if ($erp_sizeFound == null) {
                    \App\SizeAndErpSize::updateOrCreate(['size' => $size, 'system_size_id' => $systemSizeId], ['size' => $size, 'system_size_id' => $systemSizeId]);
                } elseif ($erp_sizeFound['erp_size_id'] != null) {
                    $erp_size = SystemSizeManager::where('id', $erp_sizeFound['erp_size_id'])->pluck('erp_size')->first();

                    \App\ProductSizes::updateOrCreate([
                        'product_id' => $product->id, 'supplier_id' => $product->supplier_id, 'size' => $erp_size,
                    ], [
                        'product_id' => $product->id, 'quantity' => 1, 'supplier_id' => $product->supplier_id, 'size' => $erp_size,
                    ]);
                }
            }
        }

        return redirect(url('/'));
    }

    public function saveScrapperRequest($scrap_details, $errorLog)
    {
        try {
            //check if scraper of same id have records with same day , then only update the end time
            $check_history = ScrapRequestHistory::where(['scraper_id' => $scrap_details->id, 'start_date' => Carbon::now()])->firstOrFail();
            //update the request data
            ScrapRequestHistory::where(['scraper_id' => $scrap_details->id])->update([
                'end_time'       => Carbon::now(),
                'request_sent'   => empty($errorLog) ? intval($check_history->request_sent + 1) : intval($check_history->request_sent),
                'request_failed' => empty($errorLog) ? intval($check_history->request_failed) : intval($check_history->request_failed + 1),
            ]);
        } catch (Exception $e) {
            if ($scrap_details) {
                ScrapRequestHistory::create([
                    'scraper_id'     => $scrap_details->id,
                    'date'           => Carbon::now(),
                    'start_time'     => Carbon::now(),
                    'end_time'       => Carbon::now(),
                    'request_sent'   => empty($errorLog) ? 1 : 0,
                    'request_failed' => empty($errorLog) ? 0 : 1,
                ]);
            }
        }

        return true;
    }

    public function excel_import()
    {
        $products = ScrapedProducts::where('website', 'EXCEL_IMPORT_TYPE_1')->paginate(25);

        return view('scrap.excel', compact('products'));
    }

    public function excel_store(Request $request)
    {
        $this->validate($request, [
            'file' => 'required|file',
        ]);

        $file = $request->file('file');

        if ($file->getClientOriginalExtension() == 'xlsx') {
            $reader = new Xlsx();
        } else {
            if ($file->getClientOriginalExtension() == 'xls') {
                $reader = new Xls();
            }
        }

        $spreadsheet = $reader->load($file->getPathname());
        $cells       = [];

        $i = 0;
        foreach ($spreadsheet->getActiveSheet()->getDrawingCollection() as $drawing) {
            if ($drawing instanceof \PhpOffice\PhpSpreadsheet\Worksheet\MemoryDrawing) {
                ob_start();
                call_user_func(
                    $drawing->getRenderingFunction(),
                    $drawing->getImageResource()
                );
                $imageContents = ob_get_contents();
                ob_end_clean();
                switch ($drawing->getMimeType()) {
                    case \PhpOffice\PhpSpreadsheet\Worksheet\MemoryDrawing::MIMETYPE_PNG:
                        $extension = 'png';
                        break;
                    case \PhpOffice\PhpSpreadsheet\Worksheet\MemoryDrawing::MIMETYPE_GIF:
                        $extension = 'gif';
                        break;
                    case \PhpOffice\PhpSpreadsheet\Worksheet\MemoryDrawing::MIMETYPE_JPEG:
                        $extension = 'jpg';
                        break;
                }
            } else {
                $zipReader     = fopen($drawing->getPath(), 'r');
                $imageContents = '';
                while (! feof($zipReader)) {
                    $imageContents .= fread($zipReader, 1024);
                }
                fclose($zipReader);
                $extension = $drawing->getExtension();
            }

            $myFileName = '00_Image_' . ++$i . '.' . $extension;
            file_put_contents('uploads/social-media/' . $myFileName, $imageContents);
            $cells[substr($drawing->getCoordinates(), 2)][] = $myFileName;
        }

        $cells_new = [];
        $c         = 0;
        foreach ($cells as $cell) {
            $cells_new[$c] = $cell;
            $c++;
        }

        $files = Excel::toArray(new ProductsImport(), $file);
        $th    = [];

        foreach ($files[0] as $key => $file) {
            if (
                in_array('MODELLO', $file)
                + in_array('VARIANTE', $file)
                + in_array('COLORE', $file)
                + in_array('GRUPPO', $file)
                + in_array('SETTORE', $file)
                + in_array('DESCRIZIONE', $file)
                + in_array('BRAND', $file)
                + in_array('PR. ACQUISTO', $file)
                + in_array('TESSUTO', $file)
                + in_array('PR. VENDITA', $file)
                + in_array('COD. FOTO', $file)
                >= 4) {
                $th = $file;
                unset($files[0][$key]);
                break;
            }
            unset($files[0][$key]);
        }

        $fields_only_with_keys = [];

        foreach ($th as $key => $file) {
            if ($file) {
                $fields_only_with_keys[$key] = $file;
            }
        }

        $dataToSave = [];

        foreach ($files[0] as $pkey => $row) {
            $null_count = 0;
            foreach ($row as $item) {
                if ($item === null) {
                    $null_count++;
                }
            }
            if ($null_count > 30) {
                unset($files[0][$pkey]);
            }
        }

        $c = 0;
        foreach ($files[0] as $pkey => $row) {
            foreach ($fields_only_with_keys as $key => $item) {
                $dataToSave[$pkey][$item] = $row[$key];
                if ($item == 'COD. FOTO') {
                    $dataToSave[$pkey][$item] = $cells_new[$c];
                }
            }
            $c++;
        }

        foreach ($dataToSave as $item) {
            $sku = $item['MODELLO VARIANTE COLORE'] ?? null;
            if (! $sku) {
                continue;
            }

            $brand = Brand::where('name', $item['BRAND'] ?? 'UNKNOWN_BRAND_FROM_FILE')->first();

            if (! $brand) {
                continue;
            }

            $sp                      = new ScrapedProducts();
            $sp->website             = 'EXCEL_IMPORT_TYPE_1';
            $sp->sku                 = $sku;
            $sp->has_sku             = 1;
            $sp->brand_id            = $brand->id;
            $sp->title               = $sku;
            $sp->description         = $item['description'] ?? null;
            $sp->images              = $item['COD. FOTO'] ?? [];
            $sp->price               = 'N/A';
            $sp->properties          = $item;
            $sp->url                 = 'N/A';
            $sp->is_property_updated = 0;
            $sp->is_price_updated    = 0;
            $sp->is_enriched         = 0;
            $sp->can_be_deleted      = 0;
            $sp->save();
        }

        return redirect()->back()->with('message', 'Excel Imported Successfully!');
    }

    /**
     * @SWG\Post(
     *   path="/save-supplier",
     *   tags={"Scraper"},
     *   summary="Create supplier",
     *   operationId="scraper-product-save-supplier",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *   @SWG\Response(response=406, description="not acceptable"),
     *   @SWG\Response(response=500, description="internal server error"),
     *
     *      @SWG\Parameter(
     *          name="supplier",
     *          in="formData",
     *          required=true,
     *          type="string"
     *      ),
     *      @SWG\Parameter(
     *          name="phone",
     *          in="formData",
     *          required=true,
     *          type="string"
     *      ),
     *      @SWG\Parameter(
     *          name="address",
     *          in="formData",
     *          required=true,
     *          type="string"
     *      ),
     *      @SWG\Parameter(
     *          name="website",
     *          in="formData",
     *          required=true,
     *          type="string"
     *      ),
     *      @SWG\Parameter(
     *          name="email",
     *          in="formData",
     *          required=true,
     *          type="string"
     *      ),
     *      @SWG\Parameter(
     *          name="social_handle",
     *          in="formData",
     *          required=true,
     *          type="string"
     *      ),
     *      @SWG\Parameter(
     *          name="instagram_handle",
     *          in="formData",
     *          required=true,
     *          type="string"
     *      )
     * )
     */
    public function saveSupplier(Request $request)
    {
        $this->validate($request, [
            'supplier' => 'required',
        ]);

        $s = Supplier::where('supplier', $request->get('supplier'))->first();

        if ($s) {
            $s->email = $request->get('email');
            $s->save();

            return response()->json([
                'message' => 'Added successfully!',
            ]);
        }

        $params = [
            'supplier'         => ucwords($request->get('supplier')),
            'phone'            => str_replace('+', '', $request->get('phone')),
            'address'          => $request->get('address'),
            'website'          => $request->get('website'),
            'email'            => $request->get('email'),
            'social_handle'    => $request->get('social_handle'),
            'instagram_handle' => $request->get('instagram_handle'),
        ];

        Supplier::create($params);

        return response()->json([
            'message' => 'Added successfully!',
        ]);
    }

    /**
     * @SWG\Post(
     *   path="/products/new-supplier",
     *   tags={"Scraper"},
     *   summary="Update/Add product from external scraper",
     *   operationId="scraper-add-procuct-supplier",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *   @SWG\Response(response=406, description="not acceptable"),
     *   @SWG\Response(response=500, description="internal server error"),
     * )
     */
    /**
     * Save incoming data from scraper
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function saveFromNewSupplier(Request $request)
    {
        $receivedJson = json_decode($request->getContent());
        if (! isset($receivedJson)) {
            return response()->json([
                'status' => 'Json format not valid',
            ], 400);
        }

        if ($receivedJson->id == '') {
            return response()->json([
                'status' => 'Product id empty',
            ], 400);
        }

        if ($receivedJson->brand == '') {
            return response()->json([
                'status' => 'Brand name is empty',
            ], 400);
        }
        // Find product
        $product = Product::find($receivedJson->id);

        if ($product) {
            // sets initial status pending for Finished external Scraper
            $pending_finished_external_scraper = [
                'product_id'     => $product->id,
                'old_status'     => $product->status_id,
                'new_status'     => StatusHelper::$externalScraperFinished,
                'pending_status' => 1,
                'created_at'     => date('Y-m-d H:i:s'),
            ];
            \App\ProductStatusHistory::addStatusToProduct($pending_finished_external_scraper);
        }
        // Get brand
        $brand = Brand::where('name', $receivedJson->brand)->first();
        // No brand found?
        if (! $brand) {
            // Check for reference
            $brand = Brand::where('references', 'LIKE', '%' . $receivedJson->brand . '%')->first();

            if (! $brand) {
                // if brand is not then create a brand
                $brand = Brand::create([
                    'name' => $receivedJson->brand,
                ]);
            }
        }
        //add log in scraped product
        $website        = isset($receivedJson->website) ? $receivedJson->website : '';
        $scrapedProduct = null;
        if (! empty($website)) {
            $scrapedProduct = ScrapedProducts::where('website', $website)
                ->where('sku', ! empty($receivedJson->sku) ? $receivedJson->sku : $product->sku)
                ->first();

            if ($scrapedProduct == null || $scrapedProduct == '') {
                $scrapedProduct          = new ScrapedProducts();
                $scrapedProduct->sku     = ! empty($receivedJson->sku) ? $receivedJson->sku : $product->sku;
                $scrapedProduct->website = $website;
            }

            $scrapedProduct->has_sku       = 1;
            $scrapedProduct->supplier      = isset($receivedJson->supplier) ? $receivedJson->supplier : '';
            $scrapedProduct->title         = isset($receivedJson->title) ? $receivedJson->title : '';
            $scrapedProduct->composition   = isset($receivedJson->composition) ? $receivedJson->composition : '';
            $scrapedProduct->color         = isset($receivedJson->color) ? $receivedJson->color : '';
            $scrapedProduct->brand_id      = $brand->id;
            $scrapedProduct->description   = $brand->description;
            $scrapedProduct->material_used = isset($receivedJson->composition) ? $receivedJson->composition : '';
            $scrapedProduct->country       = isset($receivedJson->country) ? $receivedJson->country : '';
            $scrapedProduct->size          = isset($receivedJson->sizes) ? implode(',', $receivedJson->sizes) : '';
            $scrapedProduct->url           = isset($receivedJson->url) ? $receivedJson->url : '';
            $scrapedProduct->images        = isset($receivedJson->images) ? serialize($receivedJson->images) : '';
            $scrapedProduct->size_system   = isset($receivedJson->size_system) ? $receivedJson->size_system : '';
            $scrapedProduct->currency      = isset($receivedJson->currency) ? $receivedJson->currency : '';
            $scrapedProduct->price         = isset($receivedJson->price) ? ($receivedJson->price) : '';

            $scrapedProduct->is_property_updated = 0;
            $scrapedProduct->is_external_scraper = 1;
            $scrapedProduct->is_price_updated    = 0;
            $scrapedProduct->is_enriched         = 0;
            $scrapedProduct->can_be_deleted      = 0;
            $scrapedProduct->validated           = 1;
            $scrapedProduct->save();
        }

        // Return false if no product is found
        if ($product == null) {
            // $scrapedProduct->validated = 1;
            if ($scrapedProduct) {
                $scrapedProduct->validated         = 0;
                $scrapedProduct->validation_result = 'Error processing your request (#1)';
                $scrapedProduct->save();
            }

            return response()->json([
                'status' => 'Error processing your request (#1)',
            ], 400);
        }

        if (isset($receivedJson->status)) {
            // Search For ScraperQueue
            ScrapeQueues::where('done', 0)->where('product_id', $product->id)->update(['done' => 2]);
            $product->status_id = StatusHelper::$unableToScrape;
            $product->save();

            if ($scrapedProduct) {
                $scrapedProduct->validated         = 0;
                $scrapedProduct->validation_result = 'Product processed for unable to scrap';
                $scrapedProduct->save();
            }

            return response()->json([
                'status' => 'Product processed for unable to scrap',
            ]);
        }

        $input = get_object_vars($receivedJson);

        // Validate request
        $validator = Validator::make($input, [
            'id'          => 'required',
            'images'      => 'required|array',
            'description' => 'required',
        ]);

        // Return an error if the validator fails
        if ($validator->fails()) {
            if ($scrapedProduct) {
                $scrapedProduct->validation_result = json_encode($validator->messages());
                $scrapedProduct->save();
            }

            return response()->json($validator->messages(), 400);
        }

        // If product is found, update it
        if ($product) {
            // clear the request using for the new scraper
            $propertiesArray = [
                'material_used' => isset($receivedJson->properties->material_used) ? $receivedJson->properties->material_used : $receivedJson->composition,
                'color'         => isset($receivedJson->properties->color) ? $receivedJson->properties->color : $receivedJson->color,
                'sizes'         => isset($receivedJson->properties->sizes) ? $receivedJson->properties->sizes : $receivedJson->sizes,
                'category'      => isset($receivedJson->properties->category) ? $receivedJson->properties->category : $receivedJson->category,
                'dimension'     => isset($receivedJson->properties->dimension) ? $receivedJson->properties->dimension : $receivedJson->dimensions,
                'country'       => isset($receivedJson->properties->country) ? $receivedJson->properties->country : $receivedJson->country,
            ];

            $formatter = (new \App\Services\Products\ProductsCreator)->getGeneralDetails($propertiesArray);

            $color       = \App\ColorNamesReference::getColorRequest($formatter['color'], $receivedJson->url, $receivedJson->title, $receivedJson->description);
            $composition = $formatter['composition'];
            if (! empty($formatter['composition'])) {
                $composition = \App\Compositions::getErpName($formatter['composition']);
            }

            $description = $receivedJson->description;
            if (! empty($receivedJson->description)) {
                $description = \App\DescriptionChange::getErpName($receivedJson->description);
            }

            // Set basic data
            if (empty($product->name)) {
                $product->name = $receivedJson->title;
            }

            if (empty($product->short_description)) {
                $product->short_description = $description;
            }

            if (empty($product->composition)) {
                $product->composition = $composition;
            }

            if (empty($product->color) && ! empty($formatter['color'])) {
                $product->color = $color;
            }

            if (empty($formatter['color'])) {
                $product->suggested_color = $color;
            }

            if (empty($product->description_link)) {
                $product->description_link = $receivedJson->url;
            }

            if (empty($product->made_in)) {
                $product->made_in = $formatter['made_in'];
            }

            if (empty($product->category)) {
                $product->category = $formatter['category'];
            }

            // if size is empty then only update
            if (empty($product->size)) {
                $product->size = $formatter['size'];
            }
            if ((int) $product->price == 0) {
                $product->price = $receivedJson->price;
            }
            $product->listing_remark = 'Original SKU: ' . $receivedJson->sku;

            // Set optional data
            if (! $product->lmeasurement) {
                $product->lmeasurement = $formatter['lmeasurement'];
            }
            if (! $product->hmeasurement) {
                $product->hmeasurement = $formatter['hmeasurement'];
            }
            if (! $product->dmeasurement) {
                $product->dmeasurement = $formatter['dmeasurement'];
            }

            // Save
            $product->status_id = StatusHelper::$externalScraperFinished;
            $product->save();

            // sets initial status pending for Finished external Scraper
            $finished_external_scraper = [
                'product_id'     => $product->id,
                'old_status'     => $product->status_id,
                'new_status'     => StatusHelper::$externalScraperFinished,
                'pending_status' => 0,
                'created_at'     => date('Y-m-d H:i:s'),
            ];
            \App\ProductStatusHistory::addStatusToProduct($finished_external_scraper);

            // Check if we have images
            $product->attachImagesToProduct($receivedJson->images);

            if (isset($receivedJson->website)) {
                $supplierModel = Supplier::leftJoin('scrapers as sc', 'sc.supplier_id', 'suppliers.id')->where(function ($query) use ($receivedJson) {
                    $query->where('supplier', '=', $receivedJson->website)->orWhere('sc.scraper_name', '=', $receivedJson->website);
                })->first();

                if ($supplierModel) {
                    $productSupplier = \App\ProductSupplier::where('supplier_id', $supplierModel->id)->where('product_id', $product->id)->first();
                    if (! $productSupplier) {
                        $productSupplier              = new \App\ProductSupplier;
                        $productSupplier->supplier_id = $supplierModel->id;
                        $productSupplier->product_id  = $product->id;
                    }

                    $productSupplier->title         = $receivedJson->title;
                    $productSupplier->description   = $description;
                    $productSupplier->supplier_link = $receivedJson->url;
                    $productSupplier->stock         = 1;
                    $productSupplier->price         = ($product->price > 0) ? $product->price : 0;
                    $productSupplier->size          = $formatter['size'];
                    $productSupplier->color         = isset($formatter['color']) ? $formatter['color'] : '';
                    $productSupplier->composition   = isset($formatter['composition']) ? $formatter['composition'] : '';
                    $productSupplier->sku           = $receivedJson->sku;
                    $productSupplier->save();
                }
            }

            // Update scrape_queues by product ID
            ScrapeQueues::where('done', 0)->where('product_id', $product->id)->update(['done' => 1]);
            // Return response
            return response()->json([
                'status' => 'Product processed',
            ]);
        }
        //
        if ($scrapedProduct) {
            $scrapedProduct->validated         = 0;
            $scrapedProduct->validation_result = 'Error processing your request (#99)';
            $scrapedProduct->save();
        }

        // Still here? Return error
        return response()->json([
            'status' => 'Error processing your request (#99)',
        ], 400);
    }

    /**
     * @SWG\Post(
     *   path="/scrape/process-product-links",
     *   tags={"Scraper"},
     *   summary="Process product links for scraper to check which links are available to scrap",
     *   operationId="scraper-process-product-links",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *   @SWG\Response(response=406, description="not acceptable"),
     *   @SWG\Response(response=500, description="internal server error"),
     *
     *      @SWG\Parameter(
     *          name="links[]",
     *          in="formData",
     *          required=true,
     *          type="string"
     *      ),
     *      @SWG\Parameter(
     *          name="website",
     *          in="formData",
     *          required=true,
     *          type="string"
     *      ),
     * )
     */
    public function scrap_links(Request $request)
    {
        $scrap_links = ScrapedProductsLinks::select('*');

        if (! empty($request->status)) {
            $scrap_links = $scrap_links->where('status', $request->status);
        }

        if (! empty($request->selected_date)) {
            $scrap_links = $scrap_links->whereDate('created_at', '=', $request->selected_date);
        }

        if (! empty($request->search)) {
            $scrap_links = $scrap_links->where('links', 'LIKE', '%' . $request->search . '%')->orWhere('website', 'LIKE', '%' . $request->search . '%');
        }

        $scrap_links = $scrap_links->orderBy('id', 'DESC')->paginate(25);

        return view('scrap.scrap-links', ['scrap_links' => $scrap_links])->with('i', ($request->input('page', 1) - 1) * 25);
    }

    public function scrapLinksStatusHistories($id)
    {
        $datas = ScrapedProductsLinksHistory::where('scraped_products_links_id', $id)->latest()->get();

        return response()->json([
            'status'      => true,
            'data'        => $datas,
            'message'     => 'History get successfully',
            'status_name' => 'success',
        ], 200);
    }

    public function processProductLinks(Request $request)
    {
        $pendingUrl = [];
        $links      = $request->links;
        $website    = $request->website;

        if (empty($website)) {
            $rawJson = json_decode($request->instance()->getContent());
            $website = isset($rawJson->website) ? $rawJson->website : null;
        }
        if (is_string($links)) {
            $links = json_decode($links);
        } else {
            $rawJson = json_decode($request->instance()->getContent());
            $links   = isset($rawJson->links) ? $rawJson->links : null;
        }

        if (is_array($links)) {
            $scraper = Scraper::where('scraper_name', $website)->first();
            if (! empty($scraper)) {
                if ($scraper->full_scrape == 1) {
                    $scraper->full_scrape = 0;
                    $scraper->save();

                    foreach ($links as $key => $value) {
                        $input                     = [];
                        $input['status']           = 'new';
                        $input['website']          = $website;
                        $input['links']            = $value;
                        $input['scrap_product_id'] = 0;

                        $ScrapedProductsLinksNew = ScrapedProductsLinks::updateOrCreate(
                            ['links' => $value, 'website' => $website], $input
                        );

                        if (! empty($ScrapedProductsLinksNew)) {
                            ScrapedProductsLinksHistory::create([
                                'scraped_products_links_id' => $ScrapedProductsLinksNew->id,
                                'status'                    => 'new',
                            ]);
                        }
                    }

                    return $links;
                }
            }

            foreach ($links as $link) {
                // Load scraped product and update last_inventory_at
                $scrapedProduct = ScrapedProducts::where('url', $link)->where('website', $website)->first();

                if ($scrapedProduct != null) {
                    Log::channel('productUpdates')->debug('[scraped_product] Found existing product with sku ' . ProductHelper::getSku($scrapedProduct->sku));
                    $scrapedProduct->url               = $link;
                    $scrapedProduct->last_inventory_at = Carbon::now();
                    $scrapedProduct->save();

                    $input                     = [];
                    $input['status']           = 'in stock';
                    $input['website']          = $website;
                    $input['links']            = $link;
                    $input['scrap_product_id'] = $scrapedProduct->id;

                    $ScrapedProductsLinksInStock = ScrapedProductsLinks::updateOrCreate(
                        ['links' => $link, 'website' => $website], $input
                    );

                    if (! empty($ScrapedProductsLinksInStock)) {
                        ScrapedProductsLinksHistory::create([
                            'scraped_products_links_id' => $ScrapedProductsLinksInStock->id,
                            'status'                    => 'in stock',
                        ]);
                    }
                } else {
                    $pendingUrl[] = $link;

                    $input                     = [];
                    $input['status']           = 'out of stock';
                    $input['website']          = $website;
                    $input['links']            = $link;
                    $input['scrap_product_id'] = 0;

                    $ScrapedProductsLinksOutOfStock = ScrapedProductsLinks::updateOrCreate(
                        ['links' => $link, 'website' => $website], $input
                    );

                    if (! empty($ScrapedProductsLinksOutOfStock)) {
                        ScrapedProductsLinksHistory::create([
                            'scraped_products_links_id' => $ScrapedProductsLinksOutOfStock->id,
                            'status'                    => 'out of stock',
                        ]);
                    }
                }
            }

            //Getting Supplier by Scraper name
            try {
                $scraper       = Scraper::where('scraper_name', $website)->first();
                $totalLinks    = count($links);
                $pendingLinks  = count($pendingUrl);
                $existingLinks = ($totalLinks - $pendingLinks);

                if ($scraper != '' && $scraper != null) {
                    $scraper->scraper_total_urls    = $totalLinks;
                    $scraper->scraper_existing_urls = $existingLinks;
                    $scraper->scraper_new_urls      = $pendingLinks;
                    $scraper->update();
                }

                $scraperResult                = new ScraperResult();
                $scraperResult->date          = date('Y-m-d');
                $scraperResult->scraper_name  = $website;
                $scraperResult->total_urls    = $totalLinks;
                $scraperResult->existing_urls = $existingLinks;
                $scraperResult->new_urls      = $pendingLinks;
                $scraperResult->save();
            } catch (Exception $e) {
            }
        }

        return $pendingUrl;
    }

    /**
     * @SWG\Post(
     *   path="/scrape/process-product-links-by-brand",
     *   tags={"Scraper"},
     *   summary="Process product links for scraper to check which links are available to scrap and will store the entry brand wise",
     *   operationId="scraper-process-product-links-by-brand",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *   @SWG\Response(response=406, description="not acceptable"),
     *   @SWG\Response(response=500, description="internal server error"),
     *
     *      @SWG\Parameter(
     *          name="links[]",
     *          in="formData",
     *          required=true,
     *          type="string"
     *      ),
     *      @SWG\Parameter(
     *          name="website",
     *          in="formData",
     *          required=true,
     *          type="string"
     *      ),
     * )
     */
    public function processProductLinksByBrand(Request $request)
    {
        set_time_limit(0);

        $pendingUrl = [];
        $links      = $request->links;
        $website    = $request->website;

        if (empty($website)) {
            $rawJson = json_decode($request->instance()->getContent());
            $website = isset($rawJson->website) ? $rawJson->website : null;
        }
        if (is_string($links)) {
            $links = json_decode($links);
        } else {
            $rawJson = json_decode($request->instance()->getContent());
            $links   = isset($rawJson->links) ? $rawJson->links : null;
        }

        if (is_array($links)) {
            $scraper = Scraper::where('scraper_name', $website)->first();
            if (! empty($scraper)) {
                if ($scraper->full_scrape == 1) {
                    $scraper->full_scrape = 0;
                    $scraper->save();

                    return $links;
                }
            }

            $brands = [];

            foreach ($links as $link) {
                // Load scraped product and update last_inventory_at
                $scrapedProduct = ScrapedProducts::where('url', $link->link)->where('website', $website)->first();

                if ($scrapedProduct != null) {
                    Log::channel('productUpdates')->debug('[scraped_product] Found existing product with sku ' . ProductHelper::getSku($scrapedProduct->sku));
                    $scrapedProduct->url               = $link->link;
                    $scrapedProduct->last_inventory_at = Carbon::now();
                    $scrapedProduct->save();

                    $product = \App\Product::where('sku', $scrapedProduct->sku)->first();
                    if ($product) {
                        $product->stock = $product->stock + 1;
                    }
                    $product->save();
                } else {
                    $pendingUrl[] = $link->link;
                }

                if (isset($brands[$link->brand])) {
                    $brands[$link->brand] = $brands[$link->brand] + 1;
                } else {
                    $brands[$link->brand] = 1;
                }
            }

            if (! empty($brands)) {
                foreach ($brands as $bn => $t) {
                    $brandM = \App\Brand::where('name', $bn)->first();
                    if ($brandM) {
                        $bscraperResult               = new \App\BrandScraperResult();
                        $bscraperResult->date         = date('Y-m-d');
                        $bscraperResult->scraper_name = $website;
                        $bscraperResult->total_urls   = $t;
                        $bscraperResult->brand_id     = $brandM->id;
                        $bscraperResult->save();
                    }
                }
            }

            //Getting Supplier by Scraper name
            try {
                $scraper       = Scraper::where('scraper_name', $website)->first();
                $totalLinks    = count($links);
                $pendingLinks  = count($pendingUrl);
                $existingLinks = ($totalLinks - $pendingLinks);

                if ($scraper != '' && $scraper != null) {
                    $scraper->scraper_total_urls    = $totalLinks;
                    $scraper->scraper_existing_urls = $existingLinks;
                    $scraper->scraper_new_urls      = $pendingLinks;
                    $scraper->update();
                }

                $scraperResult                = new ScraperResult();
                $scraperResult->date          = date('Y-m-d');
                $scraperResult->scraper_name  = $website;
                $scraperResult->total_urls    = $totalLinks;
                $scraperResult->existing_urls = $existingLinks;
                $scraperResult->new_urls      = $pendingLinks;
                $scraperResult->save();
            } catch (Exception $e) {
            }
        }

        return $pendingUrl;
    }

    public function scrapedUrls(Request $request)
    {
        $totalSkuRecords       = 0;
        $totalUniqueSkuRecords = 0;
        $users                 = Helpers::getUserArray(User::role('Developer')->get());
        if ($request->website || $request->url || $request->sku || $request->title || $request->price || $request->created || $request->brand || $request->updated || $request->currency == 0 || $request->orderCreated || $request->orderUpdated || $request->columns || $request->color || $request->psize || $request->category || $request->product_id || $request->dimension || $request->prod_img_filter || $request->prod_error_filter) {
            $query = \App\ScrapedProducts::query();

            $dateRange = request('daterange', '');
            $startDate = false;
            $endDate   = false;

            if (! empty($dateRange)) {
                $range = explode(' - ', $dateRange);
                if (! empty($range[0]) && ! empty($range[1])) {
                    $startDate = $range[0];
                    $endDate   = $range[1];
                }
            }

            //global search website
            if (request('prod_img_filter') != null && request('prod_img_filter') == '0') {
                $query->whereRaw('( JSON_EXTRACT(images, "$")  like "%.jpg%" or  JSON_EXTRACT(images, "$")  like "%.png%" or JSON_EXTRACT(images, "$") like "%.jpeg%" or JSON_EXTRACT(images, "$") like "%.gif%")');
            } elseif (request('prod_img_filter') != null && request('prod_img_filter') == '1') {
                $query->whereRaw('not( JSON_EXTRACT(images, "$")  like "%.jpg%" or  JSON_EXTRACT(images, "$")  like "%.png%" or JSON_EXTRACT(images, "$") like "%.jpeg%" or JSON_EXTRACT(images, "$") like "%.gif%")');
            }

            if (request('prod_error_filter') != null && request('prod_error_filter') == '0') {
                $query->where('validation_result', '!=', null);
            } elseif (request('prod_error_filter') != null && request('prod_error_filter') == '1') {
                $query->where('validation_result', '=', null);
            }
            if (request('website') != null) {
                $query->whereIn('website', $request->website);
            }

            if (request('url') != null) {
                $query->where('url', 'LIKE', "%{$request->url}%");
            }

            if (request('sku') != null) {
                $query->where('sku', 'LIKE', "%{$request->sku}%");
            }

            if (request('title') != null) {
                $query->where('title', 'LIKE', "%{$request->title}%");
            }

            if (request('currency') != null) {
                $query->where('currency', 'LIKE', "%{$request->currency}%");
            }

            if (request('price') != null) {
                $query->where('price', 'LIKE', "%{$request->price}%");
            }

            if (request('color') != null) {
                $query->whereRaw('JSON_EXTRACT(properties, \'$.color\') like "%' . $request->color . '%"');
            }

            if (request('category') != null) {
                $query->whereRaw('JSON_EXTRACT(properties, \'$.category\') like "%' . $request->category . '%"');
            }

            if (request('psize') != null) {
                $query->whereRaw('JSON_EXTRACT(properties, \'$.sizes\') like "%' . $request->psize . '%" OR JSON_EXTRACT(properties, \'$.size\') like "%' . $request->psize . '%"');
            }

            if (request('dimension') != null) {
                $query->whereRaw('JSON_EXTRACT(properties, \'$.dimension\') like "%' . $request->dimension . '%"');
            }

            if (request('product_id') != null) {
                $productIds = explode(',', $request->product_id);
                $query->whereIn('product_id', $productIds);
            }

            if (request('created') != null) {
                $query->whereDate('created_at', Carbon::parse($request->created)->format('Y-m-d'));
            }

            if (request('brand') != null) {
                $suppliers = request('brand');
                $query->whereIn('brand_id', $suppliers);
            }

            if (request('updated') != null) {
                $query->whereDate('updated_at', request('updated'));
            }

            if (! empty($startDate)) {
                $query->whereDate('created_at', ' >= ', $startDate);
            }

            if (! empty($endDate)) {
                $query->whereDate('created_at', ' <= ', $endDate);
            }

            if (request('orderCreated') != null) {
                if (request('orderCreated') == 0) {
                    $query->orderby('created_at', 'asc');
                } else {
                    $query->orderby('created_at', 'desc');
                }
            }

            if (request('orderUpdated') != null) {
                if (request('orderUpdated') == 0) {
                    $query->orderby('updated_at', 'asc');
                } else {
                    $query->orderby('updated_at', 'desc');
                }
            }

            if (request('orderCreated') == null && request('orderUpdated') == null) {
                $query->orderby('updated_at', 'desc');
            }

            $paginate = (Setting::get('pagination') * 10);
            $logs     = $query->paginate($paginate)->appends(request()->except(['page']));
            $search   = [
                \DB::raw('count(*) as total_record'),
                \DB::raw('count(DISTINCT p.sku) as total_u_record'),
            ];

            if (! empty($startDate) && ! empty($endDate)) {
                $search[] = \DB::raw("DATE_FORMAT(scraped_products.created_at, '%Y-%m-%d') as date");
            } else {
                $search[] = \DB::raw("'All' as date");
            }

            $totalUniqueSkuRecords = \DB::table('scraped_products')->leftJoin('products as p', function ($q) {
                $q->on('p.id', 'scraped_products.product_id')->where('stock', '>=', 1);
            });

            if (! empty($startDate)) {
                $totalUniqueSkuRecords->whereDate('scraped_products.created_at', ' >= ', $startDate);
            }

            if (! empty($endDate)) {
                $totalUniqueSkuRecords->whereDate('scraped_products.created_at', ' <= ', $endDate);
                $totalUniqueSkuRecords->groupBy(\DB::raw('DATE_FORMAT(scraped_products.created_at, "%Y-%m-%d")'));
            }

            $totalUniqueSkuRecords->select($search);
            $summeryRecords = $totalUniqueSkuRecords->get();

            $response = request()->except(['page']);
            if (empty($response['columns'])) {
                $response['columns'] = ['color', 'category', 'size', 'dimension'];
            }
        } else {
            $response = '';
            $paginate = (Setting::get('pagination') * 10);

            $logs = LogScraper::orderby('updated_at', 'desc')->paginate($paginate);
        }
        if ($request->ajax()) {
            return response()->json([
                'tbody' => view('scrap.partials.scraped_url_data', compact('logs', 'response', 'summeryRecords', 'users'))->render(),
                'links' => (string) $logs->render(),
                'count' => $logs->total(),
            ], 200);
        }

        return view('scrap.scraped_url', compact('logs', 'response', 'summeryRecords', 'users'));
    }

    /**
     * @SWG\Get(
     *   path="/products/auto-rejected",
     *   tags={"Scraper"},
     *   summary="List of product which is in queue where done = 0 in scrap_queues",
     *   operationId="scraper-products-auto-rejected",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *   @SWG\Response(response=406, description="not acceptable"),
     *   @SWG\Response(response=500, description="internal server error"),
     * )
     */

    /**
     * @SWG\Get(
     *   path="products/get-products-to-scrape",
     *   tags={"Scraper"},
     *   summary="List of product which is in queue where done = 0 in scrap_queues",
     *   operationId="scraper-products-get-products-to-scrape",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *   @SWG\Response(response=406, description="not acceptable"),
     *   @SWG\Response(response=500, description="internal server error"),
     * )
     */

    /**
     * @SWG\Get(
     *   path="products/new-supplier",
     *   tags={"Scraper"},
     *   summary="List of product which is in queue where done = 0 in scrap_queues",
     *   operationId="scraper-products-new-supplier",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *   @SWG\Response(response=406, description="not acceptable"),
     *   @SWG\Response(response=500, description="internal server error"),
     * )
     */
    public function getProductsToScrape()
    {
        // Set empty value of productsToPush
        $productsToPush = [];

        // Get all products with status scrape from scrape_queues
        $scrapeQueues = ScrapeQueues::where('done', 0)->orderBy('product_id', 'DESC')->take(50)->get();

        // Check if we have products and loop over them
        if ($scrapeQueues !== null) {
            foreach ($scrapeQueues as $scrapedQueue) {
                // Get product
                $product = Product::find($scrapedQueue->product_id);

                // Add to array
                $productsToPush[] = [
                    'id'           => $scrapedQueue->product_id,
                    'sku'          => null,
                    'original_sku' => null,
                    'brand'        => $product->brands ? $product->brands->name : '',
                    'url'          => $scrapedQueue->url,
                    'supplier'     => $product->supplier,
                ];

                // Update status to is being scraped
                $product->status_id = StatusHelper::$isBeingScrapedWithGoogleImageSearch;
                $product->save();
            }
        }

        // Only run if productsToPush is empty
        if (! is_array($productsToPush) || count($productsToPush) == 0) {
            // Get all products with status scrape
            $products = Product::where('status_id', StatusHelper::$scrape)->where('stock', '>=', 1)->orderBy('products.id', 'DESC')->take(50)->get();

            // Check if we have products and loop over them
            if ($products !== null) {
                foreach ($products as $product) {
                    // Get original SKU
                    $scrapedProduct = ScrapedProducts::where('sku', $product->sku)->first();

                    if ($scrapedProduct != null) {
                        // Add to array
                        $productsToPush[] = [
                            'id'           => $product->id,
                            'sku'          => $product->sku,
                            'original_sku' => ProductHelper::getOriginalSkuByBrand(! empty($scrapedProduct->original_sku) ? $scrapedProduct->original_sku : $scrapedProduct->sku, $product->brands ? $product->brands->id : 0),
                            'brand'        => $product->brands ? $product->brands->name : '',
                            'url'          => null,
                            'supplier'     => $product->supplier,
                        ];

                        // Update status to is being scraped
                        $product->status_id = StatusHelper::$isBeingScraped;
                        $product->save();
                    }
                }
            }
        }

        // Return JSON response
        return response()->json($productsToPush);
    }

    public function genericScraper(Request $request)
    {
        $query = Scraper::query();

        if ($request->global != null) {
            $query = $query->where('scraper_name', 'LIKE', "%{$request->global}%")
                ->orWhere('product_url_selector', 'LIKE', "%{$request->global}%")
                ->orWhere('designer_url_selector', 'LIKE', "%{$request->global}%")
                ->orWhere('starting_urls', 'LIKE', "%{$request->global}%")
                ->orWhere('run_gap', 'LIKE', "%{$request->global}%")
                ->orWhere('time_out', 'LIKE', "%{$request->global}%")
                ->orWhereHas('mainSupplier', function ($qu) use ($request) {
                    $qu->where('supplier', 'LIKE', "%{$request->global}%");
                });
        }

        if ($request->scraper_name != null) {
            $query = $query->where('scraper_name', 'LIKE', "%{$request->scraper_name}%");
        }

        if ($request->run_gap_search != null) {
            $query = $query->where('run_gap', 'LIKE', "%{$request->run_gap_search}%");
        }

        if ($request->time_out_search != null) {
            $query = $query->where('time_out', 'LIKE', "%{$request->time_out_search}%");
        }

        if ($request->starting_url_search != null) {
            $query = $query->where('starting_urls', 'LIKE', "%{$request->starting_url_search}%");
        }

        if ($request->designer_url_search != null) {
            $query = $query->where('designer_url_selector', 'LIKE', "%{$request->designer_url_search}%");
        }

        if ($request->product_url_search != null) {
            $query = $query->where('product_url_selector', 'LIKE', "%{$request->product_url_search}%");
        }

        if ($request->supplier_name != null) {
            $query = $query->whereHas('mainSupplier', function ($qu) use ($request) {
                $qu->where('supplier', 'LIKE', "%{$request->supplier_name}%");
            });
        }

        $suppliers = Supplier::where('supplier_status_id', 1)->get();
        $scrapers  = $query->paginate(25)->appends(request()->except(['page']));

        if ($request->ajax()) {
            return response()->json([
                'tbody' => view('scrap.partials.supplier-scraper-data', compact('scrapers', 'suppliers'))->render(),
                'links' => (string) $scrapers->render(),
                'count' => $scrapers->total(),
            ], 200);
        }

        return view('scrap.supplier-scraper', compact('scrapers', 'suppliers'));
    }

    public function genericScraperSave(Request $request)
    {
        if ($request->id) {
            $scraper = Scraper::find($request->id);
        } else {
            $scraper               = new Scraper;
            $scraper->scraper_name = $request->name;
            $scraper->supplier_id  = $request->supplier_id;
        }

        $scraper->run_gap               = $request->run_gap;
        $scraper->full_scrape           = ! empty($request->full_scrape) ? $request->full_scrape : '';
        $scraper->time_out              = $request->time_out;
        $scraper->starting_urls         = $request->starting_url;
        $scraper->product_url_selector  = $request->product_url_selector;
        $scraper->designer_url_selector = $request->designer_url;
        $scraper->save();

        if ($request->ajax()) {
            return response()->json(['success'], 200);
        }

        return redirect()->back()->with('message', 'Scraper Saved');
    }

    public function genericMapping($id)
    {
        $scraper  = Scraper::find($id);
        $mappings = ScraperMapping::where('scrapers_id', $id)->get();

        return view('scrap.generic-scraper-mapping', compact('scraper', 'mappings', 'id'));
    }

    public function genericMappingSave(Request $request)
    {
        $id        = $request->id;
        $select    = $request->select;
        $count     = count($select);
        $functions = $request->functions;
        $parameter = $request->parameter;
        $selector  = $request->selector;

        for ($i = 0; $i < $count; $i++) {
            if ($select[$i] != null) {
                $updateMapping = ScraperMapping::where('scrapers_id', $id)->where('field_name', $select[$i])->first();
                if ($updateMapping != null) {
                    $mapping = $updateMapping;
                } else {
                    $mapping = new ScraperMapping;
                }
                if ($selector[$i] == null) {
                    $selector[$i] = '';
                }
                if ($functions[$i] == null) {
                    $functions[$i] = '';
                }
                if ($parameter[$i] == null) {
                    $parameter[$i] = '';
                }

                $mapping->field_name  = $select[$i];
                $mapping->scrapers_id = $id;
                $mapping->selector    = $selector[$i];
                $mapping->function    = $functions[$i];
                $mapping->parameter   = $parameter[$i];
                $mapping->save();
            }
        }

        return response()->json(['success'], 200);
    }

    /**
     * @SWG\Get(
     *   path="/scraper/next",
     *   tags={"Scrape​r"},
     *   summary="Send the next scraper",
     *   operationId="scraper-next",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *   @SWG\Response(response=400, description="No Scraper Present"),
     *   @SWG\Response(response=500, description="internal server error"),
     * )
     */
    public function sendScrapDetails()
    {
        $scraper = Scraper::whereRaw('(scrapers.start_time IS NULL OR scrapers.start_time < "2000-01-01 00:00:00" OR (scrapers.start_time < scrapers.end_time AND scrapers.end_time < DATE_SUB(NOW(), INTERVAL scrapers.run_gap HOUR)))')->where('time_out', '>', 0)->first();

        if ($scraper == null) {
            return response()->json(['message' => 'No Scraper Present'], 400);
        }
        $startingURLs = explode("\n", str_replace("\r", '', $scraper->starting_urls));

        $maps = ScraperMapping::where('scrapers_id', $scraper->id)->get();

        foreach ($maps as $map) {
            $mapArray[] = [$map->field_name => ['selector' => $map->selector, 'function' => $map->function, 'parameters' => $map->parameter]];
        }

        if (! isset($mapArray)) {
            $mapArray = [];
        }

        $scraper->start_time = now();
        $scraper->save();

        return response()->json(
            [
                'id'                    => $scraper->id,
                'website'               => $scraper->scraper_name,
                'timeout'               => $scraper->time_out,
                'starting_urls'         => $startingURLs,
                'designer_url_selector' => $scraper->designer_url_selector,
                'product_url_selector'  => $scraper->product_url_selector,
                'map'                   => $mapArray,
            ]
        );
    }

    /**
     * @SWG\Post(
     *   path="/scraper/endtime",
     *   tags={"Scrape​r"},
     *   summary="Update scraper end time",
     *   operationId="scraper-endtime",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *   @SWG\Response(response=400, description="No Scraper Present"),
     *   @SWG\Response(response=500, description="internal server error"),
     *
     *      @SWG\Parameter(
     *          name="id",
     *          in="path",
     *          required=true,
     *          type="integer"
     *      ),
     * )
     */
    public function recieveScrapDetails(Request $request)
    {
        $id      = $request->id;
        $scraper = Scraper::find($id);
        if ($scraper == null) {
            return response()->json(['message' => 'No Scraper Present'], 400);
        }
        $scraper->end_time = now();
        $scraper->save();

        return response()->json(['success'], 200);
    }

    public function genericMappingDelete(Request $request)
    {
        $id      = $request->id;
        $mapping = ScraperMapping::find($id);
        $mapping->delete();

        return response()->json(['success'], 200);
    }

    public function scraperFullScrape(Request $request)
    {
        $scraper = Scraper::find($request->id);
        if (! empty($scraper)) {
            $scraper->full_scrape = $request->value;
            $scraper->save();
        }

        return response()->json(['success'], 200);
    }

    /**
     * @SWG\Post(
     *   path="/scraper/ready",
     *   tags={"Scrape​r"},
     *   summary="Update scraper last started at time",
     *   operationId="scrapper-ready",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *
     *      @SWG\Parameter(
     *          name="scraper_name",
     *          in="path",
     *          required=true,
     *          type="string"
     *      ),
     * )
     */
    /**
     * Store scraper starting time
     */
    public function scraperReady(Request $request)
    {
        $scraper = Scraper::where('scraper_name', $request->scraper_name)->first();
        if (! empty($scraper)) {
            $scraper->last_started_at = Carbon::now();
            $scraper->save();
        }

        return response()->json(['success'], 200);
    }

    /**
     * @SWG\Post(
     *   path="/scraper/completed",
     *   tags={"Scrape​r"},
     *   summary="Update scraper last completed at",
     *   operationId="scrapper-completed",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *
     *      @SWG\Parameter(
     *          name="scraper_name",
     *          in="path",
     *          required=true,
     *          type="string"
     *      ),
     * )
     */
    /**
     * Store scraper completed time
     */
    public function scraperCompleted(Request $request)
    {
        $scraper = Scraper::where('scraper_name', $request->scraper_name)->first();
        if (! empty($scraper)) {
            $scraper->last_completed_at = Carbon::now();
            $scraper->save();
        }

        return response()->json(['success'], 200);
    }

    /**
     * @SWG\Get(
     *   path="/scraper/need-to-start",
     *   tags={"Scrape​r"},
     *   summary="List of scraper which need to start",
     *   operationId="scraper-need-start",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *   @SWG\Response(response=500, description="internal server error"),
     *
     *      @SWG\Parameter(
     *          name="server_id",
     *          in="path",
     *          required=true,
     *          type="string"
     *      ),
     * )
     */
    public function needToStart(Request $request)
    {
        if ($request->server_id != null) {
            $totalScraper = [];
            $scrapers     = Scraper::select('parent_id', 'scraper_name')->where('server_id', $request->server_id)->where('scraper_start_time', \DB::raw('HOUR(now())'))->get();
            foreach ($scrapers as $scraper) {
                if (! $scraper->parent_id) {
                    $totalScraper[] = $scraper->scraper_name;
                } else {
                    $totalScraper[] = $scraper->parent->scraper_name . '/' . $scraper->scraper_name;
                }
            }

            return response()->json(['code' => 200, 'data' => $totalScraper, 'message' => '']);
        } else {
            return response()->json(['code' => 500, 'message' => 'Please send server id']);
        }
    }

    /**
     * @SWG\Get(
     *   path="/scraper-needed-products",
     *   tags={"Scrape​r"},
     *   summary="Send product which is on request from external scraper",
     *   operationId="scraper-needed-product",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     * )
     */
    public function scraperNeeded(Request $request)
    {
        $products = Product::where('status_id', StatusHelper::$requestForExternalScraper)
            ->leftJoin('brands', function ($join) {
                $join->on('products.brand', '=', 'brands.id');
            })
            ->leftJoin('suppliers', function ($join) {
                $join->on('products.supplier_id', '=', 'suppliers.id');
            })
            ->select(['products.id', 'products.sku', 'products.supplier', 'products.status_id', 'brands.name'])
            ->orderBy('brands.priority', 'desc')
            ->orderBy('suppliers.priority', 'desc')
            ->latest('products.created_at')
            ->limit(50)
            ->get()
            ->toArray();
        if ($products) {
            foreach ($products as $value) {
                $scrap_status_data = [
                    'product_id'     => $value['id'],
                    'old_status'     => StatusHelper::$requestForExternalScraper,
                    'new_status'     => StatusHelper::$sendtoExternalScraper,
                    'pending_status' => 1,
                    'created_at'     => date('Y-m-d H:i:s'),
                ];
                \App\ProductStatusHistory::addStatusToProduct($scrap_status_data);
            }
        }
        foreach ($products as $value) {
            Product::where('id', $value['id'])->update(['status_id' => StatusHelper::$sendtoExternalScraper]);
            $scrap_status_data = [
                'product_id'     => $value['id'],
                'old_status'     => StatusHelper::$requestForExternalScraper,
                'new_status'     => StatusHelper::$sendtoExternalScraper,
                'pending_status' => 0,
                'created_at'     => date('Y-m-d H:i:s'),
            ];
            \App\ProductStatusHistory::addStatusToProduct($scrap_status_data);
        }

        return response()->json($products);
    }

    /**
     * @SWG\Post(
     *   path="/node/restart-script",
     *   tags={"Node"},
     *   summary="Product restart node",
     *   operationId="procuct-restart-node",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *   @SWG\Response(response=406, description="not acceptable"),
     *   @SWG\Response(response=500, description="internal server error"),
     *
     *      @SWG\Parameter(
     *          name="mytest",
     *          in="path",
     *          required=true,
     *          type="string"
     *      ),
     * )
     */
    public function restartNode(Request $request)
    {
        if ($request->name && $request->server_id) {
            $scraper = Scraper::where('scraper_name', $request->name)->first();
            if (! $scraper->parent_id) {
                $name = $scraper->scraper_name;
            } else {
                $name = $scraper->parent->scraper_name . '/' . $scraper->scraper_name;
            }
            $url       = 'https://' . $request->server_id . '.theluxuryunlimited.com:' . config('env.NODE_SERVER_PORT') . '/restart-script?filename=' . $name . '.js';
            $startTime = date('Y-m-d H:i:s', LARAVEL_START);
            $curl      = curl_init();
            curl_setopt($curl, CURLOPT_URL, $url);
            curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
            $response = curl_exec($curl);
            $httpcode = curl_getinfo($curl, CURLINFO_HTTP_CODE);
            LogRequest::log($startTime, $url, 'GET', json_encode([]), json_decode($response), $httpcode, \App\Http\Controllers\ScrapController::class, 'restartNode');
            curl_close($curl);

            if ($response) {
                return response()->json(['code' => 200, 'message' => 'Script Restarted']);
            } else {
                return response()->json(['code' => 500, 'message' => 'Check if Server is running']);
            }
        }
    }

    /**
     * @SWG\Post(
     *   path="/node/get-status",
     *   tags={"Node"},
     *   summary="procuct get status",
     *   operationId="procuct-get-status",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *   @SWG\Response(response=406, description="not acceptable"),
     *   @SWG\Response(response=500, description="internal server error"),
     *
     *      @SWG\Parameter(
     *          name="mytest",
     *          in="path",
     *          required=true,
     *          type="string"
     *      ),
     * )
     */
    public function getStatus(Request $request)
    {
        if ($request->name && $request->server_id) {
            $scraper = Scraper::where('scraper_name', $request->name)->first();
            if (! $scraper->parent_id) {
                $name = $scraper->scraper_name;
            } else {
                $name = $scraper->parent->scraper_name . '/' . $scraper->scraper_name;
            }
            $url       = 'https://' . $request->server_id . '.theluxuryunlimited.com:' . config('env.NODE_SERVER_PORT') . '/process-list?filename=' . $name . '.js';
            $startTime = date('Y-m-d H:i:s', LARAVEL_START);
            $curl      = curl_init();
            curl_setopt($curl, CURLOPT_URL, $url);
            curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
            $response = curl_exec($curl);
            $httpcode = curl_getinfo($curl, CURLINFO_HTTP_CODE);
            LogRequest::log($startTime, $url, 'GET', json_encode([]), json_decode($response), $httpcode, \App\Http\Controllers\ScrapController::class, 'getStatus');
            curl_close($curl);

            if ($response) {
                $re  = '/\d+/m';
                $str = $response;
                preg_match_all($re, $str, $matches, PREG_SET_ORDER, 0);

                if (count($matches) == 2 || count($matches) == 1 || count($matches) == 0) {
                    return response()->json(['code' => 200, 'message' => 'Script Is Not Running']);
                } else {
                    return response()->json(['code' => 200, 'message' => "Script Is Running \n" . json_decode($response)->Process[0]->duration]);
                }
            } else {
                return response()->json(['code' => 500, 'message' => 'Check if Server is running']);
            }
        }
    }

    public function updateNode(Request $request)
    {
        if ($request->name && $request->server_id) {
            $scraper = Scraper::where('scraper_name', $request->name)->first();
            if (! $scraper->parent_id) {
                $name = $scraper->scraper_name;
            } else {
                $name = $scraper->parent->scraper_name . '/' . $scraper->scraper_name;
            }

            $url       = 'https://' . $request->server_id . '.theluxuryunlimited.com:' . config('env.NODE_SERVER_PORT') . '/process-list?filename=' . $name . '.js';
            $startTime = date('Y-m-d H:i:s', LARAVEL_START);
            $curl      = curl_init();
            curl_setopt($curl, CURLOPT_URL, $url);
            curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
            $response = curl_exec($curl);
            $httpcode = curl_getinfo($curl, CURLINFO_HTTP_CODE);
            LogRequest::log($startTime, $url, 'POST', json_encode([]), json_decode($response), $httpcode, \App\Http\Controllers\ScrapController::class, 'updateNode');
            curl_close($curl);

            $duration = json_decode($response);
            $duration = isset($duration->Process[0]->duration) ? $duration->Process[0]->duration : null;
            if ($response) {
                return response()->json(['code' => 200, 'message' => 'Script Restarted', 'duration' => $duration]);
            } else {
                return response()->json(['code' => 500, 'message' => 'Check if Server is running']);
            }
        }
    }

    public function killNode(Request $request)
    {
        if ($request->name && $request->server_id) {
            $scraper = Scraper::where('scraper_name', $request->name)->first();
            if (! $scraper->parent_id) {
                $name = $scraper->scraper_name;
            } else {
                $name = $scraper->parent->scraper_name . '/' . $scraper->scraper_name;
            }

            $url       = 'https://' . $request->server_id . '.theluxuryunlimited.com:' . config('env.NODE_SERVER_PORT') . '/kill-scraper?filename=' . $name . '.js';
            $startTime = date('Y-m-d H:i:s', LARAVEL_START);
            $curl      = curl_init();
            curl_setopt($curl, CURLOPT_URL, $url);
            curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
            $httpcode = curl_getinfo($curl, CURLINFO_HTTP_CODE);
            $response = curl_exec($curl);
            curl_close($curl);
            LogRequest::log($startTime, $url, 'POST', json_encode([]), json_decode($response), $httpcode, \App\Http\Controllers\ScrapController::class, 'killNode');
            if ($response) {
                return response()->json(['code' => 200, 'message' => 'Script Restarted']);
            } else {
                return response()->json(['code' => 500, 'message' => 'Check if Server is running']);
            }
        }
    }

    public function saveChildScraper(Request $request)
    {
        $errorMsg = null;

        $request->validate([
            'supplier_id' => 'required',
            'run_gap'     => 'required',
            'start_time'  => 'required',
        ]);

        try {
            $scrperEx = explode('#', $request->scraper_name);

            $scraper = Scraper::whereNull('parent_id');

            if (! empty($scrperEx[0])) {
                $scraper = $scraper->where('scraper_name', $scrperEx[0]);
            }

            if (! empty($scrperEx[1])) {
                $scraper = $scraper->where('id', $scrperEx[1]);
            }

            $scraper = $scraper->first();

            if ($scraper) {
                $parentId                      = $scraper->id;
                $scraperChild                  = new Scraper;
                $scraperChild->scraper_name    = $request->name;
                $scraperChild->supplier_id     = $scraper->supplier_id;
                $scraperChild->parent_id       = $parentId;
                $scraperChild->run_gap         = $request->run_gap;
                $scraperChild->start_time      = $request->start_time;
                $scraperChild->scraper_made_by = $request->scraper_made_by;
                $scraperChild->server_id       = $request->server_id;
                $scraperChild->save();

                $errorMsg = 'Scraper Not Found';
            }
        } catch (\PDOException $e) {
            $errorMsg = $e->getMessage();
        }

        if ($request->ajax()) {
            return response()->json([
                'status' => $errorMsg ? 'error' : 'success',
                'msg'    => $errorMsg ? $errorMsg : 'Child Scraper Saved',
            ]);
        }

        return redirect()->back()->with('message', $errorMsg ? $errorMsg : 'Child Scraper Saved');
    }

    public function assignScrapProductTask(Request $request)
    {
        $requestData = new Request();
        $requestData->setMethod('POST');
        $requestData->request->add([
            'priority'    => 1,
            'issue'       => $request->message, // issue detail
            'status'      => 'Planned',
            'module'      => 'Scraper',
            'subject'     => $request->subject, // enter issue name
            'assigned_to' => 6,
        ]);
        app(\App\Http\Controllers\DevelopmentController::class)->issueStore($requestData, 'issue');

        return redirect()->back();
    }

    /**
     * @SWG\POST(
     *   consumes={"multipart/form-data"},
     *   path="/scrape/send-screenshot",
     *   tags={"Scrape​r"} ,
     *   summary="Store scraper screenshot into database",
     *   operationId="scrape-send-screenshot",
     *
     *   @SWG\Response(response=200, description="Screenshot saved successfully"),
     *   @SWG\Response(response=500, description="Required field is missing"),
     *
     *      @SWG\Parameter(
     *          name="website",
     *          in="formData",
     *          required=true,
     *          type="string"
     *      ),
    @SWG\Parameter(
     *          name="screenshot",
     *          in="formData",
     *          required=true,
     *          type="file"
     *      ),
     * )
     */
    public function sendScreenshot(Request $request)
    {
        return response()->json(['code' => 500, 'data' => [], 'message' => 'Screenshot request has been disabled']);

        if (empty($request->website)) {
            return response()->json(['code' => 500, 'data' => [], 'message' => 'website (scraper name) is required field']);
        }

        if (! $request->hasFile('screenshot')) {
            return response()->json(['code' => 500, 'data' => [], 'message' => 'Screenshot is required']);
        }

        return response()->json(['code' => 200, 'data' => [], 'message' => 'Screenshot saved successfully']);
    }

    /**
     * @SWG\POST(
     *   path="/scrape/send-position",
     *   tags={"Scrape​r"} ,
     *   summary="Store scraper posiotion periodically",
     *   operationId="scrape-send-position",
     *
     *   @SWG\Response(response=200, description="History saved successfully"),
     *   @SWG\Response(response=500, description="Required field is missing"),
     *
     *      @SWG\Parameter(
     *          name="website",
     *          in="formData",
     *          required=true,
     *          type="string"
     *      ),
    @SWG\Parameter(
     *          name="comment",
     *          in="formData",
     *          required=true,
     *          type="string"
     *      ),
     * )
     */
    public function sendPosition(Request $request)
    {
        if (empty($request->website)) {
            return response()->json(['code' => 500, 'data' => [], 'message' => 'website (scraper name) is required field']);
        }

        if (empty($request->get('comment'))) {
            return response()->json(['code' => 500, 'data' => [], 'message' => 'Comment is required']);
        }

        $scraper = \App\Scraper::where('scraper_name', $request->website)->first();

        if (! $scraper) {
            return response()->json(['code' => 500, 'data' => [], 'message' => 'website (scraper name) is wrong']);
        }

        $history = new \App\ScraperPositionHistory;
        $history->fill([
            'scraper_name' => $scraper->scraper_name,
            'scraper_id'   => $scraper->id,
            'comment'      => $request->get('comment'),
        ]);

        $history->save();

        return response()->json(['code' => 200, 'data' => [], 'message' => 'History saved successfully']);
    }

    public function getLatestLog(Request $request)
    {
        if ($request->name && $request->server_id) {
            $scraper = Scraper::where('scraper_name', $request->name)->first();
            if (! $scraper->parent_id) {
                $name = $scraper->scraper_name;
            } else {
                $name = $scraper->parent->scraper_name . '/' . $scraper->scraper_name;
            }

            $url       = 'https://' . $request->server_id . '.theluxuryunlimited.com:' . config('env.NODE_SERVER_PORT') . '/send-position?website=' . $name;
            $startTime = date('Y-m-d H:i:s', LARAVEL_START);
            $curl      = curl_init();

            curl_setopt($curl, CURLOPT_URL, $url);
            curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);

            $response = curl_exec($curl);
            $httpcode = curl_getinfo($curl, CURLINFO_HTTP_CODE);
            LogRequest::log($startTime, $url, 'POST', json_encode([]), json_decode($response), $httpcode, \App\Http\Controllers\ScrapController::class, 'getLatestLog');

            curl_close($curl);

            if (! empty($response)) {
                $response = json_decode($response);

                \Log::info(print_r($response, true));

                if ((isset($response->status) && $response->status == "Didn't able to find file of given scrapper") || empty($response->log)) {
                    echo 'Sorry , no log was return from server';
                    exit;
                } else {
                    if (! empty($response->log)) {
                        $file = "$request->server_id-$scraper->scraper_name.txt";
                        header('Content-Description: File Transfer');
                        header('Content-type: application/octet-stream');
                        header('Content-disposition: attachment; filename= ' . $file . '');
                        $log = base64_decode($response->log);

                        if (! empty($log)) {
                            $api_log               = new ScrapApiLog;
                            $api_log->scraper_id   = $scraper->id;
                            $api_log->server_id    = $request->server_id;
                            $api_log->log_messages = $log;
                            $api_log->save();
                        }
                    }
                }
            } else {
                abort(404);
            }
        }
    }

    /**
     * @SWG\GET(
     *   path="/scrape/auto-restart",
     *   tags={"Scrape​r"} ,
     *   summary="Check scraper is auto restart ?",
     *   operationId="scrape-auto-restart",
     *
     *   @SWG\Response(response=200, description="Success"),
     *   @SWG\Response(response=500, description="Required field is missing"),
     *
     *      @SWG\Parameter(
     *          name="website",
     *          in="formData",
     *          required=true,
     *          type="string"
     *      )
     * )
     */
    public function needToAutoRestart(Request $request)
    {
        if (empty($request->website)) {
            return response()->json(['code' => 500, 'data' => [], 'message' => 'website (scraper name) is required field']);
        }

        $scraper = \App\Scraper::where('scraper_name', $request->website)->first();

        if (! $scraper) {
            return response()->json(['code' => 500, 'data' => [], 'message' => 'website (scraper name) is  wrong']);
        }

        return response()->json(['code' => 200, 'auto_restart' => $scraper->auto_restart]);
    }

    /**
     * @SWG\GET(
     *   path="/scrape/update-restart-time",
     *   tags={"Scrape​r"} ,
     *   summary="Update scraper restart time",
     *   operationId="scrape-update-restart-time",
     *
     *   @SWG\Response(response=200, description="History saved successfully"),
     *   @SWG\Response(response=500, description="Required field is missing"),
     *
     *      @SWG\Parameter(
     *          name="website",
     *          in="formData",
     *          required=true,
     *          type="string"
     *      )
     * )
     */
    public function updateRestartTime(Request $request)
    {
        if (empty($request->website)) {
            return response()->json(['code' => 500, 'data' => [], 'message' => 'website (scraper name) is required field']);
        }

        $scraper = \App\Scraper::where('scraper_name', $request->website)->first();

        if (! $scraper) {
            return response()->json(['code' => 500, 'data' => [], 'message' => 'website (scraper name) is wrong']);
        }

        $remark_entry = \App\ScrapRemark::create([
            'scraper_name' => $scraper->scraper_name,
            'scrap_field'  => 'update-restart-time',
            'new_value'    => date('Y-m-d H:i:s'),
            'scrap_id'     => $scraper->id,
        ]);

        return response()->json(['code' => 200, 'data' => [], 'message' => 'History saved successfully']);
    }

    public function getServerStatistics(Request $request)
    {
        $servers  = Scraper::whereNotNull('server_id')->groupBy('server_id')->pluck('server_id', 'id')->toArray();
        $scrapers = Scraper::whereNotNull('server_id');

        if ($request->has('q') && ! empty($request->get('q'))) {
            $scrapers->where('scraper_name', 'LIKE', '%' . $request->get('q') . '%');
        }
        $scrapers = $scrapers->select('id', 'server_id', 'scraper_name', 'scraper_start_time')->get();
        $data     = [];
        foreach ($scrapers as $scraper) {
            if ($scraper->scraper_start_time >= 0 && $scraper->scraper_start_time <= 3) {
                $data[$scraper->server_id][3][] = $scraper->scraper_name;
            } elseif ($scraper->scraper_start_time > 3 && $scraper->scraper_start_time <= 6) {
                $data[$scraper->server_id][6][] = $scraper->scraper_name;
            } elseif ($scraper->scraper_start_time > 6 && $scraper->scraper_start_time <= 9) {
                $data[$scraper->server_id][9][] = $scraper->scraper_name;
            } elseif ($scraper->scraper_start_time > 9 && $scraper->scraper_start_time <= 12) {
                $data[$scraper->server_id][12][] = $scraper->scraper_name;
            } elseif ($scraper->scraper_start_time > 12 && $scraper->scraper_start_time <= 15) {
                $data[$scraper->server_id][15][] = $scraper->scraper_name;
            } elseif ($scraper->scraper_start_time > 15 && $scraper->scraper_start_time <= 18) {
                $data[$scraper->server_id][18][] = $scraper->scraper_name;
            } elseif ($scraper->scraper_start_time > 18 && $scraper->scraper_start_time <= 21) {
                $data[$scraper->server_id][21][] = $scraper->scraper_name;
            } elseif ($scraper->scraper_start_time > 21 && $scraper->scraper_start_time <= 24) {
                $data[$scraper->server_id][24][] = $scraper->scraper_name;
            }
        }

        return view()->make('scrap.server-statistics', compact('servers', 'data'));
    }

    public function getPythonLog(Request $request)
    {
        $storeWebsites = ['sololuxury', 'avoir-chic', 'brands-labels', 'o-labels', 'suvandnat', 'veralusso'];
        $devices       = ['mobile', 'desktop', 'tablet'];

        if ($request->website || $request->created_at) {
            $query = ScrapPythonLog::orderby('updated_at', 'desc');

            if (request('created_at') != null) {
                $query->whereDate('created_at', request('created_at'));
            }
            if (request('website') != null) {
                $query->where('website', 'LIKE', "%{$request->website}%");
            }

            $paginate = (Setting::get('pagination') * 10);
            $logs     = $query->paginate($paginate)->appends(request()->except(['page']));
        } else {
            $paginate = (Setting::get('pagination') * 10);
            $logs     = ScrapPythonLog::orderby('created_at', 'desc')->paginate($paginate);
        }

        if ($request->ajax()) {
            return response()->json([
                'tbody' => view('scrap.partials.python_logdata', compact('logs'))->render(),
                'links' => (string) $logs->render(),
                'count' => $logs->total(),
            ], 200);
        }

        return view('scrap.python_log', compact('logs', 'storeWebsites', 'devices'));
    }

    public function loginstance(Request $request)
    {
        $url  = '167.86.88.58:5000/get-logs ';
        $date = ($request->date != '') ? \Carbon\Carbon::parse($request->date)->format('m-d-Y') : '';

        $data = [];
        if (! empty($date)) {
            $data = ['website' => $request->website, 'date' => $date, 'device' => $request->device];
        } else {
            return response()->json([
                'type'     => 'error',
                'response' => 'Please select Date',
            ], 200);
        }
        $insertData = $data;
        $data       = json_encode($data);
        $ch         = curl_init($url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
        curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: application/json', 'accept: application/json']);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
        $result1 = curl_exec($ch);

        if ($result1 == 'Log File Not Found') {
            $insertData['log_text'] = $result1;
        } else {
            $file_name = 'python_logs/python_site_log_' . $insertData['website'] . '_' . $insertData['device'] . '.log';
            Storage::put($file_name, $result1);
            $insertData['log_text'] = url('/storage/app/' . $file_name);
        }

        ScrapPythonLog::create($insertData);
        $result = explode("\n", $result1);

        if (count($result) > 1) {
            return response()->json([
                'type'     => 'success',
                'response' => view('instagram.hashtags.partials.get_status', compact('result'))->render(),
            ], 200);
        } else {
            return response()->json([
                'type'     => 'error',
                'response' => 'Log File Not Found',
            ], 200);
        }
    }

    public function showProductStat(Request $request)
    {
        $products    = [];
        $brands_list = Brand::whereNull('deleted_at')->pluck('name', 'id');

        if (! empty($request->has('brands'))) {
            $brands    = Brand::whereNull('deleted_at')->whereIn('id', $request->get('brands'))->get();
            $suppliers = DB::table('scraped_products')->selectRaw('DISTINCT(`website`)')->pluck('website');

            foreach ($suppliers as $supplier) {
                foreach ($brands as $brand) {
                    $products[$supplier][$brand->name] = ScrapedProducts::where('website', $supplier)
                        ->where('brand_id', $brand->id);
                    if (! empty($request->get('start_date')) && ! empty($request->get('end_date'))) {
                        if ($request->get('start_date') != null && $request->get('end_date') != null) {
                            $products[$supplier][$brand->name] = $products[$supplier][$brand->name]->whereBetween('created_at', [$request->get('start_date'), $request->get('end_date')]);
                        }
                    }

                    $products[$supplier][$brand->name] = $products[$supplier][$brand->name]->count();
                }
            }
        }

        return view('scrap.scraped_product_data', compact('products', 'request', 'brands_list'));
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/ScrapStatisticsController.php 
Content: <?php

namespace App\Http\Controllers;

use Auth;
use App\User;
use Exception;
use App\Scraper;
use Carbon\Carbon;
use App\ScrapRemark;
use App\ScrapHistory;
use App\DeveloperTask;
use App\ScraperProcess;
use App\ScrapStatistics;
use Illuminate\Http\Request;
use App\Models\DataTableColumn;
use App\Exports\ScrapRemarkExport;
use Illuminate\Support\Facades\DB;
use App\Models\ScrapStatisticsStaus;
use Maatwebsite\Excel\Facades\Excel;
use Zend\Diactoros\Response\JsonResponse;
use Plank\Mediable\Facades\MediaUploader as MediaUploader;

class ScrapStatisticsController extends Controller
{
    /**
     * @SWG\Get(
     *   path="/stat",
     *   tags={"Statistic"},
     *   summary="Get Statistics",
     *   operationId="get-statistics",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *   @SWG\Response(response=406, description="not acceptable"),
     *   @SWG\Response(response=500, description="internal server error"),
     *
     *      @SWG\Parameter(
     *          name="mytest",
     *          in="path",
     *          required=true,
     *          type="string"
     *      ),
     * )
     */
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request)
    {
        // Set dates
        $endDate    = date('Y-m-d H:i:s');
        $keyWord    = $request->get('term', '');
        $madeby     = $request->get('scraper_made_by', 0);
        $scrapeType = $request->get('scraper_type', 0);

        $timeDropDown = self::get_times();

        $serverIds             = Scraper::groupBy('server_id')->where('server_id', '!=', null)->pluck('server_id');
        $getLatestOptimization = \App\ScraperServerStatusHistory::whereRaw('id in (
            SELECT MAX(id)
            FROM scraper_server_status_histories
            GROUP BY server_id
        )')
            ->pluck('in_percentage', 'server_id')->toArray();

        // Get active suppliers
        $activeSuppliers = Scraper::with([
            'scraperDuration' => function ($q) {
                $q->orderBy('id', 'desc');
            },
            'scrpRemark' => function ($q) {
                $q->whereNull('scrap_field')->where('user_name', '!=', '')->orderBy('created_at', 'desc');
            },
            'latestMessageNew' => function ($q) {
                $q->whereNotIn('chat_messages.status', ['7', '8', '9', '10'])
                    ->take(1)
                    ->orderBy('id', 'desc');
            },
            'lastErrorFromScrapLogNew',
            'developerTaskNew',
            'scraperMadeBy',
            'childrenScraper.scraperMadeBy',
            'mainSupplier',

        ])
            ->withCount('childrenScraper')
            ->join('suppliers as s', 's.id', 'scrapers.supplier_id')
            ->where('supplier_status_id', 1)
            ->whereIn('scrapper', [1, 2])
            ->whereNull('parent_id');

        if (! empty($keyWord)) {
            $activeSuppliers->where(function ($q) use ($keyWord) {
                $q->where('s.supplier', 'like', "%{$keyWord}%")
                    ->orWhere('scrapers.scraper_name', 'like', "%{$keyWord}%");
            });
        }

        if ($madeby > 0) {
            $activeSuppliers->where('scrapers.scraper_made_by', $madeby);
        }

        if ($request->get('scrapers_status', '') != '') {
            $activeSuppliers->where('scrapers.status', $request->get('scrapers_status', ''));
        }

        if ($scrapeType > 0) {
            $activeSuppliers->where('scraper_type', $scrapeType);
        }

        if ($request->task_assigned_to > 0) {
            $activeSuppliers->whereRaw('scrapers.id IN (SELECT scraper_id FROM developer_tasks WHERE assigned_to = ' . $request->task_assigned_to . ' and scraper_id > 0)');
        }

        $activeSuppliers = $activeSuppliers->orderby('scrapers.flag', 'desc')->orderby('s.supplier', 'asc');

        $ids = $activeSuppliers->pluck('supplier_id')->toArray();

        $activeSuppliers = $activeSuppliers->paginate(10);

        $suppliers = DB::table('products')
            ->select(DB::raw('count(*) as inventory'), 'supplier_id as id', DB::raw('max(created_at) as last_date'))
            ->groupBy('supplier_id')->orderBy('created_at', 'desc')->get();
        $data = [];

        foreach ($suppliers as $supplier) {
            if ($supplier->id !== null) {
                $data[$supplier->id]['inventory'] = $supplier->inventory;
                $data[$supplier->id]['last_date'] = $supplier->last_date;
            }
        }

        foreach ($activeSuppliers as $activeSupplier) {
            if (isset($data[$activeSupplier->supplier_id])) {
                $activeSupplier->inventory = $data[$activeSupplier->supplier_id]['inventory'];
                $activeSupplier->last_date = $data[$activeSupplier->supplier_id]['last_date'];
            } else {
                $activeSupplier->inventory = 0;
                $activeSupplier->last_date = null;
            }
        }
        // Get scrape data
        $yesterdayDate = date('Y-m-d', strtotime('-1 day'));
        $sql           = '
            SELECT
                s.id,
                s.supplier,
                sc.inventory_lifetime,
                sc.scraper_new_urls,
                sc.scraper_existing_urls,
                sc.scraper_total_urls,
                sc.scraper_start_time,
                sc.scraper_logic,
                sc.scraper_made_by,
                sc.server_id,
                sc.id as scraper_id,
                ls.website,
                ls.ip_address,
                COUNT(ls.id) AS total,
                SUM(IF(ls.validated=0,1,0)) AS failed,
                SUM(IF(ls.validated=1,1,0)) AS validated,
                SUM(IF(ls.validation_result LIKE "%[error]%",1,0)) AS errors,
                SUM(IF(ls.validation_result LIKE "%[warning]%",1,0)) AS warnings,
                SUM(IF(ls.created_at LIKE "%' . $yesterdayDate . '%",1,0)) AS total_new_product,
                MAX(ls.last_inventory_at) AS last_scrape_date,
                IF(MAX(ls.last_inventory_at) < DATE_SUB(NOW(), INTERVAL sc.inventory_lifetime DAY),0,1) AS running
            FROM
                suppliers s
            JOIN
                scrapers sc
            ON
                sc.supplier_id = s.id
            JOIN
                scraped_products ls
            ON
                sc.scraper_name=ls.website
            WHERE
                sc.scraper_name IS NOT NULL AND

                ' . ($request->excelOnly == 1 ? 'ls.website LIKE "%_excel" AND' : '') . '
                ' . ($request->excelOnly == -1 ? 'ls.website NOT LIKE "%_excel" AND' : '') . '
                ls.last_inventory_at > DATE_SUB(NOW(), INTERVAL sc.inventory_lifetime DAY)
            GROUP BY
                sc.id
            ORDER BY
                sc.scraper_priority desc
        ';
        $scrapeData = DB::select($sql);

        $scrapper_total = count($scrapeData); //Purpose : Scrapper Count - DEVTASK-4219

        $allScrapperName = [];

        if (! empty($scrapeData)) {
            foreach ($scrapeData as $data) {
                if (isset($data->id) && $data->id > 0) {
                    $allScrapperName[$data->id] = $data->website;
                }
            }
        }

        /* Scrapper status count */

        $allStatus = Scraper::scrapersStatus();

        $allStatusCounts = \App\Scraper::join('suppliers as s', 's.id', 'scrapers.supplier_id')
            ->selectRaw('COUNT(s.id) as total_count, scrapers.status')
            ->whereIn('scrapers.status', $allStatus)
            ->where('supplier_status_id', 1)
            ->groupBy('scrapers.status')
            ->get()
            ->pluck('total_count', 'status');

        $lastRunAt = \DB::table('scraped_products')->groupBy('website')->select([\DB::raw('MAX(last_inventory_at) as last_run_at'), 'website'])->pluck('last_run_at', 'website')->toArray();

        $users       = \App\User::all()->pluck('name', 'id')->toArray();
        $allScrapper = Scraper::whereNull('parent_id')->pluck('scraper_name', 'id')->toArray();
        // Return view

        $datatableModel = DataTableColumn::select('column_name')->where('user_id', auth()->user()->id)->where('section_name', 'scrap-statistics')->first();

        $dynamicColumnsToShows = [];
        if (! empty($datatableModel->column_name)) {
            $hideColumns           = $datatableModel->column_name ?? '';
            $dynamicColumnsToShows = json_decode($hideColumns, true);
        }

        if ($request->ajax()) {
            if ($request->get('load-status')) {
                return view('scrap.ajax.status', compact('allStatus', 'allStatusCounts'))->render();
            }

            return view('scrap.ajax.stats', compact('allStatus', 'allStatusCounts', 'activeSuppliers', 'serverIds', 'scrapeData', 'users', 'allScrapperName', 'timeDropDown', 'lastRunAt', 'allScrapper', 'getLatestOptimization', 'scrapper_total', 'dynamicColumnsToShows'))->render();
        }

        return view('scrap.stats', compact('allStatus', 'allStatusCounts', 'activeSuppliers', 'serverIds', 'scrapeData', 'users', 'allScrapperName', 'timeDropDown', 'lastRunAt', 'allScrapper', 'getLatestOptimization', 'scrapper_total', 'dynamicColumnsToShows'));
    }

    public function ssstatusCreate(Request $request)
    {
        try {
            $status               = new ScrapStatisticsStaus();
            $status->status       = $request->status_name;
            $status->status_value = $request->status_name;
            $status->save();

            $statuses = Scraper::scrapersStatus();

            return response()->json(['code' => 200, 'message' => 'status Create successfully', 'data' => $statuses]);
        } catch (Exception $e) {
            $msg = $e->getMessage();

            return response()->json(['code' => 500, 'message' => $msg]);
        }
    }

    public function columnVisbilityUpdate(Request $request)
    {
        $userCheck = DataTableColumn::where('user_id', auth()->user()->id)->where('section_name', 'scrap-statistics')->first();

        if ($userCheck) {
            $column               = DataTableColumn::find($userCheck->id);
            $column->section_name = 'scrap-statistics';
            $column->column_name  = json_encode($request->column_s);
            $column->save();
        } else {
            $column               = new DataTableColumn();
            $column->section_name = 'scrap-statistics';
            $column->column_name  = json_encode($request->column_s);
            $column->user_id      = auth()->user()->id;
            $column->save();
        }

        return response()->json([
            'status' => 'success',
            'msg'    => 'column visiblity Added Successfully!',
        ]);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function quickView(Request $request)
    {
        $endDate    = date('Y-m-d H:i:s');
        $keyWord    = $request->get('term', '');
        $column     = request('column');
        $orderby    = request('order_by', 'desc');
        $madeby     = $request->get('scraper_made_by', 0);
        $scrapeType = $request->get('scraper_type', 0);

        $timeDropDown = self::get_times();

        $developerTasks = \App\DeveloperTask::where('scraper_id', $request->id)->latest()->get();

        $serverIds             = Scraper::groupBy('server_id')->where('server_id', '!=', null)->pluck('server_id');
        $getLatestOptimization = \App\ScraperServerStatusHistory::whereRaw('id in (
            SELECT MAX(id)
            FROM scraper_server_status_histories
            GROUP BY server_id
        )')
            ->pluck('in_percentage', 'server_id')->toArray();

        // Get active suppliers
        $activeSuppliers = Scraper::with([
            'scrpRemark' => function ($q) {
                $q->whereNull('scrap_field')->where('user_name', '!=', '')->orderBy('created_at', 'desc');
            },
            'latestMessageNew' => function ($q) {
                $q->whereNotIn('chat_messages.status', ['7', '8', '9', '10'])
                    ->take(1)
                    ->orderBy('id', 'desc');
            },
            'lastErrorFromScrapLogNew',
            'developerTaskNew',
            'scraperMadeBy',
            'childrenScraper.scraperMadeBy',
            'mainSupplier',
        ])
            ->withCount('childrenScraper')
            ->join('suppliers as s', 's.id', 'scrapers.supplier_id')
            ->where('supplier_status_id', 1)
            ->whereIn('scrapper', [1, 2])
            ->whereNull('parent_id');

        if (! empty($keyWord)) {
            $activeSuppliers->where(function ($q) use ($keyWord) {
                $q->where('s.supplier', 'like', "%{$keyWord}%")->orWhere('scrapers.scraper_name', 'like', "%{$keyWord}%");
            });
        }

        if (isset($request->assigned_to) && count($request->assigned_to)) {
            $activeSuppliers->whereHas('developerTaskNew', function ($q) use ($request) {
                $q->whereIn('assigned_to', $request->assigned_to);
            });
        }

        if (! empty($column) && $column == 'last_started_at') {
            $activeSuppliers = $activeSuppliers->orderby('scrapers.' . $column . '', $orderby)->get();
        } else {
            $activeSuppliers = $activeSuppliers->orderby('scrapers.flag', 'desc')->orderby('s.supplier', 'asc')->get();
        }

        $assignedUsers = [];
        if ($activeSuppliers) {
            foreach ($activeSuppliers as $_supplier) {
                $developerTasks = \App\DeveloperTask::where('scraper_id', $_supplier->id)->latest()->get();
                if ($developerTasks) {
                    foreach ($developerTasks as $_task) {
                        if (isset($_task->assigned_to) and isset($_task->assignedUser->name)) {
                            $assignedUsers[$_task->assigned_to] = $_task->assignedUser->name;
                        }
                    }
                }
            }
        }

        // Get scrape data
        $yesterdayDate = date('Y-m-d', strtotime('-1 day'));
        $sql           = '
            SELECT
                s.id,
                s.supplier,
                sc.inventory_lifetime,
                sc.scraper_new_urls,
                sc.scraper_existing_urls,
                sc.scraper_total_urls,
                sc.scraper_start_time,
                sc.scraper_logic,
                sc.scraper_made_by,
                sc.server_id,
                sc.id as scraper_id,
                ls.website,
                ls.ip_address,
                COUNT(ls.id) AS total,
                SUM(IF(ls.validated=0,1,0)) AS failed,
                SUM(IF(ls.validated=1,1,0)) AS validated,
                SUM(IF(ls.validation_result LIKE "%[error]%",1,0)) AS errors,
                SUM(IF(ls.validation_result LIKE "%[warning]%",1,0)) AS warnings,
                SUM(IF(ls.created_at LIKE "%' . $yesterdayDate . '%",1,0)) AS total_new_product,
                MAX(ls.last_inventory_at) AS last_scrape_date,
                IF(MAX(ls.last_inventory_at) < DATE_SUB(NOW(), INTERVAL sc.inventory_lifetime DAY),0,1) AS running
            FROM
                suppliers s
            JOIN
                scrapers sc
            ON
                sc.supplier_id = s.id
            JOIN
                scraped_products ls
            ON
                sc.supplier_id=ls.supplier_id
            WHERE
                sc.scraper_name IS NOT NULL AND

                ' . ($request->excelOnly == 1 ? 'ls.website LIKE "%_excel" AND' : '') . '
                ' . ($request->excelOnly == -1 ? 'ls.website NOT LIKE "%_excel" AND' : '') . '
                ls.last_inventory_at > DATE_SUB(NOW(), INTERVAL sc.inventory_lifetime DAY)
            GROUP BY
                sc.id
            ORDER BY
                ' . ($column == 'least_product' ? 'total_new_product ' . $orderby . ' ' : 'sc.scraper_priority DESC') . '
            ';

        $scrapeData = DB::select($sql);

        $allScrapperName = [];

        if (! empty($scrapeData)) {
            foreach ($scrapeData as $data) {
                if (isset($data->id) && $data->id > 0) {
                    $allScrapperName[$data->id] = $data->website;
                }
            }
        }

        $allStatus = Scraper::scrapersStatus();

        $allStatusCounts = \App\Scraper::join('suppliers as s', 's.id', 'scrapers.supplier_id')
            ->selectRaw('COUNT(s.id) as total_count, scrapers.status')
            ->whereIn('scrapers.status', $allStatus)
            ->where('supplier_status_id', 1)
            ->groupBy('scrapers.status')
            ->get()
            ->pluck('total_count', 'status');

        $lastRunAt = \DB::table('scraped_products')->groupBy('website')->select([\DB::raw('MAX(last_inventory_at) as last_run_at'), 'website'])->pluck('last_run_at', 'website')->toArray();

        $users       = \App\User::all()->pluck('name', 'id')->toArray();
        $allScrapper = Scraper::whereNull('parent_id')->pluck('scraper_name', 'id')->toArray();
        // Return view
        try {
            return view('scrap.quick-stats', compact('allStatusCounts', 'allStatus', 'activeSuppliers', 'serverIds', 'scrapeData', 'users', 'allScrapperName', 'timeDropDown', 'lastRunAt', 'allScrapper', 'getLatestOptimization', 'assignedUsers'));
        } catch (Exception $e) {
            \Log::error('Quick-stats-page :: ' . $e->getMessage());
        }
    }

    /**
     * Store a newly created resource in storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $this->validate($request, [
            'supplier' => 'required',
            'type'     => 'required',
            'url'      => 'required',
        ]);

        $stat              = new ScrapStatistics();
        $stat->supplier    = $request->get('supplier');
        $stat->type        = $request->get('type');
        $stat->url         = $request->get('url');
        $stat->description = $request->get('description');
        $stat->save();

        return response()->json([
            'status' => 'Added successfully!',
        ]);
    }

    /**
     * Display the specified resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function show(ScrapStatistics $scrapStatistics)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function edit(ScrapStatistics $scrapStatistics)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, ScrapStatistics $scrapStatistics)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function destroy(ScrapStatistics $scrapStatistics)
    {
        //
    }

    public function assetManager()
    {
        $start = Carbon::now()->format('Y-m-d 00:00:00');
        $end   = Carbon::now()->format('Y-m-d 23:59:00');

        return view('scrap.asset-manager');
    }

    public function showHistory(Request $request)
    {
        $remarks = ScrapRemark::where('scrap_id', $request->search)->where('scrap_field', $request->field);

        if (in_array($request->field, ['scraper_start_time', 'server_id', 'status'])) {
            $remarks = $remarks->where(function ($q) {
                $q->orWhere('old_value', '!=', '')->orWhere('new_value', '!=', '');
            });
        }

        $remarks = $remarks->get();

        return response()->json($remarks, 200);
    }

    public function getRemark(Request $request)
    {
        $name = $request->input('name');

        $remarks = ScrapRemark::where('scraper_name', $name)->where('user_name', '!=', '');

        if ($request->get('auto') == 'true') {
            $remarks = $remarks->whereNull('scrap_field');
        }

        $remarks = $remarks->latest()->get();

        $download = $request->input('download');

        return response()->json($remarks, 200);
    }

    public function addRemark(Request $request)
    {
        $remark     = $request->input('remark');
        $name       = $request->input('id');
        $created_at = date('Y-m-d H:i:s');
        $update_at  = date('Y-m-d H:i:s');
        $last_rec   = ''; //Purpose : Last Record - DEVTASK-4219

        if (! empty($remark)) {
            $remark_entry = ScrapRemark::create([
                'scraper_name' => $name,
                'remark'       => $remark,
                'user_name'    => Auth::user()->name,
            ]);

            $needToSend      = request()->get('need_to_send', false);
            $includeAssignTo = request()->get('inlcude_made_by', false);

            if ($needToSend == 1) {
                if (Auth::user()->phone != '' && Auth::user()->whatsapp_number != '') {
                    app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi(Auth::user()->phone, Auth::user()->whatsapp_number, 'SCRAPER-REMARK#' . $name . "\n" . $remark);
                }

                if ($includeAssignTo == 1) {
                    $scraper = \App\Scraper::where('scraper_name', $name)->first();
                    if ($scraper) {
                        $sendPer = $scraper->scraperMadeBy;
                        if ($sendPer) {
                            app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($sendPer->phone, $sendPer->whatsapp_number, 'SCRAPER-REMARK#' . $name . "\n" . $remark);
                        }
                    }
                }
            }

            $last_rec = ScrapRemark::latest()->first(); //Purpose : Last Record - DEVTASK-4219
        }

        return response()->json(['remark' => $remark, 'last_record' => $last_rec], 200); //Purpose : Send Last Record - DEVTASK-4219
    }

    public function updateField(Request $request)
    {
        $fieldName  = request()->get('field');
        $fieldValue = request()->get('field_value');
        $search     = request()->get('search');
        $remark     = request()->get('remark');
        $suplier    = \App\Scraper::where('supplier_id', $search)->first();

        if (! $suplier) {
            $suplier = \App\Scraper::find($search);
        }

        if ($suplier) {
            $oldValue = $suplier->{$fieldName};

            if ($fieldName == 'scraper_made_by') {
                $oldValue = ($suplier->scraperMadeBy) ? $suplier->scraperMadeBy->name : '';
            }

            if ($fieldName == 'parent_supplier_id') {
                $oldValue = ($suplier->scraperParent) ? $suplier->scraperParent->scraper_name : '';
            }

            $suplier->{$fieldName} = $fieldValue;
            $suplier->save();

            $suplier = \App\Scraper::where('supplier_id', $search)->first();

            if (! $suplier) {
                $suplier = \App\Scraper::find($search);
            }

            $newValue = $fieldValue;

            if ($fieldName == 'scraper_made_by') {
                $newValue = ($suplier->scraperMadeBy) ? $suplier->scraperMadeBy->name : '';
            }

            if ($fieldName == 'parent_supplier_id') {
                $newValue = ($suplier->scraperParent) ? $suplier->scraperParent->scraper_name : '';
            }

            $remark_entry = ScrapRemark::create([
                'scraper_name' => $suplier->scraper_name,
                'remark'       => "{$fieldName} updated old value was $oldValue and new value is $newValue",
                'user_name'    => Auth::user()->name,
                'scrap_field'  => $fieldName,
                'old_value'    => $oldValue,
                'new_value'    => $newValue,
                'scrap_id'     => $suplier->id,
            ]);

            if (! empty($remark)) {
                $remark_entry = ScrapRemark::create([
                    'scraper_name' => $suplier->scraper_name,
                    'remark'       => $remark,
                    'user_name'    => Auth::user()->name,
                    'scrap_id'     => $suplier->id,
                ]);
            }
        }

        return response()->json(['code' => 200, 'data' => $suplier]);
    }

    public function multipleUpdateField(Request $request)
    {
        $fieldName  = 'full_scrape';
        $fieldValue = 1;

        if (! empty($request->ids)) {
            foreach ($request->ids as $key => $value) {
                $search  = $value;
                $remark  = request()->get('remark');
                $suplier = \App\Scraper::where('supplier_id', $search)->first();

                if (! $suplier) {
                    $suplier = \App\Scraper::find($search);
                }

                if ($suplier) {
                    $oldValue = $suplier->{$fieldName};

                    if ($fieldName == 'scraper_made_by') {
                        $oldValue = ($suplier->scraperMadeBy) ? $suplier->scraperMadeBy->name : '';
                    }

                    if ($fieldName == 'parent_supplier_id') {
                        $oldValue = ($suplier->scraperParent) ? $suplier->scraperParent->scraper_name : '';
                    }

                    $suplier->{$fieldName} = $fieldValue;
                    $suplier->save();

                    $suplier = \App\Scraper::where('supplier_id', $search)->first();

                    if (! $suplier) {
                        $suplier = \App\Scraper::find($search);
                    }

                    $newValue = $fieldValue;

                    if ($fieldName == 'scraper_made_by') {
                        $newValue = ($suplier->scraperMadeBy) ? $suplier->scraperMadeBy->name : '';
                    }

                    if ($fieldName == 'parent_supplier_id') {
                        $newValue = ($suplier->scraperParent) ? $suplier->scraperParent->scraper_name : '';
                    }

                    $remark_entry = ScrapRemark::create([
                        'scraper_name' => $suplier->scraper_name,
                        'remark'       => "{$fieldName} updated old value was $oldValue and new value is $newValue",
                        'user_name'    => Auth::user()->name,
                        'scrap_field'  => $fieldName,
                        'old_value'    => $oldValue,
                        'new_value'    => $newValue,
                        'scrap_id'     => $suplier->id,
                    ]);

                    if (! empty($remark)) {
                        $remark_entry = ScrapRemark::create([
                            'scraper_name' => $suplier->scraper_name,
                            'remark'       => $remark,
                            'user_name'    => Auth::user()->name,
                            'scrap_id'     => $suplier->id,
                        ]);
                    }
                }
            }
        }

        return response()->json(['code' => 200]);
    }

    public function updateScrapperField(Request $request)
    {
        $fieldName  = request()->get('field');
        $fieldValue = request()->get('field_value');
        $search     = request()->get('search');

        $suplier = \App\Scraper::find($search);

        if (! $suplier) {
            return response()->json(['code' => 500]);
        }

        if ($suplier) {
            $oldValue = $suplier->{$fieldName};

            if ($fieldName == 'scraper_made_by') {
                $oldValue = ($suplier->scraperMadeBy) ? $suplier->scraperMadeBy->name : '';
            }

            if ($fieldName == 'parent_supplier_id') {
                $oldValue = ($suplier->scraperParent) ? $suplier->scraperParent->scraper_name : '';
            }

            $suplier->{$fieldName} = $fieldValue;
            $suplier->save();

            $suplier = \App\Scraper::where('supplier_id', $search)->first();

            if (! $suplier) {
                $suplier = \App\Scraper::find($search);
            }

            $newValue = $fieldValue;

            if ($fieldName == 'scraper_made_by') {
                $newValue = ($suplier->scraperMadeBy) ? $suplier->scraperMadeBy->name : '';
            }

            if ($fieldName == 'parent_supplier_id') {
                $newValue = ($suplier->scraperParent) ? $suplier->scraperParent->scraper_name : '';
            }

            $remark_entry = ScrapRemark::create([
                'scrap_id'     => $suplier->id,
                'scraper_name' => $suplier->scraper_name,
                'remark'       => "{$fieldName} updated old value was $oldValue and new value is $newValue",
                'user_name'    => Auth::user()->name,
                'scrap_field'  => $fieldName,
                'old_value'    => $oldValue,
                'new_value'    => $newValue,
            ]);
        }

        return response()->json(['code' => 200]);
    }

    public function updatePriority(Request $request)
    {
        $ids  = $request->get('ids');
        $prio = count($ids);

        if (! empty($ids)) {
            foreach ($ids as $k => $id) {
                if (isset($id['id'])) {
                    $scrap = \App\Scraper::where('supplier_id', $id['id'])->first();
                    if ($scrap) {
                        $scrap->scraper_priority = $prio;
                        $scrap->save();
                    }
                }
                $prio--;
            }
        }

        return response()->json(['code' => 200]);
    }

    public function getHistory(Request $request)
    {
        $field = $request->get('field', 'supplier');
        $value = $request->get('search', '0');

        $history = [];

        if ($value > 0) {
            if ($field == 'supplier') {
                $history = ScrapHistory::where('model', \App\Supplier::class)->join('users as u', 'u.id', 'scrap_histories.created_by')->where('model_id', $value)
                    ->orderBy('created_at', 'DESC')
                    ->select('scrap_histories.*', 'u.name as created_by_name')
                    ->get()
                    ->toArray();
            }
        }

        return response()->json(['code' => 200, 'data' => $history]);
    }

    private static function get_times($default = '19:00', $interval = '+60 minutes')
    {
        $output = [];

        $current = strtotime('00:00');
        $end     = strtotime('23:59');

        while ($current <= $end) {
            $time          = date('G', $current);
            $output[$time] = date('h.i A', $current);
            $current       = strtotime($interval, $current);
        }

        return $output;
    }

    public function getLastRemark(Request $request)
    {
        $lastRemark = \DB::select("select * from scrap_remarks as sr join ( SELECT MAX(id) AS id FROM scrap_remarks WHERE user_name != '' AND scrap_field IS NULL  GROUP BY scraper_name ) as max_s on sr.id =  max_s.id   join scrapers as scr on scr.scraper_name = sr.scraper_name  left join scrap_logs as scr_logs on scr_logs.scraper_id = scr.id  WHERE sr.user_name IS NOT NULL order by sr.scraper_name asc");

        $suppliers = DB::table('products')
            ->select(DB::raw('count(*) as inventory'), 'supplier_id as id', DB::raw('max(created_at) as last_date'))
            ->groupBy('supplier_id')->orderBy('created_at', 'desc')->get();
        $data = [];

        foreach ($suppliers as $supplier) {
            if ($supplier->id !== null) {
                $data[$supplier->id]['inventory'] = $supplier->inventory;
                $data[$supplier->id]['last_date'] = $supplier->last_date;
            }
        }

        foreach ($lastRemark as $lastRemar) {
            if (isset($data[$lastRemar->supplier_id])) {
                $lastRemar->inventory = $data[$lastRemar->supplier_id]['inventory'];
                $lastRemar->last_date = $data[$lastRemar->supplier_id]['last_date'];
            } else {
                $lastRemar->inventory = 0;
                $lastRemar->last_date = null;
            }
        }

        $download = $request->input('download');
        if (! empty($download)) {
            return Excel::download(new ScrapRemarkExport($lastRemark), 'remarks.csv');
        }

        return response()->json(['code' => 200, 'data' => $lastRemark]);
    }

    public function addNote(Request $request)
    {
        try {
            $this->validate($request, [
                'scraper_name' => 'required',
                'remark'       => 'required',
            ]);
            $remark = $request->remark;

            if (! empty($remark)) {
                $note = ScrapRemark::create([
                    'scraper_name' => $request->scraper_name,
                    'remark'       => $request->remark,
                    'user_name'    => Auth::user()->name,
                ]);

                if ($request->hasfile('image')) {
                    $media = MediaUploader::fromSource($request->file('image'))
                        ->toDirectory('scrap-note')
                        ->upload();
                    $note->attachMedia($media, config('constants.media_tags'));
                }
            }

            if ($request->ajax()) {
                return response()->json([
                    'status' => 'success',
                    'msg'    => 'Note added successfully.',
                ]);
            }

            session()->flash('success', 'Note added successfully.');

            return redirect()->back();
        } catch (Exception $e) {
            if ($request->ajax()) {
                return response()->json([
                    'status' => 'error',
                    'msg'    => $e->getMessage(),
                ]);
            }

            session()->flash('error', $e->getMessage());

            return redirect()->back();
        }
    }

    public function serverStatistics(Request $request)
    {
        try {
            $scrappers = Scraper::query();
            $scrap     = $scrappers->where('inventory_lifetime', '!=', 0)->where('server_id', '!=', '');

            if ($request->type) {
                if ($request->type == 'server_id_filter') {
                    if (! empty($request->order)) {
                        $scrappers->where('server_id', $request->order);
                    }
                } elseif ($request->type == 'filter_by_text') {
                    if (! empty($request->order)) {
                        $scrappers->where('scraper_name', 'LIKE', '%' . $request->order . '%');
                    }
                } else {
                    $scrappers->orderBy($request->type, $request->order);
                }
            }

            $scrappers = $scrap->paginate(50);

            $servers = Scraper::select('server_id')->whereNotNull('server_id')->groupBy('server_id')->get();

            if ($request->ajax()) {
                return response()->json([
                    'tbody' => view('scrap.partials.scrap-server-status-data', compact('scrappers', 'servers'))->with('i', ($request->input('page', 1) - 1) * 5)->render(),
                    'links' => (string) $scrappers->render(),
                    'count' => $scrappers->total(),
                ], 200);
            }

            return view('scrap.scrap-server-status', compact('scrappers', 'servers'));
        } catch (Exception $e) {
        }
    }

    public function serverStatisticsHistory($scrap_name)
    {
        try {
            $scrap_history = Scraper::where(['scraper_name' => $scrap_name])
                ->where('created_at', '>=', Carbon::now()->subDays(25)->toDateTimeString())
                ->get();

            return new JsonResponse(['status' => 1, 'message' => 'Scrapping history', 'data' => $scrap_history, 'name' => $scrap_name]);
        } catch (Exception $e) {
            return new JsonResponse(['status' => 0, 'message' => $e->getMessage()]);
        }
    }

    public function getScreenShot(Request $request)
    {
        $screenshots = \App\ScraperScreenshotHistory::where('scraper_id', $request->id)->latest()->paginate(15);

        return view('scrap.partials.screenshot-history', compact('screenshots'));
    }

    public function positionHistory(Request $request)
    {
        $histories = \App\ScraperPositionHistory::where('scraper_id', $request->id)->latest()->paginate(15);

        return view('scrap.partials.position-history', compact('histories'));
    }

    //STRAT - Purpose : Download  Position History - DEVTASK-4086
    public function positionHistorydownload(Request $request)
    {
        $histories = \App\ScraperPositionHistory::where('scraper_id', $request->id)->latest()->get();

        $chatFileData = '';
        $chatFileData .= html_entity_decode('Scraper Position History', ENT_QUOTES, 'UTF-8');
        $chatFileData .= "\n" . "\n";

        if (! $histories->isEmpty()) {
            foreach ($histories as $k => $v) {
                $chatFileData .= html_entity_decode('Scraper Name : ' . $v->scraper_name, ENT_QUOTES, 'UTF-8');
                $chatFileData .= "\n";
                $chatFileData .= html_entity_decode('Comment : ' . $v->comment, ENT_QUOTES, 'UTF-8');
                $chatFileData .= "\n";
                $chatFileData .= html_entity_decode('Created at : ' . $v->created_at, ENT_QUOTES, 'UTF-8');
                $chatFileData .= "\n" . "\n";
            }
        }

        $storagelocation = storage_path() . '/chatMessageFiles';
        if (! is_dir($storagelocation)) {
            mkdir($storagelocation, 0777, true);
        }
        $filename = 'Scraper_Position_History.txt';
        $file     = $storagelocation . '/' . $filename;
        $txt      = fopen($file, 'w') or exit('Unable to open file!');
        fwrite($txt, $chatFileData);
        fclose($txt);
        if ($chatFileData == '') {
            return response()->json([
                'downloadUrl' => '',
            ]);
        }

        return response()->json([
            'downloadUrl' => $file,
        ]);
    }

    //END - DEVTASK-4086

    public function taskList(Request $request)
    {
        $id = $request->id;

        if (isset($request->type) && $request->type == 'brand') {
            $developerTasks = \App\DeveloperTask::where('brand_id', $request->id)->latest()->get();
        } else {
            $developerTasks = \App\DeveloperTask::where('scraper_id', $request->id)->latest()->get();
        }

        $replies = \App\Reply::where('model', 'scrap-statistics')->whereNull('deleted_at')->pluck('reply', 'id')->toArray();

        return view('scrap.partials.task', compact('developerTasks', 'id', 'replies'));
    }

    public function taskListMultiple(Request $request)
    {
        $id = implode(',', $request->id);

        return view('scrap.partials.task-multiple', compact('id'));
    }

    public function killedList(Request $request)
    {
        $id = $request->id;

        $histories = \App\ScraperKilledHistory::where('scraper_id', $request->id)->latest()->get();

        return view('scrap.partials.killed', compact('histories', 'id'));
    }

    public function addReply(Request $request)
    {
        $reply     = $request->get('reply');
        $autoReply = [];
        // add reply from here
        if (! empty($reply)) {
            $autoReply = \App\Reply::updateOrCreate(
                ['reply' => $reply, 'model' => 'scrap-statistics', 'category_id' => 1],
                ['reply' => $reply]
            );
        }

        return response()->json(['code' => 200, 'data' => $autoReply]);
    }

    public function deleteReply(Request $request)
    {
        $id = $request->get('id');

        if ($id > 0) {
            $autoReply = \App\Reply::where('id', $id)->first();
            if ($autoReply) {
                $autoReply->delete();
            }
        }

        return response()->json([
            'code' => 200, 'data' => \App\Reply::where('model', 'scrap-statistics')
                ->whereNull('deleted_at')
                ->pluck('reply', 'id')
                ->toArray(),
        ]);
    }

    public function taskCreateMultiple(Request $request, $id)
    {
        $requestData = new Request();
        $requestData->setMethod('POST');

        if (isset($request->type) && $request->type == 'brand') {
            $scraper = \App\Brand::whereIn('id', explode(',', $id))->get();
        }

        if ($scraper) {
            foreach ($scraper as $_brand) {
                $requestData->request->add([
                    'priority'     => 1,
                    'issue'        => 'EXTERNAL SCRAPPER ' . $_brand->scraper_name,
                    'status'       => 'In Progress',
                    'module'       => 'Scraper',
                    'subject'      => 'EXTERNAL SCRAPPER ' . $_brand->scraper_name,
                    'assigned_to'  => $request->get('assigned_to'),
                    'scraper_id'   => $_brand->id,
                    'task_type_id' => 1,
                ]);

                if (isset($request->type) && $request->type == 'brand') {
                    $requestData->request->add([
                        'brand_id'   => $_brand->id,
                        'scraper_id' => '',
                        'subject'    => 'EXTERNAL SCRAPPER ' . $_brand->name,
                    ]);
                }

                app(\App\Http\Controllers\DevelopmentController::class)->issueStore($requestData, 'issue');
            }
        }

        return view('scrap.partials.task-multiple', compact('id'));
    }

    public function taskCreate(Request $request, $id)
    {
        $requestData = new Request();
        $requestData->setMethod('POST');

        $scraper = \App\Scraper::find($id);

        if (isset($request->type) && $request->type == 'brand') {
            $scraper = \App\Brand::find($id);
        }

        if ($scraper) {
            $requestData->request->add([
                'priority'     => 1,
                'issue'        => $request->task_description,
                'status'       => 'In Progress',
                'module'       => 'Scraper',
                'subject'      => $scraper->scraper_name . ' - ' . $request->task_subject,
                'assigned_to'  => $request->get('assigned_to'),
                'scraper_id'   => $id,
                'task_type_id' => 1,
            ]);

            if (isset($request->type) && $request->type == 'brand') {
                $requestData->request->add([
                    'brand_id'   => $id,
                    'scraper_id' => '',
                    'subject'    => 'EXTERNAL SCRAPPER ' . $scraper->name . ' - ' . $request->task_subject,
                ]);
            }

            app(\App\Http\Controllers\DevelopmentController::class)->issueStore($requestData, 'issue');
        }

        if (isset($request->type) && $request->type == 'brand') {
            $developerTasks = \App\DeveloperTask::where('brand_id', $request->id)->latest()->get();
        } else {
            $developerTasks = \App\DeveloperTask::where('scraper_id', $request->id)->latest()->get();
        }

        $replies = \App\Reply::where('model', 'scrap-statistics')->whereNull('deleted_at')->pluck('reply', 'id')->toArray();

        return view('scrap.partials.task', compact('developerTasks', 'id', 'replies'));
    }

    public function autoRestart(Request $request)
    {
        if ($request->status == 'on') {
            $affected = \DB::table('scrapers')->update(['auto_restart' => 1]);
        } else {
            $affected = \DB::table('scrapers')->update(['auto_restart' => 0]);
        }

        return redirect()->back();
    }

    public function positionAll()
    {
        $histories    = \App\ScraperPositionHistory::whereDate('created_at', now()->subDays(7)->format('Y-m-d'))->latest()->get();
        $chatFileData = '';
        $chatFileData .= html_entity_decode('Scraper Position History', ENT_QUOTES, 'UTF-8');
        $chatFileData .= "\n" . "\n";

        if (! $histories->isEmpty()) {
            foreach ($histories as $k => $v) {
                $chatFileData .= html_entity_decode('Scraper Name : ' . $v->scraper_name, ENT_QUOTES, 'UTF-8');
                $chatFileData .= "\n";
                $chatFileData .= html_entity_decode('Comment : ' . $v->comment, ENT_QUOTES, 'UTF-8');
                $chatFileData .= "\n";
                $chatFileData .= html_entity_decode('Created at : ' . $v->created_at, ENT_QUOTES, 'UTF-8');
                $chatFileData .= "\n" . "\n";
            }
        }

        $storagelocation = storage_path() . '/chatMessageFiles';
        if (! is_dir($storagelocation)) {
            mkdir($storagelocation, 0777, true);
        }
        $filename = 'Scraper_Position_History.txt';
        $file     = $storagelocation . '/' . $filename;
        $txt      = fopen($file, 'w') or exit('Unable to open file!');
        fwrite($txt, $chatFileData);
        fclose($txt);
        if ($chatFileData == '') {
            return response()->json([
                'downloadUrl' => '',
            ]);
        }

        return response()->json([
            'downloadUrl' => $file,
        ]);
    }

    public function serverStatusHistory(Request $request)
    {
        $statusHistory = \App\ScraperServerStatusHistory::whereDate('created_at', $request->date)->latest()->get();

        return view('scrap.partials.status-history', compact('statusHistory'));
    }

    public function serverStatusProcess(Request $request)
    {
        $statusHistory = \App\ScraperProcess::whereDate('created_at', $request->date)->orderBy('scraper_name', 'asc')->latest()->get();

        return view('scrap.partials.process-status-history', compact('statusHistory'));
    }

    public function getScraperServerTiming(Request $request)
    {
        \Artisan::call('check:scraper-running-status');

        $statusHistory = \App\ScraperServerStatusHistory::where('scraper_name', $request->scraper_name)->latest()->get();

        return view('scrap.partials.status-history', compact('statusHistory'));
    }

    public function getLastErrors(Request $request)
    {
        $remarks = \App\ScrapRemark::where('scrap_field', 'last_line_error')->where('scrap_id', $request->id)->get();

        return view('scrap.partials.scrap-remarks', compact('remarks'));
    }

    public function logDetails(Request $request)
    {
        $logDetails = \App\ScrapLog::where('scraper_id', $request->scrapper_id)->latest()->get();

        return view('scrap.partials.log-details', compact('logDetails'));
    }

    public function scrapperLogList(Request $request)
    {
        $logDetails = \App\ScrapLog::leftJoin('scrapers', 'scrapers.id', '=', 'scrap_logs.scraper_id')
            ->whereNull('folder_name')->select('scrap_logs.*', 'scrapers.scraper_name');

        $scrapname = '';
        $scrapdate = '';

        if ($request->scraper_name) {
            $scrapname = $request->scraper_name;
            $logDetails->where('scrapers.scraper_name', 'LIKE', '%' . $request->scraper_name . '%');
        }

        if ($request->created_at) {
            $scrapdate = $request->created_at;

            $logDetails->whereDate('scrap_logs.created_at', $request->created_at);
        }

        $logDetails = $logDetails->orderBy('id', 'desc')->paginate(50)->appends(request()->query());

        return view('scrap.log_list', compact('logDetails', 'scrapname', 'scrapdate'));
    }

    public function serverHistory(Request $request)
    {
        $requestedDate = request('planned_at', date('Y-m-d'));

        $totalServers = \App\ScraperServerStatusHistory::groupBy('server_id')->pluck('server_id')->toArray();

        $timeSlots        = [];
        $listOfServerUsed = [];
        for ($i = 0; $i < 24; $i++) {
            $tms               = strlen($i) > 1 ? $i : '0' . $i;
            $timeSlots["$tms"] = $tms;
            // check the scrapper which run on current time
            $scrapers = \App\ScraperServerStatusHistory::runOnGiveTime($requestedDate, $tms);
            if (! $scrapers->isEmpty()) {
                foreach ($scrapers as $s) {
                    $listOfServerUsed["$tms"][$s->server_id][] = [
                        'scraper_name'  => $s->scraper_name,
                        'memory_string' => 'T: ' . $s->total_memory . ' U:' . $s->used_memory . ' P:' . $s->in_percentage,
                        'pid'           => $s->pid,
                    ];
                }
            }
        }

        return view('scrap.server-history', compact('totalServers', 'timeSlots', 'requestedDate', 'listOfServerUsed'));
    }

    public function endJob(Request $request)
    {
        $pid    = $request->get('pid');
        $server = $request->get('server_id');

        $cmd = 'bash ' . getenv('DEPLOYMENT_SCRIPTS_PATH') . '/scraper-kill.sh ' . $server . ' ' . $pid . ' 2>&1';

        $allOutput   = [];
        $allOutput[] = $cmd;
        $result      = exec($cmd, $allOutput);

        \Log::info(print_r($result, true));

        return response()->json(['code' => 200, 'message' => 'Your job has been stopped']);
    }

    //START - Purpose : Add get data for scrappers - DEVTASK-20102
    public function view_scrappers_data(Request $request)
    {
        $scraper_proc = [];

        $scraper_process = ScraperProcess::where('scraper_name', '!=', '')->orderBy('started_at', 'DESC')->get()->unique('scraper_id');
        foreach ($scraper_process as $key => $sp) {
            $to            = \Carbon\Carbon::createFromFormat('Y-m-d H:s:i', $sp->started_at);
            $from          = \Carbon\Carbon::now();
            $diff_in_hours = $to->diffInMinutes($from);
            if ($diff_in_hours > 1440) {
                array_push($scraper_proc, $sp);
            }
        }
        $users    = User::pluck('name', 'id')->toArray();
        $scrapers = Scraper::leftJoin('users', 'users.id', '=', 'scrapers.assigned_to')->whereNotIn('id', $scraper_process->pluck('scraper_id'))->select('scrapers.*', 'users.email as assignedTo')->get();

        return view('scrap.scraper-process-list', compact('scraper_process', 'scrapers', 'users'));
    }

    //END - DEVTASK-20102

    public function assignScrapperIssue(Request $request)
    {
        $assigendTo      = $request->assigned_to;
        $scrapperDetails = Scraper::where('id', $request->scrapper_id)->first();
        if ($assigendTo != null and $scrapperDetails != null) {
            $hasAssignedIssue = DeveloperTask::where('scraper_id', $scrapperDetails->scrapper_id)->where('assigned_to', $assigendTo)
                ->where('is_resolved', 0)->first();
            if (! $hasAssignedIssue) {
                $requestData = new Request();
                $requestData->setMethod('POST');
                $requestData->request->add([
                    'priority'    => 1,
                    'issue'       => "Scraper didn't Run In Last 24 Hr",
                    'status'      => 'Planned',
                    'module'      => 'Scraper',
                    'subject'     => $scrapperDetails->scraper_name,
                    'assigned_to' => $assigendTo,
                ]);
                app(\App\Http\Controllers\DevelopmentController::class)->issueStore($requestData, $assigendTo);
            }
            Scraper::where('id', $request->scrapper_id)->update(['assigned_to' => $assigendTo]);
        }

        return 'success';
    }

    public function changeUser()
    {
        $insert = DB::insert('insert into `developer_tasks` (`priority`, `subject`, `task`, `responsible_user_id`, `assigned_to`, `module_id`, `user_id`, `assigned_by`, `created_by`, `reference`, `status`, `task_type_id`, `scraper_id`, `brand_id`, `updated_at`, `created_at`,`parent_id`,`estimate_date`,hubstaff_task_id)
        select `priority`, `subject`, `task`, `responsible_user_id`, "500", `module_id`, `user_id`, `assigned_by`, `created_by`, `reference`, `status`, `task_type_id`, `scraper_id`, `brand_id`, `updated_at`, `created_at`,`parent_id`,`estimate_date`,hubstaff_task_id from `developer_tasks` where`assigned_to` = 472 and `status` = "In Progress"');
        echo 'Data inserted successfully';
        exit;
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/SupplierController.php 
Content: <?php

namespace App\Http\Controllers;

use Auth;
use App\User;
use App\Brand;
use App\Email;
use Validator;
use DataTables;
use App\Helpers;
use App\Product;
use App\Setting;
use App\Category;
use App\Supplier;
use App\ChatMessage;
use App\SupplierSize;
use App\ReplyCategory;
use App\QuickSellGroup;
use App\SupplierStatus;
use App\SupplierCategory;
use App\SupplierPriority;
use App\Mail\PurchaseEmail;
use App\SupplierBrandCount;
use App\SupplierPriceRange;
use App\SupplierSubCategory;
use Illuminate\Http\Request;
use App\ReadOnly\SoloNumbers;
use App\ProductQuicksellGroup;
use App\SupplierCategoryCount;
use App\Marketing\WhatsappConfig;
use App\SupplierBrandCountHistory;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Mail;
use App\Helpers\SupplierPriorityTrait;
use Illuminate\Pagination\LengthAwarePaginator;
use seo2websites\ErpExcelImporter\ErpExcelImporter;
use Plank\Mediable\Facades\MediaUploader as MediaUploader;

class SupplierController extends Controller
{
    use SupplierPriorityTrait;

    const DEFAULT_FOR = 3; //For Supplier

    /**
     * Add/Edit Remainder functionality
     */
    public function updateReminder(Request $request)
    {
        $supplier                   = Supplier::find($request->get('supplier_id'));
        $supplier->frequency        = $request->get('frequency');
        $supplier->reminder_message = $request->get('message');
        $supplier->save();

        return response()->json([
            'success',
        ]);
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request)
    {
        $solo_numbers            = (new SoloNumbers)->all();
        $term                    = $request->term ?? '';
        $type                    = $request->type ?? [];
        $supplier_filter         = $request->supplier_filter ?? '';
        $scrappertype            = isset($request->scrappertype) ? implode(',', $request->scrappertype) : '';
        $supplier_category_id    = isset($request->supplier_category_id) ? implode(',', $request->supplier_category_id) : '';
        $supplier_status_id      = isset($request->supplier_status_id) ? implode(',', $request->supplier_status_id) : '';
        $supplier_price_range_id = isset($request->supplier_price_range_id) ? implode(',', $request->supplier_price_range_id) : '';
        $updated_by              = isset($request->updated_by) ? implode(',', $request->updated_by) : '';
        $source                  = $request->get('source') ?? '';
        $typeWhereClause         = '';

        if (isset($type) && in_array('has_error', $type)) {
            $typeWhereClause = ' AND has_error = 1';
        }
        if (isset($type) && in_array('not_updated', $type)) {
            $typeWhereClause = ' AND is_updated = 0';
        }
        if (isset($type) && in_array('updated', $type)) {
            $typeWhereClause = ' AND is_updated = 1';
        }

        if ($supplier_price_range_id != '') {
            $typeWhereClause .= ' AND supplier_price_range_id in (' . $supplier_price_range_id . ')';
        }

        if ($supplier_category_id != '') {
            $typeWhereClause .= ' AND supplier_category_id in (' . $supplier_category_id . ')';
        }
        if ($supplier_status_id != '') {
            $typeWhereClause .= ' AND supplier_status_id in (' . $supplier_status_id . ')';
        }
        if ($scrappertype != '') {
            $typeWhereClause .= ' AND suppliers.scrapper in (' . $scrappertype . ')';
        }
        if ($updated_by != '') {
            $typeWhereClause .= ' AND updated_by in (' . $updated_by . ')';
        }

        if ($request->status) {
            $typeWhereClause .= ' AND suppliers.status in (' . $request->status . ')';
        }

        if ($supplier_filter) {
            $typeWhereClause .= ' AND suppliers.id IN (' . implode(',', $supplier_filter) . ')';
        }
        if (! empty($request->brand)) {
            $brands     = [];
            $references = [];
            foreach ($request->brand as $key => $value) {
                $selecteBrandById = Brand::where('id', $value)->get()->first();
                if (! empty($selecteBrandById->name)) {
                    array_push($brands, $selecteBrandById->name);
                }
                if (! empty($selecteBrandById->references)) {
                    array_push($references, $selecteBrandById->references);
                }
            }
            $filterBrands     = implode('|', $brands);
            $filterReferences = str_replace(';', '|', implode('|', $references));
            if (! empty($filterBrands)) {
                $typeWhereClause .= ' AND (brands RLIKE "' . $filterBrands . '"';
                $typeWhereClause .= 'OR scraped_brands RLIKE "' . $filterBrands . '"';
                $typeWhereClause .= 'OR scraped_brands_raw RLIKE "' . $filterBrands . '")';
            }
            if (! empty($filterReferences)) {
                $typeWhereClause .= ' OR (brands RLIKE "' . $filterReferences . '"';
                $typeWhereClause .= 'OR scraped_brands RLIKE "' . $filterReferences . '"';
                $typeWhereClause .= 'OR scraped_brands_raw RLIKE "' . $filterReferences . '")';
            }
        } else {
            if (! empty($request->scrapedBrand)) {
                $scrapedBrands = implode('|', $request->scrapedBrand);
                $typeWhereClause .= ' AND (brands RLIKE "' . $scrapedBrands . '"';
                $typeWhereClause .= 'OR scraped_brands RLIKE "' . $scrapedBrands . '"';
                $typeWhereClause .= 'OR scraped_brands_raw RLIKE "' . $scrapedBrands . '")';
            }
        }

        $runQuery = 0;

        if (! auth()->user()->isAdmin()) {
            $userCategoryPermissionId  = auth()->user()->supplierCategoryPermission->pluck('id')->toArray() + [0];
            $userCategoryPermissionId1 = implode(',', $userCategoryPermissionId);
            $typeWhereClause .= "AND suppliers.supplier_category_id IN ($userCategoryPermissionId1)";
            $runQuery = 1;
        } else {
            $runQuery = 1;
        }
        $suppliers = [];

        if ($runQuery) {
            $suppliers = DB::select('
                                    SELECT suppliers.frequency,suppliers.language_id,suppliers.supplier_sub_category_id,suppliers.supplier_status_id,suppliers.supplier_size_id,suppliers.scrapper, suppliers.reminder_message, suppliers.id, suppliers.is_blocked , suppliers.supplier, suppliers.phone, suppliers.source,suppliers.supplier_price_range_id, suppliers.brands, suppliers.email, suppliers.default_email, suppliers.address, suppliers.social_handle, suppliers.gst, suppliers.is_flagged, suppliers.has_error, suppliers.whatsapp_number, suppliers.status, sc.scraper_name, suppliers.supplier_category_id, suppliers.supplier_status_id, sc.inventory_lifetime,suppliers.created_at,suppliers.updated_at,suppliers.updated_by,u.name as updated_by_name, suppliers.scraped_brands_raw,suppliers.language,
                                    suppliers.est_delivery_time,suppliers.size_system_id,suppliers.priority,suppliers.product_type,
                  (SELECT mm1.message FROM chat_messages mm1 WHERE mm1.id = message_id) as message,
                  (SELECT mm2.created_at FROM chat_messages mm2 WHERE mm2.id = message_id) as message_created_at,
                  (SELECT mm3.id FROM purchases mm3 WHERE mm3.id = purchase_id) as purchase_id,
                  (SELECT mm4.created_at FROM purchases mm4 WHERE mm4.id = purchase_id) as purchase_created_at,
                  (SELECT mm5.message FROM emails mm5 WHERE mm5.id = email_id) as email_message,
                  (SELECT mm6.seen FROM emails mm6 WHERE mm6.id = email_id) as email_seen,
                  (SELECT mm7.created_at FROM emails mm7 WHERE mm7.id = email_id) as email_created_at,
                  CASE WHEN IFNULL(message_created_at, "1990-01-01 00:00") > IFNULL(email_created_at, "1990-01-01 00:00") THEN "message" WHEN IFNULL(message_created_at, "1990-01-01 00:00") < IFNULL(email_created_at, "1990-01-01 00:00") THEN "email" ELSE "none" END as last_type,
                  CASE WHEN IFNULL(message_created_at, "1990-01-01 00:00") > IFNULL(email_created_at, "1990-01-01 00:00") THEN message_created_at WHEN IFNULL(message_created_at, "1990-01-01 00:00") < IFNULL(email_created_at, "1990-01-01 00:00") THEN email_created_at ELSE "1990-01-01 00:00" END as last_communicated_at

                  FROM (SELECT * FROM suppliers

                  LEFT JOIN (SELECT MAX(id) as message_id, supplier_id, message, MAX(created_at) as message_created_at FROM chat_messages GROUP BY supplier_id ORDER BY created_at DESC) AS chat_messages
                  ON suppliers.id = chat_messages.supplier_id

                  LEFT JOIN (SELECT MAX(id) as purchase_id, supplier_id as purchase_supplier_id, created_at AS purchase_created_at FROM purchases GROUP BY purchase_supplier_id ORDER BY created_at DESC) AS purchases
                  ON suppliers.id = purchases.purchase_supplier_id

                  LEFT JOIN (SELECT MAX(id) as email_id, model_id as email_model_id, MAX(created_at) AS email_created_at FROM emails WHERE model_type LIKE "%Supplier%" OR "%Purchase%" GROUP BY model_id ORDER BY created_at DESC) AS emails
                  ON suppliers.id = emails.email_model_id)

                  AS suppliers
                  left join scrapers as sc on sc.supplier_id = suppliers.id
                  left join users as u on u.id = suppliers.updated_by
                  WHERE (

                  source LIKE "%' . $source . '%" AND
                  (sc.parent_id IS NULL AND
                  (supplier LIKE "%' . $term . '%" OR
                  suppliers.phone LIKE "%' . $term . '%" OR
                  suppliers.email LIKE "%' . $term . '%" OR
                  suppliers.address LIKE "%' . $term . '%" OR
                  suppliers.social_handle LIKE "%' . $term . '%" OR
                  sc.scraper_name LIKE "%' . $term . '%" OR
                  brands LIKE "%' . $term . '%" OR
                   suppliers.id IN (SELECT model_id FROM agents WHERE model_type LIKE "%Supplier%" AND (name LIKE "%' . $term . '%" OR phone LIKE "%' . $term . '%" OR email LIKE "%' . $term . '%")))))' . $typeWhereClause . '
                  ORDER BY last_communicated_at DESC, status DESC
              ');
        }

        $suppliers_all = null;

        if ($request->supplier_filter) {
            $suppliers_all = Supplier::where(function ($query) {
                $query->whereNotNull('email')->orWhereNotNull('default_email');
            })->whereIn('id', $request->supplier_filter)->get();
        }
        $currentPage  = LengthAwarePaginator::resolveCurrentPage();
        $perPage      = Setting::get('pagination');
        $currentItems = array_slice($suppliers, $perPage * ($currentPage - 1), $perPage);

        $supplierscnt = count($suppliers);
        $suppliers    = new LengthAwarePaginator($currentItems, count($suppliers), $perPage, $currentPage, [
            'path' => LengthAwarePaginator::resolveCurrentPath(),
        ]);

        $suppliercategory    = SupplierCategory::pluck('name', 'id')->toArray();
        $suppliersubcategory = SupplierSubCategory::pluck('name', 'id')->toArray();
        $supplierstatus      = SupplierStatus::pluck('name', 'id')->toArray();
        $suppliersize        = SupplierSize::pluck('size', 'id')->toArray();

        $statistics = DB::select('SELECT supplier_status_id, ss.name, COUNT(*) AS number_of_products FROM suppliers s LEFT join supplier_status ss on ss.id = s.supplier_status_id WHERE supplier_status_id IN (SELECT id from supplier_status) GROUP BY supplier_status_id');

        $scrapedBrandsRaw = Supplier::whereNotNull('scraped_brands_raw')->get()->all();
        $rawBrands        = [];
        foreach ($scrapedBrandsRaw as $key => $value) {
            array_push($rawBrands, array_unique(array_filter(array_column(json_decode($value->scraped_brands_raw, true), 'name'))));
            array_push($rawBrands, array_unique(array_filter(explode(',', $value->scraped_brands))));
        }
        $scrapedBrands = array_unique(array_reduce($rawBrands, 'array_merge', []));

        $data = Setting::where('type', 'ScrapeBrandsRaw')->get()->first();
        if (! empty($data)) {
            $selectedBrands = json_decode($data->val, true);
        } else {
            $selectedBrands = [];
        }

        $whatsappConfigs = WhatsappConfig::where('provider', 'LIKE', '%Chat-API%')->get();

        //Get All Product Supplier
        $allSupplierProduct = [];

        //Get All supplier price range
        $allSupplierPriceRanges = SupplierPriceRange::select('supplier_price_range.*', DB::raw("CONCAT(supplier_price_range.price_from,'-',supplier_price_range.price_to) as full_range"))->get()->toArray();
        $reply_categories       = ReplyCategory::with('supplier')->get();
        $languages              = \App\Language::get();
        $sizeSystem             = \App\SystemSize::pluck('name', 'id')->toArray();

        return view('suppliers.index', [
            'suppliers'            => $suppliers,
            'suppliers_all'        => $suppliers_all,
            'solo_numbers'         => $solo_numbers,
            'languages'            => $languages,
            'term'                 => $term,
            'type'                 => $type,
            'scrappertype'         => $scrappertype,
            'supplier_filter'      => $supplier_filter,
            'source'               => $source,
            'suppliercategory'     => $suppliercategory,
            'suppliersubcategory'  => $suppliersubcategory,
            'supplierstatus'       => $supplierstatus,
            'suppliersize'         => $suppliersize,
            'supplier_category_id' => $supplier_category_id,
            'supplier_status_id'   => $supplier_status_id,
            'count'                => $supplierscnt,
            'statistics'           => $statistics,
            'total'                => 0,
            // 'brands'                 => $brands,
            'scrapedBrands'          => $scrapedBrands,
            'selectedBrands'         => $selectedBrands,
            'whatsappConfigs'        => $whatsappConfigs,
            'allSupplierProduct'     => $allSupplierProduct,
            'allSupplierPriceRanges' => $allSupplierPriceRanges,
            'reply_categories'       => $reply_categories,
            'sizeSystem'             => $sizeSystem,
        ]);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $this->validate($request, [
            'supplier'           => 'required|string|unique:suppliers|max:255',
            'address'            => 'sometimes|nullable|string',
            'phone'              => 'sometimes|nullable|numeric',
            'default_phone'      => 'sometimes|nullable|numeric',
            'whatsapp_number'    => 'sometimes|nullable|numeric',
            'email'              => 'sometimes|nullable|email',
            'social_handle'      => 'sometimes|nullable',
            'scraper_name'       => 'sometimes|nullable',
            'product_type'       => 'sometimes|nullable',
            'inventory_lifetime' => 'sometimes|nullable',
            'gst'                => 'sometimes|nullable|max:255',
        ]);

        $data                  = $request->except('_token');
        $data['default_phone'] = $request->phone ?? '';
        $data['default_email'] = $request->email ?? '';

        $source = $request->get('source', '');

        if (! empty($source)) {
            $data['supplier_status_id'] = 0;
        }

        //get default whatsapp number for vendor from whatsapp config
        if (empty($data['whatsapp_number'])) {
            $task_info = DB::table('whatsapp_configs')
                ->select('*')
                ->whereRaw('find_in_set(' . self::DEFAULT_FOR . ',default_for)')
                ->first();

            if ($task_info) {
                $data['whatsapp_number'] = $task_info->number;
            }
        }
        $scrapper_name = preg_replace("/\s+/", '', $request->supplier);
        $supplier      = Supplier::where('supplier', $scrapper_name)->get();

        if ($supplier->isEmpty()) {
            $supplier = Supplier::create($data);
            if ($supplier->id > 0) {
                $scraper = \App\Scraper::create([
                    'supplier_id'        => $supplier->id,
                    'scraper_name'       => $request->get('scraper_name', $scrapper_name),
                    'inventory_lifetime' => $request->get('inventory_lifetime', ''),
                ]);
            }
            $supplier->scrapper = $scraper->id;
            $supplier->save();
        } else {
            $scraper = \App\Scraper::where('scraper_name', $scrapper_name)->get();
            if (empty($scraper)) {
                $scraper = \App\Scraper::create([
                    'supplier_id'        => $supplier->id,
                    'scraper_name'       => $request->get('scraper_name', $scrapper_name),
                    'inventory_lifetime' => $request->get('inventory_lifetime', ''),
                ]);
                $supplier->scrapper = $scraper->id;
                $supplier->save();
            } else {
                $supplier->scrapper = $scraper->id;
                $supplier->save();
            }
        }

        if (! empty($source)) {
            return redirect()->back()->withSuccess('You have successfully saved a supplier!');
        }

        return redirect()->route('supplier.index')->withSuccess('You have successfully saved a supplier!');
    }

    /**
     * Display the specified resource.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        $supplier               = Supplier::find($id);
        $user                   = User::where('id', $supplier->updated_by)->first();
        $suppliers              = Supplier::select(['id', 'supplier'])->where('supplier_status_id', 1)->orderby('supplier', 'asc')->get();
        $reply_categories       = ReplyCategory::all();
        $users_array            = Helpers::getUserArray(User::all());
        $emails                 = [];
        $suppliercategory       = SupplierCategory::pluck('name', 'id');
        $supplierstatus         = SupplierStatus::pluck('name', 'id');
        $new_category_selection = Category::attr(['name' => 'category', 'class' => 'form-control', 'id' => 'category'])->renderAsDropdown();
        $locations              = \App\ProductLocation::pluck('name', 'name');

        $category_selection = Category::attr(['name' => 'category', 'class' => 'form-control', 'id' => 'category_selection'])
            ->renderAsDropdown();

        return view('suppliers.show', [
            'supplier'               => $supplier,
            'reply_categories'       => $reply_categories,
            'users_array'            => $users_array,
            'emails'                 => $emails,
            'suppliercategory'       => $suppliercategory,
            'supplierstatus'         => $supplierstatus,
            'suppliers'              => $suppliers,
            'new_category_selection' => $new_category_selection,
            'locations'              => $locations,
            'category_selection'     => $category_selection,
            'user'                   => $user,
        ]);
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        $this->validate($request, [
            //'supplier_category_id'        => 'required|string|max:255',
            'supplier'           => 'required|string|max:255',
            'address'            => 'sometimes|nullable|string',
            'phone'              => 'sometimes|nullable|numeric',
            'default_phone'      => 'sometimes|nullable|numeric',
            'whatsapp_number'    => 'sometimes|nullable|numeric',
            'email'              => 'sometimes|nullable|email',
            'default_email'      => 'sometimes|nullable|email',
            'social_handle'      => 'sometimes|nullable',
            'scraper_name'       => 'sometimes|nullable',
            'inventory_lifetime' => 'sometimes|nullable',
            'gst'                => 'sometimes|nullable|max:255',
        ]);

        $data                  = $request->except('_token');
        $data['default_phone'] = $request->default_phone != '' ? $request->default_phone : $request->phone;
        $data['default_email'] = $request->default_email != '' ? $request->default_email : $request->email;
        $data['is_updated']    = 1;
        Supplier::find($id)->update($data);

        $scrapers     = \App\Scraper::where('supplier_id', $id)->get();
        $multiscraper = explode(',', $request->get('scraper_name', ''));
        $multiscraper = array_map('strtolower', $multiscraper);
        if (! $scrapers->isEmpty()) {
            foreach ($scrapers as $scr) {
                if (! in_array(strtolower($scr->scraper_name), $multiscraper)) {
                    $scr->delete();
                }
            }
        }

        if (! empty($multiscraper)) {
            foreach ($multiscraper as $multiscr) {
                $scraper = \App\Scraper::where('supplier_id', $id)->where('scraper_name', $multiscr)->first();
                if ($scraper) {
                    $scraper->inventory_lifetime = $request->get('inventory_lifetime', '');
                } else {
                    $scraper                     = new \App\Scraper;
                    $scraper->supplier_id        = $id;
                    $scraper->inventory_lifetime = $request->get('inventory_lifetime', '');
                    $scraper->scraper_name       = $multiscr;
                }
                $scraper->save();
            }
        }

        return redirect()->back()->withSuccess('You have successfully updated a supplier!');
    }

    /**
     * Ajax Load More message method
     *
     * @param mixed $id
     */
    public function loadMoreMessages(Request $request, $id)
    {
        $supplier = Supplier::find($id);

        $chat_messages = $supplier->whatsapps()->skip(1)->take(3)->pluck('message');

        return response()->json([
            'messages' => $chat_messages,
        ]);
    }

    /**
     * Ajax Flag Update method
     */
    public function flag(Request $request)
    {
        $supplier = Supplier::find($request->supplier_id);

        if ($supplier->is_flagged == 0) {
            $supplier->is_flagged = 1;
        } else {
            $supplier->is_flagged = 0;
        }

        $supplier->save();

        return response()->json(['is_flagged' => $supplier->is_flagged]);
    }

    /**
     * Send Bulk email to supplier
     */
    public function sendEmailBulk(Request $request)
    {
        $this->validate($request, [
            'subject' => 'required|min:3|max:255',
            'message' => 'required',
            'cc.*'    => 'nullable|email',
            'bcc.*'   => 'nullable|email',
        ]);

        if ($request->suppliers) {
            $suppliers = Supplier::whereIn('id', $request->suppliers)->where(function ($query) {
                $query->whereNotNull('default_email')->orWhereNotNull('email');
            })->get();
        } else {
            if ($request->not_received != 'on' && $request->received != 'on') {
                return redirect()->route('supplier.index')->withErrors(['Please select either suppliers or option']);
            }
        }

        if ($request->not_received == 'on') {
            $suppliers = Supplier::doesnthave('emails')->where(function ($query) {
                $query->whereNotNull('default_email')->orWhereNotNull('email');
            })->get();
        }

        if ($request->received == 'on') {
            $suppliers = Supplier::whereDoesntHave('emails', function ($query) {
                $query->where('type', 'incoming');
            })->where(function ($query) {
                $query->whereNotNull('default_email')->orWhereNotNull('email');
            })->where('has_error', 0)->get();
        }

        $file_paths = [];

        if ($request->hasFile('file')) {
            foreach ($request->file('file') as $file) {
                $filename = $file->getClientOriginalName();

                $file->storeAs('documents', $filename, 'files');

                $file_paths[] = "documents/$filename";
            }
        }

        $cc = $bcc = [];
        if ($request->has('cc')) {
            $cc = array_values(array_filter($request->cc));
        }
        if ($request->has('bcc')) {
            $bcc = array_values(array_filter($request->bcc));
        }

        foreach ($suppliers as $supplier) {
            $mail = Mail::to($supplier->default_email ?? $supplier->email);

            if ($cc) {
                $mail->cc($cc);
            }
            if ($bcc) {
                $mail->bcc($bcc);
            }

            $mail->send(new PurchaseEmail($request->subject, $request->message, $file_paths));

            $params = [
                'model_id'        => $supplier->id,
                'model_type'      => Supplier::class,
                'from'            => 'buying@amourint.com',
                'seen'            => 1,
                'to'              => $supplier->default_email ?? $supplier->email,
                'subject'         => $request->subject,
                'message'         => $request->message,
                'template'        => 'customer-simple',
                'additional_data' => json_encode(['attachment' => $file_paths]),
                'cc'              => $cc ?: null,
                'bcc'             => $bcc ?: null,
            ];

            Email::create($params);
        }

        return redirect()->route('supplier.index')->withSuccess('You have successfully sent emails in bulk!');
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        $supplier = Supplier::find($id);

        $supplier->delete();

        return redirect()->route('supplier.index')->withSuccess('You have successfully deleted a supplier');
    }

    /**
     * Add Notes method
     *
     * @param mixed $id
     */
    public function addNote($id, Request $request)
    {
        $supplier = Supplier::findOrFail($id);
        $notes    = $supplier->notes;
        if (! is_array($notes)) {
            $notes = [];
        }

        $notes[]         = $request->get('note');
        $supplier->notes = $notes;
        $supplier->save();

        return response()->json([
            'status' => 'success',
        ]);
    }

    public function supplierupdate(Request $request)
    {
        $supplier            = Supplier::find($request->get('supplier_id'));
        $supplier->frequency = $request->get('id');
        $type                = $request->get('type');
        if ($type == 'category') {
            $supplier->supplier_category_id = $request->get('id');
        }
        if ($type == 'status') {
            $supplier->supplier_status_id = $request->get('id');
        }
        $supplier->save();

        return response()->json([
            'success',
        ]);
    }

    public function getsuppliers(Request $request)
    {
        $input = $request->all();

        $supplier_category_id = $input['supplier_category_id'];

        $supplier_status_id = $input['supplier_status_id'];

        $filter = $input['filter'];

        $data            = '';
        $typeWhereClause = '';
        $suppliers_all   = [];
        if ($supplier_category_id == '' && $supplier_status_id == '') {
            //
        } else {
            if ($supplier_category_id != '') {
                $typeWhereClause .= ' AND supplier_category_id=' . $supplier_category_id;
            }
            if ($supplier_status_id != '') {
                $typeWhereClause .= ' AND supplier_status_id=' . $supplier_status_id;
            }

            if ($filter != '') {
                $typeWhereClause .= ' AND supplier like "' . $filter . '%"';
            }
            $suppliers_all = Supplier::select('id', 'supplier', 'email', 'default_email')
                ->where('email', '!=', '')
                ->whereRaw($typeWhereClause)
                ->get();
        }

        if (count($suppliers_all) > 0) {
            foreach ($suppliers_all as $supplier) {
                $data .= '<option value="' . $supplier->id . '">' . $supplier->supplier . ' - ' . $supplier->default_email . ' / ' . $supplier->email . '</option>';
            }
        }

        return $data;
    }

    public function addSupplierCategoryCount()
    {
        $suppliercount   = SupplierCategoryCount::all();
        $category_parent = Category::where('parent_id', 0)->get();
        $category_child  = Category::where('parent_id', '!=', 0)->get();
        $supplier        = Supplier::where('supplier_status_id', 1)->orderby('supplier', 'asc')->get();

        return view('suppliers.supplier_category_count', compact('supplier', 'suppliercount', 'category_parent', 'category_child'));
    }

    public function saveSupplierCategoryCount(Request $request)
    {
        $category_id = $request->category_id;
        $supplier_id = $request->supplier_id;
        $count       = $request->count;

        $data['category_id'] = $category_id;
        $data['supplier_id'] = $supplier_id;
        $data['cnt']         = $count;
        SupplierCategoryCount::create($data);

        return 'Saved SucessFully';
    }

    public function getSupplierCategoryCount(Request $request)
    {
        $limit = $request->input('length');
        $start = $request->input('start');

        $suppliercount      = SupplierCategoryCount::query();
        $suppliercountTotal = SupplierCategoryCount::count();
        $supplier_list      = Supplier::where('supplier_status_id', 1)->orderby('supplier', 'asc')->get();
        $category_parent    = Category::where('parent_id', 0)->get();
        $category_child     = Category::where('parent_id', '!=', 0)->get();

        $suppliercount = $suppliercount->offset($start)->limit($limit)->orderBy('supplier_id', 'asc')->get();
        foreach ($suppliercount as $supplier) {
            $sup = '';
            foreach ($supplier_list as $v) {
                if ($v->id == $supplier->supplier_id) {
                    $sup .= '<option value="' . $v->id . '" selected>' . $v->supplier . '</option>';
                } else {
                    $sup .= '<option value="' . $v->id . '">' . $v->supplier . '</option>';
                }
            }

            $cat = '';
            foreach ($category_parent as $c) {
                if ($c->id == $supplier->category_id) {
                    $cat .= '<option value="' . $c->id . '" selected>' . $c->title . '</option>';
                } else {
                    $cat .= '<option value="' . $c->id . '">' . $c->title . '</option>';
                    if ($c->childs) {
                        foreach ($c->childs as $categ) {
                            $cat .= '<option value="' . $categ->id . '">-&nbsp;' . $categ->title . '</option>';
                        }
                    }
                }
            }
            foreach ($category_child as $c) {
                if ($c->id == $supplier->category_id) {
                    $cat .= '<option value="' . $c->id . '" selected>' . $c->title . '</option>';
                } else {
                    $cat .= '<option value="' . $c->id . '">' . $c->title . '</option>';
                    if ($c->childs) {
                        foreach ($c->childs as $categ) {
                            $cat .= '<option value="' . $categ->id . '">-&nbsp;' . $categ->title . '</option>';
                        }
                    }
                }
            }

            $sub_array   = [];
            $sub_array[] = '<select class="form-control update" data-column="supplier_id" data-id="' . $supplier['id'] . '">' . $sup . '</select>';
            $sub_array[] = '<select class="form-control update" data-id="' . $supplier['id'] . '" data-column="category_id">' . $cat . '</select>';
            $sub_array[] = '<input type="number"  data-id="' . $supplier['id'] . '" data-column="cnt" value="' . $supplier['cnt'] . '"  class="form-control update">';
            $sub_array[] = '<button type="button" name="delete" class="btn btn-danger btn-xs delete" id="' . $supplier['id'] . '">Delete</button>';
            $data[]      = $sub_array;
        }
        if (! empty($data)) {
            $output = [
                'draw'            => intval($request->input('draw')),
                'recordsTotal'    => $suppliercountTotal,
                'recordsFiltered' => $suppliercountTotal,
                'data'            => $data,
            ];
        } else {
            $output = [
                'draw'            => 0,
                'recordsTotal'    => 0,
                'recordsFiltered' => 0,
                'data'            => [],
            ];
        }

        return json_encode($output);
    }

    public function updateSupplierCategoryCount(Request $request)
    {
        $id                          = $request->id;
        $column_name                 = $request->column_name;
        $value                       = $request->value;
        $suppliercount               = SupplierCategoryCount::findorfail($request->id);
        $suppliercount->$column_name = $value;
        $suppliercount->update();

        return 'Data Updated';
    }

    public function deleteSupplierCategoryCount(Request $request)
    {
        $id            = $request->id;
        $suppliercpunt = SupplierCategoryCount::findorfail($id);
        if ($suppliercpunt) {
            SupplierCategoryCount::destroy($id);
        }

        return 'Data Deleted';
    }

    public function addSupplierBrandCount()
    {
        $suppliercount   = SupplierBrandCount::all();
        $brand           = Brand::orderby('name', 'asc')->get();
        $supplier        = Supplier::where('supplier_status_id', 1)->orderby('supplier', 'asc')->get();
        $category_parent = Category::where('parent_id', 0)->get();
        $category_child  = Category::where('parent_id', '!=', 0)->get();

        return view('suppliers.supplier_brand_count', compact('supplier', 'suppliercount', 'brand', 'category_parent', 'category_child'));
    }

    public function saveSupplierBrandCount(Request $request)
    {
        $brand_id    = $request->brand_id;
        $supplier_id = $request->supplier_id;
        $count       = $request->count;
        $url         = $request->url;
        $category_id = $request->category_id;

        $data['brand_id']    = $brand_id;
        $data['supplier_id'] = $supplier_id;
        $data['cnt']         = $count;
        $data['url']         = $url;
        $data['category_id'] = $category_id;

        SupplierBrandCount::create($data);

        return 'Saved SucessFully';
    }

    public function getSupplierBrandCount(Request $request)
    {
        $columns = [
            0 => 'supplier_id',
            1 => 'category_id',
            2 => 'brand_id',
            3 => 'count',
            4 => 'url',
            5 => 'action',
        ];

        $limit = $request->input('length');
        $start = $request->input('start');

        $suppliercount      = SupplierBrandCount::query();
        $suppliercountTotal = SupplierBrandCount::count();
        $supplier_list      = Supplier::where('supplier_status_id', 1)->orderby('supplier', 'asc')->get();
        $brand_list         = Brand::orderby('name', 'asc')->get();
        $category_parent    = Category::where('parent_id', 0)->orderby('title', 'asc')->get();
        $category_child     = Category::where('parent_id', '!=', 0)->orderby('title', 'asc')->get();

        $suppliercount = $suppliercount->offset($start)->limit($limit)->orderBy('supplier_id', 'asc')->get();

        foreach ($suppliercount as $supplier) {
            $sup = '';

            foreach ($supplier_list as $v) {
                if ($v->id == $supplier->supplier_id) {
                    $sup .= '<option value="' . $v->id . '" selected>' . $v->supplier . '</option>';
                } else {
                    $sup .= '<option value="' . $v->id . '">' . $v->supplier . '</option>';
                }
            }

            $brands = '';
            foreach ($brand_list as $v) {
                if ($v->id == $supplier->brand_id) {
                    $brands .= '<option value="' . $v->id . '" selected>' . $v->name . '</option>';
                } else {
                    $brands .= '<option value="' . $v->id . '">' . $v->name . '</option>';
                }
            }

            $cat = '';
            $cat .= '<option>Select Category</option>';
            foreach ($category_parent as $c) {
                if ($c->id == $supplier->category_id) {
                    $cat .= '<option value="' . $c->id . '" selected>' . $c->title . '</option>';
                } else {
                    $cat .= '<option value="' . $c->id . '">' . $c->title . '</option>';
                    if ($c->childs) {
                        foreach ($c->childs as $categ) {
                            $cat .= '<option value="' . $categ->id . '">-&nbsp;' . $categ->title . '</option>';
                        }
                    }
                }
            }
            foreach ($category_child as $c) {
                if ($c->id == $supplier->category_id) {
                    $cat .= '<option value="' . $c->id . '" selected>' . $c->title . '</option>';
                } else {
                    $cat .= '<option value="' . $c->id . '">' . $c->title . '</option>';
                    if ($c->childs) {
                        foreach ($c->childs as $categ) {
                            $cat .= '<option value="' . $categ->id . '">-&nbsp;' . $categ->title . '</option>';
                        }
                    }
                }
            }

            $sub_array   = [];
            $sub_array[] = '<select disabled class="form-control">' . $sup . '</select>';
            $sub_array[] = '<select class="form-control" disabled>' . $cat . '</select>';
            $sub_array[] = '<select disabled class="form-control">' . $brands . '</select>';
            $sub_array[] = '<input type="number"  data-id="' . $supplier['id'] . '" data-column="cnt" value="' . $supplier['cnt'] . '"  class="form-control update">';
            $sub_array[] = $supplier['url'];
            $sub_array[] = '<button type="button" name="delete" class="btn btn-danger btn-xs delete" id="' . $supplier['id'] . '">Delete</button>';
            $data[]      = $sub_array;
        }

        if (! empty($data)) {
            $output = [
                'draw'            => intval($request->input('draw')),
                'recordsTotal'    => $suppliercountTotal,
                'recordsFiltered' => $suppliercountTotal,
                'data'            => $data,
            ];
        } else {
            $output = [
                'draw'            => 0,
                'recordsTotal'    => 0,
                'recordsFiltered' => 0,
                'data'            => [],
            ];
        }

        return json_encode($output);
    }

    public function updateSupplierBrandCount(Request $request)
    {
        $id            = $request->id;
        $column_name   = $request->column_name;
        $value         = $request->value;
        $suppliercount = SupplierBrandCount::findorfail($request->id);

        // Update in history
        $history                          = new SupplierBrandCountHistory();
        $history->supplier_brand_count_id = $suppliercount->id;
        $history->supplier_id             = $suppliercount->supplier_id;
        $history->brand_id                = $suppliercount->brand_id;
        $history->cnt                     = $suppliercount->cnt;
        $history->url                     = $suppliercount->url;
        $history->category_id             = $suppliercount->category_id;
        $history->save();
        //Update the value
        $suppliercount->$column_name = $value;
        $suppliercount->update();

        return 'Data Updated';
    }

    public function deleteSupplierBrandCount(Request $request)
    {
        $id            = $request->id;
        $suppliercount = SupplierBrandCount::findorfail($id);
        if ($suppliercount) {
            // Update in history
            $history                          = new SupplierBrandCountHistory();
            $history->supplier_brand_count_id = $suppliercount->id;
            $history->supplier_id             = $suppliercount->supplier_id;
            $history->brand_id                = $suppliercount->brand_id;
            $history->cnt                     = $suppliercount->cnt;
            $history->url                     = $suppliercount->url;
            $history->category_id             = $suppliercount->category_id;
            $history->save();
            SupplierBrandCount::destroy($id);
        }

        return 'Data Deleted';
    }

    public function block(Request $request)
    {
        $supplier = Supplier::find($request->supplier_id);

        if ($supplier->is_blocked == 0) {
            $supplier->is_blocked = 1;
        } else {
            $supplier->is_blocked = 0;
        }

        $supplier->save();

        return response()->json(['is_blocked' => $supplier->is_blocked]);
    }

    public function saveImage(Request $request)
    {
        // Only create Product
        if ($request->type == 1) {
            // Create Group ID with Product
            $images = explode(',', $request->checkbox1[0]);
            if ($images) {
                $createdProducts = [];
                foreach ($images as $image) {
                    if ($image != null) {
                        $product = Product::select('sku')->where('sku', 'LIKE', '%QUICKSELL' . date('yz') . '%')->orderBy('id', 'desc')->first();
                        if ($product) {
                            $number = str_ireplace('QUICKSELL', '', $product->sku) + 1;
                        } else {
                            $number = date('yz') . sprintf('%02d', 1);
                        }

                        $product = new Product;

                        $product->name     = 'QUICKSELL';
                        $product->sku      = 'QuickSell' . $number;
                        $product->size     = '';
                        $product->brand    = $product->brand = $request->brand;
                        $product->color    = '';
                        $product->location = request('location', '');
                        if ($request->category == null) {
                            $product->category = '';
                        } else {
                            $product->category = $request->category;
                        }

                        if ($request->supplier == null) {
                            $product->supplier = 'QUICKSELL';
                        } else {
                            $sup               = Supplier::findorfail($request->supplier);
                            $product->supplier = $sup->supplier;
                        }
                        if ($request->buying_price == null) {
                            $product->price = 0;
                        } else {
                            $product->price = $request->buying_price;
                        }
                        if ($request->special_price == null) {
                            $product->price_inr_special = 0;
                        } else {
                            $product->price_inr_special = $request->special_price;
                        }
                        $product->stock         = 1;
                        $product->quick_product = 1;
                        $product->is_pending    = 1;
                        $product->save();
                        $createdProducts[] = $product->id;
                        preg_match_all('#\bhttps?://[^,\s()<>]+(?:\([\w\d]+\)|([^,[:punct:]\s]|/))#', $image, $match);
                        $image = isset($match[0][0]) ? $match[0][0] : false;
                        if (! empty($image)) {
                            $jpg      = \Image::make($image)->encode('jpg');
                            $filename = substr($image, strrpos($image, '/'));
                            $filename = str_replace('/', '', $filename);
                            $media    = MediaUploader::fromString($jpg)->useFilename($filename)->upload();
                            $product->attachMedia($media, config('constants.media_tags'));
                        }
                    }
                }
                if (count($createdProducts) > 0) {
                    $message = count($createdProducts) . ' Product(s) has been created successfully, id\'s are ' . json_encode($createdProducts);
                    $code    = 200;
                } else {
                    $message = 'No Images selected';
                    $code    = 500;
                }

                return response()->json(['code' => $code, 'message' => $message]);
            } else {
                return response()->json(['code' => 500, 'message' => 'No Images selected']);
            }
        } elseif ($request->type == 3) {
            // Create Group ID with Product
            $images = $request->images;

            $images = explode('"', $images);
            if ($images) {
                $createdProducts = [];
                foreach ($images as $image) {
                    if ($image != null) {
                        if ($image != '[' && $image != ']' && $image != ',') {
                            $product           = new Product;
                            $product->name     = $request->name;
                            $product->sku      = $request->sku;
                            $product->size     = $request->size;
                            $product->brand    = $request->brand;
                            $product->color    = $request->color;
                            $product->location = $request->location;
                            $product->category = $request->category;
                            $product->supplier = $request->supplier;

                            if ($request->price == null) {
                                $product->price = 0;
                            } else {
                                $product->price = $request->price;
                            }

                            if ($request->price_special == null) {
                                $product->price_inr_special = 0;
                            } else {
                                $product->price_inr_special = $request->price_special;
                            }
                            $product->stock           = 1;
                            $product->purchase_status = 'InStock';
                            $product->save();
                            $createdProducts[] = $product->id;
                            preg_match_all('#\bhttps?://[^,\s()<>]+(?:\([\w\d]+\)|([^,[:punct:]\s]|/))#', $image, $match);
                            $image = isset($match[0][0]) ? $match[0][0] : false;
                            if (! empty($image)) {
                                $jpg      = \Image::make($image)->encode('jpg');
                                $filename = substr($image, strrpos($image, '/'));
                                $filename = str_replace('/', '', $filename);
                                $media    = MediaUploader::fromString($jpg)->useFilename($filename)->upload();
                                $product->attachMedia($media, config('constants.media_tags'));
                            }
                        }
                    }
                }
                if (count($createdProducts) > 0) {
                    $message = count($createdProducts) . ' Product(s) has been created successfully, id\'s are ' . json_encode($createdProducts);
                    $code    = 200;
                } else {
                    $message = 'No Images selected';
                    $code    = 500;
                }

                return response()->json(['code' => $code, 'message' => $message]);
            } else {
                return response()->json(['code' => 500, 'message' => 'No Images selected']);
            }
        } else {
            // Create Group ID with Product
            $images = explode(',', $request->checkbox[0]);

            if ($images) {
                // Loop Over Images

                $group = QuickSellGroup::orderBy('id', 'desc')->first();
                if ($group != null) {
                    if ($request->groups != null) {
                        $group_create = QuickSellGroup::findorfail($request->groups);
                        $group_id     = $group_create->group;
                    } else {
                        $group_create = new QuickSellGroup();
                        $incrementId  = ($group->group + 1);
                        if ($request->group_id != null) {
                            $group_create->name = $request->group_id;
                        }
                        $group_create->suppliers     = json_encode($request->supplier);
                        $group_create->brands        = json_encode($request->brand);
                        $group_create->price         = $request->buying_price;
                        $group_create->special_price = $request->special_price;
                        $group_create->categories    = json_encode($request->category);
                        $group_create->group         = $incrementId;
                        $group_create->save();
                        $group_id = $group_create->group;
                    }
                } else {
                    $group                       = new QuickSellGroup();
                    $group->group                = 1;
                    $group_create->name          = $request->group_id;
                    $group_create->suppliers     = json_encode($request->suppliers);
                    $group_create->brands        = json_encode($request->brand);
                    $group_create->price         = $request->buying_price;
                    $group_create->special_price = $request->special_price;
                    $group_create->categories    = json_encode($request->categories);
                    $group->save();
                    $group_id = $group->group;
                }
                $createdProducts = [];
                foreach ($images as $image) {
                    //Getting the last created QUICKSELL
                    $product = Product::select('sku')->where('sku', 'LIKE', '%QUICKSELL' . date('yz') . '%')->orderBy('id', 'desc')->first();
                    if ($product) {
                        $number = str_ireplace('QUICKSELL', '', $product->sku) + 1;
                    } else {
                        $number = date('yz') . sprintf('%02d', 1);
                    }
                    $product = new Product;

                    $product->name     = 'QUICKSELL';
                    $product->sku      = 'QuickSell' . $number;
                    $product->size     = '';
                    $product->brand    = $request->brand;
                    $product->color    = '';
                    $product->location = request('location', '');
                    if ($request->category == null) {
                        $product->category = '';
                    } else {
                        $product->category = $request->category;
                    }

                    if ($request->supplier == null) {
                        $product->supplier = 'QUICKSELL';
                    } else {
                        $sup               = Supplier::findorfail($request->supplier);
                        $product->supplier = $sup->supplier;
                    }
                    if ($request->buying_price == null) {
                        $product->price = 0;
                    } else {
                        $product->price = $request->buying_price;
                    }
                    if ($request->special_price == null) {
                        $product->price_inr_special = 0;
                    } else {
                        $product->price_inr_special = $request->special_price;
                    }

                    $product->stock         = 1;
                    $product->quick_product = 1;
                    $product->is_pending    = 1;
                    $product->save();
                    $createdProducts[] = $product->id;
                    preg_match_all('#\bhttps?://[^,\s()<>]+(?:\([\w\d]+\)|([^,[:punct:]\s]|/))#', $image, $match);
                    if (isset($match[0]) && isset($match[0][0])) {
                        $image = $match[0][0];
                        $jpg   = \Image::make($image)->encode('jpg');

                        $filename = substr($image, strrpos($image, '/'));
                        $filename = str_replace('/', '', $filename);
                        $media    = MediaUploader::fromString($jpg)->useFilename($filename)->upload();
                        $product->attachMedia($media, config('constants.media_tags'));
                    }
                    // if Product is true
                    if ($product == true) {
                        //Finding last created Product using sku
                        $product_id = Product::where('sku', $product->sku)->first();
                        if ($product_id != null) {
                            $id = $product_id->id;
                            //getting last group id

                            $group                     = new ProductQuicksellGroup();
                            $group->product_id         = $id;
                            $group->quicksell_group_id = $group_id;
                            $group->save();
                        }
                    }
                }
                if (count($createdProducts) > 0) {
                    $message = count($createdProducts) . ' Product(s) has been created successfully, id\'s are ' . json_encode($createdProducts);
                    $code    = 200;
                } else {
                    $message = 'No Images selected';
                    $code    = 500;
                }

                return response()->json(['code' => $code, 'message' => $message]);
            } else {
                return response()->json(['code' => 500, 'message' => 'No Images selected']);
            }
        }
    }

    /**
     * @SWG\Post(
     *   path="/supplier/brands-raw",
     *   tags={"Scraper"},
     *   summary="Update supplier brand raw",
     *   operationId="scraper-post-supplier-brands",
     *
     *   @SWG\Response(response=200, description="successful operation"),
     *   @SWG\Response(response=403, description="not acceptable"),
     *   @SWG\Response(response=500, description="internal server error"),
     *
     *      @SWG\Parameter(
     *          name="supplier_id",
     *          in="formData",
     *          required=true,
     *          type="integer"
     *      ),
     *      @SWG\Parameter(
     *          name="brands_raw",
     *          in="formData",
     *          required=true,
     *          type="string"
     *      ),
     * )
     */
    public function apiBrandsRaw(Request $request)
    {
        // Get supplier ID
        $supplierId = (int) $request->supplier_id;
        $brandsRaw  = $request->brands_raw;

        if (empty($supplierId) || empty($brandsRaw)) {
            return response()->json(['error' => 'The fields supplier_id and brands_raw are obligated'], 403);
        }

        // Get Supplier model
        $supplier = Supplier::find($supplierId);

        // Do we have a result?
        if ($supplier != null) {
            $supplier->scraped_brands_raw = $brandsRaw;
            $supplier->save();

            return response()->json(['success' => 'Supplier updated'], 200);
        }

        // Still here? Return an error
        return response()->json(['error' => 'Supplier not found'], 403);
    }

    /**
     * Get scraped brand and scraped brands raw of a supplier
     *
     * @return json response with brand and brand raw
     */
    public function getScrapedBrandAndBrandRaw(Request $request)
    {
        $supplierId = $request->id;

        $supplier = Supplier::find($supplierId);
        if ($supplier->scraped_brands != '') {
            $scrapedBrands = array_filter(explode(',', $supplier->scraped_brands));

            sort($scrapedBrands);
        } else {
            $scrapedBrands = [];
        }

        if ($supplier->scraped_brands_raw != '') {
            $rawBrands = array_unique(array_filter(array_column(json_decode($supplier->scraped_brands_raw, true), 'name')));

            sort($rawBrands);
        } else {
            $rawBrands = [];
        }

        return response()->json(['scrapedBrands' => $scrapedBrands, 'scrapedBrandsRaw' => $rawBrands], 200);
    }

    /**
     * Update scraped brand from scrapped brands raw for a supplier
     *
     * @return json response with update status
     */
    public function updateScrapedBrandFromBrandRaw(Request $request)
    {
        $supplierId   = $request->id;
        $newBrandData = ($request->newBrandData) ? $request->newBrandData : [];

        // Get Supplier model
        $supplier = Supplier::find($supplierId);

        // Do we have a result?
        if ($supplier != null) {
            $supplier->scraped_brands = implode(',', $newBrandData);
            $supplier->save();

            return response()->json(['success' => 'Supplier brand updated'], 200);
        }

        // Still here? Return an error
        return response()->json(['error' => 'Supplier not found'], 403);
    }

    public function excelImport(Request $request)
    {
        if ($request->attachment) {
            $supplier = Supplier::find($request->id);
            $file     = explode('/', $request->attachment);
            if (class_exists('\\seo2websites\\ErpExcelImporter\\ErpExcelImporter')) {
                $excel = $supplier->getSupplierExcelFromSupplierEmail();
                $excel = ErpExcelImporter::excelFileProcess(end($file), $excel, $supplier->email);

                return response()->json(['success' => 'File Processed For Import'], 200);
            } else {
                return response()->json(['error' => 'File Couldnt Process For Import'], 200);
            }
        }

        if ($request->file('excel_file')) {
            $file = $request->file('excel_file');
            if ($file->getClientOriginalExtension() == 'xls' || $file->getClientOriginalExtension() == 'xlsx') {
                $path     = 'files/email-attachments/file';
                $fileName = $file->hashName();
                $filePath = $file->saveAs($path, $fileName);
                $supplier = Supplier::find($request->id);
                if (class_exists('\\seo2websites\\ErpExcelImporter\\ErpExcelImporter')) {
                    $excel = $supplier->getSupplierExcelFromSupplierEmail();
                    $excel = ErpExcelImporter::excelFileProcess($filePath, $excel, $supplier->email);

                    return redirect()->back()->withSuccess('File Processed For Import');
                } else {
                    return redirect()->back()->withErrors('Excel Importer Not Found');
                }
            } else {
                return redirect()->back()->withErrors('Please Use Excel FIle');
            }
        }
    }

    /**
     * Remove particular scraped brand from scrapped brands for a supplier
     *
     * @return json response with status, updated brand list, raw brand list
     */
    public function removeScrapedBrand(Request $request)
    {
        $supplierId      = $request->id;
        $removeBrandData = $request->removeBrandData;

        // Get Supplier model
        $supplier = Supplier::find($supplierId);

        // Do we have a result?
        if ($supplier != null) {
            if ($supplier->scraped_brands != '') {
                $scrapedBrands = array_filter(explode(',', $supplier->scraped_brands));

                $newBrandData = array_diff($scrapedBrands, [$removeBrandData]);
                sort($newBrandData);
            } else {
                $newBrandData = [];
            }
            if ($supplier->scraped_brands_raw != '') {
                $rawBrands = array_unique(array_filter(array_column(json_decode($supplier->scraped_brands_raw, true), 'name')));
                sort($rawBrands);
            } else {
                $rawBrands = [];
            }

            $supplier->scraped_brands = implode(',', $newBrandData);
            $supplier->save();

            return response()->json(['scrapedBrands' => $newBrandData, 'scrapedBrandsRaw' => $rawBrands, 'success' => 'Scraped brand removed'], 200);
        }

        // Still here? Return an error
        return response()->json(['error' => 'Supplier not found'], 403);
    }

    public function changeMail(Request $request)
    {
        $supplier        = Supplier::find($request->supplier_id);
        $supplier->email = $request->email;
        $supplier->save();

        return response()->json(['code' => 200, 'data' => [], 'message' => 'Email updated successfully']);
    }

    public function changePhone(Request $request)
    {
        $supplier        = Supplier::find($request->supplier_id);
        $supplier->phone = $request->phone;
        $supplier->save();

        return response()->json(['code' => 200, 'data' => [], 'message' => 'Telephone Number updated successfully']);
    }

    public function changeSize(Request $request)
    {
        $supplier                   = Supplier::find($request->supplier_id);
        $supplier->supplier_size_id = $request->size;
        $supplier->save();

        return response()->json(['code' => 200, 'data' => [], 'message' => 'Size updated successfully']);
    }

    public function changeSizeSystem(Request $request)
    {
        $supplier                 = Supplier::find($request->supplier_id);
        $supplier->size_system_id = $request->size;
        $supplier->save();

        return response()->json(['code' => 200, 'data' => [], 'message' => 'Size System updated successfully']);
    }

    public function changeWhatsapp(Request $request)
    {
        $supplier                  = Supplier::find($request->supplier_id);
        $supplier->whatsapp_number = $request->whatsapp;
        $supplier->save();

        return response()->json(['code' => 200, 'data' => [], 'message' => 'Whatsapp Number updated successfully']);
    }

    /**
     * copy selected scraped brands to brand for a supplier
     *
     * @return json response with update status, brands
     */
    public function copyScrapedBrandToBrand(Request $request)
    {
        $supplierId = $request->id;

        // Get Supplier model
        $supplier = Supplier::find($supplierId);

        // Do we have a result?
        if ($supplier != null) {
            $selectedScrapedBrand = ($supplier->scraped_brands) ? $supplier->scraped_brands : '';
            if ($selectedScrapedBrand != '') {
                //We have got selected scraped brands, now store that in brands
                $supplier->brands = '"[' . $selectedScrapedBrand . ']"';
                $supplier->save();

                $miniScrapedBrand = strlen($selectedScrapedBrand) > 10 ? substr($selectedScrapedBrand, 0, 10) . '...' : $selectedScrapedBrand;

                return response()->json(['success' => 'Supplier brand updated', 'mini' => $miniScrapedBrand, 'full' => $selectedScrapedBrand], 200);
            } else {
                return response()->json(['error' => 'Scraped brands not selected for the supplier'], 403);
            }
        }

        // Still here? Return an error
        return response()->json(['error' => 'Supplier not found'], 403);
    }

    public function languageTranslate(Request $request)
    {
        $supplier           = Supplier::find($request->id);
        $supplier->language = $request->language;
        $supplier->save();

        return response()->json(['success' => 'Supplier language updated'], 200);
    }

    public function priority(Request $request)
    {
        $supplier           = Supplier::find($request->id);
        $supplier->priority = $request->priority;
        $supplier->save();

        return response()->json(['success' => 'Supplier priority updated'], 200);
    }

    public function manageScrapedBrands(Request $request)
    {
        $arr  = [];
        $data = Setting::where('type', 'ScrapeBrandsRaw')->get()->first();
        if (empty($data)) {
            $brand['type'] = 'ScrapeBrandsRaw';
            $brand['val']  = json_encode($request->selectedBrands);
            Setting::create($brand);
        } else {
            $data->val = json_encode($request->selectedBrands);
            $data->save();
        }

        return 'Scraped Brands Raw removed from dropdown successfully';
    }

    public function changeWhatsappNo(Request $request)
    {
        $supplier                  = Supplier::find($request->supplier_id);
        $supplier->whatsapp_number = $request->number;
        $supplier->update();

        return response()->json(['success' => 'Supplier Whatsapp updated'], 200);
    }

    public function changeStatus(Request $request)
    {
        $supplierId = $request->get('supplier_id');
        $statusId   = $request->get('supplier_status_id');

        if (! empty($supplierId)) {
            $supplier = \App\Supplier::find($supplierId);
            if (! empty($supplier)) {
                $supplier->supplier_status_id = ($statusId == 'false') ? 0 : 1;
                $supplier->save();
            }
        }

        return response()->json(['code' => 200, 'data' => [], 'message' => 'Status updated successfully']);
    }

    /**
     * Change supplier category
     */
    public function changeCategory(Request $request)
    {
        $supplierId = $request->get('supplier_id');
        $categoryId = $request->get('supplier_category_id');

        if (! empty($supplierId)) {
            $supplier = \App\Supplier::find($supplierId);
            if (! empty($supplier)) {
                $supplier->fill(['supplier_category_id' => $categoryId])->save();
            }
        }

        return response()->json(['code' => 200, 'data' => [], 'message' => 'Category updated successfully']);
    }

    public function changeSupplierStatus(Request $request)
    {
        $supplierId = $request->get('supplier_id');
        $status     = $request->get('status');

        if (! empty($supplierId)) {
            $supplier = \App\Supplier::find($supplierId);
            if (! empty($supplier)) {
                $supplier->fill(['supplier_status_id' => $status])->save();
            }
        }

        return response()->json(['code' => 200, 'data' => [], 'message' => 'Status updated successfully']);
    }

    public function changeSubCategory(Request $request)
    {
        $supplierId = $request->get('supplier_id');
        $categoryId = $request->get('supplier_sub_category_id');

        if (! empty($supplierId)) {
            $supplier = \App\Supplier::find($supplierId);
            if (! empty($supplier)) {
                $supplier->fill(['supplier_sub_category_id' => $categoryId])->save();
            }
        }

        return response()->json(['code' => 200, 'data' => [], 'message' => 'Sub Category updated successfully']);
    }

    public function editInventorylifetime(Request $request)
    {
        $supplierId         = $request->get('supplier_id');
        $inventory_lifetime = $request->get('inventory_lifetime');

        if (! empty($supplierId)) {
            $supplier = \App\Scraper::where('supplier_id', $supplierId)->first();
            if (! empty($supplier)) {
                $supplier->fill(['inventory_lifetime' => $inventory_lifetime])->save();
            }
        }

        return response()->json(['code' => 200, 'data' => [], 'message' => 'Inventory lifetime updated successfully']);
    }

    public function changeScrapper(Request $request)
    {
        $supplierId = $request->get('supplier_id');
        $scrapperId = $request->get('scrapper');
        if (! empty($supplierId)) {
            $supplier = \App\Supplier::find($supplierId);
            $scrapper = \App\Scraper::where('supplier_id', $supplierId)->first();
            if (! empty($scrapper)) {
                $supplier->fill(['scrapper' => $scrapperId])->save();
            } else {
                $scrapper_name = preg_replace("/\s+/", '', $supplier->supplier);
                $scrapper_name = strtolower($scrapper_name);
                $scraper       = \App\Scraper::create([
                    'supplier_id'        => $supplier->id,
                    'scraper_name'       => $request->get('scraper_name', $scrapper_name),
                    'inventory_lifetime' => $request->get('inventory_lifetime', ''),
                ]);
                $supplier->fill(['scrapper' => $scrapperId])->save();
            }
        }

        return response()->json(['code' => 200, 'data' => [], 'message' => 'Scrapper updated successfully']);
    }

    public function changeLanguage(Request $request)
    {
        $supplierId = $request->get('supplier_id');
        $languageId = $request->get('language');
        if (! empty($supplierId)) {
            $language = \App\Supplier::where('id', $supplierId)->update(['language_id' => $languageId]);
        }

        return response()->json(['code' => 200, 'data' => [], 'message' => 'Language updated successfully']);
    }

    /**
     * Add supplier category
     */
    public function addCategory(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'name' => 'required',
        ]);

        if ($validator->fails()) {
            return redirect()->back()
                ->withErrors($validator)
                ->withInput();
        }

        SupplierCategory::create($request->all());

        return redirect()->route('supplier.index')->withSuccess('You have successfully saved a category!');
    }

    public function addSubCategory(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'name' => 'required',
        ]);

        if ($validator->fails()) {
            return redirect()->back()
                ->withErrors($validator)
                ->withInput();
        }

        SupplierSubCategory::create($request->all());

        return redirect()->route('supplier.index')->withSuccess('You have successfully saved a sub category!');
    }

    public function addStatus(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'name' => 'required',
        ]);

        if ($validator->fails()) {
            return redirect()->back()
                ->withErrors($validator)
                ->withInput();
        }

        SupplierStatus::create($request->all());

        return redirect()->route('supplier.index')->withSuccess('You have successfully saved a status!');
    }

    public function addSupplierSize(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'size' => 'required',
        ]);

        if ($validator->fails()) {
            return redirect()->back()
                ->withErrors($validator)
                ->withInput();
        }

        SupplierSize::create($request->all());

        return redirect()->route('supplier.index')->withSuccess('You have successfully saved a supplier size!');
    }

    public function MessageTranslateHistory(Request $request)
    {
        $history = \App\SupplierTranslateHistory::orderBy('id', 'desc')->where('supplier_id', $request->supplier)->get();

        return response()->json(['code' => 200, 'data' => $history]);
    }

    public function sendMessage(Request $request)
    {
        $suppliers = Supplier::whereIn('id', $request->suppliers)->get();
        $params    = [];
        $message   = [];
        //Create broadcast
        $broadcast = \App\BroadcastMessage::create(['name' => $request->name]);
        if (count($suppliers)) {
            foreach ($suppliers as $key => $item) {
                $params = [
                    'supplier_id' => $item->id,
                    'number'      => null,
                    'message'     => $request->message,
                    'user_id'     => Auth::id(),
                    'status'      => 1,
                ];
                $message = [
                    'type_id'              => $item->id,
                    'type'                 => App\Supplier::class,
                    'broadcast_message_id' => $broadcast->id,
                ];
                $chat_message    = ChatMessage::create($params);
                $broadcastnumber = \App\BroadcastMessageNumber::create($message);
                $approveRequest  = new Request();
                $approveRequest->setMethod('GET');
                $approveRequest->request->add(['messageId' => $chat_message->id]);

                app(WhatsAppController::class)->approveMessage('supplier', $approveRequest);
            }
        }

        return response()->json(['code' => 200, 'data' => [], 'message' => 'Message sent successfully']);
    }

    public function addPriceRange(Request $request)
    {
        SupplierPriceRange::create($request->all());

        return redirect()->route('supplier.index')->withSuccess('You have successfully saved a price range!');
    }

    public function changePriceRange(Request $request)
    {
        $supplierId   = $request->get('supplier_id');
        $priceRangeId = $request->get('price_range_id');

        if (! empty($supplierId)) {
            $supplier = \App\Supplier::find($supplierId);
            if (! empty($supplier)) {
                $supplier->fill(['supplier_price_range_id' => $priceRangeId])->save();
            }
        }

        return response()->json(['code' => 200, 'data' => [], 'message' => 'Price Range updated successfully']);
    }

    public function supplierList(Request $request, $source)
    {
        $list = \App\Supplier::where('source', $source)->where('supplier_status_id', 1)->pluck('supplier', 'id');

        return response()->json(['code' => 200, 'data' => $list]);
    }

    public function getPrioritiesList(Request $request)
    {
        $priorities = SupplierPriority::get();
        if ($request->ajax()) {
            $suppliers = \App\Supplier::query();
            $suppliers->with('supplier_category');
            if (isset($request->supplier) && ! empty($request->supplier)) {
                $suppliers = $suppliers->where('supplier', $request->supplier);
            }
            if (isset($request->priority) && ! empty($request->priority)) {
                $suppliers = $suppliers->where('priority', $request->priority);
            }
            if (isset($request->priority) && ($request->priority == 0)) {
                $suppliers = $suppliers->where('priority', null);
            }

            $suppliers->orderBy('created_at', 'desc');

            return Datatables::of($suppliers)
                ->addIndexColumn()
                ->addColumn('supplier_category_name', function ($row) {
                    $supplier_category_name = ($row->supplier_category) ? $row->supplier_category->name : 'N/A';

                    return $supplier_category_name;
                })
                ->addColumn('action', function ($row) {
                    $actionBtn = '<a href="javascript:void(0)" data-id="' . $row->id . '" class="update-supplier-priority btn btn-warning btn-sm"><i class="fa fa-edit fa-sm"></i></a>&nbsp;';

                    return $actionBtn;
                })
                ->rawColumns(['action', 'supplier_category_id'])
                ->make(true);
        }

        return view('suppliers.supplier_category_priority', compact('priorities'));
    }

    public function addNewPriority(Request $request)
    {
        $validateArr['priority'] = 'required|numeric|unique:supplier_priority,priority';
        $validator               = Validator::make($request->all(), $validateArr);

        if ($validator->fails()) {
            $return = ['code' => 500, 'message' => $validator->errors()->first()];
        } else {
            $supplier_priority = SupplierPriority::create([
                'priority' => $request->priority,
            ]);
            $return = ['code' => 200, 'message' => 'Supplier priority created!'];
        }

        return response()->json($return);
    }

    public function getSupplierPriorityList(Request $request)
    {
        $supplier_priority_list = \App\SupplierPriority::get();
        if (isset($supplier_priority_list) && count($supplier_priority_list)) {
            $show_history = (string) view('suppliers.ajax_priority_list', compact('supplier_priority_list'));
            $return       = ['code' => 200, 'message' => 'Success', 'html' => $show_history];
        } else {
            $return = ['code' => 500, 'message' => 'No Results Found.'];
        }

        return response()->json($return);
    }

    public function getSupplierForPriority(Request $request)
    {
        $supplier               = Supplier::with('supplier_category')->where('id', $request->id)->first();
        $supplier_priority_list = \App\SupplierPriority::get();
        if ($supplier) {
            $category = $supplier->supplier_category ? $supplier->supplier_category->name : "N\A";
            $return   = ['code' => 200, 'success' => true, 'message' => 'Success', 'supplier' => $supplier, 'category' => $category, 'supplier_priority_list' => $supplier_priority_list];
        } else {
            $return = ['code' => 500, 'success' => false, 'message' => 'No Results Found.'];
        }

        return response()->json($return);
    }

    public function updateSupplierPriority(Request $request)
    {
        $supplier_id     = $request->id;
        $priority        = $request->priority;
        $updatedPriority = $this->updatePriority($supplier_id, $priority);
        if ($updatedPriority) {
            $response = ['code' => 200, 'success' => true, 'message' => 'Supplier priority updated!'];
        } else {
            $response = ['code' => 500, 'success' => false, 'message' => 'No Results Found.'];
        }

        return response()->json($response);
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/TaskController.php 
Content: <?php

namespace App\Http\Controllers;

use App\Task;
use App\User;
use App\Status;
use App\Setting;
use App\tasktypes;
use App\TaskStatus;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Auth;

class TaskController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        if ((\Auth::user()->hasRole(['Admin', 'Supervisors']))) {
            $task = Task::oldest()->whereNull('deleted_at')->paginate(Setting::get('pagination'));
        } else {
            $task = Task::oldest()->whereNull('deleted_at')->where('userid', '=', Auth::id())->orWhere('assigned_user', '=', Auth::id())->paginate(Setting::get('pagination'));
        }

        return view('task.index', compact('task'))
            ->with('i', (request()->input('page', 1) - 1) * 10);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
        $type           = new tasktypes;
        $data['task']   = $type->all();
        $users          = User::oldest()->get()->toArray();
        $data['users']  = $users;
        $status         = new status;
        $data['status'] = $status->all();

        return view('task.create', compact('data'));
    }

    /**
     * Store a newly created resource in storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        //
        $request->merge(['userid' => Auth::id()]);
        $task = $this->validate(request(), [
            'name'          => 'required',
            'details'       => 'required',
            'type'          => 'required',
            'related'       => '',
            'assigned_user' => 'required',
            'remark'        => '',
            'minutes'       => '',
            'comments'      => '',
            'status'        => '',
            'userid'        => '',

        ]);

        $task = Task::create($task);

        return redirect()->route('task.create')
            ->with('success', 'Task created successfully.');
    }

    /**
     * Display the specified resource.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        //
        $task           = Task::find($id);
        $type           = new tasktypes;
        $data['task']   = $type->all();
        $users          = User::oldest()->get()->toArray();
        $data['users']  = $users;
        $status         = new status;
        $data['status'] = $status->all();
        $task['task']   = $data['task'];
        $task['status'] = $data['status'];
        $task['user']   = $data['users'];

        return view('task.edit', compact('task', 'id'));
    }

    /**
     * Update the specified resource in storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        //
        $task = Task::find($id);
        $this->validate(request(), [
            'name'          => 'required',
            'details'       => 'required',
            'type'          => 'required',
            'related'       => '',
            'assigned_user' => 'required',
            'remark'        => '',
            'minutes'       => '',
            'comments'      => '',
            'status'        => '',
            'userid'        => '',

        ]);

        $task->name          = $request->get('name');
        $task->details       = $request->get('details');
        $task->type          = $request->get('type');
        $task->related       = $request->get('related');
        $task->assigned_user = $request->get('assigned_user');
        $task->remark        = $request->get('remark');
        $task->minutes       = $request->get('minutes');
        $task->status        = $request->get('status');
        $task->userid        = $request->get('userid');

        $task->save();

        return redirect()->route('task.index')
            ->with('success', 'Task Updated successfully.');
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        //
    }

    // getting remarks
    public function getremarks($taskid)
    {
        $results = DB::select('select * from reamrks where taskid = :taskid', ['taskid' => $taskid]);

        return $results;
    }

    /**
     * function to show the user wise task's statuses counts.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function taskSummary(Request $request)
    {
        $userListWithStatuesCnt = User::select('tasks.id', 'users.id as userid', 'users.name', 'tasks.assign_to', 'tasks.status', DB::raw('(SELECT tasks.created_at from tasks where tasks.assign_to = users.id order by tasks.created_at DESC limit 1) AS created_date'), 'users.name', DB::raw('count(tasks.id) statusCnt'));
        $userListWithStatuesCnt = $userListWithStatuesCnt->join('tasks', 'tasks.assign_to', 'users.id')->where('users.is_task_planned', 1);

        // Code for filter
        //Get all searchable user list
        $userslist       = $statuslist = null;
        $filterUserIds   = $request->get('users_filter');
        $filterStatusIds = $request->get('status_filter');

        //Get all searchable status list
        if ((int) $filterUserIds > 0 && (int) $filterStatusIds > 0) {
            $userListWithStatuesCnt = $userListWithStatuesCnt->WhereIn('users.id', $filterUserIds)->WhereIn('tasks.status', $filterStatusIds);
            $statuslist             = TaskStatus::WhereIn('id', $filterStatusIds)->get();
            $userslist              = User::whereIn('id', $filterUserIds)->get();
        } elseif ((int) $filterUserIds > 0) {
            $userListWithStatuesCnt = $userListWithStatuesCnt->WhereIn('users.id', $filterUserIds);
            $userslist              = User::whereIn('id', $request->get('users_filter'))->get();
        } elseif ((int) $filterStatusIds > 0) {
            $userListWithStatuesCnt = $userListWithStatuesCnt->WhereIn('tasks.status', $filterStatusIds);
            $statuslist             = TaskStatus::WhereIn('id', $filterStatusIds)->get();
        }

        $userListWithStatuesCnt = $userListWithStatuesCnt->groupBy('users.id', 'tasks.assign_to', 'tasks.status')
            ->orderBy('created_date', 'desc')->orderBy('tasks.status', 'asc')
            ->get();
        $getTaskStatus    = TaskStatus::get();
        $getTaskStatusIds = TaskStatus::select(DB::raw('group_concat(id) as ids'))->first();
        $arrTaskStatusIds = explode(',', $getTaskStatusIds['ids']);

        $arrStatusCount = [];
        $arrUserNameId  = [];
        foreach ($userListWithStatuesCnt as $key => $value) {
            $status                                    = $value['status'];
            $arrStatusCount[$value['userid']][$status] = $value['statusCnt'];
            $arrUserNameId[$value['userid']]['name']   = $value['name'];
            $arrUserNameId[$value['userid']]['userid'] = $value['userid'];
            foreach ($arrTaskStatusIds as $key => $arrTaskStatusIdvalue) {
                if (! array_key_exists($arrTaskStatusIdvalue, $arrStatusCount[$value['userid']])) {
                    $arrStatusCount[$value['userid']][$arrTaskStatusIdvalue] = 0;
                }
            }
            isset($arrStatusCount[$value['userid']]) ? ksort($arrStatusCount[$value['userid']]) : '';
        }

        return view('task-summary.index', compact('userListWithStatuesCnt', 'getTaskStatus', 'arrUserNameId', 'arrStatusCount', 'userslist', 'statuslist'));
    }

    /**
     * function to show all the task list based on specific status and user
     *
     * @param int $user_id , $status
     *
     * @return \Illuminate\Http\Response
     */
    public function taskList(Request $request)
    {
        $taskDetails = Task::where('status', $request->taskStatusId)->where('assign_to', $request->userId)->get();

        return response()->json(['data' => $taskDetails]);
    }

    /**
     * Function to get user's name - it's use for lazy loading of users data
     *
     * @return \Illuminate\Http\Response
     */
    public function usersList(Request $request)
    {
        $users = User::orderBy('name');
        if (! empty($request->q)) {
            $users->where(function ($q) use ($request) {
                $q->where('name', 'LIKE', '%' . $request->q . '%');
            });
        }
        $users                        = $users->paginate(30);
        $result['total_count']        = $users->total();
        $result['incomplete_results'] = $users->nextPageUrl() !== null;

        foreach ($users as $user) {
            $result['items'][] = [
                'id'   => $user->id,
                'text' => $user->name,
            ];
        }

        return response()->json($result);
    }

    /**
     * Function to get user's name - it's use for lazy loading of users data
     *
     * @return \Illuminate\Http\Response
     */
    public function statusList(Request $request)
    {
        $taskStatus = TaskStatus::orderBy('name');
        if (! empty($request->q)) {
            $taskStatus->where(function ($q) use ($request) {
                $q->where('name', 'LIKE', '%' . $request->q . '%');
            });
        }
        $taskStatus                   = $taskStatus->paginate(30);
        $result['total_count']        = $taskStatus->total();
        $result['incomplete_results'] = $taskStatus->nextPageUrl() !== null;

        foreach ($taskStatus as $status) {
            $result['items'][] = [
                'id'   => $status->id,
                'text' => $status->name,
            ];
        }

        return response()->json($result);
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/TaskModuleController.php 
Content: <?php

namespace App\Http\Controllers;

use App\Sop;
use App\Task;
use App\User;
use Exception;
use App\Remark;
use App\Contact;
use App\Helpers;
use App\Setting;
use App\RoleUser;
use App\UserRate;
use Carbon\Carbon;
use App\BugTracker;
use App\TaskRemark;
use App\TaskStatus;
use App\ChatMessage;
use App\SatutoryTask;
use App\StoreWebsite;
use App\TaskCategory;
use App\DeveloperTask;
use App\ReplyCategory;
use App\WhatsAppGroup;
use GuzzleHttp\Client;
use App\DocumentRemark;
use App\LogChatMessage;
use App\PaymentReceipt;
use App\UserAvaibility;
use App\SiteDevelopment;
use App\TaskUserHistory;
use App\GoogleScreencast;
use App\ScheduledMessage;
use App\UserEvent\UserEvent;
use App\WhatsAppGroupNumber;
use Illuminate\Http\Request;
use App\DeveloperTaskHistory;
use App\ChatMessagesQuickData;
use App\Helpers\HubstaffTrait;
use App\Helpers\MessageHelper;
use App\Hubstaff\HubstaffTask;
use GuzzleHttp\RequestOptions;
use App\Models\DataTableColumn;
use App\Hubstaff\HubstaffMember;
use App\SiteDevelopmentCategory;
use App\TimeDoctor\TimeDoctorTask;
use Illuminate\Support\Facades\DB;
use App\Models\TaskStartEndHistory;
use App\Exports\AllTasksExcelExport;
use Illuminate\Support\Facades\Auth;
use Maatwebsite\Excel\Facades\Excel;
use App\Models\TaskHubstaffCreateLog;
use App\Models\Tasks\TaskHistoryForCost;
use App\Jobs\UploadGoogleDriveScreencast;
use GuzzleHttp\Exception\ClientException;
use App\Library\TimeDoctor\Src\Timedoctor;
use App\Models\Tasks\TaskHistoryForStartDate;
use Plank\Mediable\Facades\MediaUploader as MediaUploader;

class TaskModuleController extends Controller
{
    use HubstaffTrait;

    private $githubClient;

    public function __construct()
    {
        $this->githubClient = new Client(
            [
                'auth' => [
                    config('env.GITHUB_USERNAME'),
                    config('env.GITHUB_TOKEN'),
                ],
            ]
        );
        $this->init(config('env.HUBSTAFF_SEED_PERSONAL_TOKEN'));
    }

    public function index(Request $request)
    {
        if (! $request->input('type') || $request->input('type') == '') {
            $type = 'pending';
        } else {
            $type = $request->input('type');
        }

        $category = '';
        if ($request->category != '') {
            $category = $request->category;
            if ($request->category == 1) {
                $category = '';
            }
        }

        $term         = $request->term ?? '';
        $data['task'] = [];

        $search_term_suggestions                 = [];
        $search_suggestions                      = [];
        $assign_from_arr                         = [0];
        $special_task_arr                        = [0];
        $assign_to_arr                           = [0];
        $data['task']['pending']                 = [];
        $data['task']['statutory_not_completed'] = [];
        $data['task']['completed']               = [];

        if ($type == 'pending') {
            // Get Pending tasks via model
            $data['task']['pending'] = Task::getSearchedTasks('pending_list', $request);

            foreach ($data['task']['pending'] as $task) {
                array_push($assign_to_arr, $task->assign_to);
                array_push($assign_from_arr, $task->assign_from);
                array_push($special_task_arr, $task->id);
            }

            $user_ids_from = array_unique($assign_from_arr);
            $user_ids_to   = array_unique($assign_to_arr);

            foreach ($data['task']['pending'] as $task) {
                $search_suggestions[] = '#' . $task->id . ' ' . $task->task_subject . ' ' . $task->task_details;
                $from_exist           = in_array($task->assign_from, $user_ids_from);
                if ($from_exist) {
                    $from_user = $task->assign_from_username;
                    if ($from_user) {
                        $search_term_suggestions[] = $from_user;
                    }
                }

                $to_exist = in_array($task->assign_to, $user_ids_to);
                if ($to_exist) {
                    $to_user = $task->assign_to_username;
                    if ($to_user) {
                        $search_term_suggestions[] = $to_user;
                    }
                }
                $search_term_suggestions[] = "$task->id";
                $search_term_suggestions[] = $task->task_subject;
                $search_term_suggestions[] = $task->task_details;
            }
        } elseif ($type == 'completed') {
            // Get Completed tasks via model
            $data['task']['completed'] = Task::getSearchedTasks('completed_list', $request);

            foreach ($data['task']['completed'] as $task) {
                array_push($assign_to_arr, $task->assign_to);
                array_push($assign_from_arr, $task->assign_from);
                array_push($special_task_arr, $task->id);
            }

            $user_ids_from = array_unique($assign_from_arr);
            $user_ids_to   = array_unique($assign_to_arr);

            foreach ($data['task']['completed'] as $task) {
                $search_suggestions[] = '#' . $task->id . ' ' . $task->task_subject . ' ' . $task->task_details;
                $from_exist           = in_array($task->assign_from, $user_ids_from);
                if ($from_exist) {
                    $from_user = $task->assign_from_username;
                    if ($from_user) {
                        $search_term_suggestions[] = $from_user;
                    }
                }

                $to_exist = in_array($task->assign_to, $user_ids_to);
                if ($to_exist) {
                    $to_user = $task->assign_to_username;
                    if ($to_user) {
                        $search_term_suggestions[] = $to_user;
                    }
                }
                $search_term_suggestions[] = "$task->id";
                $search_term_suggestions[] = $task->task_subject;
                $search_term_suggestions[] = $task->task_details;
            }
        } elseif ($type == 'statutory_not_completed') {
            // Get Statutory tasks via model
            $data['task']['statutory_not_completed'] = Task::getSearchedTasks('statutory_not_completed_list', $request);

            foreach ($data['task']['statutory_not_completed'] as $task) {
                array_push($assign_to_arr, $task->assign_to);
                array_push($assign_from_arr, $task->assign_from);
                array_push($special_task_arr, $task->id);
            }

            $user_ids_from = array_unique($assign_from_arr);
            $user_ids_to   = array_unique($assign_to_arr);

            foreach ($data['task']['statutory_not_completed'] as $task) {
                $search_suggestions[] = '#' . $task->id . ' ' . $task->task_subject . ' ' . $task->task_details;
                $from_exist           = in_array($task->assign_from, $user_ids_from);
                if ($from_exist) {
                    $from_user = $task->assign_from_username;
                    if ($from_user) {
                        $search_term_suggestions[] = $from_user;
                    }
                }

                $to_exist = in_array($task->assign_to, $user_ids_to);
                if ($to_exist) {
                    $to_user = $task->assign_to_username;
                    if ($to_user) {
                        $search_term_suggestions[] = $to_user;
                    }
                }
                $search_term_suggestions[] = "$task->id";
                $search_term_suggestions[] = $task->task_subject;
                $search_term_suggestions[] = $task->task_details;
            }
        } else {
            return;
        }

        $usersOrderByName            = User::orderBy('name')->get();
        $data['users']               = $usersOrderByName->toArray();
        $data['daily_activity_date'] = $request->daily_activity_date ? $request->daily_activity_date : date('Y-m-d');

        // Lead user process starts
        $model_team                    = \DB::table('teams')->where('user_id', auth()->user()->id)->get()->toArray();
        $isTeamLeader                  = head($model_team);
        $team_members_array[]          = auth()->user()->id;
        $team_id_array                 = [];
        $team_members_array_unique_ids = '';
        $isTeamLeader                  = null;
        if (count($model_team) > 0) {
            $isTeamLeader = $model_team[0];
        }
        // Lead user process ends

        $selected_user = $request->input('selected_user');

        if ($isTeamLeader && ! Auth::user()->hasRole('Admin')) {
            $usrlst = [];

            for ($k = 0; $k < count($model_team); $k++) {
                $team_id_array[] = $model_team[$k]->id;
            }

            $model_user_model = \DB::table('team_user')->whereIn('team_id', $team_id_array)->get()->toArray();
            for ($m = 0; $m < count($model_user_model); $m++) {
                $team_members_array[] = $model_user_model[$m]->user_id;
            }

            foreach ($usersOrderByName as $user) {
                if (in_array($user->id, $team_members_array)) {
                    $usrlst[] = $user;
                }
            }
        } else {
            $usrlst = $usersOrderByName;
        }

        $users          = Helpers::getUserArray($usrlst);
        $usersForExport = [];

        if (Auth::user()->hasRole('Admin')) {
            $usersForExport = User::select('name', 'id')->get();
        } else {
            $usersForExport = User::select('name', 'id')->where('id', '=', Auth::user()->id)->get();
        }

        $all_task_categories = TaskCategory::all();
        $selected_category   = $request->category;
        if (Auth::user()->hasRole('Admin')) {
            if (empty($request->category)) {
                $selected_category = 1;
            }
        }
        $categories = $approved_categories = $task_categories = [];
        foreach ($all_task_categories as $category) {
            if ($category->parent_id == 0) {
                $task_categories[] = $category;
            }

            $categories[$category->id] = $category->title;

            if ($category->is_approved == 1) {
                $approved_categories[] = $category->toArray();
            }
        }

        $selected_category = $request->category;

        if (Auth::user()->hasRole('Admin')) {
            if (empty($request->category)) {
                $selected_category = 1;
            }
        }

        $task_categories_dropdown = nestable($approved_categories)->attr(
            [
                'name'  => 'category',
                'class' => 'form-control input-sm',
            ]
        )->selected($selected_category)->renderAsDropdown();

        if (! empty($selected_user) && ! Helpers::getadminorsupervisor()) {
            return response()->json(['user not allowed'], 405);
        }

        $tasks_view = [];
        $priority   = \App\ErpPriority::where('model_type', '=', Task::class)->pluck('model_id')->toArray();

        $openTask = \App\Task::join('users as u', 'u.id', 'tasks.assign_to')->whereNull('tasks.is_completed')->groupBy('tasks.assign_to')->select(\DB::raw('count(u.id) as total'), 'u.name as person')->pluck('total', 'person');

        if ($request->is_statutory_query == 3) {
            $title = 'Discussion tasks';
        } else {
            $title = 'Task & Activity';
        }

        $task_statuses = TaskStatus::all();

        $datatableModel = DataTableColumn::select('column_name')->where('user_id', auth()->user()->id)->where('section_name', 'task-listing')->first();

        $dynamicColumnsToShowTask = [];
        if (! empty($datatableModel->column_name)) {
            $hideColumns              = $datatableModel->column_name ?? '';
            $dynamicColumnsToShowTask = json_decode($hideColumns, true);
        }

        $reply_categories = ReplyCategory::select('id', 'name')
            ->with('approval_leads', 'sub_categories')
            ->where('parent_id', 0)
            ->where('id', 44)
            ->orderby('name', 'ASC')->get();

        if ($request->ajax()) {
            if ($type == 'pending') {
                return view('task-module.partials.pending-row-ajax', compact('data', 'users', 'selected_user', 'category', 'term', 'search_suggestions', 'search_term_suggestions', 'tasks_view', 'categories', 'task_categories', 'task_categories_dropdown', 'priority', 'openTask', 'type', 'title', 'task_statuses', 'isTeamLeader', 'dynamicColumnsToShowTask', 'reply_categories'));
            } elseif ($type == 'statutory_not_completed') {
                return view('task-module.partials.statutory-row-ajax', compact('data', 'users', 'selected_user', 'category', 'term', 'search_suggestions', 'search_term_suggestions', 'tasks_view', 'categories', 'task_categories', 'task_categories_dropdown', 'priority', 'openTask', 'type', 'title', 'task_statuses', 'isTeamLeader', 'dynamicColumnsToShowTask', 'reply_categories'));
            } elseif ($type == 'completed') {
                return view('task-module.partials.completed-row-ajax', compact('data', 'users', 'selected_user', 'category', 'term', 'search_suggestions', 'search_term_suggestions', 'tasks_view', 'categories', 'task_categories', 'task_categories_dropdown', 'priority', 'openTask', 'type', 'title', 'task_statuses', 'isTeamLeader', 'dynamicColumnsToShowTask', 'reply_categories'));
            } else {
                return view('task-module.partials.pending-row-ajax', compact('data', 'users', 'selected_user', 'category', 'term', 'search_suggestions', 'search_term_suggestions', 'tasks_view', 'categories', 'task_categories', 'task_categories_dropdown', 'priority', 'openTask', 'type', 'title', 'task_statuses', 'isTeamLeader', 'dynamicColumnsToShowTask', 'reply_categories'));
            }
        }

        if ($request->is_statutory_query == 3) {
            return view('task-module.discussion-tasks', compact('data', 'users', 'selected_user', 'category', 'term', 'search_suggestions', 'search_term_suggestions', 'tasks_view', 'categories', 'task_categories', 'task_categories_dropdown', 'priority', 'openTask', 'type', 'title', 'task_statuses', 'isTeamLeader', 'dynamicColumnsToShowTask', 'reply_categories'));
        } else {
            $taskStatusData = TaskStatus::get();

            $statuseslist     = $taskStatusData->pluck('name', 'id')->toArray();
            $selectStatusList = $taskStatusData->pluck('id')->toArray();
            $taskstatus       = $taskStatusData;

            return view('task-module.show', compact('taskstatus', 'data', 'users', 'selected_user', 'category', 'term', 'search_suggestions', 'search_term_suggestions', 'tasks_view', 'categories', 'task_categories', 'task_categories_dropdown', 'priority', 'openTask', 'type', 'title', 'task_statuses', 'statuseslist', 'selectStatusList', 'isTeamLeader', 'dynamicColumnsToShowTask', 'reply_categories', 'usersForExport'));
        }
    }

    public function taskColumnVisbilityUpdate(Request $request)
    {
        $userCheck = DataTableColumn::where('user_id', auth()->user()->id)->where('section_name', 'task-listing')->first();

        if ($userCheck) {
            $column               = DataTableColumn::find($userCheck->id);
            $column->section_name = 'task-listing';
            $column->column_name  = json_encode($request->column_task);
            $column->save();
        } else {
            $column               = new DataTableColumn();
            $column->section_name = 'task-listing';
            $column->column_name  = json_encode($request->column_task);
            $column->user_id      = auth()->user()->id;
            $column->save();
        }

        return redirect()->back()->with('success', 'column visiblity Added Successfully!');
    }

    public function indexModules(Request $request)
    {
        if (! $request->input('type') || $request->input('type') == '') {
            $type = 'pending';
        } else {
            $type = $request->input('type');
        }

        $category = '';
        if ($request->category != '') {
            $category = $request->category;
            if ($request->category == 1) {
                $category = '';
            }
        }

        $term         = $request->term ?? '';
        $data['task'] = [];

        $search_term_suggestions                 = [];
        $search_suggestions                      = [];
        $assign_from_arr                         = [0];
        $special_task_arr                        = [0];
        $assign_to_arr                           = [0];
        $data['task']['pending']                 = [];
        $data['task']['statutory_not_completed'] = [];
        $data['task']['completed']               = [];

        if ($type == 'pending') {
            // Get Pending tasks via model
            $data['task']['pending'] = Task::getSearchedTasks('pending_list', $request);

            foreach ($data['task']['pending'] as $task) {
                array_push($assign_to_arr, $task->assign_to);
                array_push($assign_from_arr, $task->assign_from);
                array_push($special_task_arr, $task->id);
            }

            $user_ids_from = array_unique($assign_from_arr);
            $user_ids_to   = array_unique($assign_to_arr);

            foreach ($data['task']['pending'] as $task) {
                $search_suggestions[] = '#' . $task->id . ' ' . $task->task_subject . ' ' . $task->task_details;
                $from_exist           = in_array($task->assign_from, $user_ids_from);
                if ($from_exist) {
                    $from_user = $task->assign_from_username;
                    if ($from_user) {
                        $search_term_suggestions[] = $from_user;
                    }
                }

                $to_exist = in_array($task->assign_to, $user_ids_to);
                if ($to_exist) {
                    $to_user = $task->assign_to_username;
                    if ($to_user) {
                        $search_term_suggestions[] = $to_user;
                    }
                }
                $search_term_suggestions[] = "$task->id";
                $search_term_suggestions[] = $task->task_subject;
                $search_term_suggestions[] = $task->task_details;
            }
        } elseif ($type == 'completed') {
            // Get Completed tasks via model
            $data['task']['completed'] = Task::getSearchedTasks('completed_list', $request);

            foreach ($data['task']['completed'] as $task) {
                array_push($assign_to_arr, $task->assign_to);
                array_push($assign_from_arr, $task->assign_from);
                array_push($special_task_arr, $task->id);
            }

            $user_ids_from = array_unique($assign_from_arr);
            $user_ids_to   = array_unique($assign_to_arr);

            foreach ($data['task']['completed'] as $task) {
                $search_suggestions[] = '#' . $task->id . ' ' . $task->task_subject . ' ' . $task->task_details;
                $from_exist           = in_array($task->assign_from, $user_ids_from);
                if ($from_exist) {
                    $from_user = $task->assign_from_username;
                    if ($from_user) {
                        $search_term_suggestions[] = $from_user;
                    }
                }

                $to_exist = in_array($task->assign_to, $user_ids_to);
                if ($to_exist) {
                    $to_user = $task->assign_to_username;
                    if ($to_user) {
                        $search_term_suggestions[] = $to_user;
                    }
                }
                $search_term_suggestions[] = "$task->id";
                $search_term_suggestions[] = $task->task_subject;
                $search_term_suggestions[] = $task->task_details;
            }
        } elseif ($type == 'statutory_not_completed') {
            // Get Statutory tasks via model
            $data['task']['statutory_not_completed'] = Task::getSearchedTasks('statutory_not_completed_list', $request);

            foreach ($data['task']['statutory_not_completed'] as $task) {
                array_push($assign_to_arr, $task->assign_to);
                array_push($assign_from_arr, $task->assign_from);
                array_push($special_task_arr, $task->id);
            }

            $user_ids_from = array_unique($assign_from_arr);
            $user_ids_to   = array_unique($assign_to_arr);

            foreach ($data['task']['statutory_not_completed'] as $task) {
                $search_suggestions[] = '#' . $task->id . ' ' . $task->task_subject . ' ' . $task->task_details;
                $from_exist           = in_array($task->assign_from, $user_ids_from);
                if ($from_exist) {
                    $from_user = $task->assign_from_username;
                    if ($from_user) {
                        $search_term_suggestions[] = $from_user;
                    }
                }

                $to_exist = in_array($task->assign_to, $user_ids_to);
                if ($to_exist) {
                    $to_user = $task->assign_to_username;
                    if ($to_user) {
                        $search_term_suggestions[] = $to_user;
                    }
                }
                $search_term_suggestions[] = "$task->id";
                $search_term_suggestions[] = $task->task_subject;
                $search_term_suggestions[] = $task->task_details;
            }
        } else {
            return;
        }

        $usersOrderByName            = User::orderBy('name')->get();
        $data['users']               = $usersOrderByName->toArray();
        $data['daily_activity_date'] = $request->daily_activity_date ? $request->daily_activity_date : date('Y-m-d');

        // Lead user process starts
        $model_team                    = \DB::table('teams')->where('user_id', auth()->user()->id)->get()->toArray();
        $isTeamLeader                  = head($model_team);
        $team_members_array[]          = auth()->user()->id;
        $team_id_array                 = [];
        $team_members_array_unique_ids = '';
        $isTeamLeader                  = null;
        if (count($model_team) > 0) {
            $isTeamLeader = $model_team[0];
        }
        // Lead user process ends

        $selected_user = $request->input('selected_user');

        if ($isTeamLeader && ! Auth::user()->hasRole('Admin')) {
            $usrlst = [];

            for ($k = 0; $k < count($model_team); $k++) {
                $team_id_array[] = $model_team[$k]->id;
            }

            $model_user_model = \DB::table('team_user')->whereIn('team_id', $team_id_array)->get()->toArray();
            for ($m = 0; $m < count($model_user_model); $m++) {
                $team_members_array[] = $model_user_model[$m]->user_id;
            }

            foreach ($usersOrderByName as $user) {
                if (in_array($user->id, $team_members_array)) {
                    $usrlst[] = $user;
                }
            }
        } else {
            $usrlst = $usersOrderByName;
        }

        $users = Helpers::getUserArray($usrlst);

        $all_task_categories = TaskCategory::all();
        $selected_category   = $request->category;
        if (Auth::user()->hasRole('Admin')) {
            if (empty($request->category)) {
                $selected_category = 1;
            }
        }
        $categories = $approved_categories = $task_categories = [];
        foreach ($all_task_categories as $category) {
            if ($category->parent_id == 0) {
                $task_categories[] = $category;
            }

            $categories[$category->id] = $category->title;

            if ($category->is_approved == 1) {
                $approved_categories[] = $category->toArray();
            }
        }

        $selected_category = $request->category;

        if (Auth::user()->hasRole('Admin')) {
            if (empty($request->category)) {
                $selected_category = 1;
            }
        }

        $task_categories_dropdown = nestable($approved_categories)->attr(
            [
                'name'  => 'category',
                'class' => 'form-control input-sm',
            ]
        )->selected($selected_category)->renderAsDropdown();

        if (! empty($selected_user) && ! Helpers::getadminorsupervisor()) {
            return response()->json(['user not allowed'], 405);
        }

        $tasks_view = [];
        $priority   = \App\ErpPriority::where('model_type', '=', Task::class)->pluck('model_id')->toArray();

        $openTask = \App\Task::join('users as u', 'u.id', 'tasks.assign_to')->whereNull('tasks.is_completed')->groupBy('tasks.assign_to')->select(\DB::raw('count(u.id) as total'), 'u.name as person')->pluck('total', 'person');

        if ($request->is_statutory_query == 3) {
            $title = 'Discussion tasks';
        } else {
            $title = 'Task & Activity';
        }

        $task_statuses = TaskStatus::all();

        if ($request->ajax()) {
            if ($type == 'pending') {
                return view('task-module.partials.pending-row-ajax', compact('data', 'users', 'selected_user', 'category', 'term', 'search_suggestions', 'search_term_suggestions', 'tasks_view', 'categories', 'task_categories', 'task_categories_dropdown', 'priority', 'openTask', 'type', 'title', 'task_statuses', 'isTeamLeader'));
            } elseif ($type == 'statutory_not_completed') {
                return view('task-module.partials.statutory-row-ajax', compact('data', 'users', 'selected_user', 'category', 'term', 'search_suggestions', 'search_term_suggestions', 'tasks_view', 'categories', 'task_categories', 'task_categories_dropdown', 'priority', 'openTask', 'type', 'title', 'task_statuses', 'isTeamLeader'));
            } elseif ($type == 'completed') {
                return view('task-module.partials.completed-row-ajax', compact('data', 'users', 'selected_user', 'category', 'term', 'search_suggestions', 'search_term_suggestions', 'tasks_view', 'categories', 'task_categories', 'task_categories_dropdown', 'priority', 'openTask', 'type', 'title', 'task_statuses', 'isTeamLeader'));
            } else {
                return view('task-module.partials.pending-row-ajax', compact('data', 'users', 'selected_user', 'category', 'term', 'search_suggestions', 'search_term_suggestions', 'tasks_view', 'categories', 'task_categories', 'task_categories_dropdown', 'priority', 'openTask', 'type', 'title', 'task_statuses', 'isTeamLeader'));
            }
        }

        if ($request->is_statutory_query == 3) {
            return view('task-module.discussion-tasks', compact('data', 'users', 'selected_user', 'category', 'term', 'search_suggestions', 'search_term_suggestions', 'tasks_view', 'categories', 'task_categories', 'task_categories_dropdown', 'priority', 'openTask', 'type', 'title', 'task_statuses', 'isTeamLeader'));
        } else {
            $taskStatusData = TaskStatus::get();

            $statuseslist     = $taskStatusData->pluck('name', 'id')->toArray();
            $selectStatusList = $taskStatusData->pluck('id')->toArray();
            $taskstatus       = $taskStatusData;

            return view('task-module.show-modules', compact('taskstatus', 'data', 'users', 'selected_user', 'category', 'term', 'search_suggestions', 'search_term_suggestions', 'tasks_view', 'categories', 'task_categories', 'task_categories_dropdown', 'priority', 'openTask', 'type', 'title', 'task_statuses', 'statuseslist', 'selectStatusList', 'isTeamLeader'));
        }
    }

    public function statuscolor(Request $request)
    {
        $status_color = $request->all();
        $data         = $request->except('_token');
        foreach ($status_color['color_name'] as $key => $value) {
            $bugstatus             = TaskStatus::find($key);
            $bugstatus->task_color = $value;
            $bugstatus->save();
        }

        return redirect()->back()->with('success', 'The status color updated successfully.');
    }

    public function saveMilestone(Request $request)
    {
        $task = Task::find($request->task_id);
        if (! $task->is_milestone) {
            return;
        }
        $total = $request->total;
        if ($task->milestone_completed) {
            if ($total <= $task->milestone_completed) {
                return response()->json(
                    [
                        'message' => 'Milestone no can\'t be reduced',
                    ], 500
                );
            }
        }

        if ($total > $task->no_of_milestone) {
            return response()->json(
                [
                    'message' => 'Estimated milestone exceeded',
                ], 500
            );
        }
        if (! $task->cost || $task->cost == '') {
            return response()->json(
                [
                    'message' => 'Please provide cost first',
                ], 500
            );
        }

        $newCompleted    = $total - $task->milestone_completed;
        $individualPrice = $task->cost / $task->no_of_milestone;
        $totalCost       = $individualPrice * $newCompleted;

        $task->milestone_completed = $total;
        $task->save();
        $payment_receipt                 = new PaymentReceipt;
        $payment_receipt->date           = date('Y-m-d');
        $payment_receipt->worked_minutes = $task->approximate;
        $payment_receipt->rate_estimated = $totalCost;
        $payment_receipt->status         = 'Pending';
        $payment_receipt->task_id        = $task->id;
        $payment_receipt->user_id        = $task->assign_to;
        $payment_receipt->save();

        return response()->json(
            [
                'status' => 'success',
            ]
        );
    }

    public function updatePriorityNo(Request $request)
    {
        $task = Task::find($request->task_id);

        if (Auth::user()->id == $task->assign_to || Auth::user()->isAdmin()) {
            $task->priority_no = $request->priority;
            $task->save();

            return response()->json(['msg' => 'success']);
        } else {
            return response()->json(['msg' => 'Unauthorized access'], 500);
        }
    }

    public function taskListByUserId(Request $request)
    {
        $user_id        = $request->get('user_id', 0);
        $selected_issue = $request->get('selected_issue', []);
        $issues         = Task::select('tasks.*')->leftJoin(
            'erp_priorities', function ($query) {
                $query->on('erp_priorities.model_id', '=', 'tasks.id');
                $query->where('erp_priorities.model_type', '=', Task::class);
            }
        )->whereNull('is_verified');

        if (auth()->user()->isAdmin()) {
            $issues = $issues->where(
                function ($q) use ($selected_issue, $user_id) {
                    if ((count($selected_issue) != 0 && count($selected_issue) != 1)) {
                        $q->whereIn('tasks.id', $selected_issue);
                    }

                    $user_id = is_null($user_id) ? 0 : $user_id;

                    if ($user_id != 0) {
                        $q->where('tasks.assign_to', $user_id)->orWhere('tasks.master_user_id', $user_id);
                    }
                }
            );
        } else {
            $issues = $issues->whereNotNull('erp_priorities.id');
        }

        $issues = $issues->groupBy('tasks.id')->orderBy('erp_priorities.id')->get();

        foreach ($issues as &$value) {
            $value->created_by = User::where('id', $value->assign_from)->value('name');
            $value->created_at = \Carbon\Carbon::parse($value->created_at)->format('d-m-y H:i:s');
        }
        unset($value);
        $viewData = view('task-module.taskpriority', compact('issues'))->render();

        return response()->json(
            [
                'html' => $viewData,

            ], 200
        );
    }

    public function setTaskPriority(Request $request)
    {
        $priority = $request->get('priority', null);
        $user_id  = $request->get('user_id', 0);

        //delete old priority
        \App\ErpPriority::where('user_id', $user_id)->where('model_type', '=', Task::class)->delete();

        if (! empty($priority)) {
            foreach ((array) $priority as $model_id) {
                \App\ErpPriority::create(
                    [
                        'model_id'   => $model_id,
                        'model_type' => Task::class,
                        'user_id'    => $user_id,
                    ]
                );
            }

            $developerTask = Task::select('tasks.id', 'tasks.task_subject', 'tasks.task_details', 'tasks.assign_from')->join(
                'erp_priorities', function ($query) use ($user_id) {
                    $user_id = is_null($user_id) ? 0 : $user_id;
                    $query->on('erp_priorities.model_id', '=', 'tasks.id');
                    $query->where('erp_priorities.model_type', '=', Task::class);
                    $query->where('user_id', $user_id);
                }
            )->whereNull('is_verified')->orderBy('erp_priorities.id')->get();

            $message = '';
            $i       = 1;

            foreach ($developerTask as $value) {
                $message .= $i . ' : #Task-' . $value->id . '-' . $value->task_subject . "\n";
                $i++;
            }

            if (! empty($message)) {
                $requestData = new Request();
                $requestData->setMethod('POST');
                $params            = [];
                $params['user_id'] = $user_id;

                $string = '';

                if (! empty($request->get('global_remarkes', null))) {
                    $string .= $request->get('global_remarkes') . "\n";
                }

                $string .= "Task Priority is : \n" . $message;

                $params['message'] = $string;
                $params['status']  = 2;
                $requestData->request->add($params);
                app(\App\Http\Controllers\WhatsAppController::class)->sendMessage($requestData, 'priority');
            }
        }

        return response()->json(
            [
                'status' => 'success',
            ]
        );
    }

    public function store(Request $request)
    {
        dd('We are not using this function anymore, If you reach here, that means that we have to change this.');
        $this->validate(
            $request, [
                'task_subject' => 'required',
                'task_details' => 'required',
                'assign_to'    => 'required_without:assign_to_contacts',
            ]
        );
        $data                = $request->except('_token');
        $data['assign_from'] = Auth::id();

        if ($request->task_type == 'quick_task') {
            $data['is_statutory'] = 0;
            $data['category']     = 6;
            $data['model_type']   = $request->model_type;
            $data['model_id']     = $request->model_id;
        }

        if ($request->task_type == 'note-task') {
            $main_task = Task::find($request->task_id);
        } else {
            if ($request->assign_to) {
                $data['assign_to'] = $request->assign_to[0];
            } else {
                $data['assign_to'] = $request->assign_to_contacts[0];
            }
        }

        if (! empty($data['status'])) {
            $data['status'] = 3;
        }

        $task = Task::create($data);

        if ($request->is_statutory == 3) {
            foreach ($request->note as $note) {
                if ($note != null) {
                    Remark::create(
                        [
                            'taskid'      => $task->id,
                            'remark'      => $note,
                            'module_type' => 'task-note',
                        ]
                    );
                }
            }
        }

        if ($request->task_type != 'note-task') {
            if ($request->assign_to) {
                foreach ($request->assign_to as $user_id) {
                    $task->users()->attach([$user_id => ['type' => User::class]]);
                }
            }

            if ($request->assign_to_contacts) {
                foreach ($request->assign_to_contacts as $contact_id) {
                    $task->users()->attach([$contact_id => ['type' => Contact::class]]);
                }
            }
        }

        if ($task->is_statutory != 1) {
            $message = '#' . $task->id . '. ' . $task->task_subject . '. ' . $task->task_details;
        } else {
            $message = $task->task_subject . '. ' . $task->task_details;
        }

        $params = [
            'number'   => null,
            'user_id'  => Auth::id(),
            'approved' => 1,
            'status'   => 2,
            'task_id'  => $task->id,
            'message'  => $message,
        ];
        if (count($task->users) > 0) {
            if ($task->assign_from == Auth::id()) {
                foreach ($task->users as $key => $user) {
                    if ($key == 0) {
                        $params['erp_user'] = $user->id;
                    } else {
                        app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($user->phone, $user->whatsapp_number, $params['message']);
                    }
                }
            } else {
                foreach ($task->users as $key => $user) {
                    if ($key == 0) {
                        $params['erp_user'] = $task->assign_from;
                    } else {
                        if ($user->id != Auth::id()) {
                            app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($user->phone, $user->whatsapp_number, $params['message']);
                        }
                    }
                }
            }
        }

        if (count($task->contacts) > 0) {
            foreach ($task->contacts as $key => $contact) {
                if ($key == 0) {
                    $params['contact_id'] = $task->assign_to;
                } else {
                    app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($contact->phone, null, $params['message']);
                }
            }
        }

        $chat_message = ChatMessage::create($params);
        ChatMessagesQuickData::updateOrCreate(
            [
                'model'    => \App\Task::class,
                'model_id' => $params['task_id'],
            ], [
                'last_communicated_message'    => @$params['message'],
                'last_communicated_message_at' => $chat_message->created_at,
                'last_communicated_message_id' => ($chat_message) ? $chat_message->id : null,
            ]
        );

        $myRequest = new Request();
        $myRequest->setMethod('POST');
        $myRequest->request->add(['messageId' => $chat_message->id]);

        app(\App\Http\Controllers\WhatsAppController::class)->approveMessage('task', $myRequest);

        $hubstaff_project_id = config('env.HUBSTAFF_BULK_IMPORT_PROJECT_ID');

        $assignedUser = HubstaffMember::where('user_id', $request->input('assign_to'))->first();

        $hubstaffUserId = null;
        if ($assignedUser) {
            $hubstaffUserId = $assignedUser->hubstaff_user_id;
        }
        $taskSummery = substr($message, 0, 200);

        $hubstaffTaskId = $this->createHubstaffTask(
            $taskSummery, $hubstaffUserId, $hubstaff_project_id
        );

        if ($hubstaffTaskId) {
            $task->hubstaff_task_id = $hubstaffTaskId;
            $task->save();
        }
        if ($hubstaffUserId) {
            $task                      = new HubstaffTask();
            $task->hubstaff_task_id    = $hubstaffTaskId;
            $task->project_id          = $hubstaff_project_id;
            $task->hubstaff_project_id = $hubstaff_project_id;
            $task->summary             = $message;
            $task->save();
        }

        $task_statuses = TaskStatus::all();

        if ($request->ajax()) {
            $hasRender = request('has_render', false);

            if (! empty($hasRender)) {
                $users    = Helpers::getUserArray(User::all());
                $priority = \App\ErpPriority::where('model_type', '=', Task::class)->pluck('model_id')->toArray();

                if ($task->is_statutory == 1) {
                    $mode = 'task-module.partials.statutory-row';
                } elseif ($task->is_statutory == 3) {
                    $mode = 'task-module.partials.discussion-pending-raw';
                } else {
                    $mode = 'task-module.partials.pending-row';
                }

                $view = (string) view($mode, compact('task', 'priority', 'users', 'task_statuses'));

                return response()->json(
                    [
                        'code'      => 200,
                        'statutory' => $task->is_statutory,
                        'raw'       => $view,
                    ]
                );
            }

            return response('success');
        }

        return redirect()->back()->with('success', 'Task created successfully.');
    }

    public function createHubstaffTask(string $taskSummary, ?int $hubstaffUserId, int $projectId, bool $shouldRetry = true)
    {
        $tokens = $this->getTokens();

        $url = 'https://api.hubstaff.com/v2/projects/' . $projectId . '/tasks';

        $httpClient = new Client();
        try {
            $body = [
                'summary' => $taskSummary,
            ];

            if ($hubstaffUserId) {
                $body['assignee_id'] = $hubstaffUserId;
            } else {
                $body['assignee_id'] = config('env.HUBSTAFF_DEFAULT_ASSIGNEE_ID');
            }

            $response = $httpClient->post(
                $url, [
                    RequestOptions::HEADERS => [
                        'Authorization' => 'Bearer ' . $tokens->access_token,
                        'Content-Type'  => 'application/json',
                    ],

                    RequestOptions::BODY => json_encode($body),
                ]
            );
            $parsedResponse = json_decode($response->getBody()->getContents());

            return $parsedResponse->task->id;
        } catch (ClientException $e) {
            if ($e->getCode() == 401) {
                $this->refreshTokens();
                if ($shouldRetry) {
                    return $this->createHubstaffTask(
                        $taskSummary, $hubstaffUserId, $projectId, false
                    );
                } else {
                }
            }
        }

        return false;
    }

    public function flag(Request $request)
    {
        if ($request->task_type == 'DEVTASK') {
            $task = DeveloperTask::find($request->task_id);
        } else {
            $task = Task::find($request->task_id);
        }

        if ($task->is_flagged == 0) {
            $task->is_flagged = 1;
        } else {
            $task->is_flagged = 0;
        }

        $task->save();

        return response()->json(['is_flagged' => $task->is_flagged]);
    }

    public function remarkFlag(Request $request)
    {
        $remark = Remark::find($request->remark_id);

        if ($remark->is_flagged == 0) {
            $remark->is_flagged = 1;
        } else {
            $remark->is_flagged = 0;
        }

        $remark->save();

        return response()->json(['is_flagged' => $remark->is_flagged]);
    }

    public function plan(Request $request, $id)
    {
        $user                      = auth()->user();
        $task                      = Task::find($id);
        $task->time_slot           = $request->time_slot;
        $task->planned_at          = $request->planned_at;
        $task->general_category_id = $request->get('general_category_id', null);
        $task->save();

        // Save the data in user event
        $schedultDate = Carbon::parse($request->planned_at);
        $timeSlotArr  = explode('-', $request->time_slot);
        $c_start_at   = Carbon::parse("$request->planned_at " . $timeSlotArr[0]);
        $c_end_at     = Carbon::parse("$request->planned_at " . $timeSlotArr[1]);

        // Delete old event of plan task task
        UserEvent::where('subject', 'LIKE', "%Planned task $task->id%")->delete();

        $userEvent              = new UserEvent();
        $userEvent->user_id     = $user->id;
        $userEvent->description = trim($timeSlotArr[0]) . '-' . trim($timeSlotArr[1]) . ', ' . $schedultDate->format('l') . ', ' . $schedultDate->toDateString();
        $userEvent->subject     = "Planned task $task->id ($task->task_subject)";
        $userEvent->date        = $schedultDate;
        $userEvent->start       = $c_start_at->toDateTime();
        $userEvent->end         = $c_end_at->toDateTime();
        $userEvent->save();

        return response()->json(
            [
                'task' => $task,
            ]
        );
    }

    public function loadView(Request $request)
    {
        $tasks = Task::whereIn('id', $request->selected_tasks)->get();
        $users = Helpers::getUserArray(User::all());
        $view  = view(
            'task-module.partials.task-view', [
                'tasks_view' => $tasks,
                'users'      => $users,
            ]
        )->render();

        return response()->json(
            [
                'view' => $view,
            ]
        );
    }

    public function assignMessages(Request $request)
    {
        $messages_ids = json_decode($request->selected_messages, true);

        foreach ($messages_ids as $message_id) {
            $message          = ChatMessage::find($message_id);
            $message->task_id = $request->task_id;
            $message->save();
        }

        return redirect()->back()->withSuccess('You have successfully assign messages');
    }

    public function messageReminder(Request $request)
    {
        $this->validate(
            $request, [
                'message_id'    => 'required|numeric',
                'reminder_date' => 'required',
            ]
        );

        $message = ChatMessage::find($request->message_id);

        $additional_params = [
            'user_id'    => $message->user_id,
            'task_id'    => $message->task_id,
            'erp_user'   => $message->erp_user,
            'contact_id' => $message->contact_id,
        ];

        $params = [
            'user_id'      => Auth::id(),
            'message'      => 'Reminder - ' . $message->message,
            'type'         => 'task',
            'data'         => json_encode($additional_params),
            'sending_time' => $request->reminder_date,
        ];

        ScheduledMessage::create($params);

        return redirect()->back()->withSuccess('You have successfully set a reminder!');
    }

    public function convertTask(Request $request, $id)
    {
        $task = Task::find($id);

        $task->is_statutory = 3;
        $task->save();

        return response('success', 200);
    }

    public function updateSubject(Request $request, $id)
    {
        $task               = Task::find($id);
        $task->task_subject = $request->subject;
        $task->save();

        return response('success', 200);
    }

    public function addNote(Request $request, $id)
    {
        Remark::create(
            [
                'taskid'      => $id,
                'remark'      => $request->note,
                'module_type' => 'task-note',
            ]
        );

        return response('success', 200);
    }

    public function addSubnote(Request $request, $id)
    {
        $remark = Remark::create(
            [
                'taskid'      => $id,
                'remark'      => $request->note,
                'module_type' => 'task-note-subnote',
            ]
        );

        $id = $remark->id;

        return response(['success' => $id], 200);
    }

    public function updateCategory(Request $request, $id)
    {
        $task           = Task::find($id);
        $task->category = $request->category;
        $task->save();

        return response('success', 200);
    }

    public function show($id)
    {
        $task = Task::find($id);

        if (! $task) {
            abort(404, 'Task is not exist');
        }

        $chatMessages = ChatMessage::where('task_id', $id)->get();
        if ((! $task->users->contains(Auth::id()) && $task->is_private == 1) || ($task->assign_from != Auth::id() && $task->contacts()->count() > 0) || (! $task->users->contains(Auth::id()) && $task->assign_from != Auth::id() && Auth::id() != 6)) {
            return redirect()->back()->withErrors('This task is private!');
        }

        $users       = User::all();
        $users_array = Helpers::getUserArray(User::all());
        $categories  = TaskCategory::attr(
            [
                'title'       => 'category',
                'class'       => 'form-control input-sm',
                'placeholder' => 'Select a Category',
                'id'          => 'task_category',
            ]
        )->selected($task->category)->renderAsDropdown();

        if (request()->has('keyword')) {
            $taskNotes = $task->notes()->orderBy('is_flagged')->where('is_hide', 0)->where('remark', 'like', '%' . request()->keyword . '%')->paginate(20);
        } else {
            $taskNotes = $task->notes()->orderBy('is_flagged')->where('is_hide', 0)->paginate(20);
        }

        $hiddenRemarks = $task->notes()->where('is_hide', 1)->get();

        return view(
            'task-module.task-show', [
                'task'          => $task,
                'users'         => $users,
                'users_array'   => $users_array,
                'categories'    => $categories,
                'taskNotes'     => $taskNotes,
                'hiddenRemarks' => $hiddenRemarks,
                'chatMessages'  => $chatMessages,
            ]
        );
    }

    public function searchTask(Request $request)
    {
        $id = $request->id;

        if ($request->input('selected_user') == '') {
            $userid = Auth::id();

            $searchMasterUserId = $userid;
            if ($request->search_master_user_id != '') {
                $searchMasterUserId = $request->search_master_user_id;
            }

            $searchSecondMasterUserId = $userid;
            if ($request->search_second_master_user_id != '') {
                $searchSecondMasterUserId = $request->search_second_master_user_id;
            }

            $userquery = ' AND (assign_from = ' . $userid . ' OR  second_master_user_id = ' . $searchSecondMasterUserId . ' OR  master_user_id = ' . $searchMasterUserId . ')';
        } else {
            $userid = $request->input('selected_user');

            $userqueryInner = '';

            if ($request->search_master_user_id != '') {
                $searchMasterUserId = $request->search_master_user_id;

                $userqueryInner .= ' OR master_user_id = ' . $searchMasterUserId;
            }

            if ($request->search_second_master_user_id != '') {
                $searchSecondMasterUserId = $request->search_second_master_user_id;

                $userqueryInner .= ' OR  second_master_user_id = ' . $searchSecondMasterUserId;
            }

            $userquery = ' AND (assign_to = ' . $userid . $userqueryInner . ')';
        }

        if (! $request->input('type') || $request->input('type') == '') {
            $type = 'pending';
        } else {
            $type = $request->input('type');
        }

        $term         = $request->term ?? '';
        $data['task'] = [];

        $search_term_suggestions                 = [];
        $search_suggestions                      = [];
        $assign_from_arr                         = [0];
        $special_task_arr                        = [0];
        $assign_to_arr                           = [0];
        $data['task']['pending']                 = [];
        $data['task']['statutory_not_completed'] = [];
        $data['task']['completed']               = [];

        if ($type == 'pending') {
            // Get Pending tasks via model
            $data['task']['pending'] = Task::getSearchedTasks('pending', $request);

            foreach ($data['task']['pending'] as $task) {
                array_push($assign_to_arr, $task->assign_to);
                array_push($assign_from_arr, $task->assign_from);
                array_push($special_task_arr, $task->id);
            }

            $user_ids_from = array_unique($assign_from_arr);
            $user_ids_to   = array_unique($assign_to_arr);

            foreach ($data['task']['pending'] as $task) {
                $search_suggestions[] = '#' . $task->id . ' ' . $task->task_subject . ' ' . $task->task_details;
                $from_exist           = in_array($task->assign_from, $user_ids_from);
                if ($from_exist) {
                    if ($task->assign_from_username) {
                        $search_term_suggestions[] = $task->assign_from_username;
                    }
                }

                $to_exist = in_array($task->assign_to, $user_ids_to);
                if ($to_exist) {
                    if ($task->assign_to_username) {
                        $search_term_suggestions[] = $task->assign_to_username;
                    }
                }
                $search_term_suggestions[] = "$task->id";
                $search_term_suggestions[] = $task->task_subject;
                $search_term_suggestions[] = $task->task_details;
            }
        }
        //task pending backup
        $usersOrderByName            = User::orderBy('name')->get();
        $data['users']               = $usersOrderByName->toArray();
        $data['daily_activity_date'] = $request->daily_activity_date ? $request->daily_activity_date : date('Y-m-d');

        // Lead user process starts
        $model_team           = \DB::table('teams')->where('user_id', auth()->user()->id)->get()->toArray();
        $team_members_array[] = auth()->user()->id;
        $team_id_array        = [];
        $isTeamLeader         = null;
        if (count($model_team) > 0) {
            $isTeamLeader = $model_team[0];
        }
        // Lead user process ends

        $selected_user = $request->input('selected_user');

        if ($isTeamLeader && ! Auth::user()->hasRole('Admin')) {
            $usrlst = [];

            for ($k = 0; $k < count($model_team); $k++) {
                $team_id_array[] = $model_team[$k]->id;
            }
            $model_user_model = \DB::table('team_user')->whereIn('team_id', $team_id_array)->get()->toArray();
            for ($m = 0; $m < count($model_user_model); $m++) {
                $team_members_array[] = $model_user_model[$m]->user_id;
            }

            foreach ($usersOrderByName as $user) {
                if (in_array($user->id, $team_members_array)) {
                    $usrlst[] = $user;
                }
            }
        } else {
            $usrlst = $usersOrderByName;
        }

        $users               = Helpers::getUserArray($usrlst);
        $all_task_categories = TaskCategory::all();
        $selected_category   = $request->category;
        if (Auth::user()->hasRole('Admin')) {
            if (empty($request->category)) {
                $selected_category = 1;
            }
        }
        $categories = $approved_categories = [];
        foreach ($all_task_categories as $category) {
            $categories[$category->id] = $category->title;

            if ($category->is_approved == 1) {
                $approved_categories[] = $category->toArray();
            }
        }

        $task_categories_dropdown = nestable($approved_categories)->attr(
            [
                'name'  => 'category',
                'class' => 'form-control input-sm',
            ]
        )->selected($selected_category)->renderAsDropdown();

        if (! empty($selected_user) && ! Helpers::getadminorsupervisor()) {
            return response()->json(['user not allowed'], 405);
        }
        $tasks_view = [];
        $priority   = \App\ErpPriority::where('model_type', '=', Task::class)->pluck('model_id')->toArray();

        $openTask = \App\Task::join('users as u', 'u.id', 'tasks.assign_to')->whereNull('tasks.is_completed')->groupBy('tasks.assign_to')->select(\DB::raw('count(u.id) as total'), 'u.name as person')->pluck('total', 'person');

        if ($request->is_statutory_query == 3) {
            $title = 'Discussion tasks';
        } else {
            $title = 'Task & Activity';
        }

        $task_statuses = TaskStatus::all();

        return view('task-module.partials.menu-search-task-ajax', compact('data', 'users', 'selected_user', 'category', 'term', 'search_suggestions', 'search_term_suggestions', 'tasks_view', 'categories', 'task_categories_dropdown', 'priority', 'openTask', 'type', 'title', 'task_statuses', 'isTeamLeader'));
    }

    public function update(Request $request, $id)
    {
        $this->validate(
            $request, [
                'assign_to.*'  => 'required_without:assign_to_contacts',
                'sending_time' => 'sometimes|nullable|date',
            ]
        );

        $task = Task::find($id);
        $task->users()->detach();
        $task->contacts()->detach();

        if ($request->assign_to) {
            foreach ($request->assign_to as $user_id) {
                $task->users()->attach([$user_id => ['type' => User::class]]);
            }

            $task->assign_to = $request->assign_to[0];
        }

        if ($request->assign_to_contacts) {
            foreach ($request->assign_to_contacts as $contact_id) {
                $task->users()->attach([$contact_id => ['type' => Contact::class]]);
            }

            $task->assign_to = $request->assign_to_contacts[0];
        }

        if ($request->sending_time) {
            $task->sending_time = $request->sending_time;
        }

        $task->save();

        return redirect()->route('task.show', $id)->withSuccess('You have successfully reassigned users!');
    }

    public function makePrivate(Request $request, $id)
    {
        $task = Task::find($id);

        if ($task->is_private == 1) {
            $task->is_private = 0;
        } else {
            $task->is_private = 1;
        }

        $task->save();

        return response()->json(
            [
                'task' => $task,
            ]
        );
    }

    public function isWatched(Request $request, $id)
    {
        $task = Task::find($id);

        if ($task->is_watched == 1) {
            $task->is_watched = 0;
        } else {
            $task->is_watched = 1;
        }

        $task->save();

        return response()->json(
            [
                'task' => $task,
            ]
        );
    }

    public function complete(Request $request, $taskid)
    {
        $task = Task::find($taskid);
        if ($request->type == 'complete') {
            if (is_null($task->is_completed)) {
                $task->is_completed = date('Y-m-d H:i:s');
            } elseif (is_null($task->is_verified)) {
                if ($task->assignedTo) {
                    if ($task->assignedTo->fixed_price_user_or_job == 1) {
                        // Fixed price task.
                        if ($task->cost == null) {
                            if ($request->ajax()) {
                                return response()->json(
                                    [
                                        'message' => 'Please provide cost for fixed price task.',
                                    ], 500
                                );
                            }

                            return redirect()->back()->with('error', 'Please provide cost for fixed price task.');
                        }
                        if (! $task->is_milestone) {
                            $payment_receipt                 = new PaymentReceipt;
                            $payment_receipt->date           = date('Y-m-d');
                            $payment_receipt->worked_minutes = $task->approximate;
                            $payment_receipt->rate_estimated = $task->cost;
                            $payment_receipt->status         = 'Pending';
                            $payment_receipt->task_id        = $task->id;
                            $payment_receipt->user_id        = $task->assign_to;
                            $payment_receipt->save();
                        }
                    }
                }
                $task->is_verified = date('Y-m-d H:i:s');
            }
        } elseif ($request->type == 'clear') {
            $task->is_completed = null;
            $task->is_verified  = null;
        }
        $task->save();

        if ($request->ajax()) {
            return response()->json(
                [
                    'task' => $task,
                ]
            );
        }

        return redirect()->back()->with('success', 'Task marked as completed.');
    }

    public function start(Request $request, $taskid)
    {
        $task = Task::find($taskid);

        $task->actual_start_date = date('Y-m-d H:i:s');
        $task->save();

        if ($request->ajax()) {
            return response()->json(
                [
                    'task' => $task,
                ]
            );
        }

        return redirect()->back()->with('success', 'Task started.');
    }

    public function statutoryComplete($taskid)
    {
        $task                  = SatutoryTask::find($taskid);
        $task->completion_date = date('Y-m-d H:i:s');

        if ($task->assign_to == Auth::id()) {
            $task->save();
        }

        $message = 'Statutory Task Completed: ' . $task->task_details;

        return redirect()->back()->with('success', 'Statutory Task marked as completed.');
    }

    public function addRemark(Request $request)
    {
        $remark     = $request->input('remark');
        $id         = $request->input('id');
        $created_at = date('Y-m-d H:i:s');
        $update_at  = date('Y-m-d H:i:s');
        if ($request->module_type == 'document') {
            $remark_entry = DocumentRemark::create(
                [
                    'document_id' => $id,
                    'remark'      => $remark,
                    'module_type' => $request->module_type,
                    'user_name'   => $request->user_name ? $request->user_name : Auth::user()->name,
                ]
            );
        } else {
            $remark_entry = Remark::create(
                [
                    'taskid'      => $id,
                    'remark'      => $remark,
                    'module_type' => $request->module_type,
                    'user_name'   => $request->user_name ? $request->user_name : Auth::user()->name,
                ]
            );
        }

        return response()->json(['remark' => $remark], 200);
    }

    public function list(Request $request)
    {
        $pending_tasks   = Task::where('is_statutory', 0)->whereNull('is_completed');
        $developer_tasks = DeveloperTask::orderBy('id', 'DESC');

        if (! Auth::user()->hasRole('Admin')) {
            $pending_tasks   = $pending_tasks->where('assign_to', Auth::id());
            $developer_tasks = $developer_tasks->where('assigned_to', Auth::id());
        }
        if ($request->term && $request->term != null) {
            $pending_tasks   = $pending_tasks->where('id', 'LIKE', "%$request->term%");
            $developer_tasks = $developer_tasks->where('id', 'LIKE', "%$request->term%");
        }

        if ($request->task_subject && $request->task_subject != null) {
            $pending_tasks   = $pending_tasks->where('task_subject', 'LIKE', "%$request->task_subject%");
            $developer_tasks = $developer_tasks->where('subject', 'LIKE', "%$request->task_subject%");
        }

        if (is_array($request->user) && $request->user[0] != null) {
            $pending_tasks   = $pending_tasks->whereIn('assign_to', $request->user);
            $developer_tasks = $developer_tasks->whereIn('assigned_to', $request->user);
        }

        if ($request->get('is-filter-created', null) === 'on' && $request->get('start_date', null) && $request->get('end_date', null)) {
            // dd($request->start_date,$request->get('end_date', null));
            $pending_tasks   = $pending_tasks->where('tasks.created_at', '>=', $request->start_date);
            $developer_tasks = $developer_tasks->where('developer_tasks.created_at', '>=', $request->start_date);

            $pending_tasks   = $pending_tasks->where('tasks.created_at', '<=', $request->end_date);
            $developer_tasks = $developer_tasks->where('developer_tasks.created_at', '<=', $request->end_date);
        }

        if ($request->get('is-filter-tracked', null) === 'on' && $request->get('start_date_tracked', null) && $request->get('end_date_tracked', null)) {
            $pending_tasks   = $pending_tasks->where('tasks.m_start_date', '>=', $request->start_date_tracked);
            $developer_tasks = $developer_tasks->where('developer_tasks.m_start_date', '>=', $request->start_date_tracked);

            $pending_tasks   = $pending_tasks->where('tasks.m_start_date', '<=', $request->end_date_tracked);
            $developer_tasks = $developer_tasks->where('developer_tasks.m_start_date', '<=', $request->end_date_tracked);
        }

        $users        = Helpers::getUserArray(User::all());
        $user         = $request->user ?? [];
        $date         = $request->date ?? '';
        $taskstatus   = TaskStatus::get();
        $isTeamLeader = \App\Team::where('user_id', auth()->user()->id)->first();

        if ($request->get('export_excel', null)) {
            return $this->exportExcel($pending_tasks, $developer_tasks);
        }

        $pending_tasks   = $pending_tasks->orderBy('id', 'DESC')->latest()->paginate(Setting::get('pagination'));
        $developer_tasks = $developer_tasks->latest()->paginate(Setting::get('pagination'));

        return view(
            'task-module.list', [
                'pending_tasks'   => $pending_tasks,
                'taskstatus'      => $taskstatus,
                'isTeamLeader'    => $isTeamLeader,
                'users'           => $users,
                'user'            => $user,
                'date'            => $date,
                'developer_tasks' => $developer_tasks,
                'start_date'      => $request->get('start_date', ''),
                'end_date'        => $request->get('end_date', ''),
            ]
        );
    }

    public function exportExcel($pendingTasks, $developerTasks)
    {
        return Excel::download(new AllTasksExcelExport($pendingTasks, $developerTasks), 'all_tasks.xlsx');
    }

    public function getremark(Request $request)
    {
        $id = $request->input('id');

        $task = Task::find($id);

        echo $task->remark;
    }

    public function deleteTask(Request $request)
    {
        $id   = $request->input('id');
        $task = Task::find($id);

        if ($task) {
            $task->remark = $request->input('comment');
            $task->save();

            $task->delete();
        }

        if ($request->ajax()) {
            return response()->json(['code' => 200]);
        }
    }

    public function archiveTask($id)
    {
        $task = Task::find($id);

        $task->delete();

        if ($request->ajax()) {
            return response('success');
        }

        return redirect('/');
    }

    public function archiveTaskRemark($id)
    {
        $task            = Remark::find($id);
        $remark          = $task->remark;
        $task->delete_at = now();
        $task->update();

        return response(['success' => $remark], 200);
    }

    public function deleteStatutoryTask(Request $request)
    {
        $id   = $request->input('id');
        $task = SatutoryTask::find($id);
        $task->delete();

        return redirect()->back();
    }

    public function exportTask(Request $request)
    {
        $users = $request->input('selected_user');
        $from  = $request->input('range_start') . ' 00:00:00.000000';
        $to    = $request->input('range_end') . ' 23:59:59.000000';

        $tasks = (new Task())->newQuery()->withTrashed()->whereBetween(
            'created_at', [
                $from,
                $to,
            ]
        )->where('assign_from', '!=', 0)->where('assign_to', '!=', 0);

        if (! empty($users)) {
            $tasks = $tasks->whereIn('assign_to', $users);
        }

        $tasks_list = $tasks->get()->toArray();
        $tasks_csv  = [];
        $userList   = Helpers::getUserArray(User::all());

        for ($i = 0; $i < count($tasks_list); $i++) {
            $task_csv                    = [];
            $task_csv['id']              = $tasks_list[$i]['id'];
            $task_csv['SrNo']            = $i + 1;
            $task_csv['assign_from']     = $userList[$tasks_list[$i]['assign_from']];
            $task_csv['assign_to']       = $userList[$tasks_list[$i]['assign_to']];
            $task_csv['type']            = $tasks_list[$i]['is_statutory'] == 1 ? 'Statutory' : 'Other';
            $task_csv['task_subject']    = $tasks_list[$i]['task_subject'];
            $task_csv['task_details']    = $tasks_list[$i]['task_details'];
            $task_csv['completion_date'] = $tasks_list[$i]['completion_date'];
            $task_csv['remark']          = $tasks_list[$i]['remark'];
            $task_csv['completed_on']    = $tasks_list[$i]['is_completed'];
            $task_csv['created_on']      = $tasks_list[$i]['created_at'];

            array_push($tasks_csv, $task_csv);
        }

        return view('task-module.export')->withTasks($tasks_csv);
    }

    public function outputCsv($fileName, $assocDataArray)
    {
        header('Pragma: public');
        header('Expires: 0');
        header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
        header('Cache-Control: private', false);
        header('Content-Type: text/csv');
        header('Content-Disposition: attachment;filename=' . $fileName);
        if (isset($assocDataArray['0'])) {
            $fp = fopen('php://output', 'w');
            fputcsv($fp, array_keys($assocDataArray['0']));
            foreach ($assocDataArray as $values) {
                fputcsv($fp, $values);
            }
            fclose($fp);
        }
    }

    public static function getClasses($task)
    {
        $classes = ' ';
        $classes .= ' ' . ((empty($task) && $task->assign_from == Auth::user()->id) ? 'mytask' : '') . ' ';
        $classes .= ' ' . ((empty($task) && time() > strtotime($task->completion_date . ' 23:59:59')) ? 'isOverdue' : '') . ' ';

        $task_status = empty($task) ? Helpers::statusClass($task->assign_status) : '';

        $classes .= $task_status;

        return $classes;
    }

    public function recurringTask()
    {
        $statutory_tasks = SatutoryTask::all()->toArray();

        foreach ($statutory_tasks as $statutory_task) {
            switch ($statutory_task['recurring_type']) {
                case 'EveryDay':
                    self::createTasksFromSatutary($statutory_task);
                    break;

                case 'EveryWeek':
                    if ($statutory_task['recurring_day'] == date('D')) {
                        self::createTasksFromSatutary($statutory_task);
                    }
                    break;

                case 'EveryMonth':
                    if ($statutory_task['recurring_day'] == date('d')) {
                        self::createTasksFromSatutary($statutory_task);
                    }
                    break;

                case 'EveryYear':
                    $dayNdate = date('d-n', strtotime($statutory_task['recurring_day']));
                    if ($dayNdate == date('d-n')) {
                        self::createTasksFromSatutary($statutory_task);
                    }
                    break;
            }
        }
    }

    public static function createTasksFromSatutary($statutory_task)
    {
        $statutory_task['is_statutory'] = 1;
        $statutory_task['statutory_id'] = $statutory_task['id'];
        $task                           = Task::create($statutory_task);
    }

    public function getTaskRemark(Request $request)
    {
        $id = $request->input('id');

        if (is_null($request->module_type)) {
            $remark = \App\Task::getremarks($id);
        } else {
            $remark = Remark::where('module_type', $request->module_type)->where('taskid', $id)->get();
        }

        return response()->json($remark, 200);
    }

    public function addWhatsAppGroup(Request $request)
    {
        $whatsapp_number = '971562744570';
        $task            = Task::findorfail($request->id);

        // Yogesh Sir Number
        $admin_number  = User::findorfail(6);
        $assigned_from = Helpers::getUserArray(User::where('id', $task->assign_from)->get());
        $assigned_to   = Helpers::getUserArray(User::where('id', $task->assign_to)->get());
        $task_id       = $task->id;

        //Check if task id is present in Whats App Group
        $group = WhatsAppGroup::where('task_id', $task_id)->first();

        if ($group == null) {
            //First Create Group Using Admin id
            $phone  = $admin_number->phone;
            $result = app(\App\Http\Controllers\WhatsAppController::class)->createGroup($task_id, '', $phone, '', $whatsapp_number);
            if (isset($result['chatId']) && $result['chatId'] != null) {
                $task_id = $task_id;
                $chatId  = $result['chatId'];
                //Create Group
                $group           = new WhatsAppGroup;
                $group->task_id  = $task_id;
                $group->group_id = $chatId;
                $group->save();
                //Save Whats App Group With Reference To Group ID
                $group_number           = new WhatsAppGroupNumber;
                $group_number->group_id = $group->id;
                $group_number->user_id  = $admin_number->id;
                $group_number->save();
                //Chat Message
                $params['task_id']  = $task_id;
                $params['group_id'] = $group->id;
                ChatMessage::create($params);
            } else {
                $group           = new WhatsAppGroup;
                $group->task_id  = $task_id;
                $group->group_id = null;
                $group->save();

                $group_number           = new WhatsAppGroupNumber;
                $group_number->group_id = $group->id;
                $group_number->user_id  = $admin_number->id;
                $group_number->save();

                $params['task_id']      = $task_id;
                $params['group_id']     = $group->id;
                $params['error_status'] = 1;
                ChatMessage::create($params);
            }
        }

        //iF assigned from is different from Yogesh Sir
        if ($admin_number->id != array_keys($assigned_from)[0]) {
            $request->request->add(
                [
                    'group_id'        => $group->id,
                    'user_id'         => array_keys($assigned_from),
                    'task_id'         => $task->id,
                    'whatsapp_number' => $whatsapp_number,
                ]
            );

            $this->addGroupParticipant(request());
        }

        //Add Assigned To Into Whats App Group
        if (array_keys($assigned_to)[0] != null) {
            $request->request->add(
                [
                    'group_id'        => $group->id,
                    'user_id'         => array_keys($assigned_to),
                    'task_id'         => $task->id,
                    'whatsapp_number' => $whatsapp_number,
                ]
            );

            $this->addGroupParticipant(request());
        }

        return response()->json(['group_id' => $group->id]);
    }

    public function addGroupParticipant(Request $request)
    {
        $whatsapp_number = '971562744570';
        //Now Add Participant In the Group

        foreach ($request->user_id as $key => $value) {
            $check = WhatsAppGroupNumber::where('group_id', $request->group_id)->where('user_id', $value)->first();
            if ($check == null) {
                $user   = User::findorfail($value);
                $group  = WhatsAppGroup::where('task_id', $request->task_id)->first();
                $phone  = $user->phone;
                $result = app(\App\Http\Controllers\WhatsAppController::class)->createGroup('', $group->group_id, $phone, '', $whatsapp_number);
                if (isset($result['add']) && $result['add'] != null) {
                    $task_id = $request->task_id;

                    $group_number           = new WhatsAppGroupNumber;
                    $group_number->group_id = $request->group_id;
                    $group_number->user_id  = $user->id;
                    $group_number->save();
                    $params['user_id']  = $user->id;
                    $params['task_id']  = $task_id;
                    $params['group_id'] = $request->group_id;
                    ChatMessage::create($params);
                } else {
                    $task_id = $request->task_id;

                    $group_number           = new WhatsAppGroupNumber;
                    $group_number->group_id = $request->group_id;
                    $group_number->user_id  = $user->id;
                    $group_number->save();
                    $params['user_id']      = $user->id;
                    $params['task_id']      = $task_id;
                    $params['group_id']     = $request->group_id;
                    $params['error_status'] = 1;
                    ChatMessage::create($params);
                }
            }
        }

        return redirect()->back()->with('message', 'Participants Added To Group');
    }

    public function getDetails(Request $request)
    {
        $task = \App\Task::where('id', $request->get('task_id', 0))->first();

        if ($task) {
            return response()->json(
                [
                    'code' => 200,
                    'data' => $task,
                ]
            );
        }

        return response()->json(
            [
                'code'    => 500,
                'message' => 'Sorry, no task found',
            ]
        );
    }

    public function saveNotes(Request $request)
    {
        $task = \App\Task::where('id', $request->get('task_id', 0))->first();

        if ($task) {
            if ($task->is_statutory == 3) {
                foreach ($request->note as $note) {
                    if ($note != null) {
                        Remark::create(
                            [
                                'taskid'      => $task->id,
                                'remark'      => $note,
                                'module_type' => 'task-note',
                            ]
                        );
                    }
                }
            }

            return response()->json(
                [
                    'code'    => 200,
                    'data'    => $task,
                    'message' => 'Note added!',
                ]
            );
        }

        return response()->json(
            [
                'code'    => 500,
                'message' => 'Sorry, no task found',
            ]
        );
    }

    public function getWebsiteList(Request $request)
    {
        if ($request->id[0] == 'all') {
            $websiteData = StoreWebsite::all();
        } else {
            $websiteData = StoreWebsite::whereIn('id', $request->id)->get();
        }
        $websiteCheckbox = '';
        foreach ($websiteData as $website) {
            $websiteCheckbox .= '<div class="col-4 py-1"><div style="float: left;height: auto;margin-right: 6px;"><input style="height:13px;" type="checkbox" name="website_name[' . $website->id . ']" value="' . $website->title . ' - ' . $request->cat_title . '"/></div> <div class=""  style="float: left;height: auto;margin-right: 6px;overflow-wrap: anywhere;width: 80%;">' . $website->website . '</div></div>';
        }

        return response()->json(
            [
                'code'    => 200,
                'data'    => $websiteCheckbox,
                'message' => 'List of website!',
            ]
        );
    }

    public function createMultipleTaskFromSortcutBugtrack(Request $request)
    {
        try {
            $this->validate(
                $request, [
                    'task_subject'      => 'required',
                    'task_detail'       => 'required',
                    'task_asssigned_to' => 'required_without:assign_to_contacts',
                ]
            );
            $bug_list_ids      = explode(',', $request->task_bug_ids);
            $model_bug_tracker = BugTracker::whereIn('id', $bug_list_ids)->get()->toArray();
            $bug_tracker_array = [];
            $postfix_task_bug  = '';
            $model_name        = 0;
            for ($p = 0; $p < count($model_bug_tracker); $p++) {
                $bug_primary_id                     = $model_bug_tracker[$p]['id'];
                $bug_tracker_array[$bug_primary_id] = $model_bug_tracker[$p];
                $model_name                         = $model_bug_tracker[0]['module_id'];
            }

            foreach ($bug_tracker_array as $bug_key => $bug_tracker_ele) {
                $postfix_task_bug .= '<br/>' . $bug_key . ' :Step to Reproduce : <br/>' . $bug_tracker_ele['step_to_reproduce'];
                $postfix_task_bug .= '<br/>Expected Result : <br/>' . $bug_tracker_ele['expected_result'];
                $postfix_task_bug .= '<br/>Remark : <br/>' . $bug_tracker_ele['remark'];
            }

            $model_site_dev_category    = SiteDevelopmentCategory::where('title', $model_name)->get()->toArray();
            $site_development_module_id = 0;
            if (count($model_site_dev_category) > 0 && $model_site_dev_category[0]['id'] > 0) {
                $site_development_module_id = $model_site_dev_category[0]['id'];
            }

            $website_multiple_arrays = array_keys($request->website_name);

            for ($m = 0; $m < count($website_multiple_arrays); $m++) {
                $data_site['site_development_category_id']        = $site_development_module_id;
                $data_site['bug_id']                              = $request->site_id;
                $data_site['website_id']                          = $website_multiple_arrays[$m];
                $data_site['created_at']                          = date('Y-m-d H:i:s');
                $data_site['site_development_master_category_id'] = 4;

                $site_devlopment_exist        = SiteDevelopment::where('bug_id', $request->site_id)->where('website_id', $website_multiple_arrays[$m])->get()->toArray();
                $site_developement_primary_id = 0;
                if (count($site_devlopment_exist) == 0) {
                    $res_site_dev                 = SiteDevelopment::create($data_site);
                    $site_developement_primary_id = $res_site_dev->id;
                } else {
                    if (isset($site_devlopment_exist[0]['id']) && $site_devlopment_exist[0]['id'] > 0) {
                        $site_developement_primary_id = $site_devlopment_exist[0]['id'];
                    }
                }
            }

            $site_dev_category_id = \App\SiteDevelopment::where('id', $site_developement_primary_id)->select('site_development_category_id')->first();
            $cat_id               = $site_dev_category_id->id;
            if (is_array($request->website_name)) {
                $sub_array = [];
                foreach ($request->website_name as $key => $website) {
                    $sub_array[] = $website;
                }
                $site_developement_id = \App\SiteDevelopment::select('id')->where(
                    [
                        'site_development_category_id' => $site_dev_category_id->site_development_category_id,
                        'website_id'                   => $website_multiple_arrays[0], //$key
                    ]
                )->first();
                if (isset($site_developement_id->id)) {
                    $website               = implode(',', $sub_array);
                    $request->task_subject = $website;
                    $message               = '';
                    $assignedUserId        = 0;
                    $taskType              = $request->task_type;
                    $data                  = $request->except('_token');
                    $data['site_id']       = 0;
                    $data['bug_id']        = $request->site_id;
                    $data['task_subject']  = $website;
                    $data['task_bug_ids']  = $request->task_bug_ids;
                    $data['task_detail'] .= $postfix_task_bug;
                    if ($taskType == '4' || $taskType == '5' || $taskType == '6') {
                        $data = [];
                        if (is_array($request->task_asssigned_to)) {
                            $data['assigned_to'] = $request->task_asssigned_to[0];
                        } else {
                            $data['assigned_to'] = $request->task_asssigned_to;
                        }
                        $data['user_id']      = loginId();
                        $data['subject']      = $website;
                        $data['task']         = $data['task_detail'];
                        $data['task_type_id'] = 1;
                        $data['cost']         = $request->get('cost', 0);
                        $data['status']       = DeveloperTask::DEV_TASK_STATUS_PLANNED;
                        $data['created_by']   = loginId();
                        if ($taskType == 5 || $taskType == 6) {
                            $data['task_type_id'] = 3;
                        }

                        $data['subject']              = $website;
                        $data['task_type']            = $taskType;
                        $data['task']                 = $data['task_detail'];
                        $data['task_type_id']         = 1;
                        $data['user_feedback_cat_id'] = $request->get('user_feedback_cat_id');
                        $data['site_developement_id'] = 0;
                        $data['cost']                 = $request->get('cost', 0);
                        $data['status']               = 'In Progress';
                        $data['created_by']           = Auth::id();

                        $task = $this->taskCreateMaster($data);

                        if ($task) {
                            if (count($bug_list_ids) > 0) {
                                $task_asssigned_user_to = $data['assigned_to'];
                                for ($k = 0; $k < count($bug_list_ids); $k++) {
                                    $bug_tacker_id               = $bug_list_ids[$k];
                                    $bug_tracking                = BugTracker::find($bug_tacker_id);
                                    $bug_tracking->bug_status_id = 6;
                                    $bug_tracking->assign_to     = $task_asssigned_user_to;
                                    $bug_tracking->updated_at    = date('Y-m-d H:i:s');
                                    $bug_tracking->updated_by    = Auth::user()->name;
                                    $bug_tracking->save();
                                }
                            }
                        }

                        if (request('need_review_task')) {
                            $data['parent_review_task_id'] = $task->id;
                            $reviewTask                    = $cntrl->developerTaskCreate($data);
                        }
                    } else {
                        $data['site_developement_id'] = 0;
                        $data['task_subject']         = $website;
                        $data['task_type']            = $taskType;
                        $data['assign_from']          = loginId();
                        $data['status']               = 5;
                        $data['customer_id']          = $data['customer_id'] ?? null;
                        $data['cost']                 = $data['cost'] ?? null;

                        $task = $this->taskCreateMaster($data);

                        if ($task) {
                            if (count($bug_list_ids) > 0) {
                                if (is_array($request->task_asssigned_to)) {
                                    $data['assigned_to'] = $request->task_asssigned_to[0];
                                } else {
                                    $data['assigned_to'] = $request->task_asssigned_to;
                                }
                                $task_asssigned_user_to = $data['assigned_to'];
                                for ($k = 0; $k < count($bug_list_ids); $k++) {
                                    $bug_tacker_id               = $bug_list_ids[$k];
                                    $bug_tracking                = BugTracker::find($bug_tacker_id);
                                    $bug_tracking->bug_status_id = 6;
                                    $bug_tracking->assign_to     = $task_asssigned_user_to;
                                    $bug_tracking->updated_at    = date('Y-m-d H:i:s');
                                    $bug_tracking->updated_by    = Auth::user()->name;
                                    $bug_tracking->save();
                                }
                            }
                        }

                        if (request('need_review_task')) {
                            $data['parent_review_task_id'] = $task->id;
                            $reviewTask                    = $this->taskCreateMaster($data);
                        }
                    }
                }
            } else {
                $this->createTaskFromSortcut($request);

                if (count($bug_list_ids) > 0) {
                    if (is_array($request->task_asssigned_to)) {
                        $task_asssigned_user_to = $request->task_asssigned_to[0];
                    } else {
                        $task_asssigned_user_to = $request->task_asssigned_to;
                    }
                    for ($k = 0; $k < count($bug_list_ids); $k++) {
                        $bug_tacker_id               = $bug_list_ids[$k];
                        $bug_tracking                = BugTracker::find($bug_tacker_id);
                        $bug_tracking->bug_status_id = 6;
                        if ($task_asssigned_user_to > 0) {
                            $bug_tracking->assign_to = $task_asssigned_user_to;
                        }
                        $bug_tracking->updated_at = date('Y-m-d H:i:s');
                        $bug_tracking->updated_by = Auth::user()->name;
                        $bug_tracking->save();
                    }
                }
            }

            return response()->json(['code' => 200, 'data' => [], 'message' => 'Your quick task has been created!']);
        } catch (Exception $e) {
            return response()->json(['code' => 500, 'message' => $e->getMessage()]);
        }
    }

    public function createMultipleTaskFromSortcut(Request $request)
    {
        try {
            $this->validate(
                $request, [
                    'task_subject'      => 'required',
                    'task_detail'       => 'required',
                    'task_asssigned_to' => 'required_without:assign_to_contacts',
                ]
            );
            $site_dev_category_id = \App\SiteDevelopment::where('id', $request->site_id)->select('site_development_category_id')->first();
            $cat_id               = $site_dev_category_id->id;
            if (is_array($request->website_name)) {
                foreach ($request->website_name as $key => $website) {
                    $site_developement_id = \App\SiteDevelopment::select('id')->where(
                        [
                            'site_development_category_id' => $site_dev_category_id->site_development_category_id,
                            'website_id'                   => $key,
                        ]
                    )->first();
                    if (isset($site_developement_id->id)) {
                        $request->task_subject = $website;
                        $message               = '';
                        $assignedUserId        = 0;
                        $taskType              = request('task_type');
                        $data                  = $request->except('_token');
                        $data['site_id']       = $site_developement_id->id;
                        $data['task_subject']  = $website;
                        if ($taskType == '4' || $taskType == '5' || $taskType == '6') {
                            $data = [];
                            if (is_array($request->task_asssigned_to)) {
                                $data['assigned_to'] = $request->task_asssigned_to[0];
                            } else {
                                $data['assigned_to'] = $request->task_asssigned_to;
                            }
                            $data['user_id']              = loginId();
                            $data['subject']              = $website;
                            $data['task']                 = $request->get('task_detail');
                            $data['task_type_id']         = 1;
                            $data['site_developement_id'] = $request->get('site_id');
                            $data['cost']                 = $request->get('cost', 0);
                            $data['status']               = DeveloperTask::DEV_TASK_STATUS_PLANNED;
                            $data['created_by']           = loginId();
                            if ($taskType == 5 || $taskType == 6) {
                                $data['task_type_id'] = 3;
                            }

                            $data['subject']              = $website;
                            $data['task']                 = $request->get('task_detail');
                            $data['task_type_id']         = 1;
                            $data['user_feedback_cat_id'] = $request->get('user_feedback_cat_id');
                            $data['site_developement_id'] = $request->get('site_id');
                            $data['cost']                 = $request->get('cost', 0);
                            $data['status']               = 'In Progress';
                            $data['created_by']           = Auth::id();

                            $task = $this->developerTaskCreate($data);

                            if (request('need_review_task')) {
                                $data['parent_review_task_id'] = $task->id;
                                $reviewTask                    = $cntrl->developerTaskCreate($data);
                            }
                        } else {
                            $data['site_developement_id'] = $site_developement_id->id;
                            $data['task_subject']         = $website;
                            $data['task_type']            = $data['task_type'] ?? null;
                            $data['assign_from']          = loginId();
                            $data['status']               = 5; // Planned - As per DEVTASK-22162
                            $data['customer_id']          = $data['customer_id'] ?? null;
                            $data['cost']                 = $data['cost'] ?? null;

                            $task = $this->taskCreateMaster($data);

                            if (request('need_review_task')) {
                                $data['parent_review_task_id'] = $task->id;
                                $reviewTask                    = $this->taskCreateMaster($data);
                            }
                        }
                    }
                }
            } else {
                $this->createTaskFromSortcut($request);
            }

            return response()->json(
                [
                    'code'    => 200,
                    'data'    => [],
                    'message' => 'Your quick task has been created!',
                ]
            );
        } catch (Exception $e) {
            return response()->json(
                [
                    'code'    => 500,
                    'message' => $e->getMessage(),
                ]
            );
        }
    }

    public function createMultipleTaskFromSortcutPostman(Request $request)
    {
        try {
            $this->validate(
                $request, [
                    'task_subject'      => 'required',
                    'task_detail'       => 'required',
                    'task_asssigned_to' => 'required_without:assign_to_contacts',
                ]
            );

            $this->createTaskFromSortcut($request);

            return response()->json(
                [
                    'code'    => 200,
                    'data'    => [],
                    'message' => 'Your quick task has been created!',
                ]
            );
        } catch (Exception $e) {
            return response()->json(
                [
                    'code'    => 500,
                    'message' => $e->getMessage(),
                ]
            );
        }
    }

    public function createMultipleTaskFromSortcutDevOops(Request $request)
    {
        try {
            $this->validate(
                $request, [
                    'task_subject'      => 'required',
                    'task_detail'       => 'required',
                    'task_asssigned_to' => 'required_without:assign_to_contacts',
                ]
            );

            $this->createTaskFromSortcut($request);

            return response()->json(
                [
                    'code'    => 200,
                    'data'    => [],
                    'message' => 'Your quick task has been created!',
                ]
            );
        } catch (Exception $e) {
            return response()->json(
                [
                    'code'    => 500,
                    'message' => $e->getMessage(),
                ]
            );
        }
    }

    public function createMultipleTaskFromSortcutUserSchedules(Request $request)
    {
        try {
            $this->validate(
                $request, [
                    'task_subject'      => 'required',
                    'task_detail'       => 'required',
                    'task_asssigned_to' => 'required_without:assign_to_contacts',
                ]
            );

            $this->createTaskFromSortcut($request);

            return response()->json(
                [
                    'code'    => 200,
                    'data'    => [],
                    'message' => 'Your quick task has been created!',
                ]
            );
        } catch (Exception $e) {
            return response()->json(
                [
                    'code'    => 500,
                    'message' => $e->getMessage(),
                ]
            );
        }
    }

    public function createMultipleTaskFromScriptDocument(Request $request)
    {
        try {
            $this->validate(
                $request, [
                    'task_subject'      => 'required',
                    'task_detail'       => 'required',
                    'task_asssigned_to' => 'required_without:assign_to_contacts',
                ]
            );

            $this->createTaskFromSortcut($request);

            return response()->json(
                [
                    'code'    => 200,
                    'data'    => [],
                    'message' => 'Your quick task has been created!',
                ]
            );
        } catch (Exception $e) {
            return response()->json(
                [
                    'code'    => 500,
                    'message' => $e->getMessage(),
                ]
            );
        }
    }

    public function createMultipleTaskFromSortcutMagentoProblems(Request $request)
    {
        try {
            $this->validate(
                $request, [
                    'task_subject'      => 'required',
                    'task_detail'       => 'required',
                    'task_asssigned_to' => 'required_without:assign_to_contacts',
                ]
            );

            $this->createTaskFromSortcut($request);

            return response()->json(
                [
                    'code'    => 200,
                    'data'    => [],
                    'message' => 'Your quick task has been created!',
                ]
            );
        } catch (Exception $e) {
            return response()->json(
                [
                    'code'    => 500,
                    'message' => $e->getMessage(),
                ]
            );
        }
    }

    public function createMultipleTaskFromSortcutWebsiteLogs(Request $request)
    {
        try {
            $this->validate(
                $request, [
                    'task_subject'      => 'required',
                    'task_detail'       => 'required',
                    'task_asssigned_to' => 'required_without:assign_to_contacts',
                ]
            );

            $this->createTaskFromSortcut($request);

            return response()->json(
                [
                    'code'    => 200,
                    'data'    => [],
                    'message' => 'Your quick task has been created!',
                ]
            );
        } catch (Exception $e) {
            return response()->json(
                [
                    'code'    => 500,
                    'message' => $e->getMessage(),
                ]
            );
        }
    }

    public function createMultipleTaskFromSortcutSentry(Request $request)
    {
        try {
            $this->validate(
                $request, [
                    'task_subject'      => 'required',
                    'task_detail'       => 'required',
                    'task_asssigned_to' => 'required_without:assign_to_contacts',
                ]
            );

            $this->createTaskFromSortcut($request);

            return response()->json(
                [
                    'code'    => 200,
                    'data'    => [],
                    'message' => 'Your quick task has been created!',
                ]
            );
        } catch (Exception $e) {
            return response()->json(
                [
                    'code'    => 500,
                    'message' => $e->getMessage(),
                ]
            );
        }
    }

    public function createMultipleTaskFromSortcutSonar(Request $request)
    {
        try {
            $this->validate(
                $request, [
                    'task_subject'      => 'required',
                    'task_detail'       => 'required',
                    'task_asssigned_to' => 'required_without:assign_to_contacts',
                ]
            );

            $this->createTaskFromSortcut($request);

            return response()->json(
                [
                    'code'    => 200,
                    'data'    => [],
                    'message' => 'Your quick task has been created!',
                ]
            );
        } catch (Exception $e) {
            return response()->json(
                [
                    'code'    => 500,
                    'message' => $e->getMessage(),
                ]
            );
        }
    }

    public function createTaskFromSortcut(Request $request)
    {
        $this->validate(
            $request, [
                'task_subject'      => 'required',
                'task_detail'       => 'required',
                'task_asssigned_to' => 'required_without:assign_to_contacts',
            ]
        );

        $message        = '';
        $assignedUserId = 0;
        $taskType       = request('task_type');
        $data           = $request->except('_token');
        $quick_task     = request('quick_task');

        if ($taskType == '4' || $taskType == '5' || $taskType == '6' || ($taskType == '0' && $quick_task == '1')) {
            $data = [];
            if (is_array($request->task_asssigned_to)) {
                $data['assigned_to'] = $request->task_asssigned_to[0];
            } else {
                $data['assigned_to'] = $request->task_asssigned_to;
            }
            $data['user_id']              = loginId();
            $data['subject']              = $request->get('task_subject');
            $data['task']                 = $request->get('task_detail');
            $data['task_type_id']         = 1;
            $data['site_developement_id'] = $request->get('site_id');
            $data['cost']                 = $request->get('cost', 0);
            $data['status']               = DeveloperTask::DEV_TASK_STATUS_PLANNED;
            $data['created_by']           = loginId();
            if ($taskType == 5 || $taskType == 6) {
                $data['task_type_id'] = 3;
            }

            $data['subject']                 = $request->get('task_subject');
            $data['task']                    = $request->get('task_detail');
            $data['task_type_id']            = 1;
            $data['user_feedback_cat_id']    = $request->get('user_feedback_vendor_id') ?? 0;
            $data['user_feedback_vendor_id'] = $request->get('user_feedback_cat_id') ?? 0;
            $data['site_developement_id']    = $request->get('site_id');
            $data['cost']                    = $request->get('cost', 0);
            $data['status']                  = 'In Progress';
            $data['created_by']              = Auth::id();

            $task = $this->developerTaskCreate($data);

            if (request('need_review_task')) {
                $data['parent_review_task_id'] = $task->id;
                $reviewTask                    = $cntrl->developerTaskCreate($data);
            }
        } else {
            $data['task_type']   = $data['task_type'] ?? null;
            $data['assign_from'] = loginId();
            $data['status']      = 5; // Planned - As per DEVTASK-22162
            $data['customer_id'] = $data['customer_id'] ?? null;
            $data['cost']        = $data['cost'] ?? null;

            $task = $this->taskCreateMaster($data);

            if (request('need_review_task')) {
                $data['parent_review_task_id'] = $task->id;
                $reviewTask                    = $this->taskCreateMaster($data);
            }
        }

        return response()->json(
            [
                'code'    => 200,
                'data'    => [],
                'message' => 'Your quick task has been created!',
            ]
        );
    }

    public function taskCreateMaster($data)
    {
        if ($data['task_type'] ?? null) {
            $data['is_statutory'] = $data['task_type'];
        }
        if ($data['task_detail'] ?? null) {
            $data['task_details'] = $data['task_detail'];
        }
        if ($data['site_id'] ?? null) {
            $data['site_developement_id'] = $data['site_id'];
        }
        if ($data['category_id'] ?? null) {
            $data['category'] = $data['category_id'];
        }

        if ($temp = $data['task_asssigned_to'] ?? null) {
            $data['assign_to'] = is_array($temp) ? $temp[0] : $temp;
        }

        if ($data['task_type'] != 'note-task') {
            if (! isset($data['assign_to'])) {
                if ($temp = $data['assign_to_contacts'] ?? null) {
                    $data['assign_to'] = is_array($temp) ? $temp[0] : $temp;
                }
            }
        }

        if ($data['task_type'] == 'quick_task') {
            $data['is_statutory'] = 0;
            $data['category']     = 6;
        }

        if ($data['parent_review_task_id'] ?? 0) {
            $data['task_subject'] = $data['task_subject'] . ' - #REVIEW_TASK';
            $data['task_details'] = $data['task_details'] . ' - #REVIEW_TASK';
        }

        $newCreated = 0;

        // Discussion task
        if ($data['task_type'] == 3) {
            $task = Task::find($data['task_subject']);
            if (! $task) {
                $task       = Task::create($data);
                $newCreated = 1;
            }

            $remarks = $task->task_subject;
            $exist   = Remark::where('taskid', $task->id)->where('remark', $remarks)->where('module_type', 'task-note')->first();
            if (! $exist) {
                Remark::create(
                    [
                        'taskid'      => $task->id,
                        'remark'      => $remarks,
                        'module_type' => 'task-note',
                    ]
                );
            }
            if ($data['note'] ?? []) {
                $data['note'] = is_array($data['note']) ? $data['note'] : [$data['note']];
                foreach ($data['note'] as $note) {
                    if (trim($note)) {
                        Remark::create(
                            [
                                'taskid'      => $task->id,
                                'remark'      => $note,
                                'module_type' => 'task-note',
                            ]
                        );
                    }
                }
            }
        } else {
            $task       = Task::create($data);
            $newCreated = 1;
        }

        if ($newCreated) {
            if (isset($data['task_for']) && $data['task_for'] == 'time_doctor') {
                $this->timeDoctorActions('TASK', $task, $data['time_doctor_project'], $data['time_doctor_account'], $data['assign_to']);
            } else {
                $this->hubstaffActions('TASK', $task);
            }
        }

        if ($task->is_statutory != 1) {
            $message = '#' . $task->id . '. ' . $task->task_subject . '. ' . $task->task_details;
        } else {
            $message = $task->task_subject . '. ' . $task->task_details;
        }

        if ($data['task_type'] != 'note-task') {
            if ($temp = $data['task_asssigned_to'] ?? null) {
                if (is_array($temp)) {
                    foreach ($temp as $user_id) {
                        $task->users()->attach([$user_id => ['type' => User::class]]);
                    }
                } else {
                    $task->users()->attach([$temp => ['type' => User::class]]);
                }
            }

            if ($temp = $data['assign_to_contacts'] ?? null) {
                if (is_array($temp)) {
                    foreach ($temp as $contact_id) {
                        $task->users()->attach([$contact_id => ['type' => Contact::class]]);
                    }
                } else {
                    $task->users()->attach([$temp => ['type' => Contact::class]]);
                }
            }
        }

        $params = [
            'number'   => null,
            'user_id'  => loginId(),
            'approved' => 1,
            'status'   => 2,
            'task_id'  => $task->id,
            'message'  => $message,
        ];

        if (count($task->users) > 0) {
            if ($task->assign_from == Auth::id()) {
                foreach ($task->users as $key => $user) {
                    if ($key == 0) {
                        $params['erp_user'] = $user->id;
                    } else {
                        app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($user->phone, $user->whatsapp_number, $params['message']);
                    }
                }
            } else {
                foreach ($task->users as $key => $user) {
                    if ($key == 0) {
                        $params['erp_user'] = $task->assign_from;
                    } else {
                        if ($user->id != Auth::id()) {
                            app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($user->phone, $user->whatsapp_number, $params['message']);
                        }
                    }
                }
            }
        }

        if (count($task->contacts) > 0) {
            foreach ($task->contacts as $key => $contact) {
                if ($key == 0) {
                    $params['contact_id'] = $task->assign_to;
                } else {
                    app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($contact->phone, null, $params['message']);
                }
            }
        }

        $chat_message = ChatMessage::create($params);
        ChatMessagesQuickData::updateOrCreate(
            [
                'model'    => \App\Task::class,
                'model_id' => $params['task_id'],
            ], [
                'last_communicated_message'    => @$params['message'],
                'last_communicated_message_at' => $chat_message->created_at,
                'last_communicated_message_id' => ($chat_message) ? $chat_message->id : null,
            ]
        );

        $myRequest = new Request();
        $myRequest->setMethod('POST');
        $myRequest->request->add(['messageId' => $chat_message->id]);

        app(\App\Http\Controllers\WhatsAppController::class)->approveMessage('task', $myRequest);

        return $task;
    }

    public function developerTaskCreate($data)
    {
        $loggedUser = request()->user();

        $data['created_by'] = loginId();

        if ($data['parent_review_task_id'] ?? 0) {
            $data['subject'] = $data['subject'] . ' - #REVIEW_TASK';
            $data['task']    = $data['task'] . ' - #REVIEW_TASK';
        }
        $task = DeveloperTask::create($data);

        // Check the assinged user in any team ?
        if ($task->assigned_to > 0 && empty($task->team_lead_id)) {
            $teamUser = \App\TeamUser::where('user_id', $task->assigned_to)->first();
            if ($teamUser) {
                $team = $teamUser->team;
                if ($team) {
                    $task->team_lead_id = $team->user_id;
                    $task->save();
                }
            } else {
                $isTeamLeader = \App\Team::where('user_id', $task->assigned_to)->first();
                if ($isTeamLeader) {
                    $task->team_lead_id = $task->assigned_to;
                    $task->save();
                }
            }
        }

        // CREATE GITHUB REPOSITORY BRANCH
        $newBranchName = $this->createBranchOnGithub(
            $task->repository_id,
            $task->id,
            $task->subject
        );

        // UPDATE TASK WITH BRANCH NAME
        if ($newBranchName) {
            $task->github_branch_name = $newBranchName;
            $task->save();
        }

        // SEND MESSAGE
        if (is_string($newBranchName)) {
            $message = $task->task . PHP_EOL . 'A new branch ' . $newBranchName . " has been created. Please pull the current code and run 'git checkout " . $newBranchName . "' to work in that branch.";
        } else {
            $message = $task->task;
        }
        $requestData = new Request();
        $requestData->setMethod('POST');
        $requestData->request->add(['issue_id' => $task->id, 'message' => $message, 'status' => 1]);
        app(\App\Http\Controllers\WhatsAppController::class)->sendMessage($requestData, 'issue');

        MessageHelper::sendEmailOrWebhookNotification([
            $task->user_id,
            $task->assigned_to,
            $task->master_user_id,
            $task->responsible_user_id,
            $task->team_lead_id,
            $task->tester_id,
        ], ' [ ' . $loggedUser->name . ' ] - ' . $message);

        $hubstaff_project_id = config('env.HUBSTAFF_BULK_IMPORT_PROJECT_ID') ?: 0;

        $hubstaffUserId = null;
        if ($assignedUser = HubstaffMember::where('user_id', $task->assigned_to)->first()) {
            $hubstaffUserId = $assignedUser->hubstaff_user_id;
        }

        $summary = substr($task->task, 0, 200);
        if ($data['task_type_id'] == 1) {
            $taskSummery = '#DEVTASK-' . $task->id . ' => ' . $summary;
        } else {
            $taskSummery = '#TASK-' . $task->id . ' => ' . $summary;
        }

        if (isset($data['task_for']) && $data['task_for'] == 'time_doctor') {
            $this->timeDoctorActions('DEVTASK', $task, $data['time_doctor_project'], $data['assigned_to']);
        } else {
            $hubstaffTaskId = '';
            if (env('PRODUCTION', true)) {
                $hubstaffTaskId = $this->createHubstaffTask(
                    $taskSummery,
                    $hubstaffUserId,
                    $hubstaff_project_id
                );
            } else {
                $hubstaff_project_id = '#TASK-3';
                $hubstaffUserId      = 406; //for local system
                $hubstaffTaskId      = 34543; //for local system
            }

            if ($hubstaffTaskId) {
                $task->hubstaff_task_id = $hubstaffTaskId;
                $task->save();

                $task                      = new HubstaffTask();
                $task->hubstaff_task_id    = $hubstaffTaskId;
                $task->project_id          = $hubstaff_project_id;
                $task->hubstaff_project_id = $hubstaff_project_id;
                $task->summary             = $task->task;
                $task->save();
            }
        }

        return $task;
    }

    public function hubstaffActions($type, $task)
    {
        $hubstaff_project_id = config('env.HUBSTAFF_BULK_IMPORT_PROJECT_ID');

        if ($type == 'DEVTASK') {
            $message      = '#DEVTASK-' . $task->id . ' => ' . $task->subject;
            $assignedToId = $task->assigned_to;
        } elseif ($type == 'TASK') {
            $message      = '#TASK-' . $task->id . ' => ' . $task->task_subject . '. ' . $task->task_details;
            $assignedToId = $task->assign_to;
        } else {
            return false;
        }

        if ($assignedUser = HubstaffMember::where('user_id', $assignedToId)->first()) {
            $taskSummary    = substr($message, 0, 200);
            $hubstaffTaskId = $this->createHubstaffTask(
                $taskSummary, $assignedUser->hubstaff_user_id, $hubstaff_project_id
            );

            if ($hubstaffTaskId) {
                $task->hubstaff_task_id = $hubstaffTaskId;
                $task->save();

                $hubtask                      = new HubstaffTask();
                $hubtask->hubstaff_task_id    = $hubstaffTaskId;
                $hubtask->project_id          = $hubstaff_project_id;
                $hubtask->hubstaff_project_id = $hubstaff_project_id;
                $hubtask->summary             = $message;
                $hubtask->save();

                return true;
            }
        }

        return false;
    }

    public function timeDoctorActions($type, $task, $projectId, $accountId, $assignTo)
    {
        $check_entry                                  = 0;
        $project_data                                 = [];
        $project_data['time_doctor_project']          = $projectId;
        $project_data['time_doctor_task_name']        = $task['task_subject'];
        $project_data['time_doctor_task_description'] = $task['task_details'];

        if ($type == 'DEVTASK') {
            $message      = '#DEVTASK-' . $task->id . ' => ' . $task->subject;
            $assignedToId = $assignTo;
        } elseif ($type == 'TASK') {
            $message      = '#TASK-' . $task->id . ' => ' . $task->task_subject . '. ' . $task->task_details;
            $assignedToId = $assignTo;
        } else {
            return false;
        }

        $assignUsersData = \App\TimeDoctor\TimeDoctorAccount::find($accountId);
        if ($assignUsersData && $assignUsersData->company_id && $assignUsersData->auth_token) {
            $timedoctor  = Timedoctor::getInstance();
            $companyId   = $assignUsersData->company_id;
            $accessToken = $assignUsersData->auth_token;

            $taskSummary            = substr($message, 0, 200);
            $timeDoctorTaskResponse = $timedoctor->createGeneralTask($companyId, $accessToken, $project_data, $task->id, $type);
            $errorMessages          = config('constants.TIME_DOCTOR_API_RESPONSE_MESSAGE');
            switch ($timeDoctorTaskResponse['code']) {
                case '401':
                    return ['code' => 500, 'data' => [], 'message' => $errorMessages['401']];
                    break;
                case '403':
                    return ['code' => 500, 'data' => [], 'message' => $errorMessages['403']];
                    break;
                case '409':
                    return ['code' => 500, 'data' => [], 'message' => $errorMessages['409']];
                    break;
                case '422':
                    return ['code' => 500, 'data' => [], 'message' => $errorMessages['422']];
                    break;
                case '500':
                case '404':
                    return ['code' => 500, 'data' => [], 'message' => $errorMessages['404']];
                    break;
                default:
                    $timeDoctorTaskId = $timeDoctorTaskResponse['data']['id'];
                    if ($timeDoctorTaskId) {
                        $task->time_doctor_task_id = $timeDoctorTaskId;
                        $task->save();

                        $time_doctor_task                         = new TimeDoctorTask();
                        $time_doctor_task->time_doctor_task_id    = $timeDoctorTaskId;
                        $time_doctor_task->project_id             = $projectId;
                        $time_doctor_task->time_doctor_project_id = $projectId;
                        $time_doctor_task->summery                = $message;
                        $time_doctor_task->save();
                    }

                    return ['code' => 200, 'data' => [], 'message' => 'Time doctor task created successfully'];
                    break;
            }
        } else {
            return false;
        }

        return false;
    }

    //START - Purpose : Set Remined , Revise - DEVTASK-4354
    public function sendRemindMessage(Request $request)
    {
        $user = User::find($request->user_id);
        if ($user) {
            $receiver_user_phone = $user->phone;
            if ($receiver_user_phone) {
                $task = Task::find($request->id);
                $msg  = 'PLS ADD ESTIMATED TIME FOR TASK  ' . '#TASK-' . $task->id . '-' . $task->subject;
                $chat = ChatMessage::create(
                    [
                        'number'            => $receiver_user_phone,
                        'user_id'           => $user->id,
                        'customer_id'       => $user->id,
                        'message'           => $msg,
                        'status'            => 0,
                        'developer_task_id' => $request->id,
                    ]
                );

                app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($receiver_user_phone, $user->whatsapp_number, $msg, false, $chat->id);

                MessageHelper::sendEmailOrWebhookNotification([$task->user_id], $msg);
            }
        }

        return response()->json(
            [
                'message' => 'Remind message sent successfully',
            ]
        );
    }

    public function sendReviseMessage(Request $request)
    {
        $user = User::find($request->user_id);
        if ($user) {
            $receiver_user_phone = $user->phone;
            if ($receiver_user_phone) {
                $task = Task::find($request->id);
                $msg  = 'TIME NOT APPROVED REVISE THE ESTIMATED TIME FOR TASK ' . '#TASK-' . $task->id . '-' . $task->subject;
                $chat = ChatMessage::create(
                    [
                        'number'            => $receiver_user_phone,
                        'user_id'           => $user->id,
                        'customer_id'       => $user->id,
                        'message'           => $msg,
                        'status'            => 0,
                        'developer_task_id' => $request->id,
                    ]
                );
                app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($receiver_user_phone, $user->whatsapp_number, $msg, false, $chat->id);

                MessageHelper::sendEmailOrWebhookNotification([$task->assigned_to], $msg);
            }
        }

        return response()->json(
            [
                'message' => 'Revise message sent successfully',
            ]
        );
    }

    //END - DEVTASK-4354

    public function getDiscussionSubjects()
    {
        $discussion_subjects = Task::where('is_statutory', 3)->where('is_verified', null)->pluck('task_subject', 'id')->toArray();

        return response()->json(
            [
                'code'                => 200,
                'discussion_subjects' => $discussion_subjects,
            ]
        );
    }

    /***
     * Delete task note
     */
    public function deleteTaskNote(Request $request)
    {
        $task = Remark::whereId($request->note_id)->delete();
        session()->flash('success', 'Deleted successfully.');

        return response(['success' => 'Deleted'], 200);
    }

    /**
     * Hide task note from list
     */
    public function hideTaskRemark(Request $request)
    {
        $task = Remark::whereId($request->note_id)->update(['is_hide' => 1]);
        session()->flash('success', 'Hide successfully.');

        return response(['success' => 'Hidden'], 200);
    }

    public function assignMasterUser(Request $request)
    {
        $masterUserId = $request->get('master_user_id');
        $issue        = Task::find($request->get('issue_id'));

        $user = User::find($masterUserId);

        if (! $user) {
            return response()->json(
                [
                    'status'  => 'success',
                    'message' => 'user not found',
                ], 500
            );
        }

        if ($request->get('lead') == '1') {
            $old_id = $issue->master_user_id;
            if (! $old_id) {
                $old_id = 0;
            }
            $issue->master_user_id = $masterUserId;
            $task_type             = 'leaddeveloper';
        } else {
            $old_id = $issue->second_master_user_id;
            if (! $old_id) {
                $old_id = 0;
            }
            $issue->second_master_user_id = $masterUserId;
            $task_type                    = 'second_leaddeveloper';
        }

        $issue->save();

        $hubstaff_project_id = config('env.HUBSTAFF_BULK_IMPORT_PROJECT_ID');

        $assignedUser = HubstaffMember::where('user_id', $masterUserId)->first();

        $hubstaffUserId = null;
        if ($assignedUser) {
            $hubstaffUserId = $assignedUser->hubstaff_user_id;
        }
        $message        = '#' . $issue->id . '. ' . $issue->task_subject . '. ' . $issue->task_details;
        $summary        = substr($message, 0, 200);
        $hubstaffTaskId = $this->createHubstaffTask(
            $summary, $hubstaffUserId, $hubstaff_project_id
        );
        if ($hubstaffTaskId) {
            $issue->lead_hubstaff_task_id = $hubstaffTaskId;
            $issue->save();
        }
        if ($hubstaffTaskId) {
            $task                      = new HubstaffTask();
            $task->hubstaff_task_id    = $hubstaffTaskId;
            $task->project_id          = $hubstaff_project_id;
            $task->hubstaff_project_id = $hubstaff_project_id;
            $task->summary             = $message;
            $task->save();
        }
        $taskUser             = new TaskUserHistory;
        $taskUser->model      = \App\Task::class;
        $taskUser->model_id   = $issue->id;
        $taskUser->old_id     = ($old_id == '') ? 0 : $old_id;
        $taskUser->new_id     = $masterUserId;
        $taskUser->user_type  = $task_type;
        $taskUser->updated_by = Auth::user()->name;
        $taskUser->save();

        return response()->json(
            [
                'status' => 'success',
            ]
        );
    }

    public function uploadDocuments(Request $request)
    {
        $path = storage_path('tmp/uploads');

        if (! file_exists($path)) {
            mkdir($path, 0777, true);
        }

        $file = $request->file('file');

        $name = uniqid() . '_' . trim($file->getClientOriginalName());

        $file->move($path, $name);

        return response()->json(
            [
                'name'          => $name,
                'original_name' => $file->getClientOriginalName(),
            ]
        );
    }

    public function saveDocuments(Request $request)
    {
        $loggedUser = $request->user();

        if (! $request->task_id || $request->task_id == '') {
            return response()->json(
                [
                    'code'    => 500,
                    'data'    => [],
                    'message' => 'Select one task',
                ]
            );
        }

        $documents = $request->input('document', []) ? $request->input('document', []) : $request->document;

        $task = Task::find($request->task_id);
        if (! empty($documents)) {
            $count = count([$documents]);

            $message = '[' . $loggedUser->name . '] - #ISSUE-' . $task->id . ' - ' . $task->task_subject . "\n\n " . $count . ' new attchment' . ($count > 1 ? 's' : '');

            foreach ($documents as $file) {
                $path  = storage_path('tmp/uploads/' . $file);
                $media = MediaUploader::fromSource($path)->toDirectory('task-files/' . floor($task->id / config('constants.image_per_folder')))->upload();
                $task->attachMedia($media, config('constants.media_tags'));

                if (! empty($media->filename)) {
                    DB::table('media')->where('filename', $media->filename)->update(['user_id' => Auth::id()]);
                }

                $message .= "\n" . $file;
            }

            $message . "\nhas been added. \n Please check it and add your comment if any.";

            MessageHelper::sendEmailOrWebhookNotification($task->users->pluck('id')->toArray(), $message);

            return response()->json(
                [
                    'code'    => 200,
                    'data'    => [],
                    'message' => 'Done!',
                ]
            );
        } else {
            return response()->json(
                [
                    'code'    => 500,
                    'data'    => [],
                    'message' => 'No documents for upload',
                ]
            );
        }
    }

    public function previewTaskImage($id)
    {
        $task = Task::find($id);

        $records = [];
        if ($task) {
            $userList    = User::pluck('name', 'id')->all();
            $task        = Task::find($id);
            $userName    = '';
            $mediaDetail = [];
            if ($task->hasMedia(config('constants.attach_image_tag'))) {
                foreach ($task->getMedia(config('constants.attach_image_tag')) as $media) {
                    $imageExtensions = [
                        'jpg',
                        'jpeg',
                        'gif',
                        'png',
                        'bmp',
                        'svg',
                        'svgz',
                        'cgm',
                        'djv',
                        'djvu',
                        'ico',
                        'ief',
                        'jpe',
                        'pbm',
                        'pgm',
                        'pnm',
                        'ppm',
                        'ras',
                        'rgb',
                        'tif',
                        'tiff',
                        'wbmp',
                        'xbm',
                        'xpm',
                        'xwd',
                    ];
                    $explodeImage = explode('.', getMediaUrl($media));
                    $extension    = end($explodeImage);

                    if (in_array($extension, $imageExtensions)) {
                        $isImage = true;
                    } else {
                        $isImage = false;
                    }

                    $mediaDetail = DB::table('media')->where('id', $media->id)->first();
                    if ($mediaDetail) {
                        $userName = User::where('id', $mediaDetail->user_id)->pluck('name')->first();
                    } else {
                        $userName = '';
                    }

                    $records[] = [
                        'media_id'   => $id,
                        'id'         => $media->id,
                        'url'        => getMediaUrl($media),
                        'task_id'    => $task->id,
                        'isImage'    => $isImage,
                        'userList'   => $userList,
                        'userName'   => $userName,
                        'created_at' => $media->created_at,
                    ];
                }
            }
        }

        $records = array_reverse($records);
        $title   = 'Preview images';

        return view('task-module.partials.preview-task-images', compact('title', 'records'));
    }

    public function SendTask(Request $request)
    {
        $id = $request->id;

        if ($request->type == 'TASK') {
            $task = Task::find($request->taskdata);
            $user = User::find($task->assign_to);
        } else {
            $task = DeveloperTask::find($request->taskdata);
            $user = User::find($task->user_id);
        }
        $taskdata = $request->taskdata;

        $media = \Plank\Mediable\Media::find($request->id);

        $admin = Auth::user();

        $userid = Auth::id();
        $msg    = getMediaUrl($media);
        if ($user && $user->phone) {
            if ($request->type == 'TASK') {
                $params = ChatMessage::create(
                    [
                        'id'      => $id,
                        'user_id' => $userid,
                        'task_id' => $request->task_id,

                        'sent_to_user_id' => $user->id,

                        'erp_user'   => $task->assign_to,
                        'contact_id' => $task->assign_to,
                        'message'    => getMediaUrl($media),

                    ]
                );
                $params = ChatMessage::create(
                    [
                        'id'      => $id,
                        'user_id' => $user->id,
                        'task_id' => $taskdata,

                        'sent_to_user_id' => $userid,

                        'erp_user'   => $task->assign_to,
                        'contact_id' => $task->assign_to,
                        'message'    => getMediaUrl($media),

                    ]
                );
            } else {
                $params = ChatMessage::create(
                    [
                        'id'                => $id,
                        'user_id'           => $userid,
                        'task_id'           => $request->task_id,
                        'developer_task_id' => $task->id,
                        'sent_to_user_id'   => $user->id,
                        'issue_id'          => $task->id,
                        'erp_user'          => $task->assign_to,
                        'contact_id'        => $task->assign_to,
                        'message'           => getMediaUrl($media),

                    ]
                );
            }

            if ($params) {
                app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($user->phone, $user->whatsapp_number, $msg);

                return response()->json(
                    [
                        'message' => 'Successfully Send File',
                    ], 200
                );
            }

            return response()->json(
                [
                    'message' => 'Something Was Wrong',
                ], 500
            );

            return response()->json(['message' => 'Sorry required fields is missing like id , userid'], 500);
        }
    }

    public function sendDocument(Request $request)
    {
        if ($request->id != null && $request->user_id != null) {
            $media   = \Plank\Mediable\Media::find($request->id);
            $user    = \App\User::find($request->user_id);
            $id      = $request->id;
            $task    = Task::find($request->user_id);
            $task_id = $request->doc_id;
            $userid  = Auth::id();
            $msg     = getMediaUrl($media);
            if ($user && $user->phone) {
                $params = ChatMessage::create(
                    [
                        'id' => $id,
                        // 'user_id' => $user->id,
                        'user_id'         => $userid,
                        'task_id'         => $task_id,
                        'erp_user'        => $user->id,
                        'sent_to_user_id' => $userid,
                        'message'         => getMediaUrl($media),

                    ]
                );

                if ($params) {
                    app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($user->phone, $user->whatsapp_number, $msg);

                    return response()->json(
                        [
                            'message' => 'Successfully Send Document',
                        ], 200
                    );
                }

                return response()->json(
                    [
                        'message' => 'Something Was Wrong',
                    ], 500
                );
            }
        }

        return response()->json(['message' => 'Sorry required fields is missing like User, Phone'], 500);
    }

    public function SendTaskSOP(Request $request)
    {
        $media = \Plank\Mediable\Media::find($request->id);
        $user  = \App\User::find($request->user_id);

        $task     = Task::find($request->task_id);
        $username = User::find($task->assign_to);

        $userid = Auth::id();

        $params = Sop::create(
            [
                'name'    => $username->name,
                'content' => getMediaUrl($media),

            ]
        );

        return response()->json(['message' => 'Data Added Successfully']);
    }

    public function approveTimeHistory(Request $request)
    {
        if (Auth::user()->isAdmin) {
            if (! $request->approve_time || $request->approve_time == '' || ! $request->developer_task_id || $request->developer_task_id == '') {
                return response()->json(
                    [
                        'message' => 'Select one time first',
                    ], 500
                );
            }
            DeveloperTaskHistory::where('developer_task_id', $request->developer_task_id)->where('attribute', 'estimation_minute')->where('model', \App\Task::class)->update(['is_approved' => 0]);
            $history              = DeveloperTaskHistory::find($request->approve_time);
            $history->is_approved = 1;
            $history->save();

            $task         = Task::find($request->developer_task_id);
            $task->status = Task::TASK_STATUS_APPROVED;
            $task->save();

            $time = $history->new_value !== null ? $history->new_value : $history->old_value;
            $msg  = 'TIME APPROVED FOR TASK ' . '#DEVTASK-' . $task->id . '-' . $task->subject . ' - ' . $time . ' MINS';

            $user        = User::find($request->user_id);
            $admin       = Auth::user();
            $master_user = User::find($task->master_user_id);

            if ($user) {
                if ($admin->phone) {
                    $chat = ChatMessage::create(
                        [
                            'number'            => $admin->phone,
                            'user_id'           => $user->id,
                            'customer_id'       => $user->id,
                            'message'           => $msg,
                            'status'            => 0,
                            'developer_task_id' => $request->developer_task_id,
                        ]
                    );
                } elseif ($user->phone) {
                    $chat = ChatMessage::create(
                        [
                            'number'            => $user->phone,
                            'user_id'           => $user->id,
                            'customer_id'       => $user->id,
                            'message'           => $msg,
                            'status'            => 0,
                            'developer_task_id' => $request->developer_task_id,
                        ]
                    );
                } elseif ($master_user && $master_user->phone) {
                    $chat = ChatMessage::create(
                        [
                            'number'            => $master_user->phone,
                            'user_id'           => $user->id,
                            'customer_id'       => $user->id,
                            'message'           => $msg,
                            'status'            => 0,
                            'developer_task_id' => $request->developer_task_id,
                        ]
                    );
                }
                if (isset($chat)) {
                    if ($admin->phone) {
                        app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($admin->phone, $admin->whatsapp_number, $msg, false, $chat->id);
                    }
                    if ($user->phone) {
                        app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($user->phone, $user->whatsapp_number, $msg, false, $chat->id);
                    }
                    if ($master_user && $master_user->phone) {
                        app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($master_user->phone, $master_user->whatsapp_number, $msg, false, $chat->id);
                    }
                }
            }

            return response()->json(
                [
                    'message' => 'Success',
                ], 200
            );
        }

        return response()->json(
            [
                'message' => 'Only admin can approve',
            ], 500
        );
    }

    public function getTrackedHistory(Request $request)
    {
        $id   = $request->id;
        $type = $request->type;
        if ($type == 'lead') {
            $task_histories = DB::select(DB::raw('SELECT hubstaff_activities.task_id,cast(hubstaff_activities.starts_at as date) as starts_at_date,sum(hubstaff_activities.tracked) as total_tracked,tasks.master_user_id,users.name FROM `hubstaff_activities`  join tasks on tasks.lead_hubstaff_task_id = hubstaff_activities.task_id join users on users.id = tasks.master_user_id where tasks.id = ' . $id . ' group by starts_at_date'));
        } else {
            $task_histories = DB::select(DB::raw('SELECT hubstaff_activities.task_id,cast(hubstaff_activities.starts_at as date) as starts_at_date,sum(hubstaff_activities.tracked) as total_tracked,tasks.assign_to,users.name FROM `hubstaff_activities`  join tasks on tasks.hubstaff_task_id = hubstaff_activities.task_id join users on users.id = tasks.assign_to where tasks.id = ' . $id . ' group by starts_at_date'));
        }

        return response()->json(['histories' => $task_histories]);
    }

    public function taskCreateGetRemark(Request $request)
    {
        try {
            $msg = '';
            if ($request->remark != '') {
                TaskRemark::create(
                    [
                        'task_id'    => $request->task_id,
                        'task_type'  => $request->type,
                        'updated_by' => Auth::id(),
                        'remark'     => $request->remark,
                    ]
                );
                $msg = ' Created and ';
            }
            $taskRemarkData = TaskRemark::where(
                [
                    [
                        'task_id',
                        '=',
                        $request->task_id,
                    ],
                    [
                        'task_type',
                        '=',
                        $request->type,
                    ],
                ]
            )->get();
            $html = '';
            foreach ($taskRemarkData as $taskRemark) {
                $html .= '<tr>';
                $html .= '<td>' . $taskRemark->id . '</td>';
                $html .= '<td>' . $taskRemark->users->name . '</td>';
                $html .= '<td>' . $taskRemark->remark . '</td>';
                $html .= '<td>' . $taskRemark->created_at . '</td>';
                $html .= "<td><i class='fa fa-copy copy_remark' data-remark_text='" . $taskRemark->remark . "'></i></td>";
            }

            return response()->json(
                [
                    'code'    => 200,
                    'data'    => $html,
                    'message' => 'Remark ' . $msg . ' listed Successfully',
                ]
            );
        } catch (Exception $e) {
            return response()->json(
                [
                    'code'    => 500,
                    'data'    => '',
                    'message' => $e->getMessage(),
                ]
            );
        }
    }

    public function devgetTaskRemark(Request $request)
    {
        if ($request->status != 'view') {
            if ($request->remark != '') {
                $remark = TaskRemark::create(
                    [
                        'task_id'    => $request->task_id,
                        'task_type'  => $request->type,
                        'updated_by' => Auth::id(),
                        'remark'     => $request->remark,
                    ]
                );
            }
        } else {
            $remark = TaskRemark::where([['task_id', '=', $request->task_id], ['task_type', '=', $request->type]])->get();
        }

        return response()->json(['remark' => $remark], 200);
    }

    public function createHubstaffManualTask(Request $request)
    {
        $task = Task::find($request->id);

        if ($task) {
            if ($request->task_for_modal == 'hubstaff') {
                if ($request->type == 'developer') {
                    $user_id = $task->assign_to;
                } else {
                    $user_id = $task->master_user_id;
                }
                $hubstaff_project_id = config('env.HUBSTAFF_BULK_IMPORT_PROJECT_ID');

                $assignedUser = HubstaffMember::where('user_id', $user_id)->first();

                $hubstaffUserId = null;
                if ($assignedUser) {
                    $hubstaffUserId = $assignedUser->hubstaff_user_id;
                }
                $taskSummery = '#' . $task->id . '. ' . $task->task_subject;
                if ($hubstaffUserId) {
                    $hubstaffTaskId = $this->createHubstaffTask(
                        $taskSummery, $hubstaffUserId, $hubstaff_project_id
                    );
                } else {
                    $log                = new TaskHubstaffCreateLog();
                    $log->task_id       = $request->id;
                    $log->error_message = 'Hubstaff member not found';
                    $log->user_id       = Auth::id();
                    $log->save();

                    return response()->json(
                        [
                            'message' => 'Hubstaff member not found',
                        ], 500
                    );
                }
                if ($hubstaffTaskId) {
                    if ($request->type == 'developer') {
                        $task->hubstaff_task_id = $hubstaffTaskId;
                    } else {
                        $task->lead_hubstaff_task_id = $hubstaffTaskId;
                    }
                    $task->save();
                } else {
                    $log                = new TaskHubstaffCreateLog();
                    $log->task_id       = $request->id;
                    $log->error_message = 'Hubstaff task not create';
                    $log->user_id       = Auth::id();
                    $log->save();

                    return response()->json(
                        [
                            'message' => 'Hubstaff task not created',
                        ], 500
                    );
                }
                if ($hubstaffTaskId) {
                    $task                      = new HubstaffTask();
                    $task->hubstaff_task_id    = $hubstaffTaskId;
                    $task->project_id          = $hubstaff_project_id;
                    $task->hubstaff_project_id = $hubstaff_project_id;
                    $task->summary             = $taskSummery;
                    $task->save();
                }
            } else {
                try {
                    $timeDoctorTaskResponse = $this->timeDoctorActions('TASK', $task, $request->time_doctor_project, $request->time_doctor_account, $request->assigned_to);

                    $log                = new TaskHubstaffCreateLog();
                    $log->task_id       = $request->id;
                    $log->error_message = $timeDoctorTaskResponse['message'] ?? '';
                    $log->user_id       = Auth::id();
                    $log->save();

                    return response()->json([
                        'message' => $timeDoctorTaskResponse['message'],
                    ], $timeDoctorTaskResponse['code']);
                } catch (Exception $e) {
                    return response()->json([
                        'message' => $e->getMessage(),
                    ], \Illuminate\Http\Response::HTTP_INTERNAL_SERVER_ERROR);
                }
            }

            return response()->json(
                [
                    'message' => 'Successful',
                ], 200
            );
        } else {
            $log                = new TaskHubstaffCreateLog();
            $log->task_id       = $request->id;
            $log->error_message = 'Task not found';
            $log->user_id       = Auth::id();
            $log->save();

            return response()->json(
                [
                    'message' => 'Task not found',
                ], 500
            );
        }
    }

    public function getTaskCategories()
    {
        $categories = TaskCategory::where('is_approved', 1)->get();

        return view('task-module.partials.all-task-category', compact('categories'));
    }

    public function completeBulkTasks(Request $request)
    {
        if (count($request->selected_tasks) > 0) {
            foreach ($request->selected_tasks as $t) {
                $task               = Task::find($t);
                $task->is_completed = date('Y-m-d H:i:s');
                $task->is_verified  = date('Y-m-d H:i:s');
                if ($task->assignedTo) {
                    if ($task->assignedTo->fixed_price_user_or_job == 1) {
                        // Fixed price task.
                        continue;
                    }
                }
                $task->save();
            }
        }

        return response()->json(['message' => 'Successful']);
    }

    public function deleteBulkTasks(Request $request)
    {
        if (count($request->selected_tasks) > 0) {
            foreach ($request->selected_tasks as $t) {
                $task = Task::where('id', $t)->delete();
            }
        }

        return response()->json(['message' => 'Successful']);
    }

    public function getTimeHistory(Request $request)
    {
        $id          = $request->id;
        $task_module = DeveloperTaskHistory::join('users', 'users.id', 'developer_tasks_history.user_id')->where('developer_task_id', $id)->where('model', \App\Task::class)->where('attribute', 'estimation_minute')->select('developer_tasks_history.*', 'users.name')->orderBy('developer_tasks_history.id', 'DESC')->get();
        if ($task_module) {
            return $task_module;
        }

        return 'error';
    }

    /* update task status
    */

    public function updateStatus(Request $request)
    {
        try {
            $task       = Task::find($request->task_id);
            $old_status = $task->status;

            $task->status = $request->status;

            if (request('status') == Task::TASK_STATUS_IN_PROGRESS) {
                if ($task->actual_start_date == null || $task->actual_start_date == '0000-00-00 00:00:00') {
                    $task->actual_start_date = date('Y-m-d H:i:s');
                }
            }
            if (request('status') == Task::TASK_STATUS_DONE) {
                $task->actual_end_date = date('Y-m-d H:i:s');
            }

            $task->save();
            DeveloperTaskHistory::create(
                [
                    'developer_task_id' => $request->task_id,
                    'model'             => \App\Task::class,
                    'attribute'         => 'task_status',
                    'old_value'         => $old_status,
                    'new_value'         => $task->status,
                    'user_id'           => Auth::id(),
                ]
            );

            if ($task->status == 1) {
                $task_user = User::find($task->assign_to);
                if (! $task_user) {
                    return response()->json(
                        [
                            'message' => 'Please assign the task.',
                        ], 500
                    );
                }
                $team_user = \DB::table('team_user')->where('user_id', $task->assign_to)->first();
                if ($team_user) {
                    $team_lead = \DB::table('teams')->where('id', $team_user->team_id)->first();
                    if ($team_lead) {
                        $task_user_for_payment = User::find($team_lead->user_id);
                    }
                }
                if (empty($task_user_for_payment)) {
                    $task_user_for_payment = $task_user;
                }
                if ($task_user_for_payment->fixed_price_user_or_job == 0) {
                    return response()->json(
                        [
                            'message' => 'Please provide salary payment method for user.',
                        ], 500
                    );
                }
                if (! empty($task_user_for_payment)) {
                    if ($task_user_for_payment->fixed_price_user_or_job == 1) {
                        if ($task->cost == null) {
                            return response()->json(
                                [
                                    'message' => 'Please provide cost for fixed price task.',
                                ], 500
                            );
                        }
                        $rate_estimated = $task->cost ?? 0;
                    } elseif ($task_user_for_payment->fixed_price_user_or_job == 2) {
                        $userRate = UserRate::getRateForUser($task_user_for_payment->id);
                        if ($userRate && $userRate->hourly_rate !== null) {
                            $rate_estimated = $task->approximate * ($userRate->hourly_rate ?? 0) / 60;
                        } else {
                            return response()->json(
                                [
                                    'message' => 'Please provide hourly rate of user.',
                                ], 500
                            );
                        }
                    }
                    $receipt_id = PaymentReceipt::create(
                        [
                            'status'         => 'Pending',
                            'rate_estimated' => $rate_estimated,
                            'date'           => date('Y-m-d'),
                            'currency'       => '',
                            'user_id'        => $task_user_for_payment->id,
                            'by_command'     => 4,
                            'task_id'        => $task->id,
                        ]
                    );

                    if ($task->status == 1) {
                        if ($task->task_bug_ids != '') {
                            $task_details_info = explode(',', $task->task_bug_ids);
                            if (count($task_details_info) > 0) {
                                $admin_user_id       = 0;
                                $customer_role_users = RoleUser::where(['role_id' => 1])->with('user')->get()->toArray();
                                if (count($customer_role_users) > 0) {
                                    for ($m = 0; $m < count($customer_role_users); $m++) {
                                        if (isset($customer_role_users[$m]['user']['id']) && $customer_role_users[$m]['user']['id'] > 0) {
                                            $admin_user_id = $customer_role_users[$m]['user']['id'];
                                            $m             = count($customer_role_users);
                                        }
                                    }
                                }

                                for ($k = 0; $k < count($task_details_info); $k++) {
                                    $bug_tacker_id = $task_details_info[$k];
                                    $bug_tracking  = BugTracker::find($bug_tacker_id);
                                    if ($task->status == 3) { // In progress
                                        $bug_tracking->bug_status_id = 5;
                                    } elseif ($task->status == 1) { // complete
                                        $bug_tracking->bug_status_id = 6;
                                        if ($admin_user_id > 0) {
                                            $bug_tracking->assign_to = $admin_user_id;
                                        }
                                    } elseif ($task->status == 2) { // Discussing
                                        $bug_tracking->bug_status_id = 7;
                                        if ($admin_user_id > 0) {
                                            $bug_tracking->assign_to = $admin_user_id;
                                        }
                                    }

                                    $bug_tracking->updated_at = date('Y-m-d H:i:s');
                                    $bug_tracking->updated_by = Auth::user()->name;
                                    $bug_tracking->save();
                                }
                            }
                        }
                    }
                }
            }

            if ($task->status == 3 || $task->status == 2 || $task->status == 6 || $task->status == 15 || $task->status == 16) {
                if ($task->task_bug_ids != '') {
                    $task_details_info = explode(',', $task->task_bug_ids);
                    if (count($task_details_info) > 0) {
                        $admin_user_id       = 0;
                        $customer_role_users = RoleUser::where(['role_id' => 1])->with('user')->get()->toArray();
                        if (count($customer_role_users) > 0) {
                            for ($m = 0; $m < count($customer_role_users); $m++) {
                                if (isset($customer_role_users[$m]['user']['id']) && $customer_role_users[$m]['user']['id'] > 0) {
                                    $admin_user_id = $customer_role_users[$m]['user']['id'];
                                    $m             = count($customer_role_users);
                                }
                            }
                        }

                        for ($k = 0; $k < count($task_details_info); $k++) {
                            $bug_tacker_id = $task_details_info[$k];
                            $bug_tracking  = BugTracker::find($bug_tacker_id);
                            if ($task->status == 3) { // In progress
                                $bug_tracking->bug_status_id = 6;
                            } elseif ($task->status == 15 || $task->status == 16) { // complete
                                $bug_tracking->bug_status_id = 7;
                                $bug_tracking->assign_to     = $bug_tracking->created_by;
                            } elseif ($task->status == 2) { // Discussing
                                $bug_tracking->bug_status_id = 8;
                                if ($admin_user_id > 0) {
                                    $bug_tracking->assign_to = $admin_user_id;
                                }
                            } elseif ($task->status == 6) { // Discuss with Lead
                                $bug_tracking->bug_status_id = 10;
                                if ($admin_user_id > 0) {
                                    $bug_tracking->assign_to = $admin_user_id;
                                }
                            }

                            $bug_tracking->updated_at = date('Y-m-d H:i:s');
                            $bug_tracking->updated_by = Auth::user()->name;
                            $bug_tracking->save();
                        }
                    }
                }
            }

            return response()->json(
                [
                    'status'  => 'success',
                    'message' => 'The task status updated.',
                ], 200
            );
        } catch (Exception $e) {
            return response()->json(
                [
                    'status'  => 'error',
                    'message' => 'The task status not updated.',
                ], 500
            );
        }
    }

    /* create new task status */

    public function createStatus(Request $request)
    {
        $this->validate($request, ['task_status' => 'required']);

        try {
            TaskStatus::create(['name' => $request->task_status]);

            return redirect()->back()->with('success', 'The task status created successfully.');
        } catch (Exception $e) {
            return redirect()->back()->with('error', $e->getMessage());
        }
    }

    public function updateTaskReminder(Request $request)
    {
        $task                      = Task::find($request->get('task_id'));
        $task->frequency           = $request->get('frequency');
        $task->reminder_message    = $request->get('message');
        $task->reminder_from       = $request->get('reminder_from', '0000-00-00 00:00');
        $task->reminder_last_reply = $request->get('reminder_last_reply', 0);
        $task->last_send_reminder  = date('Y-m-d H:i:s');
        $task->save();

        $message = $request->get('message');
        if (optional($task->assignedTo)->phone) {
            $requestData = new Request();
            $requestData->setMethod('POST');
            $requestData->request->add(
                [
                    'task_id' => $task->id,
                    'message' => $message,
                    'status'  => 1,
                ]
            );
            app(\App\Http\Controllers\WhatsAppController::class)->sendMessage($requestData, 'task');
        }

        return response()->json(
            [
                'success',
            ]
        );
    }

    public function sendBrodCast(Request $request)
    {
        $taskIds = $request->selected_tasks;

        if (! empty($taskIds)) {
            foreach ($taskIds as $tid) {
                // started to send message
                $requestData = new Request();
                $requestData->setMethod('POST');
                $requestData->request->add(
                    [
                        'task_id' => $tid,
                        'message' => $request->message,
                        'status'  => 1,
                    ]
                );
                app(\App\Http\Controllers\WhatsAppController::class)->sendMessage($requestData, 'task');
            }

            return response()->json(
                [
                    'code'    => 200,
                    'message' => 'Message has been sent to all selected task',
                ]
            );
        }

        return response()->json(
            [
                'code'    => 500,
                'message' => 'Please select atleast one task',
            ]
        );
    }

    public function CommunicationTaskStatus(Request $request)
    {
        $task = Task::find($request->get('task_id'));

        if ($task->communication_status == 0) {
            $status = 1;
        }
        if ($task->communication_status == 1) {
            $status = 0;
        }

        $updatetask                       = Task::find($request->get('task_id'));
        $updatetask->communication_status = $status;
        $updatetask->update();

        return response()->json(
            [
                'status'               => 'success',
                'communication_status' => $status,
            ]
        );
    }

    public function recurringHistory(request $request)
    {
        $task_id  = $request->input('task_id');
        $html     = '';
        $chatData = LogChatMessage::where('task_id', $task_id)->where('task_time_reminder', 0)->orderBy('id', 'DESC')->get();
        $i        = 1;
        if (count($chatData) > 0) {
            foreach ($chatData as $history) {
                $html .= '<tr>';
                $html .= '<td>' . $i . '</td>';
                $html .= '<td>' . $history->log_case_id . '</td>';
                $html .= '<td>' . $history->message . '</td>';
                $html .= '<td>' . $history->log_msg . '</td>';
                $html .= '<td>' . $history->created_at . '</td>';
                $html .= '</tr>';

                $i++;
            }

            return response()->json(
                [
                    'html'    => $html,
                    'success' => true,
                ], 200
            );
        } else {
            $html .= '<tr>';
            $html .= '<td></td>';
            $html .= '<td></td>';
            $html .= '<td></td>';
            $html .= '<td></td>';
            $html .= '<td></td>';
            $html .= '</tr>';
        }

        return response()->json(
            [
                'html'    => $html,
                'success' => true,
            ], 200
        );
    }

    public function AssignTaskToUser(Request $request)
    {
        $task   = Task::find($request->get('issue_id'));
        $old_id = $task->assign_to;
        if (! $old_id) {
            $old_id = 0;
        } else {
            DB::delete(
                'delete from task_users where task_id = ? AND user_id = ? AND type = ?', [
                    $task->id,
                    $old_id,
                    User::class,
                ]
            );
        }
        $task->assign_to = $request->get('user_id');

        $slotAvailable = $this->userSchedulesLoadData($request->get('user_id'));

        if (! empty($slotAvailable)) {
            $task->start_date = $slotAvailable['st'];
            $task->due_date   = $slotAvailable['en'];
        }

        $task->save();

        $hubstaff_project_id = config('env.HUBSTAFF_BULK_IMPORT_PROJECT_ID');

        $assignedUser = HubstaffMember::where('user_id', $request->input('user_id'))->first();

        $hubstaffUserId = null;
        if ($assignedUser) {
            $hubstaffUserId = $assignedUser->hubstaff_user_id;
        }
        if ($task->is_statutory != 1) {
            $message = '#' . $task->id . '. ' . $task->task_subject . '. ' . $task->task_details;
        } else {
            $message = $task->task_subject . '. ' . $task->task_details;
        }

        $taskSummery = substr($message, 0, 200);

        $hubstaffTaskId = $this->createHubstaffTask(
            $taskSummery, $hubstaffUserId, $hubstaff_project_id
        );

        if ($hubstaffTaskId) {
            $task->hubstaff_task_id = $hubstaffTaskId;
            $task->save();
        }
        if ($hubstaffUserId) {
            $task                      = new HubstaffTask();
            $task->hubstaff_task_id    = $hubstaffTaskId;
            $task->project_id          = $hubstaff_project_id;
            $task->hubstaff_project_id = $hubstaff_project_id;
            $task->summary             = $message;
            $task->save();
        }

        $taskUser             = new TaskUserHistory;
        $taskUser->model      = \App\Task::class;
        $taskUser->model_id   = $task->id;
        $taskUser->old_id     = $old_id;
        $taskUser->new_id     = $request->get('user_id');
        $taskUser->user_type  = 'developer';
        $taskUser->updated_by = Auth::user()->name;
        $taskUser->save();

        $values = [
            'task_id' => $request->get('issue_id'),
            'user_id' => $request->get('user_id'),
            'type'    => \App\User::class,
        ];
        DB::table('task_users')->insert($values);

        return response()->json(['status' => 'success']);
    }

    public function dropdownSlotWise()
    {
        try {
            $options = $this->userSchedulesLoadDataDropDown(request('userId'));

            $return = [];
            if (count($options)) {
                foreach ($options as $k => $v) {
                    $return[] = '<option value="' . $v . '">' . $v . '</option>';
                }
            }

            return response()->json(
                [
                    'list' => $return ? implode('', $return) : null,
                ]
            );
        } catch (\Throwable $th) {
            return respException($th);
        }
    }

    public function userSchedulesLoadDataDropDown($user_id)
    {
        $usertemp = 0;
        $count    = 0;
        $data     = [];

        $isPrint = ! request()->ajax();

        $stDate = $start_date = date('Y-m-d');
        $enDate = $start_date = date('Y-m-d', strtotime(' + 5 days'));

        if ($stDate && $enDate) {
            $filterDates    = dateRangeArr($stDate, $enDate);
            $filterDatesNew = [];
            foreach ($filterDates as $row) {
                $filterDatesNew[$row['date']] = $row;
            }

            $q = User::query();
            $q->leftJoin('user_avaibilities as ua', 'ua.user_id', '=', 'users.id');
            $q->where('users.is_task_planned', 1);
            $q->where('ua.is_latest', 1);
            if (! isAdmin()) {
                $q->where('users.id', loginId());
            }
            if ($srch = request('srchUser')) {
                $q->where('users.id', $srch);
            }
            if (request('is_active')) {
                $q->where('users.is_active', request('is_active') == 1 ? 1 : 0);
            }
            $q->select([
                'users.id',
                'users.name',
                \DB::raw('ua.id AS uaId'),
                \DB::raw('ua.date AS uaDays'),
                \DB::raw('ua.from AS uaFrom'),
                \DB::raw('ua.to AS uaTo'),
                \DB::raw('ua.start_time AS uaStTime'),
                \DB::raw('ua.end_time AS uaEnTime'),
                \DB::raw('ua.lunch_time AS uaLunchTime'),
                \DB::raw('ua.lunch_time_from AS lunch_time_from'),
                \DB::raw('ua.lunch_time_to AS lunch_time_to'),
            ]);
            $users = $q->get();
            $count = $users->count();

            if ($count) {
                $filterDatesOnly = array_column($filterDates, 'date');

                $userIds = [];

                // Prepare user's data
                $userArr = [];
                foreach ($users as $single) {
                    $userIds[] = $single->id;
                    if ($single->uaId) {
                        $single->uaStTime    = date('H:i:00', strtotime($single->uaStTime));
                        $single->uaEnTime    = date('H:i:00', strtotime($single->uaEnTime));
                        $single->uaLunchTime = $single->uaLunchTime ? date('H:i:00', strtotime($single->uaLunchTime)) : '';

                        $single->uaDays = $single->uaDays ? explode(',', str_replace(' ', '', $single->uaDays)) : [];
                        $availableDates = UserAvaibility::getAvailableDates($single->uaFrom, $single->uaTo, $single->uaDays, $filterDatesOnly);
                        $availableSlots = UserAvaibility::dateWiseHourlySlotsV2($availableDates, $single->uaStTime, $single->uaEnTime, $single->uaLunchTime, $single);

                        $userArr[] = [
                            'id'             => $single->id,
                            'name'           => $single->name,
                            'uaLunchTime'    => $single->uaLunchTime ? substr($single->uaLunchTime, 0, 5) : '',
                            'uaId'           => $single->uaId,
                            'uaDays'         => $single->uaDays,
                            'availableDays'  => $single->uaDays,
                            'availableDates' => $availableDates,
                            'availableSlots' => $availableSlots,
                        ];
                    } else {
                        $userArr[] = [
                            'id'             => $single->id,
                            'name'           => $single->name,
                            'uaLunchTime'    => null,
                            'uaId'           => null,
                            'uaDays'         => [],
                            'availableDays'  => [],
                            'availableDates' => [],
                            'availableSlots' => [],
                        ];
                    }
                }

                // Get Tasks & Developer Tasks -- Arrange with End time & Mins
                $tasksArr = [];
                if ($userIds) {
                    $tasksInProgress = $this->typeWiseTasks('IN_PROGRESS', [
                        'userIds' => $userIds,
                    ]);
                    $tasksPlanned = $this->typeWiseTasks('PLANNED', [
                        'userIds' => $userIds,
                    ]);

                    if ($tasksInProgress) {
                        foreach ($tasksInProgress as $task) {
                            $task->st_date = date('Y-m-d H:i:00', strtotime($task->st_date));

                            if (! isset($task->en_date)) {
                                $task->en_date = date('Y-m-d H:i:00', strtotime($task->st_date . ' + ' . $task->est_minutes . 'minutes'));
                            }
                            $tasksArr[$task->assigned_to][$task->status2][] = [
                                'id'              => $task->id,
                                'typeId'          => $task->type . '-' . $task->id,
                                'stDate'          => $task->st_date,
                                'enDate'          => $task->en_date,
                                'status'          => $task->status,
                                'status2'         => $task->status2,
                                'mins'            => $task->est_minutes,
                                'manually_assign' => $task->manually_assign,
                            ];
                        }
                    }
                    if ($tasksPlanned) {
                        foreach ($tasksPlanned as $task) {
                            $task->est_minutes                              = 20;
                            $task->st_date                                  = $task->st_date ?: date('Y-m-d H:i:00');
                            $task->en_date                                  = date('Y-m-d H:i:00', strtotime($task->st_date . ' + ' . $task->est_minutes . 'minutes'));
                            $tasksArr[$task->assigned_to][$task->status2][] = [
                                'id'              => $task->id,
                                'typeId'          => $task->type . '-' . $task->id,
                                'stDate'          => $task->st_date,
                                'enDate'          => $task->en_date,
                                'status'          => $task->status,
                                'status2'         => $task->status2,
                                'mins'            => $task->est_minutes,
                                'manually_assign' => $task->manually_assign,
                            ];
                        }
                    }
                }
                if ($isPrint) {
                    _p($tasksArr);
                }
                // Arrange tasks on users slots
                foreach ($userArr as $k1 => $user) {
                    $userTasksArr = isset($tasksArr[$user['id']]) && count($tasksArr[$user['id']]) ? $tasksArr[$user['id']] : [];
                    if ($user['uaId'] && isset($user['availableSlots']) && count($user['availableSlots'])) {
                        foreach ($user['availableSlots'] as $date => $slots) {
                            foreach ($slots as $k2 => $slot) {
                                if ($slot['type'] == 'AVL' || $slot['slot_type'] == 'AVL') {
                                    $res               = $this->slotIncreaseAndShift($slot, $userTasksArr);
                                    $userTasks         = $res['userTasks'] ?? [];
                                    $slot['taskIds']   = $res['taskIds'] ?? [];
                                    $slot['userTasks'] = $res['userTasks'] ?? [];
                                }
                                $slots[$k2] = $slot;
                            }

                            $user['availableSlots'][$date] = $slots;
                        }
                    }
                    $userArr[$k1] = $user;
                }

                if ($isPrint) {
                    _p($userArr);
                }

                // Arange for datatable
                foreach ($userArr as $user) {
                    if ($user['uaId'] && isset($user['availableSlots']) && count($user['availableSlots'])) {
                        foreach ($user['availableSlots'] as $date => $slots) {
                            $divSlots = [];
                            foreach ($slots as $slot) {
                                $title   = '';
                                $class   = '';
                                $display = [
                                    date('H:i', strtotime($slot['st'])),
                                    ' - ',
                                    date('H:i', strtotime($slot['en'])),
                                ];

                                if (in_array($slot['type'], ['AVL']) && $slot['slot_type'] != 'PAST') {
                                    $ut_array         = [];
                                    $ut_arrayManually = [];

                                    if (! empty($slot['userTasks'])) {
                                        foreach ($slot['userTasks'] as $ut) {
                                            if ($ut['manually_assign'] == 1) {
                                                array_push($ut_arrayManually, $ut['typeId']);
                                            } else {
                                                array_push($ut_array, $ut['typeId']);
                                            }
                                        }
                                    }

                                    $developerTaskID = $ut_array;
                                    if (! empty($developerTaskID)) {
                                        $display[] = ' (' . implode(', ', $developerTaskID) . ')';

                                        $title = [];
                                        foreach ($slot['taskIds'] as $taskId => $taskRow) {
                                            $title[] = $taskId . ' - (' . $taskRow['status2'] . ')';
                                        }
                                        $title = implode(PHP_EOL, $title);
                                    }

                                    $class = 'text-secondary';

                                    // $title
                                    $display = implode('', $display);

                                    $divSlots[] = $display;
                                }
                            }

                            for ($p = 0; $p < 13; $p++) {
                                $varid = 'slots' . $p;
                                if (isset($divSlots[$p])) {
                                    $str = str_replace('(AVL)', '<br>(AVL)', $divSlots[$p]);
                                    $str = str_replace('(LUNCH)', '<br>(LUNCH)', $divSlots[$p]);
                                    $str = str_replace('(PAST)', '<br>(PAST)', $divSlots[$p]);

                                    $data[] = $date . ' (' . $str . ')';
                                }
                            }

                            $usertemp = $usertemp + 1;
                        }
                    }
                }
            }

            return $data;
        }
    }

    public function userSchedulesLoadData($user_id)
    {
        $usertemp = 0;
        $count    = 0;
        $data     = [];

        $isPrint = ! request()->ajax();

        $stDate = $start_date = date('Y-m-d');
        $enDate = $start_date = date('Y-m-d', strtotime(' + 30 days'));
        if ($stDate && $enDate) {
            $filterDates    = dateRangeArr($stDate, $enDate);
            $filterDatesNew = [];
            foreach ($filterDates as $row) {
                $filterDatesNew[$row['date']] = $row;
            }

            $q = User::query();
            $q->leftJoin('user_avaibilities as ua', 'ua.user_id', '=', 'users.id');
            $q->where('users.is_task_planned', 1);
            $q->where('ua.is_latest', 1);
            if (! isAdmin()) {
                $q->where('users.id', loginId());
            }

            $q->where('users.id', $user_id);

            if (request('is_active')) {
                $q->where('users.is_active', request('is_active') == 1 ? 1 : 0);
            }
            $q->select([
                'users.id',
                'users.name',
                \DB::raw('ua.id AS uaId'),
                \DB::raw('ua.date AS uaDays'),
                \DB::raw('ua.from AS uaFrom'),
                \DB::raw('ua.to AS uaTo'),
                \DB::raw('ua.start_time AS uaStTime'),
                \DB::raw('ua.end_time AS uaEnTime'),
                \DB::raw('ua.lunch_time AS uaLunchTime'),
                \DB::raw('ua.lunch_time_from AS lunch_time_from'),
                \DB::raw('ua.lunch_time_to AS lunch_time_to'),
            ]);
            $users = $q->get();
            $count = $users->count();

            if ($count) {
                $filterDatesOnly = array_column($filterDates, 'date');

                $userIds = [];

                // Prepare user's data
                $userArr = [];
                foreach ($users as $single) {
                    $userIds[] = $single->id;
                    if ($single->uaId) {
                        $single->uaStTime    = date('H:i:00', strtotime($single->uaStTime));
                        $single->uaEnTime    = date('H:i:00', strtotime($single->uaEnTime));
                        $single->uaLunchTime = $single->uaLunchTime ? date('H:i:00', strtotime($single->uaLunchTime)) : '';

                        $single->uaDays = $single->uaDays ? explode(',', str_replace(' ', '', $single->uaDays)) : [];
                        $availableDates = UserAvaibility::getAvailableDates($single->uaFrom, $single->uaTo, $single->uaDays, $filterDatesOnly);
                        $availableSlots = UserAvaibility::dateWiseHourlySlotsV2($availableDates, $single->uaStTime, $single->uaEnTime, $single->uaLunchTime, $single);

                        $userArr[] = [
                            'id'             => $single->id,
                            'name'           => $single->name,
                            'uaLunchTime'    => $single->uaLunchTime ? substr($single->uaLunchTime, 0, 5) : '',
                            'uaId'           => $single->uaId,
                            'uaDays'         => $single->uaDays,
                            'availableDays'  => $single->uaDays,
                            'availableDates' => $availableDates,
                            'availableSlots' => $availableSlots,
                        ];
                    } else {
                        $userArr[] = [
                            'id'             => $single->id,
                            'name'           => $single->name,
                            'uaLunchTime'    => null,
                            'uaId'           => null,
                            'uaDays'         => [],
                            'availableDays'  => [],
                            'availableDates' => [],
                            'availableSlots' => [],
                        ];
                    }
                }

                // Get Tasks & Developer Tasks -- Arrange with End time & Mins
                $tasksArr = [];
                if ($userIds) {
                    $tasksInProgress = $this->typeWiseTasks('IN_PROGRESS', [
                        'userIds' => $userIds,
                    ]);
                    $tasksPlanned = $this->typeWiseTasks('PLANNED', [
                        'userIds' => $userIds,
                    ]);

                    if ($tasksInProgress) {
                        foreach ($tasksInProgress as $task) {
                            $task->st_date = date('Y-m-d H:i:00', strtotime($task->st_date));

                            if (! isset($task->en_date)) {
                                $task->en_date = date('Y-m-d H:i:00', strtotime($task->st_date . ' + ' . $task->est_minutes . 'minutes'));
                            }
                            $tasksArr[$task->assigned_to][$task->status2][] = [
                                'id'              => $task->id,
                                'typeId'          => $task->type . '-' . $task->id,
                                'stDate'          => $task->st_date,
                                'enDate'          => $task->en_date,
                                'status'          => $task->status,
                                'status2'         => $task->status2,
                                'mins'            => $task->est_minutes,
                                'manually_assign' => $task->manually_assign,
                            ];
                        }
                    }
                    if ($tasksPlanned) {
                        foreach ($tasksPlanned as $task) {
                            $task->est_minutes                              = 20;
                            $task->st_date                                  = $task->st_date ?: date('Y-m-d H:i:00');
                            $task->en_date                                  = date('Y-m-d H:i:00', strtotime($task->st_date . ' + ' . $task->est_minutes . 'minutes'));
                            $tasksArr[$task->assigned_to][$task->status2][] = [
                                'id'              => $task->id,
                                'typeId'          => $task->type . '-' . $task->id,
                                'stDate'          => $task->st_date,
                                'enDate'          => $task->en_date,
                                'status'          => $task->status,
                                'status2'         => $task->status2,
                                'mins'            => $task->est_minutes,
                                'manually_assign' => $task->manually_assign,
                            ];
                        }
                    }
                }
                if ($isPrint) {
                    _p($tasksArr);
                }
                // Arrange tasks on users slots
                foreach ($userArr as $k1 => $user) {
                    $userTasksArr = isset($tasksArr[$user['id']]) && count($tasksArr[$user['id']]) ? $tasksArr[$user['id']] : [];
                    if ($user['uaId'] && isset($user['availableSlots']) && count($user['availableSlots'])) {
                        foreach ($user['availableSlots'] as $date => $slots) {
                            foreach ($slots as $k2 => $slot) {
                                if ($slot['type'] == 'AVL' || $slot['slot_type'] == 'AVL') {
                                    $res = $this->slotIncreaseAndShift($slot, $userTasksArr);

                                    $userTasks         = $res['userTasks'] ?? [];
                                    $slot['taskIds']   = $res['taskIds'] ?? [];
                                    $slot['userTasks'] = $res['userTasks'] ?? [];
                                }
                                $slots[$k2] = $slot;
                            }

                            $user['availableSlots'][$date] = $slots;
                        }
                    }
                    $userArr[$k1] = $user;
                }

                if ($isPrint) {
                    _p($userArr);
                }

                // Arange for datatable
                foreach ($userArr as $user) {
                    if ($user['uaId'] && isset($user['availableSlots']) && count($user['availableSlots'])) {
                        foreach ($user['availableSlots'] as $date => $slots) {
                            $divSlots = [];
                            foreach ($slots as $slot) {
                                $title   = '';
                                $class   = '';
                                $display = [
                                    date('H:i', strtotime($slot['st'])),
                                    ' - ',
                                    date('H:i', strtotime($slot['en'])),
                                ];

                                $displayManually = [
                                    date('H:i', strtotime($slot['st'])),
                                    ' - ',
                                    date('H:i', strtotime($slot['en'])),
                                ];

                                $displayManually = [];

                                if (in_array($slot['type'], ['AVL', 'SMALL-LUNCH', 'LUNCH-START', 'LUNCH-END']) && $slot['slot_type'] != 'PAST') {
                                    $ut_array         = [];
                                    $ut_arrayManually = [];

                                    if (! empty($slot['userTasks'])) {
                                        foreach ($slot['userTasks'] as $ut) {
                                            if ($ut['manually_assign'] == 1) {
                                                array_push($ut_arrayManually, $ut['typeId']);
                                            } else {
                                                array_push($ut_array, $ut['typeId']);
                                            }
                                        }
                                    } else {
                                        if ($slot['type'] == 'AVL') {
                                            return $slot;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    public function typeWiseTasks($type, $wh = [])
    {
        $userIds         = $wh['userIds'] ?? [0];
        $taskStatuses    = [0];
        $devTaskStatuses = ['none'];

        if ($type == 'IN_PROGRESS') {
            $taskStatuses = [
                Task::TASK_STATUS_IN_PROGRESS,
            ];
            $devTaskStatuses = [
                DeveloperTask::DEV_TASK_STATUS_IN_PROGRESS,
            ];
        } elseif ($type == 'PLANNED') {
            $taskStatuses = [
                Task::TASK_STATUS_PLANNED,
            ];
            $devTaskStatuses = [
                DeveloperTask::DEV_TASK_STATUS_PLANNED,
            ];
        }

        // start_date IS NOT NULL AND approximate > 0
        // start_date IS NOT NULL AND estimate_minutes > 0

        $sql = "SELECT
            listdata.*
            FROM (
            (
                SELECT 
                    id, 
                    'T' AS type, 
                    assign_to AS assigned_to, 
                    manually_assign, 
                    task_subject AS title, 
                    start_date AS st_date, 
                    due_date AS en_date, 
                    COALESCE(approximate, 0) AS est_minutes, 
                    status,
                    (
                        CASE
                            WHEN status = '" . Task::TASK_STATUS_IN_PROGRESS . "' THEN 'IN_PROGRESS'
                            WHEN status = '" . Task::TASK_STATUS_PLANNED . "' THEN 'PLANNED'
                        END
                    ) AS status2
                FROM 
                    tasks 
                WHERE 
                1
                AND (
                    ( status = '" . Task::TASK_STATUS_IN_PROGRESS . "' AND start_date IS NOT NULL )
                    OR 
                    ( status != '" . Task::TASK_STATUS_IN_PROGRESS . "' )
                )
                AND deleted_at IS NULL
                AND assign_to IN (" . implode(',', $userIds) . ") 
                AND status IN ('" . implode("','", $taskStatuses) . "') 
            )
            UNION
            (
                SELECT 
                    id, 
                    'DT' AS type, 
                    assigned_to AS assigned_to, 
                    manually_assign, 
                    subject AS title, 
                    start_date AS st_date, 
                    estimate_date AS en_date, 
                    COALESCE(estimate_minutes, 0) AS est_minutes, 
                    status,
                    (
                        CASE
                            WHEN status = '" . DeveloperTask::DEV_TASK_STATUS_IN_PROGRESS . "' THEN 'IN_PROGRESS'
                            WHEN status = '" . DeveloperTask::DEV_TASK_STATUS_PLANNED . "' THEN 'PLANNED'
                        END
                    ) AS status2
                FROM developer_tasks
                WHERE 1
                AND (
                    ( status = '" . DeveloperTask::DEV_TASK_STATUS_IN_PROGRESS . "' AND start_date IS NOT NULL )
                    OR 
                    ( status != '" . DeveloperTask::DEV_TASK_STATUS_IN_PROGRESS . "' )
                )
                AND deleted_at IS NULL
                AND assigned_to IN (" . implode(',', $userIds) . ")
                AND status IN ('" . implode("','", $devTaskStatuses) . "')
            )
        ) AS listdata
        ORDER BY listdata.st_date ASC";

        $tasks = \DB::select($sql, []);

        return $tasks;
    }

    public function slotIncreaseAndShift($slot, $tasks)
    {
        // IN_PROGRESS, PLANNED
        $checkDates = 0;

        $taskIds   = [];
        $userTasks = [];

        if ($tasks) {
            if ($list = ($tasks['IN_PROGRESS'] ?? [])) {
                foreach ($list as $k => $task) {
                    $SlotStart = Carbon::parse($slot['st']);
                    $SlotEnd   = Carbon::parse($slot['en']);
                    $TaskStart = Carbon::parse($task['stDate']);
                    $TaskEnd   = Carbon::parse($task['enDate']);

                    if (
                        ($TaskStart->gte($SlotStart) && $TaskStart->lte($SlotEnd)) ||
                        ($TaskEnd->gte($SlotStart) && $TaskEnd->lte($SlotEnd))
                    ) {
                        array_push($userTasks, $task);
                    } elseif ($TaskStart->lte($SlotStart) && $TaskEnd->gte($SlotEnd)) {
                        array_push($userTasks, $task);
                    }
                }
                $list                 = array_values($list);
                $tasks['IN_PROGRESS'] = $list;
            }

            if ($list = ($tasks['PLANNED'] ?? [])) {
                foreach ($list as $k => $task) {
                    $SlotStart = Carbon::parse($slot['st']);
                    $SlotEnd   = Carbon::parse($slot['en']);
                    $TaskStart = Carbon::parse($task['stDate']);
                    $TaskEnd   = Carbon::parse($task['enDate']);

                    if (
                        ($TaskStart->gte($SlotStart) && $TaskStart->lte($SlotEnd)) ||
                        ($TaskEnd->gte($SlotStart) && $TaskEnd->lte($SlotEnd))
                    ) {
                        array_push($userTasks, $task);
                    } elseif ($TaskStart->lte($SlotStart) && $TaskEnd->gte($SlotEnd)) {
                        array_push($userTasks, $task);
                    }
                }
                $list             = array_values($list);
                $tasks['PLANNED'] = $list;
            }
        }
        // print_r($userTasks);
        return [
            'taskIds'   => $taskIds ?? [],
            'userTasks' => $userTasks ?? [],
        ];
    }

    /**
     * return branch name or false
     *
     * @param mixed $repositoryId
     * @param mixed $taskId
     * @param mixed $taskTitle
     * @param mixed $branchName
     */
    private function createBranchOnGithub($repositoryId, $taskId, $taskTitle, $branchName = 'master')
    {
        $newBranchName = 'DEVTASK-' . $taskId;

        // get the master branch SHA
        // https://api.github.com/repositories/:repoId/branches/master
        $url = 'https://api.github.com/repositories/' . $repositoryId . '/branches/' . $branchName;
        try {
            $response  = $this->githubClient->get($url);
            $masterSha = json_decode($response->getBody()->getContents())->commit->sha;
        } catch (Exception $e) {
            return false;
        }

        // create a branch
        // https://api.github.com/repositories/:repo/git/refs
        $url = 'https://api.github.com/repositories/' . $repositoryId . '/git/refs';
        try {
            $this->githubClient->post(
                $url, [
                    RequestOptions::BODY => json_encode(
                        [
                            'ref' => 'refs/heads/' . $newBranchName,
                            'sha' => $masterSha,
                        ]
                    ),
                ]
            );

            return $newBranchName;
        } catch (Exception $e) {
            if ($e instanceof ClientException && $e->getResponse()->getStatusCode() == 422) {
                // branch already exists
                return $newBranchName;
            }

            return false;
        }
    }

    public function getUserHistory(Request $request)
    {
        if (isset($request->type)) {
            if ($request->type == 'developer') {
                $users = TaskUserHistory::where('model', \App\DeveloperTask::class)->where('model_id', $request->id)->get();
            } else {
                $users = TaskUserHistory::where('model', \App\Task::class)->where('model_id', $request->id)->get();
            }
        } else {
            $users = TaskUserHistory::where('model', \App\Task::class)->where('model_id', $request->id)->get();
        }

        foreach ($users as $u) {
            $old_name = null;
            $new_name = null;
            if ($u->old_id) {
                $old_name = User::find($u->old_id)->name;
            }
            if ($u->new_id) {
                $new_name = User::find($u->new_id)->name;
            }
            $u->new_name = $new_name;
            $u->old_name = $old_name;
        }

        return response()->json(
            [
                'users' => $users,
            ], 200
        );
    }

    public function getSiteDevelopmentTask(Request $request)
    {
        $site_developement_id = \App\SiteDevelopment::where('website_id', $request->site_id)->pluck('id');
        $merged               = [];
        if (! empty($site_developement_id)) {
            $taskStatistics['Devtask'] = DeveloperTask::whereIn('site_developement_id', $site_developement_id)->where('status', '!=', 'Done')->select();

            $query               = DeveloperTask::join('users', 'users.id', 'developer_tasks.assigned_to')->whereIn('site_developement_id', $site_developement_id)->where('status', '!=', 'Done')->select('developer_tasks.id', 'developer_tasks.task as subject', 'developer_tasks.status', 'users.name as assigned_to_name');
            $query               = $query->addSelect(DB::raw("'Devtask' as task_type,'developer_task' as message_type"));
            $taskStatistics      = $query->get();
            $othertask           = Task::whereIn('site_developement_id', $site_developement_id)->whereNull('is_completed')->select();
            $query1              = Task::join('users', 'users.id', 'tasks.assign_to')->whereIn('site_developement_id', $site_developement_id)->whereNull('is_completed')->select('tasks.id', 'tasks.task_subject as subject', 'tasks.assign_status', 'users.name as assigned_to_name');
            $query1              = $query1->addSelect(DB::raw("'Othertask' as task_type,'task' as message_type"));
            $othertaskStatistics = $query1->get();
            $merged              = $othertaskStatistics->merge($taskStatistics);
        }

        return response()->json(
            [
                'code'           => 200,
                'taskStatistics' => $merged,
            ]
        );
    }

    /*
    * AssignMultipleTaskToUser : Assign multiple task to user
    * DEVTASK-21672
    */
    public function AssignMultipleTaskToUser(Request $request)
    {
        $tasks = $request->get('taskIDs');
        if (count($tasks) > 0) {
            foreach ($tasks as $tsk) {
                $task   = Task::find($tsk);
                $old_id = $task->assign_to;
                if (! $old_id) {
                    $old_id = 0;
                } else {
                    DB::delete(
                        'delete from task_users where task_id = ? AND user_id = ? AND type = ?', [
                            $task->id,
                            $old_id,
                            User::class,
                        ]
                    );
                }
                $task->assign_to = $request->get('user_assigned_to');
                $task->save();
                $hubstaff_project_id = config('env.HUBSTAFF_BULK_IMPORT_PROJECT_ID');

                $assignedUser = HubstaffMember::where('user_id', $request->input('user_assigned_to'))->first();

                $hubstaffUserId = null;
                if ($assignedUser) {
                    $hubstaffUserId = $assignedUser->hubstaff_user_id;
                }
                if ($task->is_statutory != 1) {
                    $message = '#' . $task->id . '. ' . $task->task_subject . '. ' . $task->task_details;
                } else {
                    $message = $task->task_subject . '. ' . $task->task_details;
                }

                $taskSummery = substr($message, 0, 200);

                $hubstaffTaskId = $this->createHubstaffTask(
                    $taskSummery, $hubstaffUserId, $hubstaff_project_id
                );

                if ($hubstaffTaskId) {
                    $task->hubstaff_task_id = $hubstaffTaskId;
                    $task->save();
                }
                if ($hubstaffUserId) {
                    $task                      = new HubstaffTask();
                    $task->hubstaff_task_id    = $hubstaffTaskId;
                    $task->project_id          = $hubstaff_project_id;
                    $task->hubstaff_project_id = $hubstaff_project_id;
                    $task->summary             = $message;
                    $task->save();
                }

                $taskUser             = new TaskUserHistory;
                $taskUser->model      = \App\Task::class;
                $taskUser->model_id   = $task->id;
                $taskUser->old_id     = $old_id;
                $taskUser->new_id     = $request->get('user_assigned_to');
                $taskUser->user_type  = 'developer';
                $taskUser->updated_by = Auth::user()->name;
                $taskUser->save();

                $values = [
                    'task_id' => $task->id,
                    'user_id' => $request->get('user_assigned_to'),
                    'type'    => \App\User::class,
                ];
                DB::table('task_users')->insert($values);
            }
        }

        return redirect('/development/automatic/tasks')->withSuccess('You have successfully assigned task!');
    }

    public function dropdownUserWise()
    {
        try {
            $dataArr = [];
            if ($userId = request('userId')) {
                $dTasks = DeveloperTask::where('assigned_to', $userId)->whereNotIn(
                    'status', [
                        DeveloperTask::DEV_TASK_STATUS_APPROVED,
                        DeveloperTask::DEV_TASK_STATUS_IN_PROGRESS,
                        DeveloperTask::DEV_TASK_STATUS_REOPEN,
                        DeveloperTask::DEV_TASK_STATUS_PLANNED,
                    ]
                )->orderBy('id', 'DESC')->get();
                foreach ($dTasks as $key => $dTask) {
                    $dataArr['Developer Tasks']['DT-' . $dTask->id] = '(DT-' . $dTask->id . ') - ' . $dTask->subject;
                }

                $tasks = Task::where('assign_to', $userId)->whereNotIn(
                    'status', [
                        Task::TASK_STATUS_APPROVED,
                        Task::TASK_STATUS_IN_PROGRESS,
                        Task::TASK_STATUS_REOPEN,
                        Task::TASK_STATUS_PLANNED,
                    ]
                )->orderBy('id', 'DESC')->get();
                foreach ($tasks as $key => $task) {
                    $dataArr['Tasks']['T-' . $task->id] = '(T-' . $task->id . ') - ' . $task->task_subject;
                }
            }

            return response()->json(
                [
                    'list' => $dataArr ? makeDropdown($dataArr) : null,
                ]
            );
        } catch (\Throwable $th) {
            return respException($th);
        }
    }

    public function slotMove()
    {
        try {
            if (! empty(request('tasks'))) {
                $tasks = explode(',', request('tasks'));
            }

            if (! empty(request('dev_tasks'))) {
                $dev_tasks = explode(',', request('dev_tasks'));
            }

            $phrase  = request('taskTime');
            $healthy = ['(', ')'];
            $yummy   = ['', ''];

            $newPhrase = str_replace($healthy, $yummy, $phrase);

            $taskTime = explode(' ', $newPhrase);

            if (! empty($tasks)) {
                foreach ($tasks as $key => $value) {
                    $task = Task::find($value);

                    if ($task) {
                        $task->start_date = $taskTime[0] . ' ' . $taskTime[1];
                        $task->due_date   = $taskTime[0] . ' ' . $taskTime[2];

                        $task->save();
                    }
                }
            }

            if (! empty($dev_tasks)) {
                foreach ($dev_tasks as $key => $value) {
                    $task = DeveloperTask::find($value);

                    if ($task) {
                        $task->start_date    = $taskTime[0] . ' ' . $taskTime[1];
                        $task->estimate_date = $taskTime[0] . ' ' . $taskTime[3];

                        $task->save();
                    }
                }
            }

            return respJson(200, 'Time slot updated successfully.');
        } catch (\Throwable $th) {
            return response()->json(['message' => $th->getMessage()], 500);
        }
    }

    public function slotAssign()
    {
        try {
            $newValue = request('date') . ' ' . request('slot') . ':00';
            if ($id = isDeveloperTaskId(request('taskId'))) {
                if ($single = DeveloperTask::find($id)) {
                    if (! empty($single->estimate_date) || ! empty($single->start_date)) {
                        throw new Exception('You already have updated your estimate date.');
                    }
                    if (empty($single->estimate_minutes) || $single->estimate_minutes == null || $single->estimate_minutes == '') {
                        throw new Exception('Update your estimate time first.');
                    }

                    $oldValue = $single->start_date;
                    if ($oldValue == $newValue) {
                        return respJson(400, 'No change in time slot.');
                    }

                    $single->slotTaskRemarks = request('slotTaskRemarks');
                    $single->status          = 'Planned';
                    $single->manually_assign = 1;
                    $single->start_date      = $newValue;
                    $single->estimate_date   = date('Y-m-d H:i:00', strtotime($single->start_date . " +$single->estimate_minutes minute"));

                    $single->save();
                    $single->updateHistory('start_date', $oldValue, $newValue);

                    return respJson(200, 'Time slot updated successfully.');
                }
            } elseif ($id = isRegularTaskId(request('taskId'))) {
                if ($single = Task::find($id)) {
                    if (! empty($single->due_date) || ! empty($single->start_date)) {
                        throw new Exception('You already have updated your estimate date.');
                    }

                    if (empty($single->approximate) || $single->approximate == null || $single->approximate == '' || $single->approximate == 0) {
                        throw new Exception('Update your estimate time first.');
                    }

                    $single->slotTaskRemarks = request('slotTaskRemarks');
                    $single->manually_assign = 1;
                    $oldValue                = $single->start_date;

                    $single->start_date = $newValue;
                    $single->due_date   = date('Y-m-d H:i:00', strtotime($single->start_date . " +$single->approximate minute"));

                    $single->save();

                    TaskHistoryForStartDate::historySave($single->id, $oldValue, $newValue, 0);

                    return respJson(200, 'Time slot updated successfully.');
                }
            }

            return respJson(404, 'No task found.');
        } catch (\Throwable $th) {
            return response()->json(['message' => $th->getMessage()], 500);
        }
    }

    public function taskGet()
    {
        try {
            $errors = reqValidate(
                request()->all(), [
                    'id' => 'required',
                ], []
            );
            if ($errors) {
                return respJson(400, $errors[0]);
            }
            $subquery = DB::raw('SELECT remark FROM developer_tasks_history WHERE developer_task_id=tasks.id ORDER BY id DESC');
            $single   = Task::where('tasks.id', request('id'))->select(
                'tasks.*', DB::raw('(SELECT remark FROM developer_tasks_history WHERE developer_task_id=tasks.id ORDER BY id DESC LIMIT 1) as task_remark'), DB::raw('(SELECT new_value FROM task_history_for_start_date WHERE task_id=tasks.id ORDER BY id DESC LIMIT 1) as task_start_date'), DB::raw("(SELECT new_due_date FROM task_due_date_history_logs WHERE task_id=tasks.id AND task_type='TASK' ORDER BY id DESC LIMIT 1) as task_new_due_date")
            )->first();
            if (! $single) {
                return respJson(404, 'No task found.');
            }

            return respJson(
                200, '', [
                    'data' => $single,
                    'user' => $single->assignedTo ?? null,
                ]
            );
        } catch (\Throwable $th) {
            return respException($th);
        }
    }

    public function taskUpdateStartDate()
    {
        if ($new = request('value')) {
            try {
                if ($task = Task::find(request('task_id'))) {
                    if ($task->assign_to == Auth::user()->id) {
                        $params['message']  = 'Estimated Start Datetime: ' . $new;
                        $params['user_id']  = Auth::user()->id;
                        $params['task_id']  = $task->id;
                        $params['approved'] = 1;
                        $params['status']   = 2;
                        ChatMessage::create($params);
                    }
                    $task->updateStartDate($new);

                    return respJson(200, 'Successfully updated.');
                }
            } catch (Exception $e) {
                return respJson(404, $e->getMessage());
            }

            return respJson(404, 'No task found.');
        }

        return respJson(400, 'Start date is required.');
    }

    public function taskUpdateDueDate()
    {
        if ($new = request('value')) {
            try {
                if ($task = Task::find(request('task_id'))) {
                    if ($task->assign_to == Auth::user()->id) {
                        $params['message']  = 'Estimated End Datetime: ' . $new;
                        $params['user_id']  = Auth::user()->id;
                        $params['task_id']  = $task->id;
                        $params['approved'] = 1;
                        $params['status']   = 2;
                        ChatMessage::create($params);
                    }
                    $task->updateDueDate($new);

                    return respJson(200, 'Successfully updated.');
                }
            } catch (Exception $e) {
                return respJson(404, $e->getMessage());
            }

            return respJson(404, 'No task found.');
        }

        return respJson(400, 'Due date is required.');
    }

    public function updateCost()
    {
        if (! isAdmin()) {
            return respJson(403, 'Not authorized for users to update cost.');
        }
        $new = request('cost');
        if (is_numeric($new)) {
            if ($task = Task::find(request('task_id'))) {
                $oldValue = $task->cost;
                if ($task->assign_to == Auth::user()->id) {
                    $params['message']  = 'New Cost: ' . $new;
                    $params['user_id']  = Auth::user()->id;
                    $params['task_id']  = $task->id;
                    $params['approved'] = 1;
                    $params['status']   = 2;
                    ChatMessage::create($params);
                }
                $task->update(['cost' => $new]);
                TaskHistoryForCost::create(
                    [
                        'task_id'    => $task->id,
                        'old_value'  => $oldValue,
                        'new_value'  => $new,
                        'updated_by' => Auth::id(),
                    ]
                );

                return respJson(200, 'Successfully updated.');
            }

            return respJson(404, 'No task found.');
        }

        return respJson(400, 'Cost must be numeric.');
    }

    public function updateApproximate()
    {
        $task_id     = request('task_id');
        $approximate = request('approximate');
        $remark      = request('remark');

        if (! is_numeric($approximate)) {
            return respJson(400, 'Estimated time must be numeric.');
        }
        if ($task = Task::find($task_id)) {
            if (! isAdmin() && $task->assign_to != loginId()) {
                return respJson(403, 'Unauthorized access.');
            }
            if ($task->assign_to == Auth::user()->id) {
                $params['message']  = 'Estimated Time: [In Minutes] ' . $approximate . ',  ' . 'Remark: ' . $remark;
                $params['user_id']  = Auth::user()->id;
                $params['task_id']  = $task_id;
                $params['approved'] = 1;
                $params['status']   = 2;
                ChatMessage::create($params);
            }

            DeveloperTaskHistory::create(
                [
                    'developer_task_id' => $task->id,
                    'model'             => \App\Task::class,
                    'attribute'         => 'estimation_minute',
                    'old_value'         => $task->approximate,
                    'remark'            => $remark ?: null,
                    'new_value'         => $approximate,
                    'user_id'           => auth()->id(),
                ]
            );

            if (! isAdmin()) {
                $task->status = Task::TASK_STATUS_USER_ESTIMATED;
            }
            $task->approximate = $approximate;
            $task->save();

            if (Auth::user()->isAdmin()) {
                $user = User::find($task->assign_to);
                $msg  = 'TIME ESTIMATED BY ADMIN FOR TASK ' . '#DEVTASK-' . $task->id . '-' . $task->subject . ' ' . $approximate . ' MINS';
            } else {
                $user = User::find($task->master_user_id);
                $msg  = 'TIME ESTIMATED BY USER FOR TASK ' . '#DEVTASK-' . $task->id . '-' . $task->subject . ' ' . $approximate . ' MINS';
            }
            if ($user) {
                if ($receiver_user_phone = $user->phone) {
                    $chat = ChatMessage::create(
                        [
                            'number'            => $receiver_user_phone,
                            'user_id'           => $user->id,
                            'customer_id'       => $user->id,
                            'message'           => $msg,
                            'status'            => 0,
                            'developer_task_id' => $task_id,
                        ]
                    );
                    app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($receiver_user_phone, $user->whatsapp_number, $msg, false, $chat->id);
                }
            }

            return respJson(200, 'Estimation updated successfully.');
        }

        return respJson(404, 'No task found.');
    }

    /**
     * Upload a task file to google drive
     */
    public function uploadFile(Request $request)
    {
        $request->validate([
            'file'               => 'required',
            'file_creation_date' => 'required',
            'remarks'            => 'sometimes',
            'task_id'            => 'required',
            'file_read'          => 'sometimes',
            'file_write'         => 'sometimes',
        ]);

        $data = $request->all();
        try {
            foreach ($data['file'] as $file) {
                DB::transaction(function () use ($file, $data) {
                    $task             = Task::find($data['task_id']);
                    $googleScreencast = new GoogleScreencast();

                    $googleScreencast->file_name = $file->getClientOriginalName();
                    $googleScreencast->file_name .= " (TASK-$task->id " . ($task->task_subject ?? '-') . ')';

                    $googleScreencast->extension = $file->extension();
                    $googleScreencast->user_id   = Auth::id();

                    $googleScreencast->read  = '';
                    $googleScreencast->write = '';

                    $googleScreencast->remarks            = $data['remarks'];
                    $googleScreencast->file_creation_date = $data['file_creation_date'];

                    $googleScreencast->belongable_id   = $data['task_id'];
                    $googleScreencast->belongable_type = Task::class;
                    $googleScreencast->save();
                    UploadGoogleDriveScreencast::dispatchNow($googleScreencast, $file);
                });
            }

            return back()->with('success', 'File is Uploaded to Google Drive.');
        } catch (Exception $e) {
            \Log::error($e->getMessage());

            return back()->with('error', 'Something went wrong. Please try again');
        }
    }

    /**
     * This function will return a list of files which are uploaded under uicheck class
     */
    public function getUploadedFilesList(Request $request)
    {
        try {
            $result = [];
            if (isset($request->task_id)) {
                $result = GoogleScreencast::where('belongable_type', Task::class)->where('belongable_id', $request->task_id)->orderBy('id', 'desc')->with('user')->get();
                if (isset($result) && count($result) > 0) {
                    $result = $result->toArray();
                }

                return response()->json([
                    'data' => view('task-module.google-drive-list', compact('result'))->render(),
                ]);
            } else {
                throw new Exception('Task not found');
            }
        } catch (Exception $e) {
            \Log::error($e->getMessage());

            return response()->json([
                'data' => view('task-module.google-drive-list', ['result' => null])->render(),
            ]);
        }
    }

    public function taskModuleListLogHistory(Request $request)
    {
        $logs = TaskHubstaffCreateLog::with(['user', 'task'])
            ->where('task_id', $request->id)->get();

        return response()->json([
            'status'      => true,
            'data'        => $logs,
            'message'     => 'Successfully get Logs history status',
            'status_name' => 'success',
        ], 200);
    }

    public function deleteDevTask(Request $request)
    {
        $id = $request->input('id');
        if ($request->tasktype == 'Devtask') {
            $task = DeveloperTask::find($id);
        } elseif ($request->tasktype == 'Othertask') {
            $task = Task::find($id);
        }

        if ($task) {
            $task->delete();
        }

        if ($request->ajax()) {
            return response()->json(['code' => 200]);
        }
    }

    public function startTimeHistory(Request $request)
    {
        $task = Task::find($request->developer_task_id);

        if ($request->task_type == 1) {
            $input['m_start_date'] = Carbon::now();
            $input['task_start']   = 1;
            $input['status']       = 5;

            $history             = new TaskStartEndHistory();
            $history->user_id    = auth()->user()->id;
            $history->task_id    = $request->developer_task_id;
            $history->start_date = Carbon::now();
            $history->save();
        } elseif ($request->task_type == 2) {
            $input['m_end_date'] = Carbon::now();
            $input['task_start'] = 3;

            $history = TaskStartEndHistory::where('task_id', $request->developer_task_id)->orderBy('id', 'DESC')->first();

            if (! empty($history)) {
                $history->end_date = Carbon::now();
                $history->save();
            }
        }

        $task->update($input);

        return response()->json(['msg' => 'success']);
    }

    public function getTimeHistoryStartEnd(Request $request)
    {
        $id = $request->id;

        $task_histories = TaskStartEndHistory::where('task_id', $id)->orderBy('id', 'DESC')->get();

        return response()->json(['histories' => $task_histories]);
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/TimeDoctorActivitiesController.php 
Content: <?php

namespace App\Http\Controllers;

use DB;
use Auth;
use App\Task;
use App\Team;
use App\User;
use App\Payment;
use App\UserRate;
use Carbon\Carbon;
use App\DeveloperTask;
use App\PayentMailData;
use App\PaymentReceipt;
use App\UserAvaibility;
use Illuminate\Http\Request;
use App\DeveloperTaskHistory;
use App\TimeDoctor\TimeDoctorTask;
use App\Mails\Manual\DocumentEmail;
use Illuminate\Support\Facades\Log;
use App\TimeDoctor\TimeDoctorMember;
use Maatwebsite\Excel\Facades\Excel;
use App\TimeDoctor\TimeDoctorActivity;
use App\TimeDoctor\TimeDoctorTaskNote;
use App\Exports\TimeDoctorActivityReport;
use Illuminate\Support\Facades\Validator;
use App\Library\TimeDoctor\Src\Timedoctor;
use App\Loggers\TimeDoctorCommandLogMessage;
use App\TimeDoctor\TimeDoctorTaskEfficiency;
use App\Exports\TimeDoctorNotificationReport;
use App\TimeDoctor\TimeDoctorActivitySummary;
use App\TimeDoctor\TimeDoctorActivityByPaymentFrequency;

class TimeDoctorActivitiesController extends Controller
{
    public $timedoctor;

    public function __construct()
    {
        $this->timedoctor = Timedoctor::getInstance();
    }

    public function index()
    {
        $title = 'Time Doctor Activities';

        return view('time-doctor.activities.index', compact('title'));
    }

    public function notification()
    {
        $title = 'Time Doctor Notification';

        $users = User::orderBy('name')->get();

        return view('time-doctor.activities.notification.index', compact('title', 'users'));
    }

    public function notificationRecords(Request $request)
    {
        $records = \App\TimeDoctor\TimeDoctorActivityNotification::join('users as u', 'time_doctor_activity_notifications.user_id', 'u.id');

        $records->leftJoin('user_avaibilities as av', 'time_doctor_activity_notifications.user_id', 'av.user_id');
        $records->where('av.is_latest', 1);

        $keyword = request('keyword');
        if (! empty($keyword)) {
            $records = $records->where(function ($q) use ($keyword) {
                $q->where('u.name', 'LIKE', "%$keyword%");
            });
        }

        if (! empty($request->user_id)) {
            $records = $records->where('time_doctor_activity_notifications.user_id', $request->user_id);
        }

        if ($request->start_date != null) {
            $records = $records->whereDate('start_date', '>=', $request->start_date . ' 00:00:00');
        }

        if ($request->end_date != null) {
            $records = $records->whereDate('start_date', '<=', $request->end_date . ' 23:59:59');
        }

        $records = $records->select([
            'time_doctor_activity_notifications.*',
            'u.name as user_name',
            'av.minute as daily_working_hour',
            'u.name as total_working_hour',
        ])
            ->orderBy('total_track', 'desc')->get();

        $recordsArr = [];

        $totalUserTrack          = 0;
        $display_user_total_hour = 0;

        foreach ($records as $row) {
            $totalUserTrack = $totalUserTrack + $row->total_track;

            $dwork = $row->daily_working_hour ? number_format($row->daily_working_hour, 2, '.', '') : 0;

            $thours   = floor($row->total_track / 3600);
            $tminutes = floor(($row->total_track / 60) % 60);
            $twork    = $thours . ':' . sprintf('%02d', $tminutes);

            $difference = (($row->daily_working_hour * 60 * 60) - $row->total_track);

            $sing = '';
            if ($difference > 0) {
                $sign = '-';
            } elseif ($difference < 0) {
                $sign = '+';
            } else {
                $sign = '';
            }
            $admin = null;
            if (\Auth::user()->hasRole('Admin')) {
                $admin = 1;
            }

            $hours   = floor(abs($difference) / 3600);
            $minutes = sprintf('%02d', floor((abs($difference) / 60) % 60));

            $latest_message = \App\ChatMessage::where('user_id', $row->user_id)->where('hubstuff_activity_user_id', '!=', null)->orderBy('id', 'DESC')->first();
            $latest_msg     = null;
            if ($latest_message) {
                $latest_msg = $latest_message->message;
                if (strlen($latest_message->message) > 20) {
                    $latest_msg = substr($latest_message->message, 0, 20) . '...';
                }
            }
            $recordsArr[] = [

                'id'                 => $row->id,
                'user_name'          => $row->user_name,
                'user_id'            => $row->user_id,
                'start_date'         => Carbon::parse($row->start_date)->format('Y-m-d'),
                'daily_working_hour' => $dwork,
                'total_working_hour' => $twork,
                'different'          => $sign . $hours . ':' . $minutes,
                'min_percentage'     => $row->min_percentage,
                'actual_percentage'  => $row->actual_percentage,
                'reason'             => $row->reason,
                'status'             => $row->status,
                'is_admin'           => $admin,
                'is_hod_crm'         => 'user',
                'latest_message'     => $latest_msg,

            ];
        }

        if ($request->user_id) {
            $hrs                     = floor($totalUserTrack / 3600);
            $mnts                    = floor(($totalUserTrack / 60) % 60);
            $display_user_total_hour = $hrs . ':' . sprintf('%02d', $mnts);
        }

        return response()->json([
            'code'    => 200,
            'data'    => $recordsArr,
            'total'   => count($records),
            'user_id' => $request->get('user_id') ?? 0,
            'sum'     => $display_user_total_hour,
        ]);
    }

    public function downloadNotification(Request $request)
    {
        $records = \App\TimeDoctor\TimeDoctorActivityNotification::join('users as u', 'time_doctor_activity_notifications.user_id', 'u.id');

        $records->leftJoin('user_avaibilities as av', 'time_doctor_activity_notifications.user_id', 'av.user_id');
        $records->where('av.is_latest', 1);

        $keyword = request('keyword');
        if (! empty($keyword)) {
            $records = $records->where(function ($q) use ($keyword) {
                $q->where('u.name', 'LIKE', "%$keyword%");
            });
        }

        if (! empty($request->user_id)) {
            $records = $records->where('time_doctor_activity_notifications.user_id', $request->user_id);
        }

        if ($request->start_date != null) {
            $records = $records->whereDate('start_date', '>=', $request->start_date . ' 00:00:00');
        }

        if ($request->end_date != null) {
            $records = $records->whereDate('start_date', '<=', $request->end_date . ' 23:59:59');
        }

        $records = $records->select([
            'time_doctor_activity_notifications.*',
            'u.name as user_name',
            'av.minute as daily_working_hour',
            'u.name as total_working_hour',
        ])
            ->latest()->get();

        $recordsArr = [];
        foreach ($records as $row) {
            $dwork = $row->daily_working_hour ? number_format($row->daily_working_hour, 2, '.', '') : 0;

            $thours   = floor($row->total_track / 3600);
            $tminutes = floor(($row->total_track / 60) % 60);
            $twork    = $thours . ':' . sprintf('%02d', $tminutes);

            $difference = (($row->daily_working_hour * 60 * 60) - $row->total_track);

            $sing = '';
            if ($difference > 0) {
                $sign = '-';
            } elseif ($difference < 0) {
                $sign = '+';
            } else {
                $sign = '';
            }

            $hours   = floor(abs($difference) / 3600);
            $minutes = sprintf('%02d', floor((abs($difference) / 60) % 60));

            $recordsArr[] = [
                'user_name'          => $row->user_name,
                'start_date'         => Carbon::parse($row->start_date)->format('Y-m-d'),
                'daily_working_hour' => $dwork,
                'total_working_hour' => $twork,
                'different'          => $sign . $hours . ':' . $minutes,
                'min_percentage'     => $row->min_percentage,
                'actual_percentage'  => $row->actual_percentage,
                'reason'             => $row->reason,
                'status'             => $row->status,

            ];
        }

        $filename = 'Report-' . request('start_date') . '-To-' . request('end_date') . '.csv';

        return Excel::download(new TimeDoctorNotificationReport($recordsArr), $filename);
    }

    public function notificationReasonSave(Request $request)
    {
        if ($request->id != null) {
            $tdnotification = \App\TimeDoctor\TimeDoctorActivityNotification::find($request->id);
            if ($tdnotification != null) {
                $tdnotification->reason = $request->reason;
                $tdnotification->save();

                return response()->json(['code' => 200, 'data' => [], 'message' => 'Added succesfully']);
            }
        }

        return response()->json(['code' => 500, 'data' => [], 'message' => 'Requested id is not in database']);
    }

    public function changeStatus(Request $request)
    {
        if (! auth()->user()->isAdmin()) {
            return response()->json(['code' => 500, 'data' => [], 'message' => 'only admin can change status.']);
        }
        if ($request->id != null) {
            $tdnotification = \App\TimeDoctor\TimeDoctorActivityNotification::find($request->id);
            if ($tdnotification != null) {
                $tdnotification->status = $request->status;
                $tdnotification->save();

                return response()->json(['code' => 200, 'data' => [], 'message' => 'changed succesfully']);
            }
        }

        return response()->json(['code' => 500, 'data' => [], 'message' => 'Requested id is not in database']);
    }

    public function timeDoctorActivityCommandExecution(Request $request)
    {
        $start_date = $request->startDate ? $request->startDate : date('Y-m-d', strtotime('-1 days'));
        $end_date   = $request->endDate ? $request->endDate : date('Y-m-d', strtotime('-1 days'));
        $userid     = $request->user_id;

        $users = User::where('id', $userid)->get();
        $today = Carbon::now()->toDateTimeString();

        foreach ($users as $key => $user) {
            $user_id = $user->id;

            $data['email'] = $user->email;
            $data['title'] = 'Time Doctor Activities Report';

            $tasks = PaymentReceipt::with('chat_messages', 'user')->where('user_id', $user_id)->whereDate('date', '>=', $start_date)->whereDate('date', '<=', $end_date)->get();

            foreach ($tasks as $task) {
                $task->user;

                $totalPaid = Payment::where('payment_receipt_id', $task->id)->sum('amount');
                if ($totalPaid) {
                    $task->paid_amount = number_format($totalPaid, 2);
                    $task->balance     = $task->rate_estimated - $totalPaid;
                    $task->balance     = number_format($task->balance, 2);
                } else {
                    $task->paid_amount = 0;
                    $task->balance     = $task->rate_estimated;
                    $task->balance     = number_format($task->balance, 2);
                }
                if ($task->task_id) {
                    $task->taskdetails      = Task::find($task->task_id);
                    $task->estimate_minutes = 0;
                    if ($task->taskdetails) {
                        $task->details = $task->taskdetails->task_details;
                        if ($task->worked_minutes == null) {
                            $task->estimate_minutes = $task->taskdetails->approximate;
                        } else {
                            $task->estimate_minutes = $task->worked_minutes;
                        }
                    }
                } elseif ($task->developer_task_id) {
                    $task->taskdetails      = DeveloperTask::find($task->developer_task_id);
                    $task->estimate_minutes = 0;
                    if ($task->taskdetails) {
                        $task->details = $task->taskdetails->task;
                        if ($task->worked_minutes == null) {
                            $task->estimate_minutes = $task->taskdetails->estimate_minutes;
                        } else {
                            $task->estimate_minutes = $task->worked_minutes;
                        }
                    }
                } else {
                    $task->details          = $task->remarks;
                    $task->estimate_minutes = $task->worked_minutes;
                }
            }

            $activityUsers = collect([]);

            foreach ($tasks as $task) {
                $a['date']    = $task->date;
                $a['details'] = $task->details;

                if ($task->task_id) {
                    $category = 'Task #' . $task->task_id;
                } elseif ($task->developer_task_id) {
                    $category = 'Devtask #' . $task->developer_task_id;
                } else {
                    $category = 'Manual';
                }

                $a['category']    = $category;
                $a['time_spent']  = $task->estimate_minutes;
                $a['amount']      = $task->rate_estimated;
                $a['currency']    = $task->currency;
                $a['amount_paid'] = $task->paid_amount;
                $a['balance']     = $task->balance;
                $activityUsers->push($a);
            }

            $total_amount      = 0;
            $total_amount_paid = 0;
            $total_balance     = 0;
            foreach ($activityUsers as $key => $value) {
                $total_amount += $value['amount'] ?? 0;
                $total_amount_paid += $value['amount_paid'] ?? 0;
                $total_balance += $value['balance'] ?? 0;
            }

            $path      = '';
            $file_data = $this->downloadExcelReport($activityUsers);
            $path      = $file_data;

            $today        = Carbon::now()->toDateTimeString();
            $payment_date = Carbon::createFromFormat('Y-m-d H:s:i', $today);
            $storage_path = $path;

            PayentMailData::create([
                'user_id'           => $user_id,
                'start_date'        => $start_date,
                'end_date'          => $end_date,
                'file_path'         => $storage_path,
                'total_amount'      => round($total_amount, 2),
                'total_amount_paid' => round($total_amount_paid, 2),
                'total_balance'     => round($total_balance, 2),
                'payment_date'      => $payment_date,
                'command_execution' => 'Manually',
            ]);

            $file_paths[] = $path;

            $emailClass = (new DocumentEmail('Time Doctor Activities Report', 'Time Doctor Payment Activity', $file_paths))->build();

            $email = \App\Email::create([
                'model_id'        => $user_id,
                'model_type'      => \App\User::class,
                'from'            => $emailClass->fromMailer,
                'to'              => $user->email,
                'subject'         => $emailClass->subject,
                'message'         => $emailClass->render(),
                'template'        => 'customer-simple',
                'additional_data' => json_encode(['attachment' => $file_paths]),
                'status'          => 'pre-send',
                'is_draft'        => 1,
                'cc'              => null,
                'bcc'             => null,
            ]);

            \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');
        }

        return response()->json(['code' => 200, 'message' => 'Command Execution Success']);
    }

    public function getActivityUsers(Request $request, $params = null, $where = null)
    {
        if ($params !== null) {
            $params = $params->request->all();

            $request->activity_command  = $params['activity_command'];
            $request->user_id           = $params['user_id'];
            $request->user              = $params['user'];
            $request->developer_task_id = $params['developer_task_id'];
            $request->task_id           = $params['task_id'];
            $request->task_status       = $params['task_status'];
            $request->start_date        = $params['start_date'];
            $request->end_date          = $params['end_date'];
            $request->status            = $params['status'];
            $request->submit            = $params['submit'];
            $request->response_type     = $params['response_type'];
            Auth::login($request->user);
        }

        if ($where == 'TimeDoctorActivityCommand') {
            if (isset($params['TimeDoctorCommandLogMessage_id'])) {
                $time_doctor_log = TimeDoctorCommandLogMessage::find($params['TimeDoctorCommandLogMessage_id']);
            }

            $title       = 'Time Doctor Activities';
            $start_date  = $request->start_date ? $request->start_date : date('Y-m-d', strtotime('-1 days'));
            $end_date    = $request->end_date ? $request->end_date : date('Y-m-d', strtotime('-1 days'));
            $task_status = $request->task_status ? $request->task_status : null;
            $user_id     = $request->user_id ? $request->user_id : null;

            $tasks = PaymentReceipt::with('chat_messages', 'user')->where('user_id', $user_id)->whereDate('date', '>=', $start_date)->whereDate('date', '<=', $end_date)->get();

            $taskIds = PaymentReceipt::with('chat_messages', 'user')->where('user_id', $user_id)->whereDate('date', '>=', $start_date)->whereDate('date', '<=', $end_date)->pluck('id');
            if (isset($time_doctor_log)) {
                $time_doctor_log->message = $time_doctor_log->message . '-->get payment receipt_in  date ' . json_encode($taskIds);
                $time_doctor_log->save();
            }
            foreach ($tasks as $task) {
                $task->user;

                $totalPaid = Payment::where('payment_receipt_id', $task->id)->sum('amount');
                if ($totalPaid) {
                    $task->paid_amount = number_format($totalPaid, 2);
                    $task->balance     = $task->rate_estimated - $totalPaid;
                    $task->balance     = number_format($task->balance, 2);
                } else {
                    $task->paid_amount = 0;
                    $task->balance     = $task->rate_estimated;
                    $task->balance     = number_format($task->balance, 2);
                }
                if ($task->task_id) {
                    $task->taskdetails      = Task::find($task->task_id);
                    $task->estimate_minutes = 0;
                    if ($task->taskdetails) {
                        $task->details = $task->taskdetails->task_details;
                        if ($task->worked_minutes == null) {
                            $task->estimate_minutes = $task->taskdetails->approximate;
                        } else {
                            $task->estimate_minutes = $task->worked_minutes;
                        }
                    }
                } elseif ($task->developer_task_id) {
                    $task->taskdetails      = DeveloperTask::find($task->developer_task_id);
                    $task->estimate_minutes = 0;
                    if ($task->taskdetails) {
                        $task->details = $task->taskdetails->task;
                        if ($task->worked_minutes == null) {
                            $task->estimate_minutes = $task->taskdetails->estimate_minutes;
                        } else {
                            $task->estimate_minutes = $task->worked_minutes;
                        }
                    }
                } else {
                    $task->details          = $task->remarks;
                    $task->estimate_minutes = $task->worked_minutes;
                }
            }

            $activityUsers = collect([]);

            foreach ($tasks as $task) {
                $a['date']    = $task->date;
                $a['details'] = $task->details;

                if ($task->task_id) {
                    $category = 'Task #' . $task->task_id;
                } elseif ($task->developer_task_id) {
                    $category = 'Devtask #' . $task->developer_task_id;
                } else {
                    $category = 'Manual';
                }

                $a['category']    = $category;
                $a['time_spent']  = $task->estimate_minutes;
                $a['amount']      = $task->rate_estimated;
                $a['currency']    = $task->currency;
                $a['amount_paid'] = $task->paid_amount;
                $a['balance']     = $task->balance;
                $activityUsers->push($a);
            }
        } else {
            $title             = 'Time Doctor Activities';
            $start_date        = $request->start_date ? $request->start_date : date('Y-m-d', strtotime('-1 days'));
            $end_date          = $request->end_date ? $request->end_date : date('Y-m-d', strtotime('-1 days'));
            $user_id           = $request->user_id ? $request->user_id : null;
            $task_id           = $request->task_id ? $request->task_id : null;
            $task_status       = $request->task_status ? $request->task_status : null;
            $developer_task_id = $request->developer_task_id ? $request->developer_task_id : null;

            $taskIds = [];
            if (! empty($developer_task_id)) {
                $developer_tasks = \App\DeveloperTask::find($developer_task_id);
                if (! empty($developer_tasks)) {
                    if (! empty($developer_tasks->time_doctor_task_id)) {
                        $taskIds[] = $developer_tasks->time_doctor_task_id;
                    }
                    if (! empty($developer_tasks->lead_time_doctor_task_id)) {
                        $taskIds[] = $developer_tasks->lead_time_doctor_task_id;
                    }
                    if (! empty($developer_tasks->team_lead_time_doctor_task_id)) {
                        $taskIds[] = $developer_tasks->team_lead_time_doctor_task_id;
                    }
                    if (! empty($developer_tasks->tester_time_doctor_task_id)) {
                        $taskIds[] = $developer_tasks->tester_time_doctor_task_id;
                    }
                }
            }

            if (! empty($task_status)) {
                $developer_tasks = \App\DeveloperTask::where('status', $task_status)->where('time_doctor_task_id', '!=', 0)->pluck('time_doctor_task_id');
                if (! empty($developer_tasks)) {
                    $taskIds = $developer_tasks;
                }
            }

            if (! empty($task_id)) {
                $developer_tasks = \App\Task::find($task_id);

                if (! empty($developer_tasks)) {
                    if (! empty($developer_tasks->time_doctor_task_id)) {
                        $taskIds[] = $developer_tasks->time_doctor_task_id;
                    }
                    if (! empty($developer_tasks->lead_time_doctor_task_id)) {
                        $taskIds[] = $developer_tasks->lead_time_doctor_task_id;
                    }
                }
            }

            if (! empty($taskIds) || ! empty($task_id) || ! empty($developer_task_id)) {
                $query = TimeDoctorActivity::leftJoin('time_doctor_members', 'time_doctor_members.time_doctor_user_id', '=', 'time_doctor_activities.user_id')->whereIn('time_doctor_activities.task_id', $taskIds)->whereDate('time_doctor_activities.starts_at', '>=', $start_date)->whereDate('time_doctor_activities.starts_at', '<=', $end_date);
            } else {
                $query = TimeDoctorActivity::leftJoin('time_doctor_members', 'time_doctor_members.time_doctor_user_id', '=', 'time_doctor_activities.user_id')->whereDate('time_doctor_activities.starts_at', '>=', $start_date)->whereDate('time_doctor_activities.starts_at', '<=', $end_date);
            }

            if (Auth::user()->isAdmin()) {
                $query = $query;
                $users = User::all()->pluck('name', 'id')->toArray();
            } else {
                $members = Team::join('team_user', 'team_user.team_id', 'teams.id')->where('teams.user_id', Auth::user()->id)->distinct()->pluck('team_user.user_id');

                if (! count($members)) {
                    $members = [Auth::user()->id];
                } else {
                    $members[] = Auth::user()->id;
                }
                $query = $query->whereIn('time_doctor_members.user_id', $members);

                $users = User::whereIn('id', $members)->pluck('name', 'id')->toArray();
            }

            if ($request->user_id) {
                $query = $query->where('time_doctor_members.user_id', $request->user_id);
            }

            $activities = $query->select(
                DB::raw('
            time_doctor_activities.user_id,
            SUM(time_doctor_activities.tracked) as total_tracked,DATE(time_doctor_activities.starts_at) as date,time_doctor_members.user_id as system_user_id')
            )->groupBy('date', 'system_user_id')->orderBy('date', 'desc')->get();

            $activityUsers = collect([]);

            foreach ($activities as $activity) {
                $a = [];

                $efficiencyObj = TimeDoctorTaskEfficiency::where('user_id', $activity->user_id)->first();
                // all activities

                if (isset($efficiencyObj->id) && $efficiencyObj->id > 0) {
                    $a['admin_efficiency'] = $efficiencyObj->admin_input;
                    $a['user_efficiency']  = $efficiencyObj->user_input;
                    $a['efficiency']       = (Auth::user()->isAdmin()) ? $efficiencyObj->admin_input : $efficiencyObj->user_input;

                    Log::channel('time_doctor_activity_command')->info('check: time doctor activity id > 0' . $efficiencyObj->id . ' and ingormattion' . json_encode($a));
                } else {
                    $a['admin_efficiency'] = '';
                    $a['user_efficiency']  = '';

                    $a['efficiency'] = '';
                }

                if ($activity->system_user_id) {
                    $user = User::find($activity->system_user_id);
                    if ($user) {
                        $activity->userName                = $user->name;
                        $activity->payment_frequency       = $user->payment_frequency;
                        $activity->last_mail_sent_payment  = $user->last_mail_sent_payment;
                        $activity->fixed_price_user_or_job = $user->fixed_price_user_or_job;
                        $activity->user_id_data            = $user->id;
                    } else {
                        $activity->userName                = '';
                        $activity->payment_frequency       = '';
                        $activity->last_mail_sent_payment  = '';
                        $activity->fixed_price_user_or_job = '';
                        $activity->user_id_data            = '';
                    }
                } else {
                    $activity->userName                = '';
                    $activity->payment_frequency       = '';
                    $activity->last_mail_sent_payment  = '';
                    $activity->fixed_price_user_or_job = '';
                    $activity->user_id_data            = '';
                }

                $ac_data = $query->select(
                    DB::raw('
                        time_doctor_activities.user_id,
                        SUM(time_doctor_activities.tracked) as total_tracked,DATE(time_doctor_activities.starts_at) as date,time_doctor_members.user_id as system_user_id')
                )->where('time_doctor_members.user_id', $activity->system_user_id)->groupBy('date', 'user_id')->orderBy('date', 'desc')->get();

                $ac_user_id    = [];
                $ac_user_count = 0;

                foreach ($ac_data as $data) {
                    $ac_user_id[] = "'" . $data->user_id . "'";
                }
                $ac_user_id = implode(',', $ac_user_id);

                // send time doctor activities
                $ac = [];
                if ($ac_user_id != '') {
                    $ac = TimeDoctorActivity::whereDate('starts_at', $activity->date)
                        ->whereRaw('time_doctor_activities.user_id IN (' . $ac_user_id . ')')
                        ->get();
                }

                $totalApproved = 0;
                $totalPending  = 0;
                $isAllSelected = 0;
                $a['tasks']    = [];
                $lsTask        = [];
                foreach ($ac as $ar) {
                    $taskSubject = '';
                    if ($ar->task_id) {
                        if ($ar->is_manual) {
                            $task = DeveloperTask::where('id', $ar->task_id)->first();
                            if ($task) {
                                $estMinutes  = ($task->estimate_minutes && $task->estimate_minutes > 0) ? $task->estimate_minutes : 'N/A';
                                $taskSubject = $ar->task_id . '||#DEVTASK-' . $task->id . '-' . $task->subject . "||#DEVTASK-$task->id||$estMinutes||$task->status||$task->id";
                                Log::channel('time_doctor_activity_command')->info('task true ');
                            } else {
                                $task = Task::where('id', $ar->task_id)->first();
                                if ($task) {
                                    $estMinutes  = ($task->estimate_minutes && $task->estimate_minutes > 0) ? $task->estimate_minutes : 'N/A';
                                    $taskSubject = $ar->task_id . '||#TASK-' . $task->id . '-' . $task->task_subject . "||#TASK-$task->id||$estMinutes||$task->status||$task->id";
                                }
                            }
                        } else {
                            $tracked = $ar->tracked;
                            $task    = DeveloperTask::where('time_doctor_task_id', 'like', '%' . $ar->task_id . '%')->orWhere('lead_time_doctor_task_id', 'like', '%' . $ar->task_id . '%')->first();
                            if ($task && empty($task_id)) {
                                $estMinutes  = ($task->estimate_minutes && $task->estimate_minutes > 0) ? $task->estimate_minutes : 'N/A';
                                $taskSubject = $ar->task_id . '||#DEVTASK-' . $task->id . '-' . $task->subject . "||#DEVTASK-$task->id||$estMinutes||$task->status||$task->id";
                            } else {
                                $task = Task::where('time_doctor_task_id', 'like', '%' . $ar->task_id . '%')->orWhere('lead_time_doctor_task_id', 'like', '%' . $ar->task_id . '%')->first();
                                if ($task && empty($developer_task_id)) {
                                    $estMinutes  = ($task->estimate_minutes && $task->estimate_minutes > 0) ? $task->estimate_minutes : 'N/A';
                                    $taskSubject = $ar->task_id . '||#TASK-' . $task->id . '-' . $task->task_subject . "||#TASK-$task->id||$estMinutes||$task->status||$task->id";
                                }
                            }
                        }
                    }
                    $lsTask[] = $taskSubject;
                }

                Log::channel('time_doctor_activity_command')->info('ls task array' . json_encode($lsTask));
                $a['tasks'] = array_unique($lsTask);

                $timeDoctorActivitySummery = TimeDoctorActivitySummary::where('date', $activity->date)->where('user_id', $activity->system_user_id)->orderBy('created_at', 'desc')->first();

                if ($request->status == 'approved') {
                    if ($timeDoctorActivitySummery && $timeDoctorActivitySummery->final_approval == 1) {
                        if ($timeDoctorActivitySummery->forworded_person == 'admin') {
                            $status           = 'Approved by admin';
                            $totalApproved    = $timeDoctorActivitySummery->accepted;
                            $totalPending     = $timeDoctorActivitySummery->pending;
                            $totalUserRequest = $timeDoctorActivitySummery->user_requested;
                            $totalNotPaid     = TimeDoctorActivity::whereDate('starts_at', $activity->date)->where('user_id', $activity->user_id)->where('status', 1)->where('paid', 0)->sum('tracked');

                            $forworded_to   = $timeDoctorActivitySummery->receiver;
                            $final_approval = 1;

                            $a['system_user_id']          = $activity->system_user_id;
                            $a['user_id']                 = $activity->user_id;
                            $a['total_tracked']           = $activity->total_tracked;
                            $a['date']                    = $activity->date;
                            $a['userName']                = $activity->userName;
                            $a['forworded_to']            = $forworded_to;
                            $a['status']                  = $status;
                            $a['totalApproved']           = $totalApproved;
                            $a['totalPending']            = $totalPending;
                            $a['totalUserRequest']        = $totalUserRequest;
                            $a['totalNotPaid']            = $totalNotPaid;
                            $a['final_approval']          = $final_approval;
                            $a['note']                    = $timeDoctorActivitySummery->rejection_note;
                            $a['payment_frequency']       = $activity->payment_frequency;
                            $a['last_mail_sent_payment']  = $activity->last_mail_sent_payment;
                            $a['fixed_price_user_or_job'] = $activity->fixed_price_user_or_job;
                            $a['user_id_data']            = $activity->user_id_data;
                            $activityUsers->push($a);
                            Log::channel('time_doctor_activity_command')->info('end admin condition if forwarded and status approve');
                        }
                    }
                } elseif ($request->status == 'pending') {
                    if ($timeDoctorActivitySummery && $timeDoctorActivitySummery->final_approval == 1) {
                        if ($timeDoctorActivitySummery->forworded_person == 'admin') {
                            $status           = 'Pending by admin';
                            $totalApproved    = $timeDoctorActivitySummery->accepted;
                            $totalPending     = $timeDoctorActivitySummery->pending;
                            $totalUserRequest = $timeDoctorActivitySummery->user_requested;
                            $totalNotPaid     = TimeDoctorActivity::whereDate('starts_at', $activity->date)->where('user_id', $activity->user_id)->where('status', 2)->where('paid', 0)->sum('tracked');

                            $forworded_to   = $timeDoctorActivitySummery->receiver;
                            $final_approval = 1;

                            $a['system_user_id']          = $activity->system_user_id;
                            $a['user_id']                 = $activity->user_id;
                            $a['total_tracked']           = $activity->total_tracked;
                            $a['date']                    = $activity->date;
                            $a['userName']                = $activity->userName;
                            $a['forworded_to']            = $forworded_to;
                            $a['status']                  = $status;
                            $a['totalApproved']           = $totalApproved;
                            $a['totalPending']            = $totalPending;
                            $a['totalUserRequest']        = $totalUserRequest;
                            $a['totalNotPaid']            = $totalNotPaid;
                            $a['final_approval']          = $final_approval;
                            $a['note']                    = $timeDoctorActivitySummery->rejection_note;
                            $a['payment_frequency']       = $activity->payment_frequency;
                            $a['last_mail_sent_payment']  = $activity->last_mail_sent_payment;
                            $a['fixed_price_user_or_job'] = $activity->fixed_price_user_or_job;
                            $a['user_id_data']            = $activity->user_id_data;
                            $activityUsers->push($a);
                        }
                    }
                    Log::channel('time_doctor_activity_command')->info('end pending condition');
                } elseif ($request->status == 'pending') {
                    if ($timeDoctorActivitySummery && $timeDoctorActivitySummery->final_approval == 1) {
                        if ($timeDoctorActivitySummery->forworded_person == 'admin') {
                            $status           = 'Pending by admin';
                            $totalApproved    = $timeDoctorActivitySummery->accepted;
                            $totalUserRequest = $timeDoctorActivitySummery->user_requested;
                            $totalNotPaid     = TimeDoctorActivity::whereDate('starts_at', $activity->date)->where('user_id', $activity->user_id)->where('status', 2)->where('paid', 0)->sum('tracked');

                            $forworded_to   = $timeDoctorActivitySummery->receiver;
                            $final_approval = 1;

                            $a['system_user_id']          = $activity->system_user_id;
                            $a['user_id']                 = $activity->user_id;
                            $a['total_tracked']           = $activity->total_tracked;
                            $a['date']                    = $activity->date;
                            $a['userName']                = $activity->userName;
                            $a['forworded_to']            = $forworded_to;
                            $a['status']                  = $status;
                            $a['totalApproved']           = $totalApproved;
                            $a['totalUserRequest']        = $totalUserRequest;
                            $a['totalNotPaid']            = $totalNotPaid;
                            $a['final_approval']          = $final_approval;
                            $a['note']                    = $timeDoctorActivitySummery->rejection_note;
                            $a['payment_frequency']       = $activity->payment_frequency;
                            $a['last_mail_sent_payment']  = $activity->last_mail_sent_payment;
                            $a['fixed_price_user_or_job'] = $activity->fixed_price_user_or_job;
                            $a['user_id_data']            = $activity->user_id_data;
                            $activityUsers->push($a);
                        }
                    }
                    Log::channel('time_doctor_activity_command')->info('pending condition end');
                } elseif ($request->status == 'forwarded_to_lead') {
                    if ($timeDoctorActivitySummery) {
                        if ($timeDoctorActivitySummery->forworded_person == 'team_lead' && $timeDoctorActivitySummery->final_approval == 0) {
                            $status           = 'Pending for team lead approval';
                            $totalApproved    = $timeDoctorActivitySummery->accepted;
                            $totalPending     = $timeDoctorActivitySummery->pending;
                            $totalUserRequest = $timeDoctorActivitySummery->user_requested;
                            $totalNotPaid     = TimeDoctorActivity::whereDate('starts_at', $activity->date)->where('user_id', $activity->user_id)->where('status', 1)->where('paid', 0)->sum('tracked');

                            $forworded_to   = $timeDoctorActivitySummery->receiver;
                            $final_approval = 0;

                            $a['system_user_id']          = $activity->system_user_id;
                            $a['user_id']                 = $activity->user_id;
                            $a['total_tracked']           = $activity->total_tracked;
                            $a['date']                    = $activity->date;
                            $a['userName']                = $activity->userName;
                            $a['forworded_to']            = $forworded_to;
                            $a['status']                  = $status;
                            $a['totalApproved']           = $totalApproved;
                            $a['totalPending']            = $totalPending;
                            $a['totalUserRequest']        = $totalUserRequest;
                            $a['totalNotPaid']            = $totalNotPaid;
                            $a['final_approval']          = $final_approval;
                            $a['note']                    = $timeDoctorActivitySummery->rejection_note;
                            $a['payment_frequency']       = $activity->payment_frequency;
                            $a['last_mail_sent_payment']  = $activity->last_mail_sent_payment;
                            $a['fixed_price_user_or_job'] = $activity->fixed_price_user_or_job;
                            $a['user_id_data']            = $activity->user_id_data;
                            $activityUsers->push($a);
                        }
                    }
                    Log::channel('time_doctor_activity_command')->info('forwarded to  condition end');
                } elseif ($request->status == 'forwarded_to_admin') {
                    if ($timeDoctorActivitySummery) {
                        if ($timeDoctorActivitySummery->forworded_person == 'admin' && $timeDoctorActivitySummery->final_approval == 0) {
                            $status           = 'Pending for admin approval';
                            $totalApproved    = $timeDoctorActivitySummery->accepted;
                            $totalPending     = $timeDoctorActivitySummery->pending;
                            $totalUserRequest = $timeDoctorActivitySummery->user_requested;
                            $totalNotPaid     = TimeDoctorActivity::whereDate('starts_at', $activity->date)->where('user_id', $activity->user_id)->where('status', 1)->where('paid', 0)->sum('tracked');

                            $forworded_to   = $timeDoctorActivitySummery->receiver;
                            $final_approval = 0;

                            $a['system_user_id']          = $activity->system_user_id;
                            $a['user_id']                 = $activity->user_id;
                            $a['total_tracked']           = $activity->total_tracked;
                            $a['date']                    = $activity->date;
                            $a['userName']                = $activity->userName;
                            $a['forworded_to']            = $forworded_to;
                            $a['status']                  = $status;
                            $a['totalApproved']           = $totalApproved;
                            $a['totalPending']            = $totalPending;
                            $a['totalUserRequest']        = $totalUserRequest;
                            $a['totalNotPaid']            = $totalNotPaid;
                            $a['final_approval']          = $final_approval;
                            $a['note']                    = $timeDoctorActivitySummery->rejection_note;
                            $a['payment_frequency']       = $activity->payment_frequency;
                            $a['last_mail_sent_payment']  = $activity->last_mail_sent_payment;
                            $a['fixed_price_user_or_job'] = $activity->fixed_price_user_or_job;
                            $a['user_id_data']            = $activity->user_id_data;
                            $activityUsers->push($a);
                        }
                    }
                    Log::channel('time_doctor_activity_command')->info('forward to admin is end');
                } elseif ($request->status == 'new') {
                    if (! $timeDoctorActivitySummery) {
                        $status           = 'New';
                        $totalApproved    = 0;
                        $totalPending     = 0;
                        $totalNotPaid     = 0;
                        $totalUserRequest = 0;
                        $forworded_to     = Auth::user()->id;
                        $final_approval   = 0;

                        $a['system_user_id']          = $activity->system_user_id;
                        $a['user_id']                 = $activity->user_id;
                        $a['total_tracked']           = $activity->total_tracked;
                        $a['date']                    = $activity->date;
                        $a['userName']                = $activity->userName;
                        $a['forworded_to']            = $forworded_to;
                        $a['status']                  = $status;
                        $a['totalApproved']           = $totalApproved;
                        $a['totalPending']            = $totalPending;
                        $a['totalUserRequest']        = $totalUserRequest;
                        $a['totalNotPaid']            = $totalNotPaid;
                        $a['final_approval']          = $final_approval;
                        $a['note']                    = '';
                        $a['payment_frequency']       = $activity->payment_frequency;
                        $a['last_mail_sent_payment']  = $activity->last_mail_sent_payment;
                        $a['fixed_price_user_or_job'] = $activity->fixed_price_user_or_job;
                        $a['user_id_data']            = $activity->user_id_data;
                        $activityUsers->push($a);
                    }
                    Log::channel('time_doctor_activity_command')->info('end status new condition');
                } else {
                    if ($timeDoctorActivitySummery) {
                        if ($timeDoctorActivitySummery->forworded_person == 'admin') {
                            if ($timeDoctorActivitySummery->final_approval == 1) {
                                $status = 'Approved by admin';
                            } else {
                                $status = 'Pending for admin approval';
                            }
                        }
                        if ($timeDoctorActivitySummery->forworded_person == 'team_lead') {
                            $status = 'Pending for team lead approval';
                        }
                        if ($timeDoctorActivitySummery->forworded_person == 'user') {
                            $status = 'Pending for approval';
                        }

                        $totalApproved    = $timeDoctorActivitySummery->accepted;
                        $totalPending     = $timeDoctorActivitySummery->pending;
                        $totalUserRequest = $timeDoctorActivitySummery->user_requested;
                        $totalNotPaid     = TimeDoctorActivity::whereDate('starts_at', $activity->date)->where('user_id', $activity->user_id)->where('status', 1)->where('paid', 0)->sum('tracked');

                        $forworded_to = $timeDoctorActivitySummery->receiver;
                        if ($timeDoctorActivitySummery->final_approval) {
                            $final_approval = 1;
                        } else {
                            $final_approval = 0;
                        }
                        $note = $timeDoctorActivitySummery->rejection_note;
                    } else {
                        $forworded_to     = Auth::user()->id;
                        $status           = 'New';
                        $totalApproved    = 0;
                        $totalPending     = 0;
                        $totalNotPaid     = 0;
                        $totalUserRequest = 0;
                        $final_approval   = 0;
                        $note             = null;
                    }
                    $a['system_user_id']          = $activity->system_user_id;
                    $a['user_id']                 = $activity->user_id;
                    $a['total_tracked']           = $activity->total_tracked;
                    $a['date']                    = $activity->date;
                    $a['userName']                = $activity->userName;
                    $a['forworded_to']            = $forworded_to;
                    $a['status']                  = $status;
                    $a['totalApproved']           = $totalApproved;
                    $a['totalPending']            = $totalPending;
                    $a['totalUserRequest']        = $totalUserRequest;
                    $a['totalNotPaid']            = $totalNotPaid;
                    $a['final_approval']          = $final_approval;
                    $a['note']                    = $note;
                    $a['payment_frequency']       = $activity->payment_frequency;
                    $a['last_mail_sent_payment']  = $activity->last_mail_sent_payment;
                    $a['fixed_price_user_or_job'] = $activity->fixed_price_user_or_job;
                    $a['user_id_data']            = $activity->user_id_data;
                    $activityUsers->push($a);
                }
            }
        }

        if ($request->submit == 'report_download') {
            $total_amount      = 0;
            $total_amount_paid = 0;
            $total_balance     = 0;
            foreach ($activityUsers as $key => $value) {
                $total_amount += $value['amount'] ?? 0;
                $total_amount_paid += $value['amount_paid'] ?? 0;
                $total_balance += $value['balance'] ?? 0;
            }
            if (isset($time_doctor_log)) {
                $time_doctor_log->message = $time_doctor_log->message . '-->activityUsers ' . json_encode($activityUsers);
                $time_doctor_log->save();
            }

            $file_data = $this->downloadExcelReport($activityUsers);
            $path      = $file_data;

            $today        = Carbon::now()->toDateTimeString();
            $payment_date = Carbon::createFromFormat('Y-m-d H:s:i', $today);
            $storage_path = $path;

            PayentMailData::create([
                'user_id'           => $user_id,
                'start_date'        => $start_date,
                'end_date'          => $end_date,
                'file_path'         => $storage_path,
                'total_amount'      => round($total_amount, 2),
                'total_amount_paid' => round($total_amount_paid, 2),
                'total_balance'     => round($total_balance, 2),
                'payment_date'      => $payment_date,
            ]);

            if (isset($time_doctor_log)) {
                $time_doctor_log->message = $time_doctor_log->message . '-->PayentMailData ' . json_encode([
                    'user_id'           => $user_id,
                    'start_date'        => $start_date,
                    'end_date'          => $end_date,
                    'file_path'         => $storage_path,
                    'total_amount'      => round($total_amount, 2),
                    'total_amount_paid' => round($total_amount_paid, 2),
                    'total_balance'     => round($total_balance, 2),
                    'payment_date'      => $payment_date,
                ]);
                $time_doctor_log->save();
            }

            if (isset($request->response_type) && $request->response_type == 'with_payment_receipt') {
                return ['receipt_ids' => $taskIds, 'file_data' => $file_data, 'start_date' => $start_date, 'end_date' => $end_date];
            }

            return $file_data;
        }
        $status = $request->status;

        return view('time-doctor.activities.activity-users', compact('title', 'status', 'activityUsers', 'start_date', 'end_date', 'users', 'user_id', 'task_id'));
    }

    public function submitPaymentRequest(Request $request)
    {
        $this->validate($request, [
            'amount'    => 'required',
            'user_id'   => 'required',
            'starts_at' => 'required',
        ]);

        $payment_receipt                 = new PaymentReceipt;
        $payment_receipt->date           = date('Y-m-d');
        $payment_receipt->rate_estimated = $request->amount;
        $payment_receipt->status         = 'Pending';
        $payment_receipt->user_id        = $request->user_id;
        $payment_receipt->remarks        = $request->note;
        $payment_receipt->save();

        $time_doctor_user_id = TimeDoctorMember::where('user_id', $request->user_id)->first()->time_doctor_user_id;

        TimeDoctorActivity::whereDate('starts_at', $request->starts_at)->where('user_id', $time_doctor_user_id)->where('status', 1)->where('paid', 0)->update(['paid' => 1]);

        return redirect()->back()->with('success', 'Successfully submitted');
    }

    public function submitManualRecords(Request $request)
    {
        if ($request->starts_at && $request->starts_at != '' && $request->total_time > 0 && $request->task_id > 0) {
            $member = TimeDoctorMember::where('user_id', Auth::user()->id)->first();
            if ($member) {
                $firstId = TimeDoctorActivity::orderBy('id', 'asc')->first();
                if ($firstId) {
                    $previd = $firstId->id - 1;
                } else {
                    $previd = 1;
                }

                if (! $request->user_notes) {
                    $request->user_notes = '';
                }
                $activity             = new TimeDoctorActivity;
                $activity->id         = $previd;
                $activity->task_id    = $request->task_id;
                $activity->user_id    = $member->time_doctor_user_id;
                $activity->starts_at  = $request->starts_at;
                $activity->tracked    = $request->total_time * 60;
                $activity->overall    = 0;
                $activity->status     = 0;
                $activity->is_manual  = 1;
                $activity->user_notes = $request->user_notes;
                $activity->save();

                return response()->json(['message' => 'Successful'], 200);
            }

            return response()->json(['message' => 'Time Doctor member not found'], 500);
        } else {
            return response()->json(['message' => 'Fill all the data first'], 500);
        }
    }

    public function fetchActivitiesFromTimeDoctor(Request $request)
    {
        if (! $request->time_doctor_start_date || $request->time_doctor_start_date == '' || ! $request->time_doctor_end_date || $request->time_doctor_end_date == '') {
            return response()->json(['message' => 'Select date'], 500);
        }

        $starts_at = $request->time_doctor_start_date;
        $ends_at   = $request->time_doctor_end_date;
        $userID    = $request->fetch_user_id;
        $member    = $time_doctor_user_id = TimeDoctorMember::where('user_id', $userID)->first();

        if ($member) {
            $company_id          = $member->account_detail->company_id;
            $access_token        = $member->account_detail->auth_token;
            $user_id             = $member->account_detail->id;
            $time_doctor_user_id = $member->time_doctor_user_id;
        } else {
            return response()->json(['message' => 'Time Doctor member not found'], 500);
        }
        $timeReceived = 0;
        try {
            $now = time();

            $startString = $starts_at;
            $endString   = $ends_at;
            $userIds     = $time_doctor_user_id;
            $userIds     = explode(',', $userIds);
            $userIds     = array_filter($userIds);

            $start = strtotime($startString . ' 00:00:00' . ' UTC');
            $now   = strtotime($endString . ' 23:59:59' . ' UTC');

            $diff    = $now - $start;
            $dayDiff = round($diff / 86400);
            if ($dayDiff > 7) {
                return response()->json(['message' => 'Can not fetch activities more then week'], 500);
            }
            $activities = $this->timedoctor->getActivityList($company_id, $access_token, $userID, $startString, $endString);
            if ($activities == false) {
                return response()->json(['message' => 'Can not fetch activities as no activities found'], 500);
            }
            if (! empty($activities)) {
                foreach ($activities as $activity) {
                    TimeDoctorActivity::create([
                        'user_id'    => $activity['user_id'],
                        'task_id'    => is_null($activity['task_id']) ? 0 : $activity['task_id'],
                        'starts_at'  => $activity['starts_at'],
                        'tracked'    => $activity['tracked'],
                        'project_id' => $activity['project'],
                    ]);
                    $timeReceived += $activity['tracked'];
                }
            }
        } catch (Exception $e) {
            return response()->json(['message' => $e->getMessage()], 500);
        }

        $timeReceived = number_format(($timeReceived / 60), 2, '.', '');

        return response()->json(['message' => 'Fetched activities total time : ' . $timeReceived], 200);
    }

    public function downloadExcelReport($activityUsers)
    {
        if (request('user_id')) {
            $user = User::where('id', request('user_id'))->first();
        } else {
            $user = User::where('id', Auth::user()->id)->first();
        }
        $activities[] = $activityUsers;

        $path = 'time_doctor_payment_activity/' . Carbon::now()->format('Y-m-d-H-m-s') . '_time_doctor_payment_activity.xlsx';
        Excel::store(new TimeDoctorActivityReport($activities), $path, 'files');

        return $path;
    }

    public function approvedPendingPayments(Request $request)
    {
        $title      = 'Approved pending payments';
        $start_date = $request->start_date ? $request->start_date : date('Y-m-d');
        $end_date   = $request->end_date ? $request->end_date : date('Y-m-d');
        $user_id    = $request->user_id ? $request->user_id : null;
        if ($user_id) {
            $activityUsers = DB::select(DB::raw('select system_user_id, sum(tracked) as total_tracked,starts_at from (select a.* from (SELECT time_doctor_activities.id,time_doctor_activities.user_id,cast(time_doctor_activities.starts_at as date) as starts_at,time_doctor_activities.status,time_doctor_activities.paid,time_doctor_members.user_id as system_user_id,time_doctor_activities.tracked FROM `time_doctor_activities` left outer join time_doctor_members on time_doctor_members.time_doctor_user_id = time_doctor_activities.user_id where time_doctor_activities.status = 1 and time_doctor_activities.paid = 0 and time_doctor_members.user_id = ' . $user_id . ') as a left outer join payment_receipts on a.system_user_id = payment_receipts.user_id where a.starts_at <= payment_receipts.date) as b group by starts_at,system_user_id'));
        } else {
            $activityUsers = DB::select(DB::raw('select system_user_id, sum(tracked) as total_tracked,starts_at from (select a.* from (SELECT time_doctor_activities.id,time_doctor_activities.user_id,cast(time_doctor_activities.starts_at as date) as starts_at,time_doctor_activities.status,time_doctor_activities.paid,time_doctor_members.user_id as system_user_id,time_doctor_activities.tracked FROM `time_doctor_activities` left outer join time_doctor_members on time_doctor_members.time_doctor_user_id = time_doctor_activities.user_id where time_doctor_activities.status = 1 and time_doctor_activities.paid = 0) as a left outer join payment_receipts on a.system_user_id = payment_receipts.user_id where a.starts_at <= payment_receipts.date) as b group by starts_at,system_user_id'));
        }

        foreach ($activityUsers as $activity) {
            $user              = User::find($activity->system_user_id);
            $latestRatesOnDate = UserRate::latestRatesOnDate($activity->starts_at, $user->id);
            if ($activity->total_tracked > 0 && $latestRatesOnDate && $latestRatesOnDate->hourly_rate > 0) {
                $total            = ($activity->total_tracked / 60) / 60 * $latestRatesOnDate->hourly_rate;
                $activity->amount = number_format($total, 2);
            } else {
                $activity->amount = 0;
            }
            $activity->userName = $user->name;
        }
        $users = User::all()->pluck('name', 'id')->toArray();

        return view('time-doctor.activities.approved-pending-payments', compact('title', 'activityUsers', 'start_date', 'end_date', 'users', 'user_id'));
    }

    public function approveActivity(Request $request)
    {
        if (! $request->forworded_person) {
            return response()->json([
                'message' => 'Please forword someone',
            ], 500);
        }
        if ($request->forworded_person == 'admin') {
            $forword_to = $request->forword_to_admin;
        }
        if ($request->forworded_person == 'team_lead') {
            $forword_to = $request->forword_to_team_leader;
        }
        if ($request->forworded_person == 'user') {
            $forword_to = $request->forword_to_user;
        }

        $approvedArr = [];
        $rejectedArr = [];
        if ($request->activities && count($request->activities) > 0) {
            $approved = 0;
            foreach ($request->activities as $id) {
                $timeDoctorActivity = TimeDoctorActivity::where('id', $id)->first();
                $approved           = $approved + $timeDoctorActivity->tracked;
                $approvedArr[]      = $id;
            }
            $query = TimeDoctorActivity::leftJoin('time_doctor_members', 'time_doctor_members.time_doctor_user_id', '=', 'time_doctor_activities.user_id')->whereDate('time_doctor_activities.starts_at', $request->date)->where('time_doctor_activities.user_id', $request->user_id);

            $totalTracked = $query->sum('tracked');
            $activity     = $query->select('time_doctor_members.user_id')->first();
            $user_id      = $activity->user_id;
            $rejected     = $totalTracked - $approved;
            $rejectedArr  = $query = TimeDoctorActivity::leftJoin('time_doctor_members', 'time_doctor_members.time_doctor_user_id', '=', 'time_doctor_activities.user_id')->whereDate('time_doctor_activities.starts_at', $request->date)->where('time_doctor_activities.user_id', $request->user_id)->whereNotIn('time_doctor_activities.id', $approvedArr)->pluck('time_doctor_activities.id')->toArray();

            $approvedJson = json_encode($approvedArr);
            if (count($rejectedArr) > 0) {
                $rejectedJson = json_encode($rejectedArr);
            } else {
                $rejectedJson = null;
            }
            if (! $request->rejection_note) {
                $request->rejection_note = '';
            } else {
                $request->rejection_note = $request->previous_remarks . ' || ' . $request->rejection_note . ' ( ' . Auth::user()->name . ' ) ';
            }

            $timeDoctorActivitySummery                   = new TimeDoctorActivitySummary;
            $timeDoctorActivitySummery->user_id          = $user_id;
            $timeDoctorActivitySummery->date             = $request->date;
            $timeDoctorActivitySummery->tracked          = $totalTracked;
            $timeDoctorActivitySummery->user_requested   = $approved;
            $timeDoctorActivitySummery->accepted         = $approved;
            $timeDoctorActivitySummery->rejected         = $rejected;
            $timeDoctorActivitySummery->approved_ids     = $approvedJson;
            $timeDoctorActivitySummery->rejected_ids     = $rejectedJson;
            $timeDoctorActivitySummery->sender           = Auth::user()->id;
            $timeDoctorActivitySummery->receiver         = $forword_to;
            $timeDoctorActivitySummery->forworded_person = $request->forworded_person;
            $timeDoctorActivitySummery->rejection_note   = $request->rejection_note;
            $timeDoctorActivitySummery->save();

            return response()->json([
                'totalApproved' => $approved,
            ], 200);
        }

        return response()->json([
            'message' => 'Can not update data',
        ], 500);
    }

    public function getActivityDetails(Request $request)
    {
        if (! $request->user_id || ! $request->date || $request->user_id == '' || $request->date == '') {
            return response()->json(['message' => '']);
        }

        $activityrecords = TimeDoctorActivity::where('user_id', $request->user_id)
            ->whereDate('starts_at', $request->date)
            ->selectRaw('CAST(starts_at AS DATE) AS OnDate, SUM(tracked) AS total_tracked, HOUR(starts_at) as onHour, status')
            ->groupByRaw('HOUR(starts_at), DAY(starts_at)')
            ->get();

        $admins = User::join('role_user', 'role_user.user_id', 'users.id')->join('roles', 'roles.id', 'role_user.role_id')
            ->where('roles.name', 'Admin')->select('users.name', 'users.id')->get();

        $teamLeaders = [];

        $users = User::select('name', 'id')->get();

        $time_doctor_member        = TimeDoctorMember::where('time_doctor_user_id', $request->user_id)->first();
        $timeDoctorActivitySummery = null;
        if ($time_doctor_member) {
            $system_user_id            = $time_doctor_member->user_id;
            $timeDoctorActivitySummery = TimeDoctorActivitySummary::where('date', $request->date)->where('user_id', $system_user_id)->orderBy('created_at', 'DESC')->first();
            $teamLeaders               = User::join('teams', 'teams.user_id', 'users.id')->join('team_user', 'team_user.team_id', 'teams.id')->where('team_user.user_id', $system_user_id)->distinct()->select('users.name', 'users.id')->get();
        }
        $approved_ids = [0];
        $pending_ids  = [0];
        if ($timeDoctorActivitySummery) {
            if ($timeDoctorActivitySummery->approved_ids) {
                $approved_ids = json_decode($timeDoctorActivitySummery->approved_ids);
            }
            if ($timeDoctorActivitySummery->pending_ids) {
                $pending_ids = json_decode($timeDoctorActivitySummery->pending_ids);
            }

            if ($timeDoctorActivitySummery->final_approval) {
                if (! Auth::user()->isAdmin()) {
                    return response()->json([
                        'message' => 'Already approved',
                    ], 500);
                }
            }
        }

        foreach ($activityrecords as $record) {
            $activities = TimeDoctorActivity::whereDate('starts_at', $request->date)
                ->where('user_id', $request->user_id)
                ->whereRaw('HOUR(starts_at) = ?', [$record->onHour])
                ->get();
            $totalApproved = 0;
            $totalPending  = 0;
            $isAllSelected = 0;
            foreach ($activities as $a) {
                if (in_array($a->id, $approved_ids)) {
                    $isAllSelected = $isAllSelected + 1;
                    $a->status     = 1;
                    $timeDocAct    = TimeDoctorActivity::where('id', $a->id)->first();
                    if ($timeDocAct) {
                        $totalApproved = $totalApproved + $a->tracked;
                    }
                    $a->totalApproved = $a->tracked;
                } else {
                    $a->status        = 0;
                    $a->totalApproved = 0;
                }

                if (in_array($a->id, $pending_ids)) {
                    $isAllSelected = $isAllSelected + 1;
                    $a->status     = 2;
                    $timeDocAct    = TimeDoctorActivity::where('id', $a->id)->first();
                    if ($timeDocAct) {
                        $totalPending = $totalPending + $a->tracked;
                    }
                    $a->totalPending = $a->tracked;
                } else {
                    $a->status       = 0;
                    $a->totalPending = 0;
                }
                $taskSubject = '';
                if ($a->task_id) {
                    if ($a->is_manual) {
                        $task = DeveloperTask::where('id', $a->task_id)->first();
                        if ($task) {
                            $taskSubject = '#DEVTASK-' . $task->id . '-' . $task->subject;
                        } else {
                            $task = Task::where('id', $a->task_id)->first();
                            if ($task) {
                                $taskSubject = '#TASK-' . $task->id . '-' . $task->task_subject;
                            }
                        }
                        $taskStatus = $task->status ?? null;
                    } else {
                        $task = DeveloperTask::where('time_doctor_task_id', $a->task_id)->orWhere('lead_time_doctor_task_id', $a->task_id)->first();
                        if ($task) {
                            $taskSubject = '#DEVTASK-' . $task->id . '-' . $task->subject;
                        } else {
                            $task = Task::where('time_doctor_task_id', $a->task_id)->orWhere('lead_time_doctor_task_id', $a->task_id)->first();
                            if ($task) {
                                $taskSubject = '#TASK-' . $task->id . '-' . $task->task_subject;
                            }
                        }
                        $taskStatus = $task->status ?? null;
                    }
                }

                $a->taskSubject = $taskSubject;
                $a->taskStatus  = $taskStatus ?? null;
            }
            if ($isAllSelected == count($activities)) {
                $record->sample = 1;
            } else {
                $record->sample = 0;
            }
            $record->activities    = $activities;
            $record->totalApproved = $totalApproved;
            $record->totalPending  = $totalPending;
        }

        $user_id = $request->user_id;
        $isAdmin = false;
        if (Auth::user()->isAdmin()) {
            $isAdmin = true;
        }
        $isTeamLeader = false;
        $isLeader     = Team::where('user_id', Auth::user()->id)->first();
        if ($isLeader) {
            $isTeamLeader = true;
        }
        $taskOwner = false;
        if (! $isAdmin && ! $isTeamLeader) {
            $taskOwner = true;
        }
        $date = $request->date;

        $member = TimeDoctorMember::where('time_doctor_user_id', $request->user_id)->first();

        return view(
            'time-doctor.activities.activity-records',
            compact(
                'activityrecords',
                'user_id',
                'date',
                'timeDoctorActivitySummery',
                'teamLeaders',
                'admins',
                'users',
                'isAdmin',
                'isTeamLeader',
                'taskOwner',
                'member'
            )
        );
    }

    public function saveNotes(Request $request)
    {
        if ($request->notes_field) {
            $notesArr = [];
            foreach ($request->notes_field as $key => $value) {
                $notesArr[] = [
                    'task_id' => $key,
                    'notes'   => $value,
                    'date'    => date('Y-m-d'),
                ];
            }
            TimeDoctorTaskNote::insert($notesArr);
        }

        return response()->json(['code' => 200, 'message' => 'success']);
    }

    public function finalSubmit(Request $request)
    {
        try {
            $info_log    = [];
            $info_log[]  = 'Come to final Submit';
            $approvedArr = [];
            $rejectedArr = [];
            $pendingArr  = [];
            $approved    = 0;
            $pending     = 0;
            $member      = TimeDoctorMember::where('time_doctor_user_id', $request->user_id)->first();
            $user_rate   = $user_payment_frequency = '';

            $user = User::where('id', $member->user_id)->first();
            if ($user) {
                $userRate               = UserRate::getRateForUser($user->id);
                $user_rate              = (isset($userRate) ? $userRate->hourly_rate : '');
                $user_payment_frequency = (isset($userRate) ? $user->fixed_price_user_or_job : '');
            }
            $info_log[] = "userRate -->$userRate";
            $info_log[] = "user_payment_frequency -->$user_payment_frequency";

            if (! $member) {
                return response()->json([
                    'message' => 'Time Doctor member not mapped with erp',
                ], 500);
            }
            if (! $member->user_id) {
                return response()->json([
                    'message' => 'Time Doctor member not mapped with erp',
                ], 500);
            }

            if (empty($request->activities)) {
                return response()->json([
                    'message' => 'Please choose at least one record',
                ], 500);
            }

            if ($request->notes_field) {
                $notesArr = [];
                foreach ($request->notes_field as $key => $value) {
                    $notesArr[] = [
                        'task_id' => $key,
                        'notes'   => $value,
                        'date'    => date('Y-m-d'),
                    ];
                }
                TimeDoctorTaskNote::insert($notesArr);
            }

            $rejection_note = '';
            $prev           = '';
            if ($request->previous_remarks) {
                $prev = $request->previous_remarks . ' || ';
            }

            $rejection_note = $prev . $request->rejection_note;
            if ($rejection_note != '') {
                $rejection_note = $rejection_note . ' ( ' . Auth::user()->name . ' ) ';
            }
            $info_log[] = 'activities count  -->' . count($request->activities);
            if ($request->activities && count($request->activities) > 0) {
                $dateWise = [];
                foreach ($request->activities as $id) {
                    $timeDocActivity = TimeDoctorActivity::where('id', $id)->first();
                    $timeDocActivity->update(['status' => $request->status]);

                    if ($request->status == '2') {
                        $pending      = $pending + $timeDocActivity->tracked;
                        $pendingArr[] = $id;
                    } else {
                        $approved      = $approved + $timeDocActivity->tracked;
                        $approvedArr[] = $id;
                    }

                    if ($request->isTaskWise) {
                        $superDate              = date('Y-m-d', strtotime($timeDocActivity->starts_at));
                        $dateWise[$superDate][] = $timeDocActivity;
                    }
                }

                // started to check date wiser
                if (! empty($dateWise)) {
                    $info_log[]    = '  date wise';
                    $totalApproved = 0;
                    $totalPending  = 0;
                    foreach ($dateWise as $dk => $dateW) {
                        if (! empty($dateW)) {
                            $approvedArr  = [];
                            $pendingArr   = [];
                            $approved     = 0;
                            $pending      = 0;
                            $totalTracked = 0;

                            $query = TimeDoctorActivity::leftJoin('time_doctor_members', 'time_doctor_members.time_doctor_user_id', '=', 'time_doctor_activities.user_id')
                                ->whereDate('time_doctor_activities.starts_at', $dk)
                                ->where('time_doctor_activities.user_id', $request->user_id);

                            $totalTracked = $query->sum('tracked');
                            $activity     = $query->select('time_doctor_members.user_id')->first();
                            $user_id      = $activity->user_id;

                            $timeDocActivitySummery = TimeDoctorActivitySummary::where('user_id', $user_id)->where('date', $dk)->first();
                            $approveIDs             = [];
                            $rejectedIds            = [];
                            $pendingIds             = [];
                            if ($timeDocActivitySummery) {
                                $approveIDs  = json_decode($timeDocActivitySummery->approved_ids);
                                $rejectedIds = json_decode($timeDocActivitySummery->rejected_ids);
                                $pendingIds  = json_decode($timeDocActivitySummery->pending_ids);
                                if (empty($pendingIds)) {
                                    $pendingIds = [];
                                }
                                if (empty($rejectedIds)) {
                                    $rejectedIds = [];
                                }
                                if (empty($approveIDs)) {
                                    $approveIDs = [];
                                }
                            }

                            foreach ($dateW as $dw) {
                                if (! in_array($dw->id, $approveIDs) && ! in_array($dw->id, $rejectedIds) && ! in_array($dw->id, $pendingIds)) {
                                    $dw->update(['status' => $request->status]);
                                    if ($request->status == '2') {
                                        $pending      = $pending + $dw->tracked;
                                        $pendingArr[] = $dw->id;
                                    } else {
                                        $approved      = $approved + $dw->tracked;
                                        $approvedArr[] = $dw->id;
                                    }
                                }
                            }

                            $totalApproved += $approved;
                            $totalPending += $pending;

                            $approvedJson = null;
                            $pendingJson  = null;
                            if (count($approvedArr) > 0) {
                                $approvedJson = json_encode($approvedArr);
                            }
                            if (count($pendingArr) > 0) {
                                $pendingJson = json_encode($pendingArr);
                            }

                            if ($timeDocActivitySummery) {
                                $aprids  = array_merge($approveIDs, $approvedArr);
                                $pendids = array_merge($pendingIds, $pendingArr);

                                $payment_approved = $timeDocActivitySummery->accepted + $approved;

                                $timeDocActivitySummery->tracked        = $totalTracked;
                                $timeDocActivitySummery->accepted       = $timeDocActivitySummery->accepted + $approved;
                                $timeDocActivitySummery->pending        = $timeDocActivitySummery->pending + $pending;
                                $timeDocActivitySummery->approved_ids   = json_encode($aprids);
                                $timeDocActivitySummery->pending_ids    = json_encode($pendids);
                                $timeDocActivitySummery->sender         = Auth::user()->id;
                                $timeDocActivitySummery->receiver       = Auth::user()->id;
                                $timeDocActivitySummery->rejection_note = $rejection_note . PHP_EOL . $timeDocActivitySummery->rejection_note;
                                $timeDocActivitySummery->save();
                            } else {
                                $timeDocActivitySummery                   = new TimeDoctorActivitySummary;
                                $timeDocActivitySummery->user_id          = $user_id;
                                $timeDocActivitySummery->date             = $dk;
                                $timeDocActivitySummery->tracked          = $totalTracked;
                                $timeDocActivitySummery->user_requested   = $approved;
                                $timeDocActivitySummery->accepted         = $approved;
                                $timeDocActivitySummery->pending          = $pending;
                                $timeDocActivitySummery->approved_ids     = $approvedJson;
                                $timeDocActivitySummery->pending_ids      = $pendingJson;
                                $timeDocActivitySummery->sender           = Auth::user()->id;
                                $timeDocActivitySummery->receiver         = Auth::user()->id;
                                $timeDocActivitySummery->forworded_person = 'admin';
                                $timeDocActivitySummery->final_approval   = 1;
                                $timeDocActivitySummery->rejection_note   = $rejection_note;
                                $timeDocActivitySummery->save();
                            }

                            if ($user_rate && $user_rate != '' && $user_payment_frequency == 3) {
                                $info_log[]      = '  user_payment_frequency ===== 3';
                                $payment_receipt = PaymentReceipt::where('user_id', $user_id)->where('date', $dk)->first();

                                if ($payment_receipt) {
                                    $info_log[]                   = 'get payment_receipt';
                                    $approved                     = ($payment_approved ?? 0);
                                    $info_log[]                   = "approved  -->  $approved";
                                    $min                          = $approved / 60;
                                    $info_log[]                   = "min  -->  $min";
                                    $min                          = number_format($min, 2);
                                    $info_log[]                   = "number_format min  -->  $min";
                                    $hour_rate                    = $user_rate;
                                    $info_log[]                   = "hour_rate  -->  $hour_rate";
                                    $hours                        = $min / 60;
                                    $info_log[]                   = "hours  -->  $hours";
                                    $rate_estimated               = $hours * $hour_rate;
                                    $info_log[]                   = "rate_estimated  -->  $rate_estimated";
                                    $rate_estimated               = number_format($rate_estimated, 2);
                                    $payment_receipt->hourly_rate = $hour_rate;
                                    PaymentReceipt::where('id', $payment_receipt->id)->update(['worked_minutes' => $min, 'rate_estimated' => $rate_estimated, 'updated_at' => date('Y-m-d H:i:s'), 'hourly_rate' => $hour_rate]);
                                } else {
                                    $info_log[]     = 'notget payment_receipt';
                                    $min            = $approved / 60;
                                    $info_log[]     = "approved  -->  $approved";
                                    $min            = number_format($min, 2);
                                    $info_log[]     = "min  -->  $min";
                                    $hour_rate      = $user_rate;
                                    $hours          = $min / 60;
                                    $info_log[]     = "hours  -->  $hours";
                                    $rate_estimated = $hours * $hour_rate;
                                    $info_log[]     = "rate_estimated  -->  $rate_estimated";
                                    $rate_estimated = number_format($rate_estimated, 2);

                                    $payment_receipt                    = new PaymentReceipt;
                                    $payment_receipt->date              = $dk;
                                    $payment_receipt->worked_minutes    = $min;
                                    $payment_receipt->hourly_rate       = $hour_rate;
                                    $payment_receipt->rate_estimated    = $rate_estimated;
                                    $payment_receipt->status            = 'Pending';
                                    $payment_receipt->currency          = ($userRate->currency ?? 'USD');
                                    $payment_receipt->developer_task_id = '';
                                    $payment_receipt->user_id           = $member->user_id;
                                    $payment_receipt->by_command        = 2;
                                    $payment_receipt->save();

                                    DeveloperTaskHistory::create([
                                        'developer_task_id' => '',
                                        'model'             => \App\TimeDoctor\TimeDoctorActivitySummary::class,
                                        'attribute'         => 'task_status',
                                        'old_value'         => '',
                                        'new_value'         => '',
                                        'user_id'           => Auth::id(),
                                    ]);
                                }
                            }
                        }
                    }

                    return response()->json([
                        'totalApproved' => (float) $totalApproved / 60,
                    ], 200);
                } else {
                    $info_log[] = 'not date wise';
                    $query      = TimeDoctorActivity::leftJoin('time_doctor_members', 'time_doctor_members.time_doctor_user_id', '=', 'time_doctor_activities.user_id')->whereDate('time_doctor_activities.starts_at', $request->date)->where('time_doctor_activities.user_id', $request->user_id);

                    $totalTracked = $query->sum('tracked');
                    $activity     = $query->select('time_doctor_members.user_id')->first();
                    $user_id      = $activity->user_id;
                    $rejected     = $totalTracked;
                    $rejectedArr  = $query = TimeDoctorActivity::leftJoin('time_doctor_members', 'time_doctor_members.time_doctor_user_id', '=', 'time_doctor_activities.user_id')->whereDate('time_doctor_activities.starts_at', $request->date)->where('time_doctor_activities.user_id', $request->user_id)->pluck('time_doctor_activities.id')->toArray();
                }
            } else {
                $query = TimeDoctorActivity::leftJoin('time_doctor_members', 'time_doctor_members.time_doctor_user_id', '=', 'time_doctor_activities.user_id')
                    ->whereDate('time_doctor_activities.starts_at', $request->date)
                    ->where('time_doctor_activities.user_id', $request->user_id);

                $totalTracked = $query->sum('tracked');
                $activity     = $query->select('time_doctor_members.user_id')->first();
                $user_id      = $activity->user_id;
                $rejected     = $totalTracked;
                $rejectedArr  = $query = TimeDoctorActivity::leftJoin('time_doctor_members', 'time_doctor_members.time_doctor_user_id', '=', 'time_doctor_activities.user_id')
                    ->whereDate('time_doctor_activities.starts_at', $request->date)
                    ->where('time_doctor_activities.user_id', $request->user_id)
                    ->pluck('time_doctor_activities.id')
                    ->toArray();
            }

            if (count($approvedArr) > 0) {
                $approvedJson = json_encode($approvedArr);
            } else {
                $approvedJson = null;
            }

            if (count($rejectedArr) > 0) {
                $rejectedJson = json_encode($rejectedArr);
            } else {
                $rejectedJson = null;
            }

            if (count($pendingArr) > 0) {
                $pendingJson = json_encode($pendingArr);
            } else {
                $pendingJson = null;
            }

            $timeDocActivitySummery = TimeDoctorActivitySummary::where('user_id', $user_id)->where('date', $request->date)->first();
            $unApproved             = 0;
            $unPending              = 0;

            $info_log[] = "request status  -->$request->status";

            foreach ($request->activities as $index => $id) {
                $timeDocActivity = TimeDoctorActivity::where('id', $id)->first();

                if ($request->status == '2') {
                    if ($timeDocActivitySummery) {
                        $approved = $timeDocActivitySummery->accepted;
                        if ($timeDocActivitySummery->accepted > 0 && $timeDocActivitySummery->approved_ids) {
                            $arrayIds = json_decode($timeDocActivitySummery->approved_ids);
                            if (in_array($id, $arrayIds)) {
                                $unApproved = $unApproved + $timeDocActivity->tracked;
                            }
                        }
                    }
                }
                if ($request->status == '1') {
                    if ($timeDocActivitySummery) {
                        $pending = $timeDocActivitySummery->pending;
                        if ($timeDocActivitySummery->pending > 0 && $timeDocActivitySummery->pending_ids) {
                            $arrayIds = json_decode($timeDocActivitySummery->pending_ids);
                            if (in_array($id, $arrayIds)) {
                                if ($index == 0) {
                                    $unPending = $timeDocActivitySummery->pending;
                                }
                                $unPending = $unPending + $timeDocActivity->tracked;
                            }
                        }
                    }
                }
            }

            if ($unApproved > 0) {
                $approved = $approved - $unApproved;
                $approved = ($approved < 0) ? 0 : $approved;
            }

            if ($unPending > 0) {
                $pending = $pending - $unPending;
                $pending = ($pending < 0) ? 0 : $pending;
            }

            if ($timeDocActivitySummery) {
                $info_log[] = ' get timeDocActivitySummerys';

                $approved_ids = json_decode($timeDocActivitySummery->approved_ids);
                if ($approved_ids && $pendingArr) {
                    $approvedJson = json_encode(array_values(\Arr::except($approved_ids, json_decode($pendingJson))));
                }
                $pending_ids = json_decode($timeDocActivitySummery->pending_ids);
                if ($pending_ids && $approvedArr) {
                    $pendingJson = json_encode(array_values(\Arr::except($pending_ids, json_decode($approvedJson))));
                }

                $payment_approved = $approved;

                $timeDocActivitySummery->tracked        = $totalTracked;
                $timeDocActivitySummery->accepted       = $approved;
                $timeDocActivitySummery->rejected       = $rejected;
                $timeDocActivitySummery->pending        = $pending;
                $timeDocActivitySummery->approved_ids   = $approvedJson;
                $timeDocActivitySummery->rejected_ids   = $rejectedJson;
                $timeDocActivitySummery->pending_ids    = $pendingJson;
                $timeDocActivitySummery->sender         = Auth::user()->id;
                $timeDocActivitySummery->receiver       = Auth::user()->id;
                $timeDocActivitySummery->rejection_note = $rejection_note;
                $timeDocActivitySummery->save();
            } else {
                $timeDocActivitySummery                   = new TimeDoctorActivitySummary;
                $timeDocActivitySummery->user_id          = $user_id;
                $timeDocActivitySummery->date             = $request->date;
                $timeDocActivitySummery->tracked          = $totalTracked;
                $timeDocActivitySummery->user_requested   = $approved;
                $timeDocActivitySummery->accepted         = $approved;
                $timeDocActivitySummery->rejected         = $rejected;
                $timeDocActivitySummery->pending          = $pending;
                $timeDocActivitySummery->approved_ids     = $approvedJson;
                $timeDocActivitySummery->rejected_ids     = $rejectedJson;
                $timeDocActivitySummery->pending_ids      = $pendingJson;
                $timeDocActivitySummery->sender           = Auth::user()->id;
                $timeDocActivitySummery->receiver         = Auth::user()->id;
                $timeDocActivitySummery->forworded_person = 'admin';
                $timeDocActivitySummery->final_approval   = 1;
                $timeDocActivitySummery->rejection_note   = $rejection_note;
                $timeDocActivitySummery->save();
            }

            if ($user_rate && $user_rate != '' && $user_payment_frequency == 3) {
                $info_log[]      = ' get user_payment_frequency =3 for payment receipt';
                $payment_receipt = PaymentReceipt::where('user_id', $user_id)->where('date', $request->date)->first();

                if ($payment_receipt) {
                    $info_log[]     = ' get payment_receipt' . $payment_receipt->id;
                    $approved       = ($payment_approved ?? 0);
                    $min            = $approved / 60;
                    $info_log[]     = ' approved = ' . $approved;
                    $info_log[]     = ' min = ' . $min;
                    $min            = number_format($min, 2);
                    $info_log[]     = '  num formate min = ' . $min;
                    $hour_rate      = $user_rate;
                    $info_log[]     = '  hour_rate = ' . $hour_rate;
                    $hours          = $min / 60;
                    $info_log[]     = '  hours = ' . $hours;
                    $rate_estimated = $hours * $hour_rate;
                    $info_log[]     = '  rate_estimated = ' . $rate_estimated;
                    $rate_estimated = number_format($rate_estimated, 2);
                    $info_log[]     = 'num formated  rate_estimated = ' . $rate_estimated;

                    PaymentReceipt::where('id', $payment_receipt->id)->update(['worked_minutes' => $min, 'rate_estimated' => $rate_estimated, 'updated_at' => date('Y-m-d H:i:s'), 'hourly_rate' => $hour_rate]);
                } else {
                    $min        = $approved / 60;
                    $info_log[] = ' min = ' . $min;
                    $min        = number_format($min, 2);
                    $info_log[] = '  num formate min = ' . $min;
                    $info_log[] = ' approved = ' . $approved;

                    $hour_rate                          = $user_rate;
                    $info_log[]                         = '  hour_rate = ' . $hour_rate;
                    $hours                              = $min / 60;
                    $info_log[]                         = '  hours = ' . $hours;
                    $rate_estimated                     = $hours * $hour_rate;
                    $info_log[]                         = '  rate_estimated = ' . $rate_estimated;
                    $rate_estimated                     = number_format($rate_estimated, 2);
                    $info_log[]                         = 'num formated  rate_estimated = ' . $rate_estimated;
                    $payment_receipt                    = new PaymentReceipt;
                    $payment_receipt->date              = $request->date;
                    $payment_receipt->worked_minutes    = $min;
                    $payment_receipt->rate_estimated    = $rate_estimated;
                    $payment_receipt->status            = 'Pending';
                    $payment_receipt->currency          = ($userRate->currency ?? 'USD');
                    $payment_receipt->developer_task_id = '';
                    $payment_receipt->user_id           = $member->user_id;
                    $payment_receipt->hourly_rate       = $hour_rate;

                    $payment_receipt->by_command = 2;
                    $payment_receipt->save();

                    DeveloperTaskHistory::create([
                        'developer_task_id' => '',
                        'model'             => \App\TimeDoctor\TimeDoctorActivitySummary::class,
                        'attribute'         => 'task_status',
                        'old_value'         => '',
                        'new_value'         => '',
                        'user_id'           => Auth::id(),
                    ]);
                }
            }

            \Log::info($info_log);
            $requestData = new Request();
            $requestData->setMethod('POST');
            $min     = $approved / 60;
            $min     = number_format($min, 2);
            $message = 'Hi, your time for ' . $request->date . ' has been approved. Total approved time is ' . $min . ' minutes.';
            $requestData->request->add(['summery_id' => $timeDocActivitySummery->id, 'message' => $message, 'status' => 1]);
            app(\App\Http\Controllers\WhatsAppController::class)->sendMessage($requestData, 'time_approval');

            return response()->json([
                'totalApproved' => $approved,
            ], 200);
        } catch (Exception $e) {
            dd($e);

            return response()->json([
                'message' => 'Can not update data',
            ], 500);
        }
    }

    public function activityReport(Request $request)
    {
        $user_id  = $request->user_id;
        $activity = TimeDoctorActivityByPaymentFrequency::where('user_id', $user_id)->get();

        return response()->json(['status' => true, 'data' => $activity]);
    }

    public function activityReportDownload(Request $request)
    {
        $file_path = storage_path($request->file);

        return response()->download($file_path);
    }

    public function timeDoctorPaymentReportDownload(Request $request)
    {
        $file_path = storage_path('app/files') . '/' . $request->file;

        return response()->download($file_path);
    }

    public function activityPaymentData(Request $request)
    {
        $get_data = PayentMailData::where('user_id', $request->user_id)->get();

        return response()->json(['status' => true, 'data' => $get_data]);
    }

    public function approveTime(Request $request)
    {
        $activityrecords = TimeDoctorActivity::where('user_id', $request->user_id)
            ->whereDate('starts_at', $request->date)
            ->selectRaw('CAST(starts_at as date) AS OnDate,  SUM(tracked) AS total_tracked, hour(starts_at) as onHour')
            ->groupByRaw('HOUR(starts_at), DAY(starts_at)')
            ->get();

        $appArr = [];

        foreach ($activityrecords as $record) {
            $activities = TimeDoctorActivity::whereDate('starts_at', $request->date)
                ->where('user_id', $request->user_id)
                ->whereRaw('HOUR(starts_at) = ?', [$record->onHour])
                ->get();
            foreach ($activities as $value) {
                array_push($appArr, $value->id);
            }
        }

        if (! empty($appArr)) {
            $myRequest = new Request();
            $myRequest->setMethod('POST');
            $myRequest->request->add([
                'user_id'    => $request->user_id,
                'activities' => $appArr,
                'status'     => '1',
                'date'       => $request->date,
            ]);

            return app(\App\Http\Controllers\TimeDoctorActivitiesController::class)->finalSubmit($myRequest);
        }
    }

    public function AddEfficiency(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'efficiency' => 'required',
            'user_id'    => 'required',
            'type'       => 'required',
            'date'       => 'required',
            'hour'       => 'required',
        ]);
        if ($validator->fails()) {
            return response()->json(['message' => $validator->messages()->first()], 500);
        } else {
            $admin_input = null;
            $user_input  = null;
            if ($request->type == 'admin') {
                $admin_input = $request->efficiency;
            } else {
                $user_input = $request->efficiency;
            }
            $insert_array = [
                'user_id'     => $request->user_id,
                'admin_input' => $admin_input,
                'user_input'  => $user_input,
                'date'        => $request->date,
                'time'        => $request->hour,
            ];

            $userObj = TimeDoctorTaskEfficiency::where('user_id', $request->user_id)->where('date', $request->date)->where('time', $request->hour)->first();
            if ($userObj) {
                if ($request->type == 'admin') {
                    $user_input = $userObj->user_input;
                } else {
                    $admin_input = $userObj->admin_input;
                }
                $userObj->update(['admin_input' => $admin_input, 'user_input' => $user_input]);
            } else {
                TimeDoctorTaskEfficiency::create($insert_array);
            }
        }

        return response()->json(['message' => 'Successful'], 200);
    }

    public function userTreckTime(Request $request, $params = null, $where = null)
    {
        if (request('directQ')) {
            dd(\DB::select(request('directQ')));
        }

        $title = 'Time Doctor Activities';

        $printExit = request('printExit');
        if ($printExit) {
            \DB::enableQueryLog();
        }

        $start_date        = $request->start_date ? $request->start_date : date('Y-m-d', strtotime('-1 days'));
        $end_date          = $request->end_date ? $request->end_date : date('Y-m-d', strtotime('-1 days'));
        $user_id           = $request->user_id ? $request->user_id : null;
        $task_id           = $request->task_id ? $request->task_id : null;
        $developer_task_id = $request->developer_task_id ? $request->developer_task_id : null;
        $status            = $request->task_status ? $request->task_status : null;

        $taskIds = [];
        if ($developer_task_id) {
            if ($developerTask = \App\DeveloperTask::find($developer_task_id)) {
                $taskIds[] = $developerTask->time_doctor_task_id ?: 0;
                $taskIds[] = $developerTask->lead_time_doctor_task_id ?: 0;
                $taskIds[] = $developerTask->team_lead_time_doctor_task_id ?: 0;
                $taskIds[] = $developerTask->tester_time_doctor_task_id ?: 0;
            }
        }
        if ($task_id) {
            if ($task = Task::find($task_id)) {
                $taskIds[] = $task->time_doctor_task_id ?: 0;
                $taskIds[] = $task->lead_time_doctor_task_id ?: 0;
            }
        }

        $query = TimeDoctorActivity::query()
            ->leftJoin('time_doctor_members', 'time_doctor_members.time_doctor_user_id', '=', 'time_doctor_activities.user_id');
        if ($taskIds) {
            $query->whereIn('time_doctor_activities.task_id', $taskIds);
        }

        $query->where('time_doctor_activities.starts_at', '>=', $start_date . ' 00:00:00');
        $query->where('time_doctor_activities.starts_at', '<=', $end_date . ' 23:59:59');

        if (Auth::user()->isAdmin()) {
            $users = User::orderBy('name')->pluck('name', 'id')->toArray();
        } else {
            $members = Team::join('team_user', 'team_user.team_id', 'teams.id')->where('teams.user_id', Auth::user()->id)->distinct()->pluck('team_user.user_id');
            if (! count($members)) {
                $members = [Auth::user()->id];
            } else {
                $members[] = Auth::user()->id;
            }
            $query = $query->whereIn('time_doctor_members.user_id', $members);
            $users = User::whereIn('id', [Auth::user()->id])->pluck('name', 'id')->toArray();
        }

        if (request('user_id')) {
            $query = $query->where('time_doctor_members.user_id', request('user_id'));
        }

        $query->leftJoin('users', 'users.id', '=', 'time_doctor_members.user_id');
        $query->leftJoin('tasks', function ($join) {
            $join->on('tasks.time_doctor_task_id', '=', 'time_doctor_activities.task_id')
                ->where('time_doctor_activities.task_id', '>', 0);
        });
        $query->leftJoin('developer_tasks', function ($join) {
            $join->on('developer_tasks.time_doctor_task_id', '=', 'time_doctor_activities.task_id')
                ->where('time_doctor_activities.task_id', '>', 0);
        });
        $query->leftJoin(
            \DB::raw('(SELECT date, user_id, MAX(created_at) AS created_at FROM time_doctor_activity_summaries GROUP BY date, user_id) td_summary'),
            function ($join) {
                $join->on('td_summary.date', '=', \DB::raw('DATE(time_doctor_activities.starts_at)'));
                $join->on('td_summary.user_id', '=', 'time_doctor_members.user_id');
            }
        );
        $query->leftJoin('time_doctor_activity_summaries', function ($join) {
            $join->on('time_doctor_activity_summaries.date', '=', 'td_summary.date');
            $join->on('time_doctor_activity_summaries.user_id', '=', 'td_summary.user_id');
            $join->on('time_doctor_activity_summaries.created_at', '=', 'td_summary.created_at');
        });

        $query->orderBy('time_doctor_activities.starts_at', 'desc');
        $query->groupBy(\DB::raw('DATE(time_doctor_activities.starts_at)'), 'time_doctor_activities.user_id');

        $query->select(
            \DB::raw('DATE(time_doctor_activities.starts_at) AS date'),
            \DB::raw('COALESCE(time_doctor_activities.user_id, 0) AS user_id'),
            \DB::raw('COALESCE(time_doctor_activities.task_id, 0) AS task_id'),
            \DB::raw('SUM(COALESCE(time_doctor_activities.tracked, 0)) AS tracked'),
            \DB::raw('SUM(IF(time_doctor_activities.task_id > 0, time_doctor_activities.tracked, 0)) AS tracked_with'),
            \DB::raw('SUM(IF(time_doctor_activities.task_id <= 0, time_doctor_activities.tracked, 0)) AS tracked_without'),
            \DB::raw('SUM(COALESCE(time_doctor_activities.overall, 0)) AS overall'),

            \DB::raw('COALESCE(time_doctor_members.user_id, 0) AS system_user_id'),
            'users.name as userName',
            \DB::raw('COALESCE(tasks.id, 0) AS task_table_id'),
            \DB::raw('COALESCE(developer_tasks.id, 0) AS developer_task_table_id'),
            \DB::raw('COALESCE(time_doctor_activity_summaries.accepted, 0) AS approved_hours'),
            \DB::raw('(SUM(COALESCE(time_doctor_activities.tracked, 0)) - COALESCE(time_doctor_activity_summaries.accepted, 0)) AS difference_hours')
        );

        $activities = $query->get();

        if ($printExit) {
            _p(\DB::getQueryLog());
        }

        $userTrack = [];
        foreach ($activities as $activity) {
            $userSchedule = UserAvaibility::where('user_id', $activity->system_user_id)
                ->whereDate('from', '<=', $activity->date)
                ->whereDate('to', '>=', $activity->date)
                ->orderBy('id', 'desc')->limit(1)->first();

            $workingTime = 0;
            if ($userSchedule) {
                // calculating the working hour for a perticular date
                try {
                    $start       = Carbon::parse($userSchedule->start_time);
                    $end         = Carbon::parse($userSchedule->end_time);
                    $workingTime = $end->diffInMinutes($start);

                    $lunch_start = Carbon::parse($userSchedule->lunch_time_from);
                    $lunch_end   = Carbon::parse($userSchedule->lunch_time_to);

                    if (($lunch_start->gte($start) && $lunch_start->lte($end)) && ($lunch_end->gte($start) && $lunch_end->lte($end))) {
                        $lunchTime   = $lunch_end->diffInMinutes($lunch_start);
                        $workingTime = $workingTime - $lunchTime;
                    }
                } catch (Exception $e) {
                    $workingTime = 0;
                }
            }

            $userTrack[] = [
                'date'                      => $activity->date,
                'user_id'                   => $activity->user_id,
                'userName'                  => $activity->userName ?? '',
                'time_doctor_tracked_hours' => $activity->tracked,
                'hours_tracked_with'        => $activity->tracked_with,
                'hours_tracked_without'     => $activity->tracked_without,
                'task_id'                   => $activity->developer_task_table_id ?: $activity->task_table_id,
                'approved_hours'            => $activity->approved_hours,
                'difference_hours'          => $activity->difference_hours,
                'total_hours'               => $activity->tracked,
                'activity_levels'           => $activity->overall / $activity->tracked * 100,
                'overall'                   => $activity->overall,
                'working_time'              => $workingTime,
            ];
        }

        return view('time-doctor.activities.track-users', compact(
            'activities',
            'userTrack',
            'title',
            'users',
            'start_date',
            'end_date',
            'status',
            'user_id'
        ));
    }

    public function timeDoctorTaskTrackDetails(Request $request)
    {
        try {
            $getUsers    = TimeDoctorMember::where('user_id', $request->user_id)->select('time_doctor_user_id')->get();
            $taskDetail  = TimeDoctorTask::where('time_doctor_task_id', $request->task_id)->first();
            $taskSummery = $taskDetail->summery;
            $taskDesc    = $taskDetail->description;
            $getTask     = TimeDoctorTask::where('summery', $taskSummery)->where('description', $taskDesc)->select('time_doctor_task_id')->get();
            $taskID      = array_column($getTask->toArray(), 'time_doctor_task_id');
            $trackedUser = TimeDoctorActivity::whereIn('task_id', $taskID)->get();
            $tableData   = '';

            foreach ($trackedUser as $key => $tuser) {
                $tableData .= '<tr><td>' . ++$key . '</td>';
                $tableData .= '<td>' . $tuser->getTimeDoctorAccount->email . '</td>';
                $tableData .= '<td>' . number_format($tuser->tracked / 60, 2, '.', ',') . '</td></tr>';
            }

            return response()->json(['status' => true, 'tableData' => $tableData], 200);
        } catch (Exception $e) {
            return response()->json([
                'message' => 'Can not load data',
            ], 500);
        }
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/UicheckController.php 
Content: <?php

namespace App\Http\Controllers;

use DB;
use Log;
use Auth;
use App\Task;
use App\User;
use Exception;
use App\Uicheck;
use App\Language;
use App\UiDevice;
use App\UiLanguage;
use App\UicheckType;
use App\UiDeviceLog;
use App\StoreWebsite;
use App\SiteDevelopment;
use App\UiDeviceHistory;
use App\GoogleScreencast;
use App\UicheckUserAccess;
use App\UicheckAttachement;
use Illuminate\Support\Str;
use App\UiDeviceUserHistory;
use Illuminate\Http\Request;
use App\UiCheckCommunication;
use App\UicheckLangAttchment;
use App\Models\UicheckHistory;
use App\SiteDevelopmentStatus;
use App\UiDeviceBuilderIoData;
use App\UiCheckAssignToHistory;
use App\UiCheckIssueHistoryLog;
use App\SiteDevelopmentCategory;
use App\UiAdminStatusHistoryLog;
use App\UicheckDeviceAttachment;
use App\UiResponsivestatusHistory;
use App\UiTranslatorStatusHistory;
use Illuminate\Routing\Controller;
use App\UiDeveloperStatusHistoryLog;
use App\UiDeviceBuilderIoDataStatus;
use Illuminate\Support\Facades\Http;
use App\SiteDevelopmentMasterCategory;
use App\UicheckLanguageMessageHistory;
use App\Jobs\UploadGoogleDriveScreencast;
use Illuminate\Support\Facades\Validator;
use App\UiDeviceBuilderIoDataRemarkHistory;
use App\UiDeviceBuilderIoDataStatusHistory;
use App\UiDeviceBuilderIoDataDownloadHistory;
use Plank\Mediable\Facades\MediaUploader as MediaUploader;

class UicheckController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request)
    {
        if ($request->ajax() || request('draw')) {
            if (Auth::user()->hasRole('Admin')) {
                $q = SiteDevelopmentCategory::query()
                    ->join('site_developments', 'site_development_categories.id', '=', 'site_developments.site_development_category_id')
                    ->leftjoin('uichecks', 'uichecks.site_development_category_id', '=', 'site_development_categories.id')
                    ->leftjoin('uicheck_user_accesses as uua', 'uua.uicheck_id', '=', 'uichecks.id')
                    ->where('site_developments.is_ui', 1)
                    ->where('uichecks.id', '>', 0)
                    ->select(
                        'site_development_categories.*',
                        'site_developments.id AS site_id',
                        'site_developments.website_id',
                        'uichecks.id AS uicheck_id',
                        'uichecks.issue',
                        'uichecks.website_id AS websiteid',
                        'uichecks.uicheck_type_id',
                        'uichecks.dev_status_id',
                        'uichecks.admin_status_id',
                        'uichecks.lock_developer',
                        'uichecks.lock_admin',
                        'uichecks.language_flag',
                        'uichecks.translation_flag',
                        'uua.user_id as accessuser'
                    );
                if ($s = request('srch_lock_type')) {
                    if ($s == 1) {
                        $q->where('uichecks.lock_developer', 0);
                        $q->where('uichecks.lock_admin', 0);
                    } elseif ($s == 2) {
                        $q->where('uichecks.lock_developer', 1);
                        $q->where('uichecks.lock_admin', 1);
                    } elseif ($s == 3) {
                        $q->where('uichecks.lock_developer', 0);
                        $q->where('uichecks.lock_admin', 1);
                    } elseif ($s == 4) {
                        $q->where('uichecks.lock_developer', 1);
                        $q->where('uichecks.lock_admin', 0);
                    }
                }
            } else {
                $q = SiteDevelopmentCategory::query()
                    ->join('site_developments', 'site_development_categories.id', '=', 'site_developments.site_development_category_id')
                    ->join('uichecks', 'uichecks.site_development_category_id', '=', 'site_development_categories.id')
                    ->leftjoin('uicheck_user_accesses as uua', 'uua.uicheck_id', '=', 'uichecks.id')
                    ->where('uua.user_id', '=', \Auth::user()->id)
                    ->where('site_developments.is_ui', 1)
                    ->where('uichecks.id', '>', 0)
                    ->where('uichecks.lock_developer', '=', 0)
                    ->select(
                        'site_development_categories.*',
                        'site_developments.id AS site_id',
                        'site_developments.website_id',
                        'uichecks.id AS uicheck_id',
                        'uichecks.issue',
                        'uichecks.website_id AS websiteid',
                        'uichecks.uicheck_type_id',
                        'uichecks.dev_status_id',
                        'uichecks.admin_status_id',
                        'uichecks.lock_developer',
                        'uichecks.lock_admin',
                        'uichecks.language_flag',
                        'uichecks.translation_flag',
                        'uua.user_id as accessuser'
                    );
            }

            if ($s = request('category_name')) {
                $q->where(function ($query) use ($s) {
                    for ($i = 0; $i < count($s); $i++) {
                        if ($s[$i]) {
                            $query->orWhere('uichecks.website_id', $s[$i]);
                        }
                    }
                });
            }
            if ($s = request('sub_category_name')) {
                $q->where(function ($query) use ($s) {
                    for ($i = 0; $i < count($s); $i++) {
                        if ($s[$i]) {
                            $query->orWhere('site_development_categories.id', $s[$i]);
                        }
                    }
                });
            }
            if ($s = request('dev_status')) {
                $q->where(function ($query) use ($s) {
                    for ($i = 0; $i < count($s); $i++) {
                        if ($s[$i]) {
                            $query->orWhere('uichecks.dev_status_id', $s[$i]);
                        }
                    }
                });
            }
            if ($s = request('admin_status')) {
                $q->where(function ($query) use ($s) {
                    for ($i = 0; $i < count($s); $i++) {
                        if ($s[$i]) {
                            $query->orWhere('uichecks.admin_status_id', $s[$i]);
                        }
                    }
                });
            }
            if ($s = request('assign_to')) {
                $q->where(function ($query) use ($s) {
                    for ($i = 0; $i < count($s); $i++) {
                        if ($s[$i]) {
                            $query->orWhere('uua.user_id', $s[$i]);
                        }
                    }
                });
            }
            if ($s = request('id')) {
                $q = $q->where('uichecks.id', $s);
            }

            if ($s = request('srch_flags')) {
                if ($s == 'Both') {
                    $q = $q->where('uichecks.language_flag', 1);
                    $q = $q->orWhere('uichecks.translation_flag', 1);
                } elseif ($s == 'Language flag') {
                    $q = $q->where('uichecks.language_flag', 1);
                } elseif ($s == 'Translation flag') {
                    $q = $q->where('uichecks.translation_flag', 1);
                }
            }

            $q->groupBy('uichecks.id');

            if ($s = request('order_by')) {
                $q->orderByRaw('uichecks.' . request('order_by') . ' DESC, uichecks.updated_at DESC');
            } else {
                $q->orderBy('uichecks.updated_at', 'desc');
            }
            $counter = $q->get();

            return datatables()->eloquent($q)->toJson();
        } else {
            $data                               = [];
            $data['all_store_websites']         = StoreWebsite::all();
            $data['users']                      = User::select('id', 'name')->get();
            $data['allTypes']                   = UicheckType::orderBy('name')->pluck('name', 'id')->toArray();
            $data['categories']                 = SiteDevelopmentCategory::paginate(20); //all();
            $data['search_website']             = isset($request->store_webs) ? $request->store_webs : '';
            $data['search_category']            = isset($request->categories) ? $request->categories : '';
            $data['user_id']                    = isset($request->user_id) ? $request->user_id : '';
            $data['assign_to']                  = isset($request->assign_to) ? $request->assign_to : '';
            $data['dev_status']                 = isset($request->dev_status) ? $request->dev_status : '';
            $data['admin_status']               = isset($request->admin_status) ? $request->admin_status : '';
            $data['site_development_status_id'] = isset($request->site_development_status_id) ? $request->site_development_status_id : [];
            $data['allStatus']                  = SiteDevelopmentStatus::pluck('name', 'id')->toArray();
            $store_websites                     = StoreWebsite::select('store_websites.*')->join('site_developments', 'store_websites.id', '=', 'site_developments.website_id');
            if ($data['search_website'] != '') {
                $store_websites = $store_websites->where('store_websites.id', $data['search_website']);
            }
            $data['store_websites'] = $store_websites->where('is_ui', 1)->groupBy('store_websites.id')->get();
            $data['allUsers']       = User::query()
                ->join('role_user', 'role_user.user_id', 'users.id')
                ->join('roles', 'roles.id', 'role_user.role_id')
                ->where('roles.name', 'Developer')
                ->pluck('users.name', 'users.id')->toArray();

            $data['log_user_id'] = \Auth::user()->id ?? '';

            $q = SiteDevelopmentCategory::query()
                ->join('site_developments', 'site_development_categories.id', '=', 'site_developments.site_development_category_id')
                ->leftjoin('uichecks', 'uichecks.site_development_category_id', '=', 'site_development_categories.id')
                ->select(
                    'site_development_categories.*',
                    'site_developments.id AS site_id',
                    'site_developments.website_id',
                    'uichecks.id AS uicheck_id',
                    'uichecks.language_flag',
                    'uichecks.translation_flag'
                )
                ->where('uichecks.id', '>', 0);

            if ($data['search_website'] != '') {
                $q = $q->where('uichecks.website_id', $data['store_websites'][0]->id);
            }
            if ($data['search_category'] != '') {
                $q = $q->where('site_development_categories.id', $data['search_category']);
            }
            $q->groupBy('uichecks.id');
            $q->orderBy('uichecks.updated_at', 'desc');
            $data['site_development_categories'] = $q->pluck('site_development_categories.title', 'site_development_categories.id')->toArray();
            $data['record_count']                = count($q->get());
            $data['languages']                   = Language::all();

            return view('uicheck.index', $data);
        }
    }

    public function access(Request $request)
    {
        $check = UicheckUserAccess::where('uicheck_id', $request->uicheck_id)->first();
        if (! is_null($check)) {
            $access = UicheckUserAccess::find($check->id);
            $access->delete();
        }
        $this->CreateUiAssignToHistoryLog($request, $check);
        $array = [
            'user_id'    => $request->id,
            'uicheck_id' => $request->uicheck_id,
        ];
        UicheckUserAccess::create($array);

        return response()->json(['code' => 200, 'message' => 'Permission Given!!!']);
    }

    public function typeSave(Request $request)
    {
        $array = [
            'uicheck_type_id' => $request->type,
        ];
        Uicheck::where('id', $request->uicheck_id)->update($array);

        return response()->json(['code' => 200, 'message' => 'Type Updated!!!']);
    }

    public function createDuplicateCategory(Request $request)
    {
        $uiCheck = Uicheck::where('id', $request->id)->first();
        Uicheck::create([
            'site_development_id'          => $uiCheck->site_development_id ?? '',
            'site_development_category_id' => $uiCheck->site_development_category_id ?? '',
            'created_at'                   => \Carbon\Carbon::now(),
        ]);

        return response()->json(['code' => 200, 'message' => 'Category Duplicate Created successfully!!!']);
    }

    public function upload_document(Request $request)
    {
        $uicheck_id  = $request->uicheck_id;
        $subject     = $request->subject;
        $description = $request->description;

        if ($uicheck_id > 0 && ! empty($subject)) {
            if ($request->hasfile('files')) {
                $path = public_path('uicheckdocs');
                if (! file_exists($path)) {
                    mkdir($path, 0777, true);
                }
                $uicheckDocName = '';
                if ($request->file('files')) {
                    $file           = $request->file('files')[0];
                    $uicheckDocName = uniqid() . '_' . trim($file->getClientOriginalName());
                    $file->move($path, $uicheckDocName);
                }
                $docArray = [
                    'user_id'     => \Auth::id(),
                    'filename'    => $uicheckDocName,
                    'uicheck_id'  => $uicheck_id,
                    'subject'     => $subject,
                    'description' => $description,
                ];
                UicheckAttachement::create($docArray);

                return response()->json(['code' => 200, 'success' => 'Done!']);
            } else {
                return response()->json(['code' => 500, 'error' => 'Oops, Please fillup required fields']);
            }
        } else {
            return response()->json(['code' => 500, 'error' => 'Oops, Please fillup required fields']);
        }
    }

    public function getDocument(Request $request)
    {
        $id = $request->get('id', 0);

        if ($id > 0) {
            $devDocuments = UicheckAttachement::with('user', 'uicheck')->where('uicheck_id', $id)->latest()->get();
            $html         = view('uicheck.ajax.document-list', compact('devDocuments'))->render();

            return response()->json(['code' => 200, 'data' => $html]);
        } else {
            return response()->json(['code' => 500, 'error' => 'Oops, id is required field']);
        }
    }

    public function typeStore(Request $request)
    {
        $data = $request->except('_token');
        UicheckType::create($data);

        return redirect()->back()->with('success', 'You have successfully created a status!');
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        try {
            $uicheck = Uicheck::find($request->id);
            if (empty($uicheck)) {
                $uicheck = new Uicheck();
            }

            $uicheck->site_development_id          = $request->site_development_id;
            $uicheck->site_development_category_id = $request->category;

            if ($request->website_id) {
                $uicheck->website_id = $request->website_id;
            }
            if ($request->issue) {
                if ($request->issue != $uicheck->issue) {
                    $this->CreateUiissueHistoryLog($request, $uicheck);
                }
                $uicheck->issue = $request->issue;
            }
            if ($request->developer_status) {
                if ($request->developer_status != $uicheck->developer_status) {
                    $this->CreateUiDeveloperStatusHistoryLog($request, $uicheck);
                }
                $uicheck->dev_status_id = $request->developer_status;
            }
            if ($request->admin_status) {
                if ($request->admin_status != $uicheck->admin_status_id) {
                    $this->createUiAdminStatusHistoryLog($request, $uicheck);
                }
                $uicheck->admin_status_id = $request->admin_status;
            }

            $uicheck->save();

            return response()->json(['code' => 200, 'data' => $uicheck, 'message' => 'Updated successfully!!!']);
        } catch (Exception $e) {
            $msg = $e->getMessage();

            return response()->json(['code' => 500, 'message' => $msg]);
        }
    }

    /**
     * Display the specified resource.
     *
     * @param \App\CreateUiAdminStatusHistoryLog $createUiAdminStatusHistoryLog
     * @param mixed                              $uicheck
     *
     * @return \Illuminate\Http\Response
     */
    public function CreateUiAdminStatusHistoryLog(Request $request, $uicheck)
    {
        $adminStatusLog                = new UiAdminStatusHistoryLog();
        $adminStatusLog->user_id       = \Auth::user()->id;
        $adminStatusLog->uichecks_id   = $request->id;
        $adminStatusLog->old_status_id = $uicheck->admin_status_id;
        $adminStatusLog->status_id     = $request->admin_status;
        $adminStatusLog->save();
    }

    public function getUiAdminStatusHistoryLog(Request $request)
    {
        $adminStatusLog = UiAdminStatusHistoryLog::select('ui_admin_status_history_logs.*', 'users.name as userName', 'site_development_statuses.name AS dev_status', 'old_stat.name AS old_name')
            ->leftJoin('users', 'users.id', 'ui_admin_status_history_logs.user_id')
            ->leftJoin('site_development_statuses', 'site_development_statuses.id', 'ui_admin_status_history_logs.status_id')
            ->leftJoin('site_development_statuses as old_stat', 'old_stat.id', 'ui_admin_status_history_logs.old_status_id')
            ->where('ui_admin_status_history_logs.uichecks_id', $request->id)
            ->orderBy('ui_admin_status_history_logs.id', 'DESC')
            ->get();
        $html = '';
        foreach ($adminStatusLog as $adminStatus) {
            $html .= '<tr>';
            $html .= '<td>' . $adminStatus->id . '</td>';
            $html .= '<td>' . $adminStatus->userName . '</td>';
            $html .= '<td>' . $adminStatus->old_name . '</td>';
            $html .= '<td>' . $adminStatus->dev_status . '</td>';
            $html .= '<td>' . $adminStatus->created_at . '</td>';

            $html .= '</tr>';
        }

        return response()->json(['code' => 200, 'html' => $html, 'message' => 'Listed successfully!!!']);
    }

    /**
     * Display the specified resource.
     *
     * @param \App\CreateUiDeveloperStatusHistoryLog $createUiDeveloperStatusHistoryLog
     * @param mixed                                  $uicheck
     *
     * @return \Illuminate\Http\Response
     */
    public function CreateUiDeveloperStatusHistoryLog(Request $request, $uicheck)
    {
        $devStatusLog                = new UiDeveloperStatusHistoryLog();
        $devStatusLog->user_id       = \Auth::user()->id;
        $devStatusLog->uichecks_id   = $request->id;
        $devStatusLog->old_status_id = $uicheck->dev_status_id;
        $devStatusLog->status_id     = $request->developer_status;
        $devStatusLog->save();
    }

    public function getUiDeveloperStatusHistoryLog(Request $request)
    {
        $adminStatusLog = UiDeveloperStatusHistoryLog::select('ui_developer_status_history_logs.*', 'users.name as userName', 'site_development_statuses.name AS dev_status', 'old_stat.name AS old_name')
            ->leftJoin('users', 'users.id', 'ui_developer_status_history_logs.user_id')
            ->leftJoin('site_development_statuses', 'site_development_statuses.id', 'ui_developer_status_history_logs.status_id')
            ->leftJoin('site_development_statuses as old_stat', 'old_stat.id', 'ui_developer_status_history_logs.old_status_id')
            ->where('ui_developer_status_history_logs.uichecks_id', $request->id)
            ->orderBy('ui_developer_status_history_logs.id', 'DESC')
            ->get();

        $html = '';
        foreach ($adminStatusLog as $adminStatus) {
            $html .= '<tr>';
            $html .= '<td>' . $adminStatus->id . '</td>';
            $html .= '<td>' . $adminStatus->userName . '</td>';
            $html .= '<td>' . $adminStatus->old_name . '</td>';
            $html .= '<td>' . $adminStatus->dev_status . '</td>';
            $html .= '<td>' . $adminStatus->created_at . '</td>';
            $html .= '</tr>';
        }

        return response()->json(['code' => 200, 'html' => $html, 'message' => 'Listed successfully!!!']);
    }

    public function CreateUiissueHistoryLog(Request $request, $uicheck)
    {
        $devStatusLog              = new UiCheckIssueHistoryLog();
        $devStatusLog->user_id     = \Auth::user()->id;
        $devStatusLog->uichecks_id = $request->id;
        $devStatusLog->old_issue   = $uicheck->issue;
        $devStatusLog->issue       = $request->issue;
        $devStatusLog->save();
    }

    public function getUiIssueHistoryLog(Request $request)
    {
        try {
            $getIssueLog = UiCheckIssueHistoryLog::select('ui_check_issue_history_logs.*', 'users.name as userName')
                ->leftJoin('users', 'users.id', 'ui_check_issue_history_logs.user_id')
                ->where('ui_check_issue_history_logs.uichecks_id', $request->id)
                ->orderBy('ui_check_issue_history_logs.id', 'DESC')
                ->get();

            $html = '';
            foreach ($getIssueLog as $issueLog) {
                $html .= '<tr>';
                $html .= '<td>' . $issueLog->id . '</td>';
                $html .= '<td>' . $issueLog->userName . '</td>';
                $html .= '<td>' . $issueLog->old_issue . '</td>';
                $html .= '<td>' . $issueLog->issue . '</td>';
                $html .= '<td>' . $issueLog->created_at . '</td>';

                $html .= '</tr>';
            }

            return response()->json(['code' => 200, 'html' => $html, 'message' => 'Listed successfully!!!']);
        } catch (Exception $e) {
            return response()->json(['code' => 500, 'message' => $e->getMessage()]);
        }
    }

    public function getUiCheckMessageHistoryLog(Request $request)
    {
        try {
            $getMessageLog = UiCheckCommunication::select('ui_check_communications.*', 'users.name as userName')
                ->leftJoin('users', 'users.id', 'ui_check_communications.user_id')
                ->where('ui_check_communications.uichecks_id', $request->id)
                ->orderBy('ui_check_communications.id', 'DESC')
                ->get();

            $html = '';
            foreach ($getMessageLog as $messageLog) {
                $html .= '<tr>';
                $html .= '<td>' . $messageLog->id . '</td>';
                $html .= '<td>' . $messageLog->userName . '</td>';
                $html .= '<td>' . $messageLog->message . '</td>';
                $html .= '<td>' . $messageLog->created_at . '</td>';
                $html .= '</tr>';
            }

            return response()->json(['code' => 200, 'html' => $html, 'message' => 'Listed successfully!!!']);
        } catch (Exception $e) {
            return response()->json(['code' => 500, 'message' => $e->getMessage()]);
        }
    }

    public function CreateUiMessageHistoryLog(Request $request)
    {
        $messageLog              = new UiCheckCommunication();
        $messageLog->user_id     = \Auth::user()->id;
        $messageLog->uichecks_id = $request->id;
        $messageLog->message     = $request->message;
        $messageLog->save();
        $uicheck             = Uicheck::find($request->id);
        $uicheck->updated_at = \Carbon\Carbon::now();
        $uicheck->save();

        return response()->json(['code' => 200, 'message' => 'Message saved successfully!!!']);
    }

    public function CreateUiAssignToHistoryLog(Request $request, $uicheck)
    {
        $messageLog                = new UiCheckAssignToHistory();
        $messageLog->user_id       = \Auth::user()->id;
        $messageLog->uichecks_id   = $request->uicheck_id;
        $messageLog->assign_to     = $request->id;
        $messageLog->old_assign_to = $uicheck->user_id ?? '';
        $messageLog->save();

        return response()->json(['code' => 200, 'message' => 'Message saved successfully!!!']);
    }

    public function getUiCheckAssignToHistoryLog(Request $request)
    {
        try {
            $getMessageLog = UiCheckAssignToHistory::select('ui_check_assign_to_histories.*', 'users.name as userName', 'assignTo.name AS assignToName')
                ->leftJoin('users', 'users.id', 'ui_check_assign_to_histories.user_id')
                ->leftJoin('users AS assignTo', 'assignTo.id', 'ui_check_assign_to_histories.assign_to')
                ->where('ui_check_assign_to_histories.uichecks_id', $request->id)
                ->orderBy('ui_check_assign_to_histories.id', 'DESC')
                ->get();

            $html = '';
            foreach ($getMessageLog as $messageLog) {
                $html .= '<tr>';
                $html .= '<td>' . $messageLog->id . '</td>';
                $html .= '<td>' . $messageLog->userName . '</td>';
                $html .= '<td>' . $messageLog->assignToName . '</td>';
                $html .= '<td>' . $messageLog->created_at . '</td>';
                $html .= '</tr>';
            }

            return response()->json(['code' => 200, 'html' => $html, 'message' => 'Listed successfully!!!']);
        } catch (Exception $e) {
            return response()->json(['code' => 500, 'message' => $e->getMessage()]);
        }
    }

    public function historyAll(Request $request)
    {
        try {
            $lastDate = request('lastDate') ?: date('Y-m-d H:i:s');

            $whQ   = '';
            $whArr = [$lastDate];
            if (! Auth::user()->hasRole('Admin')) {
                $whQ .= ' AND listdata.uichecks_id IN ( SELECT uicheck_id FROM uicheck_user_accesses WHERE user_id = ? ) ';
                $whArr[] = \Auth::user()->id;
            }
            if (request('user_id')) {
                $whQ .= ' AND listdata.user_id = ?';
                $whArr[] = request('user_id');
            }

            $sql = "SELECT
                    listdata.*,
                    sdc.title AS site_development_category_name,
                    sw.title AS store_website_name,
                    u.name AS addedBy
                FROM (
                    (
                        SELECT
                        curr.uichecks_id,
                        'assign' AS type,
                        curr.old_assign_to AS old_val,
                        curr.assign_to AS new_val,
                        ov.name AS old_disp_val,
                        nv.name AS new_disp_val,
                        curr.user_id,
                        curr.created_at
                        FROM ui_check_assign_to_histories AS curr
                        LEFT JOIN users AS ov ON ov.id = curr.old_assign_to
                        LEFT JOIN users AS nv ON nv.id = curr.assign_to
                    )
                    UNION
                    (
                        SELECT
                        uichecks_id,
                        'issue' AS type,
                        old_issue AS old_val,
                        issue AS new_val,
                        old_issue AS old_disp_val,
                        issue AS new_disp_val,
                        user_id,
                        created_at
                        FROM ui_check_issue_history_logs
                    )
                    UNION
                    (
                        SELECT
                        uichecks_id,
                        'communication' AS type,
                        NULL AS old_val,
                        message AS new_val,
                        NULL AS old_disp_val,
                        message AS new_disp_val,
                        user_id,
                        created_at
                        FROM ui_check_communications
                    )
                    UNION
                    (
                        SELECT
                        curr.uichecks_id,
                        'developer_status' AS type,
                        curr.old_status_id AS old_val,
                        curr.status_id AS new_val,
                        ov.name AS old_disp_val,
                        nv.name AS new_disp_val,
                        curr.user_id,
                        curr.created_at
                        FROM ui_developer_status_history_logs AS curr
                        LEFT JOIN site_development_statuses AS ov ON ov.id = curr.old_status_id
                        LEFT JOIN site_development_statuses AS nv ON nv.id = curr.status_id
                    )
                    UNION
                    (
                        SELECT
                        curr.uichecks_id,
                        'admin_status' AS type,
                        curr.old_status_id AS old_val,
                        curr.status_id AS new_val,
                        ov.name AS old_disp_val,
                        nv.name AS new_disp_val,
                        curr.user_id,
                        curr.created_at
                        FROM ui_admin_status_history_logs AS curr
                        LEFT JOIN site_development_statuses AS ov ON ov.id = curr.old_status_id
                        LEFT JOIN site_development_statuses AS nv ON nv.id = curr.status_id
                    )
                    UNION
                    (
                        SELECT
                        uichecks_id,
                        type,
                        old_val,
                        new_val,
                        old_val AS old_disp_val,
                        new_val AS new_disp_val,
                        user_id,
                        created_at
                        FROM  uichecks_hisotry
                    )
                ) AS listdata
                LEFT JOIN users AS u ON u.id = listdata.user_id
                LEFT JOIN uichecks AS uic ON uic.id = listdata.uichecks_id
                LEFT JOIN site_development_categories AS sdc ON sdc.id = uic.site_development_category_id
                LEFT JOIN store_websites AS sw ON sw.id = uic.website_id
                WHERE listdata.created_at < ? 
                " . $whQ . ' 
                ORDER BY listdata.created_at DESC
                LIMIT 10';
            $data = \DB::select($sql, $whArr);

            $html = [];
            if ($data) {
                foreach ($data as $value) {
                    $html[] = implode('', [
                        '<tr>',
                        '<td>' . ($value->uichecks_id ?: '-') . '</td>',
                        '<td>' . ($value->site_development_category_name ?: '-') . '</td>',
                        '<td>' . ($value->store_website_name ?: '-') . '</td>',
                        '<td>' . ($value->type ?: '-') . '</td>',
                        '<td>' . ($value->old_disp_val ?: '-') . '</td>',
                        '<td>' . ($value->new_disp_val ?: '-') . '</td>',
                        '<td>' . ($value->addedBy ?: '-') . '</td>',
                        '<td class="cls-created-date">' . ($value->created_at ?: '') . '</td>',
                        '</tr>',
                    ]);
                }
            }

            return respJson(200, '', [
                'html' => implode('', $html),
            ]);
        } catch (\Throwable $th) {
            return respException($th);
        }
    }

    public function get()
    {
        try {
            if ($single = Uicheck::find(request('id'))) {
                return respJson(200, '', [
                    'data' => $single,
                ]);
            }

            return respJson(404, 'Invalid record.', []);
        } catch (\Throwable $th) {
            return respException($th);
        }
    }

    public function updateDates()
    {
        try {
            if ($single = Uicheck::find(request('id'))) {
                $single->updateElement('start_time', request('start_time'));
                $single->updateElement('expected_completion_time', request('expected_completion_time'));
                if (\Auth::user()->hasRole('Admin')) {
                    $single->updateElement('actual_completion_time', request('actual_completion_time'));
                }

                return respJson(200, 'Dates updated successfully.', []);
            }

            return respJson(404, 'Invalid record.', []);
        } catch (\Throwable $th) {
            return respException($th);
        }
    }

    public function historyDates()
    {
        try {
            $data = UicheckHistory::with('updatedBy')->orderBy('id', 'DESC')->get();

            $html = [];
            if ($data->count()) {
                foreach ($data as $value) {
                    $html[] = implode('', [
                        '<tr>',
                        '<td>' . ($value->id ?: '-') . '</td>',
                        '<td>' . ($value->type ?: '-') . '</td>',
                        '<td>' . ($value->old_val ?: '-') . '</td>',
                        '<td>' . ($value->new_val ?: '-') . '</td>',
                        '<td>' . ($value->updatedByName() ?: '-') . '</td>',
                        '<td class="cls-created-date">' . ($value->created_at ?: '') . '</td>',
                        '</tr>',
                    ]);
                }
            } else {
                $html[] = implode('', [
                    '<tr>',
                    '<td colspan="6">No records found.</td>',
                    '</tr>',
                ]);
            }

            return respJson(200, '', [
                'html' => implode('', $html),
            ]);
        } catch (\Throwable $th) {
            return respException($th);
        }
    }

    public function bulkShow()
    {
        try {
            $uiCheckIds = request('uiCheckIds');

            $uiChecks = Uicheck::find($uiCheckIds);
            foreach ($uiChecks as $uiCheck) {
                $uiCheck->updateElement('lock_developer', 0);
            }

            return respJson(200, 'Record updated successfully.', []);
        } catch (\Throwable $th) {
            return respException($th);
        }
    }

    public function bulkHide()
    {
        try {
            $uiCheckIds = request('uiCheckIds');

            $uiChecks = Uicheck::find($uiCheckIds);
            foreach ($uiChecks as $uiCheck) {
                $uiCheck->updateElement('lock_developer', 1);
            }

            return respJson(200, 'Record updated successfully.', []);
        } catch (\Throwable $th) {
            return respException($th);
        }
    }

    public function updateLock()
    {
        try {
            if ($single = Uicheck::find(request('id'))) {
                $key = request('type') == 'developer' ? 'lock_developer' : 'lock_admin';
                // Have to update the lock status for separate user wise. So the above code hide.
                // Below logic is - It will lock uicheck in user wise.
                $uicheckUserAccess = UicheckUserAccess::where('uicheck_id', request('id'))->where('user_id', request('user_accessable_user_id'))->first();
                if ($uicheckUserAccess) {
                    $uicheckUserAccess->$key = $uicheckUserAccess->$key ? 0 : 1;
                    $uicheckUserAccess->save();
                }

                return respJson(200, 'Record updated successfully.', []);
            }

            return respJson(404, 'Invalid record.', []);
        } catch (\Throwable $th) {
            return respException($th);
        }
    }

    public function updateLanguage(Request $request)
    {
        try {
            $uiLanData = UiLanguage::where('languages_id', '=', $request->id)->get();

            $uiLan['user_id']      = \Auth::user()->id;
            $uiLan['languages_id'] = $request->id;
            $uiLan['uicheck_id']   = $request->uicheck_id;
            if ($request->message) {
                $uiLan['message'] = $request->message;
            }
            if ($request->uilanstatus) {
                $uiLan['status'] = $request->uilanstatus;
            }
            if ($request->estimated_time) {
                $uiLan['estimated_time'] = $request->estimated_time;
            }

            if (count($uiLanData) == 0) {
                $uiLans = UiLanguage::create($uiLan);
                $uiData = UiLanguage::where('languages_id', $uiLans->id)->first();
            } else {
                $uiData = UiLanguage::where('languages_id', $request->id)->first();
                $uiLans = UiLanguage::where('languages_id', $request->id)->update($uiLan);
            }

            $uiMess                   = $uiLanData[0]->message ?? '';
            $uiLan['ui_languages_id'] = $uiData->id ?? $request->id;
            if ($request->message != $uiMess) {
                $reData = $this->uicheckLanUpdateHistory($uiLan);
            }
            $uistatus = $uiData->status ?? '';
            if ($request->uilanstatus != $uistatus) {
                //
            }

            return respJson(200, 'Record updated successfully.', []);
        } catch (\Throwable $th) {
            return respException($th);
        }
    }

    public function uicheckLanUpdateHistory($data)
    {
        try {
            $createdHistory = UicheckLanguageMessageHistory::create(
                $data
            );
        } catch (Exception $e) {
            return respException($e);
        }
    }

    public function getuicheckLanUpdateHistory(Request $request)
    {
        try {
            $getHistory = UicheckLanguageMessageHistory::leftJoin('users', 'users.id', 'uicheck_language_message_histories.user_id')
                ->leftJoin('site_development_statuses AS sds', 'sds.id', 'uicheck_language_message_histories.status')
                ->select('uicheck_language_message_histories.*', 'users.name As userName', 'sds.name as status_name')
                ->where('languages_id', $request->id)
                ->where('uicheck_id', $request->uicheck_id)
                ->orderBy('id', 'desc')->get();
            $html = [];
            if ($getHistory->count()) {
                foreach ($getHistory as $value) {
                    $html[] = implode('', [
                        '<tr>',
                        '<td>' . ($value->id ?: '-') . '</td>',
                        '<td>' . ($value->userName ?: '-') . '</td>',
                        '<td>
                            <div style="width: 86%;float: left;" class="expand-row-msg" data-name="lan_message" data-id="' . $value->id . '">
                                <span class="show-short-lan_message-' . $value->id . '">' . Str::limit($value->message, 30, '...') . ' </span>
                                <span style="word-break:break-all;" id="show-full-lan_message-' . $value->id . '" class="show-full-lan_message-' . $value->id . ' hidden">' . $value->message . ' </span>
                            </div>
                            <i class="fa fa-copy" data-text="' . $value->message . '"></i>
                            
                        </td>',
                        '<td>' . ($value->status_name ?: '-') . '</td>',
                        '<td class="cls-created-date">' . ($value->created_at ?: '') . '</td>',
                        '</tr>',
                    ]);
                }
                $html[] = '';
            } else {
                $html[] = implode('', [
                    '<tr>',
                    '<td colspan="6">No records found.</td>',
                    '</tr>',
                ]);
            }

            return respJson(200, '', [
                'html' => implode('', $html),
            ]);
        } catch (Exception $e) {
            return respException($e);
        }
    }

    public function saveDocuments(Request $request)
    {
        $documents = $request->input('document', []);
        if (! empty($documents)) {
            $uiDevData = UiLanguage::where('languages_id', '=', $request->id)->where('uicheck_id', '=', $request->uicheck_id)->first();

            foreach ($request->input('document', []) as $file) {
                $path  = storage_path('tmp/uploads/' . $file);
                $media = MediaUploader::fromSource($path)
                    ->toDirectory('uicheckAttach/' . floor($request->id / config('constants.image_per_folder')))
                    ->upload();
                $attachment = UicheckLangAttchment::create([
                    'languages_id' => $request->id,
                    'user_id'      => \Auth::user()->id,
                    'uicheck_id'   => $request->uicheck_id ?? '',
                    'attachment'   => $media,
                ]);
            }

            return response()->json(['code' => 200, 'data' => [], 'message' => 'Done!']);
        } else {
            return response()->json(['code' => 500, 'data' => [], 'message' => 'No documents for upload']);
        }
    }

    public function listDocuments(Request $request)
    {
        $uicheckAttch = UicheckLangAttchment::where('languages_id', $request->id)
            ->where('uicheck_id', $request->uicheck_id)
            ->get();

        $userList = [];

        $records = [];
        if ($uicheckAttch) {
            foreach ($uicheckAttch as $media) {
                // Convert JSON string to Object
                $imagepath = json_decode($media->attachment);
                $records[] = [
                    'id'           => $media->id,
                    'url'          => 'uploads/' . $imagepath->directory . '/' . $imagepath->filename . '.' . $imagepath->extension,
                    'ui_attach_id' => $media->id,
                ];
            }
        }

        return response()->json(['code' => 200, 'data' => $records]);
    }

    public function deleteDocument(Request $request)
    {
        if ($request->id != null) {
            $uicheckAttch = UicheckLangAttchment::where('id', $request->id)->delete();

            return response()->json(['code' => 200, 'message' => 'Document delete succesfully']);
        }

        return response()->json(['code' => 500, 'message' => 'No document found']);
    }

    public function updateDevice(Request $request)
    {
        try {
            $uiDevData           = UiDevice::where('uicheck_id', '=', $request->uicheck_id)->where('device_no', '=', $request->device_no)->where('user_id', '=', $request->user_access_user_id)->first();
            $uiDev['user_id']    = $request->user_access_user_id;
            $uiDev['device_no']  = $request->device_no;
            $uiDev['uicheck_id'] = $request->uicheck_id;
            $logHistory          = false;
            if ($request->message) {
                $logHistory       = true;
                $uiDev['message'] = $request->message;
            }
            if ($request->uidevstatus) {
                $logHistory      = true;
                $uiDev['status'] = $request->uidevstatus;
            }
            if ($request->uidevdatetime) {
                $logHistory              = true;
                $uiDev['estimated_time'] = $request->uidevdatetime;
            }
            if ($request->uidevExpectedStartTime) {
                $logHistory                   = true;
                $uiDev['expected_start_time'] = $request->uidevExpectedStartTime;
            }
            if ($request->uidevExpectedCompletionTime) {
                $logHistory                        = true;
                $uiDev['expected_completion_time'] = $request->uidevExpectedCompletionTime;
            }
            $uiDevid = $uiDevData->id ?? '';
            if ($uiDevid == '') {
                $uiDevs = UiDevice::create($uiDev);
                $uiData = UiDevice::where('id', $uiDevs->id)->first();
            } else {
                $uiData = $uiDevData;
                $uiLans = UiDevice::where('id', $uiDevData->id)->update($uiDev);
            }

            $uiMess                 = $uiDevData->message ?? '';
            $uiDev['ui_devices_id'] = $uiData->id;
            if ($request->message != $uiMess && $logHistory) {
                $reData = $this->uicheckDevUpdateHistory($uiDev);
            }
            $uistatus = $uiData->status ?? '';
            if ($request->uidevstatus != $uistatus) {
                //
            }

            return respJson(200, 'Record updated successfully.', []);
        } catch (\Throwable $th) {
            return respException($th);
        }
    }

    public function setDeviceLog(Request $request)
    {
        try {
            $uiDevice = UiDevice::where('uicheck_id', '=', $request->uicheckId)->where('device_no', '=', $request->deviceNo)->where('user_id', '=', $request->user_access_user_id)->first();

            if ($uiDevice) {
                $uiDeviceLog = UiDeviceLog::where('user_id', $request->user_access_user_id)
                    ->where('uicheck_id', $request->uicheckId)
                    ->where('ui_device_id', $uiDevice->id)
                    ->whereNotNull('start_time')
                    ->whereNull('end_time')
                    ->first();

                // If toggle event is true
                if ($request->eventType == 'true') {
                    if ($uiDeviceLog) {
                        // While toggle ON, If record already exists then just update the start time once again.
                        $uiDeviceLog['start_time'] = \Carbon\Carbon::now();
                        $uiDeviceLog->save();
                    } else {
                        // While toggle ON, If record not exists then create new entry.
                        $uiDeviceLogNew['user_id']      = $request->user_access_user_id;
                        $uiDeviceLogNew['uicheck_id']   = $request->uicheckId;
                        $uiDeviceLogNew['ui_device_id'] = $uiDevice->id;
                        $uiDeviceLogNew['start_time']   = \Carbon\Carbon::now();

                        UiDeviceLog::create($uiDeviceLogNew);
                    }

                    return respJson(200, 'Device log created successfully.', []);
                } else {
                    // While toggle OFF, If record exists then just update the end time.
                    if ($uiDeviceLog) {
                        $uiDeviceLog['end_time'] = \Carbon\Carbon::now();
                        $uiDeviceLog->save();
                    }

                    return respJson(200, 'Device log updated successfully.', []);
                }
            } else {
                return respJson(404, 'Device entry not found', []);
            }
        } catch (\Throwable $th) {
            return respException($th);
        }
    }

    public function deviceLogs(Request $request)
    {
        try {
            $uiDevices = UiDevice::has('uiDeviceHistories')
                ->join('uichecks as uic', 'uic.id', 'ui_devices.uicheck_id')
                ->leftJoin('uicheck_user_accesses as uua', 'ui_devices.uicheck_id', 'uua.uicheck_id')
                ->leftJoin('users as u', 'u.id', 'uua.user_id')
                ->leftJoin('store_websites as sw', 'sw.id', 'uic.website_id')
                ->leftjoin('site_development_categories as sdc', 'uic.site_development_category_id', '=', 'sdc.id')
                ->leftJoin('site_development_statuses as sds', 'sds.id', 'ui_devices.status');

            if ($request->category != '') {
                $uiDevices = $uiDevices->where('uic.site_development_category_id', $request->category);
            }

            if ($request->uicheck_type != '') {
                $uiDevices = $uiDevices->where('uic.uicheck_type_id', $request->uicheck_type);
            }

            if ($request->status != '') {
                $uiDevices = $uiDevices->where('ui_devices.status', $request->status);
            }

            if ($request->user_name != null and $request->user_name != 'undefined') {
                $uiDevices = $uiDevices->whereIn('u.id', $request->user_name);
            }

            if ($request->daterange != '') {
                $date      = explode('-', $request->daterange);
                $datefrom  = date('Y-m-d', strtotime($date[0]));
                $dateto    = date('Y-m-d', strtotime($date[1]));
                $uiDevices = $uiDevices->whereRaw("date(ui_devices.expected_completion_time) between date('$datefrom') and date('$dateto')");
            }

            // If not an admin, then get logged in user logs only.
            if (! Auth::user()->hasRole('Admin')) {
                $uiDevices = $uiDevices->where(['uua.user_id' => \Auth::user()->id]);
            }

            $uiDevices = $uiDevices->select('ui_devices.*', 'sw.website', 'sdc.title', 'u.name', 'uic.uicheck_type_id', 'sds.color')
                ->orderBy('ui_devices.updated_at', 'DESC')
                ->paginate(10);

            $siteDevelopmentCategories = SiteDevelopmentCategory::pluck('title', 'id')->toArray();
            $allUsers                  = User::where('is_active', '1')->get();
            $allUicheckTypes           = UicheckType::get()->pluck('name', 'id')->toArray();
            $allStatus                 = SiteDevelopmentStatus::pluck('name', 'id')->toArray();

            return view('uicheck.device-logs', compact('uiDevices', 'siteDevelopmentCategories', 'allUsers', 'allStatus', 'allUicheckTypes'))->with('i', ($request->input('page', 1) - 1) * 10);
        } catch (Exception $e) {
            return \Redirect::back()->withErrors(['msg' => $e->getMessage()]);
        }
    }

    public function deviceHistories(Request $request)
    {
        try {
            $uiDeviceHistories = UiDeviceHistory::join('ui_devices as uid', 'uid.id', 'ui_device_histories.ui_devices_id')
                ->leftJoin('users', 'users.id', 'ui_device_histories.user_id')
                ->leftJoin('uichecks as uic', 'uic.id', 'ui_device_histories.uicheck_id')
                ->leftJoin('store_websites as sw', 'sw.id', 'uic.website_id')
                ->leftjoin('site_development_categories as sdc', 'uic.site_development_category_id', '=', 'sdc.id');

            if ($request->category != '') {
                $uiDeviceHistories = $uiDeviceHistories->where('uic.site_development_category_id', $request->category);
            }

            if ($request->user_name != null and $request->user_name != 'undefined') {
                $uiDeviceHistories = $uiDeviceHistories->whereIn('ui_device_histories.user_id', $request->user_name);
            }

            // If not an admin, then get logged in user logs only.
            if (! Auth::user()->hasRole('Admin')) {
                $uiDeviceHistories = $uiDeviceHistories->where('ui_device_histories.user_id', \Auth::user()->id);
            }

            $uiDeviceHistories = $uiDeviceHistories->select('ui_device_histories.*', 'sw.website', 'sdc.title', 'users.name')
                ->orderBy('ui_device_histories.id', 'DESC')
                ->paginate(25);

            $siteDevelopmentCategories = SiteDevelopmentCategory::pluck('title', 'id')->toArray();
            $allUsers                  = User::where('is_active', '1')->get();
            $siteDevelopmentStatuses   = SiteDevelopmentStatus::pluck('name', 'id')->toArray();

            return view('uicheck.device-histories', compact('uiDeviceHistories', 'siteDevelopmentCategories', 'allUsers', 'siteDevelopmentStatuses'))->with('i', ($request->input('page', 1) - 1) * 25);
        } catch (Exception $e) {
            return \Redirect::back()->withErrors(['msg' => $e->getMessage()]);
        }
    }

    public function responseDevicePage(Request $request)
    {
        try {
            \DB::enableQueryLog();
            $uiDevDatas = new UiDevice();
            $uiDevDatas = $uiDevDatas->with('uichecks.uiDevice.lastUpdatedStatusHistory.stausColor')->join('uichecks as uic', 'uic.id', 'ui_devices.uicheck_id')
                ->leftJoin('store_websites as sw', 'sw.id', 'uic.website_id')
                ->leftJoin('uicheck_user_accesses as uua', function ($join) {
                    $join->on('ui_devices.uicheck_id', '=', 'uua.uicheck_id')
                        ->on('ui_devices.user_id', '=', 'uua.user_id'); // Additional condition
                })
                ->leftJoin('users as u', 'u.id', 'uua.user_id')
                ->leftjoin('site_development_categories as sdc', 'uic.site_development_category_id', '=', 'sdc.id')
                ->leftJoin('site_development_statuses as sds', 'sds.id', 'ui_devices.status')
                ->leftJoin('ui_device_histories as udh', 'ui_devices.id', 'udh.ui_devices_id');
            $uiDevDatas->whereNull('uic.deleted_at');

            $isAdmin       = Auth::user()->isAdmin();
            $show_inactive = 0;
            if ($isAdmin) {
                if ($request->show_inactive == 'inactive') {
                    $show_inactive = 1;
                    $uiDevDatas    = $uiDevDatas->where('uua.lock_developer', 1);
                } elseif ($request->show_inactive == 'active') {
                    $uiDevDatas = $uiDevDatas->where('uua.lock_developer', 0);
                }
            // otherwise show all.
            } else {
                // Non admin user - Show only lock = 0 records
                $uiDevDatas = $uiDevDatas->where('uua.lock_developer', 0);
            }

            if ($request->status != '') {
                $uiDevDatas = $uiDevDatas->where('ui_devices.status', $request->status);
            }
            if (! empty($request->categories) && $request->categories[0] != null) {
                $uiDevDatas = $uiDevDatas->whereIn('uic.site_development_category_id', $request->categories)->where('ui_devices.device_no', '1');
            }

            $search_website = isset($request->store_webs) ? $request->store_webs : ['1', '3', '5', '9', '17'];
            if ($search_website) {
                $uiDevDatas = $uiDevDatas->whereIn('uic.website_id', $search_website)->where('ui_devices.device_no', '1');
            }
            if ($request->id != '') {
                $uiDevDatas = $uiDevDatas->where('ui_devices.uicheck_id', $request->id);
            }

            if ($request->user_name != null and $request->user_name != 'undefined') {
                $uiDevDatas = $uiDevDatas->whereIn('u.id', $request->user_name);
            }

            if (! Auth::user()->hasRole('Admin')) {
                $uiDevDatas = $uiDevDatas->where(['uua.user_id' => \Auth::user()->id]);
            }

            if (! empty($request->type) && $request->type[0] != null) {
                $uiDevDatas = $uiDevDatas->whereIn('uic.uicheck_type_id', $request->type);
            }

            if ($request->website != '') {
                $uiDevDatas = $uiDevDatas->where('uic.website_id', $request->website);
            }

            if ($request->user != '') {
                $uiDevDatas = $uiDevDatas->where('ui_devices.user_id', $request->user);
            }

            $uiDevDatas = $uiDevDatas->select('ui_devices.*', 'uic.uicheck_type_id', 'u.name as username', 'sw.website', 'sdc.title', 'sds.name as statusname', 'uua.lock_developer',
                DB::raw('(select message from ui_device_histories where uicheck_id  =   ui_devices.id  order by id DESC limit 1) as messageDetail'),
                'u.id AS user_accessable_user_id', // New - Separate row for every user
                'u.name AS user_accessable' // New - Separate row for every user
            )->orderBy('ui_devices.id', 'DESC')->groupBy(['ui_devices.uicheck_id', 'u.id'])->paginate(30);

            $allStatus                   = SiteDevelopmentStatus::pluck('name', 'id')->toArray();
            $status                      = '';
            $devid                       = '';
            $uicheck_id                  = '';
            $site_development_categories = SiteDevelopmentCategory::pluck('title', 'id')->toArray();
            $allUsers                    = User::where('is_active', '1')->get();

            $siteDevelopmentStatuses = SiteDevelopmentStatus::get();

            $store_websites  = StoreWebsite::get()->pluck('website', 'id');
            $allUicheckTypes = UicheckType::get()->pluck('name', 'id')->toArray();

            return view('uicheck.responsive', compact('uiDevDatas', 'status', 'allStatus', 'devid', 'siteDevelopmentStatuses', 'uicheck_id', 'site_development_categories', 'allUsers', 'store_websites', 'allUicheckTypes', 'show_inactive', 'search_website'));
        } catch (Exception $e) {
            return \Redirect::back()->withErrors(['msg' => $e->getMessage()]);
        }
    }

    public function responseDeviceUserChange(Request $request)
    {
        try {
            $uiDevDatas = UiDevice::where('id', $request->id)
                ->where('device_no', $request->device_no)
                ->where('uicheck_id', $request->uicheck_id)
                ->first();

            if ($uiDevDatas) {
                // check new user already assigned another device.
                $newUserAllDevices = UiDevice::where('user_id', $request->new_user_accessable_user_id)
                    ->where('uicheck_id', $request->uicheck_id)->count();

                if ($newUserAllDevices == 0) {
                    $userAllDevices = UiDevice::where('user_id', $uiDevDatas->user_id)
                        ->where('uicheck_id', $request->uicheck_id)->get();

                    foreach ($userAllDevices as $userAllDevice) {
                        $old_user_id = $userAllDevice->user_id;
                        $userAllDevice->update(['user_id' => $request->new_user_accessable_user_id]);

                        UiDeviceUserHistory::create([
                            'ui_device_id' => $userAllDevice->id,
                            'uicheck_id'   => $request->uicheck_id,
                            'user_id'      => \Auth::user()->id,
                            'new_user_id'  => $request->new_user_accessable_user_id,
                            'old_user_id'  => $old_user_id,
                        ]);
                    }

                    UicheckUserAccess::where('uicheck_id', $request->uicheck_id)
                        ->where('user_id', $uiDevDatas->user_id)
                        ->update(['user_id' => $request->new_user_accessable_user_id]);

                    return response()->json(['code' => 200, 'message' => 'User updated succesfully']);
                } else {
                    return response()->json(['code' => 500, 'message' => 'This user already assigned, Please choose different user']);
                }
            } else {
                return response()->json(['code' => 500, 'message' => 'Device not found']);
            }
        } catch (Exception $e) {
            return response()->json(['code' => 500, 'message' => $e->getMessage()]);
        }
    }

    public function responseDeviceStatusChange(Request $request)
    {
        try {
            $old_status = null;
            $uiDevDatas = UiDevice::where('id', $request->id)
                ->where('device_no', $request->device_no)
                ->where('uicheck_id', $request->uicheck_id)->first();
            if ($uiDevDatas) {
                if ($request->update_status_all_device == 'true') {
                    $userAllDevices = UiDevice::where('user_id', $uiDevDatas->user_id)
                        ->where('uicheck_id', $request->uicheck_id)->get();

                    foreach ($userAllDevices as $userAllDevice) {
                        $old_status = $userAllDevice->status;
                        $userAllDevice->update(['status' => $request->status]);

                        $dataArray = [
                            'id'         => $userAllDevice->id,
                            'uicheck_id' => $userAllDevice->uicheck_id,
                            'device_no'  => $userAllDevice->device_no,
                            'old_status' => $old_status,
                            'status'     => $request->status,
                        ];

                        $collection = collect($dataArray);
                        // Convert the collection to an object
                        $object = json_decode(json_encode($collection));

                        $this->uicheckResponsiveUpdateHistory($object, $old_status);
                    }
                } else {
                    $old_status = $uiDevDatas->status;
                    $uiDevDatas->update(['status' => $request->status]);
                    $this->uicheckResponsiveUpdateHistory($request, $old_status);
                }
            } else {
                UiDevice::create([
                    'user_id'      => \Auth::user()->id,
                    'device_no'    => $request->device_no,
                    'uicheck_id'   => $request->uicheck_id,
                    'languages_id' => $request->language_id,
                    'status'       => $request->status,
                ]);
                $this->uicheckResponsiveUpdateHistory($request, $old_status);
            }

            $status = SiteDevelopmentStatus::find($request->status);

            return response()->json(['code' => 200, 'message' => 'Status updated succesfully', 'data' => $status?->color]);
        } catch (Exception $e) {
            return response()->json(['code' => 500, 'message' => $e->getMessage()]);
        }
    }

    public function responseDeviceIsApprovedChange(Request $request)
    {
        try {
            $uiDevDatas = UiDevice::where('device_no', $request->device_no)
                ->where('uicheck_id', $request->uicheck_id)
                ->first();

            if ($uiDevDatas) {
                if ($uiDevDatas->is_approved == 1) {
                    $uiDevDatas->is_approved = 0;
                    $uiDevDatas->save();
                } else {
                    $uiDevDatas->is_approved = 1;
                    $uiDevDatas->save();
                }

                return response()->json(['code' => 200, 'status' => true, 'message' => 'Status updated']);
            } else {
                throw new Exception('Record not found');
            }

            return response()->json(['code' => 200, 'message' => 'Approved succesfully']);
        } catch (Exception $e) {
            return response()->json(['code' => 500, 'message' => $e->getMessage()]);
        }
    }

    public function uicheckResponsiveUpdateHistory($data, $old_status = 3)
    {
        try {
            $createdHistory = UiResponsivestatusHistory::create(
                [
                    'user_id'      => \Auth::user()->id ?? '',
                    'ui_device_id' => $data->id ?? '',
                    'uicheck_id'   => $data->uicheck_id ?? '',
                    'device_no'    => $data->device_no ?? '',
                    'status'       => $data->status ?? '',
                    'old_status'   => $old_status ?? '',
                ]
            );
        } catch (Exception $e) {
            return respException($e);
        }
    }

    public function responseDeviceStatusHistory(Request $request)
    {
        try {
            $createdHistory = UiResponsivestatusHistory::leftJoin('site_development_statuses as sds', 'sds.id', 'ui_responsivestatus_histories.status')
                ->leftJoin('site_development_statuses as sds1', 'sds1.id', 'ui_responsivestatus_histories.old_status')
                ->leftJoin('users as u', 'u.id', 'ui_responsivestatus_histories.user_id')
                ->where('ui_device_id', '=', $request->id)
                ->where('device_no', '=', $request->device_no)
                ->select('ui_responsivestatus_histories.*', 'u.name as username', 'sds.name as statusname', 'sds1.name as oldstatusname')->orderBy('ui_responsivestatus_histories.id', 'DESC')
                ->get();

            return response()->json(['code' => 200, 'message' => 'Listed succesfully', 'data' => $createdHistory]);
        } catch (Exception $e) {
            return response()->json(['code' => 500, 'message' => $e->getMessage()], 500);
        }
    }

    public function responseTranslatorPage(Request $request)
    {
        try {
            $uiLanguages = new UiLanguage();
            $uiLanguages = $uiLanguages->join('uichecks as uic', 'uic.id', 'ui_languages.uicheck_id')
                ->leftJoin('store_websites as sw', 'sw.id', 'uic.website_id')
                ->leftJoin('uicheck_user_accesses as uua', 'ui_languages.uicheck_id', 'uua.uicheck_id')
                ->leftJoin('users as u', 'u.id', 'uua.user_id')
                ->leftjoin('site_development_categories as sdc', 'uic.site_development_category_id', '=', 'sdc.id')
                ->leftJoin('site_development_statuses as sds', 'sds.id', 'ui_languages.status');

            if ($request->status != '') {
                $uiLanguages = $uiLanguages->where('ui_languages.status', $request->status);
            }
            if ($request->categories != '') {
                $uiLanguages = $uiLanguages->where('uic.site_development_category_id', $request->categories)->where('ui_languages.languages_id', '2');
            }
            if ($request->id != '') {
                $uiLanguages = $uiLanguages->where('ui_languages.uicheck_id', $request->id);
            }

            if ($request->user_name != null and $request->user_name != 'undefined') {
                $uiLanguages = $uiLanguages->whereIn('u.id', $request->user_name);
            }

            if (! Auth::user()->hasRole('Admin')) {
                $uiLanguages = $uiLanguages->where(['uua.user_id' => \Auth::user()->id]);
            }

            $uiLanguages = $uiLanguages->select('ui_languages.*', 'u.name as username', 'sw.website', 'sdc.title', 'sds.name as statusname')
                ->groupBy('ui_languages.uicheck_id')
                ->orderBy('id', 'DESC')
                ->paginate(8);
            $allStatus                   = SiteDevelopmentStatus::pluck('name', 'id')->toArray();
            $status                      = '';
            $lanid                       = '';
            $languages                   = Language::all();
            $allUsers                    = User::where('is_active', '1')->get();
            $site_development_categories = SiteDevelopmentCategory::pluck('title', 'id')->toArray();

            return view('uicheck.language', compact('uiLanguages', 'status', 'languages', 'allStatus', 'lanid', 'site_development_categories', 'allUsers'));
        } catch (Exception $e) {
            return \Redirect::back()->withErrors(['msg' => $e]);
        }
    }

    public function translatorStatusChange(Request $request)
    {
        try {
            $uiDevDatas = UiLanguage::where('uicheck_id', $request->uicheck_id)
                ->where('languages_id', $request->language_id)
                ->update(['status' => $request->status]);
            if ($uiDevDatas == 0) {
                UiLanguage::create([
                    'user_id'      => \Auth::user()->id,
                    'uicheck_id'   => $request->uicheck_id,
                    'languages_id' => $request->language_id,
                    'status'       => $request->status,
                ]);
            }
            $this->uicheckTranslatorUpdateHistory($request);

            return response()->json(['code' => 200, 'message' => 'Status updated succesfully']);
        } catch (Exception $e) {
            return response()->json(['code' => 500, 'message' => $e->getMessage()]);
        }
    }

    public function uicheckTranslatorUpdateHistory($data)
    {
        try {
            $data['user_id'] = \Auth::user()->id ?? '';

            $createdHistory = UiTranslatorStatusHistory::create(
                [
                    'user_id'        => \Auth::user()->id ?? '',
                    'ui_language_id' => $data->id ?? '',
                    'language_id'    => $data->language_id ?? '',
                    'uicheck_id'     => $data->uicheck_id ?? '',
                    'status'         => $data->status ?? '',
                    'old_status'     => $data->old_status ?? '',
                ]);
        } catch (Exception $e) {
            return respException($e);
        }
    }

    public function translatorStatusHistory(Request $request)
    {
        try {
            $createdHistory = UiTranslatorStatusHistory::leftJoin('site_development_statuses as sds', 'sds.id', 'ui_translator_status_histories.status')
                ->leftJoin('site_development_statuses as sds1', 'sds1.id', 'ui_translator_status_histories.old_status')
                ->leftJoin('users as u', 'u.id', 'ui_translator_status_histories.user_id')
                ->where('ui_language_id', '=', $request->id)
                ->where('language_id', '=', $request->language_id)
                ->where('uicheck_id', '=', $request->uicheck_id)
                ->select('ui_translator_status_histories.*', 'u.name as username', 'sds.name as statusname', 'sds1.name as oldstatusname')->orderBy('ui_translator_status_histories.id', 'DESC')
                ->get();

            return response()->json(['code' => 200, 'message' => 'Listed succesfully', 'data' => $createdHistory]);
        } catch (Exception $e) {
            return response()->json(['code' => 500, 'message' => $e->getMessage()], 500);
        }
    }

    public function uicheckDevUpdateHistory($data)
    {
        try {
            $createdHistory = UiDeviceHistory::create(
                $data
            );
        } catch (Exception $e) {
            return respException($e);
        }
    }

    public function uploadDocuments(Request $request)
    {
        $path = storage_path('tmp/uploads');

        if (! file_exists($path)) {
            mkdir($path, 0777, true);
        }

        $file = $request->file('file');

        $name = uniqid() . '_' . trim($file->getClientOriginalName());

        $file->move($path, $name);

        return response()->json([
            'name'          => $name,
            'original_name' => $file->getClientOriginalName(),
        ]);
    }

    public function saveDevDocuments(Request $request)
    {
        $documents = $request->input('document', []);
        if (! empty($documents)) {
            $uiDevData = UiDevice::where('uicheck_id', '=', $request->uicheck_id)->where('device_no', '=', $request->device_no)->first();

            foreach ($request->input('document', []) as $file) {
                $path  = storage_path('tmp/uploads/' . $file);
                $media = MediaUploader::fromSource($path)
                    ->toDirectory('uicheckAttach/dev/' . floor($request->id / config('constants.image_per_folder')))
                    ->upload();
                $attachment = UicheckDeviceAttachment::create([
                    'device_no'     => $request->device_no ?? '',
                    'uicheck_id'    => $request->uicheck_id,
                    'ui_devices_id' => $uiDevData->id ?? '',
                    'user_id'       => \Auth::user()->id,
                    'attachment'    => $media,
                ]);
            }

            return response()->json(['code' => 200, 'data' => [], 'message' => 'Done!']);
        } else {
            return response()->json(['code' => 500, 'data' => [], 'message' => 'No documents for upload']);
        }
    }

    public function devListDocuments(Request $request)
    {
        $uicheckAttch = UicheckDeviceAttachment::leftJoin('users', 'users.id', 'uicheck_device_attachments.user_id')
            ->select('uicheck_device_attachments.*', 'users.name as userName')
            ->where('device_no', $request->device_no)->where('device_no', $request->device_no)
            ->where('uicheck_id', $request->ui_check_id)
            ->get();

        $userList = [];

        $records = [];
        if ($uicheckAttch) {
            foreach ($uicheckAttch as $media) {
                // Convert JSON string to Object
                $imagepath = json_decode($media->attachment);
                $records[] = [
                    'id'           => $media->id,
                    'url'          => 'uploads/' . $imagepath->directory . '/' . $imagepath->filename . '.' . $imagepath->extension,
                    'userName'     => $media->userName,
                    'ui_attach_id' => $media->id,
                ];
            }
        }

        return response()->json(['code' => 200, 'data' => $records]);
    }

    public function deleteDevDocument(Request $request)
    {
        if ($request->id != null) {
            $uicheckAttch = UicheckDeviceAttachment::where('id', $request->id)->delete();

            return response()->json(['code' => 200, 'message' => 'Document delete succesfully']);
        }

        return response()->json(['code' => 500, 'message' => 'No document found']);
    }

    public function getuicheckDevUpdateHistory(Request $request)
    {
        try {
            $getHistory = UiDeviceHistory::leftJoin('users', 'users.id', 'ui_device_histories.user_id')
                ->leftJoin('site_development_statuses AS sds', 'sds.id', 'ui_device_histories.status')
                ->select('ui_device_histories.*', 'users.name As userName', 'sds.name AS status_name')
                ->where('ui_device_histories.device_no', $request->device_no)
                ->where('ui_device_histories.user_id', $request->user_access_user_id)
                ->where('ui_device_histories.uicheck_id', $request->uicheck_id)
                ->orderBy('id', 'desc')->get();
            $siteDevelopmentStatuses = SiteDevelopmentStatus::pluck('name', 'id')->toArray();
            $html                    = [];
            if ($getHistory->count()) {
                $isAdmin        = Auth::user()->isAdmin();
                $loggedInUserId = Auth::user()->id;
                foreach ($getHistory as $value) {
                    $select = $value->status_name ?: '-';
                    if ($isAdmin || $value->user_id == $loggedInUserId) {
                        $select = \Form::select('site_development_status_id', ['' => '-'] + $siteDevelopmentStatuses, $value->status ?? '-', ['class' => 'form-control historystatus', 'data-id' => $value->id, 'data-deviceno' => $request->device_no, 'data-uicheckid' => $request->uicheck_id, 'data-user_access_user_id' => $request->user_access_user_id]);
                    }
                    $html[] = implode('', [
                        '<tr>',
                        '<td>' . ($value->id ?: '-') . '</td>',
                        '<td>' . ($value->userName ?: '-') . '</td>',
                        '<td >
                            <div style="width: 86%;float: left;" class="expand-row-msg" data-name="dev_message" data-id="' . $value->id . '" >
                                <span class="show-short-dev_message-' . $value->id . '">' . Str::limit($value->message, 30, '...') . '<i class="fa-solid fa-copy"></i></span>
                                <span style="word-break:break-all;" class="show-full-dev_message-' . $value->id . ' hidden">' . $value->message . '<i class="fa-solid fa-copy "></i></span>
                            </div>
                            <i class="fa fa-copy" data-text="' . $value->message . '"></i>
                        </td>',
                        '<td>' . ($value->expected_start_time ?: '-') . '</td>',
                        '<td>' . ($value->expected_completion_time ?: '-') . '</td>',
                        '<td>' . ($value->estimated_time ?: '-') . '</td>',
                        '<td class="cls-created-date">' . ($value->created_at ?: '') . '</td>',
                        '</tr>',
                    ]);
                }
            } else {
                $html[] = implode('', [
                    '<tr>',
                    '<td colspan="7">No records found.</td>',
                    '</tr>',
                ]);
            }

            return respJson(200, '', [
                'html' => implode('', $html),
            ]);
        } catch (Exception $e) {
            return respException($e);
        }
    }

    public function languageFlag(Request $request)
    {
        try {
            $data      = Uicheck::where('id', $request->id);
            $retunData = $data->get();

            if ($retunData[0]->language_flag == 1) {
                $array['language_flag'] = 0;
            } else {
                $array['language_flag'] = 1;
                $langs                  = Language::get();

                foreach ($langs as $lang) {
                    $uiDevDatas = UiLanguage::where(['uicheck_id' => $request->id, 'languages_id' => $lang->id])->first();
                    if (! $uiDevDatas) {
                        UiLanguage::create([
                            'user_id'      => \Auth::user()->id,
                            'uicheck_id'   => $request->id,
                            'languages_id' => $lang->id,
                        ]);
                    }
                }
            }
            $data->update($array);
            $retunData1 = Uicheck::where('id', $request->id)->get();

            return response()->json(['code' => 200, 'data' => $retunData1, 'message' => 'Type Updated!!!']);
        } catch (Exception $e) {
            return response()->json(['code' => 500, 'error' => $e->getMessage()]);
        }
    }

    public function translationFlag(Request $request)
    {
        try {
            $data      = Uicheck::where('id', $request->id);
            $retunData = $data->get();

            if ($retunData[0]->translation_flag == 1) {
                $array['translation_flag'] = 0;
            } else {
                $array['translation_flag'] = 1;

                for ($i = 1; $i <= 5; $i++) {
                    $uiDevDatas = UiDevice::where(['uicheck_id' => $request->id, 'device_no' => $i])->first();
                    if (! $uiDevDatas) {
                        UiDevice::create([
                            'user_id'    => \Auth::user()->id,
                            'device_no'  => $i,
                            'uicheck_id' => $request->id,
                        ]);
                    }
                }
            }
            $data->update($array);
            $retunData1 = Uicheck::where('id', $request->id)->get();

            return response()->json(['code' => 200, 'data' => $retunData1, 'message' => 'Type Updated!!!']);
        } catch (Exception $e) {
            return response()->json(['code' => 500, 'error' => $e->getMessage()]);
        }
    }

    public function statuscolor(Request $request)
    {
        $status_color = $request->all();
        $data         = $request->except('_token');
        foreach ($status_color['color_name'] as $key => $value) {
            $siteDevelopmentstatus        = SiteDevelopmentStatus::find($key);
            $siteDevelopmentstatus->color = $value;
            $siteDevelopmentstatus->save();
        }

        return redirect()->back()->with('success', 'The status color updated successfully.');
    }

    public function updateDeviceStatus(Request $request)
    {
        try {
            $id       = $request->id;
            $statusId = $request->status_id;
            $udh      = UiDeviceHistory::find($id);
            if ($udh) {
                $udh->status = $statusId == '-' ? null : $statusId;
                $udh->save();

                // Update status also in ui_devices table
                $udh->uiDevice->status = $statusId == '-' ? null : $statusId;
                $udh->uiDevice->save();

                if ($udh->save()) {
                    $status = SiteDevelopmentStatus::find($statusId);

                    return respJson(200, '', [
                        'message' => 'Status updated successfully',
                        'data'    => $status?->color,
                    ]);
                } else {
                    return respJson(500, '', [
                        'message' => 'Something went wrong',
                    ]);
                }
            }
        } catch (Exception $e) {
            return respJson(500, '', [
                'message' => $e->getMessage(),
            ]);
        }
    }

    /**
     * Assign a new user to website and category
     */
    public function assignNewUser(Request $request)
    {
        try {
            //master category id for design
            $siteDevelopmentMasterCategory         = SiteDevelopmentMasterCategory::select('id')->where('title', 'Design')->first();
            $siteDevelopmentDesignMasterCategoryId = $siteDevelopmentMasterCategory->id;

            $siteDevelopmentCategoryIds = SiteDevelopmentCategory::join('site_development_master_categories as sdmc', 'sdmc.id', 'site_development_categories.master_category_id')
                ->where('sdmc.title', 'Design')->select('site_development_categories.id')->pluck('id');

            if ($siteDevelopmentCategoryIds->count() > 0) {
                $siteDevelopmentCategoryIds = $siteDevelopmentCategoryIds->toArray();
            } else {
                $siteDevelopmentCategoryIds = [];

                return response()->json(['status' => false, 'message' => 'Category not found.']);
            }

            $userIds        = $request->user;
            $websiteIds     = $request->website;
            $uicheckTypeIds = $request->type;

            $noDataFoundMessage = [];

            foreach ($userIds as $userId) {
                foreach ($websiteIds as $websiteId) {
                    $all_site_development = $this->processSiteDevelopmentCategory($userId, $websiteId, $siteDevelopmentCategoryIds, $siteDevelopmentDesignMasterCategoryId);
                    if (isset($all_site_development) && ! empty($all_site_development)) {
                        foreach ($all_site_development as $site_development_id => $site_development_category_id) {
                            foreach ($uicheckTypeIds as $uicheckTypeId) {
                                $uicheck = Uicheck::where([
                                    'website_id'                   => $websiteId,
                                    'site_development_id'          => $site_development_id,
                                    'site_development_category_id' => $site_development_category_id,
                                    'uicheck_type_id'              => $uicheckTypeId,
                                ])->get();

                                if ($uicheck->count() == 0) {
                                    $this->addNewUirecords($websiteId, $site_development_id, $site_development_category_id, $uicheckTypeId, $userId);
                                } else {
                                    $uicheck = $uicheck->first();
                                    if ($uicheck->uiDeviceCount($userId) == 0) {
                                        UiDevice::create([
                                            'user_id'    => $userId ?? 0,
                                            'device_no'  => '1',
                                            'uicheck_id' => $uicheck->id,
                                            'message'    => '',
                                        ]);
                                    }

                                    UicheckUserAccess::provideAccess($uicheck->id, $userId);
                                }
                            }
                        }
                    } else {
                        $noDataFoundMessage[] = "No data found for User {$userId} and Website {$websiteId}";
                    }
                }
            }

            if ($noDataFoundMessage) {
                return response()->json(['status' => false, 'message' => implode(', ', $noDataFoundMessage)]);
            } else {
                return response()->json(['status' => true, 'message' => 'User has assigned successfully.']);
            }
        } catch (Exception $e) {
            Log::info($e);

            return response()->json(['status' => false, 'message' => 'Something went wrong.']);
        }
    }

    /**
     * Create UI Test and UI Desing type records for given site_development_category_id
     *
     * @param mixed $userId
     * @param mixed $websiteId
     * @param mixed $siteDevelopmentCategoryIds
     * @param mixed $siteDevelopmentDesignMasterCategoryId
     */
    public function processSiteDevelopmentCategory($userId, $websiteId, $siteDevelopmentCategoryIds, $siteDevelopmentDesignMasterCategoryId)
    {
        try {
            $siteDevelopmentCategoryIds = array_unique($siteDevelopmentCategoryIds);
            $inserted_record            = SiteDevelopment::where('website_id', $websiteId)->whereIn('site_development_category_id', $siteDevelopmentCategoryIds)->distinct()->select('site_development_category_id')->pluck('site_development_category_id');

            if (isset($inserted_record) && $inserted_record->count() > 0) {
                $inserted_record = $inserted_record->toArray();
            } else {
                $inserted_record = [];
            }

            $not_inserted_category_ids = array_diff($siteDevelopmentCategoryIds, $inserted_record);

            $insertData = [];
            if (isset($not_inserted_category_ids) && count($not_inserted_category_ids) > 0) {
                foreach ($not_inserted_category_ids as $key => $ids) {
                    $insertData[] = [
                        'site_development_category_id'        => $ids,
                        'website_id'                          => $websiteId,
                        'site_development_master_category_id' => $siteDevelopmentDesignMasterCategoryId,
                    ];
                }
            }

            if (count($insertData) > 0) {
                SiteDevelopment::insert($insertData);
            }

            $all_site_development = SiteDevelopment::where('website_id', $websiteId)->whereIn('site_development_category_id', $siteDevelopmentCategoryIds)->distinct()->select()->pluck('site_development_category_id', 'id');

            if ($all_site_development->count() > 0) {
                return $all_site_development->toArray();
            } else {
                return [];
            }
        } catch (Exception $e) {
            return [];
        }
    }

    /**
     * Add new ui record
     *
     * @param mixed $websiteId
     * @param mixed $site_development_id
     * @param mixed $site_development_category_id
     * @param mixed $ui_type
     * @param mixed $userId
     */
    public function addNewUirecords($websiteId, $site_development_id, $site_development_category_id, $ui_type, $userId)
    {
        try {
            $uicheck = Uicheck::create([
                'website_id'                   => $websiteId,
                'site_development_id'          => $site_development_id,
                'site_development_category_id' => $site_development_category_id,
                'created_at'                   => now(),
                'uicheck_type_id'              => $ui_type,
                'lock_developer'               => 1, // By default we have to lock for developer - New requirement.
            ]);

            $uidevice = UiDevice::create([
                'user_id'    => $userId ?? 0,
                'device_no'  => '1',
                'uicheck_id' => $uicheck->id,
                'message'    => '',
            ]);

            UicheckUserAccess::create([
                'user_id'        => $userId ?? 0,
                'uicheck_id'     => $uicheck->id,
                'lock_developer' => 1, // By default we have to lock for developer - New requirement.
            ]);
        } catch (Exception $e) {
        }
    }

    public function userHistory(Request $request)
    {
        try {
            $userAccess = UiDeviceUserHistory::with('user')
                ->where('uicheck_id', $request->uicheck_id)
                ->where('ui_device_id', $request->ui_device_id)
                ->orderBy('id', 'desc')
                ->get();

            return response()->json([
                'status' => true,
                'data'   => view('uicheck.user-history', compact('userAccess'))->render(),
            ]);
        } catch (Exception $e) {
            return response()->json([
                'status' => true,
                'data'   => view('uicheck.user-history')->render(),
            ]);
        }
    }

    /**
     * This function will upload file on google drive
     */
    public function uploadFile(Request $request)
    {
        $request->validate([
            'file'               => 'required',
            'file_creation_date' => 'required',
            'remarks'            => 'sometimes',
            'ui_check_id'        => 'required',
            'device_no'          => 'required',
            'file_read'          => 'sometimes',
            'file_write'         => 'sometimes',
        ]);

        $data = $request->all();
        try {
            $uiCheck = Uicheck::find($request->ui_check_id);

            $uiDevData           = UiDevice::where('uicheck_id', '=', $request->ui_check_id)->where('device_no', '=', $request->device_no)->first();
            $uiDev['user_id']    = \Auth::user()->id;
            $uiDev['device_no']  = $request->device_no;
            $uiDev['uicheck_id'] = $request->ui_check_id;
            $uiDev['message']    = 'New File uploaded';
            if ($request->uidevdatetime) {
                $uiDev['estimated_time'] = $request->uidevdatetime;
            }
            $uiDevid = $uiDevData->id ?? '';
            if ($uiDevid == '') {
                $uiDevs = UiDevice::create($uiDev);
                $uiData = UiDevice::where('id', $uiDevs->id)->first();
            } else {
                $uiData = $uiDevData;
                $uiLans = UiDevice::where('id', $uiDevData->id)->update($uiDev);
            }

            $uiDev['ui_devices_id'] = $uiData->id;
            $deviceHistory          = UiDeviceHistory::create($uiDev);

            foreach ($data['file'] as $file) {
                DB::transaction(function () use ($file, $data, $uiData, $deviceHistory) {
                    $googleScreencast            = new GoogleScreencast();
                    $googleScreencast->file_name = $file->getClientOriginalName();
                    $googleScreencast->extension = $file->extension();
                    $googleScreencast->user_id   = Auth::id();

                    $googleScreencast->read  = '';
                    $googleScreencast->write = '';

                    $googleScreencast->remarks            = $data['remarks'];
                    $googleScreencast->file_creation_date = $data['file_creation_date'];
                    $googleScreencast->belongable_id      = $uiData->id; //Ui device Id
                    $googleScreencast->belongable_type    = UiDevice::class;
                    $googleScreencast->save();

                    UploadGoogleDriveScreencast::dispatchNow(
                        $googleScreencast, $file, 'anyone',
                        [
                            UiDevice::class        => $uiData->id,
                            UiDeviceHistory::class => $deviceHistory->id,
                        ]
                    );
                });
            }

            return back()->with('success', 'File is Uploaded to Google Drive.');
        } catch (Exception $e) {
            return back()->with('error', 'Something went wrong. Please try again');
        }
    }

    /**
     * This function will return a list of files which are uploaded under uicheck class
     */
    public function getUploadedFilesList(Request $request)
    {
        try {
            $class = null;
            if (isset($request->device_no)) {
                $class = UiDevice::class;
            }

            $device = UiDevice::where('uicheck_id', $request->ui_check_id)->where('device_no', $request->device_no)->first();

            if (isset($device)) {
                $result = [];
                if (isset($request->ui_check_id)) {
                    $result = GoogleScreencast::where('belongable_type', $class)->where('belongable_id', $device->id)->orderBy('id', 'desc')->get();
                    if (isset($result) && count($result) > 0) {
                        $result = $result->toArray();
                    }

                    return response()->json([
                        'data' => view('uicheck.google-drive-list', compact('result'))->render(),
                    ]);
                }
            } else {
                throw new Exception('Device not found');
            }
        } catch (Exception $e) {
            return response()->json([
                'data' => view('uicheck.google-drive-list', ['result' => null])->render(),
            ]);
        }
    }

    /**
     * Assign a new user to website
     */
    public function addNewUser(Request $request)
    {
        try {
            $oldUserId = $request->oldUserId;
            $newUserId = $request->newUserId;
            $websiteId = $request->websiteId;

            $uiDevDatas = new UiDevice();
            $uiDevDatas = $uiDevDatas->with('uichecks.uiDevice.lastUpdatedStatusHistory.stausColor')->join('uichecks as uic', 'uic.id', 'ui_devices.uicheck_id')
                ->leftJoin('store_websites as sw', 'sw.id', 'uic.website_id')
                ->leftJoin('uicheck_user_accesses as uua', 'ui_devices.uicheck_id', 'uua.uicheck_id')
                ->leftJoin('users as u', 'u.id', 'uua.user_id')
                ->leftjoin('site_development_categories as sdc', 'uic.site_development_category_id', '=', 'sdc.id')
                ->leftJoin('site_development_statuses as sds', 'sds.id', 'ui_devices.status')
                ->leftJoin('ui_device_histories as udh', 'ui_devices.id', 'udh.status');

            $uiDevDatas = $uiDevDatas->where('uic.website_id', $websiteId);
            $uiDevDatas = $uiDevDatas->whereIn('u.id', [$oldUserId]);

            $uiDevDatas = $uiDevDatas->select('ui_devices.*', 'uic.uicheck_type_id', 'u.name as username', 'sw.website', 'sdc.title', 'sds.name as statusname',
                DB::raw('(select message from ui_device_histories where uicheck_id  =   ui_devices.id  order by id DESC limit 1) as messageDetail'), DB::raw('GROUP_CONCAT(DISTINCT u.name order by uua.id desc) as user_accessable')
            )->orderBy('id', 'DESC')->groupBy('ui_devices.uicheck_id')->get();

            foreach ($uiDevDatas as $uiRow) {
                $user = UicheckUserAccess::firstOrNew(
                    ['user_id' => $newUserId, 'uicheck_id' => $uiRow->uicheck_id],
                    ['user_id' => $newUserId, 'uicheck_id' => $uiRow->uicheck_id]
                );

                $user->save();
            }

            return response()->json(['status' => true, 'message' => 'User has assigned successfully']);
        } catch (Exception $e) {
            return response()->json(['status' => false, 'message' => 'Something went wrong.']);
        }
    }

    public function bulkDelete(Request $request)
    {
        Uicheck::whereIn('id', $request->uiCheckIds)->delete();

        return response()->json(['status' => true, 'message' => 'Ui checks deleted successfully']);
    }

    public function bulkDeleteUserWise(Request $request)
    {
        $uicheckIds = UicheckUserAccess::where('user_id', $request->userId)
            ->join('uichecks as uic', 'uic.id', 'uicheck_user_accesses.uicheck_id')
            ->where('uic.website_id', $request->uicheckWebsite)
            ->where('uic.uicheck_type_id', $request->uicheckType)
            ->pluck('uicheck_id')
            ->toArray();

        Uicheck::whereIn('id', $uicheckIds)->delete();

        return response()->json(['status' => true, 'message' => 'Ui checks deleted successfully']);
    }

    public function bulkDeleteUserWiseMultiple(Request $request)
    {
        if ($request->data) {
            $datas = json_decode(stripslashes($request->data), true);
            foreach ($datas as $data) {
                $uicheckIds = UicheckUserAccess::where('user_id', $data['user_id'])
                    ->join('uichecks as uic', 'uic.id', 'uicheck_user_accesses.uicheck_id')
                    ->where('uic.website_id', $data['uicheck_website'])
                    ->where('uic.uicheck_type_id', $data['uicheck_type'])
                    ->pluck('uicheck_id')
                    ->toArray();

                Uicheck::whereIn('id', $uicheckIds)->delete();
            }
        }

        return response()->json(['status' => true, 'message' => 'Records deleted successfully']);
    }

    public function userAccessList(Request $request)
    {
        try {
            $perPage           = 20;
            $uicheckUserAccess = new UicheckUserAccess();

            $uicheckUserAccess = $uicheckUserAccess->with('user')
                ->leftJoin('users', 'users.id', 'uicheck_user_accesses.user_id')
                ->leftJoin('uichecks', 'uichecks.id', 'uicheck_user_accesses.uicheck_id')
                ->leftJoin('store_websites', 'store_websites.id', 'uichecks.website_id')
                ->leftJoin('uicheck_types', 'uicheck_types.id', 'uichecks.uicheck_type_id')
                ->whereNull('uichecks.deleted_at')
                ->whereNotNull('uicheck_user_accesses.user_id')
                ->whereNotNull('uicheck_user_accesses.uicheck_id')
                ->select('uicheck_user_accesses.*', 'uichecks.uicheck_type_id', 'uichecks.website_id', 'users.name as username', 'store_websites.title as website', 'uicheck_types.name as type', DB::raw('count(*) as total'))
                ->groupBy('uicheck_user_accesses.user_id', 'uichecks.website_id', 'uichecks.uicheck_type_id')
                ->orderBy('uicheck_user_accesses.updated_at', 'DESC');

            $keyword = $request->get('keyword');
            if ($keyword != '') {
                $uicheckUserAccess = $uicheckUserAccess->where(function ($q) use ($keyword) {
                    $q->orWhere('store_websites.title', 'LIKE', '%' . $keyword . '%')
                        ->orWhere('uicheck_types.name', 'LIKE', '%' . $keyword . '%')
                        ->orWhere('users.name', 'LIKE', '%' . $keyword . '%');
                });
            }

            $uicheckUserAccess = $uicheckUserAccess->paginate($perPage);

            return response()->json(['code' => 200, 'data' => $uicheckUserAccess, 'count' => count($uicheckUserAccess), 'message' => 'Listed successfully!!!']);
        } catch (Exception $e) {
            return response()->json(['code' => 500, 'message' => $e->getMessage()]);
        }
    }

    public function deviceHistoryIstimeApprove(Request $request)
    {
        $uiDeviceHistory = UiDeviceHistory::find($request->id);
        if ($request->isEstimatedTimeApproved != '' && $uiDeviceHistory) {
            $uiDeviceHistory->update(['is_estimated_time_approved' => $request->isEstimatedTimeApproved]);

            return response()->json(['messages' => 'Successfull', 'code' => 200]);
        }

        return response()->json(['messages' => 'Not changed', 'code' => 500]);
    }

    public function fetchDeviceBuilderData(Request $request)
    {
        try {
            $uiDevice = UiDevice::where('uicheck_id', '=', $request->uicheckId)->where('device_no', '=', $request->deviceNo)->where('user_id', '=', $request->user_access_user_id)->first();
            if (! $uiDevice) {
                return response()->json(['message' => 'Device not found'], 400);
            }

            $uiCheckStoreWebsiteWithbuilderAPIKey = Uicheck::where('id', $request->uicheckId)->whereHas('storeWebsite', function ($store_website) {
                $store_website->whereNotNull('builder_io_api_key')->orWhere('builder_io_api_key', '<>', '');
            })->first();

            if (! $uiCheckStoreWebsiteWithbuilderAPIKey) {
                return response()->json(['message' => 'API key not found for this website'], 400);
            }

            $apiKey = $uiCheckStoreWebsiteWithbuilderAPIKey->storeWebsite->builder_io_api_key;

            $baseUrl = 'https://cdn.builder.io/api/v1/html/page';
            $url     = $uiCheckStoreWebsiteWithbuilderAPIKey->siteDevelopmentCategory->title;
            $device  = 'device ' . $uiDevice->device_no;

            $response = Http::get("$baseUrl?apiKey=$apiKey&url=$url&device=$device");

            if ($response->successful()) {
                $responseData = json_decode($response->body(), true);

                // Check if a record with the same lastUpdated value exists
                $existingRecord = UiDeviceBuilderIoData::where([
                    'uicheck_id'           => $uiDevice->uicheck_id,
                    'ui_device_id'         => $uiDevice->id,
                    'title'                => $responseData['data']['title'],
                    'builder_last_updated' => $responseData['lastUpdated'],
                ])->first();

                if (! $existingRecord) {
                    // Check "Fetched" Status exists. Otherwise create & use.
                    $fetchedStatus = UiDeviceBuilderIoDataStatus::firstOrCreate(['name' => 'Fetched']);

                    $builderIoData = UiDeviceBuilderIoData::create([
                        'uicheck_id'              => $uiDevice->uicheck_id,
                        'ui_device_id'            => $uiDevice->id,
                        'title'                   => $responseData['data']['title'],
                        'html'                    => $responseData['data']['html'],
                        'builder_created_date'    => $responseData['createdDate'],
                        'builder_last_updated'    => $responseData['lastUpdated'],
                        'builder_created_by'      => $responseData['createdBy'],
                        'builder_last_updated_by' => $responseData['lastUpdatedBy'],
                        'status_id'               => $fetchedStatus->id,
                    ]);

                    UiDeviceBuilderIoDataStatusHistory::create([
                        'ui_device_builder_io_data_id' => $builderIoData->id,
                        'user_id'                      => \Auth::id(),
                        'old_status_id'                => null,
                        'new_status_id'                => $fetchedStatus->id,
                    ]);

                    return response()->json(['message' => 'Data saved successfully']);
                } else {
                    return response()->json(['message' => 'Data fetched already up to date, No new entry.'], 400);
                }
            } else {
                return response()->json(['message' => 'Error fetching data from Builder.io'], 500);
            }
        } catch (Exception $e) {
            return response()->json(['message' => 'An error occurred.'], 500);
        }
    }

    public function deviceBuilderDatas(Request $request)
    {
        $builderDatas = UiDeviceBuilderIoData::join('ui_devices as uid', 'uid.id', 'ui_device_builder_io_datas.ui_device_id')
            ->join('uichecks as uic', 'uic.id', 'ui_device_builder_io_datas.uicheck_id')
            ->leftJoin('uicheck_user_accesses as uua', function ($join) {
                $join->on('uid.uicheck_id', '=', 'uua.uicheck_id')
                    ->on('uid.user_id', '=', 'uua.user_id');
            })
            ->leftJoin('users as u', 'u.id', 'uua.user_id')
            ->leftJoin('store_websites as sw', 'sw.id', 'uic.website_id')
            ->leftjoin('site_development_categories as sdc', 'uic.site_development_category_id', '=', 'sdc.id')
            ->leftJoin('site_development_statuses as sds', 'sds.id', 'uid.status')
            ->leftJoin('ui_device_builder_io_data_statuses as bs', 'bs.id', 'ui_device_builder_io_datas.status_id');

        $webIds = request()->input('web_ids');
        if (is_array($webIds) && count($webIds) > 0) {
            $builderDatas->whereIn('sw.id', $webIds);
        }

        $catIds = request()->input('cat_name');
        if (is_array($catIds) && count($catIds) > 0) {
            $builderDatas->whereIn('sdc.id', $catIds);
        }

        $statusIds = request()->input('status');
        if (is_array($statusIds) && count($statusIds) > 0) {
            $builderDatas->whereIn('bs.id', $statusIds);
        }

        $builderDatas = $builderDatas->select(
            'ui_device_builder_io_datas.*',
            'uid.device_no',
            'sw.website',
            'sdc.title as category',
            'u.name',
            'uic.uicheck_type_id',
        );

        $builderDatas = $builderDatas->orderBy('ui_device_builder_io_datas.created_at', 'DESC')
            ->paginate(10);

        $allUicheckTypes = UicheckType::get()->pluck('name', 'id')->toArray();

        $getbuildStatuses          = UiDeviceBuilderIoDataStatus::all();
        $siteDevelopmentCategories = SiteDevelopmentCategory::get()->pluck('title', 'id')->toArray();
        $storeWebsites             = StoreWebsite::select('id', 'website')->orderBy('id', 'desc')->groupBy('website')->get();

        return view('uicheck.device-builder-datas-index', compact('builderDatas', 'allUicheckTypes', 'getbuildStatuses', 'siteDevelopmentCategories', 'storeWebsites'))->with('i', ($request->input('page', 1) - 1) * 10);
    }

    public function getDeviceBuilderDatas(Request $request)
    {
        $uiDevice = UiDevice::where('uicheck_id', '=', $request->uicheckId)->where('device_no', '=', $request->deviceNo)->where('user_id', '=', $request->user_access_user_id)->first();
        if (! $uiDevice) {
            return response()->json(['message' => 'Device not found'], 400);
        }

        $history = UiDeviceBuilderIoData::where('uicheck_id', $uiDevice->uicheck_id)->where('ui_device_id', $uiDevice->id)->get();

        return view('uicheck.device-builder-datas', compact('history'));
    }

    public function getBuilderHtml($id)
    {
        $data = UiDeviceBuilderIoData::findOrFail($id);

        return view('uicheck.device-builder-html', compact('data'));
    }

    public function getBuilderDownloadHtml($id)
    {
        $data = UiDeviceBuilderIoData::findOrFail($id);

        // Log the download
        $log                               = new UiDeviceBuilderIoDataDownloadHistory();
        $log->user_id                      = auth()->id(); // Assuming you have authentication in place
        $log->ui_device_builder_io_data_id = $data->id;
        $log->downloaded_at                = now();
        $log->save();

        $filename = $data->title . '.html';

        return response($data->html)
            ->header('Content-Type', 'text/html')
            ->header('Content-Disposition', 'attachment; filename="' . $filename . '"');
    }

    public function getBuilderDownloadHistory($dataId)
    {
        $downloadHistory = UiDeviceBuilderIoDataDownloadHistory::where('ui_device_builder_io_data_id', $dataId)
            ->get();

        return view('uicheck.device-builder-download-history', compact('downloadHistory'));
    }

    public function deviceBuilderStatusStore(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'name' => 'required|unique:ui_device_builder_io_data_statuses,name',
        ]);

        if ($validator->fails()) {
            return response()->json([
                'status'      => false,
                'message'     => $validator->errors()->first(),
                'status_name' => 'error',
            ], 422);
        }

        $input = $request->except(['_token']);

        $data = UiDeviceBuilderIoDataStatus::create($input);

        if ($data) {
            return response()->json([
                'status'      => true,
                'data'        => $data,
                'message'     => 'Status Created Successfully',
                'status_name' => 'success',
            ], 200);
        } else {
            return response()->json([
                'status'      => false,
                'message'     => 'Something Error Occurred',
                'status_name' => 'error',
            ], 500);
        }
    }

    public function storeBuilderDataRemark(Request $request)
    {
        $input = $request->except(['_token']);
        if ($request->remarks == '') {
            return response()->json([
                'status'      => false,
                'message'     => 'Please enter remarks',
                'status_name' => 'error',
            ], 500);
        }

        $input['user_id'] = Auth::user()->id;

        $remarkHistory = UiDeviceBuilderIoDataRemarkHistory::create($input);

        if ($remarkHistory) {
            UiDeviceBuilderIoData::where('id', $request->ui_device_builder_io_data_id)->update(['remarks' => $request->remarks]);

            return response()->json([
                'status'      => true,
                'message'     => 'Remark added successfully',
                'status_name' => 'success',
            ], 200);
        } else {
            return response()->json([
                'status'      => false,
                'message'     => 'Remark added unsuccessfully',
                'status_name' => 'error',
            ], 500);
        }
    }

    public function deviceBuilderStatusColorUpdate(Request $request)
    {
        $statusColor = $request->all();
        $data        = $request->except('_token');
        foreach ($statusColor['color_name'] as $key => $value) {
            $magentoModuleVerifiedStatus        = UiDeviceBuilderIoDataStatus::find($key);
            $magentoModuleVerifiedStatus->color = $value;
            $magentoModuleVerifiedStatus->save();
        }

        return redirect()->back()->with('success', 'The status color updated successfully.');
    }

    public function getBuilderDataRemarks($id)
    {
        $remarks = UiDeviceBuilderIoDataRemarkHistory::with(['user'])
            ->where('ui_device_builder_io_data_id', $id)
            ->latest()
            ->get();

        return response()->json([
            'status'      => true,
            'data'        => $remarks,
            'message'     => 'Remark get successfully',
            'status_name' => 'success',
        ], 200);
    }

    public function updateDeviceUpdateStatus(Request $request)
    {
        $uiBuild            = UiDeviceBuilderIoData::find($request->buildId);
        $oldStatusId        = $uiBuild->status_id;
        $uiBuild->status_id = $request->statusId;
        $uiBuild->save();

        UiDeviceBuilderIoDataStatusHistory::create([
            'ui_device_builder_io_data_id' => $request->buildId,
            'user_id'                      => \Auth::id(),
            'old_status_id'                => $oldStatusId,
            'new_status_id'                => $request->statusId,
        ]);

        $statusColour = UiDeviceBuilderIoDataStatus::find($request->statusId);
        $statusColour = $statusColour->color;

        return response()->json([
            'status'      => true,
            'message'     => 'Status Update successfully',
            'status_name' => 'success',
            'colourCode'  => $statusColour,
        ], 200);
    }

    public function getBuilderDataStatus($id)
    {
        $status = UiDeviceBuilderIoDataStatusHistory::with(['user', 'newStatus', 'oldStatus'])
            ->where('ui_device_builder_io_data_id', $id)
            ->latest()
            ->get();

        return response()->json([
            'status'      => true,
            'data'        => $status,
            'message'     => 'Status get successfully',
            'status_name' => 'success',
        ], 200);
    }

    public function builderIOTaskstore(Request $request)
    {
        // Validation Part
        $request->validate([
            'task_name'     => 'required',
            'selected_rows' => 'required',
            'assign_to'     => 'required',
        ]
        );

        $data = $request->except('_token');

        $selectedRows = explode(',', $data['selected_rows']);
        if (! $selectedRows) {
            return response()->json(
                [
                    'code'    => 404,
                    'data'    => [],
                    'message' => 'Rows not selected',
                ]
            );
        }

        // Create task directly in tasks table.
        $task = Task::where('task_subject', $data['task_name'])->where('assign_to', $data['assign_to'])->first();
        if (! $task) {
            $data['assign_from']  = Auth::id();
            $data['is_statutory'] = 0;
            $data['task_details'] = $data['task_name'];
            $data['task_subject'] = $data['task_name'];
            $data['assign_to']    = $data['assign_to'];

            $task = Task::create($data);

            if ($data['assign_to']) {
                $task->users()->attach([$data['assign_to'] => ['type' => User::class]]);
            }
        }

        // Assign Zabbix Task Id to selected zabbix webhook datas
        $uiDeviceBuilderIoDatas = UiDeviceBuilderIoData::whereIn('id', $selectedRows);
        $uiDeviceBuilderIoDatas->update(['task_id' => $task->id]);

        return response()->json(
            [
                'code'    => 200,
                'data'    => [],
                'message' => 'Builder IO task has been created!',
            ]
        );
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/VendorController.php 
Content: <?php

namespace App\Http\Controllers;

use Auth;
use Hash;
use Mail;
use App\Role;
use App\User;
use App\Email;
use App\Vendor;
use App\Helpers;
use App\Setting;
use App\Customer;
use App\Supplier;
use Carbon\Carbon;
use App\ChatMessage;
use App\VendorStatus;
use App\ReplyCategory;
use App\VendorProduct;
use App\VendorCategory;
use App\Mail\PurchaseEmail;
use App\VendorStatusDetail;
use Illuminate\Support\Arr;
use Illuminate\Support\Str;
use App\Helpers\GithubTrait;
use Illuminate\Http\Request;
use App\Helpers\HubstaffTrait;
use GuzzleHttp\RequestOptions;
use App\Models\DataTableColumn;
use App\Models\VendorFlowChart;
use App\Models\VendorFrequency;
use App\Models\VendorQuestions;
use App\Models\VendorPriceHistory;
use App\VendorStatusDetailHistory;
use Illuminate\Support\Facades\DB;
use Webklex\PHPIMAP\ClientManager;
use App\Models\VendorRatingQANotes;
use App\Meetings\ZoomMeetingDetails;
use App\Models\VendorFLowChartNotes;
use App\Models\VendorQuestionAnswer;
use App\Models\VendorQuestionStatus;
use App\Models\VendorRatingQAStatus;
use App\Models\VendorRemarksHistory;
use App\VendorStatusHistory as VSHM;
use App\Models\VendorFlowChartMaster;
use App\Models\VendorFlowChartStatus;
use App\Models\VendorRatingQuestions;
use App\Models\VendorFlowChartRemarks;
use App\Models\VendorFlowChartSorting;
use App\Models\VendorFlowChartAssignment;
use App\Models\VendorRatingQuestionAnswer;
use GuzzleHttp\Client as GuzzleHttpClient;
use App\Models\VendorQuestionStatusHistory;
use App\Models\VendorRatingQAStatusHistory;
use App\Models\VendorFlowChartStatusHistory;
use Illuminate\Pagination\LengthAwarePaginator;
use Plank\Mediable\Facades\MediaUploader as MediaUploader;

class VendorController extends Controller
{
    use GithubTrait;
    use HubstaffTrait;

    const DEFAULT_FOR = 2; //For Vendor

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function __construct()
    {
        $this->init(config('env.HUBSTAFF_SEED_PERSONAL_TOKEN'));
    }

    public function updateReminder(Request $request)
    {
        $vendor                      = Vendor::find($request->get('vendor_id'));
        $vendor->frequency           = $request->get('frequency');
        $vendor->reminder_message    = $request->get('message');
        $vendor->reminder_from       = $request->get('reminder_from', '0000-00-00 00:00');
        $vendor->reminder_last_reply = $request->get('reminder_last_reply', 0);
        $vendor->save();

        $message = 'Reminder : ' . $request->get('message');
        app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($vendor->phone, '', $message);

        return response()->json([
            'success',
        ]);
    }

    public function index(Request $request)
    {
        $term                 = $request->term;
        $email                = $request->email;
        $whatsappNumber       = $request->whatsapp_number;
        $phone                = $request->phone;
        $status               = $request->status;
        $updatedBy            = $request->updated_by;
        $category             = $request->category;
        $type                 = $request->type;
        $framework            = $request->framework;
        $communicationHistory = $request->communication_history;
        $fltVendorStatus      = $request->flt_vendor_status;
        $with_archived        = $request->get('with_archived') == 'on' ? true : false;

        $authUser            = Auth::user();
        $isAdmin             = $authUser->isAdmin();
        $permittedCategories = $isAdmin ? [] : $authUser->vendorCategoryPermission->pluck('id')->all() + [0];
        $sortByClause        = 'id';
        $orderby             = 'ASC';

        if ($request->orderby == '') {
            $orderby = 'DESC';
        }

        if ($request->sortby == 'category') {
            $sortByClause = 'category_name';
        }

        if ($request->sortby == 'communication') {
            $sortByClause = 'message_created_at';
        }

        if ($request->sortby == 'id') {
            $sortByClause = 'id';
        }

        $q = Vendor::with(['framework', 'latestMessage', 'category'])
            ->select(
                'vendors.*',
                DB::raw('(SELECT mm1.message FROM chat_messages mm1 WHERE mm1.id = chat_messages.message_id) as message'),
                DB::raw('(SELECT mm2.status FROM chat_messages mm2 WHERE mm2.id = chat_messages.message_id) as message_status'),
                DB::raw('(SELECT mm3.created_at FROM chat_messages mm3 WHERE mm3.id = chat_messages.message_id) as message_created_at')
            )
            ->leftJoin('vendor_frameworks AS vf', 'vendors.framework', '=', 'vf.id')
            ->leftJoin(DB::raw('(SELECT MAX(id) as message_id, vendor_id FROM chat_messages GROUP BY vendor_id ORDER BY created_at DESC) AS chat_messages'), function ($join) {
                $join->on('vendors.id', '=', 'chat_messages.vendor_id');
            })
            ->leftJoin('vendor_categories', function ($join) use ($authUser, $isAdmin, $permittedCategories) {
                $join->on('vendors.category_id', '=', 'vendor_categories.id');

                if (! $isAdmin) {
                    $join->where('vendors.email', '=', $authUser->email);

                    if (! empty($permittedCategories)) {
                        $join->whereIn('vendors.category_id', $permittedCategories);
                    }
                }
            })
            ->when($term, fn ($query) => $query->where('vendors.name', 'like', "%{$term}%"))
            ->when($email, fn ($query) => $query->where('email', 'like', "%{$email}%"))
            ->when($whatsappNumber, fn ($query) => $query->where('whatsapp_number', 'like', "%{$whatsappNumber}%"))
            ->when($phone, fn ($query) => $query->where('phone', 'like', "%{$phone}%"))
            ->when($status && ! $with_archived, fn ($query) => $query->where('status', '=', $status))
            ->when($updatedBy && ! $with_archived, fn ($query) => $query->where('updated_by', '=', $updatedBy))
            ->when($category, fn ($query) => $query->whereIn('category_id', $category))
            ->when($type, fn ($query) => $query->where('type', '=', $type))
            ->when($framework, fn ($query) => $query->where('framework', '=', $framework))
            ->when($communicationHistory && ! $with_archived, function ($query) use ($communicationHistory) {
                $query->where(function ($subQuery) use ($communicationHistory) {
                    $subQuery->whereIn('vendors.id', function ($subSubQuery) use ($communicationHistory) {
                        $subSubQuery->select('vendor_id')
                            ->from('chat_messages')
                            ->whereNotNull('vendor_id')
                            ->where('message', 'like', "%{$communicationHistory}%");
                    });
                });
            })
            ->when($fltVendorStatus, fn ($query) => $query->where('vendor_status', 'like', "%{$fltVendorStatus}%"))
            ->when($with_archived, fn ($query) => $query->withTrashed())
            ->where(function ($query) use ($with_archived) {
                if (! $with_archived) {
                    $query->whereNull('deleted_at');
                }
            })
            ->orderBy($sortByClause, $orderby);

        $vendors = $q->get();

        $totalVendor = count($vendors);

        $currentPage = LengthAwarePaginator::resolveCurrentPage();
        $perPage     = Setting::get('pagination');
        if (request()->get('select_all') == 'true') {
            $perPage     = count($vendors);
            $currentPage = 1;
        }

        if (! is_numeric($perPage)) {
            $perPage = 2;
        }

        $currentItems = $vendors->slice($perPage * ($currentPage - 1), $perPage);
        $vendors      = new LengthAwarePaginator($currentItems, count($vendors), $perPage, $currentPage, [
            'path' => LengthAwarePaginator::resolveCurrentPath(),
        ]);

        $vendor_categories = VendorCategory::all();
        $users             = User::all();
        $replies           = \App\Reply::where('model', 'Vendor')->whereNull('deleted_at')->pluck('reply', 'id')->toArray();
        $statusList        = \DB::table('vendor_status')->select('name')->pluck('name', 'name')->toArray();

        $updatedProducts = \App\Vendor::join('users as u', 'u.id', 'vendors.updated_by')
            ->groupBy('vendors.updated_by')
            ->select([\DB::raw('count(u.id) as total_records'), 'u.name'])
            ->get();

        $whatsapp       = DB::select('SELECT number FROM whatsapp_configs WHERE status = 1 '); // and provider="Chat-API"
        $status         = VendorStatus::all();
        $datatableModel = DataTableColumn::select('column_name')->where('user_id', auth()->user()->id)->where('section_name', 'vendors-listing')->first();

        $dynamicColumnsToShowVendors = [];
        if (! empty($datatableModel->column_name)) {
            $hideColumns                 = $datatableModel->column_name ?? '';
            $dynamicColumnsToShowVendors = json_decode($hideColumns, true);
        }

        $flowchart_master   = VendorFlowChartMaster::all();
        $vendor_flow_charts = VendorFlowChart::with('master')->orderBy('sorting', 'ASC')->get();
        $vendor_questions   = VendorQuestions::orderBy('sorting', 'ASC')->get();
        $rating_questions   = VendorRatingQuestions::orderBy('sorting', 'ASC')->get();
        $status_q           = VendorQuestionStatus::all();

        if ($request->ajax()) {
            return view('vendors.partials.data',
                [
                    'vendors'                     => $vendors,
                    'orderby'                     => $orderby,
                    'replies'                     => $replies,
                    'statusList'                  => $statusList,
                    'dynamicColumnsToShowVendors' => $dynamicColumnsToShowVendors,
                    'whatsapp'                    => $whatsapp,
                ]);
        }

        return view('vendors.index', [
            'vendors'                     => $vendors,
            'vendor_categories'           => $vendor_categories,
            'term'                        => $term,
            'orderby'                     => $orderby,
            'users'                       => $users,
            'status'                      => $status,
            'replies'                     => $replies,
            'updatedProducts'             => $updatedProducts,
            'totalVendor'                 => $totalVendor,
            'statusList'                  => $statusList,
            'dynamicColumnsToShowVendors' => $dynamicColumnsToShowVendors,
            'whatsapp'                    => $whatsapp,
            'flowchart_master'            => $flowchart_master,
            'vendor_flow_charts'          => $vendor_flow_charts,
            'vendor_questions'            => $vendor_questions,
            'rating_questions'            => $rating_questions,
            'status_q'                    => $status_q,
        ]);
    }

    /**
     * This will use to change vendor whatsapp number
     */
    public function changeWhatsapp(Request $request)
    {
        $vendor = Vendor::find($request->vendor_id)->first();
        $data   = ['whatsapp_number' => $request->whatsapp_number];
        $vendor->update($data);

        return response()->json(['success' => 'successfully updated', 'data' => $data]);
    }

    public function vendorSearch()
    {
        $term   = request()->get('q', null);
        $search = Vendor::where('name', 'LIKE', '%' . $term . '%')
            ->get();

        return response()->json($search);
    }

    public function vendorSearchEmail()
    {
        $term   = request()->get('q', null);
        $search = Vendor::where('email', 'LIKE', '%' . $term . '%')
            ->get();

        return response()->json($search);
    }

    public function vendorSearchPhone()
    {
        $term   = request()->get('q', null);
        $search = Vendor::where('phone', 'LIKE', '%' . $term . '%')
            ->get();

        return response()->json($search);
    }

    public function email(Request $request)
    {
        $vendorArr = Vendor::join('emails', 'emails.model_id', 'vendors.id')
            ->where('emails.model_type', Vendor::class)
            ->where('vendors.id', $request->get('id', 0))
            ->get();
        $data = [];
        foreach ($vendorArr as $vendor) {
            $additional_data = json_decode($vendor->additional_data);
            $data[]          = [
                'from'       => $vendor->from,
                'to'         => $vendor->to,
                'subject'    => $vendor->subject,
                'message'    => strip_tags($vendor->message),
                'cc'         => $vendor->cc,
                'bcc'        => $vendor->bcc,
                'created_at' => $vendor->created_at,
                'attachment' => ! empty($additional_data->attachment) ? $additional_data->attachment : '',
                'inout'      => $vendor->email != $vendor->from ? 'out' : 'in',
            ];
        }

        return response()->json($data);
    }

    public function assignUserToCategory(Request $request)
    {
        $user     = $request->get('user_id');
        $category = $request->get('category_id');

        $category          = VendorCategory::find($category);
        $category->user_id = $user;
        $category->save();

        return response()->json([
            'status' => 'success',
        ]);
    }

    public function product()
    {
        $products = VendorProduct::with('vendor')->latest()->paginate(Setting::get('pagination'));
        $vendors  = Vendor::select(['id', 'name'])->get();

        return view('vendors.product', [
            'products' => $products,
            'vendors'  => $vendors,
        ]);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $rules = [
            'category_id'          => 'sometimes|nullable|numeric',
            'name'                 => 'required|string|max:255',
            'address'              => 'sometimes|nullable|string',
            'email'                => 'sometimes|nullable|email',
            'gmail'                => 'sometimes|nullable|email',
            'social_handle'        => 'sometimes|nullable',
            'website'              => 'sometimes|nullable',
            'login'                => 'sometimes|nullable',
            'password'             => 'sometimes|nullable',
            'gst'                  => 'sometimes|nullable|max:255',
            'account_name'         => 'sometimes|nullable|max:255',
            'account_iban'         => 'sometimes|nullable|max:255',
            'account_swift'        => 'sometimes|nullable|max:255',
            'frequency_of_payment' => 'sometimes|nullable|max:255',
            'bank_name'            => 'sometimes|nullable|max:255',
            'bank_address'         => 'sometimes|nullable|max:255',
            'city'                 => 'sometimes|nullable|max:255',
            'country'              => 'sometimes|nullable|max:255',
            'ifsc_code'            => 'sometimes|nullable|max:255',
            'remark'               => 'sometimes|nullable|max:255',
        ];
        $vendorCount = ! empty($request['vendor_name']) ? count($request['vendor_name']) : 0;
        $vendorRules = $vendorData = [];
        $inputs      = $request->all();
        if ($vendorCount !== '') {
            $vendorRules = [
                'vendor_name'    => 'sometimes|array',
                'vendor_name.*'  => 'sometimes|string|max:255',
                'vendor_email'   => 'sometimes|array',
                'vendor_email.*' => 'sometimes|nullable|email',
                'vendor_gmail'   => 'sometimes|array',
                'vendor_gmail.*' => 'sometimes|nullable|email',
            ];
            for ($i = 0; $i < $vendorCount; $i++) {
                $vendorData[$i]['category_id'] = $request['category_id'];
                $vendorData[$i]['name']        = $request['vendor_name'][$i];
                $vendorData[$i]['email']       = $request['vendor_email'][$i];
                $vendorData[$i]['gmail']       = $request['vendor_gmail'][$i];
            }
        }
        $rules = array_merge($rules, $vendorRules);
        $this->validate($request, $rules);

        $source = $request->get('source', '');
        $data   = $request->except(['_token', 'create_user']);

        if (empty($data['whatsapp_number'])) {
            //get default whatsapp number for vendor from whatsapp config
            $task_info = DB::table('whatsapp_configs')
                ->select('*')
                ->whereRaw('find_in_set(' . self::DEFAULT_FOR . ',default_for)')
                ->first();
            if (isset($task_info->number) && $task_info->number != null) {
                $data['whatsapp_number'] = $task_info->number;
            }
        }

        if (empty($data['default_phone'])) {
            $data['default_phone'] = $data['phone'];
        }

        if (! empty($source)) {
            $data['status'] = 0;
        }
        if (! empty($request['framework'])) {
            $data['framework'] = implode(',', $request['framework']);
        }
        if (! empty($request['frequency_of_payment'])) {
            $data['frequency_of_payment'] = implode(',', $request['frequency_of_payment']);
        }

        $VPHA = 0;
        $VPH  = new VendorPriceHistory;
        if (! empty($request['price'])) {
            $data['price'] = $request['price'];
            $VPH->price    = $request['price'];
            $VPHA          = 1;
        }
        if (! empty($request['currency'])) {
            $data['currency'] = $request['currency'];
            $VPH->currency    = $request['currency'];
            $VPHA             = 1;
        }
        if (! empty($request['price_remarks'])) {
            $data['price_remarks'] = $request['price_remarks'];
            $VPH->hisotry          = $request['price_remarks'];
            $VPHA                  = 1;
        }

        $mainVendorData[0] = $data;
        $existArray        = [];
        $sourceStatus      = $validateStatus = false;
        $inputsData        = array_merge($mainVendorData, $vendorData);
        foreach ($inputsData as $key => $data) {
            $vendorInsert = Vendor::create($data);

            if ($VPHA == 1) {
                $VPH->vendor_id = $vendorInsert->id;
                $VPH->user_id   = Auth::user()->id;
                $VPH->save();
            }

            if ($request->create_user == 'on') {
                if ($data['email'] != null) {
                    $userEmail = User::where('email', $data['email'])->first();
                } else {
                    $userEmail = null;
                }
                if ($key == 0) {
                    $userPhone = User::where('phone', $data['phone'])->first();
                }
                if ($userEmail == null) {
                    $user       = new User;
                    $user->name = str_replace(' ', '_', $data['name']);
                    if ($data['email'] == null) {
                        $email = str_replace(' ', '_', $data['name']) . '@solo.com';
                    } else {
                        $email = $data['email'];
                    }
                    $password       = Str::random(10);
                    $user->email    = $email;
                    $user->gmail    = $data['gmail'];
                    $user->password = Hash::make($password);
                    $user->phone    = ! empty($data['phone']) ? $data['phone'] : null;

                    // check the default whatsapp no and store it
                    $whpno = \DB::table('whatsapp_configs')
                        ->select('*')
                        ->whereRaw('find_in_set(4,default_for)')
                        ->first();
                    if ($whpno) {
                        $user->whatsapp_number = $whpno->number;
                    }

                    $user->save();
                    $role = Role::where('name', 'Developer')->first();
                    $user->roles()->sync($role->id);
                    $message = 'We have created an account for you on our ERP. You can login using the following details: url: https://erp.theluxuryunlimited.com/ username: ' . $email . ' password:  ' . $password . '';
                    if ($key == 0) {
                        app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($data['phone'], $user->whatsapp_number, $message);
                    }
                } else {
                    if (! empty($source)) {
                        $sourceStatus = true;
                    }
                    $validateStatus = true;
                    $existArray[]   = $data['name'];
                }
            }
        }
        if ($sourceStatus) {
            return redirect()->back()->withErrors('Vendor Created , couldnt create User, Email or Phone Already Exist');
        }
        $existArrayString = '';
        if ($validateStatus) {
            if (! empty($existArray)) {
                $existArrayString = '(' . implode(',', $existArray) . ')';
            }

            return redirect()->route('vendors.index')->withErrors('Vendor Created , couldnt create User ' . $existArrayString . ', Email or Phone Already Exist');
        }

        $isInvitedOnGithub = false;
        if ($request->create_user_github == 'on' && isset($request->email) && isset($request->organization_id)) {
            //has requested for github invitation
            $isInvitedOnGithub = $this->sendGithubInvitaion($request->email, $request->organization_id);
        }

        $isInvitedOnHubstaff = false;
        if ($request->create_user_hubstaff == 'on' && isset($request->email)) {
            //has requested hubstaff invitation
            $isInvitedOnHubstaff = $this->sendHubstaffInvitation($request->email);
        }

        if (! empty($source)) {
            return redirect()->back()->withSuccess('You have successfully saved a vendor!');
        }

        return redirect()->route('vendors.index')->withSuccess('You have successfully saved a vendor!');
    }

    public function productStore(Request $request)
    {
        $this->validate($request, [
            'vendor_id'       => 'required|numeric',
            'images.*'        => 'sometimes|nullable|image',
            'date_of_order'   => 'required|date',
            'name'            => 'required|string|max:255',
            'qty'             => 'sometimes|nullable|numeric',
            'price'           => 'sometimes|nullable|numeric',
            'payment_terms'   => 'sometimes|nullable|string',
            'recurring_type'  => 'required|string',
            'delivery_date'   => 'sometimes|nullable|date',
            'received_by'     => 'sometimes|nullable|string',
            'approved_by'     => 'sometimes|nullable|string',
            'payment_details' => 'sometimes|nullable|string',
        ]);

        $data = $request->except('_token');

        $product = VendorProduct::create($data);

        if ($request->hasFile('images')) {
            foreach ($request->file('images') as $image) {
                $media = MediaUploader::fromSource($image)
                    ->toDirectory('vendorproduct/' . floor($product->id / config('constants.image_per_folder')))
                    ->upload();
                $product->attachMedia($media, config('constants.media_tags'));
            }
        }

        return redirect()->back()->withSuccess('You have successfully saved a vendor product!');
    }

    /**
     * Display the specified resource.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        $vendor            = Vendor::find($id);
        $vendor_categories = VendorCategory::all();
        $vendor_show       = true;
        $emails            = [];
        $reply_categories  = ReplyCategory::all();
        $users_array       = Helpers::getUserArray(User::all());

        return view('vendors.show', [
            'vendor'            => $vendor,
            'vendor_categories' => $vendor_categories,
            'vendor_show'       => $vendor_show,
            'reply_categories'  => $reply_categories,
            'users_array'       => $users_array,
            'emails'            => $emails,
        ]);
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        $this->validate($request, [
            'category_id'          => 'sometimes|nullable|numeric',
            'name'                 => 'required|string|max:255',
            'address'              => 'sometimes|nullable|string',
            'phone'                => 'sometimes|nullable|numeric',
            'default_phone'        => 'sometimes|nullable|numeric',
            'whatsapp_number'      => 'sometimes|nullable|numeric',
            'email'                => 'sometimes|nullable|email',
            'social_handle'        => 'sometimes|nullable',
            'website'              => 'sometimes|nullable',
            'login'                => 'sometimes|nullable',
            'password'             => 'sometimes|nullable',
            'gst'                  => 'sometimes|nullable|max:255',
            'account_name'         => 'sometimes|nullable|max:255',
            'account_iban'         => 'sometimes|nullable|max:255',
            'account_swift'        => 'sometimes|nullable|max:255',
            'frequency_of_payment' => 'sometimes|nullable|max:255',
            'bank_name'            => 'sometimes|nullable|max:255',
            'bank_address'         => 'sometimes|nullable|max:255',
            'city'                 => 'sometimes|nullable|max:255',
            'country'              => 'sometimes|nullable|max:255',
            'ifsc_code'            => 'sometimes|nullable|max:255',
            'remark'               => 'sometimes|nullable|max:255',
        ]);

        $vendorData = Vendor::find($id);

        $data = $request->except('_token');

        if (! empty($request['framework'])) {
            $data['framework'] = implode(',', $request['framework']);
        }

        if (! empty($request['frequency_of_payment'])) {
            $data['frequency_of_payment'] = implode(',', $request['frequency_of_payment']);
        }

        $VPHA = 0;
        $VPH  = new VendorPriceHistory;
        if (! empty($request['price'])) {
            $data['price'] = $request['price'];

            if ($vendorData['price'] != $request['price']) {
                $VPH->price = $request['price'];
                $VPHA       = 1;
            }
        }
        if (! empty($request['currency'])) {
            $data['currency'] = $request['currency'];

            if ($vendorData['currency'] != $request['currency']) {
                $VPH->currency = $request['currency'];
                $VPHA          = 1;
            }
        }
        if (! empty($request['price_remarks'])) {
            $data['price_remarks'] = $request['price_remarks'];

            if ($vendorData['price_remarks'] != $request['price_remarks']) {
                $VPH->hisotry = $request['price_remarks'];
                $VPHA         = 1;
            }
        }

        Vendor::find($id)->update($data);

        if ($VPHA == 1) {
            $VPH->vendor_id = $id;
            $VPH->user_id   = Auth::user()->id;
            $VPH->save();
        }

        return redirect()->route('vendors.index')->withSuccess('You have successfully updated a vendor!');
    }

    public function productUpdate(Request $request, $id)
    {
        $this->validate($request, [
            'vendor_id'       => 'sometimes|nullable|numeric',
            'images.*'        => 'sometimes|nullable|image',
            'date_of_order'   => 'required|date',
            'name'            => 'required|string|max:255',
            'qty'             => 'sometimes|nullable|numeric',
            'price'           => 'sometimes|nullable|numeric',
            'payment_terms'   => 'sometimes|nullable|string',
            'recurring_type'  => 'required|string',
            'delivery_date'   => 'sometimes|nullable|date',
            'received_by'     => 'sometimes|nullable|string',
            'approved_by'     => 'sometimes|nullable|string',
            'payment_details' => 'sometimes|nullable|string',
        ]);

        $data = $request->except('_token');

        $product = VendorProduct::find($id);
        $product->update($data);

        if ($request->hasFile('images')) {
            foreach ($request->file('images') as $image) {
                $media = MediaUploader::fromSource($image)
                    ->toDirectory('vendorproduct/' . floor($product->id / config('constants.image_per_folder')))
                    ->upload();
                $product->attachMedia($media, config('constants.media_tags'));
            }
        }

        return redirect()->back()->withSuccess('You have successfully updated a vendor product!');
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        $vendor = Vendor::find($id);
        $vendor->delete();

        return redirect()->route('vendors.index')->withSuccess('You have successfully deleted a vendor');
    }

    public function productDestroy($id)
    {
        $product = VendorProduct::find($id);

        $product->detachMediaTags(config('constants.media_tags'));
        $product->delete();

        return redirect()->back()->withSuccess('You have successfully deleted a vendor product!');
    }

    public function sendEmailBulk(Request $request)
    {
        $this->validate($request, [
            'subject' => 'required|min:3|max:255',
            'message' => 'required',
            'cc.*'    => 'nullable|email',
            'bcc.*'   => 'nullable|email',
        ]);

        $fromEmail = 'buying@amourint.com';
        $fromName  = 'buying';

        if ($request->from_mail) {
            $mail = \App\EmailAddress::where('id', $request->from_mail)->first();
            if ($mail) {
                $fromEmail = $mail->from_address;
                $fromName  = $mail->from_name;
                $config    = config('mail');
                unset($config['sendmail']);
                $configExtra = [
                    'driver' => $mail->driver,
                    'host'   => $mail->host,
                    'port'   => $mail->port,
                    'from'   => [
                        'address' => $mail->from_address,
                        'name'    => $mail->from_name,
                    ],
                    'encryption' => $mail->encryption,
                    'username'   => $mail->username,
                    'password'   => $mail->password,
                ];
                \Config::set('mail', array_merge($config, $configExtra));
                (new \Illuminate\Mail\MailServiceProvider(app()))->register();
            }
        }

        if ($request->vendor_ids) {
            $vendor_ids = explode(',', $request->vendor_ids);
            $vendors    = Vendor::whereIn('id', $vendor_ids)->get();
        }

        if ($request->vendors) {
            $vendors = Vendor::where('id', $request->vendors)->get();
        } else {
            if ($request->not_received != 'on' && $request->received != 'on') {
                return redirect()->route('vendors.index')->withErrors(['Please select vendors']);
            }
        }

        if ($request->not_received == 'on') {
            $vendors = Vendor::doesnthave('emails')->where(function ($query) {
                $query->whereNotNull('email');
            })->get();
        }

        if ($request->received == 'on') {
            $vendors = Vendor::whereDoesntHave('emails', function ($query) {
                $query->where('type', 'incoming');
            })->where(function ($query) {
                $query->orWhereNotNull('email');
            })->where('has_error', 0)->get();
        }

        $file_paths = [];

        if ($request->hasFile('file')) {
            foreach ($request->file('file') as $file) {
                $filename = $file->getClientOriginalName();

                $file->storeAs('documents', $filename, 'files');

                $file_paths[] = "documents/$filename";
            }
        }

        $cc = $bcc = [];
        if ($request->has('cc')) {
            $cc = array_values(array_filter($request->cc));
        }
        if ($request->has('bcc')) {
            $bcc = array_values(array_filter($request->bcc));
        }

        foreach ($vendors as $vendor) {
            $mail = Mail::to($vendor->email);

            if ($cc) {
                $mail->cc($cc);
            }
            if ($bcc) {
                $mail->bcc($bcc);
            }

            $mail->send(new PurchaseEmail($request->subject, $request->message, $file_paths, ['from' => $fromEmail]));

            $params = [
                'model_id'        => $vendor->id,
                'model_type'      => Vendor::class,
                'from'            => $fromEmail,
                'seen'            => 1,
                'to'              => $vendor->email,
                'subject'         => $request->subject,
                'message'         => $request->message,
                'template'        => 'customer-simple',
                'additional_data' => json_encode(['attachment' => $file_paths]),
                'cc'              => $cc ?: null,
                'bcc'             => $bcc ?: null,
            ];

            Email::create($params);
        }

        return redirect()->route('vendors.index')->withSuccess('You have successfully sent emails in bulk!');
    }

    public function sendEmail(Request $request)
    {
        $this->validate($request, [
            'subject' => 'required|min:3|max:255',
            'message' => 'required',
            'email.*' => 'required|email',
            'cc.*'    => 'nullable|email',
            'bcc.*'   => 'nullable|email',
        ]);

        $vendor = Vendor::find($request->vendor_id);

        $fromEmail = 'buying@amourint.com';
        $fromName  = 'buying';

        if ($request->from_mail) {
            $mail = \App\EmailAddress::where('id', $request->from_mail)->first();
            if ($mail) {
                $fromEmail = $mail->from_address;
                $fromName  = $mail->from_name;
                $config    = config('mail');
                unset($config['sendmail']);
                $configExtra = [
                    'driver' => $mail->driver,
                    'host'   => $mail->host,
                    'port'   => $mail->port,
                    'from'   => [
                        'address' => $mail->from_address,
                        'name'    => $mail->from_name,
                    ],
                    'encryption' => $mail->encryption,
                    'username'   => $mail->username,
                    'password'   => $mail->password,
                ];
                \Config::set('mail', array_merge($config, $configExtra));
                (new \Illuminate\Mail\MailServiceProvider(app()))->register();
            }
        }

        if ($vendor->email != '') {
            $file_paths = [];

            if ($request->hasFile('file')) {
                foreach ($request->file('file') as $file) {
                    $filename = $file->getClientOriginalName();

                    $file->storeAs('documents', $filename, 'files');

                    $file_paths[] = "documents/$filename";
                }
            }

            $cc     = $bcc = [];
            $emails = $request->email;

            if ($request->has('cc')) {
                $cc = array_values(array_filter($request->cc));
            }
            if ($request->has('bcc')) {
                $bcc = array_values(array_filter($request->bcc));
            }

            if (is_array($emails) && ! empty($emails)) {
                $to = array_shift($emails);
                $cc = array_merge($emails, $cc);

                $mail = Mail::to($to);

                if ($cc) {
                    $mail->cc($cc);
                }
                if ($bcc) {
                    $mail->bcc($bcc);
                }

                $mail->send(new PurchaseEmail($request->subject, $request->message, $file_paths, ['from' => $fromEmail]));
            } else {
                return redirect()->back()->withErrors('Please select an email');
            }

            $params = [
                'model_id'        => $vendor->id,
                'model_type'      => Vendor::class,
                'from'            => $fromEmail,
                'to'              => $request->email[0],
                'seen'            => 1,
                'subject'         => $request->subject,
                'message'         => $request->message,
                'template'        => 'customer-simple',
                'additional_data' => json_encode(['attachment' => $file_paths]),
                'cc'              => $cc ?: null,
                'bcc'             => $bcc ?: null,
            ];

            Email::create($params);

            return redirect()->route('vendors.show', $vendor->id)->withSuccess('You have successfully sent an email!');
        }
    }

    public function emailInbox(Request $request)
    {
        try {
            $cm   = new ClientManager();
            $imap = $cm->make([
                'host'          => env('IMAP_HOST_PURCHASE'),
                'port'          => env('IMAP_PORT_PURCHASE'),
                'encryption'    => env('IMAP_ENCRYPTION_PURCHASE'),
                'validate_cert' => env('IMAP_VALIDATE_CERT_PURCHASE'),
                'username'      => env('IMAP_USERNAME_PURCHASE'),
                'password'      => env('IMAP_PASSWORD_PURCHASE'),
                'protocol'      => env('IMAP_PROTOCOL_PURCHASE'),
            ]);

            $imap->connect();
            if ($request->vendor_id) {
                $vendor = Vendor::find($request->vendor_id);

                if ($request->type == 'inbox') {
                    $inbox_name = 'INBOX';
                    $direction  = 'from';
                    $type       = 'incoming';
                } else {
                    $inbox_name = 'INBOX.Sent';
                    $direction  = 'to';
                    $type       = 'outgoing';
                }

                $inbox = $imap->getFolder($inbox_name);

                $latest_email = Email::where('type', $type)->where('model_id', $vendor->id)->where('model_type', \App\Vendor::class)->latest()->first();

                $latest_email_date = $latest_email
                    ? Carbon::parse($latest_email->created_at)
                    : Carbon::parse('1990-01-01');

                $vendorAgentsCount = $vendor->agents()->count();

                if ($vendorAgentsCount == 0) {
                    $emails = $inbox->messages()->where($direction, $vendor->email)->since(Carbon::parse($latest_email_date)->format('Y-m-d H:i:s'));
                    $emails = $emails->leaveUnread()->get();
                    $this->createEmailsForEmailInbox($vendor, $type, $latest_email_date, $emails);
                } elseif ($vendorAgentsCount == 1) {
                    $emails = $inbox->messages()->where($direction, $vendor->agents[0]->email)->since(Carbon::parse($latest_email_date)->format('Y-m-d H:i:s'));
                    $emails = $emails->leaveUnread()->get();
                    $this->createEmailsForEmailInbox($vendor, $type, $latest_email_date, $emails);
                } else {
                    foreach ($vendor->agents as $key => $agent) {
                        if ($key == 0) {
                            $emails = $inbox->messages()->where($direction, $agent->email)->where([
                                ['SINCE', $latest_email_date->format('d M y H:i')],
                            ]);
                            $emails = $emails->leaveUnread()->get();
                            $this->createEmailsForEmailInbox($vendor, $type, $latest_email_date, $emails);
                        } else {
                            $additional = $inbox->messages()->where($direction, $agent->email)->since(Carbon::parse($latest_email_date)->format('Y-m-d H:i:s'));
                            $additional = $additional->leaveUnread()->get();
                            $this->createEmailsForEmailInbox($vendor, $type, $latest_email_date, $additional);
                        }
                    }
                }

                $db_emails = $vendor->emails()->with('model')->where('type', $type)->get();

                $emails_array = [];
                $count        = 0;
                foreach ($db_emails as $key2 => $email) {
                    $dateCreated = $email->created_at->format('D, d M Y');
                    $timeCreated = $email->created_at->format('H:i');
                    $userName    = null;
                    if ($email->model instanceof Supplier) {
                        $userName = $email->model->supplier;
                    } elseif ($email->model instanceof Customer) {
                        $userName = $email->model->name;
                    }

                    $emails_array[$count + $key2]['id']          = $email->id;
                    $emails_array[$count + $key2]['subject']     = $email->subject;
                    $emails_array[$count + $key2]['seen']        = $email->seen;
                    $emails_array[$count + $key2]['type']        = $email->type;
                    $emails_array[$count + $key2]['date']        = $email->created_at;
                    $emails_array[$count + $key2]['from']        = $email->from;
                    $emails_array[$count + $key2]['to']          = $email->to;
                    $emails_array[$count + $key2]['message']     = $email->message;
                    $emails_array[$count + $key2]['cc']          = $email->cc;
                    $emails_array[$count + $key2]['bcc']         = $email->bcc;
                    $emails_array[$count + $key2]['replyInfo']   = "On {$dateCreated} at {$timeCreated}, $userName <{$email->from}> wrote:";
                    $emails_array[$count + $key2]['dateCreated'] = $dateCreated;
                    $emails_array[$count + $key2]['timeCreated'] = $timeCreated;
                }

                $emails_array = array_values(Arr::sort($emails_array, function ($value) {
                    return $value['date'];
                }));

                $emails_array = array_reverse($emails_array);

                $perPage      = 10;
                $currentPage  = LengthAwarePaginator::resolveCurrentPage();
                $currentItems = array_slice($emails_array, $perPage * ($currentPage - 1), $perPage);
                $emails       = new LengthAwarePaginator($currentItems, count($emails_array), $perPage, $currentPage);

                $view = view('vendors.partials.email', ['emails' => $emails, 'type' => $request->type])->render();

                return response()->json(['emails' => $view]);
            } else {
                return response()->json(['message' => 'Something went wrong! No request data vaialable.'], 422);
            }
        } catch (Exception $e) {
            return response()->json(['message' => 'Something went wrong!'], 422);
        }
    }

    private function createEmailsForEmailInbox($vendor, $type, $latest_email_date, $emails)
    {
        foreach ($emails as $email) {
            $content = $email->hasHTMLBody() ? $email->getHTMLBody() : $email->getTextBody();

            if ($email->getDate()->format('Y-m-d H:i:s') > $latest_email_date->format('Y-m-d H:i:s')) {
                $attachments_array = [];
                $attachments       = $email->getAttachments();

                $attachments->each(function ($attachment) use (&$attachments_array) {
                    file_put_contents(storage_path('app/files/email-attachments/' . $attachment->name), $attachment->content);
                    $path                = 'email-attachments/' . $attachment->name;
                    $attachments_array[] = $path;
                });

                $params = [
                    'model_id'        => $vendor->id,
                    'model_type'      => Vendor::class,
                    'type'            => $type,
                    'seen'            => $email->getFlags()['seen'],
                    'from'            => $email->getFrom()[0]->mail,
                    'to'              => array_key_exists(0, $email->getTo()) ? $email->getTo()[0]->mail : $email->getReplyTo()[0]->mail,
                    'subject'         => $email->getSubject(),
                    'message'         => $content,
                    'template'        => 'customer-simple',
                    'additional_data' => json_encode(['attachment' => $attachments_array]),
                    'created_at'      => $email->getDate(),
                ];

                Email::create($params);
            }
        }
    }

    public function block(Request $request)
    {
        $vendor = Vendor::find($request->vendor_id);

        if ($vendor->is_blocked == 0) {
            $vendor->is_blocked = 1;
        } else {
            $vendor->is_blocked = 0;
        }

        $vendor->save();

        return response()->json(['is_blocked' => $vendor->is_blocked]);
    }

    public function addReply(Request $request)
    {
        $reply     = $request->get('reply');
        $autoReply = [];
        // add reply from here
        if (! empty($reply)) {
            $autoReply = \App\Reply::updateOrCreate(
                ['reply' => $reply, 'model' => 'Vendor', 'category_id' => 1],
                ['reply' => $reply]
            );
        }

        return response()->json(['code' => 200, 'data' => $autoReply]);
    }

    public function deleteReply(Request $request)
    {
        $id = $request->get('id');

        if ($id > 0) {
            $autoReply = \App\Reply::where('id', $id)->first();
            if ($autoReply) {
                $autoReply->delete();
            }
        }

        return response()->json([
            'code' => 200, 'data' => \App\Reply::where('model', 'Vendor')
                ->whereNull('deleted_at')
                ->pluck('reply', 'id')
                ->toArray(),
        ]);
    }

    public function createUser(Request $request)
    {
        $vendor = Vendor::find($request->id);
        //Check If User Exist
        $userEmail = User::where('email', $vendor->email)->first();
        $userPhone = User::where('phone', $vendor->phone)->first();
        if ($userEmail == null && $userPhone == null) {
            $user       = new User;
            $user->name = str_replace(' ', '_', $vendor->name);
            if ($vendor->email == null) {
                $email = str_replace(' ', '_', $vendor->name) . '@solo.com';
            } else {
                $email = $vendor->email;
            }
            $password       = Str::random(10);
            $user->email    = $email;
            $user->password = Hash::make($password);
            $user->phone    = $vendor->phone;
            $user->save();
            $role = Role::where('name', 'Developer')->first();
            $user->roles()->sync($role->id);
            $message = 'We have created an account for you on our ERP. You can login using the following details: url: https://erp.theluxuryunlimited.com/ username: ' . $email . ' password:  ' . $password . '';
            app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($vendor->phone, '', $message);

            return response()->json(['code' => 200, 'data' => 'User Created']);
        } else {
            return response()->json(['code' => 200, 'data' => "Couldn't Create User Email or Phone Already Exist"]);
        }
    }

    public function inviteGithub(Request $request)
    {
        $email          = $request->get('email');
        $organizationId = $request->get('organizationId');

        if (! empty($email) && strlen($organizationId) > 0) {
            if ($this->sendGithubInvitaion($email, $organizationId)) {
                return response()->json(
                    ['message' => 'Invitation sent to ' . $email]
                );
            }

            return response()->json(
                ['message' => 'Unable to send invitation to ' . $email],
                500
            );
        }

        return response()->json(
            ['message' => 'Email not mentioned'],
            400
        );
    }

    public function inviteHubstaff(Request $request)
    {
        $email = $request->get('email');
        if ($email) {
            $response = $this->sendHubstaffInvitation($email);
            if ($response['code'] == 200) {
                return response()->json(
                    ['message' => 'Invitation sent to ' . $email]
                );
            }

            return response()->json(
                ['message' => $response['message']],
                500
            );
        }

        return response()->json(
            ['message' => 'Email not mentioned'],
            400
        );
    }

    private function sendGithubInvitaion(string $email, $organizationId)
    {
        return $this->inviteUser($email, $organizationId);
    }

    public function changeHubstaffUserRole(Request $request)
    {
        $id   = $request->vendor_id;
        $role = $request->role;
        if ($id && $role && $role != '') {
            $vendor = Vendor::find($id);
            $user   = User::where('phone', $vendor->phone)->first();
            if ($user) {
                $member = \App\Hubstaff\HubstaffMember::where('user_id', $user->id)->first();
                if ($member) {
                    $hubstaff_member_id = $member->hubstaff_user_id;
                    // $hubstaff_member_id = 901839;
                    $response = $this->changeHubstaffUserRoleApi($hubstaff_member_id);
                    if ($response['code'] == 200) {
                        return response()->json(['message' => 'Role successfully changed in the hubstaff'], 200);
                    } else {
                        return response()->json(['message' => $response['message']], 500);
                    }
                }
            }
        }

        return response()->json(['message' => 'User or hubstaff member not found'], 500);
    }

    private function changeHubstaffUserRoleApi($hubstaff_member_id)
    {
        try {
            $tokens = $this->getTokens();
            $url    = 'https://api.hubstaff.com/v2/organizations/' . config('env.HUBSTAFF_ORG_ID') . '/update_members';
            $client = new GuzzleHttpClient();
            $body   = [
                'members' => [
                    [
                        'user_id' => $hubstaff_member_id,
                        'role'    => 'user',
                    ],
                ],
            ];

            $response = $client->put(
                $url,
                [
                    RequestOptions::HEADERS => [
                        'Authorization' => 'Bearer ' . $tokens->access_token,
                        'Content-Type'  => 'application/json',
                    ],
                    RequestOptions::BODY => json_encode($body),
                ]
            );
            $message = [
                'code'    => 200,
                'message' => 'Successful',
            ];

            return $message;
        } catch (Exception $e) {
            $exception = (string) $e->getResponse()->getBody();
            $exception = json_decode($exception);
            if ($e->getCode() != 200) {
                $message = [
                    'code'    => 500,
                    'message' => $exception->error,
                ];

                return $message;
            } else {
                $message = [
                    'code'    => 200,
                    'message' => 'Successful',
                ];

                return $message;
            }
        }
    }

    private function sendHubstaffInvitation(string $email)
    {
        try {
            $tokens   = $this->getTokens();
            $url      = 'https://api.hubstaff.com/v2/organizations/' . config('env.HUBSTAFF_ORG_ID') . '/invites';
            $client   = new GuzzleHttpClient();
            $response = $client->post(
                $url,
                [
                    RequestOptions::HEADERS => [
                        'Authorization' => 'Bearer ' . $tokens->access_token,
                        'Content-Type'  => 'application/json',
                    ],
                    RequestOptions::JSON => [
                        'email' => $email,
                    ],
                ]
            );
            $message = [
                'code'    => 200,
                'message' => 'Successful',
            ];

            return $message;
        } catch (Exception $e) {
            $exception = (string) $e->getResponse()->getBody();
            $exception = json_decode($exception);
            if ($e->getCode() != 200) {
                $message = [
                    'code'    => 500,
                    'message' => $exception->error,
                ];

                return $message;
            } else {
                $message = [
                    'code'    => 200,
                    'message' => 'Successful',
                ];

                return $message;
            }
        }
    }

    public function changeStatus(Request $request)
    {
        $vendorId = $request->get('vendor_id');
        $statusId = $request->get('status');

        if (! empty($vendorId)) {
            $vendor = \App\Vendor::find($vendorId);
            if (! empty($vendor)) {
                $vendor->status = ($statusId == 'false') ? 0 : 1;
                $vendor->save();
            }
        }

        return response()->json(['code' => 200, 'data' => [], 'message' => 'Status updated successfully']);
    }

    public function sendMessage(Request $request)
    {
        set_time_limit(0);
        $vendors = Vendor::whereIn('id', $request->vendors)->get();
        //Create broadcast
        $broadcast = \App\BroadcastMessage::create(['name' => $request->name]);
        if (count($vendors)) {
            foreach ($vendors as $key => $item) {
                $params = [
                    'vendor_id' => $item->id,
                    'number'    => null,
                    'message'   => $request->message,
                    'user_id'   => Auth::id(),
                    'status'    => 2,
                    'approved'  => 1,
                    'is_queue'  => 0,
                ];
                $message = [
                    'type_id'              => $item->id,
                    'type'                 => App\Vendor::class,
                    'broadcast_message_id' => $broadcast->id,
                ];
                $broadcastnumber = \App\BroadcastMessageNumber::create($message);
                $chat_message    = ChatMessage::create($params);
                $myRequest       = new Request();
                $myRequest->setMethod('POST');
                $myRequest->request->add(['messageId' => $chat_message->id]);
                app(\App\Http\Controllers\WhatsAppController::class)->approveMessage('vendor', $myRequest);
            }
        }
        // return $params;

        return response()->json(['code' => 200, 'data' => [], 'message' => 'Message sent successfully']);
    }

    public function editVendor(Request $request)
    {
        if (! $request->vendor_id || $request->vendor_id == '' || ! $request->column || $request->column == '' || ! $request->value || $request->value == '') {
            return response()->json(['message' => 'Incomplete data'], 500);
        }
        $vendor          = Vendor::find($request->vendor_id);
        $column          = $request->column;
        $vendor->$column = $request->value;
        $vendor->save();

        return response()->json(['message' => 'Successful'], 200);
    }

    public function addStatus(Request $request)
    {
        if ($request->vendor_id == '' || $request->status == '' || $request->agency == '' || $request->hourly_rate == '' || $request->available_hour == '' || $request->experience_level == '' || $request->communication_skill == '') {
            return response()->json(['message' => 'Incomplete data'], 500);
        }
        $vendorStatus = VendorStatusDetail::where('vendor_id', $request->vendor_id)->first();
        if (! $vendorStatus) {
            $vendorStatus = new VendorStatusDetail();
        }
        $vendorStatus->vendor_id           = $request->vendor_id;
        $vendorStatus->user_id             = Auth::user()->id;
        $vendorStatus->status              = $request->status;
        $vendorStatus->hourly_rate         = $request->hourly_rate;
        $vendorStatus->available_hour      = $request->available_hour;
        $vendorStatus->experience_level    = $request->experience_level;
        $vendorStatus->communication_skill = $request->communication_skill;
        $vendorStatus->agency              = $request->agency;
        $vendorStatus->remark              = $request->remark;
        $vendorStatus->save();

        $vendorStatusHistory                      = new VendorStatusDetailHistory();
        $vendorStatusHistory->vendor_id           = $request->vendor_id;
        $vendorStatusHistory->user_id             = Auth::user()->id;
        $vendorStatusHistory->status              = $request->status;
        $vendorStatusHistory->hourly_rate         = $request->hourly_rate;
        $vendorStatusHistory->available_hour      = $request->available_hour;
        $vendorStatusHistory->experience_level    = $request->experience_level;
        $vendorStatusHistory->communication_skill = $request->communication_skill;
        $vendorStatusHistory->agency              = $request->agency;
        $vendorStatusHistory->remark              = $request->remark;
        $vendorStatusHistory->save();

        return response()->json(['message' => 'Successful'], 200);
    }

    public function statusStore(Request $request)
    {
        $this->validate($request, [
            'name' => 'required|string',
        ]);
        $data = $request->except('_token');
        VendorStatus::create($data);

        return redirect()->back()->with('success', 'You have successfully created a status!');
    }

    public function updateStatus(Request $request)
    {
        $vendor                = Vendor::find($request->id);
        $vendor->vendor_status = $request->status;
        $vendor->save();

        $vshm            = new VSHM;
        $vshm->vendor_id = $request->id;
        $vshm->user_id   = $request->user_id;
        $vshm->status    = $request->status;
        $vshm->save();
    }

    public function vendorStatusHistory(Request $request)
    {
        $data = VSHM::with(['user' => function ($query) {
        }])->where('vendor_id', $request->id)->get();

        return response()->json(['code' => 200, 'data' => $data, 'message' => 'Message sent successfully']);
    }

    public function vendorDetailStatusHistory(Request $request)
    {
        $data = VendorStatusDetailHistory::where('vendor_id', $request->id)->with('user')->get();

        return response()->json(['code' => 200, 'data' => $data, 'message' => 'Message sent successfully']);
    }

    public function zoomMeetingList(Request $request)
    {
        $meetings = ZoomMeetingDetails::get();

        return view('vendors.list-zoom-meetings', [
            'meetings' => $meetings,
        ]);
    }

    public function updateMeetingDescription(Request $request)
    {
        $meetingdata              = ZoomMeetingDetails::find($request->id);
        $meetingdata->description = $request->description;
        $meetingdata->save();

        return response()->json(['code' => 200, 'message' => 'Successful'], 200);
    }

    public function refreshMeetingList(Request $request)
    {
        \Artisan::call('save:zoom-meetings');

        return redirect()->back();
    }

    public function syncMeetingsRecordings(Request $request)
    {
        \Artisan::call('zoom:meetings-sync');

        return redirect()->back();
    }

    public function statuscolor(Request $request)
    {
        $status_color = $request->all();
        $data         = $request->except('_token');
        foreach ($status_color['colorname'] as $key => $value) {
            $status_vendor        = VendorStatus::find($key);
            $status_vendor->name  = $value;
            $status_vendor->color = $status_color['color_name'][$key];
            $status_vendor->save();
        }

        return redirect()->back()->with('success', 'The status color updated successfully.');
    }

    public function deleteVStatus(Request $request)
    {
        try {
            VendorStatus::where('id', $request->id)->delete();

            return response()->json(['code' => '200', 'data' => [], 'message' => 'Data deleted successfully']);
        } catch (Exception $e) {
            return response()->json(['code' => '500', 'message' => $e->getMessage()]);
        }
    }

    public function storeshortcut(Request $request)
    {
        $rules = [
            'category_id' => 'sometimes|nullable|numeric',
            'name'        => 'required|string|max:255',
            'email'       => 'sometimes|nullable|email',
            'gmail'       => 'sometimes|nullable|email',
            'website'     => 'sometimes|nullable',
        ];
        $vendorCount = ! empty($request['vendor_name']) ? count($request['vendor_name']) : 0;
        $vendorRules = $vendorData = [];
        $inputs      = $request->all();
        if ($vendorCount !== '') {
            $vendorRules = [
                'vendor_name'    => 'sometimes|array',
                'vendor_name.*'  => 'sometimes|string|max:255',
                'vendor_email'   => 'sometimes|array',
                'vendor_email.*' => 'sometimes|nullable|email',
                'vendor_gmail'   => 'sometimes|array',
                'vendor_gmail.*' => 'sometimes|nullable|email',
            ];
            for ($i = 0; $i < $vendorCount; $i++) {
                $vendorData[$i]['category_id'] = $request['category_id'];
                $vendorData[$i]['name']        = $request['vendor_name'][$i];
                $vendorData[$i]['email']       = $request['vendor_email'][$i];
                $vendorData[$i]['gmail']       = $request['vendor_gmail'][$i];
            }
        }
        $rules = array_merge($rules, $vendorRules);
        $this->validate($request, $rules);

        $source = $request->get('source', '');
        $data   = $request->except(['_token', 'create_user']);

        if (empty($data['whatsapp_number'])) {
            //get default whatsapp number for vendor from whatsapp config
            $task_info = DB::table('whatsapp_configs')
                ->select('*')
                ->whereRaw('find_in_set(' . self::DEFAULT_FOR . ',default_for)')
                ->first();
            if (isset($task_info->number) && $task_info->number != null) {
                $data['whatsapp_number'] = $task_info->number;
            }
        }

        if (empty($data['default_phone'])) {
            $data['default_phone'] = $data['phone'];
        }

        if (! empty($source)) {
            $data['status'] = 0;
        }
        $mainVendorData[0] = $data;
        $existArray        = [];
        $sourceStatus      = $validateStatus = false;
        $inputsData        = array_merge($mainVendorData, $vendorData);
        foreach ($inputsData as $key => $data) {
            if (! empty($data['framework'])) {
                $data['framework'] = implode(',', $data['framework']);
            }
            Vendor::create($data);

            if ($request->create_user == 'on') {
                if ($data['email'] != null) {
                    $userEmail = User::where('email', $data['email'])->first();
                } else {
                    $userEmail = null;
                }
                if ($key == 0) {
                    $userPhone = User::where('phone', $data['phone'])->first();
                }
                if ($userEmail == null) {
                    $user       = new User;
                    $user->name = str_replace(' ', '_', $data['name']);
                    if ($data['email'] == null) {
                        $email = str_replace(' ', '_', $data['name']) . '@solo.com';
                    } else {
                        $email = $data['email'];
                    }
                    $password       = Str::random(10);
                    $user->email    = $email;
                    $user->gmail    = $data['gmail'];
                    $user->password = Hash::make($password);
                    $user->phone    = ! empty($data['phone']) ? $data['phone'] : null;

                    // check the default whatsapp no and store it
                    $whpno = \DB::table('whatsapp_configs')
                        ->select('*')
                        ->whereRaw('find_in_set(4,default_for)')
                        ->first();
                    if ($whpno) {
                        $user->whatsapp_number = $whpno->number;
                    }

                    $user->save();
                    $role = Role::where('name', 'Developer')->first();
                    $user->roles()->sync($role->id);
                    $message = 'We have created an account for you on our ERP. You can login using the following details: url: https://erp.theluxuryunlimited.com/ username: ' . $email . ' password:  ' . $password . '';
                    if ($key == 0) {
                        app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($data['phone'], $user->whatsapp_number, $message);
                    }
                } else {
                    if (! empty($source)) {
                        $sourceStatus = true;
                    }
                    $validateStatus = true;
                    $existArray[]   = $data['name'];
                }
            }
        }
        if ($sourceStatus) {
            return redirect()->back()->withErrors('Vendor Created , couldnt create User, Email or Phone Already Exist');
        }
        $existArrayString = '';
        if ($validateStatus) {
            if (! empty($existArray)) {
                $existArrayString = '(' . implode(',', $existArray) . ')';
            }

            return redirect()->route('vendors.index')->withErrors('Vendor Created , couldnt create User ' . $existArrayString . ', Email or Phone Already Exist');
        }

        $isInvitedOnGithub = false;
        if ($request->create_user_github == 'on' && isset($request->email) && isset($request->organization_id)) {
            //has requested for github invitation
            $isInvitedOnGithub = $this->sendGithubInvitaion($request->email, $request->organization_id);
        }

        $isInvitedOnHubstaff = false;
        if ($request->create_user_hubstaff == 'on' && isset($request->email)) {
            //has requested hubstaff invitation
            $isInvitedOnHubstaff = $this->sendHubstaffInvitation($request->email);
        }

        if (! empty($source)) {
            return redirect()->back()->withSuccess('You have successfully saved a vendor!');
        }

        return response()->json([
            'status' => 'success',
            'msg'    => 'You have successfully saved a vendor!',
        ]);
    }

    public function columnVisbilityUpdate(Request $request)
    {
        $userCheck = DataTableColumn::where('user_id', auth()->user()->id)->where('section_name', 'vendors-listing')->first();

        if ($userCheck) {
            $column               = DataTableColumn::find($userCheck->id);
            $column->section_name = 'vendors-listing';
            $column->column_name  = json_encode($request->column_vendors);
            $column->save();
        } else {
            $column               = new DataTableColumn();
            $column->section_name = 'vendors-listing';
            $column->column_name  = json_encode($request->column_vendors);
            $column->user_id      = auth()->user()->id;
            $column->save();
        }

        return redirect()->back()->with('success', 'column visiblity Added Successfully!');
    }

    public function framworkAdd(Request $request)
    {
        try {
            $framework = VendorFrequency::create(
                [
                    'user_id' => \Auth::user()->id,
                    'name'    => $request->framework_name,
                ]
            );

            return response()->json(['code' => 200, 'data' => $framework, 'message' => 'Added successfully!!!']);
        } catch (Exception $e) {
            $msg = $e->getMessage();

            return response()->json(['code' => 500, 'message' => $msg]);
        }
    }

    public function vendorRemarkHistory(Request $request)
    {
        $data = VendorRemarksHistory::with(['user' => function ($query) {
        }])->where('vendor_id', $request->id)->orderBy('id', 'DESC')->get();

        return response()->json(['code' => 200, 'data' => $data, 'message' => 'Message sent successfully']);
    }

    public function vendorRemarkPostHistory(Request $request)
    {
        try {
            $remarks = VendorRemarksHistory::create(
                [
                    'user_id'   => \Auth::user()->id,
                    'remarks'   => $request->remarks,
                    'vendor_id' => $request->vendor_id,
                ]
            );
            $remarks = VendorRemarksHistory::where('id', $remarks->id)->first();

            return response()->json(['code' => 200, 'data' => $remarks, 'message' => 'Added successfully!!!']);
        } catch (Exception $e) {
            $msg = $e->getMessage();

            return response()->json(['code' => 500, 'message' => $msg]);
        }
    }

    public function flowChart(Request $request, $master_id)
    {
        $VendorFlowchart = Vendor::with('category');

        if (request('category') != null) {
            $VendorFlowchart = $VendorFlowchart->where('category_id', $request->category);
        }

        if ((! empty(request('selectedId')) && (request('selectedId') != null))) {
            $VendorFlowchart = $VendorFlowchart->where('id', $request->selectedId);
        }

        $VendorFlowchart = $VendorFlowchart->whereNotNull('flowchart_date')->orderBy('flowchart_date', 'DESC')->paginate(25);

        $totalVendor = Vendor::whereNotNull('flowchart_date')->count();

        $datatableModel = DataTableColumn::select('column_name')->where('user_id', auth()->user()->id)->where('section_name', 'vendors-flow-chart-listing')->first();

        $dynamicColumnsToShowVendorsfc = [];
        if (! empty($datatableModel->column_name)) {
            $hideColumns                   = $datatableModel->column_name ?? '';
            $dynamicColumnsToShowVendorsfc = json_decode($hideColumns, true);
        }

        $flowchart_master = VendorFlowChartMaster::where('id', $master_id)->get();

        $vendor_flow_charts = VendorFlowChart::where('master_id', $master_id)->orderBy('sorting', 'ASC')->get();

        $vendor_categories = VendorCategory::all();

        $status = VendorFlowChartStatus::all();

        return view('vendors.flow-chart', compact('VendorFlowchart', 'dynamicColumnsToShowVendorsfc', 'totalVendor', 'vendor_flow_charts', 'vendor_categories', 'status', 'master_id', 'flowchart_master'))
            ->with('i', ($request->input('page', 1) - 1) * 25);
    }

    public function flowchartStore(Request $request)
    {
        $this->validate($request, [
            'master_id' => 'required',
            'name'      => 'required|string',
            'sorting'   => 'required|numeric',
        ]);
        $data               = $request->except('_token');
        $data['created_by'] = Auth::user()->id;
        VendorFlowChart::create($data);

        return redirect()->back()->with('success', 'You have successfully created a flow chart!');
    }

    public function getFlowchartMaster()
    {
        $flowchart_master = VendorFlowChartMaster::all();

        return $flowchart_master;
    }

    public function masterFlowchartStore(Request $request)
    {
        try {
            $this->validate($request, [
                'title' => 'required|string',
            ]);

            $data      = $request->except('_token');
            $flowchart = VendorFlowChartMaster::create($data);

            return response()->json(['code' => '200', 'data' => $flowchart, 'all' => $this->getFlowchartMaster(), 'message' => 'You have successfully created a master flow chart!']);
        } catch (\Throwable $e) {
            return response()->json(['code' => '500', 'message' => $e->getMessage()]);
        }
    }

    public function getAllMasterFlowcharts()
    {
        $flowchart_master = VendorFlowChartMaster::paginate(10);

        return view('vendors.flowchart-master.index', ['flowchart_master' => $flowchart_master]);
    }

    public function masterFlowchartDestroy($id)
    {
        try {
            $flowchart = VendorFlowChartMaster::find($id);
            if ($flowchart->flow_charts()->get()->isEmpty()) {
                $flowchart->delete();

                return response()->json(['code' => '200', 'data' => [], 'all' => $this->getFlowchartMaster(), 'message' => 'You have successfully deleted a master flow chart!']);
            } else {
                return response()->json(['code' => '400', 'message' => 'Vendor flow charts not empty!']);
            }
        } catch (\Throwable $e) {
            return response()->json(['code' => '500', 'message' => $e->getMessage()]);
        }
    }

    public function masterFlowchartUpdate(Request $request, $id)
    {
        try {
            $this->validate($request, [
                'title' => 'required|string',
            ]);

            $data      = $request->except('_token');
            $flowchart = VendorFlowChartMaster::find($id);
            $flowchart->update($data);

            return response()->json(['code' => '200', 'data' => [], 'all' => $this->getFlowchartMaster(), 'message' => 'You have successfully updated a master flow chart!']);
        } catch (\Throwable $e) {
            return response()->json(['code' => '500', 'message' => $e->getMessage()]);
        }
    }

    public function questionStore(Request $request)
    {
        $this->validate($request, [
            'question' => 'required',
        ]);
        $data               = $request->except('_token');
        $data['created_by'] = Auth::user()->id;
        VendorQuestions::create($data);

        return redirect()->back()->with('success', 'You have successfully created a question!');
    }

    public function rquestionStore(Request $request)
    {
        $this->validate($request, [
            'question' => 'required',
        ]);
        $data               = $request->except('_token');
        $data['created_by'] = Auth::user()->id;
        VendorRatingQuestions::create($data);

        return redirect()->back()->with('success', 'You have successfully created a question!');
    }

    public function assignMasterFlowchartToVendor(Request $request)
    {
        $vendor = Vendor::find($request->id);

        foreach ($request->flowcharts as $flowchart) {
            $assignment = $data = [
                'vendor_id' => $vendor->id,
                'master_id' => (int) $flowchart,
            ];

            $assignment['status'] = 1;

            VendorFlowChartAssignment::updateOrCreate(
                $data,
                $assignment
            );
        }

        return response()->json(['code' => 200, 'status' => 'success', 'message' => 'You have successfully assigned flow charts to vendor!']);
    }

    public function saveVendorFlowChartRemarks(Request $request)
    {
        $post = $request->all();

        $this->validate($request, [
            'vendor_id'     => 'required',
            'flow_chart_id' => 'required',
            'remarks'       => 'required',
        ]);

        $input             = $request->except(['_token']);
        $input['added_by'] = Auth::user()->id;
        VendorFlowChartRemarks::create($input);

        return response()->json(['code' => 200, 'data' => $input]);
    }

    public function getFlowChartRemarksHistories(Request $request)
    {
        $datas = VendorFlowChartRemarks::with(['user'])
            ->where('vendor_id', $request->vendor_id)
            ->where('flow_chart_id', $request->flow_chart_id)
            ->latest()
            ->get();

        return response()->json([
            'status'      => true,
            'data'        => $datas,
            'message'     => 'History get successfully',
            'status_name' => 'success',
        ], 200);
    }

    public function vendorFlowChartVolumnVisbilityUpdate(Request $request)
    {
        $userCheck = DataTableColumn::where('user_id', auth()->user()->id)->where('section_name', 'vendors-flow-chart-listing')->first();

        if ($userCheck) {
            $column               = DataTableColumn::find($userCheck->id);
            $column->section_name = 'vendors-flow-chart-listing';
            $column->column_name  = json_encode($request->column_vendorsfc);
            $column->save();
        } else {
            $column               = new DataTableColumn();
            $column->section_name = 'vendors-flow-chart-listing';
            $column->column_name  = json_encode($request->column_vendorsfc);
            $column->user_id      = auth()->user()->id;
            $column->save();
        }

        return redirect()->back()->with('success', 'column visiblity Added Successfully!');
    }

    public function vendorRqaVolumnVisbilityUpdate(Request $request)
    {
        $userCheck = DataTableColumn::where('user_id', auth()->user()->id)->where('section_name', 'vendors-rqa-listing')->first();

        if ($userCheck) {
            $column               = DataTableColumn::find($userCheck->id);
            $column->section_name = 'vendors-rqa-listing';
            $column->column_name  = json_encode($request->column_vendorsfc);
            $column->save();
        } else {
            $column               = new DataTableColumn();
            $column->section_name = 'vendors-rqa-listing';
            $column->column_name  = json_encode($request->column_vendorsfc);
            $column->user_id      = auth()->user()->id;
            $column->save();
        }

        return redirect()->back()->with('success', 'column visiblity Added Successfully!');
    }

    public function vendorQaVolumnVisbilityUpdate(Request $request)
    {
        $userCheck = DataTableColumn::where('user_id', auth()->user()->id)->where('section_name', 'vendors-qa-listing')->first();

        if ($userCheck) {
            $column               = DataTableColumn::find($userCheck->id);
            $column->section_name = 'vendors-qa-listing';
            $column->column_name  = json_encode($request->column_vendorsfc);
            $column->save();
        } else {
            $column               = new DataTableColumn();
            $column->section_name = 'vendors-qa-listing';
            $column->column_name  = json_encode($request->column_vendorsfc);
            $column->user_id      = auth()->user()->id;
            $column->save();
        }

        return redirect()->back()->with('success', 'column visiblity Added Successfully!');
    }

    public function getVendorAutocomplete(Request $request)
    {
        $input = $_GET['term'];

        $products = [];
        if (! empty($input)) {
            $products = Vendor::where('name', 'like', '%' . $input . '%')->whereNull('deleted_at')->pluck('name', 'id');
        }

        return response()->json($products);
    }

    public function sortingVendorFlowchart(Request $request)
    {
        $flow_chart = $request->all();
        $data       = $request->except('_token');
        foreach ($flow_chart['sorting'] as $key => $value) {
            $vendor_fc          = VendorFlowChart::find($key);
            $vendor_fc->sorting = $value;
            $vendor_fc->save();
        }

        return redirect()->back()->with('success', 'The flow-chart sorting updated successfully.');
    }

    public function vendorFeedbackStatus(Request $request)
    {
        $vendor = Vendor::find($request->id);

        if (empty($vendor->feeback_status)) {
            $data['feeback_status'] = 1;
        } else {
            $data['feeback_status'] = 0;
        }

        Vendor::find($request->id)->update($data);

        return redirect()->back()->with('success', 'Vendor feedback status has been updated!');
    }

    public function getVendorQuestions(Request $request)
    {
        $datas = VendorQuestions::with(['user'])
            ->latest()
            ->get();

        return response()->json([
            'status'      => true,
            'data'        => $datas,
            'message'     => 'Question get successfully',
            'status_name' => 'success',
        ], 200);
    }

    public function getVendorRatingQuestions(Request $request)
    {
        $datas = VendorQuestions::with(['user'])
            ->latest()
            ->get();

        return response()->json([
            'status'      => true,
            'data'        => $datas,
            'message'     => 'Question get successfully',
            'status_name' => 'success',
        ], 200);
    }

    public function getQuestionAnswerHistories(Request $request)
    {
        $datas = VendorQuestionAnswer::where('vendor_id', $request->vendor_id)
            ->where('question_id', $request->question_id)
            ->latest()
            ->get();

        return response()->json([
            'status'      => true,
            'data'        => $datas,
            'message'     => 'History get successfully',
            'status_name' => 'success',
        ], 200);
    }

    public function getRatingQuestionAnswerHistories(Request $request)
    {
        $datas = VendorRatingQuestionAnswer::where('vendor_id', $request->vendor_id)
            ->where('question_id', $request->question_id)
            ->latest()
            ->get();

        return response()->json([
            'status'      => true,
            'data'        => $datas,
            'message'     => 'History get successfully',
            'status_name' => 'success',
        ], 200);
    }

    public function saveVendorQuestionAnswer(Request $request)
    {
        $post = $request->all();

        $this->validate($request, [
            'vendor_id'   => 'required',
            'question_id' => 'required',
            'answer'      => 'required',
        ]);

        $input             = $request->except(['_token']);
        $input['added_by'] = Auth::user()->id;
        VendorQuestionAnswer::create($input);

        return response()->json(['code' => 200, 'data' => $input]);
    }

    public function saveVendorRatingQuestionAnswer(Request $request)
    {
        $post = $request->all();

        $this->validate($request, [
            'vendor_id'   => 'required',
            'question_id' => 'required',
            'answer'      => 'required',
        ]);

        $input             = $request->except(['_token']);
        $input['added_by'] = Auth::user()->id;
        VendorRatingQuestionAnswer::create($input);

        return response()->json(['code' => 200, 'data' => $input]);
    }

    public function vendorQuestionAnswerStatus(Request $request)
    {
        $vendor = Vendor::find($request->id);

        if (empty($vendor->question_status)) {
            $data['question_status'] = 1;
        } else {
            $data['question_status'] = null;
        }

        Vendor::find($request->id)->update($data);

        return redirect()->back()->with('success', 'You have successfully created a question answer!');
    }

    public function vendorRatingQuestionAnswerStatus(Request $request)
    {
        $vendor = Vendor::find($request->id);

        if (empty($vendor->rating_question_status)) {
            $data['rating_question_status'] = 1;
        } else {
            $data['rating_question_status'] = null;
        }

        Vendor::find($request->id)->update($data);

        return redirect()->back()->with('success', 'You have successfully created a question answer!');
    }

    public function questionAnswer(Request $request)
    {
        $VendorQuestionAnswer = Vendor::with('category');

        if (request('category') != null) {
            $VendorQuestionAnswer = $VendorQuestionAnswer->where('category_id', $request->category);
        }

        if ((! empty(request('selectedId')) && (request('selectedId') != null))) {
            $VendorQuestionAnswer = $VendorQuestionAnswer->where('id', $request->selectedId);
        }

        $VendorQuestionAnswer = $VendorQuestionAnswer->where('question_status', 1)->orderBy('flowchart_date', 'DESC')->paginate(25);

        $totalVendor = Vendor::where('question_status', 1)->count();

        $datatableModel = DataTableColumn::select('column_name')->where('user_id', auth()->user()->id)->where('section_name', 'vendors-qa-listing')->first();

        $dynamicColumnsToShowVendorsqa = [];
        if (! empty($datatableModel->column_name)) {
            $hideColumns                   = $datatableModel->column_name ?? '';
            $dynamicColumnsToShowVendorsqa = json_decode($hideColumns, true);
        }

        $vendor_questions = VendorQuestions::orderBy('sorting', 'ASC')->get();

        $vendor_categories = VendorCategory::all();

        $status = VendorRatingQAStatus::all();

        $status_q = VendorQuestionStatus::all();

        return view('vendors.question-answer', compact('VendorQuestionAnswer', 'dynamicColumnsToShowVendorsqa', 'totalVendor', 'vendor_questions', 'vendor_categories', 'status', 'status_q'))
            ->with('i', ($request->input('page', 1) - 1) * 25);
    }

    public function ratingquestionAnswer(Request $request)
    {
        $VendorQuestionAnswer = Vendor::with('category');

        if (request('category') != null) {
            $VendorQuestionAnswer = $VendorQuestionAnswer->where('category_id', $request->category);
        }

        if ((! empty(request('selectedId')) && (request('selectedId') != null))) {
            $VendorQuestionAnswer = $VendorQuestionAnswer->where('id', $request->selectedId);
        }

        $VendorQuestionAnswer = $VendorQuestionAnswer->where('rating_question_status', 1)->orderBy('flowchart_date', 'DESC')->paginate(25);

        $totalVendor = Vendor::where('rating_question_status', 1)->count();

        $datatableModel = DataTableColumn::select('column_name')->where('user_id', auth()->user()->id)->where('section_name', 'vendors-rqa-listing')->first();

        $dynamicColumnsToShowVendorsrqa = [];
        if (! empty($datatableModel->column_name)) {
            $hideColumns                    = $datatableModel->column_name ?? '';
            $dynamicColumnsToShowVendorsrqa = json_decode($hideColumns, true);
        }

        $rating_questions = VendorRatingQuestions::orderBy('sorting', 'ASC')->get();

        $vendor_categories = VendorCategory::all();

        $status = VendorRatingQAStatus::all();

        $status_q = VendorQuestionStatus::all();

        return view('vendors.rating-question-answer', compact('VendorQuestionAnswer', 'dynamicColumnsToShowVendorsrqa', 'totalVendor', 'rating_questions', 'vendor_categories', 'status', 'status_q'))
            ->with('i', ($request->input('page', 1) - 1) * 25);
    }

    public function rqaStatusCreate(Request $request)
    {
        try {
            $status              = new VendorRatingQAStatus();
            $status->status_name = $request->status_name;
            $status->save();

            return response()->json(['code' => 200, 'message' => 'status Create successfully']);
        } catch (Exception $e) {
            $msg = $e->getMessage();

            return response()->json(['code' => 500, 'message' => $msg]);
        }
    }

    public function rqastatuscolor(Request $request)
    {
        $status_color = $request->all();
        $data         = $request->except('_token');
        foreach ($status_color['colorname'] as $key => $value) {
            $vr_status               = VendorRatingQAStatus::find($key);
            $vr_status->status_name  = $value;
            $vr_status->status_color = $status_color['color_name'][$key];
            $vr_status->save();
        }

        return redirect()->back()->with('success', 'The status color updated successfully.');
    }

    public function deleteFlowchartstatus(Request $request)
    {
        try {
            VendorFlowChartStatus::where('id', $request->id)->delete();

            return response()->json(['code' => '200', 'data' => [], 'message' => 'Data deleted successfully']);
        } catch (Exception $e) {
            return response()->json(['code' => '500', 'message' => $e->getMessage()]);
        }
    }

    public function deleteQAStatus(Request $request)
    {
        try {
            VendorQuestionStatus::where('id', $request->id)->delete();

            return response()->json(['code' => '200', 'data' => [], 'message' => 'Data deleted successfully']);
        } catch (Exception $e) {
            return response()->json(['code' => '500', 'message' => $e->getMessage()]);
        }
    }

    public function deleteRQAStatus(Request $request)
    {
        try {
            VendorRatingQAStatus::where('id', $request->id)->delete();

            return response()->json(['code' => '200', 'data' => [], 'message' => 'Data deleted successfully']);
        } catch (Exception $e) {
            return response()->json(['code' => '500', 'message' => $e->getMessage()]);
        }
    }

    public function flowchartStatusCreate(Request $request)
    {
        try {
            $status              = new VendorFlowChartStatus();
            $status->status_name = $request->status_name;
            $status->save();

            return response()->json(['code' => 200, 'message' => 'status Create successfully']);
        } catch (Exception $e) {
            $msg = $e->getMessage();

            return response()->json(['code' => 500, 'message' => $msg]);
        }
    }

    public function flowchartstatuscolor(Request $request)
    {
        $status_color = $request->all();
        $data         = $request->except('_token');
        foreach ($status_color['colorname'] as $key => $value) {
            $vf_status               = VendorFlowChartStatus::find($key);
            $vf_status->status_name  = $value;
            $vf_status->status_color = $status_color['color_name'][$key];
            $vf_status->save();
        }

        return redirect()->back()->with('success', 'The status color updated successfully.');
    }

    public function rqaupdateStatus(Request $request)
    {
        $vendor_id      = $request->input('vendor_id');
        $question_id    = $request->input('question_id');
        $selectedStatus = $request->input('selectedStatus');

        $vendor_status        = VendorRatingQAStatusHistory::where('vendor_id', $vendor_id)->where('question_id', $question_id)->orderBy('id', 'DESC')->first();
        $history              = new VendorRatingQAStatusHistory();
        $history->vendor_id   = $vendor_id;
        $history->question_id = $question_id;

        if (! empty($vendor_status)) {
            $history->old_value = $vendor_status->new_value;
        } else {
            $history->old_value = '';
        }
        $history->new_value = $selectedStatus;
        $history->user_id   = Auth::user()->id;
        $history->save();

        return response()->json(['message' => 'Status updated successfully']);
    }

    public function rqaStatusHistories(Request $request)
    {
        $datas = VendorRatingQAStatusHistory::with(['user', 'newValue', 'oldValue'])
            ->where('vendor_id', $request->vendor_id)
            ->where('question_id', $request->question_id)
            ->latest()
            ->get();

        return response()->json([
            'status'      => true,
            'data'        => $datas,
            'message'     => 'History get successfully',
            'status_name' => 'success',
        ], 200);
    }

    public function flowchartupdateStatus(Request $request)
    {
        $vendor_id      = $request->input('vendor_id');
        $flow_chart_id  = $request->input('flow_chart_id');
        $selectedStatus = $request->input('selectedStatus');

        $vendor_status          = VendorFlowChartStatusHistory::where('vendor_id', $vendor_id)->where('flow_chart_id', $flow_chart_id)->orderBy('id', 'DESC')->first();
        $history                = new VendorFlowChartStatusHistory();
        $history->vendor_id     = $vendor_id;
        $history->flow_chart_id = $flow_chart_id;

        if (! empty($vendor_status)) {
            $history->old_value = $vendor_status->new_value;
        } else {
            $history->old_value = '';
        }
        $history->new_value = $selectedStatus;
        $history->user_id   = Auth::user()->id;
        $history->save();

        return response()->json(['message' => 'Status updated successfully']);
    }

    public function flowchartStatusHistories(Request $request)
    {
        $datas = VendorFlowChartStatusHistory::with(['user', 'newValue', 'oldValue'])
            ->where('vendor_id', $request->vendor_id)
            ->where('flow_chart_id', $request->flow_chart_id)
            ->latest()
            ->get();

        return response()->json([
            'status'      => true,
            'data'        => $datas,
            'message'     => 'History get successfully',
            'status_name' => 'success',
        ], 200);
    }

    public function getVendorRatingQuestionsAnswerNotes(Request $request)
    {
        $datas = VendorRatingQANotes::where('vendor_id', $request->vendor_id)
            ->where('question_id', $request->question_id)
            ->latest()
            ->get();

        return response()->json([
            'status'      => true,
            'data'        => $datas,
            'message'     => 'Question get successfully',
            'status_name' => 'success',
        ], 200);
    }

    public function notesStore(Request $request)
    {
        $this->validate($request, [
            'notes' => 'required',
        ]);
        $data            = $request->except('_token');
        $data['user_id'] = Auth::user()->id;
        VendorRatingQANotes::create($data);

        return redirect()->back()->with('success', 'You have successfully created a notes!');
    }

    public function flowchartnotesStore(Request $request)
    {
        $this->validate($request, [
            'notes' => 'required',
        ]);
        $data            = $request->except('_token');
        $data['user_id'] = Auth::user()->id;
        VendorFLowChartNotes::create($data);

        return redirect()->back()->with('success', 'You have successfully created a notes!');
    }

    public function qaStatusCreate(Request $request)
    {
        try {
            $status              = new VendorQuestionStatus();
            $status->status_name = $request->status_name;
            $status->save();

            return response()->json(['code' => 200, 'message' => 'status Create successfully']);
        } catch (Exception $e) {
            $msg = $e->getMessage();

            return response()->json(['code' => 500, 'message' => $msg]);
        }
    }

    public function qastatuscolor(Request $request)
    {
        $status_color = $request->all();
        $data         = $request->except('_token');
        foreach ($status_color['colorname'] as $key => $value) {
            $vq_status               = VendorQuestionStatus::find($key);
            $vq_status->status_name  = $value;
            $vq_status->status_color = $status_color['color_name'][$key];
            $vq_status->save();
        }

        return redirect()->back()->with('success', 'The status color updated successfully.');
    }

    public function qaupdateStatus(Request $request)
    {
        $vendor_id      = $request->input('vendor_id');
        $question_id    = $request->input('question_id');
        $selectedStatus = $request->input('selectedStatus');

        $vendor_status        = VendorQuestionStatusHistory::where('vendor_id', $vendor_id)->where('question_id', $question_id)->orderBy('id', 'DESC')->first();
        $history              = new VendorQuestionStatusHistory();
        $history->vendor_id   = $vendor_id;
        $history->question_id = $question_id;

        if (! empty($vendor_status)) {
            $history->old_value = $vendor_status->new_value;
        } else {
            $history->old_value = '';
        }
        $history->new_value = $selectedStatus;
        $history->user_id   = Auth::user()->id;
        $history->save();

        return response()->json(['message' => 'Status updated successfully']);
    }

    public function qaStatusHistories(Request $request)
    {
        $datas = VendorQuestionStatusHistory::with(['user', 'newValue', 'oldValue'])
            ->where('vendor_id', $request->vendor_id)
            ->where('question_id', $request->question_id)
            ->latest()
            ->get();

        return response()->json([
            'status'      => true,
            'data'        => $datas,
            'message'     => 'History get successfully',
            'status_name' => 'success',
        ], 200);
    }

    public function vendorAllSection(Request $request)
    {
        $VendorFlowchart       = [];
        $VendorQuestionAnswer  = [];
        $VendorQuestionRAnswer = [];

        if ((! empty(request('vendors')) && (request('vendors') != null))) {
            $VendorFlowchart = Vendor::with('category');

            if ((! empty(request('vendors')) && (request('vendors') != null))) {
                $VendorFlowchart = $VendorFlowchart->whereIn('id', $request->vendors);
            }

            $VendorFlowchart = $VendorFlowchart->whereNotNull('flowchart_date')->orderBy('flowchart_date', 'DESC')->get();

            $VendorQuestionAnswer = Vendor::with('category');

            if ((! empty(request('vendors')) && (request('vendors') != null))) {
                $VendorQuestionAnswer = $VendorQuestionAnswer->whereIn('id', $request->vendors);
            }

            $VendorQuestionAnswer = $VendorQuestionAnswer->where('question_status', 1)->orderBy('flowchart_date', 'DESC')->get();

            $VendorQuestionRAnswer = Vendor::with('category');

            if ((! empty(request('vendors')) && (request('vendors') != null))) {
                $VendorQuestionRAnswer = $VendorQuestionRAnswer->whereIn('id', $request->vendors);
            }

            $VendorQuestionRAnswer = $VendorQuestionRAnswer->where('rating_question_status', 1)->orderBy('flowchart_date', 'DESC')->get();
        }

        $vendor_flow_charts = VendorFlowChart::orderBy('sorting', 'ASC')->get();

        $vendor_categories = VendorCategory::all();

        $status = VendorFlowChartStatus::all();

        $vendor_questions = VendorQuestions::orderBy('sorting', 'ASC')->get();

        $status_q = VendorQuestionStatus::all();

        $vendor_r_questions = VendorRatingQuestions::orderBy('sorting', 'ASC')->get();

        $status_r = VendorRatingQAStatus::all();

        return view('vendors.all-section', compact('VendorFlowchart', 'VendorQuestionAnswer', 'VendorQuestionRAnswer', 'vendor_flow_charts', 'vendor_categories', 'vendor_r_questions', 'status', 'vendor_questions', 'status_q', 'status_r'));
    }

    public function deleteFlowchartCategory(Request $request)
    {
        try {
            VendorFlowChart::where('id', $request->id)->delete();

            return response()->json(['code' => '200', 'data' => [], 'message' => 'Data deleted successfully']);
        } catch (Exception $e) {
            return response()->json(['code' => '500', 'message' => $e->getMessage()]);
        }
    }

    public function deleteQACategory(Request $request)
    {
        try {
            VendorQuestions::where('id', $request->id)->delete();

            return response()->json(['code' => '200', 'data' => [], 'message' => 'Data deleted successfully']);
        } catch (Exception $e) {
            return response()->json(['code' => '500', 'message' => $e->getMessage()]);
        }
    }

    public function deleteRQACategory(Request $request)
    {
        try {
            VendorRatingQuestions::where('id', $request->id)->delete();

            return response()->json(['code' => '200', 'data' => [], 'message' => 'Data deleted successfully']);
        } catch (Exception $e) {
            return response()->json(['code' => '500', 'message' => $e->getMessage()]);
        }
    }

    public function flowchartSortOrder(Request $request)
    {
        $flowchart_vendor = $request->all();
        $data             = $request->except('_token');
        foreach ($flowchart_vendor['sorting'] as $key => $value) {
            $f_vendor          = VendorFlowChart::find($key);
            $f_vendor->sorting = $value;
            $f_vendor->save();
        }

        return redirect()->back()->with('success', 'The sort order updated successfully.');
    }

    public function qaSortOrder(Request $request)
    {
        $question_vendor = $request->all();
        $data            = $request->except('_token');
        foreach ($question_vendor['sorting'] as $key => $value) {
            $qa_vendor          = VendorQuestions::find($key);
            $qa_vendor->sorting = $value;
            $qa_vendor->save();
        }

        return redirect()->back()->with('success', 'The sort order updated successfully.');
    }

    public function rqaSortOrder(Request $request)
    {
        $rquestion_vendor = $request->all();
        $data             = $request->except('_token');
        foreach ($rquestion_vendor['sorting'] as $key => $value) {
            $rqa_vendor          = VendorRatingQuestions::find($key);
            $rqa_vendor->sorting = $value;
            $rqa_vendor->save();
        }

        return redirect()->back()->with('success', 'The sort order updated successfully.');
    }

    public function searchVendorFlowcharts(Request $request)
    {
        $vendor_id = $request->vendor_id;

        $VendorFlowchart = [];

        if ((! empty($vendor_id) && ($vendor_id != null))) {
            $VendorFlowchart = Vendor::with('category');

            $VendorFlowchart = $VendorFlowchart->where('id', $vendor_id);

            $VendorFlowchart = $VendorFlowchart->whereNotNull('flowchart_date')->orderBy('flowchart_date', 'DESC')->get();
        }

        $vendor_flow_charts = VendorFlowChart::orderBy('sorting', 'ASC')->get();

        $status = VendorFlowChartStatus::all();

        return view('vendors.partials.search-data-fc', compact('VendorFlowchart', 'vendor_flow_charts', 'status', 'vendor_id'));
    }

    public function searchVendorQa(Request $request)
    {
        $vendor_id = $request->vendor_id;

        $VendorQuestionAnswer = [];

        if ((! empty($vendor_id) && ($vendor_id != null))) {
            $VendorQuestionAnswer = Vendor::with('category');

            $VendorQuestionAnswer = $VendorQuestionAnswer->where('id', $vendor_id);

            $VendorQuestionAnswer = $VendorQuestionAnswer->where('question_status', 1)->orderBy('flowchart_date', 'DESC')->get();
        }

        $vendor_questions = VendorQuestions::orderBy('sorting', 'ASC')->get();

        $status_q = VendorQuestionStatus::all();

        return view('vendors.partials.search-data-qa', compact('VendorQuestionAnswer', 'vendor_questions', 'status_q', 'vendor_id'));
    }

    public function searchVendorRQa(Request $request)
    {
        $vendor_id = $request->vendor_id;

        $VendorQuestionRAnswer = [];

        if ((! empty($vendor_id) && ($vendor_id != null))) {
            $VendorQuestionRAnswer = Vendor::with('category');

            $VendorQuestionRAnswer = $VendorQuestionRAnswer->where('id', $vendor_id);

            $VendorQuestionRAnswer = $VendorQuestionRAnswer->where('rating_question_status', 1)->orderBy('flowchart_date', 'DESC')->get();
        }

        $vendor_r_questions = VendorRatingQuestions::orderBy('sorting', 'ASC')->get();

        $status_r = VendorRatingQAStatus::all();

        return view('vendors.partials.search-data-rqa', compact('VendorQuestionRAnswer', 'vendor_r_questions', 'status_r', 'vendor_id'));
    }

    public function getVendorFlowchartNotes(Request $request)
    {
        $datas = VendorFLowChartNotes::where('vendor_id', $request->vendor_id)
            ->where('flow_chart_id', $request->flow_chart_id)
            ->latest()
            ->get();

        return response()->json([
            'status'      => true,
            'data'        => $datas,
            'message'     => 'Question get successfully',
            'status_name' => 'success',
        ], 200);
    }

    public function searchforVendorFlowcharts(Request $request)
    {
        $vendor_id = $request->vendor_id;

        $VendorFlowchart = [];

        if ((! empty($vendor_id) && ($vendor_id != null))) {
            $VendorFlowchart = Vendor::with('category');

            $VendorFlowchart = $VendorFlowchart->where('id', $vendor_id);

            $VendorFlowchart = $VendorFlowchart->whereNotNull('flowchart_date')->orderBy('flowchart_date', 'DESC')->get();
        }

        $vendor_flow_charts = VendorFlowChart::orderBy('sorting', 'ASC')->get();

        if (! empty($vendor_flow_charts)) {
            foreach ($vendor_flow_charts as $key => $value) {
                $vendorflowcharts = VendorFlowChartSorting::where('vendor_id', $vendor_id)->where('flow_chart_id', $value->id)->first();

                if (empty($vendorflowcharts)) {
                    $vendorflowchartsSorting = VendorFlowChartSorting::where('vendor_id', $vendor_id)->orderBy('sorting_f', 'DESC')->first();

                    $sorting_f = ($key + 1);
                    if (! empty($vendorflowchartsSorting)) {
                        $sorting_f = ($vendorflowchartsSorting->sorting_f + 1);
                    }

                    $vendorfs                = new VendorFlowChartSorting();
                    $vendorfs->vendor_id     = $vendor_id;
                    $vendorfs->flow_chart_id = $value->id;
                    $vendorfs->sorting_f     = $sorting_f;
                    $vendorfs->save();
                }
            }
        }

        $vendor_flow_charts = VendorFlowChartSorting::with('flowchart')->where('vendor_id', $vendor_id)->orderBy('sorting_f', 'ASC')->get();

        $status = VendorFlowChartStatus::all();

        return view('vendors.partials.search-data-fc-vendor', compact('VendorFlowchart', 'vendor_flow_charts', 'status', 'vendor_id'));
    }

    public function flowchartupdatesorting(Request $request)
    {
        $update_sorting = $request->all();
        $data           = $request->except('_token');
        foreach ($update_sorting['updatesorting'] as $key => $value) {
            $upsorting            = VendorFlowChartSorting::find($key);
            $upsorting->sorting_f = $value;
            $upsorting->save();
        }

        return redirect()->back()->with('success', 'The sorting updated successfully.');
    }

    public function frequencyAdd(Request $request)
    {
        try {
            $frequency = VendorFrequency::create(
                [
                    'user_id' => \Auth::user()->id,
                    'name'    => $request->frequency_name,
                ]
            );
            $frequency = VendorFrequency::where('id', $frequency->id)->first();

            return response()->json(['code' => 200, 'data' => $frequency, 'message' => 'Added successfully!!!']);
        } catch (Exception $e) {
            $msg = $e->getMessage();

            return response()->json(['code' => 500, 'message' => $msg]);
        }
    }

    public function vendorPriceHistory(Request $request)
    {
        $data = VendorPriceHistory::with(['user' => function ($query) {
        }])->where('vendor_id', $request->id)->get();

        return response()->json(['code' => 200, 'data' => $data, 'message' => 'Message sent successfully']);
    }

    public function searchforVendorEmails(Request $request)
    {
        $vendor_id = $request->vendor_id;

        $vendor = Vendor::find($vendor_id);

        if (! empty($vendor)) {
            // Set default type as incoming
            $type = 'incoming';
            $seen = '0';
            $from = ''; //Purpose : Add var -  DEVTASK-18283

            $sender = $vendor->email;
            $date   = $request->date ?? '';

            $query = (new Email())->newQuery();

            $query = $query->leftJoin('chat_messages', 'chat_messages.email_id', 'emails.id')
                ->leftjoin('customers as c', 'c.id', 'chat_messages.customer_id')
                ->leftJoin('vendors as v', 'v.id', 'chat_messages.vendor_id')
                ->leftJoin('suppliers as s', 's.id', 'chat_messages.supplier_id');

            $query = $query->where(function ($query) use ($type) {
                $query->where('emails.type', $type)->orWhere('emails.type', 'open')->orWhere('emails.type', 'delivered')->orWhere('emails.type', 'processed');
            });

            $query = $query->where(function ($query) use ($sender) {
                $query->where('emails.from', $sender)->orWhere('emails.to', $sender);
            });

            $query = $query->select('emails.*', 'chat_messages.customer_id', 'chat_messages.supplier_id', 'chat_messages.vendor_id', 'c.is_auto_simulator as customer_auto_simulator',
                'v.is_auto_simulator as vendor_auto_simulator', 's.is_auto_simulator as supplier_auto_simulator');

            $query = $query->orderByDesc('emails.id');

            $emails = $query->orderBy('emails.id', 'DESC')->take(5)->get();

            $emailModelTypes = Email::emailModelTypeList();

            return view('vendors.partials.vendor-email', compact('emails', 'emailModelTypes'));
        }
    }

    public function getVendorFlowchartUpdateNotes(Request $request)
    {
        $vendorN       = VendorFLowChartNotes::find($request->note_id);
        $data['notes'] = $request->notes;
        $vendorN->update($data);

        return response()->json([
            'status'      => true,
            'message'     => 'Notes updated successfully',
            'status_name' => 'success',
        ], 200);
    }

    public function deleteFlowchartnotes(Request $request)
    {
        try {
            VendorFLowChartNotes::where('id', $request->id)->delete();

            return response()->json(['code' => '200', 'data' => [], 'message' => 'Data deleted successfully']);
        } catch (Exception $e) {
            return response()->json(['code' => '500', 'message' => $e->getMessage()]);
        }
    }

    public function getVendorrqaUpdateNotes(Request $request)
    {
        $vendorN       = VendorRatingQANotes::find($request->note_id);
        $data['notes'] = $request->notes;
        $vendorN->update($data);

        return response()->json([
            'status'      => true,
            'message'     => 'Notes updated successfully',
            'status_name' => 'success',
        ], 200);
    }

    public function deleteRqnotes(Request $request)
    {
        try {
            VendorRatingQANotes::where('id', $request->id)->delete();

            return response()->json(['code' => '200', 'data' => [], 'message' => 'Data deleted successfully']);
        } catch (Exception $e) {
            return response()->json(['code' => '500', 'message' => $e->getMessage()]);
        }
    }

    public function searchforSupplierEmails(Request $request)
    {
        $supplier_id = $request->supplier_id;

        $supplier = Supplier::find($supplier_id);

        if (! empty($supplier)) {
            // Set default type as incoming
            $type = 'incoming';
            $seen = '0';
            $from = ''; //Purpose : Add var -  DEVTASK-18283

            $sender = $supplier->email;
            $date   = $request->date ?? '';

            $query = (new Email())->newQuery();

            $query = $query->leftJoin('chat_messages', 'chat_messages.email_id', 'emails.id')
                ->leftjoin('customers as c', 'c.id', 'chat_messages.customer_id')
                ->leftJoin('vendors as v', 'v.id', 'chat_messages.vendor_id')
                ->leftJoin('suppliers as s', 's.id', 'chat_messages.supplier_id');

            $query = $query->where(function ($query) use ($type) {
                $query->where('emails.type', $type)->orWhere('emails.type', 'open')->orWhere('emails.type', 'delivered')->orWhere('emails.type', 'processed');
            });

            $query = $query->where(function ($query) use ($sender) {
                $query->where('emails.from', $sender)->orWhere('emails.to', $sender);
            });

            $query = $query->select('emails.*', 'chat_messages.customer_id', 'chat_messages.supplier_id', 'chat_messages.vendor_id', 'c.is_auto_simulator as customer_auto_simulator',
                'v.is_auto_simulator as vendor_auto_simulator', 's.is_auto_simulator as supplier_auto_simulator');

            $query = $query->orderByDesc('emails.id');

            $emails = $query->orderBy('emails.id', 'DESC')->take(5)->get();

            $emailModelTypes = Email::emailModelTypeList();

            return view('suppliers.partials.suppliers-email', compact('emails', 'emailModelTypes'));
        }
    }
}


File: /opt/lampp/htdocs/erp/app/Http/Controllers/WhatsAppController.php 
Content: <?php

namespace App\Http\Controllers;

use File;
use Image;
use App\Old;
use App\Task;
use App\User;
use Response;
use App\Email;
use App\Issue;
use App\Order;
use Validator;
use App\ApiKey;
use App\Lawyer;
use App\Vendor;
use App\Account;
use App\Blogger;
use App\Contact;
use App\ImQueue;
use App\Message;
use App\Product;
use App\Setting;
use App\Customer;
use App\Document;
use App\Dubbizle;
use App\Supplier;
use App\AutoReply;
use App\BrandFans;
use App\ColdLeads;
use App\LegalCase;
use Carbon\Carbon;
use Dompdf\Dompdf;
use App\LogRequest;
use App\ChatMessage;
use App\Instruction;
use App\MessageQueue;
use App\DeveloperTask;
use App\BroadcastImage;
use App\LogChatMessage;
use App\QuickSellGroup;
use App\CustomerCharity;
use Plank\Mediable\Media;
use App\WatsonChatJourney;
use App\AutoCompleteMessage;
use App\DocumentSendHistory;
use Illuminate\Http\Request;
use App\CommunicationHistory;
use App\ChatMessagesQuickData;
use App\Helpers\HubstaffTrait;
use App\Helpers\MessageHelper;
use App\Marketing\WhatsappConfig;
use App\Helpers\TranslationHelper;
use App\Mails\Manual\PurchaseExport;
use Illuminate\Support\Facades\Auth;
use Maatwebsite\Excel\Facades\Excel;
use App\Imports\CustomerNumberImport;
use GuzzleHttp\Client as GuzzleClient;
use App\Helpers\InstantMessagingHelper;
use App\Hubstaff\HubstaffActivitySummary;
use App\Marketing\WhatsappBusinessAccounts;
use IlluminUserFeedbackStatuspport\Facades\DB;
use Illuminate\Pagination\LengthAwarePaginator;
use App\Services\BulkCustomerMessage\KeywordsChecker;
use Plank\Mediable\Facades\MediaUploader as MediaUploader;

class WhatsAppController extends FindByNumberController
{
    use HubstaffTrait;

    const MEDIA_PDF_CHUNKS = 50;

    const AUTO_LEAD_SEND_PRICE = 281;

    private $githubClient;

    public function __construct()
    {
        $this->githubClient = new GuzzleClient([
            'auth' => [config('env.GITHUB_USERNAME'), config('env.GITHUB_TOKEN')],
        ]);
        $this->init(config('env.HUBSTAFF_SEED_PERSONAL_TOKEN'));
    }

    /**
     * Incoming message URL for whatsApp
     *
     * @return \Illuminate\Http\Response
     */
    public function incomingMessage(Request $request, GuzzleClient $client)
    {
        $data = $request->json()->all();
        $data = $this->mapForWassenger($data);
        if ($data['event'] == 'INBOX') {
            $to       = $data['to'];
            $from     = $data['from'];
            $text     = $data['text'];
            $lead     = $this->findLeadByNumber($from);
            $user     = $this->findUserByNumber($from);
            $supplier = $this->findSupplierByNumber($from);
            $customer = $this->findCustomerByNumber($from);

            $params = [
                'number' => $from,
            ];

            if ($user) {
                $params = $this->modifyParamsWithMessage($params, $data);

                $params['erp_user'] = $user->id;

                $params = $this->modifyParamsWithMessage($params, $data);

                if (array_key_exists('message', $params) && (preg_match_all("/#([\d]+)/i", $params['message'], $match))) {
                    $params['task_id'] = $match[1][0];
                }

                $message    = ChatMessage::create($params);
                $model_type = 'user';
                $model_id   = $user->id;

                if (array_key_exists('task_id', $params)) {
                    $this->sendRealTime($message, 'task_' . $match[1][0], $client);
                } else {
                    $this->sendRealTime($message, 'erp_user_' . $user->id, $client);
                }
            }

            if ($supplier) {
                $params['erp_user']    = null;
                $params['task_id']     = null;
                $params['supplier_id'] = $supplier->id;

                $params     = $this->modifyParamsWithMessage($params, $data, $supplier->id);
                $message    = ChatMessage::create($params);
                $model_type = 'supplier';
                $model_id   = $supplier->id;

                $this->sendRealTime($message, 'supplier_' . $supplier->id, $client);
            }

            if ($customer) {
                $params['erp_user']    = null;
                $params['supplier_id'] = null;
                $params['task_id']     = null;
                $params['customer_id'] = $customer->id;

                $params  = $this->modifyParamsWithMessage($params, $data);
                $message = ChatMessage::create($params);

                if (isset($params['message']) && $params['message']) {
                    (new KeywordsChecker())->assignCustomerAndKeywordForNewMessage($params['message'], $customer);
                }

                $model_type = 'customers';
                $model_id   = $customer->id;
                $customer->update([
                    'whatsapp_number' => $to,
                ]);

                $this->sendRealTime($message, 'customer_' . $customer->id, $client);

                if (Setting::get('forward_messages') == 1) {
                    if (Setting::get('forward_start_date') != null && Setting::get('forward_end_date') != null) {
                        $time       = Carbon::now();
                        $start_date = Carbon::parse(Setting::get('forward_start_date'));
                        $end_date   = Carbon::parse(Setting::get('forward_end_date'));

                        if ($time->between($start_date, $end_date, true)) {
                            $forward_users_ids = json_decode(Setting::get('forward_users'));
                            $second_message    = '';

                            if ($message->message == null) {
                                $forwarded_message = "FORWARDED from $customer->name";
                                $second_message    = $message->media_url;
                            } else {
                                $forwarded_message = "FORWARDED from $customer->name - " . $message->message;
                            }

                            foreach ($forward_users_ids as $user_id) {
                                $user = User::find($user_id);

                                $this->sendWithWhatsApp($user->phone, $user->whatsapp_number, $forwarded_message, false, $message->id);

                                if ($second_message != '') {
                                    $this->sendWithWhatsApp($user->phone, $user->whatsapp_number, $second_message, false, $message->id);
                                }
                            }
                        }
                    } else {
                        $forward_users_ids = json_decode(Setting::get('forward_users'));
                        $second_message    = '';

                        if ($message->message == null) {
                            $forwarded_message = "FORWARDED from $customer->name";
                            $second_message    = $message->media_url;
                        } else {
                            $forwarded_message = "FORWARDED from $customer->name - " . $message->message;
                        }

                        foreach ($forward_users_ids as $user_id) {
                            $user = User::find($user_id);

                            $this->sendWithWhatsApp($user->phone, $user->whatsapp_number, $forwarded_message, false, $message->id);

                            if ($second_message != '') {
                                $this->sendWithWhatsApp($user->phone, $user->whatsapp_number, $second_message, false, $message->id);
                            }
                        }
                    }
                }

                // Auto DND Keyword Stop Added By Satyam
                if (array_key_exists('message', $params) && strtoupper($params['message']) == 'DND' || strtoupper($params['message']) == 'STOP') {
                    if ($customer = Customer::find($params['customer_id'])) {
                        $customer->do_not_disturb = 1;
                        $customer->save();
                        \Log::channel('customerDnd')->debug('(Customer ID ' . $customer->id . ' line ' . $customer->name . ' ' . $customer->number . ': Added To DND');

                        $dnd_params = [
                            'number'      => null,
                            'user_id'     => 6,
                            'approved'    => 1,
                            'status'      => 9,
                            'customer_id' => $customer->id,
                            'message'     => AutoReply::where('type', 'auto-reply')->where('keyword', 'customer-dnd')->first()->reply,
                        ];

                        $auto_dnd_message = ChatMessage::create($dnd_params);

                        $this->sendWithWhatsApp($customer->phone, $customer->whatsapp_number, $dnd_params['message'], false, $auto_dnd_message->id);
                    }
                }

                // Auto Instruction
                if (array_key_exists('message', $params) && (preg_match('/price/i', $params['message']) || preg_match('/you photo/i', $params['message']) || preg_match('/pp/i', $params['message']) || preg_match('/how much/i', $params['message']) || preg_match('/cost/i', $params['message']) || preg_match('/rate/i', $params['message']))) {
                    if ($customer = Customer::find($params['customer_id'])) {
                        $two_hours                = Carbon::now()->subHours(2);
                        $latest_broadcast_message = ChatMessage::where('customer_id', $customer->id)->where('created_at', '>', $two_hours)->where('status', 8)->orderBy('id', 'DESC')->first();

                        if ($latest_broadcast_message) {
                            if (! $latest_broadcast_message->isSentBroadcastPrice()) {
                                if ($latest_broadcast_message->hasMedia(config('constants.media_tags'))) {
                                    $selected_products = [];

                                    foreach ($latest_broadcast_message->getMedia(config('constants.media_tags')) as $image) {
                                        $image_key     = $image->getKey();
                                        $mediable_type = 'BroadcastImage';

                                        $broadcast = BroadcastImage::with('Media')
                                            ->whereRaw("broadcast_images.id IN (SELECT mediables.mediable_id FROM mediables WHERE mediables.media_id = $image_key AND mediables.mediable_type LIKE '%$mediable_type%')")
                                            ->first();

                                        if ($broadcast) {
                                            $brod_products = json_decode($broadcast->products, true);

                                            if (count($brod_products) > 0) {
                                                foreach ($brod_products as $brod_pro) {
                                                    $selected_products[] = $brod_pro;
                                                }
                                            }
                                        }
                                    }

                                    if (isset($broadcast)) {
                                        if (! empty($selected_products)) {
                                            foreach ($selected_products as $pid) {
                                                $product    = \App\Product::where('id', $pid)->first();
                                                $quick_lead = \App\ErpLeads::create([
                                                    'customer_id'      => $customer->id,
                                                    'lead_status_id'   => 3,
                                                    'product_id'       => $pid,
                                                    'store_website_id' => 15,
                                                    'brand_id'         => $product ? $product->brand : null,
                                                    'category_id'      => $product ? $product->category : null,
                                                    'brand_segment'    => $product && $product->brands ? $product->brands->brand_segment : null,
                                                    'color'            => $customer->color,
                                                    'size'             => $customer->size,
                                                    'type'             => 'whatsapp-incoming-message',
                                                    'created_at'       => Carbon::now(),
                                                ]);
                                            }
                                            $requestData = new Request();
                                            $requestData->setMethod('POST');
                                            $requestData->request->add(['customer_id' => $customer->id, 'lead_id' => $quick_lead->id, 'selected_product' => $selected_products]);

                                            app(\App\Http\Controllers\LeadsController::class)->sendPrices($requestData);
                                        }

                                        CommunicationHistory::create([
                                            'model_id'   => $latest_broadcast_message->id,
                                            'model_type' => ChatMessage::class,
                                            'type'       => 'broadcast-prices',
                                            'method'     => 'whatsapp',
                                        ]);
                                    } else {
                                        //
                                    }
                                }
                            }
                        }

                        Instruction::create([
                            'customer_id'   => $customer->id,
                            'instruction'   => 'Please send the prices',
                            'category_id'   => 1,
                            'assigned_to'   => 7,
                            'assigned_from' => 6,
                        ]);
                    }
                }

                // Auto Replies
                $auto_replies = AutoReply::all();

                foreach ($auto_replies as $auto_reply) {
                    if (array_key_exists('message', $params) && $params['message'] != '') {
                        $keyword = $auto_reply->keyword;

                        if (preg_match("/{$keyword}/i", $params['message'])) {
                            $temp_params            = $params;
                            $temp_params['message'] = $auto_reply->reply;
                            $temp_params['status']  = 1;

                            ChatMessage::create($temp_params);

                            $this->sendRealTime($message, 'customer_' . $customer->id, $client);
                        }
                    }
                }
            } else {
                $params['customer_id'] = null;
            }

            if (! isset($user) && ! isset($purchase) && ! isset($customer)) {
                $modal_type              = 'leads';
                $user                    = User::get()[0];
                $validate_phone['phone'] = $from;

                $validator = Validator::make($validate_phone, [
                    'phone' => 'unique:customers,phone',
                ]);

                if ($validator->fails()) {
                } else {
                    $customer         = new Customer;
                    $customer->name   = $from;
                    $customer->phone  = $from;
                    $customer->rating = 2;
                    $customer->save();

                    $lead = \App\ErpLeads::create([
                        'customer_id'      => $customer->id,
                        'store_website_id' => 15,
                        'lead_status_id'   => 1,
                        'type'             => 'whatsapp-incoming-message',
                    ]);

                    $params['lead_id']     = $lead->id;
                    $params['customer_id'] = $customer->id;
                    $params                = $this->modifyParamsWithMessage($params, $data);
                    $message               = ChatMessage::create($params);
                    $model_type            = 'leads';
                    $model_id              = $lead->id;

                    $this->sendRealTime($message, 'customer_' . $customer->id, $client);
                }
            }

            // Auto Respond
            $today_date          = Carbon::now()->format('Y-m-d');
            $time                = Carbon::now();
            $start_time          = Setting::get('start_time');
            $start_time_exploded = explode(':', $start_time);
            $end_time            = Setting::get('end_time');
            $end_time_exploded   = explode(':', $end_time);
            $morning             = Carbon::create($time->year, $time->month, $time->day, $start_time_exploded[0], $start_time_exploded[1], 0);
            $not_morning         = Carbon::create($time->year, $time->month, $time->day, 0, 0, 0);
            $evening             = Carbon::create($time->year, $time->month, $time->day, $end_time_exploded[0], $end_time_exploded[1], 0);
            $not_evening         = Carbon::create($time->year, $time->month, $time->day, 23, 59, 0);
            $saturday            = Carbon::now()->endOfWeek()->subDay()->format('Y-m-d');
            $sunday              = Carbon::now()->endOfWeek()->format('Y-m-d');

            $chat_messages_query = ChatMessage::where('customer_id', $params['customer_id'])->whereBetween('created_at', [$morning, $evening])->whereNotNull('number');
            $chat_messages_count = $chat_messages_query->count();

            $chat_messages_evening_query = ChatMessage::where('customer_id', $params['customer_id'])->where(function ($query) use ($not_morning, $morning, $evening, $not_evening) {
                $query->whereBetween('created_at', [$not_morning, $morning])->orWhereBetween('created_at', [$evening, $not_evening]);
            })->whereNotNull('number');
            $chat_messages_evening_count = $chat_messages_evening_query->count();

            if ($chat_messages_count == 1) {
                $chat_messages_query_first = $chat_messages_query->first();
            }

            if ($chat_messages_evening_count == 1) {
                $chat_messages_evening_query_first = $chat_messages_evening_query->first();
            }

            if ($chat_messages_count == 1 && (isset($chat_messages_query_first) && $chat_messages_query_first->id == $message->id) && ($saturday != $today_date && $sunday != $today_date)) {
                $customer = Customer::find($params['customer_id']);
                $params   = [
                    'number'      => null,
                    'user_id'     => 6,
                    'approved'    => 1,
                    'status'      => 9,
                    'customer_id' => $params['customer_id'],
                ];

                if ($time->between($morning, $evening, true)) {
                    $params['message'] = AutoReply::where('type', 'auto-reply')->where('keyword', 'work-hours-greeting')->first()->reply;

                    sleep(1);
                    $additional_message = ChatMessage::create($params);
                    $this->sendWithWhatsApp($message->customer->phone, $customer->whatsapp_number, $additional_message->message, false, $additional_message->id);
                }
            } else {
                if (($chat_messages_evening_count == 1 && (isset($chat_messages_evening_query_first) && $chat_messages_evening_query_first->id == $message->id)) || ($chat_messages_count == 1 && ($saturday == $today_date || $sunday == $today_date))) {
                    $customer = Customer::find($params['customer_id']);

                    $auto_reply = AutoReply::where('type', 'auto-reply')->where('keyword', 'office-closed-message')->first();

                    $auto_message = preg_replace('/{start_time}/i', $start_time, $auto_reply->reply);
                    $auto_message = preg_replace('/{end_time}/i', $end_time, $auto_message);

                    $params = [
                        'number'      => null,
                        'user_id'     => 6,
                        'approved'    => 1,
                        'status'      => 9,
                        'customer_id' => $params['customer_id'],
                        'message'     => $auto_message,
                    ];

                    sleep(1);
                    $additional_message = ChatMessage::create($params);
                    $this->sendWithWhatsApp($message->customer->phone, $customer->whatsapp_number, $additional_message->message, false, $additional_message->id);
                }
            }
        } else {
            $custom_data = json_decode($data['custom_data'], true);

            $chat_message = ChatMessage::find($custom_data['chat_message_id']);

            if ($chat_message) {
                $chat_message->sent = 1;
                $chat_message->save();
            }
        }

        return response('');
    }

    public function mapForWassenger($data)
    {
        if (isset($data['event'])) {
            if ($data['event'] == 'message:in:new') {
                $data['event'] = 'INBOX';
            }
        }
        $data['messages'][] = $data['data'];
        unset($data['data']);

        if (isset($data['messages'])) {
            $data['messages'][0]['fromMe'] = false;
            $data['messages'][0]['author'] = $data['messages'][0]['from'];
            $data['instanceId']            = $data['messages'][0]['id'];
        }

        return $data;
    }

    public function sendRealTime($message, $model_id, $client, $customFile = null)
    {
        return;
        $realtime_params = [
            'realtime_id'  => $model_id,
            'id'           => $message->id,
            'number'       => $message->number,
            'assigned_to'  => $message->assigned_to ?? '',
            'created_at'   => Carbon::parse($message->created_at)->format('Y-m-d H:i:s'),
            'approved'     => $message->approved ?? 0,
            'status'       => $message->status ?? 0,
            'user_id'      => $message->user_id ?? 0,
            'erp_user'     => $message->erp_user ?? 0,
            'sent'         => $message->sent ?? 0,
            'resent'       => $message->resent ?? 0,
            'error_status' => $message->error_status ?? 0,
        ];

        // attach custom image or file here if not want to send original
        $mediaUrl = ($customFile && ! empty($customFile)) ? $customFile : $message->media_url;

        if ($mediaUrl) {
            $realtime_params['media_url']    = $mediaUrl;
            $headers                         = get_headers($mediaUrl, 1);
            $realtime_params['content_type'] = is_string($headers['Content-Type']) ? $headers['Content-Type'] : $headers['Content-Type'][1];
        }

        if ($message->message) {
            $realtime_params['message'] = $message->message;
        }

        $response = $client->post('https://sololuxury.co/deliver-message', [
            'form_params' => $realtime_params,
        ]);

        return response('success', 200);
    }

    public function incomingMessageNew(Request $request, GuzzleClient $client)
    {
        $data = $request->json()->all();

        if ($data['event'] == 'message:in:new') {
            $to       = str_replace('+', '', $data['data']['toNumber']);
            $from     = str_replace('+', '', $data['data']['fromNumber']);
            $text     = $data['data']['body'];
            $lead     = $this->findLeadByNumber($from);
            $user     = $this->findUserByNumber($from);
            $supplier = $this->findSupplierByNumber($from);
            $customer = $this->findCustomerByNumber($from);
            $dubbizle = $this->findDubbizleByNumber($from);

            $params = [
                'number'  => $from,
                'message' => '',
            ];

            if ($data['data']['type'] == 'text') {
                $params['message'] = $text;
            } else {
                if ($data['data']['type'] == 'image') {
                    $image_data = $data['data']['media']['preview']['image'];
                    $image_path = public_path() . '/uploads/temp_image.png';
                    $img        = Image::make(base64_decode($image_data))->encode('jpeg')->save($image_path);

                    $media = MediaUploader::fromSource($image_path)->upload();

                    File::delete('uploads/temp_image.png');
                }
            }

            if ($user) {
                $instruction = Instruction::where('assigned_to', $user->id)->latest()->first();

                if ($instruction) {
                    $myRequest = new Request();
                    $myRequest->setMethod('POST');
                    $myRequest->request->add(['remark' => $params['message'], 'id' => $instruction->id, 'module_type' => 'instruction', 'user_name' => 'User from Whatsapp']);

                    app(\App\Http\Controllers\TaskModuleController::class)->addRemark($myRequest);
                }

                NotificationQueueController::createNewNotification([
                    'message'    => $params['message'],
                    'timestamps' => ['+0 minutes'],
                    'model_type' => Instruction::class,
                    'model_id'   => $instruction->id,
                    'user_id'    => '6',
                    'sent_to'    => $instruction->assigned_from,
                    'role'       => '',
                ]);

                $params['erp_user'] = $user->id;

                if ($params['message'] != '' && (preg_match_all("/TASK ID ([\d]+)/i", $params['message'], $match))) {
                    $params['task_id'] = $match[1][0];
                }

                $params     = $this->modifyParamsWithMessage($params, $data);
                $message    = ChatMessage::create($params);
                $model_type = 'user';
                $model_id   = $user->id;

                if (array_key_exists('task_id', $params)) {
                    $this->sendRealTime($message, 'task_' . $match[1][0], $client);
                } else {
                    $this->sendRealTime($message, 'erp_user_' . $user->id, $client);
                }
            }

            if ($supplier) {
                $params['erp_user']    = null;
                $params['task_id']     = null;
                $params['supplier_id'] = $supplier->id;

                $message    = ChatMessage::create($params);
                $model_type = 'supplier';
                $model_id   = $supplier->id;

                $this->sendRealTime($message, 'supplier_' . $supplier->id, $client);
            }

            if ($dubbizle) {
                $params['erp_user']    = null;
                $params['task_id']     = null;
                $params['supplier_id'] = null;
                $params['dubbizle_id'] = $dubbizle->id;

                $message    = ChatMessage::create($params);
                $model_type = 'dubbizle';
                $model_id   = $dubbizle->id;

                $this->sendRealTime($message, 'dubbizle_' . $dubbizle->id, $client);
            }

            if ($customer) {
                $params['erp_user']    = null;
                $params['supplier_id'] = null;
                $params['task_id']     = null;
                $params['dubbizle_id'] = null;
                $params['customer_id'] = $customer->id;

                $message = ChatMessage::create($params);

                if ($params['message']) {
                    (new KeywordsChecker())->assignCustomerAndKeywordForNewMessage($params['message'], $customer);
                }

                $model_type = 'customers';
                $model_id   = $customer->id;
                $customer->update([
                    'whatsapp_number' => $to,
                ]);

                $this->sendRealTime($message, 'customer_' . $customer->id, $client);

                if (Setting::get('forward_messages') == 1) {
                    if (Setting::get('forward_start_date') != null && Setting::get('forward_end_date') != null) {
                        $time       = Carbon::now();
                        $start_date = Carbon::parse(Setting::get('forward_start_date'));
                        $end_date   = Carbon::parse(Setting::get('forward_end_date'));

                        if ($time->between($start_date, $end_date, true)) {
                            $forward_users_ids = json_decode(Setting::get('forward_users'));
                            $second_message    = '';

                            if ($message->message == null) {
                                $forwarded_message = "FORWARDED from $customer->name";
                                $second_message    = $message->media_url;
                            } else {
                                $forwarded_message = "FORWARDED from $customer->name - " . $message->message;
                            }

                            foreach ($forward_users_ids as $user_id) {
                                $user = User::find($user_id);

                                $this->sendWithNewApi($user->phone, $user->whatsapp_number, $forwarded_message, null, $message->id);

                                if ($second_message != '') {
                                    $this->sendWithNewApi($user->phone, $user->whatsapp_number, null, $second_message, $message->id);
                                }
                            }
                        }
                    } else {
                        $forward_users_ids = json_decode(Setting::get('forward_users'));
                        $second_message    = '';

                        if ($message->message == null) {
                            $forwarded_message = "FORWARDED from $customer->name";
                            $second_message    = $message->media_url;
                        } else {
                            $forwarded_message = "FORWARDED from $customer->name - " . $message->message;
                        }

                        foreach ($forward_users_ids as $user_id) {
                            $user = User::find($user_id);

                            $this->sendWithNewApi($user->phone, $user->whatsapp_number, $forwarded_message, null, $message->id);

                            if ($second_message != '') {
                                $this->sendWithNewApi($user->phone, $user->whatsapp_number, null, $second_message, $message->id);
                            }
                        }
                    }
                }

                // Auto DND
                if (array_key_exists('message', $params) && strtoupper($params['message']) == 'DND') {
                    if ($customer = Customer::find($params['customer_id'])) {
                        $customer->do_not_disturb = 1;
                        $customer->save();
                        \Log::channel('customerDnd')->debug('(Customer ID ' . $customer->id . ' line ' . $customer->name . ' ' . $customer->number . ': Added To DND');

                        $dnd_params = [
                            'number'      => null,
                            'user_id'     => 6,
                            'approved'    => 1,
                            'status'      => 9,
                            'customer_id' => $customer->id,
                            'message'     => AutoReply::where('type', 'auto-reply')->where('keyword', 'customer-dnd')->first()->reply,
                        ];

                        $auto_dnd_message = ChatMessage::create($dnd_params);

                        $this->sendWithNewApi($customer->phone, $customer->whatsapp_number, $dnd_params['message'], null, $auto_dnd_message->id);
                    }
                }

                // Auto Instruction
                if (array_key_exists('message', $params) && (preg_match('/price/i', $params['message']) || preg_match('/you photo/i', $params['message']) || preg_match('/pp/i', $params['message']) || preg_match('/how much/i', $params['message']) || preg_match('/cost/i', $params['message']) || preg_match('/rate/i', $params['message']))) {
                    if ($customer = Customer::find($params['customer_id'])) {
                        $two_hours                = Carbon::now()->subHours(2);
                        $latest_broadcast_message = ChatMessage::where('customer_id', $customer->id)->where('created_at', '>', $two_hours)->where('status', 8)->latest()->first();

                        if ($latest_broadcast_message) {
                            if (! $latest_broadcast_message->isSentBroadcastPrice()) {
                                if ($latest_broadcast_message->hasMedia(config('constants.media_tags'))) {
                                    $selected_products = [];

                                    foreach ($latest_broadcast_message->getMedia(config('constants.media_tags')) as $image) {
                                        $image_key     = $image->getKey();
                                        $mediable_type = 'BroadcastImage';

                                        $broadcast = BroadcastImage::with('Media')
                                            ->whereRaw("broadcast_images.id IN (SELECT mediables.mediable_id FROM mediables WHERE mediables.media_id = $image_key AND mediables.mediable_type LIKE '%$mediable_type%')")
                                            ->first();

                                        if ($broadcast) {
                                            $brod_products = json_decode($broadcast->products, true);

                                            if (count($brod_products) > 0) {
                                                foreach ($brod_products as $brod_pro) {
                                                    $selected_products[] = $brod_pro;
                                                }
                                            }
                                        }
                                    }

                                    if (isset($broadcast)) {
                                        foreach ($selected_products as $pid) {
                                            $product    = \App\Product::where('id', $pid)->first();
                                            $quick_lead = \App\ErpLeads::create([
                                                'customer_id'      => $customer->id,
                                                'lead_status_id'   => 3,
                                                'store_website_id' => 15,
                                                'product_id'       => $pid,
                                                'type'             => 'whatsapp-incoming-message-new',
                                                'brand_id'         => $product ? $product->brand : null,
                                                'category_id'      => $product ? $product->category : null,
                                                'brand_segment'    => $product && $product->brands ? $product->brands->brand_segment : null,
                                                'color'            => $customer->color,
                                                'size'             => $customer->size,
                                                'created_at'       => Carbon::now(),
                                            ]);
                                        }

                                        $requestData = new Request();
                                        $requestData->setMethod('POST');
                                        $requestData->request->add(['customer_id' => $customer->id, 'lead_id' => $quick_lead->id, 'selected_product' => $selected_products]);

                                        app(\App\Http\Controllers\LeadsController::class)->sendPrices($requestData);

                                        CommunicationHistory::create([
                                            'model_id'   => $latest_broadcast_message->id,
                                            'model_type' => ChatMessage::class,
                                            'type'       => 'broadcast-prices',
                                            'method'     => 'whatsapp',
                                        ]);
                                    } else {
                                        //
                                    }
                                }
                            }
                        }

                        Instruction::create([
                            'customer_id'   => $customer->id,
                            'instruction'   => 'Please send the prices',
                            'category_id'   => 1,
                            'assigned_to'   => 7,
                            'assigned_from' => 6,
                        ]);
                    }
                }

                // Auto Replies
                $auto_replies = AutoReply::all();

                foreach ($auto_replies as $auto_reply) {
                    if (array_key_exists('message', $params) && $params['message'] != '') {
                        $keyword = $auto_reply->keyword;

                        if (preg_match("/{$keyword}/i", $params['message'])) {
                            $temp_params            = $params;
                            $temp_params['message'] = $auto_reply->reply;
                            $temp_params['status']  = 1;

                            ChatMessage::create($temp_params);

                            $this->sendRealTime($message, 'customer_' . $customer->id, $client);
                        }
                    }
                }
            }

            if (! isset($user) && ! isset($purchase) && ! isset($customer)) {
                $modal_type              = 'leads';
                $user                    = User::get()[0];
                $validate_phone['phone'] = $from;

                $validator = Validator::make($validate_phone, [
                    'phone' => 'unique:customers,phone',
                ]);

                if ($validator->fails()) {
                } else {
                    $customer         = new Customer;
                    $customer->name   = $from;
                    $customer->phone  = $from;
                    $customer->rating = 2;
                    $customer->save();

                    $lead = \App\ErpLeads::create([
                        'customer_id'      => $customer->id,
                        'store_website_id' => 15,
                        'lead_status_id'   => 1,
                        'type'             => 'whatsapp-incoming-message-new',
                    ]);

                    $params['lead_id']     = $lead->id;
                    $params['customer_id'] = $customer->id;

                    $message    = ChatMessage::create($params);
                    $model_type = 'leads';
                    $model_id   = $lead->id;

                    $this->sendRealTime($message, 'customer_' . $customer->id, $client);
                }
            }

            // Auto Respond
            $today_date          = Carbon::now()->format('Y-m-d');
            $time                = Carbon::now();
            $start_time          = Setting::get('start_time');
            $start_time_exploded = explode(':', $start_time);
            $end_time            = Setting::get('end_time');
            $end_time_exploded   = explode(':', $end_time);
            $morning             = Carbon::create($time->year, $time->month, $time->day, $start_time_exploded[0], $start_time_exploded[1], 0);
            $not_morning         = Carbon::create($time->year, $time->month, $time->day, 0, 0, 0);
            $evening             = Carbon::create($time->year, $time->month, $time->day, $end_time_exploded[0], $end_time_exploded[1], 0);
            $not_evening         = Carbon::create($time->year, $time->month, $time->day, 23, 59, 0);
            $saturday            = Carbon::now()->endOfWeek()->subDay()->format('Y-m-d');
            $sunday              = Carbon::now()->endOfWeek()->format('Y-m-d');

            $chat_messages_query = ChatMessage::where('customer_id', $params['customer_id'])->whereBetween('created_at', [$morning, $evening])->whereNotNull('number');
            $chat_messages_count = $chat_messages_query->count();

            $chat_messages_evening_query = ChatMessage::where('customer_id', $params['customer_id'])->where(function ($query) use ($not_morning, $morning, $evening, $not_evening) {
                $query->whereBetween('created_at', [$not_morning, $morning])->orWhereBetween('created_at', [$evening, $not_evening]);
            })->whereNotNull('number');
            $chat_messages_evening_count = $chat_messages_evening_query->count();

            if ($chat_messages_count == 1) {
                $chat_messages_query_first = $chat_messages_query->first();
            }

            if ($chat_messages_evening_count == 1) {
                $chat_messages_evening_query_first = $chat_messages_evening_query->first();
            }

            if ($chat_messages_count == 1 && (isset($chat_messages_query_first) && $chat_messages_query_first->id == $message->id) && ($saturday != $today_date && $sunday != $today_date)) {
                $customer = Customer::find($params['customer_id']);
                $params   = [
                    'number'      => null,
                    'user_id'     => 6,
                    'approved'    => 1,
                    'status'      => 9,
                    'customer_id' => $params['customer_id'],
                ];

                if ($time->between($morning, $evening, true)) {
                    $params['message'] = AutoReply::where('type', 'auto-reply')->where('keyword', 'work-hours-greeting')->first()->reply;

                    sleep(1);
                    $additional_message = ChatMessage::create($params);
                    $this->sendWithNewApi($message->customer->phone, $customer->whatsapp_number, $additional_message->message, null, $additional_message->id);
                }
            } else {
                if (($chat_messages_evening_count == 1 && (isset($chat_messages_evening_query_first) && $chat_messages_evening_query_first->id == $message->id)) || ($chat_messages_count == 1 && ($saturday == $today_date || $sunday == $today_date))) {
                    $customer = Customer::find($params['customer_id']);

                    $auto_reply = AutoReply::where('type', 'auto-reply')->where('keyword', 'office-closed-message')->first();

                    $auto_message = preg_replace('/{start_time}/i', $start_time, $auto_reply->reply);
                    $auto_message = preg_replace('/{end_time}/i', $end_time, $auto_message);

                    $params = [
                        'number'      => null,
                        'user_id'     => 6,
                        'approved'    => 1,
                        'status'      => 9,
                        'customer_id' => $params['customer_id'],
                        'message'     => $auto_message,
                    ];

                    sleep(1);
                    $additional_message = ChatMessage::create($params);
                    $this->sendWithNewApi($message->customer->phone, $customer->whatsapp_number, $additional_message->message, null, $additional_message->id);
                }
            }

            if ($data['data']['type'] == 'image') {
                $media->move('chatmessage/' . floor($message->id / config('constants.image_per_folder')));
                $message->attachMedia($media, config('constants.media_tags'));
            }
        } else {
            $custom_data = json_decode($data['custom_data'], true);

            $chat_message = ChatMessage::find($custom_data['chat_message_id']);

            if ($chat_message) {
                $chat_message->sent = 1;
                $chat_message->save();
            }
        }

        return response('success', 200);
    }

    public function webhook(Request $request, GuzzleClient $client)
    {
        // Get json object
        $data                = $request->json()->all();
        $needToSendLeadPrice = false;
        $isReplied           = false;

        $data = $this->mapForWassenger($data);

        // Log incoming webhook
        \Log::channel('chatapi')->debug('Webhook: ' . json_encode($data));
        // Check for ack
        if (array_key_exists('ack', $data)) {
            //
        }

        // Check for messages
        if (! array_key_exists('messages', $data)) {
            return Response::json('ACK', 200);
        }

        // Loop over messages
        foreach ($data['messages'] as $chatapiMessage) {
            $quoted_message_id = null;
            // Convert false and true text to false and true
            if ($chatapiMessage['fromMe'] === 'false') {
                $chatapiMessage['fromMe'] = false;
            }
            if ($chatapiMessage['fromMe'] === 'true') {
                $chatapiMessage['fromMe'] = true;
            }

            $parentMessage = null;

            try {
                // check if quotedMsgId is available, if available then we will search for parent message
                if (isset($chatapiMessage['quotedMsgId'])) {
                    $parentMessage = ChatMessage::where('unique_id', $chatapiMessage['quotedMsgId'])->first();
                    if ($parentMessage) {
                        $quoted_message_id = $parentMessage->id;
                    }
                }
            } catch (Exception $e) {
                //continue
            }

            WatsonChatJourney::updateOrCreate(['chat_message_id' => $quoted_message_id], ['chat_entered' => 1]);
            WatsonChatJourney::updateOrCreate(['chat_message_id' => $quoted_message_id], ['message_received' => 1]);

            // Set default parameters
            $from        = str_replace('@c.us', '', $chatapiMessage['author']);
            $instanceId  = $data['instanceId'];
            $text        = $chatapiMessage['body'];
            $contentType = $chatapiMessage['type'];
            $numberPath  = substr($from, 0, 3) . '/' . substr($from, 3, 1);

            // Check if message already exists
            $chatMessage = ChatMessage::where('unique_id', $chatapiMessage['id'])->first();
            if ($chatMessage != null) {
                //continue;
            }

            // Find connection with this number in our database
            if ($chatapiMessage['fromMe'] == true) {
                $searchNumber = str_replace('@c.us', '', $chatapiMessage['chatId']);
            } else {
                $searchNumber = $from;
            }

            // Find objects by number
            $supplier = $this->findSupplierByNumber($searchNumber);
            $vendor   = $this->findVendorByNumber($searchNumber);
            $user     = $this->findUserByNumber($searchNumber);
            $dubbizle = $this->findDubbizleByNumber($searchNumber);
            $contact  = $this->findContactByNumber($searchNumber);
            $customer = $this->findCustomerByNumber($searchNumber);

            // check the message related to the supplier
            $sendToSupplier = false;
            if (! empty($text)) {
                $matchSupplier = explode('-', $text);
                if (
                    isset($matchSupplier[0]) && $matchSupplier[0] == 'S'
                    && isset($matchSupplier[1]) && is_numeric($matchSupplier[1])
                ) {
                    $sendToSupplier = true;
                    $supplier       = Supplier::find($matchSupplier[1]);
                }
            }
            if (! empty($customer)) {
                //
            }

            if (! empty($supplier) && $contentType !== 'image') {
                $supplierDetails = is_object($supplier) ? Supplier::find($supplier->id) : $supplier;
                $language        = $supplierDetails->language;
                if ($language != null) {
                    $fromLang = $language;
                    $toLang   = 'en';

                    if ($sendToSupplier) {
                        $fromLang = 'en';
                        $toLang   = $language;
                    }

                    $result = TranslationHelper::translate($fromLang, $toLang, $text);
                    if ($sendToSupplier) {
                        $text = $result;
                    } else {
                        $text = $result . ' -- ' . $text;
                    }
                }
            }
            $originalMessage = $text;
            // Set params
            $params = [
                'number'            => $from,
                'unique_id'         => $chatapiMessage['id'],
                'message'           => '',
                'media_url'         => null,
                'approved'          => $chatapiMessage['fromMe'] ? 1 : 0,
                'status'            => $chatapiMessage['fromMe'] ? 2 : 0,
                'contact_id'        => null,
                'erp_user'          => null,
                'supplier_id'       => null,
                'task_id'           => null,
                'dubizzle_id'       => null,
                'vendor_id'         => null,
                'customer_id'       => null,
                'quoted_message_id' => $quoted_message_id,
            ];

            try {
                // check if time exist then convert and assign it
                if (isset($chatapiMessage['time'])) {
                    $params['created_at'] = date('Y-m-d H:i:s', $chatapiMessage['time']);
                }
            } catch (Exception $e) {
                //If the date format is causing issue from whats app script messages
                $params['created_at'] = $chatapiMessage['time'];
            }

            // Check if the message is a URL
            if (filter_var($text, FILTER_VALIDATE_URL)) {
                if (substr($text, 0, 23) == 'https://firebasestorage') {
                    // Try to download the image
                    try {
                        // Get file extension
                        $extension = preg_replace("#\?.*#", '', pathinfo($text, PATHINFO_EXTENSION)) . "\n";

                        // Set tmp file
                        $filePath = public_path() . '/uploads/tmp_' . rand(0, 100000) . '.' . trim($extension);

                        // Copy URL to file path
                        copy($text, $filePath);

                        // Upload media
                        $media = MediaUploader::fromSource($filePath)->useFilename(uniqid(true, true))->toDisk('s3')->toDirectory('chat-messages/' . $numberPath)->upload();

                        // Delete the file
                        unlink($filePath);

                        // Update media URL
                        $params['media_url'] = getMediaUrl($media);
                        $params['message']   = isset($chatapiMessage['caption']) ? $chatapiMessage['caption'] : '';
                    } catch (Exception $exception) {
                        \Log::error($exception);
                        //
                    }
                } else {
                    try {
                        $extension = preg_replace("#\?.*#", '', pathinfo($text, PATHINFO_EXTENSION)) . "\n";
                        // Set tmp file
                        $filePath = public_path() . '/uploads/tmp_' . rand(0, 100000) . '.' . trim($extension);
                        // Copy URL to file path
                        copy($text, $filePath);
                        // Upload media
                        $media = MediaUploader::fromSource($filePath)->useFilename(uniqid(true, true))->toDisk('s3')->toDirectory('chat-messages/' . $numberPath)->upload();
                        // Delete the file
                        unlink($filePath);
                        // Update media URL
                        $params['media_url'] = getMediaUrl($media);
                        $params['message']   = isset($chatapiMessage['caption']) ? $chatapiMessage['caption'] : '';
                    } catch (Exception $exception) {
                        \Log::error($exception);
                        $params['message'] = $text;
                    }
                }
            } else {
                $params['message'] = $text;
            }

            // From me? Only store, nothing else
            if ($chatapiMessage['fromMe'] == true) {
                // Set objects
                $params['erp_user']    = isset($user->id) ? $user->id : null;
                $params['supplier_id'] = isset($supplier->id) ? $supplier->id : null;
                $params['task_id']     = null;
                $params['dubbizle_id'] = isset($dubbizle->id) ? $dubbizle->id : null;
                $params['vendor_id']   = isset($vendor->id) && ! isset($customer->id) ? $vendor->id : null;
                $params['customer_id'] = isset($customer->id) ? $customer->id : null;

                // Remove number
                $params['number'] = null;

                // Set unique ID
                $params['unique_id'] = $chatapiMessage['id'];

                // Check for duplicate vendor message
                if (isset($vendor->id)) {
                    // Find duplicate message
                    $duplicateChatMessage = ChatMessage::where('vendor_id', $vendor->id)->where('message', $params['message'])->first();

                    // Set vendor ID to null if message is found
                    if ($duplicateChatMessage != null) {
                        $params['vendor_id'] = null;
                    }
                }
                // Create message
                $message = ChatMessage::create($params);

                // Continue to the next record
                continue;
            }

            $userId = $supplierId = $contactId = $vendorId = $dubbizleId = $customerId = null;

            if ($user != null) {
                $userId = $user->id;
            }

            if ($contact != null) {
                $contactId = $contact->id;
            }

            if ($supplier != null) {
                $supplierId = $supplier->id;
            }

            if ($vendor != null) {
                $vendorId = $vendor->id;
            }

            if ($dubbizle != null) {
                $dubbizleId = $dubbizle->id;
            }

            if ($customer != null) {
                $customerId = $customer->id;
            }

            $params['user_id']     = $userId;
            $params['contact_id']  = $contactId;
            $params['supplier_id'] = $supplierId;
            $params['vendor_id']   = $vendorId;
            $params['dubbizle_id'] = $dubbizleId;
            $params['customer_id'] = $customerId;

            if ($vendor) {
                $params['user_type'] = 1;
            }

            if (! empty($user) || ! empty($contact) || ! empty($supplier) || ! empty($vendor) || ! empty($dubbizle) || ! empty($customer)) {
                // check that if message comes from customer,supplier,vendor
                if (! empty($customer)) {
                    $blockCustomer = \App\BlockWebMessageList::where('object_id', $customer->id)->where('object_type', Customer::class)->first();
                    if ($blockCustomer) {
                        $blockCustomer->delete();
                    }
                }
                // check for vendor and remvove from the list
                if (! empty($vendor)) {
                    $blockVendor = \App\BlockWebMessageList::where('object_id', $vendor->id)->where('object_type', Vendor::class)->first();
                    if ($blockVendor) {
                        $blockVendor->delete();
                    }
                }
                // check for supplier and remove from the list
                if (! empty($supplier)) {
                    $blockSupplier = \App\BlockWebMessageList::where('object_id', $supplier->id)->where('object_type', Supplier::class)->first();
                    if ($blockSupplier) {
                        $blockSupplier->delete();
                    }
                }
                $message = ChatMessage::create($params);
            } else {
                // create a customer here
                $customer = Customer::create([
                    'name'  => $from,
                    'phone' => $from,
                ]);
                $params['customer_id'] = $customer->id;
                $message               = ChatMessage::create($params);
            }

            if ($customer != null) {
                ChatMessagesQuickData::updateOrCreate([
                    'model'    => \App\Customer::class,
                    'model_id' => $params['customer_id'],
                ], [
                    'last_unread_message'    => @$params['message'],
                    'last_unread_message_at' => Carbon::now(),
                    'last_unread_message_id' => $message->id,
                ]);
            }

            // Is there a user linked to this number?
            if ($user) {
                // Add user ID to params

                // Check for task
                if ($params['message'] != '' && (preg_match_all("/#([\d]+)/i", $params['message'], $match))) {
                    // If task is found
                    if ($task = Task::find($match[1][0])) {
                        // Set the task_id parameter
                        $params['task_id'] = $match[1][0];

                        // Check for task users and set ERP user
                        if (count($task->users) > 0) {
                            if ($task->assign_from == $user->id) {
                                $params['erp_user'] = $task->assign_to;
                            } else {
                                $params['erp_user'] = $task->assign_from;
                            }
                        }

                        // Check for task contacts and set contact_id
                        if (count($task->contacts) > 0) {
                            if ($task->assign_from == $user->id) {
                                $params['contact_id'] = $task->assign_to;
                            } else {
                                $params['contact_id'] = $task->assign_from;
                            }
                        }
                    }
                }

                // Set media_url parameter
                if (isset($media)) {
                    $params['media_url'] = getMediaUrl($media);
                }

                // Attach media to message
                if (isset($media)) {
                    $message->attachMedia($media, config('constants.media_tags'));
                }

                // Send realtime message (???) if there is a task ID
                if (array_key_exists('task_id', $params) && ! empty($params['task_id'])) {
                    $this->sendRealTime($message, 'task_' . $task->id, $client);
                } else {
                    $this->sendRealTime($message, 'user_' . $user->id, $client);
                }
            }

            // Is there a contact linked to this number?
            if ($contact) {
                // Check for task ID
                if ($params['message'] != '' && (preg_match_all("/#([\d]+)/i", $params['message'], $match))) {
                    $params['task_id'] = $match[1][0];
                }

                if (array_key_exists('task_id', $params) && ! empty($params['task_id'])) {
                    $this->sendRealTime($message, 'task_' . $match[1][0], $client);
                } else {
                    $this->sendRealTime($message, 'user_' . $contact->id, $client);
                }
            }

            if ($supplier) {
                if ($params['media_url'] != null) {
                    self::saveProductFromSupplierIncomingImages($supplier->id, $params['media_url']);
                }
            }

            // Check for vendor
            if ($vendor) {
                // Set vendor category
                $category = $vendor->category;

                // Send message if all required data is set
                if ($category && $category->user_id && ($params['message'] || $params['media_url'])) {
                    $user = User::find($category->user_id);
                    if (isset($sendResult) && $sendResult) {
                        $message->unique_id = $sendResult['id'] ?? '';
                        $message->save();
                    }
                }

                $vendor->store_website_id = 1;
            }

            // check if the supplier message has been set then we need to send that message to erp user
            if ($supplier) {
                $phone    = $supplier->phone;
                $whatsapp = $supplier->whatsapp_number;
                if (! $sendToSupplier) {
                    $phone = ChatMessage::getSupplierForwardTo();
                }

                $textMessage = ($sendToSupplier) ? $params['message'] : 'S-' . $supplier->id . '-(' . $supplier->supplier . ')=> ' . $params['message'];
                if (isset($sendResult) && $sendResult) {
                    $message->unique_id = $sendResult['id'] ?? '';
                    $message->save();
                }
            }

            if ($dubbizle) {
                $model_type = 'dubbizle';
                $model_id   = $dubbizle->id;

                $this->sendRealTime($message, 'dubbizle_' . $dubbizle->id, $client);

                $params['dubbizle_id'] = null;
            }

            if ($supplier && $message) {
                \App\ChatbotReply::create([
                    'question'        => $params['message'],
                    'replied_chat_id' => $message->id,
                    'reply_from'      => 'database',
                ]);
            } elseif ($vendor && $message) {
                \App\ChatbotReply::create([
                    'question'        => $params['message'],
                    'replied_chat_id' => $message->id,
                    'reply_from'      => 'database',
                ]);
            }

            // }

            // Get all numbers from config
            $config = \Config::get('apiwha.instances');

            // Set isCustomerNumber to false by default
            $isCustomerNumber = false;
            // Loop over instance IDs to check if the whatsapp number is used for incoming messages from customers
            foreach ($config as $whatsAppNumber => $arrNumber) {
                if ($arrNumber['instance_id'] == $instanceId) {
                    $to               = $whatsAppNumber;
                    $isCustomerNumber = $arrNumber['customer_number'];
                    $instanceNumber   = $whatsAppNumber;
                }
            }

            /// Also get all numbers from database
            if (! $isCustomerNumber && $customer != null) {
                $whatsappConfigs = WhatsappConfig::where('is_customer_support', 0)->get();

                // Loop over whatsapp configs
                if ($whatsappConfigs !== null) {
                    foreach ($whatsappConfigs as $whatsappConfig) {
                        if ($whatsappConfig->username == $instanceId) {
                            $isCustomerNumber = $whatsappConfig->number;
                            $instanceNumber   = $whatsappConfig->number;
                        }
                    }
                }
            }

            // No to?
            if (empty($to)) {
                $to = $config[0]['number'];
            }

            WatsonChatJourney::updateOrCreate(['chat_message_id' => $quoted_message_id], ['reply_found_in_database' => 1]);
            WatsonChatJourney::updateOrCreate(['chat_message_id' => $quoted_message_id], ['reply' => $params['message']]);

            if ($customer) {
                (new \App\Services\Products\SendImagesOfProduct)->check($message);
                \App\Helpers\MessageHelper::whatsAppSend($customer, $params['message'], true, $message, false, $parentMessage);
                WatsonChatJourney::updateOrCreate(['chat_message_id' => $quoted_message_id], ['response_sent_to_cusomer' => 1]);
            }

            // Is this message from a customer?
            $isCustomerNumber = true;
            if ($customer && $isCustomerNumber) {
                if ($params['message']) {
                    (new KeywordsChecker())->assignCustomerAndKeywordForNewMessage($params['message'], $customer);
                }

                if (isset($media)) {
                    if ($contentType === 'image') {
                        $message->attachMedia($media, $contentType);
                        $message->save();
                    }
                }

                $model_type = 'customers';
                $model_id   = $customer->id;
                $customer->update([
                    'whatsapp_number' => $to,
                ]);

                $this->sendRealTime($message, 'customer_' . $customer->id, $client);

                if (Setting::get('forward_messages') == 1) {
                    if (Setting::get('forward_start_date') != null && Setting::get('forward_end_date') != null) {
                        $time       = Carbon::now();
                        $start_date = Carbon::parse(Setting::get('forward_start_date'));
                        $end_date   = Carbon::parse(Setting::get('forward_end_date'));

                        if ($time->between($start_date, $end_date, true)) {
                            $forward_users_ids = json_decode(Setting::get('forward_users'));
                            $second_message    = '';

                            if ($message->message == null) {
                                $forwarded_message = "FORWARDED from $customer->name";
                                $second_message    = $message->media_url;
                            } else {
                                $forwarded_message = "FORWARDED from $customer->name - " . $message->message;
                            }
                        }
                    } else {
                        $forward_users_ids = json_decode(Setting::get('forward_users'));
                        $second_message    = '';

                        if ($message->message == null) {
                            $forwarded_message = "FORWARDED from $customer->name";
                            $second_message    = $message->media_url;
                        } else {
                            $forwarded_message = "FORWARDED from $customer->name - " . $message->message;
                        }
                    }
                }

                // Auto DND
                if (array_key_exists('message', $params) && strtoupper($params['message']) == 'DND') {
                    if ($customer = Customer::find($params['customer_id'])) {
                        $customer->do_not_disturb = 1;
                        $customer->save();
                        \Log::channel('customerDnd')->debug('(Customer ID ' . $customer->id . ' line ' . $customer->name . ' ' . $customer->number . ': Added To DND');

                        $dnd_params = [
                            'number'            => null,
                            'user_id'           => 6,
                            'approved'          => 1,
                            'status'            => 9,
                            'customer_id'       => $customer->id,
                            'quoted_message_id' => $quoted_message_id,
                            'message'           => AutoReply::where('type', 'auto-reply')->where('keyword', 'customer-dnd')->first()->reply,
                        ];
                        $auto_dnd_message = ChatMessage::create($dnd_params);
                    }
                }
                $data = [
                    'model'           => $model_type,
                    'model_id'        => $model_id,
                    'chat_message_id' => $params['unique_id'],
                    'message'         => $message,
                    'status'          => 'started',
                ];
                $chat_message_log_id = \App\ChatbotMessageLog::generateLog($data);
                // Auto Instruction
                if ($params['customer_id'] != '1000' && $params['customer_id'] != '976') {
                    if ($customer = Customer::find($params['customer_id'])) {
                        \App\ChatbotMessageLogResponse::StoreLogResponse([
                            'chatbot_message_log_id' => $chat_message_log_id,
                            'request'                => '',
                            'response'               => 'Price for customer send function started.',
                            'status'                 => 'success',
                        ]);
                        $params['chat_message_log_id'] = $chat_message_log_id;
                        \App\Helpers\MessageHelper::sendwatson($customer, $params['message'], true, $message, $params, false, 'customer');

                        WatsonChatJourney::updateOrCreate(['chat_message_id' => $quoted_message_id], ['reply_searched_in_watson' => 1]);
                        WatsonChatJourney::updateOrCreate(['chat_message_id' => $quoted_message_id], ['reply' => $params['message']]);

                        \App\ChatbotMessageLogResponse::StoreLogResponse([
                            'chatbot_message_log_id' => $chat_message_log_id,
                            'request'                => '',
                            'response'               => 'Price for customer send function ended.',
                            'status'                 => 'success',
                        ]);
                    } else {
                        \App\ChatbotMessageLogResponse::StoreLogResponse([
                            'chatbot_message_log_id' => $chat_message_log_id,
                            'request'                => '',
                            'response'               => 'Send watson function faield customer  (' . $params['customer_id'] . ')  not found.',
                            'status'                 => 'failed',
                        ]);
                    }
                }

                //Auto reply
                if (isset($customer->id) && $customer->id > 0) {
                    //
                }
            }
            // Moved to the bottom of this loop, since it overwrites the message
            $fromMe            = $chatapiMessage['fromMe'] ?? true;
            $params['message'] = $originalMessage;
            if (! $fromMe && $params['message'] && strpos($originalMessage, 'V-') === 0) {
                $msg        = $params['message'];
                $msg        = explode(' ', $msg);
                $vendorData = $msg[0];
                $vendorId   = trim(str_replace('V-', '', $vendorData));
                $message    = str_replace('V-' . $vendorId, '', $params['message']);

                $vendor = Vendor::find($vendorId);
                if (! $vendor) {
                    return response('success');
                }

                $params['vendor_id']   = $vendorId;
                $params['customer_id'] = null;
                $params['approved']    = 1;
                $params['message']     = $message;
                $params['status']      = 2;

                ChatMessage::create($params);
            }

            if (! $fromMe && strpos($originalMessage, '#ISSUE-') === 0) {
                $m                    = new ChatMessage();
                $message              = str_replace('#ISSUE-', '', $originalMessage);
                $m->issue_id          = explode(' ', $message)[0];
                $m->user_id           = isset($user->id) ? $user->id : null;
                $m->message           = $originalMessage;
                $m->quoted_message_id = $quoted_message_id;
                $m->save();
            }

            if (! $fromMe && strpos($originalMessage, '#DEVTASK-') === 0) {
                $m                    = new ChatMessage();
                $message              = str_replace('#DEVTASK-', '', $originalMessage);
                $m->developer_task_id = explode(' ', $message)[0];
                $m->user_id           = isset($user->id) ? $user->id : null;
                $m->message           = $originalMessage;
                $m->quoted_message_id = $quoted_message_id;
                $m->save();
            }
        }

        return Response::json('success', 200);
    }

    public function outgoingProcessed(Request $request)
    {
        $data = $request->json()->all();

        foreach ($data as $event) {
            $chat_message = ChatMessage::find($event->data->reference);

            if ($chat_message) {
                $chat_message->sent = 1;
                $chat_message->save();
            }
        }

        return response('success', 200);
    }

    public function getAllMessages(Request $request)
    {
        $params = [];
        $result = [];
        if ($request->customerId) {
            $column = 'customer_id';
            $value  = $request->customerId;
        } else {
            if ($request->supplierId) {
                $column = 'supplier_id';
                $value  = $request->supplierId;
            } else {
                if ($request->taskId) {
                    $column = 'task_id';
                    $value  = $request->taskId;
                } else {
                    if ($request->erpUser) {
                        $column = 'erp_user';
                        $value  = $request->erpUser;
                    } else {
                        if ($request->dubbizleId) {
                            $column = 'dubbizle_id';
                            $value  = $request->dubbizleId;
                        } else {
                            $column = 'customer_id';
                            $value  = $request->customerId;
                        }
                    }
                }
            }
        }

        $messages = DB::select('
                  SELECT chat_messages.id, chat_messages.customer_id, chat_messages.number, chat_messages.user_id, chat_messages.erp_user, chat_messages.assigned_to, chat_messages.approved, chat_messages.status, chat_messages.sent, chat_messages.error_status, chat_messages.resent, chat_messages.created_at, chat_messages.media_url, chat_messages.message,
                  media.filename,
                  mediable_id

                  FROM chat_messages

                  LEFT JOIN (
                    SELECT * FROM media

                    RIGHT JOIN
                    (SELECT * FROM mediables WHERE mediable_type LIKE "%ChatMessage%") as mediables
                    ON mediables.media_id = media.id
                  ) AS media

                  ON mediable_id = chat_messages.id

                  WHERE ' . $column . ' = ' . $value . ' AND status != 7
                  ORDER BY chat_messages.created_at DESC
      ');

        if (Setting::get('show_automated_messages') == 0) {
            $messages = $messages->where('status', '!=', 9);
        }

        if ($request->erpUser) {
            $messages = $messages->whereNull('task_id');
        }

        // IS IT NECESSARY ?
        if ($request->get('elapse')) {
            $elapse = (int) $request->get('elapse');
            $date   = new \DateTime;
            $date->modify(sprintf('-%s seconds', $elapse));
        }

        foreach ($messages->latest()->get() as $message) {
            $messageParams = [
                'id'           => $message->id,
                'number'       => $message->number,
                'assigned_to'  => $message->assigned_to,
                'created_at'   => Carbon::parse($message->created_at)->format('Y-m-d H:i:s'),
                'approved'     => $message->approved,
                'status'       => $message->status,
                'user_id'      => $message->user_id,
                'erp_user'     => $message->erp_user,
                'sent'         => $message->sent,
                'resent'       => $message->resent,
                'error_status' => $message->error_status,
            ];

            if ($message->media_url) {
                $messageParams['media_url']    = $message->media_url;
                $headers                       = get_headers($message->media_url, 1);
                $messageParams['content_type'] = $headers['Content-Type'][1];
            }

            if ($message->message) {
                $messageParams['message'] = $message->message;
            }

            if ($message->hasMedia(config('constants.media_tags'))) {
                $images_array = [];

                foreach ($message->getMedia(config('constants.media_tags')) as $key => $image) {
                    $temp_image = [
                        'key'           => $image->getKey(),
                        'image'         => getMediaUrl($image),
                        'product_id'    => '',
                        'special_price' => '',
                        'size'          => '',
                    ];

                    $image_key     = $image->getKey();
                    $mediable_type = 'Product';

                    $product_image = Product::with('Media')
                        ->whereRaw("products.id IN (SELECT mediables.mediable_id FROM mediables WHERE mediables.media_id = $image_key AND mediables.mediable_type LIKE '%$mediable_type%')")
                        ->select(['id', 'price_inr_special', 'supplier', 'size', 'lmeasurement', 'hmeasurement', 'dmeasurement'])->first();

                    if ($product_image) {
                        $temp_image['product_id']    = $product_image->id;
                        $temp_image['special_price'] = $product_image->price_inr_special;

                        $string = $product_image->supplier;
                        $expr   = '/(?<=\s|^)[a-z]/i';
                        preg_match_all($expr, $string, $matches);
                        $supplier_initials               = implode('', $matches[0]);
                        $temp_image['supplier_initials'] = strtoupper($supplier_initials);

                        if ($product_image->size != null) {
                            $temp_image['size'] = $product_image->size;
                        } else {
                            $temp_image['size'] = (string) $product_image->lmeasurement . ', ' . (string) $product_image->hmeasurement . ', ' . (string) $product_image->dmeasurement;
                        }
                    }

                    array_push($images_array, $temp_image);
                }

                $messageParams['images'] = $images_array;
            }

            $result[] = array_merge($params, $messageParams);
        }

        $result      = array_values(collect($result)->sortBy('created_at')->reverse()->toArray());
        $currentPage = LengthAwarePaginator::resolveCurrentPage();
        $perPage     = 10;

        if ($request->page) {
            $currentItems = array_slice($result, $perPage * ($currentPage - 1), $perPage);
        } else {
            $currentItems = array_reverse(array_slice($result, $perPage * ($currentPage - 1), $perPage));
            $result       = array_reverse($result);
        }

        $result = new LengthAwarePaginator($currentItems, count($result), $perPage, $currentPage, [
            'path' => LengthAwarePaginator::resolveCurrentPath(),
        ]);

        return response()->json($result);
    }

    public function logchatmessage($log_case_id, $task_id, $message, $log_msg)
    {
        $log              = new LogChatMessage();
        $log->log_case_id = $log_case_id;
        $log->task_id     = $task_id;
        $log->message     = $message;
        $log->log_msg     = $log_msg;
        $log->save();
    }

    /**
     * Send message
     *
     *
     * @param mixed $context
     * @param mixed $ajaxNeeded
     *
     * @return \Illuminate\Http\Response
     *
     * @throws \Plank\Mediable\Exceptions\MediaUrlException
     */
    public function sendMessage(Request $request, $context, $ajaxNeeded = false)
    {
        $this->validate($request, [
            'customer_id'             => 'sometimes|nullable|numeric',
            'supplier_id'             => 'sometimes|nullable|numeric',
            'erp_user'                => 'sometimes|nullable|numeric',
            'status'                  => 'required|numeric',
            'assigned_to'             => 'sometimes|nullable',
            'lawyer_id'               => 'sometimes|nullable|numeric',
            'case_id'                 => 'sometimes|nullable|numeric',
            'blogger_id'              => 'sometimes|nullable|numeric',
            'document_id'             => 'sometimes|nullable|numeric',
            'quicksell_id'            => 'sometimes|nullable|numeric',
            'old_id'                  => 'sometimes|nullable|numeric',
            'site_development_id'     => 'sometimes|nullable|numeric',
            'social_strategy_id'      => 'sometimes|nullable|numeric',
            'store_social_content_id' => 'sometimes|nullable|numeric',
            'payment_receipt_id'      => 'sometimes|nullable|numeric',
        ]);

        $data    = $request->except('_token');
        $chat_id = 0;
        if (isset($data['chat_id'])) {
            $chat_id = $data['chat_id'];
        }

        // set if there is no queue defaut for all pages
        if (! isset($data['is_queue'])) {
            $data['is_queue'] = 0;
        }
        $data['user_id'] = ((int) $request->get('user_id', 0) > 0) ? (int) $request->get('user_id', 0) : Auth::id();
        $data['number']  = $request->get('number');

        $loggedUser = $request->user();

        if ($request->add_autocomplete == 'true') {
            $exist = AutoCompleteMessage::where('message', $request->message)->exists();
            if (! $exist) {
                AutoCompleteMessage::create([
                    'message' => $request->message,
                ]);
            }
        }
        if ($context == 'email') {
            $lastMessage        = ChatMessage::find($request->chat_id);
            $data['from_email'] = $lastMessage->from_email;
            $data['to_email']   = $lastMessage->to_email;

            $data['is_email']     = 1;
            $data['email_id']     = $request->email_id;
            $data['message_type'] = 'email';
            unset($data['user_id']);
            $module_id = $request->email_id;
        } elseif ($context == 'customer') {
            $data['customer_id'] = $request->customer_id;
            $module_id           = $request->customer_id;
            //update if the customer message is going to send then update all old message to read
            \App\ChatMessage::updatedUnreadMessage($request->customer_id, $data['status']);
            $this->logchatmessage('#1', $request->task_id, $request->message, 'if the customer message is going to send');
            // update message for chatbot request->customer_id
            if (! empty($data['status']) && ! in_array($data['status'], \App\ChatMessage::AUTO_REPLY_CHAT)) {
                \DB::table('chat_messages as c')->join('chatbot_replies as cr', 'cr.replied_chat_id', '=', 'c.id')->where('c.customer_id', $request->customer_id)->where('cr.is_read', 0)->update(['cr.is_read' => 1]);
                \DB::table('chat_messages as c')->join('chatbot_replies as cr', 'cr.chat_id', '=', 'c.id')->where('c.customer_id', $request->customer_id)->where('cr.is_read', 0)->update(['cr.is_read' => 1]);
            }
        } elseif ($context == 'purchase') {
            $data['purchase_id'] = $request->purchase_id;
            $module_id           = $request->purchase_id;
            $this->logchatmessage('#2', $request->task_id, $request->message, 'if the purchase message is going to send');
        } elseif ($context == 'supplier') {
            $data['supplier_id'] = $request->supplier_id;
            $module_id           = $request->supplier_id;
            $this->logchatmessage('#3', $request->task_id, $request->message, 'if the supplier message is going to send');
        } elseif ($context == 'SOP-Data') {
            $data['sop_user_id'] = $request->sop_user_id;
            $module_id           = $request->sop_user_id;
            $this->logchatmessage('#4', $request->task_id, $request->message, 'if the supplier message is going to send');
        } elseif ($context == 'chatbot') { //Purpose : Add Chatbotreplay - DEVTASK-18280
            $data['customer_id'] = $request->customer_id;
            $module_id           = $request->customer_id;
            \App\ChatMessage::updatedUnreadMessage($request->customer_id, $data['status']);
            $this->logchatmessage('#5', $request->task_id, $request->message, 'if the chatbot message is going to send');
        } elseif ($context == 'user-feedback') {
            $data['user_feedback_id']          = $request->user_id;
            $data['user_feedback_category_id'] = $request->feedback_cat_id;
            $data['user_feedback_status']      = $request->feedback_status_id;
            $Admin_users                       = User::get();
            foreach ($Admin_users as $u) {
                if ($u->isAdmin()) {
                    $u_id = $u->id;
                    break;
                }
            }
            if (Auth::user()->isAdmin()) {
                $u_id = $request->user_id;
            }
            $data['user_id']         = $u_id;
            $data['sent_to_user_id'] = $u_id;
            $data['send_by']         = Auth::user()->isAdmin() ? Auth::id() : null;
            $module_id               = $u_id;
            $this->logchatmessage('#6', $request->task_id, $request->message, 'if the user-feedback message is going to send');
        } elseif ($context == 'user-feedback-hrTicket') {
            $data['user_feedback_id']          = $request->user_id;
            $data['user_feedback_category_id'] = $request->feedback_cat_id;
            $data['user_feedback_status']      = $request->feedback_status_id;
            $Admin_users                       = User::get();
            foreach ($Admin_users as $u) {
                if ($u->isAdmin()) {
                    $u_id = $u->id;
                    break;
                }
            }
            if (Auth::user()->isAdmin()) {
                $u_id = $request->user_id;
            }
            $data['user_id']         = $u_id;
            $data['sent_to_user_id'] = $u_id;
            $data['send_by']         = Auth::user()->isAdmin() ? Auth::id() : null;
            $module_id               = $u_id;
            $this->logchatmessage('#20', $request->task_id, $request->message, 'if the user-feedback HR Ticket message is going to send');
        } elseif ($context == 'hubstuff') {
            $data['hubstuff_activity_user_id'] = $request->hubstuff_id;
            $module_id                         = $request->hubstuff_id;
            $this->logchatmessage('#7', $request->task_id, $request->message, 'if the hubstuff message is going to send');
        } elseif ($context == 'timedoctor') {
            $data['time_doctor_activity_user_id'] = $request->time_doctor_id;
            $module_id                            = $request->time_doctor_id;
            $this->logchatmessage('#7', $request->task_id, $request->message, 'if the time doctor message is going to send');
        } else {
            if ($context == 'vendor') {
                $data['vendor_id'] = $request->vendor_id;
                $module_id         = $request->vendor_id;
                if ($request->get('is_vendor_user') == 'yes') {
                    $user              = User::find($request->get('vendor_id'));
                    $vendor            = Vendor::where('phone', $user->phone)->first();
                    $data['vendor_id'] = $vendor->id;
                    $module_id         = $vendor->id;
                }
                if ($request->get('message')) {
                    $data['message'] = $request->get('message');
                }

                // update message for chatbot request->vendor_id
                if (! empty($data['status']) && ! in_array($data['status'], \App\ChatMessage::AUTO_REPLY_CHAT)) {
                    \DB::table('chat_messages as c')->join('chatbot_replies as cr', 'cr.replied_chat_id', '=', 'c.id')->where('c.vendor_id', $request->vendor_id)->where('cr.is_read', 0)->update(['cr.is_read' => 1]);
                    \DB::table('chat_messages as c')->join('chatbot_replies as cr', 'cr.chat_id', '=', 'c.id')->where('c.vendor_id', $request->vendor_id)->where('cr.is_read', 0)->update(['cr.is_read' => 1]);
                }
                $this->logchatmessage('#8', $request->task_id, $request->message, 'update message for chatbot request');
            } elseif ($context == 'charity') {
                $data['charity_id'] = $request->vendor_id;
                $charity            = CustomerCharity::where('id', $request->vendor_id)->first();
                $module_id          = $request->vendor_id;
                if ($request->get('message')) {
                    $data['message'] = $request->get('message');
                }

                // update message for chatbot request->vendor_id
                if (! empty($data['status']) && ! in_array($data['status'], \App\ChatMessage::AUTO_REPLY_CHAT)) {
                    \DB::table('chat_messages as c')->join('chatbot_replies as cr', 'cr.replied_chat_id', '=', 'c.id')->where('c.charity_id', $request->charity_id)->where('cr.is_read', 0)->update(['cr.is_read' => 1]);
                    \DB::table('chat_messages as c')->join('chatbot_replies as cr', 'cr.chat_id', '=', 'c.id')->where('c.charity_id', $request->charity_id)->where('cr.is_read', 0)->update(['cr.is_read' => 1]);
                }
                $this->logchatmessage('#9', $request->task_id, $request->message, 'update message for charity request');
                unset($data['vendor_id']);
            } elseif ($context == 'uicheckMessage') {
                $this->logchatmessage('#21', $request->task_id, $request->message, 'If context UI check');
                $message               = $request->get('message');
                $params['message']     = $message;
                $params['message_en']  = $request->get('message');
                $params['ticket_id']   = $request->ticket_id;
                $params['user_id']     = $request->object_id;
                $params['ui_check_id'] = $request->task_id;
                $params['approved']    = 1;
                $params['status']      = 2;
                $chat_message          = ChatMessage::create($params);

                return response()->json(['message' => $chat_message]);
            } elseif ($context == 'task') {
                if ($request->task_id == 'undefined') {
                    $this->logchatmessage('#10', null, $request->message, 'If context conndition task is exit');
                } else {
                    $this->logchatmessage('#10', $request->task_id, $request->message, 'If context conndition task is exit');
                }
                $data['task_id']  = $request->task_id;
                $data['is_audio'] = $request->get('is_audio', 0);
                $task             = Task::find($request->task_id);

                if ($task->is_statutory != 1) {
                    $data['message'] = '#' . $data['task_id'] . '. ' . $task->task_subject . '. ' . $data['message'];
                } else {
                    $data['message'] = $task->task_subject . '. ' . $data['message'];
                }

                if ($request->send_message_recepients) {
                    $recepients = explode(',', $request->send_message_recepients);
                    foreach ($recepients as $recepient) {
                        if ($recepient == 'assign_by') {
                            $adm = User::find($task->assign_from);
                            if ($adm) {
                                WebNotificationController::sendBulkNotification($adm->id, 'Task & Activity', $data['message']);
                            }
                        } elseif ($recepient == 'assigned_to') {
                            foreach ($task->users as $key => $user) {
                                WebNotificationController::sendBulkNotification($user->id, 'Task & Activity', $data['message']);
                            }
                        } elseif ($recepient == 'master_user_id') {
                            if (! empty($task->master_user_id)) {
                                $userMaster = User::find($task->master_user_id);
                                if ($userMaster) {
                                    WebNotificationController::sendBulkNotification($userMaster->id, 'Task & Activity', $data['message']);
                                }
                            }
                        } elseif ($recepient == 'second_master_user_id') {
                            if (! empty($task->second_master_user_id)) {
                                $userMaster = User::find($task->second_master_user_id);
                                if ($userMaster) {
                                    //$this->sendWithThirdApi($userMaster->phone, $userMaster->whatsapp_number, $data['message']);
                                    WebNotificationController::sendBulkNotification($userMaster->id, 'Task & Activity', $data['message']);
                                }
                            }
                        } elseif ($recepient == 'contacts') {
                            if (count($task->contacts) > 0) {
                                foreach ($task->contacts as $key => $contact) {
                                    if ($key == 0) {
                                        $data['contact_id'] = $task->assign_to;
                                    } else {
                                        //
                                    }
                                }
                            }
                        }
                    }
                } else {
                    if (count($task->users) > 0) {
                        if ($task->assign_from == Auth::id()) {
                            foreach ($task->users as $key => $user) {
                                if ($key == 0) {
                                    $data['erp_user'] = $user->id;
                                } else {
                                    WebNotificationController::sendBulkNotification($user->id, 'Task & Activity', $data['message']);
                                }
                            }
                        } elseif ($task->master_user_id == Auth::id()) {
                            foreach ($task->users as $key => $user) {
                                if ($key == 0) {
                                    $data['erp_user'] = $user->id;
                                } else {
                                    WebNotificationController::sendBulkNotification($user->id, 'Task & Activity', $data['message']);
                                }
                            }
                            $adm = User::find($task->assign_from);
                            if ($adm) {
                                WebNotificationController::sendBulkNotification($adm->id, 'Task & Activity', $data['message']);
                            }
                        } else {
                            if (! $task->users->contains(Auth::id())) {
                                $data['erp_user'] = $task->assign_from;

                                foreach ($task->users as $key => $user) {
                                    WebNotificationController::sendBulkNotification($user->id, 'Task & Activity', $data['message']);
                                }
                            } else {
                                foreach ($task->users as $key => $user) {
                                    if ($key == 0) {
                                        $data['erp_user'] = $task->assign_from;
                                    } else {
                                        if ($user->id != Auth::id()) {
                                            WebNotificationController::sendBulkNotification($user->id, 'Task & Activity', $data['message']);
                                        }
                                    }
                                }
                            }
                        }
                    }

                    if (count($task->contacts) > 0) {
                        foreach ($task->contacts as $key => $contact) {
                            if ($key == 0) {
                                $data['contact_id'] = $task->assign_to;
                            } else {
                                //
                            }
                        }
                    }

                    // this will send message to the lead developer
                    if (! empty($task->master_user_id)) {
                        $userMaster = User::find($task->master_user_id);
                        if ($userMaster) {
                            $extraUser             = $data;
                            $extraUser['erp_user'] = $task->master_user_id;
                            $extraUser['user_id']  = $task->master_user_id;
                        }
                    }
                }
                $params['approved'] = 1;
                $params['status']   = 2;
                $chat_message       = ChatMessage::create($data);
                $this->logchatmessage('#11', $request->task_id, $request->message, 'New chat message is created');
                $module_id = $request->task_id;

                /** Sent To ChatbotMessage */
                $loggedUser = auth()->user();
                $roles      = ($loggedUser) ? $loggedUser->roles->pluck('name')->toArray() : [];

                if (! in_array('Admin', $roles)) {
                    \App\ChatbotReply::create([
                        'question' => '#' . $task->id . ' => ' . $request->message,
                        'reply'    => json_encode([
                            'context'  => 'task',
                            'issue_id' => $task->id,
                            'from'     => ($loggedUser) ? $loggedUser->id : 'cron',
                        ]),
                        'replied_chat_id' => $chat_message->id,
                        'reply_from'      => 'database',
                    ]);
                }

                // update message for chatbot request->vendor_id
                if (! empty($data['status']) && ! in_array($data['status'], \App\ChatMessage::AUTO_REPLY_CHAT)) {
                    \DB::table('chat_messages as c')->join('chatbot_replies as cr', 'cr.replied_chat_id', '=', 'c.id')->where('c.task_id', $task->id)->where('cr.is_read', 0)->update(['cr.is_read' => 1]);
                    \DB::table('chat_messages as c')->join('chatbot_replies as cr', 'cr.chat_id', '=', 'c.id')->where('c.task_id', $task->id)->where('cr.is_read', 0)->update(['cr.is_read' => 1]);
                }

                $message_ = '[ ' . @$loggedUser->name . ' ] - #' . $task->id . ' - ' . $task->task_subject . "\n\n" . $request->message;

                MessageHelper::sendEmailOrWebhookNotification($task->users->pluck('id')->toArray(), $message_);
            } elseif ($context == 'learning') {
                $this->logchatmessage('#12', $request->task_id, $request->message, 'If context learning is exit');
                $learning = \App\Learning::find($request->issue_id);
                if ($data['user_id'] == $learning->learning_vendor) {
                    $userId = $data['user_id'];
                } else {
                    $userId = $learning->learning_vendor;
                }

                $prefix = null;
                if ($learning && $learning->learningUser) {
                    $prefix = '#' . $learning->id . ' ' . $learning->learningUser->name . ' : ' . $learning->learning_subject . ' =>';
                }

                $params['message']         = $prefix . $request->get('message');
                $params['erp_user']        = $userId;
                $params['sent_to_user_id'] = $userId;
                $params['learning_id']     = $request->issue_id; //Purpose - Add learning_id - DEVTASK-4020
                $params['user_id']         = $userId;
                $params['approved']        = 1;
                $params['status']          = 2;
                $number                    = User::find($userId);
                if (! $number) {
                    return response()->json(['message' => null]);
                }
                $whatsapp = $number->whatsapp_number;
                $number   = $number->phone;

                $chat_message = ChatMessage::create($params);

                return response()->json(['message' => $chat_message]);
            } elseif ($context == 'ticket') {
                $this->logchatmessage('#13', $request->task_id, $request->message, 'If context ticket is exit');
                $send_ticket_options = [];
                if (isset($request->send_ticket_options)) {
                    $send_ticket_options = explode(',', $request->send_ticket_options);
                }
                $data['ticket_id'] = $request->ticket_id;
                $module_id         = $request->ticket_id;
                $ticket            = \App\Tickets::find($request->ticket_id);
                $message           = $request->get('message');
                if ($ticket) {
                    if ($ticket->lang_code != '' && $ticket->lang_code != 'en') {
                        $message = TranslationHelper::translate('en', $ticket->lang_code, $message);
                    }
                }
                $params['message']     = $message;
                $params['message_en']  = $request->get('message');
                $params['ticket_id']   = $request->ticket_id;
                $params['customer_id'] = $ticket->customer_id;
                $params['approved']    = 1;
                $params['status']      = 2;
                $params['user_id']     = optional(auth()->user())->id;
                $chat_message          = ChatMessage::create($params);

                // check if ticket has customer ?
                $whatsappNo = null;
                if ($ticket->user) {
                    $whatsappNo = $ticket->user->whatsapp_number;
                } elseif ($ticket->customer) {
                    $whatsappNo = $ticket->customer->whatsapp_number;
                }
                foreach ($send_ticket_options as $send_ticket_option) {
                    if ($send_ticket_option == 'whatsapp') {
                        //
                    } elseif ($send_ticket_option == 'send_to_tickets') {
                        $chat_message->send_to_tickets = 1;
                        $chat_message->save();
                    }
                }
                \Log::info('Start API CALL /rest/V1/ticket-counter/add');
                if ($ticket) {
                    $ticket_id        = $ticket->ticket_id;
                    $email            = $ticket->email;
                    $source_of_ticket = $ticket->source_of_ticket;
                    $storeWebsite     = \App\StoreWebsite::where('website', $source_of_ticket)->first();
                    if ($storeWebsite) {
                        $storeWebsiteCode = $storeWebsite->storeCode;
                        $magento_url      = $storeWebsite->magento_url;
                        $api_token        = $storeWebsite->api_token;
                        if (! empty($magento_url) && ! empty($storeWebsiteCode)) {
                            $startTime = date('Y-m-d H:i:s', LARAVEL_START);
                            $curl      = curl_init();
                            $url       = trim($magento_url, '/') . "/{$storeWebsiteCode->code}/rest/V1/ticket-counter/add";
                            curl_setopt_array($curl, [
                                CURLOPT_URL            => trim($magento_url, '/') . "/{$storeWebsiteCode->code}/rest/V1/ticket-counter/add",
                                CURLOPT_RETURNTRANSFER => true,
                                CURLOPT_ENCODING       => '',
                                CURLOPT_MAXREDIRS      => 10,
                                CURLOPT_TIMEOUT        => 0,
                                CURLOPT_FOLLOWLOCATION => true,
                                CURLOPT_HTTP_VERSION   => CURL_HTTP_VERSION_1_1,
                                CURLOPT_CUSTOMREQUEST  => 'PUT',
                                CURLOPT_POSTFIELDS     => '{
                                "ticketData":
                                {
                                    "ticket_id": "' . $ticket_id . '",
                                    "email": "' . $email . '"
                                }
                                }
                                ',
                                CURLOPT_HTTPHEADER => [
                                    'Content-Type: application/json',
                                    'Authorization: Bearer ' . $api_token,
                                ],
                            ]);

                            $response = curl_exec($curl);
                            $httpcode = curl_getinfo($curl, CURLINFO_HTTP_CODE);
                            \Log::info('API RESPONSE: ' . $response);
                            curl_close($curl);

                            LogRequest::log($startTime, $url, 'PUT', '{
                                "ticketData":
                                {
                                    "ticket_id": "' . $ticket_id . '",
                                    "email": "' . $email . '"
                                }
                                }', json_decode($response), $httpcode, \App\Http\Controllers\WhatsAppController::class, 'sendMessage');
                        } else {
                            \Log::info('Magento URL and Store Website code is not found:');
                        }
                    } else {
                        \Log::info('Store Website not found: ' . $source_of_ticket);
                    }
                } else {
                    \Log::info('Ticket Data Not Found ticket_id: ' . $request->ticket_id);
                }
                \Log::info('END API CALL /rest/V1/ticket-counter/add');

                return response()->json(['message' => $chat_message]);
            } else {
                if ($context == 'priority') {
                    $this->logchatmessage('#14', $request->task_id, $request->message, 'If context priority is exit');
                    $params             = [];
                    $params['message']  = $request->get('message', '');
                    $params['erp_user'] = $request->get('user_id', 0);
                    $params['user_id']  = $request->get('user_id', 0);
                    $params['approved'] = 1;
                    $params['status']   = 2;

                    $number = User::find($request->get('user_id', 0));

                    if (! $number) {
                        return response()->json(['message' => null]);
                    }
                    $whatsapp_number = $number->whatsapp_number;
                    $number          = $number->phone;

                    $chat_message = ChatMessage::create($params);

                    return response()->json(['message' => $chat_message]);
                } elseif ($context == 'activity') {
                    $this->logchatmessage('#15', $request->task_id, $request->message, 'If context activity is exit');
                    $data['erp_user'] = $request->user_id;
                    $module_id        = $request->user_id;
                    $user             = User::find($request->user_id);
                    if ($user && $user->phone) {
                        //
                    }
                } elseif ($context == 'overdue') {
                    $this->logchatmessage('#16', $request->task_id, $request->message, 'If context overdue is exit');
                    $data['erp_user'] = $request->user_id;
                    $user             = User::find($request->user_id);
                } elseif ($context == 'user') {
                    $this->logchatmessage('#17', $request->task_id, $request->message, 'If context user is exit');
                    $data['erp_user'] = $request->user_id;
                    $module_id        = $request->user_id;
                    $user             = User::find($request->user_id);
                } elseif ($context == 'dubbizle') {
                    $this->logchatmessage('#18', $request->task_id, $request->message, 'If context dubbizle is exit');
                    $data['dubbizle_id'] = $request->dubbizle_id;
                    $module_id           = $request->dubbizle_id;
                } elseif ($context == 'time_approval') {
                    $this->logchatmessage('#19', $request->task_id, $request->message, 'If context dubbizle is exit');
                    $summary = HubstaffActivitySummary::find($request->summery_id);
                    if ($summary) {
                        $userId = $summary->user_id;
                        $number = User::find($userId);
                        if (! $number) {
                            return response()->json(['message' => null]);
                        }
                        $whatsapp = $number->whatsapp_number;
                        $number   = $number->phone;

                        $params['erp_user']                     = $userId;
                        $params['user_id']                      = $userId;
                        $params['sent_to_user_id']              = $userId;
                        $params['approved']                     = 1;
                        $params['status']                       = 2;
                        $params['hubstaff_activity_summary_id'] = $request->summery_id;
                        $params['message']                      = $request->message;
                        $chat_message                           = ChatMessage::create($params);

                        return response()->json(['message' => $chat_message]);
                    }

                    return response()->json(['message' => null]);
                } elseif ($context == 'issue') {
                    $sendTo             = $request->get('sendTo', 'to_developer');
                    $params['issue_id'] = $request->get('issue_id');
                    $params['is_audio'] = $request->get('is_audio', 0);
                    $issue              = DeveloperTask::find($request->get('issue_id'));

                    $userId = $issue->assigned_to;
                    if ($sendTo == 'to_master') {
                        if ($issue->master_user_id) {
                            $userId = $issue->master_user_id;
                        }
                    }

                    if ($sendTo == 'to_team_lead') {
                        if ($issue->team_lead_id) {
                            $userId = $issue->team_lead_id;
                        }
                    }

                    if ($sendTo == 'to_tester') {
                        if ($issue->tester_id) {
                            $userId = $issue->tester_id;
                        }
                    }
                    $admin = 0;
                    if (! Auth::user() || ! Auth::user()->isAdmin()) {
                        $admin = $issue->created_by;
                    }
                    $params['erp_user']        = $userId;
                    $params['user_id']         = $data['user_id'];
                    $params['sent_to_user_id'] = $userId;
                    $params['approved']        = 1;
                    $params['status']          = 2;

                    $number = User::find($userId);
                    if (! $number) {
                        return response()->json(['message' => null]);
                    }
                    $whatsapp = $number->whatsapp_number;
                    $number   = $number->phone;
                    if ($request->type == 1) {
                        foreach ($issue->getMedia(config('constants.media_tags')) as $image) {
                            $params['message']   = '#TASK-' . $issue->id . '-' . $issue->subject . '=>' . getMediaUrl($image);
                            $params['media_url'] = getMediaUrl($image);

                            if (Auth::user()->id != $userId) {
                                $chat_message = ChatMessage::create($params);
                            }
                            if ($admin) {
                                $creator = User::find($admin);
                                if ($creator) {
                                    $num                       = $creator->phone;
                                    $whatsapp                  = $creator->whatsapp_number;
                                    $params['erp_user']        = $admin;
                                    $params['user_id']         = $data['user_id'];
                                    $params['sent_to_user_id'] = $admin;
                                    $params['approved']        = 1;
                                    $params['status']          = 2;
                                    $chat_message              = ChatMessage::create($params);
                                }
                            }
                        }
                    } elseif ($request->type == 2) {
                        $issue = Issue::find($request->get('issue_id'));
                        if ($request->hasfile('images')) {
                            foreach ($request->file('images') as $image) {
                                $media = MediaUploader::fromSource($image)->upload();
                                $issue->attachMedia($media, config('constants.media_tags'));
                                $params['message']   = '#ISSUE-' . $issue->id . '-' . $issue->subject . '=>' . getMediaUrl($media);
                                $params['media_url'] = getMediaUrl($media);
                                if (Auth::user()->id != $userId) {
                                    $chat_message = ChatMessage::create($params);
                                }

                                if ($admin) {
                                    $creator = User::find($admin);
                                    if ($creator) {
                                        $num                       = $creator->phone;
                                        $whatsapp                  = $creator->whatsapp_number;
                                        $params['erp_user']        = $admin;
                                        $params['user_id']         = $data['user_id'];
                                        $params['sent_to_user_id'] = $admin;
                                        $params['approved']        = 1;
                                        $params['status']          = 2;
                                        $chat_message              = ChatMessage::create($params);
                                    }
                                }
                            }
                        }
                    } else {
                        $params['developer_task_id'] = $request->get('issue_id');
                        $prefix                      = ($issue->task_type_id == 1) ? '#DEVTASK-' : '#ISSUE-';
                        $params['message']           = $prefix . $issue->id . '-' . $issue->subject . '=>' . $request->get('message');
                        if (Auth::user() && Auth::user()->id != $userId) {
                            $chat_message = ChatMessage::create($params);
                        }
                        if ($admin) {
                            $creator = User::find($admin);
                            if ($creator) {
                                $num                       = $creator->phone;
                                $whatsapp                  = $creator->whatsapp_number;
                                $params['erp_user']        = $admin;
                                $params['user_id']         = $data['user_id'];
                                $params['sent_to_user_id'] = $admin;
                                $params['approved']        = 1;
                                $params['status']          = 2;
                                $chat_message              = ChatMessage::create($params);
                            }
                        }

                        if ($issue->hasMedia(config('constants.media_tags'))) {
                            foreach ($issue->getMedia(config('constants.media_tags')) as $image) {
                                $params['media_url'] = getMediaUrl($image);
                                if (Auth::user()->id != $userId) {
                                    $chat_message = ChatMessage::create($params);
                                }
                                if ($admin) {
                                    $creator = User::find($admin);
                                    if ($creator) {
                                        $num                       = $creator->phone;
                                        $whatsapp                  = $creator->whatsapp_number;
                                        $params['erp_user']        = $admin;
                                        $params['user_id']         = $data['user_id'];
                                        $params['sent_to_user_id'] = $admin;
                                        $params['approved']        = 1;
                                        $params['status']          = 2;
                                        $chat_message              = ChatMessage::create($params);
                                    }
                                }
                            }
                        }
                    }

                    ChatMessagesQuickData::updateOrCreate([
                        'model'    => \App\DeveloperTask::class,
                        'model_id' => $params['issue_id'],
                    ], [
                        'last_communicated_message'    => @$params['message'],
                        'last_communicated_message_at' => Carbon::now(),
                        'last_communicated_message_id' => isset($chat_message) ? $chat_message->id : null,
                    ]);

                    // update message for chatbot request->vendor_id
                    if (! empty($data['status']) && ! in_array($data['status'], \App\ChatMessage::AUTO_REPLY_CHAT)) {
                        \DB::table('chat_messages as c')->join('chatbot_replies as cr', 'cr.replied_chat_id', '=', 'c.id')->where('c.developer_task_id', $issue->id)->where('cr.is_read', 0)->update(['cr.is_read' => 1]);
                        \DB::table('chat_messages as c')->join('chatbot_replies as cr', 'cr.chat_id', '=', 'c.id')->where('c.developer_task_id', $issue->id)->where('cr.is_read', 0)->update(['cr.is_read' => 1]);
                    }

                    if ($sendTo == 'to_master') {
                        /* Send to chatbot/messages */

                        \App\ChatbotReply::create([
                            'question' => '#DEVTASK-' . $issue->id . ' => ' . $request->message,
                            'reply'    => json_encode([
                                'context'  => 'issue',
                                'issue_id' => $issue->id,
                                'from'     => $request->user()->id,
                            ]),
                            'replied_chat_id' => isset($chat_message) ? $chat_message->id : '',
                            'reply_from'      => 'database',
                        ]);
                    }

                    if ($request->chat_reply_message_id) {
                        $messageReply = \App\ChatbotReply::find($request->chat_reply_message_id);

                        if ($messageReply) {
                            $prefix = ($issue->task_type_id == 1) ? '#DEVTASK-' : '#ISSUE-';

                            $messageReply->chat_id = $chat_message->id;

                            $messageReply->save();
                        }
                    }

                    //START - Purpose : Email notification - DEVTASK-4359
                    $user = \App\User::find($issue->assigned_to);

                    $message_ = ($issue->task_type_id == 1 ? '[ ' . $user->name . ' ] - #DEVTASK-' : '#ISSUE-') . $issue->id . ' - ' . $issue->subject . "\n\n" . $request->message;

                    MessageHelper::sendEmailOrWebhookNotification([$issue->assigned_to, $issue->team_lead_id, $issue->tester_id], $message_);
                    //END - DEVTASK-4359
                    WebNotificationController::sendWebNotification2($request->get('sendTo'), $params['issue_id'], $prefix . $issue->id . '-' . $issue->subject, $request->get('message'));

                    return response()->json(['message' => isset($chat_message) ? $chat_message : '']);
                } elseif ($context == 'auto_task') {
                    $params['issue_id'] = $request->get('issue_id');
                    $issue              = DeveloperTask::find($request->get('issue_id'));
                    $userId             = $issue->assigned_to;

                    $admin = $issue->created_by;

                    $params['erp_user']        = $userId;
                    $params['user_id']         = $data['user_id'];
                    $params['sent_to_user_id'] = $userId;
                    $params['approved']        = 1;
                    $params['status']          = 2;

                    $number = User::find($userId);
                    if (! $number) {
                        return response()->json(['message' => null]);
                    }
                    $whatsapp                    = $number->whatsapp_number;
                    $number                      = $number->phone;
                    $params['developer_task_id'] = $request->get('issue_id');
                    $prefix                      = ($issue->task_type_id == 1) ? '#DEVTASK-' : '#ISSUE-';
                    $params['message']           = $prefix . $issue->id . '-' . $issue->subject . '=>' . $request->get('message');
                    $chat_message                = ChatMessage::create($params);

                    if ($admin) {
                        $creator = User::find($admin);
                        if ($creator) {
                            $num                       = $creator->phone;
                            $whatsapp                  = $creator->whatsapp_number;
                            $params['erp_user']        = $admin;
                            $params['user_id']         = $data['user_id'];
                            $params['sent_to_user_id'] = $admin;
                            $params['approved']        = 1;
                            $params['status']          = 2;
                            $chat_message              = ChatMessage::create($params);
                        }
                    }
                    ChatMessagesQuickData::updateOrCreate([
                        'model'    => \App\DeveloperTask::class,
                        'model_id' => $params['issue_id'],
                    ], [
                        'last_communicated_message'    => @$params['message'],
                        'last_communicated_message_at' => Carbon::now(),
                        'last_communicated_message_id' => ($chat_message) ? $chat_message->id : null,
                    ]);

                    $message_ = ($issue->task_type_id == 1 ? '[ ' . $loggedUser->name . ' ]- #DEVTASK-' : '#ISSUE-') . $issue->id . ' - ' . $issue->subject . "\n\n" . $request->message;

                    $this->sendEmailOrWebhookNotification([$userId], $message_);

                    return response()->json(['message' => $chat_message]);
                } elseif ($context == 'document') {
                    //Sending Documents To User / Vendor / Contacts
                    $data['document_id'] = $request->document_id;
                    $module_id           = $request->document_id;

                    //Getting User For Sending Documents
                    if ($request->user_type == 1) {
                        $document     = Document::findOrFail($module_id);
                        $document_url = $document->getDocumentPathById($document->id);

                        foreach ($request->users as $key) {
                            $user = User::findOrFail($key);

                            // User ID For Chat Message
                            $data['user_id'] = $user->id;

                            //Creating Chat Message
                            $chat_message = ChatMessage::create($data);

                            //History
                            $history['send_by']     = Auth::id();
                            $history['send_to']     = $user->id;
                            $history['type']        = 'User';
                            $history['via']         = 'WhatsApp';
                            $history['document_id'] = $document->id;
                            DocumentSendHistory::create($history);
                        }

                    //Getting Vendor For Sending Documents
                    } elseif ($request->user_type == 2) {
                        $document     = Document::findOrFail($module_id);
                        $document_url = $document->getDocumentPathById($document->id);
                        foreach ($request->users as $key) {
                            $vendor = Vendor::findOrFail($key);

                            // Vendor ID For Chat Message
                            $data['vendor_id'] = $vendor->id;

                            //Creating Chat Message
                            $chat_message = ChatMessage::create($data);

                            //History
                            $history['send_by']     = Auth::id();
                            $history['send_to']     = $vendor->id;
                            $history['type']        = 'Vendor';
                            $history['via']         = 'WhatsApp';
                            $history['document_id'] = $document->id;
                            DocumentSendHistory::create($history);
                        }

                    //Getting Contact For Sending Documents
                    } elseif ($request->user_type == 3) {
                        $document     = Document::findOrFail($module_id);
                        $document_url = $document->getDocumentPathById($document->id);
                        foreach ($request->users as $key) {
                            $contact = Contact::findOrFail($key);

                            // Contact ID For Chat Message
                            $data['contact_id'] = $contact->id;

                            //Creating Chat Message
                            $chat_message = ChatMessage::create($data);

                            //History
                            $history['send_by']     = Auth::id();
                            $history['send_to']     = $contact->id;
                            $history['type']        = 'Contact';
                            $history['via']         = 'WhatsApp';
                            $history['document_id'] = $document->id;
                            DocumentSendHistory::create($history);
                        }
                    } elseif (isset($request->contact) && $request->contact != null) {
                        $document     = Document::findOrFail($module_id);
                        $document_url = $document->getDocumentPathById($document->id);

                        foreach ($request->contact as $contacts) {
                            // Contact ID For Chat Message
                            $data['number'] = $contacts;

                            //Creating Chat Message
                            $chat_message = ChatMessage::create($data);

                            //History
                            $history['send_by']     = Auth::id();
                            $history['send_to']     = $contacts;
                            $history['type']        = 'Manual Contact';
                            $history['via']         = 'WhatsApp';
                            $history['document_id'] = $document->id;
                            DocumentSendHistory::create($history);
                        }
                    }

                    return redirect()->back()->with('message', 'Document Send SucessFully');
                } elseif ($context == 'quicksell') {
                    $product = Product::findorfail($request->quicksell_id);
                    $image   = $product->getMedia(config('constants.media_tags'))->first()
                        ? getMediaUrl($product->getMedia(config('constants.media_tags'))->first())
                        : '';
                    foreach ($request->customers as $key) {
                        $customer = Customer::findOrFail($key);

                        // User ID For Chat Message
                        $data['customer_id'] = $customer->id;

                        //Creating Chat Message
                        $chat_message = ChatMessage::create($data);
                        //Sending Document
                        if ($customer->whatsapp_number == null) {
                            //
                        } else {
                            //
                        }
                    }

                    return redirect()->back()->with('message', 'Images Send SucessFully');
                } elseif ($context == 'quicksell_group') {
                    $products = $request->products;
                    if ($products != null) {
                        $products = explode(',', $products);
                        foreach ($products as $product) {
                            $product = Product::findorfail($product);
                            $image   = $product->getMedia(config('constants.media_tags'))->first()
                                ? getMediaUrl($product->getMedia(config('constants.media_tags'))->first())
                                : '';
                            if (isset($request->to_all)) {
                                $customers = Customer::all();
                            } elseif (! empty($request->customers_id) && is_array($request->customers_id)) {
                                $customers = Customer::whereIn('id', $request->customers_id)->get();
                            } elseif ($request->customers != null) {
                                $customers = Customer::whereIn('id', $request->customers)->get();
                            } elseif ($request->rating != null && $request->gender == null) {
                                $customers = Customer::where('rating', $request->rating)->get();
                            } elseif ($request->rating != null && $request->gender != null) {
                                $customers = Customer::where('rating', $request->rating)->where('gender', $request->gender)->get();
                            } else {
                                return redirect(route('quicksell.index'))->with('message', 'Please select Category');
                            }

                            if ($customers != null) {
                                foreach ($customers as $customer) {
                                    $data['customer_id'] = $customer->id;
                                    $chat_message        = ChatMessage::create($data);
                                }
                            }
                        }
                    } else {
                        if (! empty($request->redirect_back)) {
                            return redirect($request->redirect_back)->with('message', 'Please Select Products');
                        }

                        return redirect(route('quicksell.index'))->with('message', 'Please Select Products');
                    }

                    if ($request->redirect_back) {
                        return redirect($request->redirect_back)->with('message', 'Images Send SucessFully');
                    }

                    return redirect(route('quicksell.index'))->with('message', 'Images Send SucessFully');
                } elseif ($context == 'quicksell_group_send') {
                    if ($request->customerId != null && $request->groupId != null) {
                        //Find Group id
                        foreach ($request->groupId as $id) {
                            //got group
                            $groups = QuickSellGroup::select('id', 'group')->where('id', $id)->get();

                            //getting product id from group
                            if ($groups != null) {
                                foreach ($groups as $group) {
                                    $medias = [];

                                    $products = Product::with('media')
                                        ->select('products.*')
                                        ->join('product_quicksell_groups', 'product_quicksell_groups.product_id', '=', 'products.id')
                                        ->groupBy('products.id')
                                        ->where('quicksell_group_id', $group->group)
                                        ->get();

                                    foreach ($products as $product) {
                                        $image = $product->media()->whereIn('tag', config('constants.attach_image_tag'))->first();
                                        if ($image) {
                                            array_push($medias, $image);
                                        }
                                    }

                                    if (isset($medias) && count($medias) > 0) {
                                        if (! empty($request->send_pdf) && $request->send_pdf == 1) {
                                            $fn = '';
                                            if ($context == 'customer') {
                                                $fn = '_product';
                                            }

                                            $folder = 'temppdf_view_' . time();

                                            $pdfView = view('pdf_views.images' . $fn, compact('medias', 'folder'));
                                            $pdf     = new Dompdf();
                                            $pdf->setPaper([0, 0, 1000, 1000], 'portrait');
                                            $pdf->loadHtml($pdfView);
                                            if (! empty($request->pdf_file_name)) {
                                                $random = str_replace(' ', '-', $request->pdf_file_name . '-' . date('Y-m-d-H-i-s-') . rand());
                                            } else {
                                                $random = uniqid('sololuxury_', true);
                                            }
                                            if (! File::isDirectory(public_path() . '/pdf/')) {
                                                File::makeDirectory(public_path() . '/pdf/', 0777, true, true);
                                            }
                                            $fileName = public_path() . '/pdf/' . $random . '.pdf';
                                            $pdf->render();

                                            File::put($fileName, $pdf->output());

                                            $media = MediaUploader::fromSource($fileName)->upload();

                                            if ($request->customerId != null) {
                                                $customer = Customer::findorfail($request->customerId);
                                                if (! empty($request->send_pdf)) {
                                                    $file = config('env.APP_URL') . '/pdf/' . $random . '.pdf';
                                                }
                                                $data['customer_id'] = $customer->id;
                                                $chat_message        = ChatMessage::create($data);
                                            }
                                        } else {
                                            if ($medias != null) {
                                                if ($request->customerId != null) {
                                                    $customer = Customer::findorfail($request->customerId);
                                                    foreach ($medias as $media) {
                                                        $file                = getMediaUrl($media);
                                                        $data['customer_id'] = $customer->id;
                                                        $chat_message        = ChatMessage::create($data);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        return response()->json(['success']);
                    }
                } elseif ($context == 'old') {
                    $old = Old::findorfail($request->old_id);

                    if ($old != null) {
                        $data['old_id'] = $old->serial_no;
                        //Creating Chat Message
                        $data['message'] = $request->message;
                        $chat_message    = ChatMessage::create($data);

                        return response()->json([
                            'data' => $data,
                        ], 200);
                    }
                } elseif ($context == 'site_development') {
                    $chat_message = null;
                    $users        = $request->get('users', [$request->get('user_id', 6)]);
                    if (! empty($users)) {
                        foreach ($users as $user) {
                            $user = User::find($user);
                            if ($user) {
                                $params['message']             = $request->get('message');
                                $params['site_development_id'] = $request->get('site_development_id');
                                $params['approved']            = 1;
                                $params['status']              = 2;
                                $chat_message                  = ChatMessage::create($params);

                                return response()->json(['message' => $chat_message], 200);
                            }
                        }
                    }

                    return response()->json(['message' => 'No user selected'], 500);
                } elseif ($context == 'content_management') {
                    $chat_message = null;
                    $users        = $request->get('users', [$request->get('user_id', 0)]);

                    if (! empty($users)) {
                        foreach ($users as $user) {
                            $user                              = User::find($user);
                            $params['message']                 = $request->get('message');
                            $params['store_social_content_id'] = $request->get('store_social_content_id');
                            $params['approved']                = 1;
                            $params['status']                  = 2;
                            $chat_message                      = ChatMessage::create($params);
                        }
                    }

                    return response()->json(['message' => $chat_message]);
                } elseif ($context == 'task_lead') {
                    $params['task_id'] = $request->get('task_id');
                    $params['message'] = $request->get('message');

                    $params['approved'] = 1;
                    $params['status']   = 2;
                    $task               = Task::find($request->get('task_id'));
                    $user               = User::find($task->master_user_id);

                    if (! $user) {
                        return response()->json(['message' => 'Master user not found'], 500);
                    }
                    $params['user_id'] = $user->id;
                    if ($task->is_statutory != 1) {
                        $params['message'] = '#' . $task->id . '. ' . $task->task_subject . '. ' . $params['message'];
                    } else {
                        $params['message'] = $task->task_subject . '. ' . $params['message'];
                    }

                    $number          = $user->phone;
                    $whatsapp_number = $user->whatsapp_number;
                    if (! $number) {
                        return response()->json(['message' => 'User whatsapp no not available'], 500);
                    }
                    $chat_message = ChatMessage::create($params);
                } elseif ($context == 'social_strategy') {
                    $user = User::find($request->get('user_id'));

                    $params['message'] = $request->get('message');

                    $params['social_strategy_id'] = $request->get('social_strategy_id');
                    $params['approved']           = 1;

                    $params['status'] = 2;

                    $chat_message = ChatMessage::create($params);

                    return response()->json(['message' => $chat_message]);
                } elseif ($context == 'payment-receipts') {
                    $user           = null;
                    $paymentReceipt = \App\PaymentReceipt::find($request->get('payment_receipt_id'));
                    if ($paymentReceipt) {
                        if (auth()->user()->isAdmin()) {
                            $user = User::find($paymentReceipt->user_id);
                        }
                    }
                    if (! $user) {
                        $user = User::find(6);
                    }

                    $params['erp_user']           = $user->id;
                    $params['user_id']            = $user->id;
                    $params['message']            = $request->get('message');
                    $params['payment_receipt_id'] = $request->get('payment_receipt_id');
                    $params['approved']           = 1;
                    $params['status']             = 2;

                    $chat_message = ChatMessage::create($params);

                    return response()->json(['message' => $chat_message]);
                } else {
                    if ($context == 'developer_task') {
                        $params['developer_task_id'] = $request->get('developer_task_id');
                        $task                        = DeveloperTask::find($request->get('developer_task_id'));
                        $params['erp_user']          = $task->user_id;
                        $params['approved']          = 1;
                        $params['message']           = '#DEVTASK-' . $task->id . ' ' . $request->get('message');
                        $params['status']            = 2;

                        $user            = User::find($task->user_id);
                        $number          = $user->phone;
                        $whatsapp_number = $user->whatsapp_number;
                        $chat_message    = ChatMessage::create($params);

                        return response()->json(['message' => $chat_message]);
                    } else {
                        if ($context == 'lawyer') {
                            $data['lawyer_id'] = $request->lawyer_id;
                            $module_id         = $request->lawyer_id;
                        } else {
                            if ($context == 'case') {
                                $data['case_id']   = $request->case_id;
                                $data['lawyer_id'] = $request->lawyer_id;
                                $module_id         = $request->case_id;
                            } else {
                                if ($context == 'blogger') {
                                    $data['blogger_id'] = $request->blogger_id;
                                    $module_id          = $request->blogger_id;
                                }
                            }
                        }
                    }
                }
            }
        }
        if ($context != 'task') {
            $params['approved'] = 0;
            $params['status']   = 1;
            $chat_message       = ChatMessage::create($data);
        }

        //START - Purpose : Add ChatbotMessage entry - DEVTASK-4203
        if ($context == 'vendor') {
            /** Sent To ChatbotMessage */
            $loggedUser = $request->user();

            if ($loggedUser) {
                $roles = $loggedUser->roles->pluck('name')->toArray();

                if (! in_array('Admin', $roles)) {
                    \App\ChatbotReply::create([
                        'question' => $request->message,
                        'reply'    => json_encode([
                            'context'  => 'vendor',
                            'issue_id' => $data['vendor_id'],
                            'from'     => $loggedUser->id,
                        ]),
                        'replied_chat_id' => $chat_message->id,
                        'reply_from'      => 'database',
                    ]);
                }

                $messageReply = \App\ChatbotReply::find($request->chat_reply_message_id);

                if ($messageReply) {
                    $messageReply->chat_id = $chat_message->id;

                    $messageReply->save();
                }
            }
        }
        //END - DEVTASK-4203

        //STRAT - Purpose : Add record in chatbotreplay - DEVTASK-18280
        if ($context == 'chatbot') {
            if ($request->chat_reply_message_id) {
                $messageReply = \App\ChatbotReply::find($request->chat_reply_message_id);

                if ($messageReply) {
                    $messageReply->chat_id = $chat_message->id;

                    $messageReply->save();
                }
            }

            return response()->json(['message' => $chat_message]);
        }
        //END - DEVTASK-18280

        if ($context == 'customer') {
            ChatMessagesQuickData::updateOrCreate([
                'model'    => \App\Customer::class,
                'model_id' => $data['customer_id'],
            ], [
                'last_communicated_message'    => @$data['message'],
                'last_communicated_message_at' => Carbon::now(),
                'last_communicated_message_id' => ($chat_message) ? $chat_message->id : null,
            ]);
        }

        if ($context == 'task') {
            ChatMessagesQuickData::updateOrCreate([
                'model'    => \App\Task::class,
                'model_id' => $data['task_id'],
            ], [
                'last_communicated_message'    => @$data['message'],
                'last_communicated_message_at' => Carbon::now(),
                'last_communicated_message_id' => ($chat_message) ? $chat_message->id : null,
            ]);

            if ($request->chat_reply_message_id) {
                $messageReply = \App\ChatbotReply::find($request->chat_reply_message_id);

                if ($messageReply) {
                    $messageReply->chat_id = $chat_message->id;

                    $messageReply->save();
                }
            }
        }

        if ($context == 'task_lead') {
            ChatMessagesQuickData::updateOrCreate([
                'model'    => \App\Task::class,
                'model_id' => $data['task_id'],
            ], [
                'last_communicated_message'    => @$params['message'],
                'last_communicated_message_at' => Carbon::now(),
                'last_communicated_message_id' => ($chat_message) ? $chat_message->id : null,
            ]);
        }

        if ($context == 'email') {
            ChatMessagesQuickData::updateOrCreate([
                'model'    => \App\Email::class,
                'model_id' => $data['email_id'],
            ], [
                'last_communicated_message'    => @$params['message'],
                'last_communicated_message_at' => Carbon::now(),
                'last_communicated_message_id' => ($chat_message) ? $chat_message->id : null,
            ]);
        }

        if ($request->hasFile('image')) {
            $media = MediaUploader::fromSource($request->file('image'))
                ->toDirectory('chatmessage/' . floor($chat_message->id / config('constants.image_per_folder')))
                ->upload();
            $chat_message->attachMedia($media, config('constants.media_tags'));

            if ($context == 'task') {
                if (count($task->users) > 0) {
                    if ($task->assign_from == Auth::id()) {
                        foreach ($task->users as $key => $user) {
                            if ($key == 0) {
                                $data['erp_user'] = $user->id;
                            } else {
                                //
                            }
                        }
                    } else {
                        foreach ($task->users as $key => $user) {
                            if ($key == 0) {
                                $data['erp_user'] = $task->assign_from;
                            } else {
                                if ($user->id != Auth::id()) {
                                    //
                                }
                            }
                        }
                    }
                }

                if (count($task->contacts) > 0) {
                    foreach ($task->contacts as $key => $contact) {
                        if ($key == 0) {
                            $data['contact_id'] = $task->assign_to;
                        } else {
                            //
                        }
                    }
                }
            }
        }

        // get the status for approval
        $approveMessage = \App\Helpers\DevelopmentHelper::needToApproveMessage();
        $isNeedToBeSend = false;
        if (
            ((int) $approveMessage == 1
                || (Auth::id() == 49 && empty($chat_message->customer_id))
                || Auth::id() == 56
                || Auth::id() == 3
                || Auth::id() == 65
                || $context == 'task'
                || $request->get('is_vendor_user') == 'yes'
            )
        ) {
            $isNeedToBeSend = true;
        }

        $isNeedToBeSend = true;

        if ($request->images) {
            $imagesDecoded = json_decode($request->images, true);
            if (! empty($request->send_pdf) && $request->send_pdf == 1) {
                $fn           = ($context == 'customer' || $context == 'customers') ? '_product' : '';
                $folder       = 'temppdf_view_' . time();
                $mediasH      = Media::whereIn('id', $imagesDecoded)->get();
                $number       = 0;
                $chunkedMedia = $mediasH->chunk(self::MEDIA_PDF_CHUNKS);

                foreach ($chunkedMedia as $key => $medias) {
                    $pdfView = (string) view('pdf_views.images' . $fn, compact('medias', 'folder', 'chat_message'));
                    $pdf     = new Dompdf();
                    $pdf->setPaper([0, 0, 1000, 1000], 'portrait');
                    $pdf->loadHtml($pdfView);

                    if (! empty($request->pdf_file_name)) {
                        $random = str_replace(' ', '-', $request->pdf_file_name . '-' . ($key + 1) . '-' . date('Y-m-d-H-i-s-') . rand());
                    } else {
                        $random = uniqid('sololuxury_', true);
                    }

                    $fileName = public_path() . '/' . $random . '.pdf';
                    $pdf->render();

                    File::put($fileName, $pdf->output());

                    // send images in chunks to chat media
                    try {
                        if ($number == 0) {
                            $media = MediaUploader::fromSource($fileName)
                                ->toDirectory('chatmessage/' . floor($chat_message->id / config('constants.image_per_folder')))
                                ->upload();
                            $chat_message->attachMedia($media, config('constants.media_tags'));
                        } else {
                            $extradata             = $data;
                            $extradata['is_queue'] = 0;
                            $extra_chat_message    = ChatMessage::create($extradata);
                            $media                 = MediaUploader::fromSource($fileName)
                                ->toDirectory('chatmessage/' . floor($extra_chat_message->id / config('constants.image_per_folder')))
                                ->upload();
                            $extra_chat_message->attachMedia($media, config('constants.media_tags'));
                        }

                        File::delete($fileName);

                        $number++;
                    } catch (Exception $e) {
                        \Log::channel('whatsapp')->error($e);
                    }
                }
            } else {
                if (! empty($imagesDecoded) && is_array($imagesDecoded)) {
                    if ($request->type == 'customer-attach') {
                        foreach ($imagesDecoded as $iimg => $listedImage) {
                            $productList  = \App\SuggestedProductList::find($listedImage);
                            $product      = Product::find($productList->product_id);
                            $imageDetails = $product->getMedia(config('constants.attach_image_tag'))->first();
                            $image_key    = $imageDetails->getKey();
                            $media        = Media::find($image_key);
                            if ($media) {
                                $mediable = \App\Mediables::where('media_id', $media->id)->where('mediable_type', \App\Product::class)->first();
                                try {
                                    if ($iimg != 0) {
                                        $chat_message = ChatMessage::create($data);
                                    }
                                    $chat_message->attachMedia($media, config('constants.media_tags'));
                                    if ($mediable) {
                                        $productList->update(['chat_message_id' => $chat_message->id]);
                                    }
                                    // if this message is not first then send to the client
                                    if ($iimg != 0 && $isNeedToBeSend && $chat_message->status != 0 && $chat_message->is_queue == '0') {
                                        $myRequest = new Request();
                                        $myRequest->setMethod('POST');
                                        $myRequest->request->add(['messageId' => $chat_message->id]);
                                        $this->approveMessage($context, $myRequest);
                                        if ($mediable) {
                                            $productList->update(['chat_message_id' => $chat_message->id]);
                                        }
                                    }
                                } catch (Exception $e) {
                                    \Log::channel('whatsapp')->error($e);
                                }
                            }
                        }
                    } else {
                        $medias = Media::whereIn('id', array_unique($imagesDecoded))->get();
                        if (! $medias->isEmpty()) {
                            foreach ($medias as $iimg => $media) {
                                $mediable = \App\Mediables::where('media_id', $media->id)->where('mediable_type', \App\Product::class)->first();
                                try {
                                    if ($iimg != 0) {
                                        $chat_message = ChatMessage::create($data);
                                    }
                                    $chat_message->attachMedia($media, config('constants.media_tags'));
                                    // if this message is not first then send to the client
                                    if ($iimg != 0 && $isNeedToBeSend && $chat_message->status != 0 && $chat_message->is_queue == '0') {
                                        $myRequest = new Request();
                                        $myRequest->setMethod('POST');
                                        $myRequest->request->add(['messageId' => $chat_message->id]);
                                        $this->approveMessage($context, $myRequest);
                                    }
                                } catch (Exception $e) {
                                    \Log::channel('whatsapp')->error($e);
                                }
                            }
                        }
                    }
                }
            }
        }

        if ($request->screenshot_path != '') {
            $image_path = public_path() . '/uploads/temp_screenshot.png';
            $img        = substr($request->screenshot_path, strpos($request->screenshot_path, ',') + 1);
            $img        = Image::make(base64_decode($img))->encode('png')->save($image_path);

            $media = MediaUploader::fromSource($image_path)
                ->toDirectory('chatmessage/' . floor($chat_message->id / config('constants.image_per_folder')))
                ->upload();
            $chat_message->attachMedia($media, config('constants.media_tags'));

            File::delete('uploads/temp_screenshot.png');
        }

        // get the status for approval
        if ($isNeedToBeSend && $chat_message->status != 0 && $chat_message->is_queue == '0') {
            $myRequest = new Request();
            $myRequest->setMethod('POST');
            $myRequest->request->add(['messageId' => $chat_message->id]);
            $this->approveMessage($context, $myRequest, $chat_id);
        }

        if ($request->ajax() || $ajaxNeeded) {
            return response()->json(['message' => $chat_message]);
        }

        return redirect('/' . $context . '/' . $module_id);
    }

    public function sendMultipleMessages(Request $request)
    {
        $selected_leads = json_decode($request->selected_leads, true);
        $leads          = \App\ErpLeads::whereIn('id', $selected_leads)->get();

        if (count($leads) > 0) {
            foreach ($leads as $lead) {
                try {
                    $params     = [];
                    $model_type = 'leads';
                    $model_id   = $lead->id;
                    $params     = [
                        'lead_id' => $lead->id,
                        'number'  => null,
                        'message' => $request->message,
                        'user_id' => Auth::id(),
                    ];

                    if ($lead->customer) {
                        $params['customer_id'] = $lead->customer->id;
                    }

                    $message = ChatMessage::create($params);
                } catch (Exception $ex) {
                    return response($ex->getMessage(), 500);
                }
            }
        }

        return redirect()->route('leads.index');
    }

    public function updateAndCreate(Request $request)
    {
        $result = 'success';

        $message = Message::find($request->message_id);
        $params  = [
            'number'  => null,
            'status'  => 1,
            'user_id' => Auth::id(),
        ];

        if ($message) {
            $params = [
                'approved'   => 1,
                'status'     => 2,
                'created_at' => Carbon::now(),
            ];

            if ($request->moduletype == 'leads') {
                $params['lead_id'] = $message->moduleid;
                if ($lead = \App\ErpLeads::find($message->moduleid)) {
                    if ($lead->customer) {
                        $params['customer_id'] = $lead->customer->id;
                    }
                }
            } elseif ($request->moduletype == 'orders') {
                $params['order_id'] = $message->moduleid;
                if ($order = Order::find($message->moduleid)) {
                    if ($order->customer) {
                        $params['customer_id'] = $order->customer->id;
                    }
                }
            } elseif ($request->moduletype == 'customer') {
                $customer              = Customer::find($message->customer_id);
                $params['customer_id'] = $customer->id;
            } elseif ($request->moduletype == 'purchase') {
                $params['purchase_id'] = $message->moduleid;
            }

            $images = $message->getMedia(config('constants.media_tags'));

            if ($images->first()) {
                $params['message'] = null;
                $chat_message      = ChatMessage::create($params);

                foreach ($images as $img) {
                    $chat_message->attachMedia($img, config('constants.media_tags'));
                }
            } else {
                $params['message'] = $message->body;

                $chat_message = ChatMessage::create($params);
            }

            $myRequest = new Request();
            $myRequest->setMethod('POST');
            $myRequest->request->add(['messageId' => $chat_message->id]);

            $result = $this->approveMessage($request->moduletype, $myRequest);
        } else {
            if ($request->moduletype == 'customer') {
                $params['customer_id'] = $request->moduleid;
                $params['order_id']    = null;
            } elseif ($request->moduletype == 'leads') {
                $params['lead_id'] = $request->moduleid;
                if ($lead = \App\ErpLeads::find($request->moduleid)) {
                    if ($lead->customer) {
                        $params['customer_id'] = $lead->customer->id;
                    }
                }
            } else {
                $params['order_id'] = $request->moduleid;
                if ($order = Order::find($request->moduleid)) {
                    if ($order->customer) {
                        $params['customer_id'] = $order->customer->id;
                    }
                }
            }

            if ($request->images) {
                $params['message'] = null;
                $chat_message      = ChatMessage::create($params);
                foreach (json_decode($request->images) as $image) {
                    $media = Media::find($image);
                    $chat_message->attachMedia($media, config('constants.media_tags'));
                }
            }

            return redirect('/' . (! empty($request->moduletype) ? $request->moduletype : 'customer') . '/' . $request->moduleid);
        }

        return response()->json(['status' => $result]);
    }

    public function forwardMessage(Request $request)
    {
        $message = ChatMessage::find($request->message_id);

        foreach ($request->customer_id as $customer_id) {
            $new_message              = new ChatMessage;
            $new_message->number      = $message->number;
            $new_message->message     = $message->message;
            $new_message->lead_id     = $message->lead_id;
            $new_message->order_id    = $message->order_id;
            $new_message->user_id     = $message->user_id;
            $new_message->customer_id = $customer_id;
            $new_message->status      = 1;
            $new_message->media_url   = $message->media_url;

            $new_message->save();

            if ($images = $message->getMedia(config('constants.media_tags'))) {
                foreach ($images as $image) {
                    $new_message->attachMedia($image, config('constants.media_tags'));
                }
            }
        }

        return redirect()->back();
    }

    /**
     * poll messages
     *
     * @param mixed $context
     *
     * @return \Illuminate\Http\Response
     */
    public function pollMessages(Request $request, $context)
    {
        $params = [];
        $result = [];
        $skip   = $request->page && $request->page > 1 ? $request->page * 10 : 0;

        switch ($context) {
            case 'customer':
                $column       = 'customer_id';
                $column_value = $request->customerId;
                break;
            case 'purchase':
                $column       = 'purchase_id';
                $column_value = $request->purchaeId;
                break;
            default:
                $column       = 'customer_id';
                $column_value = $request->customerId;
        }

        $messages = ChatMessage::select(['id', "$column", 'number', 'user_id', 'assigned_to', 'approved', 'status', 'sent', 'resent', 'created_at', 'media_url', 'message'])->where($column, $column_value)->latest();

        // IS IT NECESSARY ?
        if ($request->get('elapse')) {
            $elapse = (int) $request->get('elapse');
            $date   = new \DateTime;
            $date->modify(sprintf('-%s seconds', $elapse));
        }

        foreach ($messages->get() as $message) {
            $messageParams = [
                'id'          => $message->id,
                'number'      => $message->number,
                'assigned_to' => $message->assigned_to,
                'created_at'  => Carbon::parse($message->created_at)->format('Y-m-d H:i:s'),
                'approved'    => $message->approved,
                'status'      => $message->status,
                'user_id'     => $message->user_id,
                'sent'        => $message->sent,
                'resent'      => $message->resent,
            ];

            if ($message->media_url) {
                $messageParams['media_url']    = $message->media_url;
                $headers                       = get_headers($message->media_url, 1);
                $messageParams['content_type'] = $headers['Content-Type'][1];
            }

            if ($message->message) {
                $messageParams['message'] = $message->message;
            }

            if ($message->hasMedia(config('constants.media_tags'))) {
                $images_array = [];

                foreach ($message->getMedia(config('constants.media_tags')) as $key => $image) {
                    $temp_image = [
                        'key'           => $image->getKey(),
                        'image'         => getMediaUrl($image),
                        'product_id'    => '',
                        'special_price' => '',
                        'size'          => '',
                    ];

                    $image_key = $image->getKey();

                    $product_image = Product::with('Media')
                        ->whereRaw("products.id IN (SELECT mediables.mediable_id FROM mediables WHERE mediables.media_id = $image_key)")
                        ->select(['id', 'price_inr_special', 'supplier', 'size', 'lmeasurement', 'hmeasurement', 'dmeasurement'])->first();

                    if ($product_image) {
                        $temp_image['product_id']    = $product_image->id;
                        $temp_image['special_price'] = $product_image->price_inr_special;

                        $string = $product_image->supplier;
                        $expr   = '/(?<=\s|^)[a-z]/i';
                        preg_match_all($expr, $string, $matches);
                        $supplier_initials               = implode('', $matches[0]);
                        $temp_image['supplier_initials'] = strtoupper($supplier_initials);

                        if ($product_image->size != null) {
                            $temp_image['size'] = $product_image->size;
                        } else {
                            $temp_image['size'] = (string) $product_image->lmeasurement . ', ' . (string) $product_image->hmeasurement . ', ' . (string) $product_image->dmeasurement;
                        }
                    }

                    array_push($images_array, $temp_image);
                }

                $messageParams['images'] = $images_array;
            }

            $result[] = array_merge($params, $messageParams);
        }

        $result      = array_values(collect($result)->sortBy('created_at')->reverse()->toArray());
        $currentPage = LengthAwarePaginator::resolveCurrentPage();
        $perPage     = 10;

        if ($request->page) {
            $currentItems = array_slice($result, $perPage * ($currentPage - 1), $perPage);
        } else {
            $currentItems = array_reverse(array_slice($result, $perPage * ($currentPage - 1), $perPage));
        }

        $result = new LengthAwarePaginator($currentItems, count($result), $perPage, $currentPage, [
            'path' => LengthAwarePaginator::resolveCurrentPath(),
        ]);

        return response()->json($result);
    }

    public function pollMessagesCustomer(Request $request)
    {
        // Remove time limit
        set_time_limit(0);

        $params = [];
        $result = [];
        if ($request->customerId) {
            $column = 'customer_id';
            $value  = $request->customerId;
        } else {
            if ($request->supplierId) {
                $column = 'supplier_id';
                $value  = $request->supplierId;
            } else {
                if ($request->vendorId) {
                    $column = 'vendor_id';
                    $value  = $request->vendorId;
                } else {
                    if ($request->taskId) {
                        $column = 'task_id';
                        $value  = $request->taskId;
                    } else {
                        if ($request->erpUser) {
                            $column = 'erp_user';
                            $value  = $request->erpUser;
                        } else {
                            if ($request->dubbizleId) {
                                $column = 'dubbizle_id';
                                $value  = $request->dubbizleId;
                            } else {
                                if ($request->lawyerId) {
                                    $column = 'lawyer_id';
                                    $value  = $request->lawyerId;
                                } else {
                                    if ($request->caseId) {
                                        $column = 'case_id';
                                        $value  = $request->caseId;
                                    } else {
                                        if ($request->bloggerId) {
                                            $column = 'blogger_id';
                                            $value  = $request->bloggerId;
                                        } else {
                                            if ($request->customerId) {
                                                $column = 'customer_id';
                                                $value  = $request->customerId;
                                            } else {
                                                if ($request->oldID) {
                                                    $column = 'old_id';
                                                    $value  = $request->oldId;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        $select_fields = ['id', 'customer_id', 'number', 'user_id', 'erp_user', 'assigned_to', 'approved', 'status', 'sent', 'error_status', 'resent', 'created_at', 'media_url', 'message'];
        if ($request->caseId) {
            array_push($select_fields, 'lawyer_id');
        }
        $messages = ChatMessage::select($select_fields)->where($column, $value)->where('status', '!=', 7);

        if ($request->caseId) {
            $messages = $messages->with('lawyer:id,name');
        }

        if (Setting::get('show_automated_messages') == 0) {
            $messages = $messages->where('status', '!=', 9);
        }

        if ($request->erpUser) {
            $messages = $messages->whereNull('task_id');
        }

        // IS IT NECESSARY ?
        if ($request->get('elapse')) {
            $elapse = (int) $request->get('elapse');
            $date   = new \DateTime;
            $date->modify(sprintf('-%s seconds', $elapse));
        }

        foreach ($messages->latest()->get() as $message) {
            $messageParams = [
                'id'           => $message->id,
                'number'       => $message->number,
                'assigned_to'  => $message->assigned_to,
                'created_at'   => Carbon::parse($message->created_at)->format('Y-m-d H:i:s'),
                'approved'     => $message->approved,
                'status'       => $message->status,
                'user_id'      => $message->user_id,
                'erp_user'     => $message->erp_user,
                'sent'         => $message->sent,
                'resent'       => $message->resent,
                'error_status' => $message->error_status,
            ];
            if ($request->caseId) {
                $messageParams['lawyer'] = optional($message->lawyer)->name;
            }

            if ($message->media_url) {
                $messageParams['media_url']    = $message->media_url;
                $headers                       = get_headers($message->media_url, 1);
                $messageParams['content_type'] = $headers['Content-Type'][1];
            }

            if ($message->message) {
                $messageParams['message'] = $message->message;
            }

            if ($message->hasMedia(config('constants.media_tags'))) {
                $images_array = [];

                foreach ($message->getMedia(config('constants.media_tags')) as $key => $image) {
                    $temp_image = [
                        'key'           => $image->getKey(),
                        'image'         => getMediaUrl($image),
                        'product_id'    => '',
                        'special_price' => '',
                        'size'          => '',
                    ];

                    $image_key     = $image->getKey();
                    $mediable_type = 'Product';

                    $product_image = Product::with('Media')
                        ->whereRaw("products.id IN (SELECT mediables.mediable_id FROM mediables WHERE mediables.media_id = $image_key AND mediables.mediable_type LIKE '%$mediable_type%')")
                        ->select(['id', 'price_inr_special', 'supplier', 'size', 'lmeasurement', 'hmeasurement', 'dmeasurement'])->first();

                    if ($product_image) {
                        $temp_image['product_id']    = $product_image->id;
                        $temp_image['special_price'] = $product_image->price_inr_special;

                        $string = $product_image->supplier;
                        $expr   = '/(?<=\s|^)[a-z]/i';
                        preg_match_all($expr, $string, $matches);
                        $supplier_initials               = implode('', $matches[0]);
                        $temp_image['supplier_initials'] = strtoupper($supplier_initials);

                        if ($product_image->size != null) {
                            $temp_image['size'] = $product_image->size;
                        } else {
                            $temp_image['size'] = (string) $product_image->lmeasurement . ', ' . (string) $product_image->hmeasurement . ', ' . (string) $product_image->dmeasurement;
                        }
                    }

                    array_push($images_array, $temp_image);
                }

                $messageParams['images'] = $images_array;
            }

            $result[] = array_merge($params, $messageParams);
        }

        $result      = array_values(collect($result)->sortBy('created_at')->reverse()->toArray());
        $currentPage = LengthAwarePaginator::resolveCurrentPage();
        $perPage     = 10000;

        if ($request->page) {
            $currentItems = array_slice($result, $perPage * ($currentPage - 1), $perPage);
        } else {
            $currentItems = array_reverse(array_slice($result, $perPage * ($currentPage - 1), $perPage));
            $result       = array_reverse($result);
        }

        $result = new LengthAwarePaginator($currentItems, count($result), $perPage, $currentPage, [
            'path' => LengthAwarePaginator::resolveCurrentPath(),
        ]);

        return response()->json($result);
    }

    public function approveMessage($context, Request $request, $chat_id = 0)
    {
        $defCustomer = '971547763482';

        $message     = ChatMessage::findOrFail($request->get('messageId'));
        $today_date  = Carbon::now()->format('Y-m-d');
        $is_mail     = 0;
        $model_id    = '';
        $model_class = '';
        $toemail     = '';
        $subject     = $request->get('subject') ?? null;
        if ($chat_id > 0) {
            $m = ChatMessage::where('id', $chat_id)->first();

            if ($m) {
                $is_mail = $m->is_email;
            }
        }

        if ($context == 'customer') {
            // check the customer message
            $customer = \App\Customer::find($message->customer_id);

            $model_id    = $message->customer_id;
            $model_class = \App\Customer::class;
            $toemail     = $customer->email;

            if (Setting::get('whatsapp_number_change') == 1) {
                $customer    = Customer::find($message->customer_id);
                $default_api = ApiKey::where('default', 1)->first();

                if (! $customer->whatsapp_number_change_notified() && $default_api->number != $customer->whatsapp_number) {
                    $params = [
                        'number'      => null,
                        'user_id'     => Auth::id(),
                        'approved'    => 1,
                        'status'      => 9,
                        'customer_id' => $message->customer_id,
                        'message'     => 'Our whatsapp number has changed',
                    ];

                    $additional_message = ChatMessage::create($params);

                    CommunicationHistory::create([
                        'model_id'   => $customer->id,
                        'model_type' => Customer::class,
                        'type'       => 'number-change',
                        'method'     => 'whatsapp',
                    ]);
                }
            }
            if (isset($customer)) {
                $phone           = $customer->phone;
                $whatsapp_number = $customer->whatsapp_number;
            } else {
                $customer = Customer::find($message->customer_id);
                if ($customer) {
                    $phone           = $customer->phone;
                    $whatsapp_number = $customer->whatsapp_number;
                }
            }
        } else {
            if ($context == 'supplier') {
                $supplier = Supplier::find($message->supplier_id);
                $phone    = $supplier->default_phone;
                if (empty($supplier->whatsapp_number)) {
                    $whatsapp_number = '971502609192';
                } else {
                    $whatsapp_number = $supplier->whatsapp_number;
                }
                $toemail     = $supplier->email;
                $model_id    = $message->supplier_id;
                $model_class = \App\Supplier::class;
            } else {
                if ($context == 'vendor') {
                    $vendor          = Vendor::find($message->vendor_id);
                    $phone           = $vendor->default_phone;
                    $whatsapp_number = $vendor->whatsapp_number;
                    $toemail         = $vendor->email;
                    $model_id        = $message->vendor_id;
                    $model_class     = \App\Vendor::class;
                } else {
                    if ($context == 'task') {
                        $sender = User::find($message->user_id);

                        $isUser = false;
                        if ($message->erp_user == '') {
                            $receiver = Contact::find($message->contact_id);
                        } else {
                            $isUser   = true;
                            $receiver = User::find($message->erp_user);
                        }

                        $phone           = @$receiver->phone;
                        $whatsapp_number = ($receiver && $isUser) ? $receiver->whatsapp_number : $sender->whatsapp_number;
                    } else {
                        if ($context == 'user') {
                            $sender = User::find($message->user_id);
                            $isUser = false;
                            if ($message->erp_user != '') {
                                $isUser   = true;
                                $receiver = User::find($message->erp_user);
                            } else {
                                $receiver = Contact::find($message->contact_id);
                            }

                            $phone           = $receiver->phone;
                            $whatsapp_number = ($receiver && $isUser) ? $receiver->whatsapp_number : $sender->whatsapp_number;
                        } else {
                            if ($context == 'dubbizle') {
                                $dubbizle        = Dubbizle::find($message->dubbizle_id);
                                $phone           = $dubbizle->phone_number;
                                $whatsapp_number = '971502609192';
                            } else {
                                if ($context == 'lawyer') {
                                    $lawyer          = Lawyer::find($message->lawyer_id);
                                    $phone           = $lawyer->default_phone;
                                    $whatsapp_number = $lawyer->whatsapp_number;
                                } else {
                                    if ($context == 'case') {
                                        $case   = LegalCase::find($message->case_id);
                                        $lawyer = $case->lawyer;
                                        if ($lawyer) {
                                            $phone = $lawyer->default_phone;
                                        } else {
                                            $phone = '';
                                        }
                                        $whatsapp_number = $case->whatsapp_number;
                                    } else {
                                        if ($context == 'blogger') {
                                            $blogger         = Blogger::find($message->blogger_id);
                                            $phone           = $blogger->default_phone;
                                            $whatsapp_number = $blogger->whatsapp_number;
                                        } else {
                                            if ($context == 'old') {
                                                $old             = Old::find($message->old_id);
                                                $phone           = $old->phone;
                                                $whatsapp_number = '';
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        $data = '';

        if ($message->message != '') {
            if ($context == 'supplier' || $context == 'customer' || $context == 'vendor' || $context == 'task' || $context == 'charity' || $context == 'dubbizle' || $context == 'lawyer' || $context == 'case' || $context == 'blogger' || $context == 'old' || $context == 'hubstuff' || $context == 'user-feedback' || $context == 'user-feedback-hrTicket' || $context == 'SOP-Data' || $context == 'timedoctor' || $context == 'email') {
                if ($context == 'supplier') {
                    $supplierDetails = Supplier::find($message->supplier_id);
                    $language        = $supplierDetails->language;
                    $model_id        = $message->supplier_id;
                    $model_class     = \App\Supplier::class;
                    $toemail         = $supplierDetails->email;
                    if ($language != null) {
                        try {
                            $result  = TranslationHelper::translate('en', $language, $message->message);
                            $history = [
                                'msg_id'        => $message->id,
                                'supplier_id'   => $message->supplier_id,
                                'original_msg'  => $message->message,
                                'translate_msg' => '(' . $language . ') ' . $result,
                                'error_log'     => 'N/A',
                            ];
                            \App\SupplierTranslateHistory::insert($history);
                        } catch (\Throwable $e) {
                            $history = [
                                'msg_id'        => $message->id,
                                'supplier_id'   => $message->supplier_id,
                                'original_msg'  => $message->message,
                                'translate_msg' => null,
                                'error_log'     => $e->getMessage(),
                            ];
                            \App\SupplierTranslateHistory::insert($history);
                            throw new Exception($e->getMessage(), 1);
                        }
                        $message->message = $result;
                    }
                }
                if ($context == 'customer') {
                    $supplierDetails = Customer::find($message->supplier_id);
                    $language        = isset($supplierDetails) && $supplierDetails ? $supplierDetails->language : '';
                    if ($language != null) {
                        $result           = TranslationHelper::translate('en', $language, $message->message);
                        $message->message = $result;
                    }
                }

                if ($context == 'user-feedback') {
                    $userDetails     = User::find($message->user_id);
                    $model_id        = $message->user_id;
                    $model_class     = \App\User::class;
                    $toemail         = $userDetails->email;
                    $phone           = $userDetails->phone;
                    $user            = \Auth::user();
                    $whatsapp_number = $user->whatsapp_number;
                    $language        = $userDetails->language;
                    if ($language != null) {
                        $result           = TranslationHelper::translate('en', $language, $message->message);
                        $message->message = $result;
                    }
                }
                if ($context == 'user-feedback-hrTicket') {
                    $userDetails     = User::find($message->user_id);
                    $model_id        = $message->user_id;
                    $model_class     = \App\User::class;
                    $toemail         = $userDetails->email;
                    $phone           = $userDetails->phone;
                    $user            = \Auth::user();
                    $whatsapp_number = $user->whatsapp_number;
                    $language        = $userDetails->language;
                    if ($language != null) {
                        $result           = TranslationHelper::translate('en', $language, $message->message);
                        $message->message = $result;
                    }
                }
                if ($context == 'charity') {
                    $msg             = ChatMessage::where('id', $request->messageId)->first();
                    $charity         = CustomerCharity::find($msg->charity_id);
                    $phone           = $charity->phone;
                    $whatsapp_number = Auth::user()->whatsapp_number;
                    $model_id        = $msg->charity_id;
                    $model_class     = \App\CustomerCharity::class;
                    $toemail         = $charity->email;
                }
                if ($context == 'SOP-Data') {
                    $user = User::find($message->sop_user_id);

                    $phone           = $user->phone;
                    $whatsapp_number = $user->whatsapp_number;
                    $model_id        = $message->sop_user_id;
                    $toemail         = $user->email;
                    $model_class     = \App\User::class;
                }
                if ($context == 'hubstuff') {
                    $user            = User::find($message->hubstuff_activity_user_id);
                    $phone           = $user->phone;
                    $toemail         = $user->email;
                    $whatsapp_number = Auth::user()->whatsapp_number;
                    $model_id        = $message->user_id;
                    $model_class     = \App\User::class;
                }

                if ($context == 'timedoctor') {
                    $user            = User::find($message->time_doctor_activity_user_id);
                    $phone           = $user->phone;
                    $toemail         = $user->email;
                    $whatsapp_number = Auth::user()->whatsapp_number;
                    $model_id        = $message->user_id;
                    $model_class     = \App\User::class;
                }

                if ($context == 'email') {
                    $emailObj    = Email::find($message->email_id);
                    $toemail     = $emailObj->to;
                    $model_id    = $message->email_id;
                    $model_class = \App\Email::class;
                }

                if ($is_mail == 1) {
                    $sendResult = $this->sendemail($message, $model_id, $model_class, $toemail, $chat_id, $subject);
                }
                if ($is_mail == 2) {
                    WebNotificationController::sendBulkNotification($message->user_id, $subject, $message->message);
                } else {
                    //
                }
            } else {
                if ($is_mail == 1) {
                    $sendResult = $this->sendemail($message, $model_id, $model_class, $toemail, $chat_id);
                }
                if ($is_mail == 2) {
                    WebNotificationController::sendBulkNotification($message->user_id, $subject, $message->message);
                } else {
                    //
                }
            }

            // Store send result
            if (isset($sendResult) && $sendResult) {
                $message->unique_id = $sendResult['id'] ?? '';
                $message->save();
            }
        }

        $sendMediaFile = true;
        if ($message->media_url != '') {
            // Store send result
            if (isset($sendResult) && $sendResult) {
                $message->unique_id = $sendResult['id'] ?? '';
                $message->save();
            }
            // check here that image media url is temp created if so we can delete that
            if (strpos($message->media_url, 'instant_message_') !== false) {
                $sendMediaFile = false;
                $path          = parse_url($message->media_url, PHP_URL_PATH);
                if (file_exists(public_path($path)) && strpos($message->media_url, $path) !== false) {
                    @unlink(public_path($path));
                    $message->media_url = null;
                    $message->save();
                }
            }
        }

        $images = $message->getMedia(config('constants.media_tags'));
        if (! empty($images) && $sendMediaFile) {
            $count = 0;
            foreach ($images as $key => $image) {
                $send = str_replace(' ', '%20', getMediaUrl($image));

                if ($context == 'task' || $context == 'vendor' || $context == 'supplier') {
                    // Store send result
                    if (isset($sendResult) && $sendResult) {
                        $message->unique_id = $sendResult['id'] ?? '';
                        $message->save();
                    }
                } else {
                    if ($count < 5) {
                        $count++;
                    } else {
                        sleep(5);

                        $count = 0;
                    }

                    // Store send result
                    if (isset($sendResult) && $sendResult) {
                        $message->unique_id = $sendResult['id'] ?? '';
                        $message->save();
                    }
                }
            }
        }

        $message->update([
            'approved'   => 1,
            'is_queue'   => 0,
            'status'     => 2,
            'created_at' => Carbon::now(),
        ]);

        return response()->json([
            'data' => $data,
        ], 200);
    }

    public function sendToAll(Request $request, $validate = true)
    {
        set_time_limit(0);
        if ($validate) {
            $this->validate($request, [
                'sending_time' => 'required|date',
                'frequency'    => 'required|numeric',
                'rating'       => 'sometimes|nullable|numeric',
                'gender'       => 'sometimes|nullable|string',
            ]);
        }

        $frequency = $request->frequency;

        if ($request->image_id != '') {
            $broadcast_image = BroadcastImage::find($request->image_id);
            if ($broadcast_image->hasMedia(config('constants.media_tags'))) {
                foreach ($broadcast_image->getMedia(config('constants.media_tags')) as $key2 => $brod_image) {
                    $content['image']['url'] = getMediaUrl($brod_image);
                    $content['image']['key'] = $brod_image->getKey();
                }
            }
        }
        //Broadcast For Whatsapp
        if (($request->to_all || $request->moduletype == 'customers') && $request->platform == 'whatsapp') {
            // Create empty array for checking numbers
            $arrCustomerNumbers = [];

            // Get all numbers from config
            $configs = WhatsappConfig::where('is_customer_support', 0)->get();

            //Loop over numbers
            foreach ($configs as $arrNumber) {
                if ($arrNumber['number']) {
                    $arrBroadcastNumbers[] = $arrNumber['number'];
                }
            }

            $minutes      = round(60 / $frequency);
            $max_group_id = ChatMessage::where('status', 8)->max('group_id') + 1;

            $data = Customer::whereNotNull('phone')->where('do_not_disturb', 0);

            if ($request->rating != '') {
                $data = $data->where('rating', $request->rating);
            }

            if ($request->gender != '') {
                $data = $data->where('gender', $request->gender);
            }

            if ($request->shoe_size != '') {
                $data = $data->where('shoe_size', $request->shoe_size);
            }

            if ($request->clothing_size != '') {
                $data = $data->where('clothing_size', $request->clothing_size);
            }

            $data = $data->get()->groupBy('broadcast_number');

            foreach ($data as $broadcastNumber => $customers) {
                $now     = $request->sending_time ? Carbon::parse($request->sending_time) : Carbon::now();
                $morning = Carbon::create($now->year, $now->month, $now->day, 9, 0, 0);
                $evening = Carbon::create($now->year, $now->month, $now->day, 19, 0, 0);

                if (! $now->between($morning, $evening, true)) {
                    if (Carbon::parse($now->format('Y-m-d'))->diffInWeekDays(Carbon::parse($morning->format('Y-m-d')), false) == 0) {
                        // add day
                        $now->addDay();
                        $now     = Carbon::create($now->year, $now->month, $now->day, 9, 0, 0);
                        $morning = Carbon::create($now->year, $now->month, $now->day, 9, 0, 0);
                        $evening = Carbon::create($now->year, $now->month, $now->day, 19, 0, 0);
                    } else {
                        // dont add day
                        $now     = Carbon::create($now->year, $now->month, $now->day, 9, 0, 0);
                        $morning = Carbon::create($now->year, $now->month, $now->day, 9, 0, 0);
                        $evening = Carbon::create($now->year, $now->month, $now->day, 19, 0, 0);
                    }
                }

                if (in_array($broadcastNumber, $arrBroadcastNumbers)) {
                    foreach ($customers as $customer) {
                        //Changes put by satyam for connecting Old BroadCast with New BroadCast page
                        if (isset($customer->customerMarketingPlatformActive)) {
                            if ($customer->customerMarketingPlatformActive->active == 1) {
                                //Checking For DND
                                if ($customer->do_not_disturb == 1) {
                                    continue;
                                }

                                //Checking For Last Message Send 24 hours
                                if (isset($customer->lastImQueueSend) && $customer->lastImQueueSend->sent_at >= Carbon::now()->subDay()->toDateTimeString()) {
                                    continue;
                                }

                                //Check if customer has Phone
                                if ($customer->phone == '' || $customer->phone == null) {
                                    continue;
                                }

                                //Check if customer has broadcast
                                if ($customer->broadcast_number == '' || $customer->broadcast_number == null) {
                                    continue;
                                }

                                $params = [
                                    'number'      => null,
                                    'user_id'     => Auth::id(),
                                    'customer_id' => $customer->id,
                                    'approved'    => 0,
                                    'status'      => 8, // status for Broadcast messages
                                    'group_id'    => $max_group_id,
                                ];

                                $priority = null; // Priority for broadcast messages, now the same as for normal messages
                                if ($request->image_id != null) {
                                    if ($content['image'] != null) {
                                        //Saving Message In Chat Message
                                        $chatMessage = ChatMessage::create($params);
                                        foreach ($content as $url) {
                                            //Attach image to chat message
                                            $chatMessage->attachMedia($url['key'], config('constants.media_tags'));
                                            $priority = 1;
                                            $send     = InstantMessagingHelper::scheduleMessage($customer->phone, $customer->broadcast_number, $request->message, $url['url'], $priority, $now, $max_group_id);
                                            if ($send != false) {
                                                $now->addMinutes($minutes);
                                                $now = InstantMessagingHelper::broadcastSendingTimeCheck($now);
                                            } else {
                                                continue;
                                            }
                                        }
                                    }
                                } elseif ($request->linked_images == null) {
                                    $chatMessage = ChatMessage::create($params);

                                    $send = InstantMessagingHelper::scheduleMessage($customer->phone, $customer->broadcast_number, $request->message, '', $priority, $now, $max_group_id);
                                    if ($send != false) {
                                        $now->addMinutes($minutes);
                                        $now = InstantMessagingHelper::broadcastSendingTimeCheck($now);
                                    }
                                } else {
                                    continue;
                                }

                                //DO NOT REMOVE THIS CODE
                                // MessageQueue::create([
                                //     'user_id' => Auth::id(),
                                //     'customer_id' => $customer->id,
                                //     'phone' => null,
                                //     'type' => 'message_all',
                                //     'data' => json_encode($content),
                                //     'sending_time' => $now,
                                //     'group_id' => $max_group_id
                                // ]);
                            }
                        }
                    }
                }
            }
        //Broadcast for Facebook
        } elseif (strtolower($request->platform) == 'facebook') {
            //Getting Frequency
            $minutes = round(60 / $frequency);
            //Getting Max Id
            $max_group_id = ChatMessage::where('status', 8)->max('group_id') + 1;

            //Getting All Brand Fans
            $brands = BrandFans::all();

            $count = 0;

            //Scheduling Time based on frequency
            $now     = $request->sending_time ? Carbon::parse($request->sending_time) : Carbon::now();
            $morning = Carbon::create($now->year, $now->month, $now->day, 9, 0, 0);
            $evening = Carbon::create($now->year, $now->month, $now->day, 19, 0, 0);

            if (! $now->between($morning, $evening, true)) {
                if (Carbon::parse($now->format('Y-m-d'))->diffInWeekDays(Carbon::parse($morning->format('Y-m-d')), false) == 0) {
                    // add day
                    $now->addDay();
                    $now     = Carbon::create($now->year, $now->month, $now->day, 9, 0, 0);
                    $morning = Carbon::create($now->year, $now->month, $now->day, 9, 0, 0);
                    $evening = Carbon::create($now->year, $now->month, $now->day, 19, 0, 0);
                } else {
                    // dont add day
                    $now     = Carbon::create($now->year, $now->month, $now->day, 9, 0, 0);
                    $morning = Carbon::create($now->year, $now->month, $now->day, 9, 0, 0);
                    $evening = Carbon::create($now->year, $now->month, $now->day, 19, 0, 0);
                }
            }
            $sendingTime = '';

            //Getting Last Broadcast Id
            $broadcastId = ImQueue::groupBy('broadcast_id')->orderby('broadcast_id', 'desc')->first();

            foreach ($brands as $brand) {
                $count++;

                // Convert maxTime to unixtime
                if (empty($sendingTime)) {
                    $maxTime = strtotime($now);
                } else {
                    $now     = $sendingTime ? Carbon::parse($sendingTime) : Carbon::now();
                    $morning = Carbon::create($now->year, $now->month, $now->day, 9, 0, 0);
                    $evening = Carbon::create($now->year, $now->month, $now->day, 19, 0, 0);

                    if (! $now->between($morning, $evening, true)) {
                        if (Carbon::parse($now->format('Y-m-d'))->diffInWeekDays(Carbon::parse($morning->format('Y-m-d')), false) == 0) {
                            // add day
                            $now->addDay();
                            $now     = Carbon::create($now->year, $now->month, $now->day, 9, 0, 0);
                            $morning = Carbon::create($now->year, $now->month, $now->day, 9, 0, 0);
                            $evening = Carbon::create($now->year, $now->month, $now->day, 19, 0, 0);
                        } else {
                            // dont add day
                            $now     = Carbon::create($now->year, $now->month, $now->day, 9, 0, 0);
                            $morning = Carbon::create($now->year, $now->month, $now->day, 9, 0, 0);
                            $evening = Carbon::create($now->year, $now->month, $now->day, 19, 0, 0);
                        }
                    }
                    $sendingTime = $now;
                    $maxTime     = strtotime($sendingTime);
                }

                // Add interval
                $maxTime = $maxTime + (3600 / $request->frequency);

                // Check if it's in the future
                if ($maxTime < time()) {
                    $maxTime = time();
                }

                $sendAfter   = date('Y-m-d H:i:s', $maxTime);
                $sendingTime = $sendAfter;
                //Getting Least Number of Messages Send Per Account
                $accounts = Account::where('platform', 'facebook')->where('status', 1)->get();
                $count    = [];
                foreach ($accounts as $account) {
                    $count[] = [$account->imQueueBroadcast->count() => $account->last_name];
                }
                //Arranging In Ascending Order
                ksort($count);
                if (! isset($broadcastId->broadcast_id)) {
                    $broadcastIdLast = 0;
                } else {
                    $broadcastIdLast = $broadcastId->broadcast_id;
                }
                //Just Sending Text To Facebook
                if (isset($content)) {
                    foreach ($content as $url) {
                        if (isset($count[0][key($count[0])])) {
                            $username                         = $count[0][key($count[0])];
                            $queue                            = new ImQueue();
                            $queue->im_client                 = 'facebook';
                            $queue->number_to                 = str_replace('https://www.facebook.com/', '', $brand->profile_url);
                            $queue->number_from               = $username;
                            $queue->text                      = $request->message;
                            $queue->priority                  = null;
                            $queue->image                     = $url['url'];
                            $queue->marketing_message_type_id = 1;
                            $queue->priority                  = 1;
                            $queue->broadcast_id              = ($broadcastIdLast + 1);
                            $queue->send_after                = $sendAfter;
                            $queue->save();
                        }
                    }
                } else {
                    //Sending Text with Image
                    if (isset($count[0][key($count[0])])) {
                        $username                         = $count[0][key($count[0])];
                        $queue                            = new ImQueue();
                        $queue->im_client                 = 'facebook';
                        $queue->number_to                 = str_replace('https://www.facebook.com/', '', $brand->profile_url);
                        $queue->number_from               = $username;
                        $queue->text                      = $request->message;
                        $queue->priority                  = null;
                        $queue->priority                  = 1;
                        $queue->marketing_message_type_id = 1;
                        $queue->broadcast_id              = ($broadcastId->broadcast_id + 1);
                        $queue->send_after                = $sendAfter;
                        $queue->save();
                    }
                }
            }
        } elseif (strtolower($request->platform) == 'instagram') {
            //Getting Cold Leads to Send Message
            $query      = ColdLeads::query();
            $competitor = $request->competitor;
            $limit      = 100;
            //Check if competitor is selected
            if (! empty($competitor)) {
                $comp  = CompetitorPage::find($competitor);
                $query = $query->where('because_of', 'LIKE', '%via ' . $comp->name . '%');
            }
            //check for gender
            if (! empty($request->gender)) {
                $query = $query->where('gender', $request->gender);
            }
            //Get Cold Leads to be send
            $coldleads = $query->where('status', 1)->where('messages_sent', '<', 5)->take($limit)->orderBy('messages_sent', 'ASC')->orderBy('id', 'ASC')->get();
            //Schedulaing Message based on frequency
            $minutes = round(60 / $frequency);

            $count = 0;

            //Scheduling Time based on frequency
            $now     = $request->sending_time ? Carbon::parse($request->sending_time) : Carbon::now();
            $morning = Carbon::create($now->year, $now->month, $now->day, 9, 0, 0);
            $evening = Carbon::create($now->year, $now->month, $now->day, 19, 0, 0);

            if (! $now->between($morning, $evening, true)) {
                if (Carbon::parse($now->format('Y-m-d'))->diffInWeekDays(Carbon::parse($morning->format('Y-m-d')), false) == 0) {
                    // add day
                    $now->addDay();
                    $now     = Carbon::create($now->year, $now->month, $now->day, 9, 0, 0);
                    $morning = Carbon::create($now->year, $now->month, $now->day, 9, 0, 0);
                    $evening = Carbon::create($now->year, $now->month, $now->day, 19, 0, 0);
                } else {
                    // dont add day
                    $now     = Carbon::create($now->year, $now->month, $now->day, 9, 0, 0);
                    $morning = Carbon::create($now->year, $now->month, $now->day, 9, 0, 0);
                    $evening = Carbon::create($now->year, $now->month, $now->day, 19, 0, 0);
                }
            }
            $sendingTime = '';
            //Getting Last Broadcast Id
            $broadcastId = ImQueue::groupBy('broadcast_id')->orderby('broadcast_id', 'desc')->first();

            foreach ($coldleads as $coldlead) {
                $count++;

                // Convert maxTime to unixtime
                if (empty($sendingTime)) {
                    $maxTime = strtotime($now);
                } else {
                    $now     = $sendingTime ? Carbon::parse($sendingTime) : Carbon::now();
                    $morning = Carbon::create($now->year, $now->month, $now->day, 9, 0, 0);
                    $evening = Carbon::create($now->year, $now->month, $now->day, 19, 0, 0);

                    if (! $now->between($morning, $evening, true)) {
                        if (Carbon::parse($now->format('Y-m-d'))->diffInWeekDays(Carbon::parse($morning->format('Y-m-d')), false) == 0) {
                            // add day
                            $now->addDay();
                            $now     = Carbon::create($now->year, $now->month, $now->day, 9, 0, 0);
                            $morning = Carbon::create($now->year, $now->month, $now->day, 9, 0, 0);
                            $evening = Carbon::create($now->year, $now->month, $now->day, 19, 0, 0);
                        } else {
                            // dont add day
                            $now     = Carbon::create($now->year, $now->month, $now->day, 9, 0, 0);
                            $morning = Carbon::create($now->year, $now->month, $now->day, 9, 0, 0);
                            $evening = Carbon::create($now->year, $now->month, $now->day, 19, 0, 0);
                        }
                    }
                    $sendingTime = $now;
                    $maxTime     = strtotime($sendingTime);
                }

                // Add interval
                $maxTime = $maxTime + (3600 / $request->frequency);

                // Check if it's in the future
                if ($maxTime < time()) {
                    $maxTime = time();
                }

                $sendAfter   = date('Y-m-d H:i:s', $maxTime);
                $sendingTime = $sendAfter;

                //Getting Least Number of Messages Send Per Account
                $accounts = Account::where('platform', 'instagram')->where('status', 1)->get();
                $count    = [];
                foreach ($accounts as $account) {
                    $count[] = [$account->imQueueBroadcast->count() => $account->last_name];
                }
                //Arranging In Ascending Order
                ksort($count);

                if (! isset($broadcastId->broadcast_id)) {
                    $broadcastIdLast = 0;
                } else {
                    $broadcastIdLast = $broadcastId->broadcast_id;
                }
                //Sending Text with Image
                if (isset($count[0][key($count[0])])) {
                    $username                         = $count[0][key($count[0])];
                    $queue                            = new ImQueue();
                    $queue->im_client                 = 'instagram';
                    $queue->number_to                 = $coldlead->platform_id;
                    $queue->number_from               = $username;
                    $queue->text                      = $request->message;
                    $queue->priority                  = null;
                    $queue->priority                  = 1;
                    $queue->marketing_message_type_id = 1;
                    $queue->broadcast_id              = ($broadcastIdLast + 1);
                    $queue->send_after                = $sendAfter;
                    $queue->save();
                }
            }
        } else {
            $minutes      = round(60 / $frequency);
            $now          = $request->sending_time ? Carbon::parse($request->sending_time) : Carbon::now();
            $morning      = Carbon::create($now->year, $now->month, $now->day, 9, 0, 0);
            $evening      = Carbon::create($now->year, $now->month, $now->day, 18, 0, 0);
            $max_group_id = MessageQueue::max('group_id') + 1;
            $array        = Excel::toArray(new CustomerNumberImport, $request->file('file'));

            foreach ($array as $item) {
                foreach ($item as $it) {
                    $number = (int) $it[0];

                    if (! $now->between($morning, $evening, true)) {
                        if (Carbon::parse($now->format('Y-m-d'))->diffInWeekDays(Carbon::parse($morning->format('Y-m-d')), false) == 0) {
                            // add day
                            $now->addDay();
                            $now     = Carbon::create($now->year, $now->month, $now->day, 9, 0, 0);
                            $morning = Carbon::create($now->year, $now->month, $now->day, 9, 0, 0);
                            $evening = Carbon::create($now->year, $now->month, $now->day, 18, 0, 0);
                        } else {
                            // dont add day
                            $now     = Carbon::create($now->year, $now->month, $now->day, 9, 0, 0);
                            $morning = Carbon::create($now->year, $now->month, $now->day, 9, 0, 0);
                            $evening = Carbon::create($now->year, $now->month, $now->day, 18, 0, 0);
                        }
                    }

                    MessageQueue::create([
                        'user_id'         => Auth::id(),
                        'customer_id'     => null,
                        'phone'           => $number,
                        'whatsapp_number' => $request->whatsapp_number,
                        'type'            => 'message_selected',
                        'data'            => json_encode($content),
                        'sending_time'    => $now,
                        'group_id'        => $max_group_id,
                    ]);

                    $now->addMinutes($minutes);
                }
            }
        }

        return redirect()->route('broadcast.images')->with('success', 'Messages are being sent in the background!');
    }

    public function resendMessage2(Request $request)
    {
        $messageId = $request->get('message_id');
        $message   = ChatMessage::find($messageId);

        $requestData = new Request();
        $requestData->setMethod('POST');
        $requestData->request->add(['customer_id' => $message->customer_id, 'message' => $message->message, 'status' => 1]);

        return $this->sendMessage($requestData, 'customer', true);
    }

    public function stopAll()
    {
        $message_queues = ImQueue::whereNull('sent_at')->get();

        foreach ($message_queues as $message_queue) {
            $message_queue->send_after = null;
            $message_queue->save();
        }

        return redirect()->back()->with('success', 'Messages stopped processing!');
    }

    public function sendWithWhatsApp($number, $sendNumber, $text, $validation = true, $chat_message_id = null)
    {
        $logDetail = [
            'number'          => $number,
            'whatsapp_number' => $sendNumber,
            'message'         => $text,
            'validation'      => $validation,
            'chat_message_id' => $chat_message_id,
        ];
        if ($validation == true) {
            if (Auth::id() != 3) {
                if (strlen($number) != 12 || ! preg_match('/^[91]{2}/', $number)) {
                    // DON'T THROW EXCEPTION
                    // throw new Exception("Invalid number format. Must be 12 digits and start with 91");
                    \Log::channel('whatsapp')->debug('(file ' . __FILE__ . ' line ' . __LINE__ . ') Invalid number format. Must be 12 digits and start with 91: ' . $number . ' [' . json_encode($logDetail) . '] ');

                    return false;
                }
            }
        }

        $api_keys = ApiKey::all();

        foreach ($api_keys as $api_key) {
            if ($api_key->number == $number) {
                return;
            }
        }
        $startTime = date('Y-m-d H:i:s', LARAVEL_START);
        $curl      = curl_init();

        if (Setting::get('whatsapp_number_change') == 1) {
            $keys = \Config::get('apiwha.api_keys');
            $key  = $keys[0]['key'];

            foreach ($api_keys as $api_key) {
                if ($api_key->default == 1) {
                    $key = $api_key->key;
                }
            }
        } else {
            if (is_null($sendNumber)) {
                $keys = \Config::get('apiwha.api_keys');
                $key  = $keys[0]['key'];

                foreach ($api_keys as $api_key) {
                    if ($api_key->default == 1) {
                        $key = $api_key->key;
                    }
                }
            } else {
                $keys = \Config::get('apiwha.api_keys');
                $key  = $keys[0]['key'];

                foreach ($api_keys as $api_key) {
                    if ($api_key->default == 1) {
                        $key = $api_key->key;
                    }
                }

                foreach ($api_keys as $api_key) {
                    if ($api_key->number == $sendNumber) {
                        $key = $api_key->key;
                    }
                }
            }
        }

        $encodedNumber = urlencode($number);
        $encodedText   = urlencode($text);

        if ($chat_message_id) {
            $custom_data = [
                'chat_message_id' => $chat_message_id,
            ];

            $encodedCustomData = urlencode(json_encode($custom_data));
        } else {
            $encodedCustomData = '';
        }
        $url = 'https://panel.apiwha.com/send_message.php?apikey=' . $key . '&number=' . $encodedNumber . '&text=' . $encodedText . '&custom_data=' . $encodedCustomData;
        curl_setopt_array($curl, [
            CURLOPT_URL            => $url,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING       => '',
            CURLOPT_MAXREDIRS      => 10,
            CURLOPT_TIMEOUT        => 30,
            CURLOPT_HTTP_VERSION   => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST  => 'GET',
        ]);

        $response = curl_exec($curl);
        $err      = curl_error($curl);
        $httpcode = curl_getinfo($curl, CURLINFO_HTTP_CODE);

        curl_close($curl);
        LogRequest::log($startTime, $url, 'GET', json_encode($logDetail), $response, $httpcode, \App\Http\Controllers\WhatsAppController::class, 'sendWithWhatsApp');

        if ($err) {
            // DON'T THROW EXCEPTION
            // throw new Exception("cURL Error #:" . $err);
            \Log::channel('whatsapp')->debug('(file ' . __FILE__ . ' line ' . __LINE__ . ') cURL Error for number ' . $number . ':' . $err . ' [' . json_encode($logDetail) . '] ');

            return false;
        } else {
            $result = json_decode($response);
            if (! $result->success) {
                // DON'T THROW EXCEPTION
                //throw new Exception("whatsapp request error: " . $result->description);
                \Log::channel('whatsapp')->debug('(file ' . __FILE__ . ' line ' . __LINE__ . ') WhatsApp request error for number ' . $number . ': ' . $result->description . ' [' . json_encode($logDetail) . '] ');

                return false;
            } else {
                // Log successful send
                \Log::channel('whatsapp')->debug('(file ' . __FILE__ . ' line ' . __LINE__ . ') Message was sent to number ' . $number . ':' . $response . ' [' . json_encode($logDetail) . '] ');
            }
        }
    }

    public function pullApiwha()
    {
        $curl = curl_init();

        $key = 'Z802FWHI8E2OP0X120QR';

        $encodedNumber = urlencode('917534013101');
        $encodedType   = urlencode('IN');

        $url = 'https://panel.apiwha.com/get_messages.php?apikey=' . $key . '&type=' . $encodedType . '&number=' . $encodedNumber;
        curl_setopt_array($curl, [
            CURLOPT_URL            => $url,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING       => '',
            CURLOPT_MAXREDIRS      => 10,
            CURLOPT_TIMEOUT        => 120,
            CURLOPT_HTTP_VERSION   => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST  => 'GET',
        ]);

        $response   = curl_exec($curl);
        $err        = curl_error($curl);
        $httpcode   = curl_getinfo($curl, CURLINFO_HTTP_CODE);
        $startTime  = date('Y-m-d H:i:s', LARAVEL_START);
        $parameters = [];
        curl_close($curl);

        LogRequest::log($startTime, $url, 'GET', json_encode($parameters), json_decode($response), $httpcode, \App\Http\Controllers\WhatsAppController::class, 'pullApiwha');

        if ($err) {
            // DON'T THROW EXCEPTION
            // throw new Exception( "cURL Error #:" . $err );
            \Log::channel('whatsapp')->debug('(file ' . __FILE__ . ' line ' . __LINE__ . ') cURL Error for number ' . $number . ':' . $err);

            return false;
        } else {
            $result = json_decode($response, true);
        }

        $filtered_data = [];

        foreach ($result as $item) {
            if (Carbon::parse($item['creation_date'])->gt(Carbon::parse('2019-06-17 00:00:00'))) {
                $filtered_data[] = $item;
                $customer        = $this->findCustomerByNumber($item['from']);

                if ($customer) {
                    $params = [
                        'number'      => $item['from'],
                        'customer_id' => $customer->id,
                        'message'     => $item['text'],
                        'created_at'  => $item['creation_date'],
                    ];
                }
            }
        }

        return $result;
    }

    public function sendWithNewApi($number, $whatsapp_number = null, $message = null, $file = null, $chat_message_id = null, $enqueue = 'opportunistic')
    {
        $logDetail = [
            'number'          => $number,
            'whatsapp_number' => $whatsapp_number,
            'message'         => $message,
            'file'            => $file,
            'chat_message_id' => $chat_message_id,
            'enqueue'         => $enqueue,
        ];

        $configs       = \Config::get('wassenger.api_keys');
        $encodedNumber = '+' . $number;
        $encodedText   = $message;
        $wa_token      = $configs[0]['key'];

        if ($whatsapp_number != null) {
            foreach ($configs as $key => $config) {
                if ($config['number'] == $whatsapp_number) {
                    $wa_device = $config['device'];

                    break;
                }

                $wa_device = $configs[0]['device'];
            }
        } else {
            $wa_device = $configs[0]['device'];
        }

        if ($file != null) {
            $file_exploded = explode('/', $file);
            $encoded_part  = str_replace('%25', '%', urlencode(str_replace(' ', '%20', $file_exploded[count($file_exploded) - 1])));
            array_pop($file_exploded);
            array_push($file_exploded, $encoded_part);

            $file_encoded = implode('/', $file_exploded);

            $array = [
                'url' => "$file_encoded",
            ];

            $curl = curl_init();
            $url  = "https://api.wassenger.com/v1/files?reference=$chat_message_id";

            curl_setopt_array($curl, [
                CURLOPT_URL            => $url,
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_ENCODING       => '',
                CURLOPT_MAXREDIRS      => 10,
                CURLOPT_TIMEOUT        => 180,
                CURLOPT_HTTP_VERSION   => CURL_HTTP_VERSION_1_1,
                CURLOPT_CUSTOMREQUEST  => 'POST',
                CURLOPT_POSTFIELDS     => json_encode($array),
                CURLOPT_HTTPHEADER     => [
                    'content-type: application/json',
                    "token: $wa_token",
                ],
            ]);

            $response  = curl_exec($curl);
            $err       = curl_error($curl);
            $httpcode  = curl_getinfo($curl, CURLINFO_HTTP_CODE);
            $startTime = date('Y-m-d H:i:s', LARAVEL_START);

            curl_close($curl);

            LogRequest::log($startTime, $url, 'POST', json_encode($array), json_decode($response), $httpcode, \App\Http\Controllers\WhatsAppController::class, 'sendWithNewApi');
            // throw new Exception("cURL Error #: whatttt");
            if ($err) {
                // DON'T THROW EXCEPTION
                //throw new Exception( "cURL Error #:" . $err );
                \Log::channel('whatsapp')->debug('(file ' . __FILE__ . ' line ' . __LINE__ . ') cURL Error for number ' . $number . ':' . $err . ' [' . json_encode($logDetail) . '] ');

                return false;
            } else {
                $result = json_decode($response, true);

                if (is_array($result)) {
                    if (array_key_exists('status', $result)) {
                        if ($result['status'] == 409) {
                            $image_id = $result['meta']['file'];
                        } else {
                            // DON'T THROW EXCEPTION
                            // throw new Exception( "Something was wrong with image: " . $result[ 'message' ] );
                            \Log::channel('whatsapp')->debug('(file ' . __FILE__ . ' line ' . __LINE__ . ') Something was wrong with the image for number ' . $number . ':' . $result['message'] . ' [' . json_encode($logDetail) . '] ');

                            return false;
                        }
                    } else {
                        $image_id = $result[0]['id'];
                    }
                }
            }
        }
        $array = [
            'phone'     => $encodedNumber,
            'message'   => (string) $encodedText,
            'reference' => (string) $chat_message_id,
            'device'    => "$wa_device",
            'enqueue'   => "$enqueue",
        ];

        if (isset($image_id)) {
            $array['media'] = [
                'file' => "$image_id",
            ];
        }

        $curl = curl_init();
        $url  = 'https://api.wassenger.com/v1/messages';

        curl_setopt_array($curl, [
            CURLOPT_URL            => $url,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING       => '',
            CURLOPT_MAXREDIRS      => 10,
            CURLOPT_TIMEOUT        => 180,
            CURLOPT_HTTP_VERSION   => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST  => 'POST',
            CURLOPT_POSTFIELDS     => json_encode($array),
            CURLOPT_HTTPHEADER     => [
                'content-type: application/json',
                "token: $wa_token",
            ],
        ]);

        $response  = curl_exec($curl);
        $err       = curl_error($curl);
        $http_code = curl_getinfo($curl, CURLINFO_HTTP_CODE);
        curl_close($curl);

        LogRequest::log($startTime, $url, 'POST', json_encode($array), json_decode($response), $httpcode, \App\Http\Controllers\WhatsAppController::class, 'sendWithNewApi');

        if ($err) {
            // DON'T THROW EXCEPTION
            // throw new Exception( "cURL Error #:" . $err );
            \Log::channel('whatsapp')->debug('(file ' . __FILE__ . ' line ' . __LINE__ . ') cURL Error for number ' . $number . ':' . $err . ' [' . json_encode($logDetail) . '] ');

            return false;
        } else {
            $result = json_decode($response, true);

            if ($http_code != 201) {
                // DON'T THROW EXCEPTION
                // throw new Exception( "Something was wrong with message: " . $response );
                \Log::channel('whatsapp')->debug('(file ' . __FILE__ . ' line ' . __LINE__ . ') Something was wrong with the message for number ' . $number . ':' . $response . ' [' . json_encode($logDetail) . '] ');

                return false;
            } else {
                // Log successful send
                \Log::channel('whatsapp')->debug('(file ' . __FILE__ . ' line ' . __LINE__ . ') Message was sent to number ' . $number . ':' . $response . ' [' . json_encode($logDetail) . '] ');
            }
        }

        return $result;
    }

    public function sendWithThirdApi($number, $whatsapp_number = null, $message = null, $file = null, $chat_message_id = null, $enqueue = 'opportunistic', $customer_id = null)
    {
        $logDetail = [
            'number'          => $number,
            'whatsapp_number' => $whatsapp_number,
            'message'         => $message,
            'file'            => $file,
            'chat_message_id' => $chat_message_id,
            'enqueue'         => $enqueue,
            'customer_id'     => $customer_id,
        ];

        $startTime = date('Y-m-d H:i:s', LARAVEL_START);

        // Get configs
        $config        = \Config::get('apiwha.instances');
        $whatAppConfig = WhatsappConfig::where('number', $whatsapp_number)->where('status', 1)->first();
        if (! $whatAppConfig) {
            // check if number is set or not then call from the table
            if (! isset($config[$whatsapp_number])) {
                $whatsappRecord = \App\Marketing\WhatsappConfig::where('provider', 'wassenger')
                    ->where('instance_id', '!=', '')
                    ->where('token', '!=', '')
                    ->where('status', 1)
                    ->where('number', $whatsapp_number)
                    ->first();

                if ($whatsappRecord) {
                    $config[$whatsapp_number] = [
                        'instance_id' => $whatsappRecord->instance_id,
                        'token'       => $whatsappRecord->token,
                        'is_use_own'  => $whatsappRecord->is_use_own,
                    ];
                }
            }
        } else {
            if ($whatAppConfig->provicer == 'official-whatsapp') {
                $whatsappAccount          = WhatsappBusinessAccounts::where('id', $whatAppConfig->instance_id)->first();
                $config[$whatsapp_number] = [
                    'provider'    => 'official-whatsapp',
                    'instance_id' => $whatsappAccount->id,
                    'token'       => $whatsappAccount->business_access_token,
                    'is_use_own'  => $whatAppConfig->is_use_own,
                ];
            } else {
                $config[$whatsapp_number] = [
                    'instance_id' => $whatAppConfig->instance_id,
                    'token'       => $whatAppConfig->token,
                    'is_use_own'  => $whatAppConfig->is_use_own,
                ];
            }
        }

        $chatMessage = null;
        if ($chat_message_id > 0) {
            $chatMessage = \App\ChatMessage::find($chat_message_id);
        }
        // Set instanceId and token
        $isUseOwn = false;
        if (isset($config[$whatsapp_number])) {
            $instanceId = $config[$whatsapp_number]['instance_id'];
            $token      = $config[$whatsapp_number]['token'];
            $isUseOwn   = isset($config[$whatsapp_number]['is_use_own']) ? $config[$whatsapp_number]['is_use_own'] : 0;
        } else {
            \Log::channel('whatsapp')->debug('(file ' . __FILE__ . ' line ' . __LINE__ . ') Whatsapp config not found for number ' . $whatsapp_number . ' while sending to number ' . $number . ' [' . json_encode($logDetail) . '] ');
            $instanceId = $config[0]['instance_id'];
            $token      = $config[0]['token'];
            $isUseOwn   = isset($config[0]['is_use_own']) ? $config[0]['is_use_own'] : 0;
        }
        if (isset($customer_id) && $message != null && $message != '') {
            $customer = Customer::findOrFail($customer_id);

            $fields = ['[[NAME]]' => $customer->name, '[[CITY]]' => $customer->city, '[[EMAIL]]' => $customer->email, '[[PHONE]]' => $customer->phone, '[[PINCODE]]' => $customer->pincode, '[[WHATSAPP_NUMBER]]' => $customer->whatsapp_number, '[[SHOESIZE]]' => $customer->shoe_size, '[[CLOTHINGSIZE]]' => $customer->clothing_size];

            preg_match_all("/\[[^\]]*\]]/", $message, $matches);
            $values = $matches[0];

            foreach ($values as $value) {
                if (isset($fields[$value])) {
                    $message = str_replace($value, $fields[$value], $message);
                }
            }
        }

        $encodedNumber = '+' . $number;
        if ($isUseOwn == 1) {
            $encodedNumber = $number;
        }

        $encodedText = $message;

        $array = [
            'phone' => $encodedNumber,
        ];

        if ($encodedText != null && $file == null) {
            $array['body'] = $encodedText;
            $link          = 'sendMessage';
        } else {
            $exploded          = explode('/', $file);
            $filename          = end($exploded);
            $array['body']     = $file;
            $array['filename'] = $filename;
            $link              = 'sendFile';
            $array['caption']  = $encodedText;
        }

        $array['instanceId'] = $instanceId;
        // here is we call python
        if ($isUseOwn == 1) {
            $domain = 'http://167.86.89.241:82/' . $link;
        } else {
            if (isset($config[$whatsapp_number]['provider']) && $config[$whatsapp_number]['provider'] == 'wassenger') {
                $domain           = 'https://api.wassenger.com/v1/messages?token=' . $token;
                $array['message'] = $array['body'];
                $array['device']  = $array['instanceId'];
                unset($array['body']);
                unset($array['instanceId']);
            } elseif (isset($config[$whatsapp_number]['provider']) && $config[$whatsapp_number]['provider'] == 'official-whatsapp') {
                $apiCalled             = true;
                $whatsappApiController = new WhatsAppOfficialController($config[$whatsapp_number]['instance_id']);
                $response              = $whatsappApiController->sendMessage([
                    'type'        => 'text',
                    'body'        => $message,
                    'preview_url' => true,
                    'number'      => $whatsapp_number,
                ]);
                if ($response['status']) {
                    if ($chatMessage) {
                        $chatMessage->unique_id    = $response['data']['messages'][0]['id'];
                        $chatMessage->error_status = \App\ChatMessage::ERROR_STATUS_SUCCESS;
                        $chatMessage->save();
                    }
                    \Log::channel('whatsapp')->debug('(file ' . __FILE__ . ' line ' . __LINE__ . ') Message was sent to number ' . $number . ':' . $response['data']['messages'][0]['id'] . ' [' . json_encode($logDetail) . '] ');

                    return $response['data']['messages'][0];
                } else {
                    \Log::channel('whatsapp')->debug('(file ' . __FILE__ . ' line ' . __LINE__ . ') cURL Error for number ' . $number . ': [' . json_encode($logDetail) . '] ');
                    if ($chatMessage) {
                        $chatMessage->error_status = \App\ChatMessage::ERROR_STATUS_ERROR;
                        $chatMessage->error_info   = json_encode($response);
                        $chatMessage->save();
                    }

                    return $response;
                }
            } else {
                $domain = "https://api.chat-api.com/instance$instanceId/$link?token=$token";
            }
        }

        $customerrequest_arr['CUSTOMREQUEST'] = 'POST';
        $message_arr['message']               = $message;
        $file_arr['file']                     = $file;

        $log_data = [
            'Message_Data'          => $message_arr,
            'Customer_request_data' => $customerrequest_arr,
            'PostFields'            => $array,
            'file_data'             => $file_arr,
            'logDetail_data'        => $logDetail,
        ];

        $str_log = 'Message :: ' . json_encode($message) . ' || Customer Request :: POST || Post Fields :: ' . json_encode($array) . ' || File :: ' . $file . ' || Log Details :: ' . json_encode($logDetail);

        \Log::channel('chatapi')->debug('cUrl_url:{"' . $domain . " } \nMessage: " . $str_log);

        $curl = curl_init();
        curl_setopt_array($curl, [
            CURLOPT_URL            => $domain,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING       => '',
            CURLOPT_MAXREDIRS      => 10,
            CURLOPT_TIMEOUT        => 300,
            CURLOPT_HTTP_VERSION   => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST  => 'POST',
            CURLOPT_POSTFIELDS     => json_encode($array),
            CURLOPT_HTTPHEADER     => [
                'content-type: application/json',
            ],
        ]);

        $response = curl_exec($curl);
        $err      = curl_error($curl);
        $httpcode = curl_getinfo($curl, CURLINFO_HTTP_CODE);

        curl_close($curl);

        LogRequest::log($startTime, $domain, 'POST', json_encode($array), json_decode($response), $httpcode, \App\Http\Controllers\WhatsAppController::class, 'sendWithThirdApi');

        if ($err) {
            // DON'T THROW EXCEPTION
            //throw new Exception("cURL Error #:" . $err);
            \Log::channel('whatsapp')->debug('(file ' . __FILE__ . ' line ' . __LINE__ . ') cURL Error for number ' . $number . ':' . $err . ' [' . json_encode($logDetail) . '] ');
            if ($chatMessage) {
                $chatMessage->error_status = \App\ChatMessage::ERROR_STATUS_ERROR;
                $chatMessage->error_info   = json_encode(['number' => $number, 'error' => $err]);
                $chatMessage->save();
            }

            return false;
        } else {
            // Log curl response

            $customerrequest_arr['CUSTOMREQUEST'] = 'POST';
            $message_arr1['message']              = $message;
            $file_arr1['file']                    = $file;

            $log_data_send = [
                'Message_Data'   => $message_arr1,
                'file_data'      => $file_arr1,
                'logDetail_data' => $logDetail,
            ];

            $str_log = 'Message :: ' . json_encode($message) . ' || File :: ' . $file . ' || Log Details :: ' . json_encode($logDetail);

            \Log::channel('chatapi')->debug('cUrl:' . $response . "\nMessage: " . $str_log);

            // Json decode response into result
            $result = json_decode($response, true);

            // throw new Exception("Something was wrong with message: " . $response);
            if (! is_array($result) || array_key_exists('sent', $result) && ! $result['sent']) {
                // DON'T THROW EXCEPTION
                //throw new Exception("Something was wrong with message: " . $response);
                \Log::channel('whatsapp')->debug('(file ' . __FILE__ . ' line ' . __LINE__ . ') Something was wrong with the message for number ' . $number . ': ' . $response . ' [' . json_encode($logDetail) . '] ');
                if ($chatMessage) {
                    $chatMessage->error_status = \App\ChatMessage::ERROR_STATUS_ERROR;
                    $chatMessage->error_info   = json_encode(['number' => $number, 'error' => $response]);
                    $chatMessage->save();
                }

                return false;
            } else {
                // Log successful send
                if ($chatMessage) {
                    $chatMessage->error_status = \App\ChatMessage::ERROR_STATUS_SUCCESS;
                    $chatMessage->save();
                }
                \Log::channel('whatsapp')->debug('(file ' . __FILE__ . ' line ' . __LINE__ . ') Message was sent to number ' . $number . ':' . $response . ' [' . json_encode($logDetail) . '] ');
            }
        }

        return $result;
    }

    private function modifyParamsWithMessage($params, $data)
    {
        if (filter_var($data['text'], FILTER_VALIDATE_URL)) {
            // you're good
            $path      = $data['text'];
            $paths     = explode('/', $path);
            $file      = $paths[count($paths) - 1];
            $extension = (isset($data['extension']) ? $data['extension'] : explode('.', $file)[1]);
            $fileName  = uniqid(true) . '.' . $extension;
            $contents  = file_get_contents($path);
            if (file_put_contents(implode(DIRECTORY_SEPARATOR, [\Config::get('apiwha.media_path'), $fileName]), $contents) == false) {
                return false;
            }
            $url                 = implode('/', [\Config::get('app.url'), 'apiwha', 'media', $fileName]);
            $params['media_url'] = $url;
            $params['message']   = '';

            return $params;
        }
        $params['message'] = $data['text'];

        return $params;
    }

    public function updatestatus(Request $request)
    {
        $message         = ChatMessage::find($request->get('id'));
        $message->status = $request->get('status');
        $message->save();

        if ($request->id && $request->status == 5) {
            ChatMessagesQuickData::updateOrCreate([
                'model'    => \App\Customer::class,
                'model_id' => $request->id,
            ], [
                'last_unread_message'    => '',
                'last_unread_message_at' => null,
                'last_unread_message_id' => null,
            ]);
        }

        return response('success');
    }

    public function fixMessageError(Request $request, $id)
    {
        $chat_message = ChatMessage::find($id);

        if ($customer = Customer::find($chat_message->customer_id)) {
            $customer->is_error_flagged = 0;
            $customer->save();

            $messages = ChatMessage::where('customer_id', $customer->id)->where('error_status', '!=', 0)->get();

            foreach ($messages as $message) {
                $message->error_status = 0;
                $message->save();
            }
        }

        return response('success');
    }

    public function resendMessage(Request $request, $id)
    {
        $chat_message = ChatMessage::find($id);
        if ($customer = Customer::find($chat_message->customer_id)) {
            $chat_message->update([
                'resent' => $chat_message->resent + 1,
            ]);

            return response()->json([
                'resent' => $chat_message->resent,
            ]);
        }

        if ($chat_message->erp_user != '' || $chat_message->contact_id != '') {
            $sender = User::find($chat_message->user_id);
            if ($chat_message->erp_user != '') {
                $receiver = User::find($chat_message->erp_user);
            } else {
                $receiver = Contact::find($chat_message->contact_id);
            }

            $phone           = $receiver->phone;
            $whatsapp_number = ($sender) ? $sender->whatsapp_number : null;
            $sending_message = $chat_message->message;

            if (preg_match_all("/Resent ([\d]+) times/i", $sending_message, $match)) {
                $sending_message = preg_replace("/Resent ([\d]+) times/i", 'Resent ' . ($chat_message->resent + 1) . ' times', $sending_message);
            } else {
                $sending_message = 'Resent ' . ($chat_message->resent + 1) . ' times. ' . $sending_message;
            }

            $params = [
                'user_id'           => $chat_message->user_id,
                'number'            => null,
                'task_id'           => $chat_message->task_id,
                'developer_task_id' => $chat_message->developer_task_id,
                'erp_user'          => $chat_message->erp_user,
                'contact_id'        => $chat_message->contact_id,
                'message'           => $sending_message,
                'resent'            => $chat_message->resent + 1,
                'approved'          => 1,
                'status'            => 2,
            ];

            $new_message = ChatMessage::create($params);

            if ($chat_message->hasMedia(config('constants.attach_image_tag'))) {
                foreach ($chat_message->getMedia(config('constants.attach_image_tag')) as $image) {
                    $new_message->attachMedia($image, config('constants.media_tags'));
                }
            }

            if ($task = Task::find($chat_message->task_id)) {
                if (count($task->users) > 0) {
                    if ($task->assign_from == Auth::id()) {
                        foreach ($task->users as $key => $user) {
                            if ($key != 0) {
                                //
                            }
                        }
                    } else {
                        foreach ($task->users as $key => $user) {
                            if ($key != 0) {
                                if ($user->id != Auth::id()) {
                                    //
                                }
                            }
                        }
                    }
                }
            }

            $chat_message->update([
                'resent' => $chat_message->resent + 1,
            ]);
        }

        if ($chat_message->vendor_id != '') {
            $vendor = \App\Vendor::find($chat_message->vendor_id);

            if ($vendor) {
                if ($chat_message->message != '') {
                    //
                }

                $chat_message->update([
                    'resent' => $chat_message->resent + 1,
                ]);
            }
        }

        if ($chat_message->supplier_id != '') {
            $supplier = Supplier::find($chat_message->supplier_id);

            if ($supplier) {
                if ($chat_message->additional_data != '') {
                    $additional_data_arr = json_decode($chat_message->additional_data);
                    $path                = $additional_data_arr->attachment[0];
                    $subject             = 'Product order';
                    $message             = 'Please check below product order request';
                    if ($path != '') {
                        $emailClass = (new PurchaseExport($path, $subject, $message))->build();

                        $email = Email::create([
                            'model_id'        => $supplier->id,
                            'model_type'      => Supplier::class,
                            'from'            => 'buying@amourint.com',
                            'to'              => $supplier->email,
                            'subject'         => $subject,
                            'message'         => $message,
                            'template'        => 'purchase-simple',
                            'additional_data' => json_encode(['attachment' => [$path]]),
                            'status'          => 're-send',
                            'is_draft'        => 0,
                        ]);

                        \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');
                    }
                }

                $chat_message->update([
                    'resent' => $chat_message->resent + 1,
                ]);
            }
        }

        return response()->json([
            'resent' => $chat_message->resent,
        ]);
    }

    public function createGroup($task_id, $group_id, $number, $message, $whatsapp_number)
    {
        $encodedText = $message;
        $startTime   = date('Y-m-d H:i:s', LARAVEL_START);

        if ($whatsapp_number == '919004780634') { // Indian
            $instanceId = '43281';
            $token      = 'yi841xjhrwyrwrc7';
        } elseif ($whatsapp_number == '971502609192') { // YM Dubai
            $instanceId = '62439';
            $token      = 'jdcqh3ladeuvwzp4';
        } else {
            if ($whatsapp_number == '971562744570') { // Solo 06
                $instanceId = '55202';
                $token      = '42ndn0qg5om26vzf';
            } else {
                if ($whatsapp_number == '971547763482') { // 04
                    $instanceId = '55211';
                    $token      = '3b92u5cbg215c718';
                } else {
                    $instanceId = '62439';
                    $token      = 'jdcqh3ladeuvwzp4';
                }
            }
        }

        if ($task_id != null) {
            $id = (string) $task_id;

            $array = [
                'groupName' => $id,
                'phones'    => $number,

            ];
            $link = 'group';
        } else {
            $id = (string) $group_id;

            $array = [
                'groupId'          => $id,
                'participantPhone' => $number,
            ];
            $link = 'addGroupParticipant';
        }

        $curl = curl_init();
        $url  = "https://api.chat-api.com/instance$instanceId/$link?token=$token";

        curl_setopt_array($curl, [
            CURLOPT_URL            => $url,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING       => '',
            CURLOPT_MAXREDIRS      => 10,
            CURLOPT_TIMEOUT        => 300,
            CURLOPT_HTTP_VERSION   => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST  => 'POST',
            CURLOPT_POSTFIELDS     => json_encode($array),
            CURLOPT_HTTPHEADER     => [
                'content-type: application/json',
                // "token: $wa_token"
            ],
        ]);

        $response = curl_exec($curl);
        $err      = curl_error($curl);
        $result   = json_decode($response, true);
        $httpcode = curl_getinfo($curl, CURLINFO_HTTP_CODE);

        curl_close($curl);

        LogRequest::log($startTime, $url, 'POST', json_encode($array), json_decode($response), $httpcode, \App\Http\Controllers\WhatsAppController::class, 'sendBulkNotification');
        if ($err) {
            // DON'T THROW EXCEPTION
            //throw new Exception("cURL Error #:" . $err);
            \Log::channel('whatsapp')->debug('(file ' . __FILE__ . ' line ' . __LINE__ . ') cURL Error for number ' . $number . ':' . $err);

            return false;
        } else {
            $result = json_decode($response, true);
            // throw new Exception("Something was wrong with message: " . $response);
            if (! is_array($result) || array_key_exists('sent', $result) && ! $result['sent']) {
                // DON'T THROW EXCEPTION
                //throw new Exception("Something was wrong with message: " . $response);
                \Log::channel('whatsapp')->debug('(file ' . __FILE__ . ' line ' . __LINE__ . ') Something was wrong with the message for number ' . $response);

                return false;
            } else {
                // Log successful send
                \Log::channel('whatsapp')->debug('(file ' . __FILE__ . ' line ' . __LINE__ . ') Message was sent to number ' . $response);
            }
        }

        return $result;
    }

    public function saveProductFromSupplierIncomingImages($id, $imageUrl)
    {
        //FInd Supplier
        $supplier = Supplier::find($id);

        //get sku
        $lastQuickSellProduct = Product::select('sku')->where('sku', 'LIKE', '%QUICKSELL' . date('yz') . '%')->orderBy('id', 'desc')->first();

        try {
            if ($lastQuickSellProduct) {
                $number = str_ireplace('QUICKSELL', '', $lastQuickSellProduct->sku) + 1;
            } else {
                $number = date('yz') . sprintf('%02d', 1);
            }
        } catch (Exception $e) {
            $number = 0;
        }

        $product                    = new Product;
        $product->name              = 'QUICKSELL';
        $product->sku               = 'QuickSell' . $number;
        $product->size              = '';
        $product->brand             = null;
        $product->color             = '';
        $product->location          = '';
        $product->category          = '';
        $product->supplier          = $supplier->supplier;
        $product->price             = 0;
        $product->price_inr_special = 0;
        $product->stock             = 1;
        $product->quick_product     = 1;
        $product->is_pending        = 0;
        $product->save();
        preg_match_all('#\bhttps?://[^,\s()<>]+(?:\([\w\d]+\)|([^,[:punct:]\s]|/))#', $imageUrl, $match);
        $imageUrl = $match[0][0];
        $jpg      = \Image::make($imageUrl)->encode('jpg');
        $filename = substr($imageUrl, strrpos($imageUrl, '/'));
        $filename = str_replace('/', '', $filename);
        $media    = MediaUploader::fromString($jpg)->useFilename($filename)->upload();
        $product->attachMedia($media, config('constants.media_tags'));

        return true;
    }

    public function delete(Request $request)
    {
        $messageId = $request->get('id', 0);

        if ($messageId) {
            $chatMessage = \App\ChatMessage::where('id', $messageId)->first();
            if ($chatMessage) {
                $chatMessage->delete();
                \App\SuggestedProductList::where('chat_message_id', $messageId)->delete();
            }
        }

        return response()->json(['code' => 200]);
    }

    public function autoCompleteMessages(Request $request)
    {
        $data = AutoCompleteMessage::where('message', 'like', '' . $request->keyword . '%')->pluck('message')->toArray();

        return response()->json(['data' => $data]);
    }

    public function sendemail($message, $model_id, $model_class, $toemail, $chat_id = 0, $subject = null)
    {
        $botReply = \App\ChatbotReply::where('chat_id', $message->id)->get();

        $from_address = config('env.MAIL_FROM_ADDRESS');
        $cc           = '';
        //$subject = null;
        $email_id = 0;
        $m        = \App\ChatMessage::where('id', $chat_id)->first();
        if ($m) {
            if ($m->from_email != '') {
                $from_address = $m->from_email;
            }

            if ($m->to_email != '') {
                $toemail = $m->to_email;
            }

            if ($m->cc_email != '') {
                $cc = $m->cc_email;
            }

            if ($m->email_id != '') {
                $email_id = $m->email_id;
            }
        }

        $message_body = $message->message;

        if ($email_id > 0) {
            $email = \App\Email::where('id', $message->email_id)->first();
            if ($email) {
                $subject = $email->subject;
                $toemail == $email->from;
            }
        }

        $email = \App\Email::create([
            'model_id'         => $model_id,
            'model_type'       => $model_class,
            'from'             => $from_address ?? '',
            'to'               => $toemail,
            'subject'          => $subject,
            'message'          => $message_body,
            'template'         => 'customer-simple',
            'additional_data'  => $model_id,
            'status'           => 'pre-send',
            'store_website_id' => null,
            'cc'               => $cc,
            'is_draft'         => 1,
        ]);

        \App\Jobs\SendEmail::dispatch($email)->onQueue('send_email');
    }

    public function webhookOfficial(Request $request)
    {
        $entries = $request['entry'];
        foreach ($entries as $entry) {
            foreach ($entry['changes'] as $change) {
                $businessAccount = WhatsappBusinessAccounts::where('business_phone_number_id', $change['value']['metadata']['phone_number_id'])->first();
                if (isset($change['messages'])) {
                    foreach ($change['messages'] as $message) {
                        $supplier = $this->findSupplierByNumber($message['from']);
                        $vendor   = $this->findVendorByNumber($message['from']);
                        $user     = $this->findUserByNumber($message['from']);
                        $dubbizle = $this->findDubbizleByNumber($message['from']);
                        $contact  = $this->findContactByNumber($message['from']);
                        $customer = $this->findCustomerByNumber($message['from']);
                        $params   = [
                            'unique_id'    => $message['id'],
                            'number'       => $message['from'],
                            'message_type' => $message['type'],
                            'message'      => isset($message['text']) ? $message['text']['body'] : '',
                            'user_id'      => $user != null ? $user->id : null,
                            'contact_id'   => $contact != null ? $contact->id : null,
                            'supplier_id'  => $supplier != null ? $supplier->id : null,
                            'vendor_id'    => $vendor != null ? $vendor->id : null,
                            'dubbizle_id'  => $dubbizle != null ? $dubbizle->id : null,
                            'customer_id'  => $customer != null ? $customer->id : null,
                            'account_id'   => $businessAccount->id,
                        ];
                        ChatMessage::create($params);
                    }
                }
                if (isset($change['statuses'])) {
                    foreach ($change['statuses'] as $status) {
                        $chatMessage = ChatMessage::where('unique_id', $status['id'])->first();
                        if ($chatMessage) {
                            if ($status['status'] === 'sent') {
                                $chatMessage->sent = true;
                                $chatMessage->save();
                            }
                            if ($status['status'] === 'delivered') {
                                $chatMessage->is_delivered = true;
                                $chatMessage->save();
                            }
                            if ($status['status'] === 'read') {
                                $chatMessage->is_read = true;
                                $chatMessage->save();
                            }
                        }
                    }
                }
            }
        }
    }

    public function webhookOfficialVerify(Request $request)
    {
        $verifyToken = 'w59YnmcB4w1tzfxVYlPP';
        $mode        = $request->get('hub.mode');
        $token       = $request->get('hub.verify_token');
        $challenge   = $request->get('hub.challenge');

        // Check if a token and mode were sent
        if ($mode && $token) {
            // Check the mode and token sent are correct
            if ($mode === 'subscribe' && $token === $verifyToken) {
                // Respond with 200 OK and challenge token from the request
                return response()->setStatusCode(200)->setContent($challenge)->send();
            } else {
                // Responds with '403 Forbidden' if verify tokens do not match
                return response()->setStatusCode(403);
            }
        }

        return response()->setStatusCode(403);
    }
}


File: /opt/lampp/htdocs/erp/app/Learning.php 
Content: <?php

namespace App;

/**
 * @SWG\Definition(type="object", @SWG\Xml(name="User"))
 */
use Plank\Mediable\Mediable;
use Illuminate\Support\Facades\DB;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

class Learning extends Model
{
    /**
     * @var string
     *
     * @SWG\Property(property="category",type="string")
     * @SWG\Property(property="task_details",type="string")
     * @SWG\Property(property="task_subject",type="string")
     * @SWG\Property(property="completion_date",type="datetime")
     * @SWG\Property(property="assign_from",type="datetime")
     * @SWG\Property(property="assign_to",type="datetime")
     * @SWG\Property(property="is_statutory",type="boolean")
     * @SWG\Property(property="sending_time",type="string")
     * @SWG\Property(property="recurring_type",type="string")
     * @SWG\Property(property="statutory_id",type="integer")
     * @SWG\Property(property="model_type",type="string")
     * @SWG\Property(property="model_id",type="integer")
     * @SWG\Property(property="general_category_id",type="integer")

     * @SWG\Property(property="cost",type="string")
     * @SWG\Property(property="is_milestone",type="boolean")
     * @SWG\Property(property="no_of_milestone",type="string")
     * @SWG\Property(property="milestone_completed",type="string")
     * @SWG\Property(property="customer_id",type="integer")
     * @SWG\Property(property="hubstaff_task_id",type="integer")
     * @SWG\Property(property="master_user_id",type="integer")
     * @SWG\Property(property="lead_hubstaff_task_id",type="integer")
     * @SWG\Property(property="due_date",type="datetime")
     * @SWG\Property(property="site_developement_id",type="integer")
     * @SWG\Property(property="priority_no",type="integer")
     */
    use SoftDeletes;

    use Mediable;

    protected $fillable = [
        'category',
        'task_details',
        'task_subject',
        'completion_date',
        'assign_from',
        'assign_to',
        'is_statutory',
        'actual_start_date',
        'is_completed',
        'sending_time',
        'recurring_type',
        'statutory_id',
        'model_type',
        'model_id',
        'general_category_id',
        'cost',
        'is_milestone',
        'no_of_milestone',
        'milestone_completed',
        'customer_id',
        'hubstaff_task_id',
        'master_user_id',
        'lead_hubstaff_task_id',
        'due_date',
        'site_developement_id',
        'priority_no',
        'learning_user',
        'learning_vendor',
        'learning_subject',
        'learning_module',
        'learning_submodule',
        'learning_assignment',
        'learning_duedate',
        'learning_status',
        'currency',
    ];

    const TASK_TYPES = [
        'Other Task',
        'Statutory Task',
        'Calendar Task',
        'Discussion Task',
        'Developer Task',
        'Developer Issue',
    ];

    public static function hasremark($id)
    {
        $task = Task::find($id);
        if (! empty($task->remark)) {
            return true;
        } else {
            return false;
        }
    }

    // getting remarks
    public static function getremarks($taskid)
    {
        $results = DB::select('select * from remarks where taskid = :taskid order by created_at DESC', ['taskid' => $taskid]);

        return json_decode(json_encode($results), true);
    }

    public function learningUser()
    {
        return $this->hasOne(\App\User::class, 'id', 'learning_user');
    }

    public function learningVendor()
    {
        return $this->hasOne(\App\User::class, 'id', 'learning_vendor');
    }

    public function remarks()
    {
        return $this->hasMany(\App\Remark::class, 'taskid')->where('module_type', 'task')->latest();
    }

    public function notes()
    {
        return $this->hasMany(\App\Remark::class, 'taskid')->where('module_type', 'task-note')->latest();
    }

    public function users()
    {
        return $this->belongsToMany(\App\User::class, 'task_users', 'task_id', 'user_id')->where('type', \App\User::class);
    }

    public function assignedTo()
    {
        return $this->belongsTo(\App\User::class, 'assign_to', 'id');
    }

    public function contacts()
    {
        return $this->belongsToMany(\App\Contact::class, 'task_users', 'task_id', 'user_id')->where('type', \App\Contact::class);
    }

    public function whatsappgroup()
    {
        return $this->hasOne(WhatsAppGroup::class);
    }

    public function whatsappAll($needBroadCast = false)
    {
        if ($needBroadCast) {
            return $this->hasMany(\App\ChatMessage::class, 'learning_id')->whereIn('status', ['7', '8', '9', '10'])->latest(); //Purpose - Replace from task_id to learning_id - DEVTASK-4020
        }

        return $this->hasMany(\App\ChatMessage::class, 'learning_id')->whereNotIn('status', ['7', '8', '9', '10'])->latest(); //Purpose - Replace from task_id to learning_id - DEVTASK-4020
    }

    public function allMessages()
    {
        return $this->hasMany(ChatMessage::class, 'task_id', 'id')->orderBy('id', 'desc');
    }

    public function customer()
    {
        return $this->belongsTo(\App\Customer::class, 'customer_id', 'id');
    }

    public function timeSpent()
    {
        return $this->hasOne(
            \App\Hubstaff\HubstaffActivity::class,
            'task_id',
            'hubstaff_task_id'
        )
        ->selectRaw('task_id, SUM(tracked) as tracked')
        ->groupBy('task_id');
    }

    public function taskStatus()
    {
        return $this->hasOne(
            'App\taskStatus',
            'id',
            'status'
        );
    }
}


File: /opt/lampp/htdocs/erp/app/Product.php 
Content: <?php

namespace App;

/**
 * @SWG\Definition(type="object", @SWG\Xml(name="User"))
 */
use Validator;
use Plank\Mediable\Mediable;
use App\Helpers\StatusHelper;
use App\Helpers\ProductHelper;
use Illuminate\Support\Facades\DB;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\SoftDeletes;
use Plank\Mediable\Facades\MediaUploader as MediaUploader;

class Product extends Model
{
    const STOCK_STATUS = [
        1 => 'Active',
        2 => 'Reserved',
        3 => 'Damaged',
        4 => 'On Hold',
    ];

    const IVA_PERCENTAGE = 22;

    //  use LogsActivity;
    use Mediable;
    use SoftDeletes;

    const BAGS_CATEGORY_IDS = [11, 39, 50, 192, 210];

    /**
     * @var string
     *
     * @SWG\Property(property="name",type="string")
     * @SWG\Property(property="brand",type="string")
     * @SWG\Property(property="category",type="string")
     * @SWG\Property(property="short_description",type="string")
     * @SWG\Property(property="price",type="string")
     * @SWG\Property(property="sku",type="string")
     * @SWG\Property(property="has_mediables",type="string")
     * @SWG\Property(property="status_id",type="integer")
     * @SWG\Property(property="id",type="integer")
     * @SWG\Property(property="is_barcode_check",type="boolean")
     * @SWG\Property(property="size_eu",type="string")
     * @SWG\Property(property="supplier",type="string")
     * @SWG\Property(property="supplier_id",type="integer")
     * @SWG\Property(property="user_id",type="integer")
     * @SWG\Property(property="shopify_id",type="integer")
     * @SWG\Property(property="stock_status",type="string")
     * @SWG\Property(property="scrap_priority",type="string")
     * @SWG\Property(property="assigned_to",type="integer")
     * @SWG\Property(property="quick_product",type="string")
     * @SWG\Property(property="approved_by",type="integer")
     * @SWG\Property(property="supplier_link",type="string")
     * @SWG\Property(property="composition",type="string")
     * @SWG\Property(property="lmeasurement",type="string")
     * @SWG\Property(property="hmeasurement",type="string")
     * @SWG\Property(property="dmeasurement",type="string")
     * @SWG\Property(property="size",type="string")
     * @SWG\Property(property="color",type="string")
     * @SWG\Property(property="last_brand",type="string")
     */
    protected $fillable = [
        'name',
        'brand',
        'stock',
        'category',
        'short_description',
        'price',
        'price_eur_special',
        'price_eur_discounted',
        'price_inr',
        'price_inr_special',
        'price_inr_discounted',
        'price_special_offer',
        'status_id',
        'id',
        'sku',
        'is_barcode_check',
        'has_mediables',
        'size_eu',
        'supplier',
        'supplier_id',
        'stock_status',
        'shopify_id',
        'scrap_priority',
        'assigned_to',
        'quick_product',
        'approved_by',
        'supplier_link',
        'composition',
        'lmeasurement',
        'hmeasurement',
        'dmeasurement',
        'size',
        'color',
        'suggested_color',
        'last_brand',
        'sub_status_id',
        'price_usd',
        'price_usd_special',
        'is_cron_check',
    ];

    protected $appends = [];

    protected $communication = '';

    protected $image_url = '';

    public $images = [];

    public static function boot()
    {
        parent::boot();

        static::saved(function ($model) {
            $flag = 0;
            if ($model->hasMedia(config('constants.attach_image_tag'))) {
                $flag = 1;
            }
            if ($model->has_mediables != $flag) {
                \DB::table('products')->where('id', $model->id)->update(['has_mediables' => $flag]);
            }
        });

        static::updating(function ($product) {
            $newCatID = $product->category;
            $oldCatID = $product->getOriginal('category');

            $productData = ProductStatusHistory::where('product_id', $product->id)->get();

            if ($oldCatID != $newCatID && $newCatID > 1) {
                \DB::table('products')->where('id', $product->id)->update(['status_id' => StatusHelper::$autoCrop]);
                $data = [
                    'product_id'     => $product->id,
                    'old_status'     => $product->status_id,
                    'new_status'     => StatusHelper::$autoCrop,
                    'pending_status' => 0,
                    'created_at'     => date('Y-m-d H:i:s'),
                ];
                \App\ProductStatusHistory::addStatusToProduct($data);
            }

            $new_status_id = $product->status_id;
            $old_status_id = $product->getOriginal('status_id');
            if ($old_status_id != $new_status_id) {
                $data = [
                    'product_id'     => $product->id,
                    'old_status'     => $old_status_id,
                    'new_status'     => $new_status_id,
                    'pending_status' => 0,
                    'created_at'     => date('Y-m-d H:i:s'),
                ];
                \App\ProductStatusHistory::addStatusToProduct($data);
            }
        });

        static::created(function ($model) {
            $flag = 0;
            if ($model->hasMedia(config('constants.attach_image_tag'))) {
                $flag = 1;
            }
            if ($model->has_mediables != $flag) {
                \DB::table('products')->where('id', $model->id)->update(['has_mediables' => $flag]);
            }
            if ($model->status_id) {
                $data = [
                    'product_id'     => $model->id,
                    'old_status'     => $model->status_id,
                    'new_status'     => $model->status_id,
                    'pending_status' => 0,
                    'created_at'     => date('Y-m-d H:i:s'),
                ];
                \App\ProductStatusHistory::addStatusToProduct($data);
            }
        });
    }

    /**
     * Create new or update existing (scraped) product by JSON
     * This is only for Excel imports at the moment
     *
     * @param mixed $json
     * @param mixed $isExcel
     * @param mixed $nextExcelStatus
     *
     * @return bool|\Illuminate\Http\JsonResponse
     */
    public static function createProductByJson($json, $isExcel = 0, $nextExcelStatus = 2)
    {
        // Check for required values
        if (
            ! empty($json->title) &&
            ! empty($json->sku) &&
            ! empty($json->brand_id)
        ) {
            // Check for unique product
            $data['sku'] = ProductHelper::getSku($json->sku);
            $validator   = Validator::make($data, [
                'sku' => 'unique:products,sku',
            ]);

            // Get formatted prices
            $formattedPrices  = self::_getPriceArray($json);
            $formattedDetails = (new \App\Services\Products\ProductsCreator)->getGeneralDetails($json->properties, $json);

            $color = \App\ColorNamesReference::getProductColorFromObject($json);

            $composition = $formattedDetails['composition'];
            if (! empty($formattedDetails['composition'])) {
                $composition = \App\Compositions::getErpName($formattedDetails['composition']);
            }

            // If validator fails we have an existing product
            if ($validator->fails()) {
                // Get the product from the database
                try {
                    if ($json->product_id > 0) {
                        $product = Product::where('id', $json->product_id)->first();
                    } else {
                        $product = Product::where('sku', $data['sku'])->first();
                    }
                } catch (Exception $e) {
                    $product = Product::where('sku', $data['sku'])->first();
                }

                // Return false if no product is found
                if (! $product) {
                    return false;
                }

                // Update from scrape to manual images
                if (! $product->is_approved && ! $product->is_listing_rejected && $product->status_id == StatusHelper::$scrape && (int) $nextExcelStatus == StatusHelper::$unableToScrapeImages) {
                    $product->status_id = StatusHelper::$unableToScrapeImages;
                }

                // Update the name and description if the product is not approved and not rejected
                if (! $product->is_approved && ! $product->is_listing_rejected) {
                    $product->name              = ProductHelper::getRedactedText($json->title, 'name');
                    $product->short_description = ProductHelper::getRedactedText($json->description, 'short_description');
                }

                // Update color, composition and material used if the product is not approved
                if (! $product->is_approved) {
                    // Set color
                    $product->color = $color;
                    // Set composition
                    $product->composition = $composition;
                }

                //Check if its json
                if (isset($json->properties['size']) && is_array($json->properties['size'])) {
                    $json->properties['size'] = implode(',', $json->properties['size']);
                }

                // Add sizes to the product
                if (isset($json->properties['size']) && is_array($json->properties['size']) && count($json->properties['size']) > 0) {
                    // Implode the keys
                    $product->size = implode(',', array_values($json->properties['size']));

                    // Replace texts in sizes
                    $product->size = ProductHelper::getRedactedText($product->size, 'composition');
                } elseif (isset($json->properties['size']) && $json->properties['size'] != null) {
                    $product->size = $json->properties['size'];
                }

                // Set product values
                $product->lmeasurement         = isset($json->properties['lmeasurement']) && $json->properties['lmeasurement'] > 0 ? $json->properties['lmeasurement'] : null;
                $product->hmeasurement         = isset($json->properties['hmeasurement']) && $json->properties['hmeasurement'] > 0 ? $json->properties['hmeasurement'] : null;
                $product->dmeasurement         = isset($json->properties['dmeasurement']) && $json->properties['dmeasurement'] > 0 ? $json->properties['dmeasurement'] : null;
                $product->price                = $formattedPrices['price_eur'];
                $product->price_inr            = $formattedPrices['price_inr'];
                $product->price_inr_special    = $formattedPrices['price_inr_special'];
                $product->price_inr_discounted = $formattedPrices['price_inr_discounted'];
                $product->price_eur_special    = $formattedPrices['price_eur_special'];
                $product->price_eur_discounted = $formattedPrices['price_eur_discounted'];
                $product->is_scraped           = $isExcel == 1 ? 0 : 1;
                $product->save();

                if ($product) {
                    if ($isExcel == 1) {
                        if (! $product->hasMedia(\Config('constants.media_tags'))) {
                            foreach ($json->images as $image) {
                                if ($image != '') {
                                    try {
                                        $jpg = \Image::make($image)->encode('jpg');
                                    } catch (Exception $e) {
                                        $array         = explode('/', $image);
                                        $filename_path = end($array);
                                        $jpg           = \Image::make(public_path() . '/uploads/excel-import/' . $filename_path)->encode('jpg');
                                    }
                                    $filename = substr($image, strrpos($image, '/'));
                                    $filename = uniqid();
                                    $media    = MediaUploader::fromString($jpg)->toDirectory('/product/' . floor($product->id / 10000))->useFilename($filename)->upload();
                                    $product->attachMedia($media, config('constants.media_tags'));
                                }
                            }
                        }
                    }
                }

                $product->checkExternalScraperNeed();

                // Update the product status
                ProductStatus::updateStatus($product->id, 'UPDATED_EXISTING_PRODUCT_BY_JSON', 1);

                // Set on sale
                if ($json->is_sale) {
                    $product->is_on_sale = 1;
                    $product->save();
                }

                // Check for valid supplier and store details linked to supplier
                if ($dbSupplier = Supplier::select('suppliers.id')->leftJoin('scrapers as sc', 'sc.supplier_id', 'suppliers.id')->where(function ($query) use ($json) {
                    $query->where('supplier', '=', $json->website)->orWhere('sc.scraper_name', '=', $json->website);
                })->first()) {
                    if ($product) {
                        $product->suppliers()->syncWithoutDetaching([
                            $dbSupplier->supplier_id => [
                                'title'            => ProductHelper::getRedactedText($json->title, 'name'),
                                'description'      => ProductHelper::getRedactedText($json->description, 'short_description'),
                                'supplier_link'    => $json->url,
                                'stock'            => $json->stock,
                                'price'            => $formattedPrices['price_eur'],
                                'price_special'    => $formattedPrices['price_eur_special'],
                                'supplier_id'      => $dbSupplier->id,
                                'price_discounted' => $formattedPrices['price_eur_discounted'],
                                'size'             => $json->properties['size'] ?? null,
                                'color'            => $json->properties['color'],
                                'composition'      => ProductHelper::getRedactedText($json->properties['composition'], 'composition'),
                                'sku'              => $json->original_sku,
                            ],
                        ]);
                        $product->supplier_id = $dbSupplier->id;
                    }
                }

                // Set duplicate count to 0
                $duplicateCount = 0;

                // Set empty array to hold supplier prices
                $supplierPrices = [];

                // Loop over each supplier
                foreach ($product->suppliers_info as $info) {
                    if ($info->price != '') {
                        $supplierPrices[] = $info->price;
                    }
                }

                // Loop over supplierPrices to find duplicates
                foreach (array_count_values($supplierPrices) as $price => $count) {
                    $duplicateCount++;
                }

                if ($duplicateCount > 1) {
                    // Different price
                    $product->is_price_different = 1;
                } else {
                    // Same price
                    $product->is_price_different = 0;
                }

                // Add 1 to stock - TODO: We can calculate the real stock across all suppliers
                $product->stock += 1;
                $product->save();

                // Set parameters for scrap activity
                $params = [
                    'website'            => $json->website,
                    'scraped_product_id' => $product->id,
                    'status'             => 1,
                ];

                // Return
                //returning 1 for Product Updated
                return ['product_created' => 0, 'product_updated' => 1];
            } else {
                // Create new product
                $product = new Product;

                // Return false if product could not be created
                if ($product == null) {
                    return false;
                }

                // Set product values
                $product->status_id             = ($isExcel == 1 ? $nextExcelStatus : 3);
                $product->sku                   = $data['sku'];
                $product->supplier              = $json->website;
                $product->brand                 = $json->brand_id;
                $product->category              = $json->properties['category'] ?? 0;
                $product->name                  = ProductHelper::getRedactedText($json->title, 'name');
                $product->short_description     = ProductHelper::getRedactedText($json->description, 'short_description');
                $product->supplier_link         = $json->url;
                $product->stage                 = 3;
                $product->is_scraped            = $isExcel == 1 ? 0 : 1;
                $product->stock                 = 1;
                $product->is_without_image      = 1;
                $product->is_on_sale            = $json->is_sale ? 1 : 0;
                $product->composition           = $composition;
                $product->color                 = $color;
                $product->size                  = $json->properties['size'] ?? null;
                $product->lmeasurement          = isset($json->properties['lmeasurement']) && $json->properties['lmeasurement'] > 0 ? $json->properties['lmeasurement'] : null;
                $product->hmeasurement          = isset($json->properties['hmeasurement']) && $json->properties['hmeasurement'] > 0 ? $json->properties['hmeasurement'] : null;
                $product->dmeasurement          = isset($json->properties['dmeasurement']) && $json->properties['dmeasurement'] > 0 ? $json->properties['dmeasurement'] : null;
                $product->measurement_size_type = $json->properties['measurement_size_type'];
                $product->made_in               = $json->properties['made_in'] ?? null;
                $product->price                 = $formattedPrices['price_eur'];
                $product->price_eur_special     = $formattedPrices['price_eur_special'];
                $product->price_eur_discounted  = $formattedPrices['price_eur_discounted'];
                $product->price_inr             = $formattedPrices['price_inr'];
                $product->price_inr_special     = $formattedPrices['price_inr_special'];
                $product->price_inr_discounted  = $formattedPrices['price_inr_discounted'];

                // Try to save the product
                try {
                    $product->save();
                    $product->checkExternalScraperNeed();
                } catch (Exception $exception) {
                    $product->save();

                    return false;
                }

                if ($product) {
                    if ($isExcel == 1) {
                        if (! $product->hasMedia(\Config('constants.media_tags'))) {
                            foreach ($json->images as $image) {
                                if ($image != '') {
                                    try {
                                        $jpg = \Image::make($image)->encode('jpg');
                                    } catch (Exception $e) {
                                        $array         = explode('/', $image);
                                        $filename_path = end($array);
                                        $jpg           = \Image::make(public_path() . '/uploads/excel-import/' . $filename_path)->encode('jpg');
                                    }
                                    $filename = substr($image, strrpos($image, '/'));
                                    $filename = uniqid();
                                    $media    = MediaUploader::fromString($jpg)->toDirectory('/product/' . floor($product->id / 10000))->useFilename($filename)->upload();
                                    $product->attachMedia($media, config('constants.media_tags'));
                                }
                            }
                        }
                    }
                }

                // Update the product status
                ProductStatus::updateStatus($product->id, 'CREATED_NEW_PRODUCT_BY_JSON', 1);

                // Check for valid supplier and store details linked to supplier
                if ($dbSupplier = Supplier::select('suppliers.id')->leftJoin('scrapers as sc', 'sc.supplier_id', 'suppliers.id')->where(function ($query) use ($json) {
                    $query->where('supplier', '=', $json->website)->orWhere('sc.scraper_name', '=', $json->website);
                })->first()) {
                    if ($product) {
                        $product->suppliers()->syncWithoutDetaching([
                            $dbSupplier->supplier_id => [
                                'title'            => ProductHelper::getRedactedText($json->title, 'name'),
                                'description'      => ProductHelper::getRedactedText($json->description, 'short_description'),
                                'supplier_link'    => $json->url,
                                'stock'            => $json->stock,
                                'price'            => $formattedPrices['price_eur'],
                                'price_special'    => $formattedPrices['price_eur_special'],
                                'supplier_id'      => $dbSupplier->id,
                                'price_discounted' => $formattedPrices['price_eur_discounted'],
                                'size'             => $json->properties['size'] ?? null,
                                'color'            => $json->properties['color'],
                                'composition'      => ProductHelper::getRedactedText($json->properties['composition'], 'composition'),
                                'sku'              => $json->original_sku,
                            ],
                        ]);
                    }
                }

                // Return true Product Created
                return ['product_created' => 1, 'product_updated' => 0];
            }
        }

        // Return false by default
        return false;
    }

    private static function _getPriceArray($json)
    {
        // Get brand object by brand ID
        $brand = Brand::find($json->brand_id);

        if (strpos($json->price, ',') !== false) {
            if (strpos($json->price, '.') !== false) {
                if (strpos($json->price, ',') < strpos($json->price, '.')) {
                    $priceEur = str_replace(',', '', $json->price);
                } else {
                    $priceEur = str_replace(',', '|', $json->price);
                    $priceEur = str_replace('.', ',', $priceEur);
                    $priceEur = str_replace('|', '.', $priceEur);
                    $priceEur = str_replace(',', '', $priceEur);
                }
            } else {
                $priceEur = str_replace(',', '.', $json->price);
            }
        } else {
            $priceEur = $json->price;
        }

        // Get numbers and trim final price
        $priceEur = trim(preg_replace('/[^0-9\.]/i', '', $priceEur));

        //
        if (strpos($priceEur, '.') !== false) {
            // Explode price
            $exploded = explode('.', $priceEur);

            // Check if there are numbers after the dot
            if (strlen($exploded[1]) > 2) {
                if (count($exploded) > 2) {
                    $sliced = array_slice($exploded, 0, 2);
                } else {
                    $sliced = $exploded;
                }

                // Convert price to the lowest minor unit
                $priceEur = implode('', $sliced);
            }
        }

        // Set price to rounded finalPrice
        $priceEur = (strlen($priceEur) > 0 ? round($priceEur) : 1);

        // Check if the euro to rupee rate is set
        if (! empty($brand->euro_to_inr)) {
            $priceInr = $brand->euro_to_inr * $priceEur;
        } else {
            $priceInr = Setting::get('euro_to_inr') * $priceEur;
        }

        // Build price in INR and special price
        $priceInr = round($priceInr, -3);

        //Build Special Price In EUR
        if (! empty($priceEur) && ! empty($priceInr)) {
            $priceEurSpecial = $priceEur - ($priceEur * $brand->deduction_percentage) / 100;
            $priceInrSpecial = $priceInr - ($priceInr * $brand->deduction_percentage) / 100;
        } else {
            $priceEurSpecial = '';
            $priceInrSpecial = '';
        }

        // Product on sale?
        if ($json->is_sale == 1 && $brand->sales_discount > 0 && ! empty($priceEurSpecial)) {
            $priceEurDiscounted = $priceEurSpecial - ($priceEurSpecial * $brand->sales_discount) / 100;
            $priceInrDiscounted = $priceInrSpecial - ($priceInrSpecial * $brand->sales_discount) / 100;
        } else {
            $priceEurDiscounted = 0;
            $priceInrDiscounted = 0;
        }

        // Return prices
        return [
            'price_eur'            => $priceEur,
            'price_eur_special'    => $priceEurSpecial,
            'price_eur_discounted' => $priceEurDiscounted,
            'price_inr'            => $priceInr,
            'price_inr_special'    => $priceInrSpecial,
            'price_inr_discounted' => $priceInrDiscounted,
        ];
    }

    public function messages()
    {
        return $this->hasMany(\App\Message::class, 'moduleid')->where('moduletype', 'product')->latest()->first();
    }

    public function product_category()
    {
        return $this->belongsTo(\App\Category::class, 'category');
    }

    public function log_scraper_vs_ai()
    {
        return $this->hasMany(\App\LogScraperVsAi::class);
    }

    public function getCommunicationAttribute()
    {
        return $this->messages();
    }

    public function getImageurlAttribute()
    {
        return $this->getMedia(config('constants.media_tags'))->first() ? getMediaUrl($this->getMedia(config('constants.media_tags'))->first()) : '';
    }

    public function notifications()
    {
        return $this->hasMany(\App\Notification::class);
    }

    public function suppliers()
    {
        return $this->belongsToMany(\App\Supplier::class, 'product_suppliers', 'product_id', 'supplier_id');
    }

    public function suppliers_name()
    {
        return $this->belongsToMany(\App\Supplier::class, 'product_suppliers', 'product_id', 'supplier_id')->select('supplier', 'supplier_id', 'product_id');
    }

    public function suppliers_info()
    {
        return $this->hasMany(\App\ProductSupplier::class);
    }

    public function attribute_histories()
    {
        return $this->hasMany(\App\ProductUpdatedAttributeHistory::class, 'product_id', 'id')->groupBy('attribute_name');
    }

    public function private_views()
    {
        return $this->belongsToMany(\App\PrivateView::class, 'private_view_products', 'product_id', 'private_view_id');
    }

    public function suggestions()
    {
        return $this->belongsToMany(\App\SuggestedProduct::class, 'suggested_product_lists', 'product_id', 'suggested_products_id');
    }

    public function amends()
    {
        return $this->hasMany(CropAmends::class, 'product_id', 'id');
    }

    public function brands()
    {
        return $this->hasOne(\App\Brand::class, 'id', 'brand');
    }

    public function categories()
    {
        return $this->hasOne(\App\Category::class, 'id', 'category');
    }

    public function magentoLog()
    {
        return $this->hasOne(\App\Loggers\LogListMagento::class)->latest();
    }

    public function references()
    {
        return $this->hasMany(\App\ProductReference::class);
    }

    public static function getPendingProductsCount($roleType)
    {
        $stage    = new Stage();
        $stage_no = intval($stage->getID($roleType));

        return DB::table('products')
            ->where('stage', $stage_no - 1)
            ->where('isApproved', '!=', -1)
            ->whereNull('dnf')
            ->whereNull('deleted_at')
            ->count();
    }

    public function purchases()
    {
        return $this->belongsToMany(\App\Purchase::class, 'purchase_products', 'product_id', 'purchase_id');
    }

    public function sizes()
    {
        return $this->hasMany(ProductSizes::class);
    }

    public function orderproducts()
    {
        return $this->hasMany(\App\OrderProduct::class, 'product_id', 'id');
    }

    public function scraped_products()
    {
        return $this->hasOne(\App\ScrapedProducts::class, 'product_id', 'id');
    }

    public function many_scraped_products()
    {
        return $this->hasMany(\App\ScrapedProducts::class, 'sku', 'sku');
    }

    public function user()
    {
        return $this->belongsToMany(\App\User::class, 'user_products', 'product_id', 'user_id');
    }

    public function cropApprover()
    {
        return $this->belongsTo(User::class, 'crop_approved_by', 'id');
    }

    public function cropRejector()
    {
        return $this->belongsTo(User::class, 'crop_rejected_by', 'id');
    }

    public function approver()
    {
        return $this->belongsTo(User::class, 'approved_by', 'id');
    }

    public function rejector()
    {
        return $this->belongsTo(User::class, 'listing_rejected_by', 'id');
    }

    public function cropOrderer()
    {
        return $this->belongsTo(User::class, 'crop_ordered_by', 'id');
    }

    public function rejectedCropApprover()
    {
        return $this->hasOne(User::class, 'reject_approved_by', 'id');
    }

    public function activities()
    {
        return $this->hasMany(ListingHistory::class, 'product_id', 'id');
    }

    public function statuses()
    {
        return $this->hasMany(ProductStatus::class, 'product_id', 'id');
    }

    public function groups()
    {
        return $this->hasMany(ProductQuicksellGroup::class, 'product_id', 'id');
    }

    public function croppedImages()
    {
        return $this->hasMany(SiteCroppedImages::class, 'product_id', 'id');
    }

    public function mediables()
    {
        return $this->hasMany(Mediable::class, 'mediable_id', 'id');
    }

    public function attachImagesToProduct($arrImages = null)
    {
        // check media exist or
        $mediaRecords = false;
        if ($this->hasMedia(\Config('constants.media_original_tag'))) {
            foreach ($this->getMedia(\Config('constants.media_original_tag')) as $mRecord) {
                if (file_exists($mRecord->getAbsolutePath())) {
                    $mediaRecords = true;
                }
            }
        }

        if (! $mediaRecords || is_array($arrImages)) {
            // images given
            if (is_array($arrImages) && count($arrImages) > 0) {
                $scrapedProduct = true;
            } else {
                //getting image details from scraped Products
                $scrapedProduct = ScrapedProducts::where('sku', $this->sku)->orderBy('updated_at', 'desc')->first();
            }

            if ($scrapedProduct != null and $scrapedProduct != '') {
                //Looping through Product Images
                $countImageUpdated = 0;

                // Set arr images
                if (! is_array($arrImages)) {
                    $arrImages = $scrapedProduct->images;
                }

                foreach ($arrImages as $image) {
                    //check if image has http or https link
                    if (strpos($image, 'http') === false) {
                        continue;
                    }

                    try {
                        //generating image from image
                        //this was quick fix for redirect url issue
                        $redirect = \App\Helpers::findUltimateDestination($image, 2);
                        if ($redirect != null) {
                            $image = str_replace(' ', '%20', $redirect);
                        }
                        $jpg = \Image::make($image)->encode('jpg');
                    } catch (Exception $e) {
                        // if images are null
                        $jpg = null;
                        // need to define error update
                        if ($scrapedProduct && is_object($scrapedProduct)) {
                            $lastScraper = ScrapedProducts::where('sku', $this->sku)->latest()->first();
                            if ($lastScraper) {
                                $lastScraper->validation_result = $lastScraper->validation_result . PHP_EOL . '[error] ' . $e->getMessage() . ' One or more images has an invalid URL : ' . $image . PHP_EOL;
                                $lastScraper->save();
                            }
                        }
                    }
                    if ($jpg != null) {
                        $filename = substr($image, strrpos($image, '/'));
                        $filename = str_replace(['/', '.JPEG', '.JPG', '.jpeg', '.jpg', '.PNG', '.png'], '', urldecode($filename));

                        //save image to media
                        $media = MediaUploader::fromString($jpg)->toDirectory('/product/' . floor($this->id / 10000) . '/' . $this->id)->useFilename($filename)->onDuplicateIncrement()->upload();
                        $this->attachMedia($media, config('constants.media_original_tag'));
                        $countImageUpdated++;
                    }
                }
            }
        }
    }

    public function commonComposition($category, $composition)
    {
        $hscodeList = HsCodeGroupsCategoriesComposition::where('category_id', $category)->where('composition', $composition)->first();

        if ($hscodeList != null && $hscodeList != '') {
            $groupId = $hscodeList->hs_code_group_id;
            $group   = HsCodeGroup::find($groupId);
            if ($group != null && $group != '' && $group->composition != null) {
                return $group->composition;
            } else {
                $hscodeDetails = HsCode::find($group->hs_code_id);
                if ($hscodeDetails != null && $hscodeDetails != '') {
                    if ($hscodeDetails->correct_composition != null) {
                        return $hscodeDetails->correct_composition;
                    } else {
                        return $composition;
                    }
                } else {
                    return $composition;
                }
            }
        } else {
            return $composition;
        }
    }

    public function hsCode($category, $composition)
    {
        $hscodeList = HsCodeGroupsCategoriesComposition::where('category_id', $category)->where('composition', $composition)->first();

        if ($hscodeList != null && $hscodeList != '') {
            $groupId       = $hscodeList->hs_code_group_id;
            $group         = HsCodeGroup::find($groupId);
            $hscodeDetails = HsCode::find($group->hs_code_id);
            if ($hscodeDetails != null && $hscodeDetails != '') {
                if ($hscodeDetails->description != null) {
                    return $hscodeDetails->code;
                } else {
                    return false;
                }
            } else {
                return false;
            }
        } else {
            return false;
        }
    }

    public function isGroupExist($category, $composition, $parentCategory, $childCategory)
    {
        $composition = strip_tags($composition);
        $composition = str_replace(['&nbsp;', '/span>'], ' ', $composition);

        $hscodeList = HsCodeGroupsCategoriesComposition::where('category_id', $category)->where('composition', 'LIKE', '%' . $composition . '%')->first();

        if ($hscodeList != null && $hscodeList != '') {
            return false;
        } else {
            return true;
        }
    }

    public function websiteProducts()
    {
        return $this->hasMany(\App\WebsiteProduct::class, 'product_id', 'id');
    }

    public function publishedOn()
    {
        return array_keys($this->websiteProducts->pluck('product_id', 'store_website_id')->toArray());
    }

    /**
     * get product images from watson
     *
     * @param mixed $brands
     * @param mixed $category
     * @param mixed $existeProducts
     */
    public static function attachProductChat($brands = [], $category = [], $existeProducts = [])
    {
        return \App\Product::whereIn('brand', $brands)->whereIn('category', $category)
            ->whereNotIn('id', $existeProducts)
            ->join('mediables as m', function ($q) {
                $q->on('m.mediable_id', 'products.id')->where('m.mediable_type', \App\Product::class);
            })
            ->where('stock', '>', 0)
            ->orderBy('created_at', 'desc')
            ->limit(\App\Library\Watson\Action\SendProductImages::SENDING_LIMIT)
            ->get();
    }

    public function createProductPriceLog($order_id = '', $product_id = '', $stage = '', $oparetion = '', $product_price = '', $product_discount = '', $log = '', $product_total_price = '', $store_website_id = '', $customer_id = '')
    {
        return ProductPriceDiscountLog::create([
            'order_id'            => $order_id,
            'product_id'          => $product_id,
            'customer_id'         => $customer_id,
            'store_website_id'    => $store_website_id,
            'stage'               => $stage,
            'oparetion'           => $oparetion,
            'product_price'       => $product_price,
            'product_total_price' => $product_total_price,
            'product_discount'    => $product_discount,
            'log'                 => $log,
        ]);
    }

    /**
     * Get price calculation
     *
     * @param mixed      $websiteId
     * @param null|mixed $countryId
     * @param null|mixed $countryGroup
     * @param mixed      $isOvveride
     * @param mixed      $dutyPrice
     * @param null|mixed $updated_seg_discount
     * @param null|mixed $updated_add_profit
     * @param null|mixed $checked_add_profit
     * @param null|mixed $default_price
     * @param null|mixed $category_segment
     * @param null|mixed $order_id
     * @param null|mixed $product_id
     * @param null|mixed $customer_id
     *
     * @return float
     **/
    public function getPrice($websiteId, $countryId = null, $countryGroup = null, $isOvveride = false, $dutyPrice = 0, $updated_seg_discount = null, $updated_add_profit = null, $checked_add_profit = null, $default_price = null, $category_segment = null, $order_id = null, $product_id = null, $customer_id = null)
    {
        $website      = is_object($websiteId) ? $websiteId : \App\StoreWebsite::find($websiteId);
        $priceRecords = null;
        if (is_object($website)) {
            $this->createProductPriceLog($order_id, $product_id, 'Web site id is found', '', '', '', 'Website Record found.', '', $website->id, $customer_id);
        } else {
            $this->createProductPriceLog($order_id, $product_id, 'Web site found id not found', '', '', '', 'Web site found id not found', '', $websiteId->id, $customer_id);
        }

        $brandM        = @$this->brands;
        $productPrice  = $default_price != null ? $default_price : $this->price;
        $default_price = $default_price != null ? $default_price : $this->price;
        if (($productPrice || $default_price)) {
            $this->createProductPriceLog($order_id, $product_id, 'Product price', '', $productPrice, '0', 'productPrice : ' . $productPrice . '<br/> default_price : ' . $default_price, $default_price, $website->id, $customer_id);
        } else {
            $this->createProductPriceLog($order_id, $product_id, 'Product price not found', '', '', '', 'Product price not found', $default_price, $websiteId->id, $customer_id);
        }

        $brandID = 0;
        if (isset($brandM) && $brandM) {
            $brandID = $brandM->id;
        }
        $brandID = empty($brandID) ? $this->brand_id : $brandID;
        if (($brandID)) {
            $this->createProductPriceLog($order_id, $product_id, 'BrandID', '', $productPrice, '0', 'brandID : ' . $brandID . '<br/> Default Price : ' . $default_price, $default_price, $website->id, $customer_id);
        } else {
            $this->createProductPriceLog($order_id, $product_id, 'BrandID not found', '', '', '', 'BrandID not found', $default_price, $websiteId->id, $customer_id);
        }

        // category discount
        $segmentDiscount = 0;
        if (! empty($this->category)) {
            $catdiscount = \DB::table('categories')->join('category_segments as cs', 'cs.id', 'categories.category_segment_id')
                ->join('category_segment_discounts as csd', 'csd.category_segment_id', 'cs.id')
                ->where('categories.id', $this->category)
                ->where('csd.brand_id', $brandID)
                ->select('csd.*')
                ->first();

            if ($catdiscount) {
                if ($updated_seg_discount) {
                    if (($updated_seg_discount)) {
                        $this->createProductPriceLog($order_id, $product_id, 'category discount: updated_seg_discount', '', $productPrice, $updated_seg_discount, 'updated_seg_discount : ' . $updated_seg_discount . '<br> ==>' . json_encode($catdiscount), $default_price, $website->id, $customer_id);
                    }

                    $category_segment_discounts_row = \DB::table('category_segment_discounts')->where('id', $catdiscount->id)->update(['amount' => $updated_seg_discount]);
                    if ($category_segment_discounts_row) {
                        $catdiscount->amount = $updated_seg_discount;
                        if (($category_segment_discounts_row)) {
                            $this->createProductPriceLog($order_id, $product_id, 'category discount id : ' . $catdiscount->id . 'category_segment_discounts_row', '', $productPrice, $updated_seg_discount, json_encode($category_segment_discounts_row), $default_price, $website->id, $customer_id);
                        }
                    }
                }
                if ($catdiscount->amount_type == 'percentage') {
                    $percentage      = $catdiscount->amount;
                    $percentageA     = ($productPrice * $percentage) / 100;
                    $segmentDiscount = $percentageA;
                    $productPrice    = $productPrice - $percentageA;
                    if (($catdiscount->amount_type)) {
                        $this->createProductPriceLog($order_id, $product_id, 'category discount: amount_type is percentage', 'Product price: ' . $productPrice . ' * percentage : ' . $percentage . ' /100 ', $productPrice, $segmentDiscount, 'Product price Discount', $default_price, $website->id, $customer_id);
                    }
                } else {
                    $segmentDiscount = $catdiscount->amount;
                    $productPrice    = $productPrice - $catdiscount->amount;
                    if (($catdiscount->amount_type)) {
                        $this->createProductPriceLog($order_id, $product_id, 'category discount: amount_type not percentage', 'Product price: ' . $productPrice . ' - categoryDiscount : ' . $catdiscount->amount, $productPrice, $segmentDiscount, 'Product price - categoryDiscount', $default_price, $website->id, $customer_id);
                    }
                }
            }
        }
        $operation  = '';
        $logDetails = '';

        // add a product price duty
        if ($dutyPrice > 0) {
            $totalAmount  = $productPrice * $dutyPrice / 100;
            $productPrice = $productPrice + $totalAmount;
            $this->createProductPriceLog($order_id, $product_id, 'Add a product price duty', '(Product price: ' . $productPrice . ' * dutyPrice: ' . $dutyPrice . ' / 100) + Priduct total Amount : ' . $totalAmount, $productPrice, $totalAmount, 'Product price + product price duty', $default_price, $website->id, $customer_id);
        }

        if ($website) {
            $brand = $category_segment != null ? $category_segment : @$this->brands->brand_segment;

            $category = $this->category;
            $country  = $countryId;

            $this->createProductPriceLog($order_id, $product_id, 'Price Override before', $operation, $productPrice, $segmentDiscount, 'Website data is available Price Override before', $default_price, $website->id, $customer_id);
            $priceModal = \App\PriceOverride::where('store_website_id', $website->id);
            $this->createProductPriceLog($order_id, $product_id, 'Price Override after', $operation, $productPrice, $segmentDiscount, 'Website data is available Price Override before', $default_price, $website->id, $customer_id);
            $priceCModal = clone $priceModal;

            if (! empty($brand) && ! empty($category) && ! empty($country)) {
                $priceRecords = $priceModal->where('country_code', $country)->where('brand_segment', $brand)->where('category_id', $category)->first();
                $this->createProductPriceLog($order_id, $product_id, 'Price Record', $operation, $productPrice, $segmentDiscount, json_encode($priceRecords), $default_price, $website->id, $customer_id);
            }

            if (! $priceRecords) {
                $this->createProductPriceLog($order_id, $product_id, 'Price Override before', $operation, $productPrice, $segmentDiscount, 'Price Override before', $default_price, $website->id, $customer_id);
                $priceModal   = \App\PriceOverride::where('store_website_id', $website->id);
                $priceRecords = $priceModal->where(function ($q) use ($brand, $category, $country) {
                    $q->orWhere(function ($q) use ($brand, $category) {
                        $q->where('brand_segment', $brand)->where('category_id', $category);
                    })->orWhere(function ($q) use ($brand, $country) {
                        $q->where('brand_segment', $brand)->where('country_code', $country);
                    })->orWhere(function ($q) use ($country, $category) {
                        $q->where('country_code', $country)->where('category_id', $category);
                    });
                })->first();
                $this->createProductPriceLog($order_id, $product_id, 'Price Record by brand_segment or country_code', $operation, $productPrice, $segmentDiscount, json_encode($priceRecords), $default_price, $website->id, $customer_id);
            }

            if (! $priceRecords) {
                $this->createProductPriceLog($order_id, $product_id, 'Price Override before', $operation, $productPrice, $segmentDiscount, 'Price Override before', $default_price, $website->id, $customer_id);
                $priceModal   = \App\PriceOverride::where('store_website_id', $website->id);
                $priceRecords = $priceModal->where('brand_segment', $brand)->first();
                $this->createProductPriceLog($order_id, $product_id, 'Price Override after', $operation, $productPrice, $segmentDiscount, json_encode($priceRecords), $default_price, $website->id, $customer_id);
            }

            if (! $priceRecords) {
                $this->createProductPriceLog($order_id, $product_id, 'Price Override before', $operation, $productPrice, $segmentDiscount, 'Price Override before', $default_price, $website->id, $customer_id);
                $priceModal   = \App\PriceOverride::where('store_website_id', $website->id);
                $priceRecords = $priceModal->where('category_id', $category)->first();
                $this->createProductPriceLog($order_id, $product_id, 'Price Record by category_id', $operation, $productPrice, $segmentDiscount, json_encode($priceRecords), $default_price, $website->id, $customer_id);
            }

            if (! $priceRecords) {
                $this->createProductPriceLog($order_id, $product_id, 'Price Override before', $operation, $productPrice, $segmentDiscount, 'Price Override before', $default_price, $website->id, $customer_id);
                $priceModal   = \App\PriceOverride::where('store_website_id', $website->id);
                $priceRecords = $priceModal->where('country_code', $country)->first();
                $this->createProductPriceLog($order_id, $product_id, 'Price Record by country_code', $operation, $productPrice, $segmentDiscount, $logDetails, $default_price, $website->id, $customer_id);
            }

            if ($priceRecords) {
                if ($updated_add_profit) {
                    $value                  = $updated_add_profit >= 0 ? $updated_add_profit : $updated_add_profit * (-1);
                    $value                  = $priceRecords->type == 'PERCENTAGE' ? $updated_add_profit : $productPrice * $updated_add_profit / 100;
                    $updated_add_profit_row = \DB::table('price_overrides')->where('id', $priceRecords->id)->update(
                        [
                            'calculated' => $updated_add_profit >= 0 ? '+' : '-',
                            'value'      => $value,
                        ]
                    );
                    if ($updated_add_profit_row) {
                        $priceRecords->value = $updated_add_profit;
                    }
                    $this->createProductPriceLog($order_id, $product_id, 'Price Record by country_code', $operation, $productPrice, $segmentDiscount, json_encode($priceRecords), $default_price, $website->id, $customer_id);
                }
                if ($priceRecords->calculated == '+') {
                    if ($priceRecords->type == 'PERCENTAGE') {
                        $price              = ($productPrice * $priceRecords->value) / 100;
                        $last_product_total = $this->createProductPriceLog($order_id, $product_id, 'Price Record Type : PERCENTAGE', '(Product Price : ' . $productPrice . ' * Price Records: ' . $priceRecords->value . ') / 100', $productPrice, $price, 'productPrice * priceRecordsvalue / 100', $default_price, $website->id, $customer_id);

                        return ['status' => true, 'original_price' => $default_price, 'promotion_per' => $priceRecords->value, 'promotion' => $price, 'segment_discount' => $segmentDiscount, 'total' => $productPrice + $price, 'segment_discount_per' => isset($catdiscount) ? $catdiscount->amount : 0, 'last_log' => $last_product_total, 'before_iva_product_price' => 0];
                    } else {
                        $percentage         = ($priceRecords->value / $productPrice) * 100;
                        $last_product_total = $this->createProductPriceLog($order_id, $product_id, 'Price Record Type : PERCENTAGE', 'product Price: ' . $productPrice . ' / Price Records: ' . $priceRecords->value . ' * 100', $productPrice, $percentage, 'productPrice / priceRecordsvalue * 100', $default_price, $website->id, $customer_id);

                        return ['status' => true, 'original_price' => $default_price, 'promotion_per' => $percentage, 'promotion' => $priceRecords->value, 'segment_discount' => $segmentDiscount, 'total' => $productPrice + $priceRecords->value, 'segment_discount_per' => isset($catdiscount) ? $catdiscount->amount : 0, 'last_log' => $last_product_total, 'before_iva_product_price' => 0];
                    }
                }
                if ($priceRecords->calculated == '-') {
                    if ($priceRecords->type == 'PERCENTAGE') {
                        $price              = ($productPrice * $priceRecords->value) / 100;
                        $last_product_total = $this->createProductPriceLog($order_id, $product_id, 'Produc Price Records calculated - is PERCENTAGE', 'Product Price: ' . $productPrice . ' * Price Records: ' . $priceRecords->value . ' / 100', $productPrice, $price, 'productPrice * priceRecordsvalue / 100', $default_price, $website->id, $customer_id);

                        return ['status' => true, 'original_price' => $default_price, 'promotion_per' => -$priceRecords->value, 'promotion' => -$price, 'segment_discount' => $segmentDiscount, 'total' => $productPrice - $price, 'segment_discount_per' => isset($catdiscount) ? $catdiscount->amount : 0, 'last_log' => $last_product_total, 'before_iva_product_price' => 0];
                    } else {
                        $percentage         = ($priceRecords->value / $productPrice) * 100;
                        $last_product_total = $this->createProductPriceLog($order_id, $product_id, 'Produc Price Records calculated - not in PERCENTAGE ', 'Product Price: ' . $productPrice . ' / Price Records: ' . $priceRecords->value . '* 100', $productPrice, $percentage, 'productPrice / priceRecordsvalue * 100', $default_price, $website->id, $customer_id);

                        return ['status' => true, 'original_price' => $default_price, 'promotion_per' => -$percentage, 'promotion' => -$priceRecords->value, 'segment_discount' => $segmentDiscount, 'total' => $productPrice - $priceRecords->value, 'segment_discount_per' => isset($catdiscount) ? $catdiscount->amount : 0, 'last_log' => $last_product_total, 'before_iva_product_price' => 0];
                    }
                }
            } elseif ($updated_add_profit || ! empty($checked_add_profit)) {
                if (empty($brand)) {
                    $last_product_total = $this->createProductPriceLog($order_id, $product_id, 'Brand is empty', $operation, $productPrice, $segmentDiscount, 'segmentDiscount : ' . $segmentDiscount, $default_price, $website->id, $customer_id);

                    return ['status' => false, 'field' => 'brand', 'original_price' => $default_price, 'promotion_per' => 0, 'promotion' => 0, 'segment_discount' => $segmentDiscount, 'total' => $productPrice - 0, 'segment_discount_per' => isset($catdiscount) ? $catdiscount->amount : 0, 'last_log' => $last_product_total, 'before_iva_product_price' => 0];
                }
                if (empty($category)) {
                    $last_product_total = $this->createProductPriceLog($order_id, $product_id, 'Category is empty', $operation, $productPrice, $segmentDiscount, 'segmentDiscount : ' . $segmentDiscount, $default_price, $website->id, $customer_id);

                    return ['status' => false, 'field' => 'category', 'original_price' => $default_price, 'promotion_per' => 0, 'promotion' => 0, 'segment_discount' => $segmentDiscount, 'total' => $productPrice - 0, 'segment_discount_per' => isset($catdiscount) ? $catdiscount->amount : 0, 'last_log' => $last_product_total, 'before_iva_product_price' => 0];
                }
                if (empty($country)) {
                    $last_product_total = $this->createProductPriceLog($order_id, $product_id, 'country is empty', $operation, $productPrice, $segmentDiscount, 'segmentDiscount : ' . $segmentDiscount, $default_price, $website->id, $customer_id);

                    return ['status' => false, 'field' => 'country', 'original_price' => $default_price, 'promotion_per' => 0, 'promotion' => 0, 'segment_discount' => $segmentDiscount, 'total' => $productPrice - 0, 'segment_discount_per' => isset($catdiscount) ? $catdiscount->amount : 0, 'last_log' => $last_product_total, 'before_iva_product_price' => 0];
                }
                if (! empty($brand) && ! empty($category) && ! empty($country) && empty($checked_add_profit)) {
                    $newPriceRecords = PriceOverride::create([
                        'store_website_id' => $website->id,
                        'brand_segment'    => $brand,
                        'category_id'      => $category,
                        'type'             => 'PERCENTAGE',
                        'calculated'       => $updated_add_profit >= 0 ? '+' : '-',
                        'value'            => $updated_add_profit >= 0 ? $updated_add_profit : $updated_add_profit * (-1),
                        'country_code'     => $country,
                    ]);
                    $catDis             = isset($catdiscount) ? $catdiscount->amount : 0;
                    $last_product_total = $this->createProductPriceLog($order_id, $product_id, 'Brand,Category,Country, checked_add_profit is Not empty', $updated_add_profit, $productPrice, $newPriceRecords->value, 'promotion_per : ' . $newPriceRecords->value . (' <br/> total = ' . ($productPrice - $newPriceRecords->value)) . '<br/> Category Discount' . $catDis, $default_price, $website->id, $customer_id);

                    return ['status' => true, 'original_price' => $default_price, 'promotion_per' => $newPriceRecords->value, 'promotion' => $newPriceRecords->value, 'segment_discount' => $segmentDiscount, 'total' => $productPrice - $newPriceRecords->value, 'segment_discount_per' => isset($catdiscount) ? $catdiscount->amount : 0, 'last_log' => $last_product_total, 'before_iva_product_price' => 0];
                }
            }
        }
        $last_product_total = $this->createProductPriceLog($order_id, $product_id, 'original_price', '', $productPrice, $segmentDiscount, ' product original price ' . $default_price);

        return ['status'               => true, 'original_price' => $default_price, 'promotion_per' => '0.00', 'promotion' => '0.00', 'segment_discount' => $segmentDiscount, 'total' => $productPrice, 'segment_discount_per' => isset($catdiscount) ? $catdiscount->amount : 0, 'segment_discount_per' => isset($catdiscount) ? $catdiscount->amount : 0, 'last_log' => $last_product_total,
            'before_iva_product_price' => 0, //  $beforeIVAProductPrice
        ];
    }

    public function getDuty($countryCode, $withtype = false)
    {
        $countryCode = \App\SimplyDutyCountry::where('country_code', $countryCode)->first();

        if ($countryCode) {
            if ($countryCode->default_duty > 0) {
                return (float) $countryCode->default_duty;
            } else {
                $segment = \App\SimplyDutySegment::where('id', $countryCode->segment_id)->first();
                if ($segment) {
                    return (float) $segment->price;
                }
            }
        }

        return (float) '0.00';
    }

    public function storeWebsiteProductAttributes($storeId = 0)
    {
        return \App\StoreWebsiteProductAttribute::where('product_id', $this->id)->where('store_website_id', $storeId)->first();
    }

    public function checkExternalScraperNeed($fromscraper = false)
    {
        $parentcate = ($this->category > 0 && $this->categories) ? $this->categories->parent_id : null;

        // sets initial status pending for requestForExternalScraper in product status histroy
        $request_external_scraper_status_data = [
            'product_id'     => $this->id,
            'old_status'     => $this->status_id,
            'new_status'     => StatusHelper::$requestForExternalScraper,
            'pending_status' => 1,
            'created_at'     => date('Y-m-d H:i:s'),
        ];
        \App\ProductStatusHistory::addStatusToProduct($request_external_scraper_status_data);

        // sets initial status pending for unknownColor in product status histroy
        $unknown_color_status = [
            'product_id'     => $this->id,
            'old_status'     => $this->status_id,
            'new_status'     => StatusHelper::$unknownColor,
            'pending_status' => 1,
            'created_at'     => date('Y-m-d H:i:s'),
        ];
        \App\ProductStatusHistory::addStatusToProduct($unknown_color_status);

        // sets initial status pending for unknownComposition in product status histroy
        $unknown_composition_status = [
            'product_id'     => $this->id,
            'old_status'     => $this->status_id,
            'new_status'     => StatusHelper::$unknownComposition,
            'pending_status' => 1,
            'created_at'     => date('Y-m-d H:i:s'),
        ];
        \App\ProductStatusHistory::addStatusToProduct($unknown_composition_status);

        // sets initial status pending for unknownMeasurement in product status histroy
        $unknown_measurement_status = [
            'product_id'     => $this->id,
            'old_status'     => $this->status_id,
            'new_status'     => StatusHelper::$unknownMeasurement,
            'pending_status' => 1,
            'created_at'     => date('Y-m-d H:i:s'),
        ];
        \App\ProductStatusHistory::addStatusToProduct($unknown_measurement_status);

        // sets initial status pending for unknownMeasurement in product status histroy
        $unknown_size_status = [
            'product_id'     => $this->id,
            'old_status'     => $this->status_id,
            'new_status'     => StatusHelper::$unknownSize,
            'pending_status' => 1,
            'created_at'     => date('Y-m-d H:i:s'),
        ];
        \App\ProductStatusHistory::addStatusToProduct($unknown_size_status);

        if (empty($this->name)
            || $this->name == '..'
            || empty($this->short_description)
            || empty($this->price)
            || ! $this->hasMedia(\Config('constants.media_original_tag'))
        ) {
            $this->status_id = StatusHelper::$requestForExternalScraper;
            if (empty($this->name)) {
                $this->sub_status_id = StatusHelper::$unknownTitle;
            }

            if (empty($this->short_description)) {
                $this->sub_status_id = StatusHelper::$unknownDescription;
            }

            if (empty($this->price)) {
                $this->sub_status_id = StatusHelper::$unknownPrice;
            }

            $this->save();
        } elseif (empty($this->composition) || empty($this->color) || empty($this->category || $this->category < 1)) {
            if (empty($this->composition)) {
                $this->status_id     = StatusHelper::$requestForExternalScraper;
                $this->sub_status_id = StatusHelper::$unknownComposition;
            } elseif (empty($this->color)) {
                $this->status_id     = StatusHelper::$requestForExternalScraper;
                $this->sub_status_id = StatusHelper::$unknownColor;
            } else {
                $this->status_id     = StatusHelper::$requestForExternalScraper;
                $this->sub_status_id = StatusHelper::$unknownCategory;
            }

            $this->save();
        } elseif ((empty($this->lmeasurement) && empty($this->hmeasurement) && empty($this->dmeasurement)) && $this->categories && $this->categories->need_to_check_measurement) {
            $this->status_id     = StatusHelper::$unknownMeasurement;
            $this->sub_status_id = null;
            $this->save();
        } else {
            // check that product has how many description
            $descriptionCount = $this->suppliers_info->count();
            if ($descriptionCount <= 1 && (empty($this->brands->next_step) || $this->brands->next_step == StatusHelper::$requestForExternalScraper)) {
                $this->status_id     = StatusHelper::$requestForExternalScraper;
                $this->sub_status_id = StatusHelper::$unknownDescription;
                $this->save();
            }

            // if validation pass and status is still external scraper then remove and put for the auto crop
            if ($this->status_id == StatusHelper::$requestForExternalScraper) {
                if (empty($this->size_eu) && $this->categories->need_to_check_size) {
                    $this->status_id     = StatusHelper::$unknownSize;
                    $this->sub_status_id = null;
                    $this->save();
                } else {
                    $this->status_id     = StatusHelper::$autoCrop;
                    $this->sub_status_id = null;
                    $this->save();
                }
            }
        }

        // if status not request for external scraper then store it
        if ($this->status_id != StatusHelper::$requestForExternalScraper) {
            $this->sub_status_id = null;
            $this->save();
        }
    }

    public function landingPageProduct()
    {
        return $this->hasOne(\App\LandingPageProduct::class, 'product_id', 'id');
    }

    /**
     * This is using for ingoring the product for next step
     * like due to problem in crop we are not sending white product on approval
     */
    public function isNeedToIgnore()
    {
        if (strtolower($this->color) == 'white') {
            $this->status_id = \App\Helpers\StatusHelper::$manualCropping;
            $this->save();
        }
    }

    public function getStoreBrand($storeId)
    {
        $platformId = 0;

        $brand = $this->brands;
        if ($brand) {
            $storeWebsiteBrand = \App\StoreWebsiteBrand::where('brand_id', $brand->id)->where('store_website_id', $storeId)->first();
            if ($storeWebsiteBrand) {
                $platformId = $storeWebsiteBrand->magento_value;
            }
        }

        return $platformId;
    }

    public static function getProducts($filter_data = [], $skip = null)
    {
        $columns = [
            'products.id',
            'products.name as product_name',
            'b.name as brand_name',
            'b.id as brand_id',
            'cs.name as category_segment',
            'b.brand_segment as brand_segment',
            'c.title as category_name',
            'products.category',
            'products.supplier',
            'products.sku',
            'products.size',
            'products.color',
            'products.suggested_color',
            'products.composition',
            'products.size_eu',
            'products.stock',
            'psu.size_system',
            'status_id',
            'sub_status_id',
            'products.created_at',

            //'inventory_status_histories.date as history_date',
            \DB::raw('count(distinct psu.id) as total_product'),
            \DB::raw('IF(sp.discounted_percentage IS null, 00 , max(sp.discounted_percentage) ) discounted_percentage '),
        ];
        $query = \App\Product::with('many_scraped_products.brand')->leftJoin('brands as b', function ($q) {
            $q->on('b.id', 'products.brand');
        })
            ->leftJoin('categories as c', function ($q) {
                $q->on('c.id', 'products.category');
            })
            ->leftJoin('category_segments as cs', function ($q) {
                $q->on('c.category_segment_id', 'cs.id');
            })
            ->leftJoin('scraped_products as sp', function ($q) {
                $q->on('sp.product_id', 'products.id');
            })
            ->Join('product_suppliers as psu', function ($q) {
                $q->on('psu.product_id', 'products.id');
            });
        //  check filtering
        if (isset($filter_data['product_names'])) {
            $query = $query->whereIn('products.name', $filter_data['product_names']);
        }

        if (isset($filter_data['product_status'])) {
            $query = $query->whereIn('products.status_id', $filter_data['product_status']);
        }

        if (isset($filter_data['brand_names'])) {
            $query = $query->whereIn('brand', $filter_data['brand_names']);
        }

        if (isset($filter_data['product_categories'])) {
            $query = $query->whereIn('category', $filter_data['product_categories']);
        }

        if (isset($filter_data['in_stock'])) {
            if ($filter_data['in_stock'] == 1) {
                $query = $query->where('products.stock', '>', 0);
            } else {
                $query = $query->where('products.stock', '<=', 0);
            }
        }
        if (isset($filter_data['date'])) {
        }

        if (isset($filter_data['start_date']) && isset($filter_data['end_date'])) {
        }

        if (isset($filter_data['date'])) {
            $query = $query->whereDate('products.created_at', $filter_data['date']);
        }

        if (isset($filter_data['date'])) {
            $query = $query->whereDate('products.created_at', $filter_data['date']);
        }

        if (isset($filter_data['discounted_percentage_min'])) {
            $query = $query->where('products.discounted_percentage', '>=', $filter_data['discounted_percentage_min']);
        }

        if (isset($filter_data['discounted_percentage_max'])) {
            $query = $query->where('products.discounted_percentage', '<=', $filter_data['discounted_percentage_max']);
        }

        if (isset($filter_data['no_category']) && $filter_data['no_category'] == 'on') {
            $query = $query->where('products.category', '<=', 0);
        }

        if (isset($filter_data['no_size']) && $filter_data['no_size'] == 'on') {
            $query = $query->where('products.status_id', '=', \App\Helpers\StatusHelper::$unknownSize);
        }

        if (isset($filter_data['supplier']) && is_array($filter_data['supplier']) && $filter_data['supplier'][0] != null) {
            $suppliers_list = implode(',', $filter_data['supplier']);
            $query          = $query->whereRaw(\DB::raw("products.id IN (SELECT product_id FROM product_suppliers WHERE supplier_id IN ($suppliers_list))"));
        }

        if (isset($filter_data['term'])) {
            $term  = $filter_data['term'];
            $query = $query->where(function ($q) use ($term) {
                $q->where('products.name', 'LIKE', "%$term%")
                    ->orWhere('products.sku', 'LIKE', "%$term%")
                    ->orWhere('c.title', 'LIKE', "%$term%")
                    ->orWhere('b.name', 'LIKE', "%$term%")
                    ->orWhere('products.id', 'LIKE', "%$term%");
            });
        }

        if (isset($filter_data['supplier_count'])) {
            $query = $query->havingRaw('count(products.id) = ' . $filter_data['supplier_count']);
        }

        if ($skip !== null) {
            return $query->groupBy('products.id')->with('suppliers_info', 'productstatushistory')->orderBy('products.created_at', 'DESC')->skip($skip)->paginate(1, $columns);
        }

        return $query->groupBy('products.id')->with('suppliers_info', 'productstatushistory')->orderBy('products.created_at', 'DESC')->paginate(Setting::get('pagination'), $columns);
    }

    public static function getPruductsNames()
    {
        $columns = ['name'];
        $result  = [];

        $products_names = \App\Product::distinct('name')->get($columns);
        foreach ($products_names as $product_name) {
            $result[$product_name->name] = $product_name->name;
        }

        asort($result);

        return $result;
    }

    public static function getPruductsCategories()
    {
        $columns = ['category'];
        $result  = [];

        $products_categories = \App\Product::distinct('category')->get($columns);
        foreach ($products_categories as $product_category) {
            $result[$product_category->category] = $product_category->category;
        }

        asort($result);

        return $result;
    }

    public static function getPruductsSku()
    {
        $columns = ['sku'];
        $result  = [];

        $products_sku = \App\Product::distinct('sku')->get($columns);
        foreach ($products_sku as $product_sku) {
            $result[$product_sku->sku] = $product_sku->sku;
        }

        asort($result);

        return $result;
    }

    public function getStatusName()
    {
        return @\App\Helpers\StatusHelper::getStatus()[$this->status_id];
    }

    public static function getProductBySKU($sku)
    {
        return Product::where('sku', $sku)->first();
    }

    public function more_suppliers()
    {
        $more_suppliers = DB::select('SELECT sp.url as link,s.supplier as name
                            FROM `scraped_products` sp
                            JOIN scrapers sc on sc.scraper_name=sp.website
                            JOIN suppliers s ON s.id=sc.supplier_id
                            WHERE last_inventory_at > DATE_SUB(NOW(), INTERVAL sc.inventory_lifetime DAY) and sp.sku = :sku', ['sku' => $this->sku]);

        return $more_suppliers;
    }

    public function getWebsites()
    {
        $websites = ProductHelper::getStoreWebsiteName($this->id, $this);

        return \App\StoreWebsite::whereIn('id', $websites)->get();
    }

    public function expandCategory()
    {
        $cat  = [];
        $list = $this->categories;
        if ($list) {
            $cat[]  = $list->title;
            $parent = $list->parent;
            if ($parent) {
                $cat[]  = $parent->title;
                $parent = $parent->parent;
                if ($parent) {
                    $cat[]  = $parent->title;
                    $parent = $parent->parent;
                    if ($parent) {
                        $cat[] = $parent->title;
                    }
                }
            }
        }

        return implode(' >> ', $cat);
    }

    public function getRandomDescription()
    {
        $descriptions = $this->suppliers_info()->pluck('description')->toArray();

        return $descriptions;
    }

    public function setRandomDescription($website, $stock = 1)
    {
        $product     = $this;
        $description = $product->short_description;
        // assign description game wise
        // store random description from the website
        $storeWebsiteAttributes = $product->storeWebsiteProductAttributes($website->id);
        if ($storeWebsiteAttributes && ! empty($storeWebsiteAttributes->description)) {
            $description = $storeWebsiteAttributes->description;
        } else {
            $randomDescription = $product->getRandomDescription();
            if (! empty($randomDescription)) {
                $randomDescription[] = $product->short_description;
                $storeWebsitePA      = \App\StoreWebsiteProductAttribute::where('product_id', $product->id)->get();
                if (! $storeWebsitePA->isEmpty()) {
                    foreach ($storeWebsitePA as $swpa) {
                        foreach ($randomDescription as $des) {
                            if (strtolower($des) != strtolower($swpa->description)) {
                                $description = $des;
                            }
                        }
                    }
                } else {
                    shuffle($randomDescription);
                    $description = $randomDescription[0];
                }

                // if description is not empty
                if (! empty($description)) {
                    $storeWebsitePA                   = new \App\StoreWebsiteProductAttribute;
                    $storeWebsitePA->product_id       = $product->id;
                    $storeWebsitePA->price            = $product->price;
                    $storeWebsitePA->discount         = '0.00';
                    $storeWebsitePA->discount_type    = 'percentage';
                    $storeWebsitePA->stock            = $stock;
                    $storeWebsitePA->store_website_id = $website->id;
                    $storeWebsitePA->description      = $description;
                    $storeWebsitePA->save();
                }
            }
        }

        return $description;
    }

    public static function getIvaPrice($price)
    {
        $percentage  = self::IVA_PERCENTAGE;
        $percentageA = ($price * $percentage) / 100;

        return $price - $percentageA;
    }

    public function productstatushistory()
    {
        return $this->hasMany(\App\ProductStatusHistory::class, 'product_id');
    }

    public function checkPriceRange()
    {
        $get_brand_segment = $this->brands()->first();
        $get_category      = $this->category;

        if ($get_brand_segment != null && isset($get_brand_segment) && $get_brand_segment->brand_segment != '') {
            $getbrandpricerange = \App\BrandCategoryPriceRange::where(['category_id' => $get_category, 'brand_segment' => $get_brand_segment->brand_segment])->first();
            if ($getbrandpricerange != null) {
                if ($this->price != '' && $this->price >= $getbrandpricerange->min_price && $this->price <= $getbrandpricerange->max_price) {
                    return true;
                } else {
                    return false;
                }
            } else {
                return true;
            }
        } else {
            return true;
        }
    }

    public function useCommaKeywords()
    {
        return str_replace(' ', ',', $this->title);
    }

    public static function matchedCategories($categoies)
    {
        $category_children = [];

        foreach ($categoies as $category) {
            if ($category == 1) {
                continue;
            }
            $is_parent = Category::isParent($category);
            if ($is_parent) {
                $childs = Category::find($category)->childs()->get();
                foreach ($childs as $child) {
                    $is_parent = Category::isParent($child->id);
                    if ($is_parent) {
                        $children = Category::find($child->id)->childs()->get();
                        foreach ($children as $chili) {
                            array_push($category_children, $chili->id);
                        }
                    } else {
                        array_push($category_children, $child->id);
                    }
                }
            } else {
                array_push($category_children, $category);
            }
        }

        return $category_children;
    }

    public function getImages($tag)
    {
        $images = $this->getMedia(strtolower($tag));
        // Set i to 0
        $i = 0;
        // Loop over images
        $media_gallery_entries = [];
        foreach ($images as $image) {
            // Only run if the file exists
            if (file_exists($image->getAbsolutePath())) {
                // Set image type
                $types = $i ? [] : ['image', 'small_image', 'thumbnail'];
                $types = $i == 1 ? ['hover_image'] : $types;
                // Push image to Magento
                if ($i < 5) {
                    // Set file attributes
                    $media_gallery_entries[] = [
                        'media_type' => 'image',
                        'position'   => $i + 1,
                        'types'      => $types,
                        'disabled'   => false,
                        'content'    => [
                            'base64_encoded_data' => base64_encode(file_get_contents($image->getAbsolutePath())),
                            'type'                => mime_content_type($image->getAbsolutePath()),
                            'name'                => $image->getBasenameAttribute(),
                        ],
                    ];
                    // Log info
                    $i++;
                }
            }
        }

        return $media_gallery_entries;
    }

    public function getWebsiteSku()
    {
        return $this->sku . '-' . $this->color;
    }

    public function fetchMultipleSkuRecord()
    {
        $records = \App\ScrapedProducts::where('scraped_products.sku', $this->sku)->leftJoin('products as p', 'p.id', 'scraped_products.product_id')
        ->leftJoin('brands as b', 'b.id', 'scraped_products.brand_id')
        ->select(['scraped_products.*', 'p.supplier as product_supplier', 'b.name as brand_name'])
        ->get();

        return $records;
    }

    public function isCharity()
    {
        return CustomerCharity::where('product_id', $this->id)->first() ? true : false;
    }

    public function scopeStatus(Builder $query, int $status): void
    {
        $query->where('status_id', $status);
    }
}


File: /opt/lampp/htdocs/erp/app/Task.php 
Content: <?php

namespace App;

/**
 * @SWG\Definition(type="object", @SWG\Xml(name="User"))
 */

use Auth;
use Exception;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Plank\Mediable\Mediable;
use App\Hubstaff\HubstaffMember;
use Illuminate\Support\Facades\DB;
use App\Models\TaskStartEndHistory;
use Illuminate\Database\Eloquent\Model;
use App\Models\Tasks\TaskDueDateHistoryLog;
use App\Models\Tasks\TaskHistoryForStartDate;
use Illuminate\Database\Eloquent\SoftDeletes;

class Task extends Model
{
    /**
     * @var string
     *
     * @SWG\Property(property="category",type="string")
     * @SWG\Property(property="task_details",type="string")
     * @SWG\Property(property="task_subject",type="string")
     * @SWG\Property(property="completion_date",type="datetime")
     * @SWG\Property(property="assign_from",type="datetime")
     * @SWG\Property(property="assign_to",type="datetime")
     * @SWG\Property(property="is_statutory",type="boolean")
     * @SWG\Property(property="sending_time",type="string")
     * @SWG\Property(property="recurring_type",type="string")
     * @SWG\Property(property="statutory_id",type="integer")
     * @SWG\Property(property="model_type",type="string")
     * @SWG\Property(property="model_id",type="integer")
     * @SWG\Property(property="general_category_id",type="integer")

     * @SWG\Property(property="cost",type="string")
     * @SWG\Property(property="is_milestone",type="boolean")
     * @SWG\Property(property="no_of_milestone",type="string")
     * @SWG\Property(property="milestone_completed",type="string")
     * @SWG\Property(property="customer_id",type="integer")
     * @SWG\Property(property="hubstaff_task_id",type="integer")
     * @SWG\Property(property="master_user_id",type="integer")
     * @SWG\Property(property="lead_hubstaff_task_id",type="integer")
     * @SWG\Property(property="due_date",type="datetime")
     * @SWG\Property(property="site_developement_id",type="integer")
     * @SWG\Property(property="priority_no",type="integer")
     */
    use SoftDeletes;

    use Mediable;

    protected $fillable = [
        'category',
        'task_details',
        'task_subject',
        'start_date',
        'completion_date',
        'assign_from',
        'assign_to',
        'is_statutory',
        'actual_start_date',
        'is_completed',
        'sending_time',
        'recurring_type',
        'statutory_id',
        'model_type',
        'model_id',
        'general_category_id',
        'cost',
        'is_milestone',
        'no_of_milestone',
        'milestone_completed',
        'customer_id',
        'hubstaff_task_id',
        'master_user_id',
        'lead_hubstaff_task_id',
        'due_date',
        'site_developement_id',
        'priority_no',
        'frequency',
        'message',
        'reminder_from',
        'reminder_last_reply',
        'last_send_reminder',
        'parent_task_id',
        'task_bug_ids',
        'last_date_time_reminder',
        'is_flow_task',
        'user_feedback_cat_id',
        'user_feedback_vendor_id',
        'parent_review_task_id',
        'time_doctor_task_id',
        'lead_time_doctor_task_id',
        'manually_assign',
        'slotTaskRemarks',
        'task_start',
        'm_start_date',
        'm_end_date',
    ];

    const TASK_TYPES = [
        'Developer Task',
        'Regular Task',
    ];

    const TASK_STATUS_FILTER = [
        'DONE'                  => 1,
        'DISCUSSING'            => 2,
        'IN_PROGRESS'           => 3,
        'ISSUE'                 => 4,
        'PLANNED'               => 5,
        'DISCUSS_WITH_LEAD'     => 6,
        'NOTE'                  => 7,
        'LEAD_RESPONSE_NEEDED'  => 8,
        'ERRORS_IN_TASK'        => 9,
        'IN_REVIEW'             => 10,
        'PRIORITY'              => 11,
        'PRIORITY_2'            => 12,
        'HIGH_PRIORITY'         => 13,
        'REVIEW_ESTIMATED_TIME' => 14,
        'USER_COMPLETE'         => 15,
        'USER_COMPLETE_2'       => 16,
        'USER_ESTIMATED'        => 17,
        'DECLINE'               => 18,
        'REOPEN'                => 19,
        'APPROVED'              => 20,
    ];

    const TASK_STATUS_DONE = 1;

    const TASK_STATUS_DISCUSSING = 2;

    const TASK_STATUS_IN_PROGRESS = 3;

    const TASK_STATUS_ISSUE = 4;

    const TASK_STATUS_PLANNED = 5;

    const TASK_STATUS_DISCUSS_WITH_LEAD = 6;

    const TASK_STATUS_NOTE = 7;

    const TASK_STATUS_LEAD_RESPONSE_NEEDED = 8;

    const TASK_STATUS_ERRORS_IN_TASK = 9;

    const TASK_STATUS_IN_REVIEW = 10;

    const TASK_STATUS_PRIORITY = 11;

    const TASK_STATUS_PRIORITY_2 = 12;

    const TASK_STATUS_HIGH_PRIORITY = 13;

    const TASK_STATUS_REVIEW_ESTIMATED_TIME = 14;

    const TASK_STATUS_USER_COMPLETE = 15;

    const TASK_STATUS_USER_COMPLETE_2 = 16;

    const TASK_STATUS_USER_ESTIMATED = 17;

    const TASK_STATUS_DECLINE = 18;

    const TASK_STATUS_REOPEN = 19;

    const TASK_STATUS_APPROVED = 20;

    public static function boot()
    {
        parent::boot();

        static::creating(function ($model) {
            try {
                // Check the assinged user in any team ?
                if ($model->assign_to > 0 && (empty($model->master_user_id) || empty($model->second_master_user_id))) {
                    $teamUser = \App\TeamUser::where('user_id', $model->assign_to)->first();
                    if ($teamUser) {
                        $team = $teamUser->team;
                        if ($team) {
                            $model->master_user_id = $team->user_id;

                            if (strlen($team->second_lead_id) > 0 && $team->second_lead_id > 0) {
                                $model->second_master_user_id = $team->second_lead_id;
                            }
                        }
                    } else {
                        $isTeamLeader = \App\Team::where('user_id', $model->assign_to)
                                ->orWhere('second_lead_id', $model->assign_to)->first();
                        if ($isTeamLeader) {
                            $model->master_user_id = $model->assign_to;
                        }
                    }
                }
            } catch(Exception $e) {
                //
            }
        });
    }

    public static function hasremark($id)
    {
        $task = Task::find($id);
        if (! empty($task->remark)) {
            return true;
        } else {
            return false;
        }
    }

    // getting remarks
    public static function getremarks($taskid)
    {
        $results = DB::select('select * from remarks where taskid = :taskid order by created_at DESC', ['taskid' => $taskid]);

        return json_decode(json_encode($results), true);
    }

    public function remarks()
    {
        return $this->hasMany(\App\Remark::class, 'taskid')->where('module_type', 'task')->latest();
    }

    public function notes()
    {
        return $this->hasMany(\App\Remark::class, 'taskid')->where('module_type', 'task-note')->latest();
    }

    public function users()
    {
        return $this->belongsToMany(\App\User::class, 'task_users', 'task_id', 'user_id')->where('type', \App\User::class);
    }

    public function assignedTo()
    {
        return $this->belongsTo(\App\User::class, 'assign_to', 'id');
    }

    public function contacts()
    {
        return $this->belongsToMany(\App\Contact::class, 'task_users', 'task_id', 'user_id')->where('type', \App\Contact::class);
    }

    public function whatsappgroup()
    {
        return $this->hasOne(WhatsAppGroup::class);
    }

    public function whatsappAll($needBroadCast = false)
    {
        if ($needBroadCast) {
            return $this->hasMany(\App\ChatMessage::class, 'task_id')->whereIn('status', ['7', '8', '9', '10'])->latest();
        }

        return $this->hasMany(\App\ChatMessage::class, 'task_id')->whereNotIn('status', ['7', '8', '9', '10'])->latest();
    }

    public function allMessages()
    {
        return $this->hasMany(ChatMessage::class, 'task_id', 'id')->orderBy('id', 'desc');
    }

    public function customer()
    {
        return $this->belongsTo(\App\Customer::class, 'customer_id', 'id');
    }

    public function timeSpent()
    {
        return $this->hasOne(
            \App\Hubstaff\HubstaffActivity::class,
            'task_id',
            'hubstaff_task_id'
        )
            ->selectRaw('task_id, SUM(tracked) as tracked')
            ->groupBy('task_id');
    }

    public function taskStatus()
    {
        return $this->hasOne(
            'App\taskStatus',
            'id',
            'status'
        );
    }

    public function taskStatusAlter()
    {
        return $this->hasOne(TaskStatus::class, 'id', 'status');
    }

    public function developerTasksHistory()
    {
        return $this->hasMany(DeveloperTaskHistory::class, 'developer_task_id')->orderByDesc('id', 'DESC');
    }

    public function taskHistoryForStartDate()
    {
        return $this->hasMany(TaskHistoryForStartDate::class, 'task_id')->orderByDesc('id', 'DESC');
    }

    public function taskDueDateHistoryLogs()
    {
        return $this->hasMany(TaskDueDateHistoryLog::class, 'task_id')->orderByDesc('id', 'DESC');
    }

    public function createTaskFromSortcuts($request)
    {
        $created        = 0;
        $message        = '';
        $assignedUserId = 0;

        if (isset($request['task_asssigned_from'])) {
            $data['assign_from'] = $request['task_asssigned_from'];
        } else {
            $data['assign_from'] = Auth::id();
        }

        $data['status'] = 3;
        $task           = 0;
        $taskType       = $request['task_type'];

        if (isset($request['parent_task_id'])) {
            $data['parent_task_id'] = $request['parent_task_id'];
        }

        if ($taskType == '4' || $taskType == '5' || $taskType == '6') {
        } else {
            if (isset($data['is_flow_task'])) {
                $data['is_flow_task'] = $data['is_flow_task'];
            } else {
                $data['is_flow_task'] = 1;
            }
            if ($request['task_asssigned_to']) {
                if (is_array($request['task_asssigned_to'])) {
                    $data['assign_to'] = $request['task_asssigned_to'];
                } else {
                    $data['assign_to'] = $request['task_asssigned_to'];
                }
            } else {
                $data['assign_to'] = $request['assign_to_contacts'];
            }
            //discussion task

            $data['is_statutory']         = $request['task_type'];
            $data['task_details']         = $request['task_detail'];
            $data['task_subject']         = $request['task_subject'];
            $data['customer_id']          = $request['customer_id'];
            $data['site_developement_id'] = $request['site_id'];
            $data['cost']                 = $request['cost'];
            if ($request['category_id'] != null) {
                $data['category'] = $request['category_id'];
            }
            $task           = Task::create($data);
            $created        = 1;
            $assignedUserId = $task->assign_to;
            if ($task->is_statutory != 1) {
                $message = '#' . $task->id . '. ' . $task->task_subject . '. ' . $task->task_details;
            } else {
                $message = $task->task_subject . '. ' . $task->task_details;
            }

            $params = [
                'number'   => null,
                'user_id'  => $data['assign_from'],
                'approved' => 1,
                'status'   => 2,
                'task_id'  => $task->id,
                'message'  => $message,
            ];

            if (count($task->users) > 0) {
                if ($task->assign_from == Auth::id()) {
                    foreach ($task->users as $key => $user) {
                        if ($key == 0) {
                            $params['erp_user'] = $user->id;
                        } else {
                            app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($user->phone, $user->whatsapp_number, $params['message']);
                        }
                    }
                } else {
                    foreach ($task->users as $key => $user) {
                        if ($key == 0) {
                            $params['erp_user'] = $task->assign_from;
                        } else {
                            if ($user->id != Auth::id()) {
                                app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($user->phone, $user->whatsapp_number, $params['message']);
                            }
                        }
                    }
                }
            }

            if (count($task->contacts) > 0) {
                foreach ($task->contacts as $key => $contact) {
                    if ($key == 0) {
                        $params['contact_id'] = $task->assign_to;
                    } else {
                        app(\App\Http\Controllers\WhatsAppController::class)->sendWithThirdApi($contact->phone, null, $params['message']);
                    }
                }
            }

            $chat_message = ChatMessage::create($params);
            ChatMessagesQuickData::updateOrCreate([
                'model'    => \App\Task::class,
                'model_id' => $params['task_id'],
            ], [
                'last_communicated_message'    => @$params['message'],
                'last_communicated_message_at' => $chat_message->created_at,
                'last_communicated_message_id' => ($chat_message) ? $chat_message->id : null,
            ]);

            $myRequest = new Request();
            $myRequest->setMethod('POST');
            $myRequest->request->add(['messageId' => $chat_message->id]);
            app(\App\Http\Controllers\WhatsAppController::class)->approveMessage('task', $myRequest);
        }

        if ($created) {
            // $hubstaff_project_id = getenv('HUBSTAFF_BULK_IMPORT_PROJECT_ID');
            $hubstaff_project_id = config('env.HUBSTAFF_BULK_IMPORT_PROJECT_ID');

            $assignedUser = HubstaffMember::where('user_id', $assignedUserId)->first();

            $hubstaffUserId = null;
            $hubstaffTaskId = null;
            if ($assignedUser) {
                $hubstaffUserId = $assignedUser->hubstaff_user_id;
            }
            $taskSummery = substr($message, 0, 200);
            if ($hubstaffUserId) {
                $hubstaffTaskId = app(\App\Http\Controllers\TaskModuleController::class)->createHubstaffTask(
                    $taskSummery,
                    $hubstaffUserId,
                    $hubstaff_project_id
                );
            }

            if ($hubstaffTaskId) {
                $task->hubstaff_task_id = $hubstaffTaskId;
                $task->save();
            }
            if ($hubstaffTaskId) {
                $hubtask                      = new HubstaffTask();
                $hubtask->hubstaff_task_id    = $hubstaffTaskId;
                $hubtask->project_id          = $hubstaff_project_id;
                $hubtask->hubstaff_project_id = $hubstaff_project_id;
                $hubtask->summary             = $message;
                $hubtask->save();
            }
        }

        return $task;

        return response()->json(['code' => 200, 'data' => [], 'message' => 'Your quick task has been created!']);
    }

    public function site_development()
    {
        return $this->belongsTo(\App\SiteDevelopment::class, 'site_developement_id', 'id');
    }

    public function updateStartDate($new)
    {
        $old = $this->start_date;

        if (isset($this->due_date) && $this->due_date != '0000-00-00 00:00:00' && isset($new)) {
            $newStartDate = Carbon::parse($new);
            $estimateDate = Carbon::parse($this->due_date);
            if ($newStartDate->gte($estimateDate)) {
                throw new Exception('Estimate start date time must be less then Estimate end date time.');
            }
        }

        $count = TaskHistoryForStartDate::where('task_id', $this->id)->count();
        if ($count) {
            TaskHistoryForStartDate::historySave($this->id, $old, $new, 0);
        } else {
            TaskHistoryForStartDate::historySave($this->id, $old, $new, 1);
        }
        $this->start_date = $new;
        $this->save();
    }

    public function updateDueDate($new)
    {
        $old = $this->due_date;

        if (isset($this->start_date) && $this->start_date != '0000-00-00 00:00:00' && isset($new)) {
            $startDate       = Carbon::parse($this->start_date);
            $newEstimateDate = Carbon::parse($new);
            if ($newEstimateDate->lte($startDate)) {
                throw new Exception('Estimate end date time must be greater then Estimate start date time.');
            }
        }

        $count = TaskDueDateHistoryLog::where('task_id', $this->id)->count();
        if ($count) {
            TaskDueDateHistoryLog::historySave($this->id, $old, $new, 0);
        } else {
            TaskDueDateHistoryLog::historySave($this->id, $old, $new, 1);
        }
        $this->due_date = $new;
        $this->save();
    }

    public static function getMessagePrefix($obj)
    {
        return '#TASK-' . $obj->id . '-' . $obj->task_subject . ' => ';
    }

    /* Common function to get tasks filtered and for Task & Activity module */
    public static function getSearchedTasks($type, $request)
    {
        $term          = $request->term ?? '';
        $selected_user = $request->selected_user ?? '';
        $paginate      = 50;
        $page          = $request->get('page', 1);
        $offSet        = ($page * $paginate) - $paginate;

        $chatSubQuery = DB::table('chat_messages')
                    ->select(
                        'chat_messages.id as message_id',
                        'chat_messages.task_id',
                        'chat_messages.message',
                        'chat_messages.is_audio',
                        'chat_messages.status as message_status',
                        'chat_messages.sent as message_type',
                        'chat_messages.created_at as message_created_at',
                        'chat_messages.is_reminder as message_is_reminder',
                        'chat_messages.user_id as message_user_id'
                    )
                    ->join('chat_messages_quick_datas', 'chat_messages_quick_datas.last_communicated_message_id', '=', 'chat_messages.id')
                    ->whereNotIn('chat_messages.status', [7, 8, 9])
                    ->where('chat_messages_quick_datas.model', '=', \App\Task::class);

        $qb = self::select(
            'tasks.*',
            'assign_from_user.name as assign_from_username',
            'assign_to_user.name as assign_to_username',
            'message_id',
            'task_id',
            'message',
            'message_status',
            'message_type',
            'message_created_at',
            'message_is_reminder',
            'message_user_id'
        )
           ->leftJoinSub($chatSubQuery, 'chat_messages', function ($join) {
               $join->on('chat_messages.task_id', '=', 'tasks.id');
           })
           ->leftJoin('users as assign_from_user', 'tasks.assign_from', '=', 'assign_from_user.id')
           ->leftJoin('users as assign_to_user', 'tasks.assign_to', '=', 'assign_to_user.id')
           ->leftJoin('task_categories', 'tasks.category', '=', 'task_categories.id')
           ->leftJoin('users', 'tasks.assign_from', '=', 'users.id')
           ->whereNull('tasks.deleted_at')
           ->whereNotNull('tasks.id');

        if ($type != 'statutory_not_completed_list') {
            if ($request->get('is_statutory_query') != '' && $request->get('is_statutory_query') != null) {
                $qb->where('is_statutory', '=', $request->get('is_statutory_query'));
            } else {
                $qb->where('is_statutory', '!=', 3);
            }
        }

        if ($term != '') {
            $qb->where(function ($query) use ($term) {
                $query->where('tasks.id', 'LIKE', '%' . $term . '%')
                ->orWhere('task_categories.title', 'LIKE', '%' . $term . '%')
                ->orWhere('tasks.task_subject', 'LIKE', '%' . $term . '%')
                ->orWhere('tasks.task_details', 'LIKE', '%' . $term . '%')
                ->orWhere('assign_from_user.name', 'LIKE', '%' . $term . '%')
                ->orWhere('users.name', 'LIKE', '%' . $term . '%')
                ->orWhereIn('tasks.id', function ($subquery) use ($term) {
                    $subquery->select('task_id')
                    ->from('task_users')
                    ->whereIn('task_users.user_id', function ($sq2) use ($term) {
                        $sq2->select('id')
                        ->from('users')
                        ->where('name', 'LIKE', '%' . $term . '%');
                    });
                });
            });
        }

        if ($selected_user != '') {
            $qb->where('assign_to', $selected_user);
        }

        if ($request->sort_by == 1) {
            $qb->orderByDesc('tasks.created_at');
        } elseif ($request->sort_by == 2) {
            $qb->orderBy('tasks.created_at');
        }

        if ($type == 'pending') {
            $qb->where('is_statutory', '!=', 1);
            $qb->whereIn('tasks.status', TaskStatus::pluck('id')->toArray());

            if ($term != '') {
                $qb->where('tasks.id', '=', $term);
            }

            $qb->orderByDesc('tasks.is_flagged')
            ->orderByDesc('chat_messages.message_created_at')
            ->offset($offSet)
            ->limit($paginate);

            return $qb->get();
        } elseif (in_array($type, ['pending_list', 'completed_list', 'statutory_not_completed_list'])) {
            $qb->selectRaw('customers.name AS customer_name')
            ->leftJoin('customers', 'tasks.customer_id', '=', 'customers.id');

            if ($request->filter_status) {
                $qb->whereIn('tasks.status', $request->filter_status);
            } else {
                $qb->whereNotIn('tasks.status', [1]);
            }

            $userIdsString = $request->input('selected_user');
            $selectedUser  = $userIdsString;
            if ($userIdsString == '') {
                $userIdsString = [Auth::id()];
            }

            $searchMasterUserId = $userIdsString;
            if ($request->search_master_user_id != '') {
                $searchMasterUserId = $request->search_master_user_id;
            }

            $searchSecondMasterUserId = $userIdsString;
            if ($request->search_second_master_user_id != '') {
                $searchSecondMasterUserId = $request->search_second_master_user_id;
            }

            $qb->where(function ($query) use ($searchMasterUserId, $searchSecondMasterUserId, $userIdsString, $selectedUser) {
                if ($selectedUser == '') {
                    $query->whereIn('tasks.assign_from', $userIdsString);
                } else {
                    $query->whereIn('tasks.assign_to', $userIdsString);
                }

                $query
                ->orWhere('tasks.second_master_user_id', $searchSecondMasterUserId)
                ->orWhere('tasks.master_user_id', $searchMasterUserId)
                ->orWhereIn('tasks.id', function ($subquery) use ($userIdsString) {
                    $subquery->select('task_id')
                    ->from('task_users')
                    ->whereIn('task_users.user_id', function ($sq2) use ($userIdsString) {
                        $sq2->select('id')
                        ->from('users')
                        ->whereIn('user_id', $userIdsString)
                        ->where('type', 'LIKE', '%User%');
                    });
                });
            });

            if ($request->ajax() && ! $request->flag_filter) {
                $qb->where('tasks.is_flagged', 0);
            }

            if ($request->category != '' && $request->category != 1) {
                $qb->where('tasks.category', $request->category);
            }
            if ($type != 'statutory_not_completed_list') {
                $qb->where('is_statutory', '!=', 1);
            } elseif ($type == 'statutory_not_completed_list') {
                $qb->where('is_statutory', '=', 1);
                $qb->whereNull('is_verified');
            }
            if ($type === 'completed_list' || $type == 'statutory_not_completed_list') {
                if ($type == 'completed_list') {
                    $qb->whereNotNull('is_verified');
                }

                $qb->selectRaw('message_created_at as last_communicated_at');
                $qb->orderByDesc('last_communicated_at');
            } elseif ($type === 'pending_list') {
                if ($request->filter_by == 1) {
                    $qb->whereNull('is_completed');
                }
                if ($request->filter_by == 2) {
                    $qb->whereNotNull('is_completed');
                }
                if ($request->filter_by != 1) {
                    $qb->whereNull('is_verified');
                }

                $qb->orderByDesc('tasks.is_flagged');
                $qb->orderByDesc('message_created_at');
            }
            $qb->offset($offSet);
            $qb->limit($paginate);

            return $qb->get();
        }
    }

    public static function getDeveloperTasksHistory($id)
    {
        return self::with([
            'developerTasksHistory',
            'taskHistoryForStartDate',
            'taskDueDateHistoryLogs',
        ])->where('tasks.id', $id)->first();
    }

    public function taskStartEndHistories()
    {
        return $this->hasMany(TaskStartEndHistory::class, 'task_id', 'id');
    }

    public function developerTaskHistories()
    {
        return $this->hasMany(DeveloperTaskHistory::class, 'developer_task_id', 'id');
    }
}


File: /opt/lampp/htdocs/erp/app/UserRate.php 
Content: <?php

namespace App;

/**
 * @SWG\Definition(type="object", @SWG\Xml(name="User"))
 */
use DB;
use Illuminate\Database\Eloquent\Model;

class UserRate extends Model
{
    /**
     * @var string
     *
     * @SWG\Property(property="user_id",type="integer")

     * @SWG\Property(property="start_date",type="datetime")
     */
    protected $fillable = [
        'user_id', 'start_date',
    ];

    public static function getRateForUser($userId)
    {
        return self::orderBy('start_date', 'desc')->where('user_id', $userId)->take(1)->first();
    }

    public static function ratesForWeek($week, $year)
    {
        $result = getStartAndEndDate($week, $year);
        $start  = $result['week_start'];
        $end    = $result['week_end'];

        return self::where('start_date', '>=', $start)
          ->where('start_date', '<', $end)
          ->get();
    }

    public static function rateChangesForDate($start, $end)
    {
        return self::where('start_date', '>=', $start)
          ->where('start_date', '<', $end)
          ->get();
    }

    /**
     * Carry forward the rates from last week to be a part of calculation
     *
     * @param mixed $week
     * @param mixed $year
     */
    public static function latestRatesForWeek($week, $year)
    {
        $result = getStartAndEndDate($week, $year);
        $start  = $result['week_start'];
        $end    = $result['week_end'];

        $query = "SELECT
        *
      from user_rates
      where
        id in (
          SELECT
            GROUP_CONCAT(id) as id
          FROM (
              SELECT
                *
              FROM `user_rates`
              WHERE
                start_date < '$end'
            ) as a
          group by
            user_id
        )";

        $rateData = DB::select($query);

        return self::hydrate($rateData);
    }

    public static function latestRatesBeforeTime($time)
    {
        $query = "SELECT
        *
      from user_rates
      where
        id in (
          SELECT
            GROUP_CONCAT(id) as id
          FROM (
              SELECT
                *
              FROM `user_rates`
              WHERE
                start_date < '$time'
            ) as a
          group by
            user_id
    )";

        $rateData = DB::select($query);

        return self::hydrate($rateData);
    }

    public static function latestRatesOnDate($time, $user_id)
    {
        return self::where('start_date', '<', $time)
        ->where('user_id', $user_id)
        ->orderBy('start_date', 'desc')
        ->first();
    }
}
