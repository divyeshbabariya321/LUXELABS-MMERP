[
  {
    "schedule_name": "hubstaff:account",
    "query": "SELECT id FROM hubstaff_activities ORDER BY starts_at",
    "description": "select all data from hubstaff_activity table and order them by starts_at"
  },
  {
    "schedule_name": "hubstaff:account",
    "query": "SELECT * from user_rates where id in (SELECT GROUP_CONCAT(id) as id FROM ( SELECT * FROM `user_rates` WHERE start_date < 'time') as a group by user_id)",
    "description": "select all data from user_rates where id in user_rates where start_date is less than time and group by user_id"
  },
  {
    "schedule_name": "hubstaff:account",
    "query": "SELECT * from hubstaff_activities where start_date >= `start` where start_date < `end`)",
    "description": "select all data from hubstaff_activities where start_date is grater than start where start_date is less than end"
  },
  {
    "schedule_name": "AddBitsToMediaTable",
    "query": "select * from `media` where `bits` is null and `directory` like `product` order by `id` asc",
    "description": "Select all data from media where bits is null and directery like product order by is asc"
  },
  {
    "schedule_name": "AddGroupTheme",
    "query": "update website_store_view SET ref_theme_group_id = null where ref_theme_group_id != null",
    "description": "Update ref_theme_group_id in website_store_view table where ref_theme_group_id not null"
  },
  {
    "schedule_name": "AddRoutesToGroups",
    "query": "select * from `group_routes`",
    "description": "Select all data in group_routes table"
  },
  {
    "schedule_name": "AddRoutesToGroups",
    "query": "delete  from  group_routes WHERE route_id=route_id",
    "description": "delete route id in group_routes where route_id=route_id"
  },
  {
    "schedule_name": "AddRoutesToGroups",
    "query": "update group_routes set group_id=group_id, route_id=route_id, route_name =route_name,domain=domain, url= url  where group_id=group_id ",
    "description": "Update group_id=group_id, route_id=route_id, route_name =route_name,domain=domain, url= url  in group_routes table where group id =group id "
  },
  {
    "schedule_name": "AddRoutesToGroups",
    "query": "insert INTO group_routes (group_id, route_id, route_name, domain, url) values (value1, route_id, route_name,domain,url )",
    "description": "insert the all data in group_routes table"
  },
  {
    "schedule_name": "ChangeTesterBasedOnTeamLead",
    "query": "update `developer_tasks` set `tester_id` = 414  where `team_lead_ide` = 319",
    "description": "Update tester_id = 414 in developer_tasks table where team_lead_ide=319"
  },
  {
    "schedule_name": "CheckScrapersLog",
    "query": "select * from `scrapers` where `scraper_name` = name",
    "description": "Select all data in scrapers table where scraper_name = name"
  },
  {
    "schedule_name": "CheckScrapersLog",
    "query": "select * from `users` where `id` = ?",
    "description": "Select all data in users table where id = id"
  },
  {
    "schedule_name": "ConnectGoogleClientAccounts",
    "query": "select * from `google_client_account_mails` ",
    "description": "Select att data in google_client_account_mails table order "
  },
  {
    "schedule_name": "ConnectGoogleClientAccounts",
    "query": "select * from `users`",
    "description": "Select all data in user table"
  },
  {
    "schedule_name": "ConnectGoogleClientAccounts",
    "query": "GoogleClientAccount::find($acc->google_client_account_id)",
    "description": ""
  },
  {
    "schedule_name": "ConnectGoogleClientAccounts",
    "query": "insert into google_client_notification (google_client_id, receiver_id, message, notification_type) values (id, id, msg, error)",
    "description": "Insert the google_client_id, receiver_id, message, notification_type field in google_client_notification"
  },
  {
    "schedule_name": "GT-metrix-account-credit-limit",
    "query": "select * from store_gt_metrix_account",
    "description": "select all data in store_gt_metrix_account"
  },
  {
    "schedule_name": "GT-metrix-account-credit-limit",
    "query": "update store_gt_metrix_account status=active where account_id= account_id",
    "description": "update status field in store_gt_metrix_account where account_id= account_id "
  },
  {
    "schedule_name": "GT-metrix-account-credit-limit",
    "query": "update store_gt_metrix_account status=inactive where account_id= account_id",
    "description": "update status field in store_gt_metrix_account where account_id= account_id"
  },
  {
    "schedule_name": "hubstaff:account",
    "query": "select * from hubstaff_activities order by starts_at",
    "description": "select all data in hubstaff_activities table order by starts_at"
  },
  {
    "schedule_name": "hubstaff:account",
    "query": "select * from `user_rates` where `start_date` >= ? and `start_date` < ?",
    "description": "select all data in user_rates table where start_date is grater than start where start_date is less than end"
  },
  {
    "schedule_name": "hubstaff:account",
    "query": "select `hubstaff_activities`.*, `hubstaff_members`.`user_id` as `system_user_id` from `hubstaff_activities` left join `hubstaff_members` on `hubstaff_members`.`hubstaff_user_id` = `hubstaff_activities`.`user_id` where `starts_at` >= ? and `starts_at` < ?",
    "description": ""
  },
  {
    "schedule_name": "hubstaff:account",
    "query": "select * from `users` where 0 = 1 and `users`.`deleted_at` is null",
    "description": "select all data in users deleted_at in not null"
  },
  {
    "schedule_name": "hubstaff:account",
    "query": "insert into hubstaff_payment_account (user_id, accounted_at, amount, hrs, billing_start, billing_end, rate,payment_currency, total_payout, ex_rate) values (user_id, accounted_at, amount, hrs, billing_start, billing_end, rate,payment_currency, total_payout, 68)",
    "description": "insert the record in hubstaff_payment_account"
  },
  {
    "schedule_name": "hubstaff:account",
    "query": "update hubstaff_activity hubstaff_payment_account_id=id  where id= account_id",
    "description": "update in hubstaff_activity table where  id= account_id in hubstaff_payment_account_id equal to id"
  },
  {
    "schedule_name": "hubstaff:account",
    "query": "select * from developer_task where hubstaff_task_id=task id",
    "description": "select all data in developer_task table where hubstaff_task_id=task id"
  },
  {
    "schedule_name": "hubstaff:account",
    "query": "update developer_task estimate_minutes=estimate_minutes where id= id",
    "description": "Update estimate_minutes field in developer_task table where developer_task id =id  "
  },
  {
    "schedule_name": "database:historical-data",
    "query": "SELECT table_schema as db_name,Round(Sum(data_length + index_length) / 1024 / 1024, 1) as db_size FROM information_schema.tables  where table_schema = erp GROUP  BY table_schema",
    "description": ""
  },
  {
    "schedule_name": "database:historical-data",
    "query": "select * from `database_historical_records` where `database_name` = ? order by `created_at` desc",
    "description": "select all data in database_historical_records table where `database_name` = ? order by `created_at` desc"
  },
  {
    "schedule_name": "database:historical-data",
    "query": "insert into database_historical_record (database_name,size) values (db_name, db_size)",
    "description": "insert the database_name and size record in database_historical_record "
  },
  {
    "schedule_name": "database:historical-data",
    "query": "select TABLE_NAME as db_table_name, Round(Sum(data_length + index_length) / 1024, 1) as db_size FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = BASE TABLE AND TABLE_SCHEMA='db_name.' GROUP  BY TABLE_NAME",
    "description": ""
  },
  {
    "schedule_name": "database:historical-data",
    "query": "select * from `database_table_historical_records` where `database_name` = name and `database_id` = id order by `created_at` asc",
    "description": "select all data in database_table_historical_records table where `database_name` = name and `database_id` = id order by `created_at` asc"
  },
  {
    "schedule_name": "database:historical-data",
    "query": "insert into chat_message (message,erp_user, user_id, approved, status, message_application_id) values (message, user_id,user_id, 1 ,2 , 10001)",
    "description": "insert the message,erp_user, user_id, approved, status and message_application_id record chat_message table"
  },
  {
    "schedule_name": "database:historical-data",
    "query": "insert into database_table_historical_record (database_name,size, database_id) values (db_name, db_size, id)",
    "description": "insert the database_name,siz and database_id record in database_table_historical_record "
  },
  {
    "schedule_name": "database:table-historical-data",
    "query": "SELECT TABLE_NAME as db_name, Round(Sum(data_length + index_length) / 1024, 1) as db_size FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = BASE TABLE AND TABLE_SCHEMA=erp GROUP  BY TABLE_NAME",
    "description": ""
  },
  {
    "schedule_name": "database:table-historical-data",
    "query": "select * from `database_historical_records` where `database_name` = ? order by `created_at` desc",
    "description": "select all data in database_historical_records table where `database_name` = ? order by `created_at` desc "
  },
  {
    "schedule_name": "database:table-historical-data",
    "query": "insert into database_table_historical_record (database_name,size, database_id) values (db_name, db_size, id)",
    "description": "insert the database_name,size and database_id field in database_table_historical_record table"
  },
  {
    "schedule_name": "AddGroupTheme",
    "query": "update `website_store_views` set `ref_theme_group_id` = ?, `website_store_views`.`updated_at` = 2023-03-24 15:36:23 where `ref_theme_group_idww` is not null",
    "description": " "
  },
  {
    "schedule_name": "AddGroupTheme",
    "query": "update website_store_view ref_theme_group_id=ref_group_id where store_group_id= ref_group_id",
    "description": "update ref_theme_group_id field in website_store_view table where store_group_id= ref_group_id"
  },
  {
    "schedule_name": "hashtags:update-counts",
    "query": "select * from `hash_tags` order by `post_count` asc",
    "description": "selected all data in hash_tags  order by post_count asc"
  },
  {
    "schedule_name": "rename:brandLogo",
    "query": "select * from `brand_logos` where `logo_image_name` = 'image name'",
    "description": "selected all data from  brand_logos where `logo_image_name` = 'image name'"
  },
  {
    "schedule_name": "rename:brandLogo",
    "query": "insert into brand_logo (logo_image_namess,size, user_id) values (logo_image_namess, db_size, user id)",
    "description": "insert the logo_image_namess,size and user_id from brand_logo table "
  },
  {
    "schedule_name": "AddRoutesToGroups",
    "query": "select * from `group_routes`",
    "description": "selected all data from  group_routes"
  },
  {
    "schedule_name": "AddRoutesToGroups",
    "query": "delete  from  group_routes WHERE route_id=route_id",
    "description": "delete record from group_routes table where route_id=route_id "
  },
  {
    "schedule_name": "AddRoutesToGroups",
    "query": "update group_routes set group_id=group_id, route_id=route_id, route_name =route_name,domain=domain, url= url where group_id=group_id ",
    "description": "update record in group_id ,route_id, route_name, domain, url in group_routes table where group_id=group_id "
  },
  {
    "schedule_name": "addUserPaymentData",
    "query": "select `developer_tasks`.* from `developer_tasks` left join `payment_receipts` on `payment_receipts`.`developer_task_id` = `developer_tasks`.`id` and `payment_receipts`.`status` = ? where `is_resolved` = ? and `payment_receipts`.`developer_task_id` is null and `developer_tasks`.`deleted_at` is null group by `developer_tasks`.`id`",
    "description": ""
  },
  {
    "schedule_name": "addUserPaymentData",
    "query": "insert into payment_receipt (status,rate_estimated, date, currency, user_id, by_command, developer_task_id) values (Pending, rate_estimated, date, '', id, 1,id)",
    "description": ""
  },
  {
    "schedule_name": "addUserPaymentData",
    "query": "select `tasks`.* from `tasks` left join `payment_receipts` on `payment_receipts`.`task_id` = `tasks`.`id` and `payment_receipts`.`status` = ? where `tasks`.`status` = ? and `payment_receipts`.`task_id` is null and `tasks`.`deleted_at` is null group by `tasks`.`id`",
    "description": ""
  },
  {
    "schedule_name": "addUserPaymentData",
    "query": "select * from user where task=assign_to",
    "description": "select all data in user table where task equal to assign_to"
  },
  {
    "schedule_name": "addUserPaymentData",
    "query": "update payment_receipt status=Pending, rate_estimated=rate_estimated, date=date, currency='', user_id=task_user_id, by_command=1, task_id= task_id  where  task_id=id and  user_id=user_id",
    "description": "Update status, rate_estimated, date, currency, user_id, by_command, task_id field in payment_receipt table where  task_id=id and  user_id=user_id"
  },
  {
    "schedule_name": "addUserPaymentData",
    "query": "insert into payment_receipt (status,rate_estimated, date, currency,by_command,task_id) values ('Pending', rate_estimated, date, '', task user id, 1, id)",
    "description": "insert status,rate_estimated, date, currency,by_command and task_id record in payment_receipt table"
  },
  {
    "schedule_name": "addWebsiteLangGroup",
    "query": "select * from `website_store_views` where `store_group_id` is null",
    "description": "select all record in website_store_views  table  where `store_group_id` is null"
  },
  {
    "schedule_name": "addWebsiteLangGroup",
    "query": "select * from `website_store_views` where `id` = id",
    "description": "select all record in website_store_views  table  where id equal id"
  },
  {
    "schedule_name": "addWebsiteLangGroup",
    "query": "update website_store_view store_group_id=response id where id= id",
    "description": "Update store_group_id field in website_store_view table where id equal id "
  },
  {
    "schedule_name": "addWebsiteLangGroup",
    "query": "select * from `website_store_views` where `store_group_id` is id",
    "description": "select all record in website_store_view  table  where store_group_id equal id"
  },
  {
    "schedule_name": "addWebsiteLangGroup",
    "query": "select * from `website_store_views` where `name` = name and `code` = code",
    "description": "select all record in website_store_view  table  where  name equal name and code equal code"
  },
  {
    "schedule_name": "addWebsiteLangGroup",
    "query": "update website_store_view store_group_id=store_group_id. where id= id",
    "description": "Update store_group_id field in website_store_view table where id equal id"
  },
  {
    "schedule_name": "ai:run",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "ai:run",
    "query": " insert into `cron_job_erro_logs` (`signature`, `priority`, `error`, `error_count`, `status`, `module`, `subject`, `assigned_to`, `updated_at`, `created_at`) values (ai:run, 1, Method Plank\\Mediable\\MediableCollection::toSql does not exist., 1, Planned, Cron, URGENT-CRON-ISSUE-AI:RUN, 53, 2023-03-24 17:05:06, 2023-03-24 17:05:06)",
    "description": "insert all field in cron_job_erro_logs table  "
  },
  {
    "schedule_name": "ai:run",
    "query": "select * from `log_scraper_vs_ai` where (`product_id` = ?)",
    "description": "select all record in log_scraper_vs_ai table where product_id equal id"
  },
  {
    "schedule_name": "ai:run",
    "query": "select * from `products` where `id` = ? and `products`.`deleted_at` is null",
    "description": "Select all record in products table where id equal id"
  },
  {
    "schedule_name": "ai:run",
    "query": "insert into log_scraper_vs_ai (product_id, ai_name,media_input, result_scraper, result_ai) values (id,'Google Vision', media_input, result_scraper, result_ai)",
    "description": "insert  product_id, ai_name,media_input, result_scraper and result_ai field in log_scraper_vs_ai table"
  },
  {
    "schedule_name": "logs:analyze",
    "query": "select `id`, `user_id` from `github_users` where `id` in [Id array]",
    "description": "select id and user id in github_users table where id in same ids"
  },
  {
    "schedule_name": "logs:analyze",
    "query": "insert into issue (user_id, issue, priority, module, subject) values (user_id, issue, 0,'', subject)",
    "description": "insert the user_id, issue, priority, module and subject field in  issue table"
  },
  {
    "schedule_name": "assetsmanagerduedate:pay",
    "query": "select * from `assets_manager` where date(`due_date`) = ?",
    "description": "select all data in assets_manager table where due_date equal due_date"
  },
  {
    "schedule_name": "assetsmanagerduedate:pay",
    "query": "select * from `cash_flows` where `date` = ? and `cash_flow_able_id` = ? and `cash_flow_able_type` = ? and `type` = ?",
    "description": "select all data in cash_flows table where date equal dat and cash_flow_able_id equal id  cash_flow_able_type = cash_flow_able_type and type = type "
  },
  {
    "schedule_name": "assetsmanagerduedate:pay",
    "query": "insert into cash_flow (description, date, amount, expected, actual,currency, type,  cash_flow_able_id, cash_flow_category_id, cash_flow_able_type) values (description, date, amount, expected, actual,currency,'pending', cash_flow_able_id, cash_flow_category_id, cash_flow_able_type)",
    "description": "insert description, date, amount, expected, actual,currency, type,  cash_flow_able_id, cash_flow_category_id and cash_flow_able_type field in cash_flow table"
  },
  {
    "schedule_name": "assetsmanagerpayment:cron Weekly",
    "query": "select * from `assets_manager` where `payment_cycle` = Weekly and (date(`due_date`) = due_date or `due_date` ='' or `due_date` is null)",
    "description": "select all data in assets_manager table where payment_cycle equal Weekly and due_date = due_date or due_date ='' or due_date is null"
  },
  {
    "schedule_name": "assetsmanagerpayment:cron Daily",
    "query": "select * from `assets_manager` where `payment_cycle` = Daily and (date(`due_date`) = due_date or `due_date` ='' or `due_date` is null)",
    "description": "select all data in assets_manager table where payment_cycle equal Daily and due_date = due_date or due_date ='' or due_date is null"
  },
  {
    "schedule_name": "assetsmanagerpayment:cron Monthly",
    "query": "select * from `assets_manager` where `payment_cycle` = Monthly and (date(`due_date`) = due_date or `due_date` ='' or `due_date` is null)",
    "description": "select all data in assets_manager table where payment_cycle equal Monthly and due_date = due_date or due_date ='' or due_date is null"
  },
  {
    "schedule_name": "assetsmanagerpayment:cron Bi-Weekly",
    "query": "select * from `assets_manager` where `payment_cycle` = Bi-Weekly and (date(`due_date`) = due_date or `due_date` ='' or `due_date` is null)",
    "description": "select all data in assets_manager table where payment_cycle equal Bi-Weekly and due_date = due_date or due_date ='' or due_date is null"
  },
  {
    "schedule_name": "assetsmanagerpayment:cron Yearly",
    "query": "select * from `assets_manager` where `payment_cycle` = Yearly and (date(`due_date`) = due_date or `due_date` ='' or `due_date` is null)",
    "description": "select all data in assets_manager table where payment_cycle equal Yearly and due_date = due_date or due_date ='' or due_date is null"
  },
  {
    "schedule_name": "assetsmanagerpayment:cron Weekly",
    "query": "insert into cash_flow (description, date, amount, expected, actual,currency, type,  cash_flow_able_id, cash_flow_category_id, cash_flow_able_type) values (description, date, amount, expected, actual,currency,'pending', cash_flow_able_id, cash_flow_category_id, cash_flow_able_type)",
    "description": "insert description, date, amount, expected, actual,currency, type,  cash_flow_able_id, cash_flow_category_id and cash_flow_able_type field in cash_flow table"
  },
  {
    "schedule_name": "assetsmanagerpayment:cron Daily",
    "query": "update `assets_manager` set `due_date` = 2023-03-27, `assets_manager`.`updated_at` = 2023-03-24 17:31:46 where `id` = 1",
    "description": "Update due_date field in assets_manager table where id equal 1 "
  },
  {
    "schedule_name": "assetsmanagerpayment:cron Monthly",
    "query": "update `assets_manager` set `due_date` = 2023-03-27, `assets_manager`.`updated_at` = 2023-03-24 17:31:46 where `id` = 1",
    "description": "Update due_date field in assets_manager table where id equal 1 "
  },
  {
    "schedule_name": "assetsmanagerpayment:cron Bi-Weekly",
    "query": "update `assets_manager` set `due_date` = 2023-03-27, `assets_manager`.`updated_at` = 2023-03-24 17:31:46 where `id` = 1",
    "description": "Update due_date field in assets_manager table where id equal 1 "
  },
  {
    "schedule_name": "assetsmanagerpayment:cron Yearly",
    "query": "update `assets_manager` set `due_date` = 2023-03-27, `assets_manager`.`updated_at` = 2023-03-24 17:31:46 where `id` = 1",
    "description": "Update due_date field in assets_manager table where id equal 1 "
  },
  {
    "schedule_name": "command:assign_incomplete_products",
    "query": "select * from `scraped_products` where (`cron_executed` = ?)",
    "description": "select all data in scraped_products table where cron_executed equal cron_executed"
  },
  {
    "schedule_name": "command:assign_incomplete_products",
    "query": "update `scraped_products` set `cron_executed` = 1 whereIn `id` = [id array]",
    "description": "Update  cron_executed field in scraped_products table where in id equal all id array "
  },
  {
    "schedule_name": "command:assign_incomplete_products",
    "query": "update `scraped_products` set `cron_executed` = 1 whereIn `id` = [id array]",
    "description": "Update  cron_executed field in scraped_products table where in id equal all id array "
  },
  {
    "schedule_name": "assign-scrap-process",
    "query": "select * from `scrapers` where `scraper_name` = ''",
    "description": "select all data in scrapers table where scraper_name equal scraper_name"
  },
  {
    "schedule_name": "assign-scrap-process",
    "query": "insert into scraper_process (scraper_id, scraper_name, server_id,started_at, ended_at) values (scraper_id, scraper_name, server_id,started_at, ended_at)",
    "description": "insert scraper_id, scraper_name, server_id,started_at and ended_at field in scraper_process table"
  },
  {
    "schedule_name": "approve:products",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and  start_time field in cron_job_report table"
  },
  {
    "schedule_name": "approve:products",
    "query": "select * from `products` where `is_approved` = ? and `is_listing_rejected` = ? and `is_crop_approved` = ? and `is_crop_ordered` = ? and `products`.`deleted_at` is null order by RAND()",
    "description": "select all data in products table where is_approved and is_listing_rejected and is_crop_ordered and is_crop_ordered and deleted_at in not null order by RAND"
  },
  {
    "schedule_name": "approve:products",
    "query": "insert into listing_history (user_id, product_id, action, content ) values (109, id,'LISTING_APPROVAL', ['action' => 'LISTING_APPROVAL', 'message' => 'Listing approved by ERP!'])",
    "description": "insert the user_id, product_id, action and content field in  listing_history"
  },
  {
    "schedule_name": "approve:products",
    "query": "update `product` set `is_approved` = 1, is_listing_rejected=0, approved_by=109, listing_approved_at= date whereIn `id` = [id array]",
    "description": "Update the is_approved, is_listing_rejected, approved_by and listing_approved_at  field in product table"
  },
  {
    "schedule_name": "approve:products",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "instagram:auto-comment-hashtags",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "instagram:auto-comment-hashtags",
    "query": "select * from `auto_reply_hashtags` where `status` = 1",
    "description": "select all data in auto_reply_hashtags table where status equal 1 "
  },
  {
    "schedule_name": "instagram:auto-comment-hashtags",
    "query": "select * from `auto_comment_histories` where `status` = ? limit 50",
    "description": "select all data in auto_reply_hashtags table where status equal 1 limit 50"
  },
  {
    "schedule_name": "instagram:auto-comment-hashtags",
    "query": "select * from `accounts` where `platform` = ? and `bulk_comment` = ? and `accounts`.`deleted_at` is null",
    "description": "select all data in accounts table where platform equal platform and bulk_comment equal bulk_comment and deleted_at in null "
  },
  {
    "schedule_name": "instagram:auto-comment-hashtags",
    "query": "update `auto_comment_histories` set `status` = 0, account_id=1, comment='comment' where `id` = id",
    "description": "update status, account_id and comment field in auto_comment_histories table where id equal id  "
  },
  {
    "schedule_name": "send:image-interest",
    "query": "select * from `customers` where exists (select * from `erp_leads` where `customers`.`id` = `erp_leads`.`customer_id` and (`multi_brand` is not null or `multi_category` is not null) order by `created_at` desc) and `customers`.`deleted_at` is null",
    "description": ""
  },
  {
    "schedule_name": "send:image-interest",
    "query": "select * from `customers` where exists (select * from `orders` where `customers`.`id` = `orders`.`customer_id` and exists (select * from `order_products` where `orders`.`id` = `order_products`.`order_id` and exists (select * from `products` where `order_products`.`product_id` = `products`.`id` and (`brand` is not null or `category` != ?) and `products`.`deleted_at` is null order by `created_at` desc)) and `orders`.`deleted_at` is null) and `customers`.`deleted_at` is null",
    "description": ""
  },
  {
    "schedule_name": "send:image-interest",
    "query": "insert into chat_message (customer_id) values (id)",
    "description": "insert customer_id field value in chat_message"
  },
  {
    "schedule_name": "send:auto-messenger",
    "query": "select * from `communication_histories` where `type` = ? and `model_type` = ? and `method` = ?",
    "description": "select all data in communication_histories table where type equal type and model_type equal model_type and method equal method "
  },
  {
    "schedule_name": "send:auto-messenger",
    "query": "select * from `auto_replies` where `type` = 'auto-reply' and `keyword` = 'order-refund-alternative'",
    "description": "select all data in auto_replies table where type = auto-reply and keyword = order-refund-alternative"
  },
  {
    "schedule_name": "send:auto-messenger",
    "query": "insert into chat_message (customer_id, message) values (id, message)",
    "description": "insert customer_id and message field value in chat_message"
  },
  {
    "schedule_name": "send:auto-messenger",
    "query": "select * from `orders` where `refund_answer` = 'no' and `orders`.`deleted_at` is null",
    "description": "select all data in orders table where refund_answer equal no and deleted_at is null "
  },
  {
    "schedule_name": "send:auto-messenger",
    "query": "select * from `private_views` where `status` is null",
    "description": "select all data in private_views table where status is null "
  },
  {
    "schedule_name": "send:auto-messenger",
    "query": "insert into chat_message (number, user_id, erp_user, task_id,contact_id, approved, status, message,is_reminder) values (null, user_id, erp_user, task_id, contact_id, 0, 1, message,1)",
    "description": "insert the number, user_id, erp_user, task_id,contact_id, approved, status, message and is_reminder field value in chat_message table"
  },
  {
    "schedule_name": "product:reject-if-attribute-is-missing",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time field value in cron_job_report table"
  },
  {
    "schedule_name": "send:auto-reminder",
    "query": "select * from `customers` where exists (select * from `orders` where `customers`.`id` = `orders`.`customer_id` and `order_status_id` = ? and `auto_messaged` = ? and `orders`.`deleted_at` is null order by `created_at` desc) and `customers`.`deleted_at` is null",
    "description": ""
  },
  {
    "schedule_name": "send:auto-reminder",
    "query": "insert into chat_message (customer_id, message) values (id,'Reminder about COD after 24 hours')",
    "description": "insert customer_id and message field value in chat_message table"
  },
  {
    "schedule_name": "send:auto-reminder",
    "query": "insert into chat_message (customer_id, message) values (id,'Please also note that since your order was placed on c o d - an initial advance needs to be paid to process the order - pls let us know how you would like to make this payment.')",
    "description": "insert customer_id and message field value in chat_message table"
  },
  {
    "schedule_name": "send:auto-reminder",
    "query": "select * from `chat_messages` where `customer_id` = 1 and `created_at` between ? and ? order by `created_at` desc",
    "description": "select all data in chat_messages table where customer_id = 1 and created_at between ? and ? order by created_at desc"
  },
  {
    "schedule_name": "send:auto-reminder",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "brand:merge",
    "query": "select * from brand",
    "description": "select all data in brand table "
  },
  {
    "schedule_name": "brand:merge",
    "query": "select * from `brands` where `brands`.`deleted_at` is null",
    "description": "select all data in brand table where deleted_at is null"
  },
  {
    "schedule_name": "brand:merge",
    "query": "update `brand` set `references` = references where id=id",
    "description": "update references field value in brand table where id equal id"
  },
  {
    "schedule_name": "brand:merge",
    "query": "select * from product where brand=keyId",
    "description": "select all data in product where brand equal brand"
  },
  {
    "schedule_name": "brand:merge",
    "query": "update `product` set `brand` = references,`last_brand`= last_brand  where id=id",
    "description": "update the brand and last_brand field value in product table where id equal id"
  },
  {
    "schedule_name": "brand:merge-delete",
    "query": "select * from brand ",
    "description": "select all data in brand table"
  },
  {
    "schedule_name": "brand:merge-delete",
    "query": "select * from brand where id >  brand id and whereNull(deleted_at)",
    "description": "select all data in brand table where id > brand and null delete at"
  },
  {
    "schedule_name": "brand:maxminprice",
    "query": "select * from `brands` where (`min_sale_price` is null or `min_sale_price` <= 0) and `brands`.`deleted_at` is null",
    "description": "select all data in brand table where (`min_sale_price` is null or `min_sale_price` <= 0) and `brands`.`deleted_at` is null"
  },
  {
    "schedule_name": "find:bruno-russo-composition",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "find:bruno-russo-composition",
    "query": "select * from product where supplier = 'BRUNA ROSSO'",
    "description": "select all data in product table where supplier equal 'BRUNA ROSSO' "
  },
  {
    "schedule_name": "find:bruno-russo-composition",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field value in cron_job_report table"
  },
  {
    "schedule_name": "command:updatBuildStatus",
    "query": "select * from build_process_histories",
    "description": "select all data in build_process_histories table"
  },
  {
    "schedule_name": "cache:master-control",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "cache:master-control",
    "query": "select count(*) as aggregate from `products` where `status_id` = 4 and `stock` >= 1 and `products`.`deleted_at` is null",
    "description": "count all data in products table where status_id = 4 and stock >= 1 and deleted_at is null"
  },
  {
    "schedule_name": "cache:master-control",
    "query": "select count(*) as aggregate from `cropped_image_references` where `created_atsss` >= 2023-03-20 00:00:00",
    "description": ""
  },
  {
    "schedule_name": "cache:master-control",
    "query": "select * from `cron_jobs` inner join `cron_job_reports` as `cjr` on `cron_jobs`.`signature` = `cjr`.`signature` where `cjr`.`start_time` > NOW() - INTERVAL 24 HOUR and `cron_jobs`.`last_status` = ? group by `cron_jobs`.`signature`",
    "description": ""
  },
  {
    "schedule_name": "cache:master-control",
    "query": "select * from `cropped_image_references` where date(`created_at`) = ?",
    "description": ""
  },
  {
    "schedule_name": "cache:master-control",
    "query": "select * from `products` where `status_id` = ? and `stock` >= ? and `products`.`deleted_at` is null",
    "description": ""
  },
  {
    "schedule_name": "cache:master-control",
    "query": "SELECT COUNT(DISTINCT(sp.sku)) as ttl FROM suppliers s JOIN scrapers sc ON s.id=sc.supplier_id JOIN scraped_products sp ON sp.website=sc.scraper_name WHERE s.supplier_status_id=1 AND sp.validated=1 AND sp.website!='internal_scraper' ANDsp.last_inventory_at > DATE_SUB(NOW(), INTERVAL sc.inventory_lifetime DAY)",
    "description": ""
  },
  {
    "schedule_name": "cache:master-control",
    "query": "SELECT users.name, developer_tasks.subject, developer_tasks.id as devtaskId,tasks.id as task_id,tasks.task_subject as task_subject,  hubstaff_activities.starts_at, SUM(tracked) as day_tracked FROM `users` JOIN hubstaff_members ON hubstaff_members.user_id=users.id JOIN hubstaff_activities ON hubstaff_members.hubstaff_user_id=hubstaff_activities.user_id LEFT JOIN developer_tasks ON hubstaff_activities.task_id=developer_tasks.hubstaff_task_id LEFT JOIN tasks ON hubstaff_activities.task_id=tasks.hubstaff_task_id WHERE ( (`hubstaff_activities`.`starts_at` LIKE '.$date.') AND (developer_tasks.id is NOT NULL or tasks.id is not null) and hubstaff_activities.task_id > 0)  GROUP by hubstaff_activities.task_id  order by day_tracked desc '",
    "description": ""
  },
  {
    "schedule_name": "cache:master-control",
    "query": "select * from reply_category",
    "description": "select all data in reply_category table"
  },
  {
    "schedule_name": "cache:master-control",
    "query": "select * from `replies` where `model` = 'Vendor' and `deleted_at` is null and `replies`.`deleted_at` is null",
    "description": ""
  },
  {
    "schedule_name": "cache:master-control",
    "query": "select * from `replies` where `model` = 'Supplier' and `deleted_at` is null and `replies`.`deleted_at` is null",
    "description": ""
  },
  {
    "schedule_name": "cache:master-control",
    "query": "select * from scrap_remarks as sr join ( select max(id) as id from scrap_remarks group by scraper_name) as max_s on sr.id =  max_s.id order by created_at desc",
    "description": ""
  },
  {
    "schedule_name": "cache:master-control",
    "query": "SELECT users.name, developer_tasks.subject, developer_tasks.id as devtaskId,tasks.id as task_id,tasks.task_subject as task_subject,  hubstaff_activities.starts_at, SUM(tracked) as day_tracked  FROM `users`  JOIN hubstaff_members ON hubstaff_members.user_id=users.id  JOIN hubstaff_activities ON hubstaff_members.hubstaff_user_id=hubstaff_activities.user_id  LEFT JOIN developer_tasks ON hubstaff_activities.task_id=developer_tasks.hubstaff_task_id  LEFT JOIN tasks ON hubstaff_activities.task_id=tasks.hubstaff_task_id  WHERE ( (`hubstaff_activities`.`starts_at` LIKE '.$date.') AND (developer_tasks.id is NOT NULL or tasks.id is not null) and hubstaff_activities.task_id > 0) GROUP by hubstaff_activities.task_id order by day_tracked desc ",
    "description": ""
  },
  {
    "schedule_name": "cache:master-control",
    "query": "select `hubstaff_activity_notifications`.*, `u`.`name` as `user_name`, `av`.`minute` as `daily_working_hour` from `hubstaff_activity_notifications` inner join `users` as `u` on `hubstaff_activity_notifications`.`user_id` = `u`.`id` left join `user_avaibilities` as `av` on `hubstaff_activity_notifications`.`user_id` = `av`.`user_id` where `av`.`is_latest` = 1 and date(`start_date`) = ?",
    "description": ""
  },
  {
    "schedule_name": "cache:master-control",
    "query": "select `hubstaff_activity_notifications`.*, `u`.`name` as `user_name`, `av`.`minute` as `daily_working_hour` from `hubstaff_activity_notifications` inner join `users` as `u` on `hubstaff_activity_notifications`.`user_id` = `u`.`id` left join `user_avaibilities` as `av` on `hubstaff_activity_notifications`.`user_id` = `av`.`user_id` where `av`.`is_latest` = 1 and date(`start_date`) = ?",
    "description": ""
  },
  {
    "schedule_name": "cashflow:overdue",
    "query": "select * from `cash_flows` where `type` = 'pending' and date(`date`) = ?",
    "description": "select all data in cash_flows table where type equal 'pending' and date equal today"
  },
  {
    "schedule_name": "cashflow:overdue",
    "query": "select * from `cash_flows` where `cash_flow_able_id` = ? and `cash_flow_able_type` = ? and (`type` = ? or `type` = ?)",
    "description": "select all data in cash_flows table where type equal type and cash_flow_able_id equal cash_flow_able_id and cash_flow_able_type equal cash_flow_able_type and type equal type"
  },
  {
    "schedule_name": "cashflow:overdue",
    "query": "select * from `cash_flows` where `cash_flow_able_id` = ? and `cash_flow_able_type` = ? and (`type` = paid or `type` = received)",
    "description": "select all data in cash_flows table where type equal type and cash_flow_able_id equal cash_flow_able_id and cash_flow_able_type equal cash_flow_able_type and type equal 'received"
  },
  {
    "schedule_name": "category:merge",
    "query": "select * from category where parent_id != 0",
    "description": "select all data in category table where parent_id != 0 "
  },
  {
    "schedule_name": "category:merge",
    "query": "update category set references = '' where id=id",
    "description": "update references field in category where id equal id "
  },
  {
    "schedule_name": "category:merge",
    "query": "update category set references = matches id where id=id",
    "description": "update references field in category where id equal id "
  },
  {
    "schedule_name": "category:missing-references",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and  start_time field in cron_job_report table"
  },
  {
    "schedule_name": "category:missing-references",
    "query": "select `b`.`name` as `brand`, `website`, `category` from `scraped_products` inner join `brands` as `b` on `b`.`id` = `scraped_products`.`brand_id` where `category` is not null and `website` not in ('amrstore', 'antonia', 'baseblu', 'brunarosso', 'coltorti', 'doublef', 'giglio', 'griffo210', 'leam', 'les-market', 'lidiashopping', 'nugnes1920', 'savannahs', 'stilmoda', 'vinicio')",
    "description": ""
  },
  {
    "schedule_name": "category:missing-references",
    "query": "select * from category title = lastCategory",
    "description": ""
  },
  {
    "schedule_name": "category:missing-references",
    "query": "select * from `categories` where `references` LIKE ?",
    "description": "select all data in categories table where references like search data "
  },
  {
    "schedule_name": "category:missing-references",
    "query": "select * from `categories` where id = 143",
    "description": "select all data in categories tables where id equal id"
  },
  {
    "schedule_name": "mapping:product-category",
    "query": "select * from scrapped_category_mapping` where is_mapped = 0",
    "description": "select all data in scrapped_category_mapping table where is_mapped equal 0"
  },
  {
    "schedule_name": "mapping:product-category",
    "query": "select distinct `scraped_products`.`website`, `scraped_products`.`id` from `scraped_products` inner join `products` as `p` on `p`.`id` = `scraped_products`.`product_id` where `categories` = ? and `p`.`stock` > 0",
    "description": ""
  },
  {
    "schedule_name": "mapping:product-category",
    "query": "select * from `scrapped_product_category_mappings` where `category_mapping_id` = ? and `product_id` = ?",
    "description": "select all data in scrapped_product_category_mappings table where category_mapping_id equal category_mapping_id and product_id equal product_id"
  },
  {
    "schedule_name": "mapping:product-category",
    "query": "insert into scrapped_product_category_mapping (category_mapping_id, product_id) values (category_mapping_id, product_id)",
    "description": "insert category_mapping_id and product_id field in scrapped_product_category_mapping table"
  },
  {
    "schedule_name": "mapping:product-category",
    "query": "update scrapped_category_mapping is_mapped = 1 where id = id",
    "description": "update is_mapped field in scrapped_category_mapping table where  id equal id"
  },
  {
    "schedule_name": "category-update:from-history",
    "query": "select `product_id`, `category_id` from `product_category_histories` where `product_id` != ? group by `product_id` order by `created_at` desc",
    "description": "select product_id and category_id in product_category_histories table where product_id != 0 group by product_id order by created_at desc"
  },
  {
    "schedule_name": "change:daily-learning-status",
    "query": "select * from task_status where name = planned",
    "description": "select all data in task_status table where name = planned"
  },
  {
    "schedule_name": "change:daily-learning-status",
    "query": "update `learnings` set `status` = 1, `learnings`.`updated_at` = 2023-03-27 13:50:14 where date(completion_date)=date('2023-03-27') and `learnings`.`deleted_at` is null",
    "description": "update status and updated_at field in learnings where date(completion_date)=date('2023-03-27') and deleted_at is null "
  },
  {
    "schedule_name": "change-color:erp",
    "query": "select * from color_names_reference where color_code = 0",
    "description": "select all data in color_names_reference where where color_code equal 0 "
  },
  {
    "schedule_name": "change-size:erp-wise",
    "query": "select `products`.* from `products` inner join `product_suppliers` as `ps` on `ps`.`product_id` = `products`.`id` inner join `suppliers` as `s` on `s`.`id` = `ps`.`supplier_id` where `ps`.`supplier_id` in (?) and `products`.`size` != ? and `products`.`deleted_at` is null",
    "description": ""
  },
  {
    "schedule_name": "change-size:erp-wise",
    "query": "select * from `attribute_replacements` order by CHAR_LENGTH(first_term) desc",
    "description": "select all data in attribute_replacements table order by CHAR_LENGTH(first_term) desc"
  },
  {
    "schedule_name": "change-size:erp-wise",
    "query": "select * from system_size_manager table  group by category_id",
    "description": "select all data in system_size_manager table order by category_id"
  },
  {
    "schedule_name": "ChangeTesterBasedOnTeamLead",
    "query": "update developer_task set tester_id=414 where team_lead_id=319 ",
    "description": "update tester_id field in developer_task where team_lead_id equal 319"
  },
  {
    "schedule_name": "email:copy-from-chat-message",
    "query": "SELECT DISTINCT REGEXP_SUBSTR(`message`, '([a-zA-Z0-9._%+\\-]+)@([a-zA-Z0-9.-]+)\\.([a-zA-Z]{2,4})') AS Email,customer_id FROM `chat_messages` where customer_id >0  having Email is not null and Email != ''",
    "description": ""
  },
  {
    "schedule_name": "email:copy-from-chat-message",
    "query": "select * from category where id = id",
    "description": "select all data in category table where id equal id"
  },
  {
    "schedule_name": "email:copy-from-chat-message",
    "query": "update customer set email= email id where id  equal id",
    "description": "select all data in category table where id equal id"
  },
  {
    "schedule_name": "check:emails-errors",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "check:emails-errors",
    "query": "select * from supplier where email= email",
    "description": "select all data in supplier table where email equal email"
  },
  {
    "schedule_name": "check:emails-errors",
    "query": "select * from agent where email= email",
    "description": "select all data in agent table where email equal email"
  },
  {
    "schedule_name": "check:landing-page",
    "query": "select * from `landing_page_products` where timestamp(end_date) < NOW() or `status` = 0",
    "description": "select all data in landing_page_products table where timestamp(end_date) < NOW() or `status` = ?"
  },
  {
    "schedule_name": "check:landing-page-magento",
    "query": "select * from `landing_page_products` where timestamp(end_date) < NOW() or `status` = 0",
    "description": "select all data in landing_page_products table where timestamp(end_date) < NOW() or `status` = ?"
  },
  {
    "schedule_name": "check:landing-page-magento",
    "query": "select * from product where id = id",
    "description": "select all data in product table where id equal id"
  },
  {
    "schedule_name": "check:landing-page-magento",
    "query": "select * from store_website where id = id",
    "description": "select all data in store_website table where id equal id"
  },
  {
    "schedule_name": "check:user-logins",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "check:user-logins",
    "query": "select * from user",
    "description": "select all data in user table"
  },
  {
    "schedule_name": "check:user-logins",
    "query": "select * from `user_logins` where `user_id` = ? and `created_at` > ? order by `created_at` desc",
    "description": "select all data in user_logins table where user_id equal user id and created_at greater than today date order by created_at desc"
  },
  {
    "schedule_name": "check:user-logins",
    "query": "insert into `user_logins` (user_id) values (user_id)",
    "description": "insert the user_id in user_logins table "
  },
  {
    "schedule_name": "check:user-logins",
    "query": "insert into `user_logins` (user_id, login_at) values (user_id, login_at)",
    "description": "insert the user_id and login_at and  in user_logins table "
  },
  {
    "schedule_name": "check:user-logins",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "check:messages-errors",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "check:messages-errors",
    "query": "select * from `chat_messages` where `number` is null and `approved` = 1 and `status` = 2 and `sent` = ? and `created_at` between ? and ? and (`error_status` = 0 or `error_status` = 1)",
    "description": "select all data in chat_messages where number in null and approved equal 1 and status equal 2 and created_at between ? and ? and (error_status = 0 or error_status = 1)"
  },
  {
    "schedule_name": "check:messages-errors",
    "query": "select * from `customer` where id = customer_id)",
    "description": "select all data in customer table where id equal customer id"
  },
  {
    "schedule_name": "check:messages-errors",
    "query": "update customer set is_error_flagged= 1 where id = customer_id",
    "description": "update is_error_flagged field in customer table where id equal customer_id"
  },
  {
    "schedule_name": "check:messages-errors",
    "query": "update chat_message set error_status= 0, created_at = current date where id = id",
    "description": "update error_status and created_at field in chat_message table where id equal id"
  },
  {
    "schedule_name": "check:messages-errors",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "check:scraper-killed-history",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "check:scraper-killed-history",
    "query": "select * from scraper where scraper_name equal scraper_name",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "check:scraper-killed-history",
    "query": "insert into scraper_killed_history (scraper_id,scraper_name, comment) values (scraper_id,scraper_name, 'Scraper killed')",
    "description": "insert scraper_id,scraper_name and commend filed in scraper_killed_history table"
  },
  {
    "schedule_name": "check:scraper-killed-history",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "check:scraper-running-status",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "check:scraper-running-status",
    "query": "insert into scraper_server_status_history (scraper_name,scraper_string,server_id,duration,total_memory,used_memory,in_percentage,pid) values(scraper_name,scraper_string,server_id,duration,total_memory,used_memory,in_percentage,pid) ",
    "description": "insert scraper_name,scraper_string,server_id,duration,total_memory,used_memory,in_percentage,pid filed in scraper_server_status_history table"
  },
  {
    "schedule_name": "CheckScrapersLog",
    "query": "select * from scraper where scraper_name= scraper_name",
    "description": "select all data in scraper where scraper_name equal scraper_name "
  },
  {
    "schedule_name": "CheckScrapersLog",
    "query": "select * from user where id= scraper_made_by",
    "description": "select all data in user where id equal scraper_made_by "
  },
  {
    "schedule_name": "CheckScrapersLog",
    "query": "insert into scrap_remark (scraper_name, scrap_id, module_type, remark) values (scraper_name, 0, '', remark) ",
    "description": "insert the scraper_name, scrap_id, module_type and remark field in scrap_remark table"
  },
  {
    "schedule_name": "CheckScrapersLog",
    "query": "select * from `whatsapp_configs` where `is_customer_support` != 1 and `status` = 1",
    "description": "select all data in  whatsapp_configs where is_customer_support != 1 and status = 1"
  },
  {
    "schedule_name": "cold-leads:classify-genders",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "cold-leads:classify-genders",
    "query": "select * from `cold_leads` where `is_gender_processed` = ? limit 10000",
    "description": "select all data in cold_leads where is_gender_processed =  0 limit 10000"
  },
  {
    "schedule_name": "cold-leads:classify-genders",
    "query": "select * from `people_names` where INSTR('919927028533', `name`) > 0 or INSTR('A Shora', `name`) > 0 and `name` != ?",
    "description": "select all data in people_names where INSTR('919927028533', `name`) > 0 or INSTR('A Shora', `name`) > 0 and `name` != ?"
  },
  {
    "schedule_name": "cold-leads:classify-genders",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "ConnectGoogleClientAccounts",
    "query": "select * from `google_client_account_mails` order by `created_at` desc",
    "description": "select all data in google_client_account_mails order by created_at desc"
  },
  {
    "schedule_name": "ConnectGoogleClientAccounts",
    "query": "select * from `user`",
    "description": "select all data in user"
  },
  {
    "schedule_name": "ConnectGoogleClientAccounts",
    "query": "select * from google_client_account where google_client_account_id = id",
    "description": "select all data in google_client_account where google_client_account_id = id"
  },
  {
    "schedule_name": "ConnectGoogleClientAccounts",
    "query": "insert into google_client_account (google_client_id, receiver_id, message, notification_type) value (google_client_id, receiver_id, message, 'error')",
    "description": "insert the google_client_id, receiver_id, message and  notification_type field value in google_client_account"
  },
  {
    "schedule_name": "convertImage:toThumbnail",
    "query": "select * from `media` inner join `mediables` on `mediables`.`media_id` = `media`.`id` where `is_processed` = 0 and `mediable_type` = ? and `aggregate_type` = ? order by `id` asc",
    "description": "select all data in media table join mediables on mediables.media_id = media.id where is_processed = 0 and mediable_type = ? and aggregate_type = ? order by id asc "
  },
  {
    "schedule_name": "convertImage:toThumbnail",
    "query": "update media set is_processed = 1 where id = id",
    "description": "update is_processed field in media table where id = id "
  },
  {
    "schedule_name": "convertImage:toThumbnail",
    "query": "update media set is_processed = 3 where id = id",
    "description": "update is_processed field in media table where id = id "
  },
  {
    "schedule_name": "convert-to-eur:cashflow",
    "query": "select * from `cash_flows` where `amount_eur` <= 0 and `currency` != ''",
    "description": "select all data in cash_flows where amount_eur <= 0 and currency != ''"
  },
  {
    "schedule_name": "convert-to-eur:cashflow",
    "query": "update cash_flows set amount_eur = amount where id = id",
    "description": "update amount_eur field in cash_flows table where id = id"
  },
  {
    "schedule_name": "facebook:import-customers",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "facebook:import-customers",
    "query": "select * from customer where facebook_id = facebook_id",
    "description": "select all data in customer table where facebook_id equal facebook_id"
  },
  {
    "schedule_name": "facebook:import-customers",
    "query": "select * from customer where facebook_id = facebook_id",
    "description": "select all data in customer table where facebook_id equal facebook_id"
  },
  {
    "schedule_name": "facebook:import-customers",
    "query": "insert into customer (name, facebook_id) values (name, facebook_id)",
    "description": "insert the name and facebook_id in customer table"
  },
  {
    "schedule_name": "facebook:import-customers",
    "query": "insert into facebook_messages (customer_id, sender,receiver,is_sent_by_me,message) values (customer_id, sender,receiver,is_sent_by_me,message)",
    "description": "insert the customer_id, sender,receiver,is_sent_by_me and message in facebook_messages table"
  },
  {
    "schedule_name": "cold-lead:create-if-replied",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "cold-lead:create-if-replied",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "cold-lead:create-if-replied",
    "query": "select * from `accounts` where `platform` = ? and `broadcast` = ? and `accounts`.`deleted_at` is null",
    "description": "select all data in accounts table where platform equal platform and broadcast equal ? and deleted_at is null"
  },
  {
    "schedule_name": "email:create-customers-if-new-email-comes",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "email:create-customers-if-new-email-comes",
    "query": "select * from customer where email = email",
    "description": "select first record in customer table where email equal email "
  },
  {
    "schedule_name": "email:create-customers-if-new-email-comes",
    "query": "insert into customer (email,name) values (email,name)",
    "description": "insert email and name in customer table "
  },
  {
    "schedule_name": "email:create-customers-if-new-email-comes",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "create-erp-lead-from-cancellation-order",
    "query": "select * from `orders` where `order_status_id` = 11 and `orders`.`deleted_at` is null",
    "description": "select all data in orders table where order_status_id equal 11 and deleted_at is null"
  },
  {
    "schedule_name": "create-erp-lead-from-cancellation-order",
    "query": "select * from `brand` where `id` = id",
    "description": "select all data in brand table where id equal id "
  },
  {
    "schedule_name": "create-erp-lead-from-cancellation-order",
    "query": "insert into Erp_leads ('lead_status_id','customer_id','store_website_id','product_id','brand_id','category_id','color','size','min_price','max_price','brand_segment','type') values ('lead_status_id','customer_id','store_website_id','product_id','brand_id','category_id','color','size','min_price','max_price','brand_segment','type')",
    "description": "insert the lead_status_id,customer_id,store_website_id,product_id,brand_id,category_id,color,size,min_price,max_price,brand_segment and type in field in Erp_leads table"
  },
  {
    "schedule_name": "create:lidia-products",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "create:lidia-products",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "create-mailinglist-influencers",
    "query": "select * from `scrap_influencers` where (`read_status` != 1 or `read_status` is null) and `email` != ? limit 1",
    "description": "select all data scrap_influencers table where read_status != ? or read_status is null) and email != ? limit 1"
  },
  {
    "schedule_name": "create-mailinglist-influencers",
    "query": "select * from `service`",
    "description": "select all data service table"
  },
  {
    "schedule_name": "create-mailinglist-influencers",
    "query": "select `id`, `title`, `mailing_service_id`, `send_in_blue_api`, `send_in_blue_account` from `store_websites` where `website_source` = ? and `mailing_service_id` is not null and `mailing_service_id` > 0 and `id` = ? and `store_websites`.`deleted_at` is null order by `id` desc",
    "description": "select id,title,mailing_service_id,send_in_blue_api,send_in_blue_account data in store_websites table where `website_source` = ? and `mailing_service_id` is not null and mailing_service_id > 0 and id = ? and deleted_at is null order by id desc"
  },
  {
    "schedule_name": "users:previous-payment",
    "query": "select * from hubstaff_activity orderBy starts_at",
    "description": "select first record in hubstaff_activity table orderBy starts_at"
  },
  {
    "schedule_name": "users:previous-payment",
    "query": "select `hubstaff_activities`.*, `hubstaff_members`.`user_id` as `hm_user_id` from `hubstaff_activities` left join `hubstaff_members` on `hubstaff_members`.`hubstaff_user_id` = `hubstaff_activities`.`user_id` where `hubstaff_activities`.`status` = ? and `hubstaff_activities`.`paid` = ? order by `created_at` desc",
    "description": ""
  },
  {
    "schedule_name": "users:previous-payment",
    "query": "select * from `user_rates` where `start_date` < start_date and `user_id` = user_id order by `start_date` desc",
    "description": "select all data in user_rates where start_date < ? and user_id = ? order by start_date desc"
  },
  {
    "schedule_name": "users:previous-payment",
    "query": "select * from `payment_receipt` where `user_id` = user_id order by `start_date` date desc",
    "description": "select all data in payment_receipt where user_id = user_id order by start_date date desc"
  },
  {
    "schedule_name": "users:previous-payment",
    "query": "update hubstaff_activities  set (paid) values (1) where id = id",
    "description": "update paid field in hubstaff_activities where id equal id"
  },
  {
    "schedule_name": "users:previous-payment",
    "query": "insert into payment_receipt (worked_minutes,status,rate_estimated,date,user_id,billing_start_date,billing_end_date,currency) values (worked_minutes,'Pending',rate_estimated,date,user_id,billing_start_date,billing_end_date,'')",
    "description": "insert the worked_minutes,status,rate_estimated,date,user_id,billing_start_date,billing_end_date and currency field value in payment_receipt table"
  },
  {
    "schedule_name": "create:scraped-products",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "create:scraped-products",
    "query": "select * from `scraped_products` where `has_sku` = 1 and `website` = 'G&B'",
    "description": "select all data in scraped_products table where has_sku equal 1 and website equal 'G&B'"
  },
  {
    "schedule_name": "create:scraped-products",
    "query": "select * from `products` where `sku` = ? and `products`.`deleted_at` is null",
    "description": "select all data in products page  where sku = ? and deleted_at is null "
  },
  {
    "schedule_name": "create:scraped-products",
    "query": "select * from `brand` where id = brand_id",
    "description": "select all data in brand page  where id equal brand_id "
  },
  {
    "schedule_name": "create:scraped-products",
    "query": "update products where set sku= sku, brand = brand, supplier = 'G & B Negozionline', name = name, short_description= short_description, supplier_link=supplier_link, stage = 3 ,price = price,price_inr = price_inr, price_special= price_special, price_special= price_special where id = id ",
    "description": "update the sku,brand,supplier,name,short_description supplier_link field in products table "
  },
  {
    "schedule_name": "create:scraped-products",
    "query": "insert into product (sku,brand,supplier,name,short_description,supplier_link,stage) values (sku,brand,'G & B Negozionline',name,short_description,supplier_link,3)",
    "description": "insert the sku,brand,supplier,name,short_description,supplier_link and stage field value in product table"
  },
  {
    "schedule_name": "create:scraped-products",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "create:scraped-products",
    "query": "select * from `brand` where id = brand_id",
    "description": "select all data in brand page  where id equal brand_id "
  },
  {
    "schedule_name": "scraper:not-running",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "scraper:not-running",
    "query": " SELECT  s.id, s.supplier, sp.scraper_name,  MAX(ls.last_inventory_at) AS last_update,     sp.scraper_name,     sp.inventory_lifetime FROM     suppliers s JOIN     scrapers sp on sp.supplier_id = s.id LEFT JOIN     scraped_products ls ON     ls.website=sp.scraper_name WHERE     s.supplier_status_id=1 GROUP BY     s.id HAVING     last_update < DATE_SUB(NOW(), INTERVAL sp.inventory_lifetime DAY) OR     last_update IS NULL ORDER BY     s.supplier",
    "description": ""
  },
  {
    "schedule_name": "customer:chat-message-quick-data",
    "query": "select * from `customers` where `customers`.`deleted_at` is null",
    "description": "select all data in customers where deleted_at is null"
  },
  {
    "schedule_name": "customer:chat-message-quick-data",
    "query": "insert into chat_messages_quick_datas (model,model_id) values (model,model_id)",
    "description": "insert the model and model_id in chat_messages_quick_datas table"
  },
  {
    "schedule_name": "customer:dob-and-anniversary-mail",
    "query": "select * from `customers` where day(`dob`) = ? and month(`dob`) = ? and `customers`.`deleted_at` is null",
    "description": "select all data in customers table where day(`dob`) = ? and month(`dob`) = ? and deleted_at is null"
  },
  {
    "schedule_name": "customer:dob-and-anniversary-mail",
    "query": "select * from `mailinglist_templates` where `category_id` = ? and `store_website_id` = ?",
    "description": "select all data in mailinglist_templates table where category_id equal  category_id and store_website_id equal store_website_id "
  },
  {
    "schedule_name": "customer:dob-and-anniversary-mail",
    "query": "select * from `email_address` where `category_id` = ?",
    "description": "select all data in email_address table where category_id equal  category_id"
  },
  {
    "schedule_name": "customer:dob-and-anniversary-mail",
    "query": "select * from `mailinglist_templates` where `category_id` = ? ",
    "description": "select all data in mailinglist_templates table where category_id equal  category_id"
  },
  {
    "schedule_name": "customer:dob-and-anniversary-mail",
    "query": "select * from `email_address`",
    "description": "select all data in email_address table"
  },
  {
    "schedule_name": "customer:dob-and-anniversary-mail",
    "query": "insert into (model_id,model_type,from,to,subject,message,template,additional_data,status,is_draft) values (model_id,model_type,from,to,subject,message,'birthday-mail',additional_data,'pre-send',1)",
    "description": "select all data in email_address table"
  },
  {
    "schedule_name": "customer:dob-and-anniversary-mail",
    "query": "select * from `customers` where day(`wedding_anniversery`) = ? and month(`wedding_anniversery`) = ? and `customers`.`deleted_at` is null",
    "description": "select all data in customers table where day(`wedding_anniversery`) = ? and month(`wedding_anniversery`) = ? and deleted_at is null"
  },
  {
    "schedule_name": "customer:dob-and-anniversary-mail",
    "query": "select * from `mailinglist_template_categories` where `title` = 'Wedding Anniversary",
    "description": "select all data in mailinglist_template_categories table where title equal Wedding Anniversary"
  },
  {
    "schedule_name": "emaillead:import-customers",
    "query": "select * from `customer` ",
    "description": "select all data in customer table"
  },
  {
    "schedule_name": "emaillead:import-customers",
    "query": "select * from `email_lead` where email= email",
    "description": "select all data in email_lead where email equal email"
  },
  {
    "schedule_name": "orders:merge-coupons",
    "query": "SELECT * from store_websites",
    "description": "select all data from store_websites table"
  },
  {
    "schedule_name": "orders:merge-coupons",
    "query": "SELECT * from coupons where code = '$obj->coupon_code'",
    "deceription": "select all data from coupons table where code = 'coupon code from object"
  },
  {
    "schedule_name": "orders:merge-coupons",
    "query": "SELECT * from orders where order_id = '$item->order_id'",
    "deceription": "select all data from order table where order_id = 'order_id from item object"
  },
  {
    "schedule_name": "tasks:overdue_tasks",
    "query": "SELECT * from tasks where is_completed is null where due_date < '$now'",
    "deceription": "select all data from tasks table where is_completed = null and due_date is less than current date"
  },
  {
    "schedule_name": "tasks:overdue_tasks",
    "query": "SELECT * from users where task = 'assign_to'",
    "deceription": "select all data from users table whoever is assign to this task"
  },
  {
    "schedule_name": "parse:log",
    "query": "SELECT * from laravel_logs where log = 'value'",
    "deceription": "Get log from laravel log table"
  },
  {
    "schedule_name": "Post Charities Order Amount To Cashflow",
    "query": "select order_products.*, customer_charities.id as charity_id  from order_products inner join customer_charities on customer_charities.product_id = order_products.product_id inner join orders on orders.id = order_products.order_id where date(orders.order_date) between date('2023-03-20') and date('2023-03-27')",
    "deceription": "select * from order_products, select id from customer_charities as charity_id from order_products inner join customer_charities on customer_charities of product_if is_equal to product_id of order_productsinner join order on order_id = order_id of order_products where date between ('2023-03-20') and ('2023-03-27')"
  },
  {
    "schedule_name": "Post Charities Order Amount To Cashflow",
    "query": "select first data from cashflow where cash_flow_able_id = 'charity_id'",
    "deceription": "select first data from cashflow where cash_flow_able_id is_equal to charity_id"
  },
  {
    "schedule_name": "Post Charities Order Amount To Cashflow",
    "query": "select * from order where id = order_id",
    "deceription": "select all data from order where its id is_equal order_id"
  },
  {
    "schedule_name": "post:scheduled-media",
    "query": "select * from schedule_group where status = '1' where scheduled_for = ''date('Y-m-d H-i-00')",
    "deceription": "select all data from schedule_group where status is_equal 1 abd scheduled_for is_euql to some date"
  },
  {
    "schedule_name": "pricedrop:check",
    "query": "select pr.price as prod_real_price, pr.sku as prod_sku, pr.name as prod_name, tickets.* from tickets inner join products as pr on pr.sku = tickets.sku where tickets.deleted_at is null",
    "deceription": "select price from pr as prod_real_price, sku from pr as prod_sku, name from pr as prod_name, * from rickets inner join products as pr on sku from pr is_equl sku from tickets where deleted_at from tickets is null"
  },
  {
    "schedule_name": "productActivityStore",
    "query": "select status_id, COUNT(id) as total from products where stock >= ? group by status_id",
    "deceription": "select status_id and count id as total from products where stock is grater than euql to '1' and group by status_id"
  },
  {
    "schedule_name": "productActivityStore",
    "query": "insert into productactivities (status_id, value, created_at) values (3, 9, CURRENT_TIMESTAMP)",
    "deceription": "insert data in to productactivities statusId = 3, value = 9 and create_at = CURRENT_TIMESTAMP"
  },
  {
    "schedule_name": "product-move:brand",
    "query": "select * from products where ('updated_at', '>=', '2021-01-18 00:00:00') where ('last_brand', '>', 0)",
    "deceription": "select all data from products where updated_at is grater than equal to '2021-01-18', where 'last_brand is grater than 0'"
  },
  {
    "schedule_name": "product:supplier",
    "query": "select * from products",
    "deceription": "select all data from products"
  },
  {
    "schedule_name": "product:supplier",
    "query": "select * from ProductSupplier",
    "deceription": "select all data from ProductSupplier"
  },
  {
    "schedule_name": "product:supplier",
    "query": "select * from Supplier",
    "deceription": "select all data from Supplier"
  },
  {
    "schedule_name": "project_directory:manager",
    "query": "select from ProjectFileManager where name = 'directoryStr'",
    "deceription": "select data from ProjectFileManager where name is_equal to 'directoryStr'"
  },
  {
    "schedule_name": "project_directory:manager",
    "query": "insert into ProjectFileManager (name, project_name, size, parent) values ('$directoryStr', 'erp', '$size', '$parent')",
    "deceription": "insert into projectFileManager name = '$directoryStr', project_name = erp, size = '$size', parent = '$parent'"
  },
  {
    "schedule_name": "project:filemanagementdate",
    "query": "select * from ProjectFileManager",
    "deceription": "select all data from ProjectFileManager"
  },
  {
    "schedule_name": "project:filemanagementdate",
    "query": "select * from User",
    "deceription": "select all data from User"
  },
  {
    "schedule_name": "project:filemanagementdate",
    "query": "select 'project_file_manager from Setting",
    "deceription": "select 'project_file_manager' from Setting"
  },
  {
    "schedule_name": "project:filemanagementdate",
    "query": "insert into ProjectFileManager (project_id, name, old_size, new_size) values ('$id', '$name', '$old_size.MB', '$new_size.MB')",
    "deceription": "insert into projectFileManager project_id = '$id', name = '$name', old_size = '$old_size', new_size = '$new_size'"
  },
  {
    "schedule_name": "push-to-magento:brand",
    "query": "select b.* from products inner join brands as b on b.id = products.brand where products.deleted_at is null group by b.id limit 0",
    "deceription": "select all from products inner join brands as b on id from b.id = brand from product where product.deleted_at is null group by b.id limit to 0"
  },
  {
    "schedule_name": "project:filemanagementdate",
    "query": "select * from storeWebsites where id in '$weblimit where api_token is not equal to '' where website_source is_equal to 'magento",
    "deceription": "select all data from storewebsites where id is in array of $weblimit, where api_token is not equal to '', where website_source is_equal to 'magento'"
  },
  {
    "schedule_name": "project:filemanagementdate",
    "query": "select from storeWebsitebrands where brand_id $brand_id, where store_website_id is '$store_website_id'",
    "deceription": "select all data from storewebsitebrand where brand_id is $brand_id where store_website_id is euql to '$store_website_id'"
  },
  {
    "schedule_name": "colors:push-to-mangento",
    "query": "select * from storeWebsites where api_token is not equal to '' where website_source is_equal to 'magento",
    "deceription": "select all data from storewebsites where api_token is not equal to '', where website_source is_equal to 'magento'"
  },
  {
    "schedule_name": "colors:push-to-mangento",
    "query": "select * from ColorNamesReference group_by 'erp_name'",
    "deceription": "select all data from colorNameRefrence and group_by to erp_name"
  },
  {
    "schedule_name": "colors:push-to-mangento",
    "query": "select * from store_website_colors where erp_color = ? and store_website_id = ? and platform_id > ?",
    "deceription": "select all data from store_website_colors wher erp_color = '' and store_website_id = '' and platform_id is graterthan ''"
  },
  {
    "schedule_name": "size:push-to-mangento",
    "query": "select * from storeWebsites where api_token is not equal to '' where website_source is_equal to 'magento",
    "deceription": "select all data from storewebsites where api_token is not equal to '', where website_source is_equal to 'magento'"
  },
  {
    "schedule_name": "size:push-to-mangento",
    "query": "select from store_websites where size_id = '$s->id' and store_website_id = '$web->id' and platform_id > 0",
    "deceription": "select data from store_website where size_id = '$s->id wher store_website_id is equal to '$web->id' and platform_id is grater than 0"
  },
  {
    "schedule_name": "size:push-to-mangento",
    "query": "insert into store_website (size_id, store_website_id, platform_id) values ('$->id', '$web->id', '$id')",
    "deceription": "insert into store_website table size_id isequal to $s->id, store_website_id isequal to $web->id, platform_id is equal to $id"
  },
  {
    "schedule_name": "push-to-magento:category",
    "query": "select * from categories where id in (?, ?) order by parent_id asc",
    "deceription": "select all data from categories where id in [] order by parent_id asc"
  },
  {
    "schedule_name": "push-to-magento:category",
    "query": "select * from store_websites where id in '$limit' and api_token != null and website_source is_equal magento",
    "deceription": "select all data from store_websites where id in '$limit' where api_token != null and website_source is_equal to magento"
  },
  {
    "schedule_name": "push-to-magento:category",
    "query": "select * from store_websites where api_token != null and website_source is_equal magento",
    "deceription": "select all data from store_websites where api_token != null and website_source is_equal to magento"
  },
  {
    "schedule_name": "resource:image",
    "query": "select * from resource_category where parent_id = 0 and title = '$title'",
    "deceription": "select all data from resource_category where parent_id is_equal to 0 and title is_equal to '$title'"
  },
  {
    "schedule_name": "resource:image",
    "query": "select * from resource_category where parent_id != 0 and title = '$title'",
    "deceription": "select all data from resource_category where parent_id is_not_equal to 0 and title is_equal to '$title'"
  },
  {
    "schedule_name": "resource:image",
    "query": "insert into resource_image (cat_id, sub_cat_id, images, url, description, created_by, is_pending) values ('$categoryId', '$subCategoryId', '$images', '$url', '$description', 'email-receiver', '1')",
    "deceription": "insert into resource_image (cat_id, sub_cat_id, images, url, description, created_by, is_pending) values ('$categoryId', '$subCategoryId', '$images', '$url', '$description', 'email-receiver', '1')"
  },
  {
    "schedule_name": "reconsile:brand",
    "query": "select * from store_website where website_store = magento",
    "deceription": "select all data from store_website where website_store is_equal to magento"
  },
  {
    "schedule_name": "recreate:products-scraped",
    "query": "select * from screped_products where website = angelominetti",
    "deceription": "select all data from screped_products where website is_equal to angelominetti"
  },
  {
    "schedule_name": "sizes:refine",
    "query": "Select from product where size != '' and is_crop_ordered = 1  and is_approved = 0",
    "deceription": "select from product where size is_not_equal null and is_crop_ordered is_equal 1 and is_approved is 0"
  },
  {
    "schedule_name": "currencies:refresh",
    "query": "update currencies SET code = '$symbol', rate = '$rate'",
    "deceription": "Update currencies table and set code is_equal to '$symbol' and rate is_equal '$rate'"
  },
  {
    "schedule_name": "hubstaff:refresh_users",
    "query": "select from hubstaff_member where hubstaff_user_id = '$member->user_id'",
    "deceription": "select data from hubstaff_member where hubstaff_user_id is_equal to '$member->user_id'"
  },
  {
    "schedule_name": "hubstaff:refresh_users",
    "query": "insert into hustaff_member (hubstaff_user_id, email, user_id) values ('$member->user_id', '$member->email', '($userExist) ? $userExist->id : null')",
    "deceription": "insert ntp hubstaff_member hubstaff_user_id = '$member->user_id', email = '$member->email', user_id = '($userExist) ? $userExist->id : null'"
  },
  {
    "schedule_name": "timedoctor:refresh_projects {id}",
    "query": "Select First from time_doctor where time_doctor_project_id = '$project->id'",
    "deceription": "Select first data from time_doctor where time_doctor_project_id is_equal to perticular project id"
  },
  {
    "schedule_name": "timedoctor:refresh_projects {id}",
    "query": "Insert into time_doctor (time_doctor_project_id,time_doctor_account_id, time_doctor_account_id, time_doctor_project_name, time_doctor_project_description) values ('$project->id','$this->TIME_DOCTOR_USER_ID', '$this->TIME_DOCTOR_COMPANY_ID', '$project->name', '(isset( $project->description ) &&  $project->description != '') ? $project->description : ''')",
    "deceription": "insert all data into time_doctor table"
  },
  {
    "schedule_name": "timedoctor:refresh_tasks {id}",
    "query": "select * from time_doctor_task where id = id",
    "deceription": "find all data from timedoctor based on id"
  },
  {
    "schedule_name": "timedoctor:refresh_tasks {id}",
    "query": "Insert into time_doctor_task (time_doctor_task_id,project_id, time_doctor_project_id, time_doctor_company_id, summery, description, time_doctor_account_id) values (time_doctor_task_id,project_id, time_doctor_project_id, time_doctor_company_id, summery, description, time_doctor_account_id)",
    "deceription": "insert all data into time_doctor_task table"
  },
  {
    "schedule_name": "timedoctor:refresh_users {id}",
    "query": "select * from time_doctor_account where id = id",
    "deceription": "find all data from time_doctor_acount based on id"
  },
  {
    "schedule_name": "timedoctor:refresh_users {id}",
    "query": "Insert into time_doctor_member (time_doctor_user_id,email, time_doctor_account_id, user_id) values (time_doctor_user_id,email, time_doctor_account_id, user_id)",
    "deceription": "insert all data into time_doctor_member table"
  },
  {
    "schedule_name": "RejectDuplicateImages {media_id} {product_id}",
    "query": "Select * from products where id = product_id",
    "deceription": "select all data from product based on id"
  },
  {
    "schedule_name": "RejectDuplicateImages {media_id} {product_id}",
    "query": "insert into status_helper (status_id, is_crop_rejected, crop_remark, crop_rejected_by, is_approved, is_crop_approved, is_crop_ordered, is_crop_being_verified, crop_rejected_at) valuse (status_id, is_crop_rejected, crop_remark, crop_rejected_by, is_approved, is_crop_approved, is_crop_ordered, is_crop_being_verified, crop_rejected_at)",
    "deceription": "Add all data into status_helper table"
  },
  {
    "schedule_name": "RejectDuplicateImages {media_id} {product_id}",
    "query": "insert into listing_history (user_id, product_id, content, action) (user_id, product_id, content, action)",
    "deceription": "Add all data into listing_history table"
  },
  {
    "schedule_name": "remove-product-images:no-path",
    "query": "select * from products where is_barcode_check = 1",
    "deceription": "Select all data from product based on barcode_check"
  },
  {
    "schedule_name": "ScrapperImage:REMOVE",
    "query": "select * from scraper_image where created_at < now date()",
    "deceription": "Select all data from scraper_images based on created_at date"
  },
  {
    "schedule_name": "image:jpegtojpg",
    "query": "select * from media where extension = jpeg",
    "deceription": "select all data from media based on extension"
  },
  {
    "schedule_name": "image:jpegtojpg",
    "query": "update media set extension = jpg",
    "deceription": "update extension of particualr image"
  },
  {
    "schedule_name": "product:replace-text",
    "query": "select products.*, product_status.name, product_status.value from products left join product_status on products.id = product_status.product_id and product_status.name = ? where products.deleted_at is null order by products.id desc",
    "deceription": "select * from products, name from product_status, value from product_status left join product_status on product.id equal product_id of product_status and name of product_status = ? where  product deleted_at is null orderby id from products desc"
  },
  {
    "schedule_name": "reset:daily-planner",
    "query": "select * from users where id in ['$users_array']",
    "deceription": "select all data of users whos id is in '$users_array'"
  },
  {
    "schedule_name": "restore:cropped-images",
    "query": "select * from products where is_image_processed = 1",
    "deceription": "select all data from products where is_image_processed is 1"
  },
  {
    "schedule_name": "restore:cropped-images",
    "query": "update products sed is_image_processed = 0",
    "deceription": "update products table set is_image_processed to 0"
  },
  {
    "schedule_name": "product:restore-if-corrected",
    "query": "select * from products where name != null and short_description != null and composition != null, is_listing_rejected_automatically = 1",
    "deceription": "select all data from products based on name, short_description , composition and is_listing_rejected_automatically"
  },
  {
    "schedule_name": "product:restore-if-corrected",
    "query": "update products set is_listing_rejected_automatically = 0 and is_listing_rejected = 0",
    "deceription": "update products table for is_listing_rejected and is_listing_rejected_automatically and set both to 0"
  },
  {
    "schedule_name": "routes:sync",
    "query": "select * from routes where uri = $route->uri",
    "deceription": "select all data from routes based on route uri"
  },
  {
    "schedule_name": "erpevents:run",
    "query": "select * from erp_events where next_run_date >= '$startDate' and next_run_date <= '$endDate'",
    "deceription": "select all data from erp_events based on next_run_date conditions "
  },
  {
    "schedule_name": "erpevents:run",
    "query": "select * from products where stock > 0 and suplier = in_stock",
    "deceription": "select all data from products based on stock and suplier"
  },
  {
    "schedule_name": "erpevents:run",
    "query": "select * from products where stock > 0 and suplier = in_stock",
    "deceription": "select all data from products based on stock and suplier"
  },
  {
    "schedule_name": "erpevents:run",
    "query": "select * from erp_leads where brand_id in $brandIds",
    "deceription": "select all data from erp_lead where brand_id in brandIds array"
  },
  {
    "schedule_name": "erpevents:run",
    "query": "select * from product where brand in $brandIds",
    "deceription": "select all data from product where brand in brandIds array"
  },
  {
    "schedule_name": "erpevents:run",
    "query": "select * from products inner join categories as c on c.title = products.category where (stock > ? or supplier = ?) and c.id in (?) and products.deleted_at is null",
    "deceription": "select all data from products iner join to categories on title and product category and get only product which are not deleted"
  },
  {
    "schedule_name": "erpevents:run",
    "query": "select * from product where created_at > '$event->start_date'",
    "deceription": "select all data from product based on created_at date"
  },
  {
    "schedule_name": "erpevents:run",
    "query": "select * from product where created_at <= '$event->start_date'",
    "deceription": "select all data from product based on created_at date"
  },
  {
    "schedule_name": "erpleads:run'",
    "query": "select erp_leads.*, c.lead_product_freq from erp_leads inner join customers as c on c.id = erp_leads.customer_id where is_blocked_lead = ? and c.do_not_disturb = ?",
    "deceription": ""
  },
  {
    "schedule_name": "erpleads:run'",
    "query": "select * from products inner join brands as b on b.id = products.brand inner join categories as c on c.id = products.category where (stock > ? or supplier = ?) and products.created_at > ? and products.name != ? and products.sku != ? and products.price != ? and products.deleted_at is null",
    "deceription": ""
  },
  {
    "schedule_name": "erpleads:run'",
    "query": "select * from erp_lead_category where erp_lead_id = '$lead->id' and category_id != ''",
    "deceription": "select all data from erp_lead_category based on erp_lead_id and category_id"
  },
  {
    "schedule_name": "erpleads:run'",
    "query": "select * from erp_lead_brand where erp_lead_id = '$lead->id' and brand_id != ''",
    "deceription": "select all data from erp_lead_brand based on erp_lead_id and brand_id"
  },
  {
    "schedule_name": "erpleads:run'",
    "query": "select * from erp_lead_sending_history where customer_id = '$lead->customer_id' and product_id = '?' and lead_id = '$lead->id'",
    "deceription": "select all data from erp_lead_seding_history based on customer_id, product_id and lead_id"
  },
  {
    "schedule_name": "erpleads:run'",
    "query": "inser into erp_lead_sending_history (product_id, customer_id, lead_id) values ((product_id, customer_id, lead_id))",
    "deceription": "insert product_id, customer_id and lead_id into erp_lead_sending_history"
  },
  {
    "schedule_name": "erpleads:run'",
    "query": "insert into suggested_products (brands, categories,customer_id, total , platform, platform_id) values (brands, categories,customer_id, total , platform, platform_id)",
    "deceription": "insert data into suggested_products table"
  },
  {
    "schedule_name": "erpleads:run'",
    "query": "insert into suggested_product_list (suggested_products_id ,customer_id, total , product_id, date) values (suggested_products_id ,customer_id, total , product_id, date)",
    "deceription": "insert data into suggested_productlist table"
  },
  {
    "schedule_name": "run:message-queues",
    "query": "select group_id from message_queues group by groupId",
    "deceription": "select group id from message_queues table"
  },
  {
    "schedule_name": "run:message-queues",
    "query": "select * from message_queues where sending_time < Carbon::now and sent = 0 and status != 1 and sending_time asc",
    "deceription": "select all data from message_queues based on sending_time, sent and status"
  },
  {
    "schedule_name": "run:priority-keyword-search",
    "query": "select * from hashtag where priority = 1 and platform_id = 3",
    "deceription": "select all data from hashtag table based on priority and platform_id"
  },
  {
    "schedule_name": "save:products-images",
    "query": "select * from products where is_without_image = 1 and supplier not in ['MINETTI', 'Spinnaker 101']",
    "deceription": "select all products data based on is_without_image and supplier"
  },
  {
    "schedule_name": "save:products-images",
    "query": "insert into product (attachMedia, is_without_image) values (attachMedia, is_without_image)",
    "deceription": "insert attachMedia and is_without_image into product table"
  },
  {
    "schedule_name": "save:zoom-meetings",
    "query": "insert into zoom_meetings (zoomkey, zoomsecret, zoommeetingid, zoomuserid) values (zoomkey, zoomsecret, zoommeetingid, zoomuserid)",
    "deceription": "insert data into zoom_meetings table"
  },
  {
    "schedule_name": "schedule:list",
    "query": "select first from cron_job where signature Like '%{$signature}%'",
    "deceription": "select all data from message_queues based on sending_time, sent and status"
  },
  {
    "schedule_name": "schedule:list",
    "query": "insert into cron_job (signature, schedule, error_count) values (signature, schedule, error_count)",
    "deceription": "insert data into cron_job table"
  },
  {
    "schedule_name": "ScrapApi:LogCommand",
    "query": "delete from scraper_api_log where created_at < now()->subDays(7)",
    "deceription": "delete log that are old for more than 7 days from scraper_api_log"
  },
  {
    "schedule_name": "ScrapApi:LogCommand",
    "query": "select scrapers., (select count() from scrapers as laravel_reserved_0 where scrapers.id = laravel_reserved_0.parent_id) as children_scraper_count from scrapers inner join suppliers as s on s.id = scrapers.supplier_id where supplier_status_id = ? and scrapper in (?, ?) and parent_id is null",
    "deceription": ""
  },
  {
    "schedule_name": "Scraper",
    "query": "select * from developer_task where scraper_id  = scraper_id orderBy created_at",
    "deceription": "selet all data from developer_task based on scraper_id and order them by created_at"
  },
  {
    "schedule_name": "Scraper",
    "query": "select COUNT(*) as totalproduct, scrapers.id as scraper_id, scrapers.scraper_name as scraper_name from scraped_products inner join scrapers on scraped_products.website = scrapers.scraper_name where date(scraped_products.created_at)=date('2023-03-27') and  ( scraped_products.title is null or scraped_products.title ='' ) group by scrapers.scraper_name",
    "deceription": ""
  },
  {
    "schedule_name": "Scraper",
    "query": "insert into chat_messages (message, erp_user, user_id, approved, status, developer_task_id) values (message, erp_user, user_id, approved, status, developer_task_id)",
    "deceription": "insert data into chat_messages table"
  },
  {
    "schedule_name": "scraper:not-completed-alert",
    "query": "select * from scraper where last_completed_at is null or last_completed_at < date",
    "deceription": "select data from scraper based on last_completed_at"
  },
  {
    "schedule_name": "scraplogs:activity",
    "query": "select id from scraper where scraper_name Like scraper_name",
    "deceription": "select id from scraper table based on scraper_name"
  },
  {
    "schedule_name": "scraplogs:activity",
    "query": "select id as scraper_id from scraper_logs  where scraper_id = '$scrapers_info[0]->id'",
    "deceription": "select id from scraper_log based on condition on id"
  },
  {
    "schedule_name": "scraplogs:activity",
    "query": "insert into scrap_logs (scraper_id, folder_name, file_name, log_messages, created_at, updated_at) values (scraper_id, folder_name, file_name, log_messages, created_at, updated_at)",
    "deceription": "insert data nto scrap_logs table"
  },
  {
    "schedule_name": "command:scrapper_not_run",
    "query": "selet * from scraper_process where scraper_name != '' orderBy scraper_id groupBy scraper_id",
    "deceription": "select all data from scraper_process and order and group them by scraper_id"
  },
  {
    "schedule_name": "command:scrapper_not_run",
    "query": "select name from users where id = '$hasAssignedIssue->assigned_to'",
    "deceription": "selct name from user based on id"
  },
  {
    "schedule_name": "scrappersImages",
    "query": "insert into scraper_image (website_id, img_name, img_url, create_at, updated_at) values (website_id, img_name, img_url, create_at, updated_at)",
    "deceription": "insert data into scraper images table"
  },
  {
    "schedule_name": "scrappersImagesDelete",
    "query": "select img_url from scraper-images where created_at <  Carbon::now()->subDays(2)->toDateTimeString()",
    "deceription": "select imgurl from scraper_images based on created_at date"
  },
  {
    "schedule_name": "send:activity-listings",
    "query": "SELECT causer_id,subject_type,COUNT(*) AS total FROM (SELECT DISTINCT activities.subject_id,activities.subject_type,activities.causer_idFROM activitiesWHERE activities.description = 'create'AND activities.causer_id IN (70,73)AND activities.created_at BETWEEN ? AND ? AS SUBQUER GROUP BY subject_type,causer_id",
    "deceription": ""
  },
  {
    "schedule_name": "send:activity-listings",
    "query": "SELECT subject_type,COUNT(*) AS total FROM(SELECT DISTINCT activities.subject_id,activities.subject_typeFROM activities WHERE activities.description = 'create'AND activities.causer_id IN (70,73)AND activities.created_at BETWEEN ? AND ?)AS SUBQUERY GROUP BY subject_type",
    "deceription": ""
  },
  {
    "schedule_name": "customers:send-auto-reply",
    "query": "select * from chat_messages where id = message_id where user_id = 0 or user_id = null",
    "deceription": "select all messages from chat_messages based on user_id"
  },
  {
    "schedule_name": "customers:send-auto-reply",
    "query": "insert into chat_messages (customer_id, message, user_id, status, approved) values (customer_id, message, user_id, status, approved)",
    "deceription": "insert data into chat_messages table"
  },
  {
    "schedule_name": "customers:send-auto-reply",
    "query": "select MAX(id) as id, customer_id from chat_messages where message is not null and customer_id > ? and (status not in (?, ?, ?)) group by customer_id",
    "deceription": "select max(id) as id and customer_id from chat_messages based on message, customer_id and status"
  },
  {
    "schedule_name": "customers:send-auto-reply",
    "query": "select * from brands where deleted_at = null",
    "deceription": "select all brands that are not deleted"
  },
  {
    "schedule_name": "customers:send-auto-reply",
    "query": "select * from category where id = 2",
    "deceription": "select all data from categories based on id"
  },
  {
    "schedule_name": "customers:send-auto-reply",
    "query": "select * from category where id = 3",
    "deceription": "select all data from categories based on id"
  },
  {
    "schedule_name": "send:daily-reports-learning",
    "query": "select * from daily_activity where repeat_type not null and for_date = date and type = learning",
    "deceription": "get all data from daily_activity based on repeat, for_date and type"
  },
  {
    "schedule_name": "send:daily-reports-learning",
    "query": "select * from learning",
    "deceription": "select all data from learning "
  },
  {
    "schedule_name": "send:daily-reports-learning",
    "query": "insert into learning (created_at, learning_duedate) values (create_at, learning_duedate)",
    "deceription": "duplicate and insert data into learnig "
  },
  {
    "schedule_name": "send-daily-planner-notification",
    "query": "select * from user where id = id",
    "deceription": "select all data from users based on id"
  },
  {
    "schedule_name": "send-daily-planner-notification",
    "query": "select * from daily_activity where id = event->daily_activity_id",
    "deceription": "select all data from daily_activity based on id"
  },
  {
    "schedule_name": "send-daily-planner-notification",
    "query": "insert into daily_activity_histories (daily_activities_id, title, description) values (daily_activities_id, title, description)",
    "deceription": "insert data into daily_activity_histories table"
  },
  {
    "schedule_name": "send-daily-planner-notification",
    "query": "insert in to chat_message (user_id, message) values(user_id, message)",
    "deceription": "insert data into chat_messages table"
  },
  {
    "schedule_name": "send:daily-planner-report",
    "query": "select * from tasks where time_slot != null and planned_at = todate and is_completed = null and assign_to is in []",
    "deceription": "select all data from task based on time_slot, assign_to, planned_atand is_completed"
  },
  {
    "schedule_name": "send:daily-planner-report",
    "query": "select * from tasks where is_statutory = 1 and is_verified = null and assign is in [] groupBy assign_to",
    "deceription": "select all data from tasks based on is_statutory and is_verified group_by assign_to"
  },
  {
    "schedule_name": "send:daily-planner-report",
    "query": "select * from daily_activities where for_date = now date and user_id is in [] group_by user_id and time_slot",
    "deceription": "select all data from daily_activities based on for_date and user_id also group_by user_id and time_slot"
  },
  {
    "schedule_name": "send:daily-reports",
    "query": "select * from daily_activities where repeat_type != null and for_date = data and type = event",
    "deceription": "select all data from daily_activities based on repeat_type and for_date"
  },
  {
    "schedule_name": "send:daily-reports",
    "query": "select * from daily_activity where id = id",
    "deceription": "select all data from daily_activity based on id"
  },
  {
    "schedule_name": "command:date_time_reminder",
    "query": "select * from task_manager where message_type = date_time_reminder_message orderBy id",
    "deceription": "select all data from task_manager based on message_type and orderby id"
  },
  {
    "schedule_name": "command:date_time_reminder",
    "query": "insert into chat_bot_reply (question, replied_chat_id, chat_id, reply_from) values (question, replied_chat_id, chat_id, reply_from)",
    "deceription": "insert data into chat_bot_reply table"
  },
  {
    "schedule_name": "command:date_time_reminder",
    "query": "select *, TIMESTAMPDIFF(MINUTE, last_date_time_reminder, '2023-03-27 16:58:56') as diff_min from developer_tasks where status not in (?, ?) and assigned_to IN (SELECT id FROM users WHERE is_task_planned = 1) and status <> ? and estimate_time is null and estimate_minutes is null and developer_tasks.deleted_at is null",
    "deceription": ""
  },
  {
    "schedule_name": "send:delivery-details",
    "query": "select * from private_views wher date LIKE '%tomorrow%'",
    "deceription": "select all data from private_views based on date"
  },
  {
    "schedule_name": "send:delivery-details",
    "query": "selct * from users where role = 'delivery coordinator",
    "deceription": "select all data from users based on role"
  },
  {
    "schedule_name": "send:delivery-details",
    "query": "select * from auto_reply where type = auto-reply and keyword = private-viewing-details",
    "deceription": "select all data from auto_repl based on type and keyword"
  },
  {
    "schedule_name": "send:delivery-details",
    "query": "update chat_message set erp_user = '$coordinator->id', approved = 1, status = 2",
    "deceription": "update some values in chat_message table"
  },
  {
    "schedule_name": "newsletter:send",
    "query": "select * from news_letter where sent_on = null and sent_at != ''",
    "deceription": "select all data from news_letter based on sent_on and sent_at"
  },
  {
    "schedule_name": "send-report:failed-jobs",
    "query": "select * from failed_jobs where failed_at > '$beforeFiveMin'",
    "deceription": "select all data from failed_jobs based on failed_at"
  },
  {
    "schedule_name": "fcm:send",
    "query": "select sw.push_web_key, sw.push_web_id, ft.token, push_fcm_notifications.* from push_fcm_notifications left join fcm_tokens as ft on ft.store_website_id = push_fcm_notifications.store_website_id left join store_websites as sw on sw.id = push_fcm_notifications.store_website_id where ft.token != ? and sw.push_web_key != ? and sw.push_web_id != ? and push_fcm_notifications.sent_at between ? and ?",
    "deceription": ""
  },
  {
    "schedule_name": "hubstaff:send_report",
    "query": "select hubstaff_user_id, name from users inner join hubstaff_members on hubstaff_members.user_id = users.id",
    "deceription": "select hubstaff_user_id, name from users join with hubstaff_member with user_id"
  },
  {
    "schedule_name": "send:pending-tasks-reminders",
    "query": "select * from tasks where is_completed = null and tasks.id IN (SELECT task_id FROM task_users WHERE user_id IN (6, 7, 49, 56) AND type LIKE '%User%')'",
    "deceription": "select all data from tasks based on is_completed amd user_id"
  },
  {
    "schedule_name": "send:pending-tasks-reminders",
    "query": "select * from user where user_id = id",
    "deceription": "select all data from users based on user_id"
  },
  {
    "schedule_name": "fcm:send",
    "query": "select sw.push_web_key, sw.push_web_id, ft.token, push_fcm_notifications.* from push_fcm_notifications left join fcm_tokens as ft on ft.store_website_id = push_fcm_notifications.store_website_id left join store_websites as sw on sw.id = push_fcm_notifications.store_website_id where ft.token != ? and sw.push_web_key != ? and sw.push_web_id != ? and push_fcm_notifications.sent_at between ? and ?",
    "deceription": ""
  },
  {
    "schedule_name": "customer:phone {type}",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "customer:phone {type}",
    "query": "select * from customer where do_not_disturb = 0",
    "description": "select all data in customer table where do_not_disturb equal 0"
  },
  {
    "schedule_name": "customer:phone {type}",
    "query": "select * from customer where phone = phone",
    "description": "select all data in customer table where phone equal phone"
  },
  {
    "schedule_name": "customer:phone {type}",
    "query": "update customer set country ='IN' where id = id",
    "description": "update country field in customer where id equal id "
  },
  {
    "schedule_name": "customer:phone {type}",
    "query": "update customer set phone = phone where id = id",
    "description": "update phone field in customer where id equal id "
  },
  {
    "schedule_name": "customer:phone {type}",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "hubstaff:daily-activity-level-check",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "hubstaff:daily-activity-level-check",
    "query": "select sum(hubstaff_activities.tracked) as total_track, sum(hubstaff_activities.overall) as total_spent, `hm`.*, `hm`.`user_id` as `erp_user_id`, `u`.`name` as `user_name`, `u`.`phone` as `phone_number` from `hubstaff_activities` inner join `hubstaff_members` as `hm` on `hm`.`hubstaff_user_id` = `hubstaff_activities`.`user_id` inner join `users` as `u` on `u`.`id` = `hm`.`user_id` where date(`starts_at`) = ? and `hm`.`user_id` is not null group by `hubstaff_activities`.`user_id`",
    "description": ""
  },
  {
    "schedule_name": "hubstaff:daily-activity-level-check",
    "query": "insert into  hubstaff_activity_notification ('user_id','start_date','end_date','min_percentage','actual_percentage','reason','hubstaff_user_id','total_track') values ('user_id','start_date','end_date','min_percentage','actual_percentage','reason','hubstaff_user_id','total_track')",
    "description": "insert the user_id,start_date,end_date,min_percentage,actual_percentage,reason,hubstaff_user_id and total_track field value in hubstaff_activity_notification table "
  },
  {
    "schedule_name": "hubstaff:daily-activity-level-check",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "timedoctor:daily-activity-level-check",
    "query": "select sum(time_doctor_activities.tracked) as total_track, sum(time_doctor_activities.overall) as total_spent, `hm`.*, `hm`.`user_id` as `erp_user_id`, `u`.`name` as `user_name`, `u`.`phone` as `phone_number` from `time_doctor_activities` inner join `time_doctor_members` as `hm` on `hm`.`time_doctor_user_id` = `time_doctor_activities`.`user_id` inner join `users` as `u` on `u`.`id` = `hm`.`user_id` where date(`starts_at`) = ? and `hm`.`user_id` is not null group by `time_doctor_activities`.`user_id`",
    "description": ""
  },
  {
    "schedule_name": "timedoctor:daily-activity-level-check",
    "query": "insert into time_doctor_activity_notification (user_id,time_doctor_user_id,total_track,start_date,end_date,min_percentage,actual_percentage) values (user_id,time_doctor_user_id,total_track,start_date,end_date,min_percentage,actual_percentage)",
    "description": "insert the user_id,time_doctor_user_id,total_track,start_date,end_date,min_percentage and actual_percentage field in time_doctor_activity_notification"
  },
  {
    "schedule_name": "timedoctor:daily-activity-level-check",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "databaselog:cron",
    "query": "insert into database_log (url,sql_data,time_taken,log_message) values (url,sql_data,time_taken,log_message)",
    "description": "insert the url,sql_data,time_taken and log_message field value sendqin database_log table"
  },
  {
    "schedule_name": "delete-categories:with-no-products",
    "query": "select * from `categories` where `title` LIKE ?",
    "description": "select all data in category table where title like title"
  },
  {
    "schedule_name": "delete-categories:with-no-products",
    "query": "update category set ignore_category=ignore_category where id = id",
    "description": "update ignore_category field value in category table where id equal id"
  },
  {
    "schedule_name": "delete-categories:with-no-products",
    "query": "update category set references=references where id = id",
    "description": "update references field value in category table where id equal id"
  },
  {
    "schedule_name": "delete:chat-messages",
    "query": "select * from `chat_messages` where `status` in (7, 8, 9, 10) and `created_at` <= created_at and `message` = ''",
    "description": "select all data in chat_messages table where status in (7, 8, 9, 10) and created_at <= created_at and message = ''"
  },
  {
    "schedule_name": "delete:chat-messages",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "delete-composition:with-no-products",
    "query": "select * from `compositions` where (`replace_with` = ? or `replace_with` is null)",
    "description": "select all data in compositions table where replace_with = ''  or replace_with is null) "
  },
  {
    "schedule_name": "delete:database-items",
    "query": "DELETE FROM scraper_position_history WHERE created_at <= created_at",
    "description": "delete row in scraper_position_history  WHERE created_at <= created_at"
  },
  {
    "schedule_name": "delete:database-items",
    "query": "DELETE FROM scraper_screenshot_history WHERE created_at <= created_at",
    "description": "delete row in scraper_screenshot_history  WHERE created_at <= created_at"
  },
  {
    "schedule_name": "delete:database-items",
    "query": "DELETE FROM scraper_server_status_history WHERE created_at <= created_at",
    "description": "delete row in scraper_server_status_history  WHERE created_at <= created_at"
  },
  {
    "schedule_name": "delete:database-items",
    "query": "DELETE FROM log_request WHERE created_at <= created_at",
    "description": "delete row in log_request  WHERE created_at <= created_at"
  },
  {
    "schedule_name": "delete:database-items",
    "query": "DELETE FROM log_google_vision WHERE created_at <= created_at",
    "description": "delete row in log_google_vision  WHERE created_at <= created_at"
  },
  {
    "schedule_name": "delete:database-items",
    "query": "DELETE FROM log_scraper WHERE created_at <= created_at",
    "description": "delete row in log_scraper  WHERE created_at <= created_at"
  },
  {
    "schedule_name": "delete:gnb-products",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "delete:gnb-products",
    "query": "select * from scraped_products where website = 'G&B'",
    "description": "select all data in scraped_products table where website = 'G&B' "
  },
  {
    "schedule_name": "delete:gnb-products",
    "query": "select * from `products` where `sku` = ? and `products`.`deleted_at` is null",
    "description": "select all data in products table where sku = '' deleted_at is null "
  },
  {
    "schedule_name": "delete:gnb-products",
    "query": "DELETE FROM products WHERE created_at <= created_at",
    "description": "delete row in products table where sku = '' deleted_at is null "
  },
  {
    "schedule_name": "delete:gnb-products",
    "query": "DELETE FROM products WHERE sku = sku",
    "description": "delete row in products table where sku = sku"
  },
  {
    "schedule_name": "delete:gnb-products",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "delete:kids-products",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "delete:kids-products",
    "query": "select * from `products` where (`name` LIKE 'kids' or `short_description` LIKE ? or `name` LIKE ? or `short_description` LIKE ? or `name` LIKE ? or `short_description` LIKE ?) and `products`.`deleted_at` is null",
    "description": "select all data in products table where (`name` LIKE 'kids' or `short_description` LIKE ? or `name` LIKE ? or `short_description` LIKE ? or `name` LIKE ? or `short_description` LIKE ?) and `products`.`deleted_at` is null"
  },
  {
    "schedule_name": "delete:kids-products",
    "query": "DELETE FROM log_scraper_vs_ai WHERE product_id = product_id",
    "description": "delete row in log_scraper_vs_ai table where product_id = product_id"
  },
  {
    "schedule_name": "delete:kids-products",
    "query": "DELETE FROM product_suppliers WHERE product_id = product_id",
    "description": "delete row in product_suppliers table where product_id = product_id"
  },
  {
    "schedule_name": "delete:kids-products",
    "query": "DELETE FROM scraped_products WHERE sku = sku",
    "description": "delete row in product_suppliers table where sku = sku"
  },
  {
    "schedule_name": "delete:kids-products",
    "query": "DELETE FROM product_references WHERE product_id = product_id",
    "description": "delete row in product_references table where product_id equal product_id"
  },
  {
    "schedule_name": "delete:kids-products",
    "query": "DELETE FROM user_products WHERE product_id = product_id",
    "description": "delete row in user_products table where product_id equal product_id"
  },
  {
    "schedule_name": "delete:kids-products",
    "query": "DELETE FROM suggestion_products WHERE product_id = product_id",
    "description": "delete row in suggestion_products table where product_id equal product_id"
  },
  {
    "schedule_name": "delete:kids-products",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "magento-jobs:delete",
    "query": "select * from job where queue = 'magento' ",
    "description": "select all data in jon table where queue equal magento"
  },
  {
    "schedule_name": "magento-jobs:delete",
    "query": "DELETE FROM job WHERE where queue = 'magento'",
    "description": "delete row in job table where queue equal magento"
  },
  {
    "schedule_name": "magento-log:delete",
    "query": "select * from log_list_magento",
    "description": "select all data in log_list_magento table"
  },
  {
    "schedule_name": "magento-log:delete",
    "query": "select * from log_list_magento",
    "description": "select all data in log_list_magento table"
  },
  {
    "schedule_name": "magento-log:delete",
    "query": "select * from product_push_error_log where product_id = product_id",
    "description": "select all data in product_push_error_log table where product_id equal product_id"
  },
  {
    "schedule_name": "magento-log:delete",
    "query": "DELETE FROM product_push_error_log WHERE where product_id = product_id",
    "description": "delete row in product_push_error_log table where product_id equal product_id"
  },
  {
    "schedule_name": "product:delete",
    "query": "select `products`.*, `op`.`product_id` from `products` left join `order_products` as `op` on `op`.`product_id` = `products`.`id` where `stock` <= ? and `supplier` != ? and `products`.`deleted_at` is null group by `products`.`id` having op.product_id is null",
    "description": ""
  },
  {
    "schedule_name": "product:delete",
    "query": "DELETE FROM crop_amends WHERE where product_id = product_id",
    "description": "delete row in crop_amends table where product_id equal product_id"
  },
  {
    "schedule_name": "product:delete",
    "query": "DELETE FROM cropped_image_reference WHERE where product_id = product_id",
    "description": "delete row in cropped_image_reference table where product_id equal product_id"
  },
  {
    "schedule_name": "product:delete",
    "query": "DELETE FROM erp_lead_sending_history WHERE where product_id = product_id",
    "description": "delete row in erp_lead_sending_history table where product_id equal product_id"
  },
  {
    "schedule_name": "product:delete",
    "query": "DELETE FROM erp_leads WHERE where product_id = product_id",
    "description": "delete row in erp_leads table where product_id equal product_id"
  },
  {
    "schedule_name": "product:delete",
    "query": "DELETE FROM instruction WHERE where product_id = product_id",
    "description": "delete row in instruction table where product_id equal product_id"
  },
  {
    "schedule_name": "product:delete",
    "query": "DELETE FROM inventory_status_history WHERE where product_id = product_id",
    "description": "delete row in inventory_status_history table where product_id equal product_id"
  },
  {
    "schedule_name": "product:delete",
    "query": "DELETE FROM landing_page_product WHERE where product_id = product_id",
    "description": "delete row in landing_page_product table where product_id equal product_id"
  },
  {
    "schedule_name": "product:delete",
    "query": "DELETE FROM listing_history WHERE where product_id = product_id",
    "description": "delete row in listing_history table where product_id equal product_id"
  },
  {
    "schedule_name": "product:delete",
    "query": "DELETE FROM log_list_magento WHERE where product_id = product_id",
    "description": "delete row in log_list_magento table where product_id equal product_id"
  },
  {
    "schedule_name": "product:delete",
    "query": "DELETE FROM log_scraper_vs_ai WHERE where product_id = product_id",
    "description": "delete row in log_scraper_vs_ai table where product_id equal product_id"
  },
  {
    "schedule_name": "product:delete",
    "query": "DELETE FROM notification WHERE where product_id = product_id",
    "description": "delete row in notification table where product_id equal product_id"
  },
  {
    "schedule_name": "product:delete",
    "query": "DELETE FROM private_view_products WHERE where product_id = product_id",
    "description": "delete row in private_view_products table where product_id equal product_id"
  },
  {
    "schedule_name": "product:delete",
    "query": "DELETE FROM product_attributes WHERE where product_id = product_id",
    "description": "delete row in product_attributes table where product_id equal product_id"
  },
  {
    "schedule_name": "product:delete",
    "query": "DELETE FROM product_category_history WHERE where product_id = product_id",
    "description": "delete row in product_category_history table where product_id equal product_id"
  },
  {
    "schedule_name": "product:delete",
    "query": "DELETE FROM product_color_history WHERE where product_id = product_id",
    "description": "delete row in product_color_history table where product_id equal product_id"
  },
  {
    "schedule_name": "product:delete",
    "query": "DELETE FROM product_dispatch WHERE where product_id = product_id",
    "description": "delete row in product_dispatch table where product_id equal product_id"
  },
  {
    "schedule_name": "product:delete",
    "query": "DELETE FROM product_location_history WHERE where product_id = product_id",
    "description": "delete row in product_location_history table where product_id equal product_id"
  },
  {
    "schedule_name": "product:delete",
    "query": "DELETE FROM product_push_error_log WHERE where product_id = product_id",
    "description": "delete row in product_push_error_log table where product_id equal product_id"
  },
  {
    "schedule_name": "product:delete",
    "query": "DELETE FROM product_quicksell_groups WHERE where product_id = product_id",
    "description": "delete row in product_quicksell_groups table where product_id equal product_id"
  },
  {
    "schedule_name": "product:delete",
    "query": "DELETE FROM product_reference WHERE where product_id = product_id",
    "description": "delete row in product_reference table where product_id equal product_id"
  },
  {
    "schedule_name": "product:delete",
    "query": "DELETE FROM product_sizes WHERE where product_id = product_id",
    "description": "delete row in product_sizes table where product_id equal product_id"
  },
  {
    "schedule_name": "product:delete",
    "query": "DELETE FROM product_status WHERE where product_id = product_id",
    "description": "delete row in product_status table where product_id equal product_id"
  },
  {
    "schedule_name": "product:delete",
    "query": "DELETE FROM product_status_history WHERE where product_id = product_id",
    "description": "delete row in product_status_history table where product_id equal product_id"
  },
  {
    "schedule_name": "product:delete",
    "query": "DELETE FROM product_template WHERE where product_id = product_id",
    "description": "delete row in product_template table where product_id equal product_id"
  },
  {
    "schedule_name": "product:delete",
    "query": "DELETE FROM product_translation WHERE where product_id = product_id",
    "description": "delete row in product_translation table where product_id equal product_id"
  },
  {
    "schedule_name": "product:delete",
    "query": "DELETE FROM product_verifying_user WHERE where product_id = product_id",
    "description": "delete row in product_verifying_user table where product_id equal product_id"
  },
  {
    "schedule_name": "product:delete",
    "query": "DELETE FROM purchase_discount WHERE where product_id = product_id",
    "description": "delete row in purchase_discount table where product_id equal product_id"
  },
  {
    "schedule_name": "product:delete",
    "query": "DELETE FROM purchase_product_supplier WHERE where product_id = product_id",
    "description": "delete row in purchase_product_supplier table where product_id equal product_id"
  },
  {
    "schedule_name": "product:delete",
    "query": "DELETE FROM purchase_product WHERE where product_id = product_id",
    "description": "delete row in purchase_product table where product_id equal product_id"
  },
  {
    "schedule_name": "product:delete",
    "query": "DELETE FROM rejected_images WHERE where product_id = product_id",
    "description": "delete row in rejected_images table where product_id equal product_id"
  },
  {
    "schedule_name": "product:delete",
    "query": "DELETE FROM return_exchange_product WHERE where product_id = product_id",
    "description": "delete row in return_exchange_product table where product_id equal product_id"
  },
  {
    "schedule_name": "product:delete",
    "query": "DELETE FROM scrap_activity WHERE where product_id = product_id",
    "description": "delete row in scrap_activity table where product_id equal product_id"
  },
  {
    "schedule_name": "product:delete",
    "query": "DELETE FROM scrape_queues WHERE where product_id = product_id",
    "description": "delete row in scrape_queues table where product_id equal product_id"
  },
  {
    "schedule_name": "product:delete",
    "query": "DELETE FROM scraped_products WHERE where product_id = product_id",
    "description": "delete row in scraped_products table where product_id equal product_id"
  },
  {
    "schedule_name": "product:delete",
    "query": "DELETE FROM site_cropped_images WHERE where product_id = product_id",
    "description": "delete row in site_cropped_images table where product_id equal product_id"
  },
  {
    "schedule_name": "product:delete",
    "query": "DELETE FROM store_website_product_attribute WHERE where product_id = product_id",
    "description": "delete row in store_website_product_attribute table where product_id equal product_id"
  },
  {
    "schedule_name": "product:delete",
    "query": "DELETE FROM store_website_product WHERE where product_id = product_id",
    "description": "delete row in store_website_product table where product_id equal product_id"
  },
  {
    "schedule_name": "product:delete",
    "query": "DELETE FROM suggested_product_list WHERE where product_id = product_id",
    "description": "delete row in suggested_product_list table where product_id equal product_id"
  },
  {
    "schedule_name": "product:delete",
    "query": "DELETE FROM suggestion_product WHERE where product_id = product_id",
    "description": "delete row in suggestion_product table where product_id equal product_id"
  },
  {
    "schedule_name": "product:delete",
    "query": "DELETE FROM supplier_discount_info WHERE where product_id = product_id",
    "description": "delete row in supplier_discount_info table where product_id equal product_id"
  },
  {
    "schedule_name": "product:delete",
    "query": "DELETE FROM translated_product WHERE where product_id = product_id",
    "description": "delete row in translated_product table where product_id equal product_id"
  },
  {
    "schedule_name": "product:delete",
    "query": "DELETE FROM user_product_feedback WHERE where product_id = product_id",
    "description": "delete row in user_product_feedback table where product_id equal product_id"
  },
  {
    "schedule_name": "product:delete",
    "query": "DELETE FROM user_product WHERE where product_id = product_id",
    "description": "delete row in user_product table where product_id equal product_id"
  },
  {
    "schedule_name": "product:delete",
    "query": "DELETE FROM website_product WHERE where product_id = product_id",
    "description": "delete row in website_product table where product_id equal product_id"
  },
  {
    "schedule_name": "product:delete",
    "query": "DELETE FROM product WHERE where where product_id = product_id ",
    "description": "delete row in product table where product_id = product_id"
  },
  {
    "schedule_name": "product:delete-images",
    "query": "select `products`.*, `op`.`product_id` from `products` left join `order_products` as `op` on `op`.`product_id` = `products`.`id` where `stock` <= ? and `supplier` != ? and `products`.`deleted_at` is null group by `products`.`id` having op.product_id is null",
    "description": "select `products`.*, `op`.`product_id` from `products` left join `order_products` as `op` on `op`.`product_id` = `products`.`id` where `stock` <= ? and `supplier` != ? and `products`.`deleted_at` is null group by `products`.`id` having op.product_id is null"
  },
  {
    "schedule_name": "delete:products",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "delete:products",
    "query": "select * from `products` where `supplier` = 'Les Market'",
    "description": "select aqll data in products table where supplier  equal 'Les Market' "
  },
  {
    "schedule_name": "delete:products",
    "query": "DELETE FROM product WHERE  where `supplier` = 'Les Market'",
    "description": "delete row in product table where supplier equal Les Market"
  },
  {
    "schedule_name": "delete:products",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "delete:store-website-category",
    "query": "select * from `store_website_categories` left join `categories` as `c` on `c`.`id` = `store_website_categories`.`category_id` where `c`.`id` is null",
    "description": "select all data in store_website_categories table left join `categories` as `c` on `c`.`id` = `store_website_categories`.`category_id` where `c`.`id` is null"
  },
  {
    "schedule_name": "delete:store-website-category",
    "query": "select * from `store_website_categories` left join `categories` as `c` on `c`.`id` = `store_website_categories`.`category_id` where `c`.`id` is null",
    "description": "select all data in store_website_categories table left join `categories` as `c` on `c`.`id` = `store_website_categories`.`category_id` where `c`.`id` is null"
  },
  {
    "schedule_name": "delete:store-website-category",
    "query": "select * from store_website where id = store_website_id",
    "description": "select all data in store_website table where id equal id"
  },
  {
    "schedule_name": "delete:store-website-category",
    "query": "DELETE FROM store_website_category WHERE  where `id` = id",
    "description": "delete row in store_website_category table where id equal id"
  },
  {
    "schedule_name": "delete-temp-images:unused-images",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "delete-temp-images:unused-images",
    "query": "select COUNT * from `media` where `filename` = ?",
    "description": "count all record in media table where filename equal filename "
  },
  {
    "schedule_name": "delete-temp-images:unused-images",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "totem-jobs:delete",
    "query": "select * from jab where payload LIKE '%Totem%' ",
    "description": "select all data in job table where payload LIKE '%Totem%'"
  },
  {
    "schedule_name": "totem-jobs:delete",
    "query": "DELETE FROM jab WHERE  where `id` = id",
    "description": "delete row in jab table where id equal id"
  },
  {
    "schedule_name": "delete:unused-images",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "delete:unused-images",
    "query": "select COUNT * from `media` where `filename` = ?",
    "description": "count all record in media table where filename equal filename "
  },
  {
    "schedule_name": "delete:unused-images",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "delete:wise-products",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "delete:wise-products",
    "query": "select * from scraped_products where website = 'Wiseboutique'",
    "description": "select all data in scraped_products table where website equal Wiseboutique"
  },
  {
    "schedule_name": "delete:wise-products",
    "query": "select * from product where sku = sku",
    "description": "select all data in product table where sku equal sku"
  },
  {
    "schedule_name": "delete:wise-products",
    "query": "DELETE FROM product WHERE  where `sku` = sku",
    "description": "delete row in product table where sku equal sku"
  },
  {
    "schedule_name": "delete:wise-products",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "DevAPIReport:check",
    "query": "insert into google_developer (name,aggregation_period,latestEndTime,timezone,report) values (name,aggregation_period,latestEndTime,timezone,'crash')",
    "description": "insert the name,aggregation_period,latestEndTime,timezone and  report field value in google_developer table"
  },
  {
    "schedule_name": "DevAPIReport:check",
    "query": "insert into google_developer_logs (api,log_name,result) values (api,log_name,result)",
    "description": "insert the api,log_name and result field value in google_developer_logs table"
  },
  {
    "schedule_name": "document:email",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "document:email",
    "query": "insert into document (name,filename,version,from_email) values (name,filename,1,1)",
    "description": "insert the name,filename,version and from_email field value in document table"
  },
  {
    "schedule_name": "document:email",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "doublef:get-product-details",
    "query": "insert into document (name,filename,version,from_email) values (name,filename,1,1)",
    "description": "insert the name,filename,version and from_email field value in document table"
  },
  {
    "schedule_name": "doublef:get-product-details",
    "query": "select * from scrap_entries where  is_product_page = 1 and site_name = 'DoubleF'",
    "description": "select all data in scrap_entries table where  is_product_page equal 1 and site_name equal 'DoubleF'"
  },
  {
    "schedule_name": "doublef:get-product-details",
    "query": "select * from scraped_products where  sku = sku or where  url = url",
    "description": "select all data in scraped_products table where  sku equal sku or where  url equal url"
  },
  {
    "schedule_name": "doublef:get-product-details",
    "query": "update scraped_products set brand_id=brand_id ,sku=sku,website='DoubleF',title='title',description='description',images =images, price= price , is_price_updated = 1, url= url, properties =  properties where  sku = sku or where  url = url",
    "description": "update brand_id,sku,website,title,description, properties, url, is_price_updated and images where sku equal sku or where  url equal url"
  },
  {
    "schedule_name": "scrap:doublef-list",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "scrap:doublef-list",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "encrpyt:message",
    "query": "select * from `chat_messages` where `customer_id` is not null and `message` is not null",
    "description": "select all data in chat_messages table where customer_id in not null amd message not null"
  },
  {
    "schedule_name": "encrpyt:message",
    "query": "update chat_messages set message= message where customer_id in not null amd message not null ",
    "description": "select all data in chat_messages table where customer_id in not null amd message not null"
  },
  {
    "schedule_name": "enrich:wiseboutique",
    "query": "select * from scraped_products where website = 'Wiseboutique' and is_enriched = 0",
    "description": "select all data in scraped_products table where website equal Wiseboutique and is_enriched equal 0"
  },
  {
    "schedule_name": "enrich:wiseboutique",
    "query": "update scraped_products set description=description, properties=properties,is_enriched=is_enriched where website = 'Wiseboutique' and is_enriched = 0",
    "description": "update description, properties and is_enriched field value in scraped_products table where website equal Wiseboutique and is_enriched equal 0"
  },
  {
    "schedule_name": "enrich:wiseboutique",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "errorAlertMessage",
    "query": "select * from `developer_tasks` where `subject` like ? and date(`created_at`) = ? and `is_resolved` = ? and `developer_tasks`.`deleted_at` is null",
    "description": "select all data in developer_tasks table where `subject` like ? and date(`created_at`) = ? and `is_resolved` = ? and `developer_tasks`.`deleted_at` is null"
  },
  {
    "schedule_name": "command:QueueExecutionCommand {id} {command_tail}",
    "query": "select * from `redis_queue` where `id` = id",
    "description": "select all data in redis_queue table where id equal id"
  },
  {
    "schedule_name": "fetch:all_emails",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "fetch:all_emails",
    "query": "select * from email_address order by id asc",
    "description": "select all data in email_address table order by id asc"
  },
  {
    "schedule_name": "fetch:all_emails",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "composition:pull-if-in-scraped",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "composition:pull-if-in-scraped",
    "query": "select * from product where composition = '' or composition = null orderBy id DESC ",
    "description": "select all data in product table where composition equal '' or composition equal null orderBy id DESC "
  },
  {
    "schedule_name": "composition:pull-if-in-scraped",
    "query": "select * from product where short_description = '' or short_description = null orderBy id DESC ",
    "description": "select all data in product table where short_description equal '' or short_description equal null orderBy id DESC "
  },
  {
    "schedule_name": "composition:pull-if-in-scraped",
    "query": "select * from product where color = '' or color = null orderBy id DESC ",
    "description": "select all data in product table where color equal '' or color equal null orderBy id DESC "
  },
  {
    "schedule_name": "composition:pull-if-in-scraped",
    "query": "update `product` set `composition` = composition where id=id",
    "description": "update composition field in product table where id equal id"
  },
  {
    "schedule_name": "composition:pull-if-in-scraped",
    "query": "update `product` set `short_description` = short_description where id=id",
    "description": "update short_description field in product table where id equal id"
  },
  {
    "schedule_name": "composition:pull-if-in-scraped",
    "query": "update `product` set `color` = color where id=id",
    "description": "update color field in product table where id equal id"
  },
  {
    "schedule_name": "composition:pull-if-in-scraped",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "fetch:emails",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "fetch:emails",
    "query": "select * from `suppliers` where (exists (select * from `agents` where `suppliers`.`id` = `agents`.`model_id` and `model_type` = ?) or `email` is not null) and `suppliers`.`deleted_at` is null",
    "description": "select all data in suppliers table where (exists (select * from `agents` where `suppliers`.`id` = `agents`.`model_id` and `model_type` = ?) or `email` is not null) and `suppliers`.`deleted_at` is null "
  },
  {
    "schedule_name": "fetch:emails",
    "query": "select * from `emails` where `type` = ? and `model_id` = ? and (`model_type` = ? or `model_type` = ?)",
    "description": "select all data in emails table where `type` = ? and `model_id` = ? and (`model_type` = ? or `model_type` = ?)"
  },
  {
    "schedule_name": "fetch:emails",
    "query": "insert into emails (model_id,model_type,type,seen,from,to,subject,message,template,additional_data,created_at) values (model_id,model_type,type,seen,from,to,subject,message,template,additional_data,created_at)",
    "description": "insert the model_id,model_type,type,seen,from,to,subject,message,template,additional_data and created_at field in emails table "
  },
  {
    "schedule_name": "command:fetchMagentoCronData",
    "query": "select * from store_website where magento_url not null",
    "description": "select all data in store_website table where magento_url not null"
  },
  {
    "schedule_name": "fetch:emails",
    "query": "insert into magento_cron_datas (store_website_id,website,cronstatus,cron_id,job_code,cron_message,cron_created_at,cron_scheduled_at,cron_executed_at,cron_finished_at) values (store_website_id,website,cronstatus,cron_id,job_code,cron_message,cron_created_at,cron_scheduled_at,cron_executed_at,cron_finished_at)",
    "description": "insert the store_website_id,website,cronstatus,cron_id,job_code,cron_message,cron_created_at,cron_scheduled_at,cron_executed_at and cron_finished_at field in magento_cron_datas table "
  },
  {
    "schedule_name": "measurements:get-from-scraped",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "measurements:get-from-scraped",
    "query": "select * from `products` where (`lmeasurement` = ? or `lmeasurement` is null) and (`hmeasurement` = ? or `hmeasurement` is null) and (`dmeasurement` = ? or `dmeasurement` is null) and `products`.`deleted_at` is null order by `created_at` desc",
    "description": "select all data in products table where (`lmeasurement` = ? or `lmeasurement` is null) and (`hmeasurement` = ? or `hmeasurement` is null) and (`dmeasurement` = ? or `dmeasurement` is null) and `products`.`deleted_at` is null order by `created_at` desc"
  },
  {
    "schedule_name": "measurements:get-from-scraped",
    "query": "update products set lmeasurement=lmeasurement, hmeasurement=hmeasurement, dmeasurement=dmeasurement where (`lmeasurement` = ? or `lmeasurement` is null) and (`hmeasurement` = ? or `hmeasurement` is null) and (`dmeasurement` = ? or `dmeasurement` is null) and `products`.`deleted_at` is null order by `created_at` desc",
    "description": "update the lmeasurement,hmeasurement and dmeasurement field in products table where (`lmeasurement` = ? or `lmeasurement` is null) and (`hmeasurement` = ? or `hmeasurement` is null) and (`dmeasurement` = ? or `dmeasurement` is null) and `products`.`deleted_at` is null order by `created_at` desc"
  },
  {
    "schedule_name": "measurements:get-from-scraped",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "command:FetchScrapeMissing",
    "query": "select  count(*) as total_product ,  sum(CASE WHEN p.category =  OR p.category IS NULL THEN 1 ELSE 0 END) AS missing_category, sum(CASE WHEN p.color =OR p.color IS NULL THEN 1 ELSE 0 END) AS missing_color, sum(CASE WHEN p.composition =OR p.composition IS NULL THEN 1 ELSE 0 END) AS missing_composition, sum(CASE WHEN p.title =OR p.title IS NULL THEN 1 ELSE 0 END) AS missing_name, sum(CASE WHEN p.description =OR p.description IS NULL THEN 1 ELSE 0 END) AS missing_short_description, sum(CASE WHEN p.price =OR p.price IS NULL THEN 1 ELSE 0 END) AS missing_price, sum(CASE WHEN p.size =OR p.size IS NULL THEN 1 ELSE 0 END) AS missing_size, `p`.`supplier`, `p`.`id`, `p`.`website`from `scraped_products` as `p` where `p`.`website` <> ? and  date(created_at) = date('2023-03-28')  group by `p`.`website` having missing_category > 1 or missing_color > 1 or missing_composition > 1 or missing_name > 1 or missing_short_description >1",
    "description": ""
  },
  {
    "schedule_name": "command:FetchScrapeMissing",
    "query": "select  * from scraper where scraper_name =  website",
    "description": "select  all data in scraper table where scraper_name equal website"
  },
  {
    "schedule_name": "command:FetchScrapeMissing",
    "query": "select  * from developer_task where scraper_id =  scraper_id and is_resolved = 0 and not null assigned_to",
    "description": "select  all data in developer_task table where scraper_id equal scraper_id and is_resolved equal 0 and not null assigned_to"
  },
  {
    "schedule_name": "command:FetchScrapeMissing",
    "query": "select  * from user where id = assigned_to",
    "description": "select  all data in user table where id equal id"
  },
  {
    "schedule_name": "command:FetchScrapeMissing",
    "query": "insert into scrap_log (scraper_id,type,log_messages) values (scraper_id,type,log_messages) ",
    "description": "insert the scraper_id,type and log_messages scrap_log table "
  },
  {
    "schedule_name": "command:FetchScrapeMissing",
    "query": "select * from `scraped_product_missing_log` where `website` = website and  date(created_at) = date('2023-03-28')",
    "description": "select all data in scraped_product_missing_log table where website equal website and  date(created_at) equal date('2023-03-28')"
  },
  {
    "schedule_name": "command:FetchScrapeMissing",
    "query": "insert into scraped_product_missing_log (website,total_product,missing_category,missing_color,missing_composition,missing_name,missing_short_description,missing_price,missing_size,created_at) values (website,total_product,missing_category,missing_color,missing_composition,missing_name,missing_short_description,missing_price,missing_size,created_at)",
    "description": "insert the website,total_product,missing_category,missing_color,missing_composition,missing_name,missing_short_description,missing_price,missing_size and created_at scraped_product_missing_log table"
  },
  {
    "schedule_name": "command:FetchScrapeMissing",
    "query": "update  scraped_product_missing_log set website=website, total_product=total_product,missing_category=missing_category,missing_color=missing_color,missing_composition=missing_composition,missing_name=missing_name,missing_short_description=missing_short_description,missing_price=missing_price,missing_size=missing_size,created_at=created_at where id=id",
    "description": "update the website,total_product,missing_category,missing_color,missing_composition,missing_name,missing_short_description,missing_price,missing_size and created_at scraped_product_missing_log table"
  },
  {
    "schedule_name": "fetch-store-website:orders",
    "query": "select * from store_website",
    "description": "select all data in store_website table"
  },
  {
    "schedule_name": "fill:reference",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "fill:reference",
    "query": "select * from product",
    "description": "select all data in product table"
  },
  {
    "schedule_name": "fill:reference",
    "query": "insert into product_reference (product_id,sku,color) values (product_id,sku,color)",
    "description": "insert the product_id,sku and color field value in product_reference table"
  },
  {
    "schedule_name": "fill:reference",
    "query": "insert into product_reference (product_id,sku,color,size) values (product_id,sku,color,size)",
    "description": "insert the product_id,sku,size and color field value in product_reference table"
  },
  {
    "schedule_name": "fill:reference",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "filter:cold-leads",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "filter:cold-leads",
    "query": "select * from cold_leads orderBy id DESC",
    "description": "select all data in cold_leads table orderBy id DESC"
  },
  {
    "schedule_name": "filter:cold-leads",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "find:waybilldue",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "find:waybilldue",
    "query": "select * from waybillinvoice where  status != paid and  date < today date",
    "description": "select all data in waybillinvoice table where  status != paid and  date < today date"
  },
  {
    "schedule_name": "find:waybilldue",
    "query": "update waybillinvoice set status='due' where  status != paid and  date < today date",
    "description": "update status field in  waybillinvoice table where  status != paid and  date < today date"
  },
  {
    "schedule_name": "category:fix-by-supplier",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "category:fix-by-supplier",
    "query": "select * from `categories` where `id` > 3 and `references` is not null and `references` != '' order by `id` desc",
    "description": "select all data in categories where id > 3 and references is not null and references != '' order by id desc"
  },
  {
    "schedule_name": "category:fix-by-supplier",
    "query": "select * from `products` where `is_scraped` = 1 and `category` < 4 and deleted_at is null order by `id` desc",
    "description": "select all data in products where is_scraped = 1 and category < 4 and deleted_at is null order by id desc"
  },
  {
    "schedule_name": "category:fix-by-supplier",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "sku:fix-doublef",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "sku:fix-doublef",
    "query": "select * from scraped_products where website= 'doubleF'",
    "description": "select all data in scraped_products table where website equal 'doubleF' "
  },
  {
    "schedule_name": "sku:fix-doublef",
    "query": "update product set sku = sku where sku= sku",
    "description": "update sku field in product table"
  },
  {
    "schedule_name": "sku:fix-doublef",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "fix-erp-color-issue",
    "query": "select `products`.* from `products` inner join `scraped_products` as `sp` on `sp`.`product_id` = `products`.`id` where `products`.`status_id` = ? and `products`.`supplier_id` > ? and (`sp`.`color` != ? and `sp`.`color` != ?) and (`products`.`color` is null or `products`.`color` = ?) and `products`.`deleted_at` is null",
    "description": ""
  },
  {
    "schedule_name": "fix-erp-color-issue",
    "query": "select * from `scraped_products` where `product_id` = ? and (`color` is not null or `color` != ?)",
    "description": "select all data in scraped_products table where `product_id` = ? and (`color` is not null or `color` != ?)"
  },
  {
    "schedule_name": "fix-erp-size-issue",
    "query": "select `products`.* from `products` inner join `scraped_products` as `sp` on `sp`.`product_id` = `products`.`id` where `products`.`status_id` = ? and `products`.`supplier_id` > ? and (`sp`.`size` != ? and `sp`.`size` != ?) and (`products`.`size` is null or `products`.`size` = ?) and `products`.`deleted_at` is null",
    "description": ""
  },
  {
    "schedule_name": "fix-erp-size-issue",
    "query": "select * from `scraped_products` where `product_id` = product_id and (`size` is not null or `size` != ?)",
    "description": "select all data in scraped_products table  where `product_id` = ? and (`size` is not null or `size` != ?)"
  },
  {
    "schedule_name": "fix-erp-size-issue",
    "query": "select * from `product_supplier` where `product_id` = product_id and supplier_id= supplier_id",
    "description": "select all data in product_supplier table  where product_id equal product_id and supplier_id equal supplier_id"
  },
  {
    "schedule_name": "fix-erp-size-issue",
    "query": "select * from `system_size_manager` groupBy category_id",
    "description": "select all data in system_size_manager table groupBy category_id"
  },
  {
    "schedule_name": "fix-erp-size-issue",
    "query": "select `system_size_managers`.`erp_size` from `system_size_managers` left join `system_size_relations` on `system_size_relations`.`system_size_manager_id` = `system_size_managers`.`id` left join `system_sizes` on `system_sizes`.`id` = `system_size_relations`.`system_size` where 0 = 1 and `system_size_relations`.`size` in (?) and `system_sizes`.`name` = ? group by `erp_size`",
    "description": ""
  },
  {
    "schedule_name": "fix-erp-size-issue",
    "query": "delete  from product_sizes WHERE product_id=product_id and supplier_id= supplier_id",
    "description": "delete row in product_sizes table where product_id equal product_id and supplier_id equal supplier_id "
  },
  {
    "schedule_name": "fix-erp-size-issue",
    "query": "insert into product_sizes (product_id,supplier_id,size) values (product_id,supplier_id,size) ",
    "description": "insert the product_id,supplier_id and  size  field value in product_sizes table"
  },
  {
    "schedule_name": "fix-erp-size-issue",
    "query": "insert into product_sizes (product_id,supplier_id,quantity,size) values (product_id,supplier_id,quantity,size) ",
    "description": "insert the product_id,supplier_id,quantity and  size  field value in product_sizes table"
  },
  {
    "schedule_name": "fix-erp-size-issue",
    "query": "update product set size=size,size_eu=size_eu where id=size_eu ",
    "description": "update size and size_eu field  in product table"
  },
  {
    "schedule_name": "fix-erp-size-issue",
    "query": "update product set size=size,size_eu=size_eu where id=size_eu ",
    "description": "update size and size_eu field  in product table"
  },
  {
    "schedule_name": "fix-erp-size-issue",
    "query": "update product set size=size,size_eu=size_eu,status_id=status_id where id=size_eu ",
    "description": "update size,status_id and size_eu field  in product table"
  },
  {
    "schedule_name": "products:fix-special-characters",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "products:fix-special-characters",
    "query": "select * from product where is_approved = 0",
    "description": "select all data in product table where is_approved equal 0"
  },
  {
    "schedule_name": "products:fix-special-characters",
    "query": "update product set short_description=short_description,composition=composition where id = id",
    "description": "update the short_description and composition field value in product table "
  },
  {
    "schedule_name": "products:fix-special-characters",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "product:fix-titlecase-for-composition",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "product:fix-titlecase-for-composition",
    "query": "select * from product",
    "description": "select all data in product table"
  },
  {
    "schedule_name": "product:fix-titlecase-for-composition",
    "query": "update product set composition = composition where id =id",
    "description": "update composition field value in product where id equal id"
  },
  {
    "schedule_name": "product:fix-titlecase-for-composition",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "sizes:fix-weird-sizes",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "sizes:fix-weird-sizes",
    "query": "update product set composition = composition where id =id orderBy updated_at DESC",
    "description": "update composition field value in product where id equal orderBy updated_at DESC"
  },
  {
    "schedule_name": "sizes:fix-weird-sizes",
    "query": "update product set composition = composition,short_description=short_description where id =id orderBy updated_at DESC",
    "description": "update composition and short_description field value in product where id equal orderBy updated_at DESC"
  },
  {
    "schedule_name": "sizes:fix-weird-sizes",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "sku:fix-wise",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "sku:fix-wise",
    "query": "select * from scraped_products where  website = 'Wiseboutique'",
    "description": "select all data in scraped_products table where website equal Wiseboutique"
  },
  {
    "schedule_name": "sku:fix-wise",
    "query": "update product set sku=sku where id=id ",
    "description": "update sku field in product table where id equal id"
  },
  {
    "schedule_name": "sku:fix-wise",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "flag:customers-with-complaints",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "flag:customers-with-complaints",
    "query": "select * from complaint where is_customer_flagged = 0",
    "description": "select all data in complaint table where is_customer_flagged equal 0"
  },
  {
    "schedule_name": "flag:customers-with-complaints",
    "query": "update complaint set is_customer_flagged = 1",
    "description": "update is_customer_flagged field in complaint table"
  },
  {
    "schedule_name": "flag:customers-with-complaints",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "hahstag:generate-map",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "hahstag:generate-map",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "generate:product-pricing-json",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "generate:product-pricing-json",
    "query": "select * from store_website where is_published = 1",
    "description": "select all data in store_website table where is_published equal 1"
  },
  {
    "schedule_name": "generate:product-pricing-json",
    "query": "select * from country_group",
    "description": "select all data in country_group table"
  },
  {
    "schedule_name": "generate:product-pricing-json",
    "query": "select * from country_duty groupBy destination",
    "description": "select all data in country_duty table groupBy destination"
  },
  {
    "schedule_name": "generate:product-pricing-json",
    "query": "select * from product where status_id = 9",
    "description": "select all data in product table where status_id equal 9"
  },
  {
    "schedule_name": "generate:product-pricing-json",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "details-from:properties",
    "query": "select `id`, `sku`, `properties` from `scraped_products` where `categories` is null and `color` is null and `composition` is null order by `id` desc",
    "description": "select id,sku,properties in scraped_products table where category is null and color is null and  composition is null order by id desc"
  },
  {
    "schedule_name": "details-from:properties",
    "query": "update product set categories=categories,color=color,composition=composition where id=id",
    "description": "update the categories,color and composition field in product table where id equal id"
  },
  {
    "schedule_name": "products:fetch-color-from-scraped-products",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "products:fetch-color-from-scraped-products",
    "query": "select * from product where is_approved = 0 and color = '' orderBy id DESC",
    "description": "select all data in product table where is_approved equal 0 and color equal to '' orderBy id DESC"
  },
  {
    "schedule_name": "products:fetch-color-from-scraped-products",
    "query": "update product set color=color where id=id",
    "description": "update the color field in product table where id equal id"
  },
  {
    "schedule_name": "products:fetch-color-from-scraped-products",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "products:fetch-composition-from-scraped-products",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "products:fetch-composition-from-scraped-products",
    "query": "select * from product where is_approved= 0 and where composition= '' orderBy id DESC",
    "description": "select all data in product table where is_approved equal 0 and composition equal '' orderBy id DESC"
  },
  {
    "schedule_name": "products:fetch-composition-from-scraped-products",
    "query": "update product set composition=composition where id = id",
    "description": "update composition field in product table where id equal id"
  },
  {
    "schedule_name": "products:fetch-composition-from-scraped-products",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "composition:extract-from-raw-data",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "composition:extract-from-raw-data",
    "query": "select * from product where composition = '' and composition not null orderBy created_at DESC",
    "description": "select all data in product where composition is '' and composition not null  orderBy created_at DESC"
  },
  {
    "schedule_name": "composition:extract-from-raw-data",
    "query": "update product set composition=composition where id= id",
    "description": "update composition field value in product table where id equal id"
  },
  {
    "schedule_name": "composition:extract-from-raw-data",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "cuccu:get-product-details",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "cuccu:get-product-details",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "cuccu:get-products",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "cuccu:get-products",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "gebnegozionline:get-products-detail",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "gebnegozionline:get-products-detail",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "gnb:update-price-via-dusk",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "gnb:update-price-via-dusk",
    "query": "select * from scraped_products where website=GNB",
    "description": "select all data in scraped_products where website equal GNB"
  },
  {
    "schedule_name": "gnb:update-price-via-dusk",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "gebnegozionline:get-products-list",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "gebnegozionline:get-products-list",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "livechat:tickets",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "livechat:tickets",
    "query": "select * from customer where email=email",
    "description": "select all data in customer table email equal email"
  },
  {
    "schedule_name": "livechat:tickets",
    "query": "insert into customer (name,email) values (name,email)",
    "description": "insert the record in customer table"
  },
  {
    "schedule_name": "livechat:tickets",
    "query": "select * from ticket_statuses where name = name",
    "description": "select all data in ticket_statuses table where name equal name"
  },
  {
    "schedule_name": "livechat:tickets",
    "query": "insert into ticket_statuses (name) values (name)",
    "description": "insert the record in ticket_statuses table"
  },
  {
    "schedule_name": "livechat:tickets",
    "query": "select * from tickets where ticket_id = id",
    "description": "select all data from tickets table where id equal id"
  },
  {
    "schedule_name": "livechat:tickets",
    "query": "insert into ticket_statuses (ticket_id,subject,message,date,customer_id,name,email,status_id) values (ticket_id,subject,message,date,customer_id,name,email,status_id)",
    "description": "insert the record in ticket_statuses table"
  },
  {
    "schedule_name": "livechat:tickets",
    "query": "insert into emails (model_id,model_type,type,seen,from,to,subject,message,template,additional_data,is_draft) values (model_id,model_type,type,seen,from,to,subject,message,template,additional_data,is_draft)",
    "description": "insert the model_id,model_type,type,seen,from,to,subject,message,template,additional_data and is_draft field in emails table "
  },
  {
    "schedule_name": "livechat:tickets",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "live:message",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "live:message",
    "query": "select * from customer where email=email",
    "description": "select all data in customer table email equal email"
  },
  {
    "schedule_name": "live:message",
    "query": "insert into customer (name,email) values (name,email)",
    "description": "insert the record in customer table"
  },
  {
    "schedule_name": "live:message",
    "query": "insert into chat_message (message,customer_id,message_application_id) values (message,customer_id,message_application_id)",
    "description": "insert the record in chat_message table"
  },
  {
    "schedule_name": "live:message",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "live:message",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "live:message",
    "query": "select * from chat_message where is_processed_for_keyword = 0 and number != null and customer_id > 0 ",
    "description": "select all data in chat_message table is_processed_for_keyword = 0 and number != null and customer_id > 0 "
  },
  {
    "schedule_name": "live:message",
    "query": "select * from chat_message where is_processed_for_keyword = 0 and number != null and customer_id > 0 ",
    "description": "select all data in chat_message table is_processed_for_keyword = 0 and number != null and customer_id > 0 "
  },
  {
    "schedule_name": "live:message",
    "query": "insert into chat_message (is_processed_for_keyword) values (is_processed_for_keyword)",
    "description": "insert is_processed_for_keyword filed value in chat_message table"
  },
  {
    "schedule_name": "getorders:magento",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "getorders:magento",
    "query": "select * from customer where phone= customer_phone",
    "description": "select all data in customer table where phone equal customer_phone"
  },
  {
    "schedule_name": "getorders:magento",
    "query": "select * from customer where phone like %full_name%",
    "description": "select all data in customer table where phone like full_name"
  },
  {
    "schedule_name": "getorders:magento",
    "query": "update customer set name=name,email=email,address=address,city=city,country=country,pincode=pincode,phone=phone where id equal id",
    "description": "update the name,email,address,city,country,pincode and phone in customer table where id equal id"
  },
  {
    "schedule_name": "getorders:magento",
    "query": "select * from order where id equal id",
    "description": "select all data in order table where id equal id"
  },
  {
    "schedule_name": "getorders:magento",
    "query": "select * from order_product where order_id equal id",
    "description": "select all data in order table where order_product equal id"
  },
  {
    "schedule_name": "getorders:magento",
    "query": "insert into chat_message (number,user_id,approved,status,customer_id,message) values (null,6,1,2,customer_id,message)",
    "description": "insert number,user_id,approved,status,customer_id and message filed value in chat_message table"
  },
  {
    "schedule_name": "getorders:magento",
    "query": "select * from auto_reply where type=auto-reply and keyword=cod-online-followup",
    "description": "select all data in auto_reply table where type=auto-reply and keyword=cod-online-followup"
  },
  {
    "schedule_name": "getorders:magento",
    "query": "insert into chat_message (number,user_id,approved,status,customer_id,message) values (null,6,1,2,customer_id,message)",
    "description": "insert number,user_id,approved,status,customer_id and message filed value in chat_message table"
  },
  {
    "schedule_name": "getorders:magento",
    "query": "insert into communication_history (model_id,model_type,type,method) values (model_id,model_type,'online-confirmation','whatsapp')",
    "description": "insert model_id,model_type,type and method filed value in communication_history table"
  },
  {
    "schedule_name": "screenshot:sites",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "screenshot:sites",
    "query": "select * from page_screenshots where image_link = ''",
    "description": "select all data in page_screenshots where image_link equal ''"
  },
  {
    "schedule_name": "screenshot:sites",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "fetch:payment-responses",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "fetch:payment-responses",
    "query": "select * from store_website where magento_url != null and api_token!= null",
    "description": "select all data in store_website table where  magento_url != null and api_token!= null"
  },
  {
    "schedule_name": "fetch:payment-responses",
    "query": "select * from payment_response where website_id = id and entity_id = entity_id",
    "description": "select all data in payment_response table where website_id = id and entity_id = entity_id "
  },
  {
    "schedule_name": "fetch:payment-responses",
    "query": "insert into payment_responses ('website_id','entity_id', 'parent_id', 'base_shipping_captured', 'shipping_captured', 'amount_refunded', 'base_amount_paid', 'amount_canceled', 'base_amount_authorized', 'base_amount_paid_online', 'base_amount_refunded_online', 'base_shipping_amount', 'shipping_amount', 'amount_paid', 'amount_authorized', 'base_amount_ordered', 'base_shipping_refunded', 'shipping_refunded', 'base_amount_refunded', 'amount_ordered', 'base_amount_canceled', 'quote_payment_id', 'cc_exp_month', 'cc_ss_start_year', 'cc_secure_verify', 'cc_approval', 'cc_last_4', 'cc_type', 'cc_exp_year', 'cc_status') values ('website_id','entity_id', 'parent_id', 'base_shipping_captured', 'shipping_captured', 'amount_refunded', 'base_amount_paid', 'amount_canceled', 'base_amount_authorized', 'base_amount_paid_online', 'base_amount_refunded_online', 'base_shipping_amount', 'shipping_amount', 'amount_paid', 'amount_authorized', 'base_amount_ordered', 'base_shipping_refunded', 'shipping_refunded', 'base_amount_refunded', 'amount_ordered', 'base_amount_canceled', 'quote_payment_id', 'cc_exp_month', 'cc_ss_start_year', 'cc_secure_verify', 'cc_approval', 'cc_last_4', 'cc_type', 'cc_exp_year', 'cc_status')",
    "description": "insert the record in  payment_responses table"
  },
  {
    "schedule_name": "fetch:payment-responses",
    "query": "update payment_responses set website_id=website_id,entity_id=entity_id,parent_id=parent_id,base_shipping_captured=base_shipping_captured,shipping_captured=shipping_captured,amount_refunded=amount_refunded,base_amount_paid=base_amount_paid,amount_canceled=amount_canceled,base_amount_authorized=base_amount_authorized,base_amount_paid_online=base_amount_paid_online,base_amount_refunded_online=base_amount_refunded_online,base_shipping_amount=base_shipping_amount,shipping_amount=shipping_amount,amount_paid=amount_paid , amount_authorized=amount_authorized, base_amount_ordered=base_amount_ordered, base_shipping_refunded=base_shipping_refunded, shipping_refunded=shipping_refunded, base_amount_refunded=base_amount_refunded, amount_ordered=amount_ordered, base_amount_canceled=base_amount_canceled, quote_payment_id=quote_payment_id, cc_exp_month=cc_exp_month, cc_ss_start_year=cc_ss_start_year, cc_secure_verify=cc_secure_verify, cc_approval=cc_approval, cc_last_4=cc_last_4, cc_type=cc_type, cc_exp_year=cc_exp_year, cc_status=cc_status where id = id",
    "description": "update the record in  payment_responses table"
  },
  {
    "schedule_name": "sku:get-product-images",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "sku:get-product-images",
    "query": "select * from product where brand = brand",
    "description": "select all data in product table where brand equal brand"
  },
  {
    "schedule_name": "sku:get-product-images",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "get:pythonLogs",
    "query": "insert into scrap_python_log (website,date,device) values (website,date,'desktop')",
    "description": "insert the record in scrap_python_log table"
  },
  {
    "schedule_name": "size:extract-from-raw-data",
    "query": "select * from `products` where (`size` = ? or `size` is null) and `is_approved` = ? and `is_crop_ordered` = ? and `products`.`deleted_at` is null",
    "description": "insert signature and start_time filed in cron_job_report table where (`size` = ? or `size` is null) and `is_approved` = ? and `is_crop_ordered` = ? and `products`.`deleted_at` is null"
  },
  {
    "schedule_name": "size:extract-from-raw-data",
    "query": "update products set size=size where id = id",
    "description": "update the size field in products table where id equal id "
  },
  {
    "schedule_name": "size:extract-from-raw-data",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "stats:email",
    "query": "select * from mailinglist_email where progress=0",
    "description": "select all data in mailinglist_email table where progress equal 0"
  },
  {
    "schedule_name": "stats:email",
    "query": "update mailinglist_email set total_emails_scheduled=total_emails_scheduled, total_emails_sent=total_emails_sent, total_emails_undelivered=total_emails_undelivered where id = id ",
    "description": "update the total_emails_scheduled,total_emails_sent and total_emails_undelivered in mailinglist_email table where id equal id"
  },
  {
    "schedule_name": "command:googleBigData",
    "query": "select id,key_file_path,project_id from store_website",
    "description": "select  id,key_file_path  and project_id in store_website table"
  },
  {
    "schedule_name": "command:googleBigData",
    "query": "select id,key_file_path,project_id from store_website",
    "description": "select  id,key_file_path  and project_id in store_website table"
  },
  {
    "schedule_name": "command:googleBigData",
    "query": "SELECT * FROM `brandsandlabels.firebase_crashlytics.com_app_brandslabels_ANDROID_REALTIME` WHERE DATE(event_timestamp) = '.date('Y-m-d').'",
    "description": ""
  },
  {
    "schedule_name": "command:googleBigData",
    "query": "insert into google_big_query_data (google_project_id,platform,bundle_identifier,event_id,is_fatal,issue_id,issue_title,issue_subtitle,event_timestamp,received_timestamp,device,memory,storage,operating_system,application,user,custom_keys,installation_uuid,crashlytics_sdk_version,app_orientation,device_orientation,process_state,logs,breadcrumbs,blame_frame,blame_frame,exceptions,errors,threads,website_id) values (google_project_id,platform,bundle_identifier,event_id,is_fatal,issue_id,issue_title,issue_subtitle,event_timestamp,received_timestamp,device,memory,storage,operating_system,application,user,custom_keys,installation_uuid,crashlytics_sdk_version,app_orientation,device_orientation,process_state,logs,breadcrumbs,blame_frame,blame_frame,exceptions,errors,threads,website_id)",
    "description": "insert the all field in google_big_query_data table"
  },
  {
    "schedule_name": "fetch-all-records:start",
    "query": "select * from google_client_account_mail where google_client_account_id= id",
    "description": "select all data in google_client_accountMail table where google_client_account_id equal id"
  },
  {
    "schedule_name": "fetch-all-records:start",
    "query": "insert into google_web_masters (sites) values (sites)",
    "description": "insert the sites field value in google_web_masters table"
  },
  {
    "schedule_name": "fetch-all-records:start",
    "query": "update google_web_masters set crawls= crawls where sites = sites",
    "description": "update the crawls in google_web_masters table where sitesequal sites"
  },
  {
    "schedule_name": "crop:using-graphica",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "crop:using-graphica",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "instagram:grow-accounts",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "instagram:grow-accounts",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "instagram:grow-accounts",
    "query": "select * from account where is_seeding=1",
    "description": "select all data in account table where is_seeding equal 1 "
  },
  {
    "schedule_name": "instagram:grow-accounts",
    "query": "update `account` set `bulk_comment` = 1,manual_comment=0,is_seeding=0 where id=id",
    "description": "update bulk_comment,manual_comment and is_seeding field value in account table where id equal id"
  },
  {
    "schedule_name": "command:gt_metrix_manage_queue_data",
    "query": "select `store_views_gt_metrix_url`.* from `store_views_gt_metrix_url` where `process` = ?",
    "description": "select all data in store_views_gt_metrix_url table where process=1"
  },
  {
    "schedule_name": "command:gt_metrix_manage_queue_data",
    "query": "insert into store_views_gt_metrix (store_view_id,account_id,website_id,website_url) values (store_view_id,account_id,website_id,website_url)",
    "description": "insert the store_view_id,account_id,website_id and website_url field value store_views_gt_metrix table"
  },
  {
    "schedule_name": "command:gt_metrix_manage_queue_data",
    "query": "select * from `store_views_gt_metrix` where `id` = ?",
    "description": "select all data in store_views_gt_metrix table where id equal 1"
  },
  {
    "schedule_name": "command:gt_metrix_manage_queue_data",
    "query": "select * from `store_views_gt_metrix` where `store_view_id` = store_view_id and website_id=website_id ",
    "description": "select all data in store_views_gt_metrix table where store_view_id equal store_view_id and website_id equal website_id"
  },
  {
    "schedule_name": "gt-metrix:report",
    "query": "select * from `store_views_gt_metrix` where `status` = queued",
    "description": "select all data in store_views_gt_metrix table where status equal queued"
  },
  {
    "schedule_name": "GT-metrix-test",
    "query": "select * from `setting` where `name` = gtmetrixCronStatus",
    "description": "select all data in setting table where name equal gtmetrixCronStatus"
  },
  {
    "schedule_name": "GT-metrix-test",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "GT-metrix-test",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "GT-metrix-test",
    "query": "select `website_store_views`.`code`, `website_store_views`.`id`, `sw`.`website`, `sw`.`magento_url`, `sw`.`id` as `store_website_id` from `website_store_views` inner join `website_stores` as `ws` on `ws`.`id` = `website_store_views`.`website_store_id` inner join `websites` as `w` on `w`.`id` = `ws`.`website_id` inner join `store_websites` as `sw` on `sw`.`id` = `w`.`store_website_id` where `website_store_id` is not null group by `store_website_id`",
    "description": "select `website_store_views`.`code`, `website_store_views`.`id`, `sw`.`website`, `sw`.`magento_url`, `sw`.`id` as `store_website_id` from `website_store_views` inner join `website_stores` as `ws` on `ws`.`id` = `website_store_views`.`website_store_id` inner join `websites` as `w` on `w`.`id` = `ws`.`website_id` inner join `store_websites` as `sw` on `sw`.`id` = `w`.`store_website_id` where `website_store_id` is not null group by `store_website_id`"
  },
  {
    "schedule_name": "command:GT-metrix-test-get-report",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "command:GT-metrix-test-get-report",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "command:GT-metrix-test-get-report",
    "query": "select * from `store_views_gt_metrix` where `test_id` is not null and `status` not in ('completed', 'error', 'not_queued') order by `id` desc",
    "description": "select all data store_views_gt_metrix where `test_id` is not null and `status` not in ('completed', 'error', 'not_queued') order by `id` desc"
  },
  {
    "schedule_name": "command:GT-metrix-test-get-report",
    "query": "select * from `store_views_gt_metrix` where `test_id` = id and `store_view_id` = store_view_id",
    "description": "select all data store_views_gt_metrix where `test_id` = id and `store_view_id` = store_view_id"
  },
  {
    "schedule_name": "HubstuffActivity:Command",
    "query": "select * from `users` where `payment_frequency` != ''",
    "description": "select all data users where `payment_frequency` != ''"
  },
  {
    "schedule_name": "HubstuffActivity:Command",
    "query": "insert into hubstuff_command_log_message (hubstuff_command_log_id,user_id,frequency) values (hubstuff_command_log_id,user_id,frequency)",
    "description": "insert the hubstuff_command_log_id,user_id and frequency field in hubstuff_command_log_message table"
  },
  {
    "schedule_name": "HubstuffActivity:Command",
    "query": "insert into hubstaff_activity_by_payment_frequency ('user_id','activity_excel_file','start_date','end_date','frequency_type','payment_receipt_ids') values ('user_id','activity_excel_file','start_date','end_date','frequency_type','payment_receipt_ids')",
    "description": "insert the record in hubstaff_activity_by_payment_frequency table"
  },
  {
    "schedule_name": "HubstuffActivity:Command",
    "query": "select * from payent_mail_data where user_id=user_id orderBy id desc",
    "description": "select all data in payent_mail_data table where user_id equal user_id orderBy id desc"
  },
  {
    "schedule_name": "HubstuffActivity:Command",
    "query": "insert into hubstuff_command_log_message (hubstuff_command_log_id,user_id,frequency) values (hubstuff_command_log_id,user_id,frequency)",
    "description": "insert the hubstuff_command_log_id,user_id and frequency field in hubstuff_command_log_message table"
  },
  {
    "schedule_name": "barcode-generator-product:run {product_id?}",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "barcode-generator-product:run {product_id?}",
    "query": "select p.id, count(*) as total_image,count(bm.id) as total_barcode,p.stock,bm.name as bm_name ,bm.price as bm_price,concat(concat(b.name, ||), p.name) COLLATE utf8mb4_unicode_ci as bimage_name,  IF(p.price_special_offer > 0, p.price_special_offer , p.price_inr_special) as b_price  from products as p  left join brands as b on b.id = p.brand  join mediables as md on md.mediable_id  = p.id and md.tag in ('.self::MEDIA_TYPE_TAG.') and mediable_type like App%Product  left join barcode_media as bm on bm.media_id = md.media_id and bm.type = product  '.$whereString.'  group by p.id '.$havingClause.' order by p.stock,p.id desc limit '.self::LIMIT",
    "description": ""
  },
  {
    "schedule_name": "barcode-generator-product:run {product_id?}",
    "query": "select * from brand",
    "description": "select all data in brand table"
  },
  {
    "schedule_name": "barcode-generator-product:run {product_id?}",
    "query": "select * from product wherein id = [array]",
    "description": "select all data in product where in ids"
  },
  {
    "schedule_name": "barcode-generator-product:run {product_id?}",
    "query": "update product set is_barcode_check=1 where id = id",
    "description": "update is_barcode_check field in product table where id equal id"
  },
  {
    "schedule_name": "barcode-generator-product:run {product_id?}",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field value in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "import:compositions",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "import:compositions",
    "query": "select * from product where is_approved = 1",
    "description": "select all data in product table where is_approved equal 1 "
  },
  {
    "schedule_name": "import:compositions",
    "query": "select * from compositions where name = name",
    "description": "select all data in compositions table where name equal name "
  },
  {
    "schedule_name": "import:compositions",
    "query": "update `compositions` set `name` = name where id=id",
    "description": "update name field value in compositions table where id equal id"
  },
  {
    "schedule_name": "import:colors-from-title-description",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "import:colors-from-title-description",
    "query": "select * from product where is_approved=0 and color= '' orderBy id DESC",
    "description": "select all data in product table where is_approved equal to 0 and color equal to '' orderBy id DESC"
  },
  {
    "schedule_name": "import:colors-from-title-description",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "import:customers-by-keyword-to-category",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "import:customers-by-keyword-to-category",
    "query": "select * from keyword_to_category",
    "description": "select all data in keyword_to_category table"
  },
  {
    "schedule_name": "import:customers-by-keyword-to-category",
    "query": "select * from `customers` where `is_categorized_for_bulk_messages` = ? and `customers`.`deleted_at` is null",
    "description": "select all data in customers table `is_categorized_for_bulk_messages` = ? and `customers`.`deleted_at` is null"
  },
  {
    "schedule_name": "import:customers-by-keyword-to-category",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "import:customers-by-keyword-to-category",
    "query": "delete  from  customer_with_categories WHERE customer_id=customer_id",
    "description": "delete route id in customer_with_categories where customer_id=customer_id"
  },
  {
    "schedule_name": "import:customers-by-keyword-to-category",
    "query": "insert into customer_with_categories (customer_id,category_type,model_id) values (customer_id,category_type,model_id)",
    "description": "insert the record in customer_with_categories table"
  },
  {
    "schedule_name": "send:product-suggestion",
    "query": "select * from suggested_products",
    "description": "select all data from suggested_products table"
  },
  {
    "schedule_name": "send:product-suggestion",
    "query": "select * from customer where id = id",
    "description": "select data of particular customer based on ID"
  },
  {
    "schedule_name": "send:product-suggestion",
    "query": "select * from product where id in ['']",
    "description": "select all products where id in array"
  },
  {
    "schedule_name": "send:product-suggestion",
    "query": "select * from product where category in ['']",
    "description": "select all products where category in array"
  },
  {
    "schedule_name": "send:product-suggestion",
    "query": "select * from product where size like '%$size%'",
    "description": "select all products where size like '%$size%'"
  },
  {
    "schedule_name": "send:product-suggestion",
    "query": "select * from product where is_scraped = 1 and category != 1",
    "description": "select all product based on is_scraped and category"
  },
  {
    "schedule_name": "command:send_message",
    "query": "update chat_message set send_by = send_by, user_id = id, approved = 1, is_delivered = 1, is_queue = 0",
    "description": "update some data into chat ChatMessage table"
  },
  {
    "schedule_name": "command:send_message",
    "query": "select chat_messages.*, c.store_website_id, c.phone from chat_messages inner join customers as c on c.id = chat_messages.customer_id where is_queue = ? and chat_messages.message_application_id = ? and (chat_messages.scheduled_at is null or chat_messages.scheduled_at like ?)",
    "description": "select * from chat_message and some other data with innerjoin  customers on id  = chat_message.customer_id based on is_queue and application id"
  },
  {
    "schedule_name": "command:send_message",
    "query": "select twilio_active_numbers.account_sid as a_sid, twilio_active_numbers.phone_number as phone_number, twilio_credentials.auth_token as auth_token from store_website_twilio_numbers inner join twilio_active_numbers on twilio_active_numbers.id = store_website_twilio_numbers.twilio_active_number_id inner join twilio_credentials on twilio_credentials.id = twilio_active_numbers.twilio_credential_id where store_website_twilio_numbers.store_website_id = ?",
    "description": ""
  },
  {
    "schedule_name": "send:queue-pending-chat-messages {number}",
    "query": "select number, instance_id, token, is_customer_support, status, is_default from whatsapp_config where instance_id != '' and status = 1 orderBy is_default",
    "description": "select selected values from whatsapp_config based on token and status orderBy is_default"
  },
  {
    "schedule_name": "send:queue-pending-chat-messages {number}",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "send:queue-pending-chat-messages {number}",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "send:queue-pending-chat-messages {number}",
    "query": "insert into im_queue (im_client, number_to,number_from,text,image,priority,marketing_message_type_id) values (im_client, number_to,number_from,text,image,priority,marketing_message_type_id)",
    "description": "insert data into im_queue table"
  },
  {
    "schedule_name": "send:queue-pending-chat-messages {number}",
    "query": "insert into message_queue_history (counter, number, type, user_id, time) values (counter, number, type, user_id, time)",
    "description": "insert data into message_queue_history table"
  },
  {
    "schedule_name": "send:queue-pending-chat-messages {number}",
    "query": "select chat_messages.* from chat_messages inner join customers as c on c.id = chat_messages.customer_id where is_queue > ? and c.whatsapp_number = ? and (chat_messages.group_id <= ? or chat_messages.group_id is null or chat_messages.group_id = ?) and (chat_messages.scheduled_at is null or chat_messages.scheduled_at <= ?)",
    "description": "insert data into message_queue_history table"
  },
  {
    "schedule_name": "send:recurring-tasks",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "send:recurring-tasks",
    "query": "select * from task where is_statutory = 1 and communication_status = 0 and is_completed = null and recurring_type != null",
    "description": "select data from task based on is_statutory, communication_status, is_completed and recurring_type"
  },
  {
    "schedule_name": "reminder:send-to-customer",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "reminder:send-to-customer",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "reminder:send-to-customer",
    "query": "select MAX(id) as id, customer_id from chat_messages where message is not null and customer_id > ? and (status not in (?, ?, ?, ?)) group by customer_id",
    "description": ""
  },
  {
    "schedule_name": "reminder:send-to-development",
    "query": "insert into chat_message (number, user_id, erp_user, approved, status, developer_task_id, message) values (number, user_id, erp_user, approved, status, developer_task_id, message)",
    "description": "insert data into chat_message table"
  },
  {
    "schedule_name": "reminder:send-to-development",
    "query": "insert into chat_bot_reply (question, replied_chat_id, chat_id, reply_from) values (question, replied_chat_id, chat_id, reply_from)",
    "description": "insert data into chat_bot_reply table"
  },
  {
    "schedule_name": "rreminder:send-to-dubbizle",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "rreminder:send-to-dubbizle",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "rreminder:send-to-dubbizle",
    "query": "select MAX(id) as id, customer_id from chat_messages where message is not null and customer_id > ? and (status not in (?, ?, ?, ?)) group by customer_id",
    "description": ""
  },
  {
    "schedule_name": "rreminder:send-to-dubbizle",
    "query": "select * from chat_message where id = id and user_id > 0 and approved = 1",
    "description": "select all data from chat_message table based on id , user_id and approved"
  },
  {
    "schedule_name": "rreminder:send-to-dubbizle",
    "query": "insert into chat_message (number, user_id, approved, status, dubbizle_id, message) values (number, user_id, approved, status, dubbizle_id, message)",
    "description": "insert data in to chat message table"
  },
  {
    "schedule_name": "reminder:send-to-supplier",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "reminder:send-to-supplier",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "reminder:send-to-supplier",
    "query": "select MAX(id) as id, customer_id from chat_messages where message is not null and customer_id > ? and (status not in (?, ?, ?, ?)) group by customer_id",
    "description": ""
  },
  {
    "schedule_name": "reminder:send-to-supplier",
    "query": "select * from chat_message where id = id and user_id > 0 and approved = 1",
    "description": "select all data from chat_message table based on id , user_id and approved"
  },
  {
    "schedule_name": "reminder:send-to-supplier",
    "query": "insert into chat_message (number, user_id, approved, status, dubbizle_id, message) values (number, user_id, approved, status, dubbizle_id, message)",
    "description": "insert data in to chat message table"
  },
  {
    "schedule_name": "reminder:send-to-task",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "reminder:send-to-task",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "reminder:send-to-task",
    "query": "select * from task whre frequency > 0 and reminder_message != '",
    "description": "select all data from task based on frequency and reminder_message"
  },
  {
    "schedule_name": "reminder:send-to-task",
    "query": "insert into chat_message (number, user_id, approved, status, dubbizle_id, message) values (number, user_id, approved, status, dubbizle_id, message)",
    "description": "insert data in to chat message table"
  },
  {
    "schedule_name": "reminder:send-to-task",
    "query": "insert into chat_bot_reply (question, replied_chat_id, chat_id, reply_from) values (question, replied_chat_id, chat_id, reply_from)",
    "description": "insert data into chat_bot_reply table"
  },
  {
    "schedule_name": "reminder:send-to-vendor",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "reminder:send-to-vendor",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "reminder:send-to-vendor",
    "query": "select MAX(id) as id, customer_id from chat_messages where message is not null and customer_id > ? and (status not in (?, ?, ?, ?)) group by customer_id",
    "description": ""
  },
  {
    "schedule_name": "reminder:send-to-vendor",
    "query": "select * from chat_message where id = id and user_id > 0 and approved = 1",
    "description": "select all data from chat_message table based on id , user_id and approved"
  },
  {
    "schedule_name": "reminder:send-to-vendor",
    "query": "insert into chat_message (number, user_id, approved, status, dubbizle_id, message) values (number, user_id, approved, status, dubbizle_id, message)",
    "description": "insert data in to chat message table"
  },
  {
    "schedule_name": "hubstaff:send_report_hourly_user_task",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "hubstaff:send_report_hourly_user_task",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "hubstaff:send_report_hourly_user_task",
    "query": "select hubstaff_activities.user_id, hubstaff_members.hubstaff_user_id, users.* from hubstaff_activities left join hubstaff_members on hubstaff_activities.user_id = hubstaff_members.hubstaff_user_id left join users on hubstaff_members.user_id = users.id where task_id = ? and date(starts_at) = ? group by user_id order by id desc",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "command:tasks-time-reminder",
    "query": "insert into chat_message (task_time_reminder, user_id, approved, status, is_queue, message) values (task_time_reminder, user_id, approved, status, is_queue, message)",
    "description": "insert data in to chat message table"
  },
  {
    "schedule_name": "command:tasks-time-reminder",
    "query": "insert into log_chat_message (log_case_id, task_id, message, log_message, task_time_reminder) values (log_case_id, task_id, message, log_message, task_time_reminder)",
    "description": "insert data into log_chat_message table"
  },
  {
    "schedule_name": "command:tasks-time-reminder",
    "query": "select * from task_message where message_type = 'est_time_message and user_id != null and user_id <> 0 orderBy id",
    "description": "insert data into log_chat_message table"
  },
  {
    "schedule_name": "send:voucher-reminder",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "send:voucher-reminder",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "send:voucher-reminder",
    "query": "select * from voucher whre date <= '$before'",
    "description": "select all voucher data based on date"
  },
  {
    "schedule_name": "template:product",
    "query": "select * from templated where auto_generate_product = 1",
    "description": "get all template based on auto_generate_product"
  },
  {
    "schedule_name": "template:product",
    "query": "insert into product_template (template_no, product_title, brand_id, currency, price, price_eur_discounted, discounted_price, product_id, is_processed) values (template_no, product_title, brand_id, currency, price, price_eur_discounted, discounted_price, product_id, is_processed)",
    "description": "insert data into product_template table"
  },
  {
    "schedule_name": "template:product",
    "query": "select * from media where id = id",
    "description": "select all data from media based on id"
  },
  {
    "schedule_name": "simpy-duty:calculate  ",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "simpy-duty:calculate  ",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "simpy-duty:calculate  ",
    "query": "insert into hubstaff_activity_notification (user_id, start_date, end_date, min_percentage, actual_percentage) values (user_id, start_date, end_date, min_percentage, actual_percentage)",
    "description": "insert data into hubstaff_activity_notification table"
  },
  {
    "schedule_name": "simpy-duty:calculate  ",
    "query": "select sum(hubstaff_activities.tracked) as total_track, sum(hubstaff_activities.overall) as total_spent, hm.*, hm.user_id as erp_user_id, u.name as user_name, u.phone as phone_number from hubstaff_activities inner join hubstaff_members as hm on hm.hubstaff_user_id = hubstaff_activities.user_id inner join users as u on u.id = hm.user_id where date(starts_at) = ? and hm.user_id is not null group by hubstaff_activities.user_id",
    "description": ""
  },
  {
    "schedule_name": "sku-error:log",
    "query": "select * from scraped_products where validation_result like '%SKU failed regex test%'",
    "description": "select all data from scraped_products based on validation_result"
  },
  {
    "schedule_name": "sku-error:log",
    "query": "insert into historial_data (object, measuring_point, value) values (object, measuring_point, value)",
    "description": "insert data into historial_data table"
  },
  {
    "schedule_name": "social:ads-history",
    "query": "insert into social_ad_history (ad_ac_id,account_id,reach, impressions, amount, cost_p_result, ad_name, status,adset_name, action_type,campaign_name, thumb_image, end_time) values (ad_ac_id,account_id,reach, impressions, amount, cost_p_result, ad_name, status,adset_name, action_type,campaign_name, thumb_image, end_time)",
    "description": "add data into social_ad_history table"
  },
  {
    "schedule_name": "store:ads-reporting-data",
    "query": "select * from google_ads_account with campaigns",
    "description": "get all data from google_ads_account with campaigns"
  },
  {
    "schedule_name": "store:ads-reporting-data",
    "query": "SELECT metrics.clicks, metrics.impressions, metrics.ctr, metrics.average_cpc, ad_group_ad.ad.id, ad_group_ad.ad.name, ad_group.name, ad_group.id, ad_group_ad.ad.type, ad_group_ad.ad.responsive_search_ad.headlines, campaign.id, campaign.name, campaign.advertising_channel_sub_type, campaign.advertising_channel_type FROM ad_group_ad WHERE campaign.id IN ($campaignIds) AND segments.date DURING TODAY",
    "description": ""
  },
  {
    "schedule_name": "store:ads-reporting-data",
    "query": "insert into google_ads_reporting (google_customer_id, adgroup_google_campaign_id,google_adgroup_id, google_ad_id, google_account_id, date) values (google_customer_id, adgroup_google_campaign_id,google_adgroup_id, google_ad_id, google_account_id, date)",
    "description": "add data into google_ads_reporting table"
  },
  {
    "schedule_name": "store:store-brands-from-supplier",
    "query": "select brand from supplier where brands != null",
    "description": "get all brand from supplier"
  },
  {
    "schedule_name": "store:store-brands-from-supplier",
    "query": "select name from brnad where name != null",
    "description": "select name from brand table "
  },
  {
    "schedule_name": "store:store-brands-from-supplier",
    "query": "insert into brnad (name, created_at) values (name, created_at)",
    "description": "insert data into brand table"
  },
  {
    "schedule_name": "StoreChatMessagesToAutoCompleteMessages",
    "query": "select * from  chat_message where created_at > date",
    "description": "select all data from chat_message based on created_at"
  },
  {
    "schedule_name": "store:store-brands-from-supplier",
    "query": "select * from auto_complete_message where message = message ",
    "description": "select all data from auto_complete_chatmessage based on message"
  },
  {
    "schedule_name": "store:store-brands-from-supplier",
    "query": "insert into brnad (name, created_at) values (name, created_at)",
    "description": "insert data into brand table"
  },
  {
    "schedule_name": "store:store-brands-from-supplier",
    "query": "insert into auto_complete_chatmessage (message) values (message) ",
    "description": "insert data into auto_complete_chatmessage table"
  },
  {
    "schedule_name": "store-image-from-scraped-product",
    "query": "select products.*, m.id as media_id from products inner join mediables as med on med.mediable_id = products.id and med.mediable_type = ? and med.tag = ? left join media as m on m.id = med.media_id where products.is_cron_check = ? and products.deleted_at is null group by products.id having media_id is null",
    "description": ""
  },
  {
    "schedule_name": "live-chat:get-tickets",
    "query": "select * from customer where email = email",
    "description": "select all data of customer based on email"
  },
  {
    "schedule_name": "live-chat:get-tickets",
    "query": "insert into customer (name, email) values (name, email)",
    "description": "insert data into customer table"
  },
  {
    "schedule_name": "live-chat:get-tickets",
    "query": "select * from chat_message whre unique_id = unique_id",
    "description": "get all data from chat_message table based on unique_id"
  },
  {
    "schedule_name": "live-chat:get-tickets",
    "query": "insert into chat_message (customer_id, message, unique_id, message_application_id) values (customer_id, message, unique_id, message_application_id)",
    "description": "insert data into chat_message table"
  },
  {
    "schedule_name": "store:log-scraper",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "lstore:log-scraper",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "lstore:log-scraper",
    "query": "select * from scraper where scraper_name = name",
    "description": "select data from scraper table based on name"
  },
  {
    "schedule_name": "lstore:log-scraper",
    "query": "insert into scrap_remark (scraper_name, scrap_id, module_type, scrap_field, remark) values (scraper_name, scrap_id, module_type, scrap_field, remark)",
    "description": "insert data into scrap_remark table"
  },
  {
    "schedule_name": "store:team-lead-id",
    "query": "select * from developer_task where team_lead_id != null",
    "description": "select data from developer_task based on team_lead_id"
  },
  {
    "schedule_name": "store:team-lead-id",
    "query": "select * from tem_user where user_id = user_id",
    "description": "select data from team_user based on user_id"
  },
  {
    "schedule_name": "store:team-lead-id",
    "query": "insert into team_user (team_lead_id) values (team_lead_id)",
    "description": "insert data into team_user table"
  },
  {
    "schedule_name": "submit-site-to-google-webmaster",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "submit-site-to-google-webmaster",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "submit-site-to-google-webmaster",
    "query": "insert into web_master_log (user_name, name, status, message) values (user_name, name, status, message)",
    "description": "insert data into web_master_log table"
  },
  {
    "schedule_name": "submit-site-to-google-webmaster",
    "query": "select website_store_views.code, website_store_views.id, sw.website from website_store_views inner join website_stores as ws on ws.id = website_store_views.website_store_id inner join websites as w on w.id = ws.website_id inner join store_websites as sw on sw.id = w.store_website_id where website_store_id is not null and site_submit_webmaster not in (?)",
    "description": ""
  },
  {
    "schedule_name": "submit-site-to-google-webmaster",
    "query": "update website_store_views set site_submit_webmaster =1 where id = id",
    "description": "update site_submit_webmaster based on id in website_store_views table"
  },
  {
    "schedule_name": "sync:erp-magento-customers",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "sync:erp-magento-customers",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "sync:erp-magento-customers",
    "query": "select from customer where email = email and phone = phone fetch first",
    "description": "select first recored from customer based on email and phone "
  },
  {
    "schedule_name": "sync:erp-magento-customers",
    "query": "insert into customer (name, email, address, city, country, pincode, phone) values (name, email, address, city, country, pincode, phone)",
    "description": "insert data into custome table"
  },
  {
    "schedule_name": "sync:instagram-messages",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "sync:instagram-messages",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "ssync:instagram-messages",
    "query": "select * from customer where instahandler = '$user['pk']'",
    "description": "select all customer based on instahandler"
  },
  {
    "schedule_name": "sync:instagram-messages",
    "query": "select * from customer where ig_username = '$user['username']'",
    "description": "select all custoemr based on ig_username"
  },
  {
    "schedule_name": "sync:instagram-messages",
    "query": "insert into customer (name, instahandler, ig_username) values (name, instahandler, ig_username)",
    "description": "insert data into customer table"
  },
  {
    "schedule_name": "command:sync_upteam_products",
    "query": "select * from brand where name = 'name'",
    "description": "select data from brand table"
  },
  {
    "schedule_name": "command:sync_upteam_products",
    "query": "insert into upstream_log ('log_description) values ('log_description)",
    "description": "insert data into log description table"
  },
  {
    "schedule_name": "command:sync_upteam_products",
    "query": "insert into product (sku, short_description, stock, brand, name, category,composition, color, lmeasurement, hmeasurement, dmeasurement, size, measurement,made_id, supplier, supplier_id, comments, reatiing, price_usd,price_usd_special, status_id, is_scraped,is_on_sale, price_inr, price_inr_special) values (sku, short_description, stock, brand, name, category,composition, color, lmeasurement, hmeasurement, dmeasurement, size, measurement,made_id, supplier, supplier_id, comments, reatiing, price_usd,price_usd_special, status_id, is_scraped,is_on_sale, price_inr, price_inr_special)",
    "description": "insert data into products table"
  },
  {
    "schedule_name": "task:chat-message-quick-data",
    "query": "select * from task with allMessages orderBy created_at",
    "description": "aselect all data from task table based on created_at"
  },
  {
    "schedule_name": "task:chat-message-quick-data",
    "query": "insert into chat_message_quick_date (model, model_id) values (model, model_id)",
    "description": "insert data into chat_message_quick_data table"
  },
  {
    "schedule_name": "shyam:name",
    "query": "insert into email (model_id, model_type, from, to,subject, message, template, additional_data, status, store_website_id, is_draft) values (model_id, model_type, from, to,subject, message, template, additional_data, status, store_website_id, is_draft)",
    "description": "insert data into email table"
  },
  {
    "schedule_name": "magento-product:test",
    "query": "select products.* from products inner join mediables as m on m.mediable_id = products.id and m.mediable_type = ? inner join media on media.id = m.media_id and media.filename Like ? inner join brands as b on b.id = products.brand where products.short_description != ? and products.name != ? and products.size != ? and products.price > ? and products.isListed = ? and products.status_id = ? and products.category in (?) and products.deleted_at is null group by m.mediable_id order by products.id desc limit 5",
    "description": ""
  },
  {
    "schedule_name": "tory:get-product-details",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "tory:get-product-details",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "scrap:tory-list",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "scrap:tory-list",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "transfer:categories",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "transfer:categories",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "transfer:categories",
    "query": "update product set category = 'category'",
    "description": "update product table category"
  },
  {
    "schedule_name": "transfer:categories",
    "query": "delete from category where id = id",
    "description": "delete one data from category table"
  },
  {
    "schedule_name": "transfer:messages",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "transfer:messages",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "transfer:messages",
    "query": "insert into chat_message (customer_id, user_id, assigned_to, status, approved, message, created_at) values (customer_id, user_id, assigned_to, status, approved, message, created_at)",
    "description": "insert data in to chat message table"
  },
  {
    "schedule_name": "farfetch:pull-details-which-are-missing",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "farfetch:pull-details-which-are-missing",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "twilio:allcalls",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "twilio:allcalls",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "twilio:errors",
    "query": "select * from twilio_credentials",
    "description": "get all data from twilio_credentials"
  },
  {
    "schedule_name": "twilio:errors",
    "query": "insert into twilio_error (sid, account_sid, call_sid, error_code, message_text, message_date) values (sid, account_sid, call_sid, error_code, message_text, message_date)",
    "description": "insert data into twilio error table"
  },
  {
    "schedule_name": "command:twillio_messages",
    "query": "select * from sms_service",
    "description": "select all data from sms_service table"
  },
  {
    "schedule_name": "command:twillio_messages",
    "query": "select * from messageing_group where service_id = service_id",
    "description": "get all data from messaging_group based on service_id"
  },
  {
    "schedule_name": "command:twillio_messages",
    "query": "select twilio_active_numbers.account_sid as a_sid, twilio_active_numbers.phone_number as phone_number, twilio_credentials.auth_token as auth_token from store_website_twilio_numbers inner join twilio_active_numbers on twilio_active_numbers.id = store_website_twilio_numbers.twilio_active_number_id inner join twilio_credentials on twilio_credentials.id = twilio_active_numbers.twilio_credential_id where store_website_twilio_numbers.store_website_id = ?",
    "description": "select twilio_active_numbers.account_sid as a_sid, twilio_active_numbers.phone_number as phone_number, twilio_credentials.auth_token as auth_token from store_website_twilio_numbers inner join twilio_active_numbers on twilio_active_numbers.id = store_website_twilio_numbers.twilio_active_number_id inner join twilio_credentials on twilio_credentials.id = twilio_active_numbers.twilio_credential_id where store_website_twilio_numbers.store_website_id = ?"
  },
  {
    "schedule_name": "update:auto-suggested-category",
    "query": "select * from category where title like title",
    "description": "select data from category based on title"
  },
  {
    "schedule_name": "update:auto-suggested-category",
    "query": "insert into update_attribute_history (old_value, new_value, attribute_name, attribute_id, user_id) values (old_value, new_value, attribute_name, attribute_id, user_id)",
    "description": "insert data into update_attribute_history table "
  },
  {
    "schedule_name": "UpdateCharities",
    "query": "select * from vendor_category wehre title = title",
    "description": "select all data from vendor_category based on title"
  },
  {
    "schedule_name": "UpdateCharities",
    "query": "select * from category where title = charity",
    "description": "select all data from category based on title"
  },
  {
    "schedule_name": "UpdateCharities",
    "query": "select * from brand where name = charty",
    "description": "select all data from brnad based on title "
  },
  {
    "schedule_name": "UpdateCharities",
    "query": "insert into product (sku,name, short_description, brand, category, price) values (sku,name, short_description, brand, category, price)",
    "description": "insert data into product table"
  },
  {
    "schedule_name": "UpdateCharities",
    "query": "update customer_charity set product_id = '$product->id' where id = id",
    "description": "update customer_charity table"
  },
  {
    "schedule_name": "cronschedule:update",
    "query": "update erp_events set is_closed = 1 where end_date <= datetoday and is_closed = 0",
    "description": "update erp_events table and sed is_closed = 1"
  },
  {
    "schedule_name": "cronschedule:update",
    "query": "select * from erp_events where is_closed = 0",
    "description": "select all data from erp_events where is_closed = 0"
  },
  {
    "schedule_name": "update:cuccini-products",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "update:cuccini-products",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "update:cuccini-products",
    "query": "select * from scraped_product whrer has_sku = 1 and website = cuccuini",
    "description": "select all data from scraped_product"
  },
  {
    "schedule_name": "update:cuccini-products",
    "query": "select * from product where sku = sku",
    "description": "select all data from product based on sku"
  },
  {
    "schedule_name": "update:cuccini-products",
    "query": "insert into product (sku,name, short_description, brand, category, price) values (sku,name, short_description, brand, category, price)",
    "description": "insert data into product table"
  },
  {
    "schedule_name": "update:cuccini-products",
    "query": "select * from category",
    "description": "get all category"
  },
  {
    "schedule_name": "update:cuccini-products",
    "query": "select * from brand where id = id",
    "description": "get brand based on id"
  },
  {
    "schedule_name": "update:cuccini-products",
    "query": "select * from supplier where supplier = '$supplier'",
    "description": "get all supplier based on supplier "
  },
  {
    "schedule_name": "update:cuccini-products",
    "query": "update currency set code = code, name = name",
    "description": "update code and name in currency table"
  },
  {
    "schedule_name": "update-customer-size-from-order",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "update-customer-size-from-order",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "update-customer-size-from-order",
    "query": "update customer set shoe_size = size where id = order->customer_id",
    "description": "update shoe size in customer"
  },
  {
    "schedule_name": "update-customer-size-from-order",
    "query": "select order_products.size, customers.id from orders inner join order_products on orders.id = order_products.order_id and order_products.size <> ? inner join customers on customers.id = orders.customer_id and customers.shoe_size is null group by customers.id",
    "description": ""
  },
  {
    "schedule_name": "update:magento-customers",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "update:magento-customers",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "update:magento-customers",
    "query": "selec * from customer where phone = customer_phone",
    "description": "select all data from customer based on phone "
  },
  {
    "schedule_name": "update:magento-customers",
    "query": "insert intp customer (email, address, name,city, country, pincode, phone) values (email, address, name,city, country, pincode, phone)",
    "description": "insert data into custome table"
  },
  {
    "schedule_name": "update:double-products",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "update:double-products",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "update:double-products",
    "query": "select scraped_product where has_sku = 1 and website = 'DoubleF",
    "description": "select all scraped_product based on has_sku and website"
  },
  {
    "schedule_name": "update:double-products",
    "query": "select * from brand where id = id",
    "description": "select particular brand "
  },
  {
    "schedule_name": "update:double-products",
    "query": "select * from product where sku = product->sku",
    "description": "get all product data based on sku"
  },
  {
    "schedule_name": "update:gnb-images",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "update:gnb-images",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "update:gnb-images",
    "query": "select * from scraped_product whre website = 'G&B'",
    "description": "get data of product where website = G&B"
  },
  {
    "schedule_name": "update:gnb-price",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "update:gnb-price",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "update:gnb-price",
    "query": "select * from scraped_product where website = 'DoubleF'",
    "description": "select all data from scraped_product based on website"
  },
  {
    "schedule_name": "inventory:history:update",
    "query": "select * from products where stock > 0",
    "description": "select all product where stock > 0"
  },
  {
    "schedule_name": "inventory:history:update",
    "query": "select count(distinct p.id) as total from suppliers inner join scrapers as sc on sc.supplier_id = suppliers.id inner join scraped_products as sp on sp.website = sc.scraper_name inner join products as p on p.id = sp.product_id where suppliers.supplier_status_id = ? and suppliers.deleted_at is null",
    "description": ""
  },
  {
    "schedule_name": "inventory:history:update",
    "query": "select * from inventroy_history where date = date",
    "description": "get all data form inventory_history based on date"
  },
  {
    "schedule_name": "update:magento-product-status",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "update:magento-product-status",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "update:magento-product-status",
    "query": "select * from products",
    "description": "get all data from products"
  },
  {
    "schedule_name": "update:magento-product-status",
    "query": "inser into product (categories, name, description, short_description,website_ids, status, visibility, tax_class_id, weight, stock_data,price, special_price,additional_attributes) values (categories, name, description, short_description,website_ids, status, visibility, tax_class_id, weight, stock_data,price, special_price,additional_attributes)",
    "description": "get all data from products"
  },
  {
    "schedule_name": "update:products-measurements",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "update:products-measurements",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "update:products-measurements",
    "query": "select * from scraped_product where website in ['alducadaosta', 'biffi', 'brunarosso', 'coltorti', 'leam', 'nugnes1920', 'montiboutique', 'mimmaninnishop', 'linoricci']",
    "description": "select all scraped_product based on website array"
  },
  {
    "schedule_name": "update:price-decimals",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "update:price-decimals",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "update:price-decimals",
    "query": "select * from scraped_product where price like '' and price notlike ''",
    "description": "select all scraped_product based on price"
  },
  {
    "schedule_name": "update-product:from-csv",
    "query": "select path, store_website_id from website_product_csv",
    "description": "select path and store_website_id from website_product_csv"
  },
  {
    "schedule_name": "update-product:from-csv",
    "query": "select count(*) as total_product_count,sw.id as store_website_id,c.id  as customer_id , b.id as brand_id from product_push_informations left join products as p on p.id = product_push_informations.real_product_id left join brands as b on b.id = p.brand left join categories as c on c.id = p.category left join store_websites as sw on sw.id = product_push_informations.store_website_id where product_push_informations.deleted_at is null group by b.id, c.id, sw.id",
    "description": ""
  },
  {
    "schedule_name": "update-product:from-csv",
    "query": "insert into product_push_informations (sku, store_website_id,status, quantity, stock_status, is_added_from_csv, real_product_id, is_available) values (sku, store_website_id,status, quantity, stock_status, is_added_from_csv, real_product_id, is_available)",
    "description": "insert data into product_push_informations table"
  },
  {
    "schedule_name": "update-product:from-csv",
    "query": "update product_push_information set is_available = 0 where product_id not in [] and store_website_id = store_website_id and is_available = 1 ",
    "description": "update data into product_push_information table"
  },
  {
    "schedule_name": "update-product:from-csv",
    "query": "insert into product_push_information (brand_id, customer_id, store_website_id, total_product_count) values (brand_id, customer_id, store_website_id, total_product_count)",
    "description": "insert data into product_push_information table"
  },
  {
    "schedule_name": "UpdateScraperDuration",
    "query": "insert into scraper_duration (scraper_id, process_id, duration) values (scraper_id, process_id, duration)",
    "description": "insert data into scraper_duration table"
  },
  {
    "schedule_name": "UpdateScraperDuration",
    "query": "select scrapers., (select count() from scrapers as laravel_reserved_0 where scrapers.id = laravel_reserved_0.parent_id) as children_scraper_count from scrapers inner join suppliers as s on s.id = scrapers.supplier_id where supplier_status_id = ? and scrapper in (?, ?) and parent_id is null order by scrapers.flag desc, s.supplier asc",
    "description": ""
  },
  {
    "schedule_name": "update-shoe-and-clothing-size-from-chat-messages",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "update-shoe-and-clothing-size-from-chat-messages",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "update-shoe-and-clothing-size-from-chat-messages",
    "query": "select chat_messages.id, customers.id as customer_id, message, shoe_size, clothing_size from chat_messages left join customers on customers.id = customer_id where (shoe_size is null or clothing_size is null)",
    "description": ""
  },
  {
    "schedule_name": "update-shoe-and-clothing-size-from-chat-messages",
    "query": "update customer set shoe_size = shoe_size where id = id",
    "description": "update field in customer table"
  },
  {
    "schedule_name": "gnb:get-sku",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "gnb:get-sku",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "supplier-invertory:lifetime-to-ten {days}",
    "query": "select * from scraper where scraper_name != null and server_id != null and inventory_lifetime != 0",
    "description": "get all data from scraper table based on scraper_anem, server_id and inventory_lifetime"
  },
  {
    "schedule_name": "supplier-invertory:lifetime-to-ten {days}",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "supplier-invertory:lifetime-to-ten {days}",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "update:tory-color",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "update:tory-color",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "update:tory-color",
    "query": "select * from scraped_products where has_sku = 1 and website = 'Tory'",
    "description": "get data from scraped_product based in sju and website"
  },
  {
    "schedule_name": "update:tory-color",
    "query": "select * from product where sku = `sku` fetch first",
    "description": "get first product data whre sku = `sku`"
  },
  {
    "schedule_name": "update:tory-images",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "update:tory-images",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "update:tory-images",
    "query": "select * from scraped_products where website = 'Tory'",
    "description": "get data from scraped_product based on website"
  },
  {
    "schedule_name": "update:wise-category",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "update:wise-category",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "update:wise-category",
    "query": "select * from scraped_products",
    "description": "get all scraped_products"
  },
  {
    "schedule_name": "update:wise-category",
    "query": "select * from categories",
    "description": "get all category"
  },
  {
    "schedule_name": "update:wise-category",
    "query": "select * from product where sku = `product->sku` fetch first",
    "description": "get first product where sku = sku "
  },
  {
    "schedule_name": "update:wise-category",
    "query": "select * from categories where title = `WOOMEN` fetch first",
    "description": "get first record of category where title = 'WOMEN'"
  },
  {
    "schedule_name": "update:wise-products",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "update:wise-products",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "magento:upload-products",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "magento:upload-products",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "magento:upload-products",
    "query": "iselect * from products where is_listed = '-5'",
    "description": "get all product data based on is_listed"
  },
  {
    "schedule_name": "magento:upload-products",
    "query": "insert into product (isListed) values (isListed)",
    "description": "update data in product table"
  },
  {
    "schedule_name": "users:payment",
    "query": "select * from user where fixed_price_user_or_job in [2,3]",
    "description": "get all data from user based on fixed_price_user_or_job"
  },
  {
    "schedule_name": "users:payment",
    "query": "select * from hubstaff_activities orderBy starts_at",
    "description": "get all data from hubstaff_activities table"
  },
  {
    "schedule_name": "users:payment",
    "query": "select * from payment_receipt where user_id = id orderBy date DESC",
    "description": "select all payment_receipt for particualr user in decending order"
  },
  {
    "schedule_name": "users:payment",
    "query": "insert into payment_receipt (worked_minutes, status, rate_estimated, date, user_id, currency, billing_frequency_day, billing_due_date) values (worked_minutes, status, rate_estimated, date, user_id, currency, billing_frequency_day, billing_due_date)",
    "description": "insert data into payment receipt table"
  },
  {
    "schedule_name": "visitor:logs",
    "query": "select * from visitor_log where ip = `ip` and last_visit <= last_visit",
    "description": "select data from visitor log based on ip and last visit"
  },
  {
    "schedule_name": "visitor:logs",
    "query": "insert into visitor_log (ip, browser, location, page, visits, page_current, chats, customer_name) values (ip, browser, location, page, visits, page_current, chats, customer_name)",
    "description": "insert data into visitor_log table"
  },
  {
    "schedule_name": "watson:push-manual-intents",
    "query": "select * from chat_bot_question where erp_or_watson = watson and workspace_id = null and value != ''",
    "description": "get data from chat_bot_question based on erp_or_watson, workspace_id and value"
  },
  {
    "schedule_name": "WatsonBrandCategoryGenerate",
    "query": "insert into chat_bot_question_example (question, chatbot_question_id) values (question, chatbot_question_id)",
    "description": "insert data into chat_bot_question_example table"
  },
  {
    "schedule_name": "WatsonBrandCategoryGenerate",
    "query": "select cat.title, products.id as id, brands.name as brand, sub_cat.title as sub_category, main_cat.title as main_category from products inner join brands on products.brand = brands.id inner join categories as cat on cat.id = products.category left join categories as sub_cat on sub_cat.id = cat.parent_id left join categories as main_cat on main_cat.id = sub_cat.parent_id where products.name is not null group by brand, category order by products.id asc",
    "description": ""
  },
  {
    "schedule_name": "command:waybilltrack",
    "query": "select * from orders inner join order_statuses on order_statuses.id = orders.order_status_id where order_statuses.status not in (?, ?) and orders.deleted_at is null",
    "description": "select all orders inner join to order_statues on id = orders.order_status_id basd on order_statues amd deleted_at"
  },
  {
    "schedule_name": "command:websitelog",
    "query": "select website from store_websites where website Like '%'.$websiteName.'%' fetch first",
    "description": "get first website from store_websites based on website "
  },
  {
    "schedule_name": "command:websitelog",
    "query": "insert into website_log (sql_query, time, module, website_id, type) values (sql_query, time, module, website_id, type)",
    "description": "insert data into website log table"
  },
  {
    "schedule_name": "wetransferQueue",
    "query": "select * from we_transfer where is_processed = 1",
    "description": "get data from we_transfer based on is_processed"
  },
  {
    "schedule_name": "wetransferQueue",
    "query": "update we_transfer set files_count = `files_count`, files_list = `files_list`, is_processed = 2",
    "description": "update data into we_transfer table"
  },
  {
    "schedule_name": "wetransferQueue",
    "query": "select * from hosts",
    "description": "get all data from hosts table"
  },
  {
    "schedule_name": "wetransferQueue",
    "query": "update host_item set interrupts_per_second = `interrupts_per_second`, item_id = `item_id`",
    "description": "update host_items table"
  },
  {
    "schedule_name": "wetransferQueue",
    "query": "update zabbix_history set host_id = `host_id`, interrupts_per_second = `interrupts_per_second`, item_id = `item_id`",
    "description": "update values in zabbix_history table"
  },
  {
    "schedule_name": "store:zabbix",
    "query": "select * from host where hostid = hostid fetch first",
    "description": "get first record from host that match hostid"
  },
  {
    "schedule_name": "store:zabbix",
    "query": "insert into host (hostid, name, host) values (hostid, name, host)",
    "description": "insert into host table"
  },
  {
    "schedule_name": "meeting:deleterecordings",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "meeting:deleterecordings",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "meeting:deleterecordings",
    "query": "insert into zoom_meeting (is_deleted_from_zoom) values (is_deleted_from_zoom)",
    "description": "update record in to zoom_meeting table"
  },
  {
    "schedule_name": "meeting:getrecordings",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "meeting:getrecordings",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "meeting:getrecordings",
    "query": "select * from zoom_meeting where zoom_recording = null and meeting_id != null and start_date_time < `date`",
    "description": "select data from zoom_meeting table based on zoom_recording, meeting_id and start_date_time"
  },
  {
    "schedule_name": "numberofimages:cropped",
    "query": "select * from croped_image_refrence where created_at > `date`",
    "description": "get all data of croped_image_refrence based on created_at"
  },
  {
    "schedule_name": "command:NegativeCouponResponses",
    "query": "select store_website_id, store_website_api_token, store_website_website from store_website where api_token != '' and website_source = 'magento'",
    "description": "select specific columns from store_website table"
  },
  {
    "schedule_name": "size:move-to-table",
    "query": "select size from products wher stock > 0 and size != null groupBy size",
    "description": "select size from product table based on stock and size and group them by size"
  },
  {
    "schedule_name": "move:planned-tasks",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "move:planned-tasks",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "move:planned-tasks",
    "query": "select * from task where time_slot != null and planned_at < `today` and is_completed = null orderBy time_slot",
    "description": "get data from task based on time_slot, planned_at and order them by time_slot"
  },
  {
    "schedule_name": "move:planned-tasks",
    "query": "select * from task where is_statutory = 1 and is_completed != null and is_verified",
    "description": "get data from task based on is_statutory, is_completed and is_verified"
  },
  {
    "schedule_name": "move:planned-tasks",
    "query": "select * from daily_activitie where is_completed = null and for_date < `today`",
    "description": "get all data from daily_activitie based on is_completed and for_date"
  },
  {
    "schedule_name": "recrop:send-to-recrop-and-fix",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "recrop:send-to-recrop-and-fix",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "recrop:send-to-recrop-and-fix",
    "query": "select * from product where is_crop_rejected = 1 and crop_remark LIKE `remark`",
    "description": "get data from product based on is_crop_rejected and crop_remark"
  },
  {
    "schedule_name": "cold-leads:move-to-customers",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "cold-leads:move-to-customers",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "cold-leads:move-to-customers",
    "query": "select * from cold_leads where is_imported = 1 and customer_id = null",
    "description": "get data from cold leads based on is_imported and customer_id"
  },
  {
    "schedule_name": "cold-leads:move-to-customers",
    "query": "insert into customer (name, phone, whatsapp_number, city, country) values (name, phone, whatsapp_number, city, country) ",
    "description": "insert data into customer table"
  },
  {
    "schedule_name": "move-all-shipping:push",
    "query": "select * from store_website_country_shipping",
    "description": "select all data from store_website_country_shipping table"
  },
  {
    "schedule_name": "message:most-used-words",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "message:most-used-words",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "message:most-used-words",
    "query": "truncate table chat_message_word",
    "description": "delete all data from chat_message_word table"
  },
  {
    "schedule_name": "message:most-used-words",
    "query": "truncate table chat_message_phrase",
    "description": "delete all data from chat_message_phrase table"
  },
  {
    "schedule_name": "message:most-used-words",
    "query": "select * from chat_message_word",
    "description": "select all data from chat_message_word table"
  },
  {
    "schedule_name": "message:most-used-words",
    "query": "insert into chat_message_phrase (word_id, phrase, chat_id) values (word_id, phrase, chat_id)",
    "description": "insert data into chat_message_phrase table"
  },
  {
    "schedule_name": "monitor:cron-jobs",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "monitor:cron-jobs",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "monitor:cron-jobs",
    "query": "select * from message_queue where send = 0 and status != 1 and sending_time < `now`",
    "description": "get record from message_queue based on send , status and sending_time"
  },
  {
    "schedule_name": "monitor:cron-jobs",
    "query": "select * from cron_job_report where signature = `signature`",
    "description": "get record from cron_job_report based on signature"
  },
  {
    "schedule_name": "monitor:cron-jobs",
    "query": "insert into cron_job_report (last_status, error_count) values (last_status, error_count)",
    "description": "insert data into cron_job_report table"
  },
  {
    "schedule_name": "migrate:instahandle",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "migrate:instahandle",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "migrate:instahandle",
    "query": "select * from customer where instahandler != null",
    "description": "select all data from customer based on instahandler"
  },
  {
    "schedule_name": "run:message-scheduler",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "run:message-scheduler",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "run:message-scheduler",
    "query": "select * from customer where is_priority = 1",
    "description": "select all data from customer based on is_priority"
  },
  {
    "schedule_name": "run:message-scheduler",
    "query": "select * from auto_replies where type = priority_customer and repeat != null",
    "description": "select all data from auto_replies based on type and repeat"
  },
  {
    "schedule_name": "run:message-scheduler",
    "query": "insert into schedule_message (user_id, message, sending_time, type) values (user_id, message, sending_time, type)",
    "description": "insert data into schedule_message table"
  },
  {
    "schedule_name": "keyword:merge",
    "query": "insert into chat_bot_question (value, workspace_id, keyword_or_question, erp_or_watson) values (value, workspace_id, keyword_or_question, erp_or_watson)",
    "description": "insert data into chat_bot_question table"
  },
  {
    "schedule_name": "keyword:merge",
    "query": "insert into chat_bot_question_example (question, chatbot_question_id, types) values (question, chatbot_question_id, types)",
    "description": "insert data into chat_bot_question_example table"
  },
  {
    "schedule_name": "keyword:merge",
    "query": "select * from chat_bot_keyword_value where chat_bot_keyword_id = `id`",
    "description": "get data from chat_bot_keyword_value table "
  },
  {
    "schedule_name": "merge:duplicate-products",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "merge:duplicate-products",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "merge:duplicate-products",
    "query": "select * from product where sku = `sku`",
    "description": "get all data of product based on sku"
  },
  {
    "schedule_name": "memory_usage",
    "query": "inser into memory_usage (total, used, free, buff_cache, available) values (total, used, free, buff_cache, available)",
    "description": "insert data into memory_usage table"
  },
  {
    "schedule_name": "manual-fix:brand",
    "query": "select * from brand where name = `name` and id not in `[]`",
    "description": "get all data of brand based on name and id"
  },
  {
    "schedule_name": "index:bulk-messaging-keyword-customer",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "index:bulk-messaging-keyword-customer",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "index:bulk-messaging-keyword-customer",
    "query": "select * from customer where is_categorized_for_bulk_messages = 0",
    "description": "get data from customer based on is_categorized_for_bulk_messages"
  },
  {
    "schedule_name": "index:bulk-messaging-keyword-customer",
    "query": "select * from bulk_customer_replies_keyword where is_processed = 0",
    "description": "get all data from bulk_customer_replies_keyword based on is_processed"
  },
  {
    "schedule_name": "index:bulk-messaging-keyword-customer",
    "query": "select * from customers",
    "description": "get all customer data"
  },
  {
    "schedule_name": "index:bulk-messaging-keyword-customer",
    "query": "update bulk_customer_replies_keyword set is_processed = 1 where is_processed = 0",
    "description": "update bulk_customer_replies_keyword table"
  },
  {
    "schedule_name": "external-status:update",
    "query": "select * from product where status_id = `status_id`",
    "description": "get all products based on status_id"
  },
  {
    "schedule_name": "image:create-schedule",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "image:create-schedule",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "image:create-schedule",
    "query": "insert into image_schedule (image_id, facebook, instagram, description, scheduled_for, status) values (image_id, facebook, instagram, description, scheduled_for, status)",
    "description": "insert data into image_schedule table"
  },
  {
    "schedule_name": "image:create-schedule",
    "query": "insert into schedule_group (image, scheduled_for, description, status) values (image, scheduled_for, description, status)",
    "description": "insert data into schedule_group table"
  },
  {
    "schedule_name": "image:create-schedule",
    "query": "select image_id from image_schedule orderBy id ",
    "description": "get image_id dfrom image_schedule order them by id"
  },
  {
    "schedule_name": "image:create-schedule",
    "query": "select * from image where id in `schedules`",
    "description": "get data of image table"
  },
  {
    "schedule_name": "image:create-schedule",
    "query": "select * from image where is_scheduled = 0 and status = 2 and brand not in `brands`",
    "description": "get all data from image table based on is_scheduled, status and brand "
  },
  {
    "schedule_name": "MailingListSendMail",
    "query": "select * from mailing_list_email orderBy created_at",
    "description": "get all data from mailing_list_email orderthem by created_at"
  },
  {
    "schedule_name": "farfetch:import-suppliers",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "import:customers-by-keyword-to-category",
    "query": "select * from designer",
    "description": "select all data in designer table"
  },
  {
    "schedule_name": "import:customers-by-keyword-to-category",
    "query": "select * from supplier where supplier = supplier",
    "description": "select all data in designer table"
  },
  {
    "schedule_name": "import:customers-by-keyword-to-category",
    "query": "update supplier set social_handle=social_handle,instagram_handle=instagram_handle,address=address,email=email,phone=phone,website=website,brands=brands where id =id",
    "description": "update the social_handle,instagram_handle,address,email,phone and website field value in supplier table where id equal id"
  },
  {
    "schedule_name": "import:customers-by-keyword-to-category",
    "query": "insert into agent (model_id,model_type,name,phone,email) values (model_id,model_type,name,phone,email)",
    "description": "insert the record in agent table"
  },
  {
    "schedule_name": "import:customers-by-keyword-to-category",
    "query": "insert into supplier (source,supplier,brands,address,email,phone,website,social_handle,instagram_handle) values (source,supplier,brands,address,email,phone,website,social_handle,instagram_handle)",
    "description": "insert the record in supplier table"
  },
  {
    "schedule_name": "import:customers-by-keyword-to-category",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "giglio:download-images",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "giglio:download-images",
    "query": "select * from product where id = 2754",
    "description": "select all data in product table where id equal 2754"
  },
  {
    "schedule_name": "giglio:download-images",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "import-watson:intents",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "import-watson:intents",
    "query": "select * from chatbot_question where value = value",
    "description": "select all data in chatbot_question where value equal value"
  },
  {
    "schedule_name": "import-watson:intents",
    "query": "insert into chatbot_question (value,workspace_id) values (value,workspace_id)",
    "description": "insert the record in chatbot_question table"
  },
  {
    "schedule_name": "import-watson:intents",
    "query": "insert into chatbot_question_example (chatbot_question_id,question,text) values (chatbot_question_id,question,text)",
    "description": "insert the record in chatbot_question table"
  },
  {
    "schedule_name": "import-watson:intents",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "whatsppconfig:frequency",
    "query": "select * from whatsapp_config where is_customer_support = 0",
    "description": "select all data in whatsapp_config table where is_customer_support equal 0"
  },
  {
    "schedule_name": "whatsppconfig:frequency",
    "query": "update whatsapp_config set frequency=frequency where id = id",
    "description": "update frequency field value in whatsapp_config table"
  },
  {
    "schedule_name": "influencer:description",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "influencer:description",
    "query": "select * from scrap_influencer",
    "description": "select all data in scrap_influencer table"
  },
  {
    "schedule_name": "influencer:description",
    "query": "update `scrap_influencer` set `email` = email where id=id",
    "description": "update email field in scrap_influencer table where id equal id"
  },
  {
    "schedule_name": "influencer:description",
    "query": "update `scrap_influencer` set `country` = country where id=id",
    "description": "update country field in scrap_influencer table where id equal id"
  },
  {
    "schedule_name": "influencer:description",
    "query": "update `scrap_influencer` set `facebook` = facebook where id=id",
    "description": "update facebook field value in scrap_influencer table where id equal id"
  },
  {
    "schedule_name": "influencer:description",
    "query": "update `scrap_influencer` set `twitter` = twitter where id=id",
    "description": "update twitter field value  in scrap_influencer table where id equal id"
  },
  {
    "schedule_name": "influencer:description",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "influencers:startstop",
    "query": "select * from  influencer_keyword",
    "description": "select all data in influencer_keyword table"
  },
  {
    "schedule_name": "influencers:startstop",
    "query": "select * from  influencer_keyword where id = id",
    "description": "select all data in influencer_keyword table  where id equal id"
  },
  {
    "schedule_name": "plesk:insert",
    "query": "select * from  email_address where username = username",
    "description": "select all data in email_address table  where username equal username"
  },
  {
    "schedule_name": "plesk:insert",
    "query": "insert into email_address (from_name,from_address,driver,host,port,encryption,username,password) values (from_name,from_address,'smtp',host,465,encryption,username,password)",
    "description": "insert the record in email_address table"
  },
  {
    "schedule_name": "store-website-shipping:insert",
    "query": "select * from simply_duty_country",
    "description": "select all data in simply_duty_country table"
  },
  {
    "schedule_name": "store-website-shipping:insert",
    "query": "select * from store_website where api_token != ''",
    "description": "select all data in store_website table where api_token != ''"
  },
  {
    "schedule_name": "instagram:handler",
    "query": "select * from `accounts` where `accounts`.`deleted_at` is null order by `id` desc",
    "description": "select all data in accounts table where deleted_at is null order by id desc"
  },
  {
    "schedule_name": "instagram:handler",
    "query": "update accounts set last_cron_time=last_cron_time where id=id",
    "description": "update last_cron_time field value in accounts table where id equal id"
  },
  {
    "schedule_name": "IosAdsReport:check",
    "query": "insert into app_ads_report (product_id,networks,start_date,end_date,revenue,requests,impressions,ecpm,fillrate,ctr,clicks,requests_filled) values(product_id,networks,start_date,end_date,revenue,requests,impressions,ecpm,fillrate,ctr,clicks,requests_filled)",
    "description": "insert the record in app_ads_report table"
  },
  {
    "schedule_name": "IosPaymentsReport:check",
    "query": "insert into app_payment_report (product_id,group_by,start_date,end_date,revenue,converted_revenue,financial_revenue,estimated_revenue,storefront,store) values(product_id,group_by,start_date,end_date,revenue,converted_revenue,financial_revenue,estimated_revenue,storefront,store)",
    "description": "insert the record in app_payment_report table"
  },
  {
    "schedule_name": "IosRatingsReport:check",
    "query": "insert into app_payment_report (product_id,group_by,start_date,end_date,breakdown,new,average,total,new_average,new_total,positive,negative,neutral,new_positive,new_negative,new_neutral,storefront,store) values(product_id,group_by,start_date,end_date,breakdown,new,average,total,new_average,new_total,positive,negative,neutral,new_positive,new_negative,new_neutral,storefront,store)",
    "description": "insert the record in app_payment_report table"
  },
  {
    "schedule_name": "IosSalesReport:check",
    "query": "insert into App_sales_report ('group_by', 'start_date', 'end_date', 'product_id', 'downloads', 're_downloads', 'uninstalls', 'updates', 'returns', 'net_downloads', 'promos', 'revenue', 'returns_amount', 'edu_downloads', 'gifts', 'gift_redemptions', 'edu_revenue', 'gross_revenue', 'gross_returns_amount', 'gross_edu_revenue', 'business_downloads', 'business_revenue', 'gross_business_revenue', 'standard_downloads', 'standard_revenue', 'gross_standard_revenue', 'app_downloads', 'app_returns', 'iap_amount', 'iap_returns', 'subscription_purchases', 'subscription_returns', 'app_revenue', 'app_returns_amount', 'gross_app_revenue', 'gross_app_returns_amount', 'iap_revenue', 'iap_returns_amount', 'gross_iap_revenue', 'gross_iap_returns_amount', 'subscription_revenue', 'subscription_returns_amount', 'gross_subscription_revenue', 'gross_subscription_returns_amount', 'pre_orders', 'storefront', 'store') values('group_by', 'start_date', 'end_date', 'product_id', 'downloads', 're_downloads', 'uninstalls', 'updates', 'returns', 'net_downloads', 'promos', 'revenue', 'returns_amount', 'edu_downloads', 'gifts', 'gift_redemptions', 'edu_revenue', 'gross_revenue', 'gross_returns_amount', 'gross_edu_revenue', 'business_downloads', 'business_revenue', 'gross_business_revenue', 'standard_downloads', 'standard_revenue', 'gross_standard_revenue', 'app_downloads', 'app_returns', 'iap_amount', 'iap_returns', 'subscription_purchases', 'subscription_returns', 'app_revenue', 'app_returns_amount', 'gross_app_revenue', 'gross_app_returns_amount', 'iap_revenue', 'iap_returns_amount', 'gross_iap_revenue', 'gross_iap_returns_amount', 'subscription_revenue', 'subscription_returns_amount', 'gross_subscription_revenue', 'gross_subscription_returns_amount', 'pre_orders', 'storefront', 'store')",
    "description": "insert the record in App_sales_report table"
  },
  {
    "schedule_name": "IosSalesReport:check",
    "query": "insert into app_sales_report ('group_by', 'start_date', 'end_date', 'product_id', 'downloads', 're_downloads', 'uninstalls', 'updates', 'returns', 'net_downloads', 'promos', 'revenue', 'returns_amount', 'edu_downloads', 'gifts', 'gift_redemptions', 'edu_revenue', 'gross_revenue', 'gross_returns_amount', 'gross_edu_revenue', 'business_downloads', 'business_revenue', 'gross_business_revenue', 'standard_downloads', 'standard_revenue', 'gross_standard_revenue', 'app_downloads', 'app_returns', 'iap_amount', 'iap_returns', 'subscription_purchases', 'subscription_returns', 'app_revenue', 'app_returns_amount', 'gross_app_revenue', 'gross_app_returns_amount', 'iap_revenue', 'iap_returns_amount', 'gross_iap_revenue', 'gross_iap_returns_amount', 'subscription_revenue', 'subscription_returns_amount', 'gross_subscription_revenue', 'gross_subscription_returns_amount', 'pre_orders', 'storefront', 'store') values('group_by', 'start_date', 'end_date', 'product_id', 'downloads', 're_downloads', 'uninstalls', 'updates', 'returns', 'net_downloads', 'promos', 'revenue', 'returns_amount', 'edu_downloads', 'gifts', 'gift_redemptions', 'edu_revenue', 'gross_revenue', 'gross_returns_amount', 'gross_edu_revenue', 'business_downloads', 'business_revenue', 'gross_business_revenue', 'standard_downloads', 'standard_revenue', 'gross_standard_revenue', 'app_downloads', 'app_returns', 'iap_amount', 'iap_returns', 'subscription_purchases', 'subscription_returns', 'app_revenue', 'app_returns_amount', 'gross_app_revenue', 'gross_app_returns_amount', 'iap_revenue', 'iap_returns_amount', 'gross_iap_revenue', 'gross_iap_returns_amount', 'subscription_revenue', 'subscription_returns_amount', 'gross_subscription_revenue', 'gross_subscription_returns_amount', 'pre_orders', 'storefront', 'store')",
    "description": "insert the record in app_sales_report table"
  },
  {
    "schedule_name": "IosSubscriptionReport:check",
    "query": "insert into ios_subscription_report ('group_by', 'start_date', 'end_date', 'product_id', 'active_subscriptions', 'active_free_trials', 'new_subscriptions', 'cancelled_subscriptions', 'new_trials', 'trial_conversion_rate', 'mrr', 'actual_revenue', 'renewals', 'first_year_subscribers', 'non_first_year_subscribers', 'reactivations', 'transitions_out', 'trial_cancellations', 'transitions_in', 'activations', 'cancellations', 'trial_conversions', 'churn', 'gross_revenue', 'gross_mrr', 'active_grace', 'new_grace', 'grace_drop_off', 'grace_recovery', 'new_trial_grace', 'trial_grace_drop_off', 'trial_grace_recovery', 'active_trials', 'active_discounted_subscriptions', 'all_active_subscriptions', 'paying_subscriptions', 'all_subscribers', 'storefront', 'store') values ('group_by', 'start_date', 'end_date', 'product_id', 'active_subscriptions', 'active_free_trials', 'new_subscriptions', 'cancelled_subscriptions', 'new_trials', 'trial_conversion_rate', 'mrr', 'actual_revenue', 'renewals', 'first_year_subscribers', 'non_first_year_subscribers', 'reactivations', 'transitions_out', 'trial_cancellations', 'transitions_in', 'activations', 'cancellations', 'trial_conversions', 'churn', 'gross_revenue', 'gross_mrr', 'active_grace', 'new_grace', 'grace_drop_off', 'grace_recovery', 'new_trial_grace', 'trial_grace_drop_off', 'trial_grace_recovery', 'active_trials', 'active_discounted_subscriptions', 'all_active_subscriptions', 'paying_subscriptions', 'all_subscribers', 'storefront', 'store')",
    "description": "insert the record in ios_subscription_report table"
  },
  {
    "schedule_name": "IosUsageReport:check",
    "query": "insert into app_usage_report ('group_by', 'start_date', 'end_date', 'product_id', 'crashes', 'sessions', 'app_store_views', 'unique_app_store_views', 'daily_active_devices', 'monthly_active_devices', 'paying_users', 'impressions', 'uninstalls', 'unique_impressions', 'avg_daily_active_devices', 'avg_optin_rate', 'storefront', 'store') values ('group_by', 'start_date', 'end_date', 'product_id', 'crashes', 'sessions', 'app_store_views', 'unique_app_store_views', 'daily_active_devices', 'monthly_active_devices', 'paying_users', 'impressions', 'uninstalls', 'unique_impressions', 'avg_daily_active_devices', 'avg_optin_rate', 'storefront', 'store')",
    "description": "insert the record in app_usage_report table"
  },
  {
    "schedule_name": "github:load_branch_state",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "github:load_branch_state",
    "query": "insert into github_branch_state ('repository_id', 'branch_name', 'ahead_by', 'behind_by', 'last_commit_author_username', 'last_commit_time') values ('repository_id', 'branch_name', 'ahead_by', 'behind_by', 'last_commit_author_username', 'last_commit_time')",
    "description": "insert the record in github_branch_state table"
  },
  {
    "schedule_name": "github:load_branch_state",
    "query": "delete  from  github_branch_state WHERE repository_id=repository_id and not branch_name !=branch_name",
    "description": "delete route id in github_branch_state WHERE repository_id=repository_id and not branch_name !=branch_name"
  },
  {
    "schedule_name": "github:load_branch_state",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "hubstaff:load_activities",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "hubstaff:load_activities",
    "query": "insert into hubstaff_activity (user_id,task_id,starts_at,tracked,keyboard,mouse,overall) values (user_id,task_id,starts_at,tracked,keyboard,mouse,overall)",
    "description": "insert the record in hubstaff_activity table"
  },
  {
    "schedule_name": "sentry:load_error_logs",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "sentry:load_error_logs",
    "query": "DELETE FROM sentry_error_log",
    "description": "delete all data in sentry_error_log table"
  },
  {
    "schedule_name": "sentry:load_error_logs",
    "query": "insert into sentry_error_log ('error_id','error_title','issue_type','issue_category','is_unhandled','first_seen','last_seen','project_id','total_events','total_user','device_name','os','os_name','release_version') values ('error_id','error_title','issue_type','issue_category','is_unhandled','first_seen','last_seen','project_id','total_events','total_user','device_name','os','os_name','release_version')",
    "description": "insert the record in sentry_error_log table"
  },
  {
    "schedule_name": "sentry:load_error_logs",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "timedoctor:load_time_doctor_activity {id}",
    "query": "select * from time_doctor_account id =id",
    "description": "select all data in time_doctor_account where id equal id"
  },
  {
    "schedule_name": "timedoctor:load_time_doctor_activity {id}",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "timedoctor:load_time_doctor_activity {id}",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "log_scraper:delete",
    "query": "DELETE FROM log_scraper where created_at <= current date",
    "description": "delete all data in log_scraper table where created_at <= current date"
  },
  {
    "schedule_name": "magento:get-config-value",
    "query": "select `magento_settings`.*, `users`.`name` as `uname` from `magento_settings` left join `users` on `magento_settings`.`created_by` = `users`.`id` order by `magento_settings`.`created_at` desc",
    "description": ""
  },
  {
    "schedule_name": "magento:get-config-value",
    "query": "select * from `store_website` where id= id",
    "description": "select all data in store_website table"
  },
  {
    "schedule_name": "magento:get-config-value",
    "query": "update magento_setting set value_on_magento=value_on_magento where id=id",
    "description": "update value_on_magento field value in magento_setting table"
  },
  {
    "schedule_name": "command:MagentoDevUpdateScript {id?} {folder_name?}",
    "query": "select * from `store_websites` where `is_dev_website` = 1 and `id` = ? and `store_websites`.`deleted_at` is null",
    "description": "select all data in store_websites table where is_dev_website = 1 and id = ? and deleted_at is null"
  },
  {
    "schedule_name": "command:MagentoDevUpdateScript {id?} {folder_name?}",
    "query": "insert into magento_dev_scrip_update_log (store_website_id,website,response,command_name,site_folder) values (store_website_id,website,response,command_name,site_folder)",
    "description": "insert the record in magento_dev_scrip_update_log table"
  },
  {
    "schedule_name": "command:MagentoDevUpdateScriptAsset {id?} {folder_name?}",
    "query": "select * from assets_manager where id= id",
    "description": "select all data in assets_manager table where id equal id"
  },
  {
    "schedule_name": "command:MagentoDevUpdateScriptAsset {id?} {folder_name?}",
    "query": "insert into asset_magento_dev_scrip_update_log (asset_manager_id,user_id,ip,response,command_name,site_folder) values (asset_manager_id,user_id,ip,response,command_name,site_folder)",
    "description": "insert the record in asset_magento_dev_scrip_update_log table"
  },
  {
    "schedule_name": "command:MagentoDevUpdateScriptAsset {id?} {folder_name?}",
    "query": "insert into asset_magento_dev_scrip_update_log (store_website_id,asset_manager_id,user_id,ip,response,command_name,site_folder) values (store_website_id,asset_manager_id,user_id,ip,response,command_name,site_folder)",
    "description": "insert the record in asset_magento_dev_scrip_update_log table"
  },
  {
    "schedule_name": "Magento-Product:Api",
    "query": "select * from `log_list_magentos` inner join `products` as `p` on `p`.`id` = `log_list_magentos`.`product_id` where `sync_status` = ? group by `product_id`, `store_website_id` order by `log_list_magentos`.`id` desc",
    "description": ""
  },
  {
    "schedule_name": "Magento-Product:Api",
    "query": "insert into log_magento_api (magento_api_search_product_id,api_log,message) values (magento_api_search_product_id,'success','Product Unique id Generated: ')",
    "description": "insert record in log_magento_api table"
  },
  {
    "schedule_name": "Magento-Product:Api",
    "query": "select * from store_website where id = id",
    "description": "select all data in store_website table where id equal id"
  },
  {
    "schedule_name": "Magento-Product:Api",
    "query": "insert into log_magento_api (magento_api_search_product_id,api_log,message) values (magento_api_search_product_id,'helper_output',message)",
    "description": "insert record in log_magento_api table"
  },
  {
    "schedule_name": "Magento-Product:Api",
    "query": "select `wsv`.* from `websites` inner join `website_stores` as `ws` on `ws`.`website_id` = `websites`.`id` inner join `website_store_views` as `wsv` on `wsv`.`website_store_id` = `ws`.`id` where `websites`.`store_website_id` = ? and `wsv`.`name` like ? group by `ws`.`name`",
    "description": ""
  },
  {
    "schedule_name": "Magento-Product:Api",
    "query": "insert into store_magento_api_search_product ('website_id','website','sku','size','category_names','brands','dimensions','composition','size_chart_url','images','english','arabic','german','spanish','french','italian','japanese','korean','russian','chinese','status','log_refid') values ('website_id','website','sku','size','category_names','brands','dimensions','composition','size_chart_url','images','english','arabic','german','spanish','french','italian','japanese','korean','russian','chinese','status','log_refid')",
    "description": "insert record in store_magento_api_search_product table"
  },
  {
    "schedule_name": "command:MagentoReportLog",
    "query": "select * from store_website where server_ip != null",
    "description": "select all dta in store_website table where server_ip not null"
  },
  {
    "schedule_name": "command:MagentoReportLog",
    "query": "insert into website_log (sql_query, time, module, website_id, type) values (sql_query, time, module, website_id, type)",
    "description": "insert data into website log table"
  },
  {
    "schedule_name": "command:MagentoCreatRunCommand {id?}",
    "query": "select * from magento_command where id = id",
    "description": "select all data in magento_command table where id equal id"
  },
  {
    "schedule_name": "command:MagentoCreatRunCommand {id?}",
    "query": "insert into magento_command_run_log (command_id,user_id,website_ids,command_name,server_ip,command_type,response) values (command_id,user_id,website_ids,command_name,server_ip,command_type,response)",
    "description": "insert record in magento_command_run_log table"
  },
  {
    "schedule_name": "command:MagentoCreatRunCommand {id?}",
    "query": "select * from store_website where id = id",
    "description": "select all data in store_website table where id equal id"
  },
  {
    "schedule_name": "command:MagentoCreatRunCommand {id?}",
    "query": "insert into magento_command_run_log (command_id,user_id,website_ids,command_name,server_ip,command_type,response) values (command_id,user_id,website_ids,command_name,server_ip,command_type,response)",
    "description": "insert record in magento_command_run_log table"
  },
  {
    "schedule_name": "command:MagentoSettingUpdates",
    "query": "select * from store_website where api_token != null and magento_url != null and server_ip != null",
    "description": "select all data in store_website table where api_token,magento_url and server_ip not null  "
  },
  {
    "schedule_name": "command:MagentoSettingUpdates",
    "query": "select * from magento_setting where store_website_id = store_website_id and path = path",
    "description": "select all data in magento_setting table where store_website_id equal store_website_id and path equal path"
  },
  {
    "schedule_name": "command:MagentoSettingUpdates",
    "query": "update magento_setting set config_id=config_id,scope=scope,store_website_id=store_website_id,website_store_id=website_store_id,scope_id=scope_id,path=path,value=value,updated_at=updated_at where id=id",
    "description": "update record in magento_setting table where id equal id"
  },
  {
    "schedule_name": "command:MagentoSettingUpdates",
    "query": "insert into magento_setting (config_id,scope,store_website_id,website_store_id,scope_id,path,value,updated_at) values (config_id,scope,store_website_id,website_store_id,scope_id,path,value,updated_at)",
    "description": "insert record in magento_setting table "
  },
  {
    "schedule_name": "command:MagentoSettingUpdates",
    "query": "insert into magento_setting_update_responseLog (website_id,response) values (website_id,response)",
    "description": "insert record in magento_setting_update_responseLog table "
  },
  {
    "schedule_name": "command:MagentoSettingUpdates",
    "query": "insert into magento_setting_update_responseLog (website_id,magento_setting_id,response) values (website_id,magento_setting_id,response)",
    "description": "insert record in magento_setting_update_responseLog table "
  },
  {
    "schedule_name": "product:remove-categories-with-subcategories",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "product:remove-categories-with-subcategories",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "product:remove-categories-with-subcategories",
    "query": "select * from product",
    "description": "select all data in product table"
  },
  {
    "schedule_name": "product:remove-categories-with-subcategories",
    "query": "select * from category where id=id",
    "description": "select all data in category table where id equal id"
  },
  {
    "schedule_name": "product:remove-categories-with-subcategories",
    "query": "update product set category=category where id=id",
    "description": "update the category field in product table where id equal id"
  },
  {
    "schedule_name": "product:remove-categories-with-subcategories",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "remove-table:log-scraper",
    "query": "select * from log_scraper",
    "description": "select all data in log_scraper table"
  },
  {
    "schedule_name": "remove-table:log-scraper",
    "query": "select * from scraped_products where sku=sku and website=website and url=url",
    "description": "select all data in scraped_products table where sku equal sku and website equal website and url equal url"
  },
  {
    "schedule_name": "remove-unwanted:images",
    "query": "select * from mediables where media_id=media_id",
    "description": "select all data in mediables table where media_id equal media_id"
  },
  {
    "schedule_name": "scraper:missing-data",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "scraper:missing-data",
    "query": " SELECT    MAX(id),     website,     url,     sku,     brand_id,     category,     title,     description,     properties,     images,     size_system,     currency,     price,     discounted_price,     is_sale FROM     scraped_products WHERE     validated=1 AND     description LIKE '%shoe%' GROUP BY     website ",
    "description": "select value in scraped_products table validated=1 and description LIKE '%shoe%' group by website"
  },
  {
    "schedule_name": "scraper:missing-data",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "scrapedProducts:setFormattedPricing",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "scrapedProducts:setFormattedPricing",
    "query": "select * from scraped_products ",
    "description": "select all data in scraped_products table"
  },
  {
    "schedule_name": "scrapedProducts:setFormattedPricing",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "test:test",
    "query": "insert into sku_color_references (brand_id,color_code,color_name) values (brand_id,color_code,color_name) ",
    "description": "insert record in sku_color_references table"
  },
  {
    "schedule_name": "hubstaff:upload_tasks",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "hubstaff:upload_tasks",
    "query": "select `tasks`.`id`, `tasks`.`task_subject` as `summary`, `hubstaff_members`.`hubstaff_user_id` as `assignee_id` from `tasks` left join `hubstaff_members` on `hubstaff_members`.`user_id` = `tasks`.`assign_to` where `is_completed` is null and `hubstaff_task_id` = ?",
    "description": "select id and task_subject in tasks and hubstaff_user_id in hubstaff_members table from `tasks` left join `hubstaff_members` on `hubstaff_members`.`user_id` = `tasks`.`assign_to` where `is_completed` is null and `hubstaff_task_id` = ?"
  },
  {
    "schedule_name": "hubstaff:upload_tasks",
    "query": "select `developer_tasks`.`id`, `developer_tasks`.`subject` as `summary`, `developer_tasks`.`task_type_id`, `hubstaff_members`.`hubstaff_user_id` as `assignee_id` from `developer_tasks` left join `hubstaff_members` on `hubstaff_members`.`user_id` = `developer_tasks`.`user_id` where `status` in (?, ?, ?, ?) and `hubstaff_task_id` = ?",
    "description": "select id and task_subject in developer_tasks and task_type_id in developer_tasks from `developer_tasks` left join `hubstaff_members` on `hubstaff_members`.`user_id` = `developer_tasks`.`user_id` where `status` in (?, ?, ?, ?) and `hubstaff_task_id` = ?"
  },
  {
    "schedule_name": "hubstaff:upload_tasks",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "whatsapp:move-to-new",
    "query": "CustomerSELECT  DISTINCT(customer_id)    FROM  chat_messages    WHERE  customer_id IN (SELECT    c.idFROM    customers cWHERE    do_not_disturb=0 AND    is_blocked=0  ) AND  number IS NOT NULL AND  created_at > DATE_SUB(NOW(), INTERVAL '.$days.' DAY)",
    "description": "select DISTINCT(customer_id) from chat_messages table where customer_id IN (SELECT    c.idFROM    customers cWHERE    do_not_disturb=0 AND    is_blocked=0  ) AND  number IS NOT NULL AND  created_at > DATE_SUB(NOW(), INTERVAL '.$days.' DAY)"
  },
  {
    "schedule_name": "whatsapp:move-to-new",
    "query": "select all data in customer  where id=customer_id",
    "description": "select all data in customer table where id equal customer_id"
  },
  {
    "schedule_name": "whatsapp:move-to-new",
    "query": "update customer set whatsapp_number=whatsapp_number where id=id",
    "description": "update whatsapp_number field in customer table where id equal id"
  },
  {
    "schedule_name": "whatsapp:move-to-new",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "attach-product-id:order-products",
    "query": "select * from order_product where product_id = null",
    "description": "select all data from order_prodcut table based on product_id"
  },
  {
    "schedule_name": "attach-product-id:order-products",
    "query": "select * from product where sku = `sku`",
    "description": "select all from product table"
  },
  {
    "schedule_name": "attach-product-id:scraper-products",
    "query": "select * from scraped_products where product_id = null",
    "description": "select all scraped product based on product_id"
  },
  {
    "schedule_name": "attach-product-id:scraper-products",
    "query": "select * from product where sku = `sku`",
    "description": "select all from product table"
  },
  {
    "schedule_name": "store-website:push-brand-in-live",
    "query": "select * from store_websites where (api_token != ? or (magento_url != ? and magento_username != ? and magento_password = ?)) and store_websites.deleted_at is null",
    "description": "select data from store_website based on apitoken and deleted_at"
  },
  {
    "schedule_name": "store-website:push-brand-in-live",
    "query": "select brands.* from brands left join store_website_brands as swb on brands.id = swb.brand_id and swb.store_website_id = ? where swb.magento_value is null",
    "description": "select data from brands and store_website with left join"
  },
  {
    "schedule_name": "store-website:push-category-in-live",
    "query": "select * from store_websites where (api_token != ? or (magento_url != ? and magento_username != ? and magento_password = ?)) and store_websites.deleted_at is null",
    "description": "select data from store_website based on apitoken and deleted_at"
  },
  {
    "schedule_name": "store-website:push-category-in-live",
    "query": "select categories.* from categories left join store_website_categories as swc on categories.id = swc.category_id and swc.store_website_id = ? where swc.remote_id is null",
    "description": "select data from categories and store_website with left join"
  },
  {
    "schedule_name": "product:correctPricing",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "product:correctPricing",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "product:correctPricing",
    "query": "SELECT p.id, p.sku, p.price*1 as price ,  MIN(sp.price_eur) AS sp_price_min,MAX(sp.price_eur) AS sp_price_max,GREATEST(p.price*1,MIN(sp.price_eur),MAX(sp.price_eur)) AS new_price FROM products JOIN scraped_products sp ON p.id=sp.product_id WHERE discounted_price IS NOT NULL AND p.price!=sp.price_eur GROUP BY p.id HAVING MIN(sp.price_eur) > 0 AND MAX(sp.price_eur) > 0 ORDER BY p.id",
    "description": ""
  },
  {
    "schedule_name": "product:correctPricing",
    "query": "select * from product where id = `id`",
    "description": "select product data based on ID"
  },
  {
    "schedule_name": "create_mailing_list_news_letters",
    "query": "select * from store_website",
    "description": "select all data from store_website"
  },
  {
    "schedule_name": "create_mailing_list_news_letters",
    "query": "select * from language",
    "description": "select all data from language"
  },
  {
    "schedule_name": "create_mailing_list_news_letters",
    "query": "insert into mailing_list (id, name, language, website_id, service_id, remote_id, send_in_blue_account, send_in_blue_api) values (id, name, language, website_id, service_id, remote_id, send_in_blue_account, send_in_blue_api)",
    "description": "insert ata into mailing_list table"
  },
  {
    "schedule_name": "create_mailing_list_news_letters",
    "query": "select * from store_website",
    "description": "select all data from store_website"
  },
  {
    "schedule_name": "crop-reference:product",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "crop-reference:product",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "crop-reference:product",
    "query": "select * from croped_image_refrence where product_id = 0",
    "description": "select all data from croped_image_refrence"
  },
  {
    "schedule_name": "crop-reference:product",
    "query": "select id from product where id  = `id` fetch first",
    "description": "fetch first id from product table based on id"
  },
  {
    "schedule_name": "crop-reference:product",
    "query": "select * from croped_image_refrence where id = `id`",
    "description": "select all data from croped_image_refrence based on id"
  },
  {
    "schedule_name": "hubstaff:load_past_activities {start=2019-09-01} {end=2020-04-18} {user_ids=0}",
    "query": "insert into hubstaff_activity (id, user_id, task_id, starts_at, tracked, keyboard, mouse, overall) values (id, user_id, task_id, starts_at, tracked, keyboard, mouse, overall)",
    "description": "insert data into hubstaff_activity table"
  },
  {
    "schedule_name": "product:image-scraper {website?}",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "product:image-scraper {website?}",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "product:image-scraper {website?}",
    "query": "select * from scraped_products",
    "description": "get all data from scraped_products"
  },
  {
    "schedule_name": "product:image-scraper {website?}",
    "query": "select * from scraped_products where website = `website`",
    "description": "get all scraped_products based on website"
  },
  {
    "schedule_name": "import:issues",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "import:issues",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "import:issues",
    "query": "select * from issue",
    "description": "get all data from issue"
  },
  {
    "schedule_name": "import:issues",
    "query": "insert into (user_id, module_id, priority, subject, task, status, created_at, is_resolved, estimate_time, cost, task_type_id, responsible_user_id, created_at) values (user_id, module_id, priority, subject, task, status, created_at, is_resolved, estimate_time, cost, task_type_id, responsible_user_id, created_at)",
    "description": "insert data into developer_task table"
  },
  {
    "schedule_name": "import:issues",
    "query": "select * from erp_priority where model_id = `id` and model_type = `model_type` fetch first",
    "description": "select first record from erp_priority based on id and model_type"
  },
  {
    "schedule_name": "magento:sync-categories",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "magento:sync-categories",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "magento:sync-categories",
    "query": "select * from category where parent_id = 0",
    "description": "select all data from category based on parent_id"
  },
  {
    "schedule_name": "ai:queue-manually",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "ai:queue-manually",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "ai:queue-manually",
    "query": "select * from product where status_id > 2 and stock > 0",
    "description": "select all data from product based on status_id and stock"
  },
  {
    "schedule_name": "magento:queue-manually",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "magento:queue-manually",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "magento:queue-manually",
    "query": "iselect * from product where status_id = 9 and stock > 0",
    "description": "get data from product based on status_id and stock"
  },
  {
    "schedule_name": "media:check-file-exists",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "media:check-file-exists",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "media:check-file-exists",
    "query": "select * from product",
    "description": "get all data from product"
  },
  {
    "schedule_name": "order-status:move-to-new-field",
    "query": "select * from order where order_status != '' and order_status_id = null",
    "description": "get all data from order table "
  },
  {
    "schedule_name": "password:change-all",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "password:change-all",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "price:special",
    "query": "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name": "price:special",
    "query": "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name": "magento:push-pages",
    "query": "select * from store_website where id in $id and api_token != '' and remote_software = 2 and website_source = 'magento'",
    "description": "select data from store_website table based on apitoken, remote_software and website_source"
  },
  {
    "schedule_name": "magento:push-pages",
    "query": "select * from store_website where api_token != '' and remote_software =2 and website_source = `magento`",
    "description": "select data from store_website based on remote_software, api_token and website_source"
  },
  {
    "schedule_name": "magento:push-pages",
    "query": "insert into store_website (store_website_id, platform_id, title, url_key, layout, meta_title, meta_keywords, meta_description, content_heading, content) values (store_website_id, platform_id, title, url_key, layout, meta_title, meta_keywords, meta_description, content_heading, content)",
    "description": "insert data into store_website table"
  }
]
